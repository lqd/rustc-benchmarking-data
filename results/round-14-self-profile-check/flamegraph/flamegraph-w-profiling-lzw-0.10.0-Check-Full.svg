<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (193,131 samples, 0.13%)</title><rect x="11.3441%" y="101" width="0.1322%" height="15" fill="rgb(227,0,7)"/><text x="11.5941%" y="111.50"></text></g><g><title>is_copy_raw (175,832 samples, 0.12%)</title><rect x="13.8166%" y="85" width="0.1203%" height="15" fill="rgb(217,0,24)"/><text x="14.0666%" y="95.50"></text></g><g><title>adt_drop_tys (176,222 samples, 0.12%)</title><rect x="13.9995%" y="69" width="0.1206%" height="15" fill="rgb(221,193,54)"/><text x="14.2495%" y="79.50"></text></g><g><title>needs_drop_raw (939,412 samples, 0.64%)</title><rect x="13.9385%" y="85" width="0.6429%" height="15" fill="rgb(248,212,6)"/><text x="14.1885%" y="95.50"></text></g><g><title>is_copy_raw (674,047 samples, 0.46%)</title><rect x="14.1201%" y="69" width="0.4613%" height="15" fill="rgb(208,68,35)"/><text x="14.3701%" y="79.50"></text></g><g><title>evaluate_obligation (576,065 samples, 0.39%)</title><rect x="14.1872%" y="53" width="0.3943%" height="15" fill="rgb(232,128,0)"/><text x="14.4372%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (155,670 samples, 0.11%)</title><rect x="14.6800%" y="69" width="0.1065%" height="15" fill="rgb(207,160,47)"/><text x="14.9300%" y="79.50"></text></g><g><title>impl_parent (233,644 samples, 0.16%)</title><rect x="15.0580%" y="53" width="0.1599%" height="15" fill="rgb(228,23,34)"/><text x="15.3080%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (162,012 samples, 0.11%)</title><rect x="15.1071%" y="37" width="0.1109%" height="15" fill="rgb(218,30,26)"/><text x="15.3571%" y="47.50"></text></g><g><title>specialization_graph_of (1,115,813 samples, 0.76%)</title><rect x="14.7993%" y="69" width="0.7637%" height="15" fill="rgb(220,122,19)"/><text x="15.0493%" y="79.50"></text></g><g><title>impl_trait_ref (504,154 samples, 0.35%)</title><rect x="15.2180%" y="53" width="0.3450%" height="15" fill="rgb(250,228,42)"/><text x="15.4680%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (434,154 samples, 0.30%)</title><rect x="15.2659%" y="37" width="0.2971%" height="15" fill="rgb(240,193,28)"/><text x="15.5159%" y="47.50"></text></g><g><title>resolve_instance (1,489,944 samples, 1.02%)</title><rect x="14.5814%" y="85" width="1.0197%" height="15" fill="rgb(216,20,37)"/><text x="14.8314%" y="95.50"></text></g><g><title>thir_body (1,356,681 samples, 0.93%)</title><rect x="15.6117%" y="85" width="0.9285%" height="15" fill="rgb(206,188,39)"/><text x="15.8617%" y="95.50"></text></g><g><title>mir_const (9,077,162 samples, 6.21%)</title><rect x="10.3356%" y="133" width="6.2125%" height="15" fill="rgb(217,207,13)"/><text x="10.5856%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,094,998 samples, 5.54%)</title><rect x="11.0078%" y="117" width="5.5403%" height="15" fill="rgb(231,73,38)"/><text x="11.2578%" y="127.50">unsafet..</text></g><g><title>mir_built (7,410,491 samples, 5.07%)</title><rect x="11.4763%" y="101" width="5.0718%" height="15" fill="rgb(225,20,46)"/><text x="11.7263%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (10,263,605 samples, 7.02%)</title><rect x="9.7485%" y="149" width="7.0245%" height="15" fill="rgb(210,31,41)"/><text x="9.9985%" y="159.50">mir_promo..</text></g><g><title>mir_const_qualif (328,754 samples, 0.23%)</title><rect x="16.5481%" y="133" width="0.2250%" height="15" fill="rgb(221,200,47)"/><text x="16.7981%" y="143.50"></text></g><g><title>mir_const (245,272 samples, 0.17%)</title><rect x="16.6052%" y="117" width="0.1679%" height="15" fill="rgb(226,26,5)"/><text x="16.8552%" y="127.50"></text></g><g><title>unsafety_check_result (160,791 samples, 0.11%)</title><rect x="16.6630%" y="101" width="0.1100%" height="15" fill="rgb(249,33,26)"/><text x="16.9130%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (427,144 samples, 0.29%)</title><rect x="16.7739%" y="149" width="0.2923%" height="15" fill="rgb(235,183,28)"/><text x="17.0239%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (469,485 samples, 0.32%)</title><rect x="17.0662%" y="149" width="0.3213%" height="15" fill="rgb(221,5,38)"/><text x="17.3162%" y="159.50"></text></g><g><title>normalize_projection_ty (314,703 samples, 0.22%)</title><rect x="17.1721%" y="133" width="0.2154%" height="15" fill="rgb(247,18,42)"/><text x="17.4221%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,951,778 samples, 1.34%)</title><rect x="17.3875%" y="149" width="1.3358%" height="15" fill="rgb(241,131,45)"/><text x="17.6375%" y="159.50"></text></g><g><title>MIR_borrow_checking (25,914,128 samples, 17.74%)</title><rect x="0.9911%" y="181" width="17.7359%" height="15" fill="rgb(249,31,29)"/><text x="1.2411%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,827,326 samples, 17.68%)</title><rect x="1.0505%" y="165" width="17.6765%" height="15" fill="rgb(225,111,53)"/><text x="1.3005%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (192,782 samples, 0.13%)</title><rect x="18.7271%" y="181" width="0.1319%" height="15" fill="rgb(238,160,17)"/><text x="18.9771%" y="191.50"></text></g><g><title>hir_module_items (249,963 samples, 0.17%)</title><rect x="18.8590%" y="181" width="0.1711%" height="15" fill="rgb(214,148,48)"/><text x="19.1090%" y="191.50"></text></g><g><title>should_inherit_track_caller (206,431 samples, 0.14%)</title><rect x="19.4203%" y="133" width="0.1413%" height="15" fill="rgb(232,36,49)"/><text x="19.6703%" y="143.50"></text></g><g><title>codegen_fn_attrs (411,844 samples, 0.28%)</title><rect x="19.2999%" y="149" width="0.2819%" height="15" fill="rgb(209,103,24)"/><text x="19.5499%" y="159.50"></text></g><g><title>check_mod_attrs (778,018 samples, 0.53%)</title><rect x="19.0493%" y="165" width="0.5325%" height="15" fill="rgb(229,88,8)"/><text x="19.2993%" y="175.50"></text></g><g><title>check_mod_const_bodies (164,473 samples, 0.11%)</title><rect x="19.5818%" y="165" width="0.1126%" height="15" fill="rgb(213,181,19)"/><text x="19.8318%" y="175.50"></text></g><g><title>lookup_deprecation_entry (253,993 samples, 0.17%)</title><rect x="19.9565%" y="149" width="0.1738%" height="15" fill="rgb(254,191,54)"/><text x="20.2065%" y="159.50"></text></g><g><title>stability_index (176,492 samples, 0.12%)</title><rect x="20.0095%" y="133" width="0.1208%" height="15" fill="rgb(241,83,37)"/><text x="20.2595%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (598,057 samples, 0.41%)</title><rect x="19.7900%" y="165" width="0.4093%" height="15" fill="rgb(233,36,39)"/><text x="20.0400%" y="175.50"></text></g><g><title>misc_checking_1 (1,782,780 samples, 1.22%)</title><rect x="19.0303%" y="181" width="1.2202%" height="15" fill="rgb(226,3,54)"/><text x="19.2803%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (549,846 samples, 0.38%)</title><rect x="20.2515%" y="165" width="0.3763%" height="15" fill="rgb(245,192,40)"/><text x="20.5015%" y="175.50"></text></g><g><title>check_mod_liveness (430,225 samples, 0.29%)</title><rect x="20.3334%" y="149" width="0.2945%" height="15" fill="rgb(238,167,29)"/><text x="20.5834%" y="159.50"></text></g><g><title>misc_checking_2 (1,144,533 samples, 0.78%)</title><rect x="20.2505%" y="181" width="0.7833%" height="15" fill="rgb(232,182,51)"/><text x="20.5005%" y="191.50"></text></g><g><title>match_checking (593,177 samples, 0.41%)</title><rect x="20.6278%" y="165" width="0.4060%" height="15" fill="rgb(231,60,39)"/><text x="20.8778%" y="175.50"></text></g><g><title>check_match (568,347 samples, 0.39%)</title><rect x="20.6448%" y="149" width="0.3890%" height="15" fill="rgb(208,69,12)"/><text x="20.8948%" y="159.50"></text></g><g><title>check_private_in_public (190,442 samples, 0.13%)</title><rect x="21.0406%" y="165" width="0.1303%" height="15" fill="rgb(235,93,37)"/><text x="21.2906%" y="175.50"></text></g><g><title>death_checking (415,244 samples, 0.28%)</title><rect x="21.1710%" y="165" width="0.2842%" height="15" fill="rgb(213,116,39)"/><text x="21.4210%" y="175.50"></text></g><g><title>eval_to_const_value_raw (178,832 samples, 0.12%)</title><rect x="21.9593%" y="133" width="0.1224%" height="15" fill="rgb(222,207,29)"/><text x="22.2093%" y="143.50"></text></g><g><title>eval_to_const_value_raw (175,772 samples, 0.12%)</title><rect x="21.9614%" y="117" width="0.1203%" height="15" fill="rgb(206,96,30)"/><text x="22.2114%" y="127.50"></text></g><g><title>eval_to_allocation_raw (168,972 samples, 0.12%)</title><rect x="21.9661%" y="101" width="0.1156%" height="15" fill="rgb(218,138,4)"/><text x="22.2161%" y="111.50"></text></g><g><title>param_env (175,182 samples, 0.12%)</title><rect x="22.0817%" y="133" width="0.1199%" height="15" fill="rgb(250,191,14)"/><text x="22.3317%" y="143.50"></text></g><g><title>crate_lints (2,422,857 samples, 1.66%)</title><rect x="21.4562%" y="149" width="1.6582%" height="15" fill="rgb(239,60,40)"/><text x="21.7062%" y="159.50"></text></g><g><title>type_of (1,327,515 samples, 0.91%)</title><rect x="22.2059%" y="133" width="0.9086%" height="15" fill="rgb(206,27,48)"/><text x="22.4559%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (865,443 samples, 0.59%)</title><rect x="22.5221%" y="117" width="0.5923%" height="15" fill="rgb(225,35,8)"/><text x="22.7721%" y="127.50"></text></g><g><title>lint_checking (2,951,493 samples, 2.02%)</title><rect x="21.4552%" y="165" width="2.0200%" height="15" fill="rgb(250,213,24)"/><text x="21.7052%" y="175.50">l..</text></g><g><title>module_lints (527,146 samples, 0.36%)</title><rect x="23.1144%" y="149" width="0.3608%" height="15" fill="rgb(247,123,22)"/><text x="23.3644%" y="159.50"></text></g><g><title>lint_mod (522,886 samples, 0.36%)</title><rect x="23.1173%" y="133" width="0.3579%" height="15" fill="rgb(231,138,38)"/><text x="23.3673%" y="143.50"></text></g><g><title>privacy_access_levels (220,553 samples, 0.15%)</title><rect x="23.4752%" y="165" width="0.1509%" height="15" fill="rgb(231,145,46)"/><text x="23.7252%" y="175.50"></text></g><g><title>privacy_checking_modules (754,449 samples, 0.52%)</title><rect x="23.6262%" y="165" width="0.5164%" height="15" fill="rgb(251,118,11)"/><text x="23.8762%" y="175.50"></text></g><g><title>check_mod_privacy (751,909 samples, 0.51%)</title><rect x="23.6279%" y="149" width="0.5146%" height="15" fill="rgb(217,147,25)"/><text x="23.8779%" y="159.50"></text></g><g><title>misc_checking_3 (4,560,851 samples, 3.12%)</title><rect x="21.0338%" y="181" width="3.1215%" height="15" fill="rgb(247,81,37)"/><text x="21.2838%" y="191.50">mis..</text></g><g><title>impl_parent (848,578 samples, 0.58%)</title><rect x="25.0379%" y="117" width="0.5808%" height="15" fill="rgb(209,12,38)"/><text x="25.2879%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (578,987 samples, 0.40%)</title><rect x="25.2224%" y="101" width="0.3963%" height="15" fill="rgb(227,1,9)"/><text x="25.4724%" y="111.50"></text></g><g><title>impl_trait_ref (3,040,427 samples, 2.08%)</title><rect x="25.6187%" y="117" width="2.0809%" height="15" fill="rgb(248,47,43)"/><text x="25.8687%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,756,172 samples, 1.89%)</title><rect x="25.8132%" y="101" width="1.8864%" height="15" fill="rgb(221,10,30)"/><text x="26.0632%" y="111.50">m..</text></g><g><title>coherent_trait (5,230,658 samples, 3.58%)</title><rect x="24.2927%" y="149" width="3.5799%" height="15" fill="rgb(210,229,1)"/><text x="24.5427%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (5,221,328 samples, 3.57%)</title><rect x="24.2990%" y="133" width="3.5735%" height="15" fill="rgb(222,148,37)"/><text x="24.5490%" y="143.50">spec..</text></g><g><title>trait_impls_of (251,393 samples, 0.17%)</title><rect x="27.7005%" y="117" width="0.1721%" height="15" fill="rgb(234,67,33)"/><text x="27.9505%" y="127.50"></text></g><g><title>coherence_checking (5,293,499 samples, 3.62%)</title><rect x="24.2812%" y="165" width="3.6229%" height="15" fill="rgb(247,98,35)"/><text x="24.5312%" y="175.50">cohe..</text></g><g><title>associated_item (244,053 samples, 0.17%)</title><rect x="46.1773%" y="101" width="0.1670%" height="15" fill="rgb(247,138,52)"/><text x="46.4273%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (193,362 samples, 0.13%)</title><rect x="46.2120%" y="85" width="0.1323%" height="15" fill="rgb(213,79,30)"/><text x="46.4620%" y="95.50"></text></g><g><title>associated_items (359,844 samples, 0.25%)</title><rect x="46.1121%" y="117" width="0.2463%" height="15" fill="rgb(246,177,23)"/><text x="46.3621%" y="127.50"></text></g><g><title>adt_dtorck_constraint (156,812 samples, 0.11%)</title><rect x="46.6212%" y="85" width="0.1073%" height="15" fill="rgb(230,62,27)"/><text x="46.8712%" y="95.50"></text></g><g><title>dropck_outlives (501,754 samples, 0.34%)</title><rect x="46.4017%" y="117" width="0.3434%" height="15" fill="rgb(216,154,8)"/><text x="46.6517%" y="127.50"></text></g><g><title>adt_dtorck_constraint (269,042 samples, 0.18%)</title><rect x="46.5609%" y="101" width="0.1841%" height="15" fill="rgb(244,35,45)"/><text x="46.8109%" y="111.50"></text></g><g><title>generics_of (495,717 samples, 0.34%)</title><rect x="51.5945%" y="101" width="0.3393%" height="15" fill="rgb(251,115,12)"/><text x="51.8445%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (380,876 samples, 0.26%)</title><rect x="51.6731%" y="85" width="0.2607%" height="15" fill="rgb(240,54,50)"/><text x="51.9231%" y="95.50"></text></g><g><title>impl_trait_ref (625,974 samples, 0.43%)</title><rect x="52.0325%" y="101" width="0.4284%" height="15" fill="rgb(233,84,52)"/><text x="52.2825%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (510,173 samples, 0.35%)</title><rect x="52.1118%" y="85" width="0.3492%" height="15" fill="rgb(207,117,47)"/><text x="52.3618%" y="95.50"></text></g><g><title>predicates_of (490,585 samples, 0.34%)</title><rect x="52.4917%" y="101" width="0.3358%" height="15" fill="rgb(249,43,39)"/><text x="52.7417%" y="111.50"></text></g><g><title>predicates_defined_on (294,894 samples, 0.20%)</title><rect x="52.6257%" y="85" width="0.2018%" height="15" fill="rgb(209,38,44)"/><text x="52.8757%" y="95.50"></text></g><g><title>specializes (1,046,081 samples, 0.72%)</title><rect x="52.8275%" y="101" width="0.7160%" height="15" fill="rgb(236,212,23)"/><text x="53.0775%" y="111.50"></text></g><g><title>param_env (568,915 samples, 0.39%)</title><rect x="53.1541%" y="85" width="0.3894%" height="15" fill="rgb(242,79,21)"/><text x="53.4041%" y="95.50"></text></g><g><title>def_span (247,082 samples, 0.17%)</title><rect x="53.3743%" y="69" width="0.1691%" height="15" fill="rgb(211,96,35)"/><text x="53.6243%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (219,032 samples, 0.15%)</title><rect x="53.3935%" y="53" width="0.1499%" height="15" fill="rgb(253,215,40)"/><text x="53.6435%" y="63.50"></text></g><g><title>trait_impls_of (669,124 samples, 0.46%)</title><rect x="53.5568%" y="101" width="0.4580%" height="15" fill="rgb(211,81,21)"/><text x="53.8068%" y="111.50"></text></g><g><title>implementations_of_trait (267,892 samples, 0.18%)</title><rect x="53.8314%" y="85" width="0.1833%" height="15" fill="rgb(208,190,38)"/><text x="54.0814%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (185,061 samples, 0.13%)</title><rect x="53.8881%" y="69" width="0.1267%" height="15" fill="rgb(235,213,38)"/><text x="54.1381%" y="79.50"></text></g><g><title>evaluate_obligation (10,646,850 samples, 7.29%)</title><rect x="46.7451%" y="117" width="7.2868%" height="15" fill="rgb(237,122,38)"/><text x="46.9951%" y="127.50">evaluate_o..</text></g><g><title>generics_of (173,131 samples, 0.12%)</title><rect x="54.1298%" y="117" width="0.1185%" height="15" fill="rgb(244,218,35)"/><text x="54.3798%" y="127.50"></text></g><g><title>impl_item_implementor_ids (151,553 samples, 0.10%)</title><rect x="54.2482%" y="117" width="0.1037%" height="15" fill="rgb(240,68,47)"/><text x="54.4982%" y="127.50"></text></g><g><title>evaluate_obligation (155,071 samples, 0.11%)</title><rect x="54.6901%" y="101" width="0.1061%" height="15" fill="rgb(210,16,53)"/><text x="54.9401%" y="111.50"></text></g><g><title>method_autoderef_steps (315,483 samples, 0.22%)</title><rect x="54.5881%" y="117" width="0.2159%" height="15" fill="rgb(235,124,12)"/><text x="54.8381%" y="127.50"></text></g><g><title>predicates_of (332,305 samples, 0.23%)</title><rect x="54.9683%" y="117" width="0.2274%" height="15" fill="rgb(224,169,11)"/><text x="55.2183%" y="127.50"></text></g><g><title>predicates_defined_on (226,713 samples, 0.16%)</title><rect x="55.0406%" y="101" width="0.1552%" height="15" fill="rgb(250,166,2)"/><text x="55.2906%" y="111.50"></text></g><g><title>evaluate_obligation (161,373 samples, 0.11%)</title><rect x="56.2432%" y="101" width="0.1104%" height="15" fill="rgb(242,216,29)"/><text x="56.4932%" y="111.50"></text></g><g><title>is_copy_raw (184,062 samples, 0.13%)</title><rect x="56.3757%" y="101" width="0.1260%" height="15" fill="rgb(230,116,27)"/><text x="56.6257%" y="111.50"></text></g><g><title>evaluate_obligation (178,202 samples, 0.12%)</title><rect x="56.3797%" y="85" width="0.1220%" height="15" fill="rgb(228,99,48)"/><text x="56.6297%" y="95.50"></text></g><g><title>typeck (1,648,648 samples, 1.13%)</title><rect x="55.4095%" y="117" width="1.1284%" height="15" fill="rgb(253,11,6)"/><text x="55.6595%" y="127.50"></text></g><g><title>item_bodies_checking (41,863,904 samples, 28.65%)</title><rect x="27.9219%" y="165" width="28.6522%" height="15" fill="rgb(247,143,39)"/><text x="28.1719%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (41,860,814 samples, 28.65%)</title><rect x="27.9240%" y="149" width="28.6501%" height="15" fill="rgb(236,97,10)"/><text x="28.1740%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (41,801,034 samples, 28.61%)</title><rect x="27.9649%" y="133" width="28.6091%" height="15" fill="rgb(233,208,19)"/><text x="28.2149%" y="143.50">typeck</text></g><g><title>generics_of (473,768 samples, 0.32%)</title><rect x="58.6183%" y="101" width="0.3243%" height="15" fill="rgb(216,164,2)"/><text x="58.8683%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (336,235 samples, 0.23%)</title><rect x="58.7124%" y="85" width="0.2301%" height="15" fill="rgb(220,129,5)"/><text x="58.9624%" y="95.50"></text></g><g><title>impl_trait_ref (763,096 samples, 0.52%)</title><rect x="59.0346%" y="101" width="0.5223%" height="15" fill="rgb(242,17,10)"/><text x="59.2846%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (625,615 samples, 0.43%)</title><rect x="59.1287%" y="85" width="0.4282%" height="15" fill="rgb(242,107,0)"/><text x="59.3787%" y="95.50"></text></g><g><title>predicates_of (597,796 samples, 0.41%)</title><rect x="59.5794%" y="101" width="0.4091%" height="15" fill="rgb(251,28,31)"/><text x="59.8294%" y="111.50"></text></g><g><title>predicates_defined_on (334,795 samples, 0.23%)</title><rect x="59.7594%" y="85" width="0.2291%" height="15" fill="rgb(233,223,10)"/><text x="60.0094%" y="95.50"></text></g><g><title>specializes (1,921,723 samples, 1.32%)</title><rect x="59.9885%" y="101" width="1.3153%" height="15" fill="rgb(215,21,27)"/><text x="60.2385%" y="111.50"></text></g><g><title>param_env (1,162,574 samples, 0.80%)</title><rect x="60.5081%" y="85" width="0.7957%" height="15" fill="rgb(232,23,21)"/><text x="60.7581%" y="95.50"></text></g><g><title>def_span (588,010 samples, 0.40%)</title><rect x="60.9014%" y="69" width="0.4024%" height="15" fill="rgb(244,5,23)"/><text x="61.1514%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (530,239 samples, 0.36%)</title><rect x="60.9409%" y="53" width="0.3629%" height="15" fill="rgb(226,81,46)"/><text x="61.1909%" y="63.50"></text></g><g><title>evaluate_obligation (6,167,299 samples, 4.22%)</title><rect x="57.1399%" y="117" width="4.2210%" height="15" fill="rgb(247,70,30)"/><text x="57.3899%" y="127.50">evalu..</text></g><g><title>item_types_checking (7,100,658 samples, 4.86%)</title><rect x="56.5740%" y="165" width="4.8598%" height="15" fill="rgb(212,68,19)"/><text x="56.8240%" y="175.50">item_t..</text></g><g><title>check_mod_item_types (7,096,088 samples, 4.86%)</title><rect x="56.5772%" y="149" width="4.8566%" height="15" fill="rgb(240,187,13)"/><text x="56.8272%" y="159.50">check_..</text></g><g><title>typeck (6,604,282 samples, 4.52%)</title><rect x="56.9138%" y="133" width="4.5201%" height="15" fill="rgb(223,113,26)"/><text x="57.1638%" y="143.50">typeck</text></g><g><title>fn_sig (199,604 samples, 0.14%)</title><rect x="61.6098%" y="133" width="0.1366%" height="15" fill="rgb(206,192,2)"/><text x="61.8598%" y="143.50"></text></g><g><title>late_bound_vars_map (370,106 samples, 0.25%)</title><rect x="62.0429%" y="85" width="0.2533%" height="15" fill="rgb(241,108,4)"/><text x="62.2929%" y="95.50"></text></g><g><title>resolve_lifetimes (357,456 samples, 0.24%)</title><rect x="62.0515%" y="69" width="0.2446%" height="15" fill="rgb(247,173,49)"/><text x="62.3015%" y="79.50"></text></g><g><title>explicit_predicates_of (532,647 samples, 0.36%)</title><rect x="61.9411%" y="101" width="0.3646%" height="15" fill="rgb(224,114,35)"/><text x="62.1911%" y="111.50"></text></g><g><title>predicates_of (926,121 samples, 0.63%)</title><rect x="61.8572%" y="133" width="0.6338%" height="15" fill="rgb(245,159,27)"/><text x="62.1072%" y="143.50"></text></g><g><title>predicates_defined_on (880,231 samples, 0.60%)</title><rect x="61.8886%" y="117" width="0.6024%" height="15" fill="rgb(245,172,44)"/><text x="62.1386%" y="127.50"></text></g><g><title>inferred_outlives_of (270,953 samples, 0.19%)</title><rect x="62.3056%" y="101" width="0.1854%" height="15" fill="rgb(236,23,11)"/><text x="62.5556%" y="111.50"></text></g><g><title>inferred_outlives_crate (249,463 samples, 0.17%)</title><rect x="62.3203%" y="85" width="0.1707%" height="15" fill="rgb(205,117,38)"/><text x="62.5703%" y="95.50"></text></g><g><title>type_collecting (1,672,348 samples, 1.14%)</title><rect x="61.4352%" y="165" width="1.1446%" height="15" fill="rgb(237,72,25)"/><text x="61.6852%" y="175.50"></text></g><g><title>collect_mod_item_types (1,660,278 samples, 1.14%)</title><rect x="61.4435%" y="149" width="1.1363%" height="15" fill="rgb(244,70,9)"/><text x="61.6935%" y="159.50"></text></g><g><title>evaluate_obligation (490,008 samples, 0.34%)</title><rect x="63.5327%" y="133" width="0.3354%" height="15" fill="rgb(217,125,39)"/><text x="63.7827%" y="143.50"></text></g><g><title>implied_outlives_bounds (200,432 samples, 0.14%)</title><rect x="63.8681%" y="133" width="0.1372%" height="15" fill="rgb(235,36,10)"/><text x="64.1181%" y="143.50"></text></g><g><title>param_env (173,421 samples, 0.12%)</title><rect x="64.0053%" y="133" width="0.1187%" height="15" fill="rgb(251,123,47)"/><text x="64.2553%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,521,125 samples, 1.73%)</title><rect x="62.6913%" y="149" width="1.7255%" height="15" fill="rgb(221,13,13)"/><text x="62.9413%" y="159.50"></text></g><g><title>region_scope_tree (399,567 samples, 0.27%)</title><rect x="64.1434%" y="133" width="0.2735%" height="15" fill="rgb(238,131,9)"/><text x="64.3934%" y="143.50"></text></g><g><title>evaluate_obligation (271,283 samples, 0.19%)</title><rect x="65.0559%" y="133" width="0.1857%" height="15" fill="rgb(211,50,8)"/><text x="65.3059%" y="143.50"></text></g><g><title>param_env (311,723 samples, 0.21%)</title><rect x="65.2968%" y="133" width="0.2133%" height="15" fill="rgb(245,182,24)"/><text x="65.5468%" y="143.50"></text></g><g><title>check_item_well_formed (1,757,211 samples, 1.20%)</title><rect x="64.4168%" y="149" width="1.2027%" height="15" fill="rgb(242,14,37)"/><text x="64.6668%" y="159.50"></text></g><g><title>analysis (95,167,477 samples, 65.13%)</title><rect x="0.5930%" y="197" width="65.1338%" height="15" fill="rgb(246,228,12)"/><text x="0.8430%" y="207.50">analysis</text></g><g><title>type_check_crate (60,740,394 samples, 41.57%)</title><rect x="24.1553%" y="181" width="41.5715%" height="15" fill="rgb(213,55,15)"/><text x="24.4053%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,594,541 samples, 3.14%)</title><rect x="62.5822%" y="165" width="3.1446%" height="15" fill="rgb(209,9,3)"/><text x="62.8322%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (156,762 samples, 0.11%)</title><rect x="65.6195%" y="149" width="0.1073%" height="15" fill="rgb(230,59,30)"/><text x="65.8695%" y="159.50"></text></g><g><title>codegen_crate (349,534 samples, 0.24%)</title><rect x="65.7335%" y="197" width="0.2392%" height="15" fill="rgb(209,121,21)"/><text x="65.9835%" y="207.50"></text></g><g><title>AST_validation (297,474 samples, 0.20%)</title><rect x="66.1214%" y="181" width="0.2036%" height="15" fill="rgb(220,109,13)"/><text x="66.3714%" y="191.50"></text></g><g><title>complete_gated_feature_checking (160,152 samples, 0.11%)</title><rect x="66.3250%" y="181" width="0.1096%" height="15" fill="rgb(232,18,1)"/><text x="66.5750%" y="191.50"></text></g><g><title>metadata_load_macro (404,786 samples, 0.28%)</title><rect x="84.0229%" y="149" width="0.2770%" height="15" fill="rgb(215,41,42)"/><text x="84.2729%" y="159.50"></text></g><g><title>metadata_register_crate (2,605,519 samples, 1.78%)</title><rect x="84.3000%" y="149" width="1.7832%" height="15" fill="rgb(224,123,36)"/><text x="84.5500%" y="159.50">m..</text></g><g><title>metadata_register_crate (965,603 samples, 0.66%)</title><rect x="85.4224%" y="133" width="0.6609%" height="15" fill="rgb(240,125,3)"/><text x="85.6724%" y="143.50"></text></g><g><title>macro_expand_crate (28,997,691 samples, 19.85%)</title><rect x="66.4984%" y="181" width="19.8464%" height="15" fill="rgb(205,98,50)"/><text x="66.7484%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (28,981,281 samples, 19.84%)</title><rect x="66.5096%" y="165" width="19.8351%" height="15" fill="rgb(205,185,37)"/><text x="66.7596%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (382,095 samples, 0.26%)</title><rect x="86.0832%" y="149" width="0.2615%" height="15" fill="rgb(238,207,15)"/><text x="86.3332%" y="159.50"></text></g><g><title>late_resolve_crate (4,362,809 samples, 2.99%)</title><rect x="86.5153%" y="165" width="2.9860%" height="15" fill="rgb(213,199,42)"/><text x="86.7653%" y="175.50">lat..</text></g><g><title>configure_and_expand (34,652,275 samples, 23.72%)</title><rect x="65.9728%" y="197" width="23.7164%" height="15" fill="rgb(235,201,11)"/><text x="66.2228%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,834,604 samples, 3.31%)</title><rect x="86.3803%" y="181" width="3.3089%" height="15" fill="rgb(207,46,11)"/><text x="86.6303%" y="191.50">res..</text></g><g><title>drop_ast (351,504 samples, 0.24%)</title><rect x="89.6892%" y="197" width="0.2406%" height="15" fill="rgb(241,35,35)"/><text x="89.9392%" y="207.50"></text></g><g><title>early_lint_checks (753,028 samples, 0.52%)</title><rect x="89.9390%" y="197" width="0.5154%" height="15" fill="rgb(243,32,47)"/><text x="90.1890%" y="207.50"></text></g><g><title>free_global_ctxt (3,455,638 samples, 2.37%)</title><rect x="90.4544%" y="197" width="2.3651%" height="15" fill="rgb(247,202,23)"/><text x="90.7044%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (998,311 samples, 0.68%)</title><rect x="92.8195%" y="197" width="0.6833%" height="15" fill="rgb(219,102,11)"/><text x="93.0695%" y="207.50"></text></g><g><title>hir_lowering (7,585,394 samples, 5.19%)</title><rect x="93.5027%" y="197" width="5.1915%" height="15" fill="rgb(243,110,44)"/><text x="93.7527%" y="207.50">hir_lo..</text></g><g><title>parse_crate (235,932 samples, 0.16%)</title><rect x="98.7302%" y="197" width="0.1615%" height="15" fill="rgb(222,74,54)"/><text x="98.9802%" y="207.50"></text></g><g><title>prepare_outputs (326,494 samples, 0.22%)</title><rect x="98.8975%" y="197" width="0.2235%" height="15" fill="rgb(216,99,12)"/><text x="99.1475%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (837,360 samples, 0.57%)</title><rect x="99.1210%" y="197" width="0.5731%" height="15" fill="rgb(226,22,26)"/><text x="99.3710%" y="207.50"></text></g><g><title>all (146,110,772 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (146,110,772 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (309,793 samples, 0.21%)</title><rect x="99.7880%" y="197" width="0.2120%" height="15" fill="rgb(252,105,26)"/><text x="100.0380%" y="207.50"></text></g></svg></svg>