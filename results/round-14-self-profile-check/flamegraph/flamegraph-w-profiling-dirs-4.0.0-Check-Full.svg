<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (50,940 samples, 0.11%)</title><rect x="9.0249%" y="245" width="0.1103%" height="15" fill="rgb(227,0,7)"/><text x="9.2749%" y="255.50"></text></g><g><title>param_env (60,002 samples, 0.13%)</title><rect x="10.8201%" y="213" width="0.1299%" height="15" fill="rgb(217,0,24)"/><text x="11.0701%" y="223.50"></text></g><g><title>item_attrs (52,830 samples, 0.11%)</title><rect x="11.3721%" y="181" width="0.1144%" height="15" fill="rgb(221,193,54)"/><text x="11.6221%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (51,070 samples, 0.11%)</title><rect x="11.3759%" y="165" width="0.1106%" height="15" fill="rgb(248,212,6)"/><text x="11.6259%" y="175.50"></text></g><g><title>codegen_fn_attrs (71,610 samples, 0.16%)</title><rect x="11.3362%" y="197" width="0.1550%" height="15" fill="rgb(208,68,35)"/><text x="11.5862%" y="207.50"></text></g><g><title>adt_drop_tys (71,260 samples, 0.15%)</title><rect x="13.2225%" y="165" width="0.1543%" height="15" fill="rgb(232,128,0)"/><text x="13.4725%" y="175.50"></text></g><g><title>needs_drop_raw (169,610 samples, 0.37%)</title><rect x="13.1765%" y="181" width="0.3672%" height="15" fill="rgb(207,160,47)"/><text x="13.4265%" y="191.50"></text></g><g><title>is_copy_raw (77,100 samples, 0.17%)</title><rect x="13.3768%" y="165" width="0.1669%" height="15" fill="rgb(228,23,34)"/><text x="13.6268%" y="175.50"></text></g><g><title>evaluate_obligation (55,820 samples, 0.12%)</title><rect x="13.4228%" y="149" width="0.1208%" height="15" fill="rgb(218,30,26)"/><text x="13.6728%" y="159.50"></text></g><g><title>resolve_instance (58,960 samples, 0.13%)</title><rect x="13.5437%" y="181" width="0.1276%" height="15" fill="rgb(220,122,19)"/><text x="13.7937%" y="191.50"></text></g><g><title>thir_body (328,561 samples, 0.71%)</title><rect x="13.7073%" y="181" width="0.7113%" height="15" fill="rgb(250,228,42)"/><text x="13.9573%" y="191.50"></text></g><g><title>mir_const (2,065,979 samples, 4.47%)</title><rect x="9.9792%" y="229" width="4.4727%" height="15" fill="rgb(240,193,28)"/><text x="10.2292%" y="239.50">mir_c..</text></g><g><title>unsafety_check_result (1,617,535 samples, 3.50%)</title><rect x="10.9500%" y="213" width="3.5019%" height="15" fill="rgb(216,20,37)"/><text x="11.2000%" y="223.50">uns..</text></g><g><title>mir_built (1,367,541 samples, 2.96%)</title><rect x="11.4912%" y="197" width="2.9606%" height="15" fill="rgb(206,188,39)"/><text x="11.7412%" y="207.50">mir..</text></g><g><title>mir_promoted (2,459,276 samples, 5.32%)</title><rect x="9.1832%" y="245" width="5.3242%" height="15" fill="rgb(217,207,13)"/><text x="9.4332%" y="255.50">mir_pro..</text></g><g><title>MIR_borrow_checking (6,310,740 samples, 13.66%)</title><rect x="1.9367%" y="277" width="13.6624%" height="15" fill="rgb(231,73,38)"/><text x="2.1867%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,236,718 samples, 13.50%)</title><rect x="2.0970%" y="261" width="13.5021%" height="15" fill="rgb(225,20,46)"/><text x="2.3470%" y="271.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (474,285 samples, 1.03%)</title><rect x="14.5723%" y="245" width="1.0268%" height="15" fill="rgb(210,31,41)"/><text x="14.8223%" y="255.50"></text></g><g><title>evaluate_obligation (237,801 samples, 0.51%)</title><rect x="15.0843%" y="229" width="0.5148%" height="15" fill="rgb(221,200,47)"/><text x="15.3343%" y="239.50"></text></g><g><title>hir_module_items (183,533 samples, 0.40%)</title><rect x="15.6224%" y="277" width="0.3973%" height="15" fill="rgb(226,26,5)"/><text x="15.8724%" y="287.50"></text></g><g><title>get_lang_items (86,341 samples, 0.19%)</title><rect x="16.6678%" y="229" width="0.1869%" height="15" fill="rgb(249,33,26)"/><text x="16.9178%" y="239.50"></text></g><g><title>should_inherit_track_caller (68,440 samples, 0.15%)</title><rect x="16.8547%" y="229" width="0.1482%" height="15" fill="rgb(235,183,28)"/><text x="17.1047%" y="239.50"></text></g><g><title>codegen_fn_attrs (294,203 samples, 0.64%)</title><rect x="16.4163%" y="245" width="0.6369%" height="15" fill="rgb(221,5,38)"/><text x="16.6663%" y="255.50"></text></g><g><title>check_mod_attrs (446,495 samples, 0.97%)</title><rect x="16.0870%" y="261" width="0.9666%" height="15" fill="rgb(247,18,42)"/><text x="16.3370%" y="271.50"></text></g><g><title>check_mod_const_bodies (118,092 samples, 0.26%)</title><rect x="17.0536%" y="261" width="0.2557%" height="15" fill="rgb(241,131,45)"/><text x="17.3036%" y="271.50"></text></g><g><title>is_const_fn_raw (46,740 samples, 0.10%)</title><rect x="17.2081%" y="245" width="0.1012%" height="15" fill="rgb(249,31,29)"/><text x="17.4581%" y="255.50"></text></g><g><title>lookup_deprecation_entry (84,501 samples, 0.18%)</title><rect x="17.6589%" y="245" width="0.1829%" height="15" fill="rgb(225,111,53)"/><text x="17.9089%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (274,612 samples, 0.59%)</title><rect x="17.3821%" y="261" width="0.5945%" height="15" fill="rgb(238,160,17)"/><text x="17.6321%" y="271.50"></text></g><g><title>looking_for_derive_registrar (64,631 samples, 0.14%)</title><rect x="17.9806%" y="261" width="0.1399%" height="15" fill="rgb(214,148,48)"/><text x="18.2306%" y="271.50"></text></g><g><title>misc_checking_1 (974,621 samples, 2.11%)</title><rect x="16.0205%" y="277" width="2.1100%" height="15" fill="rgb(232,36,49)"/><text x="16.2705%" y="287.50">m..</text></g><g><title>liveness_and_intrinsic_checking (106,952 samples, 0.23%)</title><rect x="18.1336%" y="261" width="0.2315%" height="15" fill="rgb(209,103,24)"/><text x="18.3836%" y="271.50"></text></g><g><title>check_mod_liveness (86,461 samples, 0.19%)</title><rect x="18.1780%" y="245" width="0.1872%" height="15" fill="rgb(229,88,8)"/><text x="18.4280%" y="255.50"></text></g><g><title>misc_checking_2 (259,093 samples, 0.56%)</title><rect x="18.1305%" y="277" width="0.5609%" height="15" fill="rgb(213,181,19)"/><text x="18.3805%" y="287.50"></text></g><g><title>match_checking (150,701 samples, 0.33%)</title><rect x="18.3652%" y="261" width="0.3263%" height="15" fill="rgb(254,191,54)"/><text x="18.6152%" y="271.50"></text></g><g><title>check_match (134,041 samples, 0.29%)</title><rect x="18.4012%" y="245" width="0.2902%" height="15" fill="rgb(241,83,37)"/><text x="18.6512%" y="255.50"></text></g><g><title>check_private_in_public (46,380 samples, 0.10%)</title><rect x="18.7079%" y="261" width="0.1004%" height="15" fill="rgb(233,36,39)"/><text x="18.9579%" y="271.50"></text></g><g><title>death_checking (63,491 samples, 0.14%)</title><rect x="18.8083%" y="261" width="0.1375%" height="15" fill="rgb(226,3,54)"/><text x="19.0583%" y="271.50"></text></g><g><title>param_env (51,521 samples, 0.11%)</title><rect x="19.0977%" y="229" width="0.1115%" height="15" fill="rgb(245,192,40)"/><text x="19.3477%" y="239.50"></text></g><g><title>crate_lints (121,472 samples, 0.26%)</title><rect x="18.9488%" y="245" width="0.2630%" height="15" fill="rgb(238,167,29)"/><text x="19.1988%" y="255.50"></text></g><g><title>lint_checking (210,132 samples, 0.45%)</title><rect x="18.9458%" y="261" width="0.4549%" height="15" fill="rgb(232,182,51)"/><text x="19.1958%" y="271.50"></text></g><g><title>module_lints (87,250 samples, 0.19%)</title><rect x="19.2118%" y="245" width="0.1889%" height="15" fill="rgb(231,60,39)"/><text x="19.4618%" y="255.50"></text></g><g><title>lint_mod (85,250 samples, 0.18%)</title><rect x="19.2161%" y="229" width="0.1846%" height="15" fill="rgb(208,69,12)"/><text x="19.4661%" y="239.50"></text></g><g><title>privacy_access_levels (54,541 samples, 0.12%)</title><rect x="19.4007%" y="261" width="0.1181%" height="15" fill="rgb(235,93,37)"/><text x="19.6507%" y="271.50"></text></g><g><title>privacy_checking_modules (128,872 samples, 0.28%)</title><rect x="19.5188%" y="261" width="0.2790%" height="15" fill="rgb(213,116,39)"/><text x="19.7688%" y="271.50"></text></g><g><title>check_mod_privacy (127,442 samples, 0.28%)</title><rect x="19.5218%" y="245" width="0.2759%" height="15" fill="rgb(222,207,29)"/><text x="19.7718%" y="255.50"></text></g><g><title>misc_checking_3 (526,056 samples, 1.14%)</title><rect x="18.6914%" y="277" width="1.1389%" height="15" fill="rgb(206,96,30)"/><text x="18.9414%" y="287.50"></text></g><g><title>impl_parent (174,013 samples, 0.38%)</title><rect x="24.6245%" y="117" width="0.3767%" height="15" fill="rgb(218,138,4)"/><text x="24.8745%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (123,122 samples, 0.27%)</title><rect x="24.7347%" y="101" width="0.2666%" height="15" fill="rgb(250,191,14)"/><text x="24.9847%" y="111.50"></text></g><g><title>impl_trait_ref (624,027 samples, 1.35%)</title><rect x="25.0013%" y="117" width="1.3510%" height="15" fill="rgb(239,60,40)"/><text x="25.2513%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (576,315 samples, 1.25%)</title><rect x="25.1046%" y="101" width="1.2477%" height="15" fill="rgb(206,27,48)"/><text x="25.3546%" y="111.50"></text></g><g><title>coherent_trait (1,075,492 samples, 2.33%)</title><rect x="24.1575%" y="149" width="2.3284%" height="15" fill="rgb(225,35,8)"/><text x="24.4075%" y="159.50">c..</text></g><g><title>specialization_graph_of (1,068,942 samples, 2.31%)</title><rect x="24.1717%" y="133" width="2.3142%" height="15" fill="rgb(250,213,24)"/><text x="24.4217%" y="143.50">s..</text></g><g><title>trait_impls_of (61,711 samples, 0.13%)</title><rect x="26.3523%" y="117" width="0.1336%" height="15" fill="rgb(247,123,22)"/><text x="26.6023%" y="127.50"></text></g><g><title>adt_destructor (1,088,382 samples, 2.36%)</title><rect x="24.1355%" y="181" width="2.3563%" height="15" fill="rgb(231,138,38)"/><text x="24.3855%" y="191.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (1,086,212 samples, 2.35%)</title><rect x="24.1402%" y="165" width="2.3516%" height="15" fill="rgb(231,145,46)"/><text x="24.3902%" y="175.50">m..</text></g><g><title>adt_def (68,310 samples, 0.15%)</title><rect x="26.8336%" y="85" width="0.1479%" height="15" fill="rgb(251,118,11)"/><text x="27.0836%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (67,750 samples, 0.15%)</title><rect x="26.8348%" y="69" width="0.1467%" height="15" fill="rgb(217,147,25)"/><text x="27.0848%" y="79.50"></text></g><g><title>item_attrs (62,970 samples, 0.14%)</title><rect x="26.8452%" y="53" width="0.1363%" height="15" fill="rgb(247,81,37)"/><text x="27.0952%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (62,450 samples, 0.14%)</title><rect x="26.8463%" y="37" width="0.1352%" height="15" fill="rgb(209,12,38)"/><text x="27.0963%" y="47.50"></text></g><g><title>adt_dtorck_constraint (84,601 samples, 0.18%)</title><rect x="26.8230%" y="101" width="0.1832%" height="15" fill="rgb(227,1,9)"/><text x="27.0730%" y="111.50"></text></g><g><title>adt_dtorck_constraint (137,342 samples, 0.30%)</title><rect x="26.7209%" y="117" width="0.2973%" height="15" fill="rgb(248,47,43)"/><text x="26.9709%" y="127.50"></text></g><g><title>adt_dtorck_constraint (241,832 samples, 0.52%)</title><rect x="26.5520%" y="133" width="0.5236%" height="15" fill="rgb(221,10,30)"/><text x="26.8020%" y="143.50"></text></g><g><title>adt_dtorck_constraint (263,493 samples, 0.57%)</title><rect x="26.5216%" y="149" width="0.5704%" height="15" fill="rgb(210,229,1)"/><text x="26.7716%" y="159.50"></text></g><g><title>adt_dtorck_constraint (271,133 samples, 0.59%)</title><rect x="26.5075%" y="165" width="0.5870%" height="15" fill="rgb(222,148,37)"/><text x="26.7575%" y="175.50"></text></g><g><title>adt_dtorck_constraint (279,404 samples, 0.60%)</title><rect x="26.4917%" y="181" width="0.6049%" height="15" fill="rgb(234,67,33)"/><text x="26.7417%" y="191.50"></text></g><g><title>dropck_outlives (1,470,546 samples, 3.18%)</title><rect x="23.9394%" y="213" width="3.1836%" height="15" fill="rgb(247,98,35)"/><text x="24.1894%" y="223.50">dro..</text></g><g><title>adt_dtorck_constraint (1,429,196 samples, 3.09%)</title><rect x="24.0289%" y="197" width="3.0941%" height="15" fill="rgb(247,138,52)"/><text x="24.2789%" y="207.50">adt..</text></g><g><title>evaluate_obligation (56,541 samples, 0.12%)</title><rect x="27.1230%" y="213" width="0.1224%" height="15" fill="rgb(213,79,30)"/><text x="27.3730%" y="223.50"></text></g><g><title>trait_impls_of (65,620 samples, 0.14%)</title><rect x="27.4283%" y="213" width="0.1421%" height="15" fill="rgb(246,177,23)"/><text x="27.6783%" y="223.50"></text></g><g><title>associated_item (288,514 samples, 0.62%)</title><rect x="38.9719%" y="181" width="0.6246%" height="15" fill="rgb(230,62,27)"/><text x="39.2219%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (204,283 samples, 0.44%)</title><rect x="39.1543%" y="165" width="0.4423%" height="15" fill="rgb(216,154,8)"/><text x="39.4043%" y="175.50"></text></g><g><title>associated_items (442,325 samples, 0.96%)</title><rect x="38.6667%" y="197" width="0.9576%" height="15" fill="rgb(244,35,45)"/><text x="38.9167%" y="207.50"></text></g><g><title>evaluate_obligation (438,646 samples, 0.95%)</title><rect x="39.6876%" y="197" width="0.9496%" height="15" fill="rgb(251,115,12)"/><text x="39.9376%" y="207.50"></text></g><g><title>trait_impls_of (87,240 samples, 0.19%)</title><rect x="40.4484%" y="181" width="0.1889%" height="15" fill="rgb(240,54,50)"/><text x="40.6984%" y="191.50"></text></g><g><title>fn_sig (81,550 samples, 0.18%)</title><rect x="40.6524%" y="197" width="0.1766%" height="15" fill="rgb(233,84,52)"/><text x="40.9024%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (72,400 samples, 0.16%)</title><rect x="40.6722%" y="181" width="0.1567%" height="15" fill="rgb(207,117,47)"/><text x="40.9222%" y="191.50"></text></g><g><title>explicit_predicates_of (101,582 samples, 0.22%)</title><rect x="41.4426%" y="133" width="0.2199%" height="15" fill="rgb(249,43,39)"/><text x="41.6926%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (100,992 samples, 0.22%)</title><rect x="41.4438%" y="117" width="0.2186%" height="15" fill="rgb(209,38,44)"/><text x="41.6938%" y="127.50"></text></g><g><title>predicates_of (108,252 samples, 0.23%)</title><rect x="41.4308%" y="165" width="0.2344%" height="15" fill="rgb(236,212,23)"/><text x="41.6808%" y="175.50"></text></g><g><title>predicates_defined_on (104,882 samples, 0.23%)</title><rect x="41.4381%" y="149" width="0.2271%" height="15" fill="rgb(242,79,21)"/><text x="41.6881%" y="159.50"></text></g><g><title>is_copy_raw (749,048 samples, 1.62%)</title><rect x="41.0337%" y="197" width="1.6216%" height="15" fill="rgb(211,96,35)"/><text x="41.2837%" y="207.50"></text></g><g><title>evaluate_obligation (694,888 samples, 1.50%)</title><rect x="41.1510%" y="181" width="1.5044%" height="15" fill="rgb(253,215,40)"/><text x="41.4010%" y="191.50"></text></g><g><title>trait_impls_of (453,905 samples, 0.98%)</title><rect x="41.6727%" y="165" width="0.9827%" height="15" fill="rgb(211,81,21)"/><text x="41.9227%" y="175.50"></text></g><g><title>implementations_of_trait (81,061 samples, 0.18%)</title><rect x="42.4799%" y="149" width="0.1755%" height="15" fill="rgb(208,190,38)"/><text x="42.7299%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (70,571 samples, 0.15%)</title><rect x="42.5026%" y="133" width="0.1528%" height="15" fill="rgb(235,213,38)"/><text x="42.7526%" y="143.50"></text></g><g><title>lint_levels (52,681 samples, 0.11%)</title><rect x="42.6913%" y="197" width="0.1141%" height="15" fill="rgb(237,122,38)"/><text x="42.9413%" y="207.50"></text></g><g><title>evaluate_obligation (133,121 samples, 0.29%)</title><rect x="43.0301%" y="181" width="0.2882%" height="15" fill="rgb(244,218,35)"/><text x="43.2801%" y="191.50"></text></g><g><title>trait_impls_of (55,880 samples, 0.12%)</title><rect x="43.1974%" y="165" width="0.1210%" height="15" fill="rgb(240,68,47)"/><text x="43.4474%" y="175.50"></text></g><g><title>method_autoderef_steps (235,673 samples, 0.51%)</title><rect x="42.8599%" y="197" width="0.5102%" height="15" fill="rgb(210,16,53)"/><text x="43.1099%" y="207.50"></text></g><g><title>explicit_predicates_of (83,910 samples, 0.18%)</title><rect x="43.5313%" y="165" width="0.1817%" height="15" fill="rgb(235,124,12)"/><text x="43.7813%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (74,390 samples, 0.16%)</title><rect x="43.5519%" y="149" width="0.1610%" height="15" fill="rgb(224,169,11)"/><text x="43.8019%" y="159.50"></text></g><g><title>predicates_of (167,791 samples, 0.36%)</title><rect x="43.3960%" y="197" width="0.3633%" height="15" fill="rgb(250,166,2)"/><text x="43.6460%" y="207.50"></text></g><g><title>predicates_defined_on (132,650 samples, 0.29%)</title><rect x="43.4720%" y="181" width="0.2872%" height="15" fill="rgb(242,216,29)"/><text x="43.7220%" y="191.50"></text></g><g><title>typeck (7,550,365 samples, 16.35%)</title><rect x="27.5787%" y="213" width="16.3461%" height="15" fill="rgb(230,116,27)"/><text x="27.8287%" y="223.50">typeck</text></g><g><title>item_bodies_checking (11,085,914 samples, 24.00%)</title><rect x="19.9858%" y="261" width="24.0003%" height="15" fill="rgb(228,99,48)"/><text x="20.2358%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (11,083,674 samples, 24.00%)</title><rect x="19.9906%" y="245" width="23.9955%" height="15" fill="rgb(253,11,6)"/><text x="20.2406%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (11,038,853 samples, 23.90%)</title><rect x="20.0877%" y="229" width="23.8984%" height="15" fill="rgb(247,143,39)"/><text x="20.3377%" y="239.50">typeck</text></g><g><title>late_bound_vars_map (269,904 samples, 0.58%)</title><rect x="44.8910%" y="213" width="0.5843%" height="15" fill="rgb(236,97,10)"/><text x="45.1410%" y="223.50"></text></g><g><title>resolve_lifetimes (229,763 samples, 0.50%)</title><rect x="44.9779%" y="197" width="0.4974%" height="15" fill="rgb(233,208,19)"/><text x="45.2279%" y="207.50"></text></g><g><title>fn_sig (513,466 samples, 1.11%)</title><rect x="44.4594%" y="229" width="1.1116%" height="15" fill="rgb(216,164,2)"/><text x="44.7094%" y="239.50"></text></g><g><title>generics_of (140,063 samples, 0.30%)</title><rect x="45.5711%" y="229" width="0.3032%" height="15" fill="rgb(220,129,5)"/><text x="45.8211%" y="239.50"></text></g><g><title>predicates_of (151,321 samples, 0.33%)</title><rect x="45.8743%" y="229" width="0.3276%" height="15" fill="rgb(242,17,10)"/><text x="46.1243%" y="239.50"></text></g><g><title>predicates_defined_on (116,961 samples, 0.25%)</title><rect x="45.9487%" y="213" width="0.2532%" height="15" fill="rgb(242,107,0)"/><text x="46.1987%" y="223.50"></text></g><g><title>type_collecting (1,056,192 samples, 2.29%)</title><rect x="44.0073%" y="261" width="2.2866%" height="15" fill="rgb(251,28,31)"/><text x="44.2573%" y="271.50">t..</text></g><g><title>collect_mod_item_types (1,042,752 samples, 2.26%)</title><rect x="44.0364%" y="245" width="2.2575%" height="15" fill="rgb(233,223,10)"/><text x="44.2864%" y="255.50">c..</text></g><g><title>adt_def (48,940 samples, 0.11%)</title><rect x="48.7152%" y="197" width="0.1060%" height="15" fill="rgb(215,21,27)"/><text x="48.9652%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (47,230 samples, 0.10%)</title><rect x="48.7189%" y="181" width="0.1022%" height="15" fill="rgb(232,23,21)"/><text x="48.9689%" y="191.50"></text></g><g><title>adt_def (115,802 samples, 0.25%)</title><rect x="48.9415%" y="149" width="0.2507%" height="15" fill="rgb(244,5,23)"/><text x="49.1915%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (115,132 samples, 0.25%)</title><rect x="48.9429%" y="133" width="0.2493%" height="15" fill="rgb(226,81,46)"/><text x="49.1929%" y="143.50"></text></g><g><title>item_attrs (109,402 samples, 0.24%)</title><rect x="48.9553%" y="117" width="0.2368%" height="15" fill="rgb(247,70,30)"/><text x="49.2053%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (108,752 samples, 0.24%)</title><rect x="48.9567%" y="101" width="0.2354%" height="15" fill="rgb(212,68,19)"/><text x="49.2067%" y="111.50"></text></g><g><title>adt_sized_constraint (127,672 samples, 0.28%)</title><rect x="48.9344%" y="165" width="0.2764%" height="15" fill="rgb(240,187,13)"/><text x="49.1844%" y="175.50"></text></g><g><title>adt_sized_constraint (151,422 samples, 0.33%)</title><rect x="48.9075%" y="181" width="0.3278%" height="15" fill="rgb(223,113,26)"/><text x="49.1575%" y="191.50"></text></g><g><title>adt_sized_constraint (200,772 samples, 0.43%)</title><rect x="48.8211%" y="197" width="0.4347%" height="15" fill="rgb(206,192,2)"/><text x="49.0711%" y="207.50"></text></g><g><title>adt_sized_constraint (269,343 samples, 0.58%)</title><rect x="48.6979%" y="213" width="0.5831%" height="15" fill="rgb(241,108,4)"/><text x="48.9479%" y="223.50"></text></g><g><title>evaluate_obligation (354,114 samples, 0.77%)</title><rect x="48.5177%" y="229" width="0.7666%" height="15" fill="rgb(247,173,49)"/><text x="48.7677%" y="239.50"></text></g><g><title>implied_outlives_bounds (87,591 samples, 0.19%)</title><rect x="49.2844%" y="229" width="0.1896%" height="15" fill="rgb(224,114,35)"/><text x="49.5344%" y="239.50"></text></g><g><title>param_env (424,565 samples, 0.92%)</title><rect x="49.4740%" y="229" width="0.9192%" height="15" fill="rgb(245,159,27)"/><text x="49.7240%" y="239.50"></text></g><g><title>analysis (22,795,414 samples, 49.35%)</title><rect x="1.4940%" y="293" width="49.3506%" height="15" fill="rgb(245,172,44)"/><text x="1.7440%" y="303.50">analysis</text></g><g><title>type_check_crate (14,325,730 samples, 31.01%)</title><rect x="19.8303%" y="277" width="31.0143%" height="15" fill="rgb(236,23,11)"/><text x="20.0803%" y="287.50">type_check_crate</text></g><g><title>wf_checking (2,098,893 samples, 4.54%)</title><rect x="46.3006%" y="261" width="4.5440%" height="15" fill="rgb(205,117,38)"/><text x="46.5506%" y="271.50">wf_ch..</text></g><g><title>check_item_well_formed (2,000,193 samples, 4.33%)</title><rect x="46.5143%" y="245" width="4.3303%" height="15" fill="rgb(237,72,25)"/><text x="46.7643%" y="255.50">check..</text></g><g><title>region_scope_tree (162,552 samples, 0.35%)</title><rect x="50.4927%" y="229" width="0.3519%" height="15" fill="rgb(244,70,9)"/><text x="50.7427%" y="239.50"></text></g><g><title>codegen_crate (704,358 samples, 1.52%)</title><rect x="50.8691%" y="293" width="1.5249%" height="15" fill="rgb(217,125,39)"/><text x="51.1191%" y="303.50"></text></g><g><title>AST_validation (131,321 samples, 0.28%)</title><rect x="52.8741%" y="277" width="0.2843%" height="15" fill="rgb(235,36,10)"/><text x="53.1241%" y="287.50"></text></g><g><title>crate_injection (90,601 samples, 0.20%)</title><rect x="53.2333%" y="277" width="0.1961%" height="15" fill="rgb(251,123,47)"/><text x="53.4833%" y="287.50"></text></g><g><title>metadata_load_macro (52,841 samples, 0.11%)</title><rect x="76.0031%" y="245" width="0.1144%" height="15" fill="rgb(221,13,13)"/><text x="76.2531%" y="255.50"></text></g><g><title>metadata_register_crate (2,753,000 samples, 5.96%)</title><rect x="76.1175%" y="245" width="5.9601%" height="15" fill="rgb(238,131,9)"/><text x="76.3675%" y="255.50">metadata..</text></g><g><title>metadata_register_crate (984,750 samples, 2.13%)</title><rect x="79.9457%" y="229" width="2.1319%" height="15" fill="rgb(211,50,8)"/><text x="80.1957%" y="239.50">m..</text></g><g><title>metadata_register_crate (72,341 samples, 0.16%)</title><rect x="81.9210%" y="213" width="0.1566%" height="15" fill="rgb(245,182,24)"/><text x="82.1710%" y="223.50"></text></g><g><title>macro_expand_crate (13,283,128 samples, 28.76%)</title><rect x="53.4294%" y="277" width="28.7571%" height="15" fill="rgb(242,14,37)"/><text x="53.6794%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (13,257,698 samples, 28.70%)</title><rect x="53.4845%" y="261" width="28.7021%" height="15" fill="rgb(246,228,12)"/><text x="53.7345%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (50,321 samples, 0.11%)</title><rect x="82.0776%" y="245" width="0.1089%" height="15" fill="rgb(213,55,15)"/><text x="82.3276%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (142,721 samples, 0.31%)</title><rect x="82.1989%" y="277" width="0.3090%" height="15" fill="rgb(209,9,3)"/><text x="82.4489%" y="287.50"></text></g><g><title>finalize_macro_resolutions (295,383 samples, 0.64%)</title><rect x="82.6057%" y="261" width="0.6395%" height="15" fill="rgb(230,59,30)"/><text x="82.8557%" y="271.50"></text></g><g><title>late_resolve_crate (1,197,504 samples, 2.59%)</title><rect x="83.2452%" y="261" width="2.5925%" height="15" fill="rgb(209,121,21)"/><text x="83.4952%" y="271.50">la..</text></g><g><title>configure_and_expand (15,518,083 samples, 33.60%)</title><rect x="52.3940%" y="293" width="33.5957%" height="15" fill="rgb(220,109,13)"/><text x="52.6440%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (1,608,249 samples, 3.48%)</title><rect x="82.5079%" y="277" width="3.4818%" height="15" fill="rgb(232,18,1)"/><text x="82.7579%" y="287.50">res..</text></g><g><title>drop_ast (76,621 samples, 0.17%)</title><rect x="85.9897%" y="293" width="0.1659%" height="15" fill="rgb(215,41,42)"/><text x="86.2397%" y="303.50"></text></g><g><title>early_lint_checks (215,793 samples, 0.47%)</title><rect x="86.1987%" y="293" width="0.4672%" height="15" fill="rgb(224,123,36)"/><text x="86.4487%" y="303.50"></text></g><g><title>free_global_ctxt (1,627,828 samples, 3.52%)</title><rect x="86.6658%" y="293" width="3.5241%" height="15" fill="rgb(240,125,3)"/><text x="86.9158%" y="303.50">fre..</text></g><g><title>crate_hash (69,431 samples, 0.15%)</title><rect x="90.8287%" y="277" width="0.1503%" height="15" fill="rgb(205,98,50)"/><text x="91.0787%" y="287.50"></text></g><g><title>generate_crate_metadata (444,795 samples, 0.96%)</title><rect x="90.1900%" y="293" width="0.9630%" height="15" fill="rgb(205,185,37)"/><text x="90.4400%" y="303.50"></text></g><g><title>hir_lowering (1,318,984 samples, 2.86%)</title><rect x="91.1529%" y="293" width="2.8555%" height="15" fill="rgb(238,207,15)"/><text x="91.4029%" y="303.50">hi..</text></g><g><title>parse_crate (1,594,818 samples, 3.45%)</title><rect x="94.1081%" y="293" width="3.4527%" height="15" fill="rgb(213,199,42)"/><text x="94.3581%" y="303.50">par..</text></g><g><title>prepare_outputs (303,963 samples, 0.66%)</title><rect x="97.5817%" y="293" width="0.6581%" height="15" fill="rgb(235,201,11)"/><text x="97.8317%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (370,444 samples, 0.80%)</title><rect x="98.2398%" y="293" width="0.8020%" height="15" fill="rgb(207,46,11)"/><text x="98.4898%" y="303.50"></text></g><g><title>setup_global_ctxt (135,411 samples, 0.29%)</title><rect x="99.0649%" y="293" width="0.2932%" height="15" fill="rgb(241,35,35)"/><text x="99.3149%" y="303.50"></text></g><g><title>all (46,190,715 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (46,190,715 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (296,503 samples, 0.64%)</title><rect x="99.3581%" y="293" width="0.6419%" height="15" fill="rgb(219,102,11)"/><text x="99.6081%" y="303.50"></text></g></svg></svg>