<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (682,169 samples, 0.28%)</title><rect x="14.4628%" y="117" width="0.2751%" height="15" fill="rgb(227,0,7)"/><text x="14.7128%" y="127.50"></text></g><g><title>item_attrs (490,493 samples, 0.20%)</title><rect x="15.3080%" y="85" width="0.1978%" height="15" fill="rgb(217,0,24)"/><text x="15.5580%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (473,773 samples, 0.19%)</title><rect x="15.3148%" y="69" width="0.1911%" height="15" fill="rgb(221,193,54)"/><text x="15.5648%" y="79.50"></text></g><g><title>codegen_fn_attrs (664,176 samples, 0.27%)</title><rect x="15.2501%" y="101" width="0.2679%" height="15" fill="rgb(248,212,6)"/><text x="15.5001%" y="111.50"></text></g><g><title>adt_drop_tys (289,315 samples, 0.12%)</title><rect x="18.8599%" y="69" width="0.1167%" height="15" fill="rgb(208,68,35)"/><text x="19.1099%" y="79.50"></text></g><g><title>needs_drop_raw (1,408,817 samples, 0.57%)</title><rect x="18.8122%" y="85" width="0.5682%" height="15" fill="rgb(232,128,0)"/><text x="19.0622%" y="95.50"></text></g><g><title>is_copy_raw (1,001,261 samples, 0.40%)</title><rect x="18.9765%" y="69" width="0.4038%" height="15" fill="rgb(207,160,47)"/><text x="19.2265%" y="79.50"></text></g><g><title>evaluate_obligation (875,461 samples, 0.35%)</title><rect x="19.0273%" y="53" width="0.3531%" height="15" fill="rgb(228,23,34)"/><text x="19.2773%" y="63.50"></text></g><g><title>predicates_of (249,844 samples, 0.10%)</title><rect x="19.2796%" y="37" width="0.1008%" height="15" fill="rgb(218,30,26)"/><text x="19.5296%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (649,174 samples, 0.26%)</title><rect x="19.5996%" y="69" width="0.2618%" height="15" fill="rgb(220,122,19)"/><text x="19.8496%" y="79.50"></text></g><g><title>resolve_instance (1,635,884 samples, 0.66%)</title><rect x="19.3921%" y="85" width="0.6598%" height="15" fill="rgb(250,228,42)"/><text x="19.6421%" y="95.50"></text></g><g><title>thir_body (3,515,821 samples, 1.42%)</title><rect x="20.0833%" y="85" width="1.4180%" height="15" fill="rgb(240,193,28)"/><text x="20.3333%" y="95.50"></text></g><g><title>mir_const (19,854,420 samples, 8.01%)</title><rect x="13.5119%" y="133" width="8.0076%" height="15" fill="rgb(216,20,37)"/><text x="13.7619%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,814,529 samples, 6.78%)</title><rect x="14.7380%" y="117" width="6.7815%" height="15" fill="rgb(206,188,39)"/><text x="14.9880%" y="127.50">unsafety_..</text></g><g><title>mir_built (14,880,650 samples, 6.00%)</title><rect x="15.5179%" y="101" width="6.0016%" height="15" fill="rgb(217,207,13)"/><text x="15.7679%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (284,225 samples, 0.11%)</title><rect x="21.5195%" y="133" width="0.1146%" height="15" fill="rgb(231,73,38)"/><text x="21.7695%" y="143.50"></text></g><g><title>mir_promoted (22,527,150 samples, 9.09%)</title><rect x="12.5505%" y="149" width="9.0855%" height="15" fill="rgb(225,20,46)"/><text x="12.8005%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (469,673 samples, 0.19%)</title><rect x="21.6360%" y="149" width="0.1894%" height="15" fill="rgb(210,31,41)"/><text x="21.8860%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,539,067 samples, 0.62%)</title><rect x="21.8254%" y="149" width="0.6207%" height="15" fill="rgb(221,200,47)"/><text x="22.0754%" y="159.50"></text></g><g><title>normalize_projection_ty (851,449 samples, 0.34%)</title><rect x="22.1028%" y="133" width="0.3434%" height="15" fill="rgb(226,26,5)"/><text x="22.3528%" y="143.50"></text></g><g><title>type_op_normalize_ty (751,459 samples, 0.30%)</title><rect x="22.5293%" y="149" width="0.3031%" height="15" fill="rgb(249,33,26)"/><text x="22.7793%" y="159.50"></text></g><g><title>normalize_projection_ty (445,014 samples, 0.18%)</title><rect x="22.6529%" y="133" width="0.1795%" height="15" fill="rgb(235,183,28)"/><text x="22.9029%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,820,705 samples, 1.14%)</title><rect x="22.8324%" y="149" width="1.1376%" height="15" fill="rgb(221,5,38)"/><text x="23.0824%" y="159.50"></text></g><g><title>MIR_borrow_checking (58,177,223 samples, 23.46%)</title><rect x="0.5149%" y="181" width="23.4637%" height="15" fill="rgb(247,18,42)"/><text x="0.7649%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (57,867,639 samples, 23.34%)</title><rect x="0.6397%" y="165" width="23.3388%" height="15" fill="rgb(241,131,45)"/><text x="0.8897%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (371,214 samples, 0.15%)</title><rect x="24.0538%" y="181" width="0.1497%" height="15" fill="rgb(249,31,29)"/><text x="24.3038%" y="191.50"></text></g><g><title>codegen_fn_attrs (276,252 samples, 0.11%)</title><rect x="24.6247%" y="117" width="0.1114%" height="15" fill="rgb(225,111,53)"/><text x="24.8747%" y="127.50"></text></g><g><title>should_inherit_track_caller (504,374 samples, 0.20%)</title><rect x="24.5385%" y="133" width="0.2034%" height="15" fill="rgb(238,160,17)"/><text x="24.7885%" y="143.50"></text></g><g><title>codegen_fn_attrs (819,168 samples, 0.33%)</title><rect x="24.4194%" y="149" width="0.3304%" height="15" fill="rgb(214,148,48)"/><text x="24.6694%" y="159.50"></text></g><g><title>check_mod_attrs (1,336,165 samples, 0.54%)</title><rect x="24.2110%" y="165" width="0.5389%" height="15" fill="rgb(232,36,49)"/><text x="24.4610%" y="175.50"></text></g><g><title>check_mod_const_bodies (253,293 samples, 0.10%)</title><rect x="24.7499%" y="165" width="0.1022%" height="15" fill="rgb(209,103,24)"/><text x="24.9999%" y="175.50"></text></g><g><title>lint_levels (324,433 samples, 0.13%)</title><rect x="25.0482%" y="149" width="0.1308%" height="15" fill="rgb(229,88,8)"/><text x="25.2982%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,023,311 samples, 0.41%)</title><rect x="24.9150%" y="165" width="0.4127%" height="15" fill="rgb(213,181,19)"/><text x="25.1650%" y="175.50"></text></g><g><title>misc_checking_1 (2,854,612 samples, 1.15%)</title><rect x="24.2037%" y="181" width="1.1513%" height="15" fill="rgb(254,191,54)"/><text x="24.4537%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,075,192 samples, 0.43%)</title><rect x="25.3557%" y="165" width="0.4336%" height="15" fill="rgb(241,83,37)"/><text x="25.6057%" y="175.50"></text></g><g><title>check_mod_liveness (858,340 samples, 0.35%)</title><rect x="25.4432%" y="149" width="0.3462%" height="15" fill="rgb(233,36,39)"/><text x="25.6932%" y="159.50"></text></g><g><title>misc_checking_2 (2,417,117 samples, 0.97%)</title><rect x="25.3550%" y="181" width="0.9749%" height="15" fill="rgb(226,3,54)"/><text x="25.6050%" y="191.50"></text></g><g><title>match_checking (1,340,175 samples, 0.54%)</title><rect x="25.7894%" y="165" width="0.5405%" height="15" fill="rgb(245,192,40)"/><text x="26.0394%" y="175.50"></text></g><g><title>check_match (1,268,955 samples, 0.51%)</title><rect x="25.8181%" y="149" width="0.5118%" height="15" fill="rgb(238,167,29)"/><text x="26.0681%" y="159.50"></text></g><g><title>check_private_in_public (478,685 samples, 0.19%)</title><rect x="26.3342%" y="165" width="0.1931%" height="15" fill="rgb(232,182,51)"/><text x="26.5842%" y="175.50"></text></g><g><title>death_checking (849,279 samples, 0.34%)</title><rect x="26.5272%" y="165" width="0.3425%" height="15" fill="rgb(231,60,39)"/><text x="26.7772%" y="175.50"></text></g><g><title>param_env (294,543 samples, 0.12%)</title><rect x="27.4021%" y="133" width="0.1188%" height="15" fill="rgb(208,69,12)"/><text x="27.6521%" y="143.50"></text></g><g><title>crate_lints (2,848,472 samples, 1.15%)</title><rect x="26.8705%" y="149" width="1.1488%" height="15" fill="rgb(235,93,37)"/><text x="27.1205%" y="159.50"></text></g><g><title>type_of (1,166,302 samples, 0.47%)</title><rect x="27.5489%" y="133" width="0.4704%" height="15" fill="rgb(213,116,39)"/><text x="27.7989%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (917,809 samples, 0.37%)</title><rect x="27.6491%" y="117" width="0.3702%" height="15" fill="rgb(222,207,29)"/><text x="27.8991%" y="127.50"></text></g><g><title>lint_checking (3,870,713 samples, 1.56%)</title><rect x="26.8698%" y="165" width="1.5611%" height="15" fill="rgb(206,96,30)"/><text x="27.1198%" y="175.50"></text></g><g><title>module_lints (1,020,501 samples, 0.41%)</title><rect x="28.0193%" y="149" width="0.4116%" height="15" fill="rgb(218,138,4)"/><text x="28.2693%" y="159.50"></text></g><g><title>lint_mod (1,015,871 samples, 0.41%)</title><rect x="28.0212%" y="133" width="0.4097%" height="15" fill="rgb(250,191,14)"/><text x="28.2712%" y="143.50"></text></g><g><title>privacy_access_levels (712,228 samples, 0.29%)</title><rect x="28.4309%" y="165" width="0.2873%" height="15" fill="rgb(239,60,40)"/><text x="28.6809%" y="175.50"></text></g><g><title>privacy_checking_modules (2,076,483 samples, 0.84%)</title><rect x="28.7181%" y="165" width="0.8375%" height="15" fill="rgb(206,27,48)"/><text x="28.9681%" y="175.50"></text></g><g><title>check_mod_privacy (2,073,833 samples, 0.84%)</title><rect x="28.7192%" y="149" width="0.8364%" height="15" fill="rgb(225,35,8)"/><text x="28.9692%" y="159.50"></text></g><g><title>visibility (269,032 samples, 0.11%)</title><rect x="29.4471%" y="133" width="0.1085%" height="15" fill="rgb(250,213,24)"/><text x="29.6971%" y="143.50"></text></g><g><title>misc_checking_3 (8,015,098 samples, 3.23%)</title><rect x="26.3299%" y="181" width="3.2326%" height="15" fill="rgb(247,123,22)"/><text x="26.5799%" y="191.50">mis..</text></g><g><title>generics_of (372,848 samples, 0.15%)</title><rect x="33.5765%" y="117" width="0.1504%" height="15" fill="rgb(231,138,38)"/><text x="33.8265%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (256,184 samples, 0.10%)</title><rect x="33.6236%" y="101" width="0.1033%" height="15" fill="rgb(231,145,46)"/><text x="33.8736%" y="111.50"></text></g><g><title>impl_parent (3,880,387 samples, 1.57%)</title><rect x="33.7269%" y="117" width="1.5650%" height="15" fill="rgb(251,118,11)"/><text x="33.9769%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,076,843 samples, 0.84%)</title><rect x="34.4543%" y="101" width="0.8376%" height="15" fill="rgb(217,147,25)"/><text x="34.7043%" y="111.50"></text></g><g><title>impl_trait_ref (8,009,421 samples, 3.23%)</title><rect x="35.2925%" y="117" width="3.2303%" height="15" fill="rgb(247,81,37)"/><text x="35.5425%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,893,903 samples, 2.38%)</title><rect x="36.1458%" y="101" width="2.3771%" height="15" fill="rgb(209,12,38)"/><text x="36.3958%" y="111.50">me..</text></g><g><title>item_attrs (1,293,843 samples, 0.52%)</title><rect x="38.5228%" y="117" width="0.5218%" height="15" fill="rgb(227,1,9)"/><text x="38.7728%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,175,300 samples, 0.47%)</title><rect x="38.5707%" y="101" width="0.4740%" height="15" fill="rgb(248,47,43)"/><text x="38.8207%" y="111.50"></text></g><g><title>explicit_predicates_of (340,693 samples, 0.14%)</title><rect x="39.3961%" y="85" width="0.1374%" height="15" fill="rgb(221,10,30)"/><text x="39.6461%" y="95.50"></text></g><g><title>predicates_of (1,389,273 samples, 0.56%)</title><rect x="39.0451%" y="117" width="0.5603%" height="15" fill="rgb(210,229,1)"/><text x="39.2951%" y="127.50"></text></g><g><title>predicates_defined_on (852,609 samples, 0.34%)</title><rect x="39.2616%" y="101" width="0.3439%" height="15" fill="rgb(222,148,37)"/><text x="39.5116%" y="111.50"></text></g><g><title>trait_impls_of (1,583,669 samples, 0.64%)</title><rect x="39.6063%" y="117" width="0.6387%" height="15" fill="rgb(234,67,33)"/><text x="39.8563%" y="127.50"></text></g><g><title>implementations_of_trait (684,027 samples, 0.28%)</title><rect x="39.9691%" y="101" width="0.2759%" height="15" fill="rgb(247,98,35)"/><text x="40.2191%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (358,444 samples, 0.14%)</title><rect x="40.1005%" y="85" width="0.1446%" height="15" fill="rgb(247,138,52)"/><text x="40.3505%" y="95.50"></text></g><g><title>coherent_trait (26,637,244 samples, 10.74%)</title><rect x="29.6307%" y="149" width="10.7432%" height="15" fill="rgb(213,79,30)"/><text x="29.8807%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (26,584,324 samples, 10.72%)</title><rect x="29.6520%" y="133" width="10.7218%" height="15" fill="rgb(246,177,23)"/><text x="29.9020%" y="143.50">specialization_g..</text></g><g><title>type_of (319,355 samples, 0.13%)</title><rect x="40.2450%" y="117" width="0.1288%" height="15" fill="rgb(230,62,27)"/><text x="40.4950%" y="127.50"></text></g><g><title>coherence_checking (26,799,477 samples, 10.81%)</title><rect x="29.6155%" y="165" width="10.8086%" height="15" fill="rgb(216,154,8)"/><text x="29.8655%" y="175.50">coherence_checki..</text></g><g><title>associated_item (357,144 samples, 0.14%)</title><rect x="58.2960%" y="101" width="0.1440%" height="15" fill="rgb(244,35,45)"/><text x="58.5460%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (287,823 samples, 0.12%)</title><rect x="58.3240%" y="85" width="0.1161%" height="15" fill="rgb(251,115,12)"/><text x="58.5740%" y="95.50"></text></g><g><title>associated_items (520,394 samples, 0.21%)</title><rect x="58.2376%" y="117" width="0.2099%" height="15" fill="rgb(240,54,50)"/><text x="58.4876%" y="127.50"></text></g><g><title>dropck_outlives (429,796 samples, 0.17%)</title><rect x="58.4943%" y="117" width="0.1733%" height="15" fill="rgb(233,84,52)"/><text x="58.7443%" y="127.50"></text></g><g><title>adt_dtorck_constraint (282,893 samples, 0.11%)</title><rect x="58.5535%" y="101" width="0.1141%" height="15" fill="rgb(207,117,47)"/><text x="58.8035%" y="111.50"></text></g><g><title>generics_of (520,687 samples, 0.21%)</title><rect x="61.2786%" y="101" width="0.2100%" height="15" fill="rgb(249,43,39)"/><text x="61.5286%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (354,887 samples, 0.14%)</title><rect x="61.3455%" y="85" width="0.1431%" height="15" fill="rgb(209,38,44)"/><text x="61.5955%" y="95.50"></text></g><g><title>impl_polarity (258,785 samples, 0.10%)</title><rect x="61.5139%" y="101" width="0.1044%" height="15" fill="rgb(236,212,23)"/><text x="61.7639%" y="111.50"></text></g><g><title>predicates_of (1,271,740 samples, 0.51%)</title><rect x="61.7029%" y="101" width="0.5129%" height="15" fill="rgb(242,79,21)"/><text x="61.9529%" y="111.50"></text></g><g><title>predicates_defined_on (570,704 samples, 0.23%)</title><rect x="61.9857%" y="85" width="0.2302%" height="15" fill="rgb(211,96,35)"/><text x="62.2357%" y="95.50"></text></g><g><title>specializes (2,997,725 samples, 1.21%)</title><rect x="62.2158%" y="101" width="1.2090%" height="15" fill="rgb(253,215,40)"/><text x="62.4658%" y="111.50"></text></g><g><title>param_env (1,532,239 samples, 0.62%)</title><rect x="62.8069%" y="85" width="0.6180%" height="15" fill="rgb(211,81,21)"/><text x="63.0569%" y="95.50"></text></g><g><title>def_span (509,008 samples, 0.21%)</title><rect x="63.2196%" y="69" width="0.2053%" height="15" fill="rgb(208,190,38)"/><text x="63.4696%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (415,556 samples, 0.17%)</title><rect x="63.2573%" y="53" width="0.1676%" height="15" fill="rgb(235,213,38)"/><text x="63.5073%" y="63.50"></text></g><g><title>trait_impls_of (260,195 samples, 0.10%)</title><rect x="63.4289%" y="101" width="0.1049%" height="15" fill="rgb(237,122,38)"/><text x="63.6789%" y="111.50"></text></g><g><title>evaluate_obligation (12,083,397 samples, 4.87%)</title><rect x="58.6676%" y="117" width="4.8734%" height="15" fill="rgb(244,218,35)"/><text x="58.9176%" y="127.50">evalua..</text></g><g><title>fn_sig (352,305 samples, 0.14%)</title><rect x="63.5708%" y="117" width="0.1421%" height="15" fill="rgb(240,68,47)"/><text x="63.8208%" y="127.50"></text></g><g><title>impl_item_implementor_ids (307,214 samples, 0.12%)</title><rect x="63.7800%" y="117" width="0.1239%" height="15" fill="rgb(210,16,53)"/><text x="64.0300%" y="127.50"></text></g><g><title>associated_items (254,174 samples, 0.10%)</title><rect x="63.8014%" y="101" width="0.1025%" height="15" fill="rgb(235,124,12)"/><text x="64.0514%" y="111.50"></text></g><g><title>method_autoderef_steps (366,805 samples, 0.15%)</title><rect x="64.0667%" y="117" width="0.1479%" height="15" fill="rgb(224,169,11)"/><text x="64.3167%" y="127.50"></text></g><g><title>evaluate_obligation (272,253 samples, 0.11%)</title><rect x="64.1048%" y="101" width="0.1098%" height="15" fill="rgb(250,166,2)"/><text x="64.3548%" y="111.50"></text></g><g><title>predicates_of (400,552 samples, 0.16%)</title><rect x="64.3273%" y="117" width="0.1615%" height="15" fill="rgb(242,216,29)"/><text x="64.5773%" y="127.50"></text></g><g><title>predicates_defined_on (272,411 samples, 0.11%)</title><rect x="64.3790%" y="101" width="0.1099%" height="15" fill="rgb(230,116,27)"/><text x="64.6290%" y="111.50"></text></g><g><title>associated_item (509,974 samples, 0.21%)</title><rect x="68.7676%" y="85" width="0.2057%" height="15" fill="rgb(228,99,48)"/><text x="69.0176%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (416,613 samples, 0.17%)</title><rect x="68.8053%" y="69" width="0.1680%" height="15" fill="rgb(253,11,6)"/><text x="69.0553%" y="79.50"></text></g><g><title>associated_items (694,728 samples, 0.28%)</title><rect x="68.7059%" y="101" width="0.2802%" height="15" fill="rgb(247,143,39)"/><text x="68.9559%" y="111.50"></text></g><g><title>generics_of (710,354 samples, 0.29%)</title><rect x="70.2887%" y="85" width="0.2865%" height="15" fill="rgb(236,97,10)"/><text x="70.5387%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (565,151 samples, 0.23%)</title><rect x="70.3473%" y="69" width="0.2279%" height="15" fill="rgb(233,208,19)"/><text x="70.5973%" y="79.50"></text></g><g><title>predicates_of (303,981 samples, 0.12%)</title><rect x="70.6315%" y="85" width="0.1226%" height="15" fill="rgb(216,164,2)"/><text x="70.8815%" y="95.50"></text></g><g><title>specializes (750,526 samples, 0.30%)</title><rect x="70.7541%" y="85" width="0.3027%" height="15" fill="rgb(220,129,5)"/><text x="71.0041%" y="95.50"></text></g><g><title>param_env (393,485 samples, 0.16%)</title><rect x="70.8981%" y="69" width="0.1587%" height="15" fill="rgb(242,17,10)"/><text x="71.1481%" y="79.50"></text></g><g><title>trait_impls_of (267,082 samples, 0.11%)</title><rect x="71.0589%" y="85" width="0.1077%" height="15" fill="rgb(242,107,0)"/><text x="71.3089%" y="95.50"></text></g><g><title>evaluate_obligation (5,217,448 samples, 2.10%)</title><rect x="69.0693%" y="101" width="2.1043%" height="15" fill="rgb(251,28,31)"/><text x="69.3193%" y="111.50">e..</text></g><g><title>generics_of (582,134 samples, 0.23%)</title><rect x="71.2095%" y="101" width="0.2348%" height="15" fill="rgb(233,223,10)"/><text x="71.4595%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (452,654 samples, 0.18%)</title><rect x="71.2618%" y="85" width="0.1826%" height="15" fill="rgb(215,21,27)"/><text x="71.5118%" y="95.50"></text></g><g><title>method_autoderef_steps (259,003 samples, 0.10%)</title><rect x="71.6296%" y="101" width="0.1045%" height="15" fill="rgb(232,23,21)"/><text x="71.8796%" y="111.50"></text></g><g><title>typeck (18,206,801 samples, 7.34%)</title><rect x="64.6019%" y="117" width="7.3431%" height="15" fill="rgb(244,5,23)"/><text x="64.8519%" y="127.50">typeck</text></g><g><title>item_bodies_checking (78,185,204 samples, 31.53%)</title><rect x="40.4573%" y="165" width="31.5332%" height="15" fill="rgb(226,81,46)"/><text x="40.7073%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (78,180,984 samples, 31.53%)</title><rect x="40.4590%" y="149" width="31.5315%" height="15" fill="rgb(247,70,30)"/><text x="40.7090%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (77,972,969 samples, 31.45%)</title><rect x="40.5429%" y="133" width="31.4476%" height="15" fill="rgb(212,68,19)"/><text x="40.7929%" y="143.50">typeck</text></g><g><title>adt_destructor (327,773 samples, 0.13%)</title><rect x="74.2484%" y="133" width="0.1322%" height="15" fill="rgb(240,187,13)"/><text x="74.4984%" y="143.50"></text></g><g><title>coherent_trait (323,893 samples, 0.13%)</title><rect x="74.2500%" y="117" width="0.1306%" height="15" fill="rgb(223,113,26)"/><text x="74.5000%" y="127.50"></text></g><g><title>specialization_graph_of (321,753 samples, 0.13%)</title><rect x="74.2508%" y="101" width="0.1298%" height="15" fill="rgb(206,192,2)"/><text x="74.5008%" y="111.50"></text></g><g><title>item_types_checking (6,731,004 samples, 2.71%)</title><rect x="71.9904%" y="165" width="2.7147%" height="15" fill="rgb(241,108,4)"/><text x="72.2404%" y="175.50">it..</text></g><g><title>check_mod_item_types (6,726,664 samples, 2.71%)</title><rect x="71.9922%" y="149" width="2.7130%" height="15" fill="rgb(247,173,49)"/><text x="72.2422%" y="159.50">ch..</text></g><g><title>late_bound_vars_map (334,553 samples, 0.13%)</title><rect x="75.1417%" y="117" width="0.1349%" height="15" fill="rgb(224,114,35)"/><text x="75.3917%" y="127.50"></text></g><g><title>resolve_lifetimes (284,643 samples, 0.11%)</title><rect x="75.1619%" y="101" width="0.1148%" height="15" fill="rgb(245,159,27)"/><text x="75.4119%" y="111.50"></text></g><g><title>fn_sig (868,167 samples, 0.35%)</title><rect x="74.9524%" y="133" width="0.3501%" height="15" fill="rgb(245,172,44)"/><text x="75.2024%" y="143.50"></text></g><g><title>is_late_bound_map (650,898 samples, 0.26%)</title><rect x="75.4139%" y="117" width="0.2625%" height="15" fill="rgb(236,23,11)"/><text x="75.6639%" y="127.50"></text></g><g><title>resolve_lifetimes (595,628 samples, 0.24%)</title><rect x="75.4362%" y="101" width="0.2402%" height="15" fill="rgb(205,117,38)"/><text x="75.6862%" y="111.50"></text></g><g><title>generics_of (1,188,304 samples, 0.48%)</title><rect x="75.3026%" y="133" width="0.4793%" height="15" fill="rgb(237,72,25)"/><text x="75.5526%" y="143.50"></text></g><g><title>impl_trait_ref (258,241 samples, 0.10%)</title><rect x="75.7818%" y="133" width="0.1042%" height="15" fill="rgb(244,70,9)"/><text x="76.0318%" y="143.50"></text></g><g><title>explicit_predicates_of (249,916 samples, 0.10%)</title><rect x="76.0149%" y="101" width="0.1008%" height="15" fill="rgb(217,125,39)"/><text x="76.2649%" y="111.50"></text></g><g><title>predicates_of (703,739 samples, 0.28%)</title><rect x="75.8860%" y="133" width="0.2838%" height="15" fill="rgb(235,36,10)"/><text x="76.1360%" y="143.50"></text></g><g><title>predicates_defined_on (581,528 samples, 0.23%)</title><rect x="75.9353%" y="117" width="0.2345%" height="15" fill="rgb(251,123,47)"/><text x="76.1853%" y="127.50"></text></g><g><title>type_collecting (3,836,282 samples, 1.55%)</title><rect x="74.7065%" y="165" width="1.5472%" height="15" fill="rgb(221,13,13)"/><text x="74.9565%" y="175.50"></text></g><g><title>collect_mod_item_types (3,829,162 samples, 1.54%)</title><rect x="74.7094%" y="149" width="1.5444%" height="15" fill="rgb(238,131,9)"/><text x="74.9594%" y="159.50"></text></g><g><title>evaluate_obligation (288,465 samples, 0.12%)</title><rect x="77.8687%" y="133" width="0.1163%" height="15" fill="rgb(211,50,8)"/><text x="78.1187%" y="143.50"></text></g><g><title>param_env (788,134 samples, 0.32%)</title><rect x="78.0640%" y="133" width="0.3179%" height="15" fill="rgb(245,182,24)"/><text x="78.3140%" y="143.50"></text></g><g><title>region_scope_tree (1,136,639 samples, 0.46%)</title><rect x="78.4008%" y="133" width="0.4584%" height="15" fill="rgb(242,14,37)"/><text x="78.6508%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,053,423 samples, 2.44%)</title><rect x="76.4491%" y="149" width="2.4414%" height="15" fill="rgb(246,228,12)"/><text x="76.6991%" y="159.50">ch..</text></g><g><title>adt_def (381,154 samples, 0.15%)</title><rect x="81.0797%" y="85" width="0.1537%" height="15" fill="rgb(213,55,15)"/><text x="81.3297%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (380,334 samples, 0.15%)</title><rect x="81.0800%" y="69" width="0.1534%" height="15" fill="rgb(209,9,3)"/><text x="81.3300%" y="79.50"></text></g><g><title>item_attrs (370,064 samples, 0.15%)</title><rect x="81.0842%" y="53" width="0.1493%" height="15" fill="rgb(230,59,30)"/><text x="81.3342%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (369,124 samples, 0.15%)</title><rect x="81.0846%" y="37" width="0.1489%" height="15" fill="rgb(209,121,21)"/><text x="81.3346%" y="47.50"></text></g><g><title>adt_sized_constraint (400,194 samples, 0.16%)</title><rect x="81.0780%" y="101" width="0.1614%" height="15" fill="rgb(220,109,13)"/><text x="81.3280%" y="111.50"></text></g><g><title>adt_sized_constraint (418,885 samples, 0.17%)</title><rect x="81.0707%" y="117" width="0.1689%" height="15" fill="rgb(232,18,1)"/><text x="81.3207%" y="127.50"></text></g><g><title>evaluate_obligation (1,329,574 samples, 0.54%)</title><rect x="80.7288%" y="133" width="0.5362%" height="15" fill="rgb(215,41,42)"/><text x="80.9788%" y="143.50"></text></g><g><title>param_env (445,423 samples, 0.18%)</title><rect x="81.3157%" y="133" width="0.1796%" height="15" fill="rgb(224,123,36)"/><text x="81.5657%" y="143.50"></text></g><g><title>analysis (201,831,621 samples, 81.40%)</title><rect x="0.2712%" y="197" width="81.4015%" height="15" fill="rgb(240,125,3)"/><text x="0.5212%" y="207.50">analysis</text></g><g><title>type_check_crate (129,205,227 samples, 52.11%)</title><rect x="29.5625%" y="181" width="52.1102%" height="15" fill="rgb(205,98,50)"/><text x="29.8125%" y="191.50">type_check_crate</text></g><g><title>wf_checking (13,422,898 samples, 5.41%)</title><rect x="76.2591%" y="165" width="5.4136%" height="15" fill="rgb(205,185,37)"/><text x="76.5091%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (6,898,377 samples, 2.78%)</title><rect x="78.8905%" y="149" width="2.7822%" height="15" fill="rgb(238,207,15)"/><text x="79.1405%" y="159.50">ch..</text></g><g><title>codegen_crate (390,335 samples, 0.16%)</title><rect x="81.6754%" y="197" width="0.1574%" height="15" fill="rgb(213,199,42)"/><text x="81.9254%" y="207.50"></text></g><g><title>AST_validation (281,854 samples, 0.11%)</title><rect x="81.8875%" y="181" width="0.1137%" height="15" fill="rgb(235,201,11)"/><text x="82.1375%" y="191.50"></text></g><g><title>metadata_register_crate (1,363,366 samples, 0.55%)</title><rect x="86.6978%" y="149" width="0.5499%" height="15" fill="rgb(207,46,11)"/><text x="86.9478%" y="159.50"></text></g><g><title>metadata_register_crate (518,336 samples, 0.21%)</title><rect x="87.0386%" y="133" width="0.2091%" height="15" fill="rgb(241,35,35)"/><text x="87.2886%" y="143.50"></text></g><g><title>macro_expand_crate (12,866,572 samples, 5.19%)</title><rect x="82.0741%" y="181" width="5.1893%" height="15" fill="rgb(243,32,47)"/><text x="82.3241%" y="191.50">macro_..</text></g><g><title>expand_crate (12,851,672 samples, 5.18%)</title><rect x="82.0801%" y="165" width="5.1833%" height="15" fill="rgb(247,202,23)"/><text x="82.3301%" y="175.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (548,816 samples, 0.22%)</title><rect x="87.2648%" y="181" width="0.2213%" height="15" fill="rgb(219,102,11)"/><text x="87.5148%" y="191.50"></text></g><g><title>late_resolve_crate (3,598,291 samples, 1.45%)</title><rect x="87.5490%" y="165" width="1.4512%" height="15" fill="rgb(243,110,44)"/><text x="87.7990%" y="175.50"></text></g><g><title>configure_and_expand (17,984,489 samples, 7.25%)</title><rect x="81.8328%" y="197" width="7.2534%" height="15" fill="rgb(222,74,54)"/><text x="82.0828%" y="207.50">configure_..</text></g><g><title>resolve_crate (3,967,224 samples, 1.60%)</title><rect x="87.4862%" y="181" width="1.6000%" height="15" fill="rgb(216,99,12)"/><text x="87.7362%" y="191.50"></text></g><g><title>drop_ast (539,106 samples, 0.22%)</title><rect x="89.0862%" y="197" width="0.2174%" height="15" fill="rgb(226,22,26)"/><text x="89.3362%" y="207.50"></text></g><g><title>early_lint_checks (827,489 samples, 0.33%)</title><rect x="89.3121%" y="197" width="0.3337%" height="15" fill="rgb(217,163,10)"/><text x="89.5621%" y="207.50"></text></g><g><title>free_global_ctxt (5,254,348 samples, 2.12%)</title><rect x="89.6459%" y="197" width="2.1192%" height="15" fill="rgb(213,25,53)"/><text x="89.8959%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,948,511 samples, 0.79%)</title><rect x="91.7650%" y="197" width="0.7859%" height="15" fill="rgb(252,105,26)"/><text x="92.0150%" y="207.50"></text></g><g><title>hir_lowering (6,734,904 samples, 2.72%)</title><rect x="92.5509%" y="197" width="2.7163%" height="15" fill="rgb(220,39,43)"/><text x="92.8009%" y="207.50">hi..</text></g><g><title>parse_crate (9,361,563 samples, 3.78%)</title><rect x="95.2956%" y="197" width="3.7756%" height="15" fill="rgb(229,68,48)"/><text x="95.5456%" y="207.50">pars..</text></g><g><title>self_profile_alloc_query_strings (1,626,688 samples, 0.66%)</title><rect x="99.1606%" y="197" width="0.6561%" height="15" fill="rgb(252,8,32)"/><text x="99.4106%" y="207.50"></text></g><g><title>all (247,945,900 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (247,945,900 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (360,524 samples, 0.15%)</title><rect x="99.8546%" y="197" width="0.1454%" height="15" fill="rgb(236,28,36)"/><text x="100.1046%" y="207.50"></text></g></svg></svg>