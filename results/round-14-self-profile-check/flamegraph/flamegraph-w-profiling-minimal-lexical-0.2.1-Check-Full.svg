<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (457,587 samples, 0.18%)</title><rect x="12.3850%" y="213" width="0.1785%" height="15" fill="rgb(227,0,7)"/><text x="12.6350%" y="223.50"></text></g><g><title>item_attrs (392,902 samples, 0.15%)</title><rect x="12.9941%" y="181" width="0.1533%" height="15" fill="rgb(217,0,24)"/><text x="13.2441%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (380,142 samples, 0.15%)</title><rect x="12.9991%" y="165" width="0.1483%" height="15" fill="rgb(221,193,54)"/><text x="13.2491%" y="175.50"></text></g><g><title>codegen_fn_attrs (571,445 samples, 0.22%)</title><rect x="12.9356%" y="197" width="0.2230%" height="15" fill="rgb(248,212,6)"/><text x="13.1856%" y="207.50"></text></g><g><title>is_copy_raw (396,367 samples, 0.15%)</title><rect x="15.8407%" y="181" width="0.1546%" height="15" fill="rgb(208,68,35)"/><text x="16.0907%" y="191.50"></text></g><g><title>evaluate_obligation (293,945 samples, 0.11%)</title><rect x="15.8806%" y="165" width="0.1147%" height="15" fill="rgb(232,128,0)"/><text x="16.1306%" y="175.50"></text></g><g><title>needs_drop_raw (1,242,652 samples, 0.48%)</title><rect x="15.9976%" y="181" width="0.4848%" height="15" fill="rgb(207,160,47)"/><text x="16.2476%" y="191.50"></text></g><g><title>is_copy_raw (917,070 samples, 0.36%)</title><rect x="16.1247%" y="165" width="0.3578%" height="15" fill="rgb(228,23,34)"/><text x="16.3747%" y="175.50"></text></g><g><title>evaluate_obligation (720,178 samples, 0.28%)</title><rect x="16.2015%" y="149" width="0.2810%" height="15" fill="rgb(218,30,26)"/><text x="16.4515%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (360,665 samples, 0.14%)</title><rect x="16.6135%" y="165" width="0.1407%" height="15" fill="rgb(220,122,19)"/><text x="16.8635%" y="175.50"></text></g><g><title>specialization_graph_of (881,339 samples, 0.34%)</title><rect x="16.7838%" y="165" width="0.3439%" height="15" fill="rgb(250,228,42)"/><text x="17.0338%" y="175.50"></text></g><g><title>impl_trait_ref (423,105 samples, 0.17%)</title><rect x="16.9626%" y="149" width="0.1651%" height="15" fill="rgb(240,193,28)"/><text x="17.2126%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (364,435 samples, 0.14%)</title><rect x="16.9855%" y="133" width="0.1422%" height="15" fill="rgb(216,20,37)"/><text x="17.2355%" y="143.50"></text></g><g><title>resolve_instance (1,774,950 samples, 0.69%)</title><rect x="16.4941%" y="181" width="0.6925%" height="15" fill="rgb(206,188,39)"/><text x="16.7441%" y="191.50"></text></g><g><title>thir_body (2,699,804 samples, 1.05%)</title><rect x="17.2061%" y="181" width="1.0534%" height="15" fill="rgb(217,207,13)"/><text x="17.4561%" y="191.50"></text></g><g><title>mir_const (16,964,343 samples, 6.62%)</title><rect x="11.6519%" y="229" width="6.6188%" height="15" fill="rgb(231,73,38)"/><text x="11.9019%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (14,627,641 samples, 5.71%)</title><rect x="12.5636%" y="213" width="5.7071%" height="15" fill="rgb(225,20,46)"/><text x="12.8136%" y="223.50">unsafet..</text></g><g><title>mir_built (13,102,715 samples, 5.11%)</title><rect x="13.1585%" y="197" width="5.1122%" height="15" fill="rgb(210,31,41)"/><text x="13.4085%" y="207.50">mir_bu..</text></g><g><title>thir_body (1,454,225 samples, 0.57%)</title><rect x="19.0748%" y="165" width="0.5674%" height="15" fill="rgb(221,200,47)"/><text x="19.3248%" y="175.50"></text></g><g><title>lit_to_const (334,394 samples, 0.13%)</title><rect x="19.5117%" y="149" width="0.1305%" height="15" fill="rgb(226,26,5)"/><text x="19.7617%" y="159.50"></text></g><g><title>mir_const (3,118,002 samples, 1.22%)</title><rect x="18.4320%" y="213" width="1.2165%" height="15" fill="rgb(249,33,26)"/><text x="18.6820%" y="223.50"></text></g><g><title>unsafety_check_result (2,797,338 samples, 1.09%)</title><rect x="18.5571%" y="197" width="1.0914%" height="15" fill="rgb(235,183,28)"/><text x="18.8071%" y="207.50"></text></g><g><title>mir_built (2,667,858 samples, 1.04%)</title><rect x="18.6076%" y="181" width="1.0409%" height="15" fill="rgb(221,5,38)"/><text x="18.8576%" y="191.50"></text></g><g><title>mir_const_qualif (3,532,596 samples, 1.38%)</title><rect x="18.2707%" y="229" width="1.3783%" height="15" fill="rgb(247,18,42)"/><text x="18.5207%" y="239.50"></text></g><g><title>mir_promoted (22,429,532 samples, 8.75%)</title><rect x="10.8983%" y="245" width="8.7511%" height="15" fill="rgb(241,131,45)"/><text x="11.1483%" y="255.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,660,059 samples, 0.65%)</title><rect x="19.6528%" y="245" width="0.6477%" height="15" fill="rgb(249,31,29)"/><text x="19.9028%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (1,207,754 samples, 0.47%)</title><rect x="20.3005%" y="245" width="0.4712%" height="15" fill="rgb(225,111,53)"/><text x="20.5505%" y="255.50"></text></g><g><title>normalize_projection_ty (831,420 samples, 0.32%)</title><rect x="20.4474%" y="229" width="0.3244%" height="15" fill="rgb(238,160,17)"/><text x="20.6974%" y="239.50"></text></g><g><title>type_op_prove_predicate (3,110,611 samples, 1.21%)</title><rect x="20.8546%" y="245" width="1.2136%" height="15" fill="rgb(214,148,48)"/><text x="21.1046%" y="255.50"></text></g><g><title>MIR_borrow_checking (55,206,842 samples, 21.54%)</title><rect x="0.5305%" y="277" width="21.5396%" height="15" fill="rgb(232,36,49)"/><text x="0.7805%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,921,860 samples, 21.43%)</title><rect x="0.6417%" y="261" width="21.4284%" height="15" fill="rgb(209,103,24)"/><text x="0.8917%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,313,955 samples, 0.51%)</title><rect x="22.0701%" y="277" width="0.5127%" height="15" fill="rgb(229,88,8)"/><text x="22.3201%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,105,183 samples, 0.43%)</title><rect x="22.1516%" y="261" width="0.4312%" height="15" fill="rgb(213,181,19)"/><text x="22.4016%" y="271.50"></text></g><g><title>hir_module_items (370,215 samples, 0.14%)</title><rect x="22.5828%" y="277" width="0.1444%" height="15" fill="rgb(254,191,54)"/><text x="22.8328%" y="287.50"></text></g><g><title>should_inherit_track_caller (280,472 samples, 0.11%)</title><rect x="23.0543%" y="229" width="0.1094%" height="15" fill="rgb(241,83,37)"/><text x="23.3043%" y="239.50"></text></g><g><title>codegen_fn_attrs (490,854 samples, 0.19%)</title><rect x="22.9799%" y="245" width="0.1915%" height="15" fill="rgb(233,36,39)"/><text x="23.2299%" y="255.50"></text></g><g><title>check_mod_attrs (1,099,692 samples, 0.43%)</title><rect x="22.7424%" y="261" width="0.4291%" height="15" fill="rgb(226,3,54)"/><text x="22.9924%" y="271.50"></text></g><g><title>check_mod_const_bodies (257,711 samples, 0.10%)</title><rect x="23.1715%" y="261" width="0.1005%" height="15" fill="rgb(245,192,40)"/><text x="23.4215%" y="271.50"></text></g><g><title>lookup_deprecation_entry (256,633 samples, 0.10%)</title><rect x="23.4694%" y="245" width="0.1001%" height="15" fill="rgb(238,167,29)"/><text x="23.7194%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (686,069 samples, 0.27%)</title><rect x="23.3475%" y="261" width="0.2677%" height="15" fill="rgb(232,182,51)"/><text x="23.5975%" y="271.50"></text></g><g><title>misc_checking_1 (2,362,426 samples, 0.92%)</title><rect x="22.7274%" y="277" width="0.9217%" height="15" fill="rgb(231,60,39)"/><text x="22.9774%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (1,162,033 samples, 0.45%)</title><rect x="23.6497%" y="261" width="0.4534%" height="15" fill="rgb(208,69,12)"/><text x="23.8997%" y="271.50"></text></g><g><title>check_mod_liveness (912,888 samples, 0.36%)</title><rect x="23.7469%" y="245" width="0.3562%" height="15" fill="rgb(235,93,37)"/><text x="23.9969%" y="255.50"></text></g><g><title>misc_checking_2 (2,465,797 samples, 0.96%)</title><rect x="23.6491%" y="277" width="0.9621%" height="15" fill="rgb(213,116,39)"/><text x="23.8991%" y="287.50"></text></g><g><title>match_checking (1,302,114 samples, 0.51%)</title><rect x="24.1031%" y="261" width="0.5080%" height="15" fill="rgb(222,207,29)"/><text x="24.3531%" y="271.50"></text></g><g><title>check_match (1,231,203 samples, 0.48%)</title><rect x="24.1308%" y="245" width="0.4804%" height="15" fill="rgb(206,96,30)"/><text x="24.3808%" y="255.50"></text></g><g><title>check_private_in_public (359,494 samples, 0.14%)</title><rect x="24.6150%" y="261" width="0.1403%" height="15" fill="rgb(218,138,4)"/><text x="24.8650%" y="271.50"></text></g><g><title>death_checking (822,759 samples, 0.32%)</title><rect x="24.7552%" y="261" width="0.3210%" height="15" fill="rgb(250,191,14)"/><text x="25.0052%" y="271.50"></text></g><g><title>eval_to_allocation_raw (1,788,660 samples, 0.70%)</title><rect x="25.6753%" y="229" width="0.6979%" height="15" fill="rgb(239,60,40)"/><text x="25.9253%" y="239.50"></text></g><g><title>eval_to_allocation_raw (1,785,300 samples, 0.70%)</title><rect x="25.6766%" y="213" width="0.6966%" height="15" fill="rgb(206,27,48)"/><text x="25.9266%" y="223.50"></text></g><g><title>param_env (459,217 samples, 0.18%)</title><rect x="26.4381%" y="229" width="0.1792%" height="15" fill="rgb(225,35,8)"/><text x="26.6881%" y="239.50"></text></g><g><title>crate_lints (5,151,427 samples, 2.01%)</title><rect x="25.0770%" y="245" width="2.0099%" height="15" fill="rgb(250,213,24)"/><text x="25.3270%" y="255.50">c..</text></g><g><title>type_of (1,134,004 samples, 0.44%)</title><rect x="26.6445%" y="229" width="0.4424%" height="15" fill="rgb(247,123,22)"/><text x="26.8945%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (904,801 samples, 0.35%)</title><rect x="26.7339%" y="213" width="0.3530%" height="15" fill="rgb(231,138,38)"/><text x="26.9839%" y="223.50"></text></g><g><title>lint_checking (6,488,502 samples, 2.53%)</title><rect x="25.0762%" y="261" width="2.5316%" height="15" fill="rgb(231,145,46)"/><text x="25.3262%" y="271.50">li..</text></g><g><title>module_lints (1,335,085 samples, 0.52%)</title><rect x="27.0869%" y="245" width="0.5209%" height="15" fill="rgb(251,118,11)"/><text x="27.3369%" y="255.50"></text></g><g><title>lint_mod (1,322,694 samples, 0.52%)</title><rect x="27.0917%" y="229" width="0.5161%" height="15" fill="rgb(217,147,25)"/><text x="27.3417%" y="239.50"></text></g><g><title>privacy_access_levels (561,927 samples, 0.22%)</title><rect x="27.6078%" y="261" width="0.2192%" height="15" fill="rgb(247,81,37)"/><text x="27.8578%" y="271.50"></text></g><g><title>privacy_checking_modules (1,483,647 samples, 0.58%)</title><rect x="27.8271%" y="261" width="0.5789%" height="15" fill="rgb(209,12,38)"/><text x="28.0771%" y="271.50"></text></g><g><title>check_mod_privacy (1,474,557 samples, 0.58%)</title><rect x="27.8306%" y="245" width="0.5753%" height="15" fill="rgb(227,1,9)"/><text x="28.0806%" y="255.50"></text></g><g><title>misc_checking_3 (9,748,179 samples, 3.80%)</title><rect x="24.6111%" y="277" width="3.8034%" height="15" fill="rgb(248,47,43)"/><text x="24.8611%" y="287.50">misc..</text></g><g><title>adt_destructor (292,333 samples, 0.11%)</title><rect x="28.4977%" y="229" width="0.1141%" height="15" fill="rgb(221,10,30)"/><text x="28.7477%" y="239.50"></text></g><g><title>coherent_trait (288,783 samples, 0.11%)</title><rect x="28.4990%" y="213" width="0.1127%" height="15" fill="rgb(210,229,1)"/><text x="28.7490%" y="223.50"></text></g><g><title>specialization_graph_of (287,553 samples, 0.11%)</title><rect x="28.4995%" y="197" width="0.1122%" height="15" fill="rgb(222,148,37)"/><text x="28.7495%" y="207.50"></text></g><g><title>impl_parent (2,769,966 samples, 1.08%)</title><rect x="30.3115%" y="213" width="1.0807%" height="15" fill="rgb(234,67,33)"/><text x="30.5615%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,540,894 samples, 0.60%)</title><rect x="30.7911%" y="197" width="0.6012%" height="15" fill="rgb(247,98,35)"/><text x="31.0411%" y="207.50"></text></g><g><title>impl_trait_ref (5,660,358 samples, 2.21%)</title><rect x="31.3923%" y="213" width="2.2085%" height="15" fill="rgb(247,138,52)"/><text x="31.6423%" y="223.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,614,916 samples, 1.80%)</title><rect x="31.8002%" y="197" width="1.8006%" height="15" fill="rgb(213,79,30)"/><text x="32.0502%" y="207.50">m..</text></g><g><title>coherent_trait (13,995,865 samples, 5.46%)</title><rect x="28.4790%" y="245" width="5.4607%" height="15" fill="rgb(246,177,23)"/><text x="28.7290%" y="255.50">coheren..</text></g><g><title>specialization_graph_of (13,414,708 samples, 5.23%)</title><rect x="28.7057%" y="229" width="5.2339%" height="15" fill="rgb(230,62,27)"/><text x="28.9557%" y="239.50">specia..</text></g><g><title>trait_impls_of (866,557 samples, 0.34%)</title><rect x="33.6016%" y="213" width="0.3381%" height="15" fill="rgb(216,154,8)"/><text x="33.8516%" y="223.50"></text></g><g><title>implementations_of_trait (257,111 samples, 0.10%)</title><rect x="33.8393%" y="197" width="0.1003%" height="15" fill="rgb(244,35,45)"/><text x="34.0893%" y="207.50"></text></g><g><title>coherence_checking (14,089,306 samples, 5.50%)</title><rect x="28.4686%" y="261" width="5.4971%" height="15" fill="rgb(251,115,12)"/><text x="28.7186%" y="271.50">coheren..</text></g><g><title>associated_item (720,818 samples, 0.28%)</title><rect x="53.4476%" y="197" width="0.2812%" height="15" fill="rgb(240,54,50)"/><text x="53.6976%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (577,236 samples, 0.23%)</title><rect x="53.5037%" y="181" width="0.2252%" height="15" fill="rgb(233,84,52)"/><text x="53.7537%" y="191.50"></text></g><g><title>associated_items (1,018,300 samples, 0.40%)</title><rect x="53.3496%" y="213" width="0.3973%" height="15" fill="rgb(207,117,47)"/><text x="53.5996%" y="223.50"></text></g><g><title>dropck_outlives (393,628 samples, 0.15%)</title><rect x="53.7952%" y="213" width="0.1536%" height="15" fill="rgb(249,43,39)"/><text x="54.0452%" y="223.50"></text></g><g><title>eval_to_const_value_raw (337,774 samples, 0.13%)</title><rect x="53.9487%" y="213" width="0.1318%" height="15" fill="rgb(209,38,44)"/><text x="54.1987%" y="223.50"></text></g><g><title>eval_to_allocation_raw (331,444 samples, 0.13%)</title><rect x="53.9512%" y="197" width="0.1293%" height="15" fill="rgb(236,212,23)"/><text x="54.2012%" y="207.50"></text></g><g><title>generics_of (2,073,887 samples, 0.81%)</title><rect x="58.4434%" y="197" width="0.8092%" height="15" fill="rgb(242,79,21)"/><text x="58.6934%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (1,436,359 samples, 0.56%)</title><rect x="58.6921%" y="181" width="0.5604%" height="15" fill="rgb(211,96,35)"/><text x="58.9421%" y="191.50"></text></g><g><title>impl_trait_ref (1,593,768 samples, 0.62%)</title><rect x="59.4043%" y="197" width="0.6218%" height="15" fill="rgb(253,215,40)"/><text x="59.6543%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,315,466 samples, 0.51%)</title><rect x="59.5129%" y="181" width="0.5132%" height="15" fill="rgb(211,81,21)"/><text x="59.7629%" y="191.50"></text></g><g><title>opt_def_kind (259,215 samples, 0.10%)</title><rect x="60.2122%" y="181" width="0.1011%" height="15" fill="rgb(208,190,38)"/><text x="60.4622%" y="191.50"></text></g><g><title>explicit_predicates_of (265,611 samples, 0.10%)</title><rect x="60.4419%" y="165" width="0.1036%" height="15" fill="rgb(235,213,38)"/><text x="60.6919%" y="175.50"></text></g><g><title>predicates_of (1,440,106 samples, 0.56%)</title><rect x="60.0614%" y="197" width="0.5619%" height="15" fill="rgb(237,122,38)"/><text x="60.3114%" y="207.50"></text></g><g><title>predicates_defined_on (794,327 samples, 0.31%)</title><rect x="60.3134%" y="181" width="0.3099%" height="15" fill="rgb(244,218,35)"/><text x="60.5634%" y="191.50"></text></g><g><title>specializes (3,773,927 samples, 1.47%)</title><rect x="60.6233%" y="197" width="1.4724%" height="15" fill="rgb(240,68,47)"/><text x="60.8733%" y="207.50"></text></g><g><title>param_env (2,178,589 samples, 0.85%)</title><rect x="61.2457%" y="181" width="0.8500%" height="15" fill="rgb(210,16,53)"/><text x="61.4957%" y="191.50"></text></g><g><title>def_span (944,430 samples, 0.37%)</title><rect x="61.7273%" y="165" width="0.3685%" height="15" fill="rgb(235,124,12)"/><text x="61.9773%" y="175.50"></text></g><g><title>metadata_decode_entry_def_span (833,009 samples, 0.33%)</title><rect x="61.7707%" y="149" width="0.3250%" height="15" fill="rgb(224,169,11)"/><text x="62.0207%" y="159.50"></text></g><g><title>trait_impls_of (542,675 samples, 0.21%)</title><rect x="62.1017%" y="197" width="0.2117%" height="15" fill="rgb(250,166,2)"/><text x="62.3517%" y="207.50"></text></g><g><title>evaluate_obligation (21,157,310 samples, 8.25%)</title><rect x="54.0805%" y="213" width="8.2548%" height="15" fill="rgb(242,216,29)"/><text x="54.3305%" y="223.50">evaluate_ob..</text></g><g><title>impl_item_implementor_ids (259,102 samples, 0.10%)</title><rect x="62.5032%" y="213" width="0.1011%" height="15" fill="rgb(230,116,27)"/><text x="62.7532%" y="223.50"></text></g><g><title>item_attrs (361,374 samples, 0.14%)</title><rect x="62.6695%" y="213" width="0.1410%" height="15" fill="rgb(228,99,48)"/><text x="62.9195%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (350,944 samples, 0.14%)</title><rect x="62.6736%" y="197" width="0.1369%" height="15" fill="rgb(253,11,6)"/><text x="62.9236%" y="207.50"></text></g><g><title>method_autoderef_steps (432,127 samples, 0.17%)</title><rect x="62.8503%" y="213" width="0.1686%" height="15" fill="rgb(247,143,39)"/><text x="63.1003%" y="223.50"></text></g><g><title>predicates_of (504,704 samples, 0.20%)</title><rect x="63.1345%" y="213" width="0.1969%" height="15" fill="rgb(236,97,10)"/><text x="63.3845%" y="223.50"></text></g><g><title>predicates_defined_on (356,524 samples, 0.14%)</title><rect x="63.1923%" y="197" width="0.1391%" height="15" fill="rgb(233,208,19)"/><text x="63.4423%" y="207.50"></text></g><g><title>evaluate_obligation (1,279,928 samples, 0.50%)</title><rect x="64.9522%" y="197" width="0.4994%" height="15" fill="rgb(216,164,2)"/><text x="65.2022%" y="207.50"></text></g><g><title>typeck (5,240,698 samples, 2.04%)</title><rect x="63.5077%" y="213" width="2.0447%" height="15" fill="rgb(220,129,5)"/><text x="63.7577%" y="223.50">t..</text></g><g><title>item_bodies_checking (81,010,270 samples, 31.61%)</title><rect x="33.9826%" y="261" width="31.6071%" height="15" fill="rgb(242,17,10)"/><text x="34.2326%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (81,006,760 samples, 31.61%)</title><rect x="33.9840%" y="245" width="31.6057%" height="15" fill="rgb(242,107,0)"/><text x="34.2340%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (80,805,767 samples, 31.53%)</title><rect x="34.0624%" y="229" width="31.5273%" height="15" fill="rgb(251,28,31)"/><text x="34.3124%" y="239.50">typeck</text></g><g><title>item_types_checking (3,364,157 samples, 1.31%)</title><rect x="65.5897%" y="261" width="1.3126%" height="15" fill="rgb(233,223,10)"/><text x="65.8397%" y="271.50"></text></g><g><title>check_mod_item_types (3,354,287 samples, 1.31%)</title><rect x="65.5936%" y="245" width="1.3087%" height="15" fill="rgb(215,21,27)"/><text x="65.8436%" y="255.50"></text></g><g><title>typeck (2,465,887 samples, 0.96%)</title><rect x="65.9402%" y="229" width="0.9621%" height="15" fill="rgb(232,23,21)"/><text x="66.1902%" y="239.50"></text></g><g><title>fn_sig (456,355 samples, 0.18%)</title><rect x="67.0986%" y="229" width="0.1781%" height="15" fill="rgb(244,5,23)"/><text x="67.3486%" y="239.50"></text></g><g><title>is_late_bound_map (626,377 samples, 0.24%)</title><rect x="67.3470%" y="213" width="0.2444%" height="15" fill="rgb(226,81,46)"/><text x="67.5970%" y="223.50"></text></g><g><title>resolve_lifetimes (619,607 samples, 0.24%)</title><rect x="67.3496%" y="197" width="0.2417%" height="15" fill="rgb(247,70,30)"/><text x="67.5996%" y="207.50"></text></g><g><title>lint_levels (409,475 samples, 0.16%)</title><rect x="67.4316%" y="181" width="0.1598%" height="15" fill="rgb(212,68,19)"/><text x="67.6816%" y="191.50"></text></g><g><title>named_region_map (313,963 samples, 0.12%)</title><rect x="67.5914%" y="213" width="0.1225%" height="15" fill="rgb(240,187,13)"/><text x="67.8414%" y="223.50"></text></g><g><title>resolve_lifetimes (285,443 samples, 0.11%)</title><rect x="67.6025%" y="197" width="0.1114%" height="15" fill="rgb(223,113,26)"/><text x="67.8525%" y="207.50"></text></g><g><title>generics_of (1,145,062 samples, 0.45%)</title><rect x="67.2766%" y="229" width="0.4468%" height="15" fill="rgb(206,192,2)"/><text x="67.5266%" y="239.50"></text></g><g><title>explicit_predicates_of (400,976 samples, 0.16%)</title><rect x="67.8426%" y="197" width="0.1564%" height="15" fill="rgb(241,108,4)"/><text x="68.0926%" y="207.50"></text></g><g><title>predicates_of (841,780 samples, 0.33%)</title><rect x="67.7516%" y="229" width="0.3284%" height="15" fill="rgb(247,173,49)"/><text x="68.0016%" y="239.50"></text></g><g><title>predicates_defined_on (751,289 samples, 0.29%)</title><rect x="67.7869%" y="213" width="0.2931%" height="15" fill="rgb(224,114,35)"/><text x="68.0369%" y="223.50"></text></g><g><title>type_collecting (3,390,588 samples, 1.32%)</title><rect x="66.9040%" y="261" width="1.3229%" height="15" fill="rgb(245,159,27)"/><text x="67.1540%" y="271.50"></text></g><g><title>collect_mod_item_types (3,362,986 samples, 1.31%)</title><rect x="66.9147%" y="245" width="1.3121%" height="15" fill="rgb(245,172,44)"/><text x="67.1647%" y="255.50"></text></g><g><title>evaluate_obligation (280,753 samples, 0.11%)</title><rect x="69.0023%" y="229" width="0.1095%" height="15" fill="rgb(236,23,11)"/><text x="69.2523%" y="239.50"></text></g><g><title>param_env (340,322 samples, 0.13%)</title><rect x="69.1458%" y="229" width="0.1328%" height="15" fill="rgb(205,117,38)"/><text x="69.3958%" y="239.50"></text></g><g><title>check_impl_item_well_formed (2,728,530 samples, 1.06%)</title><rect x="68.3683%" y="245" width="1.0646%" height="15" fill="rgb(237,72,25)"/><text x="68.6183%" y="255.50"></text></g><g><title>region_scope_tree (372,536 samples, 0.15%)</title><rect x="69.2875%" y="229" width="0.1453%" height="15" fill="rgb(244,70,9)"/><text x="69.5375%" y="239.50"></text></g><g><title>mir_borrowck (450,374 samples, 0.18%)</title><rect x="70.8102%" y="149" width="0.1757%" height="15" fill="rgb(217,125,39)"/><text x="71.0602%" y="159.50"></text></g><g><title>mir_for_ctfe (612,966 samples, 0.24%)</title><rect x="70.7471%" y="181" width="0.2392%" height="15" fill="rgb(235,36,10)"/><text x="70.9971%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (568,526 samples, 0.22%)</title><rect x="70.7644%" y="165" width="0.2218%" height="15" fill="rgb(251,123,47)"/><text x="71.0144%" y="175.50"></text></g><g><title>mir_for_ctfe (266,642 samples, 0.10%)</title><rect x="71.0477%" y="117" width="0.1040%" height="15" fill="rgb(221,13,13)"/><text x="71.2977%" y="127.50"></text></g><g><title>mir_for_ctfe (297,744 samples, 0.12%)</title><rect x="71.2403%" y="53" width="0.1162%" height="15" fill="rgb(238,131,9)"/><text x="71.4903%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (271,474 samples, 0.11%)</title><rect x="71.2505%" y="37" width="0.1059%" height="15" fill="rgb(211,50,8)"/><text x="71.5005%" y="47.50"></text></g><g><title>eval_to_const_value_raw (666,648 samples, 0.26%)</title><rect x="71.1598%" y="101" width="0.2601%" height="15" fill="rgb(245,182,24)"/><text x="71.4098%" y="111.50"></text></g><g><title>eval_to_const_value_raw (662,958 samples, 0.26%)</title><rect x="71.1612%" y="85" width="0.2587%" height="15" fill="rgb(242,14,37)"/><text x="71.4112%" y="95.50"></text></g><g><title>eval_to_allocation_raw (653,488 samples, 0.25%)</title><rect x="71.1649%" y="69" width="0.2550%" height="15" fill="rgb(246,228,12)"/><text x="71.4149%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (697,638 samples, 0.27%)</title><rect x="71.1517%" y="117" width="0.2722%" height="15" fill="rgb(213,55,15)"/><text x="71.4017%" y="127.50"></text></g><g><title>evaluate_obligation (518,846 samples, 0.20%)</title><rect x="71.5185%" y="101" width="0.2024%" height="15" fill="rgb(209,9,3)"/><text x="71.7685%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,900,881 samples, 0.74%)</title><rect x="70.9904%" y="165" width="0.7417%" height="15" fill="rgb(230,59,30)"/><text x="71.2404%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,899,301 samples, 0.74%)</title><rect x="70.9910%" y="149" width="0.7410%" height="15" fill="rgb(209,121,21)"/><text x="71.2410%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,897,551 samples, 0.74%)</title><rect x="70.9917%" y="133" width="0.7404%" height="15" fill="rgb(220,109,13)"/><text x="71.2417%" y="143.50"></text></g><g><title>typeck (789,798 samples, 0.31%)</title><rect x="71.4239%" y="117" width="0.3081%" height="15" fill="rgb(232,18,1)"/><text x="71.6739%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,917,411 samples, 0.75%)</title><rect x="70.9864%" y="181" width="0.7481%" height="15" fill="rgb(215,41,42)"/><text x="71.2364%" y="191.50"></text></g><g><title>eval_to_const_value_raw (3,033,684 samples, 1.18%)</title><rect x="70.6101%" y="229" width="1.1836%" height="15" fill="rgb(224,123,36)"/><text x="70.8601%" y="239.50"></text></g><g><title>eval_to_const_value_raw (3,013,434 samples, 1.18%)</title><rect x="70.6180%" y="213" width="1.1757%" height="15" fill="rgb(240,125,3)"/><text x="70.8680%" y="223.50"></text></g><g><title>eval_to_allocation_raw (3,009,474 samples, 1.17%)</title><rect x="70.6195%" y="197" width="1.1742%" height="15" fill="rgb(205,98,50)"/><text x="70.8695%" y="207.50"></text></g><g><title>evaluate_obligation (1,006,322 samples, 0.39%)</title><rect x="71.7937%" y="229" width="0.3926%" height="15" fill="rgb(205,185,37)"/><text x="72.0437%" y="239.50"></text></g><g><title>param_env (602,736 samples, 0.24%)</title><rect x="72.2720%" y="229" width="0.2352%" height="15" fill="rgb(238,207,15)"/><text x="72.5220%" y="239.50"></text></g><g><title>region_scope_tree (867,930 samples, 0.34%)</title><rect x="72.5615%" y="229" width="0.3386%" height="15" fill="rgb(213,199,42)"/><text x="72.8115%" y="239.50"></text></g><g><title>trait_impls_of (364,884 samples, 0.14%)</title><rect x="72.9063%" y="229" width="0.1424%" height="15" fill="rgb(235,201,11)"/><text x="73.1563%" y="239.50"></text></g><g><title>check_item_well_formed (9,336,999 samples, 3.64%)</title><rect x="69.4329%" y="245" width="3.6429%" height="15" fill="rgb(207,46,11)"/><text x="69.6829%" y="255.50">chec..</text></g><g><title>param_env (362,833 samples, 0.14%)</title><rect x="73.3873%" y="229" width="0.1416%" height="15" fill="rgb(241,35,35)"/><text x="73.6373%" y="239.50"></text></g><g><title>analysis (187,780,086 samples, 73.26%)</title><rect x="0.2802%" y="293" width="73.2646%" height="15" fill="rgb(243,32,47)"/><text x="0.5302%" y="303.50">analysis</text></g><g><title>type_check_crate (115,670,645 samples, 45.13%)</title><rect x="28.4145%" y="277" width="45.1303%" height="15" fill="rgb(247,202,23)"/><text x="28.6645%" y="287.50">type_check_crate</text></g><g><title>wf_checking (13,615,411 samples, 5.31%)</title><rect x="68.2326%" y="261" width="5.3122%" height="15" fill="rgb(219,102,11)"/><text x="68.4826%" y="271.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,201,963 samples, 0.47%)</title><rect x="73.0758%" y="245" width="0.4690%" height="15" fill="rgb(243,110,44)"/><text x="73.3258%" y="255.50"></text></g><g><title>codegen_crate (402,204 samples, 0.16%)</title><rect x="73.5489%" y="293" width="0.1569%" height="15" fill="rgb(222,74,54)"/><text x="73.7989%" y="303.50"></text></g><g><title>AST_validation (344,194 samples, 0.13%)</title><rect x="73.7915%" y="277" width="0.1343%" height="15" fill="rgb(216,99,12)"/><text x="74.0415%" y="287.50"></text></g><g><title>metadata_register_crate (1,272,924 samples, 0.50%)</title><rect x="90.1295%" y="245" width="0.4966%" height="15" fill="rgb(226,22,26)"/><text x="90.3795%" y="255.50"></text></g><g><title>metadata_register_crate (467,535 samples, 0.18%)</title><rect x="90.4437%" y="229" width="0.1824%" height="15" fill="rgb(217,163,10)"/><text x="90.6937%" y="239.50"></text></g><g><title>macro_expand_crate (44,318,492 samples, 17.29%)</title><rect x="74.0208%" y="277" width="17.2914%" height="15" fill="rgb(213,25,53)"/><text x="74.2708%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (44,305,442 samples, 17.29%)</title><rect x="74.0259%" y="261" width="17.2863%" height="15" fill="rgb(252,105,26)"/><text x="74.2759%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,758,340 samples, 0.69%)</title><rect x="90.6261%" y="245" width="0.6860%" height="15" fill="rgb(220,39,43)"/><text x="90.8761%" y="255.50"></text></g><g><title>finalize_macro_resolutions (272,663 samples, 0.11%)</title><rect x="91.3789%" y="261" width="0.1064%" height="15" fill="rgb(229,68,48)"/><text x="91.6289%" y="271.50"></text></g><g><title>late_resolve_crate (3,087,514 samples, 1.20%)</title><rect x="91.4853%" y="261" width="1.2046%" height="15" fill="rgb(252,8,32)"/><text x="91.7353%" y="271.50"></text></g><g><title>configure_and_expand (48,913,894 samples, 19.08%)</title><rect x="73.7058%" y="293" width="19.0843%" height="15" fill="rgb(223,20,43)"/><text x="73.9558%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (3,695,111 samples, 1.44%)</title><rect x="91.3485%" y="277" width="1.4417%" height="15" fill="rgb(229,81,49)"/><text x="91.5985%" y="287.50"></text></g><g><title>drop_ast (646,188 samples, 0.25%)</title><rect x="92.7902%" y="293" width="0.2521%" height="15" fill="rgb(236,28,36)"/><text x="93.0402%" y="303.50"></text></g><g><title>early_lint_checks (1,010,721 samples, 0.39%)</title><rect x="93.0484%" y="293" width="0.3943%" height="15" fill="rgb(249,185,26)"/><text x="93.2984%" y="303.50"></text></g><g><title>free_global_ctxt (5,008,396 samples, 1.95%)</title><rect x="93.4427%" y="293" width="1.9541%" height="15" fill="rgb(249,174,33)"/><text x="93.6927%" y="303.50">f..</text></g><g><title>mir_for_ctfe (570,746 samples, 0.22%)</title><rect x="96.2643%" y="277" width="0.2227%" height="15" fill="rgb(233,201,37)"/><text x="96.5143%" y="287.50"></text></g><g><title>generate_crate_metadata (2,895,612 samples, 1.13%)</title><rect x="95.3968%" y="293" width="1.1298%" height="15" fill="rgb(221,78,26)"/><text x="95.6468%" y="303.50"></text></g><g><title>hir_lowering (6,302,000 samples, 2.46%)</title><rect x="96.5266%" y="293" width="2.4588%" height="15" fill="rgb(250,127,30)"/><text x="96.7766%" y="303.50">hi..</text></g><g><title>parse_crate (392,545 samples, 0.15%)</title><rect x="99.0183%" y="293" width="0.1532%" height="15" fill="rgb(230,49,44)"/><text x="99.2683%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,334,074 samples, 0.52%)</title><rect x="99.2622%" y="293" width="0.5205%" height="15" fill="rgb(229,67,23)"/><text x="99.5122%" y="303.50"></text></g><g><title>all (256,303,916 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (256,303,916 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (455,355 samples, 0.18%)</title><rect x="99.8223%" y="293" width="0.1777%" height="15" fill="rgb(238,154,13)"/><text x="100.0723%" y="303.50"></text></g></svg></svg>