<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (568,379 samples, 0.26%)</title><rect x="11.5388%" y="117" width="0.2551%" height="15" fill="rgb(227,0,7)"/><text x="11.7888%" y="127.50"></text></g><g><title>item_attrs (449,863 samples, 0.20%)</title><rect x="12.2620%" y="85" width="0.2019%" height="15" fill="rgb(217,0,24)"/><text x="12.5120%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (433,503 samples, 0.19%)</title><rect x="12.2693%" y="69" width="0.1946%" height="15" fill="rgb(221,193,54)"/><text x="12.5193%" y="79.50"></text></g><g><title>codegen_fn_attrs (652,709 samples, 0.29%)</title><rect x="12.1818%" y="101" width="0.2930%" height="15" fill="rgb(248,212,6)"/><text x="12.4318%" y="111.50"></text></g><g><title>is_copy_raw (230,622 samples, 0.10%)</title><rect x="14.2793%" y="85" width="0.1035%" height="15" fill="rgb(208,68,35)"/><text x="14.5293%" y="95.50"></text></g><g><title>adt_drop_tys (330,836 samples, 0.15%)</title><rect x="14.4681%" y="69" width="0.1485%" height="15" fill="rgb(232,128,0)"/><text x="14.7181%" y="79.50"></text></g><g><title>is_copy_raw (1,440,320 samples, 0.65%)</title><rect x="14.6174%" y="69" width="0.6465%" height="15" fill="rgb(207,160,47)"/><text x="14.8674%" y="79.50"></text></g><g><title>evaluate_obligation (1,186,519 samples, 0.53%)</title><rect x="14.7313%" y="53" width="0.5326%" height="15" fill="rgb(228,23,34)"/><text x="14.9813%" y="63.50"></text></g><g><title>needs_drop_raw (1,967,958 samples, 0.88%)</title><rect x="14.3828%" y="85" width="0.8833%" height="15" fill="rgb(218,30,26)"/><text x="14.6328%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,101,132 samples, 0.49%)</title><rect x="15.5399%" y="69" width="0.4942%" height="15" fill="rgb(220,122,19)"/><text x="15.7899%" y="79.50"></text></g><g><title>impl_parent (557,314 samples, 0.25%)</title><rect x="16.6586%" y="53" width="0.2502%" height="15" fill="rgb(250,228,42)"/><text x="16.9086%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (344,414 samples, 0.15%)</title><rect x="16.7542%" y="37" width="0.1546%" height="15" fill="rgb(240,193,28)"/><text x="17.0042%" y="47.50"></text></g><g><title>specialization_graph_of (3,142,865 samples, 1.41%)</title><rect x="16.1193%" y="69" width="1.4107%" height="15" fill="rgb(216,20,37)"/><text x="16.3693%" y="79.50"></text></g><g><title>impl_trait_ref (1,383,996 samples, 0.62%)</title><rect x="16.9088%" y="53" width="0.6212%" height="15" fill="rgb(206,188,39)"/><text x="17.1588%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,172,743 samples, 0.53%)</title><rect x="17.0036%" y="37" width="0.5264%" height="15" fill="rgb(217,207,13)"/><text x="17.2536%" y="47.50"></text></g><g><title>resolve_instance (5,221,006 samples, 2.34%)</title><rect x="15.2662%" y="85" width="2.3435%" height="15" fill="rgb(231,73,38)"/><text x="15.5162%" y="95.50">r..</text></g><g><title>thir_body (1,482,189 samples, 0.67%)</title><rect x="17.6348%" y="85" width="0.6653%" height="15" fill="rgb(225,20,46)"/><text x="17.8848%" y="95.50"></text></g><g><title>mir_const (16,569,662 samples, 7.44%)</title><rect x="10.8936%" y="133" width="7.4374%" height="15" fill="rgb(210,31,41)"/><text x="11.1436%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (14,563,773 samples, 6.54%)</title><rect x="11.7939%" y="117" width="6.5370%" height="15" fill="rgb(221,200,47)"/><text x="12.0439%" y="127.50">unsafety_..</text></g><g><title>mir_built (13,046,815 samples, 5.86%)</title><rect x="12.4748%" y="101" width="5.8561%" height="15" fill="rgb(226,26,5)"/><text x="12.7248%" y="111.50">mir_bui..</text></g><g><title>mir_const (607,466 samples, 0.27%)</title><rect x="18.7244%" y="117" width="0.2727%" height="15" fill="rgb(249,33,26)"/><text x="18.9744%" y="127.50"></text></g><g><title>unsafety_check_result (501,555 samples, 0.23%)</title><rect x="18.7719%" y="101" width="0.2251%" height="15" fill="rgb(235,183,28)"/><text x="19.0219%" y="111.50"></text></g><g><title>mir_built (435,815 samples, 0.20%)</title><rect x="18.8014%" y="85" width="0.1956%" height="15" fill="rgb(221,5,38)"/><text x="19.0514%" y="95.50"></text></g><g><title>mir_const_qualif (1,581,980 samples, 0.71%)</title><rect x="18.3309%" y="133" width="0.7101%" height="15" fill="rgb(247,18,42)"/><text x="18.5809%" y="143.50"></text></g><g><title>mir_promoted (19,518,611 samples, 8.76%)</title><rect x="10.2801%" y="149" width="8.7610%" height="15" fill="rgb(241,131,45)"/><text x="10.5301%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (796,793 samples, 0.36%)</title><rect x="19.0411%" y="149" width="0.3576%" height="15" fill="rgb(249,31,29)"/><text x="19.2911%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,336,302 samples, 0.60%)</title><rect x="19.3988%" y="149" width="0.5998%" height="15" fill="rgb(225,111,53)"/><text x="19.6488%" y="159.50"></text></g><g><title>normalize_projection_ty (764,984 samples, 0.34%)</title><rect x="19.6552%" y="133" width="0.3434%" height="15" fill="rgb(238,160,17)"/><text x="19.9052%" y="143.50"></text></g><g><title>type_op_normalize_ty (315,493 samples, 0.14%)</title><rect x="20.0309%" y="149" width="0.1416%" height="15" fill="rgb(214,148,48)"/><text x="20.2809%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,291,625 samples, 1.93%)</title><rect x="20.1725%" y="149" width="1.9263%" height="15" fill="rgb(232,36,49)"/><text x="20.4225%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (47,826,312 samples, 21.47%)</title><rect x="0.6362%" y="181" width="21.4671%" height="15" fill="rgb(209,103,24)"/><text x="0.8862%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,535,666 samples, 21.34%)</title><rect x="0.7666%" y="165" width="21.3367%" height="15" fill="rgb(229,88,8)"/><text x="1.0166%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (562,287 samples, 0.25%)</title><rect x="22.1033%" y="181" width="0.2524%" height="15" fill="rgb(213,181,19)"/><text x="22.3533%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (301,614 samples, 0.14%)</title><rect x="22.2203%" y="165" width="0.1354%" height="15" fill="rgb(254,191,54)"/><text x="22.4703%" y="175.50"></text></g><g><title>hir_module_items (385,224 samples, 0.17%)</title><rect x="22.3557%" y="181" width="0.1729%" height="15" fill="rgb(241,83,37)"/><text x="22.6057%" y="191.50"></text></g><g><title>should_inherit_track_caller (293,584 samples, 0.13%)</title><rect x="22.8411%" y="133" width="0.1318%" height="15" fill="rgb(233,36,39)"/><text x="23.0911%" y="143.50"></text></g><g><title>codegen_fn_attrs (537,025 samples, 0.24%)</title><rect x="22.7428%" y="149" width="0.2410%" height="15" fill="rgb(226,3,54)"/><text x="22.9928%" y="159.50"></text></g><g><title>check_mod_attrs (941,860 samples, 0.42%)</title><rect x="22.5611%" y="165" width="0.4228%" height="15" fill="rgb(245,192,40)"/><text x="22.8111%" y="175.50"></text></g><g><title>check_mod_const_bodies (243,162 samples, 0.11%)</title><rect x="22.9839%" y="165" width="0.1091%" height="15" fill="rgb(238,167,29)"/><text x="23.2339%" y="175.50"></text></g><g><title>lint_levels (238,073 samples, 0.11%)</title><rect x="23.3265%" y="149" width="0.1069%" height="15" fill="rgb(232,182,51)"/><text x="23.5765%" y="159.50"></text></g><g><title>lookup_deprecation_entry (299,215 samples, 0.13%)</title><rect x="23.4334%" y="149" width="0.1343%" height="15" fill="rgb(231,60,39)"/><text x="23.6834%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,097,043 samples, 0.49%)</title><rect x="23.1587%" y="165" width="0.4924%" height="15" fill="rgb(208,69,12)"/><text x="23.4087%" y="175.50"></text></g><g><title>misc_checking_1 (2,637,929 samples, 1.18%)</title><rect x="22.5289%" y="181" width="1.1841%" height="15" fill="rgb(235,93,37)"/><text x="22.7789%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (786,248 samples, 0.35%)</title><rect x="23.7136%" y="165" width="0.3529%" height="15" fill="rgb(213,116,39)"/><text x="23.9636%" y="175.50"></text></g><g><title>check_mod_liveness (627,656 samples, 0.28%)</title><rect x="23.7848%" y="149" width="0.2817%" height="15" fill="rgb(222,207,29)"/><text x="24.0348%" y="159.50"></text></g><g><title>misc_checking_2 (1,442,096 samples, 0.65%)</title><rect x="23.7130%" y="181" width="0.6473%" height="15" fill="rgb(206,96,30)"/><text x="23.9630%" y="191.50"></text></g><g><title>match_checking (654,318 samples, 0.29%)</title><rect x="24.0666%" y="165" width="0.2937%" height="15" fill="rgb(218,138,4)"/><text x="24.3166%" y="175.50"></text></g><g><title>check_match (591,067 samples, 0.27%)</title><rect x="24.0949%" y="149" width="0.2653%" height="15" fill="rgb(250,191,14)"/><text x="24.3449%" y="159.50"></text></g><g><title>check_private_in_public (496,286 samples, 0.22%)</title><rect x="24.3653%" y="165" width="0.2228%" height="15" fill="rgb(239,60,40)"/><text x="24.6153%" y="175.50"></text></g><g><title>codegen_fn_attrs (266,604 samples, 0.12%)</title><rect x="24.8584%" y="149" width="0.1197%" height="15" fill="rgb(206,27,48)"/><text x="25.1084%" y="159.50"></text></g><g><title>death_checking (965,140 samples, 0.43%)</title><rect x="24.5880%" y="165" width="0.4332%" height="15" fill="rgb(225,35,8)"/><text x="24.8380%" y="175.50"></text></g><g><title>eval_to_allocation_raw (450,205 samples, 0.20%)</title><rect x="25.8535%" y="133" width="0.2021%" height="15" fill="rgb(250,213,24)"/><text x="26.1035%" y="143.50"></text></g><g><title>eval_to_allocation_raw (445,064 samples, 0.20%)</title><rect x="25.8558%" y="117" width="0.1998%" height="15" fill="rgb(247,123,22)"/><text x="26.1058%" y="127.50"></text></g><g><title>explicit_predicates_of (256,572 samples, 0.12%)</title><rect x="26.5353%" y="85" width="0.1152%" height="15" fill="rgb(231,138,38)"/><text x="26.7853%" y="95.50"></text></g><g><title>param_env (1,221,143 samples, 0.55%)</title><rect x="26.1121%" y="133" width="0.5481%" height="15" fill="rgb(231,145,46)"/><text x="26.3621%" y="143.50"></text></g><g><title>predicates_of (575,237 samples, 0.26%)</title><rect x="26.4020%" y="117" width="0.2582%" height="15" fill="rgb(251,118,11)"/><text x="26.6520%" y="127.50"></text></g><g><title>predicates_defined_on (457,356 samples, 0.21%)</title><rect x="26.4549%" y="101" width="0.2053%" height="15" fill="rgb(217,147,25)"/><text x="26.7049%" y="111.50"></text></g><g><title>crate_lints (4,817,684 samples, 2.16%)</title><rect x="25.0222%" y="149" width="2.1624%" height="15" fill="rgb(247,81,37)"/><text x="25.2722%" y="159.50">c..</text></g><g><title>type_of (1,101,214 samples, 0.49%)</title><rect x="26.6904%" y="133" width="0.4943%" height="15" fill="rgb(209,12,38)"/><text x="26.9404%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (872,993 samples, 0.39%)</title><rect x="26.7928%" y="117" width="0.3918%" height="15" fill="rgb(227,1,9)"/><text x="27.0428%" y="127.50"></text></g><g><title>lint_checking (5,440,411 samples, 2.44%)</title><rect x="25.0213%" y="165" width="2.4420%" height="15" fill="rgb(248,47,43)"/><text x="25.2713%" y="175.50">li..</text></g><g><title>module_lints (620,557 samples, 0.28%)</title><rect x="27.1847%" y="149" width="0.2785%" height="15" fill="rgb(221,10,30)"/><text x="27.4347%" y="159.50"></text></g><g><title>lint_mod (597,637 samples, 0.27%)</title><rect x="27.1950%" y="133" width="0.2683%" height="15" fill="rgb(210,229,1)"/><text x="27.4450%" y="143.50"></text></g><g><title>privacy_access_levels (689,147 samples, 0.31%)</title><rect x="27.4632%" y="165" width="0.3093%" height="15" fill="rgb(222,148,37)"/><text x="27.7132%" y="175.50"></text></g><g><title>privacy_checking_modules (1,765,880 samples, 0.79%)</title><rect x="27.7725%" y="165" width="0.7926%" height="15" fill="rgb(234,67,33)"/><text x="28.0225%" y="175.50"></text></g><g><title>check_mod_privacy (1,747,480 samples, 0.78%)</title><rect x="27.7808%" y="149" width="0.7844%" height="15" fill="rgb(247,98,35)"/><text x="28.0308%" y="159.50"></text></g><g><title>misc_checking_3 (9,396,085 samples, 4.22%)</title><rect x="24.3603%" y="181" width="4.2175%" height="15" fill="rgb(247,138,52)"/><text x="24.6103%" y="191.50">misc_..</text></g><g><title>adt_destructor (282,213 samples, 0.13%)</title><rect x="28.6859%" y="133" width="0.1267%" height="15" fill="rgb(213,79,30)"/><text x="28.9359%" y="143.50"></text></g><g><title>coherent_trait (274,803 samples, 0.12%)</title><rect x="28.6892%" y="117" width="0.1233%" height="15" fill="rgb(246,177,23)"/><text x="28.9392%" y="127.50"></text></g><g><title>specialization_graph_of (273,073 samples, 0.12%)</title><rect x="28.6900%" y="101" width="0.1226%" height="15" fill="rgb(230,62,27)"/><text x="28.9400%" y="111.50"></text></g><g><title>impl_parent (1,675,073 samples, 0.75%)</title><rect x="30.1166%" y="117" width="0.7519%" height="15" fill="rgb(216,154,8)"/><text x="30.3666%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,034,325 samples, 0.46%)</title><rect x="30.4042%" y="101" width="0.4643%" height="15" fill="rgb(244,35,45)"/><text x="30.6542%" y="111.50"></text></g><g><title>impl_trait_ref (4,518,858 samples, 2.03%)</title><rect x="30.8685%" y="117" width="2.0283%" height="15" fill="rgb(251,115,12)"/><text x="31.1185%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,697,449 samples, 1.66%)</title><rect x="31.2372%" y="101" width="1.6596%" height="15" fill="rgb(240,54,50)"/><text x="31.4872%" y="111.50"></text></g><g><title>coherent_trait (9,977,302 samples, 4.48%)</title><rect x="28.6647%" y="149" width="4.4784%" height="15" fill="rgb(233,84,52)"/><text x="28.9147%" y="159.50">coher..</text></g><g><title>specialization_graph_of (9,482,515 samples, 4.26%)</title><rect x="28.8868%" y="133" width="4.2563%" height="15" fill="rgb(207,117,47)"/><text x="29.1368%" y="143.50">speci..</text></g><g><title>trait_impls_of (546,243 samples, 0.25%)</title><rect x="32.8979%" y="117" width="0.2452%" height="15" fill="rgb(249,43,39)"/><text x="33.1479%" y="127.50"></text></g><g><title>coherence_checking (10,107,853 samples, 4.54%)</title><rect x="28.6513%" y="165" width="4.5370%" height="15" fill="rgb(209,38,44)"/><text x="28.9013%" y="175.50">coher..</text></g><g><title>associated_item (781,939 samples, 0.35%)</title><rect x="48.5449%" y="101" width="0.3510%" height="15" fill="rgb(236,212,23)"/><text x="48.7949%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (623,969 samples, 0.28%)</title><rect x="48.6158%" y="85" width="0.2801%" height="15" fill="rgb(242,79,21)"/><text x="48.8658%" y="95.50"></text></g><g><title>associated_items (1,122,925 samples, 0.50%)</title><rect x="48.4164%" y="117" width="0.5040%" height="15" fill="rgb(211,96,35)"/><text x="48.6664%" y="127.50"></text></g><g><title>adt_destructor (241,362 samples, 0.11%)</title><rect x="49.2632%" y="85" width="0.1083%" height="15" fill="rgb(253,215,40)"/><text x="49.5132%" y="95.50"></text></g><g><title>adt_dtorck_constraint (622,625 samples, 0.28%)</title><rect x="49.1975%" y="101" width="0.2795%" height="15" fill="rgb(211,81,21)"/><text x="49.4475%" y="111.50"></text></g><g><title>dropck_outlives (1,141,426 samples, 0.51%)</title><rect x="48.9771%" y="117" width="0.5123%" height="15" fill="rgb(208,190,38)"/><text x="49.2271%" y="127.50"></text></g><g><title>predicates_of (241,591 samples, 0.11%)</title><rect x="50.8059%" y="101" width="0.1084%" height="15" fill="rgb(235,213,38)"/><text x="51.0559%" y="111.50"></text></g><g><title>trait_impls_of (524,966 samples, 0.24%)</title><rect x="50.9606%" y="101" width="0.2356%" height="15" fill="rgb(237,122,38)"/><text x="51.2106%" y="111.50"></text></g><g><title>evaluate_obligation (3,807,252 samples, 1.71%)</title><rect x="49.4895%" y="117" width="1.7089%" height="15" fill="rgb(244,218,35)"/><text x="49.7395%" y="127.50"></text></g><g><title>item_attrs (261,973 samples, 0.12%)</title><rect x="51.4982%" y="117" width="0.1176%" height="15" fill="rgb(240,68,47)"/><text x="51.7482%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (250,093 samples, 0.11%)</title><rect x="51.5035%" y="101" width="0.1123%" height="15" fill="rgb(210,16,53)"/><text x="51.7535%" y="111.50"></text></g><g><title>evaluate_obligation (752,128 samples, 0.34%)</title><rect x="52.2295%" y="101" width="0.3376%" height="15" fill="rgb(235,124,12)"/><text x="52.4795%" y="111.50"></text></g><g><title>method_autoderef_steps (2,024,016 samples, 0.91%)</title><rect x="51.6627%" y="117" width="0.9085%" height="15" fill="rgb(224,169,11)"/><text x="51.9127%" y="127.50"></text></g><g><title>predicates_of (513,071 samples, 0.23%)</title><rect x="52.6609%" y="117" width="0.2303%" height="15" fill="rgb(250,166,2)"/><text x="52.9109%" y="127.50"></text></g><g><title>predicates_defined_on (354,071 samples, 0.16%)</title><rect x="52.7323%" y="101" width="0.1589%" height="15" fill="rgb(242,216,29)"/><text x="52.9823%" y="111.50"></text></g><g><title>evaluate_obligation (353,433 samples, 0.16%)</title><rect x="54.0860%" y="101" width="0.1586%" height="15" fill="rgb(230,116,27)"/><text x="54.3360%" y="111.50"></text></g><g><title>typeck (3,399,607 samples, 1.53%)</title><rect x="52.9808%" y="117" width="1.5259%" height="15" fill="rgb(228,99,48)"/><text x="53.2308%" y="127.50"></text></g><g><title>item_bodies_checking (47,507,248 samples, 21.32%)</title><rect x="33.2302%" y="165" width="21.3239%" height="15" fill="rgb(253,11,6)"/><text x="33.4802%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,503,748 samples, 21.32%)</title><rect x="33.2318%" y="149" width="21.3223%" height="15" fill="rgb(247,143,39)"/><text x="33.4818%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (47,301,515 samples, 21.23%)</title><rect x="33.3226%" y="133" width="21.2316%" height="15" fill="rgb(236,97,10)"/><text x="33.5726%" y="143.50">typeck</text></g><g><title>evaluate_obligation (327,413 samples, 0.15%)</title><rect x="56.1298%" y="133" width="0.1470%" height="15" fill="rgb(233,208,19)"/><text x="56.3798%" y="143.50"></text></g><g><title>item_types_checking (4,860,854 samples, 2.18%)</title><rect x="54.5542%" y="165" width="2.1818%" height="15" fill="rgb(216,164,2)"/><text x="54.8042%" y="175.50">i..</text></g><g><title>check_mod_item_types (4,836,874 samples, 2.17%)</title><rect x="54.5649%" y="149" width="2.1711%" height="15" fill="rgb(220,129,5)"/><text x="54.8149%" y="159.50">c..</text></g><g><title>typeck (696,417 samples, 0.31%)</title><rect x="56.4234%" y="133" width="0.3126%" height="15" fill="rgb(242,17,10)"/><text x="56.6734%" y="143.50"></text></g><g><title>fn_sig (788,348 samples, 0.35%)</title><rect x="57.0233%" y="133" width="0.3539%" height="15" fill="rgb(242,107,0)"/><text x="57.2733%" y="143.50"></text></g><g><title>is_late_bound_map (243,472 samples, 0.11%)</title><rect x="57.4956%" y="117" width="0.1093%" height="15" fill="rgb(251,28,31)"/><text x="57.7456%" y="127.50"></text></g><g><title>resolve_lifetimes (226,122 samples, 0.10%)</title><rect x="57.5034%" y="101" width="0.1015%" height="15" fill="rgb(233,223,10)"/><text x="57.7534%" y="111.50"></text></g><g><title>named_region_map (324,474 samples, 0.15%)</title><rect x="57.6049%" y="117" width="0.1456%" height="15" fill="rgb(215,21,27)"/><text x="57.8549%" y="127.50"></text></g><g><title>resolve_lifetimes (278,084 samples, 0.12%)</title><rect x="57.6257%" y="101" width="0.1248%" height="15" fill="rgb(232,23,21)"/><text x="57.8757%" y="111.50"></text></g><g><title>generics_of (863,969 samples, 0.39%)</title><rect x="57.3772%" y="133" width="0.3878%" height="15" fill="rgb(244,5,23)"/><text x="57.6272%" y="143.50"></text></g><g><title>late_bound_vars_map (269,635 samples, 0.12%)</title><rect x="58.1957%" y="85" width="0.1210%" height="15" fill="rgb(226,81,46)"/><text x="58.4457%" y="95.50"></text></g><g><title>resolve_lifetimes (254,775 samples, 0.11%)</title><rect x="58.2024%" y="69" width="0.1144%" height="15" fill="rgb(247,70,30)"/><text x="58.4524%" y="79.50"></text></g><g><title>explicit_predicates_of (798,288 samples, 0.36%)</title><rect x="58.0116%" y="101" width="0.3583%" height="15" fill="rgb(212,68,19)"/><text x="58.2616%" y="111.50"></text></g><g><title>predicates_of (1,359,461 samples, 0.61%)</title><rect x="57.8763%" y="133" width="0.6102%" height="15" fill="rgb(240,187,13)"/><text x="58.1263%" y="143.50"></text></g><g><title>predicates_defined_on (1,235,450 samples, 0.55%)</title><rect x="57.9319%" y="117" width="0.5545%" height="15" fill="rgb(223,113,26)"/><text x="58.1819%" y="127.50"></text></g><g><title>inferred_outlives_of (259,712 samples, 0.12%)</title><rect x="58.3699%" y="101" width="0.1166%" height="15" fill="rgb(206,192,2)"/><text x="58.6199%" y="111.50"></text></g><g><title>type_collecting (4,589,300 samples, 2.06%)</title><rect x="56.7400%" y="165" width="2.0599%" height="15" fill="rgb(241,108,4)"/><text x="56.9900%" y="175.50">t..</text></g><g><title>collect_mod_item_types (4,553,660 samples, 2.04%)</title><rect x="56.7560%" y="149" width="2.0439%" height="15" fill="rgb(247,173,49)"/><text x="57.0060%" y="159.50">c..</text></g><g><title>type_of (573,921 samples, 0.26%)</title><rect x="58.5423%" y="133" width="0.2576%" height="15" fill="rgb(224,114,35)"/><text x="58.7923%" y="143.50"></text></g><g><title>evaluate_obligation (2,142,789 samples, 0.96%)</title><rect x="62.2572%" y="133" width="0.9618%" height="15" fill="rgb(245,159,27)"/><text x="62.5072%" y="143.50"></text></g><g><title>implied_outlives_bounds (792,042 samples, 0.36%)</title><rect x="63.2420%" y="133" width="0.3555%" height="15" fill="rgb(245,172,44)"/><text x="63.4920%" y="143.50"></text></g><g><title>param_env (795,047 samples, 0.36%)</title><rect x="63.5975%" y="133" width="0.3569%" height="15" fill="rgb(236,23,11)"/><text x="63.8475%" y="143.50"></text></g><g><title>region_scope_tree (555,824 samples, 0.25%)</title><rect x="63.9682%" y="133" width="0.2495%" height="15" fill="rgb(205,117,38)"/><text x="64.2182%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,534,159 samples, 5.18%)</title><rect x="59.0417%" y="149" width="5.1772%" height="15" fill="rgb(237,72,25)"/><text x="59.2917%" y="159.50">check_..</text></g><g><title>adt_sized_constraint (353,505 samples, 0.16%)</title><rect x="65.8130%" y="117" width="0.1587%" height="15" fill="rgb(244,70,9)"/><text x="66.0630%" y="127.50"></text></g><g><title>evaluate_obligation (956,331 samples, 0.43%)</title><rect x="65.5744%" y="133" width="0.4293%" height="15" fill="rgb(217,125,39)"/><text x="65.8244%" y="143.50"></text></g><g><title>implied_outlives_bounds (255,903 samples, 0.11%)</title><rect x="66.0177%" y="133" width="0.1149%" height="15" fill="rgb(235,36,10)"/><text x="66.2677%" y="143.50"></text></g><g><title>param_env (644,162 samples, 0.29%)</title><rect x="66.1912%" y="133" width="0.2891%" height="15" fill="rgb(251,123,47)"/><text x="66.4412%" y="143.50"></text></g><g><title>check_item_well_formed (5,521,267 samples, 2.48%)</title><rect x="64.2188%" y="149" width="2.4783%" height="15" fill="rgb(221,13,13)"/><text x="64.4688%" y="159.50">ch..</text></g><g><title>evaluate_obligation (357,764 samples, 0.16%)</title><rect x="67.2252%" y="133" width="0.1606%" height="15" fill="rgb(238,131,9)"/><text x="67.4752%" y="143.50"></text></g><g><title>analysis (149,540,294 samples, 67.12%)</title><rect x="0.4191%" y="197" width="67.1221%" height="15" fill="rgb(211,50,8)"/><text x="0.6691%" y="207.50">analysis</text></g><g><title>type_check_crate (86,806,056 samples, 38.96%)</title><rect x="28.5777%" y="181" width="38.9634%" height="15" fill="rgb(245,182,24)"/><text x="28.8277%" y="191.50">type_check_crate</text></g><g><title>wf_checking (19,463,557 samples, 8.74%)</title><rect x="58.8048%" y="165" width="8.7363%" height="15" fill="rgb(242,14,37)"/><text x="59.0548%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,880,491 samples, 0.84%)</title><rect x="66.6971%" y="149" width="0.8441%" height="15" fill="rgb(246,228,12)"/><text x="66.9471%" y="159.50"></text></g><g><title>codegen_crate (556,157 samples, 0.25%)</title><rect x="67.5462%" y="197" width="0.2496%" height="15" fill="rgb(213,55,15)"/><text x="67.7962%" y="207.50"></text></g><g><title>AST_validation (284,593 samples, 0.13%)</title><rect x="67.8956%" y="181" width="0.1277%" height="15" fill="rgb(209,9,3)"/><text x="68.1456%" y="191.50"></text></g><g><title>metadata_load_macro (273,840 samples, 0.12%)</title><rect x="88.8148%" y="149" width="0.1229%" height="15" fill="rgb(230,59,30)"/><text x="89.0648%" y="159.50"></text></g><g><title>metadata_register_crate (2,663,660 samples, 1.20%)</title><rect x="88.9377%" y="149" width="1.1956%" height="15" fill="rgb(209,121,21)"/><text x="89.1877%" y="159.50"></text></g><g><title>metadata_register_crate (965,779 samples, 0.43%)</title><rect x="89.6999%" y="133" width="0.4335%" height="15" fill="rgb(220,109,13)"/><text x="89.9499%" y="143.50"></text></g><g><title>macro_expand_crate (50,402,881 samples, 22.62%)</title><rect x="68.1226%" y="181" width="22.6236%" height="15" fill="rgb(232,18,1)"/><text x="68.3726%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (50,378,300 samples, 22.61%)</title><rect x="68.1336%" y="165" width="22.6126%" height="15" fill="rgb(215,41,42)"/><text x="68.3836%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,365,340 samples, 0.61%)</title><rect x="90.1333%" y="149" width="0.6128%" height="15" fill="rgb(224,123,36)"/><text x="90.3833%" y="159.50"></text></g><g><title>late_resolve_crate (2,386,826 samples, 1.07%)</title><rect x="91.0280%" y="165" width="1.0713%" height="15" fill="rgb(240,125,3)"/><text x="91.2780%" y="175.50"></text></g><g><title>configure_and_expand (54,442,426 samples, 24.44%)</title><rect x="67.7958%" y="197" width="24.4368%" height="15" fill="rgb(205,98,50)"/><text x="68.0458%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,090,474 samples, 1.39%)</title><rect x="90.8454%" y="181" width="1.3872%" height="15" fill="rgb(205,185,37)"/><text x="91.0954%" y="191.50"></text></g><g><title>drop_ast (333,104 samples, 0.15%)</title><rect x="92.2326%" y="197" width="0.1495%" height="15" fill="rgb(238,207,15)"/><text x="92.4826%" y="207.50"></text></g><g><title>early_lint_checks (694,558 samples, 0.31%)</title><rect x="92.3898%" y="197" width="0.3118%" height="15" fill="rgb(213,199,42)"/><text x="92.6398%" y="207.50"></text></g><g><title>free_global_ctxt (4,012,565 samples, 1.80%)</title><rect x="92.7016%" y="197" width="1.8011%" height="15" fill="rgb(235,201,11)"/><text x="92.9516%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,645,169 samples, 1.19%)</title><rect x="94.5026%" y="197" width="1.1873%" height="15" fill="rgb(207,46,11)"/><text x="94.7526%" y="207.50"></text></g><g><title>hir_lowering (6,114,278 samples, 2.74%)</title><rect x="95.6899%" y="197" width="2.7444%" height="15" fill="rgb(241,35,35)"/><text x="95.9399%" y="207.50">hi..</text></g><g><title>parse_crate (1,503,777 samples, 0.67%)</title><rect x="98.4708%" y="197" width="0.6750%" height="15" fill="rgb(243,32,47)"/><text x="98.7208%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,172,723 samples, 0.53%)</title><rect x="99.2355%" y="197" width="0.5264%" height="15" fill="rgb(247,202,23)"/><text x="99.4855%" y="207.50"></text></g><g><title>all (222,788,558 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (222,788,558 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (433,374 samples, 0.19%)</title><rect x="99.8055%" y="197" width="0.1945%" height="15" fill="rgb(222,74,54)"/><text x="100.0555%" y="207.50"></text></g></svg></svg>