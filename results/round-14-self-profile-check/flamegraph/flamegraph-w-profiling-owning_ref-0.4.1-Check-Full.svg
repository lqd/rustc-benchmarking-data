<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (171,141 samples, 0.14%)</title><rect x="7.9448%" y="133" width="0.1392%" height="15" fill="rgb(227,0,7)"/><text x="8.1948%" y="143.50"></text></g><g><title>is_copy_raw (140,450 samples, 0.11%)</title><rect x="11.0957%" y="69" width="0.1142%" height="15" fill="rgb(217,0,24)"/><text x="11.3457%" y="79.50"></text></g><g><title>evaluate_obligation (123,250 samples, 0.10%)</title><rect x="11.1097%" y="53" width="0.1002%" height="15" fill="rgb(221,193,54)"/><text x="11.3597%" y="63.50"></text></g><g><title>needs_drop_raw (1,136,760 samples, 0.92%)</title><rect x="11.2099%" y="69" width="0.9246%" height="15" fill="rgb(248,212,6)"/><text x="11.4599%" y="79.50"></text></g><g><title>is_copy_raw (946,879 samples, 0.77%)</title><rect x="11.3644%" y="53" width="0.7702%" height="15" fill="rgb(208,68,35)"/><text x="11.6144%" y="63.50"></text></g><g><title>evaluate_obligation (753,639 samples, 0.61%)</title><rect x="11.5216%" y="37" width="0.6130%" height="15" fill="rgb(232,128,0)"/><text x="11.7716%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (492,074 samples, 0.40%)</title><rect x="12.3129%" y="53" width="0.4002%" height="15" fill="rgb(207,160,47)"/><text x="12.5629%" y="63.50"></text></g><g><title>resolve_instance (787,048 samples, 0.64%)</title><rect x="12.1346%" y="69" width="0.6402%" height="15" fill="rgb(228,23,34)"/><text x="12.3846%" y="79.50"></text></g><g><title>thir_body (612,107 samples, 0.50%)</title><rect x="12.7937%" y="69" width="0.4979%" height="15" fill="rgb(218,30,26)"/><text x="13.0437%" y="79.50"></text></g><g><title>mir_const (5,856,580 samples, 4.76%)</title><rect x="8.5952%" y="117" width="4.7637%" height="15" fill="rgb(220,122,19)"/><text x="8.8452%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (5,062,691 samples, 4.12%)</title><rect x="9.2410%" y="101" width="4.1179%" height="15" fill="rgb(250,228,42)"/><text x="9.4910%" y="111.50">unsa..</text></g><g><title>mir_built (4,632,784 samples, 3.77%)</title><rect x="9.5907%" y="85" width="3.7682%" height="15" fill="rgb(240,193,28)"/><text x="9.8407%" y="95.50">mir_..</text></g><g><title>mir_promoted (6,525,576 samples, 5.31%)</title><rect x="8.0840%" y="133" width="5.3078%" height="15" fill="rgb(216,20,37)"/><text x="8.3340%" y="143.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (350,353 samples, 0.28%)</title><rect x="13.3918%" y="133" width="0.2850%" height="15" fill="rgb(206,188,39)"/><text x="13.6418%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (988,828 samples, 0.80%)</title><rect x="13.6767%" y="133" width="0.8043%" height="15" fill="rgb(217,207,13)"/><text x="13.9267%" y="143.50"></text></g><g><title>normalize_projection_ty (586,464 samples, 0.48%)</title><rect x="14.0040%" y="117" width="0.4770%" height="15" fill="rgb(231,73,38)"/><text x="14.2540%" y="127.50"></text></g><g><title>type_op_normalize_predicate (172,332 samples, 0.14%)</title><rect x="14.4810%" y="133" width="0.1402%" height="15" fill="rgb(225,20,46)"/><text x="14.7310%" y="143.50"></text></g><g><title>type_op_normalize_ty (298,345 samples, 0.24%)</title><rect x="14.6212%" y="133" width="0.2427%" height="15" fill="rgb(210,31,41)"/><text x="14.8712%" y="143.50"></text></g><g><title>normalize_projection_ty (159,553 samples, 0.13%)</title><rect x="14.7341%" y="117" width="0.1298%" height="15" fill="rgb(221,200,47)"/><text x="14.9841%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,298,462 samples, 1.87%)</title><rect x="14.8639%" y="133" width="1.8695%" height="15" fill="rgb(226,26,5)"/><text x="15.1139%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (19,302,186 samples, 15.70%)</title><rect x="1.0353%" y="165" width="15.7001%" height="15" fill="rgb(249,33,26)"/><text x="1.2853%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (19,194,364 samples, 15.61%)</title><rect x="1.1230%" y="149" width="15.6124%" height="15" fill="rgb(235,183,28)"/><text x="1.3730%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (314,993 samples, 0.26%)</title><rect x="16.7628%" y="165" width="0.2562%" height="15" fill="rgb(221,5,38)"/><text x="17.0128%" y="175.50"></text></g><g><title>get_lang_items (169,722 samples, 0.14%)</title><rect x="17.3959%" y="117" width="0.1380%" height="15" fill="rgb(247,18,42)"/><text x="17.6459%" y="127.50"></text></g><g><title>codegen_fn_attrs (205,414 samples, 0.17%)</title><rect x="17.6988%" y="101" width="0.1671%" height="15" fill="rgb(241,131,45)"/><text x="17.9488%" y="111.50"></text></g><g><title>should_inherit_track_caller (420,905 samples, 0.34%)</title><rect x="17.5339%" y="117" width="0.3424%" height="15" fill="rgb(249,31,29)"/><text x="17.7839%" y="127.50"></text></g><g><title>codegen_fn_attrs (719,678 samples, 0.59%)</title><rect x="17.3131%" y="133" width="0.5854%" height="15" fill="rgb(225,111,53)"/><text x="17.5631%" y="143.50"></text></g><g><title>check_mod_attrs (1,055,081 samples, 0.86%)</title><rect x="17.0408%" y="149" width="0.8582%" height="15" fill="rgb(238,160,17)"/><text x="17.2908%" y="159.50"></text></g><g><title>check_mod_const_bodies (211,583 samples, 0.17%)</title><rect x="17.8990%" y="149" width="0.1721%" height="15" fill="rgb(214,148,48)"/><text x="18.1490%" y="159.50"></text></g><g><title>lookup_deprecation_entry (301,004 samples, 0.24%)</title><rect x="18.4886%" y="133" width="0.2448%" height="15" fill="rgb(232,36,49)"/><text x="18.7386%" y="143.50"></text></g><g><title>stability_index (190,012 samples, 0.15%)</title><rect x="18.5789%" y="117" width="0.1546%" height="15" fill="rgb(209,103,24)"/><text x="18.8289%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (833,899 samples, 0.68%)</title><rect x="18.1780%" y="149" width="0.6783%" height="15" fill="rgb(229,88,8)"/><text x="18.4280%" y="159.50"></text></g><g><title>misc_checking_1 (2,361,747 samples, 1.92%)</title><rect x="17.0195%" y="165" width="1.9210%" height="15" fill="rgb(213,181,19)"/><text x="17.2695%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (295,303 samples, 0.24%)</title><rect x="18.9417%" y="149" width="0.2402%" height="15" fill="rgb(254,191,54)"/><text x="19.1917%" y="159.50"></text></g><g><title>check_mod_liveness (237,342 samples, 0.19%)</title><rect x="18.9889%" y="133" width="0.1931%" height="15" fill="rgb(241,83,37)"/><text x="19.2389%" y="143.50"></text></g><g><title>misc_checking_2 (583,937 samples, 0.47%)</title><rect x="18.9405%" y="165" width="0.4750%" height="15" fill="rgb(233,36,39)"/><text x="19.1905%" y="175.50"></text></g><g><title>match_checking (287,164 samples, 0.23%)</title><rect x="19.1819%" y="149" width="0.2336%" height="15" fill="rgb(226,3,54)"/><text x="19.4319%" y="159.50"></text></g><g><title>check_match (261,313 samples, 0.21%)</title><rect x="19.2030%" y="133" width="0.2125%" height="15" fill="rgb(245,192,40)"/><text x="19.4530%" y="143.50"></text></g><g><title>check_private_in_public (231,003 samples, 0.19%)</title><rect x="19.4233%" y="149" width="0.1879%" height="15" fill="rgb(238,167,29)"/><text x="19.6733%" y="159.50"></text></g><g><title>death_checking (324,703 samples, 0.26%)</title><rect x="19.6112%" y="149" width="0.2641%" height="15" fill="rgb(232,182,51)"/><text x="19.8612%" y="159.50"></text></g><g><title>param_env (285,104 samples, 0.23%)</title><rect x="20.3826%" y="117" width="0.2319%" height="15" fill="rgb(231,60,39)"/><text x="20.6326%" y="127.50"></text></g><g><title>crate_lints (2,209,825 samples, 1.80%)</title><rect x="19.8764%" y="133" width="1.7974%" height="15" fill="rgb(208,69,12)"/><text x="20.1264%" y="143.50">c..</text></g><g><title>type_of (1,302,364 samples, 1.06%)</title><rect x="20.6145%" y="117" width="1.0593%" height="15" fill="rgb(235,93,37)"/><text x="20.8645%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (848,059 samples, 0.69%)</title><rect x="20.9841%" y="101" width="0.6898%" height="15" fill="rgb(213,116,39)"/><text x="21.2341%" y="111.50"></text></g><g><title>lint_checking (2,427,888 samples, 1.97%)</title><rect x="19.8753%" y="149" width="1.9748%" height="15" fill="rgb(222,207,29)"/><text x="20.1253%" y="159.50">l..</text></g><g><title>module_lints (216,663 samples, 0.18%)</title><rect x="21.6739%" y="133" width="0.1762%" height="15" fill="rgb(206,96,30)"/><text x="21.9239%" y="143.50"></text></g><g><title>lint_mod (214,503 samples, 0.17%)</title><rect x="21.6756%" y="117" width="0.1745%" height="15" fill="rgb(218,138,4)"/><text x="21.9256%" y="127.50"></text></g><g><title>privacy_access_levels (295,503 samples, 0.24%)</title><rect x="21.8501%" y="149" width="0.2404%" height="15" fill="rgb(250,191,14)"/><text x="22.1001%" y="159.50"></text></g><g><title>privacy_checking_modules (835,699 samples, 0.68%)</title><rect x="22.0905%" y="149" width="0.6797%" height="15" fill="rgb(239,60,40)"/><text x="22.3405%" y="159.50"></text></g><g><title>check_mod_privacy (833,809 samples, 0.68%)</title><rect x="22.0920%" y="133" width="0.6782%" height="15" fill="rgb(206,27,48)"/><text x="22.3420%" y="143.50"></text></g><g><title>misc_checking_3 (4,138,846 samples, 3.37%)</title><rect x="19.4155%" y="165" width="3.3665%" height="15" fill="rgb(225,35,8)"/><text x="19.6655%" y="175.50">mis..</text></g><g><title>impl_parent (2,620,581 samples, 2.13%)</title><rect x="26.4659%" y="101" width="2.1315%" height="15" fill="rgb(250,213,24)"/><text x="26.7159%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,463,725 samples, 1.19%)</title><rect x="27.4069%" y="85" width="1.1906%" height="15" fill="rgb(247,123,22)"/><text x="27.6569%" y="95.50"></text></g><g><title>impl_trait_ref (5,415,387 samples, 4.40%)</title><rect x="28.5998%" y="101" width="4.4048%" height="15" fill="rgb(231,138,38)"/><text x="28.8498%" y="111.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,485,302 samples, 3.65%)</title><rect x="29.3563%" y="85" width="3.6483%" height="15" fill="rgb(231,145,46)"/><text x="29.6063%" y="95.50">meta..</text></g><g><title>trait_impls_of (1,011,061 samples, 0.82%)</title><rect x="33.0927%" y="101" width="0.8224%" height="15" fill="rgb(251,118,11)"/><text x="33.3427%" y="111.50"></text></g><g><title>implementations_of_trait (308,952 samples, 0.25%)</title><rect x="33.6637%" y="85" width="0.2513%" height="15" fill="rgb(217,147,25)"/><text x="33.9137%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (228,211 samples, 0.19%)</title><rect x="33.7294%" y="69" width="0.1856%" height="15" fill="rgb(247,81,37)"/><text x="33.9794%" y="79.50"></text></g><g><title>coherent_trait (17,689,789 samples, 14.39%)</title><rect x="22.8638%" y="133" width="14.3886%" height="15" fill="rgb(209,12,38)"/><text x="23.1138%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (17,632,108 samples, 14.34%)</title><rect x="22.9107%" y="117" width="14.3417%" height="15" fill="rgb(227,1,9)"/><text x="23.1607%" y="127.50">specialization_graph_of</text></g><g><title>visible_parent_map (4,100,326 samples, 3.34%)</title><rect x="33.9172%" y="101" width="3.3351%" height="15" fill="rgb(248,47,43)"/><text x="34.1672%" y="111.50">vis..</text></g><g><title>module_children (3,732,962 samples, 3.04%)</title><rect x="34.2160%" y="85" width="3.0363%" height="15" fill="rgb(221,10,30)"/><text x="34.4660%" y="95.50">mod..</text></g><g><title>metadata_decode_entry_module_children (3,670,971 samples, 2.99%)</title><rect x="34.2664%" y="69" width="2.9859%" height="15" fill="rgb(210,229,1)"/><text x="34.5164%" y="79.50">met..</text></g><g><title>coherence_checking (17,810,389 samples, 14.49%)</title><rect x="22.8392%" y="149" width="14.4867%" height="15" fill="rgb(222,148,37)"/><text x="23.0892%" y="159.50">coherence_checking</text></g><g><title>associated_item (134,901 samples, 0.11%)</title><rect x="47.3481%" y="85" width="0.1097%" height="15" fill="rgb(234,67,33)"/><text x="47.5981%" y="95.50"></text></g><g><title>associated_items (210,032 samples, 0.17%)</title><rect x="47.2969%" y="101" width="0.1708%" height="15" fill="rgb(247,98,35)"/><text x="47.5469%" y="111.50"></text></g><g><title>adt_dtorck_constraint (171,151 samples, 0.14%)</title><rect x="47.8145%" y="69" width="0.1392%" height="15" fill="rgb(247,138,52)"/><text x="48.0645%" y="79.50"></text></g><g><title>adt_dtorck_constraint (340,003 samples, 0.28%)</title><rect x="47.7160%" y="85" width="0.2766%" height="15" fill="rgb(213,79,30)"/><text x="47.9660%" y="95.50"></text></g><g><title>dropck_outlives (629,308 samples, 0.51%)</title><rect x="47.4960%" y="101" width="0.5119%" height="15" fill="rgb(246,177,23)"/><text x="47.7460%" y="111.50"></text></g><g><title>evaluate_obligation (831,888 samples, 0.68%)</title><rect x="48.0079%" y="101" width="0.6766%" height="15" fill="rgb(230,62,27)"/><text x="48.2579%" y="111.50"></text></g><g><title>method_autoderef_steps (252,994 samples, 0.21%)</title><rect x="48.9236%" y="101" width="0.2058%" height="15" fill="rgb(216,154,8)"/><text x="49.1736%" y="111.50"></text></g><g><title>evaluate_obligation (127,032 samples, 0.10%)</title><rect x="49.0260%" y="85" width="0.1033%" height="15" fill="rgb(244,35,45)"/><text x="49.2760%" y="95.50"></text></g><g><title>predicates_of (176,862 samples, 0.14%)</title><rect x="49.1561%" y="101" width="0.1439%" height="15" fill="rgb(251,115,12)"/><text x="49.4061%" y="111.50"></text></g><g><title>is_copy_raw (195,691 samples, 0.16%)</title><rect x="50.0361%" y="85" width="0.1592%" height="15" fill="rgb(240,54,50)"/><text x="50.2861%" y="95.50"></text></g><g><title>evaluate_obligation (174,431 samples, 0.14%)</title><rect x="50.0534%" y="69" width="0.1419%" height="15" fill="rgb(233,84,52)"/><text x="50.3034%" y="79.50"></text></g><g><title>trait_impls_of (125,181 samples, 0.10%)</title><rect x="50.0934%" y="53" width="0.1018%" height="15" fill="rgb(207,117,47)"/><text x="50.3434%" y="63.50"></text></g><g><title>typeck (1,043,842 samples, 0.85%)</title><rect x="49.3555%" y="101" width="0.8490%" height="15" fill="rgb(249,43,39)"/><text x="49.6055%" y="111.50"></text></g><g><title>item_bodies_checking (15,786,977 samples, 12.84%)</title><rect x="37.3948%" y="149" width="12.8409%" height="15" fill="rgb(209,38,44)"/><text x="37.6448%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,783,837 samples, 12.84%)</title><rect x="37.3973%" y="133" width="12.8383%" height="15" fill="rgb(236,212,23)"/><text x="37.6473%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (15,704,576 samples, 12.77%)</title><rect x="37.4618%" y="117" width="12.7739%" height="15" fill="rgb(242,79,21)"/><text x="37.7118%" y="127.50">typeck</text></g><g><title>impl_trait_ref (128,043 samples, 0.10%)</title><rect x="51.3115%" y="69" width="0.1041%" height="15" fill="rgb(211,96,35)"/><text x="51.5615%" y="79.50"></text></g><g><title>adt_destructor (302,273 samples, 0.25%)</title><rect x="51.1956%" y="117" width="0.2459%" height="15" fill="rgb(253,215,40)"/><text x="51.4456%" y="127.50"></text></g><g><title>coherent_trait (298,483 samples, 0.24%)</title><rect x="51.1987%" y="101" width="0.2428%" height="15" fill="rgb(211,81,21)"/><text x="51.4487%" y="111.50"></text></g><g><title>specialization_graph_of (296,663 samples, 0.24%)</title><rect x="51.2001%" y="85" width="0.2413%" height="15" fill="rgb(208,190,38)"/><text x="51.4501%" y="95.50"></text></g><g><title>adt_sized_constraint (151,382 samples, 0.12%)</title><rect x="51.4414%" y="117" width="0.1231%" height="15" fill="rgb(235,213,38)"/><text x="51.6914%" y="127.50"></text></g><g><title>item_types_checking (1,802,440 samples, 1.47%)</title><rect x="50.2357%" y="149" width="1.4661%" height="15" fill="rgb(237,122,38)"/><text x="50.4857%" y="159.50"></text></g><g><title>check_mod_item_types (1,800,170 samples, 1.46%)</title><rect x="50.2375%" y="133" width="1.4642%" height="15" fill="rgb(244,218,35)"/><text x="50.4875%" y="143.50"></text></g><g><title>fn_sig (450,235 samples, 0.37%)</title><rect x="52.2187%" y="117" width="0.3662%" height="15" fill="rgb(240,68,47)"/><text x="52.4687%" y="127.50"></text></g><g><title>is_late_bound_map (167,520 samples, 0.14%)</title><rect x="52.8385%" y="101" width="0.1363%" height="15" fill="rgb(210,16,53)"/><text x="53.0885%" y="111.50"></text></g><g><title>generics_of (613,927 samples, 0.50%)</title><rect x="52.5849%" y="117" width="0.4994%" height="15" fill="rgb(235,124,12)"/><text x="52.8349%" y="127.50"></text></g><g><title>impl_trait_ref (148,621 samples, 0.12%)</title><rect x="53.0842%" y="117" width="0.1209%" height="15" fill="rgb(224,169,11)"/><text x="53.3342%" y="127.50"></text></g><g><title>lint_levels (186,582 samples, 0.15%)</title><rect x="55.1123%" y="37" width="0.1518%" height="15" fill="rgb(250,166,2)"/><text x="55.3623%" y="47.50"></text></g><g><title>late_bound_vars_map (1,050,940 samples, 0.85%)</title><rect x="54.4096%" y="69" width="0.8548%" height="15" fill="rgb(242,216,29)"/><text x="54.6596%" y="79.50"></text></g><g><title>resolve_lifetimes (1,000,310 samples, 0.81%)</title><rect x="54.4508%" y="53" width="0.8136%" height="15" fill="rgb(230,116,27)"/><text x="54.7008%" y="63.50"></text></g><g><title>explicit_predicates_of (2,378,823 samples, 1.93%)</title><rect x="53.5239%" y="85" width="1.9349%" height="15" fill="rgb(228,99,48)"/><text x="53.7739%" y="95.50">e..</text></g><g><title>predicates_of (2,825,929 samples, 2.30%)</title><rect x="53.2508%" y="117" width="2.2986%" height="15" fill="rgb(253,11,6)"/><text x="53.5008%" y="127.50">p..</text></g><g><title>predicates_defined_on (2,693,726 samples, 2.19%)</title><rect x="53.3584%" y="101" width="2.1910%" height="15" fill="rgb(247,143,39)"/><text x="53.6084%" y="111.50">p..</text></g><g><title>type_collecting (5,526,912 samples, 4.50%)</title><rect x="51.7040%" y="149" width="4.4955%" height="15" fill="rgb(236,97,10)"/><text x="51.9540%" y="159.50">type_..</text></g><g><title>collect_mod_item_types (5,517,822 samples, 4.49%)</title><rect x="51.7114%" y="133" width="4.4881%" height="15" fill="rgb(233,208,19)"/><text x="51.9614%" y="143.50">colle..</text></g><g><title>type_of (759,663 samples, 0.62%)</title><rect x="55.5816%" y="117" width="0.6179%" height="15" fill="rgb(216,164,2)"/><text x="55.8316%" y="127.50"></text></g><g><title>evaluate_obligation (456,392 samples, 0.37%)</title><rect x="58.5476%" y="117" width="0.3712%" height="15" fill="rgb(220,129,5)"/><text x="58.7976%" y="127.50"></text></g><g><title>implied_outlives_bounds (385,643 samples, 0.31%)</title><rect x="58.9302%" y="117" width="0.3137%" height="15" fill="rgb(242,17,10)"/><text x="59.1802%" y="127.50"></text></g><g><title>param_env (498,812 samples, 0.41%)</title><rect x="59.2511%" y="117" width="0.4057%" height="15" fill="rgb(242,107,0)"/><text x="59.5011%" y="127.50"></text></g><g><title>region_scope_tree (266,554 samples, 0.22%)</title><rect x="59.7282%" y="117" width="0.2168%" height="15" fill="rgb(251,28,31)"/><text x="59.9782%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,381,246 samples, 3.56%)</title><rect x="56.4056%" y="133" width="3.5636%" height="15" fill="rgb(233,223,10)"/><text x="56.6556%" y="143.50">chec..</text></g><g><title>implied_outlives_bounds (187,102 samples, 0.15%)</title><rect x="61.8358%" y="117" width="0.1522%" height="15" fill="rgb(215,21,27)"/><text x="62.0858%" y="127.50"></text></g><g><title>param_env (417,715 samples, 0.34%)</title><rect x="61.9880%" y="117" width="0.3398%" height="15" fill="rgb(232,23,21)"/><text x="62.2380%" y="127.50"></text></g><g><title>check_item_well_formed (3,157,427 samples, 2.57%)</title><rect x="59.9693%" y="133" width="2.5682%" height="15" fill="rgb(244,5,23)"/><text x="60.2193%" y="143.50">ch..</text></g><g><title>analysis (76,350,285 samples, 62.10%)</title><rect x="0.6384%" y="181" width="62.1021%" height="15" fill="rgb(226,81,46)"/><text x="0.8884%" y="191.50">analysis</text></g><g><title>type_check_crate (49,126,279 samples, 39.96%)</title><rect x="22.7820%" y="165" width="39.9586%" height="15" fill="rgb(247,70,30)"/><text x="23.0320%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,037,479 samples, 6.54%)</title><rect x="56.2030%" y="149" width="6.5376%" height="15" fill="rgb(212,68,19)"/><text x="56.4530%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (249,664 samples, 0.20%)</title><rect x="62.5375%" y="133" width="0.2031%" height="15" fill="rgb(240,187,13)"/><text x="62.7875%" y="143.50"></text></g><g><title>codegen_crate (384,055 samples, 0.31%)</title><rect x="62.7488%" y="181" width="0.3124%" height="15" fill="rgb(223,113,26)"/><text x="62.9988%" y="191.50"></text></g><g><title>AST_validation (210,702 samples, 0.17%)</title><rect x="63.2130%" y="165" width="0.1714%" height="15" fill="rgb(206,192,2)"/><text x="63.4630%" y="175.50"></text></g><g><title>macro_expand_crate (13,324,310 samples, 10.84%)</title><rect x="63.5216%" y="165" width="10.8378%" height="15" fill="rgb(241,108,4)"/><text x="63.7716%" y="175.50">macro_expand_cra..</text></g><g><title>expand_crate (13,302,110 samples, 10.82%)</title><rect x="63.5396%" y="149" width="10.8197%" height="15" fill="rgb(247,173,49)"/><text x="63.7896%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,304,236 samples, 1.87%)</title><rect x="72.4851%" y="133" width="1.8742%" height="15" fill="rgb(224,114,35)"/><text x="72.7351%" y="143.50">m..</text></g><g><title>metadata_register_crate (845,140 samples, 0.69%)</title><rect x="73.6719%" y="117" width="0.6874%" height="15" fill="rgb(245,159,27)"/><text x="73.9219%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (721,178 samples, 0.59%)</title><rect x="74.3674%" y="165" width="0.5866%" height="15" fill="rgb(245,172,44)"/><text x="74.6174%" y="175.50"></text></g><g><title>finalize_macro_resolutions (143,091 samples, 0.12%)</title><rect x="75.0366%" y="149" width="0.1164%" height="15" fill="rgb(236,23,11)"/><text x="75.2866%" y="159.50"></text></g><g><title>late_resolve_crate (2,193,115 samples, 1.78%)</title><rect x="75.1530%" y="149" width="1.7838%" height="15" fill="rgb(205,117,38)"/><text x="75.4030%" y="159.50">l..</text></g><g><title>configure_and_expand (17,220,533 samples, 14.01%)</title><rect x="63.0612%" y="181" width="14.0069%" height="15" fill="rgb(237,72,25)"/><text x="63.3112%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,599,149 samples, 2.11%)</title><rect x="74.9540%" y="165" width="2.1141%" height="15" fill="rgb(244,70,9)"/><text x="75.2040%" y="175.50">r..</text></g><g><title>drop_ast (497,475 samples, 0.40%)</title><rect x="77.0681%" y="181" width="0.4046%" height="15" fill="rgb(217,125,39)"/><text x="77.3181%" y="191.50"></text></g><g><title>early_lint_checks (1,360,026 samples, 1.11%)</title><rect x="77.4842%" y="181" width="1.1062%" height="15" fill="rgb(235,36,10)"/><text x="77.7342%" y="191.50"></text></g><g><title>free_global_ctxt (3,564,760 samples, 2.90%)</title><rect x="78.5904%" y="181" width="2.8995%" height="15" fill="rgb(251,123,47)"/><text x="78.8404%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,378,906 samples, 1.12%)</title><rect x="81.4900%" y="181" width="1.1216%" height="15" fill="rgb(221,13,13)"/><text x="81.7400%" y="191.50"></text></g><g><title>hir_lowering (5,311,149 samples, 4.32%)</title><rect x="82.6115%" y="181" width="4.3200%" height="15" fill="rgb(238,131,9)"/><text x="82.8615%" y="191.50">hir_l..</text></g><g><title>parse_crate (14,551,223 samples, 11.84%)</title><rect x="86.9722%" y="181" width="11.8357%" height="15" fill="rgb(211,50,8)"/><text x="87.2222%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (276,383 samples, 0.22%)</title><rect x="98.8148%" y="181" width="0.2248%" height="15" fill="rgb(245,182,24)"/><text x="99.0648%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (719,238 samples, 0.59%)</title><rect x="99.0396%" y="181" width="0.5850%" height="15" fill="rgb(242,14,37)"/><text x="99.2896%" y="191.50"></text></g><g><title>all (122,943,077 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (122,943,077 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (330,543 samples, 0.27%)</title><rect x="99.7311%" y="181" width="0.2689%" height="15" fill="rgb(209,9,3)"/><text x="99.9811%" y="191.50"></text></g></svg></svg>