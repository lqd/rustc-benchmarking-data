<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (36,221 samples, 0.10%)</title><rect x="12.4053%" y="149" width="0.1006%" height="15" fill="rgb(227,0,7)"/><text x="12.6553%" y="159.50"></text></g><g><title>param_env (197,562 samples, 0.55%)</title><rect x="12.5059%" y="149" width="0.5488%" height="15" fill="rgb(217,0,24)"/><text x="12.7559%" y="159.50"></text></g><g><title>item_attrs (354,403 samples, 0.98%)</title><rect x="13.8410%" y="117" width="0.9844%" height="15" fill="rgb(221,193,54)"/><text x="14.0910%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (346,583 samples, 0.96%)</title><rect x="13.8627%" y="101" width="0.9627%" height="15" fill="rgb(248,212,6)"/><text x="14.1127%" y="111.50"></text></g><g><title>codegen_fn_attrs (446,776 samples, 1.24%)</title><rect x="13.5999%" y="133" width="1.2410%" height="15" fill="rgb(208,68,35)"/><text x="13.8499%" y="143.50"></text></g><g><title>is_copy_raw (252,753 samples, 0.70%)</title><rect x="17.2960%" y="117" width="0.7021%" height="15" fill="rgb(232,128,0)"/><text x="17.5460%" y="127.50"></text></g><g><title>evaluate_obligation (216,762 samples, 0.60%)</title><rect x="17.3960%" y="101" width="0.6021%" height="15" fill="rgb(207,160,47)"/><text x="17.6460%" y="111.50"></text></g><g><title>needs_drop_raw (58,590 samples, 0.16%)</title><rect x="18.0193%" y="117" width="0.1627%" height="15" fill="rgb(228,23,34)"/><text x="18.2693%" y="127.50"></text></g><g><title>is_copy_raw (49,940 samples, 0.14%)</title><rect x="18.0433%" y="101" width="0.1387%" height="15" fill="rgb(218,30,26)"/><text x="18.2933%" y="111.50"></text></g><g><title>evaluate_obligation (37,200 samples, 0.10%)</title><rect x="18.0787%" y="85" width="0.1033%" height="15" fill="rgb(220,122,19)"/><text x="18.3287%" y="95.50"></text></g><g><title>resolve_instance (147,021 samples, 0.41%)</title><rect x="18.1820%" y="117" width="0.4084%" height="15" fill="rgb(250,228,42)"/><text x="18.4320%" y="127.50"></text></g><g><title>type_of (48,020 samples, 0.13%)</title><rect x="18.4570%" y="101" width="0.1334%" height="15" fill="rgb(240,193,28)"/><text x="18.7070%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (40,880 samples, 0.11%)</title><rect x="18.4768%" y="85" width="0.1135%" height="15" fill="rgb(216,20,37)"/><text x="18.7268%" y="95.50"></text></g><g><title>thir_body (334,062 samples, 0.93%)</title><rect x="18.6285%" y="117" width="0.9279%" height="15" fill="rgb(206,188,39)"/><text x="18.8785%" y="127.50"></text></g><g><title>mir_const (2,950,762 samples, 8.20%)</title><rect x="11.3821%" y="165" width="8.1961%" height="15" fill="rgb(217,207,13)"/><text x="11.6321%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (2,348,606 samples, 6.52%)</title><rect x="13.0547%" y="149" width="6.5235%" height="15" fill="rgb(231,73,38)"/><text x="13.3047%" y="159.50">unsafety_..</text></g><g><title>mir_built (1,705,528 samples, 4.74%)</title><rect x="14.8409%" y="133" width="4.7373%" height="15" fill="rgb(225,20,46)"/><text x="15.0909%" y="143.50">mir_bu..</text></g><g><title>mir_promoted (3,334,878 samples, 9.26%)</title><rect x="10.3859%" y="181" width="9.2630%" height="15" fill="rgb(210,31,41)"/><text x="10.6359%" y="191.50">mir_promoted</text></g><g><title>MIR_borrow_checking (6,540,534 samples, 18.17%)</title><rect x="2.0670%" y="213" width="18.1671%" height="15" fill="rgb(221,200,47)"/><text x="2.3170%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,480,534 samples, 18.00%)</title><rect x="2.2336%" y="197" width="18.0005%" height="15" fill="rgb(226,26,5)"/><text x="2.4836%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (175,422 samples, 0.49%)</title><rect x="19.7468%" y="181" width="0.4873%" height="15" fill="rgb(249,33,26)"/><text x="19.9968%" y="191.50"></text></g><g><title>MIR_effect_checking (93,491 samples, 0.26%)</title><rect x="20.2341%" y="213" width="0.2597%" height="15" fill="rgb(235,183,28)"/><text x="20.4841%" y="223.50"></text></g><g><title>lint_levels (45,730 samples, 0.13%)</title><rect x="20.3668%" y="197" width="0.1270%" height="15" fill="rgb(221,5,38)"/><text x="20.6168%" y="207.50"></text></g><g><title>hir_module_items (126,781 samples, 0.35%)</title><rect x="20.4938%" y="213" width="0.3521%" height="15" fill="rgb(247,18,42)"/><text x="20.7438%" y="223.50"></text></g><g><title>get_lang_items (61,860 samples, 0.17%)</title><rect x="21.5061%" y="165" width="0.1718%" height="15" fill="rgb(241,131,45)"/><text x="21.7561%" y="175.50"></text></g><g><title>associated_item (46,510 samples, 0.13%)</title><rect x="21.7576%" y="149" width="0.1292%" height="15" fill="rgb(249,31,29)"/><text x="22.0076%" y="159.50"></text></g><g><title>should_inherit_track_caller (79,560 samples, 0.22%)</title><rect x="21.6779%" y="165" width="0.2210%" height="15" fill="rgb(225,111,53)"/><text x="21.9279%" y="175.50"></text></g><g><title>codegen_fn_attrs (271,542 samples, 0.75%)</title><rect x="21.2282%" y="181" width="0.7542%" height="15" fill="rgb(238,160,17)"/><text x="21.4782%" y="191.50"></text></g><g><title>check_mod_attrs (386,314 samples, 1.07%)</title><rect x="20.9099%" y="197" width="1.0730%" height="15" fill="rgb(214,148,48)"/><text x="21.1599%" y="207.50"></text></g><g><title>check_mod_const_bodies (58,790 samples, 0.16%)</title><rect x="21.9830%" y="197" width="0.1633%" height="15" fill="rgb(232,36,49)"/><text x="22.2330%" y="207.50"></text></g><g><title>lookup_deprecation_entry (52,451 samples, 0.15%)</title><rect x="22.3166%" y="181" width="0.1457%" height="15" fill="rgb(209,103,24)"/><text x="22.5666%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (110,312 samples, 0.31%)</title><rect x="22.2164%" y="197" width="0.3064%" height="15" fill="rgb(229,88,8)"/><text x="22.4664%" y="207.50"></text></g><g><title>misc_checking_1 (634,237 samples, 1.76%)</title><rect x="20.8477%" y="213" width="1.7617%" height="15" fill="rgb(213,181,19)"/><text x="21.0977%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (158,311 samples, 0.44%)</title><rect x="22.6160%" y="197" width="0.4397%" height="15" fill="rgb(254,191,54)"/><text x="22.8660%" y="207.50"></text></g><g><title>check_mod_liveness (128,251 samples, 0.36%)</title><rect x="22.6995%" y="181" width="0.3562%" height="15" fill="rgb(241,83,37)"/><text x="22.9495%" y="191.50"></text></g><g><title>misc_checking_2 (348,484 samples, 0.97%)</title><rect x="22.6094%" y="213" width="0.9680%" height="15" fill="rgb(233,36,39)"/><text x="22.8594%" y="223.50"></text></g><g><title>match_checking (187,813 samples, 0.52%)</title><rect x="23.0557%" y="197" width="0.5217%" height="15" fill="rgb(226,3,54)"/><text x="23.3057%" y="207.50"></text></g><g><title>check_match (171,413 samples, 0.48%)</title><rect x="23.1012%" y="181" width="0.4761%" height="15" fill="rgb(245,192,40)"/><text x="23.3512%" y="191.50"></text></g><g><title>check_private_in_public (64,131 samples, 0.18%)</title><rect x="23.6066%" y="197" width="0.1781%" height="15" fill="rgb(238,167,29)"/><text x="23.8566%" y="207.50"></text></g><g><title>death_checking (97,951 samples, 0.27%)</title><rect x="23.7847%" y="197" width="0.2721%" height="15" fill="rgb(232,182,51)"/><text x="24.0347%" y="207.50"></text></g><g><title>crate_lints (184,912 samples, 0.51%)</title><rect x="24.0642%" y="181" width="0.5136%" height="15" fill="rgb(231,60,39)"/><text x="24.3142%" y="191.50"></text></g><g><title>param_env (65,261 samples, 0.18%)</title><rect x="24.3965%" y="165" width="0.1813%" height="15" fill="rgb(208,69,12)"/><text x="24.6465%" y="175.50"></text></g><g><title>lint_checking (285,893 samples, 0.79%)</title><rect x="24.0568%" y="197" width="0.7941%" height="15" fill="rgb(235,93,37)"/><text x="24.3068%" y="207.50"></text></g><g><title>module_lints (98,331 samples, 0.27%)</title><rect x="24.5778%" y="181" width="0.2731%" height="15" fill="rgb(213,116,39)"/><text x="24.8278%" y="191.50"></text></g><g><title>lint_mod (94,971 samples, 0.26%)</title><rect x="24.5871%" y="165" width="0.2638%" height="15" fill="rgb(222,207,29)"/><text x="24.8371%" y="175.50"></text></g><g><title>privacy_access_levels (93,071 samples, 0.26%)</title><rect x="24.8509%" y="197" width="0.2585%" height="15" fill="rgb(206,96,30)"/><text x="25.1009%" y="207.50"></text></g><g><title>privacy_checking_modules (114,141 samples, 0.32%)</title><rect x="25.1094%" y="197" width="0.3170%" height="15" fill="rgb(218,138,4)"/><text x="25.3594%" y="207.50"></text></g><g><title>check_mod_privacy (112,101 samples, 0.31%)</title><rect x="25.1151%" y="181" width="0.3114%" height="15" fill="rgb(250,191,14)"/><text x="25.3651%" y="191.50"></text></g><g><title>misc_checking_3 (681,217 samples, 1.89%)</title><rect x="23.5774%" y="213" width="1.8922%" height="15" fill="rgb(239,60,40)"/><text x="23.8274%" y="223.50">m..</text></g><g><title>coherent_trait (85,821 samples, 0.24%)</title><rect x="25.6383%" y="181" width="0.2384%" height="15" fill="rgb(206,27,48)"/><text x="25.8883%" y="191.50"></text></g><g><title>specialization_graph_of (79,351 samples, 0.22%)</title><rect x="25.6563%" y="165" width="0.2204%" height="15" fill="rgb(225,35,8)"/><text x="25.9063%" y="175.50"></text></g><g><title>coherence_checking (138,921 samples, 0.39%)</title><rect x="25.5987%" y="197" width="0.3859%" height="15" fill="rgb(250,213,24)"/><text x="25.8487%" y="207.50"></text></g><g><title>associated_item (672,458 samples, 1.87%)</title><rect x="39.5361%" y="133" width="1.8678%" height="15" fill="rgb(247,123,22)"/><text x="39.7861%" y="143.50">a..</text></g><g><title>metadata_decode_entry_associated_item (536,367 samples, 1.49%)</title><rect x="39.9141%" y="117" width="1.4898%" height="15" fill="rgb(231,138,38)"/><text x="40.1641%" y="127.50"></text></g><g><title>associated_items (910,630 samples, 2.53%)</title><rect x="38.9615%" y="149" width="2.5294%" height="15" fill="rgb(231,145,46)"/><text x="39.2115%" y="159.50">as..</text></g><g><title>impl_trait_ref (58,170 samples, 0.16%)</title><rect x="41.8675%" y="53" width="0.1616%" height="15" fill="rgb(251,118,11)"/><text x="42.1175%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (54,500 samples, 0.15%)</title><rect x="41.8777%" y="37" width="0.1514%" height="15" fill="rgb(217,147,25)"/><text x="42.1277%" y="47.50"></text></g><g><title>adt_destructor (135,341 samples, 0.38%)</title><rect x="41.7069%" y="117" width="0.3759%" height="15" fill="rgb(247,81,37)"/><text x="41.9569%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (133,911 samples, 0.37%)</title><rect x="41.7108%" y="101" width="0.3720%" height="15" fill="rgb(209,12,38)"/><text x="41.9608%" y="111.50"></text></g><g><title>coherent_trait (128,891 samples, 0.36%)</title><rect x="41.7248%" y="85" width="0.3580%" height="15" fill="rgb(227,1,9)"/><text x="41.9748%" y="95.50"></text></g><g><title>specialization_graph_of (125,821 samples, 0.35%)</title><rect x="41.7333%" y="69" width="0.3495%" height="15" fill="rgb(248,47,43)"/><text x="41.9833%" y="79.50"></text></g><g><title>dropck_outlives (178,203 samples, 0.49%)</title><rect x="41.5924%" y="149" width="0.4950%" height="15" fill="rgb(221,10,30)"/><text x="41.8424%" y="159.50"></text></g><g><title>adt_dtorck_constraint (144,091 samples, 0.40%)</title><rect x="41.6871%" y="133" width="0.4002%" height="15" fill="rgb(210,229,1)"/><text x="41.9371%" y="143.50"></text></g><g><title>generics_of (61,330 samples, 0.17%)</title><rect x="43.5090%" y="133" width="0.1704%" height="15" fill="rgb(222,148,37)"/><text x="43.7590%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (51,030 samples, 0.14%)</title><rect x="43.5376%" y="117" width="0.1417%" height="15" fill="rgb(234,67,33)"/><text x="43.7876%" y="127.50"></text></g><g><title>impl_item_implementor_ids (61,961 samples, 0.17%)</title><rect x="43.6794%" y="133" width="0.1721%" height="15" fill="rgb(247,98,35)"/><text x="43.9294%" y="143.50"></text></g><g><title>associated_items (54,941 samples, 0.15%)</title><rect x="43.6989%" y="117" width="0.1526%" height="15" fill="rgb(247,138,52)"/><text x="43.9489%" y="127.50"></text></g><g><title>impl_trait_ref (67,141 samples, 0.19%)</title><rect x="43.8871%" y="133" width="0.1865%" height="15" fill="rgb(213,79,30)"/><text x="44.1371%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (61,691 samples, 0.17%)</title><rect x="43.9022%" y="117" width="0.1714%" height="15" fill="rgb(246,177,23)"/><text x="44.1522%" y="127.50"></text></g><g><title>predicates_of (123,631 samples, 0.34%)</title><rect x="44.1223%" y="133" width="0.3434%" height="15" fill="rgb(230,62,27)"/><text x="44.3723%" y="143.50"></text></g><g><title>predicates_defined_on (79,600 samples, 0.22%)</title><rect x="44.2446%" y="117" width="0.2211%" height="15" fill="rgb(216,154,8)"/><text x="44.4946%" y="127.50"></text></g><g><title>specializes (225,573 samples, 0.63%)</title><rect x="44.4657%" y="133" width="0.6266%" height="15" fill="rgb(244,35,45)"/><text x="44.7157%" y="143.50"></text></g><g><title>param_env (175,182 samples, 0.49%)</title><rect x="44.6057%" y="117" width="0.4866%" height="15" fill="rgb(251,115,12)"/><text x="44.8557%" y="127.50"></text></g><g><title>def_span (111,492 samples, 0.31%)</title><rect x="44.7826%" y="101" width="0.3097%" height="15" fill="rgb(240,54,50)"/><text x="45.0326%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (105,712 samples, 0.29%)</title><rect x="44.7986%" y="85" width="0.2936%" height="15" fill="rgb(233,84,52)"/><text x="45.0486%" y="95.50"></text></g><g><title>trait_impls_of (260,623 samples, 0.72%)</title><rect x="45.1148%" y="133" width="0.7239%" height="15" fill="rgb(207,117,47)"/><text x="45.3648%" y="143.50"></text></g><g><title>implementations_of_trait (71,171 samples, 0.20%)</title><rect x="45.6410%" y="117" width="0.1977%" height="15" fill="rgb(249,43,39)"/><text x="45.8910%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (63,091 samples, 0.18%)</title><rect x="45.6634%" y="101" width="0.1752%" height="15" fill="rgb(209,38,44)"/><text x="45.9134%" y="111.50"></text></g><g><title>evaluate_obligation (1,361,714 samples, 3.78%)</title><rect x="42.0874%" y="149" width="3.7823%" height="15" fill="rgb(236,212,23)"/><text x="42.3374%" y="159.50">eval..</text></g><g><title>fn_sig (94,501 samples, 0.26%)</title><rect x="45.9277%" y="149" width="0.2625%" height="15" fill="rgb(242,79,21)"/><text x="46.1777%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (81,951 samples, 0.23%)</title><rect x="45.9626%" y="133" width="0.2276%" height="15" fill="rgb(211,96,35)"/><text x="46.2126%" y="143.50"></text></g><g><title>generics_of (65,670 samples, 0.18%)</title><rect x="46.1902%" y="149" width="0.1824%" height="15" fill="rgb(253,215,40)"/><text x="46.4402%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (42,880 samples, 0.12%)</title><rect x="46.2535%" y="133" width="0.1191%" height="15" fill="rgb(211,81,21)"/><text x="46.5035%" y="143.50"></text></g><g><title>item_attrs (277,753 samples, 0.77%)</title><rect x="46.5582%" y="149" width="0.7715%" height="15" fill="rgb(208,190,38)"/><text x="46.8082%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (275,653 samples, 0.77%)</title><rect x="46.5641%" y="133" width="0.7657%" height="15" fill="rgb(235,213,38)"/><text x="46.8141%" y="143.50"></text></g><g><title>method_autoderef_steps (131,941 samples, 0.37%)</title><rect x="47.4790%" y="149" width="0.3665%" height="15" fill="rgb(237,122,38)"/><text x="47.7290%" y="159.50"></text></g><g><title>evaluate_obligation (69,840 samples, 0.19%)</title><rect x="47.6515%" y="133" width="0.1940%" height="15" fill="rgb(244,218,35)"/><text x="47.9015%" y="143.50"></text></g><g><title>explicit_predicates_of (58,541 samples, 0.16%)</title><rect x="48.2813%" y="117" width="0.1626%" height="15" fill="rgb(240,68,47)"/><text x="48.5313%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (40,831 samples, 0.11%)</title><rect x="48.3304%" y="101" width="0.1134%" height="15" fill="rgb(210,16,53)"/><text x="48.5804%" y="111.50"></text></g><g><title>predicates_of (203,635 samples, 0.57%)</title><rect x="47.9619%" y="149" width="0.5656%" height="15" fill="rgb(235,124,12)"/><text x="48.2119%" y="159.50"></text></g><g><title>predicates_defined_on (137,253 samples, 0.38%)</title><rect x="48.1463%" y="133" width="0.3812%" height="15" fill="rgb(224,169,11)"/><text x="48.3963%" y="143.50"></text></g><g><title>item_bodies_checking (8,158,331 samples, 22.66%)</title><rect x="26.0571%" y="197" width="22.6607%" height="15" fill="rgb(250,166,2)"/><text x="26.3071%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,155,001 samples, 22.65%)</title><rect x="26.0663%" y="181" width="22.6515%" height="15" fill="rgb(242,216,29)"/><text x="26.3163%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (8,114,911 samples, 22.54%)</title><rect x="26.1777%" y="165" width="22.5401%" height="15" fill="rgb(230,116,27)"/><text x="26.4277%" y="175.50">typeck</text></g><g><title>item_types_checking (187,333 samples, 0.52%)</title><rect x="48.7178%" y="197" width="0.5203%" height="15" fill="rgb(228,99,48)"/><text x="48.9678%" y="207.50"></text></g><g><title>check_mod_item_types (184,333 samples, 0.51%)</title><rect x="48.7261%" y="181" width="0.5120%" height="15" fill="rgb(253,11,6)"/><text x="48.9761%" y="191.50"></text></g><g><title>fn_sig (241,543 samples, 0.67%)</title><rect x="49.5944%" y="165" width="0.6709%" height="15" fill="rgb(247,143,39)"/><text x="49.8444%" y="175.50"></text></g><g><title>late_bound_vars_map (149,570 samples, 0.42%)</title><rect x="49.8499%" y="149" width="0.4154%" height="15" fill="rgb(236,97,10)"/><text x="50.0999%" y="159.50"></text></g><g><title>resolve_lifetimes (127,380 samples, 0.35%)</title><rect x="49.9115%" y="133" width="0.3538%" height="15" fill="rgb(233,208,19)"/><text x="50.1615%" y="143.50"></text></g><g><title>generics_of (84,580 samples, 0.23%)</title><rect x="50.2653%" y="165" width="0.2349%" height="15" fill="rgb(216,164,2)"/><text x="50.5153%" y="175.50"></text></g><g><title>explicit_predicates_of (114,460 samples, 0.32%)</title><rect x="50.6671%" y="133" width="0.3179%" height="15" fill="rgb(220,129,5)"/><text x="50.9171%" y="143.50"></text></g><g><title>predicates_of (179,030 samples, 0.50%)</title><rect x="50.5166%" y="165" width="0.4973%" height="15" fill="rgb(242,17,10)"/><text x="50.7666%" y="175.50"></text></g><g><title>predicates_defined_on (159,640 samples, 0.44%)</title><rect x="50.5705%" y="149" width="0.4434%" height="15" fill="rgb(242,107,0)"/><text x="50.8205%" y="159.50"></text></g><g><title>super_predicates_of (70,371 samples, 0.20%)</title><rect x="51.0139%" y="165" width="0.1955%" height="15" fill="rgb(251,28,31)"/><text x="51.2639%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (58,770 samples, 0.16%)</title><rect x="51.0461%" y="149" width="0.1632%" height="15" fill="rgb(233,223,10)"/><text x="51.2961%" y="159.50"></text></g><g><title>type_collecting (791,759 samples, 2.20%)</title><rect x="49.2417%" y="197" width="2.1992%" height="15" fill="rgb(215,21,27)"/><text x="49.4917%" y="207.50">t..</text></g><g><title>collect_mod_item_types (782,788 samples, 2.17%)</title><rect x="49.2666%" y="181" width="2.1743%" height="15" fill="rgb(232,23,21)"/><text x="49.5166%" y="191.50">c..</text></g><g><title>type_of (81,322 samples, 0.23%)</title><rect x="51.2150%" y="165" width="0.2259%" height="15" fill="rgb(244,5,23)"/><text x="51.4650%" y="175.50"></text></g><g><title>param_env (81,630 samples, 0.23%)</title><rect x="52.3441%" y="165" width="0.2267%" height="15" fill="rgb(226,81,46)"/><text x="52.5941%" y="175.50"></text></g><g><title>check_impl_item_well_formed (368,863 samples, 1.02%)</title><rect x="51.6445%" y="181" width="1.0246%" height="15" fill="rgb(247,70,30)"/><text x="51.8945%" y="191.50"></text></g><g><title>adt_def (41,590 samples, 0.12%)</title><rect x="54.4030%" y="149" width="0.1155%" height="15" fill="rgb(212,68,19)"/><text x="54.6530%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (39,870 samples, 0.11%)</title><rect x="54.4078%" y="133" width="0.1107%" height="15" fill="rgb(240,187,13)"/><text x="54.6578%" y="143.50"></text></g><g><title>adt_sized_constraint (49,180 samples, 0.14%)</title><rect x="54.3854%" y="165" width="0.1366%" height="15" fill="rgb(223,113,26)"/><text x="54.6354%" y="175.50"></text></g><g><title>implied_outlives_bounds (85,872 samples, 0.24%)</title><rect x="54.6267%" y="165" width="0.2385%" height="15" fill="rgb(206,192,2)"/><text x="54.8767%" y="175.50"></text></g><g><title>param_env (215,721 samples, 0.60%)</title><rect x="54.8691%" y="165" width="0.5992%" height="15" fill="rgb(241,108,4)"/><text x="55.1191%" y="175.50"></text></g><g><title>predicates_of (87,311 samples, 0.24%)</title><rect x="55.4683%" y="165" width="0.2425%" height="15" fill="rgb(247,173,49)"/><text x="55.7183%" y="175.50"></text></g><g><title>predicates_defined_on (56,221 samples, 0.16%)</title><rect x="55.5547%" y="149" width="0.1562%" height="15" fill="rgb(224,114,35)"/><text x="55.8047%" y="159.50"></text></g><g><title>check_item_well_formed (1,282,416 samples, 3.56%)</title><rect x="52.6690%" y="181" width="3.5621%" height="15" fill="rgb(245,159,27)"/><text x="52.9190%" y="191.50">chec..</text></g><g><title>trait_impls_of (161,132 samples, 0.45%)</title><rect x="55.7835%" y="165" width="0.4476%" height="15" fill="rgb(245,172,44)"/><text x="56.0335%" y="175.50"></text></g><g><title>evaluate_obligation (134,551 samples, 0.37%)</title><rect x="58.0731%" y="165" width="0.3737%" height="15" fill="rgb(236,23,11)"/><text x="58.3231%" y="175.50"></text></g><g><title>implied_outlives_bounds (42,620 samples, 0.12%)</title><rect x="58.4468%" y="165" width="0.1184%" height="15" fill="rgb(205,117,38)"/><text x="58.6968%" y="175.50"></text></g><g><title>param_env (152,104 samples, 0.42%)</title><rect x="58.5652%" y="165" width="0.4225%" height="15" fill="rgb(237,72,25)"/><text x="58.8152%" y="175.50"></text></g><g><title>analysis (20,719,312 samples, 57.55%)</title><rect x="1.6236%" y="229" width="57.5504%" height="15" fill="rgb(244,70,9)"/><text x="1.8736%" y="239.50">analysis</text></g><g><title>type_check_crate (12,134,296 samples, 33.70%)</title><rect x="25.4695%" y="213" width="33.7045%" height="15" fill="rgb(217,125,39)"/><text x="25.7195%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,780,941 samples, 7.72%)</title><rect x="51.4496%" y="197" width="7.7244%" height="15" fill="rgb(235,36,10)"/><text x="51.6996%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,059,502 samples, 2.94%)</title><rect x="56.2311%" y="181" width="2.9429%" height="15" fill="rgb(251,123,47)"/><text x="56.4811%" y="191.50">ch..</text></g><g><title>region_scope_tree (67,072 samples, 0.19%)</title><rect x="58.9877%" y="165" width="0.1863%" height="15" fill="rgb(221,13,13)"/><text x="59.2377%" y="175.50"></text></g><g><title>codegen_crate (429,854 samples, 1.19%)</title><rect x="59.2004%" y="229" width="1.1940%" height="15" fill="rgb(238,131,9)"/><text x="59.4504%" y="239.50"></text></g><g><title>AST_validation (79,201 samples, 0.22%)</title><rect x="60.9327%" y="213" width="0.2200%" height="15" fill="rgb(211,50,8)"/><text x="61.1827%" y="223.50"></text></g><g><title>crate_injection (85,661 samples, 0.24%)</title><rect x="61.2186%" y="213" width="0.2379%" height="15" fill="rgb(245,182,24)"/><text x="61.4686%" y="223.50"></text></g><g><title>metadata_load_macro (36,170 samples, 0.10%)</title><rect x="78.4796%" y="181" width="0.1005%" height="15" fill="rgb(242,14,37)"/><text x="78.7296%" y="191.50"></text></g><g><title>macro_expand_crate (6,350,661 samples, 17.64%)</title><rect x="61.4565%" y="213" width="17.6397%" height="15" fill="rgb(246,228,12)"/><text x="61.7065%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (6,329,340 samples, 17.58%)</title><rect x="61.5158%" y="197" width="17.5805%" height="15" fill="rgb(213,55,15)"/><text x="61.7658%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (185,842 samples, 0.52%)</title><rect x="78.5801%" y="181" width="0.5162%" height="15" fill="rgb(209,9,3)"/><text x="78.8301%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (129,961 samples, 0.36%)</title><rect x="79.1067%" y="213" width="0.3610%" height="15" fill="rgb(230,59,30)"/><text x="79.3567%" y="223.50"></text></g><g><title>finalize_macro_resolutions (212,133 samples, 0.59%)</title><rect x="79.5475%" y="197" width="0.5892%" height="15" fill="rgb(209,121,21)"/><text x="79.7975%" y="207.50"></text></g><g><title>late_resolve_crate (518,525 samples, 1.44%)</title><rect x="80.1368%" y="197" width="1.4403%" height="15" fill="rgb(220,109,13)"/><text x="80.3868%" y="207.50"></text></g><g><title>configure_and_expand (7,677,535 samples, 21.33%)</title><rect x="60.3943%" y="229" width="21.3253%" height="15" fill="rgb(232,18,1)"/><text x="60.6443%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (810,749 samples, 2.25%)</title><rect x="79.4677%" y="213" width="2.2520%" height="15" fill="rgb(215,41,42)"/><text x="79.7177%" y="223.50">r..</text></g><g><title>drop_ast (82,321 samples, 0.23%)</title><rect x="81.7196%" y="229" width="0.2287%" height="15" fill="rgb(224,123,36)"/><text x="81.9696%" y="239.50"></text></g><g><title>early_lint_checks (148,272 samples, 0.41%)</title><rect x="82.0078%" y="229" width="0.4118%" height="15" fill="rgb(240,125,3)"/><text x="82.2578%" y="239.50"></text></g><g><title>free_global_ctxt (1,463,686 samples, 4.07%)</title><rect x="82.4196%" y="229" width="4.0656%" height="15" fill="rgb(205,98,50)"/><text x="82.6696%" y="239.50">free..</text></g><g><title>crate_hash (111,852 samples, 0.31%)</title><rect x="87.6523%" y="213" width="0.3107%" height="15" fill="rgb(205,185,37)"/><text x="87.9023%" y="223.50"></text></g><g><title>variances_of (46,410 samples, 0.13%)</title><rect x="88.1873%" y="213" width="0.1289%" height="15" fill="rgb(238,207,15)"/><text x="88.4373%" y="223.50"></text></g><g><title>crate_variances (37,820 samples, 0.11%)</title><rect x="88.2112%" y="197" width="0.1050%" height="15" fill="rgb(213,199,42)"/><text x="88.4612%" y="207.50"></text></g><g><title>generate_crate_metadata (659,558 samples, 1.83%)</title><rect x="86.4852%" y="229" width="1.8320%" height="15" fill="rgb(235,201,11)"/><text x="86.7352%" y="239.50">g..</text></g><g><title>hir_lowering (894,730 samples, 2.49%)</title><rect x="88.3172%" y="229" width="2.4852%" height="15" fill="rgb(207,46,11)"/><text x="88.5672%" y="239.50">hi..</text></g><g><title>link (62,151 samples, 0.17%)</title><rect x="90.8024%" y="229" width="0.1726%" height="15" fill="rgb(241,35,35)"/><text x="91.0524%" y="239.50"></text></g><g><title>parse_crate (1,793,060 samples, 4.98%)</title><rect x="90.9750%" y="229" width="4.9804%" height="15" fill="rgb(243,32,47)"/><text x="91.2250%" y="239.50">parse_..</text></g><g><title>prepare_outputs (260,643 samples, 0.72%)</title><rect x="95.9792%" y="229" width="0.7240%" height="15" fill="rgb(247,202,23)"/><text x="96.2292%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (626,417 samples, 1.74%)</title><rect x="96.7031%" y="229" width="1.7399%" height="15" fill="rgb(219,102,11)"/><text x="96.9531%" y="239.50"></text></g><g><title>setup_global_ctxt (117,512 samples, 0.33%)</title><rect x="98.4872%" y="229" width="0.3264%" height="15" fill="rgb(243,110,44)"/><text x="98.7372%" y="239.50"></text></g><g><title>all (36,002,052 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (36,002,052 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (427,115 samples, 1.19%)</title><rect x="98.8136%" y="229" width="1.1864%" height="15" fill="rgb(226,22,26)"/><text x="99.0636%" y="239.50"></text></g></svg></svg>