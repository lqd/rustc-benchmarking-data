<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (147,501 samples, 0.36%)</title><rect x="10.0848%" y="133" width="0.3595%" height="15" fill="rgb(227,0,7)"/><text x="10.3348%" y="143.50"></text></g><g><title>item_attrs (117,242 samples, 0.29%)</title><rect x="10.8578%" y="101" width="0.2858%" height="15" fill="rgb(217,0,24)"/><text x="11.1078%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (112,472 samples, 0.27%)</title><rect x="10.8694%" y="85" width="0.2742%" height="15" fill="rgb(221,193,54)"/><text x="11.1194%" y="95.50"></text></g><g><title>codegen_fn_attrs (155,273 samples, 0.38%)</title><rect x="10.7763%" y="117" width="0.3785%" height="15" fill="rgb(248,212,6)"/><text x="11.0263%" y="127.50"></text></g><g><title>is_copy_raw (57,290 samples, 0.14%)</title><rect x="13.3618%" y="69" width="0.1396%" height="15" fill="rgb(208,68,35)"/><text x="13.6118%" y="79.50"></text></g><g><title>evaluate_obligation (47,320 samples, 0.12%)</title><rect x="13.3861%" y="53" width="0.1153%" height="15" fill="rgb(232,128,0)"/><text x="13.6361%" y="63.50"></text></g><g><title>param_env (43,841 samples, 0.11%)</title><rect x="13.5015%" y="69" width="0.1069%" height="15" fill="rgb(207,160,47)"/><text x="13.7515%" y="79.50"></text></g><g><title>adt_drop_tys (120,491 samples, 0.29%)</title><rect x="13.3169%" y="85" width="0.2937%" height="15" fill="rgb(228,23,34)"/><text x="13.5669%" y="95.50"></text></g><g><title>needs_drop_raw (329,186 samples, 0.80%)</title><rect x="13.2461%" y="101" width="0.8024%" height="15" fill="rgb(218,30,26)"/><text x="13.4961%" y="111.50"></text></g><g><title>is_copy_raw (179,673 samples, 0.44%)</title><rect x="13.6106%" y="85" width="0.4380%" height="15" fill="rgb(220,122,19)"/><text x="13.8606%" y="95.50"></text></g><g><title>evaluate_obligation (145,813 samples, 0.36%)</title><rect x="13.6931%" y="69" width="0.3554%" height="15" fill="rgb(250,228,42)"/><text x="13.9431%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (296,175 samples, 0.72%)</title><rect x="14.2561%" y="85" width="0.7219%" height="15" fill="rgb(240,193,28)"/><text x="14.5061%" y="95.50"></text></g><g><title>evaluate_obligation (54,271 samples, 0.13%)</title><rect x="14.8457%" y="69" width="0.1323%" height="15" fill="rgb(216,20,37)"/><text x="15.0957%" y="79.50"></text></g><g><title>impl_parent (426,035 samples, 1.04%)</title><rect x="16.3658%" y="69" width="1.0385%" height="15" fill="rgb(206,188,39)"/><text x="16.6158%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (296,781 samples, 0.72%)</title><rect x="16.6808%" y="53" width="0.7234%" height="15" fill="rgb(217,207,13)"/><text x="16.9308%" y="63.50"></text></g><g><title>specialization_graph_of (2,549,178 samples, 6.21%)</title><rect x="15.0497%" y="85" width="6.2136%" height="15" fill="rgb(231,73,38)"/><text x="15.2997%" y="95.50">speciali..</text></g><g><title>impl_trait_ref (1,583,206 samples, 3.86%)</title><rect x="17.4042%" y="69" width="3.8591%" height="15" fill="rgb(225,20,46)"/><text x="17.6542%" y="79.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,451,766 samples, 3.54%)</title><rect x="17.7246%" y="53" width="3.5387%" height="15" fill="rgb(210,31,41)"/><text x="17.9746%" y="63.50">met..</text></g><g><title>resolve_instance (2,997,574 samples, 7.31%)</title><rect x="14.0505%" y="101" width="7.3066%" height="15" fill="rgb(221,200,47)"/><text x="14.3005%" y="111.50">resolve_in..</text></g><g><title>thir_body (310,164 samples, 0.76%)</title><rect x="21.3702%" y="101" width="0.7560%" height="15" fill="rgb(226,26,5)"/><text x="21.6202%" y="111.50"></text></g><g><title>mir_const (5,255,679 samples, 12.81%)</title><rect x="9.3517%" y="149" width="12.8108%" height="15" fill="rgb(249,33,26)"/><text x="9.6017%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (4,807,415 samples, 11.72%)</title><rect x="10.4444%" y="133" width="11.7181%" height="15" fill="rgb(235,183,28)"/><text x="10.6944%" y="143.50">unsafety_check_re..</text></g><g><title>mir_built (4,515,970 samples, 11.01%)</title><rect x="11.1548%" y="117" width="11.0077%" height="15" fill="rgb(221,5,38)"/><text x="11.4048%" y="127.50">mir_built</text></g><g><title>mir_promoted (5,551,832 samples, 13.53%)</title><rect x="8.6573%" y="165" width="13.5326%" height="15" fill="rgb(247,18,42)"/><text x="8.9073%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (390,473 samples, 0.95%)</title><rect x="22.1899%" y="165" width="0.9518%" height="15" fill="rgb(241,131,45)"/><text x="22.4399%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (264,242 samples, 0.64%)</title><rect x="23.1417%" y="165" width="0.6441%" height="15" fill="rgb(249,31,29)"/><text x="23.3917%" y="175.50"></text></g><g><title>normalize_projection_ty (179,462 samples, 0.44%)</title><rect x="23.3483%" y="149" width="0.4374%" height="15" fill="rgb(225,111,53)"/><text x="23.5983%" y="159.50"></text></g><g><title>type_op_normalize_predicate (122,361 samples, 0.30%)</title><rect x="23.7858%" y="165" width="0.2983%" height="15" fill="rgb(238,160,17)"/><text x="24.0358%" y="175.50"></text></g><g><title>normalize_projection_ty (52,380 samples, 0.13%)</title><rect x="23.9563%" y="149" width="0.1277%" height="15" fill="rgb(214,148,48)"/><text x="24.2063%" y="159.50"></text></g><g><title>type_op_prove_predicate (746,159 samples, 1.82%)</title><rect x="24.1264%" y="165" width="1.8188%" height="15" fill="rgb(232,36,49)"/><text x="24.3764%" y="175.50">t..</text></g><g><title>evaluate_obligation (92,471 samples, 0.23%)</title><rect x="25.7198%" y="149" width="0.2254%" height="15" fill="rgb(209,103,24)"/><text x="25.9698%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,103,453 samples, 24.63%)</title><rect x="1.3418%" y="197" width="24.6272%" height="15" fill="rgb(229,88,8)"/><text x="1.5918%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,082,303 samples, 24.58%)</title><rect x="1.3933%" y="181" width="24.5757%" height="15" fill="rgb(213,181,19)"/><text x="1.6433%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (70,941 samples, 0.17%)</title><rect x="25.9860%" y="197" width="0.1729%" height="15" fill="rgb(254,191,54)"/><text x="26.2360%" y="207.50"></text></g><g><title>get_lang_items (49,781 samples, 0.12%)</title><rect x="26.4549%" y="149" width="0.1213%" height="15" fill="rgb(241,83,37)"/><text x="26.7049%" y="159.50"></text></g><g><title>should_inherit_track_caller (74,720 samples, 0.18%)</title><rect x="26.5763%" y="149" width="0.1821%" height="15" fill="rgb(233,36,39)"/><text x="26.8263%" y="159.50"></text></g><g><title>codegen_fn_attrs (182,691 samples, 0.45%)</title><rect x="26.3617%" y="165" width="0.4453%" height="15" fill="rgb(226,3,54)"/><text x="26.6117%" y="175.50"></text></g><g><title>check_mod_attrs (248,752 samples, 0.61%)</title><rect x="26.2010%" y="181" width="0.6063%" height="15" fill="rgb(245,192,40)"/><text x="26.4510%" y="191.50"></text></g><g><title>lookup_deprecation_entry (53,170 samples, 0.13%)</title><rect x="27.0770%" y="165" width="0.1296%" height="15" fill="rgb(238,167,29)"/><text x="27.3270%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (138,852 samples, 0.34%)</title><rect x="26.9535%" y="181" width="0.3385%" height="15" fill="rgb(232,182,51)"/><text x="27.2035%" y="191.50"></text></g><g><title>misc_checking_1 (492,555 samples, 1.20%)</title><rect x="26.1599%" y="197" width="1.2006%" height="15" fill="rgb(231,60,39)"/><text x="26.4099%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (170,722 samples, 0.42%)</title><rect x="27.3640%" y="181" width="0.4161%" height="15" fill="rgb(208,69,12)"/><text x="27.6140%" y="191.50"></text></g><g><title>check_mod_liveness (138,012 samples, 0.34%)</title><rect x="27.4437%" y="165" width="0.3364%" height="15" fill="rgb(235,93,37)"/><text x="27.6937%" y="175.50"></text></g><g><title>misc_checking_2 (506,785 samples, 1.24%)</title><rect x="27.3605%" y="197" width="1.2353%" height="15" fill="rgb(213,116,39)"/><text x="27.6105%" y="207.50"></text></g><g><title>match_checking (334,623 samples, 0.82%)</title><rect x="27.7801%" y="181" width="0.8156%" height="15" fill="rgb(222,207,29)"/><text x="28.0301%" y="191.50"></text></g><g><title>check_match (325,203 samples, 0.79%)</title><rect x="27.8031%" y="165" width="0.7927%" height="15" fill="rgb(206,96,30)"/><text x="28.0531%" y="175.50"></text></g><g><title>check_private_in_public (48,431 samples, 0.12%)</title><rect x="28.6179%" y="181" width="0.1181%" height="15" fill="rgb(218,138,4)"/><text x="28.8679%" y="191.50"></text></g><g><title>death_checking (80,941 samples, 0.20%)</title><rect x="28.7359%" y="181" width="0.1973%" height="15" fill="rgb(250,191,14)"/><text x="28.9859%" y="191.50"></text></g><g><title>param_env (46,190 samples, 0.11%)</title><rect x="30.1069%" y="149" width="0.1126%" height="15" fill="rgb(239,60,40)"/><text x="30.3569%" y="159.50"></text></g><g><title>trait_impls_of (212,243 samples, 0.52%)</title><rect x="30.2194%" y="149" width="0.5173%" height="15" fill="rgb(206,27,48)"/><text x="30.4694%" y="159.50"></text></g><g><title>implementations_of_trait (49,250 samples, 0.12%)</title><rect x="30.6167%" y="133" width="0.1200%" height="15" fill="rgb(225,35,8)"/><text x="30.8667%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (44,770 samples, 0.11%)</title><rect x="30.6277%" y="117" width="0.1091%" height="15" fill="rgb(250,213,24)"/><text x="30.8777%" y="127.50"></text></g><g><title>crate_lints (2,654,439 samples, 6.47%)</title><rect x="28.9373%" y="165" width="6.4702%" height="15" fill="rgb(247,123,22)"/><text x="29.1873%" y="175.50">crate_li..</text></g><g><title>type_of (1,914,231 samples, 4.67%)</title><rect x="30.7415%" y="149" width="4.6660%" height="15" fill="rgb(231,138,38)"/><text x="30.9915%" y="159.50">type_..</text></g><g><title>metadata_decode_entry_type_of (1,423,868 samples, 3.47%)</title><rect x="31.9368%" y="133" width="3.4707%" height="15" fill="rgb(231,145,46)"/><text x="32.1868%" y="143.50">met..</text></g><g><title>lint_checking (2,768,531 samples, 6.75%)</title><rect x="28.9332%" y="181" width="6.7483%" height="15" fill="rgb(251,118,11)"/><text x="29.1832%" y="191.50">lint_chec..</text></g><g><title>module_lints (112,432 samples, 0.27%)</title><rect x="35.4075%" y="165" width="0.2741%" height="15" fill="rgb(217,147,25)"/><text x="35.6575%" y="175.50"></text></g><g><title>lint_mod (109,412 samples, 0.27%)</title><rect x="35.4149%" y="149" width="0.2667%" height="15" fill="rgb(247,81,37)"/><text x="35.6649%" y="159.50"></text></g><g><title>privacy_access_levels (69,410 samples, 0.17%)</title><rect x="35.6815%" y="181" width="0.1692%" height="15" fill="rgb(209,12,38)"/><text x="35.9315%" y="191.50"></text></g><g><title>privacy_checking_modules (190,672 samples, 0.46%)</title><rect x="35.8507%" y="181" width="0.4648%" height="15" fill="rgb(227,1,9)"/><text x="36.1007%" y="191.50"></text></g><g><title>check_mod_privacy (189,322 samples, 0.46%)</title><rect x="35.8540%" y="165" width="0.4615%" height="15" fill="rgb(248,47,43)"/><text x="36.1040%" y="175.50"></text></g><g><title>misc_checking_3 (3,182,195 samples, 7.76%)</title><rect x="28.5958%" y="197" width="7.7566%" height="15" fill="rgb(221,10,30)"/><text x="28.8458%" y="207.50">misc_checki..</text></g><g><title>impl_parent (216,004 samples, 0.53%)</title><rect x="37.0675%" y="133" width="0.5265%" height="15" fill="rgb(210,229,1)"/><text x="37.3175%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (165,432 samples, 0.40%)</title><rect x="37.1907%" y="117" width="0.4032%" height="15" fill="rgb(222,148,37)"/><text x="37.4407%" y="127.50"></text></g><g><title>impl_trait_ref (629,647 samples, 1.53%)</title><rect x="37.5940%" y="133" width="1.5348%" height="15" fill="rgb(234,67,33)"/><text x="37.8440%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (577,786 samples, 1.41%)</title><rect x="37.7204%" y="117" width="1.4084%" height="15" fill="rgb(247,98,35)"/><text x="37.9704%" y="127.50"></text></g><g><title>coherent_trait (1,166,503 samples, 2.84%)</title><rect x="36.4500%" y="165" width="2.8434%" height="15" fill="rgb(247,138,52)"/><text x="36.7000%" y="175.50">co..</text></g><g><title>specialization_graph_of (1,162,013 samples, 2.83%)</title><rect x="36.4609%" y="149" width="2.8324%" height="15" fill="rgb(213,79,30)"/><text x="36.7109%" y="159.50">sp..</text></g><g><title>trait_impls_of (67,531 samples, 0.16%)</title><rect x="39.1288%" y="133" width="0.1646%" height="15" fill="rgb(246,177,23)"/><text x="39.3788%" y="143.50"></text></g><g><title>coherence_checking (1,213,203 samples, 2.96%)</title><rect x="36.4152%" y="181" width="2.9572%" height="15" fill="rgb(230,62,27)"/><text x="36.6652%" y="191.50">coh..</text></g><g><title>associated_item (283,162 samples, 0.69%)</title><rect x="49.2049%" y="117" width="0.6902%" height="15" fill="rgb(216,154,8)"/><text x="49.4549%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (227,621 samples, 0.55%)</title><rect x="49.3403%" y="101" width="0.5548%" height="15" fill="rgb(244,35,45)"/><text x="49.5903%" y="111.50"></text></g><g><title>associated_items (399,174 samples, 0.97%)</title><rect x="48.9541%" y="133" width="0.9730%" height="15" fill="rgb(251,115,12)"/><text x="49.2041%" y="143.50"></text></g><g><title>adt_def (53,651 samples, 0.13%)</title><rect x="50.3169%" y="85" width="0.1308%" height="15" fill="rgb(240,54,50)"/><text x="50.5669%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (53,191 samples, 0.13%)</title><rect x="50.3180%" y="69" width="0.1297%" height="15" fill="rgb(233,84,52)"/><text x="50.5680%" y="79.50"></text></g><g><title>item_attrs (47,141 samples, 0.11%)</title><rect x="50.3327%" y="53" width="0.1149%" height="15" fill="rgb(207,117,47)"/><text x="50.5827%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,591 samples, 0.11%)</title><rect x="50.3341%" y="37" width="0.1136%" height="15" fill="rgb(249,43,39)"/><text x="50.5841%" y="47.50"></text></g><g><title>adt_dtorck_constraint (64,981 samples, 0.16%)</title><rect x="50.4534%" y="85" width="0.1584%" height="15" fill="rgb(209,38,44)"/><text x="50.7034%" y="95.50"></text></g><g><title>adt_dtorck_constraint (137,262 samples, 0.33%)</title><rect x="50.2933%" y="101" width="0.3346%" height="15" fill="rgb(236,212,23)"/><text x="50.5433%" y="111.50"></text></g><g><title>adt_dtorck_constraint (193,953 samples, 0.47%)</title><rect x="50.1707%" y="117" width="0.4728%" height="15" fill="rgb(242,79,21)"/><text x="50.4207%" y="127.50"></text></g><g><title>dropck_outlives (321,503 samples, 0.78%)</title><rect x="49.9685%" y="133" width="0.7837%" height="15" fill="rgb(211,96,35)"/><text x="50.2185%" y="143.50"></text></g><g><title>normalize_projection_ty (44,610 samples, 0.11%)</title><rect x="50.6434%" y="117" width="0.1087%" height="15" fill="rgb(253,215,40)"/><text x="50.8934%" y="127.50"></text></g><g><title>predicates_of (76,891 samples, 0.19%)</title><rect x="51.9875%" y="117" width="0.1874%" height="15" fill="rgb(211,81,21)"/><text x="52.2375%" y="127.50"></text></g><g><title>predicates_defined_on (58,481 samples, 0.14%)</title><rect x="52.0324%" y="101" width="0.1425%" height="15" fill="rgb(208,190,38)"/><text x="52.2824%" y="111.50"></text></g><g><title>evaluate_obligation (756,777 samples, 1.84%)</title><rect x="50.7522%" y="133" width="1.8446%" height="15" fill="rgb(235,213,38)"/><text x="51.0022%" y="143.50">e..</text></g><g><title>trait_impls_of (133,961 samples, 0.33%)</title><rect x="52.2703%" y="117" width="0.3265%" height="15" fill="rgb(237,122,38)"/><text x="52.5203%" y="127.50"></text></g><g><title>implementations_of_trait (45,840 samples, 0.11%)</title><rect x="52.4851%" y="101" width="0.1117%" height="15" fill="rgb(244,218,35)"/><text x="52.7351%" y="111.50"></text></g><g><title>fn_sig (47,751 samples, 0.12%)</title><rect x="52.6156%" y="133" width="0.1164%" height="15" fill="rgb(240,68,47)"/><text x="52.8656%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (42,610 samples, 0.10%)</title><rect x="52.6281%" y="117" width="0.1039%" height="15" fill="rgb(210,16,53)"/><text x="52.8781%" y="127.50"></text></g><g><title>impl_item_implementor_ids (42,990 samples, 0.10%)</title><rect x="52.8286%" y="133" width="0.1048%" height="15" fill="rgb(235,124,12)"/><text x="53.0786%" y="143.50"></text></g><g><title>evaluate_obligation (157,903 samples, 0.38%)</title><rect x="53.5276%" y="117" width="0.3849%" height="15" fill="rgb(224,169,11)"/><text x="53.7776%" y="127.50"></text></g><g><title>method_autoderef_steps (316,664 samples, 0.77%)</title><rect x="53.1639%" y="133" width="0.7719%" height="15" fill="rgb(250,166,2)"/><text x="53.4139%" y="143.50"></text></g><g><title>explicit_predicates_of (60,741 samples, 0.15%)</title><rect x="54.1177%" y="101" width="0.1481%" height="15" fill="rgb(242,216,29)"/><text x="54.3677%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (51,801 samples, 0.13%)</title><rect x="54.1395%" y="85" width="0.1263%" height="15" fill="rgb(230,116,27)"/><text x="54.3895%" y="95.50"></text></g><g><title>predicates_of (139,481 samples, 0.34%)</title><rect x="53.9688%" y="133" width="0.3400%" height="15" fill="rgb(228,99,48)"/><text x="54.2188%" y="143.50"></text></g><g><title>predicates_defined_on (104,251 samples, 0.25%)</title><rect x="54.0547%" y="117" width="0.2541%" height="15" fill="rgb(253,11,6)"/><text x="54.3047%" y="127.50"></text></g><g><title>evaluate_obligation (141,230 samples, 0.34%)</title><rect x="57.8243%" y="117" width="0.3442%" height="15" fill="rgb(247,143,39)"/><text x="58.0743%" y="127.50"></text></g><g><title>impl_trait_ref (68,232 samples, 0.17%)</title><rect x="58.3294%" y="117" width="0.1663%" height="15" fill="rgb(236,97,10)"/><text x="58.5794%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (64,512 samples, 0.16%)</title><rect x="58.3385%" y="101" width="0.1572%" height="15" fill="rgb(233,208,19)"/><text x="58.5885%" y="111.50"></text></g><g><title>is_copy_raw (167,232 samples, 0.41%)</title><rect x="58.5057%" y="117" width="0.4076%" height="15" fill="rgb(216,164,2)"/><text x="58.7557%" y="127.50"></text></g><g><title>evaluate_obligation (161,462 samples, 0.39%)</title><rect x="58.5198%" y="101" width="0.3936%" height="15" fill="rgb(220,129,5)"/><text x="58.7698%" y="111.50"></text></g><g><title>trait_impls_of (127,922 samples, 0.31%)</title><rect x="58.6016%" y="85" width="0.3118%" height="15" fill="rgb(242,17,10)"/><text x="58.8516%" y="95.50"></text></g><g><title>method_autoderef_steps (45,331 samples, 0.11%)</title><rect x="58.9583%" y="117" width="0.1105%" height="15" fill="rgb(242,107,0)"/><text x="59.2083%" y="127.50"></text></g><g><title>predicates_of (43,710 samples, 0.11%)</title><rect x="59.0876%" y="117" width="0.1065%" height="15" fill="rgb(251,28,31)"/><text x="59.3376%" y="127.50"></text></g><g><title>trait_impls_of (76,140 samples, 0.19%)</title><rect x="59.2084%" y="117" width="0.1856%" height="15" fill="rgb(233,223,10)"/><text x="59.4584%" y="127.50"></text></g><g><title>typeck (2,028,412 samples, 4.94%)</title><rect x="54.4789%" y="133" width="4.9443%" height="15" fill="rgb(215,21,27)"/><text x="54.7289%" y="143.50">typeck</text></g><g><title>item_bodies_checking (8,225,581 samples, 20.05%)</title><rect x="39.4027%" y="181" width="20.0499%" height="15" fill="rgb(232,23,21)"/><text x="39.6527%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,223,351 samples, 20.04%)</title><rect x="39.4082%" y="165" width="20.0445%" height="15" fill="rgb(244,5,23)"/><text x="39.6582%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (8,210,041 samples, 20.01%)</title><rect x="39.4406%" y="149" width="20.0120%" height="15" fill="rgb(226,81,46)"/><text x="39.6906%" y="159.50">typeck</text></g><g><title>impl_parent (55,630 samples, 0.14%)</title><rect x="60.0489%" y="101" width="0.1356%" height="15" fill="rgb(247,70,30)"/><text x="60.2989%" y="111.50"></text></g><g><title>impl_trait_ref (207,201 samples, 0.51%)</title><rect x="60.1845%" y="101" width="0.5051%" height="15" fill="rgb(212,68,19)"/><text x="60.4345%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (187,171 samples, 0.46%)</title><rect x="60.2333%" y="85" width="0.4562%" height="15" fill="rgb(240,187,13)"/><text x="60.4833%" y="95.50"></text></g><g><title>adt_destructor (376,384 samples, 0.92%)</title><rect x="59.8528%" y="149" width="0.9174%" height="15" fill="rgb(223,113,26)"/><text x="60.1028%" y="159.50"></text></g><g><title>coherent_trait (374,124 samples, 0.91%)</title><rect x="59.8583%" y="133" width="0.9119%" height="15" fill="rgb(206,192,2)"/><text x="60.1083%" y="143.50"></text></g><g><title>specialization_graph_of (372,714 samples, 0.91%)</title><rect x="59.8617%" y="117" width="0.9085%" height="15" fill="rgb(241,108,4)"/><text x="60.1117%" y="127.50"></text></g><g><title>item_types_checking (633,897 samples, 1.55%)</title><rect x="59.4527%" y="181" width="1.5451%" height="15" fill="rgb(247,173,49)"/><text x="59.7027%" y="191.50"></text></g><g><title>check_mod_item_types (632,227 samples, 1.54%)</title><rect x="59.4567%" y="165" width="1.5411%" height="15" fill="rgb(224,114,35)"/><text x="59.7067%" y="175.50"></text></g><g><title>fn_sig (103,211 samples, 0.25%)</title><rect x="61.1983%" y="149" width="0.2516%" height="15" fill="rgb(245,159,27)"/><text x="61.4483%" y="159.50"></text></g><g><title>type_of (44,150 samples, 0.11%)</title><rect x="61.3423%" y="133" width="0.1076%" height="15" fill="rgb(245,172,44)"/><text x="61.5923%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (42,530 samples, 0.10%)</title><rect x="61.3463%" y="117" width="0.1037%" height="15" fill="rgb(236,23,11)"/><text x="61.5963%" y="127.50"></text></g><g><title>is_late_bound_map (186,232 samples, 0.45%)</title><rect x="61.5647%" y="133" width="0.4539%" height="15" fill="rgb(205,117,38)"/><text x="61.8147%" y="143.50"></text></g><g><title>resolve_lifetimes (175,182 samples, 0.43%)</title><rect x="61.5916%" y="117" width="0.4270%" height="15" fill="rgb(237,72,25)"/><text x="61.8416%" y="127.50"></text></g><g><title>generics_of (264,673 samples, 0.65%)</title><rect x="61.4499%" y="149" width="0.6451%" height="15" fill="rgb(244,70,9)"/><text x="61.6999%" y="159.50"></text></g><g><title>explicit_predicates_of (73,640 samples, 0.18%)</title><rect x="62.1725%" y="117" width="0.1795%" height="15" fill="rgb(217,125,39)"/><text x="62.4225%" y="127.50"></text></g><g><title>predicates_of (187,131 samples, 0.46%)</title><rect x="62.1158%" y="149" width="0.4561%" height="15" fill="rgb(235,36,10)"/><text x="62.3658%" y="159.50"></text></g><g><title>predicates_defined_on (179,081 samples, 0.44%)</title><rect x="62.1354%" y="133" width="0.4365%" height="15" fill="rgb(251,123,47)"/><text x="62.3854%" y="143.50"></text></g><g><title>inferred_outlives_of (90,211 samples, 0.22%)</title><rect x="62.3520%" y="117" width="0.2199%" height="15" fill="rgb(221,13,13)"/><text x="62.6020%" y="127.50"></text></g><g><title>inferred_outlives_crate (81,041 samples, 0.20%)</title><rect x="62.3744%" y="101" width="0.1975%" height="15" fill="rgb(238,131,9)"/><text x="62.6244%" y="111.50"></text></g><g><title>type_of (43,271 samples, 0.11%)</title><rect x="62.4664%" y="85" width="0.1055%" height="15" fill="rgb(211,50,8)"/><text x="62.7164%" y="95.50"></text></g><g><title>type_collecting (704,708 samples, 1.72%)</title><rect x="61.0005%" y="181" width="1.7177%" height="15" fill="rgb(245,182,24)"/><text x="61.2505%" y="191.50"></text></g><g><title>collect_mod_item_types (698,457 samples, 1.70%)</title><rect x="61.0157%" y="165" width="1.7025%" height="15" fill="rgb(242,14,37)"/><text x="61.2657%" y="175.50"></text></g><g><title>type_of (60,022 samples, 0.15%)</title><rect x="62.5719%" y="149" width="0.1463%" height="15" fill="rgb(246,228,12)"/><text x="62.8219%" y="159.50"></text></g><g><title>adt_def (62,470 samples, 0.15%)</title><rect x="63.5743%" y="117" width="0.1523%" height="15" fill="rgb(213,55,15)"/><text x="63.8243%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (61,750 samples, 0.15%)</title><rect x="63.5761%" y="101" width="0.1505%" height="15" fill="rgb(209,9,3)"/><text x="63.8261%" y="111.50"></text></g><g><title>item_attrs (53,470 samples, 0.13%)</title><rect x="63.5963%" y="85" width="0.1303%" height="15" fill="rgb(230,59,30)"/><text x="63.8463%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (50,150 samples, 0.12%)</title><rect x="63.6044%" y="69" width="0.1222%" height="15" fill="rgb(209,121,21)"/><text x="63.8544%" y="79.50"></text></g><g><title>adt_def (52,401 samples, 0.13%)</title><rect x="63.7287%" y="101" width="0.1277%" height="15" fill="rgb(220,109,13)"/><text x="63.9787%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (52,181 samples, 0.13%)</title><rect x="63.7292%" y="85" width="0.1272%" height="15" fill="rgb(232,18,1)"/><text x="63.9792%" y="95.50"></text></g><g><title>item_attrs (49,971 samples, 0.12%)</title><rect x="63.7346%" y="69" width="0.1218%" height="15" fill="rgb(215,41,42)"/><text x="63.9846%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (49,641 samples, 0.12%)</title><rect x="63.7354%" y="53" width="0.1210%" height="15" fill="rgb(224,123,36)"/><text x="63.9854%" y="63.50"></text></g><g><title>adt_sized_constraint (53,711 samples, 0.13%)</title><rect x="63.7266%" y="117" width="0.1309%" height="15" fill="rgb(240,125,3)"/><text x="63.9766%" y="127.50"></text></g><g><title>adt_sized_constraint (126,131 samples, 0.31%)</title><rect x="63.5660%" y="133" width="0.3074%" height="15" fill="rgb(205,98,50)"/><text x="63.8160%" y="143.50"></text></g><g><title>evaluate_obligation (258,963 samples, 0.63%)</title><rect x="63.3770%" y="149" width="0.6312%" height="15" fill="rgb(205,185,37)"/><text x="63.6270%" y="159.50"></text></g><g><title>implied_outlives_bounds (44,350 samples, 0.11%)</title><rect x="64.0083%" y="149" width="0.1081%" height="15" fill="rgb(238,207,15)"/><text x="64.2583%" y="159.50"></text></g><g><title>check_impl_item_well_formed (660,907 samples, 1.61%)</title><rect x="62.8074%" y="165" width="1.6110%" height="15" fill="rgb(213,199,42)"/><text x="63.0574%" y="175.50"></text></g><g><title>region_scope_tree (74,651 samples, 0.18%)</title><rect x="64.2364%" y="149" width="0.1820%" height="15" fill="rgb(235,201,11)"/><text x="64.4864%" y="159.50"></text></g><g><title>evaluate_obligation (100,522 samples, 0.25%)</title><rect x="65.3413%" y="149" width="0.2450%" height="15" fill="rgb(207,46,11)"/><text x="65.5913%" y="159.50"></text></g><g><title>implied_outlives_bounds (74,351 samples, 0.18%)</title><rect x="65.5950%" y="149" width="0.1812%" height="15" fill="rgb(241,35,35)"/><text x="65.8450%" y="159.50"></text></g><g><title>param_env (137,633 samples, 0.34%)</title><rect x="65.7787%" y="149" width="0.3355%" height="15" fill="rgb(243,32,47)"/><text x="66.0287%" y="159.50"></text></g><g><title>analysis (26,813,479 samples, 65.36%)</title><rect x="1.0328%" y="213" width="65.3581%" height="15" fill="rgb(247,202,23)"/><text x="1.2828%" y="223.50">analysis</text></g><g><title>type_check_crate (12,323,438 samples, 30.04%)</title><rect x="36.3524%" y="197" width="30.0385%" height="15" fill="rgb(219,102,11)"/><text x="36.6024%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,505,757 samples, 3.67%)</title><rect x="62.7206%" y="181" width="3.6703%" height="15" fill="rgb(243,110,44)"/><text x="62.9706%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (809,229 samples, 1.97%)</title><rect x="64.4184%" y="165" width="1.9725%" height="15" fill="rgb(222,74,54)"/><text x="64.6684%" y="175.50">c..</text></g><g><title>codegen_crate (528,705 samples, 1.29%)</title><rect x="66.4068%" y="213" width="1.2887%" height="15" fill="rgb(216,99,12)"/><text x="66.6568%" y="223.50"></text></g><g><title>AST_validation (45,921 samples, 0.11%)</title><rect x="68.0071%" y="197" width="0.1119%" height="15" fill="rgb(226,22,26)"/><text x="68.2571%" y="207.50"></text></g><g><title>crate_injection (52,240 samples, 0.13%)</title><rect x="68.1798%" y="197" width="0.1273%" height="15" fill="rgb(217,163,10)"/><text x="68.4298%" y="207.50"></text></g><g><title>macro_expand_crate (6,033,507 samples, 14.71%)</title><rect x="68.3072%" y="197" width="14.7067%" height="15" fill="rgb(213,25,53)"/><text x="68.5572%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (6,024,377 samples, 14.68%)</title><rect x="68.3294%" y="181" width="14.6845%" height="15" fill="rgb(252,105,26)"/><text x="68.5794%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (1,323,445 samples, 3.23%)</title><rect x="79.7880%" y="165" width="3.2259%" height="15" fill="rgb(220,39,43)"/><text x="80.0380%" y="175.50">met..</text></g><g><title>metadata_register_crate (484,996 samples, 1.18%)</title><rect x="81.8317%" y="149" width="1.1822%" height="15" fill="rgb(229,68,48)"/><text x="82.0817%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (87,911 samples, 0.21%)</title><rect x="83.0235%" y="197" width="0.2143%" height="15" fill="rgb(252,8,32)"/><text x="83.2735%" y="207.50"></text></g><g><title>late_resolve_crate (700,098 samples, 1.71%)</title><rect x="83.2941%" y="181" width="1.7065%" height="15" fill="rgb(223,20,43)"/><text x="83.5441%" y="191.50"></text></g><g><title>configure_and_expand (7,138,649 samples, 17.40%)</title><rect x="67.6956%" y="213" width="17.4005%" height="15" fill="rgb(229,81,49)"/><text x="67.9456%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (762,378 samples, 1.86%)</title><rect x="83.2378%" y="197" width="1.8583%" height="15" fill="rgb(236,28,36)"/><text x="83.4878%" y="207.50">r..</text></g><g><title>early_lint_checks (124,231 samples, 0.30%)</title><rect x="85.2239%" y="213" width="0.3028%" height="15" fill="rgb(249,185,26)"/><text x="85.4739%" y="223.50"></text></g><g><title>free_global_ctxt (2,709,841 samples, 6.61%)</title><rect x="85.5267%" y="213" width="6.6053%" height="15" fill="rgb(249,174,33)"/><text x="85.7767%" y="223.50">free_glob..</text></g><g><title>crate_hash (66,682 samples, 0.16%)</title><rect x="92.7673%" y="197" width="0.1625%" height="15" fill="rgb(233,201,37)"/><text x="93.0173%" y="207.50"></text></g><g><title>generate_crate_metadata (392,644 samples, 0.96%)</title><rect x="92.1319%" y="213" width="0.9571%" height="15" fill="rgb(221,78,26)"/><text x="92.3819%" y="223.50"></text></g><g><title>hir_lowering (605,127 samples, 1.48%)</title><rect x="93.0890%" y="213" width="1.4750%" height="15" fill="rgb(250,127,30)"/><text x="93.3390%" y="223.50"></text></g><g><title>link (45,070 samples, 0.11%)</title><rect x="94.5640%" y="213" width="0.1099%" height="15" fill="rgb(230,49,44)"/><text x="94.8140%" y="223.50"></text></g><g><title>parse_crate (1,288,625 samples, 3.14%)</title><rect x="94.6739%" y="213" width="3.1410%" height="15" fill="rgb(229,67,23)"/><text x="94.9239%" y="223.50">par..</text></g><g><title>prepare_outputs (157,572 samples, 0.38%)</title><rect x="97.8280%" y="213" width="0.3841%" height="15" fill="rgb(249,83,47)"/><text x="98.0780%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (417,484 samples, 1.02%)</title><rect x="98.2121%" y="213" width="1.0176%" height="15" fill="rgb(215,43,3)"/><text x="98.4621%" y="223.50"></text></g><g><title>setup_global_ctxt (82,671 samples, 0.20%)</title><rect x="99.2559%" y="213" width="0.2015%" height="15" fill="rgb(238,154,13)"/><text x="99.5059%" y="223.50"></text></g><g><title>all (41,025,507 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (41,025,507 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (222,593 samples, 0.54%)</title><rect x="99.4574%" y="213" width="0.5426%" height="15" fill="rgb(235,30,7)"/><text x="99.7074%" y="223.50"></text></g></svg></svg>