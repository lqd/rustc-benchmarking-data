<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (431,504 samples, 0.15%)</title><rect x="7.4867%" y="245" width="0.1520%" height="15" fill="rgb(227,0,7)"/><text x="7.7367%" y="255.50"></text></g><g><title>param_env (395,595 samples, 0.14%)</title><rect x="8.5915%" y="213" width="0.1394%" height="15" fill="rgb(217,0,24)"/><text x="8.8415%" y="223.50"></text></g><g><title>item_attrs (303,474 samples, 0.11%)</title><rect x="9.0219%" y="181" width="0.1069%" height="15" fill="rgb(221,193,54)"/><text x="9.2719%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (291,104 samples, 0.10%)</title><rect x="9.0262%" y="165" width="0.1026%" height="15" fill="rgb(248,212,6)"/><text x="9.2762%" y="175.50"></text></g><g><title>codegen_fn_attrs (439,124 samples, 0.15%)</title><rect x="8.9802%" y="197" width="0.1547%" height="15" fill="rgb(208,68,35)"/><text x="9.2302%" y="207.50"></text></g><g><title>adt_drop_tys (667,537 samples, 0.24%)</title><rect x="10.6744%" y="165" width="0.2352%" height="15" fill="rgb(232,128,0)"/><text x="10.9244%" y="175.50"></text></g><g><title>is_copy_raw (1,705,277 samples, 0.60%)</title><rect x="10.9102%" y="165" width="0.6009%" height="15" fill="rgb(207,160,47)"/><text x="11.1602%" y="175.50"></text></g><g><title>evaluate_obligation (1,409,715 samples, 0.50%)</title><rect x="11.0144%" y="149" width="0.4967%" height="15" fill="rgb(228,23,34)"/><text x="11.2644%" y="159.50"></text></g><g><title>needs_drop_raw (2,680,977 samples, 0.94%)</title><rect x="10.5811%" y="181" width="0.9446%" height="15" fill="rgb(218,30,26)"/><text x="10.8311%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (983,532 samples, 0.35%)</title><rect x="11.6691%" y="165" width="0.3465%" height="15" fill="rgb(220,122,19)"/><text x="11.9191%" y="175.50"></text></g><g><title>specialization_graph_of (1,012,111 samples, 0.36%)</title><rect x="12.0619%" y="165" width="0.3566%" height="15" fill="rgb(250,228,42)"/><text x="12.3119%" y="175.50"></text></g><g><title>impl_trait_ref (377,645 samples, 0.13%)</title><rect x="12.2855%" y="149" width="0.1331%" height="15" fill="rgb(240,193,28)"/><text x="12.5355%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (289,295 samples, 0.10%)</title><rect x="12.3166%" y="133" width="0.1019%" height="15" fill="rgb(216,20,37)"/><text x="12.5666%" y="143.50"></text></g><g><title>resolve_instance (2,660,148 samples, 0.94%)</title><rect x="11.5257%" y="181" width="0.9373%" height="15" fill="rgb(206,188,39)"/><text x="11.7757%" y="191.50"></text></g><g><title>thir_body (1,559,448 samples, 0.55%)</title><rect x="12.4801%" y="181" width="0.5495%" height="15" fill="rgb(217,207,13)"/><text x="12.7301%" y="191.50"></text></g><g><title>mir_const (13,783,369 samples, 4.86%)</title><rect x="8.1874%" y="229" width="4.8566%" height="15" fill="rgb(231,73,38)"/><text x="8.4374%" y="239.50">mir_co..</text></g><g><title>unsafety_check_result (12,240,775 samples, 4.31%)</title><rect x="8.7309%" y="213" width="4.3130%" height="15" fill="rgb(225,20,46)"/><text x="8.9809%" y="223.50">unsaf..</text></g><g><title>mir_built (11,094,274 samples, 3.91%)</title><rect x="9.1349%" y="197" width="3.9091%" height="15" fill="rgb(210,31,41)"/><text x="9.3849%" y="207.50">mir_..</text></g><g><title>mir_promoted (15,094,862 samples, 5.32%)</title><rect x="7.7473%" y="245" width="5.3187%" height="15" fill="rgb(221,200,47)"/><text x="7.9973%" y="255.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (1,126,280 samples, 0.40%)</title><rect x="13.0659%" y="245" width="0.3968%" height="15" fill="rgb(226,26,5)"/><text x="13.3159%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (821,588 samples, 0.29%)</title><rect x="13.4628%" y="245" width="0.2895%" height="15" fill="rgb(249,33,26)"/><text x="13.7128%" y="255.50"></text></g><g><title>normalize_projection_ty (544,686 samples, 0.19%)</title><rect x="13.5603%" y="229" width="0.1919%" height="15" fill="rgb(235,183,28)"/><text x="13.8103%" y="239.50"></text></g><g><title>type_op_normalize_ty (421,763 samples, 0.15%)</title><rect x="13.7823%" y="245" width="0.1486%" height="15" fill="rgb(221,5,38)"/><text x="14.0323%" y="255.50"></text></g><g><title>normalize_projection_ty (290,803 samples, 0.10%)</title><rect x="13.8284%" y="229" width="0.1025%" height="15" fill="rgb(247,18,42)"/><text x="14.0784%" y="239.50"></text></g><g><title>type_op_prove_predicate (4,581,144 samples, 1.61%)</title><rect x="13.9309%" y="245" width="1.6142%" height="15" fill="rgb(241,131,45)"/><text x="14.1809%" y="255.50"></text></g><g><title>MIR_borrow_checking (42,940,715 samples, 15.13%)</title><rect x="0.4181%" y="277" width="15.1301%" height="15" fill="rgb(249,31,29)"/><text x="0.6681%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,752,853 samples, 15.06%)</title><rect x="0.4842%" y="261" width="15.0639%" height="15" fill="rgb(225,111,53)"/><text x="0.7342%" y="271.50">mir_borrowck</text></g><g><title>hir_module_items (319,924 samples, 0.11%)</title><rect x="15.5696%" y="277" width="0.1127%" height="15" fill="rgb(238,160,17)"/><text x="15.8196%" y="287.50"></text></g><g><title>should_inherit_track_caller (339,445 samples, 0.12%)</title><rect x="15.8984%" y="229" width="0.1196%" height="15" fill="rgb(214,148,48)"/><text x="16.1484%" y="239.50"></text></g><g><title>codegen_fn_attrs (613,359 samples, 0.22%)</title><rect x="15.8096%" y="245" width="0.2161%" height="15" fill="rgb(232,36,49)"/><text x="16.0596%" y="255.50"></text></g><g><title>check_mod_attrs (945,751 samples, 0.33%)</title><rect x="15.6925%" y="261" width="0.3332%" height="15" fill="rgb(209,103,24)"/><text x="15.9425%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (661,226 samples, 0.23%)</title><rect x="16.1398%" y="261" width="0.2330%" height="15" fill="rgb(229,88,8)"/><text x="16.3898%" y="271.50"></text></g><g><title>misc_checking_1 (2,065,133 samples, 0.73%)</title><rect x="15.6825%" y="277" width="0.7276%" height="15" fill="rgb(213,181,19)"/><text x="15.9325%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (900,750 samples, 0.32%)</title><rect x="16.4108%" y="261" width="0.3174%" height="15" fill="rgb(254,191,54)"/><text x="16.6608%" y="271.50"></text></g><g><title>check_mod_liveness (740,428 samples, 0.26%)</title><rect x="16.4673%" y="245" width="0.2609%" height="15" fill="rgb(241,83,37)"/><text x="16.7173%" y="255.50"></text></g><g><title>misc_checking_2 (1,882,250 samples, 0.66%)</title><rect x="16.4101%" y="277" width="0.6632%" height="15" fill="rgb(233,36,39)"/><text x="16.6601%" y="287.50"></text></g><g><title>match_checking (979,530 samples, 0.35%)</title><rect x="16.7282%" y="261" width="0.3451%" height="15" fill="rgb(226,3,54)"/><text x="16.9782%" y="271.50"></text></g><g><title>check_match (927,790 samples, 0.33%)</title><rect x="16.7465%" y="245" width="0.3269%" height="15" fill="rgb(245,192,40)"/><text x="16.9965%" y="255.50"></text></g><g><title>check_private_in_public (441,435 samples, 0.16%)</title><rect x="17.0773%" y="261" width="0.1555%" height="15" fill="rgb(238,167,29)"/><text x="17.3273%" y="271.50"></text></g><g><title>death_checking (901,010 samples, 0.32%)</title><rect x="17.2328%" y="261" width="0.3175%" height="15" fill="rgb(232,182,51)"/><text x="17.4828%" y="271.50"></text></g><g><title>param_env (679,890 samples, 0.24%)</title><rect x="17.9995%" y="229" width="0.2396%" height="15" fill="rgb(231,60,39)"/><text x="18.2495%" y="239.50"></text></g><g><title>crate_lints (4,147,176 samples, 1.46%)</title><rect x="17.5509%" y="245" width="1.4613%" height="15" fill="rgb(208,69,12)"/><text x="17.8009%" y="255.50"></text></g><g><title>type_of (1,901,472 samples, 0.67%)</title><rect x="18.3422%" y="229" width="0.6700%" height="15" fill="rgb(235,93,37)"/><text x="18.5922%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (1,280,529 samples, 0.45%)</title><rect x="18.5610%" y="213" width="0.4512%" height="15" fill="rgb(213,116,39)"/><text x="18.8110%" y="223.50"></text></g><g><title>layout_of (304,593 samples, 0.11%)</title><rect x="19.3017%" y="149" width="0.1073%" height="15" fill="rgb(222,207,29)"/><text x="19.5517%" y="159.50"></text></g><g><title>layout_of (354,693 samples, 0.12%)</title><rect x="19.2886%" y="181" width="0.1250%" height="15" fill="rgb(206,96,30)"/><text x="19.5386%" y="191.50"></text></g><g><title>layout_of (342,643 samples, 0.12%)</title><rect x="19.2928%" y="165" width="0.1207%" height="15" fill="rgb(218,138,4)"/><text x="19.5428%" y="175.50"></text></g><g><title>layout_of (427,185 samples, 0.15%)</title><rect x="19.2867%" y="197" width="0.1505%" height="15" fill="rgb(250,191,14)"/><text x="19.5367%" y="207.50"></text></g><g><title>lint_checking (5,355,909 samples, 1.89%)</title><rect x="17.5503%" y="261" width="1.8872%" height="15" fill="rgb(239,60,40)"/><text x="17.8003%" y="271.50">l..</text></g><g><title>module_lints (1,206,873 samples, 0.43%)</title><rect x="19.0122%" y="245" width="0.4252%" height="15" fill="rgb(206,27,48)"/><text x="19.2622%" y="255.50"></text></g><g><title>lint_mod (1,196,013 samples, 0.42%)</title><rect x="19.0160%" y="229" width="0.4214%" height="15" fill="rgb(225,35,8)"/><text x="19.2660%" y="239.50"></text></g><g><title>layout_of (438,925 samples, 0.15%)</title><rect x="19.2828%" y="213" width="0.1547%" height="15" fill="rgb(250,213,24)"/><text x="19.5328%" y="223.50"></text></g><g><title>privacy_access_levels (630,267 samples, 0.22%)</title><rect x="19.4374%" y="261" width="0.2221%" height="15" fill="rgb(247,123,22)"/><text x="19.6874%" y="271.50"></text></g><g><title>privacy_checking_modules (1,965,092 samples, 0.69%)</title><rect x="19.6595%" y="261" width="0.6924%" height="15" fill="rgb(231,138,38)"/><text x="19.9095%" y="271.50"></text></g><g><title>check_mod_privacy (1,957,792 samples, 0.69%)</title><rect x="19.6621%" y="245" width="0.6898%" height="15" fill="rgb(231,145,46)"/><text x="19.9121%" y="255.50"></text></g><g><title>misc_checking_3 (9,321,543 samples, 3.28%)</title><rect x="17.0734%" y="277" width="3.2844%" height="15" fill="rgb(251,118,11)"/><text x="17.3234%" y="287.50">mis..</text></g><g><title>impl_parent (4,378,377 samples, 1.54%)</title><rect x="22.9313%" y="213" width="1.5427%" height="15" fill="rgb(217,147,25)"/><text x="23.1813%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,497,317 samples, 0.88%)</title><rect x="23.5941%" y="197" width="0.8799%" height="15" fill="rgb(247,81,37)"/><text x="23.8441%" y="207.50"></text></g><g><title>impl_trait_ref (9,570,089 samples, 3.37%)</title><rect x="24.4740%" y="213" width="3.3720%" height="15" fill="rgb(209,12,38)"/><text x="24.7240%" y="223.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,499,806 samples, 2.64%)</title><rect x="25.2035%" y="197" width="2.6426%" height="15" fill="rgb(227,1,9)"/><text x="25.4535%" y="207.50">me..</text></g><g><title>trait_impls_of (2,078,722 samples, 0.73%)</title><rect x="27.8630%" y="213" width="0.7324%" height="15" fill="rgb(248,47,43)"/><text x="28.1130%" y="223.50"></text></g><g><title>implementations_of_trait (776,038 samples, 0.27%)</title><rect x="28.3220%" y="197" width="0.2734%" height="15" fill="rgb(221,10,30)"/><text x="28.5720%" y="207.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (461,046 samples, 0.16%)</title><rect x="28.4330%" y="181" width="0.1624%" height="15" fill="rgb(210,229,1)"/><text x="28.6830%" y="191.50"></text></g><g><title>coherent_trait (23,211,046 samples, 8.18%)</title><rect x="20.4175%" y="245" width="8.1784%" height="15" fill="rgb(222,148,37)"/><text x="20.6675%" y="255.50">coherent_tr..</text></g><g><title>specialization_graph_of (23,173,664 samples, 8.17%)</title><rect x="20.4307%" y="229" width="8.1652%" height="15" fill="rgb(234,67,33)"/><text x="20.6807%" y="239.50">specializat..</text></g><g><title>coherence_checking (23,350,008 samples, 8.23%)</title><rect x="20.4041%" y="261" width="8.2274%" height="15" fill="rgb(247,98,35)"/><text x="20.6541%" y="271.50">coherence_c..</text></g><g><title>associated_item (317,955 samples, 0.11%)</title><rect x="38.9040%" y="197" width="0.1120%" height="15" fill="rgb(247,138,52)"/><text x="39.1540%" y="207.50"></text></g><g><title>associated_items (485,550 samples, 0.17%)</title><rect x="38.8548%" y="213" width="0.1711%" height="15" fill="rgb(213,79,30)"/><text x="39.1048%" y="223.50"></text></g><g><title>adt_dtorck_constraint (456,307 samples, 0.16%)</title><rect x="39.3559%" y="197" width="0.1608%" height="15" fill="rgb(246,177,23)"/><text x="39.6059%" y="207.50"></text></g><g><title>dropck_outlives (1,432,388 samples, 0.50%)</title><rect x="39.0600%" y="213" width="0.5047%" height="15" fill="rgb(230,62,27)"/><text x="39.3100%" y="223.50"></text></g><g><title>predicates_of (292,705 samples, 0.10%)</title><rect x="40.4366%" y="197" width="0.1031%" height="15" fill="rgb(216,154,8)"/><text x="40.6866%" y="207.50"></text></g><g><title>trait_impls_of (842,410 samples, 0.30%)</title><rect x="40.5526%" y="197" width="0.2968%" height="15" fill="rgb(244,35,45)"/><text x="40.8026%" y="207.50"></text></g><g><title>implementations_of_trait (538,876 samples, 0.19%)</title><rect x="40.6595%" y="181" width="0.1899%" height="15" fill="rgb(251,115,12)"/><text x="40.9095%" y="191.50"></text></g><g><title>evaluate_obligation (3,683,788 samples, 1.30%)</title><rect x="39.5647%" y="213" width="1.2980%" height="15" fill="rgb(240,54,50)"/><text x="39.8147%" y="223.50"></text></g><g><title>method_autoderef_steps (1,138,901 samples, 0.40%)</title><rect x="41.1114%" y="213" width="0.4013%" height="15" fill="rgb(233,84,52)"/><text x="41.3614%" y="223.50"></text></g><g><title>evaluate_obligation (537,926 samples, 0.19%)</title><rect x="41.3231%" y="197" width="0.1895%" height="15" fill="rgb(207,117,47)"/><text x="41.5731%" y="207.50"></text></g><g><title>predicates_of (357,885 samples, 0.13%)</title><rect x="41.5708%" y="213" width="0.1261%" height="15" fill="rgb(249,43,39)"/><text x="41.8208%" y="223.50"></text></g><g><title>dropck_outlives (372,244 samples, 0.13%)</title><rect x="44.6780%" y="197" width="0.1312%" height="15" fill="rgb(209,38,44)"/><text x="44.9280%" y="207.50"></text></g><g><title>evaluate_obligation (1,001,393 samples, 0.35%)</title><rect x="44.8092%" y="197" width="0.3528%" height="15" fill="rgb(236,212,23)"/><text x="45.0592%" y="207.50"></text></g><g><title>method_autoderef_steps (426,374 samples, 0.15%)</title><rect x="45.3117%" y="197" width="0.1502%" height="15" fill="rgb(242,79,21)"/><text x="45.5617%" y="207.50"></text></g><g><title>typeck (10,720,268 samples, 3.78%)</title><rect x="41.7583%" y="213" width="3.7773%" height="15" fill="rgb(211,96,35)"/><text x="42.0083%" y="223.50">type..</text></g><g><title>item_bodies_checking (47,972,431 samples, 16.90%)</title><rect x="28.6561%" y="261" width="16.9031%" height="15" fill="rgb(253,215,40)"/><text x="28.9061%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,968,641 samples, 16.90%)</title><rect x="28.6574%" y="245" width="16.9017%" height="15" fill="rgb(211,81,21)"/><text x="28.9074%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (47,836,541 samples, 16.86%)</title><rect x="28.7040%" y="229" width="16.8552%" height="15" fill="rgb(208,190,38)"/><text x="28.9540%" y="239.50">typeck</text></g><g><title>explicit_item_bounds (345,101 samples, 0.12%)</title><rect x="47.2413%" y="229" width="0.1216%" height="15" fill="rgb(235,213,38)"/><text x="47.4913%" y="239.50"></text></g><g><title>mir_promoted (426,575 samples, 0.15%)</title><rect x="48.9159%" y="181" width="0.1503%" height="15" fill="rgb(237,122,38)"/><text x="49.1659%" y="191.50"></text></g><g><title>type_op_prove_predicate (305,047 samples, 0.11%)</title><rect x="49.1785%" y="181" width="0.1075%" height="15" fill="rgb(244,218,35)"/><text x="49.4285%" y="191.50"></text></g><g><title>mir_borrowck (3,411,158 samples, 1.20%)</title><rect x="48.0850%" y="197" width="1.2019%" height="15" fill="rgb(240,68,47)"/><text x="48.3350%" y="207.50"></text></g><g><title>coherent_trait (658,838 samples, 0.23%)</title><rect x="52.7237%" y="53" width="0.2321%" height="15" fill="rgb(210,16,53)"/><text x="52.9737%" y="63.50"></text></g><g><title>specialization_graph_of (655,848 samples, 0.23%)</title><rect x="52.7248%" y="37" width="0.2311%" height="15" fill="rgb(235,124,12)"/><text x="52.9748%" y="47.50"></text></g><g><title>adt_destructor (726,198 samples, 0.26%)</title><rect x="52.7083%" y="85" width="0.2559%" height="15" fill="rgb(224,169,11)"/><text x="52.9583%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (709,848 samples, 0.25%)</title><rect x="52.7141%" y="69" width="0.2501%" height="15" fill="rgb(250,166,2)"/><text x="52.9641%" y="79.50"></text></g><g><title>adt_def (358,335 samples, 0.13%)</title><rect x="53.1151%" y="53" width="0.1263%" height="15" fill="rgb(242,216,29)"/><text x="53.3651%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (353,394 samples, 0.12%)</title><rect x="53.1168%" y="37" width="0.1245%" height="15" fill="rgb(230,116,27)"/><text x="53.3668%" y="47.50"></text></g><g><title>adt_dtorck_constraint (412,904 samples, 0.15%)</title><rect x="53.2529%" y="53" width="0.1455%" height="15" fill="rgb(228,99,48)"/><text x="53.5029%" y="63.50"></text></g><g><title>adt_dtorck_constraint (948,501 samples, 0.33%)</title><rect x="53.0889%" y="69" width="0.3342%" height="15" fill="rgb(253,11,6)"/><text x="53.3389%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,379,605 samples, 0.49%)</title><rect x="52.9642%" y="85" width="0.4861%" height="15" fill="rgb(247,143,39)"/><text x="53.2142%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,541,288 samples, 0.90%)</title><rect x="52.5923%" y="101" width="0.8954%" height="15" fill="rgb(236,97,10)"/><text x="52.8423%" y="111.50"></text></g><g><title>dropck_outlives (3,011,392 samples, 1.06%)</title><rect x="52.4363%" y="117" width="1.0611%" height="15" fill="rgb(233,208,19)"/><text x="52.6863%" y="127.50"></text></g><g><title>evaluate_obligation (1,752,220 samples, 0.62%)</title><rect x="53.4974%" y="117" width="0.6174%" height="15" fill="rgb(216,164,2)"/><text x="53.7474%" y="127.50"></text></g><g><title>trait_impls_of (610,457 samples, 0.22%)</title><rect x="53.8997%" y="101" width="0.2151%" height="15" fill="rgb(220,129,5)"/><text x="54.1497%" y="111.50"></text></g><g><title>is_copy_raw (620,705 samples, 0.22%)</title><rect x="54.2242%" y="117" width="0.2187%" height="15" fill="rgb(242,17,10)"/><text x="54.4742%" y="127.50"></text></g><g><title>evaluate_obligation (561,834 samples, 0.20%)</title><rect x="54.2449%" y="101" width="0.1980%" height="15" fill="rgb(242,107,0)"/><text x="54.4949%" y="111.50"></text></g><g><title>predicates_of (306,472 samples, 0.11%)</title><rect x="54.5734%" y="117" width="0.1080%" height="15" fill="rgb(251,28,31)"/><text x="54.8234%" y="127.50"></text></g><g><title>mir_built (15,192,078 samples, 5.35%)</title><rect x="49.4384%" y="149" width="5.3529%" height="15" fill="rgb(233,223,10)"/><text x="49.6884%" y="159.50">mir_bui..</text></g><g><title>typeck (14,435,750 samples, 5.09%)</title><rect x="49.7049%" y="133" width="5.0864%" height="15" fill="rgb(215,21,27)"/><text x="49.9549%" y="143.50">typeck</text></g><g><title>needs_drop_raw (294,414 samples, 0.10%)</title><rect x="55.0260%" y="117" width="0.1037%" height="15" fill="rgb(232,23,21)"/><text x="55.2760%" y="127.50"></text></g><g><title>mir_built (978,151 samples, 0.34%)</title><rect x="54.8473%" y="133" width="0.3447%" height="15" fill="rgb(244,5,23)"/><text x="55.0973%" y="143.50"></text></g><g><title>mir_const (16,674,384 samples, 5.88%)</title><rect x="49.3307%" y="181" width="5.8752%" height="15" fill="rgb(226,81,46)"/><text x="49.5807%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (16,440,313 samples, 5.79%)</title><rect x="49.4132%" y="165" width="5.7927%" height="15" fill="rgb(247,70,30)"/><text x="49.6632%" y="175.50">unsafet..</text></g><g><title>unsafety_check_result (1,176,703 samples, 0.41%)</title><rect x="54.7913%" y="149" width="0.4146%" height="15" fill="rgb(212,68,19)"/><text x="55.0413%" y="159.50"></text></g><g><title>mir_promoted (16,811,864 samples, 5.92%)</title><rect x="49.2869%" y="197" width="5.9237%" height="15" fill="rgb(240,187,13)"/><text x="49.5369%" y="207.50">mir_prom..</text></g><g><title>item_types_checking (28,037,130 samples, 9.88%)</title><rect x="45.5592%" y="261" width="9.8789%" height="15" fill="rgb(223,113,26)"/><text x="45.8092%" y="271.50">item_types_che..</text></g><g><title>check_mod_item_types (28,024,699 samples, 9.87%)</title><rect x="45.5635%" y="245" width="9.8745%" height="15" fill="rgb(206,192,2)"/><text x="45.8135%" y="255.50">check_mod_item..</text></g><g><title>type_of (22,671,121 samples, 7.99%)</title><rect x="47.4499%" y="229" width="7.9882%" height="15" fill="rgb(241,108,4)"/><text x="47.6999%" y="239.50">type_of</text></g><g><title>mir_borrowck (22,604,619 samples, 7.96%)</title><rect x="47.4733%" y="213" width="7.9647%" height="15" fill="rgb(247,173,49)"/><text x="47.7233%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (381,435 samples, 0.13%)</title><rect x="55.3036%" y="197" width="0.1344%" height="15" fill="rgb(224,114,35)"/><text x="55.5536%" y="207.50"></text></g><g><title>fn_sig (641,477 samples, 0.23%)</title><rect x="55.6146%" y="229" width="0.2260%" height="15" fill="rgb(245,159,27)"/><text x="55.8646%" y="239.50"></text></g><g><title>generics_of (418,528 samples, 0.15%)</title><rect x="55.8406%" y="229" width="0.1475%" height="15" fill="rgb(245,172,44)"/><text x="56.0906%" y="239.50"></text></g><g><title>late_bound_vars_map (670,837 samples, 0.24%)</title><rect x="56.2179%" y="181" width="0.2364%" height="15" fill="rgb(236,23,11)"/><text x="56.4679%" y="191.50"></text></g><g><title>resolve_lifetimes (645,847 samples, 0.23%)</title><rect x="56.2267%" y="165" width="0.2276%" height="15" fill="rgb(205,117,38)"/><text x="56.4767%" y="175.50"></text></g><g><title>explicit_predicates_of (988,333 samples, 0.35%)</title><rect x="56.1147%" y="197" width="0.3482%" height="15" fill="rgb(237,72,25)"/><text x="56.3647%" y="207.50"></text></g><g><title>predicates_of (2,035,046 samples, 0.72%)</title><rect x="56.0162%" y="229" width="0.7170%" height="15" fill="rgb(244,70,9)"/><text x="56.2662%" y="239.50"></text></g><g><title>predicates_defined_on (1,929,223 samples, 0.68%)</title><rect x="56.0535%" y="213" width="0.6798%" height="15" fill="rgb(217,125,39)"/><text x="56.3035%" y="223.50"></text></g><g><title>inferred_outlives_of (767,119 samples, 0.27%)</title><rect x="56.4630%" y="197" width="0.2703%" height="15" fill="rgb(235,36,10)"/><text x="56.7130%" y="207.50"></text></g><g><title>inferred_outlives_crate (726,558 samples, 0.26%)</title><rect x="56.4773%" y="181" width="0.2560%" height="15" fill="rgb(251,123,47)"/><text x="56.7273%" y="191.50"></text></g><g><title>type_of (438,664 samples, 0.15%)</title><rect x="56.5787%" y="165" width="0.1546%" height="15" fill="rgb(221,13,13)"/><text x="56.8287%" y="175.50"></text></g><g><title>type_of (305,962 samples, 0.11%)</title><rect x="56.6255%" y="149" width="0.1078%" height="15" fill="rgb(238,131,9)"/><text x="56.8755%" y="159.50"></text></g><g><title>type_collecting (3,992,185 samples, 1.41%)</title><rect x="55.4406%" y="261" width="1.4066%" height="15" fill="rgb(211,50,8)"/><text x="55.6906%" y="271.50"></text></g><g><title>collect_mod_item_types (3,977,705 samples, 1.40%)</title><rect x="55.4457%" y="245" width="1.4015%" height="15" fill="rgb(245,182,24)"/><text x="55.6957%" y="255.50"></text></g><g><title>adt_sized_constraint (288,443 samples, 0.10%)</title><rect x="58.9968%" y="149" width="0.1016%" height="15" fill="rgb(242,14,37)"/><text x="59.2468%" y="159.50"></text></g><g><title>adt_sized_constraint (376,274 samples, 0.13%)</title><rect x="58.9668%" y="165" width="0.1326%" height="15" fill="rgb(246,228,12)"/><text x="59.2168%" y="175.50"></text></g><g><title>adt_sized_constraint (462,656 samples, 0.16%)</title><rect x="58.9410%" y="181" width="0.1630%" height="15" fill="rgb(213,55,15)"/><text x="59.1910%" y="191.50"></text></g><g><title>adt_sized_constraint (544,256 samples, 0.19%)</title><rect x="58.9157%" y="197" width="0.1918%" height="15" fill="rgb(209,9,3)"/><text x="59.1657%" y="207.50"></text></g><g><title>adt_sized_constraint (644,107 samples, 0.23%)</title><rect x="58.8822%" y="213" width="0.2270%" height="15" fill="rgb(230,59,30)"/><text x="59.1322%" y="223.50"></text></g><g><title>evaluate_obligation (1,643,074 samples, 0.58%)</title><rect x="58.5406%" y="229" width="0.5789%" height="15" fill="rgb(209,121,21)"/><text x="58.7906%" y="239.50"></text></g><g><title>implied_outlives_bounds (515,417 samples, 0.18%)</title><rect x="59.1387%" y="229" width="0.1816%" height="15" fill="rgb(220,109,13)"/><text x="59.3887%" y="239.50"></text></g><g><title>param_env (837,772 samples, 0.30%)</title><rect x="59.3203%" y="229" width="0.2952%" height="15" fill="rgb(232,18,1)"/><text x="59.5703%" y="239.50"></text></g><g><title>region_scope_tree (600,734 samples, 0.21%)</title><rect x="59.6437%" y="229" width="0.2117%" height="15" fill="rgb(215,41,42)"/><text x="59.8937%" y="239.50"></text></g><g><title>check_impl_item_well_formed (8,225,557 samples, 2.90%)</title><rect x="57.0003%" y="245" width="2.8983%" height="15" fill="rgb(224,123,36)"/><text x="57.2503%" y="255.50">ch..</text></g><g><title>evaluate_obligation (1,182,175 samples, 0.42%)</title><rect x="61.0259%" y="229" width="0.4165%" height="15" fill="rgb(240,125,3)"/><text x="61.2759%" y="239.50"></text></g><g><title>evaluate_obligation (362,904 samples, 0.13%)</title><rect x="61.5390%" y="213" width="0.1279%" height="15" fill="rgb(205,98,50)"/><text x="61.7890%" y="223.50"></text></g><g><title>object_safety_violations (569,536 samples, 0.20%)</title><rect x="61.5195%" y="229" width="0.2007%" height="15" fill="rgb(205,185,37)"/><text x="61.7695%" y="239.50"></text></g><g><title>param_env (637,869 samples, 0.22%)</title><rect x="61.7202%" y="229" width="0.2248%" height="15" fill="rgb(238,207,15)"/><text x="61.9702%" y="239.50"></text></g><g><title>check_item_well_formed (6,351,623 samples, 2.24%)</title><rect x="59.8986%" y="245" width="2.2380%" height="15" fill="rgb(213,199,42)"/><text x="60.1486%" y="255.50">c..</text></g><g><title>analysis (176,075,058 samples, 62.04%)</title><rect x="0.2557%" y="293" width="62.0399%" height="15" fill="rgb(235,201,11)"/><text x="0.5057%" y="303.50">analysis</text></g><g><title>type_check_crate (119,023,548 samples, 41.94%)</title><rect x="20.3578%" y="277" width="41.9379%" height="15" fill="rgb(207,46,11)"/><text x="20.6078%" y="287.50">type_check_crate</text></g><g><title>wf_checking (15,455,441 samples, 5.45%)</title><rect x="56.8500%" y="261" width="5.4457%" height="15" fill="rgb(241,35,35)"/><text x="57.1000%" y="271.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (451,455 samples, 0.16%)</title><rect x="62.1366%" y="245" width="0.1591%" height="15" fill="rgb(243,32,47)"/><text x="62.3866%" y="255.50"></text></g><g><title>codegen_crate (718,778 samples, 0.25%)</title><rect x="62.2996%" y="293" width="0.2533%" height="15" fill="rgb(247,202,23)"/><text x="62.5496%" y="303.50"></text></g><g><title>metadata_register_crate (45,520,713 samples, 16.04%)</title><rect x="74.6943%" y="245" width="16.0392%" height="15" fill="rgb(219,102,11)"/><text x="74.9443%" y="255.50">metadata_register_crate</text></g><g><title>metadata_register_crate (42,574,204 samples, 15.00%)</title><rect x="75.7325%" y="229" width="15.0010%" height="15" fill="rgb(243,110,44)"/><text x="75.9825%" y="239.50">metadata_register_crate</text></g><g><title>metadata_register_crate (30,549,960 samples, 10.76%)</title><rect x="79.9693%" y="213" width="10.7643%" height="15" fill="rgb(222,74,54)"/><text x="80.2193%" y="223.50">metadata_registe..</text></g><g><title>metadata_register_crate (4,112,716 samples, 1.45%)</title><rect x="89.2844%" y="197" width="1.4491%" height="15" fill="rgb(216,99,12)"/><text x="89.5344%" y="207.50"></text></g><g><title>macro_expand_crate (79,877,073 samples, 28.14%)</title><rect x="62.7601%" y="277" width="28.1446%" height="15" fill="rgb(226,22,26)"/><text x="63.0101%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (79,862,183 samples, 28.14%)</title><rect x="62.7653%" y="261" width="28.1394%" height="15" fill="rgb(217,163,10)"/><text x="63.0153%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (485,895 samples, 0.17%)</title><rect x="90.7335%" y="245" width="0.1712%" height="15" fill="rgb(213,25,53)"/><text x="90.9835%" y="255.50"></text></g><g><title>late_resolve_crate (2,595,678 samples, 0.91%)</title><rect x="91.0954%" y="261" width="0.9146%" height="15" fill="rgb(252,105,26)"/><text x="91.3454%" y="271.50"></text></g><g><title>configure_and_expand (83,805,767 samples, 29.53%)</title><rect x="62.5529%" y="293" width="29.5289%" height="15" fill="rgb(220,39,43)"/><text x="62.8029%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (3,191,055 samples, 1.12%)</title><rect x="90.9574%" y="277" width="1.1244%" height="15" fill="rgb(229,68,48)"/><text x="91.2074%" y="287.50"></text></g><g><title>early_lint_checks (534,706 samples, 0.19%)</title><rect x="92.1910%" y="293" width="0.1884%" height="15" fill="rgb(252,8,32)"/><text x="92.4410%" y="303.50"></text></g><g><title>free_global_ctxt (5,579,962 samples, 1.97%)</title><rect x="92.3794%" y="293" width="1.9661%" height="15" fill="rgb(223,20,43)"/><text x="92.6294%" y="303.50">f..</text></g><g><title>layout_of (293,763 samples, 0.10%)</title><rect x="96.0134%" y="165" width="0.1035%" height="15" fill="rgb(229,81,49)"/><text x="96.2634%" y="175.50"></text></g><g><title>layout_of (397,895 samples, 0.14%)</title><rect x="95.9847%" y="181" width="0.1402%" height="15" fill="rgb(236,28,36)"/><text x="96.2347%" y="191.50"></text></g><g><title>layout_of (451,306 samples, 0.16%)</title><rect x="95.9735%" y="197" width="0.1590%" height="15" fill="rgb(249,185,26)"/><text x="96.2235%" y="207.50"></text></g><g><title>layout_of (540,396 samples, 0.19%)</title><rect x="95.9557%" y="213" width="0.1904%" height="15" fill="rgb(249,174,33)"/><text x="96.2057%" y="223.50"></text></g><g><title>layout_of (674,867 samples, 0.24%)</title><rect x="95.9140%" y="261" width="0.2378%" height="15" fill="rgb(233,201,37)"/><text x="96.1640%" y="271.50"></text></g><g><title>layout_of (632,877 samples, 0.22%)</title><rect x="95.9288%" y="245" width="0.2230%" height="15" fill="rgb(221,78,26)"/><text x="96.1788%" y="255.50"></text></g><g><title>layout_of (599,477 samples, 0.21%)</title><rect x="95.9405%" y="229" width="0.2112%" height="15" fill="rgb(250,127,30)"/><text x="96.1905%" y="239.50"></text></g><g><title>is_copy_raw (356,983 samples, 0.13%)</title><rect x="96.8989%" y="229" width="0.1258%" height="15" fill="rgb(230,49,44)"/><text x="97.1489%" y="239.50"></text></g><g><title>evaluate_obligation (286,003 samples, 0.10%)</title><rect x="96.9239%" y="213" width="0.1008%" height="15" fill="rgb(229,67,23)"/><text x="97.1739%" y="223.50"></text></g><g><title>needs_drop_raw (466,585 samples, 0.16%)</title><rect x="96.8604%" y="245" width="0.1644%" height="15" fill="rgb(249,83,47)"/><text x="97.1104%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,654,680 samples, 0.94%)</title><rect x="96.1517%" y="261" width="0.9354%" height="15" fill="rgb(215,43,3)"/><text x="96.4017%" y="271.50"></text></g><g><title>optimized_mir (5,133,577 samples, 1.81%)</title><rect x="95.2809%" y="277" width="1.8088%" height="15" fill="rgb(238,154,13)"/><text x="95.5309%" y="287.50">o..</text></g><g><title>generate_crate_metadata (7,922,628 samples, 2.79%)</title><rect x="94.3455%" y="293" width="2.7915%" height="15" fill="rgb(219,56,2)"/><text x="94.5955%" y="303.50">ge..</text></g><g><title>hir_lowering (4,694,013 samples, 1.65%)</title><rect x="97.1371%" y="293" width="1.6539%" height="15" fill="rgb(233,0,4)"/><text x="97.3871%" y="303.50"></text></g><g><title>parse_crate (1,174,563 samples, 0.41%)</title><rect x="98.8176%" y="293" width="0.4139%" height="15" fill="rgb(235,30,7)"/><text x="99.0676%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,377,255 samples, 0.49%)</title><rect x="99.3216%" y="293" width="0.4853%" height="15" fill="rgb(250,79,13)"/><text x="99.5716%" y="303.50"></text></g><g><title>all (283,809,161 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (283,809,161 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (447,345 samples, 0.16%)</title><rect x="99.8424%" y="293" width="0.1576%" height="15" fill="rgb(235,168,5)"/><text x="100.0924%" y="303.50"></text></g></svg></svg>