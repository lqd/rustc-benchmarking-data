<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (69,811 samples, 0.16%)</title><rect x="11.3271%" y="149" width="0.1555%" height="15" fill="rgb(227,0,7)"/><text x="11.5771%" y="159.50"></text></g><g><title>param_env (76,631 samples, 0.17%)</title><rect x="13.1763%" y="117" width="0.1707%" height="15" fill="rgb(217,0,24)"/><text x="13.4263%" y="127.50"></text></g><g><title>item_attrs (49,471 samples, 0.11%)</title><rect x="14.0418%" y="85" width="0.1102%" height="15" fill="rgb(221,193,54)"/><text x="14.2918%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (47,251 samples, 0.11%)</title><rect x="14.0467%" y="69" width="0.1053%" height="15" fill="rgb(248,212,6)"/><text x="14.2967%" y="79.50"></text></g><g><title>codegen_fn_attrs (81,501 samples, 0.18%)</title><rect x="13.9810%" y="101" width="0.1816%" height="15" fill="rgb(208,68,35)"/><text x="14.2310%" y="111.50"></text></g><g><title>adt_drop_tys (76,210 samples, 0.17%)</title><rect x="16.8327%" y="69" width="0.1698%" height="15" fill="rgb(232,128,0)"/><text x="17.0827%" y="79.50"></text></g><g><title>needs_drop_raw (271,531 samples, 0.60%)</title><rect x="16.7795%" y="85" width="0.6049%" height="15" fill="rgb(207,160,47)"/><text x="17.0295%" y="95.50"></text></g><g><title>is_copy_raw (171,441 samples, 0.38%)</title><rect x="17.0024%" y="69" width="0.3819%" height="15" fill="rgb(228,23,34)"/><text x="17.2524%" y="79.50"></text></g><g><title>evaluate_obligation (134,071 samples, 0.30%)</title><rect x="17.0857%" y="53" width="0.2987%" height="15" fill="rgb(218,30,26)"/><text x="17.3357%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (109,391 samples, 0.24%)</title><rect x="17.4782%" y="69" width="0.2437%" height="15" fill="rgb(220,122,19)"/><text x="17.7282%" y="79.50"></text></g><g><title>impl_parent (73,550 samples, 0.16%)</title><rect x="17.9847%" y="53" width="0.1638%" height="15" fill="rgb(250,228,42)"/><text x="18.2347%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (46,950 samples, 0.10%)</title><rect x="18.0440%" y="37" width="0.1046%" height="15" fill="rgb(240,193,28)"/><text x="18.2940%" y="47.50"></text></g><g><title>specialization_graph_of (390,224 samples, 0.87%)</title><rect x="17.7314%" y="69" width="0.8693%" height="15" fill="rgb(216,20,37)"/><text x="17.9814%" y="79.50"></text></g><g><title>impl_trait_ref (202,943 samples, 0.45%)</title><rect x="18.1486%" y="53" width="0.4521%" height="15" fill="rgb(206,188,39)"/><text x="18.3986%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (179,743 samples, 0.40%)</title><rect x="18.2003%" y="37" width="0.4004%" height="15" fill="rgb(217,207,13)"/><text x="18.4503%" y="47.50"></text></g><g><title>resolve_instance (554,855 samples, 1.24%)</title><rect x="17.3861%" y="85" width="1.2361%" height="15" fill="rgb(231,73,38)"/><text x="17.6361%" y="95.50"></text></g><g><title>thir_body (446,194 samples, 0.99%)</title><rect x="18.6513%" y="85" width="0.9940%" height="15" fill="rgb(225,20,46)"/><text x="18.9013%" y="95.50"></text></g><g><title>mir_const (3,298,273 samples, 7.35%)</title><rect x="12.3158%" y="133" width="7.3476%" height="15" fill="rgb(210,31,41)"/><text x="12.5658%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (2,835,357 samples, 6.32%)</title><rect x="13.3470%" y="117" width="6.3163%" height="15" fill="rgb(221,200,47)"/><text x="13.5970%" y="127.50">unsafety..</text></g><g><title>mir_built (2,469,254 samples, 5.50%)</title><rect x="14.1626%" y="101" width="5.5008%" height="15" fill="rgb(226,26,5)"/><text x="14.4126%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (3,668,251 samples, 8.17%)</title><rect x="11.5335%" y="149" width="8.1718%" height="15" fill="rgb(249,33,26)"/><text x="11.7835%" y="159.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (270,102 samples, 0.60%)</title><rect x="19.7814%" y="149" width="0.6017%" height="15" fill="rgb(235,183,28)"/><text x="20.0314%" y="159.50"></text></g><g><title>normalize_projection_ty (174,791 samples, 0.39%)</title><rect x="19.9938%" y="133" width="0.3894%" height="15" fill="rgb(221,5,38)"/><text x="20.2438%" y="143.50"></text></g><g><title>type_op_normalize_predicate (87,601 samples, 0.20%)</title><rect x="20.3831%" y="149" width="0.1951%" height="15" fill="rgb(247,18,42)"/><text x="20.6331%" y="159.50"></text></g><g><title>type_op_prove_predicate (437,443 samples, 0.97%)</title><rect x="20.5783%" y="149" width="0.9745%" height="15" fill="rgb(241,131,45)"/><text x="20.8283%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,152,601 samples, 20.39%)</title><rect x="1.1688%" y="181" width="20.3893%" height="15" fill="rgb(249,31,29)"/><text x="1.4188%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,108,061 samples, 20.29%)</title><rect x="1.2680%" y="165" width="20.2900%" height="15" fill="rgb(225,111,53)"/><text x="1.5180%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (109,271 samples, 0.24%)</title><rect x="21.5780%" y="181" width="0.2434%" height="15" fill="rgb(238,160,17)"/><text x="21.8280%" y="191.50"></text></g><g><title>get_lang_items (46,890 samples, 0.10%)</title><rect x="22.2205%" y="133" width="0.1045%" height="15" fill="rgb(214,148,48)"/><text x="22.4705%" y="143.50"></text></g><g><title>should_inherit_track_caller (119,392 samples, 0.27%)</title><rect x="22.3250%" y="133" width="0.2660%" height="15" fill="rgb(232,36,49)"/><text x="22.5750%" y="143.50"></text></g><g><title>codegen_fn_attrs (235,493 samples, 0.52%)</title><rect x="22.1104%" y="149" width="0.5246%" height="15" fill="rgb(209,103,24)"/><text x="22.3604%" y="159.50"></text></g><g><title>check_mod_attrs (348,444 samples, 0.78%)</title><rect x="21.8592%" y="165" width="0.7762%" height="15" fill="rgb(229,88,8)"/><text x="22.1092%" y="175.50"></text></g><g><title>check_mod_const_bodies (49,571 samples, 0.11%)</title><rect x="22.6354%" y="165" width="0.1104%" height="15" fill="rgb(213,181,19)"/><text x="22.8854%" y="175.50"></text></g><g><title>lookup_deprecation_entry (61,050 samples, 0.14%)</title><rect x="22.9474%" y="149" width="0.1360%" height="15" fill="rgb(254,191,54)"/><text x="23.1974%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (148,212 samples, 0.33%)</title><rect x="22.8183%" y="165" width="0.3302%" height="15" fill="rgb(241,83,37)"/><text x="23.0683%" y="175.50"></text></g><g><title>misc_checking_1 (629,707 samples, 1.40%)</title><rect x="21.8223%" y="181" width="1.4028%" height="15" fill="rgb(233,36,39)"/><text x="22.0723%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (172,101 samples, 0.38%)</title><rect x="23.2282%" y="165" width="0.3834%" height="15" fill="rgb(226,3,54)"/><text x="23.4782%" y="175.50"></text></g><g><title>check_mod_liveness (132,811 samples, 0.30%)</title><rect x="23.3157%" y="149" width="0.2959%" height="15" fill="rgb(245,192,40)"/><text x="23.5657%" y="159.50"></text></g><g><title>misc_checking_2 (439,004 samples, 0.98%)</title><rect x="23.2251%" y="181" width="0.9780%" height="15" fill="rgb(238,167,29)"/><text x="23.4751%" y="191.50"></text></g><g><title>match_checking (265,513 samples, 0.59%)</title><rect x="23.6116%" y="165" width="0.5915%" height="15" fill="rgb(232,182,51)"/><text x="23.8616%" y="175.50"></text></g><g><title>check_match (252,703 samples, 0.56%)</title><rect x="23.6401%" y="149" width="0.5629%" height="15" fill="rgb(231,60,39)"/><text x="23.8901%" y="159.50"></text></g><g><title>check_private_in_public (84,051 samples, 0.19%)</title><rect x="24.2247%" y="165" width="0.1872%" height="15" fill="rgb(208,69,12)"/><text x="24.4747%" y="175.50"></text></g><g><title>death_checking (204,302 samples, 0.46%)</title><rect x="24.4120%" y="165" width="0.4551%" height="15" fill="rgb(235,93,37)"/><text x="24.6620%" y="175.50"></text></g><g><title>item_attrs (60,081 samples, 0.13%)</title><rect x="24.7332%" y="149" width="0.1338%" height="15" fill="rgb(213,116,39)"/><text x="24.9832%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (59,321 samples, 0.13%)</title><rect x="24.7349%" y="133" width="0.1321%" height="15" fill="rgb(222,207,29)"/><text x="24.9849%" y="143.50"></text></g><g><title>param_env (54,811 samples, 0.12%)</title><rect x="26.0175%" y="133" width="0.1221%" height="15" fill="rgb(206,96,30)"/><text x="26.2675%" y="143.50"></text></g><g><title>crate_lints (894,349 samples, 1.99%)</title><rect x="24.8707%" y="149" width="1.9923%" height="15" fill="rgb(218,138,4)"/><text x="25.1207%" y="159.50">c..</text></g><g><title>type_of (323,124 samples, 0.72%)</title><rect x="26.1432%" y="133" width="0.7198%" height="15" fill="rgb(250,191,14)"/><text x="26.3932%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (235,814 samples, 0.53%)</title><rect x="26.3377%" y="117" width="0.5253%" height="15" fill="rgb(239,60,40)"/><text x="26.5877%" y="127.50"></text></g><g><title>lint_checking (1,038,221 samples, 2.31%)</title><rect x="24.8671%" y="165" width="2.3128%" height="15" fill="rgb(206,27,48)"/><text x="25.1171%" y="175.50">l..</text></g><g><title>module_lints (142,262 samples, 0.32%)</title><rect x="26.8630%" y="149" width="0.3169%" height="15" fill="rgb(225,35,8)"/><text x="27.1130%" y="159.50"></text></g><g><title>lint_mod (140,382 samples, 0.31%)</title><rect x="26.8672%" y="133" width="0.3127%" height="15" fill="rgb(250,213,24)"/><text x="27.1172%" y="143.50"></text></g><g><title>privacy_access_levels (112,291 samples, 0.25%)</title><rect x="27.1799%" y="165" width="0.2502%" height="15" fill="rgb(247,123,22)"/><text x="27.4299%" y="175.50"></text></g><g><title>privacy_checking_modules (305,193 samples, 0.68%)</title><rect x="27.4301%" y="165" width="0.6799%" height="15" fill="rgb(231,138,38)"/><text x="27.6801%" y="175.50"></text></g><g><title>check_mod_privacy (303,623 samples, 0.68%)</title><rect x="27.4336%" y="149" width="0.6764%" height="15" fill="rgb(231,145,46)"/><text x="27.6836%" y="159.50"></text></g><g><title>misc_checking_3 (1,770,599 samples, 3.94%)</title><rect x="24.2031%" y="181" width="3.9444%" height="15" fill="rgb(251,118,11)"/><text x="24.4531%" y="191.50">misc..</text></g><g><title>adt_destructor (55,940 samples, 0.12%)</title><rect x="28.3245%" y="133" width="0.1246%" height="15" fill="rgb(217,147,25)"/><text x="28.5745%" y="143.50"></text></g><g><title>coherent_trait (48,340 samples, 0.11%)</title><rect x="28.3414%" y="117" width="0.1077%" height="15" fill="rgb(247,81,37)"/><text x="28.5914%" y="127.50"></text></g><g><title>specialization_graph_of (47,370 samples, 0.11%)</title><rect x="28.3436%" y="101" width="0.1055%" height="15" fill="rgb(209,12,38)"/><text x="28.5936%" y="111.50"></text></g><g><title>param_env (111,681 samples, 0.25%)</title><rect x="28.4491%" y="133" width="0.2488%" height="15" fill="rgb(227,1,9)"/><text x="28.6991%" y="143.50"></text></g><g><title>impl_parent (509,163 samples, 1.13%)</title><rect x="30.5144%" y="117" width="1.1343%" height="15" fill="rgb(248,47,43)"/><text x="30.7644%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (319,723 samples, 0.71%)</title><rect x="30.9364%" y="101" width="0.7122%" height="15" fill="rgb(221,10,30)"/><text x="31.1864%" y="111.50"></text></g><g><title>impl_trait_ref (1,157,735 samples, 2.58%)</title><rect x="31.6487%" y="117" width="2.5791%" height="15" fill="rgb(210,229,1)"/><text x="31.8987%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (965,651 samples, 2.15%)</title><rect x="32.0766%" y="101" width="2.1512%" height="15" fill="rgb(222,148,37)"/><text x="32.3266%" y="111.50">m..</text></g><g><title>coherent_trait (2,841,321 samples, 6.33%)</title><rect x="28.2576%" y="149" width="6.3296%" height="15" fill="rgb(234,67,33)"/><text x="28.5076%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (2,643,669 samples, 5.89%)</title><rect x="28.6979%" y="133" width="5.8893%" height="15" fill="rgb(247,98,35)"/><text x="28.9479%" y="143.50">special..</text></g><g><title>trait_impls_of (160,302 samples, 0.36%)</title><rect x="34.2301%" y="117" width="0.3571%" height="15" fill="rgb(247,138,52)"/><text x="34.4801%" y="127.50"></text></g><g><title>coherence_checking (2,896,403 samples, 6.45%)</title><rect x="28.2164%" y="165" width="6.4523%" height="15" fill="rgb(213,79,30)"/><text x="28.4664%" y="175.50">coherenc..</text></g><g><title>adt_sized_constraint (70,401 samples, 0.16%)</title><rect x="50.0770%" y="117" width="0.1568%" height="15" fill="rgb(246,177,23)"/><text x="50.3270%" y="127.50"></text></g><g><title>associated_item (104,382 samples, 0.23%)</title><rect x="50.3560%" y="101" width="0.2325%" height="15" fill="rgb(230,62,27)"/><text x="50.6060%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (75,231 samples, 0.17%)</title><rect x="50.4209%" y="85" width="0.1676%" height="15" fill="rgb(216,154,8)"/><text x="50.6709%" y="95.50"></text></g><g><title>associated_items (169,383 samples, 0.38%)</title><rect x="50.2483%" y="117" width="0.3773%" height="15" fill="rgb(244,35,45)"/><text x="50.4983%" y="127.50"></text></g><g><title>dropck_outlives (158,540 samples, 0.35%)</title><rect x="50.6739%" y="117" width="0.3532%" height="15" fill="rgb(251,115,12)"/><text x="50.9239%" y="127.50"></text></g><g><title>adt_dtorck_constraint (77,540 samples, 0.17%)</title><rect x="50.8544%" y="101" width="0.1727%" height="15" fill="rgb(240,54,50)"/><text x="51.1044%" y="111.50"></text></g><g><title>adt_def (69,430 samples, 0.15%)</title><rect x="52.1109%" y="85" width="0.1547%" height="15" fill="rgb(233,84,52)"/><text x="52.3609%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (68,060 samples, 0.15%)</title><rect x="52.1140%" y="69" width="0.1516%" height="15" fill="rgb(207,117,47)"/><text x="52.3640%" y="79.50"></text></g><g><title>item_attrs (51,670 samples, 0.12%)</title><rect x="52.1505%" y="53" width="0.1151%" height="15" fill="rgb(249,43,39)"/><text x="52.4005%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (49,770 samples, 0.11%)</title><rect x="52.1547%" y="37" width="0.1109%" height="15" fill="rgb(209,38,44)"/><text x="52.4047%" y="47.50"></text></g><g><title>adt_sized_constraint (78,930 samples, 0.18%)</title><rect x="52.0913%" y="101" width="0.1758%" height="15" fill="rgb(236,212,23)"/><text x="52.3413%" y="111.50"></text></g><g><title>impl_trait_ref (52,540 samples, 0.12%)</title><rect x="52.3999%" y="101" width="0.1170%" height="15" fill="rgb(242,79,21)"/><text x="52.6499%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (46,620 samples, 0.10%)</title><rect x="52.4131%" y="85" width="0.1039%" height="15" fill="rgb(211,96,35)"/><text x="52.6631%" y="95.50"></text></g><g><title>predicates_of (90,883 samples, 0.20%)</title><rect x="52.5407%" y="101" width="0.2025%" height="15" fill="rgb(253,215,40)"/><text x="52.7907%" y="111.50"></text></g><g><title>predicates_defined_on (63,592 samples, 0.14%)</title><rect x="52.6015%" y="85" width="0.1417%" height="15" fill="rgb(211,81,21)"/><text x="52.8515%" y="95.50"></text></g><g><title>specializes (57,421 samples, 0.13%)</title><rect x="52.7432%" y="101" width="0.1279%" height="15" fill="rgb(208,190,38)"/><text x="52.9932%" y="111.50"></text></g><g><title>trait_impls_of (173,512 samples, 0.39%)</title><rect x="52.8837%" y="101" width="0.3865%" height="15" fill="rgb(235,213,38)"/><text x="53.1337%" y="111.50"></text></g><g><title>implementations_of_trait (64,080 samples, 0.14%)</title><rect x="53.1275%" y="85" width="0.1428%" height="15" fill="rgb(237,122,38)"/><text x="53.3775%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (50,660 samples, 0.11%)</title><rect x="53.1574%" y="69" width="0.1129%" height="15" fill="rgb(244,218,35)"/><text x="53.4074%" y="79.50"></text></g><g><title>evaluate_obligation (1,007,770 samples, 2.25%)</title><rect x="51.0271%" y="117" width="2.2450%" height="15" fill="rgb(240,68,47)"/><text x="51.2771%" y="127.50">e..</text></g><g><title>generics_of (61,031 samples, 0.14%)</title><rect x="53.4290%" y="117" width="0.1360%" height="15" fill="rgb(210,16,53)"/><text x="53.6790%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (46,531 samples, 0.10%)</title><rect x="53.4613%" y="101" width="0.1037%" height="15" fill="rgb(235,124,12)"/><text x="53.7113%" y="111.50"></text></g><g><title>associated_item (65,330 samples, 0.15%)</title><rect x="53.6490%" y="85" width="0.1455%" height="15" fill="rgb(224,169,11)"/><text x="53.8990%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (52,270 samples, 0.12%)</title><rect x="53.6781%" y="69" width="0.1164%" height="15" fill="rgb(250,166,2)"/><text x="53.9281%" y="79.50"></text></g><g><title>impl_item_implementor_ids (111,471 samples, 0.25%)</title><rect x="53.5650%" y="117" width="0.2483%" height="15" fill="rgb(242,216,29)"/><text x="53.8150%" y="127.50"></text></g><g><title>associated_items (97,641 samples, 0.22%)</title><rect x="53.5958%" y="101" width="0.2175%" height="15" fill="rgb(230,116,27)"/><text x="53.8458%" y="111.50"></text></g><g><title>impl_trait_ref (69,181 samples, 0.15%)</title><rect x="53.8236%" y="117" width="0.1541%" height="15" fill="rgb(228,99,48)"/><text x="54.0736%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (62,471 samples, 0.14%)</title><rect x="53.8386%" y="101" width="0.1392%" height="15" fill="rgb(253,11,6)"/><text x="54.0886%" y="111.50"></text></g><g><title>item_attrs (45,450 samples, 0.10%)</title><rect x="54.0007%" y="117" width="0.1012%" height="15" fill="rgb(247,143,39)"/><text x="54.2507%" y="127.50"></text></g><g><title>explicit_predicates_of (100,031 samples, 0.22%)</title><rect x="54.4880%" y="85" width="0.2228%" height="15" fill="rgb(236,97,10)"/><text x="54.7380%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (88,451 samples, 0.20%)</title><rect x="54.5138%" y="69" width="0.1970%" height="15" fill="rgb(233,208,19)"/><text x="54.7638%" y="79.50"></text></g><g><title>predicates_of (216,132 samples, 0.48%)</title><rect x="54.2732%" y="117" width="0.4815%" height="15" fill="rgb(216,164,2)"/><text x="54.5232%" y="127.50"></text></g><g><title>predicates_defined_on (157,901 samples, 0.35%)</title><rect x="54.4029%" y="101" width="0.3518%" height="15" fill="rgb(220,129,5)"/><text x="54.6529%" y="111.50"></text></g><g><title>trait_impls_of (54,771 samples, 0.12%)</title><rect x="54.7692%" y="117" width="0.1220%" height="15" fill="rgb(242,17,10)"/><text x="55.0192%" y="127.50"></text></g><g><title>associated_item (104,821 samples, 0.23%)</title><rect x="60.4434%" y="85" width="0.2335%" height="15" fill="rgb(242,107,0)"/><text x="60.6934%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (80,951 samples, 0.18%)</title><rect x="60.4966%" y="69" width="0.1803%" height="15" fill="rgb(251,28,31)"/><text x="60.7466%" y="79.50"></text></g><g><title>associated_items (143,492 samples, 0.32%)</title><rect x="60.3645%" y="101" width="0.3197%" height="15" fill="rgb(233,223,10)"/><text x="60.6145%" y="111.50"></text></g><g><title>evaluate_obligation (113,110 samples, 0.25%)</title><rect x="60.7410%" y="101" width="0.2520%" height="15" fill="rgb(215,21,27)"/><text x="60.9910%" y="111.50"></text></g><g><title>typeck (2,905,502 samples, 6.47%)</title><rect x="54.9810%" y="117" width="6.4726%" height="15" fill="rgb(232,23,21)"/><text x="55.2310%" y="127.50">typeck</text></g><g><title>item_bodies_checking (12,026,643 samples, 26.79%)</title><rect x="34.7143%" y="165" width="26.7918%" height="15" fill="rgb(244,5,23)"/><text x="34.9643%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,024,403 samples, 26.79%)</title><rect x="34.7193%" y="149" width="26.7868%" height="15" fill="rgb(226,81,46)"/><text x="34.9693%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (11,993,542 samples, 26.72%)</title><rect x="34.7881%" y="133" width="26.7180%" height="15" fill="rgb(247,70,30)"/><text x="35.0381%" y="143.50">typeck</text></g><g><title>item_types_checking (623,146 samples, 1.39%)</title><rect x="61.5061%" y="165" width="1.3882%" height="15" fill="rgb(212,68,19)"/><text x="61.7561%" y="175.50"></text></g><g><title>check_mod_item_types (620,756 samples, 1.38%)</title><rect x="61.5114%" y="149" width="1.3829%" height="15" fill="rgb(240,187,13)"/><text x="61.7614%" y="159.50"></text></g><g><title>fn_sig (133,901 samples, 0.30%)</title><rect x="63.2154%" y="133" width="0.2983%" height="15" fill="rgb(223,113,26)"/><text x="63.4654%" y="143.50"></text></g><g><title>named_region_map (186,672 samples, 0.42%)</title><rect x="63.6790%" y="117" width="0.4158%" height="15" fill="rgb(206,192,2)"/><text x="63.9290%" y="127.50"></text></g><g><title>resolve_lifetimes (174,332 samples, 0.39%)</title><rect x="63.7065%" y="101" width="0.3884%" height="15" fill="rgb(241,108,4)"/><text x="63.9565%" y="111.50"></text></g><g><title>lint_levels (78,391 samples, 0.17%)</title><rect x="63.9202%" y="85" width="0.1746%" height="15" fill="rgb(247,173,49)"/><text x="64.1702%" y="95.50"></text></g><g><title>generics_of (276,752 samples, 0.62%)</title><rect x="63.5137%" y="133" width="0.6165%" height="15" fill="rgb(224,114,35)"/><text x="63.7637%" y="143.50"></text></g><g><title>late_bound_vars_map (88,640 samples, 0.20%)</title><rect x="64.5530%" y="85" width="0.1975%" height="15" fill="rgb(245,159,27)"/><text x="64.8030%" y="95.50"></text></g><g><title>resolve_lifetimes (83,670 samples, 0.19%)</title><rect x="64.5640%" y="69" width="0.1864%" height="15" fill="rgb(245,172,44)"/><text x="64.8140%" y="79.50"></text></g><g><title>explicit_predicates_of (217,931 samples, 0.49%)</title><rect x="64.3573%" y="101" width="0.4855%" height="15" fill="rgb(236,23,11)"/><text x="64.6073%" y="111.50"></text></g><g><title>predicates_of (321,033 samples, 0.72%)</title><rect x="64.1893%" y="133" width="0.7152%" height="15" fill="rgb(205,117,38)"/><text x="64.4393%" y="143.50"></text></g><g><title>predicates_defined_on (287,842 samples, 0.64%)</title><rect x="64.2632%" y="117" width="0.6412%" height="15" fill="rgb(237,72,25)"/><text x="64.5132%" y="127.50"></text></g><g><title>type_collecting (1,023,781 samples, 2.28%)</title><rect x="62.8974%" y="165" width="2.2807%" height="15" fill="rgb(244,70,9)"/><text x="63.1474%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,017,451 samples, 2.27%)</title><rect x="62.9115%" y="149" width="2.2666%" height="15" fill="rgb(217,125,39)"/><text x="63.1615%" y="159.50">c..</text></g><g><title>type_of (101,633 samples, 0.23%)</title><rect x="64.9517%" y="133" width="0.2264%" height="15" fill="rgb(235,36,10)"/><text x="65.2017%" y="143.50"></text></g><g><title>evaluate_obligation (176,892 samples, 0.39%)</title><rect x="67.2511%" y="133" width="0.3941%" height="15" fill="rgb(251,123,47)"/><text x="67.5011%" y="143.50"></text></g><g><title>implied_outlives_bounds (67,171 samples, 0.15%)</title><rect x="67.6451%" y="133" width="0.1496%" height="15" fill="rgb(221,13,13)"/><text x="67.8951%" y="143.50"></text></g><g><title>param_env (153,352 samples, 0.34%)</title><rect x="67.7948%" y="133" width="0.3416%" height="15" fill="rgb(238,131,9)"/><text x="68.0448%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,438,899 samples, 3.21%)</title><rect x="65.3765%" y="149" width="3.2054%" height="15" fill="rgb(211,50,8)"/><text x="65.6265%" y="159.50">che..</text></g><g><title>region_scope_tree (195,062 samples, 0.43%)</title><rect x="68.1474%" y="133" width="0.4345%" height="15" fill="rgb(245,182,24)"/><text x="68.3974%" y="143.50"></text></g><g><title>evaluate_obligation (190,621 samples, 0.42%)</title><rect x="70.3050%" y="133" width="0.4246%" height="15" fill="rgb(242,14,37)"/><text x="70.5550%" y="143.50"></text></g><g><title>param_env (190,461 samples, 0.42%)</title><rect x="70.8473%" y="133" width="0.4243%" height="15" fill="rgb(246,228,12)"/><text x="71.0973%" y="143.50"></text></g><g><title>predicates_of (46,181 samples, 0.10%)</title><rect x="71.2716%" y="133" width="0.1029%" height="15" fill="rgb(213,55,15)"/><text x="71.5216%" y="143.50"></text></g><g><title>check_item_well_formed (1,349,713 samples, 3.01%)</title><rect x="68.5819%" y="149" width="3.0068%" height="15" fill="rgb(209,9,3)"/><text x="68.8319%" y="159.50">che..</text></g><g><title>implied_outlives_bounds (80,500 samples, 0.18%)</title><rect x="71.9661%" y="133" width="0.1793%" height="15" fill="rgb(230,59,30)"/><text x="72.2161%" y="143.50"></text></g><g><title>analysis (32,060,354 samples, 71.42%)</title><rect x="0.8281%" y="197" width="71.4209%" height="15" fill="rgb(209,121,21)"/><text x="1.0781%" y="207.50">analysis</text></g><g><title>type_check_crate (19,796,889 samples, 44.10%)</title><rect x="28.1475%" y="181" width="44.1016%" height="15" fill="rgb(220,109,13)"/><text x="28.3975%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,171,965 samples, 7.07%)</title><rect x="65.1828%" y="165" width="7.0662%" height="15" fill="rgb(232,18,1)"/><text x="65.4328%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (296,433 samples, 0.66%)</title><rect x="71.5886%" y="149" width="0.6604%" height="15" fill="rgb(215,41,42)"/><text x="71.8386%" y="159.50"></text></g><g><title>codegen_crate (280,013 samples, 0.62%)</title><rect x="72.2638%" y="197" width="0.6238%" height="15" fill="rgb(224,123,36)"/><text x="72.5138%" y="207.50"></text></g><g><title>AST_validation (69,311 samples, 0.15%)</title><rect x="73.1778%" y="181" width="0.1544%" height="15" fill="rgb(240,125,3)"/><text x="73.4278%" y="191.50"></text></g><g><title>crate_injection (50,981 samples, 0.11%)</title><rect x="73.3960%" y="181" width="0.1136%" height="15" fill="rgb(205,98,50)"/><text x="73.6460%" y="191.50"></text></g><g><title>metadata_load_macro (96,502 samples, 0.21%)</title><rect x="83.8812%" y="149" width="0.2150%" height="15" fill="rgb(205,185,37)"/><text x="84.1312%" y="159.50"></text></g><g><title>macro_expand_crate (4,922,064 samples, 10.96%)</title><rect x="73.5096%" y="181" width="10.9649%" height="15" fill="rgb(238,207,15)"/><text x="73.7596%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (4,907,874 samples, 10.93%)</title><rect x="73.5412%" y="165" width="10.9333%" height="15" fill="rgb(213,199,42)"/><text x="73.7912%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (169,822 samples, 0.38%)</title><rect x="84.0961%" y="149" width="0.3783%" height="15" fill="rgb(235,201,11)"/><text x="84.3461%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (103,851 samples, 0.23%)</title><rect x="84.4802%" y="181" width="0.2313%" height="15" fill="rgb(207,46,11)"/><text x="84.7302%" y="191.50"></text></g><g><title>finalize_macro_resolutions (119,592 samples, 0.27%)</title><rect x="84.7789%" y="165" width="0.2664%" height="15" fill="rgb(241,35,35)"/><text x="85.0289%" y="175.50"></text></g><g><title>late_resolve_crate (741,048 samples, 1.65%)</title><rect x="85.0454%" y="165" width="1.6508%" height="15" fill="rgb(243,32,47)"/><text x="85.2954%" y="175.50"></text></g><g><title>configure_and_expand (6,251,459 samples, 13.93%)</title><rect x="72.8876%" y="197" width="13.9264%" height="15" fill="rgb(247,202,23)"/><text x="73.1376%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (943,750 samples, 2.10%)</title><rect x="84.7116%" y="181" width="2.1024%" height="15" fill="rgb(219,102,11)"/><text x="84.9616%" y="191.50">r..</text></g><g><title>drop_ast (72,151 samples, 0.16%)</title><rect x="86.8140%" y="197" width="0.1607%" height="15" fill="rgb(243,110,44)"/><text x="87.0640%" y="207.50"></text></g><g><title>early_lint_checks (168,682 samples, 0.38%)</title><rect x="87.0070%" y="197" width="0.3758%" height="15" fill="rgb(222,74,54)"/><text x="87.2570%" y="207.50"></text></g><g><title>free_global_ctxt (1,553,327 samples, 3.46%)</title><rect x="87.3828%" y="197" width="3.4603%" height="15" fill="rgb(216,99,12)"/><text x="87.6328%" y="207.50">fre..</text></g><g><title>crate_hash (64,571 samples, 0.14%)</title><rect x="91.7903%" y="181" width="0.1438%" height="15" fill="rgb(226,22,26)"/><text x="92.0403%" y="191.50"></text></g><g><title>generate_crate_metadata (563,937 samples, 1.26%)</title><rect x="90.8432%" y="197" width="1.2563%" height="15" fill="rgb(217,163,10)"/><text x="91.0932%" y="207.50"></text></g><g><title>hir_lowering (1,195,313 samples, 2.66%)</title><rect x="92.0994%" y="197" width="2.6628%" height="15" fill="rgb(213,25,53)"/><text x="92.3494%" y="207.50">hi..</text></g><g><title>parse_crate (1,346,975 samples, 3.00%)</title><rect x="94.8556%" y="197" width="3.0007%" height="15" fill="rgb(252,105,26)"/><text x="95.1056%" y="207.50">par..</text></g><g><title>prepare_outputs (153,121 samples, 0.34%)</title><rect x="97.8687%" y="197" width="0.3411%" height="15" fill="rgb(220,39,43)"/><text x="98.1187%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (455,535 samples, 1.01%)</title><rect x="98.2098%" y="197" width="1.0148%" height="15" fill="rgb(229,68,48)"/><text x="98.4598%" y="207.50"></text></g><g><title>setup_global_ctxt (77,121 samples, 0.17%)</title><rect x="99.2487%" y="197" width="0.1718%" height="15" fill="rgb(252,8,32)"/><text x="99.4987%" y="207.50"></text></g><g><title>all (44,889,316 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (44,889,316 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (260,133 samples, 0.58%)</title><rect x="99.4205%" y="197" width="0.5795%" height="15" fill="rgb(236,28,36)"/><text x="99.6705%" y="207.50"></text></g></svg></svg>