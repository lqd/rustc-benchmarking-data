<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (387,132 samples, 0.13%)</title><rect x="11.5599%" y="181" width="0.1332%" height="15" fill="rgb(227,0,7)"/><text x="11.8099%" y="191.50"></text></g><g><title>param_env (310,802 samples, 0.11%)</title><rect x="12.7360%" y="149" width="0.1069%" height="15" fill="rgb(217,0,24)"/><text x="12.9860%" y="159.50"></text></g><g><title>item_attrs (352,642 samples, 0.12%)</title><rect x="13.1594%" y="117" width="0.1213%" height="15" fill="rgb(221,193,54)"/><text x="13.4094%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (339,242 samples, 0.12%)</title><rect x="13.1640%" y="101" width="0.1167%" height="15" fill="rgb(248,212,6)"/><text x="13.4140%" y="111.50"></text></g><g><title>codegen_fn_attrs (514,226 samples, 0.18%)</title><rect x="13.1111%" y="133" width="0.1769%" height="15" fill="rgb(208,68,35)"/><text x="13.3611%" y="143.50"></text></g><g><title>adt_drop_tys (528,054 samples, 0.18%)</title><rect x="15.2701%" y="101" width="0.1816%" height="15" fill="rgb(232,128,0)"/><text x="15.5201%" y="111.50"></text></g><g><title>is_copy_raw (1,624,669 samples, 0.56%)</title><rect x="15.4517%" y="101" width="0.5588%" height="15" fill="rgb(207,160,47)"/><text x="15.7017%" y="111.50"></text></g><g><title>evaluate_obligation (1,293,616 samples, 0.44%)</title><rect x="15.5656%" y="85" width="0.4449%" height="15" fill="rgb(228,23,34)"/><text x="15.8156%" y="95.50"></text></g><g><title>needs_drop_raw (2,394,287 samples, 0.82%)</title><rect x="15.1886%" y="117" width="0.8235%" height="15" fill="rgb(218,30,26)"/><text x="15.4386%" y="127.50"></text></g><g><title>impl_parent (361,512 samples, 0.12%)</title><rect x="16.5382%" y="85" width="0.1243%" height="15" fill="rgb(220,122,19)"/><text x="16.7882%" y="95.50"></text></g><g><title>specialization_graph_of (2,014,242 samples, 0.69%)</title><rect x="16.2227%" y="101" width="0.6928%" height="15" fill="rgb(250,228,42)"/><text x="16.4727%" y="111.50"></text></g><g><title>impl_trait_ref (735,400 samples, 0.25%)</title><rect x="16.6626%" y="85" width="0.2529%" height="15" fill="rgb(240,193,28)"/><text x="16.9126%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (598,977 samples, 0.21%)</title><rect x="16.7095%" y="69" width="0.2060%" height="15" fill="rgb(216,20,37)"/><text x="16.9595%" y="79.50"></text></g><g><title>resolve_instance (2,786,406 samples, 0.96%)</title><rect x="16.0121%" y="117" width="0.9584%" height="15" fill="rgb(206,188,39)"/><text x="16.2621%" y="127.50"></text></g><g><title>thir_body (2,489,297 samples, 0.86%)</title><rect x="16.9781%" y="117" width="0.8562%" height="15" fill="rgb(217,207,13)"/><text x="17.2281%" y="127.50"></text></g><g><title>mir_const (16,089,197 samples, 5.53%)</title><rect x="12.3305%" y="165" width="5.5339%" height="15" fill="rgb(231,73,38)"/><text x="12.5805%" y="175.50">mir_con..</text></g><g><title>unsafety_check_result (14,599,374 samples, 5.02%)</title><rect x="12.8429%" y="149" width="5.0214%" height="15" fill="rgb(225,20,46)"/><text x="13.0929%" y="159.50">unsafe..</text></g><g><title>mir_built (13,305,538 samples, 4.58%)</title><rect x="13.2879%" y="133" width="4.5764%" height="15" fill="rgb(210,31,41)"/><text x="13.5379%" y="143.50">mir_b..</text></g><g><title>thir_body (334,226 samples, 0.11%)</title><rect x="18.5517%" y="101" width="0.1150%" height="15" fill="rgb(221,200,47)"/><text x="18.8017%" y="111.50"></text></g><g><title>mir_const (1,312,567 samples, 0.45%)</title><rect x="18.2172%" y="149" width="0.4515%" height="15" fill="rgb(226,26,5)"/><text x="18.4672%" y="159.50"></text></g><g><title>unsafety_check_result (1,106,735 samples, 0.38%)</title><rect x="18.2880%" y="133" width="0.3807%" height="15" fill="rgb(249,33,26)"/><text x="18.5380%" y="143.50"></text></g><g><title>mir_built (963,872 samples, 0.33%)</title><rect x="18.3371%" y="117" width="0.3315%" height="15" fill="rgb(235,183,28)"/><text x="18.5871%" y="127.50"></text></g><g><title>mir_const_qualif (2,420,936 samples, 0.83%)</title><rect x="17.8644%" y="165" width="0.8327%" height="15" fill="rgb(221,5,38)"/><text x="18.1144%" y="175.50"></text></g><g><title>mir_promoted (20,146,682 samples, 6.93%)</title><rect x="11.7685%" y="181" width="6.9294%" height="15" fill="rgb(247,18,42)"/><text x="12.0185%" y="191.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (1,217,593 samples, 0.42%)</title><rect x="18.6979%" y="181" width="0.4188%" height="15" fill="rgb(241,131,45)"/><text x="18.9479%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (532,027 samples, 0.18%)</title><rect x="19.1167%" y="181" width="0.1830%" height="15" fill="rgb(249,31,29)"/><text x="19.3667%" y="191.50"></text></g><g><title>type_op_normalize_ty (413,746 samples, 0.14%)</title><rect x="19.3436%" y="181" width="0.1423%" height="15" fill="rgb(225,111,53)"/><text x="19.5936%" y="191.50"></text></g><g><title>type_op_prove_predicate (5,249,926 samples, 1.81%)</title><rect x="19.4859%" y="181" width="1.8057%" height="15" fill="rgb(238,160,17)"/><text x="19.7359%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (60,331,550 samples, 20.75%)</title><rect x="0.5479%" y="213" width="20.7510%" height="15" fill="rgb(214,148,48)"/><text x="0.7979%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (60,178,237 samples, 20.70%)</title><rect x="0.6006%" y="197" width="20.6983%" height="15" fill="rgb(232,36,49)"/><text x="0.8506%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (730,238 samples, 0.25%)</title><rect x="21.2989%" y="213" width="0.2512%" height="15" fill="rgb(209,103,24)"/><text x="21.5489%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (642,146 samples, 0.22%)</title><rect x="21.3292%" y="197" width="0.2209%" height="15" fill="rgb(229,88,8)"/><text x="21.5792%" y="207.50"></text></g><g><title>hir_module_items (344,523 samples, 0.12%)</title><rect x="21.5500%" y="213" width="0.1185%" height="15" fill="rgb(213,181,19)"/><text x="21.8000%" y="223.50"></text></g><g><title>codegen_fn_attrs (368,724 samples, 0.13%)</title><rect x="21.8167%" y="181" width="0.1268%" height="15" fill="rgb(254,191,54)"/><text x="22.0667%" y="191.50"></text></g><g><title>should_inherit_track_caller (326,564 samples, 0.11%)</title><rect x="21.8312%" y="165" width="0.1123%" height="15" fill="rgb(241,83,37)"/><text x="22.0812%" y="175.50"></text></g><g><title>check_mod_attrs (769,199 samples, 0.26%)</title><rect x="21.6790%" y="197" width="0.2646%" height="15" fill="rgb(233,36,39)"/><text x="21.9290%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (655,299 samples, 0.23%)</title><rect x="22.0524%" y="197" width="0.2254%" height="15" fill="rgb(226,3,54)"/><text x="22.3024%" y="207.50"></text></g><g><title>misc_checking_1 (1,874,981 samples, 0.64%)</title><rect x="21.6687%" y="213" width="0.6449%" height="15" fill="rgb(245,192,40)"/><text x="21.9187%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (964,881 samples, 0.33%)</title><rect x="22.3144%" y="197" width="0.3319%" height="15" fill="rgb(238,167,29)"/><text x="22.5644%" y="207.50"></text></g><g><title>check_mod_liveness (774,459 samples, 0.27%)</title><rect x="22.3799%" y="181" width="0.2664%" height="15" fill="rgb(232,182,51)"/><text x="22.6299%" y="191.50"></text></g><g><title>misc_checking_2 (2,827,932 samples, 0.97%)</title><rect x="22.3136%" y="213" width="0.9727%" height="15" fill="rgb(231,60,39)"/><text x="22.5636%" y="223.50"></text></g><g><title>match_checking (1,860,871 samples, 0.64%)</title><rect x="22.6462%" y="197" width="0.6400%" height="15" fill="rgb(208,69,12)"/><text x="22.8962%" y="207.50"></text></g><g><title>check_match (1,816,770 samples, 0.62%)</title><rect x="22.6614%" y="181" width="0.6249%" height="15" fill="rgb(235,93,37)"/><text x="22.9114%" y="191.50"></text></g><g><title>check_private_in_public (450,495 samples, 0.15%)</title><rect x="23.2900%" y="197" width="0.1549%" height="15" fill="rgb(213,116,39)"/><text x="23.5400%" y="207.50"></text></g><g><title>death_checking (834,499 samples, 0.29%)</title><rect x="23.4450%" y="197" width="0.2870%" height="15" fill="rgb(222,207,29)"/><text x="23.6950%" y="207.50"></text></g><g><title>eval_to_const_value_raw (537,086 samples, 0.18%)</title><rect x="24.9630%" y="117" width="0.1847%" height="15" fill="rgb(206,96,30)"/><text x="25.2130%" y="127.50"></text></g><g><title>eval_to_const_value_raw (525,446 samples, 0.18%)</title><rect x="24.9670%" y="101" width="0.1807%" height="15" fill="rgb(218,138,4)"/><text x="25.2170%" y="111.50"></text></g><g><title>eval_to_allocation_raw (503,786 samples, 0.17%)</title><rect x="24.9744%" y="85" width="0.1733%" height="15" fill="rgb(250,191,14)"/><text x="25.2244%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (620,806 samples, 0.21%)</title><rect x="24.9412%" y="133" width="0.2135%" height="15" fill="rgb(239,60,40)"/><text x="25.1912%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,793,972 samples, 0.96%)</title><rect x="24.2358%" y="165" width="0.9610%" height="15" fill="rgb(206,27,48)"/><text x="24.4858%" y="175.50"></text></g><g><title>eval_to_allocation_raw (2,773,642 samples, 0.95%)</title><rect x="24.2428%" y="149" width="0.9540%" height="15" fill="rgb(225,35,8)"/><text x="24.4928%" y="159.50"></text></g><g><title>param_env (1,067,797 samples, 0.37%)</title><rect x="25.2594%" y="165" width="0.3673%" height="15" fill="rgb(250,213,24)"/><text x="25.5094%" y="175.50"></text></g><g><title>predicates_of (448,571 samples, 0.15%)</title><rect x="25.4724%" y="149" width="0.1543%" height="15" fill="rgb(247,123,22)"/><text x="25.7224%" y="159.50"></text></g><g><title>predicates_defined_on (362,791 samples, 0.12%)</title><rect x="25.5019%" y="133" width="0.1248%" height="15" fill="rgb(231,138,38)"/><text x="25.7519%" y="143.50"></text></g><g><title>crate_lints (6,928,387 samples, 2.38%)</title><rect x="23.7331%" y="181" width="2.3830%" height="15" fill="rgb(231,145,46)"/><text x="23.9831%" y="191.50">cr..</text></g><g><title>type_of (1,306,585 samples, 0.45%)</title><rect x="25.6667%" y="165" width="0.4494%" height="15" fill="rgb(251,118,11)"/><text x="25.9167%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (1,028,363 samples, 0.35%)</title><rect x="25.7624%" y="149" width="0.3537%" height="15" fill="rgb(217,147,25)"/><text x="26.0124%" y="159.50"></text></g><g><title>lint_checking (8,359,383 samples, 2.88%)</title><rect x="23.7320%" y="197" width="2.8752%" height="15" fill="rgb(247,81,37)"/><text x="23.9820%" y="207.50">li..</text></g><g><title>module_lints (1,427,966 samples, 0.49%)</title><rect x="26.1161%" y="181" width="0.4911%" height="15" fill="rgb(209,12,38)"/><text x="26.3661%" y="191.50"></text></g><g><title>lint_mod (1,419,886 samples, 0.49%)</title><rect x="26.1188%" y="165" width="0.4884%" height="15" fill="rgb(227,1,9)"/><text x="26.3688%" y="175.50"></text></g><g><title>privacy_access_levels (422,065 samples, 0.15%)</title><rect x="26.6072%" y="197" width="0.1452%" height="15" fill="rgb(248,47,43)"/><text x="26.8572%" y="207.50"></text></g><g><title>privacy_checking_modules (2,088,783 samples, 0.72%)</title><rect x="26.7524%" y="197" width="0.7184%" height="15" fill="rgb(221,10,30)"/><text x="27.0024%" y="207.50"></text></g><g><title>check_mod_privacy (2,083,333 samples, 0.72%)</title><rect x="26.7543%" y="181" width="0.7166%" height="15" fill="rgb(210,229,1)"/><text x="27.0043%" y="191.50"></text></g><g><title>misc_checking_3 (12,189,405 samples, 4.19%)</title><rect x="23.2863%" y="213" width="4.1925%" height="15" fill="rgb(222,148,37)"/><text x="23.5363%" y="223.50">misc_..</text></g><g><title>impl_parent (1,895,292 samples, 0.65%)</title><rect x="28.4457%" y="149" width="0.6519%" height="15" fill="rgb(234,67,33)"/><text x="28.6957%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,063,641 samples, 0.37%)</title><rect x="28.7317%" y="133" width="0.3658%" height="15" fill="rgb(247,98,35)"/><text x="28.9817%" y="143.50"></text></g><g><title>impl_trait_ref (4,332,143 samples, 1.49%)</title><rect x="29.0975%" y="149" width="1.4900%" height="15" fill="rgb(247,138,52)"/><text x="29.3475%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,731,877 samples, 1.28%)</title><rect x="29.3040%" y="133" width="1.2836%" height="15" fill="rgb(213,79,30)"/><text x="29.5540%" y="143.50"></text></g><g><title>coherent_trait (9,562,326 samples, 3.29%)</title><rect x="27.5343%" y="181" width="3.2890%" height="15" fill="rgb(246,177,23)"/><text x="27.7843%" y="191.50">coh..</text></g><g><title>specialization_graph_of (9,538,746 samples, 3.28%)</title><rect x="27.5424%" y="165" width="3.2808%" height="15" fill="rgb(230,62,27)"/><text x="27.7924%" y="175.50">spe..</text></g><g><title>trait_impls_of (640,026 samples, 0.22%)</title><rect x="30.6031%" y="149" width="0.2201%" height="15" fill="rgb(216,154,8)"/><text x="30.8531%" y="159.50"></text></g><g><title>coherence_checking (9,661,508 samples, 3.32%)</title><rect x="27.5276%" y="197" width="3.3231%" height="15" fill="rgb(244,35,45)"/><text x="27.7776%" y="207.50">coh..</text></g><g><title>associated_item (387,713 samples, 0.13%)</title><rect x="49.3974%" y="133" width="0.1334%" height="15" fill="rgb(251,115,12)"/><text x="49.6474%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (300,853 samples, 0.10%)</title><rect x="49.4273%" y="117" width="0.1035%" height="15" fill="rgb(240,54,50)"/><text x="49.6773%" y="127.50"></text></g><g><title>associated_items (614,585 samples, 0.21%)</title><rect x="49.3362%" y="149" width="0.2114%" height="15" fill="rgb(233,84,52)"/><text x="49.5862%" y="159.50"></text></g><g><title>adt_dtorck_constraint (344,083 samples, 0.12%)</title><rect x="50.1959%" y="117" width="0.1183%" height="15" fill="rgb(207,117,47)"/><text x="50.4459%" y="127.50"></text></g><g><title>adt_dtorck_constraint (964,074 samples, 0.33%)</title><rect x="50.0276%" y="133" width="0.3316%" height="15" fill="rgb(249,43,39)"/><text x="50.2776%" y="143.50"></text></g><g><title>dropck_outlives (2,334,938 samples, 0.80%)</title><rect x="49.5910%" y="149" width="0.8031%" height="15" fill="rgb(209,38,44)"/><text x="49.8410%" y="159.50"></text></g><g><title>evaluate_obligation (2,848,852 samples, 0.98%)</title><rect x="50.3941%" y="149" width="0.9799%" height="15" fill="rgb(236,212,23)"/><text x="50.6441%" y="159.50"></text></g><g><title>trait_impls_of (310,893 samples, 0.11%)</title><rect x="51.2670%" y="133" width="0.1069%" height="15" fill="rgb(242,79,21)"/><text x="51.5170%" y="143.50"></text></g><g><title>evaluate_obligation (594,237 samples, 0.20%)</title><rect x="52.0403%" y="133" width="0.2044%" height="15" fill="rgb(211,96,35)"/><text x="52.2903%" y="143.50"></text></g><g><title>method_autoderef_steps (1,450,949 samples, 0.50%)</title><rect x="51.7507%" y="149" width="0.4991%" height="15" fill="rgb(253,215,40)"/><text x="52.0007%" y="159.50"></text></g><g><title>predicates_of (789,015 samples, 0.27%)</title><rect x="52.3606%" y="149" width="0.2714%" height="15" fill="rgb(211,81,21)"/><text x="52.6106%" y="159.50"></text></g><g><title>predicates_defined_on (529,604 samples, 0.18%)</title><rect x="52.4498%" y="133" width="0.1822%" height="15" fill="rgb(208,190,38)"/><text x="52.6998%" y="143.50"></text></g><g><title>evaluate_obligation (392,745 samples, 0.14%)</title><rect x="53.0994%" y="133" width="0.1351%" height="15" fill="rgb(235,213,38)"/><text x="53.3494%" y="143.50"></text></g><g><title>typeck (1,596,678 samples, 0.55%)</title><rect x="52.7562%" y="149" width="0.5492%" height="15" fill="rgb(237,122,38)"/><text x="53.0062%" y="159.50"></text></g><g><title>item_bodies_checking (65,298,545 samples, 22.46%)</title><rect x="30.8670%" y="197" width="22.4594%" height="15" fill="rgb(244,218,35)"/><text x="31.1170%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (65,294,805 samples, 22.46%)</title><rect x="30.8683%" y="181" width="22.4581%" height="15" fill="rgb(240,68,47)"/><text x="31.1183%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (65,209,313 samples, 22.43%)</title><rect x="30.8977%" y="165" width="22.4287%" height="15" fill="rgb(210,16,53)"/><text x="31.1477%" y="175.50">typeck</text></g><g><title>adt_destructor (414,114 samples, 0.14%)</title><rect x="53.8516%" y="165" width="0.1424%" height="15" fill="rgb(235,124,12)"/><text x="54.1016%" y="175.50"></text></g><g><title>coherent_trait (403,404 samples, 0.14%)</title><rect x="53.8552%" y="149" width="0.1388%" height="15" fill="rgb(224,169,11)"/><text x="54.1052%" y="159.50"></text></g><g><title>specialization_graph_of (401,214 samples, 0.14%)</title><rect x="53.8560%" y="133" width="0.1380%" height="15" fill="rgb(250,166,2)"/><text x="54.1060%" y="143.50"></text></g><g><title>layout_of (353,474 samples, 0.12%)</title><rect x="54.0392%" y="133" width="0.1216%" height="15" fill="rgb(242,216,29)"/><text x="54.2892%" y="143.50"></text></g><g><title>layout_of (395,244 samples, 0.14%)</title><rect x="54.0296%" y="149" width="0.1359%" height="15" fill="rgb(230,116,27)"/><text x="54.2796%" y="159.50"></text></g><g><title>layout_of (404,594 samples, 0.14%)</title><rect x="54.0270%" y="165" width="0.1392%" height="15" fill="rgb(228,99,48)"/><text x="54.2770%" y="175.50"></text></g><g><title>adt_def (408,685 samples, 0.14%)</title><rect x="56.2157%" y="85" width="0.1406%" height="15" fill="rgb(253,11,6)"/><text x="56.4657%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (408,405 samples, 0.14%)</title><rect x="56.2158%" y="69" width="0.1405%" height="15" fill="rgb(247,143,39)"/><text x="56.4658%" y="79.50"></text></g><g><title>item_attrs (405,155 samples, 0.14%)</title><rect x="56.2169%" y="53" width="0.1394%" height="15" fill="rgb(236,97,10)"/><text x="56.4669%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (404,805 samples, 0.14%)</title><rect x="56.2170%" y="37" width="0.1392%" height="15" fill="rgb(233,208,19)"/><text x="56.4670%" y="47.50"></text></g><g><title>adt_dtorck_constraint (428,605 samples, 0.15%)</title><rect x="56.2128%" y="101" width="0.1474%" height="15" fill="rgb(216,164,2)"/><text x="56.4628%" y="111.50"></text></g><g><title>adt_dtorck_constraint (468,195 samples, 0.16%)</title><rect x="56.2019%" y="117" width="0.1610%" height="15" fill="rgb(220,129,5)"/><text x="56.4519%" y="127.50"></text></g><g><title>dropck_outlives (512,025 samples, 0.18%)</title><rect x="56.1875%" y="149" width="0.1761%" height="15" fill="rgb(242,17,10)"/><text x="56.4375%" y="159.50"></text></g><g><title>adt_dtorck_constraint (480,455 samples, 0.17%)</title><rect x="56.1984%" y="133" width="0.1653%" height="15" fill="rgb(242,107,0)"/><text x="56.4484%" y="143.50"></text></g><g><title>item_types_checking (9,254,712 samples, 3.18%)</title><rect x="53.3264%" y="197" width="3.1832%" height="15" fill="rgb(251,28,31)"/><text x="53.5764%" y="207.50">ite..</text></g><g><title>check_mod_item_types (9,246,392 samples, 3.18%)</title><rect x="53.3293%" y="181" width="3.1803%" height="15" fill="rgb(233,223,10)"/><text x="53.5793%" y="191.50">che..</text></g><g><title>typeck (6,766,485 samples, 2.33%)</title><rect x="54.1822%" y="165" width="2.3273%" height="15" fill="rgb(215,21,27)"/><text x="54.4322%" y="175.50">t..</text></g><g><title>named_region_map (541,917 samples, 0.19%)</title><rect x="56.8274%" y="149" width="0.1864%" height="15" fill="rgb(232,23,21)"/><text x="57.0774%" y="159.50"></text></g><g><title>resolve_lifetimes (529,897 samples, 0.18%)</title><rect x="56.8316%" y="133" width="0.1823%" height="15" fill="rgb(244,5,23)"/><text x="57.0816%" y="143.50"></text></g><g><title>lint_levels (407,045 samples, 0.14%)</title><rect x="56.8738%" y="117" width="0.1400%" height="15" fill="rgb(226,81,46)"/><text x="57.1238%" y="127.50"></text></g><g><title>generics_of (765,399 samples, 0.26%)</title><rect x="56.7577%" y="165" width="0.2633%" height="15" fill="rgb(247,70,30)"/><text x="57.0077%" y="175.50"></text></g><g><title>late_bound_vars_map (359,344 samples, 0.12%)</title><rect x="57.2422%" y="117" width="0.1236%" height="15" fill="rgb(212,68,19)"/><text x="57.4922%" y="127.50"></text></g><g><title>resolve_lifetimes (343,384 samples, 0.12%)</title><rect x="57.2477%" y="101" width="0.1181%" height="15" fill="rgb(240,187,13)"/><text x="57.4977%" y="111.50"></text></g><g><title>explicit_predicates_of (862,079 samples, 0.30%)</title><rect x="57.1069%" y="133" width="0.2965%" height="15" fill="rgb(223,113,26)"/><text x="57.3569%" y="143.50"></text></g><g><title>type_of (321,872 samples, 0.11%)</title><rect x="57.6528%" y="85" width="0.1107%" height="15" fill="rgb(206,192,2)"/><text x="57.9028%" y="95.50"></text></g><g><title>predicates_of (2,202,773 samples, 0.76%)</title><rect x="57.0373%" y="165" width="0.7576%" height="15" fill="rgb(241,108,4)"/><text x="57.2873%" y="175.50"></text></g><g><title>predicates_defined_on (2,124,323 samples, 0.73%)</title><rect x="57.0643%" y="149" width="0.7307%" height="15" fill="rgb(247,173,49)"/><text x="57.3143%" y="159.50"></text></g><g><title>inferred_outlives_of (1,138,343 samples, 0.39%)</title><rect x="57.4034%" y="133" width="0.3915%" height="15" fill="rgb(224,114,35)"/><text x="57.6534%" y="143.50"></text></g><g><title>inferred_outlives_crate (1,106,512 samples, 0.38%)</title><rect x="57.4144%" y="117" width="0.3806%" height="15" fill="rgb(245,159,27)"/><text x="57.6644%" y="127.50"></text></g><g><title>type_of (774,887 samples, 0.27%)</title><rect x="57.5285%" y="101" width="0.2665%" height="15" fill="rgb(245,172,44)"/><text x="57.7785%" y="111.50"></text></g><g><title>type_collecting (3,941,124 samples, 1.36%)</title><rect x="56.5138%" y="197" width="1.3555%" height="15" fill="rgb(236,23,11)"/><text x="56.7638%" y="207.50"></text></g><g><title>collect_mod_item_types (3,923,904 samples, 1.35%)</title><rect x="56.5197%" y="181" width="1.3496%" height="15" fill="rgb(205,117,38)"/><text x="56.7697%" y="191.50"></text></g><g><title>evaluate_obligation (950,870 samples, 0.33%)</title><rect x="59.0371%" y="165" width="0.3271%" height="15" fill="rgb(237,72,25)"/><text x="59.2871%" y="175.50"></text></g><g><title>implied_outlives_bounds (520,554 samples, 0.18%)</title><rect x="59.3748%" y="165" width="0.1790%" height="15" fill="rgb(244,70,9)"/><text x="59.6248%" y="175.50"></text></g><g><title>object_safety_violations (540,406 samples, 0.19%)</title><rect x="59.5538%" y="165" width="0.1859%" height="15" fill="rgb(217,125,39)"/><text x="59.8038%" y="175.50"></text></g><g><title>param_env (387,093 samples, 0.13%)</title><rect x="59.7397%" y="165" width="0.1331%" height="15" fill="rgb(235,36,10)"/><text x="59.9897%" y="175.50"></text></g><g><title>region_scope_tree (632,757 samples, 0.22%)</title><rect x="59.8813%" y="165" width="0.2176%" height="15" fill="rgb(251,123,47)"/><text x="60.1313%" y="175.50"></text></g><g><title>check_impl_item_well_formed (6,138,677 samples, 2.11%)</title><rect x="57.9891%" y="181" width="2.1114%" height="15" fill="rgb(221,13,13)"/><text x="58.2391%" y="191.50">c..</text></g><g><title>evaluate_obligation (451,535 samples, 0.16%)</title><rect x="61.3908%" y="165" width="0.1553%" height="15" fill="rgb(238,131,9)"/><text x="61.6408%" y="175.50"></text></g><g><title>param_env (630,956 samples, 0.22%)</title><rect x="61.6517%" y="165" width="0.2170%" height="15" fill="rgb(211,50,8)"/><text x="61.9017%" y="175.50"></text></g><g><title>analysis (179,426,213 samples, 61.71%)</title><rect x="0.3562%" y="229" width="61.7135%" height="15" fill="rgb(245,182,24)"/><text x="0.6062%" y="239.50">analysis</text></g><g><title>type_check_crate (100,569,787 samples, 34.59%)</title><rect x="27.4788%" y="213" width="34.5909%" height="15" fill="rgb(242,14,37)"/><text x="27.7288%" y="223.50">type_check_crate</text></g><g><title>wf_checking (12,206,195 samples, 4.20%)</title><rect x="57.8714%" y="197" width="4.1983%" height="15" fill="rgb(246,228,12)"/><text x="58.1214%" y="207.50">wf_ch..</text></g><g><title>check_item_well_formed (5,725,446 samples, 1.97%)</title><rect x="60.1004%" y="181" width="1.9693%" height="15" fill="rgb(213,55,15)"/><text x="60.3504%" y="191.50">c..</text></g><g><title>codegen_crate (452,615 samples, 0.16%)</title><rect x="62.0729%" y="229" width="0.1557%" height="15" fill="rgb(209,9,3)"/><text x="62.3229%" y="239.50"></text></g><g><title>AST_validation (311,844 samples, 0.11%)</title><rect x="62.3049%" y="213" width="0.1073%" height="15" fill="rgb(230,59,30)"/><text x="62.5549%" y="223.50"></text></g><g><title>metadata_load_macro (1,257,081 samples, 0.43%)</title><rect x="84.3985%" y="181" width="0.4324%" height="15" fill="rgb(209,121,21)"/><text x="84.6485%" y="191.50"></text></g><g><title>metadata_register_crate (22,315,007 samples, 7.68%)</title><rect x="84.8308%" y="181" width="7.6752%" height="15" fill="rgb(220,109,13)"/><text x="85.0808%" y="191.50">metadata_re..</text></g><g><title>metadata_register_crate (18,483,257 samples, 6.36%)</title><rect x="86.1488%" y="165" width="6.3573%" height="15" fill="rgb(232,18,1)"/><text x="86.3988%" y="175.50">metadata..</text></g><g><title>macro_expand_crate (87,533,902 samples, 30.11%)</title><rect x="62.4948%" y="213" width="30.1072%" height="15" fill="rgb(215,41,42)"/><text x="62.7448%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (87,519,742 samples, 30.10%)</title><rect x="62.4997%" y="197" width="30.1023%" height="15" fill="rgb(224,123,36)"/><text x="62.7497%" y="207.50">expand_crate</text></g><g><title>finalize_macro_resolutions (391,194 samples, 0.13%)</title><rect x="92.7029%" y="197" width="0.1346%" height="15" fill="rgb(240,125,3)"/><text x="92.9529%" y="207.50"></text></g><g><title>late_resolve_crate (3,751,952 samples, 1.29%)</title><rect x="92.8374%" y="197" width="1.2905%" height="15" fill="rgb(205,98,50)"/><text x="93.0874%" y="207.50"></text></g><g><title>configure_and_expand (93,022,444 samples, 31.99%)</title><rect x="62.2286%" y="229" width="31.9950%" height="15" fill="rgb(205,185,37)"/><text x="62.4786%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (4,610,422 samples, 1.59%)</title><rect x="92.6378%" y="213" width="1.5858%" height="15" fill="rgb(238,207,15)"/><text x="92.8878%" y="223.50"></text></g><g><title>drop_ast (478,145 samples, 0.16%)</title><rect x="94.2236%" y="229" width="0.1645%" height="15" fill="rgb(213,199,42)"/><text x="94.4736%" y="239.50"></text></g><g><title>early_lint_checks (878,660 samples, 0.30%)</title><rect x="94.3953%" y="229" width="0.3022%" height="15" fill="rgb(235,201,11)"/><text x="94.6453%" y="239.50"></text></g><g><title>free_global_ctxt (4,502,520 samples, 1.55%)</title><rect x="94.6975%" y="229" width="1.5486%" height="15" fill="rgb(207,46,11)"/><text x="94.9475%" y="239.50"></text></g><g><title>generate_crate_metadata (2,525,329 samples, 0.87%)</title><rect x="96.2462%" y="229" width="0.8686%" height="15" fill="rgb(241,35,35)"/><text x="96.4962%" y="239.50"></text></g><g><title>hir_lowering (6,345,760 samples, 2.18%)</title><rect x="97.1147%" y="229" width="2.1826%" height="15" fill="rgb(243,32,47)"/><text x="97.3647%" y="239.50">h..</text></g><g><title>self_profile_alloc_query_strings (960,031 samples, 0.33%)</title><rect x="99.4928%" y="229" width="0.3302%" height="15" fill="rgb(247,202,23)"/><text x="99.7428%" y="239.50"></text></g><g><title>all (290,740,610 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (290,740,610 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (408,894 samples, 0.14%)</title><rect x="99.8594%" y="229" width="0.1406%" height="15" fill="rgb(222,74,54)"/><text x="100.1094%" y="239.50"></text></g></svg></svg>