<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (116,261 samples, 0.13%)</title><rect x="7.4936%" y="149" width="0.1306%" height="15" fill="rgb(227,0,7)"/><text x="7.7436%" y="159.50"></text></g><g><title>param_env (107,781 samples, 0.12%)</title><rect x="8.8251%" y="117" width="0.1211%" height="15" fill="rgb(217,0,24)"/><text x="9.0751%" y="127.50"></text></g><g><title>codegen_fn_attrs (151,701 samples, 0.17%)</title><rect x="9.2723%" y="101" width="0.1704%" height="15" fill="rgb(221,193,54)"/><text x="9.5223%" y="111.50"></text></g><g><title>adt_drop_tys (144,490 samples, 0.16%)</title><rect x="11.1364%" y="69" width="0.1623%" height="15" fill="rgb(248,212,6)"/><text x="11.3864%" y="79.50"></text></g><g><title>is_copy_raw (372,706 samples, 0.42%)</title><rect x="11.2987%" y="69" width="0.4186%" height="15" fill="rgb(208,68,35)"/><text x="11.5487%" y="79.50"></text></g><g><title>evaluate_obligation (303,103 samples, 0.34%)</title><rect x="11.3769%" y="53" width="0.3405%" height="15" fill="rgb(232,128,0)"/><text x="11.6269%" y="63.50"></text></g><g><title>needs_drop_raw (576,827 samples, 0.65%)</title><rect x="11.0710%" y="85" width="0.6479%" height="15" fill="rgb(207,160,47)"/><text x="11.3210%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (169,663 samples, 0.19%)</title><rect x="11.8908%" y="69" width="0.1906%" height="15" fill="rgb(228,23,34)"/><text x="12.1408%" y="79.50"></text></g><g><title>impl_parent (201,731 samples, 0.23%)</title><rect x="12.5083%" y="53" width="0.2266%" height="15" fill="rgb(218,30,26)"/><text x="12.7583%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (135,031 samples, 0.15%)</title><rect x="12.5832%" y="37" width="0.1517%" height="15" fill="rgb(220,122,19)"/><text x="12.8332%" y="47.50"></text></g><g><title>specialization_graph_of (753,529 samples, 0.85%)</title><rect x="12.1674%" y="69" width="0.8464%" height="15" fill="rgb(250,228,42)"/><text x="12.4174%" y="79.50"></text></g><g><title>impl_trait_ref (248,282 samples, 0.28%)</title><rect x="12.7349%" y="53" width="0.2789%" height="15" fill="rgb(240,193,28)"/><text x="12.9849%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (183,941 samples, 0.21%)</title><rect x="12.8072%" y="37" width="0.2066%" height="15" fill="rgb(216,20,37)"/><text x="13.0572%" y="47.50"></text></g><g><title>resolve_instance (1,209,913 samples, 1.36%)</title><rect x="11.7189%" y="85" width="1.3590%" height="15" fill="rgb(206,188,39)"/><text x="11.9689%" y="95.50"></text></g><g><title>thir_body (504,864 samples, 0.57%)</title><rect x="13.0994%" y="85" width="0.5671%" height="15" fill="rgb(217,207,13)"/><text x="13.3494%" y="95.50"></text></g><g><title>mir_const (4,838,695 samples, 5.44%)</title><rect x="8.2438%" y="133" width="5.4350%" height="15" fill="rgb(231,73,38)"/><text x="8.4938%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (4,213,385 samples, 4.73%)</title><rect x="8.9461%" y="117" width="4.7327%" height="15" fill="rgb(225,20,46)"/><text x="9.1961%" y="127.50">unsafe..</text></g><g><title>mir_built (3,771,290 samples, 4.24%)</title><rect x="9.4427%" y="101" width="4.2361%" height="15" fill="rgb(210,31,41)"/><text x="9.6927%" y="111.50">mir_b..</text></g><g><title>mir_promoted (5,378,842 samples, 6.04%)</title><rect x="7.6745%" y="149" width="6.0418%" height="15" fill="rgb(221,200,47)"/><text x="7.9245%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (447,888 samples, 0.50%)</title><rect x="13.7162%" y="149" width="0.5031%" height="15" fill="rgb(226,26,5)"/><text x="13.9662%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,010,914 samples, 1.14%)</title><rect x="14.2866%" y="149" width="1.1355%" height="15" fill="rgb(249,33,26)"/><text x="14.5366%" y="159.50"></text></g><g><title>MIR_borrow_checking (12,833,064 samples, 14.41%)</title><rect x="1.0197%" y="181" width="14.4147%" height="15" fill="rgb(235,183,28)"/><text x="1.2697%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,752,504 samples, 14.32%)</title><rect x="1.1102%" y="165" width="14.3242%" height="15" fill="rgb(221,5,38)"/><text x="1.3602%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (159,242 samples, 0.18%)</title><rect x="15.4535%" y="181" width="0.1789%" height="15" fill="rgb(247,18,42)"/><text x="15.7035%" y="191.50"></text></g><g><title>should_inherit_track_caller (188,443 samples, 0.21%)</title><rect x="16.0304%" y="133" width="0.2117%" height="15" fill="rgb(241,131,45)"/><text x="16.2804%" y="143.50"></text></g><g><title>codegen_fn_attrs (358,744 samples, 0.40%)</title><rect x="15.8550%" y="149" width="0.4030%" height="15" fill="rgb(249,31,29)"/><text x="16.1050%" y="159.50"></text></g><g><title>check_mod_attrs (538,726 samples, 0.61%)</title><rect x="15.6530%" y="165" width="0.6051%" height="15" fill="rgb(225,111,53)"/><text x="15.9030%" y="175.50"></text></g><g><title>lookup_deprecation_entry (122,921 samples, 0.14%)</title><rect x="16.5569%" y="149" width="0.1381%" height="15" fill="rgb(238,160,17)"/><text x="16.8069%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (369,674 samples, 0.42%)</title><rect x="16.3945%" y="165" width="0.4152%" height="15" fill="rgb(214,148,48)"/><text x="16.6445%" y="175.50"></text></g><g><title>misc_checking_1 (1,102,453 samples, 1.24%)</title><rect x="15.6329%" y="181" width="1.2383%" height="15" fill="rgb(232,36,49)"/><text x="15.8829%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (227,742 samples, 0.26%)</title><rect x="16.8730%" y="165" width="0.2558%" height="15" fill="rgb(209,103,24)"/><text x="17.1230%" y="175.50"></text></g><g><title>check_mod_liveness (175,832 samples, 0.20%)</title><rect x="16.9313%" y="149" width="0.1975%" height="15" fill="rgb(229,88,8)"/><text x="17.1813%" y="159.50"></text></g><g><title>misc_checking_2 (465,175 samples, 0.52%)</title><rect x="16.8712%" y="181" width="0.5225%" height="15" fill="rgb(213,181,19)"/><text x="17.1212%" y="191.50"></text></g><g><title>match_checking (235,863 samples, 0.26%)</title><rect x="17.1288%" y="165" width="0.2649%" height="15" fill="rgb(254,191,54)"/><text x="17.3788%" y="175.50"></text></g><g><title>check_match (215,513 samples, 0.24%)</title><rect x="17.1516%" y="149" width="0.2421%" height="15" fill="rgb(241,83,37)"/><text x="17.4016%" y="159.50"></text></g><g><title>check_private_in_public (158,202 samples, 0.18%)</title><rect x="17.4042%" y="165" width="0.1777%" height="15" fill="rgb(233,36,39)"/><text x="17.6542%" y="175.50"></text></g><g><title>death_checking (408,495 samples, 0.46%)</title><rect x="17.5819%" y="165" width="0.4588%" height="15" fill="rgb(226,3,54)"/><text x="17.8319%" y="175.50"></text></g><g><title>item_attrs (144,972 samples, 0.16%)</title><rect x="17.8779%" y="149" width="0.1628%" height="15" fill="rgb(245,192,40)"/><text x="18.1279%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (143,162 samples, 0.16%)</title><rect x="17.8800%" y="133" width="0.1608%" height="15" fill="rgb(238,167,29)"/><text x="18.1300%" y="143.50"></text></g><g><title>param_env (203,422 samples, 0.23%)</title><rect x="20.1211%" y="133" width="0.2285%" height="15" fill="rgb(232,182,51)"/><text x="20.3711%" y="143.50"></text></g><g><title>crate_lints (3,669,801 samples, 4.12%)</title><rect x="18.0423%" y="149" width="4.1221%" height="15" fill="rgb(231,60,39)"/><text x="18.2923%" y="159.50">crat..</text></g><g><title>type_of (1,577,898 samples, 1.77%)</title><rect x="20.3920%" y="133" width="1.7724%" height="15" fill="rgb(208,69,12)"/><text x="20.6420%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (1,038,399 samples, 1.17%)</title><rect x="20.9980%" y="117" width="1.1664%" height="15" fill="rgb(235,93,37)"/><text x="21.2480%" y="127.50"></text></g><g><title>lint_checking (3,906,664 samples, 4.39%)</title><rect x="18.0408%" y="165" width="4.3881%" height="15" fill="rgb(213,116,39)"/><text x="18.2908%" y="175.50">lint_..</text></g><g><title>module_lints (235,493 samples, 0.26%)</title><rect x="22.1644%" y="149" width="0.2645%" height="15" fill="rgb(222,207,29)"/><text x="22.4144%" y="159.50"></text></g><g><title>lint_mod (232,593 samples, 0.26%)</title><rect x="22.1677%" y="133" width="0.2613%" height="15" fill="rgb(206,96,30)"/><text x="22.4177%" y="143.50"></text></g><g><title>privacy_access_levels (188,432 samples, 0.21%)</title><rect x="22.4289%" y="165" width="0.2117%" height="15" fill="rgb(218,138,4)"/><text x="22.6789%" y="175.50"></text></g><g><title>privacy_checking_modules (440,515 samples, 0.49%)</title><rect x="22.6406%" y="165" width="0.4948%" height="15" fill="rgb(250,191,14)"/><text x="22.8906%" y="175.50"></text></g><g><title>check_mod_privacy (438,425 samples, 0.49%)</title><rect x="22.6429%" y="149" width="0.4925%" height="15" fill="rgb(239,60,40)"/><text x="22.8929%" y="159.50"></text></g><g><title>misc_checking_3 (5,142,468 samples, 5.78%)</title><rect x="17.3937%" y="181" width="5.7763%" height="15" fill="rgb(206,27,48)"/><text x="17.6437%" y="191.50">misc_ch..</text></g><g><title>impl_trait_ref (161,191 samples, 0.18%)</title><rect x="23.4782%" y="85" width="0.1811%" height="15" fill="rgb(225,35,8)"/><text x="23.7282%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (140,181 samples, 0.16%)</title><rect x="23.5018%" y="69" width="0.1575%" height="15" fill="rgb(250,213,24)"/><text x="23.7518%" y="79.50"></text></g><g><title>adt_destructor (354,453 samples, 0.40%)</title><rect x="23.3006%" y="133" width="0.3981%" height="15" fill="rgb(247,123,22)"/><text x="23.5506%" y="143.50"></text></g><g><title>coherent_trait (343,533 samples, 0.39%)</title><rect x="23.3129%" y="117" width="0.3859%" height="15" fill="rgb(231,138,38)"/><text x="23.5629%" y="127.50"></text></g><g><title>specialization_graph_of (342,323 samples, 0.38%)</title><rect x="23.3143%" y="101" width="0.3845%" height="15" fill="rgb(231,145,46)"/><text x="23.5643%" y="111.50"></text></g><g><title>evaluate_obligation (328,124 samples, 0.37%)</title><rect x="23.9439%" y="117" width="0.3686%" height="15" fill="rgb(251,118,11)"/><text x="24.1939%" y="127.50"></text></g><g><title>layout_of (214,212 samples, 0.24%)</title><rect x="24.4200%" y="101" width="0.2406%" height="15" fill="rgb(217,147,25)"/><text x="24.6700%" y="111.50"></text></g><g><title>layout_of (322,193 samples, 0.36%)</title><rect x="24.3420%" y="117" width="0.3619%" height="15" fill="rgb(247,81,37)"/><text x="24.5920%" y="127.50"></text></g><g><title>param_env (106,212 samples, 0.12%)</title><rect x="24.7039%" y="117" width="0.1193%" height="15" fill="rgb(209,12,38)"/><text x="24.9539%" y="127.50"></text></g><g><title>object_safety_violations (998,321 samples, 1.12%)</title><rect x="23.7389%" y="133" width="1.1214%" height="15" fill="rgb(227,1,9)"/><text x="23.9889%" y="143.50"></text></g><g><title>impl_parent (3,238,056 samples, 3.64%)</title><rect x="31.8243%" y="117" width="3.6371%" height="15" fill="rgb(248,47,43)"/><text x="32.0743%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (1,835,572 samples, 2.06%)</title><rect x="33.3997%" y="101" width="2.0618%" height="15" fill="rgb(221,10,30)"/><text x="33.6497%" y="111.50">m..</text></g><g><title>impl_trait_ref (6,805,089 samples, 7.64%)</title><rect x="35.4615%" y="117" width="7.6438%" height="15" fill="rgb(210,229,1)"/><text x="35.7115%" y="127.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,409,239 samples, 6.08%)</title><rect x="37.0293%" y="101" width="6.0759%" height="15" fill="rgb(222,148,37)"/><text x="37.2793%" y="111.50">metadata..</text></g><g><title>trait_impls_of (1,213,694 samples, 1.36%)</title><rect x="43.1238%" y="117" width="1.3633%" height="15" fill="rgb(234,67,33)"/><text x="43.3738%" y="127.50"></text></g><g><title>implementations_of_trait (333,572 samples, 0.37%)</title><rect x="44.1124%" y="101" width="0.3747%" height="15" fill="rgb(247,98,35)"/><text x="44.3624%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (251,052 samples, 0.28%)</title><rect x="44.2050%" y="85" width="0.2820%" height="15" fill="rgb(247,138,52)"/><text x="44.4550%" y="95.50"></text></g><g><title>coherent_trait (18,905,912 samples, 21.24%)</title><rect x="23.2522%" y="149" width="21.2360%" height="15" fill="rgb(213,79,30)"/><text x="23.5022%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (17,456,616 samples, 19.61%)</title><rect x="24.8801%" y="133" width="19.6081%" height="15" fill="rgb(246,177,23)"/><text x="25.1301%" y="143.50">specialization_graph_of</text></g><g><title>coherence_checking (19,036,223 samples, 21.38%)</title><rect x="23.2269%" y="165" width="21.3824%" height="15" fill="rgb(230,62,27)"/><text x="23.4769%" y="175.50">coherence_checking</text></g><g><title>associated_item (289,783 samples, 0.33%)</title><rect x="55.8901%" y="101" width="0.3255%" height="15" fill="rgb(216,154,8)"/><text x="56.1401%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (233,863 samples, 0.26%)</title><rect x="55.9529%" y="85" width="0.2627%" height="15" fill="rgb(244,35,45)"/><text x="56.2029%" y="95.50"></text></g><g><title>associated_items (429,045 samples, 0.48%)</title><rect x="55.7659%" y="117" width="0.4819%" height="15" fill="rgb(251,115,12)"/><text x="56.0159%" y="127.50"></text></g><g><title>adt_dtorck_constraint (134,330 samples, 0.15%)</title><rect x="56.6413%" y="85" width="0.1509%" height="15" fill="rgb(240,54,50)"/><text x="56.8913%" y="95.50"></text></g><g><title>dropck_outlives (463,023 samples, 0.52%)</title><rect x="56.3091%" y="117" width="0.5201%" height="15" fill="rgb(233,84,52)"/><text x="56.5591%" y="127.50"></text></g><g><title>adt_dtorck_constraint (256,722 samples, 0.29%)</title><rect x="56.5408%" y="101" width="0.2884%" height="15" fill="rgb(207,117,47)"/><text x="56.7908%" y="111.50"></text></g><g><title>predicates_of (110,520 samples, 0.12%)</title><rect x="57.6136%" y="101" width="0.1241%" height="15" fill="rgb(249,43,39)"/><text x="57.8636%" y="111.50"></text></g><g><title>evaluate_obligation (1,216,083 samples, 1.37%)</title><rect x="56.8292%" y="117" width="1.3660%" height="15" fill="rgb(209,38,44)"/><text x="57.0792%" y="127.50"></text></g><g><title>trait_impls_of (328,283 samples, 0.37%)</title><rect x="57.8264%" y="101" width="0.3687%" height="15" fill="rgb(236,212,23)"/><text x="58.0764%" y="111.50"></text></g><g><title>implementations_of_trait (128,952 samples, 0.14%)</title><rect x="58.0503%" y="85" width="0.1448%" height="15" fill="rgb(242,79,21)"/><text x="58.3003%" y="95.50"></text></g><g><title>fn_sig (118,971 samples, 0.13%)</title><rect x="58.2384%" y="117" width="0.1336%" height="15" fill="rgb(211,96,35)"/><text x="58.4884%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (103,711 samples, 0.12%)</title><rect x="58.2555%" y="101" width="0.1165%" height="15" fill="rgb(253,215,40)"/><text x="58.5055%" y="111.50"></text></g><g><title>generics_of (99,630 samples, 0.11%)</title><rect x="58.3720%" y="117" width="0.1119%" height="15" fill="rgb(211,81,21)"/><text x="58.6220%" y="127.50"></text></g><g><title>item_attrs (155,113 samples, 0.17%)</title><rect x="58.6032%" y="117" width="0.1742%" height="15" fill="rgb(208,190,38)"/><text x="58.8532%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (147,413 samples, 0.17%)</title><rect x="58.6118%" y="101" width="0.1656%" height="15" fill="rgb(235,213,38)"/><text x="58.8618%" y="111.50"></text></g><g><title>method_autoderef_steps (109,332 samples, 0.12%)</title><rect x="58.8385%" y="117" width="0.1228%" height="15" fill="rgb(237,122,38)"/><text x="59.0885%" y="127.50"></text></g><g><title>explicit_predicates_of (104,671 samples, 0.12%)</title><rect x="59.2927%" y="85" width="0.1176%" height="15" fill="rgb(244,218,35)"/><text x="59.5427%" y="95.50"></text></g><g><title>predicates_of (331,254 samples, 0.37%)</title><rect x="59.0884%" y="117" width="0.3721%" height="15" fill="rgb(240,68,47)"/><text x="59.3384%" y="127.50"></text></g><g><title>predicates_defined_on (233,303 samples, 0.26%)</title><rect x="59.1984%" y="101" width="0.2621%" height="15" fill="rgb(210,16,53)"/><text x="59.4484%" y="111.50"></text></g><g><title>item_bodies_checking (13,378,171 samples, 15.03%)</title><rect x="44.6411%" y="165" width="15.0270%" height="15" fill="rgb(235,124,12)"/><text x="44.8911%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,375,041 samples, 15.02%)</title><rect x="44.6446%" y="149" width="15.0235%" height="15" fill="rgb(224,169,11)"/><text x="44.8946%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (13,316,200 samples, 14.96%)</title><rect x="44.7107%" y="133" width="14.9574%" height="15" fill="rgb(250,166,2)"/><text x="44.9607%" y="143.50">typeck</text></g><g><title>item_types_checking (515,255 samples, 0.58%)</title><rect x="59.6681%" y="165" width="0.5788%" height="15" fill="rgb(242,216,29)"/><text x="59.9181%" y="175.50"></text></g><g><title>check_mod_item_types (513,105 samples, 0.58%)</title><rect x="59.6705%" y="149" width="0.5763%" height="15" fill="rgb(230,116,27)"/><text x="59.9205%" y="159.50"></text></g><g><title>fn_sig (250,751 samples, 0.28%)</title><rect x="60.4924%" y="133" width="0.2817%" height="15" fill="rgb(228,99,48)"/><text x="60.7424%" y="143.50"></text></g><g><title>is_late_bound_map (133,221 samples, 0.15%)</title><rect x="60.8800%" y="117" width="0.1496%" height="15" fill="rgb(253,11,6)"/><text x="61.1300%" y="127.50"></text></g><g><title>resolve_lifetimes (132,081 samples, 0.15%)</title><rect x="60.8813%" y="101" width="0.1484%" height="15" fill="rgb(247,143,39)"/><text x="61.1313%" y="111.50"></text></g><g><title>lint_levels (111,671 samples, 0.13%)</title><rect x="60.9042%" y="85" width="0.1254%" height="15" fill="rgb(236,97,10)"/><text x="61.1542%" y="95.50"></text></g><g><title>named_region_map (116,882 samples, 0.13%)</title><rect x="61.0297%" y="117" width="0.1313%" height="15" fill="rgb(233,208,19)"/><text x="61.2797%" y="127.50"></text></g><g><title>resolve_lifetimes (107,241 samples, 0.12%)</title><rect x="61.0405%" y="101" width="0.1205%" height="15" fill="rgb(216,164,2)"/><text x="61.2905%" y="111.50"></text></g><g><title>generics_of (364,054 samples, 0.41%)</title><rect x="60.7740%" y="133" width="0.4089%" height="15" fill="rgb(220,129,5)"/><text x="61.0240%" y="143.50"></text></g><g><title>explicit_predicates_of (155,675 samples, 0.17%)</title><rect x="61.3707%" y="101" width="0.1749%" height="15" fill="rgb(242,17,10)"/><text x="61.6207%" y="111.50"></text></g><g><title>predicates_of (469,318 samples, 0.53%)</title><rect x="61.2556%" y="133" width="0.5272%" height="15" fill="rgb(242,107,0)"/><text x="61.5056%" y="143.50"></text></g><g><title>predicates_defined_on (427,848 samples, 0.48%)</title><rect x="61.3022%" y="117" width="0.4806%" height="15" fill="rgb(251,28,31)"/><text x="61.5522%" y="127.50"></text></g><g><title>inferred_outlives_of (211,193 samples, 0.24%)</title><rect x="61.5456%" y="101" width="0.2372%" height="15" fill="rgb(233,223,10)"/><text x="61.7956%" y="111.50"></text></g><g><title>inferred_outlives_crate (189,822 samples, 0.21%)</title><rect x="61.5696%" y="85" width="0.2132%" height="15" fill="rgb(215,21,27)"/><text x="61.8196%" y="95.50"></text></g><g><title>super_predicates_of (121,291 samples, 0.14%)</title><rect x="61.7828%" y="133" width="0.1362%" height="15" fill="rgb(232,23,21)"/><text x="62.0328%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (111,211 samples, 0.12%)</title><rect x="61.7941%" y="117" width="0.1249%" height="15" fill="rgb(244,5,23)"/><text x="62.0441%" y="127.50"></text></g><g><title>type_collecting (1,864,921 samples, 2.09%)</title><rect x="60.2492%" y="165" width="2.0948%" height="15" fill="rgb(226,81,46)"/><text x="60.4992%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,856,721 samples, 2.09%)</title><rect x="60.2584%" y="149" width="2.0856%" height="15" fill="rgb(247,70,30)"/><text x="60.5084%" y="159.50">c..</text></g><g><title>type_of (371,673 samples, 0.42%)</title><rect x="61.9265%" y="133" width="0.4175%" height="15" fill="rgb(212,68,19)"/><text x="62.1765%" y="143.50"></text></g><g><title>adt_sized_constraint (147,401 samples, 0.17%)</title><rect x="64.6766%" y="117" width="0.1656%" height="15" fill="rgb(240,187,13)"/><text x="64.9266%" y="127.50"></text></g><g><title>evaluate_obligation (698,280 samples, 0.78%)</title><rect x="64.1890%" y="133" width="0.7843%" height="15" fill="rgb(223,113,26)"/><text x="64.4390%" y="143.50"></text></g><g><title>implied_outlives_bounds (215,273 samples, 0.24%)</title><rect x="64.9904%" y="133" width="0.2418%" height="15" fill="rgb(206,192,2)"/><text x="65.2404%" y="143.50"></text></g><g><title>param_env (233,084 samples, 0.26%)</title><rect x="65.2322%" y="133" width="0.2618%" height="15" fill="rgb(241,108,4)"/><text x="65.4822%" y="143.50"></text></g><g><title>region_scope_tree (213,110 samples, 0.24%)</title><rect x="65.5343%" y="133" width="0.2394%" height="15" fill="rgb(247,173,49)"/><text x="65.7843%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,948,627 samples, 3.31%)</title><rect x="62.5146%" y="149" width="3.3120%" height="15" fill="rgb(224,114,35)"/><text x="62.7646%" y="159.50">che..</text></g><g><title>adt_def (137,061 samples, 0.15%)</title><rect x="67.2465%" y="101" width="0.1540%" height="15" fill="rgb(245,159,27)"/><text x="67.4965%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (133,681 samples, 0.15%)</title><rect x="67.2503%" y="85" width="0.1502%" height="15" fill="rgb(245,172,44)"/><text x="67.5003%" y="95.50"></text></g><g><title>item_attrs (101,180 samples, 0.11%)</title><rect x="67.2868%" y="69" width="0.1136%" height="15" fill="rgb(236,23,11)"/><text x="67.5368%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,660 samples, 0.11%)</title><rect x="67.2896%" y="53" width="0.1108%" height="15" fill="rgb(205,117,38)"/><text x="67.5396%" y="63.50"></text></g><g><title>adt_sized_constraint (262,823 samples, 0.30%)</title><rect x="67.2224%" y="117" width="0.2952%" height="15" fill="rgb(237,72,25)"/><text x="67.4724%" y="127.50"></text></g><g><title>evaluate_obligation (606,385 samples, 0.68%)</title><rect x="66.8619%" y="133" width="0.6811%" height="15" fill="rgb(244,70,9)"/><text x="67.1119%" y="143.50"></text></g><g><title>param_env (180,431 samples, 0.20%)</title><rect x="67.6401%" y="133" width="0.2027%" height="15" fill="rgb(217,125,39)"/><text x="67.8901%" y="143.50"></text></g><g><title>predicates_of (95,601 samples, 0.11%)</title><rect x="67.8428%" y="133" width="0.1074%" height="15" fill="rgb(235,36,10)"/><text x="68.0928%" y="143.50"></text></g><g><title>trait_impls_of (102,911 samples, 0.12%)</title><rect x="67.9838%" y="133" width="0.1156%" height="15" fill="rgb(251,123,47)"/><text x="68.2338%" y="143.50"></text></g><g><title>check_item_well_formed (2,101,879 samples, 2.36%)</title><rect x="65.8266%" y="149" width="2.3609%" height="15" fill="rgb(221,13,13)"/><text x="66.0766%" y="159.50">ch..</text></g><g><title>analysis (60,185,476 samples, 67.60%)</title><rect x="0.7919%" y="197" width="67.6031%" height="15" fill="rgb(238,131,9)"/><text x="1.0419%" y="207.50">analysis</text></g><g><title>type_check_crate (40,262,762 samples, 45.22%)</title><rect x="23.1699%" y="181" width="45.2250%" height="15" fill="rgb(211,50,8)"/><text x="23.4199%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,383,561 samples, 6.05%)</title><rect x="62.3479%" y="165" width="6.0471%" height="15" fill="rgb(245,182,24)"/><text x="62.5979%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (184,602 samples, 0.21%)</title><rect x="68.1876%" y="149" width="0.2074%" height="15" fill="rgb(242,14,37)"/><text x="68.4376%" y="159.50"></text></g><g><title>codegen_crate (473,515 samples, 0.53%)</title><rect x="68.4035%" y="197" width="0.5319%" height="15" fill="rgb(246,228,12)"/><text x="68.6535%" y="207.50"></text></g><g><title>AST_validation (129,541 samples, 0.15%)</title><rect x="69.1187%" y="181" width="0.1455%" height="15" fill="rgb(213,55,15)"/><text x="69.3687%" y="191.50"></text></g><g><title>metadata_load_macro (325,843 samples, 0.37%)</title><rect x="79.4842%" y="149" width="0.3660%" height="15" fill="rgb(209,9,3)"/><text x="79.7342%" y="159.50"></text></g><g><title>macro_expand_crate (15,108,960 samples, 16.97%)</title><rect x="69.3815%" y="181" width="16.9711%" height="15" fill="rgb(230,59,30)"/><text x="69.6315%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (15,089,610 samples, 16.95%)</title><rect x="69.4033%" y="165" width="16.9493%" height="15" fill="rgb(209,121,21)"/><text x="69.6533%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (5,788,915 samples, 6.50%)</title><rect x="79.8502%" y="149" width="6.5024%" height="15" fill="rgb(220,109,13)"/><text x="80.1002%" y="159.50">metadata_..</text></g><g><title>metadata_register_crate (712,647 samples, 0.80%)</title><rect x="85.5521%" y="133" width="0.8005%" height="15" fill="rgb(232,18,1)"/><text x="85.8021%" y="143.50"></text></g><g><title>metadata_register_crate (109,201 samples, 0.12%)</title><rect x="86.2299%" y="117" width="0.1227%" height="15" fill="rgb(215,41,42)"/><text x="86.4799%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (124,392 samples, 0.14%)</title><rect x="86.3585%" y="181" width="0.1397%" height="15" fill="rgb(224,123,36)"/><text x="86.6085%" y="191.50"></text></g><g><title>finalize_macro_resolutions (130,182 samples, 0.15%)</title><rect x="86.5819%" y="165" width="0.1462%" height="15" fill="rgb(240,125,3)"/><text x="86.8319%" y="175.50"></text></g><g><title>late_resolve_crate (1,228,463 samples, 1.38%)</title><rect x="86.7282%" y="165" width="1.3799%" height="15" fill="rgb(205,98,50)"/><text x="86.9782%" y="175.50"></text></g><g><title>configure_and_expand (17,147,372 samples, 19.26%)</title><rect x="68.9354%" y="197" width="19.2607%" height="15" fill="rgb(205,185,37)"/><text x="69.1854%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,511,567 samples, 1.70%)</title><rect x="86.4982%" y="181" width="1.6979%" height="15" fill="rgb(238,207,15)"/><text x="86.7482%" y="191.50"></text></g><g><title>drop_ast (159,912 samples, 0.18%)</title><rect x="88.1961%" y="197" width="0.1796%" height="15" fill="rgb(213,199,42)"/><text x="88.4461%" y="207.50"></text></g><g><title>early_lint_checks (322,393 samples, 0.36%)</title><rect x="88.3982%" y="197" width="0.3621%" height="15" fill="rgb(235,201,11)"/><text x="88.6482%" y="207.50"></text></g><g><title>free_global_ctxt (3,597,040 samples, 4.04%)</title><rect x="88.7604%" y="197" width="4.0404%" height="15" fill="rgb(207,46,11)"/><text x="89.0104%" y="207.50">free..</text></g><g><title>generate_crate_metadata (1,093,602 samples, 1.23%)</title><rect x="92.8007%" y="197" width="1.2284%" height="15" fill="rgb(241,35,35)"/><text x="93.0507%" y="207.50"></text></g><g><title>hir_lowering (1,912,182 samples, 2.15%)</title><rect x="94.0291%" y="197" width="2.1478%" height="15" fill="rgb(243,32,47)"/><text x="94.2791%" y="207.50">h..</text></g><g><title>parse_crate (1,866,781 samples, 2.10%)</title><rect x="96.2476%" y="197" width="2.0969%" height="15" fill="rgb(247,202,23)"/><text x="96.4976%" y="207.50">p..</text></g><g><title>prepare_outputs (193,472 samples, 0.22%)</title><rect x="98.3522%" y="197" width="0.2173%" height="15" fill="rgb(219,102,11)"/><text x="98.6022%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (854,590 samples, 0.96%)</title><rect x="98.5695%" y="197" width="0.9599%" height="15" fill="rgb(243,110,44)"/><text x="98.8195%" y="207.50"></text></g><g><title>all (89,027,738 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (89,027,738 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (323,424 samples, 0.36%)</title><rect x="99.6367%" y="197" width="0.3633%" height="15" fill="rgb(226,22,26)"/><text x="99.8867%" y="207.50"></text></g></svg></svg>