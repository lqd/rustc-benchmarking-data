<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (286,421 samples, 0.18%)</title><rect x="10.8877%" y="149" width="0.1790%" height="15" fill="rgb(227,0,7)"/><text x="11.1377%" y="159.50"></text></g><g><title>item_attrs (312,894 samples, 0.20%)</title><rect x="11.4626%" y="117" width="0.1955%" height="15" fill="rgb(217,0,24)"/><text x="11.7126%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (303,694 samples, 0.19%)</title><rect x="11.4683%" y="101" width="0.1898%" height="15" fill="rgb(221,193,54)"/><text x="11.7183%" y="111.50"></text></g><g><title>codegen_fn_attrs (438,067 samples, 0.27%)</title><rect x="11.3983%" y="133" width="0.2738%" height="15" fill="rgb(248,212,6)"/><text x="11.6483%" y="143.50"></text></g><g><title>is_copy_raw (237,073 samples, 0.15%)</title><rect x="14.0337%" y="117" width="0.1482%" height="15" fill="rgb(208,68,35)"/><text x="14.2837%" y="127.50"></text></g><g><title>evaluate_obligation (188,402 samples, 0.12%)</title><rect x="14.0641%" y="101" width="0.1177%" height="15" fill="rgb(232,128,0)"/><text x="14.3141%" y="111.50"></text></g><g><title>adt_drop_tys (199,293 samples, 0.12%)</title><rect x="14.2628%" y="101" width="0.1245%" height="15" fill="rgb(207,160,47)"/><text x="14.5128%" y="111.50"></text></g><g><title>is_copy_raw (1,068,489 samples, 0.67%)</title><rect x="14.3873%" y="101" width="0.6678%" height="15" fill="rgb(228,23,34)"/><text x="14.6373%" y="111.50"></text></g><g><title>evaluate_obligation (924,118 samples, 0.58%)</title><rect x="14.4776%" y="85" width="0.5775%" height="15" fill="rgb(218,30,26)"/><text x="14.7276%" y="95.50"></text></g><g><title>needs_drop_raw (1,399,265 samples, 0.87%)</title><rect x="14.1842%" y="117" width="0.8745%" height="15" fill="rgb(220,122,19)"/><text x="14.4342%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (412,934 samples, 0.26%)</title><rect x="15.2303%" y="101" width="0.2581%" height="15" fill="rgb(250,228,42)"/><text x="15.4803%" y="111.50"></text></g><g><title>impl_parent (374,715 samples, 0.23%)</title><rect x="16.0998%" y="85" width="0.2342%" height="15" fill="rgb(240,193,28)"/><text x="16.3498%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (229,883 samples, 0.14%)</title><rect x="16.1903%" y="69" width="0.1437%" height="15" fill="rgb(216,20,37)"/><text x="16.4403%" y="79.50"></text></g><g><title>specialization_graph_of (2,083,303 samples, 1.30%)</title><rect x="15.5707%" y="101" width="1.3020%" height="15" fill="rgb(206,188,39)"/><text x="15.8207%" y="111.50"></text></g><g><title>impl_trait_ref (861,967 samples, 0.54%)</title><rect x="16.3340%" y="85" width="0.5387%" height="15" fill="rgb(217,207,13)"/><text x="16.5840%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (710,946 samples, 0.44%)</title><rect x="16.4284%" y="69" width="0.4443%" height="15" fill="rgb(231,73,38)"/><text x="16.6784%" y="79.50"></text></g><g><title>resolve_instance (2,956,904 samples, 1.85%)</title><rect x="15.0750%" y="117" width="1.8479%" height="15" fill="rgb(225,20,46)"/><text x="15.3250%" y="127.50">r..</text></g><g><title>thir_body (1,456,827 samples, 0.91%)</title><rect x="16.9414%" y="117" width="0.9105%" height="15" fill="rgb(210,31,41)"/><text x="17.1914%" y="127.50"></text></g><g><title>mir_const (12,165,606 samples, 7.60%)</title><rect x="10.2658%" y="165" width="7.6030%" height="15" fill="rgb(221,200,47)"/><text x="10.5158%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (10,884,050 samples, 6.80%)</title><rect x="11.0667%" y="149" width="6.8021%" height="15" fill="rgb(226,26,5)"/><text x="11.3167%" y="159.50">unsafety_..</text></g><g><title>mir_built (9,915,399 samples, 6.20%)</title><rect x="11.6721%" y="133" width="6.1967%" height="15" fill="rgb(249,33,26)"/><text x="11.9221%" y="143.50">mir_built</text></g><g><title>mir_const_qualif (311,256 samples, 0.19%)</title><rect x="17.8688%" y="165" width="0.1945%" height="15" fill="rgb(235,183,28)"/><text x="18.1188%" y="175.50"></text></g><g><title>mir_const (239,474 samples, 0.15%)</title><rect x="17.9136%" y="149" width="0.1497%" height="15" fill="rgb(221,5,38)"/><text x="18.1636%" y="159.50"></text></g><g><title>unsafety_check_result (198,684 samples, 0.12%)</title><rect x="17.9391%" y="133" width="0.1242%" height="15" fill="rgb(247,18,42)"/><text x="18.1891%" y="143.50"></text></g><g><title>mir_built (187,424 samples, 0.12%)</title><rect x="17.9462%" y="117" width="0.1171%" height="15" fill="rgb(241,131,45)"/><text x="18.1962%" y="127.50"></text></g><g><title>mir_promoted (13,455,954 samples, 8.41%)</title><rect x="9.6542%" y="181" width="8.4094%" height="15" fill="rgb(249,31,29)"/><text x="9.9042%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (612,308 samples, 0.38%)</title><rect x="18.0642%" y="181" width="0.3827%" height="15" fill="rgb(225,111,53)"/><text x="18.3142%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (862,661 samples, 0.54%)</title><rect x="18.4468%" y="181" width="0.5391%" height="15" fill="rgb(238,160,17)"/><text x="18.6968%" y="191.50"></text></g><g><title>normalize_projection_ty (541,426 samples, 0.34%)</title><rect x="18.6476%" y="165" width="0.3384%" height="15" fill="rgb(214,148,48)"/><text x="18.8976%" y="175.50"></text></g><g><title>type_op_normalize_predicate (286,172 samples, 0.18%)</title><rect x="18.9860%" y="181" width="0.1788%" height="15" fill="rgb(232,36,49)"/><text x="19.2360%" y="191.50"></text></g><g><title>normalize_projection_ty (161,362 samples, 0.10%)</title><rect x="19.0640%" y="165" width="0.1008%" height="15" fill="rgb(209,103,24)"/><text x="19.3140%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,276,135 samples, 1.42%)</title><rect x="19.2193%" y="181" width="1.4225%" height="15" fill="rgb(229,88,8)"/><text x="19.4693%" y="191.50"></text></g><g><title>MIR_borrow_checking (31,808,492 samples, 19.88%)</title><rect x="0.7752%" y="213" width="19.8790%" height="15" fill="rgb(213,181,19)"/><text x="1.0252%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,681,342 samples, 19.80%)</title><rect x="0.8547%" y="197" width="19.7995%" height="15" fill="rgb(254,191,54)"/><text x="1.1047%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (200,272 samples, 0.13%)</title><rect x="20.7532%" y="213" width="0.1252%" height="15" fill="rgb(241,83,37)"/><text x="21.0032%" y="223.50"></text></g><g><title>should_inherit_track_caller (244,483 samples, 0.15%)</title><rect x="21.1830%" y="165" width="0.1528%" height="15" fill="rgb(233,36,39)"/><text x="21.4330%" y="175.50"></text></g><g><title>codegen_fn_attrs (425,676 samples, 0.27%)</title><rect x="21.0844%" y="181" width="0.2660%" height="15" fill="rgb(226,3,54)"/><text x="21.3344%" y="191.50"></text></g><g><title>check_mod_attrs (731,028 samples, 0.46%)</title><rect x="20.8937%" y="197" width="0.4569%" height="15" fill="rgb(245,192,40)"/><text x="21.1437%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (425,215 samples, 0.27%)</title><rect x="21.4865%" y="197" width="0.2657%" height="15" fill="rgb(238,167,29)"/><text x="21.7365%" y="207.50"></text></g><g><title>misc_checking_1 (1,442,226 samples, 0.90%)</title><rect x="20.8787%" y="213" width="0.9013%" height="15" fill="rgb(232,182,51)"/><text x="21.1287%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (565,586 samples, 0.35%)</title><rect x="21.7814%" y="197" width="0.3535%" height="15" fill="rgb(231,60,39)"/><text x="22.0314%" y="207.50"></text></g><g><title>check_mod_liveness (445,185 samples, 0.28%)</title><rect x="21.8567%" y="181" width="0.2782%" height="15" fill="rgb(208,69,12)"/><text x="22.1067%" y="191.50"></text></g><g><title>mir_borrowck (419,075 samples, 0.26%)</title><rect x="22.8531%" y="85" width="0.2619%" height="15" fill="rgb(235,93,37)"/><text x="23.1031%" y="95.50"></text></g><g><title>eval_to_const_value_raw (748,639 samples, 0.47%)</title><rect x="22.6476%" y="165" width="0.4679%" height="15" fill="rgb(213,116,39)"/><text x="22.8976%" y="175.50"></text></g><g><title>eval_to_const_value_raw (740,018 samples, 0.46%)</title><rect x="22.6530%" y="149" width="0.4625%" height="15" fill="rgb(222,207,29)"/><text x="22.9030%" y="159.50"></text></g><g><title>eval_to_allocation_raw (733,148 samples, 0.46%)</title><rect x="22.6573%" y="133" width="0.4582%" height="15" fill="rgb(206,96,30)"/><text x="22.9073%" y="143.50"></text></g><g><title>mir_for_ctfe (583,447 samples, 0.36%)</title><rect x="22.7509%" y="117" width="0.3646%" height="15" fill="rgb(218,138,4)"/><text x="23.0009%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (537,337 samples, 0.34%)</title><rect x="22.7797%" y="101" width="0.3358%" height="15" fill="rgb(250,191,14)"/><text x="23.0297%" y="111.50"></text></g><g><title>mir_const_qualif (209,072 samples, 0.13%)</title><rect x="23.1165%" y="165" width="0.1307%" height="15" fill="rgb(239,60,40)"/><text x="23.3665%" y="175.50"></text></g><g><title>misc_checking_2 (2,398,886 samples, 1.50%)</title><rect x="21.7801%" y="213" width="1.4992%" height="15" fill="rgb(206,27,48)"/><text x="22.0301%" y="223.50"></text></g><g><title>match_checking (1,831,170 samples, 1.14%)</title><rect x="22.1349%" y="197" width="1.1444%" height="15" fill="rgb(225,35,8)"/><text x="22.3849%" y="207.50"></text></g><g><title>check_match (1,797,290 samples, 1.12%)</title><rect x="22.1561%" y="181" width="1.1232%" height="15" fill="rgb(250,213,24)"/><text x="22.4061%" y="191.50"></text></g><g><title>check_private_in_public (225,382 samples, 0.14%)</title><rect x="23.2856%" y="197" width="0.1409%" height="15" fill="rgb(247,123,22)"/><text x="23.5356%" y="207.50"></text></g><g><title>death_checking (564,167 samples, 0.35%)</title><rect x="23.4264%" y="197" width="0.3526%" height="15" fill="rgb(231,138,38)"/><text x="23.6764%" y="207.50"></text></g><g><title>item_attrs (214,233 samples, 0.13%)</title><rect x="23.6451%" y="181" width="0.1339%" height="15" fill="rgb(231,145,46)"/><text x="23.8951%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (211,693 samples, 0.13%)</title><rect x="23.6467%" y="165" width="0.1323%" height="15" fill="rgb(251,118,11)"/><text x="23.8967%" y="175.50"></text></g><g><title>eval_to_const_value_raw (216,663 samples, 0.14%)</title><rect x="24.3576%" y="165" width="0.1354%" height="15" fill="rgb(217,147,25)"/><text x="24.6076%" y="175.50"></text></g><g><title>eval_to_const_value_raw (212,283 samples, 0.13%)</title><rect x="24.3603%" y="149" width="0.1327%" height="15" fill="rgb(247,81,37)"/><text x="24.6103%" y="159.50"></text></g><g><title>eval_to_allocation_raw (203,653 samples, 0.13%)</title><rect x="24.3657%" y="133" width="0.1273%" height="15" fill="rgb(209,12,38)"/><text x="24.6157%" y="143.50"></text></g><g><title>crate_lints (2,307,186 samples, 1.44%)</title><rect x="23.7800%" y="181" width="1.4419%" height="15" fill="rgb(227,1,9)"/><text x="24.0300%" y="191.50"></text></g><g><title>type_of (1,104,834 samples, 0.69%)</title><rect x="24.5314%" y="165" width="0.6905%" height="15" fill="rgb(248,47,43)"/><text x="24.7814%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (872,849 samples, 0.55%)</title><rect x="24.6764%" y="149" width="0.5455%" height="15" fill="rgb(221,10,30)"/><text x="24.9264%" y="159.50"></text></g><g><title>lint_checking (2,898,072 samples, 1.81%)</title><rect x="23.7790%" y="197" width="1.8112%" height="15" fill="rgb(210,229,1)"/><text x="24.0290%" y="207.50">l..</text></g><g><title>module_lints (589,326 samples, 0.37%)</title><rect x="25.2219%" y="181" width="0.3683%" height="15" fill="rgb(222,148,37)"/><text x="25.4719%" y="191.50"></text></g><g><title>lint_mod (586,136 samples, 0.37%)</title><rect x="25.2239%" y="165" width="0.3663%" height="15" fill="rgb(234,67,33)"/><text x="25.4739%" y="175.50"></text></g><g><title>privacy_access_levels (329,464 samples, 0.21%)</title><rect x="25.5902%" y="197" width="0.2059%" height="15" fill="rgb(247,98,35)"/><text x="25.8402%" y="207.50"></text></g><g><title>privacy_checking_modules (1,048,412 samples, 0.66%)</title><rect x="25.7961%" y="197" width="0.6552%" height="15" fill="rgb(247,138,52)"/><text x="26.0461%" y="207.50"></text></g><g><title>check_mod_privacy (1,046,642 samples, 0.65%)</title><rect x="25.7972%" y="181" width="0.6541%" height="15" fill="rgb(213,79,30)"/><text x="26.0472%" y="191.50"></text></g><g><title>misc_checking_3 (5,089,527 samples, 3.18%)</title><rect x="23.2793%" y="213" width="3.1807%" height="15" fill="rgb(246,177,23)"/><text x="23.5293%" y="223.50">mis..</text></g><g><title>impl_trait_ref (164,181 samples, 0.10%)</title><rect x="26.6358%" y="117" width="0.1026%" height="15" fill="rgb(230,62,27)"/><text x="26.8858%" y="127.50"></text></g><g><title>adt_destructor (328,424 samples, 0.21%)</title><rect x="26.5498%" y="165" width="0.2053%" height="15" fill="rgb(216,154,8)"/><text x="26.7998%" y="175.50"></text></g><g><title>coherent_trait (325,374 samples, 0.20%)</title><rect x="26.5517%" y="149" width="0.2033%" height="15" fill="rgb(244,35,45)"/><text x="26.8017%" y="159.50"></text></g><g><title>specialization_graph_of (323,474 samples, 0.20%)</title><rect x="26.5529%" y="133" width="0.2022%" height="15" fill="rgb(251,115,12)"/><text x="26.8029%" y="143.50"></text></g><g><title>impl_parent (2,737,890 samples, 1.71%)</title><rect x="29.7279%" y="149" width="1.7111%" height="15" fill="rgb(240,54,50)"/><text x="29.9779%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,587,575 samples, 0.99%)</title><rect x="30.4468%" y="133" width="0.9922%" height="15" fill="rgb(233,84,52)"/><text x="30.6968%" y="143.50"></text></g><g><title>impl_trait_ref (6,048,841 samples, 3.78%)</title><rect x="31.4389%" y="149" width="3.7803%" height="15" fill="rgb(207,117,47)"/><text x="31.6889%" y="159.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,446,650 samples, 2.78%)</title><rect x="32.4402%" y="133" width="2.7790%" height="15" fill="rgb(249,43,39)"/><text x="32.6902%" y="143.50">me..</text></g><g><title>trait_impls_of (1,106,377 samples, 0.69%)</title><rect x="35.2584%" y="149" width="0.6914%" height="15" fill="rgb(209,38,44)"/><text x="35.5084%" y="159.50"></text></g><g><title>implementations_of_trait (320,147 samples, 0.20%)</title><rect x="35.7498%" y="133" width="0.2001%" height="15" fill="rgb(236,212,23)"/><text x="35.9998%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (259,037 samples, 0.16%)</title><rect x="35.7880%" y="117" width="0.1619%" height="15" fill="rgb(242,79,21)"/><text x="36.0380%" y="127.50"></text></g><g><title>coherent_trait (15,092,107 samples, 9.43%)</title><rect x="26.5184%" y="181" width="9.4319%" height="15" fill="rgb(211,96,35)"/><text x="26.7684%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (14,558,711 samples, 9.10%)</title><rect x="26.8518%" y="165" width="9.0986%" height="15" fill="rgb(253,215,40)"/><text x="27.1018%" y="175.50">specializatio..</text></g><g><title>coherence_checking (15,176,508 samples, 9.48%)</title><rect x="26.5035%" y="197" width="9.4847%" height="15" fill="rgb(211,81,21)"/><text x="26.7535%" y="207.50">coherence_chec..</text></g><g><title>adt_sized_constraint (182,862 samples, 0.11%)</title><rect x="51.5166%" y="149" width="0.1143%" height="15" fill="rgb(208,190,38)"/><text x="51.7666%" y="159.50"></text></g><g><title>associated_item (539,974 samples, 0.34%)</title><rect x="51.7643%" y="133" width="0.3375%" height="15" fill="rgb(235,213,38)"/><text x="52.0143%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (429,684 samples, 0.27%)</title><rect x="51.8332%" y="117" width="0.2685%" height="15" fill="rgb(237,122,38)"/><text x="52.0832%" y="127.50"></text></g><g><title>associated_items (775,235 samples, 0.48%)</title><rect x="51.6373%" y="149" width="0.4845%" height="15" fill="rgb(244,218,35)"/><text x="51.8873%" y="159.50"></text></g><g><title>adt_def (384,944 samples, 0.24%)</title><rect x="52.4050%" y="85" width="0.2406%" height="15" fill="rgb(240,68,47)"/><text x="52.6550%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (384,704 samples, 0.24%)</title><rect x="52.4052%" y="69" width="0.2404%" height="15" fill="rgb(210,16,53)"/><text x="52.6552%" y="79.50"></text></g><g><title>item_attrs (381,084 samples, 0.24%)</title><rect x="52.4074%" y="53" width="0.2382%" height="15" fill="rgb(235,124,12)"/><text x="52.6574%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (380,704 samples, 0.24%)</title><rect x="52.4077%" y="37" width="0.2379%" height="15" fill="rgb(224,169,11)"/><text x="52.6577%" y="47.50"></text></g><g><title>adt_dtorck_constraint (391,974 samples, 0.24%)</title><rect x="52.4028%" y="101" width="0.2450%" height="15" fill="rgb(250,166,2)"/><text x="52.6528%" y="111.50"></text></g><g><title>adt_dtorck_constraint (467,174 samples, 0.29%)</title><rect x="52.3630%" y="117" width="0.2920%" height="15" fill="rgb(242,216,29)"/><text x="52.6130%" y="127.50"></text></g><g><title>adt_dtorck_constraint (597,026 samples, 0.37%)</title><rect x="52.2997%" y="133" width="0.3731%" height="15" fill="rgb(230,116,27)"/><text x="52.5497%" y="143.50"></text></g><g><title>dropck_outlives (830,519 samples, 0.52%)</title><rect x="52.1627%" y="149" width="0.5190%" height="15" fill="rgb(228,99,48)"/><text x="52.4127%" y="159.50"></text></g><g><title>generics_of (1,135,077 samples, 0.71%)</title><rect x="56.7992%" y="133" width="0.7094%" height="15" fill="rgb(253,11,6)"/><text x="57.0492%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (829,915 samples, 0.52%)</title><rect x="56.9899%" y="117" width="0.5187%" height="15" fill="rgb(247,143,39)"/><text x="57.2399%" y="127.50"></text></g><g><title>impl_polarity (205,921 samples, 0.13%)</title><rect x="57.5754%" y="133" width="0.1287%" height="15" fill="rgb(236,97,10)"/><text x="57.8254%" y="143.50"></text></g><g><title>impl_trait_ref (2,008,003 samples, 1.25%)</title><rect x="57.7041%" y="133" width="1.2549%" height="15" fill="rgb(233,208,19)"/><text x="57.9541%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,718,378 samples, 1.07%)</title><rect x="57.8851%" y="117" width="1.0739%" height="15" fill="rgb(216,164,2)"/><text x="58.1351%" y="127.50"></text></g><g><title>opt_def_kind (224,972 samples, 0.14%)</title><rect x="59.2462%" y="117" width="0.1406%" height="15" fill="rgb(220,129,5)"/><text x="59.4962%" y="127.50"></text></g><g><title>explicit_predicates_of (198,131 samples, 0.12%)</title><rect x="59.6139%" y="101" width="0.1238%" height="15" fill="rgb(242,17,10)"/><text x="59.8639%" y="111.50"></text></g><g><title>predicates_of (1,314,625 samples, 0.82%)</title><rect x="59.0250%" y="133" width="0.8216%" height="15" fill="rgb(242,107,0)"/><text x="59.2750%" y="143.50"></text></g><g><title>predicates_defined_on (735,758 samples, 0.46%)</title><rect x="59.3868%" y="117" width="0.4598%" height="15" fill="rgb(251,28,31)"/><text x="59.6368%" y="127.50"></text></g><g><title>inferred_outlives_of (174,173 samples, 0.11%)</title><rect x="59.7378%" y="101" width="0.1089%" height="15" fill="rgb(233,223,10)"/><text x="59.9878%" y="111.50"></text></g><g><title>specializes (3,360,139 samples, 2.10%)</title><rect x="59.8466%" y="133" width="2.0999%" height="15" fill="rgb(215,21,27)"/><text x="60.0966%" y="143.50">s..</text></g><g><title>param_env (1,921,208 samples, 1.20%)</title><rect x="60.7459%" y="117" width="1.2007%" height="15" fill="rgb(232,23,21)"/><text x="60.9959%" y="127.50"></text></g><g><title>def_span (891,063 samples, 0.56%)</title><rect x="61.3897%" y="101" width="0.5569%" height="15" fill="rgb(244,5,23)"/><text x="61.6397%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (794,852 samples, 0.50%)</title><rect x="61.4498%" y="85" width="0.4967%" height="15" fill="rgb(226,81,46)"/><text x="61.6998%" y="95.50"></text></g><g><title>trait_impls_of (660,213 samples, 0.41%)</title><rect x="61.9629%" y="133" width="0.4126%" height="15" fill="rgb(247,70,30)"/><text x="62.2129%" y="143.50"></text></g><g><title>implementations_of_trait (288,261 samples, 0.18%)</title><rect x="62.1953%" y="117" width="0.1802%" height="15" fill="rgb(212,68,19)"/><text x="62.4453%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (205,441 samples, 0.13%)</title><rect x="62.2471%" y="101" width="0.1284%" height="15" fill="rgb(240,187,13)"/><text x="62.4971%" y="111.50"></text></g><g><title>evaluate_obligation (15,550,434 samples, 9.72%)</title><rect x="52.6834%" y="149" width="9.7184%" height="15" fill="rgb(223,113,26)"/><text x="52.9334%" y="159.50">evaluate_oblig..</text></g><g><title>generics_of (241,075 samples, 0.15%)</title><rect x="62.5194%" y="149" width="0.1507%" height="15" fill="rgb(206,192,2)"/><text x="62.7694%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (190,044 samples, 0.12%)</title><rect x="62.5513%" y="133" width="0.1188%" height="15" fill="rgb(241,108,4)"/><text x="62.8013%" y="143.50"></text></g><g><title>item_attrs (186,670 samples, 0.12%)</title><rect x="62.8786%" y="149" width="0.1167%" height="15" fill="rgb(247,173,49)"/><text x="63.1286%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,190 samples, 0.11%)</title><rect x="62.8833%" y="133" width="0.1120%" height="15" fill="rgb(224,114,35)"/><text x="63.1333%" y="143.50"></text></g><g><title>evaluate_obligation (182,755 samples, 0.11%)</title><rect x="63.1294%" y="133" width="0.1142%" height="15" fill="rgb(245,159,27)"/><text x="63.3794%" y="143.50"></text></g><g><title>method_autoderef_steps (345,355 samples, 0.22%)</title><rect x="63.0344%" y="149" width="0.2158%" height="15" fill="rgb(245,172,44)"/><text x="63.2844%" y="159.50"></text></g><g><title>predicates_of (525,380 samples, 0.33%)</title><rect x="63.3714%" y="149" width="0.3283%" height="15" fill="rgb(236,23,11)"/><text x="63.6214%" y="159.50"></text></g><g><title>predicates_defined_on (332,547 samples, 0.21%)</title><rect x="63.4919%" y="133" width="0.2078%" height="15" fill="rgb(205,117,38)"/><text x="63.7419%" y="143.50"></text></g><g><title>specializes (186,561 samples, 0.12%)</title><rect x="63.7057%" y="149" width="0.1166%" height="15" fill="rgb(237,72,25)"/><text x="63.9557%" y="159.50"></text></g><g><title>associated_items (313,472 samples, 0.20%)</title><rect x="66.9553%" y="133" width="0.1959%" height="15" fill="rgb(244,70,9)"/><text x="67.2053%" y="143.50"></text></g><g><title>evaluate_obligation (1,136,361 samples, 0.71%)</title><rect x="67.2396%" y="133" width="0.7102%" height="15" fill="rgb(217,125,39)"/><text x="67.4896%" y="143.50"></text></g><g><title>method_autoderef_steps (198,072 samples, 0.12%)</title><rect x="68.1892%" y="133" width="0.1238%" height="15" fill="rgb(235,36,10)"/><text x="68.4392%" y="143.50"></text></g><g><title>typeck (7,261,341 samples, 4.54%)</title><rect x="63.9201%" y="149" width="4.5380%" height="15" fill="rgb(251,123,47)"/><text x="64.1701%" y="159.50">typeck</text></g><g><title>item_bodies_checking (51,978,724 samples, 32.48%)</title><rect x="36.0099%" y="197" width="32.4845%" height="15" fill="rgb(221,13,13)"/><text x="36.2599%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (51,975,274 samples, 32.48%)</title><rect x="36.0121%" y="181" width="32.4824%" height="15" fill="rgb(238,131,9)"/><text x="36.2621%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (51,890,144 samples, 32.43%)</title><rect x="36.0653%" y="165" width="32.4292%" height="15" fill="rgb(211,50,8)"/><text x="36.3153%" y="175.50">typeck</text></g><g><title>item_types_checking (1,750,110 samples, 1.09%)</title><rect x="68.4944%" y="197" width="1.0937%" height="15" fill="rgb(245,182,24)"/><text x="68.7444%" y="207.50"></text></g><g><title>check_mod_item_types (1,747,690 samples, 1.09%)</title><rect x="68.4960%" y="181" width="1.0922%" height="15" fill="rgb(242,14,37)"/><text x="68.7460%" y="191.50"></text></g><g><title>typeck (532,675 samples, 0.33%)</title><rect x="69.2553%" y="165" width="0.3329%" height="15" fill="rgb(246,228,12)"/><text x="69.5053%" y="175.50"></text></g><g><title>fn_sig (401,444 samples, 0.25%)</title><rect x="69.8026%" y="165" width="0.2509%" height="15" fill="rgb(213,55,15)"/><text x="70.0526%" y="175.50"></text></g><g><title>named_region_map (338,246 samples, 0.21%)</title><rect x="70.1899%" y="149" width="0.2114%" height="15" fill="rgb(209,9,3)"/><text x="70.4399%" y="159.50"></text></g><g><title>resolve_lifetimes (310,015 samples, 0.19%)</title><rect x="70.2075%" y="133" width="0.1937%" height="15" fill="rgb(230,59,30)"/><text x="70.4575%" y="143.50"></text></g><g><title>generics_of (576,060 samples, 0.36%)</title><rect x="70.0535%" y="165" width="0.3600%" height="15" fill="rgb(209,121,21)"/><text x="70.3035%" y="175.50"></text></g><g><title>explicit_predicates_of (194,551 samples, 0.12%)</title><rect x="70.5852%" y="133" width="0.1216%" height="15" fill="rgb(220,109,13)"/><text x="70.8352%" y="143.50"></text></g><g><title>lint_levels (224,923 samples, 0.14%)</title><rect x="70.9169%" y="85" width="0.1406%" height="15" fill="rgb(232,18,1)"/><text x="71.1669%" y="95.50"></text></g><g><title>predicates_of (971,792 samples, 0.61%)</title><rect x="70.4837%" y="165" width="0.6073%" height="15" fill="rgb(215,41,42)"/><text x="70.7337%" y="175.50"></text></g><g><title>predicates_defined_on (903,972 samples, 0.56%)</title><rect x="70.5260%" y="149" width="0.5649%" height="15" fill="rgb(224,123,36)"/><text x="70.7760%" y="159.50"></text></g><g><title>inferred_outlives_of (614,818 samples, 0.38%)</title><rect x="70.7068%" y="133" width="0.3842%" height="15" fill="rgb(240,125,3)"/><text x="70.9568%" y="143.50"></text></g><g><title>inferred_outlives_crate (594,557 samples, 0.37%)</title><rect x="70.7194%" y="117" width="0.3716%" height="15" fill="rgb(205,98,50)"/><text x="70.9694%" y="127.50"></text></g><g><title>type_of (524,445 samples, 0.33%)</title><rect x="70.7632%" y="101" width="0.3278%" height="15" fill="rgb(205,185,37)"/><text x="71.0132%" y="111.50"></text></g><g><title>type_collecting (2,671,520 samples, 1.67%)</title><rect x="69.5888%" y="197" width="1.6696%" height="15" fill="rgb(238,207,15)"/><text x="69.8388%" y="207.50"></text></g><g><title>collect_mod_item_types (2,663,640 samples, 1.66%)</title><rect x="69.5937%" y="181" width="1.6647%" height="15" fill="rgb(213,199,42)"/><text x="69.8437%" y="191.50"></text></g><g><title>type_of (204,960 samples, 0.13%)</title><rect x="71.1303%" y="165" width="0.1281%" height="15" fill="rgb(235,201,11)"/><text x="71.3803%" y="175.50"></text></g><g><title>evaluate_obligation (318,015 samples, 0.20%)</title><rect x="72.3362%" y="165" width="0.1987%" height="15" fill="rgb(207,46,11)"/><text x="72.5862%" y="175.50"></text></g><g><title>implied_outlives_bounds (195,304 samples, 0.12%)</title><rect x="72.5433%" y="165" width="0.1221%" height="15" fill="rgb(241,35,35)"/><text x="72.7933%" y="175.50"></text></g><g><title>param_env (210,713 samples, 0.13%)</title><rect x="72.6653%" y="165" width="0.1317%" height="15" fill="rgb(243,32,47)"/><text x="72.9153%" y="175.50"></text></g><g><title>region_scope_tree (421,642 samples, 0.26%)</title><rect x="72.8801%" y="165" width="0.2635%" height="15" fill="rgb(247,202,23)"/><text x="73.1301%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,801,760 samples, 1.75%)</title><rect x="71.4011%" y="181" width="1.7510%" height="15" fill="rgb(219,102,11)"/><text x="71.6511%" y="191.50"></text></g><g><title>adt_def (163,252 samples, 0.10%)</title><rect x="74.4170%" y="133" width="0.1020%" height="15" fill="rgb(243,110,44)"/><text x="74.6670%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (161,402 samples, 0.10%)</title><rect x="74.4181%" y="117" width="0.1009%" height="15" fill="rgb(222,74,54)"/><text x="74.6681%" y="127.50"></text></g><g><title>adt_sized_constraint (177,952 samples, 0.11%)</title><rect x="74.4114%" y="149" width="0.1112%" height="15" fill="rgb(216,99,12)"/><text x="74.6614%" y="159.50"></text></g><g><title>evaluate_obligation (700,707 samples, 0.44%)</title><rect x="74.1043%" y="165" width="0.4379%" height="15" fill="rgb(226,22,26)"/><text x="74.3543%" y="175.50"></text></g><g><title>object_safety_violations (210,622 samples, 0.13%)</title><rect x="74.6310%" y="165" width="0.1316%" height="15" fill="rgb(217,163,10)"/><text x="74.8810%" y="175.50"></text></g><g><title>param_env (317,711 samples, 0.20%)</title><rect x="74.7626%" y="165" width="0.1986%" height="15" fill="rgb(213,25,53)"/><text x="75.0126%" y="175.50"></text></g><g><title>region_scope_tree (229,390 samples, 0.14%)</title><rect x="75.0269%" y="165" width="0.1434%" height="15" fill="rgb(252,105,26)"/><text x="75.2769%" y="175.50"></text></g><g><title>check_item_well_formed (3,301,436 samples, 2.06%)</title><rect x="73.1521%" y="181" width="2.0633%" height="15" fill="rgb(220,39,43)"/><text x="73.4021%" y="191.50">c..</text></g><g><title>analysis (120,179,909 samples, 75.11%)</title><rect x="0.5439%" y="229" width="75.1074%" height="15" fill="rgb(229,68,48)"/><text x="0.7939%" y="239.50">analysis</text></g><g><title>type_check_crate (78,711,290 samples, 49.19%)</title><rect x="26.4600%" y="213" width="49.1913%" height="15" fill="rgb(252,8,32)"/><text x="26.7100%" y="223.50">type_check_crate</text></g><g><title>wf_checking (7,022,887 samples, 4.39%)</title><rect x="71.2623%" y="197" width="4.3890%" height="15" fill="rgb(223,20,43)"/><text x="71.5123%" y="207.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (697,589 samples, 0.44%)</title><rect x="75.2153%" y="181" width="0.4360%" height="15" fill="rgb(229,81,49)"/><text x="75.4653%" y="191.50"></text></g><g><title>codegen_crate (467,126 samples, 0.29%)</title><rect x="75.6589%" y="229" width="0.2919%" height="15" fill="rgb(236,28,36)"/><text x="75.9089%" y="239.50"></text></g><g><title>metadata_load_macro (305,542 samples, 0.19%)</title><rect x="84.5702%" y="181" width="0.1910%" height="15" fill="rgb(249,185,26)"/><text x="84.8202%" y="191.50"></text></g><g><title>macro_expand_crate (16,034,148 samples, 10.02%)</title><rect x="76.2768%" y="213" width="10.0207%" height="15" fill="rgb(249,174,33)"/><text x="76.5268%" y="223.50">macro_expand_c..</text></g><g><title>expand_crate (16,020,877 samples, 10.01%)</title><rect x="76.2851%" y="197" width="10.0124%" height="15" fill="rgb(233,201,37)"/><text x="76.5351%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,458,347 samples, 1.54%)</title><rect x="84.7611%" y="181" width="1.5364%" height="15" fill="rgb(221,78,26)"/><text x="85.0111%" y="191.50"></text></g><g><title>metadata_register_crate (937,909 samples, 0.59%)</title><rect x="85.7113%" y="165" width="0.5862%" height="15" fill="rgb(250,127,30)"/><text x="85.9613%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (447,395 samples, 0.28%)</title><rect x="86.2996%" y="213" width="0.2796%" height="15" fill="rgb(230,49,44)"/><text x="86.5496%" y="223.50"></text></g><g><title>finalize_macro_resolutions (184,802 samples, 0.12%)</title><rect x="86.5902%" y="197" width="0.1155%" height="15" fill="rgb(229,67,23)"/><text x="86.8402%" y="207.50"></text></g><g><title>late_resolve_crate (2,126,303 samples, 1.33%)</title><rect x="86.7057%" y="197" width="1.3289%" height="15" fill="rgb(249,83,47)"/><text x="86.9557%" y="207.50"></text></g><g><title>configure_and_expand (19,463,426 samples, 12.16%)</title><rect x="75.9508%" y="229" width="12.1638%" height="15" fill="rgb(215,43,3)"/><text x="76.2008%" y="239.50">configure_and_expa..</text></g><g><title>resolve_crate (2,456,868 samples, 1.54%)</title><rect x="86.5792%" y="213" width="1.5354%" height="15" fill="rgb(238,154,13)"/><text x="86.8292%" y="223.50"></text></g><g><title>drop_ast (241,612 samples, 0.15%)</title><rect x="88.1146%" y="229" width="0.1510%" height="15" fill="rgb(219,56,2)"/><text x="88.3646%" y="239.50"></text></g><g><title>early_lint_checks (482,316 samples, 0.30%)</title><rect x="88.2748%" y="229" width="0.3014%" height="15" fill="rgb(233,0,4)"/><text x="88.5248%" y="239.50"></text></g><g><title>free_global_ctxt (4,087,635 samples, 2.55%)</title><rect x="88.5763%" y="229" width="2.5546%" height="15" fill="rgb(235,30,7)"/><text x="88.8263%" y="239.50">fr..</text></g><g><title>generate_crate_metadata (1,270,384 samples, 0.79%)</title><rect x="91.1309%" y="229" width="0.7939%" height="15" fill="rgb(250,79,13)"/><text x="91.3809%" y="239.50"></text></g><g><title>hir_lowering (3,306,456 samples, 2.07%)</title><rect x="91.9248%" y="229" width="2.0664%" height="15" fill="rgb(211,146,34)"/><text x="92.1748%" y="239.50">h..</text></g><g><title>parse_crate (7,652,715 samples, 4.78%)</title><rect x="94.0268%" y="229" width="4.7826%" height="15" fill="rgb(228,22,38)"/><text x="94.2768%" y="239.50">parse_..</text></g><g><title>prepare_outputs (209,422 samples, 0.13%)</title><rect x="98.8157%" y="229" width="0.1309%" height="15" fill="rgb(235,168,5)"/><text x="99.0657%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,233,223 samples, 0.77%)</title><rect x="98.9465%" y="229" width="0.7707%" height="15" fill="rgb(221,155,16)"/><text x="99.1965%" y="239.50"></text></g><g><title>all (160,010,698 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (160,010,698 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (338,903 samples, 0.21%)</title><rect x="99.7882%" y="229" width="0.2118%" height="15" fill="rgb(234,103,6)"/><text x="100.0382%" y="239.50"></text></g></svg></svg>