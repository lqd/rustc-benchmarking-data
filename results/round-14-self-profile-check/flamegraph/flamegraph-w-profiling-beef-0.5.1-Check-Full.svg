<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (230,630 samples, 0.22%)</title><rect x="10.7357%" y="149" width="0.2248%" height="15" fill="rgb(227,0,7)"/><text x="10.9857%" y="159.50"></text></g><g><title>item_attrs (135,861 samples, 0.13%)</title><rect x="11.3625%" y="117" width="0.1324%" height="15" fill="rgb(217,0,24)"/><text x="11.6125%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (130,701 samples, 0.13%)</title><rect x="11.3676%" y="101" width="0.1274%" height="15" fill="rgb(221,193,54)"/><text x="11.6176%" y="111.50"></text></g><g><title>codegen_fn_attrs (196,902 samples, 0.19%)</title><rect x="11.3097%" y="133" width="0.1919%" height="15" fill="rgb(248,212,6)"/><text x="11.5597%" y="143.50"></text></g><g><title>needs_drop_raw (371,577 samples, 0.36%)</title><rect x="13.2138%" y="117" width="0.3621%" height="15" fill="rgb(208,68,35)"/><text x="13.4638%" y="127.50"></text></g><g><title>is_copy_raw (317,846 samples, 0.31%)</title><rect x="13.2662%" y="101" width="0.3097%" height="15" fill="rgb(232,128,0)"/><text x="13.5162%" y="111.50"></text></g><g><title>evaluate_obligation (264,105 samples, 0.26%)</title><rect x="13.3185%" y="85" width="0.2574%" height="15" fill="rgb(207,160,47)"/><text x="13.5685%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (268,513 samples, 0.26%)</title><rect x="13.7816%" y="101" width="0.2617%" height="15" fill="rgb(228,23,34)"/><text x="14.0316%" y="111.50"></text></g><g><title>resolve_instance (622,406 samples, 0.61%)</title><rect x="13.5759%" y="117" width="0.6065%" height="15" fill="rgb(218,30,26)"/><text x="13.8259%" y="127.50"></text></g><g><title>thir_body (618,186 samples, 0.60%)</title><rect x="14.2069%" y="117" width="0.6024%" height="15" fill="rgb(220,122,19)"/><text x="14.4569%" y="127.50"></text></g><g><title>mir_const (4,878,248 samples, 4.75%)</title><rect x="10.1120%" y="165" width="4.7540%" height="15" fill="rgb(250,228,42)"/><text x="10.3620%" y="175.50">mir_co..</text></g><g><title>unsafety_check_result (4,007,591 samples, 3.91%)</title><rect x="10.9604%" y="149" width="3.9055%" height="15" fill="rgb(240,193,28)"/><text x="11.2104%" y="159.50">unsa..</text></g><g><title>mir_built (3,452,325 samples, 3.36%)</title><rect x="11.5015%" y="133" width="3.3644%" height="15" fill="rgb(216,20,37)"/><text x="11.7515%" y="143.50">mir..</text></g><g><title>is_freeze_raw (109,461 samples, 0.11%)</title><rect x="15.0310%" y="149" width="0.1067%" height="15" fill="rgb(206,188,39)"/><text x="15.2810%" y="159.50"></text></g><g><title>evaluate_obligation (105,881 samples, 0.10%)</title><rect x="15.0345%" y="133" width="0.1032%" height="15" fill="rgb(217,207,13)"/><text x="15.2845%" y="143.50"></text></g><g><title>mir_const (220,512 samples, 0.21%)</title><rect x="15.1507%" y="149" width="0.2149%" height="15" fill="rgb(231,73,38)"/><text x="15.4007%" y="159.50"></text></g><g><title>unsafety_check_result (185,191 samples, 0.18%)</title><rect x="15.1851%" y="133" width="0.1805%" height="15" fill="rgb(225,20,46)"/><text x="15.4351%" y="143.50"></text></g><g><title>mir_built (166,251 samples, 0.16%)</title><rect x="15.2036%" y="117" width="0.1620%" height="15" fill="rgb(210,31,41)"/><text x="15.4536%" y="127.50"></text></g><g><title>mir_promoted (5,993,411 samples, 5.84%)</title><rect x="9.5427%" y="181" width="5.8407%" height="15" fill="rgb(221,200,47)"/><text x="9.7927%" y="191.50">mir_pro..</text></g><g><title>mir_const_qualif (531,015 samples, 0.52%)</title><rect x="14.8659%" y="165" width="0.5175%" height="15" fill="rgb(226,26,5)"/><text x="15.1159%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (443,905 samples, 0.43%)</title><rect x="15.3834%" y="181" width="0.4326%" height="15" fill="rgb(249,33,26)"/><text x="15.6334%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (241,004 samples, 0.23%)</title><rect x="15.8160%" y="181" width="0.2349%" height="15" fill="rgb(235,183,28)"/><text x="16.0660%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,371,250 samples, 1.34%)</title><rect x="16.1309%" y="181" width="1.3363%" height="15" fill="rgb(221,5,38)"/><text x="16.3809%" y="191.50"></text></g><g><title>MIR_borrow_checking (16,877,616 samples, 16.45%)</title><rect x="1.0226%" y="213" width="16.4476%" height="15" fill="rgb(247,18,42)"/><text x="1.2726%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,764,556 samples, 16.34%)</title><rect x="1.1328%" y="197" width="16.3374%" height="15" fill="rgb(241,131,45)"/><text x="1.3828%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (225,213 samples, 0.22%)</title><rect x="17.4702%" y="213" width="0.2195%" height="15" fill="rgb(249,31,29)"/><text x="17.7202%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (172,582 samples, 0.17%)</title><rect x="17.5215%" y="197" width="0.1682%" height="15" fill="rgb(225,111,53)"/><text x="17.7715%" y="207.50"></text></g><g><title>hir_module_items (183,291 samples, 0.18%)</title><rect x="17.6897%" y="213" width="0.1786%" height="15" fill="rgb(238,160,17)"/><text x="17.9397%" y="223.50"></text></g><g><title>codegen_fn_attrs (223,041 samples, 0.22%)</title><rect x="18.2176%" y="149" width="0.2174%" height="15" fill="rgb(214,148,48)"/><text x="18.4676%" y="159.50"></text></g><g><title>codegen_fn_attrs (381,655 samples, 0.37%)</title><rect x="18.0701%" y="181" width="0.3719%" height="15" fill="rgb(232,36,49)"/><text x="18.3201%" y="191.50"></text></g><g><title>should_inherit_track_caller (331,524 samples, 0.32%)</title><rect x="18.1189%" y="165" width="0.3231%" height="15" fill="rgb(209,103,24)"/><text x="18.3689%" y="175.50"></text></g><g><title>check_mod_attrs (562,887 samples, 0.55%)</title><rect x="17.8935%" y="197" width="0.5485%" height="15" fill="rgb(229,88,8)"/><text x="18.1435%" y="207.50"></text></g><g><title>check_mod_const_bodies (109,601 samples, 0.11%)</title><rect x="18.4421%" y="197" width="0.1068%" height="15" fill="rgb(213,181,19)"/><text x="18.6921%" y="207.50"></text></g><g><title>lookup_deprecation_entry (167,492 samples, 0.16%)</title><rect x="18.8107%" y="181" width="0.1632%" height="15" fill="rgb(254,191,54)"/><text x="19.0607%" y="191.50"></text></g><g><title>stability_index (108,411 samples, 0.11%)</title><rect x="18.8682%" y="165" width="0.1056%" height="15" fill="rgb(241,83,37)"/><text x="19.1182%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (454,415 samples, 0.44%)</title><rect x="18.6213%" y="197" width="0.4428%" height="15" fill="rgb(233,36,39)"/><text x="18.8713%" y="207.50"></text></g><g><title>misc_checking_1 (1,286,414 samples, 1.25%)</title><rect x="17.8688%" y="213" width="1.2536%" height="15" fill="rgb(226,3,54)"/><text x="18.1188%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (341,503 samples, 0.33%)</title><rect x="19.1240%" y="197" width="0.3328%" height="15" fill="rgb(245,192,40)"/><text x="19.3740%" y="207.50"></text></g><g><title>check_mod_liveness (270,092 samples, 0.26%)</title><rect x="19.1936%" y="181" width="0.2632%" height="15" fill="rgb(238,167,29)"/><text x="19.4436%" y="191.50"></text></g><g><title>misc_checking_2 (679,497 samples, 0.66%)</title><rect x="19.1224%" y="213" width="0.6622%" height="15" fill="rgb(232,182,51)"/><text x="19.3724%" y="223.50"></text></g><g><title>match_checking (336,364 samples, 0.33%)</title><rect x="19.4568%" y="197" width="0.3278%" height="15" fill="rgb(231,60,39)"/><text x="19.7068%" y="207.50"></text></g><g><title>check_match (307,854 samples, 0.30%)</title><rect x="19.4846%" y="181" width="0.3000%" height="15" fill="rgb(208,69,12)"/><text x="19.7346%" y="191.50"></text></g><g><title>check_private_in_public (215,432 samples, 0.21%)</title><rect x="19.7943%" y="197" width="0.2099%" height="15" fill="rgb(235,93,37)"/><text x="20.0443%" y="207.50"></text></g><g><title>death_checking (458,255 samples, 0.45%)</title><rect x="20.0043%" y="197" width="0.4466%" height="15" fill="rgb(213,116,39)"/><text x="20.2543%" y="207.50"></text></g><g><title>item_attrs (102,751 samples, 0.10%)</title><rect x="20.3507%" y="181" width="0.1001%" height="15" fill="rgb(222,207,29)"/><text x="20.6007%" y="191.50"></text></g><g><title>eval_to_const_value_raw (200,322 samples, 0.20%)</title><rect x="20.8235%" y="165" width="0.1952%" height="15" fill="rgb(206,96,30)"/><text x="21.0735%" y="175.50"></text></g><g><title>eval_to_const_value_raw (198,342 samples, 0.19%)</title><rect x="20.8254%" y="149" width="0.1933%" height="15" fill="rgb(218,138,4)"/><text x="21.0754%" y="159.50"></text></g><g><title>eval_to_allocation_raw (195,062 samples, 0.19%)</title><rect x="20.8286%" y="133" width="0.1901%" height="15" fill="rgb(250,191,14)"/><text x="21.0786%" y="143.50"></text></g><g><title>param_env (263,964 samples, 0.26%)</title><rect x="21.0187%" y="165" width="0.2572%" height="15" fill="rgb(239,60,40)"/><text x="21.2687%" y="175.50"></text></g><g><title>predicates_of (112,352 samples, 0.11%)</title><rect x="21.1665%" y="149" width="0.1095%" height="15" fill="rgb(206,27,48)"/><text x="21.4165%" y="159.50"></text></g><g><title>crate_lints (1,253,104 samples, 1.22%)</title><rect x="20.4522%" y="181" width="1.2212%" height="15" fill="rgb(225,35,8)"/><text x="20.7022%" y="191.50"></text></g><g><title>type_of (406,503 samples, 0.40%)</title><rect x="21.2772%" y="165" width="0.3961%" height="15" fill="rgb(250,213,24)"/><text x="21.5272%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (318,132 samples, 0.31%)</title><rect x="21.3633%" y="149" width="0.3100%" height="15" fill="rgb(247,123,22)"/><text x="21.6133%" y="159.50"></text></g><g><title>lint_checking (1,486,726 samples, 1.45%)</title><rect x="20.4508%" y="197" width="1.4488%" height="15" fill="rgb(231,138,38)"/><text x="20.7008%" y="207.50"></text></g><g><title>module_lints (232,232 samples, 0.23%)</title><rect x="21.6734%" y="181" width="0.2263%" height="15" fill="rgb(231,145,46)"/><text x="21.9234%" y="191.50"></text></g><g><title>lint_mod (225,952 samples, 0.22%)</title><rect x="21.6795%" y="165" width="0.2202%" height="15" fill="rgb(251,118,11)"/><text x="21.9295%" y="175.50"></text></g><g><title>privacy_access_levels (368,334 samples, 0.36%)</title><rect x="21.8997%" y="197" width="0.3589%" height="15" fill="rgb(217,147,25)"/><text x="22.1497%" y="207.50"></text></g><g><title>privacy_checking_modules (751,889 samples, 0.73%)</title><rect x="22.2586%" y="197" width="0.7327%" height="15" fill="rgb(247,81,37)"/><text x="22.5086%" y="207.50"></text></g><g><title>check_mod_privacy (747,209 samples, 0.73%)</title><rect x="22.2632%" y="181" width="0.7282%" height="15" fill="rgb(209,12,38)"/><text x="22.5132%" y="191.50"></text></g><g><title>misc_checking_3 (3,311,327 samples, 3.23%)</title><rect x="19.7846%" y="213" width="3.2270%" height="15" fill="rgb(227,1,9)"/><text x="20.0346%" y="223.50">mis..</text></g><g><title>adt_destructor (149,842 samples, 0.15%)</title><rect x="23.1353%" y="165" width="0.1460%" height="15" fill="rgb(248,47,43)"/><text x="23.3853%" y="175.50"></text></g><g><title>coherent_trait (142,032 samples, 0.14%)</title><rect x="23.1429%" y="149" width="0.1384%" height="15" fill="rgb(221,10,30)"/><text x="23.3929%" y="159.50"></text></g><g><title>specialization_graph_of (140,762 samples, 0.14%)</title><rect x="23.1441%" y="133" width="0.1372%" height="15" fill="rgb(210,229,1)"/><text x="23.3941%" y="143.50"></text></g><g><title>impl_parent (1,462,034 samples, 1.42%)</title><rect x="25.4623%" y="149" width="1.4248%" height="15" fill="rgb(222,148,37)"/><text x="25.7123%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (688,356 samples, 0.67%)</title><rect x="26.2162%" y="133" width="0.6708%" height="15" fill="rgb(234,67,33)"/><text x="26.4662%" y="143.50"></text></g><g><title>impl_trait_ref (2,346,787 samples, 2.29%)</title><rect x="26.8871%" y="149" width="2.2870%" height="15" fill="rgb(247,98,35)"/><text x="27.1371%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,799,810 samples, 1.75%)</title><rect x="27.4201%" y="133" width="1.7540%" height="15" fill="rgb(247,138,52)"/><text x="27.6701%" y="143.50"></text></g><g><title>trait_impls_of (452,777 samples, 0.44%)</title><rect x="29.1934%" y="149" width="0.4412%" height="15" fill="rgb(213,79,30)"/><text x="29.4434%" y="159.50"></text></g><g><title>implementations_of_trait (120,080 samples, 0.12%)</title><rect x="29.5176%" y="133" width="0.1170%" height="15" fill="rgb(246,177,23)"/><text x="29.7676%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (103,320 samples, 0.10%)</title><rect x="29.5339%" y="117" width="0.1007%" height="15" fill="rgb(230,62,27)"/><text x="29.7839%" y="127.50"></text></g><g><title>coherent_trait (6,707,785 samples, 6.54%)</title><rect x="23.0990%" y="181" width="6.5369%" height="15" fill="rgb(216,154,8)"/><text x="23.3490%" y="191.50">coherent_..</text></g><g><title>specialization_graph_of (6,490,222 samples, 6.32%)</title><rect x="23.3110%" y="165" width="6.3249%" height="15" fill="rgb(244,35,45)"/><text x="23.5610%" y="175.50">speciali..</text></g><g><title>coherence_checking (6,842,585 samples, 6.67%)</title><rect x="23.0772%" y="197" width="6.6682%" height="15" fill="rgb(251,115,12)"/><text x="23.3272%" y="207.50">coherence..</text></g><g><title>associated_item (380,584 samples, 0.37%)</title><rect x="43.3911%" y="133" width="0.3709%" height="15" fill="rgb(240,54,50)"/><text x="43.6411%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (308,993 samples, 0.30%)</title><rect x="43.4608%" y="117" width="0.3011%" height="15" fill="rgb(233,84,52)"/><text x="43.7108%" y="127.50"></text></g><g><title>associated_items (528,155 samples, 0.51%)</title><rect x="43.2676%" y="149" width="0.5147%" height="15" fill="rgb(207,117,47)"/><text x="43.5176%" y="159.50"></text></g><g><title>adt_def (193,623 samples, 0.19%)</title><rect x="44.0500%" y="85" width="0.1887%" height="15" fill="rgb(249,43,39)"/><text x="44.3000%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (193,293 samples, 0.19%)</title><rect x="44.0503%" y="69" width="0.1884%" height="15" fill="rgb(209,38,44)"/><text x="44.3003%" y="79.50"></text></g><g><title>item_attrs (188,183 samples, 0.18%)</title><rect x="44.0553%" y="53" width="0.1834%" height="15" fill="rgb(236,212,23)"/><text x="44.3053%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (187,733 samples, 0.18%)</title><rect x="44.0557%" y="37" width="0.1829%" height="15" fill="rgb(242,79,21)"/><text x="44.3057%" y="47.50"></text></g><g><title>adt_dtorck_constraint (233,843 samples, 0.23%)</title><rect x="44.0424%" y="101" width="0.2279%" height="15" fill="rgb(211,96,35)"/><text x="44.2924%" y="111.50"></text></g><g><title>adt_dtorck_constraint (243,363 samples, 0.24%)</title><rect x="44.0364%" y="117" width="0.2372%" height="15" fill="rgb(253,215,40)"/><text x="44.2864%" y="127.50"></text></g><g><title>adt_dtorck_constraint (288,173 samples, 0.28%)</title><rect x="44.0016%" y="133" width="0.2808%" height="15" fill="rgb(211,81,21)"/><text x="44.2516%" y="143.50"></text></g><g><title>dropck_outlives (526,747 samples, 0.51%)</title><rect x="43.8282%" y="149" width="0.5133%" height="15" fill="rgb(208,190,38)"/><text x="44.0782%" y="159.50"></text></g><g><title>explicit_predicates_of (305,964 samples, 0.30%)</title><rect x="46.2291%" y="101" width="0.2982%" height="15" fill="rgb(235,213,38)"/><text x="46.4791%" y="111.50"></text></g><g><title>predicates_of (475,626 samples, 0.46%)</title><rect x="46.0935%" y="133" width="0.4635%" height="15" fill="rgb(237,122,38)"/><text x="46.3435%" y="143.50"></text></g><g><title>predicates_defined_on (385,886 samples, 0.38%)</title><rect x="46.1810%" y="117" width="0.3761%" height="15" fill="rgb(244,218,35)"/><text x="46.4310%" y="127.50"></text></g><g><title>specializes (502,016 samples, 0.49%)</title><rect x="46.5571%" y="133" width="0.4892%" height="15" fill="rgb(240,68,47)"/><text x="46.8071%" y="143.50"></text></g><g><title>param_env (318,816 samples, 0.31%)</title><rect x="46.7356%" y="117" width="0.3107%" height="15" fill="rgb(210,16,53)"/><text x="46.9856%" y="127.50"></text></g><g><title>def_span (142,722 samples, 0.14%)</title><rect x="46.9072%" y="101" width="0.1391%" height="15" fill="rgb(235,124,12)"/><text x="47.1572%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (128,572 samples, 0.13%)</title><rect x="46.9210%" y="85" width="0.1253%" height="15" fill="rgb(224,169,11)"/><text x="47.1710%" y="95.50"></text></g><g><title>trait_impls_of (198,232 samples, 0.19%)</title><rect x="47.0527%" y="133" width="0.1932%" height="15" fill="rgb(250,166,2)"/><text x="47.3027%" y="143.50"></text></g><g><title>evaluate_obligation (2,985,375 samples, 2.91%)</title><rect x="44.3416%" y="149" width="2.9093%" height="15" fill="rgb(242,216,29)"/><text x="44.5916%" y="159.50">ev..</text></g><g><title>evaluate_obligation (464,143 samples, 0.45%)</title><rect x="48.1218%" y="133" width="0.4523%" height="15" fill="rgb(230,116,27)"/><text x="48.3718%" y="143.50"></text></g><g><title>method_autoderef_steps (1,019,241 samples, 0.99%)</title><rect x="47.5998%" y="149" width="0.9933%" height="15" fill="rgb(228,99,48)"/><text x="47.8498%" y="159.50"></text></g><g><title>predicates_of (193,583 samples, 0.19%)</title><rect x="48.6391%" y="149" width="0.1887%" height="15" fill="rgb(253,11,6)"/><text x="48.8891%" y="159.50"></text></g><g><title>predicates_defined_on (132,073 samples, 0.13%)</title><rect x="48.6990%" y="133" width="0.1287%" height="15" fill="rgb(247,143,39)"/><text x="48.9490%" y="143.50"></text></g><g><title>item_bodies_checking (19,630,917 samples, 19.13%)</title><rect x="29.7902%" y="197" width="19.1307%" height="15" fill="rgb(236,97,10)"/><text x="30.0402%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,628,387 samples, 19.13%)</title><rect x="29.7927%" y="181" width="19.1283%" height="15" fill="rgb(233,208,19)"/><text x="30.0427%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (19,545,827 samples, 19.05%)</title><rect x="29.8731%" y="165" width="19.0478%" height="15" fill="rgb(216,164,2)"/><text x="30.1231%" y="175.50">typeck</text></g><g><title>evaluate_obligation (128,651 samples, 0.13%)</title><rect x="50.4461%" y="165" width="0.1254%" height="15" fill="rgb(220,129,5)"/><text x="50.6961%" y="175.50"></text></g><g><title>associated_item (109,332 samples, 0.11%)</title><rect x="50.9510%" y="133" width="0.1065%" height="15" fill="rgb(242,17,10)"/><text x="51.2010%" y="143.50"></text></g><g><title>associated_items (145,122 samples, 0.14%)</title><rect x="50.9185%" y="149" width="0.1414%" height="15" fill="rgb(242,107,0)"/><text x="51.1685%" y="159.50"></text></g><g><title>item_types_checking (2,300,145 samples, 2.24%)</title><rect x="48.9210%" y="197" width="2.2415%" height="15" fill="rgb(251,28,31)"/><text x="49.1710%" y="207.50">i..</text></g><g><title>check_mod_item_types (2,292,685 samples, 2.23%)</title><rect x="48.9282%" y="181" width="2.2343%" height="15" fill="rgb(233,223,10)"/><text x="49.1782%" y="191.50">c..</text></g><g><title>typeck (429,655 samples, 0.42%)</title><rect x="50.7438%" y="165" width="0.4187%" height="15" fill="rgb(215,21,27)"/><text x="50.9938%" y="175.50"></text></g><g><title>fn_sig (450,195 samples, 0.44%)</title><rect x="51.4798%" y="165" width="0.4387%" height="15" fill="rgb(232,23,21)"/><text x="51.7298%" y="175.50"></text></g><g><title>is_late_bound_map (591,217 samples, 0.58%)</title><rect x="52.0733%" y="149" width="0.5762%" height="15" fill="rgb(244,5,23)"/><text x="52.3233%" y="159.50"></text></g><g><title>resolve_lifetimes (544,457 samples, 0.53%)</title><rect x="52.1188%" y="133" width="0.5306%" height="15" fill="rgb(226,81,46)"/><text x="52.3688%" y="143.50"></text></g><g><title>generics_of (836,408 samples, 0.82%)</title><rect x="51.9185%" y="165" width="0.8151%" height="15" fill="rgb(247,70,30)"/><text x="52.1685%" y="175.50"></text></g><g><title>impl_trait_ref (132,291 samples, 0.13%)</title><rect x="52.7336%" y="165" width="0.1289%" height="15" fill="rgb(212,68,19)"/><text x="52.9836%" y="175.50"></text></g><g><title>explicit_predicates_of (421,217 samples, 0.41%)</title><rect x="53.0627%" y="133" width="0.4105%" height="15" fill="rgb(240,187,13)"/><text x="53.3127%" y="143.50"></text></g><g><title>predicates_of (797,051 samples, 0.78%)</title><rect x="52.9016%" y="165" width="0.7767%" height="15" fill="rgb(223,113,26)"/><text x="53.1516%" y="175.50"></text></g><g><title>predicates_defined_on (730,650 samples, 0.71%)</title><rect x="52.9663%" y="149" width="0.7120%" height="15" fill="rgb(206,192,2)"/><text x="53.2163%" y="159.50"></text></g><g><title>inferred_outlives_of (210,502 samples, 0.21%)</title><rect x="53.4732%" y="133" width="0.2051%" height="15" fill="rgb(241,108,4)"/><text x="53.7232%" y="143.50"></text></g><g><title>inferred_outlives_crate (185,612 samples, 0.18%)</title><rect x="53.4975%" y="117" width="0.1809%" height="15" fill="rgb(247,173,49)"/><text x="53.7475%" y="127.50"></text></g><g><title>type_of (107,181 samples, 0.10%)</title><rect x="53.5739%" y="101" width="0.1045%" height="15" fill="rgb(224,114,35)"/><text x="53.8239%" y="111.50"></text></g><g><title>type_collecting (2,860,072 samples, 2.79%)</title><rect x="51.1657%" y="197" width="2.7872%" height="15" fill="rgb(245,159,27)"/><text x="51.4157%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (2,844,591 samples, 2.77%)</title><rect x="51.1808%" y="181" width="2.7721%" height="15" fill="rgb(245,172,44)"/><text x="51.4308%" y="191.50">co..</text></g><g><title>type_of (281,753 samples, 0.27%)</title><rect x="53.6783%" y="165" width="0.2746%" height="15" fill="rgb(236,23,11)"/><text x="53.9283%" y="175.50"></text></g><g><title>evaluate_obligation (568,832 samples, 0.55%)</title><rect x="56.7112%" y="165" width="0.5543%" height="15" fill="rgb(205,117,38)"/><text x="56.9612%" y="175.50"></text></g><g><title>implied_outlives_bounds (305,222 samples, 0.30%)</title><rect x="57.2693%" y="165" width="0.2974%" height="15" fill="rgb(237,72,25)"/><text x="57.5193%" y="175.50"></text></g><g><title>param_env (426,643 samples, 0.42%)</title><rect x="57.5667%" y="165" width="0.4158%" height="15" fill="rgb(244,70,9)"/><text x="57.8167%" y="175.50"></text></g><g><title>region_scope_tree (262,065 samples, 0.26%)</title><rect x="58.0390%" y="165" width="0.2554%" height="15" fill="rgb(217,125,39)"/><text x="58.2890%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,214,127 samples, 4.11%)</title><rect x="54.1961%" y="181" width="4.1068%" height="15" fill="rgb(235,36,10)"/><text x="54.4461%" y="191.50">chec..</text></g><g><title>adt_sized_constraint (122,361 samples, 0.12%)</title><rect x="61.4834%" y="149" width="0.1192%" height="15" fill="rgb(251,123,47)"/><text x="61.7334%" y="159.50"></text></g><g><title>evaluate_obligation (297,493 samples, 0.29%)</title><rect x="61.3200%" y="165" width="0.2899%" height="15" fill="rgb(221,13,13)"/><text x="61.5700%" y="175.50"></text></g><g><title>implied_outlives_bounds (213,603 samples, 0.21%)</title><rect x="61.6417%" y="165" width="0.2082%" height="15" fill="rgb(238,131,9)"/><text x="61.8917%" y="175.50"></text></g><g><title>param_env (469,954 samples, 0.46%)</title><rect x="61.8559%" y="165" width="0.4580%" height="15" fill="rgb(211,50,8)"/><text x="62.1059%" y="175.50"></text></g><g><title>predicates_of (112,372 samples, 0.11%)</title><rect x="62.3139%" y="165" width="0.1095%" height="15" fill="rgb(245,182,24)"/><text x="62.5639%" y="175.50"></text></g><g><title>check_item_well_formed (4,381,696 samples, 4.27%)</title><rect x="58.3028%" y="181" width="4.2701%" height="15" fill="rgb(242,14,37)"/><text x="58.5528%" y="191.50">check..</text></g><g><title>variances_of (105,391 samples, 0.10%)</title><rect x="62.4702%" y="165" width="0.1027%" height="15" fill="rgb(246,228,12)"/><text x="62.7202%" y="175.50"></text></g><g><title>implied_outlives_bounds (122,401 samples, 0.12%)</title><rect x="63.1200%" y="165" width="0.1193%" height="15" fill="rgb(213,55,15)"/><text x="63.3700%" y="175.50"></text></g><g><title>analysis (64,200,870 samples, 62.57%)</title><rect x="0.7742%" y="229" width="62.5651%" height="15" fill="rgb(209,9,3)"/><text x="1.0242%" y="239.50">analysis</text></g><g><title>type_check_crate (41,382,158 samples, 40.33%)</title><rect x="23.0116%" y="213" width="40.3278%" height="15" fill="rgb(230,59,30)"/><text x="23.2616%" y="223.50">type_check_crate</text></g><g><title>wf_checking (9,627,037 samples, 9.38%)</title><rect x="53.9576%" y="197" width="9.3817%" height="15" fill="rgb(209,121,21)"/><text x="54.2076%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (786,480 samples, 0.77%)</title><rect x="62.5729%" y="181" width="0.7664%" height="15" fill="rgb(220,109,13)"/><text x="62.8229%" y="191.50"></text></g><g><title>codegen_crate (312,083 samples, 0.30%)</title><rect x="63.3494%" y="229" width="0.3041%" height="15" fill="rgb(232,18,1)"/><text x="63.5994%" y="239.50"></text></g><g><title>AST_validation (209,072 samples, 0.20%)</title><rect x="63.8581%" y="213" width="0.2037%" height="15" fill="rgb(215,41,42)"/><text x="64.1081%" y="223.50"></text></g><g><title>metadata_load_macro (166,782 samples, 0.16%)</title><rect x="86.4415%" y="181" width="0.1625%" height="15" fill="rgb(224,123,36)"/><text x="86.6915%" y="191.50"></text></g><g><title>metadata_register_crate (234,172 samples, 0.23%)</title><rect x="86.6041%" y="181" width="0.2282%" height="15" fill="rgb(240,125,3)"/><text x="86.8541%" y="191.50"></text></g><g><title>macro_expand_crate (23,531,930 samples, 22.93%)</title><rect x="64.2098%" y="213" width="22.9324%" height="15" fill="rgb(205,98,50)"/><text x="64.4598%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (23,515,430 samples, 22.92%)</title><rect x="64.2258%" y="197" width="22.9163%" height="15" fill="rgb(205,185,37)"/><text x="64.4758%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (317,952 samples, 0.31%)</title><rect x="86.8323%" y="181" width="0.3099%" height="15" fill="rgb(238,207,15)"/><text x="87.0823%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (157,992 samples, 0.15%)</title><rect x="87.1464%" y="213" width="0.1540%" height="15" fill="rgb(213,199,42)"/><text x="87.3964%" y="223.50"></text></g><g><title>finalize_macro_resolutions (124,861 samples, 0.12%)</title><rect x="87.4023%" y="197" width="0.1217%" height="15" fill="rgb(235,201,11)"/><text x="87.6523%" y="207.50"></text></g><g><title>late_resolve_crate (2,492,588 samples, 2.43%)</title><rect x="87.5240%" y="197" width="2.4291%" height="15" fill="rgb(207,46,11)"/><text x="87.7740%" y="207.50">la..</text></g><g><title>configure_and_expand (27,155,180 samples, 26.46%)</title><rect x="63.6535%" y="229" width="26.4633%" height="15" fill="rgb(241,35,35)"/><text x="63.9035%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,890,032 samples, 2.82%)</title><rect x="87.3004%" y="213" width="2.8164%" height="15" fill="rgb(243,32,47)"/><text x="87.5504%" y="223.50">re..</text></g><g><title>drop_ast (183,012 samples, 0.18%)</title><rect x="90.1168%" y="229" width="0.1783%" height="15" fill="rgb(247,202,23)"/><text x="90.3668%" y="239.50"></text></g><g><title>early_lint_checks (292,653 samples, 0.29%)</title><rect x="90.3106%" y="229" width="0.2852%" height="15" fill="rgb(219,102,11)"/><text x="90.5606%" y="239.50"></text></g><g><title>free_global_ctxt (2,367,406 samples, 2.31%)</title><rect x="90.5958%" y="229" width="2.3071%" height="15" fill="rgb(243,110,44)"/><text x="90.8458%" y="239.50">f..</text></g><g><title>generate_crate_metadata (1,409,476 samples, 1.37%)</title><rect x="92.9028%" y="229" width="1.3736%" height="15" fill="rgb(222,74,54)"/><text x="93.1528%" y="239.50"></text></g><g><title>hir_lowering (3,092,715 samples, 3.01%)</title><rect x="94.2764%" y="229" width="3.0139%" height="15" fill="rgb(216,99,12)"/><text x="94.5264%" y="239.50">hir..</text></g><g><title>parse_crate (1,339,055 samples, 1.30%)</title><rect x="97.3385%" y="229" width="1.3049%" height="15" fill="rgb(226,22,26)"/><text x="97.5885%" y="239.50"></text></g><g><title>prepare_outputs (177,382 samples, 0.17%)</title><rect x="98.6521%" y="229" width="0.1729%" height="15" fill="rgb(217,163,10)"/><text x="98.9021%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (755,779 samples, 0.74%)</title><rect x="98.8250%" y="229" width="0.7365%" height="15" fill="rgb(213,25,53)"/><text x="99.0750%" y="239.50"></text></g><g><title>all (102,614,514 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (102,614,514 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (356,244 samples, 0.35%)</title><rect x="99.6528%" y="229" width="0.3472%" height="15" fill="rgb(229,68,48)"/><text x="99.9028%" y="239.50"></text></g></svg></svg>