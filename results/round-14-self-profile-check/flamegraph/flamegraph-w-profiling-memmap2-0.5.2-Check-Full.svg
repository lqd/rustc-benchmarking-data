<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (234,862 samples, 0.22%)</title><rect x="10.8231%" y="117" width="0.2179%" height="15" fill="rgb(227,0,7)"/><text x="11.0731%" y="127.50"></text></g><g><title>item_attrs (166,323 samples, 0.15%)</title><rect x="11.4902%" y="85" width="0.1543%" height="15" fill="rgb(217,0,24)"/><text x="11.7402%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (162,193 samples, 0.15%)</title><rect x="11.4940%" y="69" width="0.1505%" height="15" fill="rgb(221,193,54)"/><text x="11.7440%" y="79.50"></text></g><g><title>codegen_fn_attrs (245,583 samples, 0.23%)</title><rect x="11.4294%" y="101" width="0.2279%" height="15" fill="rgb(248,212,6)"/><text x="11.6794%" y="111.50"></text></g><g><title>is_copy_raw (155,722 samples, 0.14%)</title><rect x="13.8495%" y="85" width="0.1445%" height="15" fill="rgb(208,68,35)"/><text x="14.0995%" y="95.50"></text></g><g><title>evaluate_obligation (132,662 samples, 0.12%)</title><rect x="13.8709%" y="69" width="0.1231%" height="15" fill="rgb(232,128,0)"/><text x="14.1209%" y="79.50"></text></g><g><title>adt_drop_tys (138,242 samples, 0.13%)</title><rect x="14.0655%" y="69" width="0.1283%" height="15" fill="rgb(207,160,47)"/><text x="14.3155%" y="79.50"></text></g><g><title>needs_drop_raw (696,747 samples, 0.65%)</title><rect x="14.0021%" y="85" width="0.6465%" height="15" fill="rgb(228,23,34)"/><text x="14.2521%" y="95.50"></text></g><g><title>is_copy_raw (490,145 samples, 0.45%)</title><rect x="14.1938%" y="69" width="0.4548%" height="15" fill="rgb(218,30,26)"/><text x="14.4438%" y="79.50"></text></g><g><title>evaluate_obligation (414,305 samples, 0.38%)</title><rect x="14.2641%" y="53" width="0.3844%" height="15" fill="rgb(220,122,19)"/><text x="14.5141%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (112,460 samples, 0.10%)</title><rect x="14.7927%" y="69" width="0.1043%" height="15" fill="rgb(250,228,42)"/><text x="15.0427%" y="79.50"></text></g><g><title>impl_parent (130,090 samples, 0.12%)</title><rect x="15.1373%" y="53" width="0.1207%" height="15" fill="rgb(240,193,28)"/><text x="15.3873%" y="63.50"></text></g><g><title>specialization_graph_of (481,995 samples, 0.45%)</title><rect x="14.9508%" y="69" width="0.4472%" height="15" fill="rgb(216,20,37)"/><text x="15.2008%" y="79.50"></text></g><g><title>impl_trait_ref (150,912 samples, 0.14%)</title><rect x="15.2580%" y="53" width="0.1400%" height="15" fill="rgb(206,188,39)"/><text x="15.5080%" y="63.50"></text></g><g><title>resolve_instance (888,129 samples, 0.82%)</title><rect x="14.6486%" y="85" width="0.8241%" height="15" fill="rgb(217,207,13)"/><text x="14.8986%" y="95.50"></text></g><g><title>thir_body (970,732 samples, 0.90%)</title><rect x="15.4996%" y="85" width="0.9007%" height="15" fill="rgb(231,73,38)"/><text x="15.7496%" y="95.50"></text></g><g><title>mir_const (6,828,863 samples, 6.34%)</title><rect x="10.0818%" y="133" width="6.3364%" height="15" fill="rgb(225,20,46)"/><text x="10.3318%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (5,795,081 samples, 5.38%)</title><rect x="11.0410%" y="117" width="5.3771%" height="15" fill="rgb(210,31,41)"/><text x="11.2910%" y="127.50">unsafet..</text></g><g><title>mir_built (5,130,867 samples, 4.76%)</title><rect x="11.6573%" y="101" width="4.7608%" height="15" fill="rgb(221,200,47)"/><text x="11.9073%" y="111.50">mir_bu..</text></g><g><title>has_structural_eq_impls (165,912 samples, 0.15%)</title><rect x="16.5563%" y="117" width="0.1539%" height="15" fill="rgb(226,26,5)"/><text x="16.8063%" y="127.50"></text></g><g><title>evaluate_obligation (155,392 samples, 0.14%)</title><rect x="16.5661%" y="101" width="0.1442%" height="15" fill="rgb(249,33,26)"/><text x="16.8161%" y="111.50"></text></g><g><title>trait_impls_of (137,972 samples, 0.13%)</title><rect x="16.5823%" y="85" width="0.1280%" height="15" fill="rgb(235,183,28)"/><text x="16.8323%" y="95.50"></text></g><g><title>mir_const (159,443 samples, 0.15%)</title><rect x="16.7575%" y="117" width="0.1479%" height="15" fill="rgb(221,5,38)"/><text x="17.0075%" y="127.50"></text></g><g><title>mir_promoted (8,137,088 samples, 7.55%)</title><rect x="9.3778%" y="149" width="7.5503%" height="15" fill="rgb(247,18,42)"/><text x="9.6278%" y="159.50">mir_promot..</text></g><g><title>mir_const_qualif (549,527 samples, 0.51%)</title><rect x="16.4181%" y="133" width="0.5099%" height="15" fill="rgb(241,131,45)"/><text x="16.6681%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (217,103 samples, 0.20%)</title><rect x="16.9280%" y="149" width="0.2014%" height="15" fill="rgb(249,31,29)"/><text x="17.1780%" y="159.50"></text></g><g><title>type_op_prove_predicate (902,083 samples, 0.84%)</title><rect x="17.3103%" y="149" width="0.8370%" height="15" fill="rgb(225,111,53)"/><text x="17.5603%" y="159.50"></text></g><g><title>MIR_borrow_checking (18,675,827 samples, 17.33%)</title><rect x="0.8283%" y="181" width="17.3290%" height="15" fill="rgb(238,160,17)"/><text x="1.0783%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,550,887 samples, 17.21%)</title><rect x="0.9442%" y="165" width="17.2130%" height="15" fill="rgb(214,148,48)"/><text x="1.1942%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (175,612 samples, 0.16%)</title><rect x="18.1572%" y="181" width="0.1629%" height="15" fill="rgb(232,36,49)"/><text x="18.4072%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (123,182 samples, 0.11%)</title><rect x="18.2059%" y="165" width="0.1143%" height="15" fill="rgb(209,103,24)"/><text x="18.4559%" y="175.50"></text></g><g><title>hir_module_items (149,622 samples, 0.14%)</title><rect x="18.3202%" y="181" width="0.1388%" height="15" fill="rgb(229,88,8)"/><text x="18.5702%" y="191.50"></text></g><g><title>should_inherit_track_caller (203,062 samples, 0.19%)</title><rect x="18.8067%" y="133" width="0.1884%" height="15" fill="rgb(213,181,19)"/><text x="19.0567%" y="143.50"></text></g><g><title>codegen_fn_attrs (368,095 samples, 0.34%)</title><rect x="18.6707%" y="149" width="0.3415%" height="15" fill="rgb(254,191,54)"/><text x="18.9207%" y="159.50"></text></g><g><title>check_mod_attrs (572,826 samples, 0.53%)</title><rect x="18.4810%" y="165" width="0.5315%" height="15" fill="rgb(241,83,37)"/><text x="18.7310%" y="175.50"></text></g><g><title>lint_levels (117,941 samples, 0.11%)</title><rect x="19.2857%" y="149" width="0.1094%" height="15" fill="rgb(233,36,39)"/><text x="19.5357%" y="159.50"></text></g><g><title>lookup_deprecation_entry (122,793 samples, 0.11%)</title><rect x="19.3951%" y="149" width="0.1139%" height="15" fill="rgb(226,3,54)"/><text x="19.6451%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (458,046 samples, 0.43%)</title><rect x="19.1635%" y="165" width="0.4250%" height="15" fill="rgb(245,192,40)"/><text x="19.4135%" y="175.50"></text></g><g><title>misc_checking_1 (1,252,854 samples, 1.16%)</title><rect x="18.4595%" y="181" width="1.1625%" height="15" fill="rgb(238,167,29)"/><text x="18.7095%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (365,124 samples, 0.34%)</title><rect x="19.6235%" y="165" width="0.3388%" height="15" fill="rgb(232,182,51)"/><text x="19.8735%" y="175.50"></text></g><g><title>check_mod_liveness (292,213 samples, 0.27%)</title><rect x="19.6911%" y="149" width="0.2711%" height="15" fill="rgb(231,60,39)"/><text x="19.9411%" y="159.50"></text></g><g><title>misc_checking_2 (854,160 samples, 0.79%)</title><rect x="19.6220%" y="181" width="0.7926%" height="15" fill="rgb(208,69,12)"/><text x="19.8720%" y="191.50"></text></g><g><title>match_checking (487,476 samples, 0.45%)</title><rect x="19.9623%" y="165" width="0.4523%" height="15" fill="rgb(235,93,37)"/><text x="20.2123%" y="175.50"></text></g><g><title>check_match (455,295 samples, 0.42%)</title><rect x="19.9921%" y="149" width="0.4225%" height="15" fill="rgb(213,116,39)"/><text x="20.2421%" y="159.50"></text></g><g><title>check_private_in_public (160,142 samples, 0.15%)</title><rect x="20.4239%" y="165" width="0.1486%" height="15" fill="rgb(222,207,29)"/><text x="20.6739%" y="175.50"></text></g><g><title>death_checking (326,093 samples, 0.30%)</title><rect x="20.5725%" y="165" width="0.3026%" height="15" fill="rgb(206,96,30)"/><text x="20.8225%" y="175.50"></text></g><g><title>eval_to_allocation_raw (156,501 samples, 0.15%)</title><rect x="21.5177%" y="133" width="0.1452%" height="15" fill="rgb(218,138,4)"/><text x="21.7677%" y="143.50"></text></g><g><title>eval_to_allocation_raw (155,551 samples, 0.14%)</title><rect x="21.5186%" y="117" width="0.1443%" height="15" fill="rgb(250,191,14)"/><text x="21.7686%" y="127.50"></text></g><g><title>eval_to_const_value_raw (190,081 samples, 0.18%)</title><rect x="21.6629%" y="133" width="0.1764%" height="15" fill="rgb(239,60,40)"/><text x="21.9129%" y="143.50"></text></g><g><title>eval_to_const_value_raw (188,131 samples, 0.17%)</title><rect x="21.6647%" y="117" width="0.1746%" height="15" fill="rgb(206,27,48)"/><text x="21.9147%" y="127.50"></text></g><g><title>eval_to_allocation_raw (184,871 samples, 0.17%)</title><rect x="21.6677%" y="101" width="0.1715%" height="15" fill="rgb(225,35,8)"/><text x="21.9177%" y="111.50"></text></g><g><title>param_env (170,632 samples, 0.16%)</title><rect x="21.8393%" y="133" width="0.1583%" height="15" fill="rgb(250,213,24)"/><text x="22.0893%" y="143.50"></text></g><g><title>crate_lints (2,322,266 samples, 2.15%)</title><rect x="20.8766%" y="149" width="2.1548%" height="15" fill="rgb(247,123,22)"/><text x="21.1266%" y="159.50">c..</text></g><g><title>type_of (1,072,454 samples, 1.00%)</title><rect x="22.0363%" y="133" width="0.9951%" height="15" fill="rgb(231,138,38)"/><text x="22.2863%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (845,373 samples, 0.78%)</title><rect x="22.2470%" y="117" width="0.7844%" height="15" fill="rgb(231,145,46)"/><text x="22.4970%" y="127.50"></text></g><g><title>lint_checking (2,652,749 samples, 2.46%)</title><rect x="20.8750%" y="165" width="2.4614%" height="15" fill="rgb(251,118,11)"/><text x="21.1250%" y="175.50">li..</text></g><g><title>module_lints (328,813 samples, 0.31%)</title><rect x="23.0314%" y="149" width="0.3051%" height="15" fill="rgb(217,147,25)"/><text x="23.2814%" y="159.50"></text></g><g><title>lint_mod (325,723 samples, 0.30%)</title><rect x="23.0342%" y="133" width="0.3022%" height="15" fill="rgb(247,81,37)"/><text x="23.2842%" y="143.50"></text></g><g><title>privacy_access_levels (180,542 samples, 0.17%)</title><rect x="23.3365%" y="165" width="0.1675%" height="15" fill="rgb(209,12,38)"/><text x="23.5865%" y="175.50"></text></g><g><title>privacy_checking_modules (543,836 samples, 0.50%)</title><rect x="23.5040%" y="165" width="0.5046%" height="15" fill="rgb(227,1,9)"/><text x="23.7540%" y="175.50"></text></g><g><title>check_mod_privacy (541,726 samples, 0.50%)</title><rect x="23.5060%" y="149" width="0.5027%" height="15" fill="rgb(248,47,43)"/><text x="23.7560%" y="159.50"></text></g><g><title>misc_checking_3 (3,888,063 samples, 3.61%)</title><rect x="20.4146%" y="181" width="3.6077%" height="15" fill="rgb(221,10,30)"/><text x="20.6646%" y="191.50">misc..</text></g><g><title>impl_parent (1,619,848 samples, 1.50%)</title><rect x="26.4425%" y="117" width="1.5030%" height="15" fill="rgb(210,229,1)"/><text x="26.6925%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,016,362 samples, 0.94%)</title><rect x="27.0025%" y="101" width="0.9431%" height="15" fill="rgb(222,148,37)"/><text x="27.2525%" y="111.50"></text></g><g><title>impl_trait_ref (4,297,957 samples, 3.99%)</title><rect x="27.9455%" y="117" width="3.9880%" height="15" fill="rgb(234,67,33)"/><text x="28.1955%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,692,271 samples, 3.43%)</title><rect x="28.5075%" y="101" width="3.4260%" height="15" fill="rgb(247,98,35)"/><text x="28.7575%" y="111.50">met..</text></g><g><title>coherent_trait (8,969,680 samples, 8.32%)</title><rect x="24.1011%" y="149" width="8.3228%" height="15" fill="rgb(247,138,52)"/><text x="24.3511%" y="159.50">coherent_tra..</text></g><g><title>specialization_graph_of (8,953,440 samples, 8.31%)</title><rect x="24.1162%" y="133" width="8.3077%" height="15" fill="rgb(213,79,30)"/><text x="24.3662%" y="143.50">specializati..</text></g><g><title>trait_impls_of (526,787 samples, 0.49%)</title><rect x="31.9351%" y="117" width="0.4888%" height="15" fill="rgb(246,177,23)"/><text x="32.1851%" y="127.50"></text></g><g><title>implementations_of_trait (149,291 samples, 0.14%)</title><rect x="32.2854%" y="101" width="0.1385%" height="15" fill="rgb(230,62,27)"/><text x="32.5354%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (111,040 samples, 0.10%)</title><rect x="32.3209%" y="85" width="0.1030%" height="15" fill="rgb(216,154,8)"/><text x="32.5709%" y="95.50"></text></g><g><title>coherence_checking (9,040,760 samples, 8.39%)</title><rect x="24.0853%" y="165" width="8.3888%" height="15" fill="rgb(244,35,45)"/><text x="24.3353%" y="175.50">coherence_ch..</text></g><g><title>associated_item (435,926 samples, 0.40%)</title><rect x="43.3843%" y="101" width="0.4045%" height="15" fill="rgb(251,115,12)"/><text x="43.6343%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (358,146 samples, 0.33%)</title><rect x="43.4565%" y="85" width="0.3323%" height="15" fill="rgb(240,54,50)"/><text x="43.7065%" y="95.50"></text></g><g><title>associated_items (587,946 samples, 0.55%)</title><rect x="43.2660%" y="117" width="0.5455%" height="15" fill="rgb(233,84,52)"/><text x="43.5160%" y="127.50"></text></g><g><title>dropck_outlives (288,383 samples, 0.27%)</title><rect x="43.8477%" y="117" width="0.2676%" height="15" fill="rgb(207,117,47)"/><text x="44.0977%" y="127.50"></text></g><g><title>adt_dtorck_constraint (213,253 samples, 0.20%)</title><rect x="43.9174%" y="101" width="0.1979%" height="15" fill="rgb(249,43,39)"/><text x="44.1674%" y="111.50"></text></g><g><title>adt_def (143,182 samples, 0.13%)</title><rect x="44.7631%" y="85" width="0.1329%" height="15" fill="rgb(209,38,44)"/><text x="45.0131%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (141,622 samples, 0.13%)</title><rect x="44.7645%" y="69" width="0.1314%" height="15" fill="rgb(236,212,23)"/><text x="45.0145%" y="79.50"></text></g><g><title>item_attrs (116,102 samples, 0.11%)</title><rect x="44.7882%" y="53" width="0.1077%" height="15" fill="rgb(242,79,21)"/><text x="45.0382%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (114,212 samples, 0.11%)</title><rect x="44.7900%" y="37" width="0.1060%" height="15" fill="rgb(211,96,35)"/><text x="45.0400%" y="47.50"></text></g><g><title>adt_sized_constraint (176,153 samples, 0.16%)</title><rect x="44.7545%" y="101" width="0.1634%" height="15" fill="rgb(253,215,40)"/><text x="45.0045%" y="111.50"></text></g><g><title>predicates_of (144,632 samples, 0.13%)</title><rect x="45.1045%" y="101" width="0.1342%" height="15" fill="rgb(211,81,21)"/><text x="45.3545%" y="111.50"></text></g><g><title>specializes (166,113 samples, 0.15%)</title><rect x="45.2387%" y="101" width="0.1541%" height="15" fill="rgb(208,190,38)"/><text x="45.4887%" y="111.50"></text></g><g><title>param_env (120,333 samples, 0.11%)</title><rect x="45.2812%" y="85" width="0.1117%" height="15" fill="rgb(235,213,38)"/><text x="45.5312%" y="95.50"></text></g><g><title>trait_impls_of (526,534 samples, 0.49%)</title><rect x="45.4030%" y="101" width="0.4886%" height="15" fill="rgb(237,122,38)"/><text x="45.6530%" y="111.50"></text></g><g><title>implementations_of_trait (162,381 samples, 0.15%)</title><rect x="45.7409%" y="85" width="0.1507%" height="15" fill="rgb(244,218,35)"/><text x="45.9909%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (120,191 samples, 0.11%)</title><rect x="45.7801%" y="69" width="0.1115%" height="15" fill="rgb(240,68,47)"/><text x="46.0301%" y="79.50"></text></g><g><title>evaluate_obligation (1,919,445 samples, 1.78%)</title><rect x="44.1153%" y="117" width="1.7810%" height="15" fill="rgb(210,16,53)"/><text x="44.3653%" y="127.50">e..</text></g><g><title>item_attrs (116,990 samples, 0.11%)</title><rect x="46.1515%" y="117" width="0.1086%" height="15" fill="rgb(235,124,12)"/><text x="46.4015%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (111,010 samples, 0.10%)</title><rect x="46.1570%" y="101" width="0.1030%" height="15" fill="rgb(224,169,11)"/><text x="46.4070%" y="111.50"></text></g><g><title>method_autoderef_steps (173,291 samples, 0.16%)</title><rect x="46.2907%" y="117" width="0.1608%" height="15" fill="rgb(250,166,2)"/><text x="46.5407%" y="127.50"></text></g><g><title>object_safety_violations (142,881 samples, 0.13%)</title><rect x="46.4515%" y="117" width="0.1326%" height="15" fill="rgb(242,216,29)"/><text x="46.7015%" y="127.50"></text></g><g><title>predicates_of (243,333 samples, 0.23%)</title><rect x="46.6258%" y="117" width="0.2258%" height="15" fill="rgb(230,116,27)"/><text x="46.8758%" y="127.50"></text></g><g><title>predicates_defined_on (155,763 samples, 0.14%)</title><rect x="46.7071%" y="101" width="0.1445%" height="15" fill="rgb(228,99,48)"/><text x="46.9571%" y="111.50"></text></g><g><title>associated_items (119,601 samples, 0.11%)</title><rect x="51.1516%" y="101" width="0.1110%" height="15" fill="rgb(253,11,6)"/><text x="51.4016%" y="111.50"></text></g><g><title>evaluate_obligation (646,246 samples, 0.60%)</title><rect x="51.3681%" y="101" width="0.5996%" height="15" fill="rgb(247,143,39)"/><text x="51.6181%" y="111.50"></text></g><g><title>trait_impls_of (139,150 samples, 0.13%)</title><rect x="51.8386%" y="85" width="0.1291%" height="15" fill="rgb(236,97,10)"/><text x="52.0886%" y="95.50"></text></g><g><title>is_copy_raw (412,224 samples, 0.38%)</title><rect x="52.0548%" y="101" width="0.3825%" height="15" fill="rgb(233,208,19)"/><text x="52.3048%" y="111.50"></text></g><g><title>evaluate_obligation (376,864 samples, 0.35%)</title><rect x="52.0876%" y="85" width="0.3497%" height="15" fill="rgb(216,164,2)"/><text x="52.3376%" y="95.50"></text></g><g><title>trait_impls_of (175,312 samples, 0.16%)</title><rect x="52.2746%" y="69" width="0.1627%" height="15" fill="rgb(220,129,5)"/><text x="52.5246%" y="79.50"></text></g><g><title>predicates_of (110,292 samples, 0.10%)</title><rect x="52.5562%" y="101" width="0.1023%" height="15" fill="rgb(242,17,10)"/><text x="52.8062%" y="111.50"></text></g><g><title>typeck (6,238,739 samples, 5.79%)</title><rect x="46.9144%" y="117" width="5.7888%" height="15" fill="rgb(242,107,0)"/><text x="47.1644%" y="127.50">typeck</text></g><g><title>item_bodies_checking (21,831,853 samples, 20.26%)</title><rect x="32.5011%" y="165" width="20.2574%" height="15" fill="rgb(251,28,31)"/><text x="32.7511%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,828,813 samples, 20.25%)</title><rect x="32.5039%" y="149" width="20.2546%" height="15" fill="rgb(233,223,10)"/><text x="32.7539%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (21,747,211 samples, 20.18%)</title><rect x="32.5796%" y="133" width="20.1788%" height="15" fill="rgb(215,21,27)"/><text x="32.8296%" y="143.50">typeck</text></g><g><title>item_types_checking (958,020 samples, 0.89%)</title><rect x="52.7585%" y="165" width="0.8889%" height="15" fill="rgb(232,23,21)"/><text x="53.0085%" y="175.50"></text></g><g><title>check_mod_item_types (954,890 samples, 0.89%)</title><rect x="52.7614%" y="149" width="0.8860%" height="15" fill="rgb(244,5,23)"/><text x="53.0114%" y="159.50"></text></g><g><title>typeck (353,845 samples, 0.33%)</title><rect x="53.3191%" y="133" width="0.3283%" height="15" fill="rgb(226,81,46)"/><text x="53.5691%" y="143.50"></text></g><g><title>late_bound_vars_map (121,301 samples, 0.11%)</title><rect x="53.9946%" y="117" width="0.1126%" height="15" fill="rgb(247,70,30)"/><text x="54.2446%" y="127.50"></text></g><g><title>fn_sig (294,744 samples, 0.27%)</title><rect x="53.8572%" y="133" width="0.2735%" height="15" fill="rgb(212,68,19)"/><text x="54.1072%" y="143.50"></text></g><g><title>generics_of (272,140 samples, 0.25%)</title><rect x="54.1307%" y="133" width="0.2525%" height="15" fill="rgb(240,187,13)"/><text x="54.3807%" y="143.50"></text></g><g><title>explicit_predicates_of (165,605 samples, 0.15%)</title><rect x="54.5124%" y="101" width="0.1537%" height="15" fill="rgb(223,113,26)"/><text x="54.7624%" y="111.50"></text></g><g><title>predicates_of (418,809 samples, 0.39%)</title><rect x="54.4157%" y="133" width="0.3886%" height="15" fill="rgb(206,192,2)"/><text x="54.6657%" y="143.50"></text></g><g><title>predicates_defined_on (379,199 samples, 0.35%)</title><rect x="54.4525%" y="117" width="0.3519%" height="15" fill="rgb(241,108,4)"/><text x="54.7025%" y="127.50"></text></g><g><title>inferred_outlives_of (149,062 samples, 0.14%)</title><rect x="54.6660%" y="101" width="0.1383%" height="15" fill="rgb(247,173,49)"/><text x="54.9160%" y="111.50"></text></g><g><title>inferred_outlives_crate (135,102 samples, 0.13%)</title><rect x="54.6790%" y="85" width="0.1254%" height="15" fill="rgb(224,114,35)"/><text x="54.9290%" y="95.50"></text></g><g><title>type_collecting (1,371,435 samples, 1.27%)</title><rect x="53.6493%" y="165" width="1.2725%" height="15" fill="rgb(245,159,27)"/><text x="53.8993%" y="175.50"></text></g><g><title>collect_mod_item_types (1,364,275 samples, 1.27%)</title><rect x="53.6560%" y="149" width="1.2659%" height="15" fill="rgb(245,172,44)"/><text x="53.9060%" y="159.50"></text></g><g><title>evaluate_obligation (418,146 samples, 0.39%)</title><rect x="56.4977%" y="133" width="0.3880%" height="15" fill="rgb(236,23,11)"/><text x="56.7477%" y="143.50"></text></g><g><title>implied_outlives_bounds (151,121 samples, 0.14%)</title><rect x="56.8857%" y="133" width="0.1402%" height="15" fill="rgb(205,117,38)"/><text x="57.1357%" y="143.50"></text></g><g><title>param_env (251,830 samples, 0.23%)</title><rect x="57.0259%" y="133" width="0.2337%" height="15" fill="rgb(237,72,25)"/><text x="57.2759%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,708,029 samples, 2.51%)</title><rect x="55.0646%" y="149" width="2.5127%" height="15" fill="rgb(244,70,9)"/><text x="55.3146%" y="159.50">ch..</text></g><g><title>region_scope_tree (310,102 samples, 0.29%)</title><rect x="57.2896%" y="133" width="0.2877%" height="15" fill="rgb(217,125,39)"/><text x="57.5396%" y="143.50"></text></g><g><title>evaluate_obligation (306,334 samples, 0.28%)</title><rect x="58.1646%" y="133" width="0.2842%" height="15" fill="rgb(235,36,10)"/><text x="58.4146%" y="143.50"></text></g><g><title>param_env (218,444 samples, 0.20%)</title><rect x="58.5004%" y="133" width="0.2027%" height="15" fill="rgb(251,123,47)"/><text x="58.7504%" y="143.50"></text></g><g><title>check_item_well_formed (1,393,687 samples, 1.29%)</title><rect x="57.5773%" y="149" width="1.2932%" height="15" fill="rgb(221,13,13)"/><text x="57.8273%" y="159.50"></text></g><g><title>analysis (62,874,368 samples, 58.34%)</title><rect x="0.6054%" y="197" width="58.3400%" height="15" fill="rgb(238,131,9)"/><text x="0.8554%" y="207.50">analysis</text></g><g><title>type_check_crate (37,637,428 samples, 34.92%)</title><rect x="24.0223%" y="181" width="34.9231%" height="15" fill="rgb(211,50,8)"/><text x="24.2723%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,330,609 samples, 4.02%)</title><rect x="54.9271%" y="165" width="4.0183%" height="15" fill="rgb(245,182,24)"/><text x="55.1771%" y="175.50">wf_c..</text></g><g><title>codegen_crate (365,064 samples, 0.34%)</title><rect x="58.9565%" y="197" width="0.3387%" height="15" fill="rgb(242,14,37)"/><text x="59.2065%" y="207.50"></text></g><g><title>AST_validation (117,252 samples, 0.11%)</title><rect x="59.4984%" y="181" width="0.1088%" height="15" fill="rgb(246,228,12)"/><text x="59.7484%" y="191.50"></text></g><g><title>metadata_register_crate (2,668,800 samples, 2.48%)</title><rect x="79.2899%" y="149" width="2.4763%" height="15" fill="rgb(213,55,15)"/><text x="79.5399%" y="159.50">me..</text></g><g><title>metadata_register_crate (969,590 samples, 0.90%)</title><rect x="80.8666%" y="133" width="0.8997%" height="15" fill="rgb(209,9,3)"/><text x="81.1166%" y="143.50"></text></g><g><title>macro_expand_crate (23,888,645 samples, 22.17%)</title><rect x="59.7179%" y="181" width="22.1658%" height="15" fill="rgb(230,59,30)"/><text x="59.9679%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (23,869,475 samples, 22.15%)</title><rect x="59.7357%" y="165" width="22.1480%" height="15" fill="rgb(209,121,21)"/><text x="59.9857%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (126,651 samples, 0.12%)</title><rect x="81.7662%" y="149" width="0.1175%" height="15" fill="rgb(220,109,13)"/><text x="82.0162%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (441,375 samples, 0.41%)</title><rect x="81.8868%" y="181" width="0.4095%" height="15" fill="rgb(232,18,1)"/><text x="82.1368%" y="191.50"></text></g><g><title>late_resolve_crate (1,509,377 samples, 1.40%)</title><rect x="82.3980%" y="165" width="1.4005%" height="15" fill="rgb(215,41,42)"/><text x="82.6480%" y="175.50"></text></g><g><title>configure_and_expand (26,492,254 samples, 24.58%)</title><rect x="59.2953%" y="197" width="24.5817%" height="15" fill="rgb(224,123,36)"/><text x="59.5453%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,703,399 samples, 1.58%)</title><rect x="82.2964%" y="181" width="1.5806%" height="15" fill="rgb(240,125,3)"/><text x="82.5464%" y="191.50"></text></g><g><title>drop_ast (183,602 samples, 0.17%)</title><rect x="83.8769%" y="197" width="0.1704%" height="15" fill="rgb(205,98,50)"/><text x="84.1269%" y="207.50"></text></g><g><title>early_lint_checks (296,244 samples, 0.27%)</title><rect x="84.0620%" y="197" width="0.2749%" height="15" fill="rgb(205,185,37)"/><text x="84.3120%" y="207.50"></text></g><g><title>free_global_ctxt (3,394,497 samples, 3.15%)</title><rect x="84.3368%" y="197" width="3.1497%" height="15" fill="rgb(238,207,15)"/><text x="84.5868%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (884,489 samples, 0.82%)</title><rect x="87.4865%" y="197" width="0.8207%" height="15" fill="rgb(213,199,42)"/><text x="87.7365%" y="207.50"></text></g><g><title>hir_lowering (2,121,153 samples, 1.97%)</title><rect x="88.3072%" y="197" width="1.9682%" height="15" fill="rgb(235,201,11)"/><text x="88.5572%" y="207.50">h..</text></g><g><title>parse_crate (9,015,140 samples, 8.36%)</title><rect x="90.3226%" y="197" width="8.3650%" height="15" fill="rgb(207,46,11)"/><text x="90.5726%" y="207.50">parse_crate</text></g><g><title>prepare_outputs (204,072 samples, 0.19%)</title><rect x="98.6967%" y="197" width="0.1894%" height="15" fill="rgb(241,35,35)"/><text x="98.9467%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (753,708 samples, 0.70%)</title><rect x="98.8861%" y="197" width="0.6994%" height="15" fill="rgb(243,32,47)"/><text x="99.1361%" y="207.50"></text></g><g><title>all (107,772,376 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (107,772,376 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (349,734 samples, 0.32%)</title><rect x="99.6755%" y="197" width="0.3245%" height="15" fill="rgb(243,110,44)"/><text x="99.9255%" y="207.50"></text></g></svg></svg>