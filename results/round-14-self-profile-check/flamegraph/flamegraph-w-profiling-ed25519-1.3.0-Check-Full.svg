<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (119,790 samples, 0.13%)</title><rect x="6.1763%" y="181" width="0.1342%" height="15" fill="rgb(227,0,7)"/><text x="6.4263%" y="191.50"></text></g><g><title>item_attrs (131,412 samples, 0.15%)</title><rect x="6.5304%" y="149" width="0.1472%" height="15" fill="rgb(217,0,24)"/><text x="6.7804%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (127,422 samples, 0.14%)</title><rect x="6.5349%" y="133" width="0.1428%" height="15" fill="rgb(221,193,54)"/><text x="6.7849%" y="143.50"></text></g><g><title>codegen_fn_attrs (191,513 samples, 0.21%)</title><rect x="6.4784%" y="165" width="0.2146%" height="15" fill="rgb(248,212,6)"/><text x="6.7284%" y="175.50"></text></g><g><title>adt_drop_tys (228,994 samples, 0.26%)</title><rect x="7.8348%" y="133" width="0.2566%" height="15" fill="rgb(208,68,35)"/><text x="8.0848%" y="143.50"></text></g><g><title>needs_drop_raw (762,448 samples, 0.85%)</title><rect x="7.7742%" y="149" width="0.8543%" height="15" fill="rgb(232,128,0)"/><text x="8.0242%" y="159.50"></text></g><g><title>is_copy_raw (479,384 samples, 0.54%)</title><rect x="8.0914%" y="133" width="0.5371%" height="15" fill="rgb(207,160,47)"/><text x="8.3414%" y="143.50"></text></g><g><title>evaluate_obligation (421,163 samples, 0.47%)</title><rect x="8.1566%" y="117" width="0.4719%" height="15" fill="rgb(228,23,34)"/><text x="8.4066%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (166,970 samples, 0.19%)</title><rect x="8.7289%" y="133" width="0.1871%" height="15" fill="rgb(218,30,26)"/><text x="8.9789%" y="143.50"></text></g><g><title>impl_parent (429,954 samples, 0.48%)</title><rect x="9.2896%" y="117" width="0.4817%" height="15" fill="rgb(220,122,19)"/><text x="9.5396%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (129,252 samples, 0.14%)</title><rect x="9.6265%" y="101" width="0.1448%" height="15" fill="rgb(250,228,42)"/><text x="9.8765%" y="111.50"></text></g><g><title>specialization_graph_of (1,176,182 samples, 1.32%)</title><rect x="8.9444%" y="133" width="1.3178%" height="15" fill="rgb(240,193,28)"/><text x="9.1944%" y="143.50"></text></g><g><title>impl_trait_ref (438,136 samples, 0.49%)</title><rect x="9.7713%" y="117" width="0.4909%" height="15" fill="rgb(216,20,37)"/><text x="10.0213%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (377,665 samples, 0.42%)</title><rect x="9.8391%" y="101" width="0.4231%" height="15" fill="rgb(206,188,39)"/><text x="10.0891%" y="111.50"></text></g><g><title>resolve_instance (1,492,244 samples, 1.67%)</title><rect x="8.6285%" y="149" width="1.6719%" height="15" fill="rgb(217,207,13)"/><text x="8.8785%" y="159.50"></text></g><g><title>thir_body (349,336 samples, 0.39%)</title><rect x="10.3096%" y="149" width="0.3914%" height="15" fill="rgb(231,73,38)"/><text x="10.5596%" y="159.50"></text></g><g><title>mir_const (4,331,041 samples, 4.85%)</title><rect x="5.8557%" y="197" width="4.8526%" height="15" fill="rgb(225,20,46)"/><text x="6.1057%" y="207.50">mir_co..</text></g><g><title>unsafety_check_result (3,925,126 samples, 4.40%)</title><rect x="6.3105%" y="181" width="4.3978%" height="15" fill="rgb(210,31,41)"/><text x="6.5605%" y="191.50">unsaf..</text></g><g><title>mir_built (3,583,791 samples, 4.02%)</title><rect x="6.6929%" y="165" width="4.0154%" height="15" fill="rgb(221,200,47)"/><text x="6.9429%" y="175.50">mir_..</text></g><g><title>mir_promoted (4,663,586 samples, 5.23%)</title><rect x="5.5212%" y="213" width="5.2252%" height="15" fill="rgb(226,26,5)"/><text x="5.7712%" y="223.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (125,920 samples, 0.14%)</title><rect x="10.7464%" y="213" width="0.1411%" height="15" fill="rgb(249,33,26)"/><text x="10.9964%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (431,564 samples, 0.48%)</title><rect x="10.8875%" y="213" width="0.4835%" height="15" fill="rgb(235,183,28)"/><text x="11.1375%" y="223.50"></text></g><g><title>normalize_projection_ty (301,191 samples, 0.34%)</title><rect x="11.0336%" y="197" width="0.3375%" height="15" fill="rgb(221,5,38)"/><text x="11.2836%" y="207.50"></text></g><g><title>type_op_prove_predicate (887,262 samples, 0.99%)</title><rect x="11.5027%" y="213" width="0.9941%" height="15" fill="rgb(247,18,42)"/><text x="11.7527%" y="223.50"></text></g><g><title>evaluate_obligation (98,601 samples, 0.11%)</title><rect x="12.3864%" y="197" width="0.1105%" height="15" fill="rgb(241,131,45)"/><text x="12.6364%" y="207.50"></text></g><g><title>MIR_borrow_checking (10,271,105 samples, 11.51%)</title><rect x="1.0019%" y="245" width="11.5080%" height="15" fill="rgb(249,31,29)"/><text x="1.2519%" y="255.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (10,229,515 samples, 11.46%)</title><rect x="1.0485%" y="229" width="11.4614%" height="15" fill="rgb(225,111,53)"/><text x="1.2985%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (152,491 samples, 0.17%)</title><rect x="12.5837%" y="245" width="0.1709%" height="15" fill="rgb(238,160,17)"/><text x="12.8337%" y="255.50"></text></g><g><title>item_attrs (93,191 samples, 0.10%)</title><rect x="13.3575%" y="165" width="0.1044%" height="15" fill="rgb(214,148,48)"/><text x="13.6075%" y="175.50"></text></g><g><title>codegen_fn_attrs (322,652 samples, 0.36%)</title><rect x="13.2027%" y="181" width="0.3615%" height="15" fill="rgb(232,36,49)"/><text x="13.4527%" y="191.50"></text></g><g><title>codegen_fn_attrs (485,683 samples, 0.54%)</title><rect x="13.0265%" y="213" width="0.5442%" height="15" fill="rgb(209,103,24)"/><text x="13.2765%" y="223.50"></text></g><g><title>should_inherit_track_caller (437,143 samples, 0.49%)</title><rect x="13.0809%" y="197" width="0.4898%" height="15" fill="rgb(229,88,8)"/><text x="13.3309%" y="207.50"></text></g><g><title>check_mod_attrs (700,308 samples, 0.78%)</title><rect x="12.7866%" y="229" width="0.7846%" height="15" fill="rgb(213,181,19)"/><text x="13.0366%" y="239.50"></text></g><g><title>check_mod_const_bodies (99,111 samples, 0.11%)</title><rect x="13.5712%" y="229" width="0.1110%" height="15" fill="rgb(254,191,54)"/><text x="13.8212%" y="239.50"></text></g><g><title>lookup_deprecation_entry (128,742 samples, 0.14%)</title><rect x="13.9332%" y="213" width="0.1442%" height="15" fill="rgb(241,83,37)"/><text x="14.1832%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (406,945 samples, 0.46%)</title><rect x="13.7475%" y="229" width="0.4559%" height="15" fill="rgb(233,36,39)"/><text x="13.9975%" y="239.50"></text></g><g><title>misc_checking_1 (1,341,755 samples, 1.50%)</title><rect x="12.7551%" y="245" width="1.5033%" height="15" fill="rgb(226,3,54)"/><text x="13.0051%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (195,932 samples, 0.22%)</title><rect x="14.2610%" y="229" width="0.2195%" height="15" fill="rgb(245,192,40)"/><text x="14.5110%" y="239.50"></text></g><g><title>check_mod_liveness (155,201 samples, 0.17%)</title><rect x="14.3067%" y="213" width="0.1739%" height="15" fill="rgb(238,167,29)"/><text x="14.5567%" y="223.50"></text></g><g><title>misc_checking_2 (444,815 samples, 0.50%)</title><rect x="14.2584%" y="245" width="0.4984%" height="15" fill="rgb(232,182,51)"/><text x="14.5084%" y="255.50"></text></g><g><title>match_checking (246,512 samples, 0.28%)</title><rect x="14.4806%" y="229" width="0.2762%" height="15" fill="rgb(231,60,39)"/><text x="14.7306%" y="239.50"></text></g><g><title>check_match (229,962 samples, 0.26%)</title><rect x="14.4991%" y="213" width="0.2577%" height="15" fill="rgb(208,69,12)"/><text x="14.7491%" y="223.50"></text></g><g><title>death_checking (225,932 samples, 0.25%)</title><rect x="14.8572%" y="229" width="0.2531%" height="15" fill="rgb(235,93,37)"/><text x="15.1072%" y="239.50"></text></g><g><title>crate_lints (1,950,442 samples, 2.19%)</title><rect x="15.1121%" y="213" width="2.1853%" height="15" fill="rgb(213,116,39)"/><text x="15.3621%" y="223.50">c..</text></g><g><title>type_of (1,059,560 samples, 1.19%)</title><rect x="16.1103%" y="197" width="1.1872%" height="15" fill="rgb(222,207,29)"/><text x="16.3603%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (826,828 samples, 0.93%)</title><rect x="16.3710%" y="181" width="0.9264%" height="15" fill="rgb(206,96,30)"/><text x="16.6210%" y="191.50"></text></g><g><title>lint_checking (2,098,904 samples, 2.35%)</title><rect x="15.1103%" y="229" width="2.3517%" height="15" fill="rgb(218,138,4)"/><text x="15.3603%" y="239.50">l..</text></g><g><title>module_lints (146,832 samples, 0.16%)</title><rect x="17.2974%" y="213" width="0.1645%" height="15" fill="rgb(250,191,14)"/><text x="17.5474%" y="223.50"></text></g><g><title>lint_mod (144,262 samples, 0.16%)</title><rect x="17.3003%" y="197" width="0.1616%" height="15" fill="rgb(239,60,40)"/><text x="17.5503%" y="207.50"></text></g><g><title>privacy_access_levels (106,582 samples, 0.12%)</title><rect x="17.4619%" y="229" width="0.1194%" height="15" fill="rgb(206,27,48)"/><text x="17.7119%" y="239.50"></text></g><g><title>privacy_checking_modules (307,983 samples, 0.35%)</title><rect x="17.5814%" y="229" width="0.3451%" height="15" fill="rgb(225,35,8)"/><text x="17.8314%" y="239.50"></text></g><g><title>check_mod_privacy (305,783 samples, 0.34%)</title><rect x="17.5838%" y="213" width="0.3426%" height="15" fill="rgb(250,213,24)"/><text x="17.8338%" y="223.50"></text></g><g><title>misc_checking_3 (2,840,722 samples, 3.18%)</title><rect x="14.7568%" y="245" width="3.1828%" height="15" fill="rgb(247,123,22)"/><text x="15.0068%" y="255.50">mis..</text></g><g><title>impl_trait_ref (148,231 samples, 0.17%)</title><rect x="18.2459%" y="149" width="0.1661%" height="15" fill="rgb(231,138,38)"/><text x="18.4959%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (130,101 samples, 0.15%)</title><rect x="18.2662%" y="133" width="0.1458%" height="15" fill="rgb(231,145,46)"/><text x="18.5162%" y="143.50"></text></g><g><title>adt_destructor (312,153 samples, 0.35%)</title><rect x="18.0905%" y="197" width="0.3497%" height="15" fill="rgb(251,118,11)"/><text x="18.3405%" y="207.50"></text></g><g><title>coherent_trait (309,493 samples, 0.35%)</title><rect x="18.0934%" y="181" width="0.3468%" height="15" fill="rgb(217,147,25)"/><text x="18.3434%" y="191.50"></text></g><g><title>specialization_graph_of (308,133 samples, 0.35%)</title><rect x="18.0950%" y="165" width="0.3452%" height="15" fill="rgb(247,81,37)"/><text x="18.3450%" y="175.50"></text></g><g><title>mir_for_ctfe (119,672 samples, 0.13%)</title><rect x="18.4968%" y="149" width="0.1341%" height="15" fill="rgb(209,12,38)"/><text x="18.7468%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (110,142 samples, 0.12%)</title><rect x="18.5075%" y="133" width="0.1234%" height="15" fill="rgb(227,1,9)"/><text x="18.7575%" y="143.50"></text></g><g><title>eval_to_const_value_raw (232,743 samples, 0.26%)</title><rect x="18.4402%" y="197" width="0.2608%" height="15" fill="rgb(248,47,43)"/><text x="18.6902%" y="207.50"></text></g><g><title>eval_to_const_value_raw (231,903 samples, 0.26%)</title><rect x="18.4411%" y="181" width="0.2598%" height="15" fill="rgb(221,10,30)"/><text x="18.6911%" y="191.50"></text></g><g><title>eval_to_allocation_raw (229,703 samples, 0.26%)</title><rect x="18.4436%" y="165" width="0.2574%" height="15" fill="rgb(210,229,1)"/><text x="18.6936%" y="175.50"></text></g><g><title>is_copy_raw (89,671 samples, 0.10%)</title><rect x="18.7010%" y="197" width="0.1005%" height="15" fill="rgb(222,148,37)"/><text x="18.9510%" y="207.50"></text></g><g><title>is_mir_available (106,211 samples, 0.12%)</title><rect x="28.1901%" y="133" width="0.1190%" height="15" fill="rgb(234,67,33)"/><text x="28.4401%" y="143.50"></text></g><g><title>mir_keys (93,761 samples, 0.11%)</title><rect x="28.2040%" y="117" width="0.1051%" height="15" fill="rgb(247,98,35)"/><text x="28.4540%" y="127.50"></text></g><g><title>mir_const_qualif (326,154 samples, 0.37%)</title><rect x="28.3117%" y="133" width="0.3654%" height="15" fill="rgb(247,138,52)"/><text x="28.5617%" y="143.50"></text></g><g><title>mir_const (273,663 samples, 0.31%)</title><rect x="28.3705%" y="117" width="0.3066%" height="15" fill="rgb(213,79,30)"/><text x="28.6205%" y="127.50"></text></g><g><title>unsafety_check_result (187,092 samples, 0.21%)</title><rect x="28.4675%" y="101" width="0.2096%" height="15" fill="rgb(246,177,23)"/><text x="28.7175%" y="111.50"></text></g><g><title>mir_built (157,072 samples, 0.18%)</title><rect x="28.5012%" y="85" width="0.1760%" height="15" fill="rgb(230,62,27)"/><text x="28.7512%" y="95.50"></text></g><g><title>mir_borrowck (726,449 samples, 0.81%)</title><rect x="29.0371%" y="101" width="0.8139%" height="15" fill="rgb(216,154,8)"/><text x="29.2871%" y="111.50"></text></g><g><title>mir_for_ctfe (1,050,122 samples, 1.18%)</title><rect x="28.6771%" y="133" width="1.1766%" height="15" fill="rgb(244,35,45)"/><text x="28.9271%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (971,971 samples, 1.09%)</title><rect x="28.7647%" y="117" width="1.0890%" height="15" fill="rgb(251,115,12)"/><text x="29.0147%" y="127.50"></text></g><g><title>mir_borrowck (103,601 samples, 0.12%)</title><rect x="30.1565%" y="37" width="0.1161%" height="15" fill="rgb(240,54,50)"/><text x="30.4065%" y="47.50"></text></g><g><title>mir_for_ctfe (218,233 samples, 0.24%)</title><rect x="30.0290%" y="69" width="0.2445%" height="15" fill="rgb(233,84,52)"/><text x="30.2790%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (162,112 samples, 0.18%)</title><rect x="30.0919%" y="53" width="0.1816%" height="15" fill="rgb(207,117,47)"/><text x="30.3419%" y="63.50"></text></g><g><title>eval_to_const_value_raw (436,395 samples, 0.49%)</title><rect x="29.8702%" y="117" width="0.4889%" height="15" fill="rgb(249,43,39)"/><text x="30.1202%" y="127.50"></text></g><g><title>eval_to_const_value_raw (428,634 samples, 0.48%)</title><rect x="29.8789%" y="101" width="0.4803%" height="15" fill="rgb(209,38,44)"/><text x="30.1289%" y="111.50"></text></g><g><title>eval_to_allocation_raw (422,204 samples, 0.47%)</title><rect x="29.8861%" y="85" width="0.4730%" height="15" fill="rgb(236,212,23)"/><text x="30.1361%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (455,715 samples, 0.51%)</title><rect x="29.8555%" y="133" width="0.5106%" height="15" fill="rgb(242,79,21)"/><text x="30.1055%" y="143.50"></text></g><g><title>param_env (120,671 samples, 0.14%)</title><rect x="31.0602%" y="117" width="0.1352%" height="15" fill="rgb(211,96,35)"/><text x="31.3102%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,925,592 samples, 3.28%)</title><rect x="28.0010%" y="181" width="3.2779%" height="15" fill="rgb(253,215,40)"/><text x="28.2510%" y="191.50">eva..</text></g><g><title>eval_to_const_value_raw (2,903,462 samples, 3.25%)</title><rect x="28.0258%" y="165" width="3.2531%" height="15" fill="rgb(211,81,21)"/><text x="28.2758%" y="175.50">eva..</text></g><g><title>eval_to_allocation_raw (2,892,051 samples, 3.24%)</title><rect x="28.0386%" y="149" width="3.2403%" height="15" fill="rgb(208,190,38)"/><text x="28.2886%" y="159.50">eva..</text></g><g><title>typeck (814,709 samples, 0.91%)</title><rect x="30.3661%" y="133" width="0.9128%" height="15" fill="rgb(235,213,38)"/><text x="30.6161%" y="143.50"></text></g><g><title>impl_parent (4,696,766 samples, 5.26%)</title><rect x="31.2898%" y="181" width="5.2624%" height="15" fill="rgb(237,122,38)"/><text x="31.5398%" y="191.50">impl_p..</text></g><g><title>metadata_decode_entry_impl_parent (2,295,054 samples, 2.57%)</title><rect x="33.9807%" y="165" width="2.5714%" height="15" fill="rgb(244,218,35)"/><text x="34.2307%" y="175.50">me..</text></g><g><title>impl_trait_ref (10,027,059 samples, 11.23%)</title><rect x="36.5551%" y="181" width="11.2345%" height="15" fill="rgb(240,68,47)"/><text x="36.8051%" y="191.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,844,546 samples, 8.79%)</title><rect x="39.0004%" y="165" width="8.7892%" height="15" fill="rgb(210,16,53)"/><text x="39.2504%" y="175.50">metadata_dec..</text></g><g><title>item_attrs (139,092 samples, 0.16%)</title><rect x="47.7896%" y="181" width="0.1558%" height="15" fill="rgb(235,124,12)"/><text x="48.0396%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,062 samples, 0.15%)</title><rect x="47.7942%" y="165" width="0.1513%" height="15" fill="rgb(224,169,11)"/><text x="48.0442%" y="175.50"></text></g><g><title>trait_impls_of (1,792,680 samples, 2.01%)</title><rect x="48.0357%" y="181" width="2.0086%" height="15" fill="rgb(250,166,2)"/><text x="48.2857%" y="191.50">t..</text></g><g><title>implementations_of_trait (475,872 samples, 0.53%)</title><rect x="49.5111%" y="165" width="0.5332%" height="15" fill="rgb(242,216,29)"/><text x="49.7611%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (355,292 samples, 0.40%)</title><rect x="49.6462%" y="149" width="0.3981%" height="15" fill="rgb(230,116,27)"/><text x="49.8962%" y="159.50"></text></g><g><title>coherent_trait (28,580,189 samples, 32.02%)</title><rect x="18.0253%" y="213" width="32.0218%" height="15" fill="rgb(228,99,48)"/><text x="18.2753%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (27,871,671 samples, 31.23%)</title><rect x="18.8191%" y="197" width="31.2280%" height="15" fill="rgb(253,11,6)"/><text x="19.0691%" y="207.50">specialization_graph_of</text></g><g><title>coherence_checking (28,698,840 samples, 32.15%)</title><rect x="17.9919%" y="229" width="32.1548%" height="15" fill="rgb(247,143,39)"/><text x="18.2419%" y="239.50">coherence_checking</text></g><g><title>dropck_outlives (116,801 samples, 0.13%)</title><rect x="55.2251%" y="181" width="0.1309%" height="15" fill="rgb(236,97,10)"/><text x="55.4751%" y="191.50"></text></g><g><title>mir_borrowck (123,731 samples, 0.14%)</title><rect x="55.5396%" y="101" width="0.1386%" height="15" fill="rgb(233,208,19)"/><text x="55.7896%" y="111.50"></text></g><g><title>mir_for_ctfe (190,973 samples, 0.21%)</title><rect x="55.4650%" y="133" width="0.2140%" height="15" fill="rgb(216,164,2)"/><text x="55.7150%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (173,172 samples, 0.19%)</title><rect x="55.4850%" y="117" width="0.1940%" height="15" fill="rgb(220,129,5)"/><text x="55.7350%" y="127.50"></text></g><g><title>eval_to_const_value_raw (288,753 samples, 0.32%)</title><rect x="55.3559%" y="181" width="0.3235%" height="15" fill="rgb(242,17,10)"/><text x="55.6059%" y="191.50"></text></g><g><title>eval_to_const_value_raw (287,103 samples, 0.32%)</title><rect x="55.3578%" y="165" width="0.3217%" height="15" fill="rgb(242,107,0)"/><text x="55.6078%" y="175.50"></text></g><g><title>eval_to_allocation_raw (283,203 samples, 0.32%)</title><rect x="55.3622%" y="149" width="0.3173%" height="15" fill="rgb(251,28,31)"/><text x="55.6122%" y="159.50"></text></g><g><title>evaluate_obligation (544,444 samples, 0.61%)</title><rect x="55.6795%" y="181" width="0.6100%" height="15" fill="rgb(233,223,10)"/><text x="55.9295%" y="191.50"></text></g><g><title>generics_of (103,982 samples, 0.12%)</title><rect x="56.3322%" y="181" width="0.1165%" height="15" fill="rgb(215,21,27)"/><text x="56.5822%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (90,152 samples, 0.10%)</title><rect x="56.3477%" y="165" width="0.1010%" height="15" fill="rgb(232,23,21)"/><text x="56.5977%" y="175.50"></text></g><g><title>predicates_of (120,922 samples, 0.14%)</title><rect x="56.7631%" y="181" width="0.1355%" height="15" fill="rgb(244,5,23)"/><text x="57.0131%" y="191.50"></text></g><g><title>associated_item (753,519 samples, 0.84%)</title><rect x="61.8139%" y="149" width="0.8443%" height="15" fill="rgb(226,81,46)"/><text x="62.0639%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (663,046 samples, 0.74%)</title><rect x="61.9153%" y="133" width="0.7429%" height="15" fill="rgb(247,70,30)"/><text x="62.1653%" y="143.50"></text></g><g><title>associated_items (932,051 samples, 1.04%)</title><rect x="61.6505%" y="165" width="1.0443%" height="15" fill="rgb(212,68,19)"/><text x="61.9005%" y="175.50"></text></g><g><title>dropck_outlives (280,672 samples, 0.31%)</title><rect x="62.7363%" y="165" width="0.3145%" height="15" fill="rgb(240,187,13)"/><text x="62.9863%" y="175.50"></text></g><g><title>adt_dtorck_constraint (210,292 samples, 0.24%)</title><rect x="62.8151%" y="149" width="0.2356%" height="15" fill="rgb(223,113,26)"/><text x="63.0651%" y="159.50"></text></g><g><title>mir_borrowck (111,091 samples, 0.12%)</title><rect x="63.2104%" y="101" width="0.1245%" height="15" fill="rgb(206,192,2)"/><text x="63.4604%" y="111.50"></text></g><g><title>mir_for_ctfe (164,081 samples, 0.18%)</title><rect x="63.1515%" y="133" width="0.1838%" height="15" fill="rgb(241,108,4)"/><text x="63.4015%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (148,261 samples, 0.17%)</title><rect x="63.1692%" y="117" width="0.1661%" height="15" fill="rgb(247,173,49)"/><text x="63.4192%" y="127.50"></text></g><g><title>eval_to_const_value_raw (254,383 samples, 0.29%)</title><rect x="63.0508%" y="165" width="0.2850%" height="15" fill="rgb(224,114,35)"/><text x="63.3008%" y="175.50"></text></g><g><title>eval_to_allocation_raw (249,973 samples, 0.28%)</title><rect x="63.0557%" y="149" width="0.2801%" height="15" fill="rgb(245,159,27)"/><text x="63.3057%" y="159.50"></text></g><g><title>adt_def (101,320 samples, 0.11%)</title><rect x="63.9218%" y="133" width="0.1135%" height="15" fill="rgb(245,172,44)"/><text x="64.1718%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (99,640 samples, 0.11%)</title><rect x="63.9237%" y="117" width="0.1116%" height="15" fill="rgb(236,23,11)"/><text x="64.1737%" y="127.50"></text></g><g><title>adt_sized_constraint (125,311 samples, 0.14%)</title><rect x="63.9112%" y="149" width="0.1404%" height="15" fill="rgb(205,117,38)"/><text x="64.1612%" y="159.50"></text></g><g><title>trait_impls_of (176,493 samples, 0.20%)</title><rect x="64.3190%" y="149" width="0.1977%" height="15" fill="rgb(237,72,25)"/><text x="64.5690%" y="159.50"></text></g><g><title>evaluate_obligation (1,054,570 samples, 1.18%)</title><rect x="63.3358%" y="165" width="1.1816%" height="15" fill="rgb(244,70,9)"/><text x="63.5858%" y="175.50"></text></g><g><title>impl_item_implementor_ids (115,361 samples, 0.13%)</title><rect x="64.6986%" y="165" width="0.1293%" height="15" fill="rgb(217,125,39)"/><text x="64.9486%" y="175.50"></text></g><g><title>associated_items (98,170 samples, 0.11%)</title><rect x="64.7179%" y="149" width="0.1100%" height="15" fill="rgb(235,36,10)"/><text x="64.9679%" y="159.50"></text></g><g><title>lint_levels (95,601 samples, 0.11%)</title><rect x="65.0369%" y="165" width="0.1071%" height="15" fill="rgb(251,123,47)"/><text x="65.2869%" y="175.50"></text></g><g><title>method_autoderef_steps (157,562 samples, 0.18%)</title><rect x="65.1856%" y="165" width="0.1765%" height="15" fill="rgb(221,13,13)"/><text x="65.4356%" y="175.50"></text></g><g><title>evaluate_obligation (102,270 samples, 0.11%)</title><rect x="65.2476%" y="149" width="0.1146%" height="15" fill="rgb(238,131,9)"/><text x="65.4976%" y="159.50"></text></g><g><title>predicates_of (237,721 samples, 0.27%)</title><rect x="65.3750%" y="165" width="0.2663%" height="15" fill="rgb(211,50,8)"/><text x="65.6250%" y="175.50"></text></g><g><title>predicates_defined_on (169,611 samples, 0.19%)</title><rect x="65.4514%" y="149" width="0.1900%" height="15" fill="rgb(245,182,24)"/><text x="65.7014%" y="159.50"></text></g><g><title>typeck (7,830,627 samples, 8.77%)</title><rect x="56.9713%" y="181" width="8.7736%" height="15" fill="rgb(242,14,37)"/><text x="57.2213%" y="191.50">typeck</text></g><g><title>item_bodies_checking (13,906,265 samples, 15.58%)</title><rect x="50.1919%" y="229" width="15.5809%" height="15" fill="rgb(246,228,12)"/><text x="50.4419%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,903,575 samples, 15.58%)</title><rect x="50.1949%" y="213" width="15.5779%" height="15" fill="rgb(213,55,15)"/><text x="50.4449%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (13,873,225 samples, 15.54%)</title><rect x="50.2289%" y="197" width="15.5439%" height="15" fill="rgb(209,9,3)"/><text x="50.4789%" y="207.50">typeck</text></g><g><title>item_types_checking (658,247 samples, 0.74%)</title><rect x="65.7728%" y="229" width="0.7375%" height="15" fill="rgb(230,59,30)"/><text x="66.0228%" y="239.50"></text></g><g><title>check_mod_item_types (655,807 samples, 0.73%)</title><rect x="65.7755%" y="213" width="0.7348%" height="15" fill="rgb(209,121,21)"/><text x="66.0255%" y="223.50"></text></g><g><title>fn_sig (225,652 samples, 0.25%)</title><rect x="66.7901%" y="197" width="0.2528%" height="15" fill="rgb(220,109,13)"/><text x="67.0401%" y="207.50"></text></g><g><title>is_late_bound_map (107,441 samples, 0.12%)</title><rect x="67.1518%" y="181" width="0.1204%" height="15" fill="rgb(232,18,1)"/><text x="67.4018%" y="191.50"></text></g><g><title>resolve_lifetimes (92,461 samples, 0.10%)</title><rect x="67.1686%" y="165" width="0.1036%" height="15" fill="rgb(215,41,42)"/><text x="67.4186%" y="175.50"></text></g><g><title>named_region_map (224,932 samples, 0.25%)</title><rect x="67.2721%" y="181" width="0.2520%" height="15" fill="rgb(224,123,36)"/><text x="67.5221%" y="191.50"></text></g><g><title>resolve_lifetimes (208,602 samples, 0.23%)</title><rect x="67.2904%" y="165" width="0.2337%" height="15" fill="rgb(240,125,3)"/><text x="67.5404%" y="175.50"></text></g><g><title>generics_of (444,167 samples, 0.50%)</title><rect x="67.0429%" y="197" width="0.4977%" height="15" fill="rgb(205,98,50)"/><text x="67.2929%" y="207.50"></text></g><g><title>impl_trait_ref (127,580 samples, 0.14%)</title><rect x="67.5406%" y="197" width="0.1429%" height="15" fill="rgb(205,185,37)"/><text x="67.7906%" y="207.50"></text></g><g><title>explicit_predicates_of (94,271 samples, 0.11%)</title><rect x="67.7976%" y="165" width="0.1056%" height="15" fill="rgb(238,207,15)"/><text x="68.0476%" y="175.50"></text></g><g><title>predicates_of (253,532 samples, 0.28%)</title><rect x="67.6835%" y="197" width="0.2841%" height="15" fill="rgb(213,199,42)"/><text x="67.9335%" y="207.50"></text></g><g><title>predicates_defined_on (213,402 samples, 0.24%)</title><rect x="67.7285%" y="181" width="0.2391%" height="15" fill="rgb(235,201,11)"/><text x="67.9785%" y="191.50"></text></g><g><title>type_collecting (1,438,336 samples, 1.61%)</title><rect x="66.5117%" y="229" width="1.6115%" height="15" fill="rgb(207,46,11)"/><text x="66.7617%" y="239.50"></text></g><g><title>collect_mod_item_types (1,428,556 samples, 1.60%)</title><rect x="66.5226%" y="213" width="1.6006%" height="15" fill="rgb(241,35,35)"/><text x="66.7726%" y="223.50"></text></g><g><title>type_of (138,882 samples, 0.16%)</title><rect x="67.9676%" y="197" width="0.1556%" height="15" fill="rgb(243,32,47)"/><text x="68.2176%" y="207.50"></text></g><g><title>mir_const_qualif (122,064 samples, 0.14%)</title><rect x="68.9917%" y="149" width="0.1368%" height="15" fill="rgb(247,202,23)"/><text x="69.2417%" y="159.50"></text></g><g><title>mir_const (101,094 samples, 0.11%)</title><rect x="69.0152%" y="133" width="0.1133%" height="15" fill="rgb(219,102,11)"/><text x="69.2652%" y="143.50"></text></g><g><title>mir_borrowck (272,021 samples, 0.30%)</title><rect x="69.2976%" y="117" width="0.3048%" height="15" fill="rgb(243,110,44)"/><text x="69.5476%" y="127.50"></text></g><g><title>mir_for_ctfe (424,555 samples, 0.48%)</title><rect x="69.1285%" y="149" width="0.4757%" height="15" fill="rgb(222,74,54)"/><text x="69.3785%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (387,534 samples, 0.43%)</title><rect x="69.1700%" y="133" width="0.4342%" height="15" fill="rgb(216,99,12)"/><text x="69.4200%" y="143.50"></text></g><g><title>eval_to_const_value_raw (917,851 samples, 1.03%)</title><rect x="68.8741%" y="197" width="1.0284%" height="15" fill="rgb(226,22,26)"/><text x="69.1241%" y="207.50"></text></g><g><title>eval_to_const_value_raw (912,501 samples, 1.02%)</title><rect x="68.8801%" y="181" width="1.0224%" height="15" fill="rgb(217,163,10)"/><text x="69.1301%" y="191.50"></text></g><g><title>eval_to_allocation_raw (901,091 samples, 1.01%)</title><rect x="68.8929%" y="165" width="1.0096%" height="15" fill="rgb(213,25,53)"/><text x="69.1429%" y="175.50"></text></g><g><title>typeck (265,201 samples, 0.30%)</title><rect x="69.6054%" y="149" width="0.2971%" height="15" fill="rgb(252,105,26)"/><text x="69.8554%" y="159.50"></text></g><g><title>evaluate_obligation (158,953 samples, 0.18%)</title><rect x="69.9025%" y="197" width="0.1781%" height="15" fill="rgb(220,39,43)"/><text x="70.1525%" y="207.50"></text></g><g><title>region_scope_tree (136,761 samples, 0.15%)</title><rect x="70.2695%" y="197" width="0.1532%" height="15" fill="rgb(229,68,48)"/><text x="70.5195%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,985,411 samples, 2.22%)</title><rect x="68.2118%" y="213" width="2.2245%" height="15" fill="rgb(252,8,32)"/><text x="68.4618%" y="223.50">c..</text></g><g><title>evaluate_obligation (139,755 samples, 0.16%)</title><rect x="70.9594%" y="197" width="0.1566%" height="15" fill="rgb(223,20,43)"/><text x="71.2094%" y="207.50"></text></g><g><title>analysis (63,074,934 samples, 70.67%)</title><rect x="0.7264%" y="261" width="70.6705%" height="15" fill="rgb(229,81,49)"/><text x="0.9764%" y="271.50">analysis</text></g><g><title>type_check_crate (47,711,792 samples, 53.46%)</title><rect x="17.9396%" y="245" width="53.4573%" height="15" fill="rgb(236,28,36)"/><text x="18.1896%" y="255.50">type_check_crate</text></g><g><title>wf_checking (2,918,343 samples, 3.27%)</title><rect x="68.1271%" y="229" width="3.2698%" height="15" fill="rgb(249,185,26)"/><text x="68.3771%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (857,382 samples, 0.96%)</title><rect x="70.4362%" y="213" width="0.9606%" height="15" fill="rgb(249,174,33)"/><text x="70.6862%" y="223.50"></text></g><g><title>native_libraries (102,081 samples, 0.11%)</title><rect x="72.0312%" y="245" width="0.1144%" height="15" fill="rgb(233,201,37)"/><text x="72.2812%" y="255.50"></text></g><g><title>metadata_decode_entry_native_libraries (96,991 samples, 0.11%)</title><rect x="72.0369%" y="229" width="0.1087%" height="15" fill="rgb(221,78,26)"/><text x="72.2869%" y="239.50"></text></g><g><title>codegen_crate (673,078 samples, 0.75%)</title><rect x="71.4080%" y="261" width="0.7541%" height="15" fill="rgb(250,127,30)"/><text x="71.6580%" y="271.50"></text></g><g><title>AST_validation (126,402 samples, 0.14%)</title><rect x="72.3655%" y="245" width="0.1416%" height="15" fill="rgb(230,49,44)"/><text x="72.6155%" y="255.50"></text></g><g><title>metadata_load_macro (168,363 samples, 0.19%)</title><rect x="82.4921%" y="213" width="0.1886%" height="15" fill="rgb(229,67,23)"/><text x="82.7421%" y="223.50"></text></g><g><title>macro_expand_crate (11,351,666 samples, 12.72%)</title><rect x="72.6488%" y="245" width="12.7186%" height="15" fill="rgb(249,83,47)"/><text x="72.8988%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (11,338,126 samples, 12.70%)</title><rect x="72.6640%" y="229" width="12.7035%" height="15" fill="rgb(215,43,3)"/><text x="72.9140%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (2,397,887 samples, 2.69%)</title><rect x="82.6808%" y="213" width="2.6866%" height="15" fill="rgb(238,154,13)"/><text x="82.9308%" y="223.50">me..</text></g><g><title>metadata_register_crate (1,885,201 samples, 2.11%)</title><rect x="83.2552%" y="197" width="2.1122%" height="15" fill="rgb(219,56,2)"/><text x="83.5052%" y="207.50">m..</text></g><g><title>metadata_register_crate (846,770 samples, 0.95%)</title><rect x="84.4187%" y="181" width="0.9487%" height="15" fill="rgb(233,0,4)"/><text x="84.6687%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (194,372 samples, 0.22%)</title><rect x="85.3731%" y="245" width="0.2178%" height="15" fill="rgb(235,30,7)"/><text x="85.6231%" y="255.50"></text></g><g><title>finalize_macro_resolutions (229,202 samples, 0.26%)</title><rect x="85.6623%" y="229" width="0.2568%" height="15" fill="rgb(250,79,13)"/><text x="85.9123%" y="239.50"></text></g><g><title>late_resolve_crate (1,712,359 samples, 1.92%)</title><rect x="85.9191%" y="229" width="1.9186%" height="15" fill="rgb(211,146,34)"/><text x="86.1691%" y="239.50">l..</text></g><g><title>configure_and_expand (14,080,287 samples, 15.78%)</title><rect x="72.1622%" y="261" width="15.7759%" height="15" fill="rgb(228,22,38)"/><text x="72.4122%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (2,094,913 samples, 2.35%)</title><rect x="85.5908%" y="245" width="2.3472%" height="15" fill="rgb(235,168,5)"/><text x="85.8408%" y="255.50">r..</text></g><g><title>drop_ast (127,341 samples, 0.14%)</title><rect x="87.9380%" y="261" width="0.1427%" height="15" fill="rgb(221,155,16)"/><text x="88.1880%" y="271.50"></text></g><g><title>early_lint_checks (294,894 samples, 0.33%)</title><rect x="88.0982%" y="261" width="0.3304%" height="15" fill="rgb(215,215,53)"/><text x="88.3482%" y="271.50"></text></g><g><title>free_global_ctxt (3,296,787 samples, 3.69%)</title><rect x="88.4286%" y="261" width="3.6938%" height="15" fill="rgb(223,4,10)"/><text x="88.6786%" y="271.50">free..</text></g><g><title>generate_crate_metadata (626,547 samples, 0.70%)</title><rect x="92.1224%" y="261" width="0.7020%" height="15" fill="rgb(234,103,6)"/><text x="92.3724%" y="271.50"></text></g><g><title>hir_lowering (2,040,023 samples, 2.29%)</title><rect x="92.8244%" y="261" width="2.2857%" height="15" fill="rgb(227,97,0)"/><text x="93.0744%" y="271.50">h..</text></g><g><title>parse_crate (2,832,371 samples, 3.17%)</title><rect x="95.1598%" y="261" width="3.1734%" height="15" fill="rgb(234,150,53)"/><text x="95.4098%" y="271.50">par..</text></g><g><title>prepare_outputs (283,153 samples, 0.32%)</title><rect x="98.3443%" y="261" width="0.3173%" height="15" fill="rgb(228,201,54)"/><text x="98.5943%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (735,718 samples, 0.82%)</title><rect x="98.6616%" y="261" width="0.8243%" height="15" fill="rgb(222,22,37)"/><text x="98.9116%" y="271.50"></text></g><g><title>setup_global_ctxt (110,021 samples, 0.12%)</title><rect x="99.4972%" y="261" width="0.1233%" height="15" fill="rgb(237,53,32)"/><text x="99.7472%" y="271.50"></text></g><g><title>all (89,252,155 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (89,252,155 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (338,734 samples, 0.38%)</title><rect x="99.6205%" y="261" width="0.3795%" height="15" fill="rgb(241,220,44)"/><text x="99.8705%" y="271.50"></text></g></svg></svg>