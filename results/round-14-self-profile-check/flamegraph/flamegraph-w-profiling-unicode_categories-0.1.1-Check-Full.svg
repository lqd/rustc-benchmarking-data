<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>thir_body (289,633 samples, 0.15%)</title><rect x="8.6682%" y="117" width="0.1535%" height="15" fill="rgb(227,0,7)"/><text x="8.9182%" y="127.50"></text></g><g><title>mir_const (1,920,701 samples, 1.02%)</title><rect x="7.8082%" y="165" width="1.0181%" height="15" fill="rgb(217,0,24)"/><text x="8.0582%" y="175.50"></text></g><g><title>unsafety_check_result (1,539,367 samples, 0.82%)</title><rect x="8.0103%" y="149" width="0.8160%" height="15" fill="rgb(221,193,54)"/><text x="8.2603%" y="159.50"></text></g><g><title>mir_built (1,367,545 samples, 0.72%)</title><rect x="8.1014%" y="133" width="0.7249%" height="15" fill="rgb(248,212,6)"/><text x="8.3514%" y="143.50"></text></g><g><title>thir_body (23,805,206 samples, 12.62%)</title><rect x="13.0140%" y="101" width="12.6184%" height="15" fill="rgb(208,68,35)"/><text x="13.2640%" y="111.50">thir_body</text></g><g><title>lit_to_const (5,517,845 samples, 2.92%)</title><rect x="22.7075%" y="85" width="2.9248%" height="15" fill="rgb(232,128,0)"/><text x="22.9575%" y="95.50">li..</text></g><g><title>mir_promoted (36,250,009 samples, 19.21%)</title><rect x="6.4214%" y="181" width="19.2150%" height="15" fill="rgb(207,160,47)"/><text x="6.6714%" y="191.50">mir_promoted</text></g><g><title>mir_const_qualif (31,713,111 samples, 16.81%)</title><rect x="8.8263%" y="165" width="16.8101%" height="15" fill="rgb(228,23,34)"/><text x="9.0763%" y="175.50">mir_const_qualif</text></g><g><title>mir_const (31,349,899 samples, 16.62%)</title><rect x="9.0188%" y="149" width="16.6176%" height="15" fill="rgb(218,30,26)"/><text x="9.2688%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (30,804,474 samples, 16.33%)</title><rect x="9.3079%" y="133" width="16.3285%" height="15" fill="rgb(220,122,19)"/><text x="9.5579%" y="143.50">unsafety_check_result</text></g><g><title>mir_built (30,567,601 samples, 16.20%)</title><rect x="9.4335%" y="117" width="16.2029%" height="15" fill="rgb(250,228,42)"/><text x="9.6835%" y="127.50">mir_built</text></g><g><title>MIR_borrow_checking (47,535,558 samples, 25.20%)</title><rect x="0.9531%" y="213" width="25.1971%" height="15" fill="rgb(240,193,28)"/><text x="1.2031%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,424,317 samples, 25.14%)</title><rect x="1.0121%" y="197" width="25.1381%" height="15" fill="rgb(216,20,37)"/><text x="1.2621%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (969,350 samples, 0.51%)</title><rect x="25.6364%" y="181" width="0.5138%" height="15" fill="rgb(206,188,39)"/><text x="25.8864%" y="191.50"></text></g><g><title>MIR_effect_checking (411,945 samples, 0.22%)</title><rect x="26.1502%" y="213" width="0.2184%" height="15" fill="rgb(217,207,13)"/><text x="26.4002%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (366,274 samples, 0.19%)</title><rect x="26.1744%" y="197" width="0.1942%" height="15" fill="rgb(231,73,38)"/><text x="26.4244%" y="207.50"></text></g><g><title>hir_module_items (282,503 samples, 0.15%)</title><rect x="26.3686%" y="213" width="0.1497%" height="15" fill="rgb(225,20,46)"/><text x="26.6186%" y="223.50"></text></g><g><title>codegen_fn_attrs (264,382 samples, 0.14%)</title><rect x="27.2947%" y="181" width="0.1401%" height="15" fill="rgb(210,31,41)"/><text x="27.5447%" y="191.50"></text></g><g><title>check_mod_attrs (1,712,639 samples, 0.91%)</title><rect x="26.5270%" y="197" width="0.9078%" height="15" fill="rgb(221,200,47)"/><text x="26.7770%" y="207.50"></text></g><g><title>check_mod_loops (191,822 samples, 0.10%)</title><rect x="27.5267%" y="197" width="0.1017%" height="15" fill="rgb(226,26,5)"/><text x="27.7767%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (315,893 samples, 0.17%)</title><rect x="27.6348%" y="197" width="0.1674%" height="15" fill="rgb(249,33,26)"/><text x="27.8848%" y="207.50"></text></g><g><title>misc_checking_1 (2,461,187 samples, 1.30%)</title><rect x="26.5186%" y="213" width="1.3046%" height="15" fill="rgb(235,183,28)"/><text x="26.7686%" y="223.50"></text></g><g><title>check_mod_intrinsics (291,863 samples, 0.15%)</title><rect x="27.8257%" y="181" width="0.1547%" height="15" fill="rgb(221,5,38)"/><text x="28.0757%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (847,809 samples, 0.45%)</title><rect x="27.8238%" y="197" width="0.4494%" height="15" fill="rgb(247,18,42)"/><text x="28.0738%" y="207.50"></text></g><g><title>check_mod_liveness (552,316 samples, 0.29%)</title><rect x="27.9804%" y="181" width="0.2928%" height="15" fill="rgb(241,131,45)"/><text x="28.2304%" y="191.50"></text></g><g><title>misc_checking_2 (1,273,264 samples, 0.67%)</title><rect x="27.8231%" y="213" width="0.6749%" height="15" fill="rgb(249,31,29)"/><text x="28.0731%" y="223.50"></text></g><g><title>match_checking (424,195 samples, 0.22%)</title><rect x="28.2732%" y="197" width="0.2249%" height="15" fill="rgb(225,111,53)"/><text x="28.5232%" y="207.50"></text></g><g><title>check_match (401,305 samples, 0.21%)</title><rect x="28.2853%" y="181" width="0.2127%" height="15" fill="rgb(238,160,17)"/><text x="28.5353%" y="191.50"></text></g><g><title>death_checking (1,264,753 samples, 0.67%)</title><rect x="28.5955%" y="197" width="0.6704%" height="15" fill="rgb(214,148,48)"/><text x="28.8455%" y="207.50"></text></g><g><title>lint_levels (893,199 samples, 0.47%)</title><rect x="28.7925%" y="181" width="0.4735%" height="15" fill="rgb(232,36,49)"/><text x="29.0425%" y="191.50"></text></g><g><title>eval_to_const_value_raw (17,471,221 samples, 9.26%)</title><rect x="33.9982%" y="117" width="9.2609%" height="15" fill="rgb(209,103,24)"/><text x="34.2482%" y="127.50">eval_to_const..</text></g><g><title>eval_to_const_value_raw (17,451,320 samples, 9.25%)</title><rect x="34.0087%" y="101" width="9.2504%" height="15" fill="rgb(229,88,8)"/><text x="34.2587%" y="111.50">eval_to_const..</text></g><g><title>eval_to_allocation_raw (17,413,080 samples, 9.23%)</title><rect x="34.0290%" y="85" width="9.2301%" height="15" fill="rgb(213,181,19)"/><text x="34.2790%" y="95.50">eval_to_alloc..</text></g><g><title>promoted_mir (478,093 samples, 0.25%)</title><rect x="43.0057%" y="69" width="0.2534%" height="15" fill="rgb(254,191,54)"/><text x="43.2557%" y="79.50"></text></g><g><title>eval_to_allocation_raw (24,579,513 samples, 13.03%)</title><rect x="30.2462%" y="165" width="13.0288%" height="15" fill="rgb(241,83,37)"/><text x="30.4962%" y="175.50">eval_to_allocation_r..</text></g><g><title>eval_to_allocation_raw (24,560,242 samples, 13.02%)</title><rect x="30.2565%" y="149" width="13.0186%" height="15" fill="rgb(233,36,39)"/><text x="30.5065%" y="159.50">eval_to_allocation_r..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (17,594,233 samples, 9.33%)</title><rect x="33.9489%" y="133" width="9.3261%" height="15" fill="rgb(226,3,54)"/><text x="34.1989%" y="143.50">try_normalize..</text></g><g><title>crate_lints (26,463,374 samples, 14.03%)</title><rect x="29.2671%" y="181" width="14.0274%" height="15" fill="rgb(245,192,40)"/><text x="29.5171%" y="191.50">crate_lints</text></g><g><title>lint_checking (29,681,419 samples, 15.73%)</title><rect x="29.2660%" y="197" width="15.7332%" height="15" fill="rgb(238,167,29)"/><text x="29.5160%" y="207.50">lint_checking</text></g><g><title>module_lints (3,215,795 samples, 1.70%)</title><rect x="43.2945%" y="181" width="1.7046%" height="15" fill="rgb(232,182,51)"/><text x="43.5445%" y="191.50"></text></g><g><title>lint_mod (3,211,395 samples, 1.70%)</title><rect x="43.2969%" y="165" width="1.7023%" height="15" fill="rgb(231,60,39)"/><text x="43.5469%" y="175.50"></text></g><g><title>privacy_access_levels (327,044 samples, 0.17%)</title><rect x="44.9991%" y="197" width="0.1734%" height="15" fill="rgb(208,69,12)"/><text x="45.2491%" y="207.50"></text></g><g><title>privacy_checking_modules (1,346,055 samples, 0.71%)</title><rect x="45.1725%" y="197" width="0.7135%" height="15" fill="rgb(235,93,37)"/><text x="45.4225%" y="207.50"></text></g><g><title>check_mod_privacy (1,343,935 samples, 0.71%)</title><rect x="45.1736%" y="181" width="0.7124%" height="15" fill="rgb(213,116,39)"/><text x="45.4236%" y="191.50"></text></g><g><title>misc_checking_3 (32,818,034 samples, 17.40%)</title><rect x="28.4981%" y="213" width="17.3958%" height="15" fill="rgb(222,207,29)"/><text x="28.7481%" y="223.50">misc_checking_3</text></g><g><title>associated_item (195,823 samples, 0.10%)</title><rect x="47.4393%" y="133" width="0.1038%" height="15" fill="rgb(206,96,30)"/><text x="47.6893%" y="143.50"></text></g><g><title>associated_items (263,594 samples, 0.14%)</title><rect x="47.4121%" y="149" width="0.1397%" height="15" fill="rgb(218,138,4)"/><text x="47.6621%" y="159.50"></text></g><g><title>impl_trait_ref (343,863 samples, 0.18%)</title><rect x="47.6953%" y="53" width="0.1823%" height="15" fill="rgb(250,191,14)"/><text x="47.9453%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (322,373 samples, 0.17%)</title><rect x="47.7067%" y="37" width="0.1709%" height="15" fill="rgb(239,60,40)"/><text x="47.9567%" y="47.50"></text></g><g><title>coherent_trait (553,466 samples, 0.29%)</title><rect x="47.5983%" y="85" width="0.2934%" height="15" fill="rgb(206,27,48)"/><text x="47.8483%" y="95.50"></text></g><g><title>specialization_graph_of (550,426 samples, 0.29%)</title><rect x="47.5999%" y="69" width="0.2918%" height="15" fill="rgb(225,35,8)"/><text x="47.8499%" y="79.50"></text></g><g><title>adt_destructor (558,626 samples, 0.30%)</title><rect x="47.5959%" y="117" width="0.2961%" height="15" fill="rgb(250,213,24)"/><text x="47.8459%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (558,146 samples, 0.30%)</title><rect x="47.5961%" y="101" width="0.2959%" height="15" fill="rgb(247,123,22)"/><text x="47.8461%" y="111.50"></text></g><g><title>dropck_outlives (639,477 samples, 0.34%)</title><rect x="47.5559%" y="149" width="0.3390%" height="15" fill="rgb(231,138,38)"/><text x="47.8059%" y="159.50"></text></g><g><title>adt_dtorck_constraint (617,107 samples, 0.33%)</title><rect x="47.5677%" y="133" width="0.3271%" height="15" fill="rgb(231,145,46)"/><text x="47.8177%" y="143.50"></text></g><g><title>item_bodies_checking (3,911,033 samples, 2.07%)</title><rect x="45.9755%" y="197" width="2.0731%" height="15" fill="rgb(251,118,11)"/><text x="46.2255%" y="207.50">i..</text></g><g><title>typeck_item_bodies (3,908,083 samples, 2.07%)</title><rect x="45.9771%" y="181" width="2.0715%" height="15" fill="rgb(217,147,25)"/><text x="46.2271%" y="191.50">t..</text></g><g><title>typeck (3,871,203 samples, 2.05%)</title><rect x="45.9966%" y="165" width="2.0520%" height="15" fill="rgb(247,81,37)"/><text x="46.2466%" y="175.50">t..</text></g><g><title>item_types_checking (9,364,374 samples, 4.96%)</title><rect x="48.0486%" y="197" width="4.9638%" height="15" fill="rgb(209,12,38)"/><text x="48.2986%" y="207.50">item_t..</text></g><g><title>check_mod_item_types (9,361,804 samples, 4.96%)</title><rect x="48.0500%" y="181" width="4.9624%" height="15" fill="rgb(227,1,9)"/><text x="48.3000%" y="191.50">check_..</text></g><g><title>typeck (9,111,811 samples, 4.83%)</title><rect x="48.1825%" y="165" width="4.8299%" height="15" fill="rgb(248,47,43)"/><text x="48.4325%" y="175.50">typeck</text></g><g><title>type_collecting (1,236,444 samples, 0.66%)</title><rect x="53.0128%" y="197" width="0.6554%" height="15" fill="rgb(221,10,30)"/><text x="53.2628%" y="207.50"></text></g><g><title>collect_mod_item_types (1,229,474 samples, 0.65%)</title><rect x="53.0164%" y="181" width="0.6517%" height="15" fill="rgb(210,229,1)"/><text x="53.2664%" y="191.50"></text></g><g><title>type_of (352,173 samples, 0.19%)</title><rect x="53.4815%" y="165" width="0.1867%" height="15" fill="rgb(222,148,37)"/><text x="53.7315%" y="175.50"></text></g><g><title>named_region_map (307,223 samples, 0.16%)</title><rect x="53.5053%" y="149" width="0.1628%" height="15" fill="rgb(234,67,33)"/><text x="53.7553%" y="159.50"></text></g><g><title>resolve_lifetimes (296,683 samples, 0.16%)</title><rect x="53.5109%" y="133" width="0.1573%" height="15" fill="rgb(247,98,35)"/><text x="53.7609%" y="143.50"></text></g><g><title>check_impl_item_well_formed (352,573 samples, 0.19%)</title><rect x="53.7638%" y="181" width="0.1869%" height="15" fill="rgb(247,138,52)"/><text x="54.0138%" y="191.50"></text></g><g><title>evaluate_obligation (218,112 samples, 0.12%)</title><rect x="54.2286%" y="165" width="0.1156%" height="15" fill="rgb(213,79,30)"/><text x="54.4786%" y="175.50"></text></g><g><title>param_env (203,752 samples, 0.11%)</title><rect x="54.3647%" y="165" width="0.1080%" height="15" fill="rgb(246,177,23)"/><text x="54.6147%" y="175.50"></text></g><g><title>region_scope_tree (1,494,368 samples, 0.79%)</title><rect x="54.4759%" y="165" width="0.7921%" height="15" fill="rgb(230,62,27)"/><text x="54.7259%" y="175.50"></text></g><g><title>check_item_well_formed (2,722,202 samples, 1.44%)</title><rect x="53.9507%" y="181" width="1.4430%" height="15" fill="rgb(216,154,8)"/><text x="54.2007%" y="191.50"></text></g><g><title>trait_impls_of (234,272 samples, 0.12%)</title><rect x="55.2695%" y="165" width="0.1242%" height="15" fill="rgb(244,35,45)"/><text x="55.5195%" y="175.50"></text></g><g><title>param_env (202,622 samples, 0.11%)</title><rect x="55.7341%" y="165" width="0.1074%" height="15" fill="rgb(251,115,12)"/><text x="55.9841%" y="175.50"></text></g><g><title>analysis (104,684,112 samples, 55.49%)</title><rect x="0.3676%" y="229" width="55.4897%" height="15" fill="rgb(240,54,50)"/><text x="0.6176%" y="239.50">analysis</text></g><g><title>type_check_crate (18,796,588 samples, 9.96%)</title><rect x="45.8939%" y="213" width="9.9635%" height="15" fill="rgb(233,84,52)"/><text x="46.1439%" y="223.50">type_check_cra..</text></g><g><title>wf_checking (4,125,506 samples, 2.19%)</title><rect x="53.6705%" y="197" width="2.1868%" height="15" fill="rgb(207,117,47)"/><text x="53.9205%" y="207.50">w..</text></g><g><title>check_trait_item_well_formed (874,710 samples, 0.46%)</title><rect x="55.3937%" y="181" width="0.4637%" height="15" fill="rgb(249,43,39)"/><text x="55.6437%" y="191.50"></text></g><g><title>codegen_crate (402,044 samples, 0.21%)</title><rect x="55.8625%" y="229" width="0.2131%" height="15" fill="rgb(209,38,44)"/><text x="56.1125%" y="239.50"></text></g><g><title>AST_validation (253,383 samples, 0.13%)</title><rect x="56.1715%" y="213" width="0.1343%" height="15" fill="rgb(236,212,23)"/><text x="56.4215%" y="223.50"></text></g><g><title>complete_gated_feature_checking (200,363 samples, 0.11%)</title><rect x="56.3058%" y="213" width="0.1062%" height="15" fill="rgb(242,79,21)"/><text x="56.5558%" y="223.50"></text></g><g><title>metadata_register_crate (1,266,524 samples, 0.67%)</title><rect x="86.5959%" y="181" width="0.6713%" height="15" fill="rgb(211,96,35)"/><text x="86.8459%" y="191.50"></text></g><g><title>metadata_register_crate (467,937 samples, 0.25%)</title><rect x="87.0192%" y="165" width="0.2480%" height="15" fill="rgb(253,215,40)"/><text x="87.2692%" y="175.50"></text></g><g><title>macro_expand_crate (59,331,339 samples, 31.45%)</title><rect x="56.4452%" y="213" width="31.4496%" height="15" fill="rgb(211,81,21)"/><text x="56.6952%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (59,311,889 samples, 31.44%)</title><rect x="56.4556%" y="197" width="31.4393%" height="15" fill="rgb(208,190,38)"/><text x="56.7056%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,184,113 samples, 0.63%)</title><rect x="87.2672%" y="181" width="0.6277%" height="15" fill="rgb(235,213,38)"/><text x="87.5172%" y="191.50"></text></g><g><title>finalize_macro_resolutions (226,202 samples, 0.12%)</title><rect x="87.9790%" y="197" width="0.1199%" height="15" fill="rgb(237,122,38)"/><text x="88.2290%" y="207.50"></text></g><g><title>late_resolve_crate (623,317 samples, 0.33%)</title><rect x="88.0989%" y="197" width="0.3304%" height="15" fill="rgb(244,218,35)"/><text x="88.3489%" y="207.50"></text></g><g><title>configure_and_expand (61,316,451 samples, 32.50%)</title><rect x="56.0756%" y="229" width="32.5019%" height="15" fill="rgb(240,68,47)"/><text x="56.3256%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,140,612 samples, 0.60%)</title><rect x="87.9729%" y="213" width="0.6046%" height="15" fill="rgb(210,16,53)"/><text x="88.2229%" y="223.50"></text></g><g><title>drop_ast (847,520 samples, 0.45%)</title><rect x="88.5775%" y="229" width="0.4492%" height="15" fill="rgb(235,124,12)"/><text x="88.8275%" y="239.50"></text></g><g><title>early_lint_checks (3,117,194 samples, 1.65%)</title><rect x="89.0333%" y="229" width="1.6523%" height="15" fill="rgb(224,169,11)"/><text x="89.2833%" y="239.50"></text></g><g><title>free_global_ctxt (2,735,980 samples, 1.45%)</title><rect x="90.6857%" y="229" width="1.4503%" height="15" fill="rgb(250,166,2)"/><text x="90.9357%" y="239.50"></text></g><g><title>generate_crate_metadata (3,430,598 samples, 1.82%)</title><rect x="92.1359%" y="229" width="1.8184%" height="15" fill="rgb(242,216,29)"/><text x="92.3859%" y="239.50">g..</text></g><g><title>hir_lowering (6,851,806 samples, 3.63%)</title><rect x="93.9544%" y="229" width="3.6319%" height="15" fill="rgb(230,116,27)"/><text x="94.2044%" y="239.50">hir_..</text></g><g><title>parse_crate (2,405,097 samples, 1.27%)</title><rect x="97.6167%" y="229" width="1.2749%" height="15" fill="rgb(228,99,48)"/><text x="97.8667%" y="239.50"></text></g><g><title>prepare_outputs (209,942 samples, 0.11%)</title><rect x="98.8957%" y="229" width="0.1113%" height="15" fill="rgb(253,11,6)"/><text x="99.1457%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,139,792 samples, 0.60%)</title><rect x="99.0070%" y="229" width="0.6042%" height="15" fill="rgb(247,143,39)"/><text x="99.2570%" y="239.50"></text></g><g><title>all (188,655,083 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (188,655,083 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (631,396 samples, 0.33%)</title><rect x="99.6653%" y="229" width="0.3347%" height="15" fill="rgb(216,164,2)"/><text x="99.9153%" y="239.50"></text></g></svg></svg>