<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (205,241 samples, 0.16%)</title><rect x="8.1259%" y="213" width="0.1592%" height="15" fill="rgb(227,0,7)"/><text x="8.3759%" y="223.50"></text></g><g><title>param_env (304,211 samples, 0.24%)</title><rect x="9.3117%" y="181" width="0.2360%" height="15" fill="rgb(217,0,24)"/><text x="9.5617%" y="191.50"></text></g><g><title>item_attrs (168,074 samples, 0.13%)</title><rect x="9.8849%" y="149" width="0.1304%" height="15" fill="rgb(221,193,54)"/><text x="10.1349%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (159,843 samples, 0.12%)</title><rect x="9.8913%" y="133" width="0.1240%" height="15" fill="rgb(248,212,6)"/><text x="10.1413%" y="143.50"></text></g><g><title>codegen_fn_attrs (291,476 samples, 0.23%)</title><rect x="9.8122%" y="165" width="0.2261%" height="15" fill="rgb(208,68,35)"/><text x="10.0622%" y="175.50"></text></g><g><title>adt_drop_tys (160,542 samples, 0.12%)</title><rect x="11.7015%" y="117" width="0.1245%" height="15" fill="rgb(232,128,0)"/><text x="11.9515%" y="127.50"></text></g><g><title>adt_drop_tys (450,985 samples, 0.35%)</title><rect x="11.6686%" y="133" width="0.3498%" height="15" fill="rgb(207,160,47)"/><text x="11.9186%" y="143.50"></text></g><g><title>is_copy_raw (1,023,400 samples, 0.79%)</title><rect x="12.0184%" y="133" width="0.7938%" height="15" fill="rgb(228,23,34)"/><text x="12.2684%" y="143.50"></text></g><g><title>evaluate_obligation (821,647 samples, 0.64%)</title><rect x="12.1749%" y="117" width="0.6373%" height="15" fill="rgb(218,30,26)"/><text x="12.4249%" y="127.50"></text></g><g><title>needs_drop_raw (1,637,419 samples, 1.27%)</title><rect x="11.5455%" y="149" width="1.2701%" height="15" fill="rgb(220,122,19)"/><text x="11.7955%" y="159.50"></text></g><g><title>impl_parent (239,780 samples, 0.19%)</title><rect x="13.4136%" y="117" width="0.1860%" height="15" fill="rgb(250,228,42)"/><text x="13.6636%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (156,240 samples, 0.12%)</title><rect x="13.4784%" y="101" width="0.1212%" height="15" fill="rgb(240,193,28)"/><text x="13.7284%" y="111.50"></text></g><g><title>specialization_graph_of (1,367,194 samples, 1.06%)</title><rect x="12.9724%" y="133" width="1.0605%" height="15" fill="rgb(216,20,37)"/><text x="13.2224%" y="143.50"></text></g><g><title>impl_trait_ref (558,586 samples, 0.43%)</title><rect x="13.5996%" y="117" width="0.4333%" height="15" fill="rgb(206,188,39)"/><text x="13.8496%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (477,445 samples, 0.37%)</title><rect x="13.6625%" y="101" width="0.3703%" height="15" fill="rgb(217,207,13)"/><text x="13.9125%" y="111.50"></text></g><g><title>resolve_instance (1,631,667 samples, 1.27%)</title><rect x="12.8156%" y="149" width="1.2656%" height="15" fill="rgb(231,73,38)"/><text x="13.0656%" y="159.50"></text></g><g><title>thir_body (606,037 samples, 0.47%)</title><rect x="14.0984%" y="149" width="0.4701%" height="15" fill="rgb(225,20,46)"/><text x="14.3484%" y="159.50"></text></g><g><title>mir_const (7,506,272 samples, 5.82%)</title><rect x="8.8407%" y="197" width="5.8224%" height="15" fill="rgb(210,31,41)"/><text x="9.0907%" y="207.50">mir_con..</text></g><g><title>unsafety_check_result (6,594,847 samples, 5.12%)</title><rect x="9.5477%" y="181" width="5.1154%" height="15" fill="rgb(221,200,47)"/><text x="9.7977%" y="191.50">unsafe..</text></g><g><title>mir_built (5,962,337 samples, 4.62%)</title><rect x="10.0383%" y="165" width="4.6248%" height="15" fill="rgb(226,26,5)"/><text x="10.2883%" y="175.50">mir_b..</text></g><g><title>mir_promoted (8,153,408 samples, 6.32%)</title><rect x="8.3641%" y="213" width="6.3243%" height="15" fill="rgb(249,33,26)"/><text x="8.6141%" y="223.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (1,104,161 samples, 0.86%)</title><rect x="14.6884%" y="213" width="0.8565%" height="15" fill="rgb(235,183,28)"/><text x="14.9384%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (491,278 samples, 0.38%)</title><rect x="15.5449%" y="213" width="0.3811%" height="15" fill="rgb(221,5,38)"/><text x="15.7949%" y="223.50"></text></g><g><title>normalize_projection_ty (221,475 samples, 0.17%)</title><rect x="15.7541%" y="197" width="0.1718%" height="15" fill="rgb(247,18,42)"/><text x="16.0041%" y="207.50"></text></g><g><title>type_op_normalize_predicate (303,233 samples, 0.24%)</title><rect x="15.9259%" y="213" width="0.2352%" height="15" fill="rgb(241,131,45)"/><text x="16.1759%" y="223.50"></text></g><g><title>type_op_normalize_ty (347,465 samples, 0.27%)</title><rect x="16.1611%" y="213" width="0.2695%" height="15" fill="rgb(249,31,29)"/><text x="16.4111%" y="223.50"></text></g><g><title>type_op_prove_predicate (3,748,322 samples, 2.91%)</title><rect x="16.4307%" y="213" width="2.9075%" height="15" fill="rgb(225,111,53)"/><text x="16.6807%" y="223.50">ty..</text></g><g><title>MIR_borrow_checking (24,219,170 samples, 18.79%)</title><rect x="0.5592%" y="245" width="18.7860%" height="15" fill="rgb(238,160,17)"/><text x="0.8092%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,154,439 samples, 18.74%)</title><rect x="0.6094%" y="229" width="18.7358%" height="15" fill="rgb(214,148,48)"/><text x="0.8594%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (151,431 samples, 0.12%)</title><rect x="19.3586%" y="245" width="0.1175%" height="15" fill="rgb(232,36,49)"/><text x="19.6086%" y="255.50"></text></g><g><title>should_inherit_track_caller (180,622 samples, 0.14%)</title><rect x="19.7104%" y="197" width="0.1401%" height="15" fill="rgb(209,103,24)"/><text x="19.9604%" y="207.50"></text></g><g><title>codegen_fn_attrs (325,415 samples, 0.25%)</title><rect x="19.6076%" y="213" width="0.2524%" height="15" fill="rgb(229,88,8)"/><text x="19.8576%" y="223.50"></text></g><g><title>check_mod_attrs (466,216 samples, 0.36%)</title><rect x="19.4984%" y="229" width="0.3616%" height="15" fill="rgb(213,181,19)"/><text x="19.7484%" y="239.50"></text></g><g><title>lookup_deprecation_entry (133,971 samples, 0.10%)</title><rect x="20.0754%" y="213" width="0.1039%" height="15" fill="rgb(254,191,54)"/><text x="20.3254%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (368,073 samples, 0.29%)</title><rect x="19.9569%" y="229" width="0.2855%" height="15" fill="rgb(241,83,37)"/><text x="20.2069%" y="239.50"></text></g><g><title>misc_checking_1 (1,037,931 samples, 0.81%)</title><rect x="19.4765%" y="245" width="0.8051%" height="15" fill="rgb(233,36,39)"/><text x="19.7265%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (496,365 samples, 0.39%)</title><rect x="20.2831%" y="229" width="0.3850%" height="15" fill="rgb(226,3,54)"/><text x="20.5331%" y="239.50"></text></g><g><title>check_mod_liveness (422,825 samples, 0.33%)</title><rect x="20.3401%" y="213" width="0.3280%" height="15" fill="rgb(245,192,40)"/><text x="20.5901%" y="223.50"></text></g><g><title>type_uninhabited_from (200,742 samples, 0.16%)</title><rect x="20.5124%" y="197" width="0.1557%" height="15" fill="rgb(238,167,29)"/><text x="20.7624%" y="207.50"></text></g><g><title>type_uninhabited_from (155,911 samples, 0.12%)</title><rect x="20.5472%" y="181" width="0.1209%" height="15" fill="rgb(232,182,51)"/><text x="20.7972%" y="191.50"></text></g><g><title>type_uninhabited_from (130,651 samples, 0.10%)</title><rect x="20.5668%" y="165" width="0.1013%" height="15" fill="rgb(231,60,39)"/><text x="20.8168%" y="175.50"></text></g><g><title>misc_checking_2 (1,042,371 samples, 0.81%)</title><rect x="20.2816%" y="245" width="0.8085%" height="15" fill="rgb(208,69,12)"/><text x="20.5316%" y="255.50"></text></g><g><title>match_checking (544,086 samples, 0.42%)</title><rect x="20.6681%" y="229" width="0.4220%" height="15" fill="rgb(235,93,37)"/><text x="20.9181%" y="239.50"></text></g><g><title>check_match (525,056 samples, 0.41%)</title><rect x="20.6829%" y="213" width="0.4073%" height="15" fill="rgb(213,116,39)"/><text x="20.9329%" y="223.50"></text></g><g><title>check_private_in_public (160,652 samples, 0.12%)</title><rect x="21.0976%" y="229" width="0.1246%" height="15" fill="rgb(222,207,29)"/><text x="21.3476%" y="239.50"></text></g><g><title>death_checking (295,943 samples, 0.23%)</title><rect x="21.2222%" y="229" width="0.2296%" height="15" fill="rgb(206,96,30)"/><text x="21.4722%" y="239.50"></text></g><g><title>param_env (349,073 samples, 0.27%)</title><rect x="22.2176%" y="197" width="0.2708%" height="15" fill="rgb(218,138,4)"/><text x="22.4676%" y="207.50"></text></g><g><title>predicates_of (175,412 samples, 0.14%)</title><rect x="22.3523%" y="181" width="0.1361%" height="15" fill="rgb(250,191,14)"/><text x="22.6023%" y="191.50"></text></g><g><title>predicates_defined_on (134,842 samples, 0.10%)</title><rect x="22.3838%" y="165" width="0.1046%" height="15" fill="rgb(239,60,40)"/><text x="22.6338%" y="175.50"></text></g><g><title>crate_lints (3,189,856 samples, 2.47%)</title><rect x="21.4530%" y="213" width="2.4743%" height="15" fill="rgb(206,27,48)"/><text x="21.7030%" y="223.50">cr..</text></g><g><title>type_of (1,804,676 samples, 1.40%)</title><rect x="22.5275%" y="197" width="1.3998%" height="15" fill="rgb(225,35,8)"/><text x="22.7775%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (1,369,661 samples, 1.06%)</title><rect x="22.8649%" y="181" width="1.0624%" height="15" fill="rgb(250,213,24)"/><text x="23.1149%" y="191.50"></text></g><g><title>lint_checking (3,568,690 samples, 2.77%)</title><rect x="21.4518%" y="229" width="2.7681%" height="15" fill="rgb(247,123,22)"/><text x="21.7018%" y="239.50">li..</text></g><g><title>module_lints (377,224 samples, 0.29%)</title><rect x="23.9273%" y="213" width="0.2926%" height="15" fill="rgb(231,138,38)"/><text x="24.1773%" y="223.50"></text></g><g><title>lint_mod (371,293 samples, 0.29%)</title><rect x="23.9319%" y="197" width="0.2880%" height="15" fill="rgb(231,145,46)"/><text x="24.1819%" y="207.50"></text></g><g><title>privacy_access_levels (183,362 samples, 0.14%)</title><rect x="24.2199%" y="229" width="0.1422%" height="15" fill="rgb(251,118,11)"/><text x="24.4699%" y="239.50"></text></g><g><title>privacy_checking_modules (783,619 samples, 0.61%)</title><rect x="24.3621%" y="229" width="0.6078%" height="15" fill="rgb(217,147,25)"/><text x="24.6121%" y="239.50"></text></g><g><title>check_mod_privacy (779,059 samples, 0.60%)</title><rect x="24.3657%" y="213" width="0.6043%" height="15" fill="rgb(247,81,37)"/><text x="24.6157%" y="223.50"></text></g><g><title>misc_checking_3 (5,020,856 samples, 3.89%)</title><rect x="21.0901%" y="245" width="3.8945%" height="15" fill="rgb(209,12,38)"/><text x="21.3401%" y="255.50">misc..</text></g><g><title>impl_parent (2,701,580 samples, 2.10%)</title><rect x="28.4603%" y="181" width="2.0955%" height="15" fill="rgb(227,1,9)"/><text x="28.7103%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,663,914 samples, 1.29%)</title><rect x="29.2652%" y="165" width="1.2906%" height="15" fill="rgb(248,47,43)"/><text x="29.5152%" y="175.50"></text></g><g><title>impl_trait_ref (7,480,908 samples, 5.80%)</title><rect x="30.5575%" y="181" width="5.8027%" height="15" fill="rgb(221,10,30)"/><text x="30.8075%" y="191.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,254,754 samples, 4.85%)</title><rect x="31.5086%" y="165" width="4.8516%" height="15" fill="rgb(210,229,1)"/><text x="31.7586%" y="175.50">metada..</text></g><g><title>trait_impls_of (1,003,281 samples, 0.78%)</title><rect x="36.4039%" y="181" width="0.7782%" height="15" fill="rgb(222,148,37)"/><text x="36.6539%" y="191.50"></text></g><g><title>implementations_of_trait (322,216 samples, 0.25%)</title><rect x="36.9322%" y="165" width="0.2499%" height="15" fill="rgb(234,67,33)"/><text x="37.1822%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (217,043 samples, 0.17%)</title><rect x="37.0138%" y="149" width="0.1684%" height="15" fill="rgb(247,98,35)"/><text x="37.2638%" y="159.50"></text></g><g><title>coherent_trait (15,651,204 samples, 12.14%)</title><rect x="25.0430%" y="213" width="12.1401%" height="15" fill="rgb(247,138,52)"/><text x="25.2930%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (15,633,644 samples, 12.13%)</title><rect x="25.0566%" y="197" width="12.1265%" height="15" fill="rgb(213,79,30)"/><text x="25.3066%" y="207.50">specialization_gra..</text></g><g><title>coherence_checking (15,718,564 samples, 12.19%)</title><rect x="25.0284%" y="229" width="12.1924%" height="15" fill="rgb(246,177,23)"/><text x="25.2784%" y="239.50">coherence_checking</text></g><g><title>associated_item (376,425 samples, 0.29%)</title><rect x="45.3220%" y="165" width="0.2920%" height="15" fill="rgb(230,62,27)"/><text x="45.5720%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (293,024 samples, 0.23%)</title><rect x="45.3867%" y="149" width="0.2273%" height="15" fill="rgb(216,154,8)"/><text x="45.6367%" y="159.50"></text></g><g><title>associated_items (778,279 samples, 0.60%)</title><rect x="45.2065%" y="181" width="0.6037%" height="15" fill="rgb(244,35,45)"/><text x="45.4565%" y="191.50"></text></g><g><title>associated_item_def_ids (252,923 samples, 0.20%)</title><rect x="45.6140%" y="165" width="0.1962%" height="15" fill="rgb(251,115,12)"/><text x="45.8640%" y="175.50"></text></g><g><title>adt_dtorck_constraint (229,544 samples, 0.18%)</title><rect x="46.2847%" y="149" width="0.1780%" height="15" fill="rgb(240,54,50)"/><text x="46.5347%" y="159.50"></text></g><g><title>adt_dtorck_constraint (529,966 samples, 0.41%)</title><rect x="46.1059%" y="165" width="0.4111%" height="15" fill="rgb(233,84,52)"/><text x="46.3559%" y="175.50"></text></g><g><title>dropck_outlives (852,802 samples, 0.66%)</title><rect x="45.8658%" y="181" width="0.6615%" height="15" fill="rgb(207,117,47)"/><text x="46.1158%" y="191.50"></text></g><g><title>adt_sized_constraint (144,091 samples, 0.11%)</title><rect x="48.6672%" y="165" width="0.1118%" height="15" fill="rgb(249,43,39)"/><text x="48.9172%" y="175.50"></text></g><g><title>generics_of (204,373 samples, 0.16%)</title><rect x="48.7789%" y="165" width="0.1585%" height="15" fill="rgb(209,38,44)"/><text x="49.0289%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (174,173 samples, 0.14%)</title><rect x="48.8024%" y="149" width="0.1351%" height="15" fill="rgb(236,212,23)"/><text x="49.0524%" y="159.50"></text></g><g><title>impl_trait_ref (169,792 samples, 0.13%)</title><rect x="48.9571%" y="165" width="0.1317%" height="15" fill="rgb(242,79,21)"/><text x="49.2071%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (141,752 samples, 0.11%)</title><rect x="48.9789%" y="149" width="0.1100%" height="15" fill="rgb(211,96,35)"/><text x="49.2289%" y="159.50"></text></g><g><title>predicates_of (183,951 samples, 0.14%)</title><rect x="49.0971%" y="165" width="0.1427%" height="15" fill="rgb(253,215,40)"/><text x="49.3471%" y="175.50"></text></g><g><title>specializes (205,902 samples, 0.16%)</title><rect x="49.2398%" y="165" width="0.1597%" height="15" fill="rgb(211,81,21)"/><text x="49.4898%" y="175.50"></text></g><g><title>param_env (132,651 samples, 0.10%)</title><rect x="49.2966%" y="149" width="0.1029%" height="15" fill="rgb(208,190,38)"/><text x="49.5466%" y="159.50"></text></g><g><title>trait_impls_of (536,796 samples, 0.42%)</title><rect x="49.4042%" y="165" width="0.4164%" height="15" fill="rgb(235,213,38)"/><text x="49.6542%" y="175.50"></text></g><g><title>implementations_of_trait (216,412 samples, 0.17%)</title><rect x="49.6527%" y="149" width="0.1679%" height="15" fill="rgb(237,122,38)"/><text x="49.9027%" y="159.50"></text></g><g><title>evaluate_obligation (4,246,424 samples, 3.29%)</title><rect x="46.5273%" y="181" width="3.2938%" height="15" fill="rgb(244,218,35)"/><text x="46.7773%" y="191.50">eva..</text></g><g><title>generics_of (393,265 samples, 0.31%)</title><rect x="49.9440%" y="181" width="0.3050%" height="15" fill="rgb(240,68,47)"/><text x="50.1940%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (314,833 samples, 0.24%)</title><rect x="50.0049%" y="165" width="0.2442%" height="15" fill="rgb(210,16,53)"/><text x="50.2549%" y="175.50"></text></g><g><title>impl_trait_ref (254,596 samples, 0.20%)</title><rect x="50.2848%" y="181" width="0.1975%" height="15" fill="rgb(235,124,12)"/><text x="50.5348%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (196,183 samples, 0.15%)</title><rect x="50.3302%" y="165" width="0.1522%" height="15" fill="rgb(224,169,11)"/><text x="50.5802%" y="175.50"></text></g><g><title>evaluate_obligation (277,065 samples, 0.21%)</title><rect x="50.8464%" y="165" width="0.2149%" height="15" fill="rgb(250,166,2)"/><text x="51.0964%" y="175.50"></text></g><g><title>method_autoderef_steps (574,449 samples, 0.45%)</title><rect x="50.6334%" y="181" width="0.4456%" height="15" fill="rgb(242,216,29)"/><text x="50.8834%" y="191.50"></text></g><g><title>predicates_of (326,946 samples, 0.25%)</title><rect x="51.1229%" y="181" width="0.2536%" height="15" fill="rgb(230,116,27)"/><text x="51.3729%" y="191.50"></text></g><g><title>predicates_defined_on (205,962 samples, 0.16%)</title><rect x="51.2168%" y="165" width="0.1598%" height="15" fill="rgb(228,99,48)"/><text x="51.4668%" y="175.50"></text></g><g><title>specializes (135,331 samples, 0.10%)</title><rect x="51.3766%" y="181" width="0.1050%" height="15" fill="rgb(253,11,6)"/><text x="51.6266%" y="191.50"></text></g><g><title>trait_impls_of (204,502 samples, 0.16%)</title><rect x="51.4898%" y="181" width="0.1586%" height="15" fill="rgb(247,143,39)"/><text x="51.7398%" y="191.50"></text></g><g><title>associated_item (231,904 samples, 0.18%)</title><rect x="59.6423%" y="149" width="0.1799%" height="15" fill="rgb(236,97,10)"/><text x="59.8923%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (186,154 samples, 0.14%)</title><rect x="59.6778%" y="133" width="0.1444%" height="15" fill="rgb(233,208,19)"/><text x="59.9278%" y="143.50"></text></g><g><title>associated_items (331,804 samples, 0.26%)</title><rect x="59.5794%" y="165" width="0.2574%" height="15" fill="rgb(216,164,2)"/><text x="59.8294%" y="175.50"></text></g><g><title>adt_def (153,422 samples, 0.12%)</title><rect x="60.7580%" y="53" width="0.1190%" height="15" fill="rgb(220,129,5)"/><text x="61.0080%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (151,062 samples, 0.12%)</title><rect x="60.7598%" y="37" width="0.1172%" height="15" fill="rgb(242,17,10)"/><text x="61.0098%" y="47.50"></text></g><g><title>adt_dtorck_constraint (280,242 samples, 0.22%)</title><rect x="60.7430%" y="69" width="0.2174%" height="15" fill="rgb(242,107,0)"/><text x="60.9930%" y="79.50"></text></g><g><title>adt_dtorck_constraint (389,083 samples, 0.30%)</title><rect x="60.6630%" y="85" width="0.3018%" height="15" fill="rgb(251,28,31)"/><text x="60.9130%" y="95.50"></text></g><g><title>adt_dtorck_constraint (480,585 samples, 0.37%)</title><rect x="60.5942%" y="101" width="0.3728%" height="15" fill="rgb(233,223,10)"/><text x="60.8442%" y="111.50"></text></g><g><title>adt_dtorck_constraint (570,086 samples, 0.44%)</title><rect x="60.5303%" y="117" width="0.4422%" height="15" fill="rgb(215,21,27)"/><text x="60.7803%" y="127.50"></text></g><g><title>adt_dtorck_constraint (725,639 samples, 0.56%)</title><rect x="60.4219%" y="133" width="0.5629%" height="15" fill="rgb(232,23,21)"/><text x="60.6719%" y="143.50"></text></g><g><title>adt_dtorck_constraint (945,011 samples, 0.73%)</title><rect x="60.2623%" y="149" width="0.7330%" height="15" fill="rgb(244,5,23)"/><text x="60.5123%" y="159.50"></text></g><g><title>dropck_outlives (1,519,188 samples, 1.18%)</title><rect x="59.8653%" y="165" width="1.1784%" height="15" fill="rgb(226,81,46)"/><text x="60.1153%" y="175.50"></text></g><g><title>adt_sized_constraint (153,501 samples, 0.12%)</title><rect x="63.1269%" y="149" width="0.1191%" height="15" fill="rgb(247,70,30)"/><text x="63.3769%" y="159.50"></text></g><g><title>def_span (173,152 samples, 0.13%)</title><rect x="63.3307%" y="101" width="0.1343%" height="15" fill="rgb(212,68,19)"/><text x="63.5807%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (172,172 samples, 0.13%)</title><rect x="63.3314%" y="85" width="0.1335%" height="15" fill="rgb(240,187,13)"/><text x="63.5814%" y="95.50"></text></g><g><title>eval_to_const_value_raw (161,772 samples, 0.13%)</title><rect x="63.4884%" y="85" width="0.1255%" height="15" fill="rgb(223,113,26)"/><text x="63.7384%" y="95.50"></text></g><g><title>eval_to_const_value_raw (159,232 samples, 0.12%)</title><rect x="63.4904%" y="69" width="0.1235%" height="15" fill="rgb(206,192,2)"/><text x="63.7404%" y="79.50"></text></g><g><title>eval_to_allocation_raw (154,422 samples, 0.12%)</title><rect x="63.4941%" y="53" width="0.1198%" height="15" fill="rgb(241,108,4)"/><text x="63.7441%" y="63.50"></text></g><g><title>eval_to_const_value_raw (475,795 samples, 0.37%)</title><rect x="63.2513%" y="149" width="0.3691%" height="15" fill="rgb(247,173,49)"/><text x="63.5013%" y="159.50"></text></g><g><title>eval_to_const_value_raw (456,095 samples, 0.35%)</title><rect x="63.2665%" y="133" width="0.3538%" height="15" fill="rgb(224,114,35)"/><text x="63.5165%" y="143.50"></text></g><g><title>eval_to_allocation_raw (452,065 samples, 0.35%)</title><rect x="63.2697%" y="117" width="0.3507%" height="15" fill="rgb(245,159,27)"/><text x="63.5197%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (179,172 samples, 0.14%)</title><rect x="63.4813%" y="101" width="0.1390%" height="15" fill="rgb(245,172,44)"/><text x="63.7313%" y="111.50"></text></g><g><title>trait_impls_of (313,873 samples, 0.24%)</title><rect x="63.9142%" y="149" width="0.2435%" height="15" fill="rgb(236,23,11)"/><text x="64.1642%" y="159.50"></text></g><g><title>implementations_of_trait (165,092 samples, 0.13%)</title><rect x="64.0296%" y="133" width="0.1281%" height="15" fill="rgb(205,117,38)"/><text x="64.2796%" y="143.50"></text></g><g><title>evaluate_obligation (4,167,172 samples, 3.23%)</title><rect x="61.0439%" y="165" width="3.2323%" height="15" fill="rgb(237,72,25)"/><text x="61.2939%" y="175.50">eva..</text></g><g><title>type_of (152,824 samples, 0.12%)</title><rect x="64.1577%" y="149" width="0.1185%" height="15" fill="rgb(244,70,9)"/><text x="64.4077%" y="159.50"></text></g><g><title>is_copy_raw (623,327 samples, 0.48%)</title><rect x="64.4907%" y="165" width="0.4835%" height="15" fill="rgb(217,125,39)"/><text x="64.7407%" y="175.50"></text></g><g><title>evaluate_obligation (536,216 samples, 0.42%)</title><rect x="64.5582%" y="149" width="0.4159%" height="15" fill="rgb(235,36,10)"/><text x="64.8082%" y="159.50"></text></g><g><title>trait_impls_of (222,173 samples, 0.17%)</title><rect x="64.8018%" y="133" width="0.1723%" height="15" fill="rgb(251,123,47)"/><text x="65.0518%" y="143.50"></text></g><g><title>item_attrs (134,263 samples, 0.10%)</title><rect x="64.9742%" y="165" width="0.1041%" height="15" fill="rgb(221,13,13)"/><text x="65.2242%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (130,213 samples, 0.10%)</title><rect x="64.9773%" y="149" width="0.1010%" height="15" fill="rgb(238,131,9)"/><text x="65.2273%" y="159.50"></text></g><g><title>method_autoderef_steps (257,754 samples, 0.20%)</title><rect x="65.1208%" y="165" width="0.1999%" height="15" fill="rgb(211,50,8)"/><text x="65.3708%" y="175.50"></text></g><g><title>predicates_of (243,405 samples, 0.19%)</title><rect x="65.3480%" y="165" width="0.1888%" height="15" fill="rgb(245,182,24)"/><text x="65.5980%" y="175.50"></text></g><g><title>predicates_defined_on (162,072 samples, 0.13%)</title><rect x="65.4111%" y="149" width="0.1257%" height="15" fill="rgb(242,14,37)"/><text x="65.6611%" y="159.50"></text></g><g><title>type_of (284,602 samples, 0.22%)</title><rect x="65.5700%" y="165" width="0.2208%" height="15" fill="rgb(246,228,12)"/><text x="65.8200%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (272,392 samples, 0.21%)</title><rect x="65.5795%" y="149" width="0.2113%" height="15" fill="rgb(213,55,15)"/><text x="65.8295%" y="159.50"></text></g><g><title>typeck (18,295,874 samples, 14.19%)</title><rect x="51.7149%" y="181" width="14.1915%" height="15" fill="rgb(209,9,3)"/><text x="51.9649%" y="191.50">typeck</text></g><g><title>item_bodies_checking (36,986,682 samples, 28.69%)</title><rect x="37.2465%" y="229" width="28.6894%" height="15" fill="rgb(230,59,30)"/><text x="37.4965%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (36,983,222 samples, 28.69%)</title><rect x="37.2492%" y="213" width="28.6867%" height="15" fill="rgb(209,121,21)"/><text x="37.4992%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (36,932,101 samples, 28.65%)</title><rect x="37.2888%" y="197" width="28.6470%" height="15" fill="rgb(220,109,13)"/><text x="37.5388%" y="207.50">typeck</text></g><g><title>impl_trait_ref (277,676 samples, 0.22%)</title><rect x="67.0377%" y="149" width="0.2154%" height="15" fill="rgb(232,18,1)"/><text x="67.2877%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (234,125 samples, 0.18%)</title><rect x="67.0715%" y="133" width="0.1816%" height="15" fill="rgb(215,41,42)"/><text x="67.3215%" y="143.50"></text></g><g><title>adt_destructor (683,737 samples, 0.53%)</title><rect x="66.7851%" y="197" width="0.5304%" height="15" fill="rgb(224,123,36)"/><text x="67.0351%" y="207.50"></text></g><g><title>coherent_trait (678,347 samples, 0.53%)</title><rect x="66.7893%" y="181" width="0.5262%" height="15" fill="rgb(240,125,3)"/><text x="67.0393%" y="191.50"></text></g><g><title>specialization_graph_of (676,497 samples, 0.52%)</title><rect x="66.7907%" y="165" width="0.5247%" height="15" fill="rgb(205,98,50)"/><text x="67.0407%" y="175.50"></text></g><g><title>item_types_checking (2,067,473 samples, 1.60%)</title><rect x="65.9359%" y="229" width="1.6037%" height="15" fill="rgb(205,185,37)"/><text x="66.1859%" y="239.50"></text></g><g><title>check_mod_item_types (2,061,683 samples, 1.60%)</title><rect x="65.9404%" y="213" width="1.5992%" height="15" fill="rgb(238,207,15)"/><text x="66.1904%" y="223.50"></text></g><g><title>fn_sig (265,783 samples, 0.21%)</title><rect x="67.6987%" y="197" width="0.2062%" height="15" fill="rgb(213,199,42)"/><text x="67.9487%" y="207.50"></text></g><g><title>generics_of (214,612 samples, 0.17%)</title><rect x="67.9049%" y="197" width="0.1665%" height="15" fill="rgb(235,201,11)"/><text x="68.1549%" y="207.50"></text></g><g><title>late_bound_vars_map (147,873 samples, 0.11%)</title><rect x="68.2736%" y="149" width="0.1147%" height="15" fill="rgb(207,46,11)"/><text x="68.5236%" y="159.50"></text></g><g><title>resolve_lifetimes (142,363 samples, 0.11%)</title><rect x="68.2778%" y="133" width="0.1104%" height="15" fill="rgb(241,35,35)"/><text x="68.5278%" y="143.50"></text></g><g><title>explicit_predicates_of (390,057 samples, 0.30%)</title><rect x="68.1561%" y="165" width="0.3026%" height="15" fill="rgb(243,32,47)"/><text x="68.4061%" y="175.50"></text></g><g><title>predicates_of (564,808 samples, 0.44%)</title><rect x="68.0932%" y="197" width="0.4381%" height="15" fill="rgb(247,202,23)"/><text x="68.3432%" y="207.50"></text></g><g><title>predicates_defined_on (535,458 samples, 0.42%)</title><rect x="68.1159%" y="181" width="0.4153%" height="15" fill="rgb(219,102,11)"/><text x="68.3659%" y="191.50"></text></g><g><title>type_collecting (1,750,019 samples, 1.36%)</title><rect x="67.5423%" y="229" width="1.3574%" height="15" fill="rgb(243,110,44)"/><text x="67.7923%" y="239.50"></text></g><g><title>collect_mod_item_types (1,733,269 samples, 1.34%)</title><rect x="67.5553%" y="213" width="1.3444%" height="15" fill="rgb(222,74,54)"/><text x="67.8053%" y="223.50"></text></g><g><title>type_of (431,873 samples, 0.33%)</title><rect x="68.5647%" y="197" width="0.3350%" height="15" fill="rgb(216,99,12)"/><text x="68.8147%" y="207.50"></text></g><g><title>evaluate_obligation (546,727 samples, 0.42%)</title><rect x="69.9924%" y="197" width="0.4241%" height="15" fill="rgb(226,22,26)"/><text x="70.2424%" y="207.50"></text></g><g><title>implied_outlives_bounds (192,601 samples, 0.15%)</title><rect x="70.4298%" y="197" width="0.1494%" height="15" fill="rgb(217,163,10)"/><text x="70.6798%" y="207.50"></text></g><g><title>layout_of (157,552 samples, 0.12%)</title><rect x="70.6641%" y="181" width="0.1222%" height="15" fill="rgb(213,25,53)"/><text x="70.9141%" y="191.50"></text></g><g><title>object_safety_violations (287,333 samples, 0.22%)</title><rect x="70.5792%" y="197" width="0.2229%" height="15" fill="rgb(252,105,26)"/><text x="70.8292%" y="207.50"></text></g><g><title>param_env (213,824 samples, 0.17%)</title><rect x="70.8021%" y="197" width="0.1659%" height="15" fill="rgb(220,39,43)"/><text x="71.0521%" y="207.50"></text></g><g><title>region_scope_tree (218,894 samples, 0.17%)</title><rect x="70.9988%" y="197" width="0.1698%" height="15" fill="rgb(229,68,48)"/><text x="71.2488%" y="207.50"></text></g><g><title>check_impl_item_well_formed (2,804,980 samples, 2.18%)</title><rect x="68.9959%" y="213" width="2.1757%" height="15" fill="rgb(252,8,32)"/><text x="69.2459%" y="223.50">c..</text></g><g><title>evaluate_obligation (213,493 samples, 0.17%)</title><rect x="72.0069%" y="197" width="0.1656%" height="15" fill="rgb(223,20,43)"/><text x="72.2569%" y="207.50"></text></g><g><title>evaluate_obligation (145,161 samples, 0.11%)</title><rect x="72.3556%" y="181" width="0.1126%" height="15" fill="rgb(229,81,49)"/><text x="72.6056%" y="191.50"></text></g><g><title>object_safety_violations (498,295 samples, 0.39%)</title><rect x="72.2469%" y="197" width="0.3865%" height="15" fill="rgb(236,28,36)"/><text x="72.4969%" y="207.50"></text></g><g><title>param_env (193,994 samples, 0.15%)</title><rect x="72.6334%" y="197" width="0.1505%" height="15" fill="rgb(249,185,26)"/><text x="72.8834%" y="207.50"></text></g><g><title>trait_impls_of (251,584 samples, 0.20%)</title><rect x="72.8819%" y="197" width="0.1951%" height="15" fill="rgb(249,174,33)"/><text x="73.1319%" y="207.50"></text></g><g><title>check_item_well_formed (2,535,439 samples, 1.97%)</title><rect x="71.1716%" y="213" width="1.9667%" height="15" fill="rgb(233,201,37)"/><text x="71.4216%" y="223.50">c..</text></g><g><title>evaluate_obligation (174,192 samples, 0.14%)</title><rect x="73.1978%" y="197" width="0.1351%" height="15" fill="rgb(221,78,26)"/><text x="73.4478%" y="207.50"></text></g><g><title>analysis (94,109,337 samples, 73.00%)</title><rect x="0.3977%" y="261" width="72.9976%" height="15" fill="rgb(250,127,30)"/><text x="0.6477%" y="271.50">analysis</text></g><g><title>type_check_crate (62,411,585 samples, 48.41%)</title><rect x="24.9847%" y="245" width="48.4107%" height="15" fill="rgb(230,49,44)"/><text x="25.2347%" y="255.50">type_check_crate</text></g><g><title>wf_checking (5,793,155 samples, 4.49%)</title><rect x="68.9018%" y="229" width="4.4936%" height="15" fill="rgb(229,67,23)"/><text x="69.1518%" y="239.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (331,364 samples, 0.26%)</title><rect x="73.1383%" y="213" width="0.2570%" height="15" fill="rgb(249,83,47)"/><text x="73.3883%" y="223.50"></text></g><g><title>missing_lang_items (205,272 samples, 0.16%)</title><rect x="73.7542%" y="245" width="0.1592%" height="15" fill="rgb(215,43,3)"/><text x="74.0042%" y="255.50"></text></g><g><title>codegen_crate (759,859 samples, 0.59%)</title><rect x="73.4006%" y="261" width="0.5894%" height="15" fill="rgb(238,154,13)"/><text x="73.6506%" y="271.50"></text></g><g><title>metadata_load_macro (192,454 samples, 0.15%)</title><rect x="82.7753%" y="213" width="0.1493%" height="15" fill="rgb(219,56,2)"/><text x="83.0253%" y="223.50"></text></g><g><title>metadata_register_crate (7,225,280 samples, 5.60%)</title><rect x="82.9246%" y="213" width="5.6044%" height="15" fill="rgb(233,0,4)"/><text x="83.1746%" y="223.50">metadat..</text></g><g><title>metadata_register_crate (5,726,276 samples, 4.44%)</title><rect x="84.0873%" y="197" width="4.4417%" height="15" fill="rgb(235,30,7)"/><text x="84.3373%" y="207.50">metad..</text></g><g><title>metadata_register_crate (4,245,158 samples, 3.29%)</title><rect x="85.2362%" y="181" width="3.2928%" height="15" fill="rgb(250,79,13)"/><text x="85.4862%" y="191.50">met..</text></g><g><title>macro_expand_crate (18,513,315 samples, 14.36%)</title><rect x="74.2660%" y="245" width="14.3602%" height="15" fill="rgb(211,146,34)"/><text x="74.5160%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (18,502,415 samples, 14.35%)</title><rect x="74.2745%" y="229" width="14.3517%" height="15" fill="rgb(228,22,38)"/><text x="74.5245%" y="239.50">expand_crate</text></g><g><title>late_resolve_crate (1,736,180 samples, 1.35%)</title><rect x="88.7918%" y="229" width="1.3467%" height="15" fill="rgb(235,168,5)"/><text x="89.0418%" y="239.50"></text></g><g><title>configure_and_expand (20,895,442 samples, 16.21%)</title><rect x="73.9900%" y="261" width="16.2079%" height="15" fill="rgb(221,155,16)"/><text x="74.2400%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,957,152 samples, 1.52%)</title><rect x="88.6798%" y="245" width="1.5181%" height="15" fill="rgb(215,215,53)"/><text x="88.9298%" y="255.50"></text></g><g><title>early_lint_checks (225,302 samples, 0.17%)</title><rect x="90.3106%" y="261" width="0.1748%" height="15" fill="rgb(223,4,10)"/><text x="90.5606%" y="271.50"></text></g><g><title>free_global_ctxt (4,411,599 samples, 3.42%)</title><rect x="90.4854%" y="261" width="3.4219%" height="15" fill="rgb(234,103,6)"/><text x="90.7354%" y="271.50">fre..</text></g><g><title>layout_of (167,622 samples, 0.13%)</title><rect x="95.6254%" y="229" width="0.1300%" height="15" fill="rgb(227,97,0)"/><text x="95.8754%" y="239.50"></text></g><g><title>layout_of (160,052 samples, 0.12%)</title><rect x="95.6313%" y="213" width="0.1241%" height="15" fill="rgb(234,150,53)"/><text x="95.8813%" y="223.50"></text></g><g><title>layout_of (154,152 samples, 0.12%)</title><rect x="95.6359%" y="197" width="0.1196%" height="15" fill="rgb(228,201,54)"/><text x="95.8859%" y="207.50"></text></g><g><title>layout_of (146,502 samples, 0.11%)</title><rect x="95.6418%" y="181" width="0.1136%" height="15" fill="rgb(222,22,37)"/><text x="95.8918%" y="191.50"></text></g><g><title>layout_of (135,882 samples, 0.11%)</title><rect x="95.6501%" y="165" width="0.1054%" height="15" fill="rgb(237,53,32)"/><text x="95.9001%" y="175.50"></text></g><g><title>is_copy_raw (332,484 samples, 0.26%)</title><rect x="96.8612%" y="197" width="0.2579%" height="15" fill="rgb(233,25,53)"/><text x="97.1112%" y="207.50"></text></g><g><title>evaluate_obligation (273,784 samples, 0.21%)</title><rect x="96.9067%" y="181" width="0.2124%" height="15" fill="rgb(210,40,34)"/><text x="97.1567%" y="191.50"></text></g><g><title>needs_drop_raw (388,444 samples, 0.30%)</title><rect x="96.8234%" y="213" width="0.3013%" height="15" fill="rgb(241,220,44)"/><text x="97.0734%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,853,802 samples, 1.44%)</title><rect x="95.7555%" y="229" width="1.4379%" height="15" fill="rgb(235,28,35)"/><text x="96.0055%" y="239.50"></text></g><g><title>optimized_mir (3,098,466 samples, 2.40%)</title><rect x="94.7930%" y="245" width="2.4034%" height="15" fill="rgb(210,56,17)"/><text x="95.0430%" y="255.50">op..</text></g><g><title>generate_crate_metadata (4,262,758 samples, 3.31%)</title><rect x="93.9073%" y="261" width="3.3065%" height="15" fill="rgb(224,130,29)"/><text x="94.1573%" y="271.50">gen..</text></g><g><title>hir_lowering (1,702,549 samples, 1.32%)</title><rect x="97.2138%" y="261" width="1.3206%" height="15" fill="rgb(235,212,8)"/><text x="97.4638%" y="271.50"></text></g><g><title>parse_crate (238,682 samples, 0.19%)</title><rect x="98.5823%" y="261" width="0.1851%" height="15" fill="rgb(223,33,50)"/><text x="98.8323%" y="271.50"></text></g><g><title>prepare_outputs (171,442 samples, 0.13%)</title><rect x="98.7720%" y="261" width="0.1330%" height="15" fill="rgb(219,149,13)"/><text x="99.0220%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (996,321 samples, 0.77%)</title><rect x="98.9049%" y="261" width="0.7728%" height="15" fill="rgb(250,156,29)"/><text x="99.1549%" y="271.50"></text></g><g><title>all (128,921,184 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(216,193,19)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (128,921,184 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(216,135,14)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (321,263 samples, 0.25%)</title><rect x="99.7508%" y="261" width="0.2492%" height="15" fill="rgb(241,47,5)"/><text x="100.0008%" y="271.50"></text></g></svg></svg>