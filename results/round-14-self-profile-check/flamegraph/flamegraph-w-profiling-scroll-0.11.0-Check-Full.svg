<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (478,468 samples, 0.17%)</title><rect x="12.7975%" y="101" width="0.1669%" height="15" fill="rgb(227,0,7)"/><text x="13.0475%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (463,678 samples, 0.16%)</title><rect x="12.8026%" y="85" width="0.1617%" height="15" fill="rgb(217,0,24)"/><text x="13.0526%" y="95.50"></text></g><g><title>codegen_fn_attrs (663,290 samples, 0.23%)</title><rect x="12.7428%" y="117" width="0.2313%" height="15" fill="rgb(221,193,54)"/><text x="12.9928%" y="127.50"></text></g><g><title>is_copy_raw (509,890 samples, 0.18%)</title><rect x="15.3975%" y="101" width="0.1778%" height="15" fill="rgb(248,212,6)"/><text x="15.6475%" y="111.50"></text></g><g><title>evaluate_obligation (419,888 samples, 0.15%)</title><rect x="15.4289%" y="85" width="0.1464%" height="15" fill="rgb(208,68,35)"/><text x="15.6789%" y="95.50"></text></g><g><title>needs_drop_raw (2,023,592 samples, 0.71%)</title><rect x="15.5754%" y="101" width="0.7058%" height="15" fill="rgb(232,128,0)"/><text x="15.8254%" y="111.50"></text></g><g><title>is_copy_raw (1,487,764 samples, 0.52%)</title><rect x="15.7622%" y="85" width="0.5189%" height="15" fill="rgb(207,160,47)"/><text x="16.0122%" y="95.50"></text></g><g><title>evaluate_obligation (1,149,502 samples, 0.40%)</title><rect x="15.8802%" y="69" width="0.4009%" height="15" fill="rgb(228,23,34)"/><text x="16.1302%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (813,389 samples, 0.28%)</title><rect x="16.4477%" y="85" width="0.2837%" height="15" fill="rgb(218,30,26)"/><text x="16.6977%" y="95.50"></text></g><g><title>specialization_graph_of (1,009,662 samples, 0.35%)</title><rect x="16.7473%" y="85" width="0.3521%" height="15" fill="rgb(220,122,19)"/><text x="16.9973%" y="95.50"></text></g><g><title>impl_trait_ref (476,478 samples, 0.17%)</title><rect x="16.9332%" y="69" width="0.1662%" height="15" fill="rgb(250,228,42)"/><text x="17.1832%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (410,436 samples, 0.14%)</title><rect x="16.9563%" y="53" width="0.1431%" height="15" fill="rgb(240,193,28)"/><text x="17.2063%" y="63.50"></text></g><g><title>resolve_instance (2,414,986 samples, 0.84%)</title><rect x="16.2811%" y="101" width="0.8423%" height="15" fill="rgb(216,20,37)"/><text x="16.5311%" y="111.50"></text></g><g><title>thir_body (2,933,283 samples, 1.02%)</title><rect x="17.1484%" y="101" width="1.0230%" height="15" fill="rgb(206,188,39)"/><text x="17.3984%" y="111.50"></text></g><g><title>mir_const (19,223,312 samples, 6.70%)</title><rect x="11.4941%" y="149" width="6.7046%" height="15" fill="rgb(217,207,13)"/><text x="11.7441%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (16,851,051 samples, 5.88%)</title><rect x="12.3215%" y="133" width="5.8772%" height="15" fill="rgb(231,73,38)"/><text x="12.5715%" y="143.50">unsafet..</text></g><g><title>mir_built (14,979,647 samples, 5.22%)</title><rect x="12.9742%" y="117" width="5.2245%" height="15" fill="rgb(225,20,46)"/><text x="13.2242%" y="127.50">mir_bu..</text></g><g><title>mir_promoted (21,792,789 samples, 7.60%)</title><rect x="10.8255%" y="165" width="7.6007%" height="15" fill="rgb(210,31,41)"/><text x="11.0755%" y="175.50">mir_promot..</text></g><g><title>mir_const_qualif (652,518 samples, 0.23%)</title><rect x="18.1987%" y="149" width="0.2276%" height="15" fill="rgb(221,200,47)"/><text x="18.4487%" y="159.50"></text></g><g><title>mir_const (424,897 samples, 0.15%)</title><rect x="18.2780%" y="133" width="0.1482%" height="15" fill="rgb(226,26,5)"/><text x="18.5280%" y="143.50"></text></g><g><title>unsafety_check_result (288,834 samples, 0.10%)</title><rect x="18.3255%" y="117" width="0.1007%" height="15" fill="rgb(249,33,26)"/><text x="18.5755%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (1,020,595 samples, 0.36%)</title><rect x="18.4273%" y="165" width="0.3560%" height="15" fill="rgb(235,183,28)"/><text x="18.6773%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,374,475 samples, 0.48%)</title><rect x="18.7833%" y="165" width="0.4794%" height="15" fill="rgb(221,5,38)"/><text x="19.0333%" y="175.50"></text></g><g><title>normalize_projection_ty (845,068 samples, 0.29%)</title><rect x="18.9679%" y="149" width="0.2947%" height="15" fill="rgb(247,18,42)"/><text x="19.2179%" y="159.50"></text></g><g><title>type_op_normalize_predicate (320,365 samples, 0.11%)</title><rect x="19.2627%" y="165" width="0.1117%" height="15" fill="rgb(241,131,45)"/><text x="19.5127%" y="175.50"></text></g><g><title>type_op_normalize_ty (1,107,588 samples, 0.39%)</title><rect x="19.3744%" y="165" width="0.3863%" height="15" fill="rgb(249,31,29)"/><text x="19.6244%" y="175.50"></text></g><g><title>normalize_projection_ty (686,375 samples, 0.24%)</title><rect x="19.5213%" y="149" width="0.2394%" height="15" fill="rgb(225,111,53)"/><text x="19.7713%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,059,916 samples, 1.76%)</title><rect x="19.7607%" y="165" width="1.7648%" height="15" fill="rgb(238,160,17)"/><text x="20.0107%" y="175.50"></text></g><g><title>MIR_borrow_checking (60,228,162 samples, 21.01%)</title><rect x="0.5236%" y="197" width="21.0060%" height="15" fill="rgb(214,148,48)"/><text x="0.7736%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (59,886,536 samples, 20.89%)</title><rect x="0.6427%" y="181" width="20.8868%" height="15" fill="rgb(232,36,49)"/><text x="0.8927%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (404,905 samples, 0.14%)</title><rect x="21.5295%" y="197" width="0.1412%" height="15" fill="rgb(209,103,24)"/><text x="21.7795%" y="207.50"></text></g><g><title>hir_module_items (488,134 samples, 0.17%)</title><rect x="21.6707%" y="197" width="0.1702%" height="15" fill="rgb(229,88,8)"/><text x="21.9207%" y="207.50"></text></g><g><title>should_inherit_track_caller (368,906 samples, 0.13%)</title><rect x="22.1337%" y="149" width="0.1287%" height="15" fill="rgb(213,181,19)"/><text x="22.3837%" y="159.50"></text></g><g><title>codegen_fn_attrs (633,739 samples, 0.22%)</title><rect x="22.0484%" y="165" width="0.2210%" height="15" fill="rgb(254,191,54)"/><text x="22.2984%" y="175.50"></text></g><g><title>check_mod_attrs (1,187,834 samples, 0.41%)</title><rect x="21.8551%" y="181" width="0.4143%" height="15" fill="rgb(241,83,37)"/><text x="22.1051%" y="191.50"></text></g><g><title>check_mod_const_bodies (298,673 samples, 0.10%)</title><rect x="22.2694%" y="181" width="0.1042%" height="15" fill="rgb(233,36,39)"/><text x="22.5194%" y="191.50"></text></g><g><title>lint_levels (328,954 samples, 0.11%)</title><rect x="22.5721%" y="165" width="0.1147%" height="15" fill="rgb(226,3,54)"/><text x="22.8221%" y="175.50"></text></g><g><title>lookup_deprecation_entry (359,803 samples, 0.13%)</title><rect x="22.6868%" y="165" width="0.1255%" height="15" fill="rgb(245,192,40)"/><text x="22.9368%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,188,183 samples, 0.41%)</title><rect x="22.4408%" y="181" width="0.4144%" height="15" fill="rgb(238,167,29)"/><text x="22.6908%" y="191.50"></text></g><g><title>misc_checking_1 (3,007,534 samples, 1.05%)</title><rect x="21.8411%" y="197" width="1.0489%" height="15" fill="rgb(232,182,51)"/><text x="22.0911%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,193,774 samples, 0.42%)</title><rect x="22.8908%" y="181" width="0.4164%" height="15" fill="rgb(231,60,39)"/><text x="23.1408%" y="191.50"></text></g><g><title>check_mod_liveness (934,270 samples, 0.33%)</title><rect x="22.9813%" y="165" width="0.3258%" height="15" fill="rgb(208,69,12)"/><text x="23.2313%" y="175.50"></text></g><g><title>mir_borrowck (325,754 samples, 0.11%)</title><rect x="23.8790%" y="69" width="0.1136%" height="15" fill="rgb(235,93,37)"/><text x="24.1290%" y="79.50"></text></g><g><title>eval_to_const_value_raw (718,338 samples, 0.25%)</title><rect x="23.7422%" y="149" width="0.2505%" height="15" fill="rgb(213,116,39)"/><text x="23.9922%" y="159.50"></text></g><g><title>eval_to_const_value_raw (711,278 samples, 0.25%)</title><rect x="23.7447%" y="133" width="0.2481%" height="15" fill="rgb(222,207,29)"/><text x="23.9947%" y="143.50"></text></g><g><title>eval_to_allocation_raw (706,048 samples, 0.25%)</title><rect x="23.7465%" y="117" width="0.2463%" height="15" fill="rgb(206,96,30)"/><text x="23.9965%" y="127.50"></text></g><g><title>mir_for_ctfe (449,795 samples, 0.16%)</title><rect x="23.8359%" y="101" width="0.1569%" height="15" fill="rgb(218,138,4)"/><text x="24.0859%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (409,185 samples, 0.14%)</title><rect x="23.8500%" y="85" width="0.1427%" height="15" fill="rgb(250,191,14)"/><text x="24.1000%" y="95.50"></text></g><g><title>misc_checking_2 (3,500,299 samples, 1.22%)</title><rect x="22.8901%" y="197" width="1.2208%" height="15" fill="rgb(239,60,40)"/><text x="23.1401%" y="207.50"></text></g><g><title>match_checking (2,304,385 samples, 0.80%)</title><rect x="23.3072%" y="181" width="0.8037%" height="15" fill="rgb(206,27,48)"/><text x="23.5572%" y="191.50"></text></g><g><title>check_match (2,220,053 samples, 0.77%)</title><rect x="23.3366%" y="165" width="0.7743%" height="15" fill="rgb(225,35,8)"/><text x="23.5866%" y="175.50"></text></g><g><title>check_private_in_public (554,966 samples, 0.19%)</title><rect x="24.1145%" y="181" width="0.1936%" height="15" fill="rgb(250,213,24)"/><text x="24.3645%" y="191.50"></text></g><g><title>death_checking (975,621 samples, 0.34%)</title><rect x="24.3081%" y="181" width="0.3403%" height="15" fill="rgb(247,123,22)"/><text x="24.5581%" y="191.50"></text></g><g><title>param_env (404,074 samples, 0.14%)</title><rect x="25.2130%" y="149" width="0.1409%" height="15" fill="rgb(231,138,38)"/><text x="25.4630%" y="159.50"></text></g><g><title>crate_lints (3,161,375 samples, 1.10%)</title><rect x="24.6489%" y="165" width="1.1026%" height="15" fill="rgb(231,145,46)"/><text x="24.8989%" y="175.50"></text></g><g><title>type_of (1,119,044 samples, 0.39%)</title><rect x="25.3612%" y="149" width="0.3903%" height="15" fill="rgb(251,118,11)"/><text x="25.6112%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (889,159 samples, 0.31%)</title><rect x="25.4414%" y="133" width="0.3101%" height="15" fill="rgb(217,147,25)"/><text x="25.6914%" y="143.50"></text></g><g><title>lint_checking (4,378,699 samples, 1.53%)</title><rect x="24.6484%" y="181" width="1.5272%" height="15" fill="rgb(247,81,37)"/><text x="24.8984%" y="191.50"></text></g><g><title>module_lints (1,215,794 samples, 0.42%)</title><rect x="25.7515%" y="165" width="0.4240%" height="15" fill="rgb(209,12,38)"/><text x="26.0015%" y="175.50"></text></g><g><title>lint_mod (1,204,844 samples, 0.42%)</title><rect x="25.7553%" y="149" width="0.4202%" height="15" fill="rgb(227,1,9)"/><text x="26.0053%" y="159.50"></text></g><g><title>privacy_access_levels (917,100 samples, 0.32%)</title><rect x="26.1755%" y="181" width="0.3199%" height="15" fill="rgb(248,47,43)"/><text x="26.4255%" y="191.50"></text></g><g><title>privacy_checking_modules (2,354,646 samples, 0.82%)</title><rect x="26.4954%" y="181" width="0.8212%" height="15" fill="rgb(221,10,30)"/><text x="26.7454%" y="191.50"></text></g><g><title>check_mod_privacy (2,347,086 samples, 0.82%)</title><rect x="26.4980%" y="165" width="0.8186%" height="15" fill="rgb(210,229,1)"/><text x="26.7480%" y="175.50"></text></g><g><title>misc_checking_3 (9,218,072 samples, 3.22%)</title><rect x="24.1109%" y="197" width="3.2150%" height="15" fill="rgb(222,148,37)"/><text x="24.3609%" y="207.50">mis..</text></g><g><title>adt_destructor (320,663 samples, 0.11%)</title><rect x="27.4194%" y="149" width="0.1118%" height="15" fill="rgb(234,67,33)"/><text x="27.6694%" y="159.50"></text></g><g><title>coherent_trait (317,043 samples, 0.11%)</title><rect x="27.4207%" y="133" width="0.1106%" height="15" fill="rgb(247,98,35)"/><text x="27.6707%" y="143.50"></text></g><g><title>specialization_graph_of (315,863 samples, 0.11%)</title><rect x="27.4211%" y="117" width="0.1102%" height="15" fill="rgb(247,138,52)"/><text x="27.6711%" y="127.50"></text></g><g><title>impl_parent (2,790,050 samples, 0.97%)</title><rect x="29.3116%" y="133" width="0.9731%" height="15" fill="rgb(213,79,30)"/><text x="29.5616%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,489,826 samples, 0.52%)</title><rect x="29.7651%" y="117" width="0.5196%" height="15" fill="rgb(246,177,23)"/><text x="30.0151%" y="127.50"></text></g><g><title>impl_trait_ref (5,484,061 samples, 1.91%)</title><rect x="30.2860%" y="133" width="1.9127%" height="15" fill="rgb(230,62,27)"/><text x="30.5360%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,426,463 samples, 1.54%)</title><rect x="30.6549%" y="117" width="1.5438%" height="15" fill="rgb(216,154,8)"/><text x="30.9049%" y="127.50"></text></g><g><title>trait_impls_of (874,781 samples, 0.31%)</title><rect x="32.2181%" y="133" width="0.3051%" height="15" fill="rgb(244,35,45)"/><text x="32.4681%" y="143.50"></text></g><g><title>coherent_trait (14,702,934 samples, 5.13%)</title><rect x="27.3955%" y="165" width="5.1280%" height="15" fill="rgb(251,115,12)"/><text x="27.6455%" y="175.50">cohere..</text></g><g><title>specialization_graph_of (14,146,717 samples, 4.93%)</title><rect x="27.5895%" y="149" width="4.9340%" height="15" fill="rgb(240,54,50)"/><text x="27.8395%" y="159.50">specia..</text></g><g><title>coherence_checking (14,852,285 samples, 5.18%)</title><rect x="27.3862%" y="181" width="5.1801%" height="15" fill="rgb(233,84,52)"/><text x="27.6362%" y="191.50">cohere..</text></g><g><title>associated_item (1,340,424 samples, 0.47%)</title><rect x="56.1671%" y="117" width="0.4675%" height="15" fill="rgb(207,117,47)"/><text x="56.4171%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (1,068,252 samples, 0.37%)</title><rect x="56.2620%" y="101" width="0.3726%" height="15" fill="rgb(249,43,39)"/><text x="56.5120%" y="111.50"></text></g><g><title>associated_items (1,844,703 samples, 0.64%)</title><rect x="56.0133%" y="133" width="0.6434%" height="15" fill="rgb(209,38,44)"/><text x="56.2633%" y="143.50"></text></g><g><title>dropck_outlives (643,570 samples, 0.22%)</title><rect x="56.6850%" y="133" width="0.2245%" height="15" fill="rgb(236,212,23)"/><text x="56.9350%" y="143.50"></text></g><g><title>generics_of (1,261,814 samples, 0.44%)</title><rect x="61.9413%" y="117" width="0.4401%" height="15" fill="rgb(242,79,21)"/><text x="62.1913%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,010,862 samples, 0.35%)</title><rect x="62.0288%" y="101" width="0.3526%" height="15" fill="rgb(211,96,35)"/><text x="62.2788%" y="111.50"></text></g><g><title>impl_trait_ref (557,888 samples, 0.19%)</title><rect x="62.4160%" y="117" width="0.1946%" height="15" fill="rgb(253,215,40)"/><text x="62.6660%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (432,046 samples, 0.15%)</title><rect x="62.4599%" y="101" width="0.1507%" height="15" fill="rgb(211,81,21)"/><text x="62.7099%" y="111.50"></text></g><g><title>predicates_of (353,345 samples, 0.12%)</title><rect x="62.6202%" y="117" width="0.1232%" height="15" fill="rgb(208,190,38)"/><text x="62.8702%" y="127.50"></text></g><g><title>specializes (863,171 samples, 0.30%)</title><rect x="62.7434%" y="117" width="0.3011%" height="15" fill="rgb(235,213,38)"/><text x="62.9934%" y="127.50"></text></g><g><title>param_env (427,357 samples, 0.15%)</title><rect x="62.8954%" y="101" width="0.1491%" height="15" fill="rgb(237,122,38)"/><text x="63.1454%" y="111.50"></text></g><g><title>evaluate_obligation (17,870,729 samples, 6.23%)</title><rect x="56.9094%" y="133" width="6.2328%" height="15" fill="rgb(244,218,35)"/><text x="57.1594%" y="143.50">evaluate..</text></g><g><title>evaluate_obligation (487,434 samples, 0.17%)</title><rect x="63.6357%" y="117" width="0.1700%" height="15" fill="rgb(240,68,47)"/><text x="63.8857%" y="127.50"></text></g><g><title>method_autoderef_steps (1,011,000 samples, 0.35%)</title><rect x="63.4563%" y="133" width="0.3526%" height="15" fill="rgb(210,16,53)"/><text x="63.7063%" y="143.50"></text></g><g><title>predicates_of (478,656 samples, 0.17%)</title><rect x="63.9313%" y="133" width="0.1669%" height="15" fill="rgb(235,124,12)"/><text x="64.1813%" y="143.50"></text></g><g><title>predicates_defined_on (328,825 samples, 0.11%)</title><rect x="63.9836%" y="117" width="0.1147%" height="15" fill="rgb(224,169,11)"/><text x="64.2336%" y="127.50"></text></g><g><title>evaluate_obligation (1,030,057 samples, 0.36%)</title><rect x="65.8785%" y="117" width="0.3593%" height="15" fill="rgb(250,166,2)"/><text x="66.1285%" y="127.50"></text></g><g><title>typeck (6,651,696 samples, 2.32%)</title><rect x="64.1685%" y="133" width="2.3199%" height="15" fill="rgb(242,216,29)"/><text x="64.4185%" y="143.50">t..</text></g><g><title>item_bodies_checking (97,251,766 samples, 33.92%)</title><rect x="32.6057%" y="181" width="33.9188%" height="15" fill="rgb(230,116,27)"/><text x="32.8557%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (97,248,236 samples, 33.92%)</title><rect x="32.6070%" y="165" width="33.9176%" height="15" fill="rgb(228,99,48)"/><text x="32.8570%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (96,991,934 samples, 33.83%)</title><rect x="32.6964%" y="149" width="33.8282%" height="15" fill="rgb(253,11,6)"/><text x="32.9464%" y="159.50">typeck</text></g><g><title>generics_of (464,434 samples, 0.16%)</title><rect x="69.7252%" y="117" width="0.1620%" height="15" fill="rgb(247,143,39)"/><text x="69.9752%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (328,683 samples, 0.11%)</title><rect x="69.7726%" y="101" width="0.1146%" height="15" fill="rgb(236,97,10)"/><text x="70.0226%" y="111.50"></text></g><g><title>impl_trait_ref (707,425 samples, 0.25%)</title><rect x="69.9280%" y="117" width="0.2467%" height="15" fill="rgb(233,208,19)"/><text x="70.1780%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (571,424 samples, 0.20%)</title><rect x="69.9754%" y="101" width="0.1993%" height="15" fill="rgb(216,164,2)"/><text x="70.2254%" y="111.50"></text></g><g><title>predicates_of (598,227 samples, 0.21%)</title><rect x="70.1858%" y="117" width="0.2086%" height="15" fill="rgb(220,129,5)"/><text x="70.4358%" y="127.50"></text></g><g><title>predicates_defined_on (327,444 samples, 0.11%)</title><rect x="70.2803%" y="101" width="0.1142%" height="15" fill="rgb(242,17,10)"/><text x="70.5303%" y="111.50"></text></g><g><title>specializes (1,918,203 samples, 0.67%)</title><rect x="70.3945%" y="117" width="0.6690%" height="15" fill="rgb(242,107,0)"/><text x="70.6445%" y="127.50"></text></g><g><title>param_env (1,118,284 samples, 0.39%)</title><rect x="70.6735%" y="101" width="0.3900%" height="15" fill="rgb(251,28,31)"/><text x="70.9235%" y="111.50"></text></g><g><title>def_span (527,599 samples, 0.18%)</title><rect x="70.8795%" y="85" width="0.1840%" height="15" fill="rgb(233,223,10)"/><text x="71.1295%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (467,609 samples, 0.16%)</title><rect x="70.9004%" y="69" width="0.1631%" height="15" fill="rgb(215,21,27)"/><text x="71.1504%" y="79.50"></text></g><g><title>evaluate_obligation (5,983,146 samples, 2.09%)</title><rect x="69.0025%" y="133" width="2.0868%" height="15" fill="rgb(232,23,21)"/><text x="69.2525%" y="143.50">e..</text></g><g><title>typeck (7,333,342 samples, 2.56%)</title><rect x="68.6161%" y="149" width="2.5577%" height="15" fill="rgb(244,5,23)"/><text x="68.8661%" y="159.50">ty..</text></g><g><title>item_types_checking (13,331,768 samples, 4.65%)</title><rect x="66.5245%" y="181" width="4.6498%" height="15" fill="rgb(226,81,46)"/><text x="66.7745%" y="191.50">item_..</text></g><g><title>check_mod_item_types (13,321,278 samples, 4.65%)</title><rect x="66.5282%" y="165" width="4.6461%" height="15" fill="rgb(247,70,30)"/><text x="66.7782%" y="175.50">check..</text></g><g><title>fn_sig (878,872 samples, 0.31%)</title><rect x="71.4656%" y="149" width="0.3065%" height="15" fill="rgb(212,68,19)"/><text x="71.7156%" y="159.50"></text></g><g><title>resolve_lifetimes (758,667 samples, 0.26%)</title><rect x="71.9376%" y="117" width="0.2646%" height="15" fill="rgb(240,187,13)"/><text x="72.1876%" y="127.50"></text></g><g><title>is_late_bound_map (847,828 samples, 0.30%)</title><rect x="71.9098%" y="133" width="0.2957%" height="15" fill="rgb(223,113,26)"/><text x="72.1598%" y="143.50"></text></g><g><title>named_region_map (478,368 samples, 0.17%)</title><rect x="72.2055%" y="133" width="0.1668%" height="15" fill="rgb(206,192,2)"/><text x="72.4555%" y="143.50"></text></g><g><title>resolve_lifetimes (416,177 samples, 0.15%)</title><rect x="72.2272%" y="117" width="0.1452%" height="15" fill="rgb(241,108,4)"/><text x="72.4772%" y="127.50"></text></g><g><title>generics_of (1,769,610 samples, 0.62%)</title><rect x="71.7721%" y="149" width="0.6172%" height="15" fill="rgb(247,173,49)"/><text x="72.0221%" y="159.50"></text></g><g><title>explicit_predicates_of (853,346 samples, 0.30%)</title><rect x="72.6432%" y="117" width="0.2976%" height="15" fill="rgb(224,114,35)"/><text x="72.8932%" y="127.50"></text></g><g><title>predicates_of (1,462,491 samples, 0.51%)</title><rect x="72.4889%" y="149" width="0.5101%" height="15" fill="rgb(245,159,27)"/><text x="72.7389%" y="159.50"></text></g><g><title>predicates_defined_on (1,281,670 samples, 0.45%)</title><rect x="72.5520%" y="133" width="0.4470%" height="15" fill="rgb(245,172,44)"/><text x="72.8020%" y="143.50"></text></g><g><title>type_collecting (5,604,322 samples, 1.95%)</title><rect x="71.1755%" y="181" width="1.9546%" height="15" fill="rgb(236,23,11)"/><text x="71.4255%" y="191.50">t..</text></g><g><title>collect_mod_item_types (5,580,132 samples, 1.95%)</title><rect x="71.1839%" y="165" width="1.9462%" height="15" fill="rgb(205,117,38)"/><text x="71.4339%" y="175.50">c..</text></g><g><title>adt_def (383,224 samples, 0.13%)</title><rect x="75.3934%" y="85" width="0.1337%" height="15" fill="rgb(237,72,25)"/><text x="75.6434%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (382,784 samples, 0.13%)</title><rect x="75.3936%" y="69" width="0.1335%" height="15" fill="rgb(244,70,9)"/><text x="75.6436%" y="79.50"></text></g><g><title>item_attrs (372,964 samples, 0.13%)</title><rect x="75.3970%" y="53" width="0.1301%" height="15" fill="rgb(217,125,39)"/><text x="75.6470%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (372,294 samples, 0.13%)</title><rect x="75.3972%" y="37" width="0.1298%" height="15" fill="rgb(235,36,10)"/><text x="75.6472%" y="47.50"></text></g><g><title>adt_sized_constraint (435,574 samples, 0.15%)</title><rect x="75.3920%" y="101" width="0.1519%" height="15" fill="rgb(251,123,47)"/><text x="75.6420%" y="111.50"></text></g><g><title>evaluate_obligation (1,049,760 samples, 0.37%)</title><rect x="75.1784%" y="149" width="0.3661%" height="15" fill="rgb(221,13,13)"/><text x="75.4284%" y="159.50"></text></g><g><title>adt_sized_constraint (555,786 samples, 0.19%)</title><rect x="75.3507%" y="133" width="0.1938%" height="15" fill="rgb(238,131,9)"/><text x="75.6007%" y="143.50"></text></g><g><title>adt_sized_constraint (535,896 samples, 0.19%)</title><rect x="75.3577%" y="117" width="0.1869%" height="15" fill="rgb(211,50,8)"/><text x="75.6077%" y="127.50"></text></g><g><title>implied_outlives_bounds (511,456 samples, 0.18%)</title><rect x="75.5711%" y="149" width="0.1784%" height="15" fill="rgb(245,182,24)"/><text x="75.8211%" y="159.50"></text></g><g><title>object_safety_violations (421,095 samples, 0.15%)</title><rect x="75.7495%" y="149" width="0.1469%" height="15" fill="rgb(242,14,37)"/><text x="75.9995%" y="159.50"></text></g><g><title>param_env (963,918 samples, 0.34%)</title><rect x="75.8964%" y="149" width="0.3362%" height="15" fill="rgb(246,228,12)"/><text x="76.1464%" y="159.50"></text></g><g><title>check_impl_item_well_formed (9,308,675 samples, 3.25%)</title><rect x="73.3651%" y="165" width="3.2466%" height="15" fill="rgb(213,55,15)"/><text x="73.6151%" y="175.50">che..</text></g><g><title>region_scope_tree (1,073,430 samples, 0.37%)</title><rect x="76.2374%" y="149" width="0.3744%" height="15" fill="rgb(209,9,3)"/><text x="76.4874%" y="159.50"></text></g><g><title>evaluate_obligation (1,566,314 samples, 0.55%)</title><rect x="78.9002%" y="149" width="0.5463%" height="15" fill="rgb(230,59,30)"/><text x="79.1502%" y="159.50"></text></g><g><title>implied_outlives_bounds (330,859 samples, 0.12%)</title><rect x="79.4663%" y="149" width="0.1154%" height="15" fill="rgb(209,121,21)"/><text x="79.7163%" y="159.50"></text></g><g><title>param_env (908,124 samples, 0.32%)</title><rect x="79.5817%" y="149" width="0.3167%" height="15" fill="rgb(220,109,13)"/><text x="79.8317%" y="159.50"></text></g><g><title>predicates_of (301,284 samples, 0.11%)</title><rect x="79.8984%" y="149" width="0.1051%" height="15" fill="rgb(232,18,1)"/><text x="80.1484%" y="159.50"></text></g><g><title>check_item_well_formed (10,030,489 samples, 3.50%)</title><rect x="76.6118%" y="165" width="3.4984%" height="15" fill="rgb(215,41,42)"/><text x="76.8618%" y="175.50">che..</text></g><g><title>evaluate_obligation (347,034 samples, 0.12%)</title><rect x="80.7731%" y="149" width="0.1210%" height="15" fill="rgb(224,123,36)"/><text x="81.0231%" y="159.50"></text></g><g><title>implied_outlives_bounds (304,066 samples, 0.11%)</title><rect x="80.8941%" y="149" width="0.1060%" height="15" fill="rgb(240,125,3)"/><text x="81.1441%" y="159.50"></text></g><g><title>param_env (299,902 samples, 0.10%)</title><rect x="81.0002%" y="149" width="0.1046%" height="15" fill="rgb(205,98,50)"/><text x="81.2502%" y="159.50"></text></g><g><title>analysis (231,854,397 samples, 80.86%)</title><rect x="0.2819%" y="213" width="80.8645%" height="15" fill="rgb(205,185,37)"/><text x="0.5319%" y="223.50">analysis</text></g><g><title>type_check_crate (154,313,842 samples, 53.82%)</title><rect x="27.3259%" y="197" width="53.8205%" height="15" fill="rgb(238,207,15)"/><text x="27.5759%" y="207.50">type_check_crate</text></g><g><title>wf_checking (22,967,107 samples, 8.01%)</title><rect x="73.1361%" y="181" width="8.0103%" height="15" fill="rgb(213,199,42)"/><text x="73.3861%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,971,195 samples, 1.04%)</title><rect x="80.1101%" y="165" width="1.0363%" height="15" fill="rgb(235,201,11)"/><text x="80.3601%" y="175.50"></text></g><g><title>codegen_crate (433,635 samples, 0.15%)</title><rect x="81.1487%" y="213" width="0.1512%" height="15" fill="rgb(207,46,11)"/><text x="81.3987%" y="223.50"></text></g><g><title>metadata_register_crate (1,262,574 samples, 0.44%)</title><rect x="89.4292%" y="165" width="0.4404%" height="15" fill="rgb(241,35,35)"/><text x="89.6792%" y="175.50"></text></g><g><title>metadata_register_crate (470,775 samples, 0.16%)</title><rect x="89.7054%" y="149" width="0.1642%" height="15" fill="rgb(243,32,47)"/><text x="89.9554%" y="159.50"></text></g><g><title>macro_expand_crate (24,200,429 samples, 8.44%)</title><rect x="81.5178%" y="197" width="8.4405%" height="15" fill="rgb(247,202,23)"/><text x="81.7678%" y="207.50">macro_expand..</text></g><g><title>expand_crate (24,186,909 samples, 8.44%)</title><rect x="81.5225%" y="181" width="8.4357%" height="15" fill="rgb(219,102,11)"/><text x="81.7725%" y="191.50">expand_crate</text></g><g><title>finalize_macro_resolutions (305,263 samples, 0.11%)</title><rect x="90.0331%" y="181" width="0.1065%" height="15" fill="rgb(243,110,44)"/><text x="90.2831%" y="191.50"></text></g><g><title>late_resolve_crate (4,719,173 samples, 1.65%)</title><rect x="90.1396%" y="181" width="1.6459%" height="15" fill="rgb(222,74,54)"/><text x="90.3896%" y="191.50"></text></g><g><title>configure_and_expand (30,344,318 samples, 10.58%)</title><rect x="81.2999%" y="213" width="10.5833%" height="15" fill="rgb(216,99,12)"/><text x="81.5499%" y="223.50">configure_and_e..</text></g><g><title>resolve_crate (5,379,040 samples, 1.88%)</title><rect x="90.0072%" y="197" width="1.8761%" height="15" fill="rgb(226,22,26)"/><text x="90.2572%" y="207.50">r..</text></g><g><title>drop_ast (590,146 samples, 0.21%)</title><rect x="91.8832%" y="213" width="0.2058%" height="15" fill="rgb(217,163,10)"/><text x="92.1332%" y="223.50"></text></g><g><title>early_lint_checks (947,041 samples, 0.33%)</title><rect x="92.0947%" y="213" width="0.3303%" height="15" fill="rgb(213,25,53)"/><text x="92.3447%" y="223.50"></text></g><g><title>free_global_ctxt (5,089,237 samples, 1.77%)</title><rect x="92.4250%" y="213" width="1.7750%" height="15" fill="rgb(252,105,26)"/><text x="92.6750%" y="223.50">f..</text></g><g><title>generate_crate_metadata (2,893,983 samples, 1.01%)</title><rect x="94.2000%" y="213" width="1.0093%" height="15" fill="rgb(220,39,43)"/><text x="94.4500%" y="223.50"></text></g><g><title>hir_lowering (9,569,847 samples, 3.34%)</title><rect x="95.2094%" y="213" width="3.3377%" height="15" fill="rgb(229,68,48)"/><text x="95.4594%" y="223.50">hir..</text></g><g><title>parse_crate (1,880,381 samples, 0.66%)</title><rect x="98.5682%" y="213" width="0.6558%" height="15" fill="rgb(252,8,32)"/><text x="98.8182%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,479,486 samples, 0.52%)</title><rect x="99.2994%" y="213" width="0.5160%" height="15" fill="rgb(223,20,43)"/><text x="99.5494%" y="223.50"></text></g><g><title>all (286,719,509 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (286,719,509 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (438,515 samples, 0.15%)</title><rect x="99.8471%" y="213" width="0.1529%" height="15" fill="rgb(249,185,26)"/><text x="100.0971%" y="223.50"></text></g></svg></svg>