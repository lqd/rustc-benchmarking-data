<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (203,645 samples, 0.21%)</title><rect x="13.7594%" y="101" width="0.2091%" height="15" fill="rgb(227,0,7)"/><text x="14.0094%" y="111.50"></text></g><g><title>item_attrs (549,075 samples, 0.56%)</title><rect x="14.5095%" y="69" width="0.5637%" height="15" fill="rgb(217,0,24)"/><text x="14.7595%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (542,345 samples, 0.56%)</title><rect x="14.5164%" y="53" width="0.5568%" height="15" fill="rgb(221,193,54)"/><text x="14.7664%" y="63.50"></text></g><g><title>codegen_fn_attrs (635,195 samples, 0.65%)</title><rect x="14.4313%" y="85" width="0.6521%" height="15" fill="rgb(248,212,6)"/><text x="14.6813%" y="95.50"></text></g><g><title>adt_drop_tys (176,481 samples, 0.18%)</title><rect x="17.7330%" y="53" width="0.1812%" height="15" fill="rgb(208,68,35)"/><text x="17.9830%" y="63.50"></text></g><g><title>needs_drop_raw (963,681 samples, 0.99%)</title><rect x="17.6541%" y="69" width="0.9893%" height="15" fill="rgb(232,128,0)"/><text x="17.9041%" y="79.50"></text></g><g><title>is_copy_raw (710,319 samples, 0.73%)</title><rect x="17.9142%" y="53" width="0.7292%" height="15" fill="rgb(207,160,47)"/><text x="18.1642%" y="63.50"></text></g><g><title>evaluate_obligation (628,876 samples, 0.65%)</title><rect x="17.9978%" y="37" width="0.6456%" height="15" fill="rgb(228,23,34)"/><text x="18.2478%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (182,240 samples, 0.19%)</title><rect x="18.7863%" y="53" width="0.1871%" height="15" fill="rgb(218,30,26)"/><text x="19.0363%" y="63.50"></text></g><g><title>specialization_graph_of (169,513 samples, 0.17%)</title><rect x="18.9978%" y="53" width="0.1740%" height="15" fill="rgb(220,122,19)"/><text x="19.2478%" y="63.50"></text></g><g><title>resolve_instance (580,645 samples, 0.60%)</title><rect x="18.6441%" y="69" width="0.5961%" height="15" fill="rgb(250,228,42)"/><text x="18.8941%" y="79.50"></text></g><g><title>thir_body (943,909 samples, 0.97%)</title><rect x="19.2656%" y="69" width="0.9690%" height="15" fill="rgb(240,193,28)"/><text x="19.5156%" y="79.50"></text></g><g><title>mir_const (7,146,762 samples, 7.34%)</title><rect x="12.9133%" y="117" width="7.3367%" height="15" fill="rgb(216,20,37)"/><text x="13.1633%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (6,118,898 samples, 6.28%)</title><rect x="13.9685%" y="101" width="6.2816%" height="15" fill="rgb(206,188,39)"/><text x="14.2185%" y="111.50">unsafety..</text></g><g><title>mir_built (5,032,863 samples, 5.17%)</title><rect x="15.0834%" y="85" width="5.1667%" height="15" fill="rgb(217,207,13)"/><text x="15.3334%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (8,009,565 samples, 8.22%)</title><rect x="12.0717%" y="133" width="8.2225%" height="15" fill="rgb(231,73,38)"/><text x="12.3217%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (404,966 samples, 0.42%)</title><rect x="20.2942%" y="133" width="0.4157%" height="15" fill="rgb(225,20,46)"/><text x="20.5442%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (334,894 samples, 0.34%)</title><rect x="20.7099%" y="133" width="0.3438%" height="15" fill="rgb(210,31,41)"/><text x="20.9599%" y="143.50"></text></g><g><title>normalize_projection_ty (185,824 samples, 0.19%)</title><rect x="20.8629%" y="117" width="0.1908%" height="15" fill="rgb(221,200,47)"/><text x="21.1129%" y="127.50"></text></g><g><title>type_op_normalize_ty (102,370 samples, 0.11%)</title><rect x="21.0537%" y="133" width="0.1051%" height="15" fill="rgb(226,26,5)"/><text x="21.3037%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,270,547 samples, 1.30%)</title><rect x="21.1588%" y="133" width="1.3043%" height="15" fill="rgb(249,33,26)"/><text x="21.4088%" y="143.50"></text></g><g><title>MIR_borrow_checking (21,175,474 samples, 21.74%)</title><rect x="0.7306%" y="165" width="21.7384%" height="15" fill="rgb(235,183,28)"/><text x="0.9806%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,058,504 samples, 21.62%)</title><rect x="0.8507%" y="149" width="21.6183%" height="15" fill="rgb(221,5,38)"/><text x="1.1007%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (165,212 samples, 0.17%)</title><rect x="22.4987%" y="165" width="0.1696%" height="15" fill="rgb(247,18,42)"/><text x="22.7487%" y="175.50"></text></g><g><title>codegen_fn_attrs (106,141 samples, 0.11%)</title><rect x="23.1543%" y="101" width="0.1090%" height="15" fill="rgb(241,131,45)"/><text x="23.4043%" y="111.50"></text></g><g><title>should_inherit_track_caller (212,313 samples, 0.22%)</title><rect x="23.0520%" y="117" width="0.2180%" height="15" fill="rgb(249,31,29)"/><text x="23.3020%" y="127.50"></text></g><g><title>codegen_fn_attrs (387,665 samples, 0.40%)</title><rect x="22.8931%" y="133" width="0.3980%" height="15" fill="rgb(225,111,53)"/><text x="23.1431%" y="143.50"></text></g><g><title>check_mod_attrs (593,926 samples, 0.61%)</title><rect x="22.6815%" y="149" width="0.6097%" height="15" fill="rgb(238,160,17)"/><text x="22.9315%" y="159.50"></text></g><g><title>check_mod_const_bodies (100,692 samples, 0.10%)</title><rect x="23.2912%" y="149" width="0.1034%" height="15" fill="rgb(214,148,48)"/><text x="23.5412%" y="159.50"></text></g><g><title>lint_levels (114,721 samples, 0.12%)</title><rect x="23.6410%" y="133" width="0.1178%" height="15" fill="rgb(232,36,49)"/><text x="23.8910%" y="143.50"></text></g><g><title>lookup_deprecation_entry (153,422 samples, 0.16%)</title><rect x="23.7587%" y="133" width="0.1575%" height="15" fill="rgb(209,103,24)"/><text x="24.0087%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (532,185 samples, 0.55%)</title><rect x="23.4618%" y="149" width="0.5463%" height="15" fill="rgb(229,88,8)"/><text x="23.7118%" y="159.50"></text></g><g><title>misc_checking_1 (1,357,365 samples, 1.39%)</title><rect x="22.6687%" y="165" width="1.3934%" height="15" fill="rgb(213,181,19)"/><text x="22.9187%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (319,603 samples, 0.33%)</title><rect x="24.0637%" y="149" width="0.3281%" height="15" fill="rgb(254,191,54)"/><text x="24.3137%" y="159.50"></text></g><g><title>check_mod_liveness (243,642 samples, 0.25%)</title><rect x="24.1417%" y="133" width="0.2501%" height="15" fill="rgb(241,83,37)"/><text x="24.3917%" y="143.50"></text></g><g><title>misc_checking_2 (823,119 samples, 0.85%)</title><rect x="24.0622%" y="165" width="0.8450%" height="15" fill="rgb(233,36,39)"/><text x="24.3122%" y="175.50"></text></g><g><title>match_checking (501,986 samples, 0.52%)</title><rect x="24.3918%" y="149" width="0.5153%" height="15" fill="rgb(226,3,54)"/><text x="24.6418%" y="159.50"></text></g><g><title>check_match (473,356 samples, 0.49%)</title><rect x="24.4212%" y="133" width="0.4859%" height="15" fill="rgb(245,192,40)"/><text x="24.6712%" y="143.50"></text></g><g><title>check_private_in_public (193,052 samples, 0.20%)</title><rect x="24.9178%" y="149" width="0.1982%" height="15" fill="rgb(238,167,29)"/><text x="25.1678%" y="159.50"></text></g><g><title>codegen_fn_attrs (285,034 samples, 0.29%)</title><rect x="25.3759%" y="133" width="0.2926%" height="15" fill="rgb(232,182,51)"/><text x="25.6259%" y="143.50"></text></g><g><title>death_checking (675,158 samples, 0.69%)</title><rect x="25.1160%" y="149" width="0.6931%" height="15" fill="rgb(231,60,39)"/><text x="25.3660%" y="159.50"></text></g><g><title>item_attrs (129,891 samples, 0.13%)</title><rect x="25.6758%" y="133" width="0.1333%" height="15" fill="rgb(208,69,12)"/><text x="25.9258%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (128,361 samples, 0.13%)</title><rect x="25.6773%" y="117" width="0.1318%" height="15" fill="rgb(235,93,37)"/><text x="25.9273%" y="127.50"></text></g><g><title>param_env (116,730 samples, 0.12%)</title><rect x="26.4778%" y="117" width="0.1198%" height="15" fill="rgb(213,116,39)"/><text x="26.7278%" y="127.50"></text></g><g><title>crate_lints (1,830,331 samples, 1.88%)</title><rect x="25.8105%" y="133" width="1.8790%" height="15" fill="rgb(222,207,29)"/><text x="26.0605%" y="143.50">c..</text></g><g><title>type_of (1,061,175 samples, 1.09%)</title><rect x="26.6001%" y="117" width="1.0894%" height="15" fill="rgb(206,96,30)"/><text x="26.8501%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (827,533 samples, 0.85%)</title><rect x="26.8399%" y="101" width="0.8495%" height="15" fill="rgb(218,138,4)"/><text x="27.0899%" y="111.50"></text></g><g><title>lint_checking (2,154,134 samples, 2.21%)</title><rect x="25.8091%" y="149" width="2.2114%" height="15" fill="rgb(250,191,14)"/><text x="26.0591%" y="159.50">l..</text></g><g><title>module_lints (322,483 samples, 0.33%)</title><rect x="27.6895%" y="133" width="0.3311%" height="15" fill="rgb(239,60,40)"/><text x="27.9395%" y="143.50"></text></g><g><title>lint_mod (319,733 samples, 0.33%)</title><rect x="27.6923%" y="117" width="0.3282%" height="15" fill="rgb(206,27,48)"/><text x="27.9423%" y="127.50"></text></g><g><title>privacy_access_levels (273,213 samples, 0.28%)</title><rect x="28.0205%" y="149" width="0.2805%" height="15" fill="rgb(225,35,8)"/><text x="28.2705%" y="159.50"></text></g><g><title>privacy_checking_modules (716,168 samples, 0.74%)</title><rect x="28.3010%" y="149" width="0.7352%" height="15" fill="rgb(250,213,24)"/><text x="28.5510%" y="159.50"></text></g><g><title>check_mod_privacy (714,178 samples, 0.73%)</title><rect x="28.3030%" y="133" width="0.7332%" height="15" fill="rgb(247,123,22)"/><text x="28.5530%" y="143.50"></text></g><g><title>misc_checking_3 (4,044,525 samples, 4.15%)</title><rect x="24.9072%" y="165" width="4.1520%" height="15" fill="rgb(231,138,38)"/><text x="25.1572%" y="175.50">misc_..</text></g><g><title>impl_trait_ref (174,221 samples, 0.18%)</title><rect x="29.3464%" y="69" width="0.1789%" height="15" fill="rgb(231,145,46)"/><text x="29.5964%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (154,491 samples, 0.16%)</title><rect x="29.3666%" y="53" width="0.1586%" height="15" fill="rgb(251,118,11)"/><text x="29.6166%" y="63.50"></text></g><g><title>adt_destructor (346,404 samples, 0.36%)</title><rect x="29.2009%" y="117" width="0.3556%" height="15" fill="rgb(217,147,25)"/><text x="29.4509%" y="127.50"></text></g><g><title>coherent_trait (338,744 samples, 0.35%)</title><rect x="29.2088%" y="101" width="0.3477%" height="15" fill="rgb(247,81,37)"/><text x="29.4588%" y="111.50"></text></g><g><title>specialization_graph_of (336,664 samples, 0.35%)</title><rect x="29.2109%" y="85" width="0.3456%" height="15" fill="rgb(209,12,38)"/><text x="29.4609%" y="95.50"></text></g><g><title>param_env (129,361 samples, 0.13%)</title><rect x="29.6473%" y="117" width="0.1328%" height="15" fill="rgb(227,1,9)"/><text x="29.8973%" y="127.50"></text></g><g><title>impl_parent (2,301,199 samples, 2.36%)</title><rect x="33.9564%" y="101" width="2.3624%" height="15" fill="rgb(248,47,43)"/><text x="34.2064%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,340,933 samples, 1.38%)</title><rect x="34.9422%" y="85" width="1.3766%" height="15" fill="rgb(221,10,30)"/><text x="35.1922%" y="95.50"></text></g><g><title>impl_trait_ref (5,003,734 samples, 5.14%)</title><rect x="36.3188%" y="101" width="5.1368%" height="15" fill="rgb(210,229,1)"/><text x="36.5688%" y="111.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,044,506 samples, 4.15%)</title><rect x="37.3035%" y="85" width="4.1520%" height="15" fill="rgb(222,148,37)"/><text x="37.5535%" y="95.50">metad..</text></g><g><title>coherent_trait (12,849,863 samples, 13.19%)</title><rect x="29.1449%" y="133" width="13.1915%" height="15" fill="rgb(234,67,33)"/><text x="29.3949%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (12,231,117 samples, 12.56%)</title><rect x="29.7801%" y="117" width="12.5563%" height="15" fill="rgb(247,98,35)"/><text x="30.0301%" y="127.50">specialization_grap..</text></g><g><title>trait_impls_of (855,918 samples, 0.88%)</title><rect x="41.4577%" y="101" width="0.8787%" height="15" fill="rgb(247,138,52)"/><text x="41.7077%" y="111.50"></text></g><g><title>implementations_of_trait (230,490 samples, 0.24%)</title><rect x="42.0998%" y="85" width="0.2366%" height="15" fill="rgb(213,79,30)"/><text x="42.3498%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (173,320 samples, 0.18%)</title><rect x="42.1585%" y="69" width="0.1779%" height="15" fill="rgb(246,177,23)"/><text x="42.4085%" y="79.50"></text></g><g><title>coherence_checking (12,935,814 samples, 13.28%)</title><rect x="29.1232%" y="149" width="13.2797%" height="15" fill="rgb(230,62,27)"/><text x="29.3732%" y="159.50">coherence_checking</text></g><g><title>adt_sized_constraint (97,671 samples, 0.10%)</title><rect x="60.6621%" y="101" width="0.1003%" height="15" fill="rgb(216,154,8)"/><text x="60.9121%" y="111.50"></text></g><g><title>associated_item (223,781 samples, 0.23%)</title><rect x="60.8707%" y="85" width="0.2297%" height="15" fill="rgb(244,35,45)"/><text x="61.1207%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (173,301 samples, 0.18%)</title><rect x="60.9225%" y="69" width="0.1779%" height="15" fill="rgb(251,115,12)"/><text x="61.1725%" y="79.50"></text></g><g><title>associated_items (352,143 samples, 0.36%)</title><rect x="60.7648%" y="101" width="0.3615%" height="15" fill="rgb(240,54,50)"/><text x="61.0148%" y="111.50"></text></g><g><title>adt_def (134,311 samples, 0.14%)</title><rect x="61.5280%" y="69" width="0.1379%" height="15" fill="rgb(233,84,52)"/><text x="61.7780%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (130,961 samples, 0.13%)</title><rect x="61.5314%" y="53" width="0.1344%" height="15" fill="rgb(207,117,47)"/><text x="61.7814%" y="63.50"></text></g><g><title>adt_def (101,351 samples, 0.10%)</title><rect x="61.7384%" y="53" width="0.1040%" height="15" fill="rgb(249,43,39)"/><text x="61.9884%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (99,970 samples, 0.10%)</title><rect x="61.7399%" y="37" width="0.1026%" height="15" fill="rgb(209,38,44)"/><text x="61.9899%" y="47.50"></text></g><g><title>adt_dtorck_constraint (162,562 samples, 0.17%)</title><rect x="61.8570%" y="53" width="0.1669%" height="15" fill="rgb(236,212,23)"/><text x="62.1070%" y="63.50"></text></g><g><title>adt_dtorck_constraint (336,353 samples, 0.35%)</title><rect x="61.7030%" y="69" width="0.3453%" height="15" fill="rgb(242,79,21)"/><text x="61.9530%" y="79.50"></text></g><g><title>dropck_outlives (913,229 samples, 0.94%)</title><rect x="61.1862%" y="101" width="0.9375%" height="15" fill="rgb(211,96,35)"/><text x="61.4362%" y="111.50"></text></g><g><title>adt_dtorck_constraint (656,735 samples, 0.67%)</title><rect x="61.4495%" y="85" width="0.6742%" height="15" fill="rgb(253,215,40)"/><text x="61.6995%" y="95.50"></text></g><g><title>evaluate_obligation (1,110,280 samples, 1.14%)</title><rect x="62.1237%" y="101" width="1.1398%" height="15" fill="rgb(211,81,21)"/><text x="62.3737%" y="111.50"></text></g><g><title>trait_impls_of (285,782 samples, 0.29%)</title><rect x="62.9702%" y="85" width="0.2934%" height="15" fill="rgb(208,190,38)"/><text x="63.2202%" y="95.50"></text></g><g><title>implementations_of_trait (102,820 samples, 0.11%)</title><rect x="63.1580%" y="69" width="0.1056%" height="15" fill="rgb(235,213,38)"/><text x="63.4080%" y="79.50"></text></g><g><title>fn_sig (107,933 samples, 0.11%)</title><rect x="63.2885%" y="101" width="0.1108%" height="15" fill="rgb(237,122,38)"/><text x="63.5385%" y="111.50"></text></g><g><title>item_attrs (158,383 samples, 0.16%)</title><rect x="63.5930%" y="101" width="0.1626%" height="15" fill="rgb(244,218,35)"/><text x="63.8430%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (150,493 samples, 0.15%)</title><rect x="63.6011%" y="85" width="0.1545%" height="15" fill="rgb(240,68,47)"/><text x="63.8511%" y="95.50"></text></g><g><title>evaluate_obligation (170,642 samples, 0.18%)</title><rect x="64.0048%" y="85" width="0.1752%" height="15" fill="rgb(210,16,53)"/><text x="64.2548%" y="95.50"></text></g><g><title>method_autoderef_steps (358,485 samples, 0.37%)</title><rect x="63.8191%" y="101" width="0.3680%" height="15" fill="rgb(235,124,12)"/><text x="64.0691%" y="111.50"></text></g><g><title>object_safety_violations (135,421 samples, 0.14%)</title><rect x="64.1871%" y="101" width="0.1390%" height="15" fill="rgb(224,169,11)"/><text x="64.4371%" y="111.50"></text></g><g><title>predicates_of (291,655 samples, 0.30%)</title><rect x="64.3719%" y="101" width="0.2994%" height="15" fill="rgb(250,166,2)"/><text x="64.6219%" y="111.50"></text></g><g><title>predicates_defined_on (200,204 samples, 0.21%)</title><rect x="64.4657%" y="85" width="0.2055%" height="15" fill="rgb(242,216,29)"/><text x="64.7157%" y="95.50"></text></g><g><title>item_bodies_checking (21,791,111 samples, 22.37%)</title><rect x="42.4427%" y="149" width="22.3704%" height="15" fill="rgb(230,116,27)"/><text x="42.6927%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,787,781 samples, 22.37%)</title><rect x="42.4462%" y="133" width="22.3670%" height="15" fill="rgb(228,99,48)"/><text x="42.6962%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (21,708,321 samples, 22.29%)</title><rect x="42.5277%" y="117" width="22.2854%" height="15" fill="rgb(253,11,6)"/><text x="42.7777%" y="127.50">typeck</text></g><g><title>item_types_checking (1,161,583 samples, 1.19%)</title><rect x="64.8131%" y="149" width="1.1925%" height="15" fill="rgb(247,143,39)"/><text x="65.0631%" y="159.50"></text></g><g><title>check_mod_item_types (1,159,143 samples, 1.19%)</title><rect x="64.8156%" y="133" width="1.1900%" height="15" fill="rgb(236,97,10)"/><text x="65.0656%" y="143.50"></text></g><g><title>fn_sig (342,454 samples, 0.35%)</title><rect x="66.2866%" y="117" width="0.3516%" height="15" fill="rgb(233,208,19)"/><text x="66.5366%" y="127.50"></text></g><g><title>named_region_map (198,472 samples, 0.20%)</title><rect x="66.8588%" y="101" width="0.2037%" height="15" fill="rgb(216,164,2)"/><text x="67.1088%" y="111.50"></text></g><g><title>resolve_lifetimes (179,172 samples, 0.18%)</title><rect x="66.8786%" y="85" width="0.1839%" height="15" fill="rgb(220,129,5)"/><text x="67.1286%" y="95.50"></text></g><g><title>generics_of (437,435 samples, 0.45%)</title><rect x="66.6382%" y="117" width="0.4491%" height="15" fill="rgb(242,17,10)"/><text x="66.8882%" y="127.50"></text></g><g><title>explicit_predicates_of (249,073 samples, 0.26%)</title><rect x="67.3095%" y="85" width="0.2557%" height="15" fill="rgb(242,107,0)"/><text x="67.5595%" y="95.50"></text></g><g><title>predicates_of (703,048 samples, 0.72%)</title><rect x="67.1524%" y="117" width="0.7217%" height="15" fill="rgb(251,28,31)"/><text x="67.4024%" y="127.50"></text></g><g><title>predicates_defined_on (650,318 samples, 0.67%)</title><rect x="67.2065%" y="101" width="0.6676%" height="15" fill="rgb(233,223,10)"/><text x="67.4565%" y="111.50"></text></g><g><title>inferred_outlives_of (301,003 samples, 0.31%)</title><rect x="67.5651%" y="85" width="0.3090%" height="15" fill="rgb(215,21,27)"/><text x="67.8151%" y="95.50"></text></g><g><title>inferred_outlives_crate (274,463 samples, 0.28%)</title><rect x="67.5924%" y="69" width="0.2818%" height="15" fill="rgb(232,23,21)"/><text x="67.8424%" y="79.50"></text></g><g><title>type_of (139,533 samples, 0.14%)</title><rect x="67.7309%" y="53" width="0.1432%" height="15" fill="rgb(244,5,23)"/><text x="67.9809%" y="63.50"></text></g><g><title>type_collecting (1,943,741 samples, 2.00%)</title><rect x="66.0077%" y="149" width="1.9954%" height="15" fill="rgb(226,81,46)"/><text x="66.2577%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,937,371 samples, 1.99%)</title><rect x="66.0142%" y="133" width="1.9889%" height="15" fill="rgb(247,70,30)"/><text x="66.2642%" y="143.50">c..</text></g><g><title>type_of (125,581 samples, 0.13%)</title><rect x="67.8742%" y="117" width="0.1289%" height="15" fill="rgb(212,68,19)"/><text x="68.1242%" y="127.50"></text></g><g><title>evaluate_obligation (661,239 samples, 0.68%)</title><rect x="70.5888%" y="117" width="0.6788%" height="15" fill="rgb(240,187,13)"/><text x="70.8388%" y="127.50"></text></g><g><title>implied_outlives_bounds (230,653 samples, 0.24%)</title><rect x="71.2916%" y="117" width="0.2368%" height="15" fill="rgb(223,113,26)"/><text x="71.5416%" y="127.50"></text></g><g><title>param_env (314,215 samples, 0.32%)</title><rect x="71.5284%" y="117" width="0.3226%" height="15" fill="rgb(206,192,2)"/><text x="71.7784%" y="127.50"></text></g><g><title>region_scope_tree (385,932 samples, 0.40%)</title><rect x="71.8878%" y="117" width="0.3962%" height="15" fill="rgb(241,108,4)"/><text x="72.1378%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,956,295 samples, 4.06%)</title><rect x="68.2257%" y="133" width="4.0615%" height="15" fill="rgb(247,173,49)"/><text x="68.4757%" y="143.50">chec..</text></g><g><title>adt_def (105,581 samples, 0.11%)</title><rect x="74.3067%" y="53" width="0.1084%" height="15" fill="rgb(224,114,35)"/><text x="74.5567%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (105,131 samples, 0.11%)</title><rect x="74.3071%" y="37" width="0.1079%" height="15" fill="rgb(245,159,27)"/><text x="74.5571%" y="47.50"></text></g><g><title>adt_sized_constraint (153,602 samples, 0.16%)</title><rect x="74.3021%" y="69" width="0.1577%" height="15" fill="rgb(245,172,44)"/><text x="74.5521%" y="79.50"></text></g><g><title>adt_sized_constraint (211,783 samples, 0.22%)</title><rect x="74.2487%" y="85" width="0.2174%" height="15" fill="rgb(236,23,11)"/><text x="74.4987%" y="95.50"></text></g><g><title>adt_sized_constraint (277,423 samples, 0.28%)</title><rect x="74.1904%" y="101" width="0.2848%" height="15" fill="rgb(205,117,38)"/><text x="74.4404%" y="111.50"></text></g><g><title>adt_sized_constraint (308,174 samples, 0.32%)</title><rect x="74.1618%" y="117" width="0.3164%" height="15" fill="rgb(237,72,25)"/><text x="74.4118%" y="127.50"></text></g><g><title>evaluate_obligation (228,883 samples, 0.23%)</title><rect x="74.4781%" y="117" width="0.2350%" height="15" fill="rgb(244,70,9)"/><text x="74.7281%" y="127.50"></text></g><g><title>implied_outlives_bounds (124,992 samples, 0.13%)</title><rect x="74.7370%" y="117" width="0.1283%" height="15" fill="rgb(217,125,39)"/><text x="74.9870%" y="127.50"></text></g><g><title>param_env (343,191 samples, 0.35%)</title><rect x="74.8653%" y="117" width="0.3523%" height="15" fill="rgb(235,36,10)"/><text x="75.1153%" y="127.50"></text></g><g><title>analysis (73,084,018 samples, 75.03%)</title><rect x="0.4644%" y="181" width="75.0268%" height="15" fill="rgb(251,123,47)"/><text x="0.7144%" y="191.50">analysis</text></g><g><title>type_check_crate (45,229,700 samples, 46.43%)</title><rect x="29.0592%" y="165" width="46.4321%" height="15" fill="rgb(221,13,13)"/><text x="29.3092%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,288,110 samples, 7.48%)</title><rect x="68.0094%" y="149" width="7.4819%" height="15" fill="rgb(238,131,9)"/><text x="68.2594%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (3,121,103 samples, 3.20%)</title><rect x="72.2872%" y="133" width="3.2041%" height="15" fill="rgb(211,50,8)"/><text x="72.5372%" y="143.50">che..</text></g><g><title>variances_of (112,721 samples, 0.12%)</title><rect x="75.3755%" y="117" width="0.1157%" height="15" fill="rgb(245,182,24)"/><text x="75.6255%" y="127.50"></text></g><g><title>crate_variances (107,611 samples, 0.11%)</title><rect x="75.3808%" y="101" width="0.1105%" height="15" fill="rgb(242,14,37)"/><text x="75.6308%" y="111.50"></text></g><g><title>codegen_crate (374,994 samples, 0.38%)</title><rect x="75.4981%" y="181" width="0.3850%" height="15" fill="rgb(246,228,12)"/><text x="75.7481%" y="191.50"></text></g><g><title>AST_validation (111,861 samples, 0.11%)</title><rect x="76.0125%" y="165" width="0.1148%" height="15" fill="rgb(213,55,15)"/><text x="76.2625%" y="175.50"></text></g><g><title>metadata_load_macro (148,841 samples, 0.15%)</title><rect x="83.9591%" y="133" width="0.1528%" height="15" fill="rgb(209,9,3)"/><text x="84.2091%" y="143.50"></text></g><g><title>macro_expand_crate (9,065,860 samples, 9.31%)</title><rect x="76.2404%" y="165" width="9.3069%" height="15" fill="rgb(230,59,30)"/><text x="76.4904%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (9,050,499 samples, 9.29%)</title><rect x="76.2562%" y="149" width="9.2911%" height="15" fill="rgb(209,121,21)"/><text x="76.5062%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (1,398,256 samples, 1.44%)</title><rect x="84.1119%" y="133" width="1.4354%" height="15" fill="rgb(220,109,13)"/><text x="84.3619%" y="143.50"></text></g><g><title>metadata_register_crate (490,095 samples, 0.50%)</title><rect x="85.0442%" y="117" width="0.5031%" height="15" fill="rgb(232,18,1)"/><text x="85.2942%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (158,602 samples, 0.16%)</title><rect x="85.5503%" y="165" width="0.1628%" height="15" fill="rgb(215,41,42)"/><text x="85.8003%" y="175.50"></text></g><g><title>finalize_macro_resolutions (178,332 samples, 0.18%)</title><rect x="85.7644%" y="149" width="0.1831%" height="15" fill="rgb(224,123,36)"/><text x="86.0144%" y="159.50"></text></g><g><title>late_resolve_crate (1,677,609 samples, 1.72%)</title><rect x="85.9474%" y="149" width="1.7222%" height="15" fill="rgb(240,125,3)"/><text x="86.1974%" y="159.50"></text></g><g><title>configure_and_expand (11,573,048 samples, 11.88%)</title><rect x="75.8831%" y="181" width="11.8807%" height="15" fill="rgb(205,98,50)"/><text x="76.1331%" y="191.50">configure_and_expa..</text></g><g><title>resolve_crate (1,997,552 samples, 2.05%)</title><rect x="85.7131%" y="165" width="2.0507%" height="15" fill="rgb(205,185,37)"/><text x="85.9631%" y="175.50">r..</text></g><g><title>drop_ast (151,952 samples, 0.16%)</title><rect x="87.7638%" y="181" width="0.1560%" height="15" fill="rgb(238,207,15)"/><text x="88.0138%" y="191.50"></text></g><g><title>early_lint_checks (333,564 samples, 0.34%)</title><rect x="87.9366%" y="181" width="0.3424%" height="15" fill="rgb(213,199,42)"/><text x="88.1866%" y="191.50"></text></g><g><title>free_global_ctxt (3,704,281 samples, 3.80%)</title><rect x="88.2791%" y="181" width="3.8028%" height="15" fill="rgb(235,201,11)"/><text x="88.5291%" y="191.50">free..</text></g><g><title>generate_crate_metadata (1,343,905 samples, 1.38%)</title><rect x="92.0818%" y="181" width="1.3796%" height="15" fill="rgb(207,46,11)"/><text x="92.3318%" y="191.50"></text></g><g><title>hir_lowering (2,569,858 samples, 2.64%)</title><rect x="93.4614%" y="181" width="2.6382%" height="15" fill="rgb(241,35,35)"/><text x="93.7114%" y="191.50">hi..</text></g><g><title>parse_crate (2,392,487 samples, 2.46%)</title><rect x="96.1583%" y="181" width="2.4561%" height="15" fill="rgb(243,32,47)"/><text x="96.4083%" y="191.50">pa..</text></g><g><title>prepare_outputs (182,502 samples, 0.19%)</title><rect x="98.6194%" y="181" width="0.1874%" height="15" fill="rgb(247,202,23)"/><text x="98.8694%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (766,848 samples, 0.79%)</title><rect x="98.8067%" y="181" width="0.7872%" height="15" fill="rgb(219,102,11)"/><text x="99.0567%" y="191.50"></text></g><g><title>all (97,410,497 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (97,410,497 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (298,414 samples, 0.31%)</title><rect x="99.6937%" y="181" width="0.3063%" height="15" fill="rgb(216,99,12)"/><text x="99.9437%" y="191.50"></text></g></svg></svg>