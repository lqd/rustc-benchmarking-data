<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (132,182 samples, 0.11%)</title><rect x="7.7705%" y="101" width="0.1096%" height="15" fill="rgb(227,0,7)"/><text x="8.0205%" y="111.50"></text></g><g><title>item_attrs (145,272 samples, 0.12%)</title><rect x="8.1778%" y="69" width="0.1204%" height="15" fill="rgb(217,0,24)"/><text x="8.4278%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (139,672 samples, 0.12%)</title><rect x="8.1825%" y="53" width="0.1158%" height="15" fill="rgb(221,193,54)"/><text x="8.4325%" y="63.50"></text></g><g><title>codegen_fn_attrs (203,653 samples, 0.17%)</title><rect x="8.1354%" y="85" width="0.1688%" height="15" fill="rgb(248,212,6)"/><text x="8.3854%" y="95.50"></text></g><g><title>needs_drop_raw (810,548 samples, 0.67%)</title><rect x="9.5701%" y="69" width="0.6719%" height="15" fill="rgb(208,68,35)"/><text x="9.8201%" y="79.50"></text></g><g><title>is_copy_raw (612,006 samples, 0.51%)</title><rect x="9.7347%" y="53" width="0.5074%" height="15" fill="rgb(232,128,0)"/><text x="9.9847%" y="63.50"></text></g><g><title>evaluate_obligation (478,055 samples, 0.40%)</title><rect x="9.8457%" y="37" width="0.3963%" height="15" fill="rgb(207,160,47)"/><text x="10.0957%" y="47.50"></text></g><g><title>resolve_instance (168,250 samples, 0.14%)</title><rect x="10.2420%" y="69" width="0.1395%" height="15" fill="rgb(228,23,34)"/><text x="10.4920%" y="79.50"></text></g><g><title>thir_body (542,204 samples, 0.45%)</title><rect x="10.3963%" y="69" width="0.4495%" height="15" fill="rgb(218,30,26)"/><text x="10.6463%" y="79.50"></text></g><g><title>mir_const (4,250,284 samples, 3.52%)</title><rect x="7.3387%" y="117" width="3.5235%" height="15" fill="rgb(220,122,19)"/><text x="7.5887%" y="127.50">mir..</text></g><g><title>unsafety_check_result (3,597,239 samples, 2.98%)</title><rect x="7.8801%" y="101" width="2.9821%" height="15" fill="rgb(250,228,42)"/><text x="8.1301%" y="111.50">uns..</text></g><g><title>mir_built (3,085,582 samples, 2.56%)</title><rect x="8.3042%" y="85" width="2.5580%" height="15" fill="rgb(240,193,28)"/><text x="8.5542%" y="95.50">mi..</text></g><g><title>has_structural_eq_impls (189,032 samples, 0.16%)</title><rect x="10.9658%" y="101" width="0.1567%" height="15" fill="rgb(216,20,37)"/><text x="11.2158%" y="111.50"></text></g><g><title>evaluate_obligation (170,552 samples, 0.14%)</title><rect x="10.9811%" y="85" width="0.1414%" height="15" fill="rgb(206,188,39)"/><text x="11.2311%" y="95.50"></text></g><g><title>trait_impls_of (144,362 samples, 0.12%)</title><rect x="11.0029%" y="69" width="0.1197%" height="15" fill="rgb(217,207,13)"/><text x="11.2529%" y="79.50"></text></g><g><title>mir_promoted (5,322,518 samples, 4.41%)</title><rect x="6.8805%" y="133" width="4.4124%" height="15" fill="rgb(231,73,38)"/><text x="7.1305%" y="143.50">mir_p..</text></g><g><title>mir_const_qualif (519,497 samples, 0.43%)</title><rect x="10.8622%" y="117" width="0.4307%" height="15" fill="rgb(225,20,46)"/><text x="11.1122%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (261,314 samples, 0.22%)</title><rect x="11.2929%" y="133" width="0.2166%" height="15" fill="rgb(210,31,41)"/><text x="11.5429%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (144,852 samples, 0.12%)</title><rect x="11.5095%" y="133" width="0.1201%" height="15" fill="rgb(221,200,47)"/><text x="11.7595%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,849,779 samples, 1.53%)</title><rect x="11.6993%" y="133" width="1.5335%" height="15" fill="rgb(226,26,5)"/><text x="11.9493%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,942,917 samples, 12.39%)</title><rect x="0.8596%" y="165" width="12.3878%" height="15" fill="rgb(249,33,26)"/><text x="1.1096%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,854,006 samples, 12.31%)</title><rect x="0.9333%" y="149" width="12.3141%" height="15" fill="rgb(235,183,28)"/><text x="1.1833%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (139,211 samples, 0.12%)</title><rect x="13.2474%" y="165" width="0.1154%" height="15" fill="rgb(221,5,38)"/><text x="13.4974%" y="175.50"></text></g><g><title>hir_module_items (179,732 samples, 0.15%)</title><rect x="13.3628%" y="165" width="0.1490%" height="15" fill="rgb(247,18,42)"/><text x="13.6128%" y="175.50"></text></g><g><title>late_bound_vars_map (180,162 samples, 0.15%)</title><rect x="14.2676%" y="101" width="0.1494%" height="15" fill="rgb(241,131,45)"/><text x="14.5176%" y="111.50"></text></g><g><title>resolve_lifetimes (158,992 samples, 0.13%)</title><rect x="14.2851%" y="85" width="0.1318%" height="15" fill="rgb(249,31,29)"/><text x="14.5351%" y="95.50"></text></g><g><title>fn_sig (585,186 samples, 0.49%)</title><rect x="14.0769%" y="117" width="0.4851%" height="15" fill="rgb(225,111,53)"/><text x="14.3269%" y="127.50"></text></g><g><title>should_inherit_track_caller (230,932 samples, 0.19%)</title><rect x="14.6324%" y="117" width="0.1914%" height="15" fill="rgb(238,160,17)"/><text x="14.8824%" y="127.50"></text></g><g><title>codegen_fn_attrs (996,812 samples, 0.83%)</title><rect x="14.0106%" y="133" width="0.8264%" height="15" fill="rgb(214,148,48)"/><text x="14.2606%" y="143.50"></text></g><g><title>check_mod_attrs (1,556,039 samples, 1.29%)</title><rect x="13.5471%" y="149" width="1.2900%" height="15" fill="rgb(232,36,49)"/><text x="13.7971%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (251,133 samples, 0.21%)</title><rect x="14.9565%" y="149" width="0.2082%" height="15" fill="rgb(209,103,24)"/><text x="15.2065%" y="159.50"></text></g><g><title>misc_checking_1 (2,046,573 samples, 1.70%)</title><rect x="13.5121%" y="165" width="1.6966%" height="15" fill="rgb(229,88,8)"/><text x="13.7621%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (318,933 samples, 0.26%)</title><rect x="15.2100%" y="149" width="0.2644%" height="15" fill="rgb(213,181,19)"/><text x="15.4600%" y="159.50"></text></g><g><title>check_mod_liveness (248,882 samples, 0.21%)</title><rect x="15.2680%" y="133" width="0.2063%" height="15" fill="rgb(254,191,54)"/><text x="15.5180%" y="143.50"></text></g><g><title>misc_checking_2 (688,077 samples, 0.57%)</title><rect x="15.2087%" y="165" width="0.5704%" height="15" fill="rgb(241,83,37)"/><text x="15.4587%" y="175.50"></text></g><g><title>match_checking (367,664 samples, 0.30%)</title><rect x="15.4744%" y="149" width="0.3048%" height="15" fill="rgb(233,36,39)"/><text x="15.7244%" y="159.50"></text></g><g><title>check_match (345,014 samples, 0.29%)</title><rect x="15.4931%" y="133" width="0.2860%" height="15" fill="rgb(226,3,54)"/><text x="15.7431%" y="143.50"></text></g><g><title>check_private_in_public (182,162 samples, 0.15%)</title><rect x="15.7875%" y="149" width="0.1510%" height="15" fill="rgb(245,192,40)"/><text x="16.0375%" y="159.50"></text></g><g><title>death_checking (718,908 samples, 0.60%)</title><rect x="15.9385%" y="149" width="0.5960%" height="15" fill="rgb(238,167,29)"/><text x="16.1885%" y="159.50"></text></g><g><title>item_attrs (422,835 samples, 0.35%)</title><rect x="16.1839%" y="133" width="0.3505%" height="15" fill="rgb(232,182,51)"/><text x="16.4339%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (421,685 samples, 0.35%)</title><rect x="16.1849%" y="117" width="0.3496%" height="15" fill="rgb(231,60,39)"/><text x="16.4349%" y="127.50"></text></g><g><title>eval_to_allocation_raw (447,325 samples, 0.37%)</title><rect x="17.7352%" y="117" width="0.3708%" height="15" fill="rgb(208,69,12)"/><text x="17.9852%" y="127.50"></text></g><g><title>eval_to_allocation_raw (438,605 samples, 0.36%)</title><rect x="17.7424%" y="101" width="0.3636%" height="15" fill="rgb(235,93,37)"/><text x="17.9924%" y="111.50"></text></g><g><title>param_env (246,683 samples, 0.20%)</title><rect x="18.1060%" y="117" width="0.2045%" height="15" fill="rgb(213,116,39)"/><text x="18.3560%" y="127.50"></text></g><g><title>crate_lints (3,183,935 samples, 2.64%)</title><rect x="16.5360%" y="133" width="2.6395%" height="15" fill="rgb(222,207,29)"/><text x="16.7860%" y="143.50">cr..</text></g><g><title>type_of (1,038,092 samples, 0.86%)</title><rect x="18.3149%" y="117" width="0.8606%" height="15" fill="rgb(206,96,30)"/><text x="18.5649%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (801,849 samples, 0.66%)</title><rect x="18.5107%" y="101" width="0.6647%" height="15" fill="rgb(218,138,4)"/><text x="18.7607%" y="111.50"></text></g><g><title>lint_checking (3,491,289 samples, 2.89%)</title><rect x="16.5345%" y="149" width="2.8943%" height="15" fill="rgb(250,191,14)"/><text x="16.7845%" y="159.50">li..</text></g><g><title>module_lints (305,554 samples, 0.25%)</title><rect x="19.1755%" y="133" width="0.2533%" height="15" fill="rgb(239,60,40)"/><text x="19.4255%" y="143.50"></text></g><g><title>lint_mod (294,854 samples, 0.24%)</title><rect x="19.1843%" y="117" width="0.2444%" height="15" fill="rgb(206,27,48)"/><text x="19.4343%" y="127.50"></text></g><g><title>privacy_access_levels (229,593 samples, 0.19%)</title><rect x="19.4288%" y="149" width="0.1903%" height="15" fill="rgb(225,35,8)"/><text x="19.6788%" y="159.50"></text></g><g><title>privacy_checking_modules (754,238 samples, 0.63%)</title><rect x="19.6191%" y="149" width="0.6253%" height="15" fill="rgb(250,213,24)"/><text x="19.8691%" y="159.50"></text></g><g><title>check_mod_privacy (746,548 samples, 0.62%)</title><rect x="19.6255%" y="133" width="0.6189%" height="15" fill="rgb(247,123,22)"/><text x="19.8755%" y="143.50"></text></g><g><title>misc_checking_3 (5,411,010 samples, 4.49%)</title><rect x="15.7792%" y="165" width="4.4858%" height="15" fill="rgb(231,138,38)"/><text x="16.0292%" y="175.50">misc_..</text></g><g><title>impl_trait_ref (186,152 samples, 0.15%)</title><rect x="20.4658%" y="69" width="0.1543%" height="15" fill="rgb(231,145,46)"/><text x="20.7158%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (165,842 samples, 0.14%)</title><rect x="20.4826%" y="53" width="0.1375%" height="15" fill="rgb(251,118,11)"/><text x="20.7326%" y="63.50"></text></g><g><title>adt_destructor (346,733 samples, 0.29%)</title><rect x="20.3572%" y="117" width="0.2874%" height="15" fill="rgb(217,147,25)"/><text x="20.6072%" y="127.50"></text></g><g><title>coherent_trait (343,503 samples, 0.28%)</title><rect x="20.3599%" y="101" width="0.2848%" height="15" fill="rgb(247,81,37)"/><text x="20.6099%" y="111.50"></text></g><g><title>specialization_graph_of (342,053 samples, 0.28%)</title><rect x="20.3611%" y="85" width="0.2836%" height="15" fill="rgb(209,12,38)"/><text x="20.6111%" y="95.50"></text></g><g><title>evaluate_obligation (225,642 samples, 0.19%)</title><rect x="20.8392%" y="101" width="0.1871%" height="15" fill="rgb(227,1,9)"/><text x="21.0892%" y="111.50"></text></g><g><title>object_safety_violations (629,126 samples, 0.52%)</title><rect x="20.7101%" y="117" width="0.5215%" height="15" fill="rgb(248,47,43)"/><text x="20.9601%" y="127.50"></text></g><g><title>impl_parent (1,933,670 samples, 1.60%)</title><rect x="24.1072%" y="101" width="1.6030%" height="15" fill="rgb(221,10,30)"/><text x="24.3572%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,179,210 samples, 0.98%)</title><rect x="24.7327%" y="85" width="0.9776%" height="15" fill="rgb(210,229,1)"/><text x="24.9827%" y="95.50"></text></g><g><title>impl_trait_ref (4,654,421 samples, 3.86%)</title><rect x="25.7102%" y="101" width="3.8585%" height="15" fill="rgb(222,148,37)"/><text x="25.9602%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,899,424 samples, 3.23%)</title><rect x="26.3361%" y="85" width="3.2326%" height="15" fill="rgb(234,67,33)"/><text x="26.5861%" y="95.50">met..</text></g><g><title>coherent_trait (11,763,732 samples, 9.75%)</title><rect x="20.3224%" y="133" width="9.7522%" height="15" fill="rgb(247,98,35)"/><text x="20.5724%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (10,654,580 samples, 8.83%)</title><rect x="21.2419%" y="117" width="8.8327%" height="15" fill="rgb(247,138,52)"/><text x="21.4919%" y="127.50">specializati..</text></g><g><title>trait_impls_of (594,869 samples, 0.49%)</title><rect x="29.5815%" y="101" width="0.4931%" height="15" fill="rgb(213,79,30)"/><text x="29.8315%" y="111.50"></text></g><g><title>implementations_of_trait (150,952 samples, 0.13%)</title><rect x="29.9495%" y="85" width="0.1251%" height="15" fill="rgb(246,177,23)"/><text x="30.1995%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (122,192 samples, 0.10%)</title><rect x="29.9733%" y="69" width="0.1013%" height="15" fill="rgb(230,62,27)"/><text x="30.2233%" y="79.50"></text></g><g><title>coherence_checking (11,827,842 samples, 9.81%)</title><rect x="20.3058%" y="149" width="9.8054%" height="15" fill="rgb(216,154,8)"/><text x="20.5558%" y="159.50">coherence_chec..</text></g><g><title>adt_dtorck_constraint (131,911 samples, 0.11%)</title><rect x="38.8304%" y="85" width="0.1094%" height="15" fill="rgb(244,35,45)"/><text x="39.0804%" y="95.50"></text></g><g><title>dropck_outlives (347,612 samples, 0.29%)</title><rect x="38.6673%" y="101" width="0.2882%" height="15" fill="rgb(251,115,12)"/><text x="38.9173%" y="111.50"></text></g><g><title>evaluate_obligation (390,284 samples, 0.32%)</title><rect x="38.9555%" y="101" width="0.3235%" height="15" fill="rgb(240,54,50)"/><text x="39.2055%" y="111.50"></text></g><g><title>method_autoderef_steps (211,674 samples, 0.18%)</title><rect x="39.5483%" y="101" width="0.1755%" height="15" fill="rgb(233,84,52)"/><text x="39.7983%" y="111.50"></text></g><g><title>evaluate_obligation (123,331 samples, 0.10%)</title><rect x="39.6216%" y="85" width="0.1022%" height="15" fill="rgb(207,117,47)"/><text x="39.8716%" y="95.50"></text></g><g><title>predicates_of (167,712 samples, 0.14%)</title><rect x="39.7834%" y="101" width="0.1390%" height="15" fill="rgb(249,43,39)"/><text x="40.0334%" y="111.50"></text></g><g><title>predicates_defined_on (122,922 samples, 0.10%)</title><rect x="39.8205%" y="85" width="0.1019%" height="15" fill="rgb(209,38,44)"/><text x="40.0705%" y="95.50"></text></g><g><title>evaluate_obligation (644,737 samples, 0.53%)</title><rect x="41.6565%" y="85" width="0.5345%" height="15" fill="rgb(236,212,23)"/><text x="41.9065%" y="95.50"></text></g><g><title>typeck (3,005,073 samples, 2.49%)</title><rect x="39.9836%" y="101" width="2.4912%" height="15" fill="rgb(242,79,21)"/><text x="40.2336%" y="111.50">ty..</text></g><g><title>item_bodies_checking (14,907,876 samples, 12.36%)</title><rect x="30.1400%" y="149" width="12.3587%" height="15" fill="rgb(211,96,35)"/><text x="30.3900%" y="159.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (14,905,226 samples, 12.36%)</title><rect x="30.1422%" y="133" width="12.3565%" height="15" fill="rgb(253,215,40)"/><text x="30.3922%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (14,842,125 samples, 12.30%)</title><rect x="30.1945%" y="117" width="12.3042%" height="15" fill="rgb(211,81,21)"/><text x="30.4445%" y="127.50">typeck</text></g><g><title>item_types_checking (1,620,398 samples, 1.34%)</title><rect x="42.4987%" y="149" width="1.3433%" height="15" fill="rgb(208,190,38)"/><text x="42.7487%" y="159.50"></text></g><g><title>check_mod_item_types (1,610,838 samples, 1.34%)</title><rect x="42.5066%" y="133" width="1.3354%" height="15" fill="rgb(235,213,38)"/><text x="42.7566%" y="143.50"></text></g><g><title>typeck (451,925 samples, 0.37%)</title><rect x="43.4674%" y="117" width="0.3746%" height="15" fill="rgb(237,122,38)"/><text x="43.7174%" y="127.50"></text></g><g><title>fn_sig (383,461 samples, 0.32%)</title><rect x="44.0391%" y="117" width="0.3179%" height="15" fill="rgb(244,218,35)"/><text x="44.2891%" y="127.50"></text></g><g><title>is_late_bound_map (134,892 samples, 0.11%)</title><rect x="44.4272%" y="101" width="0.1118%" height="15" fill="rgb(240,68,47)"/><text x="44.6772%" y="111.50"></text></g><g><title>resolve_lifetimes (131,272 samples, 0.11%)</title><rect x="44.4302%" y="85" width="0.1088%" height="15" fill="rgb(210,16,53)"/><text x="44.6802%" y="95.50"></text></g><g><title>named_region_map (135,700 samples, 0.11%)</title><rect x="44.5390%" y="101" width="0.1125%" height="15" fill="rgb(235,124,12)"/><text x="44.7890%" y="111.50"></text></g><g><title>resolve_lifetimes (122,800 samples, 0.10%)</title><rect x="44.5497%" y="85" width="0.1018%" height="15" fill="rgb(224,169,11)"/><text x="44.7997%" y="95.50"></text></g><g><title>generics_of (364,563 samples, 0.30%)</title><rect x="44.3570%" y="117" width="0.3022%" height="15" fill="rgb(250,166,2)"/><text x="44.6070%" y="127.50"></text></g><g><title>explicit_predicates_of (373,415 samples, 0.31%)</title><rect x="44.7958%" y="85" width="0.3096%" height="15" fill="rgb(242,216,29)"/><text x="45.0458%" y="95.50"></text></g><g><title>predicates_of (795,572 samples, 0.66%)</title><rect x="44.6923%" y="117" width="0.6595%" height="15" fill="rgb(230,116,27)"/><text x="44.9423%" y="127.50"></text></g><g><title>predicates_defined_on (746,591 samples, 0.62%)</title><rect x="44.7329%" y="101" width="0.6189%" height="15" fill="rgb(228,99,48)"/><text x="44.9829%" y="111.50"></text></g><g><title>inferred_outlives_of (297,294 samples, 0.25%)</title><rect x="45.1053%" y="85" width="0.2465%" height="15" fill="rgb(253,11,6)"/><text x="45.3553%" y="95.50"></text></g><g><title>inferred_outlives_crate (275,933 samples, 0.23%)</title><rect x="45.1230%" y="69" width="0.2288%" height="15" fill="rgb(247,143,39)"/><text x="45.3730%" y="79.50"></text></g><g><title>type_of (175,642 samples, 0.15%)</title><rect x="45.2062%" y="53" width="0.1456%" height="15" fill="rgb(236,97,10)"/><text x="45.4562%" y="63.50"></text></g><g><title>type_collecting (2,044,043 samples, 1.69%)</title><rect x="43.8433%" y="149" width="1.6945%" height="15" fill="rgb(233,208,19)"/><text x="44.0933%" y="159.50"></text></g><g><title>collect_mod_item_types (2,030,782 samples, 1.68%)</title><rect x="43.8543%" y="133" width="1.6835%" height="15" fill="rgb(216,164,2)"/><text x="44.1043%" y="143.50"></text></g><g><title>type_of (166,611 samples, 0.14%)</title><rect x="45.3997%" y="117" width="0.1381%" height="15" fill="rgb(220,129,5)"/><text x="45.6497%" y="127.50"></text></g><g><title>evaluate_obligation (348,043 samples, 0.29%)</title><rect x="47.1124%" y="117" width="0.2885%" height="15" fill="rgb(242,17,10)"/><text x="47.3624%" y="127.50"></text></g><g><title>implied_outlives_bounds (248,056 samples, 0.21%)</title><rect x="47.4084%" y="117" width="0.2056%" height="15" fill="rgb(242,107,0)"/><text x="47.6584%" y="127.50"></text></g><g><title>param_env (243,492 samples, 0.20%)</title><rect x="47.6141%" y="117" width="0.2019%" height="15" fill="rgb(251,28,31)"/><text x="47.8641%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,790,346 samples, 2.31%)</title><rect x="45.6939%" y="133" width="2.3132%" height="15" fill="rgb(233,223,10)"/><text x="45.9439%" y="143.50">c..</text></g><g><title>region_scope_tree (212,902 samples, 0.18%)</title><rect x="47.8306%" y="117" width="0.1765%" height="15" fill="rgb(215,21,27)"/><text x="48.0806%" y="127.50"></text></g><g><title>adt_sized_constraint (160,882 samples, 0.13%)</title><rect x="49.1977%" y="101" width="0.1334%" height="15" fill="rgb(232,23,21)"/><text x="49.4477%" y="111.50"></text></g><g><title>evaluate_obligation (531,309 samples, 0.44%)</title><rect x="48.9370%" y="117" width="0.4405%" height="15" fill="rgb(244,5,23)"/><text x="49.1870%" y="127.50"></text></g><g><title>param_env (231,291 samples, 0.19%)</title><rect x="49.4648%" y="117" width="0.1917%" height="15" fill="rgb(226,81,46)"/><text x="49.7148%" y="127.50"></text></g><g><title>check_item_well_formed (2,142,570 samples, 1.78%)</title><rect x="48.0071%" y="133" width="1.7762%" height="15" fill="rgb(247,70,30)"/><text x="48.2571%" y="143.50">c..</text></g><g><title>evaluate_obligation (215,762 samples, 0.18%)</title><rect x="50.6655%" y="117" width="0.1789%" height="15" fill="rgb(212,68,19)"/><text x="50.9155%" y="127.50"></text></g><g><title>param_env (159,923 samples, 0.13%)</title><rect x="50.9435%" y="117" width="0.1326%" height="15" fill="rgb(240,187,13)"/><text x="51.1935%" y="127.50"></text></g><g><title>analysis (60,949,118 samples, 50.53%)</title><rect x="0.6636%" y="181" width="50.5272%" height="15" fill="rgb(223,113,26)"/><text x="0.9136%" y="191.50">analysis</text></g><g><title>type_check_crate (37,304,696 samples, 30.93%)</title><rect x="20.2649%" y="165" width="30.9258%" height="15" fill="rgb(206,192,2)"/><text x="20.5149%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,815,016 samples, 5.65%)</title><rect x="45.5410%" y="149" width="5.6497%" height="15" fill="rgb(241,108,4)"/><text x="45.7910%" y="159.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,697,709 samples, 1.41%)</title><rect x="49.7833%" y="133" width="1.4074%" height="15" fill="rgb(247,173,49)"/><text x="50.0333%" y="143.50"></text></g><g><title>codegen_crate (389,714 samples, 0.32%)</title><rect x="51.2099%" y="181" width="0.3231%" height="15" fill="rgb(224,114,35)"/><text x="51.4599%" y="191.50"></text></g><g><title>AST_validation (218,363 samples, 0.18%)</title><rect x="51.7168%" y="165" width="0.1810%" height="15" fill="rgb(245,159,27)"/><text x="51.9668%" y="175.50"></text></g><g><title>metadata_load_macro (310,694 samples, 0.26%)</title><rect x="77.2492%" y="133" width="0.2576%" height="15" fill="rgb(245,172,44)"/><text x="77.4992%" y="143.50"></text></g><g><title>metadata_register_crate (7,719,327 samples, 6.40%)</title><rect x="77.5068%" y="133" width="6.3994%" height="15" fill="rgb(236,23,11)"/><text x="77.7568%" y="143.50">metadata..</text></g><g><title>metadata_register_crate (986,929 samples, 0.82%)</title><rect x="83.0879%" y="117" width="0.8182%" height="15" fill="rgb(205,117,38)"/><text x="83.3379%" y="127.50"></text></g><g><title>macro_expand_crate (38,519,479 samples, 31.93%)</title><rect x="52.0105%" y="165" width="31.9329%" height="15" fill="rgb(237,72,25)"/><text x="52.2605%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (38,504,059 samples, 31.92%)</title><rect x="52.0233%" y="149" width="31.9201%" height="15" fill="rgb(244,70,9)"/><text x="52.2733%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (291,264 samples, 0.24%)</title><rect x="83.9468%" y="165" width="0.2415%" height="15" fill="rgb(217,125,39)"/><text x="84.1968%" y="175.50"></text></g><g><title>finalize_macro_resolutions (147,872 samples, 0.12%)</title><rect x="84.2374%" y="149" width="0.1226%" height="15" fill="rgb(235,36,10)"/><text x="84.4874%" y="159.50"></text></g><g><title>late_resolve_crate (1,135,853 samples, 0.94%)</title><rect x="84.3599%" y="149" width="0.9416%" height="15" fill="rgb(251,123,47)"/><text x="84.6099%" y="159.50"></text></g><g><title>configure_and_expand (40,832,484 samples, 33.85%)</title><rect x="51.5330%" y="181" width="33.8504%" height="15" fill="rgb(221,13,13)"/><text x="51.7830%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,441,606 samples, 1.20%)</title><rect x="84.1883%" y="165" width="1.1951%" height="15" fill="rgb(238,131,9)"/><text x="84.4383%" y="175.50"></text></g><g><title>drop_ast (189,962 samples, 0.16%)</title><rect x="85.3834%" y="181" width="0.1575%" height="15" fill="rgb(211,50,8)"/><text x="85.6334%" y="191.50"></text></g><g><title>early_lint_checks (301,293 samples, 0.25%)</title><rect x="85.5615%" y="181" width="0.2498%" height="15" fill="rgb(245,182,24)"/><text x="85.8115%" y="191.50"></text></g><g><title>free_global_ctxt (4,854,804 samples, 4.02%)</title><rect x="85.8113%" y="181" width="4.0247%" height="15" fill="rgb(242,14,37)"/><text x="86.0613%" y="191.50">free..</text></g><g><title>generate_crate_metadata (1,216,264 samples, 1.01%)</title><rect x="89.8360%" y="181" width="1.0083%" height="15" fill="rgb(246,228,12)"/><text x="90.0860%" y="191.50"></text></g><g><title>hir_lowering (2,762,131 samples, 2.29%)</title><rect x="90.8443%" y="181" width="2.2898%" height="15" fill="rgb(213,55,15)"/><text x="91.0943%" y="191.50">h..</text></g><g><title>parse_crate (6,180,189 samples, 5.12%)</title><rect x="93.2005%" y="181" width="5.1234%" height="15" fill="rgb(209,9,3)"/><text x="93.4505%" y="191.50">parse_..</text></g><g><title>prepare_outputs (194,963 samples, 0.16%)</title><rect x="98.3323%" y="181" width="0.1616%" height="15" fill="rgb(230,59,30)"/><text x="98.5823%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,369,796 samples, 1.14%)</title><rect x="98.4939%" y="181" width="1.1356%" height="15" fill="rgb(209,121,21)"/><text x="98.7439%" y="191.50"></text></g><g><title>all (120,626,404 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (120,626,404 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (355,614 samples, 0.29%)</title><rect x="99.7052%" y="181" width="0.2948%" height="15" fill="rgb(215,41,42)"/><text x="99.9552%" y="191.50"></text></g></svg></svg>