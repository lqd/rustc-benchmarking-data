<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (41,721 samples, 0.11%)</title><rect x="6.0498%" y="85" width="0.1077%" height="15" fill="rgb(227,0,7)"/><text x="6.2998%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (40,351 samples, 0.10%)</title><rect x="6.0533%" y="69" width="0.1042%" height="15" fill="rgb(217,0,24)"/><text x="6.3033%" y="79.50"></text></g><g><title>codegen_fn_attrs (70,611 samples, 0.18%)</title><rect x="5.9926%" y="101" width="0.1823%" height="15" fill="rgb(221,193,54)"/><text x="6.2426%" y="111.50"></text></g><g><title>is_copy_raw (336,294 samples, 0.87%)</title><rect x="7.0236%" y="85" width="0.8683%" height="15" fill="rgb(248,212,6)"/><text x="7.2736%" y="95.50"></text></g><g><title>evaluate_obligation (322,874 samples, 0.83%)</title><rect x="7.0583%" y="69" width="0.8336%" height="15" fill="rgb(208,68,35)"/><text x="7.3083%" y="79.50"></text></g><g><title>trait_impls_of (242,873 samples, 0.63%)</title><rect x="7.2648%" y="53" width="0.6271%" height="15" fill="rgb(232,128,0)"/><text x="7.5148%" y="63.50"></text></g><g><title>implementations_of_trait (43,690 samples, 0.11%)</title><rect x="7.7791%" y="37" width="0.1128%" height="15" fill="rgb(207,160,47)"/><text x="8.0291%" y="47.50"></text></g><g><title>is_copy_raw (91,512 samples, 0.24%)</title><rect x="7.9628%" y="53" width="0.2363%" height="15" fill="rgb(228,23,34)"/><text x="8.2128%" y="63.50"></text></g><g><title>evaluate_obligation (84,962 samples, 0.22%)</title><rect x="7.9798%" y="37" width="0.2194%" height="15" fill="rgb(218,30,26)"/><text x="8.2298%" y="47.50"></text></g><g><title>adt_drop_tys (135,012 samples, 0.35%)</title><rect x="7.9397%" y="69" width="0.3486%" height="15" fill="rgb(220,122,19)"/><text x="8.1897%" y="79.50"></text></g><g><title>needs_drop_raw (278,633 samples, 0.72%)</title><rect x="7.8919%" y="85" width="0.7194%" height="15" fill="rgb(250,228,42)"/><text x="8.1419%" y="95.50"></text></g><g><title>is_copy_raw (125,091 samples, 0.32%)</title><rect x="8.2883%" y="69" width="0.3230%" height="15" fill="rgb(240,193,28)"/><text x="8.5383%" y="79.50"></text></g><g><title>evaluate_obligation (111,891 samples, 0.29%)</title><rect x="8.3224%" y="53" width="0.2889%" height="15" fill="rgb(216,20,37)"/><text x="8.5724%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (84,501 samples, 0.22%)</title><rect x="8.7201%" y="69" width="0.2182%" height="15" fill="rgb(206,188,39)"/><text x="8.9701%" y="79.50"></text></g><g><title>impl_parent (282,014 samples, 0.73%)</title><rect x="10.2198%" y="53" width="0.7281%" height="15" fill="rgb(217,207,13)"/><text x="10.4698%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (155,323 samples, 0.40%)</title><rect x="10.5469%" y="37" width="0.4010%" height="15" fill="rgb(231,73,38)"/><text x="10.7969%" y="47.50"></text></g><g><title>specialization_graph_of (1,764,260 samples, 4.56%)</title><rect x="8.9484%" y="69" width="4.5551%" height="15" fill="rgb(225,20,46)"/><text x="9.1984%" y="79.50">speci..</text></g><g><title>impl_trait_ref (989,818 samples, 2.56%)</title><rect x="10.9479%" y="53" width="2.5556%" height="15" fill="rgb(210,31,41)"/><text x="11.1979%" y="63.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (871,937 samples, 2.25%)</title><rect x="11.2523%" y="37" width="2.2512%" height="15" fill="rgb(221,200,47)"/><text x="11.5023%" y="47.50">m..</text></g><g><title>resolve_instance (1,904,921 samples, 4.92%)</title><rect x="8.6113%" y="85" width="4.9183%" height="15" fill="rgb(226,26,5)"/><text x="8.8613%" y="95.50">resolv..</text></g><g><title>thir_body (106,481 samples, 0.27%)</title><rect x="13.5395%" y="85" width="0.2749%" height="15" fill="rgb(249,33,26)"/><text x="13.7895%" y="95.50"></text></g><g><title>mir_const (3,314,637 samples, 8.56%)</title><rect x="5.2630%" y="133" width="8.5580%" height="15" fill="rgb(235,183,28)"/><text x="5.5130%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (3,118,845 samples, 8.05%)</title><rect x="5.7685%" y="117" width="8.0525%" height="15" fill="rgb(221,5,38)"/><text x="6.0185%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (2,961,443 samples, 7.65%)</title><rect x="6.1749%" y="101" width="7.6461%" height="15" fill="rgb(247,18,42)"/><text x="6.4249%" y="111.50">mir_built</text></g><g><title>mir_promoted (3,450,568 samples, 8.91%)</title><rect x="4.9399%" y="149" width="8.9090%" height="15" fill="rgb(241,131,45)"/><text x="5.1899%" y="159.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (80,150 samples, 0.21%)</title><rect x="13.8488%" y="149" width="0.2069%" height="15" fill="rgb(249,31,29)"/><text x="14.0988%" y="159.50"></text></g><g><title>normalize_projection_ty (44,600 samples, 0.12%)</title><rect x="13.9406%" y="133" width="0.1152%" height="15" fill="rgb(225,111,53)"/><text x="14.1906%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,682,543 samples, 12.09%)</title><rect x="2.2343%" y="181" width="12.0898%" height="15" fill="rgb(238,160,17)"/><text x="2.4843%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (4,671,333 samples, 12.06%)</title><rect x="2.2633%" y="165" width="12.0609%" height="15" fill="rgb(214,148,48)"/><text x="2.5133%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (103,931 samples, 0.27%)</title><rect x="14.0558%" y="149" width="0.2683%" height="15" fill="rgb(232,36,49)"/><text x="14.3058%" y="159.50"></text></g><g><title>hir_module_items (103,981 samples, 0.27%)</title><rect x="14.3335%" y="181" width="0.2685%" height="15" fill="rgb(209,103,24)"/><text x="14.5835%" y="191.50"></text></g><g><title>associated_item (45,600 samples, 0.12%)</title><rect x="15.0030%" y="117" width="0.1177%" height="15" fill="rgb(229,88,8)"/><text x="15.2530%" y="127.50"></text></g><g><title>get_lang_items (62,400 samples, 0.16%)</title><rect x="15.1986%" y="101" width="0.1611%" height="15" fill="rgb(213,181,19)"/><text x="15.4486%" y="111.50"></text></g><g><title>item_attrs (54,911 samples, 0.14%)</title><rect x="15.3597%" y="101" width="0.1418%" height="15" fill="rgb(254,191,54)"/><text x="15.6097%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,710 samples, 0.12%)</title><rect x="15.3808%" y="85" width="0.1206%" height="15" fill="rgb(241,83,37)"/><text x="15.6308%" y="95.50"></text></g><g><title>codegen_fn_attrs (199,002 samples, 0.51%)</title><rect x="15.1207%" y="117" width="0.5138%" height="15" fill="rgb(233,36,39)"/><text x="15.3707%" y="127.50"></text></g><g><title>codegen_fn_attrs (294,752 samples, 0.76%)</title><rect x="14.8786%" y="149" width="0.7610%" height="15" fill="rgb(226,3,54)"/><text x="15.1286%" y="159.50"></text></g><g><title>should_inherit_track_caller (268,532 samples, 0.69%)</title><rect x="14.9463%" y="133" width="0.6933%" height="15" fill="rgb(245,192,40)"/><text x="15.1963%" y="143.50"></text></g><g><title>check_mod_attrs (378,434 samples, 0.98%)</title><rect x="14.6634%" y="165" width="0.9771%" height="15" fill="rgb(238,167,29)"/><text x="14.9134%" y="175.50"></text></g><g><title>check_mod_const_bodies (39,990 samples, 0.10%)</title><rect x="15.6405%" y="165" width="0.1032%" height="15" fill="rgb(232,182,51)"/><text x="15.8905%" y="175.50"></text></g><g><title>lookup_deprecation_entry (58,142 samples, 0.15%)</title><rect x="15.9418%" y="149" width="0.1501%" height="15" fill="rgb(231,60,39)"/><text x="16.1918%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (145,692 samples, 0.38%)</title><rect x="15.8149%" y="165" width="0.3762%" height="15" fill="rgb(208,69,12)"/><text x="16.0649%" y="175.50"></text></g><g><title>looking_for_derive_registrar (41,381 samples, 0.11%)</title><rect x="16.1953%" y="165" width="0.1068%" height="15" fill="rgb(235,93,37)"/><text x="16.4453%" y="175.50"></text></g><g><title>misc_checking_1 (662,518 samples, 1.71%)</title><rect x="14.6026%" y="181" width="1.7105%" height="15" fill="rgb(213,116,39)"/><text x="14.8526%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (102,101 samples, 0.26%)</title><rect x="16.3195%" y="165" width="0.2636%" height="15" fill="rgb(222,207,29)"/><text x="16.5695%" y="175.50"></text></g><g><title>check_mod_liveness (81,231 samples, 0.21%)</title><rect x="16.3734%" y="149" width="0.2097%" height="15" fill="rgb(206,96,30)"/><text x="16.6234%" y="159.50"></text></g><g><title>misc_checking_2 (237,302 samples, 0.61%)</title><rect x="16.3132%" y="181" width="0.6127%" height="15" fill="rgb(218,138,4)"/><text x="16.5632%" y="191.50"></text></g><g><title>match_checking (132,761 samples, 0.34%)</title><rect x="16.5831%" y="165" width="0.3428%" height="15" fill="rgb(250,191,14)"/><text x="16.8331%" y="175.50"></text></g><g><title>check_match (126,221 samples, 0.33%)</title><rect x="16.6000%" y="149" width="0.3259%" height="15" fill="rgb(239,60,40)"/><text x="16.8500%" y="159.50"></text></g><g><title>death_checking (104,441 samples, 0.27%)</title><rect x="17.0383%" y="165" width="0.2697%" height="15" fill="rgb(206,27,48)"/><text x="17.2883%" y="175.50"></text></g><g><title>param_env (87,190 samples, 0.23%)</title><rect x="18.3271%" y="133" width="0.2251%" height="15" fill="rgb(225,35,8)"/><text x="18.5771%" y="143.50"></text></g><g><title>trait_impls_of (205,282 samples, 0.53%)</title><rect x="18.5523%" y="133" width="0.5300%" height="15" fill="rgb(250,213,24)"/><text x="18.8023%" y="143.50"></text></g><g><title>implementations_of_trait (42,840 samples, 0.11%)</title><rect x="18.9717%" y="117" width="0.1106%" height="15" fill="rgb(247,123,22)"/><text x="19.2217%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (38,930 samples, 0.10%)</title><rect x="18.9818%" y="101" width="0.1005%" height="15" fill="rgb(231,138,38)"/><text x="19.2318%" y="111.50"></text></g><g><title>crate_lints (3,065,074 samples, 7.91%)</title><rect x="17.3117%" y="149" width="7.9137%" height="15" fill="rgb(231,145,46)"/><text x="17.5617%" y="159.50">crate_lints</text></g><g><title>type_of (2,377,386 samples, 6.14%)</title><rect x="19.0873%" y="133" width="6.1381%" height="15" fill="rgb(251,118,11)"/><text x="19.3373%" y="143.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,134,781 samples, 5.51%)</title><rect x="19.7136%" y="117" width="5.5118%" height="15" fill="rgb(217,147,25)"/><text x="19.9636%" y="127.50">metadat..</text></g><g><title>lint_checking (3,110,115 samples, 8.03%)</title><rect x="17.3080%" y="165" width="8.0300%" height="15" fill="rgb(247,81,37)"/><text x="17.5580%" y="175.50">lint_checki..</text></g><g><title>module_lints (43,581 samples, 0.11%)</title><rect x="25.2254%" y="149" width="0.1125%" height="15" fill="rgb(209,12,38)"/><text x="25.4754%" y="159.50"></text></g><g><title>lint_mod (40,731 samples, 0.11%)</title><rect x="25.2328%" y="133" width="0.1052%" height="15" fill="rgb(227,1,9)"/><text x="25.4828%" y="143.50"></text></g><g><title>privacy_access_levels (45,120 samples, 0.12%)</title><rect x="25.3379%" y="165" width="0.1165%" height="15" fill="rgb(248,47,43)"/><text x="25.5879%" y="175.50"></text></g><g><title>privacy_checking_modules (65,321 samples, 0.17%)</title><rect x="25.4544%" y="165" width="0.1687%" height="15" fill="rgb(221,10,30)"/><text x="25.7044%" y="175.50"></text></g><g><title>check_mod_privacy (64,051 samples, 0.17%)</title><rect x="25.4577%" y="149" width="0.1654%" height="15" fill="rgb(210,229,1)"/><text x="25.7077%" y="159.50"></text></g><g><title>misc_checking_3 (3,378,338 samples, 8.72%)</title><rect x="16.9259%" y="181" width="8.7225%" height="15" fill="rgb(222,148,37)"/><text x="17.1759%" y="191.50">misc_checkin..</text></g><g><title>impl_parent (396,164 samples, 1.02%)</title><rect x="27.0942%" y="117" width="1.0229%" height="15" fill="rgb(234,67,33)"/><text x="27.3442%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (295,523 samples, 0.76%)</title><rect x="27.3541%" y="101" width="0.7630%" height="15" fill="rgb(247,98,35)"/><text x="27.6041%" y="111.50"></text></g><g><title>impl_trait_ref (1,067,414 samples, 2.76%)</title><rect x="28.1171%" y="117" width="2.7559%" height="15" fill="rgb(247,138,52)"/><text x="28.3671%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (958,231 samples, 2.47%)</title><rect x="28.3990%" y="101" width="2.4740%" height="15" fill="rgb(213,79,30)"/><text x="28.6490%" y="111.50">me..</text></g><g><title>coherent_trait (2,111,712 samples, 5.45%)</title><rect x="25.8342%" y="149" width="5.4522%" height="15" fill="rgb(246,177,23)"/><text x="26.0842%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (2,102,422 samples, 5.43%)</title><rect x="25.8582%" y="133" width="5.4282%" height="15" fill="rgb(230,62,27)"/><text x="26.1082%" y="143.50">special..</text></g><g><title>trait_impls_of (160,092 samples, 0.41%)</title><rect x="30.8730%" y="117" width="0.4133%" height="15" fill="rgb(216,154,8)"/><text x="31.1230%" y="127.50"></text></g><g><title>implementations_of_trait (62,741 samples, 0.16%)</title><rect x="31.1244%" y="101" width="0.1620%" height="15" fill="rgb(244,35,45)"/><text x="31.3744%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (45,241 samples, 0.12%)</title><rect x="31.1696%" y="85" width="0.1168%" height="15" fill="rgb(251,115,12)"/><text x="31.4196%" y="95.50"></text></g><g><title>coherence_checking (2,185,304 samples, 5.64%)</title><rect x="25.7753%" y="165" width="5.6422%" height="15" fill="rgb(240,54,50)"/><text x="26.0253%" y="175.50">coheren..</text></g><g><title>adt_def (49,320 samples, 0.13%)</title><rect x="36.1030%" y="101" width="0.1273%" height="15" fill="rgb(233,84,52)"/><text x="36.3530%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (47,940 samples, 0.12%)</title><rect x="36.1066%" y="85" width="0.1238%" height="15" fill="rgb(207,117,47)"/><text x="36.3566%" y="95.50"></text></g><g><title>adt_sized_constraint (76,081 samples, 0.20%)</title><rect x="36.2304%" y="101" width="0.1964%" height="15" fill="rgb(249,43,39)"/><text x="36.4804%" y="111.50"></text></g><g><title>adt_def (74,891 samples, 0.19%)</title><rect x="36.2334%" y="85" width="0.1934%" height="15" fill="rgb(209,38,44)"/><text x="36.4834%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (74,281 samples, 0.19%)</title><rect x="36.2350%" y="69" width="0.1918%" height="15" fill="rgb(236,212,23)"/><text x="36.4850%" y="79.50"></text></g><g><title>item_attrs (70,001 samples, 0.18%)</title><rect x="36.2461%" y="53" width="0.1807%" height="15" fill="rgb(242,79,21)"/><text x="36.4961%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (69,451 samples, 0.18%)</title><rect x="36.2475%" y="37" width="0.1793%" height="15" fill="rgb(211,96,35)"/><text x="36.4975%" y="47.50"></text></g><g><title>adt_sized_constraint (135,481 samples, 0.35%)</title><rect x="36.0912%" y="117" width="0.3498%" height="15" fill="rgb(253,215,40)"/><text x="36.3412%" y="127.50"></text></g><g><title>associated_item (478,525 samples, 1.24%)</title><rect x="36.8246%" y="101" width="1.2355%" height="15" fill="rgb(211,81,21)"/><text x="37.0746%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (381,684 samples, 0.99%)</title><rect x="37.0746%" y="85" width="0.9855%" height="15" fill="rgb(208,190,38)"/><text x="37.3246%" y="95.50"></text></g><g><title>associated_items (630,937 samples, 1.63%)</title><rect x="36.4540%" y="117" width="1.6290%" height="15" fill="rgb(235,213,38)"/><text x="36.7040%" y="127.50"></text></g><g><title>adt_def (40,981 samples, 0.11%)</title><rect x="38.4520%" y="69" width="0.1058%" height="15" fill="rgb(237,122,38)"/><text x="38.7020%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (40,251 samples, 0.10%)</title><rect x="38.4539%" y="53" width="0.1039%" height="15" fill="rgb(244,218,35)"/><text x="38.7039%" y="63.50"></text></g><g><title>adt_dtorck_constraint (64,811 samples, 0.17%)</title><rect x="38.4305%" y="85" width="0.1673%" height="15" fill="rgb(240,68,47)"/><text x="38.6805%" y="95.50"></text></g><g><title>dropck_outlives (195,873 samples, 0.51%)</title><rect x="38.1207%" y="117" width="0.5057%" height="15" fill="rgb(210,16,53)"/><text x="38.3707%" y="127.50"></text></g><g><title>adt_dtorck_constraint (139,022 samples, 0.36%)</title><rect x="38.2675%" y="101" width="0.3589%" height="15" fill="rgb(235,124,12)"/><text x="38.5175%" y="111.50"></text></g><g><title>predicates_of (45,490 samples, 0.12%)</title><rect x="39.2978%" y="101" width="0.1175%" height="15" fill="rgb(224,169,11)"/><text x="39.5478%" y="111.50"></text></g><g><title>specializes (93,672 samples, 0.24%)</title><rect x="39.4152%" y="101" width="0.2419%" height="15" fill="rgb(250,166,2)"/><text x="39.6652%" y="111.50"></text></g><g><title>param_env (77,791 samples, 0.20%)</title><rect x="39.4562%" y="85" width="0.2008%" height="15" fill="rgb(242,216,29)"/><text x="39.7062%" y="95.50"></text></g><g><title>def_span (58,641 samples, 0.15%)</title><rect x="39.5057%" y="69" width="0.1514%" height="15" fill="rgb(230,116,27)"/><text x="39.7557%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (57,191 samples, 0.15%)</title><rect x="39.5094%" y="53" width="0.1477%" height="15" fill="rgb(228,99,48)"/><text x="39.7594%" y="63.50"></text></g><g><title>trait_impls_of (253,982 samples, 0.66%)</title><rect x="39.6707%" y="101" width="0.6558%" height="15" fill="rgb(253,11,6)"/><text x="39.9207%" y="111.50"></text></g><g><title>implementations_of_trait (72,290 samples, 0.19%)</title><rect x="40.1398%" y="85" width="0.1866%" height="15" fill="rgb(247,143,39)"/><text x="40.3898%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (45,530 samples, 0.12%)</title><rect x="40.2089%" y="69" width="0.1176%" height="15" fill="rgb(236,97,10)"/><text x="40.4589%" y="79.50"></text></g><g><title>evaluate_obligation (665,809 samples, 1.72%)</title><rect x="38.6264%" y="117" width="1.7190%" height="15" fill="rgb(233,208,19)"/><text x="38.8764%" y="127.50"></text></g><g><title>fn_sig (44,370 samples, 0.11%)</title><rect x="40.3650%" y="117" width="0.1146%" height="15" fill="rgb(216,164,2)"/><text x="40.6150%" y="127.50"></text></g><g><title>impl_item_implementor_ids (62,031 samples, 0.16%)</title><rect x="40.5780%" y="117" width="0.1602%" height="15" fill="rgb(220,129,5)"/><text x="40.8280%" y="127.50"></text></g><g><title>associated_items (53,901 samples, 0.14%)</title><rect x="40.5990%" y="101" width="0.1392%" height="15" fill="rgb(242,17,10)"/><text x="40.8490%" y="111.50"></text></g><g><title>item_attrs (42,890 samples, 0.11%)</title><rect x="40.8231%" y="117" width="0.1107%" height="15" fill="rgb(242,107,0)"/><text x="41.0731%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (41,330 samples, 0.11%)</title><rect x="40.8271%" y="101" width="0.1067%" height="15" fill="rgb(251,28,31)"/><text x="41.0771%" y="111.50"></text></g><g><title>method_autoderef_steps (87,061 samples, 0.22%)</title><rect x="41.0088%" y="117" width="0.2248%" height="15" fill="rgb(233,223,10)"/><text x="41.2588%" y="127.50"></text></g><g><title>evaluate_obligation (62,690 samples, 0.16%)</title><rect x="41.0718%" y="101" width="0.1619%" height="15" fill="rgb(215,21,27)"/><text x="41.3218%" y="111.50"></text></g><g><title>explicit_predicates_of (159,461 samples, 0.41%)</title><rect x="41.4654%" y="85" width="0.4117%" height="15" fill="rgb(232,23,21)"/><text x="41.7154%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (149,291 samples, 0.39%)</title><rect x="41.4916%" y="69" width="0.3855%" height="15" fill="rgb(244,5,23)"/><text x="41.7416%" y="79.50"></text></g><g><title>predicates_of (262,181 samples, 0.68%)</title><rect x="41.2731%" y="117" width="0.6769%" height="15" fill="rgb(226,81,46)"/><text x="41.5231%" y="127.50"></text></g><g><title>predicates_defined_on (219,441 samples, 0.57%)</title><rect x="41.3834%" y="101" width="0.5666%" height="15" fill="rgb(247,70,30)"/><text x="41.6334%" y="111.50"></text></g><g><title>item_bodies_checking (4,160,676 samples, 10.74%)</title><rect x="31.4773%" y="165" width="10.7424%" height="15" fill="rgb(212,68,19)"/><text x="31.7273%" y="175.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (4,157,546 samples, 10.73%)</title><rect x="31.4853%" y="149" width="10.7343%" height="15" fill="rgb(240,187,13)"/><text x="31.7353%" y="159.50">typeck_item_bodi..</text></g><g><title>typeck (4,146,256 samples, 10.71%)</title><rect x="31.5145%" y="133" width="10.7052%" height="15" fill="rgb(223,113,26)"/><text x="31.7645%" y="143.50">typeck</text></g><g><title>impl_parent (87,983 samples, 0.23%)</title><rect x="43.1322%" y="85" width="0.2272%" height="15" fill="rgb(206,192,2)"/><text x="43.3822%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (45,893 samples, 0.12%)</title><rect x="43.2409%" y="69" width="0.1185%" height="15" fill="rgb(241,108,4)"/><text x="43.4909%" y="79.50"></text></g><g><title>impl_trait_ref (353,473 samples, 0.91%)</title><rect x="43.3594%" y="85" width="0.9126%" height="15" fill="rgb(247,173,49)"/><text x="43.6094%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (308,542 samples, 0.80%)</title><rect x="43.4754%" y="69" width="0.7966%" height="15" fill="rgb(224,114,35)"/><text x="43.7254%" y="79.50"></text></g><g><title>adt_destructor (675,857 samples, 1.74%)</title><rect x="42.6980%" y="133" width="1.7450%" height="15" fill="rgb(245,159,27)"/><text x="42.9480%" y="143.50"></text></g><g><title>coherent_trait (671,607 samples, 1.73%)</title><rect x="42.7090%" y="117" width="1.7340%" height="15" fill="rgb(245,172,44)"/><text x="42.9590%" y="127.50"></text></g><g><title>specialization_graph_of (668,697 samples, 1.73%)</title><rect x="42.7165%" y="101" width="1.7265%" height="15" fill="rgb(236,23,11)"/><text x="42.9665%" y="111.50"></text></g><g><title>trait_impls_of (66,220 samples, 0.17%)</title><rect x="44.2720%" y="85" width="0.1710%" height="15" fill="rgb(205,117,38)"/><text x="44.5220%" y="95.50"></text></g><g><title>item_types_checking (940,081 samples, 2.43%)</title><rect x="42.2196%" y="165" width="2.4272%" height="15" fill="rgb(237,72,25)"/><text x="42.4696%" y="175.50">it..</text></g><g><title>check_mod_item_types (937,001 samples, 2.42%)</title><rect x="42.2276%" y="149" width="2.4192%" height="15" fill="rgb(244,70,9)"/><text x="42.4776%" y="159.50">ch..</text></g><g><title>fn_sig (95,361 samples, 0.25%)</title><rect x="44.9287%" y="133" width="0.2462%" height="15" fill="rgb(217,125,39)"/><text x="45.1787%" y="143.50"></text></g><g><title>late_bound_vars_map (53,551 samples, 0.14%)</title><rect x="45.0366%" y="117" width="0.1383%" height="15" fill="rgb(235,36,10)"/><text x="45.2866%" y="127.50"></text></g><g><title>resolve_lifetimes (39,031 samples, 0.10%)</title><rect x="45.0741%" y="101" width="0.1008%" height="15" fill="rgb(251,123,47)"/><text x="45.3241%" y="111.50"></text></g><g><title>generics_of (88,341 samples, 0.23%)</title><rect x="45.1749%" y="133" width="0.2281%" height="15" fill="rgb(221,13,13)"/><text x="45.4249%" y="143.50"></text></g><g><title>explicit_predicates_of (70,500 samples, 0.18%)</title><rect x="45.5830%" y="101" width="0.1820%" height="15" fill="rgb(238,131,9)"/><text x="45.8330%" y="111.50"></text></g><g><title>predicates_of (152,121 samples, 0.39%)</title><rect x="45.4935%" y="133" width="0.3928%" height="15" fill="rgb(211,50,8)"/><text x="45.7435%" y="143.50"></text></g><g><title>predicates_defined_on (139,231 samples, 0.36%)</title><rect x="45.5268%" y="117" width="0.3595%" height="15" fill="rgb(245,182,24)"/><text x="45.7768%" y="127.50"></text></g><g><title>inferred_outlives_of (46,961 samples, 0.12%)</title><rect x="45.7651%" y="101" width="0.1212%" height="15" fill="rgb(242,14,37)"/><text x="46.0151%" y="111.50"></text></g><g><title>adt_def (45,351 samples, 0.12%)</title><rect x="46.0841%" y="117" width="0.1171%" height="15" fill="rgb(246,228,12)"/><text x="46.3341%" y="127.50"></text></g><g><title>type_collecting (673,867 samples, 1.74%)</title><rect x="44.6525%" y="165" width="1.7398%" height="15" fill="rgb(213,55,15)"/><text x="44.9025%" y="175.50"></text></g><g><title>collect_mod_item_types (658,737 samples, 1.70%)</title><rect x="44.6915%" y="149" width="1.7008%" height="15" fill="rgb(209,9,3)"/><text x="44.9415%" y="159.50"></text></g><g><title>type_of (195,983 samples, 0.51%)</title><rect x="45.8863%" y="133" width="0.5060%" height="15" fill="rgb(230,59,30)"/><text x="46.1363%" y="143.50"></text></g><g><title>type_of (62,791 samples, 0.16%)</title><rect x="46.2302%" y="117" width="0.1621%" height="15" fill="rgb(209,121,21)"/><text x="46.4802%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (59,581 samples, 0.15%)</title><rect x="46.2385%" y="101" width="0.1538%" height="15" fill="rgb(220,109,13)"/><text x="46.4885%" y="111.50"></text></g><g><title>evaluate_obligation (205,532 samples, 0.53%)</title><rect x="47.1037%" y="133" width="0.5307%" height="15" fill="rgb(232,18,1)"/><text x="47.3537%" y="143.50"></text></g><g><title>implied_outlives_bounds (54,491 samples, 0.14%)</title><rect x="47.6344%" y="133" width="0.1407%" height="15" fill="rgb(215,41,42)"/><text x="47.8844%" y="143.50"></text></g><g><title>check_impl_item_well_formed (578,207 samples, 1.49%)</title><rect x="46.4902%" y="149" width="1.4929%" height="15" fill="rgb(224,123,36)"/><text x="46.7402%" y="159.50"></text></g><g><title>region_scope_tree (45,241 samples, 0.12%)</title><rect x="47.8663%" y="133" width="0.1168%" height="15" fill="rgb(240,125,3)"/><text x="48.1163%" y="143.50"></text></g><g><title>evaluate_obligation (130,772 samples, 0.34%)</title><rect x="48.7455%" y="133" width="0.3376%" height="15" fill="rgb(205,98,50)"/><text x="48.9955%" y="143.50"></text></g><g><title>param_env (155,591 samples, 0.40%)</title><rect x="49.1803%" y="133" width="0.4017%" height="15" fill="rgb(205,185,37)"/><text x="49.4303%" y="143.50"></text></g><g><title>predicates_of (54,761 samples, 0.14%)</title><rect x="49.5820%" y="133" width="0.1414%" height="15" fill="rgb(238,207,15)"/><text x="49.8320%" y="143.50"></text></g><g><title>predicates_defined_on (47,271 samples, 0.12%)</title><rect x="49.6013%" y="117" width="0.1220%" height="15" fill="rgb(213,199,42)"/><text x="49.8513%" y="127.50"></text></g><g><title>analysis (18,583,998 samples, 47.98%)</title><rect x="1.8724%" y="197" width="47.9818%" height="15" fill="rgb(235,201,11)"/><text x="2.1224%" y="207.50">analysis</text></g><g><title>type_check_crate (9,375,254 samples, 24.21%)</title><rect x="25.6483%" y="181" width="24.2058%" height="15" fill="rgb(207,46,11)"/><text x="25.8983%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,339,804 samples, 3.46%)</title><rect x="46.3950%" y="165" width="3.4592%" height="15" fill="rgb(241,35,35)"/><text x="46.6450%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (724,707 samples, 1.87%)</title><rect x="47.9831%" y="149" width="1.8711%" height="15" fill="rgb(243,32,47)"/><text x="48.2331%" y="159.50">c..</text></g><g><title>codegen_crate (394,994 samples, 1.02%)</title><rect x="49.8778%" y="197" width="1.0198%" height="15" fill="rgb(247,202,23)"/><text x="50.1278%" y="207.50"></text></g><g><title>AST_validation (82,401 samples, 0.21%)</title><rect x="51.3644%" y="181" width="0.2128%" height="15" fill="rgb(219,102,11)"/><text x="51.6144%" y="191.50"></text></g><g><title>crate_injection (69,911 samples, 0.18%)</title><rect x="51.6394%" y="181" width="0.1805%" height="15" fill="rgb(243,110,44)"/><text x="51.8894%" y="191.50"></text></g><g><title>macro_expand_crate (10,111,592 samples, 26.11%)</title><rect x="51.8199%" y="181" width="26.1070%" height="15" fill="rgb(222,74,54)"/><text x="52.0699%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (10,098,312 samples, 26.07%)</title><rect x="51.8542%" y="165" width="26.0727%" height="15" fill="rgb(216,99,12)"/><text x="52.1042%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,202,354 samples, 5.69%)</title><rect x="72.2406%" y="149" width="5.6862%" height="15" fill="rgb(226,22,26)"/><text x="72.4906%" y="159.50">metadat..</text></g><g><title>metadata_register_crate (825,529 samples, 2.13%)</title><rect x="75.7954%" y="133" width="2.1314%" height="15" fill="rgb(217,163,10)"/><text x="76.0454%" y="143.50">m..</text></g><g><title>metadata_register_crate (75,910 samples, 0.20%)</title><rect x="77.7309%" y="117" width="0.1960%" height="15" fill="rgb(213,25,53)"/><text x="77.9809%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (186,262 samples, 0.48%)</title><rect x="77.9551%" y="181" width="0.4809%" height="15" fill="rgb(252,105,26)"/><text x="78.2051%" y="191.50"></text></g><g><title>finalize_macro_resolutions (231,153 samples, 0.60%)</title><rect x="78.5485%" y="165" width="0.5968%" height="15" fill="rgb(220,39,43)"/><text x="78.7985%" y="175.50"></text></g><g><title>late_resolve_crate (455,765 samples, 1.18%)</title><rect x="79.1454%" y="165" width="1.1767%" height="15" fill="rgb(229,68,48)"/><text x="79.3954%" y="175.50"></text></g><g><title>configure_and_expand (11,437,787 samples, 29.53%)</title><rect x="50.8977%" y="197" width="29.5311%" height="15" fill="rgb(252,8,32)"/><text x="51.1477%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (771,809 samples, 1.99%)</title><rect x="78.4360%" y="181" width="1.9927%" height="15" fill="rgb(223,20,43)"/><text x="78.6860%" y="191.50">r..</text></g><g><title>drop_ast (100,231 samples, 0.26%)</title><rect x="80.4287%" y="197" width="0.2588%" height="15" fill="rgb(229,81,49)"/><text x="80.6787%" y="207.50"></text></g><g><title>early_lint_checks (111,981 samples, 0.29%)</title><rect x="80.7227%" y="197" width="0.2891%" height="15" fill="rgb(236,28,36)"/><text x="80.9727%" y="207.50"></text></g><g><title>free_global_ctxt (2,282,175 samples, 5.89%)</title><rect x="81.0118%" y="197" width="5.8923%" height="15" fill="rgb(249,185,26)"/><text x="81.2618%" y="207.50">free_gl..</text></g><g><title>crate_hash (66,620 samples, 0.17%)</title><rect x="87.5843%" y="181" width="0.1720%" height="15" fill="rgb(249,174,33)"/><text x="87.8343%" y="191.50"></text></g><g><title>generate_crate_metadata (436,225 samples, 1.13%)</title><rect x="86.9041%" y="197" width="1.1263%" height="15" fill="rgb(233,201,37)"/><text x="87.1541%" y="207.50"></text></g><g><title>hir_lowering (621,377 samples, 1.60%)</title><rect x="88.0304%" y="197" width="1.6043%" height="15" fill="rgb(221,78,26)"/><text x="88.2804%" y="207.50"></text></g><g><title>link (39,770 samples, 0.10%)</title><rect x="89.6347%" y="197" width="0.1027%" height="15" fill="rgb(250,127,30)"/><text x="89.8847%" y="207.50"></text></g><g><title>parse_crate (2,888,402 samples, 7.46%)</title><rect x="89.7374%" y="197" width="7.4575%" height="15" fill="rgb(230,49,44)"/><text x="89.9874%" y="207.50">parse_crate</text></g><g><title>prepare_outputs (267,863 samples, 0.69%)</title><rect x="97.2161%" y="197" width="0.6916%" height="15" fill="rgb(229,67,23)"/><text x="97.4661%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (380,184 samples, 0.98%)</title><rect x="97.9077%" y="197" width="0.9816%" height="15" fill="rgb(249,83,47)"/><text x="98.1577%" y="207.50"></text></g><g><title>setup_global_ctxt (132,962 samples, 0.34%)</title><rect x="98.9152%" y="197" width="0.3433%" height="15" fill="rgb(215,43,3)"/><text x="99.1652%" y="207.50"></text></g><g><title>all (38,731,361 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (38,731,361 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (287,193 samples, 0.74%)</title><rect x="99.2585%" y="197" width="0.7415%" height="15" fill="rgb(233,0,4)"/><text x="99.5085%" y="207.50"></text></g></svg></svg>