<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (180,184 samples, 0.19%)</title><rect x="6.7803%" y="133" width="0.1863%" height="15" fill="rgb(227,0,7)"/><text x="7.0303%" y="143.50"></text></g><g><title>needs_drop_raw (287,104 samples, 0.30%)</title><rect x="8.3322%" y="69" width="0.2968%" height="15" fill="rgb(217,0,24)"/><text x="8.5822%" y="79.50"></text></g><g><title>is_copy_raw (250,973 samples, 0.26%)</title><rect x="8.3696%" y="53" width="0.2595%" height="15" fill="rgb(221,193,54)"/><text x="8.6196%" y="63.50"></text></g><g><title>evaluate_obligation (217,292 samples, 0.22%)</title><rect x="8.4044%" y="37" width="0.2247%" height="15" fill="rgb(248,212,6)"/><text x="8.6544%" y="47.50"></text></g><g><title>resolve_instance (153,661 samples, 0.16%)</title><rect x="8.6291%" y="69" width="0.1589%" height="15" fill="rgb(208,68,35)"/><text x="8.8791%" y="79.50"></text></g><g><title>thir_body (118,380 samples, 0.12%)</title><rect x="8.7934%" y="69" width="0.1224%" height="15" fill="rgb(232,128,0)"/><text x="9.0434%" y="79.50"></text></g><g><title>mir_const (1,285,722 samples, 1.33%)</title><rect x="7.5895%" y="117" width="1.3294%" height="15" fill="rgb(207,160,47)"/><text x="7.8395%" y="127.50"></text></g><g><title>unsafety_check_result (1,056,531 samples, 1.09%)</title><rect x="7.8264%" y="101" width="1.0924%" height="15" fill="rgb(228,23,34)"/><text x="8.0764%" y="111.50"></text></g><g><title>mir_built (926,129 samples, 0.96%)</title><rect x="7.9613%" y="85" width="0.9576%" height="15" fill="rgb(218,30,26)"/><text x="8.2113%" y="95.50"></text></g><g><title>thir_body (165,472 samples, 0.17%)</title><rect x="10.9631%" y="53" width="0.1711%" height="15" fill="rgb(220,122,19)"/><text x="11.2131%" y="63.50"></text></g><g><title>mir_promoted (4,043,777 samples, 4.18%)</title><rect x="6.9722%" y="133" width="4.1810%" height="15" fill="rgb(250,228,42)"/><text x="7.2222%" y="143.50">mir_p..</text></g><g><title>mir_const_qualif (2,161,031 samples, 2.23%)</title><rect x="8.9188%" y="117" width="2.2344%" height="15" fill="rgb(240,193,28)"/><text x="9.1688%" y="127.50">m..</text></g><g><title>mir_const (1,807,159 samples, 1.87%)</title><rect x="9.2847%" y="101" width="1.8685%" height="15" fill="rgb(216,20,37)"/><text x="9.5347%" y="111.50">m..</text></g><g><title>unsafety_check_result (1,235,234 samples, 1.28%)</title><rect x="9.8760%" y="85" width="1.2772%" height="15" fill="rgb(206,188,39)"/><text x="10.1260%" y="95.50"></text></g><g><title>mir_built (1,063,050 samples, 1.10%)</title><rect x="10.0541%" y="69" width="1.0991%" height="15" fill="rgb(217,207,13)"/><text x="10.3041%" y="79.50"></text></g><g><title>MIR_borrow_checking (10,018,101 samples, 10.36%)</title><rect x="1.1744%" y="165" width="10.3581%" height="15" fill="rgb(231,73,38)"/><text x="1.4244%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (9,841,708 samples, 10.18%)</title><rect x="1.3568%" y="149" width="10.1757%" height="15" fill="rgb(225,20,46)"/><text x="1.6068%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (151,632 samples, 0.16%)</title><rect x="11.3757%" y="133" width="0.1568%" height="15" fill="rgb(210,31,41)"/><text x="11.6257%" y="143.50"></text></g><g><title>MIR_effect_checking (1,239,934 samples, 1.28%)</title><rect x="11.5325%" y="165" width="1.2820%" height="15" fill="rgb(221,200,47)"/><text x="11.7825%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,124,991 samples, 1.16%)</title><rect x="11.6514%" y="149" width="1.1632%" height="15" fill="rgb(226,26,5)"/><text x="11.9014%" y="159.50"></text></g><g><title>hir_module_items (373,863 samples, 0.39%)</title><rect x="12.8145%" y="165" width="0.3866%" height="15" fill="rgb(249,33,26)"/><text x="13.0645%" y="175.50"></text></g><g><title>get_lang_items (113,191 samples, 0.12%)</title><rect x="13.5506%" y="117" width="0.1170%" height="15" fill="rgb(235,183,28)"/><text x="13.8006%" y="127.50"></text></g><g><title>codegen_fn_attrs (141,972 samples, 0.15%)</title><rect x="13.7774%" y="101" width="0.1468%" height="15" fill="rgb(221,5,38)"/><text x="14.0274%" y="111.50"></text></g><g><title>should_inherit_track_caller (252,462 samples, 0.26%)</title><rect x="13.6676%" y="117" width="0.2610%" height="15" fill="rgb(247,18,42)"/><text x="13.9176%" y="127.50"></text></g><g><title>codegen_fn_attrs (473,835 samples, 0.49%)</title><rect x="13.4750%" y="133" width="0.4899%" height="15" fill="rgb(241,131,45)"/><text x="13.7250%" y="143.50"></text></g><g><title>check_mod_attrs (697,788 samples, 0.72%)</title><rect x="13.2440%" y="149" width="0.7215%" height="15" fill="rgb(249,31,29)"/><text x="13.4940%" y="159.50"></text></g><g><title>check_mod_const_bodies (123,301 samples, 0.13%)</title><rect x="13.9655%" y="149" width="0.1275%" height="15" fill="rgb(225,111,53)"/><text x="14.2155%" y="159.50"></text></g><g><title>lookup_deprecation_entry (210,192 samples, 0.22%)</title><rect x="14.4829%" y="133" width="0.2173%" height="15" fill="rgb(238,160,17)"/><text x="14.7329%" y="143.50"></text></g><g><title>stability_index (123,152 samples, 0.13%)</title><rect x="14.5729%" y="117" width="0.1273%" height="15" fill="rgb(214,148,48)"/><text x="14.8229%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (617,078 samples, 0.64%)</title><rect x="14.1808%" y="149" width="0.6380%" height="15" fill="rgb(232,36,49)"/><text x="14.4308%" y="159.50"></text></g><g><title>looking_for_derive_registrar (146,541 samples, 0.15%)</title><rect x="14.8215%" y="149" width="0.1515%" height="15" fill="rgb(209,103,24)"/><text x="15.0715%" y="159.50"></text></g><g><title>proc_macro_decls_static (129,181 samples, 0.13%)</title><rect x="14.8395%" y="133" width="0.1336%" height="15" fill="rgb(229,88,8)"/><text x="15.0895%" y="143.50"></text></g><g><title>misc_checking_1 (1,724,790 samples, 1.78%)</title><rect x="13.2016%" y="165" width="1.7833%" height="15" fill="rgb(213,181,19)"/><text x="13.4516%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (168,752 samples, 0.17%)</title><rect x="14.9863%" y="149" width="0.1745%" height="15" fill="rgb(254,191,54)"/><text x="15.2363%" y="159.50"></text></g><g><title>check_mod_liveness (125,841 samples, 0.13%)</title><rect x="15.0307%" y="133" width="0.1301%" height="15" fill="rgb(241,83,37)"/><text x="15.2807%" y="143.50"></text></g><g><title>misc_checking_2 (330,634 samples, 0.34%)</title><rect x="14.9849%" y="165" width="0.3419%" height="15" fill="rgb(233,36,39)"/><text x="15.2349%" y="175.50"></text></g><g><title>match_checking (160,522 samples, 0.17%)</title><rect x="15.1608%" y="149" width="0.1660%" height="15" fill="rgb(226,3,54)"/><text x="15.4108%" y="159.50"></text></g><g><title>check_match (117,072 samples, 0.12%)</title><rect x="15.2057%" y="133" width="0.1210%" height="15" fill="rgb(245,192,40)"/><text x="15.4557%" y="143.50"></text></g><g><title>check_private_in_public (153,592 samples, 0.16%)</title><rect x="15.3357%" y="149" width="0.1588%" height="15" fill="rgb(238,167,29)"/><text x="15.5857%" y="159.50"></text></g><g><title>codegen_fn_attrs (96,892 samples, 0.10%)</title><rect x="15.7448%" y="133" width="0.1002%" height="15" fill="rgb(232,182,51)"/><text x="15.9948%" y="143.50"></text></g><g><title>death_checking (444,465 samples, 0.46%)</title><rect x="15.4945%" y="149" width="0.4595%" height="15" fill="rgb(231,60,39)"/><text x="15.7445%" y="159.50"></text></g><g><title>param_env (205,153 samples, 0.21%)</title><rect x="16.2879%" y="117" width="0.2121%" height="15" fill="rgb(208,69,12)"/><text x="16.5379%" y="127.50"></text></g><g><title>crate_lints (929,521 samples, 0.96%)</title><rect x="15.9556%" y="133" width="0.9611%" height="15" fill="rgb(235,93,37)"/><text x="16.2056%" y="143.50"></text></g><g><title>type_of (402,955 samples, 0.42%)</title><rect x="16.5000%" y="117" width="0.4166%" height="15" fill="rgb(213,116,39)"/><text x="16.7500%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (306,694 samples, 0.32%)</title><rect x="16.5995%" y="101" width="0.3171%" height="15" fill="rgb(222,207,29)"/><text x="16.8495%" y="111.50"></text></g><g><title>lint_checking (1,059,482 samples, 1.10%)</title><rect x="15.9541%" y="149" width="1.0954%" height="15" fill="rgb(206,96,30)"/><text x="16.2041%" y="159.50"></text></g><g><title>module_lints (128,531 samples, 0.13%)</title><rect x="16.9166%" y="133" width="0.1329%" height="15" fill="rgb(218,138,4)"/><text x="17.1666%" y="143.50"></text></g><g><title>lint_mod (124,961 samples, 0.13%)</title><rect x="16.9203%" y="117" width="0.1292%" height="15" fill="rgb(250,191,14)"/><text x="17.1703%" y="127.50"></text></g><g><title>privacy_access_levels (192,712 samples, 0.20%)</title><rect x="17.0495%" y="149" width="0.1993%" height="15" fill="rgb(239,60,40)"/><text x="17.2995%" y="159.50"></text></g><g><title>privacy_checking_modules (472,705 samples, 0.49%)</title><rect x="17.2488%" y="149" width="0.4887%" height="15" fill="rgb(206,27,48)"/><text x="17.4988%" y="159.50"></text></g><g><title>check_mod_privacy (469,315 samples, 0.49%)</title><rect x="17.2523%" y="133" width="0.4852%" height="15" fill="rgb(225,35,8)"/><text x="17.5023%" y="143.50"></text></g><g><title>misc_checking_3 (2,342,756 samples, 2.42%)</title><rect x="15.3268%" y="165" width="2.4223%" height="15" fill="rgb(250,213,24)"/><text x="15.5768%" y="175.50">mi..</text></g><g><title>impl_parent (595,459 samples, 0.62%)</title><rect x="33.4072%" y="101" width="0.6157%" height="15" fill="rgb(247,123,22)"/><text x="33.6572%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (349,144 samples, 0.36%)</title><rect x="33.6618%" y="85" width="0.3610%" height="15" fill="rgb(231,138,38)"/><text x="33.9118%" y="95.50"></text></g><g><title>impl_trait_ref (1,570,075 samples, 1.62%)</title><rect x="34.0247%" y="101" width="1.6234%" height="15" fill="rgb(231,145,46)"/><text x="34.2747%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,324,974 samples, 1.37%)</title><rect x="34.2781%" y="85" width="1.3699%" height="15" fill="rgb(251,118,11)"/><text x="34.5281%" y="95.50"></text></g><g><title>trait_impls_of (204,312 samples, 0.21%)</title><rect x="35.7047%" y="101" width="0.2112%" height="15" fill="rgb(217,147,25)"/><text x="35.9547%" y="111.50"></text></g><g><title>coherent_trait (21,562,861 samples, 22.29%)</title><rect x="17.8455%" y="133" width="22.2946%" height="15" fill="rgb(247,81,37)"/><text x="18.0955%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (21,538,131 samples, 22.27%)</title><rect x="17.8710%" y="117" width="22.2691%" height="15" fill="rgb(209,12,38)"/><text x="18.1210%" y="127.50">specialization_graph_of</text></g><g><title>visible_parent_map (4,084,516 samples, 4.22%)</title><rect x="35.9170%" y="101" width="4.2231%" height="15" fill="rgb(227,1,9)"/><text x="36.1670%" y="111.50">visib..</text></g><g><title>module_children (3,758,342 samples, 3.89%)</title><rect x="36.2542%" y="85" width="3.8859%" height="15" fill="rgb(248,47,43)"/><text x="36.5042%" y="95.50">modu..</text></g><g><title>metadata_decode_entry_module_children (3,675,241 samples, 3.80%)</title><rect x="36.3401%" y="69" width="3.8000%" height="15" fill="rgb(221,10,30)"/><text x="36.5901%" y="79.50">meta..</text></g><g><title>coherence_checking (21,696,122 samples, 22.43%)</title><rect x="17.8262%" y="149" width="22.4324%" height="15" fill="rgb(210,229,1)"/><text x="18.0762%" y="159.50">coherence_checking</text></g><g><title>impl_wf_inference (105,611 samples, 0.11%)</title><rect x="40.2586%" y="149" width="0.1092%" height="15" fill="rgb(222,148,37)"/><text x="40.5086%" y="159.50"></text></g><g><title>check_mod_impl_wf (101,481 samples, 0.10%)</title><rect x="40.2629%" y="133" width="0.1049%" height="15" fill="rgb(234,67,33)"/><text x="40.5129%" y="143.50"></text></g><g><title>associated_items (131,301 samples, 0.14%)</title><rect x="44.1208%" y="101" width="0.1358%" height="15" fill="rgb(247,98,35)"/><text x="44.3708%" y="111.50"></text></g><g><title>dropck_outlives (204,002 samples, 0.21%)</title><rect x="44.2674%" y="101" width="0.2109%" height="15" fill="rgb(247,138,52)"/><text x="44.5174%" y="111.50"></text></g><g><title>adt_dtorck_constraint (152,852 samples, 0.16%)</title><rect x="44.3203%" y="85" width="0.1580%" height="15" fill="rgb(213,79,30)"/><text x="44.5703%" y="95.50"></text></g><g><title>predicates_of (256,783 samples, 0.27%)</title><rect x="44.7351%" y="85" width="0.2655%" height="15" fill="rgb(246,177,23)"/><text x="44.9851%" y="95.50"></text></g><g><title>evaluate_obligation (568,186 samples, 0.59%)</title><rect x="44.4784%" y="101" width="0.5875%" height="15" fill="rgb(230,62,27)"/><text x="44.7284%" y="111.50"></text></g><g><title>explicit_predicates_of (186,444 samples, 0.19%)</title><rect x="45.9134%" y="53" width="0.1928%" height="15" fill="rgb(216,154,8)"/><text x="46.1634%" y="63.50"></text></g><g><title>param_env (787,841 samples, 0.81%)</title><rect x="45.3095%" y="101" width="0.8146%" height="15" fill="rgb(244,35,45)"/><text x="45.5595%" y="111.50"></text></g><g><title>predicates_of (359,585 samples, 0.37%)</title><rect x="45.7523%" y="85" width="0.3718%" height="15" fill="rgb(251,115,12)"/><text x="46.0023%" y="95.50"></text></g><g><title>predicates_defined_on (301,274 samples, 0.31%)</title><rect x="45.8125%" y="69" width="0.3115%" height="15" fill="rgb(240,54,50)"/><text x="46.0625%" y="79.50"></text></g><g><title>region_scope_tree (167,252 samples, 0.17%)</title><rect x="46.1910%" y="101" width="0.1729%" height="15" fill="rgb(233,84,52)"/><text x="46.4410%" y="111.50"></text></g><g><title>item_bodies_checking (5,864,075 samples, 6.06%)</title><rect x="40.3678%" y="149" width="6.0631%" height="15" fill="rgb(207,117,47)"/><text x="40.6178%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (5,861,835 samples, 6.06%)</title><rect x="40.3701%" y="133" width="6.0608%" height="15" fill="rgb(249,43,39)"/><text x="40.6201%" y="143.50">typeck_i..</text></g><g><title>typeck (5,759,663 samples, 5.96%)</title><rect x="40.4758%" y="117" width="5.9551%" height="15" fill="rgb(209,38,44)"/><text x="40.7258%" y="127.50">typeck</text></g><g><title>item_types_checking (401,475 samples, 0.42%)</title><rect x="46.4309%" y="149" width="0.4151%" height="15" fill="rgb(236,212,23)"/><text x="46.6809%" y="159.50"></text></g><g><title>check_mod_item_types (397,465 samples, 0.41%)</title><rect x="46.4350%" y="133" width="0.4110%" height="15" fill="rgb(242,79,21)"/><text x="46.6850%" y="143.50"></text></g><g><title>fn_sig (233,274 samples, 0.24%)</title><rect x="47.4007%" y="117" width="0.2412%" height="15" fill="rgb(211,96,35)"/><text x="47.6507%" y="127.50"></text></g><g><title>generics_of (320,879 samples, 0.33%)</title><rect x="47.6419%" y="117" width="0.3318%" height="15" fill="rgb(253,215,40)"/><text x="47.8919%" y="127.50"></text></g><g><title>impl_trait_ref (166,770 samples, 0.17%)</title><rect x="47.9737%" y="117" width="0.1724%" height="15" fill="rgb(211,81,21)"/><text x="48.2237%" y="127.50"></text></g><g><title>late_bound_vars_map (664,298 samples, 0.69%)</title><rect x="49.3220%" y="69" width="0.6868%" height="15" fill="rgb(208,190,38)"/><text x="49.5720%" y="79.50"></text></g><g><title>resolve_lifetimes (553,157 samples, 0.57%)</title><rect x="49.4370%" y="53" width="0.5719%" height="15" fill="rgb(235,213,38)"/><text x="49.6870%" y="63.50"></text></g><g><title>explicit_predicates_of (1,534,538 samples, 1.59%)</title><rect x="48.4638%" y="85" width="1.5866%" height="15" fill="rgb(237,122,38)"/><text x="48.7138%" y="95.50"></text></g><g><title>predicates_of (1,931,122 samples, 2.00%)</title><rect x="48.1461%" y="117" width="1.9967%" height="15" fill="rgb(244,218,35)"/><text x="48.3961%" y="127.50">p..</text></g><g><title>predicates_defined_on (1,807,671 samples, 1.87%)</title><rect x="48.2737%" y="101" width="1.8690%" height="15" fill="rgb(240,68,47)"/><text x="48.5237%" y="111.50">p..</text></g><g><title>type_collecting (3,852,543 samples, 3.98%)</title><rect x="46.8484%" y="149" width="3.9833%" height="15" fill="rgb(210,16,53)"/><text x="47.0984%" y="159.50">type..</text></g><g><title>collect_mod_item_types (3,836,162 samples, 3.97%)</title><rect x="46.8654%" y="133" width="3.9663%" height="15" fill="rgb(235,124,12)"/><text x="47.1154%" y="143.50">coll..</text></g><g><title>type_of (599,215 samples, 0.62%)</title><rect x="50.2122%" y="117" width="0.6196%" height="15" fill="rgb(224,169,11)"/><text x="50.4622%" y="127.50"></text></g><g><title>type_of (157,872 samples, 0.16%)</title><rect x="50.6685%" y="101" width="0.1632%" height="15" fill="rgb(250,166,2)"/><text x="50.9185%" y="111.50"></text></g><g><title>evaluate_obligation (160,191 samples, 0.17%)</title><rect x="51.4691%" y="117" width="0.1656%" height="15" fill="rgb(242,216,29)"/><text x="51.7191%" y="127.50"></text></g><g><title>check_impl_item_well_formed (693,210 samples, 0.72%)</title><rect x="51.1169%" y="133" width="0.7167%" height="15" fill="rgb(230,116,27)"/><text x="51.3669%" y="143.50"></text></g><g><title>adt_sized_constraint (130,611 samples, 0.14%)</title><rect x="67.5795%" y="101" width="0.1350%" height="15" fill="rgb(228,99,48)"/><text x="67.8295%" y="111.50"></text></g><g><title>evaluate_obligation (260,633 samples, 0.27%)</title><rect x="67.4721%" y="117" width="0.2695%" height="15" fill="rgb(253,11,6)"/><text x="67.7221%" y="127.50"></text></g><g><title>implied_outlives_bounds (461,456 samples, 0.48%)</title><rect x="67.8060%" y="117" width="0.4771%" height="15" fill="rgb(247,143,39)"/><text x="68.0560%" y="127.50"></text></g><g><title>param_env (892,836 samples, 0.92%)</title><rect x="68.2831%" y="117" width="0.9231%" height="15" fill="rgb(236,97,10)"/><text x="68.5331%" y="127.50"></text></g><g><title>check_item_well_formed (17,005,738 samples, 17.58%)</title><rect x="51.8337%" y="133" width="17.5829%" height="15" fill="rgb(233,208,19)"/><text x="52.0837%" y="143.50">check_item_well_formed</text></g><g><title>analysis (66,513,602 samples, 68.77%)</title><rect x="0.7839%" y="181" width="68.7708%" height="15" fill="rgb(216,164,2)"/><text x="1.0339%" y="191.50">analysis</text></g><g><title>type_check_crate (50,105,319 samples, 51.81%)</title><rect x="17.7491%" y="165" width="51.8057%" height="15" fill="rgb(220,129,5)"/><text x="17.9991%" y="175.50">type_check_crate</text></g><g><title>wf_checking (18,100,052 samples, 18.71%)</title><rect x="50.8405%" y="149" width="18.7143%" height="15" fill="rgb(242,17,10)"/><text x="51.0905%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (133,712 samples, 0.14%)</title><rect x="69.4165%" y="133" width="0.1382%" height="15" fill="rgb(242,107,0)"/><text x="69.6665%" y="143.50"></text></g><g><title>codegen_crate (280,773 samples, 0.29%)</title><rect x="69.5672%" y="181" width="0.2903%" height="15" fill="rgb(251,28,31)"/><text x="69.8172%" y="191.50"></text></g><g><title>AST_validation (215,862 samples, 0.22%)</title><rect x="70.0888%" y="165" width="0.2232%" height="15" fill="rgb(233,223,10)"/><text x="70.3388%" y="175.50"></text></g><g><title>metadata_register_crate (250,653 samples, 0.26%)</title><rect x="85.0736%" y="133" width="0.2592%" height="15" fill="rgb(215,21,27)"/><text x="85.3236%" y="143.50"></text></g><g><title>macro_expand_crate (14,424,561 samples, 14.91%)</title><rect x="70.4667%" y="165" width="14.9141%" height="15" fill="rgb(232,23,21)"/><text x="70.7167%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (14,407,481 samples, 14.90%)</title><rect x="70.4844%" y="149" width="14.8964%" height="15" fill="rgb(244,5,23)"/><text x="70.7344%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (172,432 samples, 0.18%)</title><rect x="85.3859%" y="165" width="0.1783%" height="15" fill="rgb(226,81,46)"/><text x="85.6359%" y="175.50"></text></g><g><title>finalize_imports (256,433 samples, 0.27%)</title><rect x="85.5735%" y="149" width="0.2651%" height="15" fill="rgb(247,70,30)"/><text x="85.8235%" y="159.50"></text></g><g><title>late_resolve_crate (1,782,530 samples, 1.84%)</title><rect x="85.8591%" y="149" width="1.8430%" height="15" fill="rgb(212,68,19)"/><text x="86.1091%" y="159.50">l..</text></g><g><title>configure_and_expand (17,375,694 samples, 17.97%)</title><rect x="69.8575%" y="181" width="17.9654%" height="15" fill="rgb(240,187,13)"/><text x="70.1075%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,184,504 samples, 2.26%)</title><rect x="85.5642%" y="165" width="2.2586%" height="15" fill="rgb(223,113,26)"/><text x="85.8142%" y="175.50">r..</text></g><g><title>drop_ast (181,812 samples, 0.19%)</title><rect x="87.8228%" y="181" width="0.1880%" height="15" fill="rgb(206,192,2)"/><text x="88.0728%" y="191.50"></text></g><g><title>early_lint_checks (346,494 samples, 0.36%)</title><rect x="88.0265%" y="181" width="0.3583%" height="15" fill="rgb(241,108,4)"/><text x="88.2765%" y="191.50"></text></g><g><title>free_global_ctxt (1,819,881 samples, 1.88%)</title><rect x="88.3848%" y="181" width="1.8816%" height="15" fill="rgb(247,173,49)"/><text x="88.6348%" y="191.50">f..</text></g><g><title>mir_for_ctfe (346,683 samples, 0.36%)</title><rect x="91.9170%" y="165" width="0.3584%" height="15" fill="rgb(224,114,35)"/><text x="92.1670%" y="175.50"></text></g><g><title>generate_crate_metadata (2,058,893 samples, 2.13%)</title><rect x="90.2664%" y="181" width="2.1288%" height="15" fill="rgb(245,159,27)"/><text x="90.5164%" y="191.50">g..</text></g><g><title>hir_lowering (4,154,806 samples, 4.30%)</title><rect x="92.3952%" y="181" width="4.2958%" height="15" fill="rgb(245,172,44)"/><text x="92.6452%" y="191.50">hir_l..</text></g><g><title>parse_crate (1,769,070 samples, 1.83%)</title><rect x="96.7288%" y="181" width="1.8291%" height="15" fill="rgb(236,23,11)"/><text x="96.9788%" y="191.50">p..</text></g><g><title>prepare_outputs (287,183 samples, 0.30%)</title><rect x="98.5666%" y="181" width="0.2969%" height="15" fill="rgb(205,117,38)"/><text x="98.8166%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (582,416 samples, 0.60%)</title><rect x="98.8635%" y="181" width="0.6022%" height="15" fill="rgb(237,72,25)"/><text x="99.1135%" y="191.50"></text></g><g><title>setup_global_ctxt (158,081 samples, 0.16%)</title><rect x="99.4771%" y="181" width="0.1634%" height="15" fill="rgb(244,70,9)"/><text x="99.7271%" y="191.50"></text></g><g><title>all (96,717,739 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (96,717,739 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (347,644 samples, 0.36%)</title><rect x="99.6406%" y="181" width="0.3594%" height="15" fill="rgb(251,123,47)"/><text x="99.8906%" y="191.50"></text></g></svg></svg>