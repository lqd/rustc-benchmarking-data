<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (514,618 samples, 0.12%)</title><rect x="12.4319%" y="149" width="0.1202%" height="15" fill="rgb(227,0,7)"/><text x="12.6819%" y="159.50"></text></g><g><title>is_sized_raw (1,032,042 samples, 0.24%)</title><rect x="12.6129%" y="149" width="0.2411%" height="15" fill="rgb(217,0,24)"/><text x="12.8629%" y="159.50"></text></g><g><title>evaluate_obligation (961,322 samples, 0.22%)</title><rect x="12.6294%" y="133" width="0.2246%" height="15" fill="rgb(221,193,54)"/><text x="12.8794%" y="143.50"></text></g><g><title>param_env (936,571 samples, 0.22%)</title><rect x="14.5086%" y="117" width="0.2188%" height="15" fill="rgb(248,212,6)"/><text x="14.7586%" y="127.50"></text></g><g><title>item_attrs (825,374 samples, 0.19%)</title><rect x="15.2426%" y="85" width="0.1928%" height="15" fill="rgb(208,68,35)"/><text x="15.4926%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (793,144 samples, 0.19%)</title><rect x="15.2501%" y="69" width="0.1853%" height="15" fill="rgb(232,128,0)"/><text x="15.5001%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,121,378 samples, 0.26%)</title><rect x="15.1848%" y="101" width="0.2620%" height="15" fill="rgb(207,160,47)"/><text x="15.4348%" y="111.50"></text></g><g><title>param_env (487,117 samples, 0.11%)</title><rect x="18.7751%" y="53" width="0.1138%" height="15" fill="rgb(228,23,34)"/><text x="19.0251%" y="63.50"></text></g><g><title>adt_drop_tys (1,299,874 samples, 0.30%)</title><rect x="18.6036%" y="69" width="0.3037%" height="15" fill="rgb(218,30,26)"/><text x="18.8536%" y="79.50"></text></g><g><title>is_copy_raw (4,776,374 samples, 1.12%)</title><rect x="18.9072%" y="69" width="1.1158%" height="15" fill="rgb(220,122,19)"/><text x="19.1572%" y="79.50"></text></g><g><title>evaluate_obligation (3,435,757 samples, 0.80%)</title><rect x="19.2204%" y="53" width="0.8027%" height="15" fill="rgb(250,228,42)"/><text x="19.4704%" y="63.50"></text></g><g><title>needs_drop_raw (6,655,333 samples, 1.55%)</title><rect x="18.4767%" y="85" width="1.5548%" height="15" fill="rgb(240,193,28)"/><text x="18.7267%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (874,506 samples, 0.20%)</title><rect x="20.1715%" y="69" width="0.2043%" height="15" fill="rgb(216,20,37)"/><text x="20.4215%" y="79.50"></text></g><g><title>specialization_graph_of (1,366,345 samples, 0.32%)</title><rect x="20.4086%" y="69" width="0.3192%" height="15" fill="rgb(206,188,39)"/><text x="20.6586%" y="79.50"></text></g><g><title>impl_trait_ref (622,538 samples, 0.15%)</title><rect x="20.5824%" y="53" width="0.1454%" height="15" fill="rgb(217,207,13)"/><text x="20.8324%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (531,076 samples, 0.12%)</title><rect x="20.6038%" y="37" width="0.1241%" height="15" fill="rgb(231,73,38)"/><text x="20.8538%" y="47.50"></text></g><g><title>resolve_instance (3,176,260 samples, 0.74%)</title><rect x="20.0315%" y="85" width="0.7420%" height="15" fill="rgb(225,20,46)"/><text x="20.2815%" y="95.50"></text></g><g><title>thir_body (4,723,844 samples, 1.10%)</title><rect x="20.8018%" y="85" width="1.1036%" height="15" fill="rgb(210,31,41)"/><text x="21.0518%" y="95.50"></text></g><g><title>mir_const (35,426,668 samples, 8.28%)</title><rect x="13.6557%" y="133" width="8.2763%" height="15" fill="rgb(221,200,47)"/><text x="13.9057%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (30,839,247 samples, 7.20%)</title><rect x="14.7274%" y="117" width="7.2046%" height="15" fill="rgb(226,26,5)"/><text x="14.9774%" y="127.50">unsafety_c..</text></g><g><title>mir_built (27,759,986 samples, 6.49%)</title><rect x="15.4468%" y="101" width="6.4852%" height="15" fill="rgb(249,33,26)"/><text x="15.6968%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (702,148 samples, 0.16%)</title><rect x="21.9320%" y="133" width="0.1640%" height="15" fill="rgb(235,183,28)"/><text x="22.1820%" y="143.50"></text></g><g><title>mir_const (440,405 samples, 0.10%)</title><rect x="21.9931%" y="117" width="0.1029%" height="15" fill="rgb(221,5,38)"/><text x="22.2431%" y="127.50"></text></g><g><title>mir_promoted (39,560,632 samples, 9.24%)</title><rect x="12.8540%" y="149" width="9.2421%" height="15" fill="rgb(247,18,42)"/><text x="13.1040%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,259,993 samples, 0.29%)</title><rect x="22.0971%" y="149" width="0.2944%" height="15" fill="rgb(241,131,45)"/><text x="22.3471%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,027,558 samples, 0.71%)</title><rect x="22.3915%" y="149" width="0.7073%" height="15" fill="rgb(249,31,29)"/><text x="22.6415%" y="159.50"></text></g><g><title>normalize_projection_ty (2,176,517 samples, 0.51%)</title><rect x="22.5903%" y="133" width="0.5085%" height="15" fill="rgb(225,111,53)"/><text x="22.8403%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,087,368 samples, 0.25%)</title><rect x="23.0988%" y="149" width="0.2540%" height="15" fill="rgb(238,160,17)"/><text x="23.3488%" y="159.50"></text></g><g><title>normalize_projection_ty (747,582 samples, 0.17%)</title><rect x="23.1781%" y="133" width="0.1746%" height="15" fill="rgb(214,148,48)"/><text x="23.4281%" y="143.50"></text></g><g><title>type_op_prove_predicate (13,534,734 samples, 3.16%)</title><rect x="23.3681%" y="149" width="3.1620%" height="15" fill="rgb(232,36,49)"/><text x="23.6181%" y="159.50">typ..</text></g><g><title>evaluate_obligation (435,205 samples, 0.10%)</title><rect x="26.4284%" y="133" width="0.1017%" height="15" fill="rgb(209,103,24)"/><text x="26.6784%" y="143.50"></text></g><g><title>MIR_borrow_checking (112,047,264 samples, 26.18%)</title><rect x="0.3625%" y="181" width="26.1762%" height="15" fill="rgb(229,88,8)"/><text x="0.6125%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (111,564,072 samples, 26.06%)</title><rect x="0.4754%" y="165" width="26.0633%" height="15" fill="rgb(213,181,19)"/><text x="0.7254%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (455,225 samples, 0.11%)</title><rect x="26.5387%" y="181" width="0.1063%" height="15" fill="rgb(254,191,54)"/><text x="26.7887%" y="191.50"></text></g><g><title>hir_module_items (546,845 samples, 0.13%)</title><rect x="26.6450%" y="181" width="0.1278%" height="15" fill="rgb(241,83,37)"/><text x="26.8950%" y="191.50"></text></g><g><title>should_inherit_track_caller (436,855 samples, 0.10%)</title><rect x="27.0572%" y="133" width="0.1021%" height="15" fill="rgb(233,36,39)"/><text x="27.3072%" y="143.50"></text></g><g><title>codegen_fn_attrs (794,118 samples, 0.19%)</title><rect x="26.9784%" y="149" width="0.1855%" height="15" fill="rgb(226,3,54)"/><text x="27.2284%" y="159.50"></text></g><g><title>check_mod_attrs (1,645,059 samples, 0.38%)</title><rect x="26.7797%" y="165" width="0.3843%" height="15" fill="rgb(245,192,40)"/><text x="27.0297%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (913,939 samples, 0.21%)</title><rect x="27.3097%" y="165" width="0.2135%" height="15" fill="rgb(238,167,29)"/><text x="27.5597%" y="175.50"></text></g><g><title>misc_checking_1 (3,354,267 samples, 0.78%)</title><rect x="26.7729%" y="181" width="0.7836%" height="15" fill="rgb(232,182,51)"/><text x="27.0229%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,132,414 samples, 0.50%)</title><rect x="27.5571%" y="165" width="0.4982%" height="15" fill="rgb(231,60,39)"/><text x="27.8071%" y="175.50"></text></g><g><title>check_mod_liveness (1,791,059 samples, 0.42%)</title><rect x="27.6368%" y="149" width="0.4184%" height="15" fill="rgb(208,69,12)"/><text x="27.8868%" y="159.50"></text></g><g><title>mir_borrowck (1,147,340 samples, 0.27%)</title><rect x="28.8708%" y="53" width="0.2680%" height="15" fill="rgb(235,93,37)"/><text x="29.1208%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,142,242 samples, 0.50%)</title><rect x="28.6403%" y="133" width="0.5005%" height="15" fill="rgb(213,116,39)"/><text x="28.8903%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,118,702 samples, 0.49%)</title><rect x="28.6458%" y="117" width="0.4950%" height="15" fill="rgb(222,207,29)"/><text x="28.8958%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,067,951 samples, 0.48%)</title><rect x="28.6576%" y="101" width="0.4831%" height="15" fill="rgb(206,96,30)"/><text x="28.9076%" y="111.50"></text></g><g><title>mir_for_ctfe (1,789,659 samples, 0.42%)</title><rect x="28.7227%" y="85" width="0.4181%" height="15" fill="rgb(218,138,4)"/><text x="28.9727%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,633,064 samples, 0.38%)</title><rect x="28.7592%" y="69" width="0.3815%" height="15" fill="rgb(250,191,14)"/><text x="29.0092%" y="79.50"></text></g><g><title>mir_const_qualif (742,078 samples, 0.17%)</title><rect x="29.1476%" y="133" width="0.1734%" height="15" fill="rgb(239,60,40)"/><text x="29.3976%" y="143.50"></text></g><g><title>mir_const (665,546 samples, 0.16%)</title><rect x="29.1654%" y="117" width="0.1555%" height="15" fill="rgb(206,27,48)"/><text x="29.4154%" y="127.50"></text></g><g><title>unsafety_check_result (541,155 samples, 0.13%)</title><rect x="29.1945%" y="101" width="0.1264%" height="15" fill="rgb(225,35,8)"/><text x="29.4445%" y="111.50"></text></g><g><title>mir_built (501,515 samples, 0.12%)</title><rect x="29.2038%" y="85" width="0.1172%" height="15" fill="rgb(250,213,24)"/><text x="29.4538%" y="95.50"></text></g><g><title>misc_checking_2 (7,822,818 samples, 1.83%)</title><rect x="27.5565%" y="181" width="1.8275%" height="15" fill="rgb(247,123,22)"/><text x="27.8065%" y="191.50">m..</text></g><g><title>match_checking (5,688,234 samples, 1.33%)</title><rect x="28.0552%" y="165" width="1.3289%" height="15" fill="rgb(231,138,38)"/><text x="28.3052%" y="175.50"></text></g><g><title>check_match (5,539,763 samples, 1.29%)</title><rect x="28.0899%" y="149" width="1.2942%" height="15" fill="rgb(231,145,46)"/><text x="28.3399%" y="159.50"></text></g><g><title>check_private_in_public (853,340 samples, 0.20%)</title><rect x="29.3868%" y="165" width="0.1994%" height="15" fill="rgb(251,118,11)"/><text x="29.6368%" y="175.50"></text></g><g><title>death_checking (1,319,214 samples, 0.31%)</title><rect x="29.5862%" y="165" width="0.3082%" height="15" fill="rgb(217,147,25)"/><text x="29.8362%" y="175.50"></text></g><g><title>param_env (527,903 samples, 0.12%)</title><rect x="30.3769%" y="133" width="0.1233%" height="15" fill="rgb(247,81,37)"/><text x="30.6269%" y="143.50"></text></g><g><title>crate_lints (3,916,544 samples, 0.91%)</title><rect x="29.8947%" y="149" width="0.9150%" height="15" fill="rgb(209,12,38)"/><text x="30.1447%" y="159.50"></text></g><g><title>type_of (1,298,362 samples, 0.30%)</title><rect x="30.5064%" y="133" width="0.3033%" height="15" fill="rgb(227,1,9)"/><text x="30.7564%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,038,631 samples, 0.24%)</title><rect x="30.5670%" y="117" width="0.2426%" height="15" fill="rgb(248,47,43)"/><text x="30.8170%" y="127.50"></text></g><g><title>lint_checking (6,496,233 samples, 1.52%)</title><rect x="29.8944%" y="165" width="1.5176%" height="15" fill="rgb(221,10,30)"/><text x="30.1444%" y="175.50"></text></g><g><title>module_lints (2,578,209 samples, 0.60%)</title><rect x="30.8097%" y="149" width="0.6023%" height="15" fill="rgb(210,229,1)"/><text x="31.0597%" y="159.50"></text></g><g><title>lint_mod (2,568,409 samples, 0.60%)</title><rect x="30.8120%" y="133" width="0.6000%" height="15" fill="rgb(222,148,37)"/><text x="31.0620%" y="143.50"></text></g><g><title>privacy_access_levels (937,060 samples, 0.22%)</title><rect x="31.4120%" y="165" width="0.2189%" height="15" fill="rgb(234,67,33)"/><text x="31.6620%" y="175.50"></text></g><g><title>privacy_checking_modules (4,648,461 samples, 1.09%)</title><rect x="31.6309%" y="165" width="1.0860%" height="15" fill="rgb(247,98,35)"/><text x="31.8809%" y="175.50"></text></g><g><title>check_mod_privacy (4,641,361 samples, 1.08%)</title><rect x="31.6326%" y="149" width="1.0843%" height="15" fill="rgb(247,138,52)"/><text x="31.8826%" y="159.50"></text></g><g><title>misc_checking_3 (14,301,460 samples, 3.34%)</title><rect x="29.3841%" y="181" width="3.3411%" height="15" fill="rgb(213,79,30)"/><text x="29.6341%" y="191.50">mis..</text></g><g><title>impl_parent (3,199,974 samples, 0.75%)</title><rect x="34.0410%" y="117" width="0.7476%" height="15" fill="rgb(246,177,23)"/><text x="34.2910%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,795,117 samples, 0.42%)</title><rect x="34.3692%" y="101" width="0.4194%" height="15" fill="rgb(230,62,27)"/><text x="34.6192%" y="111.50"></text></g><g><title>impl_trait_ref (6,135,543 samples, 1.43%)</title><rect x="34.7886%" y="117" width="1.4334%" height="15" fill="rgb(216,154,8)"/><text x="35.0386%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,924,654 samples, 1.15%)</title><rect x="35.0715%" y="101" width="1.1505%" height="15" fill="rgb(244,35,45)"/><text x="35.3215%" y="111.50"></text></g><g><title>trait_impls_of (1,053,862 samples, 0.25%)</title><rect x="36.2294%" y="117" width="0.2462%" height="15" fill="rgb(251,115,12)"/><text x="36.4794%" y="127.50"></text></g><g><title>coherent_trait (15,793,527 samples, 3.69%)</title><rect x="32.7862%" y="149" width="3.6896%" height="15" fill="rgb(240,54,50)"/><text x="33.0362%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (15,225,201 samples, 3.56%)</title><rect x="32.9190%" y="133" width="3.5569%" height="15" fill="rgb(233,84,52)"/><text x="33.1690%" y="143.50">spec..</text></g><g><title>coherence_checking (15,916,638 samples, 3.72%)</title><rect x="32.7813%" y="165" width="3.7184%" height="15" fill="rgb(207,117,47)"/><text x="33.0313%" y="175.50">cohe..</text></g><g><title>associated_item (729,588 samples, 0.17%)</title><rect x="58.5167%" y="101" width="0.1704%" height="15" fill="rgb(249,43,39)"/><text x="58.7667%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (579,467 samples, 0.14%)</title><rect x="58.5517%" y="85" width="0.1354%" height="15" fill="rgb(209,38,44)"/><text x="58.8017%" y="95.50"></text></g><g><title>associated_items (1,066,324 samples, 0.25%)</title><rect x="58.4512%" y="117" width="0.2491%" height="15" fill="rgb(236,212,23)"/><text x="58.7012%" y="127.50"></text></g><g><title>dropck_outlives (3,417,317 samples, 0.80%)</title><rect x="58.7526%" y="117" width="0.7983%" height="15" fill="rgb(242,79,21)"/><text x="59.0026%" y="127.50"></text></g><g><title>normalize_projection_ty (1,940,743 samples, 0.45%)</title><rect x="59.0976%" y="101" width="0.4534%" height="15" fill="rgb(211,96,35)"/><text x="59.3476%" y="111.50"></text></g><g><title>eval_to_const_value_raw (454,496 samples, 0.11%)</title><rect x="59.5509%" y="117" width="0.1062%" height="15" fill="rgb(253,215,40)"/><text x="59.8009%" y="127.50"></text></g><g><title>eval_to_const_value_raw (451,106 samples, 0.11%)</title><rect x="59.5517%" y="101" width="0.1054%" height="15" fill="rgb(211,81,21)"/><text x="59.8017%" y="111.50"></text></g><g><title>eval_to_allocation_raw (444,006 samples, 0.10%)</title><rect x="59.5534%" y="85" width="0.1037%" height="15" fill="rgb(208,190,38)"/><text x="59.8034%" y="95.50"></text></g><g><title>generics_of (1,258,040 samples, 0.29%)</title><rect x="63.6985%" y="101" width="0.2939%" height="15" fill="rgb(235,213,38)"/><text x="63.9485%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (976,630 samples, 0.23%)</title><rect x="63.7643%" y="85" width="0.2282%" height="15" fill="rgb(237,122,38)"/><text x="64.0143%" y="95.50"></text></g><g><title>impl_trait_ref (1,465,525 samples, 0.34%)</title><rect x="64.0611%" y="101" width="0.3424%" height="15" fill="rgb(244,218,35)"/><text x="64.3111%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,183,103 samples, 0.28%)</title><rect x="64.1271%" y="85" width="0.2764%" height="15" fill="rgb(240,68,47)"/><text x="64.3771%" y="95.50"></text></g><g><title>explicit_predicates_of (465,162 samples, 0.11%)</title><rect x="64.5561%" y="69" width="0.1087%" height="15" fill="rgb(210,16,53)"/><text x="64.8061%" y="79.50"></text></g><g><title>predicates_of (1,160,202 samples, 0.27%)</title><rect x="64.4196%" y="101" width="0.2710%" height="15" fill="rgb(235,124,12)"/><text x="64.6696%" y="111.50"></text></g><g><title>predicates_defined_on (797,286 samples, 0.19%)</title><rect x="64.5044%" y="85" width="0.1863%" height="15" fill="rgb(224,169,11)"/><text x="64.7544%" y="95.50"></text></g><g><title>specializes (1,021,503 samples, 0.24%)</title><rect x="64.6906%" y="101" width="0.2386%" height="15" fill="rgb(250,166,2)"/><text x="64.9406%" y="111.50"></text></g><g><title>param_env (587,386 samples, 0.14%)</title><rect x="64.7921%" y="85" width="0.1372%" height="15" fill="rgb(242,216,29)"/><text x="65.0421%" y="95.50"></text></g><g><title>trait_impls_of (2,203,474 samples, 0.51%)</title><rect x="64.9400%" y="101" width="0.5148%" height="15" fill="rgb(230,116,27)"/><text x="65.1900%" y="111.50"></text></g><g><title>implementations_of_trait (948,879 samples, 0.22%)</title><rect x="65.2331%" y="85" width="0.2217%" height="15" fill="rgb(228,99,48)"/><text x="65.4831%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (447,472 samples, 0.10%)</title><rect x="65.3503%" y="69" width="0.1045%" height="15" fill="rgb(253,11,6)"/><text x="65.6003%" y="79.50"></text></g><g><title>evaluate_obligation (24,891,012 samples, 5.81%)</title><rect x="59.6571%" y="117" width="5.8150%" height="15" fill="rgb(247,143,39)"/><text x="59.9071%" y="127.50">evaluat..</text></g><g><title>generics_of (1,591,133 samples, 0.37%)</title><rect x="65.5710%" y="117" width="0.3717%" height="15" fill="rgb(236,97,10)"/><text x="65.8210%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,185,821 samples, 0.28%)</title><rect x="65.6657%" y="101" width="0.2770%" height="15" fill="rgb(233,208,19)"/><text x="65.9157%" y="111.50"></text></g><g><title>evaluate_obligation (483,774 samples, 0.11%)</title><rect x="66.2213%" y="101" width="0.1130%" height="15" fill="rgb(216,164,2)"/><text x="66.4713%" y="111.50"></text></g><g><title>method_autoderef_steps (917,894 samples, 0.21%)</title><rect x="66.1282%" y="117" width="0.2144%" height="15" fill="rgb(220,129,5)"/><text x="66.3782%" y="127.50"></text></g><g><title>predicates_of (780,618 samples, 0.18%)</title><rect x="66.4427%" y="117" width="0.1824%" height="15" fill="rgb(242,17,10)"/><text x="66.6927%" y="127.50"></text></g><g><title>predicates_defined_on (518,674 samples, 0.12%)</title><rect x="66.5039%" y="101" width="0.1212%" height="15" fill="rgb(242,107,0)"/><text x="66.7539%" y="111.50"></text></g><g><title>dropck_outlives (1,657,360 samples, 0.39%)</title><rect x="74.1981%" y="101" width="0.3872%" height="15" fill="rgb(251,28,31)"/><text x="74.4481%" y="111.50"></text></g><g><title>normalize_projection_ty (971,190 samples, 0.23%)</title><rect x="74.3584%" y="85" width="0.2269%" height="15" fill="rgb(233,223,10)"/><text x="74.6084%" y="95.50"></text></g><g><title>trait_impls_of (784,640 samples, 0.18%)</title><rect x="75.8679%" y="85" width="0.1833%" height="15" fill="rgb(215,21,27)"/><text x="76.1179%" y="95.50"></text></g><g><title>evaluate_obligation (6,276,473 samples, 1.47%)</title><rect x="74.5853%" y="101" width="1.4663%" height="15" fill="rgb(232,23,21)"/><text x="74.8353%" y="111.50"></text></g><g><title>is_copy_raw (790,111 samples, 0.18%)</title><rect x="76.1918%" y="101" width="0.1846%" height="15" fill="rgb(244,5,23)"/><text x="76.4418%" y="111.50"></text></g><g><title>evaluate_obligation (579,588 samples, 0.14%)</title><rect x="76.2410%" y="85" width="0.1354%" height="15" fill="rgb(226,81,46)"/><text x="76.4910%" y="95.50"></text></g><g><title>typeck (42,481,567 samples, 9.92%)</title><rect x="66.7250%" y="117" width="9.9244%" height="15" fill="rgb(247,70,30)"/><text x="66.9750%" y="127.50">typeck</text></g><g><title>item_bodies_checking (171,930,304 samples, 40.17%)</title><rect x="36.5134%" y="165" width="40.1659%" height="15" fill="rgb(212,68,19)"/><text x="36.7634%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (171,926,434 samples, 40.17%)</title><rect x="36.5143%" y="149" width="40.1650%" height="15" fill="rgb(240,187,13)"/><text x="36.7643%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (171,620,992 samples, 40.09%)</title><rect x="36.5857%" y="133" width="40.0937%" height="15" fill="rgb(223,113,26)"/><text x="36.8357%" y="143.50">typeck</text></g><g><title>item_types_checking (2,252,945 samples, 0.53%)</title><rect x="76.6793%" y="165" width="0.5263%" height="15" fill="rgb(206,192,2)"/><text x="76.9293%" y="175.50"></text></g><g><title>check_mod_item_types (2,245,085 samples, 0.52%)</title><rect x="76.6812%" y="149" width="0.5245%" height="15" fill="rgb(241,108,4)"/><text x="76.9312%" y="159.50"></text></g><g><title>fn_sig (1,076,911 samples, 0.25%)</title><rect x="77.4199%" y="133" width="0.2516%" height="15" fill="rgb(247,173,49)"/><text x="77.6699%" y="143.50"></text></g><g><title>lint_levels (765,759 samples, 0.18%)</title><rect x="77.8565%" y="85" width="0.1789%" height="15" fill="rgb(224,114,35)"/><text x="78.1065%" y="95.50"></text></g><g><title>is_late_bound_map (1,192,063 samples, 0.28%)</title><rect x="77.7573%" y="117" width="0.2785%" height="15" fill="rgb(245,159,27)"/><text x="78.0073%" y="127.50"></text></g><g><title>resolve_lifetimes (1,164,642 samples, 0.27%)</title><rect x="77.7638%" y="101" width="0.2721%" height="15" fill="rgb(245,172,44)"/><text x="78.0138%" y="111.50"></text></g><g><title>named_region_map (1,026,970 samples, 0.24%)</title><rect x="78.0358%" y="117" width="0.2399%" height="15" fill="rgb(236,23,11)"/><text x="78.2858%" y="127.50"></text></g><g><title>resolve_lifetimes (958,840 samples, 0.22%)</title><rect x="78.0518%" y="101" width="0.2240%" height="15" fill="rgb(205,117,38)"/><text x="78.3018%" y="111.50"></text></g><g><title>generics_of (2,626,321 samples, 0.61%)</title><rect x="77.6715%" y="133" width="0.6136%" height="15" fill="rgb(237,72,25)"/><text x="77.9215%" y="143.50"></text></g><g><title>explicit_predicates_of (619,224 samples, 0.14%)</title><rect x="78.4179%" y="101" width="0.1447%" height="15" fill="rgb(244,70,9)"/><text x="78.6679%" y="111.50"></text></g><g><title>predicates_of (2,114,039 samples, 0.49%)</title><rect x="78.3020%" y="133" width="0.4939%" height="15" fill="rgb(217,125,39)"/><text x="78.5520%" y="143.50"></text></g><g><title>predicates_defined_on (1,918,827 samples, 0.45%)</title><rect x="78.3476%" y="117" width="0.4483%" height="15" fill="rgb(235,36,10)"/><text x="78.5976%" y="127.50"></text></g><g><title>inferred_outlives_of (998,961 samples, 0.23%)</title><rect x="78.5625%" y="101" width="0.2334%" height="15" fill="rgb(251,123,47)"/><text x="78.8125%" y="111.50"></text></g><g><title>inferred_outlives_crate (929,960 samples, 0.22%)</title><rect x="78.5786%" y="85" width="0.2173%" height="15" fill="rgb(221,13,13)"/><text x="78.8286%" y="95.50"></text></g><g><title>type_of (602,418 samples, 0.14%)</title><rect x="78.6552%" y="69" width="0.1407%" height="15" fill="rgb(238,131,9)"/><text x="78.9052%" y="79.50"></text></g><g><title>type_collecting (7,125,989 samples, 1.66%)</title><rect x="77.2073%" y="165" width="1.6648%" height="15" fill="rgb(211,50,8)"/><text x="77.4573%" y="175.50"></text></g><g><title>collect_mod_item_types (7,113,359 samples, 1.66%)</title><rect x="77.2102%" y="149" width="1.6618%" height="15" fill="rgb(245,182,24)"/><text x="77.4602%" y="159.50"></text></g><g><title>evaluate_obligation (1,110,878 samples, 0.26%)</title><rect x="79.8043%" y="133" width="0.2595%" height="15" fill="rgb(242,14,37)"/><text x="80.0543%" y="143.50"></text></g><g><title>implied_outlives_bounds (540,514 samples, 0.13%)</title><rect x="80.0638%" y="133" width="0.1263%" height="15" fill="rgb(246,228,12)"/><text x="80.3138%" y="143.50"></text></g><g><title>param_env (507,136 samples, 0.12%)</title><rect x="80.1901%" y="133" width="0.1185%" height="15" fill="rgb(213,55,15)"/><text x="80.4401%" y="143.50"></text></g><g><title>region_scope_tree (871,724 samples, 0.20%)</title><rect x="80.3182%" y="133" width="0.2037%" height="15" fill="rgb(209,9,3)"/><text x="80.5682%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,516,251 samples, 1.52%)</title><rect x="79.0159%" y="149" width="1.5223%" height="15" fill="rgb(230,59,30)"/><text x="79.2659%" y="159.50"></text></g><g><title>mir_for_ctfe (483,376 samples, 0.11%)</title><rect x="81.7147%" y="85" width="0.1129%" height="15" fill="rgb(209,121,21)"/><text x="81.9647%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (442,195 samples, 0.10%)</title><rect x="81.7244%" y="69" width="0.1033%" height="15" fill="rgb(220,109,13)"/><text x="81.9744%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,173,573 samples, 0.27%)</title><rect x="81.6234%" y="133" width="0.2742%" height="15" fill="rgb(232,18,1)"/><text x="81.8734%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,158,603 samples, 0.27%)</title><rect x="81.6269%" y="117" width="0.2707%" height="15" fill="rgb(215,41,42)"/><text x="81.8769%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,156,853 samples, 0.27%)</title><rect x="81.6273%" y="101" width="0.2703%" height="15" fill="rgb(224,123,36)"/><text x="81.8773%" y="111.50"></text></g><g><title>adt_def (430,726 samples, 0.10%)</title><rect x="82.0194%" y="101" width="0.1006%" height="15" fill="rgb(240,125,3)"/><text x="82.2694%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (428,536 samples, 0.10%)</title><rect x="82.0199%" y="85" width="0.1001%" height="15" fill="rgb(205,98,50)"/><text x="82.2699%" y="95.50"></text></g><g><title>adt_sized_constraint (604,988 samples, 0.14%)</title><rect x="82.0136%" y="117" width="0.1413%" height="15" fill="rgb(205,185,37)"/><text x="82.2636%" y="127.50"></text></g><g><title>evaluate_obligation (1,135,967 samples, 0.27%)</title><rect x="81.8976%" y="133" width="0.2654%" height="15" fill="rgb(238,207,15)"/><text x="82.1476%" y="143.50"></text></g><g><title>implied_outlives_bounds (701,778 samples, 0.16%)</title><rect x="82.1714%" y="133" width="0.1639%" height="15" fill="rgb(213,199,42)"/><text x="82.4214%" y="143.50"></text></g><g><title>object_safety_violations (455,915 samples, 0.11%)</title><rect x="82.3354%" y="133" width="0.1065%" height="15" fill="rgb(235,201,11)"/><text x="82.5854%" y="143.50"></text></g><g><title>param_env (857,619 samples, 0.20%)</title><rect x="82.4419%" y="133" width="0.2004%" height="15" fill="rgb(207,46,11)"/><text x="82.6919%" y="143.50"></text></g><g><title>region_scope_tree (880,491 samples, 0.21%)</title><rect x="82.6611%" y="133" width="0.2057%" height="15" fill="rgb(241,35,35)"/><text x="82.9111%" y="143.50"></text></g><g><title>check_item_well_formed (10,323,884 samples, 2.41%)</title><rect x="80.5382%" y="149" width="2.4118%" height="15" fill="rgb(243,32,47)"/><text x="80.7882%" y="159.50">ch..</text></g><g><title>analysis (354,454,226 samples, 82.81%)</title><rect x="0.1523%" y="197" width="82.8067%" height="15" fill="rgb(247,202,23)"/><text x="0.4023%" y="207.50">analysis</text></g><g><title>type_check_crate (215,026,156 samples, 50.23%)</title><rect x="32.7252%" y="181" width="50.2339%" height="15" fill="rgb(219,102,11)"/><text x="32.9752%" y="191.50">type_check_crate</text></g><g><title>wf_checking (17,470,516 samples, 4.08%)</title><rect x="78.8776%" y="165" width="4.0814%" height="15" fill="rgb(243,110,44)"/><text x="79.1276%" y="175.50">wf_c..</text></g><g><title>codegen_crate (478,086 samples, 0.11%)</title><rect x="82.9618%" y="197" width="0.1117%" height="15" fill="rgb(222,74,54)"/><text x="83.2118%" y="207.50"></text></g><g><title>metadata_register_crate (2,053,645 samples, 0.48%)</title><rect x="91.9152%" y="149" width="0.4798%" height="15" fill="rgb(216,99,12)"/><text x="92.1652%" y="159.50"></text></g><g><title>metadata_register_crate (892,082 samples, 0.21%)</title><rect x="92.1866%" y="133" width="0.2084%" height="15" fill="rgb(226,22,26)"/><text x="92.4366%" y="143.50"></text></g><g><title>macro_expand_crate (40,349,362 samples, 9.43%)</title><rect x="83.2571%" y="181" width="9.4263%" height="15" fill="rgb(217,163,10)"/><text x="83.5071%" y="191.50">macro_expand_..</text></g><g><title>expand_crate (40,329,172 samples, 9.42%)</title><rect x="83.2618%" y="165" width="9.4216%" height="15" fill="rgb(213,25,53)"/><text x="83.5118%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,234,532 samples, 0.29%)</title><rect x="92.3950%" y="149" width="0.2884%" height="15" fill="rgb(252,105,26)"/><text x="92.6450%" y="159.50"></text></g><g><title>late_resolve_crate (5,460,961 samples, 1.28%)</title><rect x="92.8009%" y="165" width="1.2758%" height="15" fill="rgb(220,39,43)"/><text x="93.0509%" y="175.50"></text></g><g><title>configure_and_expand (47,432,881 samples, 11.08%)</title><rect x="83.0735%" y="197" width="11.0812%" height="15" fill="rgb(229,68,48)"/><text x="83.3235%" y="207.50">configure_and_ex..</text></g><g><title>resolve_crate (6,132,389 samples, 1.43%)</title><rect x="92.7220%" y="181" width="1.4326%" height="15" fill="rgb(252,8,32)"/><text x="92.9720%" y="191.50"></text></g><g><title>drop_ast (745,609 samples, 0.17%)</title><rect x="94.1546%" y="197" width="0.1742%" height="15" fill="rgb(223,20,43)"/><text x="94.4046%" y="207.50"></text></g><g><title>early_lint_checks (1,129,033 samples, 0.26%)</title><rect x="94.3355%" y="197" width="0.2638%" height="15" fill="rgb(229,81,49)"/><text x="94.5855%" y="207.50"></text></g><g><title>free_global_ctxt (6,767,926 samples, 1.58%)</title><rect x="94.5993%" y="197" width="1.5811%" height="15" fill="rgb(236,28,36)"/><text x="94.8493%" y="207.50"></text></g><g><title>generate_crate_metadata (3,276,097 samples, 0.77%)</title><rect x="96.1804%" y="197" width="0.7654%" height="15" fill="rgb(249,185,26)"/><text x="96.4304%" y="207.50"></text></g><g><title>hir_lowering (9,516,496 samples, 2.22%)</title><rect x="96.9458%" y="197" width="2.2232%" height="15" fill="rgb(249,174,33)"/><text x="97.1958%" y="207.50">h..</text></g><g><title>parse_crate (880,480 samples, 0.21%)</title><rect x="99.1869%" y="197" width="0.2057%" height="15" fill="rgb(233,201,37)"/><text x="99.4369%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,794,640 samples, 0.42%)</title><rect x="99.4443%" y="197" width="0.4193%" height="15" fill="rgb(221,78,26)"/><text x="99.6943%" y="207.50"></text></g><g><title>all (428,049,941 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (428,049,941 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (485,815 samples, 0.11%)</title><rect x="99.8865%" y="197" width="0.1135%" height="15" fill="rgb(229,67,23)"/><text x="100.1365%" y="207.50"></text></g></svg></svg>