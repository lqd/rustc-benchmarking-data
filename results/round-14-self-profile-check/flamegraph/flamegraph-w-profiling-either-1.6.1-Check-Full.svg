<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (214,982 samples, 0.16%)</title><rect x="9.9966%" y="133" width="0.1634%" height="15" fill="rgb(227,0,7)"/><text x="10.2466%" y="143.50"></text></g><g><title>param_env (304,274 samples, 0.23%)</title><rect x="11.7510%" y="101" width="0.2313%" height="15" fill="rgb(217,0,24)"/><text x="12.0010%" y="111.50"></text></g><g><title>needs_drop_raw (1,137,860 samples, 0.86%)</title><rect x="15.0200%" y="69" width="0.8648%" height="15" fill="rgb(221,193,54)"/><text x="15.2700%" y="79.50"></text></g><g><title>is_copy_raw (973,719 samples, 0.74%)</title><rect x="15.1447%" y="53" width="0.7401%" height="15" fill="rgb(248,212,6)"/><text x="15.3947%" y="63.50"></text></g><g><title>evaluate_obligation (804,335 samples, 0.61%)</title><rect x="15.2735%" y="37" width="0.6113%" height="15" fill="rgb(208,68,35)"/><text x="15.5235%" y="47.50"></text></g><g><title>thir_body (1,063,327 samples, 0.81%)</title><rect x="15.9698%" y="69" width="0.8082%" height="15" fill="rgb(232,128,0)"/><text x="16.2198%" y="79.50"></text></g><g><title>mir_const (7,669,266 samples, 5.83%)</title><rect x="10.9691%" y="117" width="5.8288%" height="15" fill="rgb(207,160,47)"/><text x="11.2191%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (6,336,197 samples, 4.82%)</title><rect x="11.9823%" y="101" width="4.8157%" height="15" fill="rgb(228,23,34)"/><text x="12.2323%" y="111.50">unsafe..</text></g><g><title>mir_built (5,758,241 samples, 4.38%)</title><rect x="12.4215%" y="85" width="4.3764%" height="15" fill="rgb(218,30,26)"/><text x="12.6715%" y="95.50">mir_b..</text></g><g><title>mir_promoted (8,789,444 samples, 6.68%)</title><rect x="10.1600%" y="133" width="6.6802%" height="15" fill="rgb(220,122,19)"/><text x="10.4100%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (328,156 samples, 0.25%)</title><rect x="16.8402%" y="133" width="0.2494%" height="15" fill="rgb(250,228,42)"/><text x="17.0902%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (286,494 samples, 0.22%)</title><rect x="17.0896%" y="133" width="0.2177%" height="15" fill="rgb(240,193,28)"/><text x="17.3396%" y="143.50"></text></g><g><title>type_op_normalize_ty (190,943 samples, 0.15%)</title><rect x="17.3625%" y="133" width="0.1451%" height="15" fill="rgb(216,20,37)"/><text x="17.6125%" y="143.50"></text></g><g><title>normalize_projection_ty (140,251 samples, 0.11%)</title><rect x="17.4011%" y="117" width="0.1066%" height="15" fill="rgb(206,188,39)"/><text x="17.6511%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,194,484 samples, 1.67%)</title><rect x="17.5077%" y="133" width="1.6679%" height="15" fill="rgb(217,207,13)"/><text x="17.7577%" y="143.50"></text></g><g><title>MIR_borrow_checking (24,169,149 samples, 18.37%)</title><rect x="0.8097%" y="165" width="18.3692%" height="15" fill="rgb(231,73,38)"/><text x="1.0597%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,023,629 samples, 18.26%)</title><rect x="0.9203%" y="149" width="18.2586%" height="15" fill="rgb(225,20,46)"/><text x="1.1703%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (184,532 samples, 0.14%)</title><rect x="19.2064%" y="165" width="0.1402%" height="15" fill="rgb(210,31,41)"/><text x="19.4564%" y="175.50"></text></g><g><title>item_attrs (214,553 samples, 0.16%)</title><rect x="19.7858%" y="85" width="0.1631%" height="15" fill="rgb(221,200,47)"/><text x="20.0358%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (202,543 samples, 0.15%)</title><rect x="19.7949%" y="69" width="0.1539%" height="15" fill="rgb(226,26,5)"/><text x="20.0449%" y="79.50"></text></g><g><title>codegen_fn_attrs (323,223 samples, 0.25%)</title><rect x="19.7561%" y="101" width="0.2457%" height="15" fill="rgb(249,33,26)"/><text x="20.0061%" y="111.50"></text></g><g><title>should_inherit_track_caller (458,896 samples, 0.35%)</title><rect x="19.6598%" y="117" width="0.3488%" height="15" fill="rgb(235,183,28)"/><text x="19.9098%" y="127.50"></text></g><g><title>codegen_fn_attrs (645,838 samples, 0.49%)</title><rect x="19.5304%" y="133" width="0.4909%" height="15" fill="rgb(221,5,38)"/><text x="19.7804%" y="143.50"></text></g><g><title>check_mod_attrs (869,259 samples, 0.66%)</title><rect x="19.3606%" y="149" width="0.6607%" height="15" fill="rgb(247,18,42)"/><text x="19.6106%" y="159.50"></text></g><g><title>check_mod_const_bodies (136,092 samples, 0.10%)</title><rect x="20.0213%" y="149" width="0.1034%" height="15" fill="rgb(241,131,45)"/><text x="20.2713%" y="159.50"></text></g><g><title>lookup_deprecation_entry (157,221 samples, 0.12%)</title><rect x="20.3411%" y="133" width="0.1195%" height="15" fill="rgb(249,31,29)"/><text x="20.5911%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (470,695 samples, 0.36%)</title><rect x="20.1865%" y="149" width="0.3577%" height="15" fill="rgb(225,111,53)"/><text x="20.4365%" y="159.50"></text></g><g><title>misc_checking_1 (1,626,459 samples, 1.24%)</title><rect x="19.3470%" y="165" width="1.2361%" height="15" fill="rgb(238,160,17)"/><text x="19.5970%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (426,645 samples, 0.32%)</title><rect x="20.5843%" y="149" width="0.3243%" height="15" fill="rgb(214,148,48)"/><text x="20.8343%" y="159.50"></text></g><g><title>check_mod_liveness (339,304 samples, 0.26%)</title><rect x="20.6506%" y="133" width="0.2579%" height="15" fill="rgb(232,36,49)"/><text x="20.9006%" y="143.50"></text></g><g><title>misc_checking_2 (1,097,593 samples, 0.83%)</title><rect x="20.5832%" y="165" width="0.8342%" height="15" fill="rgb(209,103,24)"/><text x="20.8332%" y="175.50"></text></g><g><title>match_checking (669,558 samples, 0.51%)</title><rect x="20.9085%" y="149" width="0.5089%" height="15" fill="rgb(229,88,8)"/><text x="21.1585%" y="159.50"></text></g><g><title>check_match (631,897 samples, 0.48%)</title><rect x="20.9371%" y="133" width="0.4803%" height="15" fill="rgb(213,181,19)"/><text x="21.1871%" y="143.50"></text></g><g><title>check_private_in_public (238,073 samples, 0.18%)</title><rect x="21.4248%" y="149" width="0.1809%" height="15" fill="rgb(254,191,54)"/><text x="21.6748%" y="159.50"></text></g><g><title>death_checking (526,686 samples, 0.40%)</title><rect x="21.6057%" y="149" width="0.4003%" height="15" fill="rgb(241,83,37)"/><text x="21.8557%" y="159.50"></text></g><g><title>item_attrs (211,052 samples, 0.16%)</title><rect x="21.8456%" y="133" width="0.1604%" height="15" fill="rgb(233,36,39)"/><text x="22.0956%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (208,912 samples, 0.16%)</title><rect x="21.8472%" y="117" width="0.1588%" height="15" fill="rgb(226,3,54)"/><text x="22.0972%" y="127.50"></text></g><g><title>param_env (145,571 samples, 0.11%)</title><rect x="22.5422%" y="117" width="0.1106%" height="15" fill="rgb(245,192,40)"/><text x="22.7922%" y="127.50"></text></g><g><title>crate_lints (1,938,701 samples, 1.47%)</title><rect x="22.0071%" y="133" width="1.4735%" height="15" fill="rgb(238,167,29)"/><text x="22.2571%" y="143.50"></text></g><g><title>type_of (1,076,622 samples, 0.82%)</title><rect x="22.6623%" y="117" width="0.8183%" height="15" fill="rgb(232,182,51)"/><text x="22.9123%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (843,671 samples, 0.64%)</title><rect x="22.8393%" y="101" width="0.6412%" height="15" fill="rgb(231,60,39)"/><text x="23.0893%" y="111.50"></text></g><g><title>lint_checking (2,263,435 samples, 1.72%)</title><rect x="22.0060%" y="149" width="1.7203%" height="15" fill="rgb(208,69,12)"/><text x="22.2560%" y="159.50"></text></g><g><title>module_lints (323,334 samples, 0.25%)</title><rect x="23.4805%" y="133" width="0.2457%" height="15" fill="rgb(235,93,37)"/><text x="23.7305%" y="143.50"></text></g><g><title>lint_mod (320,854 samples, 0.24%)</title><rect x="23.4824%" y="117" width="0.2439%" height="15" fill="rgb(213,116,39)"/><text x="23.7324%" y="127.50"></text></g><g><title>privacy_access_levels (315,833 samples, 0.24%)</title><rect x="23.7263%" y="149" width="0.2400%" height="15" fill="rgb(222,207,29)"/><text x="23.9763%" y="159.50"></text></g><g><title>privacy_checking_modules (1,181,853 samples, 0.90%)</title><rect x="23.9663%" y="149" width="0.8982%" height="15" fill="rgb(206,96,30)"/><text x="24.2163%" y="159.50"></text></g><g><title>check_mod_privacy (1,179,563 samples, 0.90%)</title><rect x="23.9680%" y="133" width="0.8965%" height="15" fill="rgb(218,138,4)"/><text x="24.2180%" y="143.50"></text></g><g><title>misc_checking_3 (4,550,080 samples, 3.46%)</title><rect x="21.4174%" y="165" width="3.4582%" height="15" fill="rgb(250,191,14)"/><text x="21.6674%" y="175.50">mis..</text></g><g><title>impl_trait_ref (174,871 samples, 0.13%)</title><rect x="25.0893%" y="69" width="0.1329%" height="15" fill="rgb(239,60,40)"/><text x="25.3393%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (156,131 samples, 0.12%)</title><rect x="25.1036%" y="53" width="0.1187%" height="15" fill="rgb(206,27,48)"/><text x="25.3536%" y="63.50"></text></g><g><title>adt_destructor (323,173 samples, 0.25%)</title><rect x="24.9951%" y="117" width="0.2456%" height="15" fill="rgb(225,35,8)"/><text x="25.2451%" y="127.50"></text></g><g><title>coherent_trait (320,263 samples, 0.24%)</title><rect x="24.9973%" y="101" width="0.2434%" height="15" fill="rgb(250,213,24)"/><text x="25.2473%" y="111.50"></text></g><g><title>specialization_graph_of (318,863 samples, 0.24%)</title><rect x="24.9984%" y="85" width="0.2423%" height="15" fill="rgb(247,123,22)"/><text x="25.2484%" y="95.50"></text></g><g><title>impl_parent (3,267,747 samples, 2.48%)</title><rect x="29.3321%" y="101" width="2.4836%" height="15" fill="rgb(231,138,38)"/><text x="29.5821%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,805,794 samples, 1.37%)</title><rect x="30.4432%" y="85" width="1.3724%" height="15" fill="rgb(231,145,46)"/><text x="30.6932%" y="95.50"></text></g><g><title>impl_trait_ref (6,663,453 samples, 5.06%)</title><rect x="31.8157%" y="101" width="5.0644%" height="15" fill="rgb(251,118,11)"/><text x="32.0657%" y="111.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,952,101 samples, 3.76%)</title><rect x="33.1163%" y="85" width="3.7637%" height="15" fill="rgb(217,147,25)"/><text x="33.3663%" y="95.50">meta..</text></g><g><title>trait_impls_of (1,232,347 samples, 0.94%)</title><rect x="36.9323%" y="101" width="0.9366%" height="15" fill="rgb(247,81,37)"/><text x="37.1823%" y="111.50"></text></g><g><title>implementations_of_trait (346,275 samples, 0.26%)</title><rect x="37.6058%" y="85" width="0.2632%" height="15" fill="rgb(209,12,38)"/><text x="37.8558%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (255,445 samples, 0.19%)</title><rect x="37.6748%" y="69" width="0.1941%" height="15" fill="rgb(227,1,9)"/><text x="37.9248%" y="79.50"></text></g><g><title>coherent_trait (16,997,280 samples, 12.92%)</title><rect x="24.9515%" y="133" width="12.9184%" height="15" fill="rgb(248,47,43)"/><text x="25.2015%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (16,517,465 samples, 12.55%)</title><rect x="25.3162%" y="117" width="12.5537%" height="15" fill="rgb(221,10,30)"/><text x="25.5662%" y="127.50">specialization_grap..</text></g><g><title>coherence_checking (17,096,071 samples, 12.99%)</title><rect x="24.9286%" y="149" width="12.9934%" height="15" fill="rgb(210,229,1)"/><text x="25.1786%" y="159.50">coherence_checking</text></g><g><title>adt_dtorck_constraint (185,063 samples, 0.14%)</title><rect x="53.1735%" y="85" width="0.1407%" height="15" fill="rgb(222,148,37)"/><text x="53.4235%" y="95.50"></text></g><g><title>dropck_outlives (466,028 samples, 0.35%)</title><rect x="52.9766%" y="101" width="0.3542%" height="15" fill="rgb(234,67,33)"/><text x="53.2266%" y="111.50"></text></g><g><title>evaluate_obligation (856,076 samples, 0.65%)</title><rect x="53.3308%" y="101" width="0.6506%" height="15" fill="rgb(247,98,35)"/><text x="53.5808%" y="111.50"></text></g><g><title>impl_trait_ref (213,263 samples, 0.16%)</title><rect x="54.0774%" y="101" width="0.1621%" height="15" fill="rgb(247,138,52)"/><text x="54.3274%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (210,783 samples, 0.16%)</title><rect x="54.0793%" y="85" width="0.1602%" height="15" fill="rgb(213,79,30)"/><text x="54.3293%" y="95.50"></text></g><g><title>method_autoderef_steps (553,247 samples, 0.42%)</title><rect x="54.3513%" y="101" width="0.4205%" height="15" fill="rgb(246,177,23)"/><text x="54.6013%" y="111.50"></text></g><g><title>evaluate_obligation (267,905 samples, 0.20%)</title><rect x="54.5682%" y="85" width="0.2036%" height="15" fill="rgb(230,62,27)"/><text x="54.8182%" y="95.50"></text></g><g><title>item_bodies_checking (22,465,150 samples, 17.07%)</title><rect x="37.9522%" y="149" width="17.0741%" height="15" fill="rgb(216,154,8)"/><text x="38.2022%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,462,360 samples, 17.07%)</title><rect x="37.9543%" y="133" width="17.0720%" height="15" fill="rgb(244,35,45)"/><text x="38.2043%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (22,341,289 samples, 16.98%)</title><rect x="38.0464%" y="117" width="16.9799%" height="15" fill="rgb(251,115,12)"/><text x="38.2964%" y="127.50">typeck</text></g><g><title>item_types_checking (1,868,561 samples, 1.42%)</title><rect x="55.0263%" y="149" width="1.4202%" height="15" fill="rgb(240,54,50)"/><text x="55.2763%" y="159.50"></text></g><g><title>check_mod_item_types (1,866,251 samples, 1.42%)</title><rect x="55.0281%" y="133" width="1.4184%" height="15" fill="rgb(233,84,52)"/><text x="55.2781%" y="143.50"></text></g><g><title>fn_sig (391,595 samples, 0.30%)</title><rect x="56.6899%" y="117" width="0.2976%" height="15" fill="rgb(207,117,47)"/><text x="56.9399%" y="127.50"></text></g><g><title>generics_of (253,182 samples, 0.19%)</title><rect x="56.9875%" y="117" width="0.1924%" height="15" fill="rgb(249,43,39)"/><text x="57.2375%" y="127.50"></text></g><g><title>impl_trait_ref (147,402 samples, 0.11%)</title><rect x="57.1800%" y="117" width="0.1120%" height="15" fill="rgb(209,38,44)"/><text x="57.4300%" y="127.50"></text></g><g><title>late_bound_vars_map (677,037 samples, 0.51%)</title><rect x="57.8742%" y="69" width="0.5146%" height="15" fill="rgb(236,212,23)"/><text x="58.1242%" y="79.50"></text></g><g><title>resolve_lifetimes (636,056 samples, 0.48%)</title><rect x="57.9054%" y="53" width="0.4834%" height="15" fill="rgb(242,79,21)"/><text x="58.1554%" y="63.50"></text></g><g><title>explicit_predicates_of (1,368,135 samples, 1.04%)</title><rect x="57.4109%" y="85" width="1.0398%" height="15" fill="rgb(211,96,35)"/><text x="57.6609%" y="95.50"></text></g><g><title>predicates_of (1,570,058 samples, 1.19%)</title><rect x="57.2920%" y="117" width="1.1933%" height="15" fill="rgb(253,215,40)"/><text x="57.5420%" y="127.50"></text></g><g><title>predicates_defined_on (1,514,198 samples, 1.15%)</title><rect x="57.3344%" y="101" width="1.1508%" height="15" fill="rgb(211,81,21)"/><text x="57.5844%" y="111.50"></text></g><g><title>type_collecting (2,837,091 samples, 2.16%)</title><rect x="56.4477%" y="149" width="2.1563%" height="15" fill="rgb(208,190,38)"/><text x="56.6977%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,826,321 samples, 2.15%)</title><rect x="56.4558%" y="133" width="2.1481%" height="15" fill="rgb(235,213,38)"/><text x="56.7058%" y="143.50">c..</text></g><g><title>type_of (156,093 samples, 0.12%)</title><rect x="58.4853%" y="117" width="0.1186%" height="15" fill="rgb(237,122,38)"/><text x="58.7353%" y="127.50"></text></g><g><title>adt_sized_constraint (139,722 samples, 0.11%)</title><rect x="62.1135%" y="101" width="0.1062%" height="15" fill="rgb(244,218,35)"/><text x="62.3635%" y="111.50"></text></g><g><title>evaluate_obligation (874,383 samples, 0.66%)</title><rect x="61.5950%" y="117" width="0.6646%" height="15" fill="rgb(240,68,47)"/><text x="61.8450%" y="127.50"></text></g><g><title>implied_outlives_bounds (572,414 samples, 0.44%)</title><rect x="62.2647%" y="117" width="0.4350%" height="15" fill="rgb(210,16,53)"/><text x="62.5147%" y="127.50"></text></g><g><title>object_safety_violations (434,865 samples, 0.33%)</title><rect x="62.7156%" y="117" width="0.3305%" height="15" fill="rgb(235,124,12)"/><text x="62.9656%" y="127.50"></text></g><g><title>param_env (780,380 samples, 0.59%)</title><rect x="63.0461%" y="117" width="0.5931%" height="15" fill="rgb(224,169,11)"/><text x="63.2961%" y="127.50"></text></g><g><title>region_scope_tree (431,797 samples, 0.33%)</title><rect x="63.6993%" y="117" width="0.3282%" height="15" fill="rgb(250,166,2)"/><text x="63.9493%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,973,958 samples, 5.30%)</title><rect x="58.8103%" y="133" width="5.3004%" height="15" fill="rgb(242,216,29)"/><text x="59.0603%" y="143.50">check_..</text></g><g><title>implied_outlives_bounds (224,243 samples, 0.17%)</title><rect x="66.4157%" y="117" width="0.1704%" height="15" fill="rgb(230,116,27)"/><text x="66.6657%" y="127.50"></text></g><g><title>param_env (511,447 samples, 0.39%)</title><rect x="66.5861%" y="117" width="0.3887%" height="15" fill="rgb(228,99,48)"/><text x="66.8361%" y="127.50"></text></g><g><title>predicates_of (138,812 samples, 0.11%)</title><rect x="66.9748%" y="117" width="0.1055%" height="15" fill="rgb(253,11,6)"/><text x="67.2248%" y="127.50"></text></g><g><title>analysis (87,720,028 samples, 66.67%)</title><rect x="0.5619%" y="181" width="66.6694%" height="15" fill="rgb(247,143,39)"/><text x="0.8119%" y="191.50">analysis</text></g><g><title>type_check_crate (55,729,451 samples, 42.36%)</title><rect x="24.8756%" y="165" width="42.3558%" height="15" fill="rgb(236,97,10)"/><text x="25.1256%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,345,486 samples, 8.62%)</title><rect x="58.6085%" y="149" width="8.6229%" height="15" fill="rgb(233,208,19)"/><text x="58.8585%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (4,105,984 samples, 3.12%)</title><rect x="64.1107%" y="133" width="3.1207%" height="15" fill="rgb(216,164,2)"/><text x="64.3607%" y="143.50">che..</text></g><g><title>codegen_crate (664,897 samples, 0.51%)</title><rect x="67.2391%" y="181" width="0.5053%" height="15" fill="rgb(220,129,5)"/><text x="67.4891%" y="191.50"></text></g><g><title>AST_validation (281,193 samples, 0.21%)</title><rect x="67.8880%" y="165" width="0.2137%" height="15" fill="rgb(242,17,10)"/><text x="68.1380%" y="175.50"></text></g><g><title>metadata_load_macro (225,554 samples, 0.17%)</title><rect x="80.6137%" y="133" width="0.1714%" height="15" fill="rgb(242,107,0)"/><text x="80.8637%" y="143.50"></text></g><g><title>macro_expand_crate (18,888,261 samples, 14.36%)</title><rect x="68.2579%" y="165" width="14.3556%" height="15" fill="rgb(251,28,31)"/><text x="68.5079%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (18,874,180 samples, 14.34%)</title><rect x="68.2687%" y="149" width="14.3449%" height="15" fill="rgb(233,223,10)"/><text x="68.5187%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,405,717 samples, 1.83%)</title><rect x="80.7851%" y="133" width="1.8284%" height="15" fill="rgb(215,21,27)"/><text x="81.0351%" y="143.50">m..</text></g><g><title>metadata_register_crate (989,261 samples, 0.75%)</title><rect x="81.8616%" y="117" width="0.7519%" height="15" fill="rgb(232,23,21)"/><text x="82.1116%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (330,623 samples, 0.25%)</title><rect x="82.6169%" y="165" width="0.2513%" height="15" fill="rgb(244,5,23)"/><text x="82.8669%" y="175.50"></text></g><g><title>finalize_macro_resolutions (300,953 samples, 0.23%)</title><rect x="82.9170%" y="149" width="0.2287%" height="15" fill="rgb(226,81,46)"/><text x="83.1670%" y="159.50"></text></g><g><title>late_resolve_crate (4,697,222 samples, 3.57%)</title><rect x="83.1458%" y="149" width="3.5700%" height="15" fill="rgb(247,70,30)"/><text x="83.3958%" y="159.50">late..</text></g><g><title>configure_and_expand (25,156,121 samples, 19.12%)</title><rect x="67.7444%" y="181" width="19.1193%" height="15" fill="rgb(212,68,19)"/><text x="67.9944%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (5,257,088 samples, 4.00%)</title><rect x="82.8682%" y="165" width="3.9955%" height="15" fill="rgb(240,187,13)"/><text x="83.1182%" y="175.50">reso..</text></g><g><title>drop_ast (213,492 samples, 0.16%)</title><rect x="86.8637%" y="181" width="0.1623%" height="15" fill="rgb(223,113,26)"/><text x="87.1137%" y="191.50"></text></g><g><title>early_lint_checks (411,195 samples, 0.31%)</title><rect x="87.0366%" y="181" width="0.3125%" height="15" fill="rgb(206,192,2)"/><text x="87.2866%" y="191.50"></text></g><g><title>free_global_ctxt (3,430,608 samples, 2.61%)</title><rect x="87.3491%" y="181" width="2.6073%" height="15" fill="rgb(241,108,4)"/><text x="87.5991%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,540,927 samples, 1.17%)</title><rect x="89.9565%" y="181" width="1.1711%" height="15" fill="rgb(247,173,49)"/><text x="90.2065%" y="191.50"></text></g><g><title>hir_lowering (3,956,054 samples, 3.01%)</title><rect x="91.1276%" y="181" width="3.0067%" height="15" fill="rgb(224,114,35)"/><text x="91.3776%" y="191.50">hir..</text></g><g><title>parse_crate (6,255,720 samples, 4.75%)</title><rect x="94.1743%" y="181" width="4.7545%" height="15" fill="rgb(245,159,27)"/><text x="94.4243%" y="191.50">parse_..</text></g><g><title>prepare_outputs (258,383 samples, 0.20%)</title><rect x="98.9349%" y="181" width="0.1964%" height="15" fill="rgb(245,172,44)"/><text x="99.1849%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (745,908 samples, 0.57%)</title><rect x="99.1313%" y="181" width="0.5669%" height="15" fill="rgb(236,23,11)"/><text x="99.3813%" y="191.50"></text></g><g><title>all (131,574,598 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (131,574,598 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (287,374 samples, 0.22%)</title><rect x="99.7816%" y="181" width="0.2184%" height="15" fill="rgb(244,70,9)"/><text x="100.0316%" y="191.50"></text></g></svg></svg>