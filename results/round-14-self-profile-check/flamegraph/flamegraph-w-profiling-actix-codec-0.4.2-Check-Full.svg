<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (234,284 samples, 0.14%)</title><rect x="10.3005%" y="117" width="0.1357%" height="15" fill="rgb(227,0,7)"/><text x="10.5505%" y="127.50"></text></g><g><title>item_attrs (267,205 samples, 0.15%)</title><rect x="10.7923%" y="85" width="0.1547%" height="15" fill="rgb(217,0,24)"/><text x="11.0423%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (257,615 samples, 0.15%)</title><rect x="10.7978%" y="69" width="0.1492%" height="15" fill="rgb(221,193,54)"/><text x="11.0478%" y="79.50"></text></g><g><title>codegen_fn_attrs (392,876 samples, 0.23%)</title><rect x="10.7306%" y="101" width="0.2275%" height="15" fill="rgb(248,212,6)"/><text x="10.9806%" y="111.50"></text></g><g><title>is_copy_raw (175,940 samples, 0.10%)</title><rect x="12.8972%" y="85" width="0.1019%" height="15" fill="rgb(208,68,35)"/><text x="13.1472%" y="95.50"></text></g><g><title>is_copy_raw (174,902 samples, 0.10%)</title><rect x="13.1181%" y="53" width="0.1013%" height="15" fill="rgb(232,128,0)"/><text x="13.3681%" y="63.50"></text></g><g><title>adt_drop_tys (286,854 samples, 0.17%)</title><rect x="13.0876%" y="69" width="0.1661%" height="15" fill="rgb(207,160,47)"/><text x="13.3376%" y="79.50"></text></g><g><title>is_copy_raw (1,172,350 samples, 0.68%)</title><rect x="13.2537%" y="69" width="0.6788%" height="15" fill="rgb(228,23,34)"/><text x="13.5037%" y="79.50"></text></g><g><title>evaluate_obligation (1,005,949 samples, 0.58%)</title><rect x="13.3500%" y="53" width="0.5825%" height="15" fill="rgb(218,30,26)"/><text x="13.6000%" y="63.50"></text></g><g><title>needs_drop_raw (1,609,596 samples, 0.93%)</title><rect x="13.0022%" y="85" width="0.9320%" height="15" fill="rgb(220,122,19)"/><text x="13.2522%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (203,123 samples, 0.12%)</title><rect x="14.0892%" y="69" width="0.1176%" height="15" fill="rgb(250,228,42)"/><text x="14.3392%" y="79.50"></text></g><g><title>specialization_graph_of (245,334 samples, 0.14%)</title><rect x="14.2845%" y="69" width="0.1421%" height="15" fill="rgb(240,193,28)"/><text x="14.5345%" y="79.50"></text></g><g><title>resolve_instance (918,571 samples, 0.53%)</title><rect x="13.9489%" y="85" width="0.5319%" height="15" fill="rgb(216,20,37)"/><text x="14.1989%" y="95.50"></text></g><g><title>thir_body (1,148,788 samples, 0.67%)</title><rect x="14.4976%" y="85" width="0.6652%" height="15" fill="rgb(206,188,39)"/><text x="14.7476%" y="95.50"></text></g><g><title>mir_const (9,436,513 samples, 5.46%)</title><rect x="9.7203%" y="133" width="5.4639%" height="15" fill="rgb(217,207,13)"/><text x="9.9703%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (8,200,238 samples, 4.75%)</title><rect x="10.4361%" y="117" width="4.7480%" height="15" fill="rgb(231,73,38)"/><text x="10.6861%" y="127.50">unsafe..</text></g><g><title>mir_built (7,298,767 samples, 4.23%)</title><rect x="10.9581%" y="101" width="4.2261%" height="15" fill="rgb(225,20,46)"/><text x="11.2081%" y="111.50">mir_b..</text></g><g><title>mir_const (711,635 samples, 0.41%)</title><rect x="15.3658%" y="117" width="0.4120%" height="15" fill="rgb(210,31,41)"/><text x="15.6158%" y="127.50"></text></g><g><title>unsafety_check_result (564,734 samples, 0.33%)</title><rect x="15.4509%" y="101" width="0.3270%" height="15" fill="rgb(221,200,47)"/><text x="15.7009%" y="111.50"></text></g><g><title>mir_built (505,803 samples, 0.29%)</title><rect x="15.4850%" y="85" width="0.2929%" height="15" fill="rgb(226,26,5)"/><text x="15.7350%" y="95.50"></text></g><g><title>mir_const_qualif (1,047,880 samples, 0.61%)</title><rect x="15.1842%" y="133" width="0.6067%" height="15" fill="rgb(249,33,26)"/><text x="15.4342%" y="143.50"></text></g><g><title>mir_promoted (11,605,056 samples, 6.72%)</title><rect x="9.0722%" y="149" width="6.7195%" height="15" fill="rgb(235,183,28)"/><text x="9.3222%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (386,564 samples, 0.22%)</title><rect x="15.7925%" y="149" width="0.2238%" height="15" fill="rgb(221,5,38)"/><text x="16.0425%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (405,715 samples, 0.23%)</title><rect x="16.0163%" y="149" width="0.2349%" height="15" fill="rgb(247,18,42)"/><text x="16.2663%" y="159.50"></text></g><g><title>normalize_projection_ty (221,443 samples, 0.13%)</title><rect x="16.1230%" y="133" width="0.1282%" height="15" fill="rgb(241,131,45)"/><text x="16.3730%" y="143.50"></text></g><g><title>type_op_normalize_ty (215,091 samples, 0.12%)</title><rect x="16.3425%" y="149" width="0.1245%" height="15" fill="rgb(249,31,29)"/><text x="16.5925%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,055,265 samples, 1.19%)</title><rect x="16.4670%" y="149" width="1.1900%" height="15" fill="rgb(225,111,53)"/><text x="16.7170%" y="159.50"></text></g><g><title>MIR_borrow_checking (29,301,344 samples, 16.97%)</title><rect x="0.6967%" y="181" width="16.9659%" height="15" fill="rgb(238,160,17)"/><text x="0.9467%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (29,138,633 samples, 16.87%)</title><rect x="0.7909%" y="165" width="16.8716%" height="15" fill="rgb(214,148,48)"/><text x="1.0409%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (492,926 samples, 0.29%)</title><rect x="17.6626%" y="181" width="0.2854%" height="15" fill="rgb(232,36,49)"/><text x="17.9126%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (412,714 samples, 0.24%)</title><rect x="17.7090%" y="165" width="0.2390%" height="15" fill="rgb(209,103,24)"/><text x="17.9590%" y="175.50"></text></g><g><title>hir_module_items (237,752 samples, 0.14%)</title><rect x="17.9480%" y="181" width="0.1377%" height="15" fill="rgb(229,88,8)"/><text x="18.1980%" y="191.50"></text></g><g><title>codegen_fn_attrs (362,752 samples, 0.21%)</title><rect x="18.3978%" y="117" width="0.2100%" height="15" fill="rgb(213,181,19)"/><text x="18.6478%" y="127.50"></text></g><g><title>codegen_fn_attrs (568,906 samples, 0.33%)</title><rect x="18.2834%" y="149" width="0.3294%" height="15" fill="rgb(254,191,54)"/><text x="18.5334%" y="159.50"></text></g><g><title>should_inherit_track_caller (506,193 samples, 0.29%)</title><rect x="18.3197%" y="133" width="0.2931%" height="15" fill="rgb(241,83,37)"/><text x="18.5697%" y="143.50"></text></g><g><title>check_mod_attrs (882,861 samples, 0.51%)</title><rect x="18.1016%" y="165" width="0.5112%" height="15" fill="rgb(233,36,39)"/><text x="18.3516%" y="175.50"></text></g><g><title>lookup_deprecation_entry (226,673 samples, 0.13%)</title><rect x="18.8994%" y="149" width="0.1312%" height="15" fill="rgb(226,3,54)"/><text x="19.1494%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (601,027 samples, 0.35%)</title><rect x="18.7581%" y="165" width="0.3480%" height="15" fill="rgb(245,192,40)"/><text x="19.0081%" y="175.50"></text></g><g><title>misc_checking_1 (1,819,650 samples, 1.05%)</title><rect x="18.0859%" y="181" width="1.0536%" height="15" fill="rgb(238,167,29)"/><text x="18.3359%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (558,277 samples, 0.32%)</title><rect x="19.1404%" y="165" width="0.3232%" height="15" fill="rgb(232,182,51)"/><text x="19.3904%" y="175.50"></text></g><g><title>check_mod_liveness (441,625 samples, 0.26%)</title><rect x="19.2080%" y="149" width="0.2557%" height="15" fill="rgb(231,60,39)"/><text x="19.4580%" y="159.50"></text></g><g><title>misc_checking_2 (1,231,024 samples, 0.71%)</title><rect x="19.1395%" y="181" width="0.7128%" height="15" fill="rgb(208,69,12)"/><text x="19.3895%" y="191.50"></text></g><g><title>match_checking (671,087 samples, 0.39%)</title><rect x="19.4637%" y="165" width="0.3886%" height="15" fill="rgb(235,93,37)"/><text x="19.7137%" y="175.50"></text></g><g><title>check_match (631,926 samples, 0.37%)</title><rect x="19.4864%" y="149" width="0.3659%" height="15" fill="rgb(213,116,39)"/><text x="19.7364%" y="159.50"></text></g><g><title>check_private_in_public (296,263 samples, 0.17%)</title><rect x="19.8582%" y="165" width="0.1715%" height="15" fill="rgb(222,207,29)"/><text x="20.1082%" y="175.50"></text></g><g><title>death_checking (915,610 samples, 0.53%)</title><rect x="20.0297%" y="165" width="0.5302%" height="15" fill="rgb(206,96,30)"/><text x="20.2797%" y="175.50"></text></g><g><title>item_attrs (211,082 samples, 0.12%)</title><rect x="20.4376%" y="149" width="0.1222%" height="15" fill="rgb(218,138,4)"/><text x="20.6876%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (208,712 samples, 0.12%)</title><rect x="20.4390%" y="133" width="0.1208%" height="15" fill="rgb(250,191,14)"/><text x="20.6890%" y="143.50"></text></g><g><title>eval_to_const_value_raw (187,462 samples, 0.11%)</title><rect x="21.0903%" y="133" width="0.1085%" height="15" fill="rgb(239,60,40)"/><text x="21.3403%" y="143.50"></text></g><g><title>eval_to_const_value_raw (184,142 samples, 0.11%)</title><rect x="21.0922%" y="117" width="0.1066%" height="15" fill="rgb(206,27,48)"/><text x="21.3422%" y="127.50"></text></g><g><title>eval_to_allocation_raw (176,682 samples, 0.10%)</title><rect x="21.0965%" y="101" width="0.1023%" height="15" fill="rgb(225,35,8)"/><text x="21.3465%" y="111.50"></text></g><g><title>param_env (312,765 samples, 0.18%)</title><rect x="21.1988%" y="133" width="0.1811%" height="15" fill="rgb(250,213,24)"/><text x="21.4488%" y="143.50"></text></g><g><title>crate_lints (2,625,819 samples, 1.52%)</title><rect x="20.5607%" y="149" width="1.5204%" height="15" fill="rgb(247,123,22)"/><text x="20.8107%" y="159.50"></text></g><g><title>type_of (1,203,352 samples, 0.70%)</title><rect x="21.3843%" y="133" width="0.6968%" height="15" fill="rgb(231,138,38)"/><text x="21.6343%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (944,890 samples, 0.55%)</title><rect x="21.5340%" y="117" width="0.5471%" height="15" fill="rgb(231,145,46)"/><text x="21.7840%" y="127.50"></text></g><g><title>lint_checking (3,111,675 samples, 1.80%)</title><rect x="20.5598%" y="165" width="1.8017%" height="15" fill="rgb(251,118,11)"/><text x="20.8098%" y="175.50">l..</text></g><g><title>module_lints (484,356 samples, 0.28%)</title><rect x="22.0811%" y="149" width="0.2804%" height="15" fill="rgb(217,147,25)"/><text x="22.3311%" y="159.50"></text></g><g><title>lint_mod (479,566 samples, 0.28%)</title><rect x="22.0839%" y="133" width="0.2777%" height="15" fill="rgb(247,81,37)"/><text x="22.3339%" y="143.50"></text></g><g><title>privacy_access_levels (301,613 samples, 0.17%)</title><rect x="22.3615%" y="165" width="0.1746%" height="15" fill="rgb(209,12,38)"/><text x="22.6115%" y="175.50"></text></g><g><title>privacy_checking_modules (1,109,952 samples, 0.64%)</title><rect x="22.5362%" y="165" width="0.6427%" height="15" fill="rgb(227,1,9)"/><text x="22.7862%" y="175.50"></text></g><g><title>check_mod_privacy (1,106,752 samples, 0.64%)</title><rect x="22.5380%" y="149" width="0.6408%" height="15" fill="rgb(248,47,43)"/><text x="22.7880%" y="159.50"></text></g><g><title>misc_checking_3 (5,762,203 samples, 3.34%)</title><rect x="19.8523%" y="181" width="3.3364%" height="15" fill="rgb(221,10,30)"/><text x="20.1023%" y="191.50">mis..</text></g><g><title>adt_destructor (419,695 samples, 0.24%)</title><rect x="23.2957%" y="133" width="0.2430%" height="15" fill="rgb(210,229,1)"/><text x="23.5457%" y="143.50"></text></g><g><title>coherent_trait (416,485 samples, 0.24%)</title><rect x="23.2976%" y="117" width="0.2412%" height="15" fill="rgb(222,148,37)"/><text x="23.5476%" y="127.50"></text></g><g><title>specialization_graph_of (415,415 samples, 0.24%)</title><rect x="23.2982%" y="101" width="0.2405%" height="15" fill="rgb(234,67,33)"/><text x="23.5482%" y="111.50"></text></g><g><title>impl_trait_ref (251,484 samples, 0.15%)</title><rect x="23.3931%" y="85" width="0.1456%" height="15" fill="rgb(247,98,35)"/><text x="23.6431%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (225,624 samples, 0.13%)</title><rect x="23.4081%" y="69" width="0.1306%" height="15" fill="rgb(247,138,52)"/><text x="23.6581%" y="79.50"></text></g><g><title>impl_parent (3,877,709 samples, 2.25%)</title><rect x="27.1932%" y="117" width="2.2452%" height="15" fill="rgb(213,79,30)"/><text x="27.4432%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (2,004,661 samples, 1.16%)</title><rect x="28.2777%" y="101" width="1.1607%" height="15" fill="rgb(246,177,23)"/><text x="28.5277%" y="111.50"></text></g><g><title>impl_trait_ref (6,892,031 samples, 3.99%)</title><rect x="29.4384%" y="117" width="3.9906%" height="15" fill="rgb(230,62,27)"/><text x="29.6884%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,420,036 samples, 3.14%)</title><rect x="30.2907%" y="101" width="3.1383%" height="15" fill="rgb(216,154,8)"/><text x="30.5407%" y="111.50">met..</text></g><g><title>coherent_trait (19,143,032 samples, 11.08%)</title><rect x="23.2592%" y="149" width="11.0841%" height="15" fill="rgb(244,35,45)"/><text x="23.5092%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (18,501,096 samples, 10.71%)</title><rect x="23.6309%" y="133" width="10.7124%" height="15" fill="rgb(251,115,12)"/><text x="23.8809%" y="143.50">specialization_g..</text></g><g><title>trait_impls_of (1,533,568 samples, 0.89%)</title><rect x="33.4554%" y="117" width="0.8880%" height="15" fill="rgb(240,54,50)"/><text x="33.7054%" y="127.50"></text></g><g><title>implementations_of_trait (505,407 samples, 0.29%)</title><rect x="34.0507%" y="101" width="0.2926%" height="15" fill="rgb(233,84,52)"/><text x="34.3007%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (330,005 samples, 0.19%)</title><rect x="34.1522%" y="85" width="0.1911%" height="15" fill="rgb(207,117,47)"/><text x="34.4022%" y="95.50"></text></g><g><title>orphan_check_crate (338,644 samples, 0.20%)</title><rect x="34.3677%" y="149" width="0.1961%" height="15" fill="rgb(249,43,39)"/><text x="34.6177%" y="159.50"></text></g><g><title>coherence_checking (19,568,737 samples, 11.33%)</title><rect x="23.2397%" y="165" width="11.3306%" height="15" fill="rgb(209,38,44)"/><text x="23.4897%" y="175.50">coherence_checking</text></g><g><title>associated_item (399,374 samples, 0.23%)</title><rect x="49.2537%" y="101" width="0.2312%" height="15" fill="rgb(236,212,23)"/><text x="49.5037%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (307,112 samples, 0.18%)</title><rect x="49.3072%" y="85" width="0.1778%" height="15" fill="rgb(242,79,21)"/><text x="49.5572%" y="95.50"></text></g><g><title>associated_items (584,295 samples, 0.34%)</title><rect x="49.1600%" y="117" width="0.3383%" height="15" fill="rgb(211,96,35)"/><text x="49.4100%" y="127.50"></text></g><g><title>adt_dtorck_constraint (200,992 samples, 0.12%)</title><rect x="49.8412%" y="85" width="0.1164%" height="15" fill="rgb(253,215,40)"/><text x="50.0912%" y="95.50"></text></g><g><title>adt_dtorck_constraint (401,995 samples, 0.23%)</title><rect x="49.7492%" y="101" width="0.2328%" height="15" fill="rgb(211,81,21)"/><text x="49.9992%" y="111.50"></text></g><g><title>dropck_outlives (747,767 samples, 0.43%)</title><rect x="49.5641%" y="117" width="0.4330%" height="15" fill="rgb(208,190,38)"/><text x="49.8141%" y="127.50"></text></g><g><title>predicates_of (177,183 samples, 0.10%)</title><rect x="51.0436%" y="101" width="0.1026%" height="15" fill="rgb(235,213,38)"/><text x="51.2936%" y="111.50"></text></g><g><title>specializes (195,834 samples, 0.11%)</title><rect x="51.1462%" y="101" width="0.1134%" height="15" fill="rgb(237,122,38)"/><text x="51.3962%" y="111.50"></text></g><g><title>trait_impls_of (268,562 samples, 0.16%)</title><rect x="51.2645%" y="101" width="0.1555%" height="15" fill="rgb(244,218,35)"/><text x="51.5145%" y="111.50"></text></g><g><title>evaluate_obligation (2,460,644 samples, 1.42%)</title><rect x="49.9970%" y="117" width="1.4247%" height="15" fill="rgb(240,68,47)"/><text x="50.2470%" y="127.50"></text></g><g><title>fn_sig (182,261 samples, 0.11%)</title><rect x="51.4414%" y="117" width="0.1055%" height="15" fill="rgb(210,16,53)"/><text x="51.6914%" y="127.50"></text></g><g><title>item_attrs (231,431 samples, 0.13%)</title><rect x="51.6839%" y="117" width="0.1340%" height="15" fill="rgb(235,124,12)"/><text x="51.9339%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (221,831 samples, 0.13%)</title><rect x="51.6895%" y="101" width="0.1284%" height="15" fill="rgb(224,169,11)"/><text x="51.9395%" y="111.50"></text></g><g><title>evaluate_obligation (205,562 samples, 0.12%)</title><rect x="52.0938%" y="101" width="0.1190%" height="15" fill="rgb(250,166,2)"/><text x="52.3438%" y="111.50"></text></g><g><title>method_autoderef_steps (601,868 samples, 0.35%)</title><rect x="51.8730%" y="117" width="0.3485%" height="15" fill="rgb(242,216,29)"/><text x="52.1230%" y="127.50"></text></g><g><title>predicates_of (493,874 samples, 0.29%)</title><rect x="52.3361%" y="117" width="0.2860%" height="15" fill="rgb(230,116,27)"/><text x="52.5861%" y="127.50"></text></g><g><title>predicates_defined_on (344,172 samples, 0.20%)</title><rect x="52.4228%" y="101" width="0.1993%" height="15" fill="rgb(228,99,48)"/><text x="52.6728%" y="111.50"></text></g><g><title>evaluate_obligation (397,845 samples, 0.23%)</title><rect x="53.0729%" y="101" width="0.2304%" height="15" fill="rgb(253,11,6)"/><text x="53.3229%" y="111.50"></text></g><g><title>typeck (1,201,123 samples, 0.70%)</title><rect x="52.6973%" y="117" width="0.6955%" height="15" fill="rgb(247,143,39)"/><text x="52.9473%" y="127.50"></text></g><g><title>item_bodies_checking (32,523,610 samples, 18.83%)</title><rect x="34.5986%" y="165" width="18.8316%" height="15" fill="rgb(236,97,10)"/><text x="34.8486%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (32,519,940 samples, 18.83%)</title><rect x="34.6007%" y="149" width="18.8295%" height="15" fill="rgb(233,208,19)"/><text x="34.8507%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (32,401,408 samples, 18.76%)</title><rect x="34.6693%" y="133" width="18.7608%" height="15" fill="rgb(216,164,2)"/><text x="34.9193%" y="143.50">typeck</text></g><g><title>explicit_predicates_of (239,542 samples, 0.14%)</title><rect x="54.5755%" y="101" width="0.1387%" height="15" fill="rgb(220,129,5)"/><text x="54.8255%" y="111.50"></text></g><g><title>predicates_of (297,104 samples, 0.17%)</title><rect x="54.5493%" y="133" width="0.1720%" height="15" fill="rgb(242,17,10)"/><text x="54.7993%" y="143.50"></text></g><g><title>predicates_defined_on (279,483 samples, 0.16%)</title><rect x="54.5595%" y="117" width="0.1618%" height="15" fill="rgb(242,107,0)"/><text x="54.8095%" y="127.50"></text></g><g><title>generics_of (207,362 samples, 0.12%)</title><rect x="55.1919%" y="101" width="0.1201%" height="15" fill="rgb(251,28,31)"/><text x="55.4419%" y="111.50"></text></g><g><title>impl_trait_ref (197,050 samples, 0.11%)</title><rect x="55.3246%" y="101" width="0.1141%" height="15" fill="rgb(233,223,10)"/><text x="55.5746%" y="111.50"></text></g><g><title>specializes (209,692 samples, 0.12%)</title><rect x="55.4746%" y="101" width="0.1214%" height="15" fill="rgb(215,21,27)"/><text x="55.7246%" y="111.50"></text></g><g><title>evaluate_obligation (1,177,644 samples, 0.68%)</title><rect x="54.9386%" y="117" width="0.6819%" height="15" fill="rgb(232,23,21)"/><text x="55.1886%" y="127.50"></text></g><g><title>item_types_checking (3,872,983 samples, 2.24%)</title><rect x="53.4302%" y="165" width="2.2425%" height="15" fill="rgb(244,5,23)"/><text x="53.6802%" y="175.50">i..</text></g><g><title>check_mod_item_types (3,868,053 samples, 2.24%)</title><rect x="53.4330%" y="149" width="2.2397%" height="15" fill="rgb(226,81,46)"/><text x="53.6830%" y="159.50">c..</text></g><g><title>typeck (1,638,778 samples, 0.95%)</title><rect x="54.7238%" y="133" width="0.9489%" height="15" fill="rgb(247,70,30)"/><text x="54.9738%" y="143.50"></text></g><g><title>fn_sig (562,179 samples, 0.33%)</title><rect x="55.8909%" y="133" width="0.3255%" height="15" fill="rgb(212,68,19)"/><text x="56.1409%" y="143.50"></text></g><g><title>named_region_map (596,345 samples, 0.35%)</title><rect x="56.3207%" y="117" width="0.3453%" height="15" fill="rgb(240,187,13)"/><text x="56.5707%" y="127.50"></text></g><g><title>resolve_lifetimes (572,675 samples, 0.33%)</title><rect x="56.3344%" y="101" width="0.3316%" height="15" fill="rgb(223,113,26)"/><text x="56.5844%" y="111.50"></text></g><g><title>lint_levels (272,603 samples, 0.16%)</title><rect x="56.5082%" y="85" width="0.1578%" height="15" fill="rgb(206,192,2)"/><text x="56.7582%" y="95.50"></text></g><g><title>generics_of (796,656 samples, 0.46%)</title><rect x="56.2164%" y="133" width="0.4613%" height="15" fill="rgb(241,108,4)"/><text x="56.4664%" y="143.50"></text></g><g><title>explicit_predicates_of (457,615 samples, 0.26%)</title><rect x="56.8480%" y="101" width="0.2650%" height="15" fill="rgb(247,173,49)"/><text x="57.0980%" y="111.50"></text></g><g><title>predicates_of (1,024,251 samples, 0.59%)</title><rect x="56.7429%" y="133" width="0.5931%" height="15" fill="rgb(224,114,35)"/><text x="56.9929%" y="143.50"></text></g><g><title>predicates_defined_on (954,670 samples, 0.55%)</title><rect x="56.7832%" y="117" width="0.5528%" height="15" fill="rgb(245,159,27)"/><text x="57.0332%" y="127.50"></text></g><g><title>inferred_outlives_of (385,195 samples, 0.22%)</title><rect x="57.1130%" y="101" width="0.2230%" height="15" fill="rgb(245,172,44)"/><text x="57.3630%" y="111.50"></text></g><g><title>inferred_outlives_crate (357,644 samples, 0.21%)</title><rect x="57.1289%" y="85" width="0.2071%" height="15" fill="rgb(236,23,11)"/><text x="57.3789%" y="95.50"></text></g><g><title>type_of (179,402 samples, 0.10%)</title><rect x="57.2321%" y="69" width="0.1039%" height="15" fill="rgb(205,117,38)"/><text x="57.4821%" y="79.50"></text></g><g><title>type_collecting (3,017,844 samples, 1.75%)</title><rect x="55.6747%" y="165" width="1.7474%" height="15" fill="rgb(237,72,25)"/><text x="55.9247%" y="175.50"></text></g><g><title>collect_mod_item_types (3,003,754 samples, 1.74%)</title><rect x="55.6828%" y="149" width="1.7392%" height="15" fill="rgb(244,70,9)"/><text x="55.9328%" y="159.50"></text></g><g><title>adt_def (412,725 samples, 0.24%)</title><rect x="59.9979%" y="85" width="0.2390%" height="15" fill="rgb(217,125,39)"/><text x="60.2479%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (412,265 samples, 0.24%)</title><rect x="59.9982%" y="69" width="0.2387%" height="15" fill="rgb(235,36,10)"/><text x="60.2482%" y="79.50"></text></g><g><title>item_attrs (404,475 samples, 0.23%)</title><rect x="60.0027%" y="53" width="0.2342%" height="15" fill="rgb(251,123,47)"/><text x="60.2527%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (403,755 samples, 0.23%)</title><rect x="60.0031%" y="37" width="0.2338%" height="15" fill="rgb(221,13,13)"/><text x="60.2531%" y="47.50"></text></g><g><title>adt_sized_constraint (455,235 samples, 0.26%)</title><rect x="59.9951%" y="101" width="0.2636%" height="15" fill="rgb(238,131,9)"/><text x="60.2451%" y="111.50"></text></g><g><title>adt_sized_constraint (604,286 samples, 0.35%)</title><rect x="59.9115%" y="117" width="0.3499%" height="15" fill="rgb(211,50,8)"/><text x="60.1615%" y="127.50"></text></g><g><title>evaluate_obligation (1,294,066 samples, 0.75%)</title><rect x="59.5736%" y="133" width="0.7493%" height="15" fill="rgb(245,182,24)"/><text x="59.8236%" y="143.50"></text></g><g><title>implied_outlives_bounds (350,911 samples, 0.20%)</title><rect x="60.3464%" y="133" width="0.2032%" height="15" fill="rgb(242,14,37)"/><text x="60.5964%" y="143.50"></text></g><g><title>param_env (483,396 samples, 0.28%)</title><rect x="60.5610%" y="133" width="0.2799%" height="15" fill="rgb(246,228,12)"/><text x="60.8110%" y="143.50"></text></g><g><title>region_scope_tree (516,578 samples, 0.30%)</title><rect x="60.9133%" y="133" width="0.2991%" height="15" fill="rgb(213,55,15)"/><text x="61.1633%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,434,890 samples, 3.73%)</title><rect x="57.5852%" y="149" width="3.7259%" height="15" fill="rgb(209,9,3)"/><text x="57.8352%" y="159.50">chec..</text></g><g><title>evaluate_obligation (384,147 samples, 0.22%)</title><rect x="62.2643%" y="133" width="0.2224%" height="15" fill="rgb(230,59,30)"/><text x="62.5143%" y="143.50"></text></g><g><title>param_env (334,791 samples, 0.19%)</title><rect x="62.5473%" y="133" width="0.1938%" height="15" fill="rgb(209,121,21)"/><text x="62.7973%" y="143.50"></text></g><g><title>predicates_of (181,361 samples, 0.11%)</title><rect x="62.7412%" y="133" width="0.1050%" height="15" fill="rgb(220,109,13)"/><text x="62.9912%" y="143.50"></text></g><g><title>check_item_well_formed (2,966,252 samples, 1.72%)</title><rect x="61.3111%" y="149" width="1.7175%" height="15" fill="rgb(232,18,1)"/><text x="61.5611%" y="159.50"></text></g><g><title>analysis (108,134,697 samples, 62.61%)</title><rect x="0.4938%" y="197" width="62.6114%" height="15" fill="rgb(215,41,42)"/><text x="0.7438%" y="207.50">analysis</text></g><g><title>type_check_crate (68,938,973 samples, 39.92%)</title><rect x="23.1886%" y="181" width="39.9166%" height="15" fill="rgb(224,123,36)"/><text x="23.4386%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,808,468 samples, 5.68%)</title><rect x="57.4260%" y="165" width="5.6792%" height="15" fill="rgb(240,125,3)"/><text x="57.6760%" y="175.50">wf_chec..</text></g><g><title>codegen_crate (406,835 samples, 0.24%)</title><rect x="63.1111%" y="197" width="0.2356%" height="15" fill="rgb(205,98,50)"/><text x="63.3611%" y="207.50"></text></g><g><title>AST_validation (184,842 samples, 0.11%)</title><rect x="63.4740%" y="181" width="0.1070%" height="15" fill="rgb(205,185,37)"/><text x="63.7240%" y="191.50"></text></g><g><title>metadata_load_macro (2,543,619 samples, 1.47%)</title><rect x="87.3352%" y="149" width="1.4728%" height="15" fill="rgb(238,207,15)"/><text x="87.5852%" y="159.50"></text></g><g><title>metadata_register_crate (3,100,323 samples, 1.80%)</title><rect x="88.8080%" y="149" width="1.7951%" height="15" fill="rgb(213,199,42)"/><text x="89.0580%" y="159.50">m..</text></g><g><title>metadata_register_crate (1,071,830 samples, 0.62%)</title><rect x="89.9825%" y="133" width="0.6206%" height="15" fill="rgb(235,201,11)"/><text x="90.2325%" y="143.50"></text></g><g><title>macro_expand_crate (46,792,228 samples, 27.09%)</title><rect x="63.6772%" y="181" width="27.0933%" height="15" fill="rgb(207,46,11)"/><text x="63.9272%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (46,772,618 samples, 27.08%)</title><rect x="63.6886%" y="165" width="27.0820%" height="15" fill="rgb(241,35,35)"/><text x="63.9386%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (289,202 samples, 0.17%)</title><rect x="90.6031%" y="149" width="0.1675%" height="15" fill="rgb(243,32,47)"/><text x="90.8531%" y="159.50"></text></g><g><title>finalize_macro_resolutions (259,053 samples, 0.15%)</title><rect x="90.8931%" y="165" width="0.1500%" height="15" fill="rgb(247,202,23)"/><text x="91.1431%" y="175.50"></text></g><g><title>late_resolve_crate (2,399,967 samples, 1.39%)</title><rect x="91.0431%" y="165" width="1.3896%" height="15" fill="rgb(219,102,11)"/><text x="91.2931%" y="175.50"></text></g><g><title>configure_and_expand (50,361,607 samples, 29.16%)</title><rect x="63.3466%" y="197" width="29.1600%" height="15" fill="rgb(243,110,44)"/><text x="63.5966%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,876,802 samples, 1.67%)</title><rect x="90.8410%" y="181" width="1.6657%" height="15" fill="rgb(222,74,54)"/><text x="91.0910%" y="191.50"></text></g><g><title>drop_ast (259,093 samples, 0.15%)</title><rect x="92.5067%" y="197" width="0.1500%" height="15" fill="rgb(216,99,12)"/><text x="92.7567%" y="207.50"></text></g><g><title>early_lint_checks (533,826 samples, 0.31%)</title><rect x="92.6682%" y="197" width="0.3091%" height="15" fill="rgb(226,22,26)"/><text x="92.9182%" y="207.50"></text></g><g><title>free_global_ctxt (4,263,717 samples, 2.47%)</title><rect x="92.9773%" y="197" width="2.4687%" height="15" fill="rgb(217,163,10)"/><text x="93.2273%" y="207.50">fr..</text></g><g><title>mir_for_ctfe (228,342 samples, 0.13%)</title><rect x="96.3580%" y="181" width="0.1322%" height="15" fill="rgb(213,25,53)"/><text x="96.6080%" y="191.50"></text></g><g><title>generate_crate_metadata (1,871,220 samples, 1.08%)</title><rect x="95.4460%" y="197" width="1.0835%" height="15" fill="rgb(252,105,26)"/><text x="95.6960%" y="207.50"></text></g><g><title>hir_lowering (3,768,382 samples, 2.18%)</title><rect x="96.5295%" y="197" width="2.1819%" height="15" fill="rgb(220,39,43)"/><text x="96.7795%" y="207.50">h..</text></g><g><title>parse_crate (408,274 samples, 0.24%)</title><rect x="98.7462%" y="197" width="0.2364%" height="15" fill="rgb(229,68,48)"/><text x="98.9962%" y="207.50"></text></g><g><title>prepare_outputs (194,982 samples, 0.11%)</title><rect x="98.9885%" y="197" width="0.1129%" height="15" fill="rgb(252,8,32)"/><text x="99.2385%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,116,522 samples, 0.65%)</title><rect x="99.1014%" y="197" width="0.6465%" height="15" fill="rgb(223,20,43)"/><text x="99.3514%" y="207.50"></text></g><g><title>all (172,707,711 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (172,707,711 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (349,434 samples, 0.20%)</title><rect x="99.7977%" y="197" width="0.2023%" height="15" fill="rgb(249,185,26)"/><text x="100.0477%" y="207.50"></text></g></svg></svg>