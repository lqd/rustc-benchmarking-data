<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (146,591 samples, 0.20%)</title><rect x="7.4246%" y="149" width="0.2025%" height="15" fill="rgb(227,0,7)"/><text x="7.6746%" y="159.50"></text></g><g><title>item_attrs (95,580 samples, 0.13%)</title><rect x="7.9101%" y="117" width="0.1320%" height="15" fill="rgb(217,0,24)"/><text x="8.1601%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (85,590 samples, 0.12%)</title><rect x="7.9239%" y="101" width="0.1182%" height="15" fill="rgb(221,193,54)"/><text x="8.1739%" y="111.50"></text></g><g><title>codegen_fn_attrs (162,331 samples, 0.22%)</title><rect x="7.8347%" y="133" width="0.2242%" height="15" fill="rgb(248,212,6)"/><text x="8.0847%" y="143.50"></text></g><g><title>eval_to_const_value_raw (80,321 samples, 0.11%)</title><rect x="9.1658%" y="117" width="0.1109%" height="15" fill="rgb(208,68,35)"/><text x="9.4158%" y="127.50"></text></g><g><title>adt_drop_tys (179,172 samples, 0.25%)</title><rect x="9.3758%" y="101" width="0.2475%" height="15" fill="rgb(232,128,0)"/><text x="9.6258%" y="111.50"></text></g><g><title>is_copy_raw (527,617 samples, 0.73%)</title><rect x="9.6232%" y="101" width="0.7287%" height="15" fill="rgb(207,160,47)"/><text x="9.8732%" y="111.50"></text></g><g><title>evaluate_obligation (451,226 samples, 0.62%)</title><rect x="9.7287%" y="85" width="0.6232%" height="15" fill="rgb(228,23,34)"/><text x="9.9787%" y="95.50"></text></g><g><title>needs_drop_raw (775,190 samples, 1.07%)</title><rect x="9.2852%" y="117" width="1.0707%" height="15" fill="rgb(218,30,26)"/><text x="9.5352%" y="127.50"></text></g><g><title>resolve_instance (162,301 samples, 0.22%)</title><rect x="10.3694%" y="117" width="0.2242%" height="15" fill="rgb(220,122,19)"/><text x="10.6194%" y="127.50"></text></g><g><title>thir_body (263,712 samples, 0.36%)</title><rect x="10.6074%" y="117" width="0.3642%" height="15" fill="rgb(250,228,42)"/><text x="10.8574%" y="127.50"></text></g><g><title>mir_const (2,861,041 samples, 3.95%)</title><rect x="7.0276%" y="165" width="3.9515%" height="15" fill="rgb(240,193,28)"/><text x="7.2776%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (2,426,967 samples, 3.35%)</title><rect x="7.6271%" y="149" width="3.3520%" height="15" fill="rgb(216,20,37)"/><text x="7.8771%" y="159.50">uns..</text></g><g><title>mir_built (2,114,344 samples, 2.92%)</title><rect x="8.0589%" y="133" width="2.9202%" height="15" fill="rgb(206,188,39)"/><text x="8.3089%" y="143.50">mi..</text></g><g><title>mir_promoted (3,130,982 samples, 4.32%)</title><rect x="6.6714%" y="181" width="4.3244%" height="15" fill="rgb(217,207,13)"/><text x="6.9214%" y="191.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (275,054 samples, 0.38%)</title><rect x="10.9957%" y="181" width="0.3799%" height="15" fill="rgb(231,73,38)"/><text x="11.2457%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (88,021 samples, 0.12%)</title><rect x="11.3756%" y="181" width="0.1216%" height="15" fill="rgb(225,20,46)"/><text x="11.6256%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,126,855 samples, 1.56%)</title><rect x="11.5860%" y="181" width="1.5564%" height="15" fill="rgb(210,31,41)"/><text x="11.8360%" y="191.50"></text></g><g><title>MIR_borrow_checking (8,627,376 samples, 11.92%)</title><rect x="1.2328%" y="213" width="11.9157%" height="15" fill="rgb(221,200,47)"/><text x="1.4828%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,600,826 samples, 11.88%)</title><rect x="1.2695%" y="197" width="11.8791%" height="15" fill="rgb(226,26,5)"/><text x="1.5195%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (158,492 samples, 0.22%)</title><rect x="13.1592%" y="213" width="0.2189%" height="15" fill="rgb(249,33,26)"/><text x="13.4092%" y="223.50"></text></g><g><title>get_lang_items (106,551 samples, 0.15%)</title><rect x="13.7315%" y="165" width="0.1472%" height="15" fill="rgb(235,183,28)"/><text x="13.9815%" y="175.50"></text></g><g><title>codegen_fn_attrs (109,110 samples, 0.15%)</title><rect x="13.9862%" y="149" width="0.1507%" height="15" fill="rgb(221,5,38)"/><text x="14.2362%" y="159.50"></text></g><g><title>should_inherit_track_caller (192,311 samples, 0.27%)</title><rect x="13.8786%" y="165" width="0.2656%" height="15" fill="rgb(247,18,42)"/><text x="14.1286%" y="175.50"></text></g><g><title>codegen_fn_attrs (398,944 samples, 0.55%)</title><rect x="13.6360%" y="181" width="0.5510%" height="15" fill="rgb(241,131,45)"/><text x="13.8860%" y="191.50"></text></g><g><title>check_mod_attrs (566,857 samples, 0.78%)</title><rect x="13.4045%" y="197" width="0.7829%" height="15" fill="rgb(249,31,29)"/><text x="13.6545%" y="207.50"></text></g><g><title>check_mod_const_bodies (78,031 samples, 0.11%)</title><rect x="14.1874%" y="197" width="0.1078%" height="15" fill="rgb(225,111,53)"/><text x="14.4374%" y="207.50"></text></g><g><title>lookup_deprecation_entry (144,381 samples, 0.20%)</title><rect x="14.5881%" y="181" width="0.1994%" height="15" fill="rgb(238,160,17)"/><text x="14.8381%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (394,764 samples, 0.55%)</title><rect x="14.3698%" y="197" width="0.5452%" height="15" fill="rgb(214,148,48)"/><text x="14.6198%" y="207.50"></text></g><g><title>misc_checking_1 (1,164,893 samples, 1.61%)</title><rect x="13.3786%" y="213" width="1.6089%" height="15" fill="rgb(232,36,49)"/><text x="13.6286%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (168,851 samples, 0.23%)</title><rect x="14.9896%" y="197" width="0.2332%" height="15" fill="rgb(209,103,24)"/><text x="15.2396%" y="207.50"></text></g><g><title>check_mod_liveness (139,911 samples, 0.19%)</title><rect x="15.0295%" y="181" width="0.1932%" height="15" fill="rgb(229,88,8)"/><text x="15.2795%" y="191.50"></text></g><g><title>misc_checking_2 (396,054 samples, 0.55%)</title><rect x="14.9875%" y="213" width="0.5470%" height="15" fill="rgb(213,181,19)"/><text x="15.2375%" y="223.50"></text></g><g><title>match_checking (225,722 samples, 0.31%)</title><rect x="15.2228%" y="197" width="0.3118%" height="15" fill="rgb(254,191,54)"/><text x="15.4728%" y="207.50"></text></g><g><title>check_match (212,382 samples, 0.29%)</title><rect x="15.2412%" y="181" width="0.2933%" height="15" fill="rgb(241,83,37)"/><text x="15.4912%" y="191.50"></text></g><g><title>death_checking (89,281 samples, 0.12%)</title><rect x="15.6262%" y="197" width="0.1233%" height="15" fill="rgb(233,36,39)"/><text x="15.8762%" y="207.50"></text></g><g><title>trait_impls_of (228,233 samples, 0.32%)</title><rect x="16.4704%" y="165" width="0.3152%" height="15" fill="rgb(226,3,54)"/><text x="16.7204%" y="175.50"></text></g><g><title>crate_lints (3,554,590 samples, 4.91%)</title><rect x="15.7517%" y="181" width="4.9094%" height="15" fill="rgb(245,192,40)"/><text x="16.0017%" y="191.50">crate_..</text></g><g><title>type_of (2,797,079 samples, 3.86%)</title><rect x="16.7979%" y="165" width="3.8632%" height="15" fill="rgb(238,167,29)"/><text x="17.0479%" y="175.50">type..</text></g><g><title>metadata_decode_entry_type_of (2,297,853 samples, 3.17%)</title><rect x="17.4874%" y="149" width="3.1737%" height="15" fill="rgb(232,182,51)"/><text x="17.7374%" y="159.50">met..</text></g><g><title>lint_checking (3,696,981 samples, 5.11%)</title><rect x="15.7496%" y="197" width="5.1061%" height="15" fill="rgb(231,60,39)"/><text x="15.9996%" y="207.50">lint_c..</text></g><g><title>module_lints (140,851 samples, 0.19%)</title><rect x="20.6611%" y="181" width="0.1945%" height="15" fill="rgb(208,69,12)"/><text x="20.9111%" y="191.50"></text></g><g><title>lint_mod (138,161 samples, 0.19%)</title><rect x="20.6648%" y="165" width="0.1908%" height="15" fill="rgb(235,93,37)"/><text x="20.9148%" y="175.50"></text></g><g><title>privacy_checking_modules (277,893 samples, 0.38%)</title><rect x="20.9391%" y="197" width="0.3838%" height="15" fill="rgb(213,116,39)"/><text x="21.1891%" y="207.50"></text></g><g><title>check_mod_privacy (276,283 samples, 0.38%)</title><rect x="20.9414%" y="181" width="0.3816%" height="15" fill="rgb(222,207,29)"/><text x="21.1914%" y="191.50"></text></g><g><title>misc_checking_3 (4,202,817 samples, 5.80%)</title><rect x="15.5345%" y="213" width="5.8047%" height="15" fill="rgb(206,96,30)"/><text x="15.7845%" y="223.50">misc_ch..</text></g><g><title>impl_parent (309,733 samples, 0.43%)</title><rect x="22.0391%" y="149" width="0.4278%" height="15" fill="rgb(218,138,4)"/><text x="22.2891%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (220,862 samples, 0.31%)</title><rect x="22.1618%" y="133" width="0.3050%" height="15" fill="rgb(250,191,14)"/><text x="22.4118%" y="143.50"></text></g><g><title>impl_trait_ref (982,824 samples, 1.36%)</title><rect x="22.4669%" y="149" width="1.3574%" height="15" fill="rgb(239,60,40)"/><text x="22.7169%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (886,774 samples, 1.22%)</title><rect x="22.5995%" y="133" width="1.2248%" height="15" fill="rgb(206,27,48)"/><text x="22.8495%" y="143.50"></text></g><g><title>coherent_trait (1,959,942 samples, 2.71%)</title><rect x="21.4287%" y="181" width="2.7070%" height="15" fill="rgb(225,35,8)"/><text x="21.6787%" y="191.50">co..</text></g><g><title>specialization_graph_of (1,946,892 samples, 2.69%)</title><rect x="21.4468%" y="165" width="2.6890%" height="15" fill="rgb(250,213,24)"/><text x="21.6968%" y="175.50">sp..</text></g><g><title>trait_impls_of (225,493 samples, 0.31%)</title><rect x="23.8243%" y="149" width="0.3114%" height="15" fill="rgb(247,123,22)"/><text x="24.0743%" y="159.50"></text></g><g><title>implementations_of_trait (95,491 samples, 0.13%)</title><rect x="24.0038%" y="133" width="0.1319%" height="15" fill="rgb(231,138,38)"/><text x="24.2538%" y="143.50"></text></g><g><title>coherence_checking (2,033,572 samples, 2.81%)</title><rect x="21.3998%" y="197" width="2.8087%" height="15" fill="rgb(231,145,46)"/><text x="21.6498%" y="207.50">co..</text></g><g><title>associated_item (310,174 samples, 0.43%)</title><rect x="31.8635%" y="133" width="0.4284%" height="15" fill="rgb(251,118,11)"/><text x="32.1135%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (227,564 samples, 0.31%)</title><rect x="31.9776%" y="117" width="0.3143%" height="15" fill="rgb(217,147,25)"/><text x="32.2276%" y="127.50"></text></g><g><title>associated_items (495,895 samples, 0.68%)</title><rect x="31.6433%" y="149" width="0.6849%" height="15" fill="rgb(247,81,37)"/><text x="31.8933%" y="159.50"></text></g><g><title>adt_def (84,021 samples, 0.12%)</title><rect x="32.6761%" y="117" width="0.1160%" height="15" fill="rgb(209,12,38)"/><text x="32.9261%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (82,621 samples, 0.11%)</title><rect x="32.6781%" y="101" width="0.1141%" height="15" fill="rgb(227,1,9)"/><text x="32.9281%" y="111.50"></text></g><g><title>dropck_outlives (381,994 samples, 0.53%)</title><rect x="32.4001%" y="149" width="0.5276%" height="15" fill="rgb(248,47,43)"/><text x="32.6501%" y="159.50"></text></g><g><title>adt_dtorck_constraint (231,412 samples, 0.32%)</title><rect x="32.6081%" y="133" width="0.3196%" height="15" fill="rgb(221,10,30)"/><text x="32.8581%" y="143.50"></text></g><g><title>adt_def (142,533 samples, 0.20%)</title><rect x="33.5659%" y="117" width="0.1969%" height="15" fill="rgb(210,229,1)"/><text x="33.8159%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (137,693 samples, 0.19%)</title><rect x="33.5726%" y="101" width="0.1902%" height="15" fill="rgb(222,148,37)"/><text x="33.8226%" y="111.50"></text></g><g><title>item_attrs (77,642 samples, 0.11%)</title><rect x="33.6555%" y="85" width="0.1072%" height="15" fill="rgb(234,67,33)"/><text x="33.9055%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (72,472 samples, 0.10%)</title><rect x="33.6627%" y="69" width="0.1001%" height="15" fill="rgb(247,98,35)"/><text x="33.9127%" y="79.50"></text></g><g><title>adt_sized_constraint (163,963 samples, 0.23%)</title><rect x="33.5405%" y="133" width="0.2265%" height="15" fill="rgb(247,138,52)"/><text x="33.7905%" y="143.50"></text></g><g><title>evaluate_obligation (1,047,353 samples, 1.45%)</title><rect x="32.9277%" y="149" width="1.4466%" height="15" fill="rgb(213,79,30)"/><text x="33.1777%" y="159.50"></text></g><g><title>trait_impls_of (343,145 samples, 0.47%)</title><rect x="33.9004%" y="133" width="0.4739%" height="15" fill="rgb(246,177,23)"/><text x="34.1504%" y="143.50"></text></g><g><title>implementations_of_trait (123,322 samples, 0.17%)</title><rect x="34.2040%" y="117" width="0.1703%" height="15" fill="rgb(230,62,27)"/><text x="34.4540%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (73,771 samples, 0.10%)</title><rect x="34.2724%" y="101" width="0.1019%" height="15" fill="rgb(216,154,8)"/><text x="34.5224%" y="111.50"></text></g><g><title>fn_sig (101,192 samples, 0.14%)</title><rect x="34.4053%" y="149" width="0.1398%" height="15" fill="rgb(244,35,45)"/><text x="34.6553%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (89,662 samples, 0.12%)</title><rect x="34.4212%" y="133" width="0.1238%" height="15" fill="rgb(251,115,12)"/><text x="34.6712%" y="143.50"></text></g><g><title>method_autoderef_steps (194,021 samples, 0.27%)</title><rect x="34.9049%" y="149" width="0.2680%" height="15" fill="rgb(240,54,50)"/><text x="35.1549%" y="159.50"></text></g><g><title>evaluate_obligation (126,131 samples, 0.17%)</title><rect x="34.9986%" y="133" width="0.1742%" height="15" fill="rgb(233,84,52)"/><text x="35.2486%" y="143.50"></text></g><g><title>object_safety_violations (199,402 samples, 0.28%)</title><rect x="35.1728%" y="149" width="0.2754%" height="15" fill="rgb(207,117,47)"/><text x="35.4228%" y="159.50"></text></g><g><title>explicit_predicates_of (78,872 samples, 0.11%)</title><rect x="35.7390%" y="117" width="0.1089%" height="15" fill="rgb(249,43,39)"/><text x="35.9890%" y="127.50"></text></g><g><title>predicates_of (292,877 samples, 0.40%)</title><rect x="35.4963%" y="149" width="0.4045%" height="15" fill="rgb(209,38,44)"/><text x="35.7463%" y="159.50"></text></g><g><title>predicates_defined_on (182,545 samples, 0.25%)</title><rect x="35.6487%" y="133" width="0.2521%" height="15" fill="rgb(236,212,23)"/><text x="35.8987%" y="143.50"></text></g><g><title>type_of (80,681 samples, 0.11%)</title><rect x="35.9823%" y="149" width="0.1114%" height="15" fill="rgb(242,79,21)"/><text x="36.2323%" y="159.50"></text></g><g><title>adt_def (181,073 samples, 0.25%)</title><rect x="43.5996%" y="117" width="0.2501%" height="15" fill="rgb(211,96,35)"/><text x="43.8496%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (177,113 samples, 0.24%)</title><rect x="43.6051%" y="101" width="0.2446%" height="15" fill="rgb(253,215,40)"/><text x="43.8551%" y="111.50"></text></g><g><title>item_attrs (138,322 samples, 0.19%)</title><rect x="43.6586%" y="85" width="0.1910%" height="15" fill="rgb(211,81,21)"/><text x="43.9086%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (134,182 samples, 0.19%)</title><rect x="43.6644%" y="69" width="0.1853%" height="15" fill="rgb(208,190,38)"/><text x="43.9144%" y="79.50"></text></g><g><title>adt_sized_constraint (203,383 samples, 0.28%)</title><rect x="43.5771%" y="133" width="0.2809%" height="15" fill="rgb(235,213,38)"/><text x="43.8271%" y="143.50"></text></g><g><title>associated_item (185,473 samples, 0.26%)</title><rect x="44.0078%" y="117" width="0.2562%" height="15" fill="rgb(237,122,38)"/><text x="44.2578%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (141,762 samples, 0.20%)</title><rect x="44.0681%" y="101" width="0.1958%" height="15" fill="rgb(244,218,35)"/><text x="44.3181%" y="111.50"></text></g><g><title>associated_items (308,755 samples, 0.43%)</title><rect x="43.8673%" y="133" width="0.4264%" height="15" fill="rgb(240,68,47)"/><text x="44.1173%" y="143.50"></text></g><g><title>adt_dtorck_constraint (113,571 samples, 0.16%)</title><rect x="44.4289%" y="117" width="0.1569%" height="15" fill="rgb(210,16,53)"/><text x="44.6789%" y="127.50"></text></g><g><title>dropck_outlives (189,051 samples, 0.26%)</title><rect x="44.3381%" y="133" width="0.2611%" height="15" fill="rgb(235,124,12)"/><text x="44.5881%" y="143.50"></text></g><g><title>adt_def (348,133 samples, 0.48%)</title><rect x="45.9422%" y="101" width="0.4808%" height="15" fill="rgb(224,169,11)"/><text x="46.1922%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (345,973 samples, 0.48%)</title><rect x="45.9452%" y="85" width="0.4778%" height="15" fill="rgb(250,166,2)"/><text x="46.1952%" y="95.50"></text></g><g><title>item_attrs (326,463 samples, 0.45%)</title><rect x="45.9721%" y="69" width="0.4509%" height="15" fill="rgb(242,216,29)"/><text x="46.2221%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (323,943 samples, 0.45%)</title><rect x="45.9756%" y="53" width="0.4474%" height="15" fill="rgb(230,116,27)"/><text x="46.2256%" y="63.50"></text></g><g><title>adt_sized_constraint (113,902 samples, 0.16%)</title><rect x="46.4230%" y="101" width="0.1573%" height="15" fill="rgb(228,99,48)"/><text x="46.6730%" y="111.50"></text></g><g><title>adt_def (112,662 samples, 0.16%)</title><rect x="46.4248%" y="85" width="0.1556%" height="15" fill="rgb(253,11,6)"/><text x="46.6748%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (112,091 samples, 0.15%)</title><rect x="46.4255%" y="69" width="0.1548%" height="15" fill="rgb(247,143,39)"/><text x="46.6755%" y="79.50"></text></g><g><title>item_attrs (107,261 samples, 0.15%)</title><rect x="46.4322%" y="53" width="0.1481%" height="15" fill="rgb(236,97,10)"/><text x="46.6822%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,521 samples, 0.15%)</title><rect x="46.4332%" y="37" width="0.1471%" height="15" fill="rgb(233,208,19)"/><text x="46.6832%" y="47.50"></text></g><g><title>adt_sized_constraint (483,886 samples, 0.67%)</title><rect x="45.9279%" y="117" width="0.6683%" height="15" fill="rgb(216,164,2)"/><text x="46.1779%" y="127.50"></text></g><g><title>evaluate_obligation (138,922 samples, 0.19%)</title><rect x="47.1447%" y="101" width="0.1919%" height="15" fill="rgb(220,129,5)"/><text x="47.3947%" y="111.50"></text></g><g><title>layout_of (136,251 samples, 0.19%)</title><rect x="47.3722%" y="101" width="0.1882%" height="15" fill="rgb(242,17,10)"/><text x="47.6222%" y="111.50"></text></g><g><title>param_env (101,340 samples, 0.14%)</title><rect x="47.5604%" y="101" width="0.1400%" height="15" fill="rgb(242,107,0)"/><text x="47.8104%" y="111.50"></text></g><g><title>predicates_of (95,581 samples, 0.13%)</title><rect x="47.7004%" y="101" width="0.1320%" height="15" fill="rgb(251,28,31)"/><text x="47.9504%" y="111.50"></text></g><g><title>own_existential_vtable_entries (821,409 samples, 1.13%)</title><rect x="46.7393%" y="117" width="1.1345%" height="15" fill="rgb(233,223,10)"/><text x="46.9893%" y="127.50"></text></g><g><title>predicates_of (116,811 samples, 0.16%)</title><rect x="47.8738%" y="117" width="0.1613%" height="15" fill="rgb(215,21,27)"/><text x="48.1238%" y="127.50"></text></g><g><title>trait_impls_of (270,391 samples, 0.37%)</title><rect x="48.0559%" y="117" width="0.3735%" height="15" fill="rgb(232,23,21)"/><text x="48.3059%" y="127.50"></text></g><g><title>implementations_of_trait (102,120 samples, 0.14%)</title><rect x="48.2883%" y="101" width="0.1410%" height="15" fill="rgb(244,5,23)"/><text x="48.5383%" y="111.50"></text></g><g><title>evaluate_obligation (2,778,981 samples, 3.84%)</title><rect x="44.5992%" y="133" width="3.8382%" height="15" fill="rgb(226,81,46)"/><text x="44.8492%" y="143.50">eval..</text></g><g><title>fn_sig (95,941 samples, 0.13%)</title><rect x="48.4563%" y="133" width="0.1325%" height="15" fill="rgb(247,70,30)"/><text x="48.7063%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (86,021 samples, 0.12%)</title><rect x="48.4700%" y="117" width="0.1188%" height="15" fill="rgb(212,68,19)"/><text x="48.7200%" y="127.50"></text></g><g><title>is_copy_raw (447,076 samples, 0.62%)</title><rect x="48.8222%" y="133" width="0.6175%" height="15" fill="rgb(240,187,13)"/><text x="49.0722%" y="143.50"></text></g><g><title>evaluate_obligation (428,125 samples, 0.59%)</title><rect x="48.8484%" y="117" width="0.5913%" height="15" fill="rgb(223,113,26)"/><text x="49.0984%" y="127.50"></text></g><g><title>trait_impls_of (320,203 samples, 0.44%)</title><rect x="48.9974%" y="101" width="0.4422%" height="15" fill="rgb(206,192,2)"/><text x="49.2474%" y="111.50"></text></g><g><title>implementations_of_trait (72,541 samples, 0.10%)</title><rect x="49.3395%" y="85" width="0.1002%" height="15" fill="rgb(241,108,4)"/><text x="49.5895%" y="95.50"></text></g><g><title>method_autoderef_steps (159,502 samples, 0.22%)</title><rect x="49.5638%" y="133" width="0.2203%" height="15" fill="rgb(247,173,49)"/><text x="49.8138%" y="143.50"></text></g><g><title>evaluate_obligation (78,641 samples, 0.11%)</title><rect x="49.6755%" y="117" width="0.1086%" height="15" fill="rgb(224,114,35)"/><text x="49.9255%" y="127.50"></text></g><g><title>evaluate_obligation (106,742 samples, 0.15%)</title><rect x="50.3290%" y="117" width="0.1474%" height="15" fill="rgb(245,159,27)"/><text x="50.5790%" y="127.50"></text></g><g><title>param_env (104,421 samples, 0.14%)</title><rect x="50.6252%" y="117" width="0.1442%" height="15" fill="rgb(245,172,44)"/><text x="50.8752%" y="127.50"></text></g><g><title>predicates_of (89,020 samples, 0.12%)</title><rect x="50.7695%" y="117" width="0.1230%" height="15" fill="rgb(236,23,11)"/><text x="51.0195%" y="127.50"></text></g><g><title>object_safety_violations (804,490 samples, 1.11%)</title><rect x="49.7841%" y="133" width="1.1111%" height="15" fill="rgb(205,117,38)"/><text x="50.0341%" y="143.50"></text></g><g><title>explicit_predicates_of (154,801 samples, 0.21%)</title><rect x="51.1445%" y="101" width="0.2138%" height="15" fill="rgb(237,72,25)"/><text x="51.3945%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (133,731 samples, 0.18%)</title><rect x="51.1736%" y="85" width="0.1847%" height="15" fill="rgb(244,70,9)"/><text x="51.4236%" y="95.50"></text></g><g><title>predicates_of (366,814 samples, 0.51%)</title><rect x="50.9015%" y="133" width="0.5066%" height="15" fill="rgb(217,125,39)"/><text x="51.1515%" y="143.50"></text></g><g><title>predicates_defined_on (255,842 samples, 0.35%)</title><rect x="51.0548%" y="117" width="0.3534%" height="15" fill="rgb(235,36,10)"/><text x="51.3048%" y="127.50"></text></g><g><title>type_of (154,131 samples, 0.21%)</title><rect x="51.4168%" y="133" width="0.2129%" height="15" fill="rgb(251,123,47)"/><text x="51.6668%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (126,581 samples, 0.17%)</title><rect x="51.4549%" y="117" width="0.1748%" height="15" fill="rgb(221,13,13)"/><text x="51.7049%" y="127.50"></text></g><g><title>typeck (11,292,937 samples, 15.60%)</title><rect x="36.0938%" y="149" width="15.5973%" height="15" fill="rgb(238,131,9)"/><text x="36.3438%" y="159.50">typeck</text></g><g><title>item_bodies_checking (19,918,863 samples, 27.51%)</title><rect x="24.2484%" y="197" width="27.5110%" height="15" fill="rgb(211,50,8)"/><text x="24.4984%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,915,963 samples, 27.51%)</title><rect x="24.2524%" y="181" width="27.5070%" height="15" fill="rgb(245,182,24)"/><text x="24.5024%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (19,885,673 samples, 27.47%)</title><rect x="24.2943%" y="165" width="27.4652%" height="15" fill="rgb(242,14,37)"/><text x="24.5443%" y="175.50">typeck</text></g><g><title>impl_parent (142,252 samples, 0.20%)</title><rect x="52.9368%" y="117" width="0.1965%" height="15" fill="rgb(246,228,12)"/><text x="53.1868%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (89,151 samples, 0.12%)</title><rect x="53.0101%" y="101" width="0.1231%" height="15" fill="rgb(213,55,15)"/><text x="53.2601%" y="111.50"></text></g><g><title>impl_trait_ref (542,766 samples, 0.75%)</title><rect x="53.1333%" y="117" width="0.7496%" height="15" fill="rgb(209,9,3)"/><text x="53.3833%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (492,636 samples, 0.68%)</title><rect x="53.2025%" y="101" width="0.6804%" height="15" fill="rgb(230,59,30)"/><text x="53.4525%" y="111.50"></text></g><g><title>adt_destructor (1,001,161 samples, 1.38%)</title><rect x="52.6341%" y="165" width="1.3828%" height="15" fill="rgb(209,121,21)"/><text x="52.8841%" y="175.50"></text></g><g><title>coherent_trait (992,521 samples, 1.37%)</title><rect x="52.6460%" y="149" width="1.3708%" height="15" fill="rgb(220,109,13)"/><text x="52.8960%" y="159.50"></text></g><g><title>specialization_graph_of (989,281 samples, 1.37%)</title><rect x="52.6505%" y="133" width="1.3664%" height="15" fill="rgb(232,18,1)"/><text x="52.9005%" y="143.50"></text></g><g><title>trait_impls_of (96,981 samples, 0.13%)</title><rect x="53.8829%" y="117" width="0.1339%" height="15" fill="rgb(215,41,42)"/><text x="54.1329%" y="127.50"></text></g><g><title>item_types_checking (1,867,420 samples, 2.58%)</title><rect x="51.7594%" y="197" width="2.5792%" height="15" fill="rgb(224,123,36)"/><text x="52.0094%" y="207.50">it..</text></g><g><title>check_mod_item_types (1,862,780 samples, 2.57%)</title><rect x="51.7659%" y="181" width="2.5728%" height="15" fill="rgb(240,125,3)"/><text x="52.0159%" y="191.50">ch..</text></g><g><title>fn_sig (328,142 samples, 0.45%)</title><rect x="54.6191%" y="165" width="0.4532%" height="15" fill="rgb(205,98,50)"/><text x="54.8691%" y="175.50"></text></g><g><title>type_of (115,661 samples, 0.16%)</title><rect x="54.9126%" y="149" width="0.1597%" height="15" fill="rgb(205,185,37)"/><text x="55.1626%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (107,641 samples, 0.15%)</title><rect x="54.9237%" y="133" width="0.1487%" height="15" fill="rgb(238,207,15)"/><text x="55.1737%" y="143.50"></text></g><g><title>is_late_bound_map (93,770 samples, 0.13%)</title><rect x="55.1864%" y="149" width="0.1295%" height="15" fill="rgb(213,199,42)"/><text x="55.4364%" y="159.50"></text></g><g><title>resolve_lifetimes (87,560 samples, 0.12%)</title><rect x="55.1950%" y="133" width="0.1209%" height="15" fill="rgb(235,201,11)"/><text x="55.4450%" y="143.50"></text></g><g><title>named_region_map (244,974 samples, 0.34%)</title><rect x="55.3159%" y="149" width="0.3383%" height="15" fill="rgb(207,46,11)"/><text x="55.5659%" y="159.50"></text></g><g><title>resolve_lifetimes (237,424 samples, 0.33%)</title><rect x="55.3263%" y="133" width="0.3279%" height="15" fill="rgb(241,35,35)"/><text x="55.5763%" y="143.50"></text></g><g><title>lint_levels (119,112 samples, 0.16%)</title><rect x="55.4897%" y="117" width="0.1645%" height="15" fill="rgb(243,32,47)"/><text x="55.7397%" y="127.50"></text></g><g><title>generics_of (440,386 samples, 0.61%)</title><rect x="55.0723%" y="165" width="0.6082%" height="15" fill="rgb(247,202,23)"/><text x="55.3223%" y="175.50"></text></g><g><title>explicit_predicates_of (174,872 samples, 0.24%)</title><rect x="55.8465%" y="133" width="0.2415%" height="15" fill="rgb(219,102,11)"/><text x="56.0965%" y="143.50"></text></g><g><title>predicates_of (558,775 samples, 0.77%)</title><rect x="55.7297%" y="165" width="0.7718%" height="15" fill="rgb(243,110,44)"/><text x="55.9797%" y="175.50"></text></g><g><title>predicates_defined_on (527,745 samples, 0.73%)</title><rect x="55.7725%" y="149" width="0.7289%" height="15" fill="rgb(222,74,54)"/><text x="56.0225%" y="159.50"></text></g><g><title>inferred_outlives_of (299,353 samples, 0.41%)</title><rect x="56.0880%" y="133" width="0.4135%" height="15" fill="rgb(216,99,12)"/><text x="56.3380%" y="143.50"></text></g><g><title>inferred_outlives_crate (277,583 samples, 0.38%)</title><rect x="56.1180%" y="117" width="0.3834%" height="15" fill="rgb(226,22,26)"/><text x="56.3680%" y="127.50"></text></g><g><title>type_of (133,452 samples, 0.18%)</title><rect x="56.3171%" y="101" width="0.1843%" height="15" fill="rgb(217,163,10)"/><text x="56.5671%" y="111.50"></text></g><g><title>type_collecting (1,692,489 samples, 2.34%)</title><rect x="54.3399%" y="197" width="2.3376%" height="15" fill="rgb(213,25,53)"/><text x="54.5899%" y="207.50">t..</text></g><g><title>collect_mod_item_types (1,682,229 samples, 2.32%)</title><rect x="54.3541%" y="181" width="2.3234%" height="15" fill="rgb(252,105,26)"/><text x="54.6041%" y="191.50">c..</text></g><g><title>type_of (127,460 samples, 0.18%)</title><rect x="56.5014%" y="165" width="0.1760%" height="15" fill="rgb(220,39,43)"/><text x="56.7514%" y="175.50"></text></g><g><title>adt_def (96,940 samples, 0.13%)</title><rect x="58.3450%" y="133" width="0.1339%" height="15" fill="rgb(229,68,48)"/><text x="58.5950%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (94,040 samples, 0.13%)</title><rect x="58.3490%" y="117" width="0.1299%" height="15" fill="rgb(252,8,32)"/><text x="58.5990%" y="127.50"></text></g><g><title>adt_sized_constraint (84,401 samples, 0.12%)</title><rect x="58.5075%" y="117" width="0.1166%" height="15" fill="rgb(223,20,43)"/><text x="58.7575%" y="127.50"></text></g><g><title>adt_sized_constraint (130,271 samples, 0.18%)</title><rect x="58.4789%" y="133" width="0.1799%" height="15" fill="rgb(229,81,49)"/><text x="58.7289%" y="143.50"></text></g><g><title>adt_sized_constraint (255,442 samples, 0.35%)</title><rect x="58.3271%" y="149" width="0.3528%" height="15" fill="rgb(236,28,36)"/><text x="58.5771%" y="159.50"></text></g><g><title>evaluate_obligation (587,336 samples, 0.81%)</title><rect x="57.9810%" y="165" width="0.8112%" height="15" fill="rgb(249,185,26)"/><text x="58.2310%" y="175.50"></text></g><g><title>implied_outlives_bounds (167,242 samples, 0.23%)</title><rect x="58.7922%" y="165" width="0.2310%" height="15" fill="rgb(249,174,33)"/><text x="59.0422%" y="175.50"></text></g><g><title>param_env (115,220 samples, 0.16%)</title><rect x="59.0232%" y="165" width="0.1591%" height="15" fill="rgb(233,201,37)"/><text x="59.2732%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,918,472 samples, 2.65%)</title><rect x="56.8349%" y="181" width="2.6497%" height="15" fill="rgb(221,78,26)"/><text x="57.0849%" y="191.50">ch..</text></g><g><title>region_scope_tree (157,023 samples, 0.22%)</title><rect x="59.2678%" y="165" width="0.2169%" height="15" fill="rgb(250,127,30)"/><text x="59.5178%" y="175.50"></text></g><g><title>evaluate_obligation (333,923 samples, 0.46%)</title><rect x="60.7412%" y="165" width="0.4612%" height="15" fill="rgb(230,49,44)"/><text x="60.9912%" y="175.50"></text></g><g><title>trait_impls_of (127,251 samples, 0.18%)</title><rect x="61.0267%" y="149" width="0.1758%" height="15" fill="rgb(229,67,23)"/><text x="61.2767%" y="159.50"></text></g><g><title>implied_outlives_bounds (181,131 samples, 0.25%)</title><rect x="61.2107%" y="165" width="0.2502%" height="15" fill="rgb(249,83,47)"/><text x="61.4607%" y="175.50"></text></g><g><title>param_env (279,964 samples, 0.39%)</title><rect x="61.4609%" y="165" width="0.3867%" height="15" fill="rgb(215,43,3)"/><text x="61.7109%" y="175.50"></text></g><g><title>predicates_of (145,302 samples, 0.20%)</title><rect x="61.8476%" y="165" width="0.2007%" height="15" fill="rgb(238,154,13)"/><text x="62.0976%" y="175.50"></text></g><g><title>predicates_defined_on (98,341 samples, 0.14%)</title><rect x="61.9124%" y="149" width="0.1358%" height="15" fill="rgb(219,56,2)"/><text x="62.1624%" y="159.50"></text></g><g><title>analysis (44,468,835 samples, 61.42%)</title><rect x="0.9238%" y="229" width="61.4183%" height="15" fill="rgb(233,0,4)"/><text x="1.1738%" y="239.50">analysis</text></g><g><title>type_check_crate (29,687,371 samples, 41.00%)</title><rect x="21.3393%" y="213" width="41.0029%" height="15" fill="rgb(235,30,7)"/><text x="21.5893%" y="223.50">type_check_crate</text></g><g><title>wf_checking (4,099,826 samples, 5.66%)</title><rect x="56.6796%" y="197" width="5.6625%" height="15" fill="rgb(250,79,13)"/><text x="56.9296%" y="207.50">wf_chec..</text></g><g><title>check_item_well_formed (2,068,892 samples, 2.86%)</title><rect x="59.4846%" y="181" width="2.8575%" height="15" fill="rgb(211,146,34)"/><text x="59.7346%" y="191.50">ch..</text></g><g><title>variances_of (78,551 samples, 0.11%)</title><rect x="62.2336%" y="165" width="0.1085%" height="15" fill="rgb(228,22,38)"/><text x="62.4836%" y="175.50"></text></g><g><title>crate_variances (73,241 samples, 0.10%)</title><rect x="62.2410%" y="149" width="0.1012%" height="15" fill="rgb(235,168,5)"/><text x="62.4910%" y="159.50"></text></g><g><title>codegen_crate (553,777 samples, 0.76%)</title><rect x="62.3561%" y="229" width="0.7649%" height="15" fill="rgb(221,155,16)"/><text x="62.6061%" y="239.50"></text></g><g><title>AST_validation (110,271 samples, 0.15%)</title><rect x="63.3954%" y="213" width="0.1523%" height="15" fill="rgb(215,215,53)"/><text x="63.6454%" y="223.50"></text></g><g><title>crate_injection (77,631 samples, 0.11%)</title><rect x="63.6131%" y="213" width="0.1072%" height="15" fill="rgb(223,4,10)"/><text x="63.8631%" y="223.50"></text></g><g><title>metadata_load_macro (307,644 samples, 0.42%)</title><rect x="79.8436%" y="181" width="0.4249%" height="15" fill="rgb(234,103,6)"/><text x="80.0936%" y="191.50"></text></g><g><title>macro_expand_crate (14,787,615 samples, 20.42%)</title><rect x="63.7204%" y="213" width="20.4240%" height="15" fill="rgb(227,97,0)"/><text x="63.9704%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (14,763,005 samples, 20.39%)</title><rect x="63.7543%" y="197" width="20.3900%" height="15" fill="rgb(234,150,53)"/><text x="64.0043%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,806,242 samples, 3.88%)</title><rect x="80.2685%" y="181" width="3.8759%" height="15" fill="rgb(228,201,54)"/><text x="80.5185%" y="191.50">meta..</text></g><g><title>metadata_register_crate (992,500 samples, 1.37%)</title><rect x="82.7735%" y="165" width="1.3708%" height="15" fill="rgb(222,22,37)"/><text x="83.0235%" y="175.50"></text></g><g><title>metadata_register_crate (75,981 samples, 0.10%)</title><rect x="84.0394%" y="149" width="0.1049%" height="15" fill="rgb(237,53,32)"/><text x="84.2894%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (174,142 samples, 0.24%)</title><rect x="84.1505%" y="213" width="0.2405%" height="15" fill="rgb(233,25,53)"/><text x="84.4005%" y="223.50"></text></g><g><title>finalize_imports (339,193 samples, 0.47%)</title><rect x="84.4052%" y="197" width="0.4685%" height="15" fill="rgb(210,40,34)"/><text x="84.6552%" y="207.50"></text></g><g><title>late_resolve_crate (2,676,300 samples, 3.70%)</title><rect x="84.9078%" y="197" width="3.6964%" height="15" fill="rgb(241,220,44)"/><text x="85.1578%" y="207.50">late..</text></g><g><title>metadata_register_crate (218,972 samples, 0.30%)</title><rect x="88.3017%" y="181" width="0.3024%" height="15" fill="rgb(235,28,35)"/><text x="88.5517%" y="191.50"></text></g><g><title>configure_and_expand (18,525,667 samples, 25.59%)</title><rect x="63.1210%" y="229" width="25.5868%" height="15" fill="rgb(210,56,17)"/><text x="63.3710%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (3,125,484 samples, 4.32%)</title><rect x="84.3910%" y="213" width="4.3168%" height="15" fill="rgb(224,130,29)"/><text x="84.6410%" y="223.50">resol..</text></g><g><title>drop_ast (101,001 samples, 0.14%)</title><rect x="88.7078%" y="229" width="0.1395%" height="15" fill="rgb(235,212,8)"/><text x="88.9578%" y="239.50"></text></g><g><title>early_lint_checks (239,863 samples, 0.33%)</title><rect x="88.8659%" y="229" width="0.3313%" height="15" fill="rgb(223,33,50)"/><text x="89.1159%" y="239.50"></text></g><g><title>free_global_ctxt (2,513,258 samples, 3.47%)</title><rect x="89.1971%" y="229" width="3.4712%" height="15" fill="rgb(219,149,13)"/><text x="89.4471%" y="239.50">fre..</text></g><g><title>generate_crate_metadata (408,125 samples, 0.56%)</title><rect x="92.6683%" y="229" width="0.5637%" height="15" fill="rgb(250,156,29)"/><text x="92.9183%" y="239.50"></text></g><g><title>hir_lowering (1,728,579 samples, 2.39%)</title><rect x="93.2320%" y="229" width="2.3874%" height="15" fill="rgb(216,193,19)"/><text x="93.4820%" y="239.50">hi..</text></g><g><title>parse_crate (1,948,081 samples, 2.69%)</title><rect x="95.6753%" y="229" width="2.6906%" height="15" fill="rgb(216,135,14)"/><text x="95.9253%" y="239.50">pa..</text></g><g><title>prepare_outputs (312,043 samples, 0.43%)</title><rect x="98.3783%" y="229" width="0.4310%" height="15" fill="rgb(241,47,5)"/><text x="98.6283%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (445,735 samples, 0.62%)</title><rect x="98.8093%" y="229" width="0.6156%" height="15" fill="rgb(233,42,35)"/><text x="99.0593%" y="239.50"></text></g><g><title>setup_global_ctxt (119,161 samples, 0.16%)</title><rect x="99.4363%" y="229" width="0.1646%" height="15" fill="rgb(231,13,6)"/><text x="99.6863%" y="239.50"></text></g><g><title>all (72,403,186 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(207,181,40)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (72,403,186 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(254,173,49)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (288,963 samples, 0.40%)</title><rect x="99.6009%" y="229" width="0.3991%" height="15" fill="rgb(221,1,38)"/><text x="99.8509%" y="239.50"></text></g></svg></svg>