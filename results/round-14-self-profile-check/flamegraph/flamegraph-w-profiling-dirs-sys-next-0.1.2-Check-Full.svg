<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (333,603 samples, 0.43%)</title><rect x="9.3687%" y="149" width="0.4319%" height="15" fill="rgb(227,0,7)"/><text x="9.6187%" y="159.50"></text></g><g><title>item_attrs (300,416 samples, 0.39%)</title><rect x="10.2282%" y="117" width="0.3889%" height="15" fill="rgb(217,0,24)"/><text x="10.4782%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (290,026 samples, 0.38%)</title><rect x="10.2417%" y="101" width="0.3755%" height="15" fill="rgb(221,193,54)"/><text x="10.4917%" y="111.50"></text></g><g><title>codegen_fn_attrs (407,487 samples, 0.53%)</title><rect x="10.1159%" y="133" width="0.5276%" height="15" fill="rgb(248,212,6)"/><text x="10.3659%" y="143.50"></text></g><g><title>is_copy_raw (84,641 samples, 0.11%)</title><rect x="12.3885%" y="117" width="0.1096%" height="15" fill="rgb(208,68,35)"/><text x="12.6385%" y="127.50"></text></g><g><title>adt_drop_tys (103,920 samples, 0.13%)</title><rect x="12.6337%" y="85" width="0.1345%" height="15" fill="rgb(232,128,0)"/><text x="12.8837%" y="95.50"></text></g><g><title>is_copy_raw (99,001 samples, 0.13%)</title><rect x="12.7683%" y="85" width="0.1282%" height="15" fill="rgb(207,160,47)"/><text x="13.0183%" y="95.50"></text></g><g><title>evaluate_obligation (77,311 samples, 0.10%)</title><rect x="12.7963%" y="69" width="0.1001%" height="15" fill="rgb(228,23,34)"/><text x="13.0463%" y="79.50"></text></g><g><title>param_env (95,300 samples, 0.12%)</title><rect x="12.8964%" y="85" width="0.1234%" height="15" fill="rgb(218,30,26)"/><text x="13.1464%" y="95.50"></text></g><g><title>adt_drop_tys (330,222 samples, 0.43%)</title><rect x="12.5936%" y="101" width="0.4275%" height="15" fill="rgb(220,122,19)"/><text x="12.8436%" y="111.50"></text></g><g><title>needs_drop_raw (884,999 samples, 1.15%)</title><rect x="12.5013%" y="117" width="1.1458%" height="15" fill="rgb(250,228,42)"/><text x="12.7513%" y="127.50"></text></g><g><title>is_copy_raw (483,494 samples, 0.63%)</title><rect x="13.0211%" y="101" width="0.6260%" height="15" fill="rgb(240,193,28)"/><text x="13.2711%" y="111.50"></text></g><g><title>evaluate_obligation (411,984 samples, 0.53%)</title><rect x="13.1137%" y="85" width="0.5334%" height="15" fill="rgb(216,20,37)"/><text x="13.3637%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (603,398 samples, 0.78%)</title><rect x="13.8468%" y="101" width="0.7812%" height="15" fill="rgb(206,188,39)"/><text x="14.0968%" y="111.50"></text></g><g><title>evaluate_obligation (161,072 samples, 0.21%)</title><rect x="14.4194%" y="85" width="0.2085%" height="15" fill="rgb(217,207,13)"/><text x="14.6694%" y="95.50"></text></g><g><title>impl_parent (437,926 samples, 0.57%)</title><rect x="15.5030%" y="85" width="0.5670%" height="15" fill="rgb(231,73,38)"/><text x="15.7530%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (285,834 samples, 0.37%)</title><rect x="15.6999%" y="69" width="0.3701%" height="15" fill="rgb(225,20,46)"/><text x="15.9499%" y="79.50"></text></g><g><title>specialization_graph_of (2,527,558 samples, 3.27%)</title><rect x="14.6665%" y="101" width="3.2723%" height="15" fill="rgb(210,31,41)"/><text x="14.9165%" y="111.50">spe..</text></g><g><title>impl_trait_ref (1,443,575 samples, 1.87%)</title><rect x="16.0699%" y="85" width="1.8689%" height="15" fill="rgb(221,200,47)"/><text x="16.3199%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,058,311 samples, 1.37%)</title><rect x="16.5687%" y="69" width="1.3702%" height="15" fill="rgb(226,26,5)"/><text x="16.8187%" y="79.50"></text></g><g><title>resolve_instance (3,380,408 samples, 4.38%)</title><rect x="13.6470%" y="117" width="4.3765%" height="15" fill="rgb(249,33,26)"/><text x="13.8970%" y="127.50">resol..</text></g><g><title>thir_body (494,312 samples, 0.64%)</title><rect x="18.0439%" y="117" width="0.6400%" height="15" fill="rgb(235,183,28)"/><text x="18.2939%" y="127.50"></text></g><g><title>mir_const (7,640,943 samples, 9.89%)</title><rect x="8.8061%" y="165" width="9.8925%" height="15" fill="rgb(221,5,38)"/><text x="9.0561%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (6,872,856 samples, 8.90%)</title><rect x="9.8006%" y="149" width="8.8981%" height="15" fill="rgb(247,18,42)"/><text x="10.0506%" y="159.50">unsafety_chec..</text></g><g><title>mir_built (6,221,778 samples, 8.06%)</title><rect x="10.6435%" y="133" width="8.0551%" height="15" fill="rgb(241,131,45)"/><text x="10.8935%" y="143.50">mir_built</text></g><g><title>mir_promoted (8,088,079 samples, 10.47%)</title><rect x="8.2493%" y="181" width="10.4714%" height="15" fill="rgb(249,31,29)"/><text x="8.4993%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (189,542 samples, 0.25%)</title><rect x="18.7207%" y="181" width="0.2454%" height="15" fill="rgb(225,111,53)"/><text x="18.9707%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (382,464 samples, 0.50%)</title><rect x="18.9660%" y="181" width="0.4952%" height="15" fill="rgb(238,160,17)"/><text x="19.2160%" y="191.50"></text></g><g><title>normalize_projection_ty (244,852 samples, 0.32%)</title><rect x="19.1442%" y="165" width="0.3170%" height="15" fill="rgb(214,148,48)"/><text x="19.3942%" y="175.50"></text></g><g><title>type_op_normalize_predicate (218,092 samples, 0.28%)</title><rect x="19.4612%" y="181" width="0.2824%" height="15" fill="rgb(232,36,49)"/><text x="19.7112%" y="191.50"></text></g><g><title>normalize_projection_ty (131,571 samples, 0.17%)</title><rect x="19.5732%" y="165" width="0.1703%" height="15" fill="rgb(209,103,24)"/><text x="19.8232%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,535,568 samples, 1.99%)</title><rect x="19.7436%" y="181" width="1.9881%" height="15" fill="rgb(229,88,8)"/><text x="19.9936%" y="191.50">t..</text></g><g><title>evaluate_obligation (143,362 samples, 0.19%)</title><rect x="21.5460%" y="165" width="0.1856%" height="15" fill="rgb(213,181,19)"/><text x="21.7960%" y="175.50"></text></g><g><title>MIR_borrow_checking (15,819,407 samples, 20.48%)</title><rect x="1.2537%" y="213" width="20.4809%" height="15" fill="rgb(254,191,54)"/><text x="1.5037%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,776,526 samples, 20.43%)</title><rect x="1.3092%" y="197" width="20.4254%" height="15" fill="rgb(241,83,37)"/><text x="1.5592%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (154,562 samples, 0.20%)</title><rect x="21.7568%" y="213" width="0.2001%" height="15" fill="rgb(233,36,39)"/><text x="22.0068%" y="223.50"></text></g><g><title>get_lang_items (78,891 samples, 0.10%)</title><rect x="22.2287%" y="165" width="0.1021%" height="15" fill="rgb(226,3,54)"/><text x="22.4787%" y="175.50"></text></g><g><title>codegen_fn_attrs (204,442 samples, 0.26%)</title><rect x="22.1385%" y="181" width="0.2647%" height="15" fill="rgb(245,192,40)"/><text x="22.3885%" y="191.50"></text></g><g><title>check_mod_attrs (316,714 samples, 0.41%)</title><rect x="21.9934%" y="197" width="0.4100%" height="15" fill="rgb(238,167,29)"/><text x="22.2434%" y="207.50"></text></g><g><title>lookup_deprecation_entry (96,981 samples, 0.13%)</title><rect x="22.6628%" y="181" width="0.1256%" height="15" fill="rgb(232,182,51)"/><text x="22.9128%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (283,743 samples, 0.37%)</title><rect x="22.5214%" y="197" width="0.3674%" height="15" fill="rgb(231,60,39)"/><text x="22.7714%" y="207.50"></text></g><g><title>misc_checking_1 (778,588 samples, 1.01%)</title><rect x="21.9578%" y="213" width="1.0080%" height="15" fill="rgb(208,69,12)"/><text x="22.2078%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (251,953 samples, 0.33%)</title><rect x="22.9677%" y="197" width="0.3262%" height="15" fill="rgb(235,93,37)"/><text x="23.2177%" y="207.50"></text></g><g><title>check_mod_liveness (205,662 samples, 0.27%)</title><rect x="23.0276%" y="181" width="0.2663%" height="15" fill="rgb(213,116,39)"/><text x="23.2776%" y="191.50"></text></g><g><title>misc_checking_2 (582,246 samples, 0.75%)</title><rect x="22.9658%" y="213" width="0.7538%" height="15" fill="rgb(222,207,29)"/><text x="23.2158%" y="223.50"></text></g><g><title>match_checking (328,853 samples, 0.43%)</title><rect x="23.2939%" y="197" width="0.4258%" height="15" fill="rgb(206,96,30)"/><text x="23.5439%" y="207.50"></text></g><g><title>check_match (315,512 samples, 0.41%)</title><rect x="23.3112%" y="181" width="0.4085%" height="15" fill="rgb(218,138,4)"/><text x="23.5612%" y="191.50"></text></g><g><title>death_checking (137,901 samples, 0.18%)</title><rect x="23.8199%" y="197" width="0.1785%" height="15" fill="rgb(250,191,14)"/><text x="24.0699%" y="207.50"></text></g><g><title>param_env (191,743 samples, 0.25%)</title><rect x="24.1807%" y="165" width="0.2482%" height="15" fill="rgb(239,60,40)"/><text x="24.4307%" y="175.50"></text></g><g><title>predicates_of (88,590 samples, 0.11%)</title><rect x="24.3142%" y="149" width="0.1147%" height="15" fill="rgb(206,27,48)"/><text x="24.5642%" y="159.50"></text></g><g><title>crate_lints (340,743 samples, 0.44%)</title><rect x="24.0001%" y="181" width="0.4411%" height="15" fill="rgb(225,35,8)"/><text x="24.2501%" y="191.50"></text></g><g><title>lint_checking (533,015 samples, 0.69%)</title><rect x="23.9984%" y="197" width="0.6901%" height="15" fill="rgb(250,213,24)"/><text x="24.2484%" y="207.50"></text></g><g><title>module_lints (190,972 samples, 0.25%)</title><rect x="24.4413%" y="181" width="0.2472%" height="15" fill="rgb(247,123,22)"/><text x="24.6913%" y="191.50"></text></g><g><title>lint_mod (187,542 samples, 0.24%)</title><rect x="24.4457%" y="165" width="0.2428%" height="15" fill="rgb(231,138,38)"/><text x="24.6957%" y="175.50"></text></g><g><title>type_of (188,312 samples, 0.24%)</title><rect x="25.1134%" y="165" width="0.2438%" height="15" fill="rgb(231,145,46)"/><text x="25.3634%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (183,912 samples, 0.24%)</title><rect x="25.1191%" y="149" width="0.2381%" height="15" fill="rgb(251,118,11)"/><text x="25.3691%" y="159.50"></text></g><g><title>privacy_checking_modules (478,326 samples, 0.62%)</title><rect x="24.7614%" y="197" width="0.6193%" height="15" fill="rgb(217,147,25)"/><text x="25.0114%" y="207.50"></text></g><g><title>check_mod_privacy (475,336 samples, 0.62%)</title><rect x="24.7653%" y="181" width="0.6154%" height="15" fill="rgb(247,81,37)"/><text x="25.0153%" y="191.50"></text></g><g><title>misc_checking_3 (1,298,315 samples, 1.68%)</title><rect x="23.7197%" y="213" width="1.6809%" height="15" fill="rgb(209,12,38)"/><text x="23.9697%" y="223.50"></text></g><g><title>associated_item (294,372 samples, 0.38%)</title><rect x="31.0651%" y="133" width="0.3811%" height="15" fill="rgb(227,1,9)"/><text x="31.3151%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (218,392 samples, 0.28%)</title><rect x="31.1635%" y="117" width="0.2827%" height="15" fill="rgb(248,47,43)"/><text x="31.4135%" y="127.50"></text></g><g><title>associated_items (419,353 samples, 0.54%)</title><rect x="30.9294%" y="149" width="0.5429%" height="15" fill="rgb(221,10,30)"/><text x="31.1794%" y="159.50"></text></g><g><title>impl_trait_ref (278,624 samples, 0.36%)</title><rect x="31.9111%" y="53" width="0.3607%" height="15" fill="rgb(210,229,1)"/><text x="32.1611%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (258,104 samples, 0.33%)</title><rect x="31.9376%" y="37" width="0.3342%" height="15" fill="rgb(222,148,37)"/><text x="32.1876%" y="47.50"></text></g><g><title>coherent_trait (468,736 samples, 0.61%)</title><rect x="31.6991%" y="85" width="0.6069%" height="15" fill="rgb(234,67,33)"/><text x="31.9491%" y="95.50"></text></g><g><title>specialization_graph_of (465,036 samples, 0.60%)</title><rect x="31.7039%" y="69" width="0.6021%" height="15" fill="rgb(247,98,35)"/><text x="31.9539%" y="79.50"></text></g><g><title>adt_destructor (483,596 samples, 0.63%)</title><rect x="31.6837%" y="117" width="0.6261%" height="15" fill="rgb(247,138,52)"/><text x="31.9337%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (480,456 samples, 0.62%)</title><rect x="31.6878%" y="101" width="0.6220%" height="15" fill="rgb(213,79,30)"/><text x="31.9378%" y="111.50"></text></g><g><title>adt_dtorck_constraint (102,901 samples, 0.13%)</title><rect x="32.3887%" y="69" width="0.1332%" height="15" fill="rgb(246,177,23)"/><text x="32.6387%" y="79.50"></text></g><g><title>adt_dtorck_constraint (135,931 samples, 0.18%)</title><rect x="32.3581%" y="85" width="0.1760%" height="15" fill="rgb(230,62,27)"/><text x="32.6081%" y="95.50"></text></g><g><title>adt_dtorck_constraint (180,323 samples, 0.23%)</title><rect x="32.3281%" y="101" width="0.2335%" height="15" fill="rgb(216,154,8)"/><text x="32.5781%" y="111.50"></text></g><g><title>adt_dtorck_constraint (200,303 samples, 0.26%)</title><rect x="32.3098%" y="117" width="0.2593%" height="15" fill="rgb(244,35,45)"/><text x="32.5598%" y="127.50"></text></g><g><title>dropck_outlives (833,340 samples, 1.08%)</title><rect x="31.5110%" y="149" width="1.0789%" height="15" fill="rgb(251,115,12)"/><text x="31.7610%" y="159.50"></text></g><g><title>adt_dtorck_constraint (750,780 samples, 0.97%)</title><rect x="31.6179%" y="133" width="0.9720%" height="15" fill="rgb(240,54,50)"/><text x="31.8679%" y="143.50"></text></g><g><title>adt_def (140,232 samples, 0.18%)</title><rect x="33.1734%" y="117" width="0.1816%" height="15" fill="rgb(233,84,52)"/><text x="33.4234%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (137,982 samples, 0.18%)</title><rect x="33.1763%" y="101" width="0.1786%" height="15" fill="rgb(207,117,47)"/><text x="33.4263%" y="111.50"></text></g><g><title>item_attrs (111,972 samples, 0.14%)</title><rect x="33.2100%" y="85" width="0.1450%" height="15" fill="rgb(249,43,39)"/><text x="33.4600%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (109,512 samples, 0.14%)</title><rect x="33.2131%" y="69" width="0.1418%" height="15" fill="rgb(209,38,44)"/><text x="33.4631%" y="79.50"></text></g><g><title>adt_def (130,261 samples, 0.17%)</title><rect x="33.3591%" y="101" width="0.1686%" height="15" fill="rgb(236,212,23)"/><text x="33.6091%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (129,801 samples, 0.17%)</title><rect x="33.3596%" y="85" width="0.1680%" height="15" fill="rgb(242,79,21)"/><text x="33.6096%" y="95.50"></text></g><g><title>adt_sized_constraint (166,392 samples, 0.22%)</title><rect x="33.3549%" y="117" width="0.2154%" height="15" fill="rgb(211,96,35)"/><text x="33.6049%" y="127.50"></text></g><g><title>adt_sized_constraint (324,284 samples, 0.42%)</title><rect x="33.1599%" y="133" width="0.4198%" height="15" fill="rgb(253,215,40)"/><text x="33.4099%" y="143.50"></text></g><g><title>evaluate_obligation (1,368,356 samples, 1.77%)</title><rect x="32.5899%" y="149" width="1.7716%" height="15" fill="rgb(211,81,21)"/><text x="32.8399%" y="159.50">e..</text></g><g><title>trait_impls_of (416,905 samples, 0.54%)</title><rect x="33.8217%" y="133" width="0.5398%" height="15" fill="rgb(208,190,38)"/><text x="34.0717%" y="143.50"></text></g><g><title>implementations_of_trait (121,910 samples, 0.16%)</title><rect x="34.2036%" y="117" width="0.1578%" height="15" fill="rgb(235,213,38)"/><text x="34.4536%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (80,600 samples, 0.10%)</title><rect x="34.2571%" y="101" width="0.1044%" height="15" fill="rgb(237,122,38)"/><text x="34.5071%" y="111.50"></text></g><g><title>fn_sig (78,252 samples, 0.10%)</title><rect x="34.3816%" y="149" width="0.1013%" height="15" fill="rgb(244,218,35)"/><text x="34.6316%" y="159.50"></text></g><g><title>item_attrs (109,510 samples, 0.14%)</title><rect x="34.6711%" y="149" width="0.1418%" height="15" fill="rgb(240,68,47)"/><text x="34.9211%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (104,120 samples, 0.13%)</title><rect x="34.6781%" y="133" width="0.1348%" height="15" fill="rgb(210,16,53)"/><text x="34.9281%" y="143.50"></text></g><g><title>evaluate_obligation (121,642 samples, 0.16%)</title><rect x="35.0171%" y="133" width="0.1575%" height="15" fill="rgb(235,124,12)"/><text x="35.2671%" y="143.50"></text></g><g><title>method_autoderef_steps (267,753 samples, 0.35%)</title><rect x="34.8520%" y="149" width="0.3467%" height="15" fill="rgb(224,169,11)"/><text x="35.1020%" y="159.50"></text></g><g><title>predicates_of (215,052 samples, 0.28%)</title><rect x="35.2273%" y="149" width="0.2784%" height="15" fill="rgb(250,166,2)"/><text x="35.4773%" y="159.50"></text></g><g><title>predicates_defined_on (142,912 samples, 0.19%)</title><rect x="35.3207%" y="133" width="0.1850%" height="15" fill="rgb(242,216,29)"/><text x="35.5707%" y="143.50"></text></g><g><title>adt_sized_constraint (80,951 samples, 0.10%)</title><rect x="44.5873%" y="133" width="0.1048%" height="15" fill="rgb(230,116,27)"/><text x="44.8373%" y="143.50"></text></g><g><title>associated_item (258,073 samples, 0.33%)</title><rect x="44.8322%" y="117" width="0.3341%" height="15" fill="rgb(228,99,48)"/><text x="45.0822%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (203,803 samples, 0.26%)</title><rect x="44.9024%" y="101" width="0.2639%" height="15" fill="rgb(253,11,6)"/><text x="45.1524%" y="111.50"></text></g><g><title>associated_items (380,497 samples, 0.49%)</title><rect x="44.6978%" y="133" width="0.4926%" height="15" fill="rgb(247,143,39)"/><text x="44.9478%" y="143.50"></text></g><g><title>dropck_outlives (125,681 samples, 0.16%)</title><rect x="45.2550%" y="133" width="0.1627%" height="15" fill="rgb(236,97,10)"/><text x="45.5050%" y="143.50"></text></g><g><title>adt_def (80,630 samples, 0.10%)</title><rect x="46.6626%" y="101" width="0.1044%" height="15" fill="rgb(233,208,19)"/><text x="46.9126%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (78,960 samples, 0.10%)</title><rect x="46.6647%" y="85" width="0.1022%" height="15" fill="rgb(216,164,2)"/><text x="46.9147%" y="95.50"></text></g><g><title>adt_sized_constraint (95,410 samples, 0.12%)</title><rect x="46.6532%" y="117" width="0.1235%" height="15" fill="rgb(220,129,5)"/><text x="46.9032%" y="127.50"></text></g><g><title>predicates_of (152,382 samples, 0.20%)</title><rect x="46.9870%" y="117" width="0.1973%" height="15" fill="rgb(242,17,10)"/><text x="47.2370%" y="127.50"></text></g><g><title>predicates_defined_on (100,882 samples, 0.13%)</title><rect x="47.0537%" y="101" width="0.1306%" height="15" fill="rgb(242,107,0)"/><text x="47.3037%" y="111.50"></text></g><g><title>trait_impls_of (418,931 samples, 0.54%)</title><rect x="47.2805%" y="117" width="0.5424%" height="15" fill="rgb(251,28,31)"/><text x="47.5305%" y="127.50"></text></g><g><title>implementations_of_trait (143,170 samples, 0.19%)</title><rect x="47.6375%" y="101" width="0.1854%" height="15" fill="rgb(233,223,10)"/><text x="47.8875%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (88,530 samples, 0.11%)</title><rect x="47.7083%" y="85" width="0.1146%" height="15" fill="rgb(215,21,27)"/><text x="47.9583%" y="95.50"></text></g><g><title>evaluate_obligation (1,859,357 samples, 2.41%)</title><rect x="45.4177%" y="133" width="2.4072%" height="15" fill="rgb(232,23,21)"/><text x="45.6677%" y="143.50">ev..</text></g><g><title>fn_sig (103,371 samples, 0.13%)</title><rect x="47.8464%" y="133" width="0.1338%" height="15" fill="rgb(244,5,23)"/><text x="48.0964%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (90,900 samples, 0.12%)</title><rect x="47.8626%" y="117" width="0.1177%" height="15" fill="rgb(226,81,46)"/><text x="48.1126%" y="127.50"></text></g><g><title>generics_of (82,081 samples, 0.11%)</title><rect x="47.9803%" y="133" width="0.1063%" height="15" fill="rgb(247,70,30)"/><text x="48.2303%" y="143.50"></text></g><g><title>impl_item_implementor_ids (107,441 samples, 0.14%)</title><rect x="48.0880%" y="133" width="0.1391%" height="15" fill="rgb(212,68,19)"/><text x="48.3380%" y="143.50"></text></g><g><title>associated_items (92,251 samples, 0.12%)</title><rect x="48.1077%" y="117" width="0.1194%" height="15" fill="rgb(240,187,13)"/><text x="48.3577%" y="127.50"></text></g><g><title>is_copy_raw (349,274 samples, 0.45%)</title><rect x="48.3678%" y="133" width="0.4522%" height="15" fill="rgb(223,113,26)"/><text x="48.6178%" y="143.50"></text></g><g><title>evaluate_obligation (315,094 samples, 0.41%)</title><rect x="48.4120%" y="117" width="0.4079%" height="15" fill="rgb(206,192,2)"/><text x="48.6620%" y="127.50"></text></g><g><title>trait_impls_of (125,831 samples, 0.16%)</title><rect x="48.6571%" y="101" width="0.1629%" height="15" fill="rgb(241,108,4)"/><text x="48.9071%" y="111.50"></text></g><g><title>evaluate_obligation (95,450 samples, 0.12%)</title><rect x="49.2168%" y="117" width="0.1236%" height="15" fill="rgb(247,173,49)"/><text x="49.4668%" y="127.50"></text></g><g><title>method_autoderef_steps (203,771 samples, 0.26%)</title><rect x="49.0851%" y="133" width="0.2638%" height="15" fill="rgb(224,114,35)"/><text x="49.3351%" y="143.50"></text></g><g><title>explicit_predicates_of (140,981 samples, 0.18%)</title><rect x="49.5913%" y="101" width="0.1825%" height="15" fill="rgb(245,159,27)"/><text x="49.8413%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (120,011 samples, 0.16%)</title><rect x="49.6184%" y="85" width="0.1554%" height="15" fill="rgb(245,172,44)"/><text x="49.8684%" y="95.50"></text></g><g><title>predicates_of (329,085 samples, 0.43%)</title><rect x="49.3896%" y="133" width="0.4261%" height="15" fill="rgb(236,23,11)"/><text x="49.6396%" y="143.50"></text></g><g><title>predicates_defined_on (249,615 samples, 0.32%)</title><rect x="49.4925%" y="117" width="0.3232%" height="15" fill="rgb(205,117,38)"/><text x="49.7425%" y="127.50"></text></g><g><title>typeck (11,086,912 samples, 14.35%)</title><rect x="35.6721%" y="149" width="14.3539%" height="15" fill="rgb(237,72,25)"/><text x="35.9221%" y="159.50">typeck</text></g><g><title>item_bodies_checking (18,996,232 samples, 24.59%)</title><rect x="25.4824%" y="197" width="24.5938%" height="15" fill="rgb(244,70,9)"/><text x="25.7324%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,994,162 samples, 24.59%)</title><rect x="25.4851%" y="181" width="24.5911%" height="15" fill="rgb(217,125,39)"/><text x="25.7351%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (18,972,002 samples, 24.56%)</title><rect x="25.5138%" y="165" width="24.5624%" height="15" fill="rgb(235,36,10)"/><text x="25.7638%" y="175.50">typeck</text></g><g><title>fn_sig (230,923 samples, 0.30%)</title><rect x="50.1841%" y="165" width="0.2990%" height="15" fill="rgb(251,123,47)"/><text x="50.4341%" y="175.50"></text></g><g><title>named_region_map (82,330 samples, 0.11%)</title><rect x="50.5503%" y="149" width="0.1066%" height="15" fill="rgb(221,13,13)"/><text x="50.8003%" y="159.50"></text></g><g><title>generics_of (140,602 samples, 0.18%)</title><rect x="50.4831%" y="165" width="0.1820%" height="15" fill="rgb(238,131,9)"/><text x="50.7331%" y="175.50"></text></g><g><title>predicates_of (81,581 samples, 0.11%)</title><rect x="50.6651%" y="165" width="0.1056%" height="15" fill="rgb(211,50,8)"/><text x="50.9151%" y="175.50"></text></g><g><title>type_collecting (545,846 samples, 0.71%)</title><rect x="50.0863%" y="197" width="0.7067%" height="15" fill="rgb(245,182,24)"/><text x="50.3363%" y="207.50"></text></g><g><title>collect_mod_item_types (536,396 samples, 0.69%)</title><rect x="50.0985%" y="181" width="0.6945%" height="15" fill="rgb(242,14,37)"/><text x="50.3485%" y="191.50"></text></g><g><title>adt_def (90,261 samples, 0.12%)</title><rect x="51.7127%" y="133" width="0.1169%" height="15" fill="rgb(246,228,12)"/><text x="51.9627%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (88,511 samples, 0.11%)</title><rect x="51.7150%" y="117" width="0.1146%" height="15" fill="rgb(213,55,15)"/><text x="51.9650%" y="127.50"></text></g><g><title>adt_sized_constraint (86,870 samples, 0.11%)</title><rect x="51.8608%" y="117" width="0.1125%" height="15" fill="rgb(209,9,3)"/><text x="52.1108%" y="127.50"></text></g><g><title>adt_sized_constraint (131,741 samples, 0.17%)</title><rect x="51.8295%" y="133" width="0.1706%" height="15" fill="rgb(230,59,30)"/><text x="52.0795%" y="143.50"></text></g><g><title>adt_sized_constraint (244,852 samples, 0.32%)</title><rect x="51.7002%" y="149" width="0.3170%" height="15" fill="rgb(209,121,21)"/><text x="51.9502%" y="159.50"></text></g><g><title>evaluate_obligation (393,614 samples, 0.51%)</title><rect x="51.5661%" y="165" width="0.5096%" height="15" fill="rgb(220,109,13)"/><text x="51.8161%" y="175.50"></text></g><g><title>implied_outlives_bounds (111,151 samples, 0.14%)</title><rect x="52.0757%" y="165" width="0.1439%" height="15" fill="rgb(232,18,1)"/><text x="52.3257%" y="175.50"></text></g><g><title>param_env (186,691 samples, 0.24%)</title><rect x="52.2196%" y="165" width="0.2417%" height="15" fill="rgb(215,41,42)"/><text x="52.4696%" y="175.50"></text></g><g><title>predicates_of (85,241 samples, 0.11%)</title><rect x="52.4613%" y="165" width="0.1104%" height="15" fill="rgb(224,123,36)"/><text x="52.7113%" y="175.50"></text></g><g><title>region_scope_tree (124,503 samples, 0.16%)</title><rect x="52.5717%" y="165" width="0.1612%" height="15" fill="rgb(240,125,3)"/><text x="52.8217%" y="175.50"></text></g><g><title>analysis (40,072,057 samples, 51.88%)</title><rect x="0.9627%" y="229" width="51.8800%" height="15" fill="rgb(205,98,50)"/><text x="1.2127%" y="239.50">analysis</text></g><g><title>type_check_crate (21,196,316 samples, 27.44%)</title><rect x="25.4005%" y="213" width="27.4422%" height="15" fill="rgb(205,185,37)"/><text x="25.6505%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,581,158 samples, 2.05%)</title><rect x="50.7956%" y="197" width="2.0471%" height="15" fill="rgb(238,207,15)"/><text x="51.0456%" y="207.50">w..</text></g><g><title>check_item_well_formed (1,530,935 samples, 1.98%)</title><rect x="50.8607%" y="181" width="1.9821%" height="15" fill="rgb(213,199,42)"/><text x="51.1107%" y="191.50">c..</text></g><g><title>trait_impls_of (84,851 samples, 0.11%)</title><rect x="52.7329%" y="165" width="0.1099%" height="15" fill="rgb(235,201,11)"/><text x="52.9829%" y="175.50"></text></g><g><title>codegen_crate (553,506 samples, 0.72%)</title><rect x="52.8577%" y="229" width="0.7166%" height="15" fill="rgb(207,46,11)"/><text x="53.1077%" y="239.50"></text></g><g><title>AST_validation (222,152 samples, 0.29%)</title><rect x="53.8536%" y="213" width="0.2876%" height="15" fill="rgb(241,35,35)"/><text x="54.1036%" y="223.50"></text></g><g><title>crate_injection (96,711 samples, 0.13%)</title><rect x="54.1910%" y="213" width="0.1252%" height="15" fill="rgb(243,32,47)"/><text x="54.4410%" y="223.50"></text></g><g><title>metadata_register_crate (2,609,009 samples, 3.38%)</title><rect x="71.2515%" y="181" width="3.3778%" height="15" fill="rgb(247,202,23)"/><text x="71.5015%" y="191.50">met..</text></g><g><title>metadata_register_crate (968,002 samples, 1.25%)</title><rect x="73.3760%" y="165" width="1.2532%" height="15" fill="rgb(219,102,11)"/><text x="73.6260%" y="175.50"></text></g><g><title>metadata_register_crate (89,081 samples, 0.12%)</title><rect x="74.5139%" y="149" width="0.1153%" height="15" fill="rgb(243,110,44)"/><text x="74.7639%" y="159.50"></text></g><g><title>macro_expand_crate (15,837,367 samples, 20.50%)</title><rect x="54.3162%" y="213" width="20.5041%" height="15" fill="rgb(222,74,54)"/><text x="54.5662%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (15,811,316 samples, 20.47%)</title><rect x="54.3500%" y="197" width="20.4704%" height="15" fill="rgb(216,99,12)"/><text x="54.6000%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (147,612 samples, 0.19%)</title><rect x="74.6293%" y="181" width="0.1911%" height="15" fill="rgb(226,22,26)"/><text x="74.8793%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (179,932 samples, 0.23%)</title><rect x="74.8268%" y="213" width="0.2330%" height="15" fill="rgb(217,163,10)"/><text x="75.0768%" y="223.50"></text></g><g><title>finalize_imports (370,044 samples, 0.48%)</title><rect x="75.0721%" y="197" width="0.4791%" height="15" fill="rgb(213,25,53)"/><text x="75.3221%" y="207.50"></text></g><g><title>late_resolve_crate (10,151,414 samples, 13.14%)</title><rect x="75.5815%" y="197" width="13.1427%" height="15" fill="rgb(252,105,26)"/><text x="75.8315%" y="207.50">late_resolve_crate</text></g><g><title>configure_and_expand (27,243,634 samples, 35.27%)</title><rect x="53.5743%" y="229" width="35.2715%" height="15" fill="rgb(220,39,43)"/><text x="53.8243%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (10,648,270 samples, 13.79%)</title><rect x="75.0598%" y="213" width="13.7860%" height="15" fill="rgb(229,68,48)"/><text x="75.3098%" y="223.50">resolve_crate</text></g><g><title>drop_ast (113,851 samples, 0.15%)</title><rect x="88.8458%" y="229" width="0.1474%" height="15" fill="rgb(252,8,32)"/><text x="89.0958%" y="239.50"></text></g><g><title>early_lint_checks (251,153 samples, 0.33%)</title><rect x="89.0142%" y="229" width="0.3252%" height="15" fill="rgb(223,20,43)"/><text x="89.2642%" y="239.50"></text></g><g><title>free_global_ctxt (2,618,319 samples, 3.39%)</title><rect x="89.3393%" y="229" width="3.3899%" height="15" fill="rgb(229,81,49)"/><text x="89.5893%" y="239.50">fre..</text></g><g><title>generate_crate_metadata (453,485 samples, 0.59%)</title><rect x="92.7292%" y="229" width="0.5871%" height="15" fill="rgb(236,28,36)"/><text x="92.9792%" y="239.50"></text></g><g><title>hir_lowering (1,567,418 samples, 2.03%)</title><rect x="93.3163%" y="229" width="2.0293%" height="15" fill="rgb(249,185,26)"/><text x="93.5663%" y="239.50">h..</text></g><g><title>parse_crate (2,322,296 samples, 3.01%)</title><rect x="95.4150%" y="229" width="3.0066%" height="15" fill="rgb(249,174,33)"/><text x="95.6650%" y="239.50">par..</text></g><g><title>prepare_outputs (263,923 samples, 0.34%)</title><rect x="98.4346%" y="229" width="0.3417%" height="15" fill="rgb(233,201,37)"/><text x="98.6846%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (521,896 samples, 0.68%)</title><rect x="98.7763%" y="229" width="0.6757%" height="15" fill="rgb(221,78,26)"/><text x="99.0263%" y="239.50"></text></g><g><title>setup_global_ctxt (114,771 samples, 0.15%)</title><rect x="99.4656%" y="229" width="0.1486%" height="15" fill="rgb(250,127,30)"/><text x="99.7156%" y="239.50"></text></g><g><title>all (77,239,902 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (77,239,902 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (297,963 samples, 0.39%)</title><rect x="99.6142%" y="229" width="0.3858%" height="15" fill="rgb(249,83,47)"/><text x="99.8642%" y="239.50"></text></g></svg></svg>