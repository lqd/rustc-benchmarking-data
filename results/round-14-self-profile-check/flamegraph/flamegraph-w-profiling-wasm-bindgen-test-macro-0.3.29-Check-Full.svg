<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (133,761 samples, 0.19%)</title><rect x="6.5706%" y="165" width="0.1852%" height="15" fill="rgb(227,0,7)"/><text x="6.8206%" y="175.50"></text></g><g><title>item_attrs (108,921 samples, 0.15%)</title><rect x="6.9523%" y="133" width="0.1508%" height="15" fill="rgb(217,0,24)"/><text x="7.2023%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (105,161 samples, 0.15%)</title><rect x="6.9575%" y="117" width="0.1456%" height="15" fill="rgb(221,193,54)"/><text x="7.2075%" y="127.50"></text></g><g><title>codegen_fn_attrs (169,412 samples, 0.23%)</title><rect x="6.8854%" y="149" width="0.2346%" height="15" fill="rgb(248,212,6)"/><text x="7.1354%" y="159.50"></text></g><g><title>adt_drop_tys (90,881 samples, 0.13%)</title><rect x="8.7205%" y="101" width="0.1259%" height="15" fill="rgb(208,68,35)"/><text x="8.9705%" y="111.50"></text></g><g><title>adt_drop_tys (185,203 samples, 0.26%)</title><rect x="8.6997%" y="117" width="0.2565%" height="15" fill="rgb(232,128,0)"/><text x="8.9497%" y="127.50"></text></g><g><title>needs_drop_raw (469,618 samples, 0.65%)</title><rect x="8.6608%" y="133" width="0.6503%" height="15" fill="rgb(207,160,47)"/><text x="8.9108%" y="143.50"></text></g><g><title>is_copy_raw (256,304 samples, 0.35%)</title><rect x="8.9562%" y="117" width="0.3549%" height="15" fill="rgb(228,23,34)"/><text x="9.2062%" y="127.50"></text></g><g><title>evaluate_obligation (221,763 samples, 0.31%)</title><rect x="9.0040%" y="101" width="0.3071%" height="15" fill="rgb(218,30,26)"/><text x="9.2540%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (116,291 samples, 0.16%)</title><rect x="9.4570%" y="117" width="0.1610%" height="15" fill="rgb(220,122,19)"/><text x="9.7070%" y="127.50"></text></g><g><title>impl_parent (489,200 samples, 0.68%)</title><rect x="10.6666%" y="101" width="0.6775%" height="15" fill="rgb(250,228,42)"/><text x="10.9166%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (319,776 samples, 0.44%)</title><rect x="10.9012%" y="85" width="0.4428%" height="15" fill="rgb(240,193,28)"/><text x="11.1512%" y="95.50"></text></g><g><title>specialization_graph_of (2,665,451 samples, 3.69%)</title><rect x="9.6689%" y="117" width="3.6912%" height="15" fill="rgb(216,20,37)"/><text x="9.9189%" y="127.50">spec..</text></g><g><title>impl_trait_ref (1,455,863 samples, 2.02%)</title><rect x="11.3440%" y="101" width="2.0161%" height="15" fill="rgb(206,188,39)"/><text x="11.5940%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,272,253 samples, 1.76%)</title><rect x="11.5983%" y="85" width="1.7619%" height="15" fill="rgb(217,207,13)"/><text x="11.8483%" y="95.50"></text></g><g><title>resolve_instance (2,963,903 samples, 4.10%)</title><rect x="9.3111%" y="133" width="4.1045%" height="15" fill="rgb(231,73,38)"/><text x="9.5611%" y="143.50">reso..</text></g><g><title>thir_body (371,095 samples, 0.51%)</title><rect x="13.4174%" y="133" width="0.5139%" height="15" fill="rgb(225,20,46)"/><text x="13.6674%" y="143.50"></text></g><g><title>mir_const (5,499,883 samples, 7.62%)</title><rect x="6.3166%" y="181" width="7.6165%" height="15" fill="rgb(210,31,41)"/><text x="6.5666%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (5,182,680 samples, 7.18%)</title><rect x="6.7559%" y="165" width="7.1772%" height="15" fill="rgb(221,200,47)"/><text x="7.0059%" y="175.50">unsafety_c..</text></g><g><title>mir_built (4,919,696 samples, 6.81%)</title><rect x="7.1201%" y="149" width="6.8130%" height="15" fill="rgb(226,26,5)"/><text x="7.3701%" y="159.50">mir_built</text></g><g><title>has_structural_eq_impls (148,572 samples, 0.21%)</title><rect x="14.1561%" y="165" width="0.2057%" height="15" fill="rgb(249,33,26)"/><text x="14.4061%" y="175.50"></text></g><g><title>evaluate_obligation (129,472 samples, 0.18%)</title><rect x="14.1825%" y="149" width="0.1793%" height="15" fill="rgb(235,183,28)"/><text x="14.4325%" y="159.50"></text></g><g><title>trait_impls_of (108,832 samples, 0.15%)</title><rect x="14.2111%" y="133" width="0.1507%" height="15" fill="rgb(221,5,38)"/><text x="14.4611%" y="143.50"></text></g><g><title>is_freeze_raw (117,591 samples, 0.16%)</title><rect x="14.3640%" y="165" width="0.1628%" height="15" fill="rgb(247,18,42)"/><text x="14.6140%" y="175.50"></text></g><g><title>evaluate_obligation (113,521 samples, 0.16%)</title><rect x="14.3696%" y="149" width="0.1572%" height="15" fill="rgb(241,131,45)"/><text x="14.6196%" y="159.50"></text></g><g><title>mir_const (265,383 samples, 0.37%)</title><rect x="14.5313%" y="165" width="0.3675%" height="15" fill="rgb(249,31,29)"/><text x="14.7813%" y="175.50"></text></g><g><title>unsafety_check_result (167,022 samples, 0.23%)</title><rect x="14.6675%" y="149" width="0.2313%" height="15" fill="rgb(225,111,53)"/><text x="14.9175%" y="159.50"></text></g><g><title>mir_built (122,941 samples, 0.17%)</title><rect x="14.7286%" y="133" width="0.1703%" height="15" fill="rgb(238,160,17)"/><text x="14.9786%" y="143.50"></text></g><g><title>mir_promoted (6,456,244 samples, 8.94%)</title><rect x="5.9925%" y="197" width="8.9409%" height="15" fill="rgb(214,148,48)"/><text x="6.2425%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (722,347 samples, 1.00%)</title><rect x="13.9330%" y="181" width="1.0003%" height="15" fill="rgb(232,36,49)"/><text x="14.1830%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (140,082 samples, 0.19%)</title><rect x="14.9334%" y="197" width="0.1940%" height="15" fill="rgb(209,103,24)"/><text x="15.1834%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (112,790 samples, 0.16%)</title><rect x="15.1274%" y="197" width="0.1562%" height="15" fill="rgb(229,88,8)"/><text x="15.3774%" y="207.50"></text></g><g><title>type_op_prove_predicate (404,626 samples, 0.56%)</title><rect x="15.3194%" y="197" width="0.5603%" height="15" fill="rgb(213,181,19)"/><text x="15.5694%" y="207.50"></text></g><g><title>MIR_borrow_checking (10,763,782 samples, 14.91%)</title><rect x="0.9842%" y="229" width="14.9061%" height="15" fill="rgb(254,191,54)"/><text x="1.2342%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,752,512 samples, 14.89%)</title><rect x="0.9998%" y="213" width="14.8905%" height="15" fill="rgb(241,83,37)"/><text x="1.2498%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (136,562 samples, 0.19%)</title><rect x="15.8903%" y="229" width="0.1891%" height="15" fill="rgb(233,36,39)"/><text x="16.1403%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (115,862 samples, 0.16%)</title><rect x="15.9190%" y="213" width="0.1605%" height="15" fill="rgb(226,3,54)"/><text x="16.1690%" y="223.50"></text></g><g><title>codegen_fn_attrs (135,381 samples, 0.19%)</title><rect x="16.2943%" y="197" width="0.1875%" height="15" fill="rgb(245,192,40)"/><text x="16.5443%" y="207.50"></text></g><g><title>check_mod_attrs (204,922 samples, 0.28%)</title><rect x="16.1982%" y="213" width="0.2838%" height="15" fill="rgb(238,167,29)"/><text x="16.4482%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (174,822 samples, 0.24%)</title><rect x="16.5533%" y="213" width="0.2421%" height="15" fill="rgb(232,182,51)"/><text x="16.8033%" y="223.50"></text></g><g><title>misc_checking_1 (476,485 samples, 0.66%)</title><rect x="16.1755%" y="229" width="0.6599%" height="15" fill="rgb(231,60,39)"/><text x="16.4255%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (178,912 samples, 0.25%)</title><rect x="16.8371%" y="213" width="0.2478%" height="15" fill="rgb(208,69,12)"/><text x="17.0871%" y="223.50"></text></g><g><title>check_mod_liveness (146,032 samples, 0.20%)</title><rect x="16.8827%" y="197" width="0.2022%" height="15" fill="rgb(235,93,37)"/><text x="17.1327%" y="207.50"></text></g><g><title>misc_checking_2 (348,343 samples, 0.48%)</title><rect x="16.8353%" y="229" width="0.4824%" height="15" fill="rgb(213,116,39)"/><text x="17.0853%" y="239.50"></text></g><g><title>match_checking (168,131 samples, 0.23%)</title><rect x="17.0849%" y="213" width="0.2328%" height="15" fill="rgb(222,207,29)"/><text x="17.3349%" y="223.50"></text></g><g><title>check_match (163,641 samples, 0.23%)</title><rect x="17.0911%" y="197" width="0.2266%" height="15" fill="rgb(206,96,30)"/><text x="17.3411%" y="207.50"></text></g><g><title>fn_abi_of_instance (100,950 samples, 0.14%)</title><rect x="18.1591%" y="85" width="0.1398%" height="15" fill="rgb(218,138,4)"/><text x="18.4091%" y="95.50"></text></g><g><title>eval_to_const_value_raw (321,413 samples, 0.45%)</title><rect x="18.0179%" y="133" width="0.4451%" height="15" fill="rgb(250,191,14)"/><text x="18.2679%" y="143.50"></text></g><g><title>eval_to_const_value_raw (320,733 samples, 0.44%)</title><rect x="18.0188%" y="117" width="0.4442%" height="15" fill="rgb(239,60,40)"/><text x="18.2688%" y="127.50"></text></g><g><title>eval_to_allocation_raw (318,433 samples, 0.44%)</title><rect x="18.0220%" y="101" width="0.4410%" height="15" fill="rgb(206,27,48)"/><text x="18.2720%" y="111.50"></text></g><g><title>eval_to_allocation_raw (581,327 samples, 0.81%)</title><rect x="17.6601%" y="181" width="0.8050%" height="15" fill="rgb(225,35,8)"/><text x="17.9101%" y="191.50"></text></g><g><title>eval_to_allocation_raw (577,277 samples, 0.80%)</title><rect x="17.6657%" y="165" width="0.7994%" height="15" fill="rgb(250,213,24)"/><text x="17.9157%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (330,873 samples, 0.46%)</title><rect x="18.0069%" y="149" width="0.4582%" height="15" fill="rgb(247,123,22)"/><text x="18.2569%" y="159.50"></text></g><g><title>impl_parent (646,214 samples, 0.89%)</title><rect x="19.9193%" y="149" width="0.8949%" height="15" fill="rgb(231,138,38)"/><text x="20.1693%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (434,902 samples, 0.60%)</title><rect x="20.2119%" y="133" width="0.6023%" height="15" fill="rgb(231,145,46)"/><text x="20.4619%" y="143.50"></text></g><g><title>specialization_graph_of (3,751,942 samples, 5.20%)</title><rect x="18.6930%" y="165" width="5.1958%" height="15" fill="rgb(251,118,11)"/><text x="18.9430%" y="175.50">specia..</text></g><g><title>impl_trait_ref (2,220,246 samples, 3.07%)</title><rect x="20.8142%" y="149" width="3.0747%" height="15" fill="rgb(217,147,25)"/><text x="21.0642%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,001,486 samples, 2.77%)</title><rect x="21.1171%" y="133" width="2.7717%" height="15" fill="rgb(247,81,37)"/><text x="21.3671%" y="143.50">me..</text></g><g><title>resolve_instance (3,802,043 samples, 5.27%)</title><rect x="18.6274%" y="181" width="5.2652%" height="15" fill="rgb(209,12,38)"/><text x="18.8774%" y="191.50">resolv..</text></g><g><title>crate_lints (4,646,622 samples, 6.43%)</title><rect x="17.4637%" y="197" width="6.4348%" height="15" fill="rgb(227,1,9)"/><text x="17.7137%" y="207.50">crate_li..</text></g><g><title>lint_checking (4,785,954 samples, 6.63%)</title><rect x="17.4602%" y="213" width="6.6278%" height="15" fill="rgb(248,47,43)"/><text x="17.7102%" y="223.50">lint_chec..</text></g><g><title>module_lints (136,821 samples, 0.19%)</title><rect x="23.8985%" y="197" width="0.1895%" height="15" fill="rgb(221,10,30)"/><text x="24.1485%" y="207.50"></text></g><g><title>lint_mod (133,271 samples, 0.18%)</title><rect x="23.9034%" y="181" width="0.1846%" height="15" fill="rgb(210,229,1)"/><text x="24.1534%" y="191.50"></text></g><g><title>privacy_checking_modules (215,902 samples, 0.30%)</title><rect x="24.1549%" y="213" width="0.2990%" height="15" fill="rgb(222,148,37)"/><text x="24.4049%" y="223.50"></text></g><g><title>check_mod_privacy (214,132 samples, 0.30%)</title><rect x="24.1573%" y="197" width="0.2965%" height="15" fill="rgb(234,67,33)"/><text x="24.4073%" y="207.50"></text></g><g><title>misc_checking_3 (5,167,737 samples, 7.16%)</title><rect x="17.3177%" y="229" width="7.1565%" height="15" fill="rgb(247,98,35)"/><text x="17.5677%" y="239.50">misc_check..</text></g><g><title>adt_def (95,211 samples, 0.13%)</title><rect x="33.0373%" y="149" width="0.1319%" height="15" fill="rgb(247,138,52)"/><text x="33.2873%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (94,371 samples, 0.13%)</title><rect x="33.0385%" y="133" width="0.1307%" height="15" fill="rgb(213,79,30)"/><text x="33.2885%" y="143.50"></text></g><g><title>item_attrs (85,431 samples, 0.12%)</title><rect x="33.0509%" y="117" width="0.1183%" height="15" fill="rgb(246,177,23)"/><text x="33.3009%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (83,261 samples, 0.12%)</title><rect x="33.0539%" y="101" width="0.1153%" height="15" fill="rgb(230,62,27)"/><text x="33.3039%" y="111.50"></text></g><g><title>adt_sized_constraint (101,791 samples, 0.14%)</title><rect x="33.0321%" y="165" width="0.1410%" height="15" fill="rgb(216,154,8)"/><text x="33.2821%" y="175.50"></text></g><g><title>associated_item (305,504 samples, 0.42%)</title><rect x="33.3322%" y="149" width="0.4231%" height="15" fill="rgb(244,35,45)"/><text x="33.5822%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (228,244 samples, 0.32%)</title><rect x="33.4392%" y="133" width="0.3161%" height="15" fill="rgb(251,115,12)"/><text x="33.6892%" y="143.50"></text></g><g><title>associated_items (436,176 samples, 0.60%)</title><rect x="33.1822%" y="165" width="0.6040%" height="15" fill="rgb(240,54,50)"/><text x="33.4322%" y="175.50"></text></g><g><title>adt_dtorck_constraint (108,644 samples, 0.15%)</title><rect x="34.3281%" y="101" width="0.1505%" height="15" fill="rgb(233,84,52)"/><text x="34.5781%" y="111.50"></text></g><g><title>adt_dtorck_constraint (217,874 samples, 0.30%)</title><rect x="34.2165%" y="117" width="0.3017%" height="15" fill="rgb(207,117,47)"/><text x="34.4665%" y="127.50"></text></g><g><title>adt_dtorck_constraint (340,904 samples, 0.47%)</title><rect x="34.0865%" y="133" width="0.4721%" height="15" fill="rgb(249,43,39)"/><text x="34.3365%" y="143.50"></text></g><g><title>dropck_outlives (531,427 samples, 0.74%)</title><rect x="33.8504%" y="165" width="0.7359%" height="15" fill="rgb(209,38,44)"/><text x="34.1004%" y="175.50"></text></g><g><title>adt_dtorck_constraint (459,817 samples, 0.64%)</title><rect x="33.9495%" y="149" width="0.6368%" height="15" fill="rgb(236,212,23)"/><text x="34.1995%" y="159.50"></text></g><g><title>adt_def (344,734 samples, 0.48%)</title><rect x="35.6785%" y="133" width="0.4774%" height="15" fill="rgb(242,79,21)"/><text x="35.9285%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (341,114 samples, 0.47%)</title><rect x="35.6836%" y="117" width="0.4724%" height="15" fill="rgb(211,96,35)"/><text x="35.9336%" y="127.50"></text></g><g><title>item_attrs (291,033 samples, 0.40%)</title><rect x="35.7529%" y="101" width="0.4030%" height="15" fill="rgb(253,215,40)"/><text x="36.0029%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (286,963 samples, 0.40%)</title><rect x="35.7585%" y="85" width="0.3974%" height="15" fill="rgb(211,81,21)"/><text x="36.0085%" y="95.50"></text></g><g><title>adt_sized_constraint (76,450 samples, 0.11%)</title><rect x="36.1559%" y="133" width="0.1059%" height="15" fill="rgb(208,190,38)"/><text x="36.4059%" y="143.50"></text></g><g><title>adt_sized_constraint (459,015 samples, 0.64%)</title><rect x="35.6504%" y="149" width="0.6357%" height="15" fill="rgb(235,213,38)"/><text x="35.9004%" y="159.50"></text></g><g><title>predicates_of (161,472 samples, 0.22%)</title><rect x="36.4918%" y="149" width="0.2236%" height="15" fill="rgb(237,122,38)"/><text x="36.7418%" y="159.50"></text></g><g><title>predicates_defined_on (102,771 samples, 0.14%)</title><rect x="36.5731%" y="133" width="0.1423%" height="15" fill="rgb(244,218,35)"/><text x="36.8231%" y="143.50"></text></g><g><title>specializes (151,361 samples, 0.21%)</title><rect x="36.7155%" y="149" width="0.2096%" height="15" fill="rgb(240,68,47)"/><text x="36.9655%" y="159.50"></text></g><g><title>trait_impls_of (751,581 samples, 1.04%)</title><rect x="36.9391%" y="149" width="1.0408%" height="15" fill="rgb(210,16,53)"/><text x="37.1891%" y="159.50"></text></g><g><title>implementations_of_trait (235,362 samples, 0.33%)</title><rect x="37.6539%" y="133" width="0.3259%" height="15" fill="rgb(235,124,12)"/><text x="37.9039%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (157,651 samples, 0.22%)</title><rect x="37.7616%" y="117" width="0.2183%" height="15" fill="rgb(224,169,11)"/><text x="38.0116%" y="127.50"></text></g><g><title>evaluate_obligation (2,453,118 samples, 3.40%)</title><rect x="34.5863%" y="165" width="3.3972%" height="15" fill="rgb(250,166,2)"/><text x="34.8363%" y="175.50">eva..</text></g><g><title>fn_sig (134,402 samples, 0.19%)</title><rect x="38.0064%" y="165" width="0.1861%" height="15" fill="rgb(242,216,29)"/><text x="38.2564%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (116,321 samples, 0.16%)</title><rect x="38.0315%" y="149" width="0.1611%" height="15" fill="rgb(230,116,27)"/><text x="38.2815%" y="159.50"></text></g><g><title>generics_of (98,372 samples, 0.14%)</title><rect x="38.1926%" y="165" width="0.1362%" height="15" fill="rgb(228,99,48)"/><text x="38.4426%" y="175.50"></text></g><g><title>item_attrs (89,940 samples, 0.12%)</title><rect x="38.4557%" y="165" width="0.1246%" height="15" fill="rgb(253,11,6)"/><text x="38.7057%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (82,140 samples, 0.11%)</title><rect x="38.4665%" y="149" width="0.1138%" height="15" fill="rgb(247,143,39)"/><text x="38.7165%" y="159.50"></text></g><g><title>evaluate_obligation (132,710 samples, 0.18%)</title><rect x="38.7969%" y="149" width="0.1838%" height="15" fill="rgb(236,97,10)"/><text x="39.0469%" y="159.50"></text></g><g><title>method_autoderef_steps (255,583 samples, 0.35%)</title><rect x="38.6400%" y="165" width="0.3539%" height="15" fill="rgb(233,208,19)"/><text x="38.8900%" y="175.50"></text></g><g><title>explicit_predicates_of (91,031 samples, 0.13%)</title><rect x="39.3235%" y="133" width="0.1261%" height="15" fill="rgb(216,164,2)"/><text x="39.5735%" y="143.50"></text></g><g><title>predicates_of (360,886 samples, 0.50%)</title><rect x="39.0164%" y="165" width="0.4998%" height="15" fill="rgb(220,129,5)"/><text x="39.2664%" y="175.50"></text></g><g><title>predicates_defined_on (227,332 samples, 0.31%)</title><rect x="39.2013%" y="149" width="0.3148%" height="15" fill="rgb(242,17,10)"/><text x="39.4513%" y="159.50"></text></g><g><title>type_of (84,521 samples, 0.12%)</title><rect x="39.5398%" y="165" width="0.1170%" height="15" fill="rgb(242,107,0)"/><text x="39.7898%" y="175.50"></text></g><g><title>item_bodies_checking (10,940,063 samples, 15.15%)</title><rect x="24.5513%" y="213" width="15.1503%" height="15" fill="rgb(251,28,31)"/><text x="24.8013%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,937,713 samples, 15.15%)</title><rect x="24.5546%" y="197" width="15.1470%" height="15" fill="rgb(233,223,10)"/><text x="24.8046%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (10,932,993 samples, 15.14%)</title><rect x="24.5611%" y="181" width="15.1405%" height="15" fill="rgb(215,21,27)"/><text x="24.8111%" y="191.50">typeck</text></g><g><title>layout_of (77,771 samples, 0.11%)</title><rect x="39.7231%" y="181" width="0.1077%" height="15" fill="rgb(232,23,21)"/><text x="39.9731%" y="191.50"></text></g><g><title>impl_parent (86,260 samples, 0.12%)</title><rect x="40.6417%" y="53" width="0.1195%" height="15" fill="rgb(244,5,23)"/><text x="40.8917%" y="63.50"></text></g><g><title>impl_trait_ref (323,492 samples, 0.45%)</title><rect x="40.7611%" y="53" width="0.4480%" height="15" fill="rgb(226,81,46)"/><text x="41.0111%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (292,192 samples, 0.40%)</title><rect x="40.8045%" y="37" width="0.4046%" height="15" fill="rgb(247,70,30)"/><text x="41.0545%" y="47.50"></text></g><g><title>coherent_trait (535,386 samples, 0.74%)</title><rect x="40.5079%" y="85" width="0.7414%" height="15" fill="rgb(212,68,19)"/><text x="40.7579%" y="95.50"></text></g><g><title>specialization_graph_of (531,676 samples, 0.74%)</title><rect x="40.5130%" y="69" width="0.7363%" height="15" fill="rgb(240,187,13)"/><text x="40.7630%" y="79.50"></text></g><g><title>adt_destructor (549,256 samples, 0.76%)</title><rect x="40.4988%" y="117" width="0.7606%" height="15" fill="rgb(223,113,26)"/><text x="40.7488%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (548,536 samples, 0.76%)</title><rect x="40.4998%" y="101" width="0.7596%" height="15" fill="rgb(206,192,2)"/><text x="40.7498%" y="111.50"></text></g><g><title>adt_dtorck_constraint (561,726 samples, 0.78%)</title><rect x="40.4831%" y="133" width="0.7779%" height="15" fill="rgb(241,108,4)"/><text x="40.7331%" y="143.50"></text></g><g><title>dropck_outlives (604,776 samples, 0.84%)</title><rect x="40.4268%" y="165" width="0.8375%" height="15" fill="rgb(247,173,49)"/><text x="40.6768%" y="175.50"></text></g><g><title>adt_dtorck_constraint (580,216 samples, 0.80%)</title><rect x="40.4608%" y="149" width="0.8035%" height="15" fill="rgb(224,114,35)"/><text x="40.7108%" y="159.50"></text></g><g><title>evaluate_obligation (80,411 samples, 0.11%)</title><rect x="41.2643%" y="165" width="0.1114%" height="15" fill="rgb(245,159,27)"/><text x="41.5143%" y="175.50"></text></g><g><title>item_types_checking (1,325,285 samples, 1.84%)</title><rect x="39.7016%" y="213" width="1.8353%" height="15" fill="rgb(245,172,44)"/><text x="39.9516%" y="223.50">i..</text></g><g><title>check_mod_item_types (1,323,655 samples, 1.83%)</title><rect x="39.7038%" y="197" width="1.8331%" height="15" fill="rgb(236,23,11)"/><text x="39.9538%" y="207.50">c..</text></g><g><title>typeck (1,231,954 samples, 1.71%)</title><rect x="39.8308%" y="181" width="1.7061%" height="15" fill="rgb(205,117,38)"/><text x="40.0808%" y="191.50"></text></g><g><title>fn_sig (127,652 samples, 0.18%)</title><rect x="41.6924%" y="181" width="0.1768%" height="15" fill="rgb(237,72,25)"/><text x="41.9424%" y="191.50"></text></g><g><title>type_collecting (323,554 samples, 0.45%)</title><rect x="41.6153%" y="213" width="0.4481%" height="15" fill="rgb(244,70,9)"/><text x="41.8653%" y="223.50"></text></g><g><title>collect_mod_item_types (317,024 samples, 0.44%)</title><rect x="41.6244%" y="197" width="0.4390%" height="15" fill="rgb(217,125,39)"/><text x="41.8744%" y="207.50"></text></g><g><title>adt_sized_constraint (83,572 samples, 0.12%)</title><rect x="42.8386%" y="149" width="0.1157%" height="15" fill="rgb(235,36,10)"/><text x="43.0886%" y="159.50"></text></g><g><title>adt_sized_constraint (144,062 samples, 0.20%)</title><rect x="42.7624%" y="165" width="0.1995%" height="15" fill="rgb(251,123,47)"/><text x="43.0124%" y="175.50"></text></g><g><title>evaluate_obligation (409,865 samples, 0.57%)</title><rect x="42.5208%" y="181" width="0.5676%" height="15" fill="rgb(221,13,13)"/><text x="42.7708%" y="191.50"></text></g><g><title>param_env (146,592 samples, 0.20%)</title><rect x="43.1781%" y="181" width="0.2030%" height="15" fill="rgb(238,131,9)"/><text x="43.4281%" y="191.50"></text></g><g><title>region_scope_tree (88,331 samples, 0.12%)</title><rect x="43.4192%" y="181" width="0.1223%" height="15" fill="rgb(211,50,8)"/><text x="43.6692%" y="191.50"></text></g><g><title>analysis (30,869,517 samples, 42.75%)</title><rect x="0.7931%" y="245" width="42.7494%" height="15" fill="rgb(245,182,24)"/><text x="1.0431%" y="255.50">analysis</text></g><g><title>type_check_crate (13,769,295 samples, 19.07%)</title><rect x="24.4742%" y="229" width="19.0683%" height="15" fill="rgb(242,14,37)"/><text x="24.7242%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,067,213 samples, 1.48%)</title><rect x="42.0646%" y="213" width="1.4779%" height="15" fill="rgb(246,228,12)"/><text x="42.3146%" y="223.50"></text></g><g><title>check_item_well_formed (1,040,353 samples, 1.44%)</title><rect x="42.1018%" y="197" width="1.4407%" height="15" fill="rgb(213,55,15)"/><text x="42.3518%" y="207.50"></text></g><g><title>codegen_crate (376,155 samples, 0.52%)</title><rect x="43.5587%" y="245" width="0.5209%" height="15" fill="rgb(209,9,3)"/><text x="43.8087%" y="255.50"></text></g><g><title>crate_injection (102,811 samples, 0.14%)</title><rect x="44.5095%" y="229" width="0.1424%" height="15" fill="rgb(230,59,30)"/><text x="44.7595%" y="239.50"></text></g><g><title>metadata_load_macro (994,121 samples, 1.38%)</title><rect x="83.5056%" y="197" width="1.3767%" height="15" fill="rgb(209,121,21)"/><text x="83.7556%" y="207.50"></text></g><g><title>macro_expand_crate (31,897,479 samples, 44.17%)</title><rect x="44.6518%" y="229" width="44.1729%" height="15" fill="rgb(220,109,13)"/><text x="44.9018%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (31,874,889 samples, 44.14%)</title><rect x="44.6831%" y="213" width="44.1417%" height="15" fill="rgb(232,18,1)"/><text x="44.9331%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,846,860 samples, 3.94%)</title><rect x="84.8823%" y="197" width="3.9424%" height="15" fill="rgb(215,41,42)"/><text x="85.1323%" y="207.50">meta..</text></g><g><title>metadata_register_crate (990,220 samples, 1.37%)</title><rect x="87.4535%" y="181" width="1.3713%" height="15" fill="rgb(224,123,36)"/><text x="87.7035%" y="191.50"></text></g><g><title>metadata_register_crate (77,140 samples, 0.11%)</title><rect x="88.7179%" y="165" width="0.1068%" height="15" fill="rgb(240,125,3)"/><text x="88.9679%" y="175.50"></text></g><g><title>maybe_create_a_macro_crate (271,923 samples, 0.38%)</title><rect x="88.8265%" y="229" width="0.3766%" height="15" fill="rgb(205,98,50)"/><text x="89.0765%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (105,221 samples, 0.15%)</title><rect x="89.2030%" y="229" width="0.1457%" height="15" fill="rgb(205,185,37)"/><text x="89.4530%" y="239.50"></text></g><g><title>finalize_imports (121,061 samples, 0.17%)</title><rect x="89.3546%" y="213" width="0.1677%" height="15" fill="rgb(238,207,15)"/><text x="89.6046%" y="223.50"></text></g><g><title>finalize_macro_resolutions (101,611 samples, 0.14%)</title><rect x="89.5222%" y="213" width="0.1407%" height="15" fill="rgb(213,199,42)"/><text x="89.7722%" y="223.50"></text></g><g><title>late_resolve_crate (1,150,603 samples, 1.59%)</title><rect x="89.6630%" y="213" width="1.5934%" height="15" fill="rgb(235,201,11)"/><text x="89.9130%" y="223.50"></text></g><g><title>configure_and_expand (34,107,324 samples, 47.23%)</title><rect x="44.0796%" y="245" width="47.2332%" height="15" fill="rgb(207,46,11)"/><text x="44.3296%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,418,276 samples, 1.96%)</title><rect x="89.3487%" y="229" width="1.9641%" height="15" fill="rgb(241,35,35)"/><text x="89.5987%" y="239.50">r..</text></g><g><title>early_lint_checks (150,902 samples, 0.21%)</title><rect x="91.3968%" y="245" width="0.2090%" height="15" fill="rgb(243,32,47)"/><text x="91.6468%" y="255.50"></text></g><g><title>free_global_ctxt (2,853,523 samples, 3.95%)</title><rect x="91.6058%" y="245" width="3.9517%" height="15" fill="rgb(247,202,23)"/><text x="91.8558%" y="255.50">free..</text></g><g><title>crate_hash (76,101 samples, 0.11%)</title><rect x="95.6691%" y="229" width="0.1054%" height="15" fill="rgb(219,102,11)"/><text x="95.9191%" y="239.50"></text></g><g><title>generate_crate_metadata (160,841 samples, 0.22%)</title><rect x="95.5575%" y="245" width="0.2227%" height="15" fill="rgb(243,110,44)"/><text x="95.8075%" y="255.50"></text></g><g><title>hir_lowering (699,308 samples, 0.97%)</title><rect x="95.7802%" y="245" width="0.9684%" height="15" fill="rgb(222,74,54)"/><text x="96.0302%" y="255.50"></text></g><g><title>parse_crate (1,271,364 samples, 1.76%)</title><rect x="96.8219%" y="245" width="1.7606%" height="15" fill="rgb(216,99,12)"/><text x="97.0719%" y="255.50"></text></g><g><title>prepare_outputs (175,162 samples, 0.24%)</title><rect x="98.5952%" y="245" width="0.2426%" height="15" fill="rgb(226,22,26)"/><text x="98.8452%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (471,455 samples, 0.65%)</title><rect x="98.8378%" y="245" width="0.6529%" height="15" fill="rgb(217,163,10)"/><text x="99.0878%" y="255.50"></text></g><g><title>setup_global_ctxt (82,571 samples, 0.11%)</title><rect x="99.5070%" y="245" width="0.1143%" height="15" fill="rgb(213,25,53)"/><text x="99.7570%" y="255.50"></text></g><g><title>all (72,210,444 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (72,210,444 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (273,433 samples, 0.38%)</title><rect x="99.6213%" y="245" width="0.3787%" height="15" fill="rgb(229,68,48)"/><text x="99.8713%" y="255.50"></text></g></svg></svg>