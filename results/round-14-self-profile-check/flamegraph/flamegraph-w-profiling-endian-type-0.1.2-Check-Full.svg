<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (368,213 samples, 0.31%)</title><rect x="7.5887%" y="69" width="0.3085%" height="15" fill="rgb(227,0,7)"/><text x="7.8387%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (358,923 samples, 0.30%)</title><rect x="7.5965%" y="53" width="0.3007%" height="15" fill="rgb(217,0,24)"/><text x="7.8465%" y="63.50"></text></g><g><title>codegen_fn_attrs (548,316 samples, 0.46%)</title><rect x="7.4509%" y="85" width="0.4593%" height="15" fill="rgb(221,193,54)"/><text x="7.7009%" y="95.50"></text></g><g><title>eval_to_const_value_raw (119,912 samples, 0.10%)</title><rect x="9.4710%" y="69" width="0.1005%" height="15" fill="rgb(248,212,6)"/><text x="9.7210%" y="79.50"></text></g><g><title>needs_drop_raw (793,663 samples, 0.66%)</title><rect x="9.5871%" y="69" width="0.6649%" height="15" fill="rgb(208,68,35)"/><text x="9.8371%" y="79.50"></text></g><g><title>is_copy_raw (660,871 samples, 0.55%)</title><rect x="9.6984%" y="53" width="0.5536%" height="15" fill="rgb(232,128,0)"/><text x="9.9484%" y="63.50"></text></g><g><title>evaluate_obligation (569,130 samples, 0.48%)</title><rect x="9.7752%" y="37" width="0.4768%" height="15" fill="rgb(207,160,47)"/><text x="10.0252%" y="47.50"></text></g><g><title>resolve_instance (269,063 samples, 0.23%)</title><rect x="10.2743%" y="69" width="0.2254%" height="15" fill="rgb(228,23,34)"/><text x="10.5243%" y="79.50"></text></g><g><title>thir_body (596,298 samples, 0.50%)</title><rect x="10.5227%" y="69" width="0.4995%" height="15" fill="rgb(218,30,26)"/><text x="10.7727%" y="79.50"></text></g><g><title>mir_const (5,312,271 samples, 4.45%)</title><rect x="6.5972%" y="117" width="4.4503%" height="15" fill="rgb(220,122,19)"/><text x="6.8472%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (4,659,213 samples, 3.90%)</title><rect x="7.1443%" y="101" width="3.9032%" height="15" fill="rgb(250,228,42)"/><text x="7.3943%" y="111.50">unsa..</text></g><g><title>mir_built (3,744,882 samples, 3.14%)</title><rect x="7.9103%" y="85" width="3.1373%" height="15" fill="rgb(240,193,28)"/><text x="8.1603%" y="95.50">mir..</text></g><g><title>mir_promoted (5,951,518 samples, 4.99%)</title><rect x="6.1040%" y="133" width="4.9858%" height="15" fill="rgb(216,20,37)"/><text x="6.3540%" y="143.50">mir_pr..</text></g><g><title>type_op_normalize_ty (196,094 samples, 0.16%)</title><rect x="11.1774%" y="133" width="0.1643%" height="15" fill="rgb(206,188,39)"/><text x="11.4274%" y="143.50"></text></g><g><title>normalize_projection_ty (142,032 samples, 0.12%)</title><rect x="11.2227%" y="117" width="0.1190%" height="15" fill="rgb(217,207,13)"/><text x="11.4727%" y="127.50"></text></g><g><title>type_op_prove_predicate (372,294 samples, 0.31%)</title><rect x="11.3417%" y="133" width="0.3119%" height="15" fill="rgb(231,73,38)"/><text x="11.5917%" y="143.50"></text></g><g><title>MIR_borrow_checking (12,711,672 samples, 10.65%)</title><rect x="1.0067%" y="165" width="10.6491%" height="15" fill="rgb(225,20,46)"/><text x="1.2567%" y="175.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (12,584,660 samples, 10.54%)</title><rect x="1.1131%" y="149" width="10.5427%" height="15" fill="rgb(210,31,41)"/><text x="1.3631%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (337,814 samples, 0.28%)</title><rect x="11.6758%" y="165" width="0.2830%" height="15" fill="rgb(221,200,47)"/><text x="11.9258%" y="175.50"></text></g><g><title>associated_item (125,822 samples, 0.11%)</title><rect x="12.4453%" y="101" width="0.1054%" height="15" fill="rgb(226,26,5)"/><text x="12.6953%" y="111.50"></text></g><g><title>get_lang_items (146,181 samples, 0.12%)</title><rect x="12.6061%" y="85" width="0.1225%" height="15" fill="rgb(249,33,26)"/><text x="12.8561%" y="95.50"></text></g><g><title>codegen_fn_attrs (409,944 samples, 0.34%)</title><rect x="12.5507%" y="101" width="0.3434%" height="15" fill="rgb(235,183,28)"/><text x="12.8007%" y="111.50"></text></g><g><title>codegen_fn_attrs (758,117 samples, 0.64%)</title><rect x="12.2709%" y="133" width="0.6351%" height="15" fill="rgb(221,5,38)"/><text x="12.5209%" y="143.50"></text></g><g><title>should_inherit_track_caller (651,666 samples, 0.55%)</title><rect x="12.3601%" y="117" width="0.5459%" height="15" fill="rgb(247,18,42)"/><text x="12.6101%" y="127.50"></text></g><g><title>check_mod_attrs (1,106,342 samples, 0.93%)</title><rect x="11.9795%" y="149" width="0.9268%" height="15" fill="rgb(241,131,45)"/><text x="12.2295%" y="159.50"></text></g><g><title>check_mod_const_bodies (269,583 samples, 0.23%)</title><rect x="12.9063%" y="149" width="0.2258%" height="15" fill="rgb(249,31,29)"/><text x="13.1563%" y="159.50"></text></g><g><title>lookup_deprecation_entry (214,122 samples, 0.18%)</title><rect x="13.4652%" y="133" width="0.1794%" height="15" fill="rgb(225,111,53)"/><text x="13.7152%" y="143.50"></text></g><g><title>stability_index (131,432 samples, 0.11%)</title><rect x="13.5344%" y="117" width="0.1101%" height="15" fill="rgb(238,160,17)"/><text x="13.7844%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (622,207 samples, 0.52%)</title><rect x="13.2240%" y="149" width="0.5212%" height="15" fill="rgb(214,148,48)"/><text x="13.4740%" y="159.50"></text></g><g><title>misc_checking_1 (2,249,315 samples, 1.88%)</title><rect x="11.9590%" y="165" width="1.8843%" height="15" fill="rgb(232,36,49)"/><text x="12.2090%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (217,452 samples, 0.18%)</title><rect x="13.8448%" y="149" width="0.1822%" height="15" fill="rgb(209,103,24)"/><text x="14.0948%" y="159.50"></text></g><g><title>check_mod_liveness (161,861 samples, 0.14%)</title><rect x="13.8914%" y="133" width="0.1356%" height="15" fill="rgb(229,88,8)"/><text x="14.1414%" y="143.50"></text></g><g><title>misc_checking_2 (550,626 samples, 0.46%)</title><rect x="13.8434%" y="165" width="0.4613%" height="15" fill="rgb(213,181,19)"/><text x="14.0934%" y="175.50"></text></g><g><title>match_checking (331,483 samples, 0.28%)</title><rect x="14.0270%" y="149" width="0.2777%" height="15" fill="rgb(254,191,54)"/><text x="14.2770%" y="159.50"></text></g><g><title>check_match (299,113 samples, 0.25%)</title><rect x="14.0541%" y="133" width="0.2506%" height="15" fill="rgb(241,83,37)"/><text x="14.3041%" y="143.50"></text></g><g><title>check_private_in_public (200,282 samples, 0.17%)</title><rect x="14.3135%" y="149" width="0.1678%" height="15" fill="rgb(233,36,39)"/><text x="14.5635%" y="159.50"></text></g><g><title>death_checking (502,075 samples, 0.42%)</title><rect x="14.4813%" y="149" width="0.4206%" height="15" fill="rgb(226,3,54)"/><text x="14.7313%" y="159.50"></text></g><g><title>item_attrs (191,602 samples, 0.16%)</title><rect x="14.7414%" y="133" width="0.1605%" height="15" fill="rgb(245,192,40)"/><text x="14.9914%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (189,472 samples, 0.16%)</title><rect x="14.7432%" y="117" width="0.1587%" height="15" fill="rgb(238,167,29)"/><text x="14.9932%" y="127.50"></text></g><g><title>param_env (163,112 samples, 0.14%)</title><rect x="15.4431%" y="117" width="0.1366%" height="15" fill="rgb(232,182,51)"/><text x="15.6931%" y="127.50"></text></g><g><title>crate_lints (1,883,051 samples, 1.58%)</title><rect x="14.9034%" y="133" width="1.5775%" height="15" fill="rgb(231,60,39)"/><text x="15.1534%" y="143.50"></text></g><g><title>type_of (1,074,013 samples, 0.90%)</title><rect x="15.5812%" y="117" width="0.8997%" height="15" fill="rgb(208,69,12)"/><text x="15.8312%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (840,868 samples, 0.70%)</title><rect x="15.7765%" y="101" width="0.7044%" height="15" fill="rgb(235,93,37)"/><text x="16.0265%" y="111.50"></text></g><g><title>lint_checking (2,126,284 samples, 1.78%)</title><rect x="14.9019%" y="149" width="1.7813%" height="15" fill="rgb(213,116,39)"/><text x="15.1519%" y="159.50">l..</text></g><g><title>module_lints (241,413 samples, 0.20%)</title><rect x="16.4810%" y="133" width="0.2022%" height="15" fill="rgb(222,207,29)"/><text x="16.7310%" y="143.50"></text></g><g><title>lint_mod (238,553 samples, 0.20%)</title><rect x="16.4834%" y="117" width="0.1998%" height="15" fill="rgb(206,96,30)"/><text x="16.7334%" y="127.50"></text></g><g><title>privacy_access_levels (281,884 samples, 0.24%)</title><rect x="16.6832%" y="149" width="0.2361%" height="15" fill="rgb(218,138,4)"/><text x="16.9332%" y="159.50"></text></g><g><title>privacy_checking_modules (577,046 samples, 0.48%)</title><rect x="16.9194%" y="149" width="0.4834%" height="15" fill="rgb(250,191,14)"/><text x="17.1694%" y="159.50"></text></g><g><title>check_mod_privacy (574,366 samples, 0.48%)</title><rect x="16.9216%" y="133" width="0.4812%" height="15" fill="rgb(239,60,40)"/><text x="17.1716%" y="143.50"></text></g><g><title>misc_checking_3 (3,709,361 samples, 3.11%)</title><rect x="14.3047%" y="165" width="3.1075%" height="15" fill="rgb(206,27,48)"/><text x="14.5547%" y="175.50">mis..</text></g><g><title>impl_trait_ref (309,502 samples, 0.26%)</title><rect x="17.8146%" y="69" width="0.2593%" height="15" fill="rgb(225,35,8)"/><text x="18.0646%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (267,852 samples, 0.22%)</title><rect x="17.8495%" y="53" width="0.2244%" height="15" fill="rgb(250,213,24)"/><text x="18.0995%" y="63.50"></text></g><g><title>adt_destructor (633,937 samples, 0.53%)</title><rect x="17.5908%" y="117" width="0.5311%" height="15" fill="rgb(247,123,22)"/><text x="17.8408%" y="127.50"></text></g><g><title>coherent_trait (622,027 samples, 0.52%)</title><rect x="17.6008%" y="101" width="0.5211%" height="15" fill="rgb(231,138,38)"/><text x="17.8508%" y="111.50"></text></g><g><title>specialization_graph_of (619,307 samples, 0.52%)</title><rect x="17.6031%" y="85" width="0.5188%" height="15" fill="rgb(231,145,46)"/><text x="17.8531%" y="95.50"></text></g><g><title>impl_parent (5,600,212 samples, 4.69%)</title><rect x="28.0263%" y="101" width="4.6915%" height="15" fill="rgb(251,118,11)"/><text x="28.2763%" y="111.50">impl_..</text></g><g><title>metadata_decode_entry_impl_parent (2,739,138 samples, 2.29%)</title><rect x="30.4232%" y="85" width="2.2947%" height="15" fill="rgb(217,147,25)"/><text x="30.6732%" y="95.50">m..</text></g><g><title>impl_trait_ref (12,577,674 samples, 10.54%)</title><rect x="32.7179%" y="101" width="10.5369%" height="15" fill="rgb(247,81,37)"/><text x="32.9679%" y="111.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (9,425,349 samples, 7.90%)</title><rect x="35.3587%" y="85" width="7.8960%" height="15" fill="rgb(209,12,38)"/><text x="35.6087%" y="95.50">metadata_de..</text></g><g><title>trait_impls_of (2,242,365 samples, 1.88%)</title><rect x="43.3837%" y="101" width="1.8785%" height="15" fill="rgb(227,1,9)"/><text x="43.6337%" y="111.50">t..</text></g><g><title>implementations_of_trait (585,507 samples, 0.49%)</title><rect x="44.7718%" y="85" width="0.4905%" height="15" fill="rgb(248,47,43)"/><text x="45.0218%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (455,997 samples, 0.38%)</title><rect x="44.8803%" y="69" width="0.3820%" height="15" fill="rgb(221,10,30)"/><text x="45.1303%" y="79.50"></text></g><g><title>coherent_trait (33,131,740 samples, 27.76%)</title><rect x="17.5088%" y="133" width="27.7559%" height="15" fill="rgb(210,229,1)"/><text x="17.7588%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (32,248,591 samples, 27.02%)</title><rect x="18.2487%" y="117" width="27.0161%" height="15" fill="rgb(222,148,37)"/><text x="18.4987%" y="127.50">specialization_graph_of</text></g><g><title>coherence_checking (33,306,451 samples, 27.90%)</title><rect x="17.4687%" y="149" width="27.9023%" height="15" fill="rgb(234,67,33)"/><text x="17.7187%" y="159.50">coherence_checking</text></g><g><title>associated_item (887,567 samples, 0.74%)</title><rect x="53.6882%" y="85" width="0.7436%" height="15" fill="rgb(247,98,35)"/><text x="53.9382%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (705,506 samples, 0.59%)</title><rect x="53.8407%" y="69" width="0.5910%" height="15" fill="rgb(247,138,52)"/><text x="54.0907%" y="79.50"></text></g><g><title>associated_items (1,191,692 samples, 1.00%)</title><rect x="53.4614%" y="101" width="0.9983%" height="15" fill="rgb(213,79,30)"/><text x="53.7114%" y="111.50"></text></g><g><title>dropck_outlives (211,252 samples, 0.18%)</title><rect x="54.5162%" y="101" width="0.1770%" height="15" fill="rgb(246,177,23)"/><text x="54.7662%" y="111.50"></text></g><g><title>evaluate_obligation (284,494 samples, 0.24%)</title><rect x="54.6932%" y="101" width="0.2383%" height="15" fill="rgb(230,62,27)"/><text x="54.9432%" y="111.50"></text></g><g><title>item_attrs (348,266 samples, 0.29%)</title><rect x="55.1198%" y="101" width="0.2918%" height="15" fill="rgb(216,154,8)"/><text x="55.3698%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (340,126 samples, 0.28%)</title><rect x="55.1266%" y="85" width="0.2849%" height="15" fill="rgb(244,35,45)"/><text x="55.3766%" y="95.50"></text></g><g><title>object_safety_violations (141,231 samples, 0.12%)</title><rect x="55.5641%" y="101" width="0.1183%" height="15" fill="rgb(251,115,12)"/><text x="55.8141%" y="111.50"></text></g><g><title>predicates_of (266,923 samples, 0.22%)</title><rect x="55.7378%" y="101" width="0.2236%" height="15" fill="rgb(240,54,50)"/><text x="55.9878%" y="111.50"></text></g><g><title>predicates_defined_on (208,353 samples, 0.17%)</title><rect x="55.7869%" y="85" width="0.1745%" height="15" fill="rgb(233,84,52)"/><text x="56.0369%" y="95.50"></text></g><g><title>item_bodies_checking (12,699,461 samples, 10.64%)</title><rect x="45.4625%" y="149" width="10.6389%" height="15" fill="rgb(207,117,47)"/><text x="45.7125%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (12,695,781 samples, 10.64%)</title><rect x="45.4656%" y="133" width="10.6358%" height="15" fill="rgb(249,43,39)"/><text x="45.7156%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (12,605,390 samples, 10.56%)</title><rect x="45.5413%" y="117" width="10.5601%" height="15" fill="rgb(209,38,44)"/><text x="45.7913%" y="127.50">typeck</text></g><g><title>item_types_checking (1,376,296 samples, 1.15%)</title><rect x="56.1014%" y="149" width="1.1530%" height="15" fill="rgb(236,212,23)"/><text x="56.3514%" y="159.50"></text></g><g><title>check_mod_item_types (1,373,376 samples, 1.15%)</title><rect x="56.1039%" y="133" width="1.1505%" height="15" fill="rgb(242,79,21)"/><text x="56.3539%" y="143.50"></text></g><g><title>late_bound_vars_map (415,595 samples, 0.35%)</title><rect x="58.1872%" y="101" width="0.3482%" height="15" fill="rgb(211,96,35)"/><text x="58.4372%" y="111.50"></text></g><g><title>resolve_lifetimes (352,443 samples, 0.30%)</title><rect x="58.2401%" y="85" width="0.2953%" height="15" fill="rgb(253,215,40)"/><text x="58.4901%" y="95.50"></text></g><g><title>fn_sig (918,778 samples, 0.77%)</title><rect x="57.8277%" y="117" width="0.7697%" height="15" fill="rgb(211,81,21)"/><text x="58.0777%" y="127.50"></text></g><g><title>generics_of (333,074 samples, 0.28%)</title><rect x="58.5974%" y="117" width="0.2790%" height="15" fill="rgb(208,190,38)"/><text x="58.8474%" y="127.50"></text></g><g><title>impl_trait_ref (215,203 samples, 0.18%)</title><rect x="58.8764%" y="117" width="0.1803%" height="15" fill="rgb(235,213,38)"/><text x="59.1264%" y="127.50"></text></g><g><title>late_bound_vars_map (685,666 samples, 0.57%)</title><rect x="59.7365%" y="69" width="0.5744%" height="15" fill="rgb(237,122,38)"/><text x="59.9865%" y="79.50"></text></g><g><title>resolve_lifetimes (640,336 samples, 0.54%)</title><rect x="59.7745%" y="53" width="0.5364%" height="15" fill="rgb(244,218,35)"/><text x="60.0245%" y="63.50"></text></g><g><title>lint_levels (204,762 samples, 0.17%)</title><rect x="60.1394%" y="37" width="0.1715%" height="15" fill="rgb(240,68,47)"/><text x="60.3894%" y="47.50"></text></g><g><title>explicit_predicates_of (1,174,653 samples, 0.98%)</title><rect x="59.3951%" y="85" width="0.9841%" height="15" fill="rgb(210,16,53)"/><text x="59.6451%" y="95.50"></text></g><g><title>predicates_of (1,684,241 samples, 1.41%)</title><rect x="59.0567%" y="117" width="1.4110%" height="15" fill="rgb(235,124,12)"/><text x="59.3067%" y="127.50"></text></g><g><title>predicates_defined_on (1,520,879 samples, 1.27%)</title><rect x="59.1936%" y="101" width="1.2741%" height="15" fill="rgb(224,169,11)"/><text x="59.4436%" y="111.50"></text></g><g><title>type_collecting (4,205,077 samples, 3.52%)</title><rect x="57.2558%" y="149" width="3.5228%" height="15" fill="rgb(250,166,2)"/><text x="57.5058%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (4,193,657 samples, 3.51%)</title><rect x="57.2653%" y="133" width="3.5132%" height="15" fill="rgb(242,216,29)"/><text x="57.5153%" y="143.50">col..</text></g><g><title>type_of (317,362 samples, 0.27%)</title><rect x="60.5127%" y="117" width="0.2659%" height="15" fill="rgb(230,116,27)"/><text x="60.7627%" y="127.50"></text></g><g><title>evaluate_obligation (412,857 samples, 0.35%)</title><rect x="62.7919%" y="117" width="0.3459%" height="15" fill="rgb(228,99,48)"/><text x="63.0419%" y="127.50"></text></g><g><title>implied_outlives_bounds (204,033 samples, 0.17%)</title><rect x="63.1553%" y="117" width="0.1709%" height="15" fill="rgb(253,11,6)"/><text x="63.4053%" y="127.50"></text></g><g><title>param_env (376,913 samples, 0.32%)</title><rect x="63.3422%" y="117" width="0.3158%" height="15" fill="rgb(247,143,39)"/><text x="63.5922%" y="127.50"></text></g><g><title>region_scope_tree (310,502 samples, 0.26%)</title><rect x="63.7020%" y="117" width="0.2601%" height="15" fill="rgb(236,97,10)"/><text x="63.9520%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,367,547 samples, 2.82%)</title><rect x="61.1571%" y="133" width="2.8211%" height="15" fill="rgb(233,208,19)"/><text x="61.4071%" y="143.50">ch..</text></g><g><title>evaluate_obligation (893,007 samples, 0.75%)</title><rect x="65.8888%" y="117" width="0.7481%" height="15" fill="rgb(216,164,2)"/><text x="66.1388%" y="127.50"></text></g><g><title>implied_outlives_bounds (179,051 samples, 0.15%)</title><rect x="66.6629%" y="117" width="0.1500%" height="15" fill="rgb(220,129,5)"/><text x="66.9129%" y="127.50"></text></g><g><title>param_env (378,023 samples, 0.32%)</title><rect x="66.8129%" y="117" width="0.3167%" height="15" fill="rgb(242,17,10)"/><text x="67.0629%" y="127.50"></text></g><g><title>analysis (79,599,337 samples, 66.68%)</title><rect x="0.6238%" y="181" width="66.6838%" height="15" fill="rgb(242,107,0)"/><text x="0.8738%" y="191.50">analysis</text></g><g><title>type_check_crate (59,559,295 samples, 49.90%)</title><rect x="17.4122%" y="165" width="49.8954%" height="15" fill="rgb(251,28,31)"/><text x="17.6622%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,788,727 samples, 6.52%)</title><rect x="60.7826%" y="149" width="6.5250%" height="15" fill="rgb(233,223,10)"/><text x="61.0326%" y="159.50">wf_checki..</text></g><g><title>check_item_well_formed (3,974,192 samples, 3.33%)</title><rect x="63.9782%" y="133" width="3.3294%" height="15" fill="rgb(215,21,27)"/><text x="64.2282%" y="143.50">che..</text></g><g><title>is_no_builtins (199,392 samples, 0.17%)</title><rect x="67.6102%" y="165" width="0.1670%" height="15" fill="rgb(232,23,21)"/><text x="67.8602%" y="175.50"></text></g><g><title>codegen_crate (602,596 samples, 0.50%)</title><rect x="67.3160%" y="181" width="0.5048%" height="15" fill="rgb(244,5,23)"/><text x="67.5660%" y="191.50"></text></g><g><title>AST_validation (193,132 samples, 0.16%)</title><rect x="67.9803%" y="165" width="0.1618%" height="15" fill="rgb(226,81,46)"/><text x="68.2303%" y="175.50"></text></g><g><title>metadata_load_macro (368,565 samples, 0.31%)</title><rect x="82.3129%" y="133" width="0.3088%" height="15" fill="rgb(247,70,30)"/><text x="82.5629%" y="143.50"></text></g><g><title>macro_expand_crate (19,506,987 samples, 16.34%)</title><rect x="68.3001%" y="165" width="16.3419%" height="15" fill="rgb(212,68,19)"/><text x="68.5501%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (19,478,937 samples, 16.32%)</title><rect x="68.3236%" y="149" width="16.3184%" height="15" fill="rgb(240,187,13)"/><text x="68.5736%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,411,587 samples, 2.02%)</title><rect x="82.6216%" y="133" width="2.0203%" height="15" fill="rgb(223,113,26)"/><text x="82.8716%" y="143.50">m..</text></g><g><title>metadata_register_crate (903,601 samples, 0.76%)</title><rect x="83.8849%" y="117" width="0.7570%" height="15" fill="rgb(206,192,2)"/><text x="84.1349%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (164,672 samples, 0.14%)</title><rect x="84.6465%" y="165" width="0.1380%" height="15" fill="rgb(241,108,4)"/><text x="84.8965%" y="175.50"></text></g><g><title>finalize_macro_resolutions (347,504 samples, 0.29%)</title><rect x="84.8310%" y="149" width="0.2911%" height="15" fill="rgb(247,173,49)"/><text x="85.0810%" y="159.50"></text></g><g><title>late_resolve_crate (3,532,410 samples, 2.96%)</title><rect x="85.1221%" y="149" width="2.9593%" height="15" fill="rgb(224,114,35)"/><text x="85.3721%" y="159.50">lat..</text></g><g><title>configure_and_expand (24,338,222 samples, 20.39%)</title><rect x="67.8208%" y="181" width="20.3892%" height="15" fill="rgb(245,159,27)"/><text x="68.0708%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,089,015 samples, 3.43%)</title><rect x="84.7845%" y="165" width="3.4255%" height="15" fill="rgb(245,172,44)"/><text x="85.0345%" y="175.50">res..</text></g><g><title>drop_ast (317,684 samples, 0.27%)</title><rect x="88.2100%" y="181" width="0.2661%" height="15" fill="rgb(236,23,11)"/><text x="88.4600%" y="191.50"></text></g><g><title>early_lint_checks (551,446 samples, 0.46%)</title><rect x="88.4881%" y="181" width="0.4620%" height="15" fill="rgb(205,117,38)"/><text x="88.7381%" y="191.50"></text></g><g><title>free_global_ctxt (3,317,537 samples, 2.78%)</title><rect x="88.9501%" y="181" width="2.7792%" height="15" fill="rgb(237,72,25)"/><text x="89.2001%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,136,323 samples, 0.95%)</title><rect x="91.7293%" y="181" width="0.9519%" height="15" fill="rgb(244,70,9)"/><text x="91.9793%" y="191.50"></text></g><g><title>hir_lowering (5,824,755 samples, 4.88%)</title><rect x="92.6813%" y="181" width="4.8797%" height="15" fill="rgb(217,125,39)"/><text x="92.9313%" y="191.50">hir_lo..</text></g><g><title>parse_crate (1,354,516 samples, 1.13%)</title><rect x="97.6037%" y="181" width="1.1347%" height="15" fill="rgb(235,36,10)"/><text x="97.8537%" y="191.50"></text></g><g><title>prepare_outputs (274,153 samples, 0.23%)</title><rect x="98.7444%" y="181" width="0.2297%" height="15" fill="rgb(251,123,47)"/><text x="98.9944%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (776,419 samples, 0.65%)</title><rect x="98.9741%" y="181" width="0.6504%" height="15" fill="rgb(221,13,13)"/><text x="99.2241%" y="191.50"></text></g><g><title>setup_global_ctxt (130,451 samples, 0.11%)</title><rect x="99.6339%" y="181" width="0.1093%" height="15" fill="rgb(238,131,9)"/><text x="99.8839%" y="191.50"></text></g><g><title>all (119,368,262 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (119,368,262 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (306,544 samples, 0.26%)</title><rect x="99.7432%" y="181" width="0.2568%" height="15" fill="rgb(242,14,37)"/><text x="99.9932%" y="191.50"></text></g></svg></svg>