<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (529,066 samples, 0.13%)</title><rect x="13.8750%" y="197" width="0.1314%" height="15" fill="rgb(227,0,7)"/><text x="14.1250%" y="207.50"></text></g><g><title>codegen_fn_attrs (480,328 samples, 0.12%)</title><rect x="15.6695%" y="149" width="0.1193%" height="15" fill="rgb(217,0,24)"/><text x="15.9195%" y="159.50"></text></g><g><title>adt_drop_tys (811,596 samples, 0.20%)</title><rect x="18.8264%" y="117" width="0.2016%" height="15" fill="rgb(221,193,54)"/><text x="19.0764%" y="127.50"></text></g><g><title>needs_drop_raw (3,365,897 samples, 0.84%)</title><rect x="18.7386%" y="133" width="0.8361%" height="15" fill="rgb(248,212,6)"/><text x="18.9886%" y="143.50"></text></g><g><title>is_copy_raw (2,201,107 samples, 0.55%)</title><rect x="19.0280%" y="117" width="0.5468%" height="15" fill="rgb(208,68,35)"/><text x="19.2780%" y="127.50"></text></g><g><title>evaluate_obligation (1,821,460 samples, 0.45%)</title><rect x="19.1223%" y="101" width="0.4525%" height="15" fill="rgb(232,128,0)"/><text x="19.3723%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (822,637 samples, 0.20%)</title><rect x="19.6733%" y="117" width="0.2043%" height="15" fill="rgb(207,160,47)"/><text x="19.9233%" y="127.50"></text></g><g><title>specialization_graph_of (1,338,814 samples, 0.33%)</title><rect x="19.9252%" y="117" width="0.3326%" height="15" fill="rgb(228,23,34)"/><text x="20.1752%" y="127.50"></text></g><g><title>impl_trait_ref (540,395 samples, 0.13%)</title><rect x="20.1235%" y="101" width="0.1342%" height="15" fill="rgb(218,30,26)"/><text x="20.3735%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (405,854 samples, 0.10%)</title><rect x="20.1569%" y="85" width="0.1008%" height="15" fill="rgb(220,122,19)"/><text x="20.4069%" y="95.50"></text></g><g><title>resolve_instance (2,893,502 samples, 0.72%)</title><rect x="19.5748%" y="133" width="0.7188%" height="15" fill="rgb(250,228,42)"/><text x="19.8248%" y="143.50"></text></g><g><title>thir_body (4,509,944 samples, 1.12%)</title><rect x="20.3132%" y="133" width="1.1203%" height="15" fill="rgb(240,193,28)"/><text x="20.5632%" y="143.50"></text></g><g><title>mir_const (27,434,571 samples, 6.81%)</title><rect x="14.6342%" y="181" width="6.8149%" height="15" fill="rgb(216,20,37)"/><text x="14.8842%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (24,770,346 samples, 6.15%)</title><rect x="15.2960%" y="165" width="6.1531%" height="15" fill="rgb(206,188,39)"/><text x="15.5460%" y="175.50">unsafety..</text></g><g><title>mir_built (22,786,636 samples, 5.66%)</title><rect x="15.7888%" y="149" width="5.6603%" height="15" fill="rgb(217,207,13)"/><text x="16.0388%" y="159.50">mir_bui..</text></g><g><title>mir_promoted (30,307,287 samples, 7.53%)</title><rect x="14.0303%" y="197" width="7.5285%" height="15" fill="rgb(231,73,38)"/><text x="14.2803%" y="207.50">mir_promot..</text></g><g><title>mir_const_qualif (441,404 samples, 0.11%)</title><rect x="21.4491%" y="181" width="0.1096%" height="15" fill="rgb(225,20,46)"/><text x="21.6991%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (1,765,111 samples, 0.44%)</title><rect x="21.5588%" y="197" width="0.4385%" height="15" fill="rgb(210,31,41)"/><text x="21.8088%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,764,465 samples, 0.44%)</title><rect x="21.9972%" y="197" width="0.4383%" height="15" fill="rgb(221,200,47)"/><text x="22.2472%" y="207.50"></text></g><g><title>normalize_projection_ty (1,099,471 samples, 0.27%)</title><rect x="22.1624%" y="181" width="0.2731%" height="15" fill="rgb(226,26,5)"/><text x="22.4124%" y="191.50"></text></g><g><title>type_op_normalize_predicate (1,505,204 samples, 0.37%)</title><rect x="22.4355%" y="197" width="0.3739%" height="15" fill="rgb(249,33,26)"/><text x="22.6855%" y="207.50"></text></g><g><title>normalize_projection_ty (587,823 samples, 0.15%)</title><rect x="22.6634%" y="181" width="0.1460%" height="15" fill="rgb(235,183,28)"/><text x="22.9134%" y="191.50"></text></g><g><title>type_op_prove_predicate (8,689,350 samples, 2.16%)</title><rect x="22.8435%" y="197" width="2.1585%" height="15" fill="rgb(221,5,38)"/><text x="23.0935%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (98,960,788 samples, 24.58%)</title><rect x="0.4229%" y="229" width="24.5824%" height="15" fill="rgb(247,18,42)"/><text x="0.6729%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (98,743,072 samples, 24.53%)</title><rect x="0.4770%" y="213" width="24.5283%" height="15" fill="rgb(241,131,45)"/><text x="0.7270%" y="223.50">mir_borrowck</text></g><g><title>check_mod_attrs (938,590 samples, 0.23%)</title><rect x="25.1216%" y="213" width="0.2332%" height="15" fill="rgb(249,31,29)"/><text x="25.3716%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (583,117 samples, 0.14%)</title><rect x="25.4505%" y="213" width="0.1448%" height="15" fill="rgb(225,111,53)"/><text x="25.7005%" y="223.50"></text></g><g><title>misc_checking_1 (1,970,272 samples, 0.49%)</title><rect x="25.1171%" y="229" width="0.4894%" height="15" fill="rgb(238,160,17)"/><text x="25.3671%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,856,331 samples, 0.46%)</title><rect x="25.6069%" y="213" width="0.4611%" height="15" fill="rgb(214,148,48)"/><text x="25.8569%" y="223.50"></text></g><g><title>check_mod_liveness (1,544,837 samples, 0.38%)</title><rect x="25.6843%" y="197" width="0.3837%" height="15" fill="rgb(232,36,49)"/><text x="25.9343%" y="207.50"></text></g><g><title>type_uninhabited_from (418,853 samples, 0.10%)</title><rect x="25.9640%" y="181" width="0.1040%" height="15" fill="rgb(209,103,24)"/><text x="26.2140%" y="191.50"></text></g><g><title>misc_checking_2 (4,312,148 samples, 1.07%)</title><rect x="25.6065%" y="229" width="1.0712%" height="15" fill="rgb(229,88,8)"/><text x="25.8565%" y="239.50"></text></g><g><title>match_checking (2,454,167 samples, 0.61%)</title><rect x="26.0680%" y="213" width="0.6096%" height="15" fill="rgb(213,181,19)"/><text x="26.3180%" y="223.50"></text></g><g><title>check_match (2,403,715 samples, 0.60%)</title><rect x="26.0806%" y="197" width="0.5971%" height="15" fill="rgb(254,191,54)"/><text x="26.3306%" y="207.50"></text></g><g><title>death_checking (726,998 samples, 0.18%)</title><rect x="26.7675%" y="213" width="0.1806%" height="15" fill="rgb(241,83,37)"/><text x="27.0175%" y="223.50"></text></g><g><title>crate_lints (2,310,926 samples, 0.57%)</title><rect x="26.9485%" y="197" width="0.5740%" height="15" fill="rgb(233,36,39)"/><text x="27.1985%" y="207.50"></text></g><g><title>lint_checking (4,199,027 samples, 1.04%)</title><rect x="26.9481%" y="213" width="1.0431%" height="15" fill="rgb(226,3,54)"/><text x="27.1981%" y="223.50"></text></g><g><title>module_lints (1,886,461 samples, 0.47%)</title><rect x="27.5226%" y="197" width="0.4686%" height="15" fill="rgb(245,192,40)"/><text x="27.7726%" y="207.50"></text></g><g><title>lint_mod (1,881,511 samples, 0.47%)</title><rect x="27.5238%" y="181" width="0.4674%" height="15" fill="rgb(238,167,29)"/><text x="27.7738%" y="191.50"></text></g><g><title>privacy_access_levels (562,696 samples, 0.14%)</title><rect x="27.9912%" y="213" width="0.1398%" height="15" fill="rgb(232,182,51)"/><text x="28.2412%" y="223.50"></text></g><g><title>privacy_checking_modules (2,803,251 samples, 0.70%)</title><rect x="28.1309%" y="213" width="0.6963%" height="15" fill="rgb(231,60,39)"/><text x="28.3809%" y="223.50"></text></g><g><title>check_mod_privacy (2,799,691 samples, 0.70%)</title><rect x="28.1318%" y="197" width="0.6955%" height="15" fill="rgb(208,69,12)"/><text x="28.3818%" y="207.50"></text></g><g><title>misc_checking_3 (8,667,026 samples, 2.15%)</title><rect x="26.6777%" y="229" width="2.1529%" height="15" fill="rgb(235,93,37)"/><text x="26.9277%" y="239.50">m..</text></g><g><title>impl_parent (1,720,401 samples, 0.43%)</title><rect x="29.4975%" y="165" width="0.4274%" height="15" fill="rgb(213,116,39)"/><text x="29.7475%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,070,922 samples, 0.27%)</title><rect x="29.6589%" y="149" width="0.2660%" height="15" fill="rgb(222,207,29)"/><text x="29.9089%" y="159.50"></text></g><g><title>impl_trait_ref (4,375,414 samples, 1.09%)</title><rect x="29.9249%" y="165" width="1.0869%" height="15" fill="rgb(206,96,30)"/><text x="30.1749%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,722,068 samples, 0.92%)</title><rect x="30.0872%" y="149" width="0.9246%" height="15" fill="rgb(218,138,4)"/><text x="30.3372%" y="159.50"></text></g><g><title>coherent_trait (9,168,152 samples, 2.28%)</title><rect x="28.8563%" y="197" width="2.2774%" height="15" fill="rgb(250,191,14)"/><text x="29.1063%" y="207.50">c..</text></g><g><title>specialization_graph_of (9,159,342 samples, 2.28%)</title><rect x="28.8585%" y="181" width="2.2752%" height="15" fill="rgb(239,60,40)"/><text x="29.1085%" y="191.50">s..</text></g><g><title>trait_impls_of (487,726 samples, 0.12%)</title><rect x="31.0126%" y="165" width="0.1212%" height="15" fill="rgb(206,27,48)"/><text x="31.2626%" y="175.50"></text></g><g><title>coherence_checking (9,221,592 samples, 2.29%)</title><rect x="28.8535%" y="213" width="2.2907%" height="15" fill="rgb(225,35,8)"/><text x="29.1035%" y="223.50">c..</text></g><g><title>adt_dtorck_constraint (504,696 samples, 0.13%)</title><rect x="37.5399%" y="85" width="0.1254%" height="15" fill="rgb(250,213,24)"/><text x="37.7899%" y="95.50"></text></g><g><title>adt_dtorck_constraint (981,612 samples, 0.24%)</title><rect x="37.4355%" y="101" width="0.2438%" height="15" fill="rgb(247,123,22)"/><text x="37.6855%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,622,541 samples, 0.40%)</title><rect x="37.3068%" y="117" width="0.4030%" height="15" fill="rgb(231,138,38)"/><text x="37.5568%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,204,544 samples, 0.55%)</title><rect x="37.1859%" y="133" width="0.5476%" height="15" fill="rgb(231,145,46)"/><text x="37.4359%" y="143.50"></text></g><g><title>dropck_outlives (4,757,234 samples, 1.18%)</title><rect x="36.5737%" y="165" width="1.1817%" height="15" fill="rgb(251,118,11)"/><text x="36.8237%" y="175.50"></text></g><g><title>adt_dtorck_constraint (2,865,532 samples, 0.71%)</title><rect x="37.0436%" y="149" width="0.7118%" height="15" fill="rgb(217,147,25)"/><text x="37.2936%" y="159.50"></text></g><g><title>evaluate_obligation (2,743,656 samples, 0.68%)</title><rect x="37.7555%" y="165" width="0.6815%" height="15" fill="rgb(247,81,37)"/><text x="38.0055%" y="175.50"></text></g><g><title>trait_impls_of (781,159 samples, 0.19%)</title><rect x="38.2429%" y="149" width="0.1940%" height="15" fill="rgb(209,12,38)"/><text x="38.4929%" y="159.50"></text></g><g><title>dropck_outlives (3,587,262 samples, 0.89%)</title><rect x="57.7033%" y="149" width="0.8911%" height="15" fill="rgb(227,1,9)"/><text x="57.9533%" y="159.50"></text></g><g><title>evaluate_obligation (5,440,274 samples, 1.35%)</title><rect x="58.5944%" y="149" width="1.3514%" height="15" fill="rgb(248,47,43)"/><text x="58.8444%" y="159.50"></text></g><g><title>is_copy_raw (571,608 samples, 0.14%)</title><rect x="60.0874%" y="149" width="0.1420%" height="15" fill="rgb(221,10,30)"/><text x="60.3374%" y="159.50"></text></g><g><title>evaluate_obligation (437,007 samples, 0.11%)</title><rect x="60.1208%" y="133" width="0.1086%" height="15" fill="rgb(210,229,1)"/><text x="60.3708%" y="143.50"></text></g><g><title>method_autoderef_steps (1,057,664 samples, 0.26%)</title><rect x="60.2746%" y="149" width="0.2627%" height="15" fill="rgb(222,148,37)"/><text x="60.5246%" y="159.50"></text></g><g><title>evaluate_obligation (492,208 samples, 0.12%)</title><rect x="60.4151%" y="133" width="0.1223%" height="15" fill="rgb(234,67,33)"/><text x="60.6651%" y="143.50"></text></g><g><title>predicates_of (500,688 samples, 0.12%)</title><rect x="60.5429%" y="149" width="0.1244%" height="15" fill="rgb(247,98,35)"/><text x="60.7929%" y="159.50"></text></g><g><title>type_of (458,905 samples, 0.11%)</title><rect x="60.6785%" y="149" width="0.1140%" height="15" fill="rgb(247,138,52)"/><text x="60.9285%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (433,855 samples, 0.11%)</title><rect x="60.6847%" y="133" width="0.1078%" height="15" fill="rgb(213,79,30)"/><text x="60.9347%" y="143.50"></text></g><g><title>typeck (88,513,193 samples, 21.99%)</title><rect x="38.8465%" y="165" width="21.9872%" height="15" fill="rgb(246,177,23)"/><text x="39.0965%" y="175.50">typeck</text></g><g><title>item_bodies_checking (119,544,486 samples, 29.70%)</title><rect x="31.1498%" y="213" width="29.6955%" height="15" fill="rgb(230,62,27)"/><text x="31.3998%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (119,541,836 samples, 29.69%)</title><rect x="31.1505%" y="197" width="29.6948%" height="15" fill="rgb(216,154,8)"/><text x="31.4005%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (119,458,416 samples, 29.67%)</title><rect x="31.1712%" y="181" width="29.6741%" height="15" fill="rgb(244,35,45)"/><text x="31.4212%" y="191.50">typeck</text></g><g><title>specialization_graph_of (1,418,425 samples, 0.35%)</title><rect x="61.6499%" y="69" width="0.3523%" height="15" fill="rgb(251,115,12)"/><text x="61.8999%" y="79.50"></text></g><g><title>impl_trait_ref (543,315 samples, 0.13%)</title><rect x="61.8673%" y="53" width="0.1350%" height="15" fill="rgb(240,54,50)"/><text x="62.1173%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (479,054 samples, 0.12%)</title><rect x="61.8832%" y="37" width="0.1190%" height="15" fill="rgb(233,84,52)"/><text x="62.1332%" y="47.50"></text></g><g><title>resolve_instance (1,477,746 samples, 0.37%)</title><rect x="61.6363%" y="85" width="0.3671%" height="15" fill="rgb(207,117,47)"/><text x="61.8863%" y="95.50"></text></g><g><title>mir_built (3,433,819 samples, 0.85%)</title><rect x="61.5955%" y="101" width="0.8530%" height="15" fill="rgb(249,43,39)"/><text x="61.8455%" y="111.50"></text></g><g><title>typeck (1,759,199 samples, 0.44%)</title><rect x="62.0115%" y="85" width="0.4370%" height="15" fill="rgb(209,38,44)"/><text x="62.2615%" y="95.50"></text></g><g><title>mir_const (3,690,022 samples, 0.92%)</title><rect x="61.5520%" y="133" width="0.9166%" height="15" fill="rgb(236,212,23)"/><text x="61.8020%" y="143.50"></text></g><g><title>unsafety_check_result (3,571,720 samples, 0.89%)</title><rect x="61.5814%" y="117" width="0.8872%" height="15" fill="rgb(242,79,21)"/><text x="61.8314%" y="127.50"></text></g><g><title>mir_promoted (3,751,062 samples, 0.93%)</title><rect x="61.5378%" y="149" width="0.9318%" height="15" fill="rgb(211,96,35)"/><text x="61.7878%" y="159.50"></text></g><g><title>type_of (5,163,738 samples, 1.28%)</title><rect x="61.2500%" y="181" width="1.2827%" height="15" fill="rgb(253,215,40)"/><text x="61.5000%" y="191.50"></text></g><g><title>mir_borrowck (4,959,255 samples, 1.23%)</title><rect x="61.3008%" y="165" width="1.2319%" height="15" fill="rgb(211,81,21)"/><text x="61.5508%" y="175.50"></text></g><g><title>item_types_checking (7,639,716 samples, 1.90%)</title><rect x="60.8453%" y="213" width="1.8977%" height="15" fill="rgb(208,190,38)"/><text x="61.0953%" y="223.50">i..</text></g><g><title>check_mod_item_types (7,633,986 samples, 1.90%)</title><rect x="60.8467%" y="197" width="1.8963%" height="15" fill="rgb(235,213,38)"/><text x="61.0967%" y="207.50">c..</text></g><g><title>typeck (846,840 samples, 0.21%)</title><rect x="62.5327%" y="181" width="0.2104%" height="15" fill="rgb(237,122,38)"/><text x="62.7827%" y="191.50"></text></g><g><title>is_late_bound_map (891,770 samples, 0.22%)</title><rect x="62.9390%" y="165" width="0.2215%" height="15" fill="rgb(244,218,35)"/><text x="63.1890%" y="175.50"></text></g><g><title>resolve_lifetimes (884,470 samples, 0.22%)</title><rect x="62.9408%" y="149" width="0.2197%" height="15" fill="rgb(240,68,47)"/><text x="63.1908%" y="159.50"></text></g><g><title>lint_levels (521,206 samples, 0.13%)</title><rect x="63.0310%" y="133" width="0.1295%" height="15" fill="rgb(210,16,53)"/><text x="63.2810%" y="143.50"></text></g><g><title>generics_of (1,248,927 samples, 0.31%)</title><rect x="62.9093%" y="181" width="0.3102%" height="15" fill="rgb(235,124,12)"/><text x="63.1593%" y="191.50"></text></g><g><title>predicates_of (535,866 samples, 0.13%)</title><rect x="63.2257%" y="181" width="0.1331%" height="15" fill="rgb(224,169,11)"/><text x="63.4757%" y="191.50"></text></g><g><title>predicates_defined_on (500,076 samples, 0.12%)</title><rect x="63.2346%" y="165" width="0.1242%" height="15" fill="rgb(250,166,2)"/><text x="63.4846%" y="175.50"></text></g><g><title>type_collecting (2,552,418 samples, 0.63%)</title><rect x="62.7441%" y="213" width="0.6340%" height="15" fill="rgb(242,216,29)"/><text x="62.9941%" y="223.50"></text></g><g><title>collect_mod_item_types (2,544,558 samples, 0.63%)</title><rect x="62.7460%" y="197" width="0.6321%" height="15" fill="rgb(230,116,27)"/><text x="62.9960%" y="207.50"></text></g><g><title>adt_def (431,714 samples, 0.11%)</title><rect x="63.7762%" y="149" width="0.1072%" height="15" fill="rgb(228,99,48)"/><text x="64.0262%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (430,804 samples, 0.11%)</title><rect x="63.7764%" y="133" width="0.1070%" height="15" fill="rgb(253,11,6)"/><text x="64.0264%" y="143.50"></text></g><g><title>item_attrs (417,194 samples, 0.10%)</title><rect x="63.7798%" y="117" width="0.1036%" height="15" fill="rgb(247,143,39)"/><text x="64.0298%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (415,994 samples, 0.10%)</title><rect x="63.7801%" y="101" width="0.1033%" height="15" fill="rgb(236,97,10)"/><text x="64.0301%" y="111.50"></text></g><g><title>adt_sized_constraint (524,685 samples, 0.13%)</title><rect x="63.7747%" y="165" width="0.1303%" height="15" fill="rgb(233,208,19)"/><text x="64.0247%" y="175.50"></text></g><g><title>evaluate_obligation (819,009 samples, 0.20%)</title><rect x="63.7110%" y="181" width="0.2034%" height="15" fill="rgb(216,164,2)"/><text x="63.9610%" y="191.50"></text></g><g><title>region_scope_tree (1,107,161 samples, 0.28%)</title><rect x="64.0028%" y="181" width="0.2750%" height="15" fill="rgb(220,129,5)"/><text x="64.2528%" y="191.50"></text></g><g><title>check_impl_item_well_formed (3,446,618 samples, 0.86%)</title><rect x="63.4364%" y="197" width="0.8562%" height="15" fill="rgb(242,17,10)"/><text x="63.6864%" y="207.50"></text></g><g><title>adt_def (429,913 samples, 0.11%)</title><rect x="64.6033%" y="133" width="0.1068%" height="15" fill="rgb(242,107,0)"/><text x="64.8533%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (414,563 samples, 0.10%)</title><rect x="64.6071%" y="117" width="0.1030%" height="15" fill="rgb(251,28,31)"/><text x="64.8571%" y="127.50"></text></g><g><title>adt_sized_constraint (806,719 samples, 0.20%)</title><rect x="64.5899%" y="149" width="0.2004%" height="15" fill="rgb(233,223,10)"/><text x="64.8399%" y="159.50"></text></g><g><title>adt_sized_constraint (1,057,280 samples, 0.26%)</title><rect x="64.5350%" y="165" width="0.2626%" height="15" fill="rgb(215,21,27)"/><text x="64.7850%" y="175.50"></text></g><g><title>evaluate_obligation (1,341,774 samples, 0.33%)</title><rect x="64.4838%" y="181" width="0.3333%" height="15" fill="rgb(232,23,21)"/><text x="64.7338%" y="191.50"></text></g><g><title>analysis (260,600,792 samples, 64.73%)</title><rect x="0.2227%" y="245" width="64.7346%" height="15" fill="rgb(244,5,23)"/><text x="0.4727%" y="255.50">analysis</text></g><g><title>type_check_crate (145,434,724 samples, 36.13%)</title><rect x="28.8306%" y="229" width="36.1268%" height="15" fill="rgb(226,81,46)"/><text x="29.0806%" y="239.50">type_check_crate</text></g><g><title>wf_checking (6,350,960 samples, 1.58%)</title><rect x="63.3797%" y="213" width="1.5776%" height="15" fill="rgb(247,70,30)"/><text x="63.6297%" y="223.50"></text></g><g><title>check_item_well_formed (2,676,280 samples, 0.66%)</title><rect x="64.2925%" y="197" width="0.6648%" height="15" fill="rgb(212,68,19)"/><text x="64.5425%" y="207.50"></text></g><g><title>codegen_crate (580,107 samples, 0.14%)</title><rect x="64.9599%" y="245" width="0.1441%" height="15" fill="rgb(240,187,13)"/><text x="65.2099%" y="255.50"></text></g><g><title>metadata_load_macro (818,729 samples, 0.20%)</title><rect x="92.5267%" y="197" width="0.2034%" height="15" fill="rgb(223,113,26)"/><text x="92.7767%" y="207.50"></text></g><g><title>metadata_register_crate (3,029,273 samples, 0.75%)</title><rect x="92.7301%" y="197" width="0.7525%" height="15" fill="rgb(206,192,2)"/><text x="92.9801%" y="207.50"></text></g><g><title>metadata_register_crate (1,007,779 samples, 0.25%)</title><rect x="93.2322%" y="181" width="0.2503%" height="15" fill="rgb(241,108,4)"/><text x="93.4822%" y="191.50"></text></g><g><title>macro_expand_crate (114,109,816 samples, 28.35%)</title><rect x="65.2865%" y="229" width="28.3455%" height="15" fill="rgb(247,173,49)"/><text x="65.5365%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (114,093,416 samples, 28.34%)</title><rect x="65.2906%" y="213" width="28.3414%" height="15" fill="rgb(224,114,35)"/><text x="65.5406%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (601,546 samples, 0.15%)</title><rect x="93.4826%" y="197" width="0.1494%" height="15" fill="rgb(245,159,27)"/><text x="93.7326%" y="207.50"></text></g><g><title>maybe_create_a_macro_crate (568,406 samples, 0.14%)</title><rect x="93.6322%" y="229" width="0.1412%" height="15" fill="rgb(245,172,44)"/><text x="93.8822%" y="239.50"></text></g><g><title>finalize_macro_resolutions (1,307,944 samples, 0.32%)</title><rect x="93.8199%" y="213" width="0.3249%" height="15" fill="rgb(236,23,11)"/><text x="94.0699%" y="223.50"></text></g><g><title>late_resolve_crate (4,997,955 samples, 1.24%)</title><rect x="94.1448%" y="213" width="1.2415%" height="15" fill="rgb(205,117,38)"/><text x="94.3948%" y="223.50"></text></g><g><title>configure_and_expand (122,257,916 samples, 30.37%)</title><rect x="65.1040%" y="245" width="30.3695%" height="15" fill="rgb(237,72,25)"/><text x="65.3540%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (6,758,134 samples, 1.68%)</title><rect x="93.7948%" y="229" width="1.6788%" height="15" fill="rgb(244,70,9)"/><text x="94.0448%" y="239.50"></text></g><g><title>drop_ast (518,136 samples, 0.13%)</title><rect x="95.4735%" y="245" width="0.1287%" height="15" fill="rgb(217,125,39)"/><text x="95.7235%" y="255.50"></text></g><g><title>early_lint_checks (1,386,666 samples, 0.34%)</title><rect x="95.6061%" y="245" width="0.3445%" height="15" fill="rgb(235,36,10)"/><text x="95.8561%" y="255.50"></text></g><g><title>free_global_ctxt (5,097,186 samples, 1.27%)</title><rect x="95.9506%" y="245" width="1.2662%" height="15" fill="rgb(251,123,47)"/><text x="96.2006%" y="255.50"></text></g><g><title>hir_lowering (8,043,869 samples, 2.00%)</title><rect x="97.2549%" y="245" width="1.9981%" height="15" fill="rgb(221,13,13)"/><text x="97.5049%" y="255.50">h..</text></g><g><title>parse_crate (1,404,996 samples, 0.35%)</title><rect x="99.2663%" y="245" width="0.3490%" height="15" fill="rgb(238,131,9)"/><text x="99.5163%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (890,280 samples, 0.22%)</title><rect x="99.6737%" y="245" width="0.2212%" height="15" fill="rgb(211,50,8)"/><text x="99.9237%" y="255.50"></text></g><g><title>all (402,567,797 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (402,567,797 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>