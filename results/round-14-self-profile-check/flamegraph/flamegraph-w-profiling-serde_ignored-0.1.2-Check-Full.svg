<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (625,998 samples, 0.33%)</title><rect x="13.3027%" y="149" width="0.3252%" height="15" fill="rgb(227,0,7)"/><text x="13.5527%" y="159.50"></text></g><g><title>is_sized_raw (406,594 samples, 0.21%)</title><rect x="13.6936%" y="149" width="0.2112%" height="15" fill="rgb(217,0,24)"/><text x="13.9436%" y="159.50"></text></g><g><title>evaluate_obligation (261,073 samples, 0.14%)</title><rect x="13.7692%" y="133" width="0.1356%" height="15" fill="rgb(221,193,54)"/><text x="14.0192%" y="143.50"></text></g><g><title>param_env (904,830 samples, 0.47%)</title><rect x="15.3658%" y="117" width="0.4701%" height="15" fill="rgb(248,212,6)"/><text x="15.6158%" y="127.50"></text></g><g><title>is_copy_raw (933,681 samples, 0.49%)</title><rect x="18.7450%" y="85" width="0.4851%" height="15" fill="rgb(208,68,35)"/><text x="18.9950%" y="95.50"></text></g><g><title>evaluate_obligation (725,829 samples, 0.38%)</title><rect x="18.8529%" y="69" width="0.3771%" height="15" fill="rgb(232,128,0)"/><text x="19.1029%" y="79.50"></text></g><g><title>is_copy_raw (1,167,967 samples, 0.61%)</title><rect x="19.3911%" y="69" width="0.6068%" height="15" fill="rgb(207,160,47)"/><text x="19.6411%" y="79.50"></text></g><g><title>evaluate_obligation (828,724 samples, 0.43%)</title><rect x="19.5674%" y="53" width="0.4305%" height="15" fill="rgb(228,23,34)"/><text x="19.8174%" y="63.50"></text></g><g><title>needs_drop_raw (1,488,807 samples, 0.77%)</title><rect x="19.2300%" y="85" width="0.7735%" height="15" fill="rgb(218,30,26)"/><text x="19.4800%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (563,168 samples, 0.29%)</title><rect x="20.1842%" y="69" width="0.2926%" height="15" fill="rgb(220,122,19)"/><text x="20.4342%" y="79.50"></text></g><g><title>impl_parent (637,856 samples, 0.33%)</title><rect x="21.0611%" y="53" width="0.3314%" height="15" fill="rgb(250,228,42)"/><text x="21.3111%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (422,382 samples, 0.22%)</title><rect x="21.1731%" y="37" width="0.2194%" height="15" fill="rgb(240,193,28)"/><text x="21.4231%" y="47.50"></text></g><g><title>specialization_graph_of (3,801,672 samples, 1.98%)</title><rect x="20.5019%" y="69" width="1.9750%" height="15" fill="rgb(216,20,37)"/><text x="20.7519%" y="79.50">s..</text></g><g><title>impl_trait_ref (2,087,356 samples, 1.08%)</title><rect x="21.3925%" y="53" width="1.0844%" height="15" fill="rgb(206,188,39)"/><text x="21.6425%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,860,714 samples, 0.97%)</title><rect x="21.5102%" y="37" width="0.9667%" height="15" fill="rgb(217,207,13)"/><text x="21.7602%" y="47.50"></text></g><g><title>resolve_instance (4,906,336 samples, 2.55%)</title><rect x="20.0035%" y="85" width="2.5489%" height="15" fill="rgb(231,73,38)"/><text x="20.2535%" y="95.50">re..</text></g><g><title>thir_body (1,426,428 samples, 0.74%)</title><rect x="22.5838%" y="85" width="0.7411%" height="15" fill="rgb(225,20,46)"/><text x="22.8338%" y="95.50"></text></g><g><title>mir_const (16,890,817 samples, 8.78%)</title><rect x="14.6175%" y="133" width="8.7751%" height="15" fill="rgb(210,31,41)"/><text x="14.8675%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (14,545,660 samples, 7.56%)</title><rect x="15.8359%" y="117" width="7.5567%" height="15" fill="rgb(221,200,47)"/><text x="16.0859%" y="127.50">unsafety_c..</text></g><g><title>mir_built (13,560,171 samples, 7.04%)</title><rect x="16.3478%" y="101" width="7.0447%" height="15" fill="rgb(226,26,5)"/><text x="16.5978%" y="111.50">mir_built</text></g><g><title>mir_promoted (18,344,081 samples, 9.53%)</title><rect x="13.9048%" y="149" width="9.5301%" height="15" fill="rgb(249,33,26)"/><text x="14.1548%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,052,780 samples, 0.55%)</title><rect x="23.4348%" y="149" width="0.5469%" height="15" fill="rgb(235,183,28)"/><text x="23.6848%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,494,923 samples, 1.30%)</title><rect x="23.9818%" y="149" width="1.2962%" height="15" fill="rgb(221,5,38)"/><text x="24.2318%" y="159.50"></text></g><g><title>normalize_projection_ty (1,181,385 samples, 0.61%)</title><rect x="24.6642%" y="133" width="0.6137%" height="15" fill="rgb(247,18,42)"/><text x="24.9142%" y="143.50"></text></g><g><title>type_op_normalize_predicate (230,463 samples, 0.12%)</title><rect x="25.2779%" y="149" width="0.1197%" height="15" fill="rgb(241,131,45)"/><text x="25.5279%" y="159.50"></text></g><g><title>type_op_normalize_ty (1,774,910 samples, 0.92%)</title><rect x="25.3977%" y="149" width="0.9221%" height="15" fill="rgb(249,31,29)"/><text x="25.6477%" y="159.50"></text></g><g><title>normalize_projection_ty (966,662 samples, 0.50%)</title><rect x="25.8176%" y="133" width="0.5022%" height="15" fill="rgb(225,111,53)"/><text x="26.0676%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,655,368 samples, 2.94%)</title><rect x="26.3198%" y="149" width="2.9381%" height="15" fill="rgb(238,160,17)"/><text x="26.5698%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (55,290,437 samples, 28.72%)</title><rect x="0.5418%" y="181" width="28.7243%" height="15" fill="rgb(214,148,48)"/><text x="0.7918%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (55,024,784 samples, 28.59%)</title><rect x="0.6798%" y="165" width="28.5863%" height="15" fill="rgb(232,36,49)"/><text x="0.9298%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (219,482 samples, 0.11%)</title><rect x="29.2959%" y="181" width="0.1140%" height="15" fill="rgb(209,103,24)"/><text x="29.5459%" y="191.50"></text></g><g><title>codegen_fn_attrs (291,073 samples, 0.15%)</title><rect x="29.7462%" y="117" width="0.1512%" height="15" fill="rgb(229,88,8)"/><text x="29.9962%" y="127.50"></text></g><g><title>should_inherit_track_caller (471,526 samples, 0.24%)</title><rect x="29.6591%" y="133" width="0.2450%" height="15" fill="rgb(213,181,19)"/><text x="29.9091%" y="143.50"></text></g><g><title>codegen_fn_attrs (699,220 samples, 0.36%)</title><rect x="29.5490%" y="149" width="0.3633%" height="15" fill="rgb(254,191,54)"/><text x="29.7990%" y="159.50"></text></g><g><title>check_mod_attrs (949,191 samples, 0.49%)</title><rect x="29.4192%" y="165" width="0.4931%" height="15" fill="rgb(241,83,37)"/><text x="29.6692%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (389,754 samples, 0.20%)</title><rect x="30.0518%" y="165" width="0.2025%" height="15" fill="rgb(233,36,39)"/><text x="30.3018%" y="175.50"></text></g><g><title>misc_checking_1 (1,664,038 samples, 0.86%)</title><rect x="29.4102%" y="181" width="0.8645%" height="15" fill="rgb(226,3,54)"/><text x="29.6602%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (562,246 samples, 0.29%)</title><rect x="30.2755%" y="165" width="0.2921%" height="15" fill="rgb(245,192,40)"/><text x="30.5255%" y="175.50"></text></g><g><title>check_mod_liveness (468,365 samples, 0.24%)</title><rect x="30.3242%" y="149" width="0.2433%" height="15" fill="rgb(238,167,29)"/><text x="30.5742%" y="159.50"></text></g><g><title>misc_checking_2 (1,213,493 samples, 0.63%)</title><rect x="30.2747%" y="181" width="0.6304%" height="15" fill="rgb(232,182,51)"/><text x="30.5247%" y="191.50"></text></g><g><title>match_checking (649,667 samples, 0.34%)</title><rect x="30.5676%" y="165" width="0.3375%" height="15" fill="rgb(231,60,39)"/><text x="30.8176%" y="175.50"></text></g><g><title>check_match (599,467 samples, 0.31%)</title><rect x="30.5937%" y="149" width="0.3114%" height="15" fill="rgb(208,69,12)"/><text x="30.8437%" y="159.50"></text></g><g><title>check_private_in_public (284,313 samples, 0.15%)</title><rect x="30.9106%" y="165" width="0.1477%" height="15" fill="rgb(235,93,37)"/><text x="31.1606%" y="175.50"></text></g><g><title>death_checking (338,534 samples, 0.18%)</title><rect x="31.0584%" y="165" width="0.1759%" height="15" fill="rgb(213,116,39)"/><text x="31.3084%" y="175.50"></text></g><g><title>crate_lints (2,607,839 samples, 1.35%)</title><rect x="31.2350%" y="149" width="1.3548%" height="15" fill="rgb(222,207,29)"/><text x="31.4850%" y="159.50"></text></g><g><title>type_of (1,823,112 samples, 0.95%)</title><rect x="31.6427%" y="133" width="0.9471%" height="15" fill="rgb(206,96,30)"/><text x="31.8927%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,577,539 samples, 0.82%)</title><rect x="31.7703%" y="117" width="0.8196%" height="15" fill="rgb(218,138,4)"/><text x="32.0203%" y="127.50"></text></g><g><title>lint_checking (3,155,355 samples, 1.64%)</title><rect x="31.2342%" y="165" width="1.6393%" height="15" fill="rgb(250,191,14)"/><text x="31.4842%" y="175.50"></text></g><g><title>module_lints (545,986 samples, 0.28%)</title><rect x="32.5898%" y="149" width="0.2836%" height="15" fill="rgb(239,60,40)"/><text x="32.8398%" y="159.50"></text></g><g><title>lint_mod (543,126 samples, 0.28%)</title><rect x="32.5913%" y="133" width="0.2822%" height="15" fill="rgb(206,27,48)"/><text x="32.8413%" y="143.50"></text></g><g><title>privacy_access_levels (284,834 samples, 0.15%)</title><rect x="32.8735%" y="165" width="0.1480%" height="15" fill="rgb(225,35,8)"/><text x="33.1235%" y="175.50"></text></g><g><title>privacy_checking_modules (1,943,982 samples, 1.01%)</title><rect x="33.0215%" y="165" width="1.0099%" height="15" fill="rgb(250,213,24)"/><text x="33.2715%" y="175.50"></text></g><g><title>check_mod_privacy (1,941,652 samples, 1.01%)</title><rect x="33.0227%" y="149" width="1.0087%" height="15" fill="rgb(247,123,22)"/><text x="33.2727%" y="159.50"></text></g><g><title>misc_checking_3 (6,029,588 samples, 3.13%)</title><rect x="30.9051%" y="181" width="3.1325%" height="15" fill="rgb(231,138,38)"/><text x="31.1551%" y="191.50">mis..</text></g><g><title>impl_parent (279,782 samples, 0.15%)</title><rect x="34.2867%" y="117" width="0.1454%" height="15" fill="rgb(231,145,46)"/><text x="34.5367%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (200,022 samples, 0.10%)</title><rect x="34.3281%" y="101" width="0.1039%" height="15" fill="rgb(251,118,11)"/><text x="34.5781%" y="111.50"></text></g><g><title>impl_trait_ref (847,480 samples, 0.44%)</title><rect x="34.4321%" y="117" width="0.4403%" height="15" fill="rgb(217,147,25)"/><text x="34.6821%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (760,229 samples, 0.39%)</title><rect x="34.4774%" y="101" width="0.3950%" height="15" fill="rgb(247,81,37)"/><text x="34.7274%" y="111.50"></text></g><g><title>coherent_trait (1,661,899 samples, 0.86%)</title><rect x="34.0907%" y="149" width="0.8634%" height="15" fill="rgb(209,12,38)"/><text x="34.3407%" y="159.50"></text></g><g><title>specialization_graph_of (1,650,529 samples, 0.86%)</title><rect x="34.0967%" y="133" width="0.8575%" height="15" fill="rgb(227,1,9)"/><text x="34.3467%" y="143.50"></text></g><g><title>coherence_checking (1,728,879 samples, 0.90%)</title><rect x="34.0836%" y="165" width="0.8982%" height="15" fill="rgb(248,47,43)"/><text x="34.3336%" y="175.50"></text></g><g><title>associated_item (850,131 samples, 0.44%)</title><rect x="56.8847%" y="101" width="0.4417%" height="15" fill="rgb(221,10,30)"/><text x="57.1347%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (668,019 samples, 0.35%)</title><rect x="56.9793%" y="85" width="0.3470%" height="15" fill="rgb(210,229,1)"/><text x="57.2293%" y="95.50"></text></g><g><title>associated_items (1,172,314 samples, 0.61%)</title><rect x="56.7360%" y="117" width="0.6090%" height="15" fill="rgb(222,148,37)"/><text x="56.9860%" y="127.50"></text></g><g><title>adt_dtorck_constraint (207,172 samples, 0.11%)</title><rect x="57.7869%" y="101" width="0.1076%" height="15" fill="rgb(234,67,33)"/><text x="58.0369%" y="111.50"></text></g><g><title>dropck_outlives (1,472,365 samples, 0.76%)</title><rect x="57.4141%" y="117" width="0.7649%" height="15" fill="rgb(247,98,35)"/><text x="57.6641%" y="127.50"></text></g><g><title>normalize_projection_ty (547,445 samples, 0.28%)</title><rect x="57.8946%" y="101" width="0.2844%" height="15" fill="rgb(247,138,52)"/><text x="58.1446%" y="111.50"></text></g><g><title>evaluate_obligation (1,593,137 samples, 0.83%)</title><rect x="58.1790%" y="117" width="0.8277%" height="15" fill="rgb(213,79,30)"/><text x="58.4290%" y="127.50"></text></g><g><title>trait_impls_of (302,443 samples, 0.16%)</title><rect x="58.8495%" y="101" width="0.1571%" height="15" fill="rgb(246,177,23)"/><text x="59.0995%" y="111.50"></text></g><g><title>evaluate_obligation (311,446 samples, 0.16%)</title><rect x="59.3484%" y="101" width="0.1618%" height="15" fill="rgb(230,62,27)"/><text x="59.5984%" y="111.50"></text></g><g><title>method_autoderef_steps (648,769 samples, 0.34%)</title><rect x="59.1838%" y="117" width="0.3370%" height="15" fill="rgb(216,154,8)"/><text x="59.4338%" y="127.50"></text></g><g><title>associated_item (307,725 samples, 0.16%)</title><rect x="60.3977%" y="85" width="0.1599%" height="15" fill="rgb(244,35,45)"/><text x="60.6477%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (275,324 samples, 0.14%)</title><rect x="60.4145%" y="69" width="0.1430%" height="15" fill="rgb(251,115,12)"/><text x="60.6645%" y="79.50"></text></g><g><title>associated_items (372,445 samples, 0.19%)</title><rect x="60.3695%" y="101" width="0.1935%" height="15" fill="rgb(240,54,50)"/><text x="60.6195%" y="111.50"></text></g><g><title>evaluate_obligation (250,915 samples, 0.13%)</title><rect x="60.6310%" y="101" width="0.1304%" height="15" fill="rgb(233,84,52)"/><text x="60.8810%" y="111.50"></text></g><g><title>is_copy_raw (201,482 samples, 0.10%)</title><rect x="60.8110%" y="101" width="0.1047%" height="15" fill="rgb(207,117,47)"/><text x="61.0610%" y="111.50"></text></g><g><title>typeck (2,492,598 samples, 1.29%)</title><rect x="59.6846%" y="117" width="1.2949%" height="15" fill="rgb(249,43,39)"/><text x="59.9346%" y="127.50"></text></g><g><title>item_bodies_checking (50,066,269 samples, 26.01%)</title><rect x="35.0071%" y="165" width="26.0103%" height="15" fill="rgb(209,38,44)"/><text x="35.2571%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,062,509 samples, 26.01%)</title><rect x="35.0090%" y="149" width="26.0083%" height="15" fill="rgb(236,212,23)"/><text x="35.2590%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (49,870,208 samples, 25.91%)</title><rect x="35.1089%" y="133" width="25.9084%" height="15" fill="rgb(242,79,21)"/><text x="35.3589%" y="143.50">typeck</text></g><g><title>impl_trait_ref (227,441 samples, 0.12%)</title><rect x="65.7610%" y="85" width="0.1182%" height="15" fill="rgb(211,96,35)"/><text x="66.0110%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (206,651 samples, 0.11%)</title><rect x="65.7718%" y="69" width="0.1074%" height="15" fill="rgb(253,215,40)"/><text x="66.0218%" y="79.50"></text></g><g><title>adt_destructor (416,555 samples, 0.22%)</title><rect x="65.6763%" y="133" width="0.2164%" height="15" fill="rgb(211,81,21)"/><text x="65.9263%" y="143.50"></text></g><g><title>coherent_trait (409,785 samples, 0.21%)</title><rect x="65.6798%" y="117" width="0.2129%" height="15" fill="rgb(208,190,38)"/><text x="65.9298%" y="127.50"></text></g><g><title>specialization_graph_of (408,025 samples, 0.21%)</title><rect x="65.6807%" y="101" width="0.2120%" height="15" fill="rgb(235,213,38)"/><text x="65.9307%" y="111.50"></text></g><g><title>implied_outlives_bounds (297,783 samples, 0.15%)</title><rect x="66.0495%" y="133" width="0.1547%" height="15" fill="rgb(237,122,38)"/><text x="66.2995%" y="143.50"></text></g><g><title>predicates_of (263,383 samples, 0.14%)</title><rect x="66.2049%" y="133" width="0.1368%" height="15" fill="rgb(244,218,35)"/><text x="66.4549%" y="143.50"></text></g><g><title>predicates_defined_on (221,803 samples, 0.12%)</title><rect x="66.2265%" y="117" width="0.1152%" height="15" fill="rgb(240,68,47)"/><text x="66.4765%" y="127.50"></text></g><g><title>item_types_checking (10,446,576 samples, 5.43%)</title><rect x="61.0173%" y="165" width="5.4272%" height="15" fill="rgb(210,16,53)"/><text x="61.2673%" y="175.50">item_ty..</text></g><g><title>check_mod_item_types (10,444,346 samples, 5.43%)</title><rect x="61.0185%" y="149" width="5.4260%" height="15" fill="rgb(235,124,12)"/><text x="61.2685%" y="159.50">check_m..</text></g><g><title>fn_sig (1,204,628 samples, 0.63%)</title><rect x="66.6761%" y="133" width="0.6258%" height="15" fill="rgb(224,169,11)"/><text x="66.9261%" y="143.50"></text></g><g><title>type_param_predicates (354,454 samples, 0.18%)</title><rect x="67.1177%" y="117" width="0.1841%" height="15" fill="rgb(250,166,2)"/><text x="67.3677%" y="127.50"></text></g><g><title>is_late_bound_map (914,792 samples, 0.48%)</title><rect x="67.4227%" y="117" width="0.4752%" height="15" fill="rgb(242,216,29)"/><text x="67.6727%" y="127.50"></text></g><g><title>resolve_lifetimes (882,622 samples, 0.46%)</title><rect x="67.4394%" y="101" width="0.4585%" height="15" fill="rgb(230,116,27)"/><text x="67.6894%" y="111.50"></text></g><g><title>generics_of (1,172,894 samples, 0.61%)</title><rect x="67.3019%" y="133" width="0.6093%" height="15" fill="rgb(228,99,48)"/><text x="67.5519%" y="143.50"></text></g><g><title>explicit_predicates_of (852,579 samples, 0.44%)</title><rect x="68.0420%" y="101" width="0.4429%" height="15" fill="rgb(253,11,6)"/><text x="68.2920%" y="111.50"></text></g><g><title>predicates_of (1,333,103 samples, 0.69%)</title><rect x="67.9273%" y="133" width="0.6926%" height="15" fill="rgb(247,143,39)"/><text x="68.1773%" y="143.50"></text></g><g><title>predicates_defined_on (1,249,433 samples, 0.65%)</title><rect x="67.9707%" y="117" width="0.6491%" height="15" fill="rgb(236,97,10)"/><text x="68.2207%" y="127.50"></text></g><g><title>inferred_outlives_of (259,593 samples, 0.13%)</title><rect x="68.4850%" y="101" width="0.1349%" height="15" fill="rgb(233,208,19)"/><text x="68.7350%" y="111.50"></text></g><g><title>inferred_outlives_crate (224,753 samples, 0.12%)</title><rect x="68.5031%" y="85" width="0.1168%" height="15" fill="rgb(216,164,2)"/><text x="68.7531%" y="95.50"></text></g><g><title>type_collecting (4,482,100 samples, 2.33%)</title><rect x="66.4451%" y="165" width="2.3285%" height="15" fill="rgb(220,129,5)"/><text x="66.6951%" y="175.50">t..</text></g><g><title>collect_mod_item_types (4,471,449 samples, 2.32%)</title><rect x="66.4506%" y="149" width="2.3230%" height="15" fill="rgb(242,17,10)"/><text x="66.7006%" y="159.50">c..</text></g><g><title>type_of (295,972 samples, 0.15%)</title><rect x="68.6198%" y="133" width="0.1538%" height="15" fill="rgb(242,107,0)"/><text x="68.8698%" y="143.50"></text></g><g><title>evaluate_obligation (432,567 samples, 0.22%)</title><rect x="74.1251%" y="133" width="0.2247%" height="15" fill="rgb(251,28,31)"/><text x="74.3751%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,101,214 samples, 0.57%)</title><rect x="74.3597%" y="133" width="0.5721%" height="15" fill="rgb(233,223,10)"/><text x="74.6097%" y="143.50"></text></g><g><title>param_env (1,473,535 samples, 0.77%)</title><rect x="74.9590%" y="133" width="0.7655%" height="15" fill="rgb(215,21,27)"/><text x="75.2090%" y="143.50"></text></g><g><title>region_scope_tree (547,916 samples, 0.28%)</title><rect x="75.7698%" y="133" width="0.2847%" height="15" fill="rgb(232,23,21)"/><text x="76.0198%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,669,730 samples, 7.10%)</title><rect x="68.9671%" y="149" width="7.1016%" height="15" fill="rgb(244,5,23)"/><text x="69.2171%" y="159.50">check_impl..</text></g><g><title>implied_outlives_bounds (256,701 samples, 0.13%)</title><rect x="77.1010%" y="133" width="0.1334%" height="15" fill="rgb(226,81,46)"/><text x="77.3510%" y="143.50"></text></g><g><title>param_env (326,925 samples, 0.17%)</title><rect x="77.2469%" y="133" width="0.1698%" height="15" fill="rgb(247,70,30)"/><text x="77.4969%" y="143.50"></text></g><g><title>analysis (148,678,627 samples, 77.24%)</title><rect x="0.3405%" y="197" width="77.2410%" height="15" fill="rgb(212,68,19)"/><text x="0.5905%" y="207.50">analysis</text></g><g><title>type_check_crate (83,816,235 samples, 43.54%)</title><rect x="34.0376%" y="181" width="43.5439%" height="15" fill="rgb(240,187,13)"/><text x="34.2876%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,944,879 samples, 8.80%)</title><rect x="68.7783%" y="165" width="8.8031%" height="15" fill="rgb(223,113,26)"/><text x="69.0283%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (2,911,734 samples, 1.51%)</title><rect x="76.0688%" y="149" width="1.5127%" height="15" fill="rgb(206,192,2)"/><text x="76.3188%" y="159.50"></text></g><g><title>codegen_crate (350,264 samples, 0.18%)</title><rect x="77.5882%" y="197" width="0.1820%" height="15" fill="rgb(241,108,4)"/><text x="77.8382%" y="207.50"></text></g><g><title>AST_validation (291,953 samples, 0.15%)</title><rect x="77.8853%" y="181" width="0.1517%" height="15" fill="rgb(247,173,49)"/><text x="78.1353%" y="191.50"></text></g><g><title>macro_expand_crate (15,518,713 samples, 8.06%)</title><rect x="78.1209%" y="181" width="8.0622%" height="15" fill="rgb(224,114,35)"/><text x="78.3709%" y="191.50">macro_expan..</text></g><g><title>expand_crate (15,503,343 samples, 8.05%)</title><rect x="78.1289%" y="165" width="8.0542%" height="15" fill="rgb(245,159,27)"/><text x="78.3789%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,720,320 samples, 1.41%)</title><rect x="84.7699%" y="149" width="1.4133%" height="15" fill="rgb(245,172,44)"/><text x="85.0199%" y="159.50"></text></g><g><title>metadata_register_crate (976,549 samples, 0.51%)</title><rect x="85.6758%" y="133" width="0.5073%" height="15" fill="rgb(236,23,11)"/><text x="85.9258%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (531,136 samples, 0.28%)</title><rect x="86.1856%" y="181" width="0.2759%" height="15" fill="rgb(205,117,38)"/><text x="86.4356%" y="191.50"></text></g><g><title>late_resolve_crate (2,966,394 samples, 1.54%)</title><rect x="86.5659%" y="165" width="1.5411%" height="15" fill="rgb(237,72,25)"/><text x="86.8159%" y="175.50"></text></g><g><title>configure_and_expand (20,009,604 samples, 10.40%)</title><rect x="77.7702%" y="197" width="10.3953%" height="15" fill="rgb(244,70,9)"/><text x="78.0202%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (3,280,017 samples, 1.70%)</title><rect x="86.4615%" y="181" width="1.7040%" height="15" fill="rgb(217,125,39)"/><text x="86.7115%" y="191.50"></text></g><g><title>drop_ast (222,142 samples, 0.12%)</title><rect x="88.1655%" y="197" width="0.1154%" height="15" fill="rgb(235,36,10)"/><text x="88.4155%" y="207.50"></text></g><g><title>early_lint_checks (362,674 samples, 0.19%)</title><rect x="88.2914%" y="197" width="0.1884%" height="15" fill="rgb(251,123,47)"/><text x="88.5414%" y="207.50"></text></g><g><title>free_global_ctxt (3,561,739 samples, 1.85%)</title><rect x="88.4798%" y="197" width="1.8504%" height="15" fill="rgb(221,13,13)"/><text x="88.7298%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,657,539 samples, 0.86%)</title><rect x="90.3302%" y="197" width="0.8611%" height="15" fill="rgb(238,131,9)"/><text x="90.5802%" y="207.50"></text></g><g><title>hir_lowering (4,195,027 samples, 2.18%)</title><rect x="91.1913%" y="197" width="2.1794%" height="15" fill="rgb(211,50,8)"/><text x="91.4413%" y="207.50">h..</text></g><g><title>parse_crate (11,247,015 samples, 5.84%)</title><rect x="93.3981%" y="197" width="5.8430%" height="15" fill="rgb(245,182,24)"/><text x="93.6481%" y="207.50">parse_c..</text></g><g><title>self_profile_alloc_query_strings (791,169 samples, 0.41%)</title><rect x="99.3454%" y="197" width="0.4110%" height="15" fill="rgb(242,14,37)"/><text x="99.5954%" y="207.50"></text></g><g><title>all (192,486,676 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (192,486,676 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (365,994 samples, 0.19%)</title><rect x="99.8099%" y="197" width="0.1901%" height="15" fill="rgb(209,9,3)"/><text x="100.0599%" y="207.50"></text></g></svg></svg>