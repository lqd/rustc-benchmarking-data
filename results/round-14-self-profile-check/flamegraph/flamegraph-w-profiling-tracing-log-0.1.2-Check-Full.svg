<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (249,542 samples, 0.13%)</title><rect x="13.7481%" y="149" width="0.1301%" height="15" fill="rgb(227,0,7)"/><text x="13.9981%" y="159.50"></text></g><g><title>param_env (627,157 samples, 0.33%)</title><rect x="15.4340%" y="117" width="0.3269%" height="15" fill="rgb(217,0,24)"/><text x="15.6840%" y="127.50"></text></g><g><title>item_attrs (456,098 samples, 0.24%)</title><rect x="16.3094%" y="85" width="0.2377%" height="15" fill="rgb(221,193,54)"/><text x="16.5594%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (434,238 samples, 0.23%)</title><rect x="16.3208%" y="69" width="0.2263%" height="15" fill="rgb(248,212,6)"/><text x="16.5708%" y="79.50"></text></g><g><title>codegen_fn_attrs (663,602 samples, 0.35%)</title><rect x="16.2209%" y="101" width="0.3459%" height="15" fill="rgb(208,68,35)"/><text x="16.4709%" y="111.50"></text></g><g><title>is_copy_raw (229,212 samples, 0.12%)</title><rect x="19.0099%" y="53" width="0.1195%" height="15" fill="rgb(232,128,0)"/><text x="19.2599%" y="63.50"></text></g><g><title>adt_drop_tys (535,428 samples, 0.28%)</title><rect x="18.9292%" y="69" width="0.2791%" height="15" fill="rgb(207,160,47)"/><text x="19.1792%" y="79.50"></text></g><g><title>needs_drop_raw (1,586,477 samples, 0.83%)</title><rect x="18.8390%" y="85" width="0.8269%" height="15" fill="rgb(228,23,34)"/><text x="19.0890%" y="95.50"></text></g><g><title>is_copy_raw (875,206 samples, 0.46%)</title><rect x="19.2097%" y="69" width="0.4562%" height="15" fill="rgb(218,30,26)"/><text x="19.4597%" y="79.50"></text></g><g><title>evaluate_obligation (699,095 samples, 0.36%)</title><rect x="19.3015%" y="53" width="0.3644%" height="15" fill="rgb(220,122,19)"/><text x="19.5515%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (290,024 samples, 0.15%)</title><rect x="19.8774%" y="69" width="0.1512%" height="15" fill="rgb(250,228,42)"/><text x="20.1274%" y="79.50"></text></g><g><title>impl_parent (1,449,305 samples, 0.76%)</title><rect x="21.1730%" y="53" width="0.7554%" height="15" fill="rgb(240,193,28)"/><text x="21.4230%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (729,336 samples, 0.38%)</title><rect x="21.5483%" y="37" width="0.3801%" height="15" fill="rgb(216,20,37)"/><text x="21.7983%" y="47.50"></text></g><g><title>specialization_graph_of (5,646,075 samples, 2.94%)</title><rect x="20.1015%" y="69" width="2.9429%" height="15" fill="rgb(206,188,39)"/><text x="20.3515%" y="79.50">sp..</text></g><g><title>impl_trait_ref (2,140,963 samples, 1.12%)</title><rect x="21.9284%" y="53" width="1.1159%" height="15" fill="rgb(217,207,13)"/><text x="22.1784%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,642,428 samples, 0.86%)</title><rect x="22.1883%" y="37" width="0.8561%" height="15" fill="rgb(231,73,38)"/><text x="22.4383%" y="47.50"></text></g><g><title>resolve_instance (6,662,093 samples, 3.47%)</title><rect x="19.6736%" y="85" width="3.4724%" height="15" fill="rgb(225,20,46)"/><text x="19.9236%" y="95.50">res..</text></g><g><title>thir_body (1,797,070 samples, 0.94%)</title><rect x="23.1793%" y="85" width="0.9367%" height="15" fill="rgb(210,31,41)"/><text x="23.4293%" y="95.50"></text></g><g><title>mir_const (18,000,102 samples, 9.38%)</title><rect x="14.7535%" y="133" width="9.3820%" height="15" fill="rgb(221,200,47)"/><text x="15.0035%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,067,332 samples, 8.37%)</title><rect x="15.7609%" y="117" width="8.3746%" height="15" fill="rgb(226,26,5)"/><text x="16.0109%" y="127.50">unsafety_che..</text></g><g><title>mir_built (14,521,144 samples, 7.57%)</title><rect x="16.5668%" y="101" width="7.5687%" height="15" fill="rgb(249,33,26)"/><text x="16.8168%" y="111.50">mir_built</text></g><g><title>has_structural_eq_impls (310,381 samples, 0.16%)</title><rect x="24.4489%" y="117" width="0.1618%" height="15" fill="rgb(235,183,28)"/><text x="24.6989%" y="127.50"></text></g><g><title>is_freeze_raw (244,792 samples, 0.13%)</title><rect x="24.6127%" y="117" width="0.1276%" height="15" fill="rgb(221,5,38)"/><text x="24.8627%" y="127.50"></text></g><g><title>evaluate_obligation (222,322 samples, 0.12%)</title><rect x="24.6244%" y="101" width="0.1159%" height="15" fill="rgb(247,18,42)"/><text x="24.8744%" y="111.50"></text></g><g><title>mir_const (632,118 samples, 0.33%)</title><rect x="24.7424%" y="117" width="0.3295%" height="15" fill="rgb(241,131,45)"/><text x="24.9924%" y="127.50"></text></g><g><title>unsafety_check_result (498,805 samples, 0.26%)</title><rect x="24.8119%" y="101" width="0.2600%" height="15" fill="rgb(249,31,29)"/><text x="25.0619%" y="111.50"></text></g><g><title>mir_built (415,364 samples, 0.22%)</title><rect x="24.8554%" y="85" width="0.2165%" height="15" fill="rgb(225,111,53)"/><text x="25.1054%" y="95.50"></text></g><g><title>mir_const_qualif (1,937,270 samples, 1.01%)</title><rect x="24.1355%" y="133" width="1.0097%" height="15" fill="rgb(238,160,17)"/><text x="24.3855%" y="143.50"></text></g><g><title>mir_promoted (21,427,435 samples, 11.17%)</title><rect x="13.9770%" y="149" width="11.1684%" height="15" fill="rgb(214,148,48)"/><text x="14.2270%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (603,150 samples, 0.31%)</title><rect x="25.1454%" y="149" width="0.3144%" height="15" fill="rgb(232,36,49)"/><text x="25.3954%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (459,094 samples, 0.24%)</title><rect x="25.4598%" y="149" width="0.2393%" height="15" fill="rgb(209,103,24)"/><text x="25.7098%" y="159.50"></text></g><g><title>normalize_projection_ty (253,701 samples, 0.13%)</title><rect x="25.5668%" y="133" width="0.1322%" height="15" fill="rgb(229,88,8)"/><text x="25.8168%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,585,058 samples, 2.39%)</title><rect x="25.7654%" y="149" width="2.3898%" height="15" fill="rgb(213,181,19)"/><text x="26.0154%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (52,987,067 samples, 27.62%)</title><rect x="0.5432%" y="181" width="27.6180%" height="15" fill="rgb(254,191,54)"/><text x="0.7932%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (52,737,077 samples, 27.49%)</title><rect x="0.6735%" y="165" width="27.4877%" height="15" fill="rgb(241,83,37)"/><text x="0.9235%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (625,787 samples, 0.33%)</title><rect x="28.1612%" y="181" width="0.3262%" height="15" fill="rgb(233,36,39)"/><text x="28.4112%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (397,043 samples, 0.21%)</title><rect x="28.2805%" y="165" width="0.2069%" height="15" fill="rgb(226,3,54)"/><text x="28.5305%" y="175.50"></text></g><g><title>hir_module_items (242,594 samples, 0.13%)</title><rect x="28.4874%" y="181" width="0.1264%" height="15" fill="rgb(245,192,40)"/><text x="28.7374%" y="191.50"></text></g><g><title>should_inherit_track_caller (300,122 samples, 0.16%)</title><rect x="28.8860%" y="133" width="0.1564%" height="15" fill="rgb(238,167,29)"/><text x="29.1360%" y="143.50"></text></g><g><title>codegen_fn_attrs (507,403 samples, 0.26%)</title><rect x="28.7858%" y="149" width="0.2645%" height="15" fill="rgb(232,182,51)"/><text x="29.0358%" y="159.50"></text></g><g><title>check_mod_attrs (817,289 samples, 0.43%)</title><rect x="28.6243%" y="165" width="0.4260%" height="15" fill="rgb(231,60,39)"/><text x="28.8743%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (646,778 samples, 0.34%)</title><rect x="29.1916%" y="165" width="0.3371%" height="15" fill="rgb(208,69,12)"/><text x="29.4416%" y="175.50"></text></g><g><title>misc_checking_1 (1,817,560 samples, 0.95%)</title><rect x="28.6141%" y="181" width="0.9474%" height="15" fill="rgb(235,93,37)"/><text x="28.8641%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (724,079 samples, 0.38%)</title><rect x="29.5622%" y="165" width="0.3774%" height="15" fill="rgb(213,116,39)"/><text x="29.8122%" y="175.50"></text></g><g><title>check_mod_liveness (585,657 samples, 0.31%)</title><rect x="29.6343%" y="149" width="0.3053%" height="15" fill="rgb(222,207,29)"/><text x="29.8843%" y="159.50"></text></g><g><title>eval_to_const_value_raw (450,605 samples, 0.23%)</title><rect x="30.3913%" y="133" width="0.2349%" height="15" fill="rgb(206,96,30)"/><text x="30.6413%" y="143.50"></text></g><g><title>eval_to_const_value_raw (439,655 samples, 0.23%)</title><rect x="30.3970%" y="117" width="0.2292%" height="15" fill="rgb(218,138,4)"/><text x="30.6470%" y="127.50"></text></g><g><title>eval_to_allocation_raw (416,475 samples, 0.22%)</title><rect x="30.4091%" y="101" width="0.2171%" height="15" fill="rgb(250,191,14)"/><text x="30.6591%" y="111.50"></text></g><g><title>has_structural_eq_impls (243,303 samples, 0.13%)</title><rect x="30.6762%" y="133" width="0.1268%" height="15" fill="rgb(239,60,40)"/><text x="30.9262%" y="143.50"></text></g><g><title>evaluate_obligation (222,233 samples, 0.12%)</title><rect x="30.6872%" y="117" width="0.1158%" height="15" fill="rgb(206,27,48)"/><text x="30.9372%" y="127.50"></text></g><g><title>misc_checking_2 (2,502,628 samples, 1.30%)</title><rect x="29.5614%" y="181" width="1.3044%" height="15" fill="rgb(225,35,8)"/><text x="29.8114%" y="191.50"></text></g><g><title>match_checking (1,777,069 samples, 0.93%)</title><rect x="29.9396%" y="165" width="0.9262%" height="15" fill="rgb(250,213,24)"/><text x="30.1896%" y="175.50"></text></g><g><title>check_match (1,717,958 samples, 0.90%)</title><rect x="29.9704%" y="149" width="0.8954%" height="15" fill="rgb(247,123,22)"/><text x="30.2204%" y="159.50"></text></g><g><title>check_private_in_public (333,843 samples, 0.17%)</title><rect x="30.9928%" y="165" width="0.1740%" height="15" fill="rgb(231,138,38)"/><text x="31.2428%" y="175.50"></text></g><g><title>death_checking (553,846 samples, 0.29%)</title><rect x="31.1668%" y="165" width="0.2887%" height="15" fill="rgb(231,145,46)"/><text x="31.4168%" y="175.50"></text></g><g><title>eval_to_const_value_raw (339,524 samples, 0.18%)</title><rect x="32.6241%" y="85" width="0.1770%" height="15" fill="rgb(251,118,11)"/><text x="32.8741%" y="95.50"></text></g><g><title>eval_to_const_value_raw (337,524 samples, 0.18%)</title><rect x="32.6252%" y="69" width="0.1759%" height="15" fill="rgb(217,147,25)"/><text x="32.8752%" y="79.50"></text></g><g><title>eval_to_allocation_raw (333,604 samples, 0.17%)</title><rect x="32.6272%" y="53" width="0.1739%" height="15" fill="rgb(247,81,37)"/><text x="32.8772%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (358,404 samples, 0.19%)</title><rect x="32.6163%" y="101" width="0.1868%" height="15" fill="rgb(209,12,38)"/><text x="32.8663%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,679,038 samples, 0.88%)</title><rect x="32.0386%" y="133" width="0.8752%" height="15" fill="rgb(227,1,9)"/><text x="32.2886%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,656,388 samples, 0.86%)</title><rect x="32.0504%" y="117" width="0.8633%" height="15" fill="rgb(248,47,43)"/><text x="32.3004%" y="127.50"></text></g><g><title>vtable_allocation (212,223 samples, 0.11%)</title><rect x="32.8031%" y="101" width="0.1106%" height="15" fill="rgb(221,10,30)"/><text x="33.0531%" y="111.50"></text></g><g><title>eval_to_const_value_raw (214,003 samples, 0.11%)</title><rect x="32.9137%" y="133" width="0.1115%" height="15" fill="rgb(210,229,1)"/><text x="33.1637%" y="143.50"></text></g><g><title>eval_to_const_value_raw (212,603 samples, 0.11%)</title><rect x="32.9145%" y="117" width="0.1108%" height="15" fill="rgb(222,148,37)"/><text x="33.1645%" y="127.50"></text></g><g><title>eval_to_allocation_raw (209,643 samples, 0.11%)</title><rect x="32.9160%" y="101" width="0.1093%" height="15" fill="rgb(234,67,33)"/><text x="33.1660%" y="111.50"></text></g><g><title>param_env (289,462 samples, 0.15%)</title><rect x="33.0253%" y="133" width="0.1509%" height="15" fill="rgb(247,98,35)"/><text x="33.2753%" y="143.50"></text></g><g><title>crate_lints (4,521,521 samples, 2.36%)</title><rect x="31.4564%" y="149" width="2.3567%" height="15" fill="rgb(247,138,52)"/><text x="31.7064%" y="159.50">c..</text></g><g><title>type_of (1,180,882 samples, 0.62%)</title><rect x="33.1976%" y="133" width="0.6155%" height="15" fill="rgb(213,79,30)"/><text x="33.4476%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (939,309 samples, 0.49%)</title><rect x="33.3235%" y="117" width="0.4896%" height="15" fill="rgb(246,177,23)"/><text x="33.5735%" y="127.50"></text></g><g><title>lint_checking (5,169,478 samples, 2.69%)</title><rect x="31.4555%" y="165" width="2.6944%" height="15" fill="rgb(230,62,27)"/><text x="31.7055%" y="175.50">li..</text></g><g><title>module_lints (646,247 samples, 0.34%)</title><rect x="33.8131%" y="149" width="0.3368%" height="15" fill="rgb(216,154,8)"/><text x="34.0631%" y="159.50"></text></g><g><title>lint_mod (640,157 samples, 0.33%)</title><rect x="33.8163%" y="133" width="0.3337%" height="15" fill="rgb(244,35,45)"/><text x="34.0663%" y="143.50"></text></g><g><title>privacy_access_levels (327,584 samples, 0.17%)</title><rect x="34.1499%" y="165" width="0.1707%" height="15" fill="rgb(251,115,12)"/><text x="34.3999%" y="175.50"></text></g><g><title>privacy_checking_modules (1,516,837 samples, 0.79%)</title><rect x="34.3207%" y="165" width="0.7906%" height="15" fill="rgb(240,54,50)"/><text x="34.5707%" y="175.50"></text></g><g><title>check_mod_privacy (1,513,217 samples, 0.79%)</title><rect x="34.3226%" y="149" width="0.7887%" height="15" fill="rgb(233,84,52)"/><text x="34.5726%" y="159.50"></text></g><g><title>misc_checking_3 (8,158,381 samples, 4.25%)</title><rect x="30.8658%" y="181" width="4.2523%" height="15" fill="rgb(207,117,47)"/><text x="31.1158%" y="191.50">misc_..</text></g><g><title>impl_parent (1,229,192 samples, 0.64%)</title><rect x="35.9747%" y="117" width="0.6407%" height="15" fill="rgb(249,43,39)"/><text x="36.2247%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (654,417 samples, 0.34%)</title><rect x="36.2743%" y="101" width="0.3411%" height="15" fill="rgb(209,38,44)"/><text x="36.5243%" y="111.50"></text></g><g><title>impl_trait_ref (3,090,872 samples, 1.61%)</title><rect x="36.6154%" y="117" width="1.6110%" height="15" fill="rgb(236,212,23)"/><text x="36.8654%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,750,234 samples, 1.43%)</title><rect x="36.7930%" y="101" width="1.4335%" height="15" fill="rgb(242,79,21)"/><text x="37.0430%" y="111.50"></text></g><g><title>trait_impls_of (386,343 samples, 0.20%)</title><rect x="38.2426%" y="117" width="0.2014%" height="15" fill="rgb(211,96,35)"/><text x="38.4926%" y="127.50"></text></g><g><title>coherent_trait (6,261,309 samples, 3.26%)</title><rect x="35.1809%" y="149" width="3.2635%" height="15" fill="rgb(253,215,40)"/><text x="35.4309%" y="159.50">coh..</text></g><g><title>specialization_graph_of (6,243,888 samples, 3.25%)</title><rect x="35.1900%" y="133" width="3.2544%" height="15" fill="rgb(211,81,21)"/><text x="35.4400%" y="143.50">spe..</text></g><g><title>coherence_checking (6,395,030 samples, 3.33%)</title><rect x="35.1729%" y="165" width="3.3332%" height="15" fill="rgb(208,190,38)"/><text x="35.4229%" y="175.50">coh..</text></g><g><title>associated_item (600,746 samples, 0.31%)</title><rect x="50.1502%" y="101" width="0.3131%" height="15" fill="rgb(235,213,38)"/><text x="50.4002%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (282,442 samples, 0.15%)</title><rect x="50.3161%" y="85" width="0.1472%" height="15" fill="rgb(237,122,38)"/><text x="50.5661%" y="95.50"></text></g><g><title>associated_items (792,779 samples, 0.41%)</title><rect x="50.0660%" y="117" width="0.4132%" height="15" fill="rgb(244,218,35)"/><text x="50.3160%" y="127.50"></text></g><g><title>adt_dtorck_constraint (370,635 samples, 0.19%)</title><rect x="50.6299%" y="101" width="0.1932%" height="15" fill="rgb(240,68,47)"/><text x="50.8799%" y="111.50"></text></g><g><title>dropck_outlives (549,547 samples, 0.29%)</title><rect x="50.5396%" y="117" width="0.2864%" height="15" fill="rgb(210,16,53)"/><text x="50.7896%" y="127.50"></text></g><g><title>predicates_of (205,650 samples, 0.11%)</title><rect x="51.4103%" y="101" width="0.1072%" height="15" fill="rgb(235,124,12)"/><text x="51.6603%" y="111.50"></text></g><g><title>evaluate_obligation (1,599,174 samples, 0.83%)</title><rect x="50.8260%" y="117" width="0.8335%" height="15" fill="rgb(224,169,11)"/><text x="51.0760%" y="127.50"></text></g><g><title>fn_sig (349,412 samples, 0.18%)</title><rect x="51.6725%" y="117" width="0.1821%" height="15" fill="rgb(250,166,2)"/><text x="51.9225%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (330,412 samples, 0.17%)</title><rect x="51.6824%" y="101" width="0.1722%" height="15" fill="rgb(242,216,29)"/><text x="51.9324%" y="111.50"></text></g><g><title>evaluate_obligation (275,435 samples, 0.14%)</title><rect x="52.1905%" y="101" width="0.1436%" height="15" fill="rgb(230,116,27)"/><text x="52.4405%" y="111.50"></text></g><g><title>method_autoderef_steps (537,826 samples, 0.28%)</title><rect x="52.0617%" y="117" width="0.2803%" height="15" fill="rgb(228,99,48)"/><text x="52.3117%" y="127.50"></text></g><g><title>predicates_of (410,252 samples, 0.21%)</title><rect x="52.4331%" y="117" width="0.2138%" height="15" fill="rgb(253,11,6)"/><text x="52.6831%" y="127.50"></text></g><g><title>predicates_defined_on (268,512 samples, 0.14%)</title><rect x="52.5069%" y="101" width="0.1400%" height="15" fill="rgb(247,143,39)"/><text x="52.7569%" y="111.50"></text></g><g><title>adt_def (447,695 samples, 0.23%)</title><rect x="62.9368%" y="85" width="0.2333%" height="15" fill="rgb(236,97,10)"/><text x="63.1868%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (445,975 samples, 0.23%)</title><rect x="62.9377%" y="69" width="0.2325%" height="15" fill="rgb(233,208,19)"/><text x="63.1877%" y="79.50"></text></g><g><title>item_attrs (426,405 samples, 0.22%)</title><rect x="62.9479%" y="53" width="0.2223%" height="15" fill="rgb(216,164,2)"/><text x="63.1979%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (424,215 samples, 0.22%)</title><rect x="62.9491%" y="37" width="0.2211%" height="15" fill="rgb(220,129,5)"/><text x="63.1991%" y="47.50"></text></g><g><title>adt_sized_constraint (483,305 samples, 0.25%)</title><rect x="62.9304%" y="101" width="0.2519%" height="15" fill="rgb(242,17,10)"/><text x="63.1804%" y="111.50"></text></g><g><title>associated_item (275,253 samples, 0.14%)</title><rect x="63.2454%" y="85" width="0.1435%" height="15" fill="rgb(242,107,0)"/><text x="63.4954%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (221,662 samples, 0.12%)</title><rect x="63.2733%" y="69" width="0.1155%" height="15" fill="rgb(251,28,31)"/><text x="63.5233%" y="79.50"></text></g><g><title>associated_items (418,093 samples, 0.22%)</title><rect x="63.1834%" y="101" width="0.2179%" height="15" fill="rgb(233,223,10)"/><text x="63.4334%" y="111.50"></text></g><g><title>dropck_outlives (277,863 samples, 0.14%)</title><rect x="63.4371%" y="101" width="0.1448%" height="15" fill="rgb(215,21,27)"/><text x="63.6871%" y="111.50"></text></g><g><title>trait_impls_of (544,826 samples, 0.28%)</title><rect x="64.5015%" y="85" width="0.2840%" height="15" fill="rgb(232,23,21)"/><text x="64.7515%" y="95.50"></text></g><g><title>evaluate_obligation (2,310,142 samples, 1.20%)</title><rect x="63.5819%" y="101" width="1.2041%" height="15" fill="rgb(244,5,23)"/><text x="63.8319%" y="111.50"></text></g><g><title>is_copy_raw (425,175 samples, 0.22%)</title><rect x="65.1483%" y="101" width="0.2216%" height="15" fill="rgb(226,81,46)"/><text x="65.3983%" y="111.50"></text></g><g><title>evaluate_obligation (374,493 samples, 0.20%)</title><rect x="65.1747%" y="85" width="0.1952%" height="15" fill="rgb(247,70,30)"/><text x="65.4247%" y="95.50"></text></g><g><title>evaluate_obligation (262,808 samples, 0.14%)</title><rect x="65.5669%" y="85" width="0.1370%" height="15" fill="rgb(212,68,19)"/><text x="65.8169%" y="95.50"></text></g><g><title>method_autoderef_steps (561,310 samples, 0.29%)</title><rect x="65.4233%" y="101" width="0.2926%" height="15" fill="rgb(240,187,13)"/><text x="65.6733%" y="111.50"></text></g><g><title>object_safety_violations (305,774 samples, 0.16%)</title><rect x="65.7159%" y="101" width="0.1594%" height="15" fill="rgb(223,113,26)"/><text x="65.9659%" y="111.50"></text></g><g><title>predicates_of (409,033 samples, 0.21%)</title><rect x="65.8876%" y="101" width="0.2132%" height="15" fill="rgb(206,192,2)"/><text x="66.1376%" y="111.50"></text></g><g><title>predicates_defined_on (278,891 samples, 0.15%)</title><rect x="65.9554%" y="85" width="0.1454%" height="15" fill="rgb(241,108,4)"/><text x="66.2054%" y="95.50"></text></g><g><title>trait_impls_of (205,543 samples, 0.11%)</title><rect x="66.1201%" y="101" width="0.1071%" height="15" fill="rgb(247,173,49)"/><text x="66.3701%" y="111.50"></text></g><g><title>typeck (26,089,029 samples, 13.60%)</title><rect x="52.7009%" y="117" width="13.5982%" height="15" fill="rgb(224,114,35)"/><text x="52.9509%" y="127.50">typeck</text></g><g><title>item_bodies_checking (53,357,542 samples, 27.81%)</title><rect x="38.5286%" y="165" width="27.8111%" height="15" fill="rgb(245,159,27)"/><text x="38.7786%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (53,354,892 samples, 27.81%)</title><rect x="38.5300%" y="149" width="27.8097%" height="15" fill="rgb(245,172,44)"/><text x="38.7800%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (53,226,519 samples, 27.74%)</title><rect x="38.5969%" y="133" width="27.7428%" height="15" fill="rgb(236,23,11)"/><text x="38.8469%" y="143.50">typeck</text></g><g><title>adt_destructor (399,574 samples, 0.21%)</title><rect x="67.1954%" y="133" width="0.2083%" height="15" fill="rgb(205,117,38)"/><text x="67.4454%" y="143.50"></text></g><g><title>coherent_trait (386,174 samples, 0.20%)</title><rect x="67.2024%" y="117" width="0.2013%" height="15" fill="rgb(237,72,25)"/><text x="67.4524%" y="127.50"></text></g><g><title>specialization_graph_of (384,304 samples, 0.20%)</title><rect x="67.2034%" y="101" width="0.2003%" height="15" fill="rgb(244,70,9)"/><text x="67.4534%" y="111.50"></text></g><g><title>layout_of (324,295 samples, 0.17%)</title><rect x="67.6057%" y="85" width="0.1690%" height="15" fill="rgb(217,125,39)"/><text x="67.8557%" y="95.50"></text></g><g><title>layout_of (388,925 samples, 0.20%)</title><rect x="67.5782%" y="101" width="0.2027%" height="15" fill="rgb(235,36,10)"/><text x="67.8282%" y="111.50"></text></g><g><title>layout_of (463,735 samples, 0.24%)</title><rect x="67.5494%" y="117" width="0.2417%" height="15" fill="rgb(251,123,47)"/><text x="67.7994%" y="127.50"></text></g><g><title>layout_of (535,747 samples, 0.28%)</title><rect x="67.5168%" y="133" width="0.2792%" height="15" fill="rgb(221,13,13)"/><text x="67.7668%" y="143.50"></text></g><g><title>dropck_outlives (236,142 samples, 0.12%)</title><rect x="69.3322%" y="117" width="0.1231%" height="15" fill="rgb(238,131,9)"/><text x="69.5822%" y="127.50"></text></g><g><title>typeck (3,372,837 samples, 1.76%)</title><rect x="67.8574%" y="133" width="1.7580%" height="15" fill="rgb(211,50,8)"/><text x="68.1074%" y="143.50"></text></g><g><title>item_types_checking (6,286,160 samples, 3.28%)</title><rect x="66.3397%" y="165" width="3.2765%" height="15" fill="rgb(245,182,24)"/><text x="66.5897%" y="175.50">ite..</text></g><g><title>check_mod_item_types (6,280,970 samples, 3.27%)</title><rect x="66.3424%" y="149" width="3.2738%" height="15" fill="rgb(242,14,37)"/><text x="66.5924%" y="159.50">che..</text></g><g><title>fn_sig (612,408 samples, 0.32%)</title><rect x="69.8395%" y="133" width="0.3192%" height="15" fill="rgb(246,228,12)"/><text x="70.0895%" y="143.50"></text></g><g><title>named_region_map (389,154 samples, 0.20%)</title><rect x="70.3314%" y="117" width="0.2028%" height="15" fill="rgb(213,55,15)"/><text x="70.5814%" y="127.50"></text></g><g><title>resolve_lifetimes (355,654 samples, 0.19%)</title><rect x="70.3488%" y="101" width="0.1854%" height="15" fill="rgb(209,9,3)"/><text x="70.5988%" y="111.50"></text></g><g><title>generics_of (744,121 samples, 0.39%)</title><rect x="70.1587%" y="133" width="0.3879%" height="15" fill="rgb(230,59,30)"/><text x="70.4087%" y="143.50"></text></g><g><title>predicates_of (777,356 samples, 0.41%)</title><rect x="70.5826%" y="133" width="0.4052%" height="15" fill="rgb(209,121,21)"/><text x="70.8326%" y="143.50"></text></g><g><title>predicates_defined_on (687,075 samples, 0.36%)</title><rect x="70.6296%" y="117" width="0.3581%" height="15" fill="rgb(220,109,13)"/><text x="70.8796%" y="127.50"></text></g><g><title>inferred_outlives_of (347,344 samples, 0.18%)</title><rect x="70.8067%" y="101" width="0.1810%" height="15" fill="rgb(232,18,1)"/><text x="71.0567%" y="111.50"></text></g><g><title>inferred_outlives_crate (314,344 samples, 0.16%)</title><rect x="70.8239%" y="85" width="0.1638%" height="15" fill="rgb(215,41,42)"/><text x="71.0739%" y="95.50"></text></g><g><title>type_collecting (2,856,192 samples, 1.49%)</title><rect x="69.6178%" y="165" width="1.4887%" height="15" fill="rgb(224,123,36)"/><text x="69.8678%" y="175.50"></text></g><g><title>collect_mod_item_types (2,848,862 samples, 1.48%)</title><rect x="69.6216%" y="149" width="1.4849%" height="15" fill="rgb(240,125,3)"/><text x="69.8716%" y="159.50"></text></g><g><title>type_of (196,762 samples, 0.10%)</title><rect x="71.0039%" y="133" width="0.1026%" height="15" fill="rgb(205,98,50)"/><text x="71.2539%" y="143.50"></text></g><g><title>evaluate_obligation (654,238 samples, 0.34%)</title><rect x="72.4256%" y="133" width="0.3410%" height="15" fill="rgb(205,185,37)"/><text x="72.6756%" y="143.50"></text></g><g><title>implied_outlives_bounds (256,311 samples, 0.13%)</title><rect x="72.7800%" y="133" width="0.1336%" height="15" fill="rgb(238,207,15)"/><text x="73.0300%" y="143.50"></text></g><g><title>object_safety_violations (255,472 samples, 0.13%)</title><rect x="72.9136%" y="133" width="0.1332%" height="15" fill="rgb(213,199,42)"/><text x="73.1636%" y="143.50"></text></g><g><title>param_env (351,143 samples, 0.18%)</title><rect x="73.0473%" y="133" width="0.1830%" height="15" fill="rgb(235,201,11)"/><text x="73.2973%" y="143.50"></text></g><g><title>region_scope_tree (478,628 samples, 0.25%)</title><rect x="73.2746%" y="133" width="0.2495%" height="15" fill="rgb(207,46,11)"/><text x="73.5246%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,475,738 samples, 2.33%)</title><rect x="71.2628%" y="149" width="2.3329%" height="15" fill="rgb(241,35,35)"/><text x="71.5128%" y="159.50">c..</text></g><g><title>adt_def (195,642 samples, 0.10%)</title><rect x="74.9630%" y="101" width="0.1020%" height="15" fill="rgb(243,32,47)"/><text x="75.2130%" y="111.50"></text></g><g><title>adt_def (262,771 samples, 0.14%)</title><rect x="75.0723%" y="85" width="0.1370%" height="15" fill="rgb(247,202,23)"/><text x="75.3223%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (260,311 samples, 0.14%)</title><rect x="75.0736%" y="69" width="0.1357%" height="15" fill="rgb(219,102,11)"/><text x="75.3236%" y="79.50"></text></g><g><title>adt_sized_constraint (377,522 samples, 0.20%)</title><rect x="75.0650%" y="101" width="0.1968%" height="15" fill="rgb(243,110,44)"/><text x="75.3150%" y="111.50"></text></g><g><title>adt_sized_constraint (621,014 samples, 0.32%)</title><rect x="74.9477%" y="117" width="0.3237%" height="15" fill="rgb(222,74,54)"/><text x="75.1977%" y="127.50"></text></g><g><title>evaluate_obligation (1,460,643 samples, 0.76%)</title><rect x="74.5777%" y="133" width="0.7613%" height="15" fill="rgb(216,99,12)"/><text x="74.8277%" y="143.50"></text></g><g><title>param_env (426,214 samples, 0.22%)</title><rect x="75.4195%" y="133" width="0.2222%" height="15" fill="rgb(226,22,26)"/><text x="75.6695%" y="143.50"></text></g><g><title>check_item_well_formed (4,241,708 samples, 2.21%)</title><rect x="73.5956%" y="149" width="2.2109%" height="15" fill="rgb(217,163,10)"/><text x="73.8456%" y="159.50">c..</text></g><g><title>analysis (145,145,681 samples, 75.65%)</title><rect x="0.3568%" y="197" width="75.6531%" height="15" fill="rgb(213,25,53)"/><text x="0.6068%" y="207.50">analysis</text></g><g><title>type_check_crate (78,453,532 samples, 40.89%)</title><rect x="35.1182%" y="181" width="40.8917%" height="15" fill="rgb(252,105,26)"/><text x="35.3682%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,396,555 samples, 4.90%)</title><rect x="71.1121%" y="165" width="4.8977%" height="15" fill="rgb(220,39,43)"/><text x="71.3621%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (390,115 samples, 0.20%)</title><rect x="75.8065%" y="149" width="0.2033%" height="15" fill="rgb(229,68,48)"/><text x="76.0565%" y="159.50"></text></g><g><title>codegen_crate (385,064 samples, 0.20%)</title><rect x="76.0151%" y="197" width="0.2007%" height="15" fill="rgb(252,8,32)"/><text x="76.2651%" y="207.50"></text></g><g><title>AST_validation (238,283 samples, 0.12%)</title><rect x="76.3111%" y="181" width="0.1242%" height="15" fill="rgb(223,20,43)"/><text x="76.5611%" y="191.50"></text></g><g><title>metadata_load_macro (390,904 samples, 0.20%)</title><rect x="88.1266%" y="149" width="0.2037%" height="15" fill="rgb(229,81,49)"/><text x="88.3766%" y="159.50"></text></g><g><title>metadata_register_crate (2,857,010 samples, 1.49%)</title><rect x="88.3304%" y="149" width="1.4891%" height="15" fill="rgb(236,28,36)"/><text x="88.5804%" y="159.50"></text></g><g><title>metadata_register_crate (991,281 samples, 0.52%)</title><rect x="89.3028%" y="133" width="0.5167%" height="15" fill="rgb(249,185,26)"/><text x="89.5528%" y="143.50"></text></g><g><title>macro_expand_crate (25,785,457 samples, 13.44%)</title><rect x="76.5152%" y="181" width="13.4399%" height="15" fill="rgb(249,174,33)"/><text x="76.7652%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (25,774,097 samples, 13.43%)</title><rect x="76.5211%" y="165" width="13.4340%" height="15" fill="rgb(233,201,37)"/><text x="76.7711%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (260,242 samples, 0.14%)</title><rect x="89.8195%" y="149" width="0.1356%" height="15" fill="rgb(221,78,26)"/><text x="90.0695%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (321,803 samples, 0.17%)</title><rect x="89.9567%" y="181" width="0.1677%" height="15" fill="rgb(250,127,30)"/><text x="90.2067%" y="191.50"></text></g><g><title>late_resolve_crate (2,275,555 samples, 1.19%)</title><rect x="90.2001%" y="165" width="1.1861%" height="15" fill="rgb(230,49,44)"/><text x="90.4501%" y="175.50"></text></g><g><title>configure_and_expand (29,252,265 samples, 15.25%)</title><rect x="76.2158%" y="197" width="15.2469%" height="15" fill="rgb(229,67,23)"/><text x="76.4658%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,567,648 samples, 1.34%)</title><rect x="90.1244%" y="181" width="1.3383%" height="15" fill="rgb(249,83,47)"/><text x="90.3744%" y="191.50"></text></g><g><title>drop_ast (276,213 samples, 0.14%)</title><rect x="91.4627%" y="197" width="0.1440%" height="15" fill="rgb(215,43,3)"/><text x="91.7127%" y="207.50"></text></g><g><title>early_lint_checks (503,206 samples, 0.26%)</title><rect x="91.6144%" y="197" width="0.2623%" height="15" fill="rgb(238,154,13)"/><text x="91.8644%" y="207.50"></text></g><g><title>free_global_ctxt (4,039,404 samples, 2.11%)</title><rect x="91.8767%" y="197" width="2.1054%" height="15" fill="rgb(219,56,2)"/><text x="92.1267%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,534,347 samples, 0.80%)</title><rect x="93.9821%" y="197" width="0.7997%" height="15" fill="rgb(233,0,4)"/><text x="94.2321%" y="207.50"></text></g><g><title>hir_lowering (3,930,904 samples, 2.05%)</title><rect x="94.7818%" y="197" width="2.0489%" height="15" fill="rgb(235,30,7)"/><text x="95.0318%" y="207.50">h..</text></g><g><title>parse_crate (4,423,899 samples, 2.31%)</title><rect x="96.8594%" y="197" width="2.3058%" height="15" fill="rgb(250,79,13)"/><text x="97.1094%" y="207.50">p..</text></g><g><title>prepare_outputs (195,142 samples, 0.10%)</title><rect x="99.1695%" y="197" width="0.1017%" height="15" fill="rgb(211,146,34)"/><text x="99.4195%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (944,630 samples, 0.49%)</title><rect x="99.2712%" y="197" width="0.4924%" height="15" fill="rgb(228,22,38)"/><text x="99.5212%" y="207.50"></text></g><g><title>all (191,857,010 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (191,857,010 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (384,415 samples, 0.20%)</title><rect x="99.7996%" y="197" width="0.2004%" height="15" fill="rgb(215,215,53)"/><text x="100.0496%" y="207.50"></text></g></svg></svg>