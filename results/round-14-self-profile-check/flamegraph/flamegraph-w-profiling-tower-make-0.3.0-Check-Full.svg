<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (25,470 samples, 0.13%)</title><rect x="6.5830%" y="149" width="0.1332%" height="15" fill="rgb(227,0,7)"/><text x="6.8330%" y="159.50"></text></g><g><title>needs_drop_raw (175,242 samples, 0.92%)</title><rect x="7.4810%" y="117" width="0.9165%" height="15" fill="rgb(217,0,24)"/><text x="7.7310%" y="127.50"></text></g><g><title>is_copy_raw (170,911 samples, 0.89%)</title><rect x="7.5036%" y="101" width="0.8939%" height="15" fill="rgb(221,193,54)"/><text x="7.7536%" y="111.50"></text></g><g><title>evaluate_obligation (165,491 samples, 0.87%)</title><rect x="7.5320%" y="85" width="0.8655%" height="15" fill="rgb(248,212,6)"/><text x="7.7820%" y="95.50"></text></g><g><title>trait_impls_of (151,901 samples, 0.79%)</title><rect x="7.6031%" y="69" width="0.7945%" height="15" fill="rgb(208,68,35)"/><text x="7.8531%" y="79.50"></text></g><g><title>implementations_of_trait (32,740 samples, 0.17%)</title><rect x="8.2263%" y="53" width="0.1712%" height="15" fill="rgb(232,128,0)"/><text x="8.4763%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (28,400 samples, 0.15%)</title><rect x="8.2490%" y="37" width="0.1485%" height="15" fill="rgb(207,160,47)"/><text x="8.4990%" y="47.50"></text></g><g><title>resolve_instance (19,800 samples, 0.10%)</title><rect x="8.3975%" y="117" width="0.1036%" height="15" fill="rgb(228,23,34)"/><text x="8.6475%" y="127.50"></text></g><g><title>mir_const (465,755 samples, 2.44%)</title><rect x="6.1695%" y="165" width="2.4359%" height="15" fill="rgb(218,30,26)"/><text x="6.4195%" y="175.50">mi..</text></g><g><title>unsafety_check_result (361,225 samples, 1.89%)</title><rect x="6.7162%" y="149" width="1.8892%" height="15" fill="rgb(220,122,19)"/><text x="6.9662%" y="159.50">u..</text></g><g><title>mir_built (308,684 samples, 1.61%)</title><rect x="6.9910%" y="133" width="1.6144%" height="15" fill="rgb(250,228,42)"/><text x="7.2410%" y="143.50"></text></g><g><title>mir_promoted (550,776 samples, 2.88%)</title><rect x="5.7533%" y="181" width="2.8806%" height="15" fill="rgb(240,193,28)"/><text x="6.0033%" y="191.50">mi..</text></g><g><title>type_op_normalize_fn_sig (20,020 samples, 0.10%)</title><rect x="8.6339%" y="181" width="0.1047%" height="15" fill="rgb(216,20,37)"/><text x="8.8839%" y="191.50"></text></g><g><title>type_op_normalize_ty (102,271 samples, 0.53%)</title><rect x="8.7386%" y="181" width="0.5349%" height="15" fill="rgb(206,188,39)"/><text x="8.9886%" y="191.50"></text></g><g><title>normalize_projection_ty (85,190 samples, 0.45%)</title><rect x="8.8279%" y="165" width="0.4455%" height="15" fill="rgb(217,207,13)"/><text x="9.0779%" y="175.50"></text></g><g><title>type_op_prove_predicate (65,622 samples, 0.34%)</title><rect x="9.2735%" y="181" width="0.3432%" height="15" fill="rgb(231,73,38)"/><text x="9.5235%" y="191.50"></text></g><g><title>MIR_borrow_checking (1,320,924 samples, 6.91%)</title><rect x="2.7396%" y="213" width="6.9085%" height="15" fill="rgb(225,20,46)"/><text x="2.9896%" y="223.50">MIR_borro..</text></g><g><title>mir_borrowck (1,316,484 samples, 6.89%)</title><rect x="2.7628%" y="197" width="6.8853%" height="15" fill="rgb(210,31,41)"/><text x="3.0128%" y="207.50">mir_borro..</text></g><g><title>hir_owner (20,250 samples, 0.11%)</title><rect x="9.9687%" y="197" width="0.1059%" height="15" fill="rgb(221,200,47)"/><text x="10.2187%" y="207.50"></text></g><g><title>hir_module_items (78,732 samples, 0.41%)</title><rect x="9.6648%" y="213" width="0.4118%" height="15" fill="rgb(226,26,5)"/><text x="9.9148%" y="223.50"></text></g><g><title>get_lang_items (39,910 samples, 0.21%)</title><rect x="10.5426%" y="165" width="0.2087%" height="15" fill="rgb(249,33,26)"/><text x="10.7926%" y="175.50"></text></g><g><title>should_inherit_track_caller (24,430 samples, 0.13%)</title><rect x="10.7514%" y="165" width="0.1278%" height="15" fill="rgb(235,183,28)"/><text x="11.0014%" y="175.50"></text></g><g><title>codegen_fn_attrs (108,531 samples, 0.57%)</title><rect x="10.3961%" y="181" width="0.5676%" height="15" fill="rgb(221,5,38)"/><text x="10.6461%" y="191.50"></text></g><g><title>check_mod_attrs (151,892 samples, 0.79%)</title><rect x="10.1697%" y="197" width="0.7944%" height="15" fill="rgb(247,18,42)"/><text x="10.4197%" y="207.50"></text></g><g><title>check_mod_const_bodies (22,690 samples, 0.12%)</title><rect x="10.9641%" y="197" width="0.1187%" height="15" fill="rgb(241,131,45)"/><text x="11.2141%" y="207.50"></text></g><g><title>lookup_deprecation_entry (53,401 samples, 0.28%)</title><rect x="11.4994%" y="181" width="0.2793%" height="15" fill="rgb(249,31,29)"/><text x="11.7494%" y="191.50"></text></g><g><title>stability_index (29,211 samples, 0.15%)</title><rect x="11.6259%" y="165" width="0.1528%" height="15" fill="rgb(225,111,53)"/><text x="11.8759%" y="175.50"></text></g><g><title>lookup_stability (27,031 samples, 0.14%)</title><rect x="11.7787%" y="181" width="0.1414%" height="15" fill="rgb(238,160,17)"/><text x="12.0287%" y="191.50"></text></g><g><title>metadata_decode_entry_lookup_stability (24,641 samples, 0.13%)</title><rect x="11.7912%" y="165" width="0.1289%" height="15" fill="rgb(214,148,48)"/><text x="12.0412%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (151,492 samples, 0.79%)</title><rect x="11.1553%" y="197" width="0.7923%" height="15" fill="rgb(232,36,49)"/><text x="11.4053%" y="207.50"></text></g><g><title>misc_checking_1 (379,714 samples, 1.99%)</title><rect x="10.0785%" y="213" width="1.9859%" height="15" fill="rgb(209,103,24)"/><text x="10.3285%" y="223.50">m..</text></g><g><title>liveness_and_intrinsic_checking (50,591 samples, 0.26%)</title><rect x="12.0707%" y="197" width="0.2646%" height="15" fill="rgb(229,88,8)"/><text x="12.3207%" y="207.50"></text></g><g><title>check_mod_liveness (39,101 samples, 0.20%)</title><rect x="12.1308%" y="181" width="0.2045%" height="15" fill="rgb(213,181,19)"/><text x="12.3808%" y="191.50"></text></g><g><title>misc_checking_2 (114,922 samples, 0.60%)</title><rect x="12.0644%" y="213" width="0.6010%" height="15" fill="rgb(254,191,54)"/><text x="12.3144%" y="223.50"></text></g><g><title>match_checking (63,131 samples, 0.33%)</title><rect x="12.3353%" y="197" width="0.3302%" height="15" fill="rgb(241,83,37)"/><text x="12.5853%" y="207.50"></text></g><g><title>check_match (60,831 samples, 0.32%)</title><rect x="12.3473%" y="181" width="0.3181%" height="15" fill="rgb(233,36,39)"/><text x="12.5973%" y="191.50"></text></g><g><title>check_private_in_public (40,740 samples, 0.21%)</title><rect x="12.7007%" y="197" width="0.2131%" height="15" fill="rgb(226,3,54)"/><text x="12.9507%" y="207.50"></text></g><g><title>death_checking (99,101 samples, 0.52%)</title><rect x="12.9138%" y="197" width="0.5183%" height="15" fill="rgb(245,192,40)"/><text x="13.1638%" y="207.50"></text></g><g><title>lint_levels (36,931 samples, 0.19%)</title><rect x="13.2389%" y="181" width="0.1932%" height="15" fill="rgb(238,167,29)"/><text x="13.4889%" y="191.50"></text></g><g><title>explicit_predicates_of (19,490 samples, 0.10%)</title><rect x="13.9023%" y="117" width="0.1019%" height="15" fill="rgb(232,182,51)"/><text x="14.1523%" y="127.50"></text></g><g><title>crate_lints (109,421 samples, 0.57%)</title><rect x="13.4383%" y="181" width="0.5723%" height="15" fill="rgb(231,60,39)"/><text x="13.6883%" y="191.50"></text></g><g><title>param_env (65,520 samples, 0.34%)</title><rect x="13.6679%" y="165" width="0.3427%" height="15" fill="rgb(208,69,12)"/><text x="13.9179%" y="175.50"></text></g><g><title>predicates_of (31,130 samples, 0.16%)</title><rect x="13.8478%" y="149" width="0.1628%" height="15" fill="rgb(235,93,37)"/><text x="14.0978%" y="159.50"></text></g><g><title>predicates_defined_on (26,830 samples, 0.14%)</title><rect x="13.8703%" y="133" width="0.1403%" height="15" fill="rgb(213,116,39)"/><text x="14.1203%" y="143.50"></text></g><g><title>lint_checking (138,011 samples, 0.72%)</title><rect x="13.4321%" y="197" width="0.7218%" height="15" fill="rgb(222,207,29)"/><text x="13.6821%" y="207.50"></text></g><g><title>module_lints (27,400 samples, 0.14%)</title><rect x="14.0106%" y="181" width="0.1433%" height="15" fill="rgb(206,96,30)"/><text x="14.2606%" y="191.50"></text></g><g><title>lint_mod (25,390 samples, 0.13%)</title><rect x="14.0211%" y="165" width="0.1328%" height="15" fill="rgb(218,138,4)"/><text x="14.2711%" y="175.50"></text></g><g><title>privacy_access_levels (55,741 samples, 0.29%)</title><rect x="14.1539%" y="197" width="0.2915%" height="15" fill="rgb(250,191,14)"/><text x="14.4039%" y="207.50"></text></g><g><title>privacy_checking_modules (98,491 samples, 0.52%)</title><rect x="14.4454%" y="197" width="0.5151%" height="15" fill="rgb(239,60,40)"/><text x="14.6954%" y="207.50"></text></g><g><title>check_mod_privacy (96,861 samples, 0.51%)</title><rect x="14.4539%" y="181" width="0.5066%" height="15" fill="rgb(206,27,48)"/><text x="14.7039%" y="191.50"></text></g><g><title>misc_checking_3 (454,785 samples, 2.38%)</title><rect x="12.6655%" y="213" width="2.3786%" height="15" fill="rgb(225,35,8)"/><text x="12.9155%" y="223.50">mi..</text></g><g><title>coherent_trait (52,071 samples, 0.27%)</title><rect x="15.1818%" y="181" width="0.2723%" height="15" fill="rgb(250,213,24)"/><text x="15.4318%" y="191.50"></text></g><g><title>specialization_graph_of (42,801 samples, 0.22%)</title><rect x="15.2303%" y="165" width="0.2239%" height="15" fill="rgb(247,123,22)"/><text x="15.4803%" y="175.50"></text></g><g><title>coherence_checking (87,731 samples, 0.46%)</title><rect x="15.1275%" y="197" width="0.4588%" height="15" fill="rgb(231,138,38)"/><text x="15.3775%" y="207.50"></text></g><g><title>impl_parent (105,630 samples, 0.55%)</title><rect x="19.2469%" y="53" width="0.5525%" height="15" fill="rgb(231,145,46)"/><text x="19.4969%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (86,080 samples, 0.45%)</title><rect x="19.3492%" y="37" width="0.4502%" height="15" fill="rgb(251,118,11)"/><text x="19.5992%" y="47.50"></text></g><g><title>impl_trait_ref (444,465 samples, 2.32%)</title><rect x="19.7994%" y="53" width="2.3246%" height="15" fill="rgb(217,147,25)"/><text x="20.0494%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (422,545 samples, 2.21%)</title><rect x="19.9140%" y="37" width="2.2099%" height="15" fill="rgb(247,81,37)"/><text x="20.1640%" y="47.50">m..</text></g><g><title>adt_destructor (685,698 samples, 3.59%)</title><rect x="18.7172%" y="117" width="3.5862%" height="15" fill="rgb(209,12,38)"/><text x="18.9672%" y="127.50">adt_..</text></g><g><title>metadata_decode_entry_adt_destructor (684,828 samples, 3.58%)</title><rect x="18.7217%" y="101" width="3.5817%" height="15" fill="rgb(227,1,9)"/><text x="18.9717%" y="111.50">meta..</text></g><g><title>coherent_trait (679,738 samples, 3.56%)</title><rect x="18.7483%" y="85" width="3.5551%" height="15" fill="rgb(248,47,43)"/><text x="18.9983%" y="95.50">cohe..</text></g><g><title>specialization_graph_of (678,188 samples, 3.55%)</title><rect x="18.7564%" y="69" width="3.5470%" height="15" fill="rgb(221,10,30)"/><text x="19.0064%" y="79.50">spec..</text></g><g><title>trait_impls_of (34,311 samples, 0.18%)</title><rect x="22.1240%" y="53" width="0.1794%" height="15" fill="rgb(210,229,1)"/><text x="22.3740%" y="63.50"></text></g><g><title>adt_dtorck_constraint (695,868 samples, 3.64%)</title><rect x="18.6744%" y="133" width="3.6394%" height="15" fill="rgb(222,148,37)"/><text x="18.9244%" y="143.50">adt_..</text></g><g><title>dropck_outlives (734,708 samples, 3.84%)</title><rect x="18.5471%" y="149" width="3.8426%" height="15" fill="rgb(234,67,33)"/><text x="18.7971%" y="159.50">drop..</text></g><g><title>item_bodies_checking (1,403,386 samples, 7.34%)</title><rect x="15.6698%" y="197" width="7.3398%" height="15" fill="rgb(247,98,35)"/><text x="15.9198%" y="207.50">item_bodie..</text></g><g><title>typeck_item_bodies (1,401,656 samples, 7.33%)</title><rect x="15.6789%" y="181" width="7.3307%" height="15" fill="rgb(247,138,52)"/><text x="15.9289%" y="191.50">typeck_ite..</text></g><g><title>typeck (1,397,496 samples, 7.31%)</title><rect x="15.7006%" y="165" width="7.3090%" height="15" fill="rgb(213,79,30)"/><text x="15.9506%" y="175.50">typeck</text></g><g><title>item_types_checking (521,755 samples, 2.73%)</title><rect x="23.0096%" y="197" width="2.7288%" height="15" fill="rgb(246,177,23)"/><text x="23.2596%" y="207.50">it..</text></g><g><title>check_mod_item_types (519,395 samples, 2.72%)</title><rect x="23.0220%" y="181" width="2.7165%" height="15" fill="rgb(230,62,27)"/><text x="23.2720%" y="191.50">ch..</text></g><g><title>fn_sig (68,472 samples, 0.36%)</title><rect x="26.1797%" y="165" width="0.3581%" height="15" fill="rgb(216,154,8)"/><text x="26.4297%" y="175.50"></text></g><g><title>generics_of (49,320 samples, 0.26%)</title><rect x="26.5379%" y="165" width="0.2579%" height="15" fill="rgb(244,35,45)"/><text x="26.7879%" y="175.50"></text></g><g><title>late_bound_vars_map (37,531 samples, 0.20%)</title><rect x="27.4949%" y="133" width="0.1963%" height="15" fill="rgb(251,115,12)"/><text x="27.7449%" y="143.50"></text></g><g><title>resolve_lifetimes (34,201 samples, 0.18%)</title><rect x="27.5123%" y="117" width="0.1789%" height="15" fill="rgb(240,54,50)"/><text x="27.7623%" y="127.50"></text></g><g><title>type_of (21,780 samples, 0.11%)</title><rect x="27.7674%" y="133" width="0.1139%" height="15" fill="rgb(233,84,52)"/><text x="28.0174%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (20,970 samples, 0.11%)</title><rect x="27.7716%" y="117" width="0.1097%" height="15" fill="rgb(207,117,47)"/><text x="28.0216%" y="127.50"></text></g><g><title>explicit_item_bounds (157,503 samples, 0.82%)</title><rect x="27.1050%" y="149" width="0.8237%" height="15" fill="rgb(249,43,39)"/><text x="27.3550%" y="159.50"></text></g><g><title>item_bounds (224,973 samples, 1.18%)</title><rect x="26.8145%" y="165" width="1.1766%" height="15" fill="rgb(209,38,44)"/><text x="27.0645%" y="175.50"></text></g><g><title>late_bound_vars_map (70,680 samples, 0.37%)</title><rect x="28.5045%" y="117" width="0.3697%" height="15" fill="rgb(236,212,23)"/><text x="28.7545%" y="127.50"></text></g><g><title>resolve_lifetimes (68,310 samples, 0.36%)</title><rect x="28.5169%" y="101" width="0.3573%" height="15" fill="rgb(242,79,21)"/><text x="28.7669%" y="111.50"></text></g><g><title>explicit_predicates_of (172,241 samples, 0.90%)</title><rect x="28.1238%" y="133" width="0.9008%" height="15" fill="rgb(211,96,35)"/><text x="28.3738%" y="143.50"></text></g><g><title>trait_explicit_predicates_and_bounds (24,360 samples, 0.13%)</title><rect x="28.8973%" y="117" width="0.1274%" height="15" fill="rgb(253,215,40)"/><text x="29.1473%" y="127.50"></text></g><g><title>predicates_of (204,102 samples, 1.07%)</title><rect x="27.9912%" y="165" width="1.0675%" height="15" fill="rgb(211,81,21)"/><text x="28.2412%" y="175.50"></text></g><g><title>predicates_defined_on (194,532 samples, 1.02%)</title><rect x="28.0412%" y="149" width="1.0174%" height="15" fill="rgb(208,190,38)"/><text x="28.2912%" y="159.50"></text></g><g><title>late_bound_vars_map (23,781 samples, 0.12%)</title><rect x="29.4243%" y="133" width="0.1244%" height="15" fill="rgb(235,213,38)"/><text x="29.6743%" y="143.50"></text></g><g><title>resolve_lifetimes_trait_definition (20,811 samples, 0.11%)</title><rect x="29.4398%" y="117" width="0.1088%" height="15" fill="rgb(237,122,38)"/><text x="29.6898%" y="127.50"></text></g><g><title>super_predicates_of (97,841 samples, 0.51%)</title><rect x="29.0586%" y="165" width="0.5117%" height="15" fill="rgb(244,218,35)"/><text x="29.3086%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (91,071 samples, 0.48%)</title><rect x="29.0940%" y="149" width="0.4763%" height="15" fill="rgb(240,68,47)"/><text x="29.3440%" y="159.50"></text></g><g><title>type_collecting (772,889 samples, 4.04%)</title><rect x="25.7736%" y="197" width="4.0423%" height="15" fill="rgb(210,16,53)"/><text x="26.0236%" y="207.50">type..</text></g><g><title>collect_mod_item_types (760,698 samples, 3.98%)</title><rect x="25.8374%" y="181" width="3.9785%" height="15" fill="rgb(235,124,12)"/><text x="26.0874%" y="191.50">coll..</text></g><g><title>type_of (41,650 samples, 0.22%)</title><rect x="29.5981%" y="165" width="0.2178%" height="15" fill="rgb(224,169,11)"/><text x="29.8481%" y="175.50"></text></g><g><title>type_param_predicates (20,730 samples, 0.11%)</title><rect x="29.7075%" y="149" width="0.1084%" height="15" fill="rgb(250,166,2)"/><text x="29.9575%" y="159.50"></text></g><g><title>evaluate_obligation (28,961 samples, 0.15%)</title><rect x="31.3653%" y="165" width="0.1515%" height="15" fill="rgb(242,216,29)"/><text x="31.6153%" y="175.50"></text></g><g><title>implied_outlives_bounds (26,570 samples, 0.14%)</title><rect x="31.5379%" y="165" width="0.1390%" height="15" fill="rgb(230,116,27)"/><text x="31.7879%" y="175.50"></text></g><g><title>param_env (47,680 samples, 0.25%)</title><rect x="31.7129%" y="165" width="0.2494%" height="15" fill="rgb(228,99,48)"/><text x="31.9629%" y="175.50"></text></g><g><title>check_impl_item_well_formed (399,984 samples, 2.09%)</title><rect x="29.9702%" y="181" width="2.0919%" height="15" fill="rgb(253,11,6)"/><text x="30.2202%" y="191.50">c..</text></g><g><title>param_env (107,491 samples, 0.56%)</title><rect x="34.2911%" y="165" width="0.5622%" height="15" fill="rgb(247,143,39)"/><text x="34.5411%" y="175.50"></text></g><g><title>check_item_well_formed (573,057 samples, 3.00%)</title><rect x="32.0621%" y="181" width="2.9971%" height="15" fill="rgb(236,97,10)"/><text x="32.3121%" y="191.50">che..</text></g><g><title>trait_impls_of (19,450 samples, 0.10%)</title><rect x="34.9575%" y="165" width="0.1017%" height="15" fill="rgb(233,208,19)"/><text x="35.2075%" y="175.50"></text></g><g><title>adt_def (21,020 samples, 0.11%)</title><rect x="37.1451%" y="149" width="0.1099%" height="15" fill="rgb(216,164,2)"/><text x="37.3951%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (20,350 samples, 0.11%)</title><rect x="37.1486%" y="133" width="0.1064%" height="15" fill="rgb(220,129,5)"/><text x="37.3986%" y="143.50"></text></g><g><title>adt_sized_constraint (27,910 samples, 0.15%)</title><rect x="37.1139%" y="165" width="0.1460%" height="15" fill="rgb(242,17,10)"/><text x="37.3639%" y="175.50"></text></g><g><title>evaluate_obligation (126,462 samples, 0.66%)</title><rect x="37.2625%" y="165" width="0.6614%" height="15" fill="rgb(242,107,0)"/><text x="37.5125%" y="175.50"></text></g><g><title>implied_outlives_bounds (65,172 samples, 0.34%)</title><rect x="37.9239%" y="165" width="0.3409%" height="15" fill="rgb(251,28,31)"/><text x="38.1739%" y="175.50"></text></g><g><title>param_env (50,871 samples, 0.27%)</title><rect x="38.2647%" y="165" width="0.2661%" height="15" fill="rgb(233,223,10)"/><text x="38.5147%" y="175.50"></text></g><g><title>explicit_predicates_of (19,201 samples, 0.10%)</title><rect x="38.5854%" y="133" width="0.1004%" height="15" fill="rgb(215,21,27)"/><text x="38.8354%" y="143.50"></text></g><g><title>predicates_of (42,001 samples, 0.22%)</title><rect x="38.5308%" y="165" width="0.2197%" height="15" fill="rgb(232,23,21)"/><text x="38.7808%" y="175.50"></text></g><g><title>predicates_defined_on (36,181 samples, 0.19%)</title><rect x="38.5612%" y="149" width="0.1892%" height="15" fill="rgb(244,5,23)"/><text x="38.8112%" y="159.50"></text></g><g><title>analysis (7,001,858 samples, 36.62%)</title><rect x="2.2613%" y="229" width="36.6201%" height="15" fill="rgb(226,81,46)"/><text x="2.5113%" y="239.50">analysis</text></g><g><title>type_check_crate (4,557,771 samples, 23.84%)</title><rect x="15.0440%" y="213" width="23.8374%" height="15" fill="rgb(247,70,30)"/><text x="15.2940%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,732,710 samples, 9.06%)</title><rect x="29.8192%" y="197" width="9.0622%" height="15" fill="rgb(212,68,19)"/><text x="30.0692%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (730,809 samples, 3.82%)</title><rect x="35.0592%" y="181" width="3.8222%" height="15" fill="rgb(240,187,13)"/><text x="35.3092%" y="191.50">chec..</text></g><g><title>trait_impls_of (21,510 samples, 0.11%)</title><rect x="38.7689%" y="165" width="0.1125%" height="15" fill="rgb(223,113,26)"/><text x="39.0189%" y="175.50"></text></g><g><title>native_libraries (20,121 samples, 0.11%)</title><rect x="40.6223%" y="213" width="0.1052%" height="15" fill="rgb(206,192,2)"/><text x="40.8723%" y="223.50"></text></g><g><title>codegen_crate (359,214 samples, 1.88%)</title><rect x="38.9251%" y="229" width="1.8787%" height="15" fill="rgb(241,108,4)"/><text x="39.1751%" y="239.50">c..</text></g><g><title>AST_validation (55,461 samples, 0.29%)</title><rect x="41.7529%" y="213" width="0.2901%" height="15" fill="rgb(247,173,49)"/><text x="42.0029%" y="223.50"></text></g><g><title>crate_injection (66,641 samples, 0.35%)</title><rect x="42.1397%" y="213" width="0.3485%" height="15" fill="rgb(224,114,35)"/><text x="42.3897%" y="223.50"></text></g><g><title>metadata_load_macro (31,330 samples, 0.16%)</title><rect x="68.4992%" y="181" width="0.1639%" height="15" fill="rgb(245,159,27)"/><text x="68.7492%" y="191.50"></text></g><g><title>metadata_register_crate (1,919,911 samples, 10.04%)</title><rect x="68.6631%" y="181" width="10.0412%" height="15" fill="rgb(245,172,44)"/><text x="68.9131%" y="191.50">metadata_regist..</text></g><g><title>metadata_register_crate (672,067 samples, 3.51%)</title><rect x="75.1894%" y="165" width="3.5149%" height="15" fill="rgb(236,23,11)"/><text x="75.4394%" y="175.50">met..</text></g><g><title>metadata_register_crate (53,941 samples, 0.28%)</title><rect x="78.4222%" y="149" width="0.2821%" height="15" fill="rgb(205,117,38)"/><text x="78.6722%" y="159.50"></text></g><g><title>macro_expand_crate (6,953,917 samples, 36.37%)</title><rect x="42.4882%" y="213" width="36.3694%" height="15" fill="rgb(237,72,25)"/><text x="42.7382%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (6,938,107 samples, 36.29%)</title><rect x="42.5709%" y="197" width="36.2867%" height="15" fill="rgb(244,70,9)"/><text x="42.8209%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (29,310 samples, 0.15%)</title><rect x="78.7043%" y="181" width="0.1533%" height="15" fill="rgb(217,125,39)"/><text x="78.9543%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (80,861 samples, 0.42%)</title><rect x="78.8743%" y="213" width="0.4229%" height="15" fill="rgb(235,36,10)"/><text x="79.1243%" y="223.50"></text></g><g><title>finalize_imports (154,522 samples, 0.81%)</title><rect x="79.3173%" y="197" width="0.8082%" height="15" fill="rgb(251,123,47)"/><text x="79.5673%" y="207.50"></text></g><g><title>late_resolve_crate (105,561 samples, 0.55%)</title><rect x="80.1436%" y="197" width="0.5521%" height="15" fill="rgb(221,13,13)"/><text x="80.3936%" y="207.50"></text></g><g><title>configure_and_expand (7,658,164 samples, 40.05%)</title><rect x="40.8038%" y="229" width="40.0526%" height="15" fill="rgb(238,131,9)"/><text x="41.0538%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (298,143 samples, 1.56%)</title><rect x="79.2972%" y="213" width="1.5593%" height="15" fill="rgb(211,50,8)"/><text x="79.5472%" y="223.50"></text></g><g><title>drop_ast (21,941 samples, 0.11%)</title><rect x="80.8565%" y="229" width="0.1148%" height="15" fill="rgb(245,182,24)"/><text x="81.1065%" y="239.50"></text></g><g><title>early_lint_checks (70,110 samples, 0.37%)</title><rect x="81.0463%" y="229" width="0.3667%" height="15" fill="rgb(242,14,37)"/><text x="81.2963%" y="239.50"></text></g><g><title>free_global_ctxt (1,531,127 samples, 8.01%)</title><rect x="81.4129%" y="229" width="8.0079%" height="15" fill="rgb(246,228,12)"/><text x="81.6629%" y="239.50">free_global..</text></g><g><title>crate_hash (65,981 samples, 0.35%)</title><rect x="90.8325%" y="213" width="0.3451%" height="15" fill="rgb(213,55,15)"/><text x="91.0825%" y="223.50"></text></g><g><title>mir_keys (21,140 samples, 0.11%)</title><rect x="91.4076%" y="213" width="0.1106%" height="15" fill="rgb(209,9,3)"/><text x="91.6576%" y="223.50"></text></g><g><title>variances_of (22,130 samples, 0.12%)</title><rect x="91.5736%" y="213" width="0.1157%" height="15" fill="rgb(230,59,30)"/><text x="91.8236%" y="223.50"></text></g><g><title>crate_variances (19,330 samples, 0.10%)</title><rect x="91.5882%" y="197" width="0.1011%" height="15" fill="rgb(209,121,21)"/><text x="91.8382%" y="207.50"></text></g><g><title>generate_crate_metadata (433,875 samples, 2.27%)</title><rect x="89.4208%" y="229" width="2.2692%" height="15" fill="rgb(220,109,13)"/><text x="89.6708%" y="239.50">g..</text></g><g><title>hir_lowering (383,544 samples, 2.01%)</title><rect x="91.6900%" y="229" width="2.0060%" height="15" fill="rgb(232,18,1)"/><text x="91.9400%" y="239.50">h..</text></g><g><title>link (41,530 samples, 0.22%)</title><rect x="93.6960%" y="229" width="0.2172%" height="15" fill="rgb(215,41,42)"/><text x="93.9460%" y="239.50"></text></g><g><title>parse_crate (330,684 samples, 1.73%)</title><rect x="93.9132%" y="229" width="1.7295%" height="15" fill="rgb(224,123,36)"/><text x="94.1632%" y="239.50"></text></g><g><title>prepare_outputs (147,502 samples, 0.77%)</title><rect x="95.6838%" y="229" width="0.7714%" height="15" fill="rgb(240,125,3)"/><text x="95.9338%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (339,624 samples, 1.78%)</title><rect x="96.4552%" y="229" width="1.7763%" height="15" fill="rgb(205,98,50)"/><text x="96.7052%" y="239.50">s..</text></g><g><title>setup_global_ctxt (74,331 samples, 0.39%)</title><rect x="98.2862%" y="229" width="0.3888%" height="15" fill="rgb(205,185,37)"/><text x="98.5362%" y="239.50"></text></g><g><title>all (19,120,252 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (19,120,252 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (253,353 samples, 1.33%)</title><rect x="98.6749%" y="229" width="1.3251%" height="15" fill="rgb(235,201,11)"/><text x="98.9249%" y="239.50"></text></g></svg></svg>