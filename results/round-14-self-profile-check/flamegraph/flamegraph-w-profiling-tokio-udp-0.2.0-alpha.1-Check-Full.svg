<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (292,964 samples, 0.28%)</title><rect x="7.1462%" y="181" width="0.2821%" height="15" fill="rgb(227,0,7)"/><text x="7.3962%" y="191.50"></text></g><g><title>item_attrs (180,162 samples, 0.17%)</title><rect x="7.7798%" y="149" width="0.1735%" height="15" fill="rgb(217,0,24)"/><text x="8.0298%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (169,962 samples, 0.16%)</title><rect x="7.7896%" y="133" width="0.1637%" height="15" fill="rgb(221,193,54)"/><text x="8.0396%" y="143.50"></text></g><g><title>codegen_fn_attrs (286,403 samples, 0.28%)</title><rect x="7.6930%" y="165" width="0.2758%" height="15" fill="rgb(248,212,6)"/><text x="7.9430%" y="175.50"></text></g><g><title>adt_drop_tys (176,882 samples, 0.17%)</title><rect x="9.4850%" y="133" width="0.1703%" height="15" fill="rgb(208,68,35)"/><text x="9.7350%" y="143.50"></text></g><g><title>needs_drop_raw (591,139 samples, 0.57%)</title><rect x="9.4384%" y="149" width="0.5693%" height="15" fill="rgb(232,128,0)"/><text x="9.6884%" y="159.50"></text></g><g><title>is_copy_raw (365,887 samples, 0.35%)</title><rect x="9.6553%" y="133" width="0.3523%" height="15" fill="rgb(207,160,47)"/><text x="9.9053%" y="143.50"></text></g><g><title>evaluate_obligation (317,135 samples, 0.31%)</title><rect x="9.7023%" y="117" width="0.3054%" height="15" fill="rgb(228,23,34)"/><text x="9.9523%" y="127.50"></text></g><g><title>impl_parent (1,110,147 samples, 1.07%)</title><rect x="11.6249%" y="117" width="1.0691%" height="15" fill="rgb(218,30,26)"/><text x="11.8749%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (555,510 samples, 0.53%)</title><rect x="12.1590%" y="101" width="0.5350%" height="15" fill="rgb(220,122,19)"/><text x="12.4090%" y="111.50"></text></g><g><title>specialization_graph_of (4,589,771 samples, 4.42%)</title><rect x="10.2212%" y="133" width="4.4199%" height="15" fill="rgb(250,228,42)"/><text x="10.4712%" y="143.50">speci..</text></g><g><title>impl_trait_ref (2,021,946 samples, 1.95%)</title><rect x="12.6940%" y="117" width="1.9471%" height="15" fill="rgb(240,193,28)"/><text x="12.9440%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,697,384 samples, 1.63%)</title><rect x="13.0065%" y="101" width="1.6346%" height="15" fill="rgb(216,20,37)"/><text x="13.2565%" y="111.50"></text></g><g><title>resolve_instance (4,890,074 samples, 4.71%)</title><rect x="10.0077%" y="149" width="4.7091%" height="15" fill="rgb(206,188,39)"/><text x="10.2577%" y="159.50">resol..</text></g><g><title>thir_body (518,665 samples, 0.50%)</title><rect x="14.7307%" y="149" width="0.4995%" height="15" fill="rgb(217,207,13)"/><text x="14.9807%" y="159.50"></text></g><g><title>mir_const (8,895,488 samples, 8.57%)</title><rect x="6.6729%" y="197" width="8.5663%" height="15" fill="rgb(231,73,38)"/><text x="6.9229%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (8,111,020 samples, 7.81%)</title><rect x="7.4284%" y="181" width="7.8109%" height="15" fill="rgb(225,20,46)"/><text x="7.6784%" y="191.50">unsafety_ch..</text></g><g><title>mir_built (7,549,814 samples, 7.27%)</title><rect x="7.9688%" y="165" width="7.2705%" height="15" fill="rgb(210,31,41)"/><text x="8.2188%" y="175.50">mir_built</text></g><g><title>mir_promoted (9,429,483 samples, 9.08%)</title><rect x="6.1812%" y="213" width="9.0806%" height="15" fill="rgb(221,200,47)"/><text x="6.4312%" y="223.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (173,791 samples, 0.17%)</title><rect x="15.2618%" y="213" width="0.1674%" height="15" fill="rgb(226,26,5)"/><text x="15.5118%" y="223.50"></text></g><g><title>type_op_prove_predicate (568,338 samples, 0.55%)</title><rect x="15.6146%" y="213" width="0.5473%" height="15" fill="rgb(249,33,26)"/><text x="15.8646%" y="223.50"></text></g><g><title>MIR_borrow_checking (16,142,009 samples, 15.54%)</title><rect x="0.6205%" y="245" width="15.5447%" height="15" fill="rgb(235,183,28)"/><text x="0.8705%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,071,749 samples, 15.48%)</title><rect x="0.6881%" y="229" width="15.4771%" height="15" fill="rgb(221,5,38)"/><text x="0.9381%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (124,991 samples, 0.12%)</title><rect x="16.1919%" y="245" width="0.1204%" height="15" fill="rgb(247,18,42)"/><text x="16.4419%" y="255.50"></text></g><g><title>should_inherit_track_caller (138,761 samples, 0.13%)</title><rect x="16.5986%" y="197" width="0.1336%" height="15" fill="rgb(241,131,45)"/><text x="16.8486%" y="207.50"></text></g><g><title>codegen_fn_attrs (265,572 samples, 0.26%)</title><rect x="16.4917%" y="213" width="0.2557%" height="15" fill="rgb(249,31,29)"/><text x="16.7417%" y="223.50"></text></g><g><title>check_mod_attrs (433,404 samples, 0.42%)</title><rect x="16.3301%" y="229" width="0.4174%" height="15" fill="rgb(225,111,53)"/><text x="16.5801%" y="239.50"></text></g><g><title>lookup_deprecation_entry (119,403 samples, 0.11%)</title><rect x="16.9925%" y="213" width="0.1150%" height="15" fill="rgb(238,160,17)"/><text x="17.2425%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (306,026 samples, 0.29%)</title><rect x="16.8808%" y="229" width="0.2947%" height="15" fill="rgb(214,148,48)"/><text x="17.1308%" y="239.50"></text></g><g><title>misc_checking_1 (934,451 samples, 0.90%)</title><rect x="16.3128%" y="245" width="0.8999%" height="15" fill="rgb(232,36,49)"/><text x="16.5628%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (396,695 samples, 0.38%)</title><rect x="17.2137%" y="229" width="0.3820%" height="15" fill="rgb(209,103,24)"/><text x="17.4637%" y="239.50"></text></g><g><title>check_mod_liveness (330,674 samples, 0.32%)</title><rect x="17.2773%" y="213" width="0.3184%" height="15" fill="rgb(229,88,8)"/><text x="17.5273%" y="223.50"></text></g><g><title>misc_checking_2 (759,399 samples, 0.73%)</title><rect x="17.2126%" y="245" width="0.7313%" height="15" fill="rgb(213,181,19)"/><text x="17.4626%" y="255.50"></text></g><g><title>match_checking (361,554 samples, 0.35%)</title><rect x="17.5958%" y="229" width="0.3482%" height="15" fill="rgb(254,191,54)"/><text x="17.8458%" y="239.50"></text></g><g><title>check_match (337,463 samples, 0.32%)</title><rect x="17.6190%" y="213" width="0.3250%" height="15" fill="rgb(241,83,37)"/><text x="17.8690%" y="223.50"></text></g><g><title>check_private_in_public (150,622 samples, 0.15%)</title><rect x="17.9516%" y="229" width="0.1450%" height="15" fill="rgb(233,36,39)"/><text x="18.2016%" y="239.50"></text></g><g><title>death_checking (263,432 samples, 0.25%)</title><rect x="18.0966%" y="229" width="0.2537%" height="15" fill="rgb(226,3,54)"/><text x="18.3466%" y="239.50"></text></g><g><title>param_env (199,623 samples, 0.19%)</title><rect x="19.1311%" y="197" width="0.1922%" height="15" fill="rgb(245,192,40)"/><text x="19.3811%" y="207.50"></text></g><g><title>crate_lints (2,297,156 samples, 2.21%)</title><rect x="18.3519%" y="213" width="2.2122%" height="15" fill="rgb(238,167,29)"/><text x="18.6019%" y="223.50">c..</text></g><g><title>type_of (1,241,077 samples, 1.20%)</title><rect x="19.3689%" y="197" width="1.1952%" height="15" fill="rgb(232,182,51)"/><text x="19.6189%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (944,130 samples, 0.91%)</title><rect x="19.6548%" y="181" width="0.9092%" height="15" fill="rgb(231,60,39)"/><text x="19.9048%" y="191.50"></text></g><g><title>lint_checking (2,773,411 samples, 2.67%)</title><rect x="18.3503%" y="229" width="2.6708%" height="15" fill="rgb(208,69,12)"/><text x="18.6003%" y="239.50">li..</text></g><g><title>module_lints (474,645 samples, 0.46%)</title><rect x="20.5640%" y="213" width="0.4571%" height="15" fill="rgb(235,93,37)"/><text x="20.8140%" y="223.50"></text></g><g><title>lint_mod (470,195 samples, 0.45%)</title><rect x="20.5683%" y="197" width="0.4528%" height="15" fill="rgb(213,116,39)"/><text x="20.8183%" y="207.50"></text></g><g><title>privacy_access_levels (257,313 samples, 0.25%)</title><rect x="21.0211%" y="229" width="0.2478%" height="15" fill="rgb(222,207,29)"/><text x="21.2711%" y="239.50"></text></g><g><title>privacy_checking_modules (980,531 samples, 0.94%)</title><rect x="21.2689%" y="229" width="0.9443%" height="15" fill="rgb(206,96,30)"/><text x="21.5189%" y="239.50"></text></g><g><title>check_mod_privacy (977,261 samples, 0.94%)</title><rect x="21.2721%" y="213" width="0.9411%" height="15" fill="rgb(218,138,4)"/><text x="21.5221%" y="223.50"></text></g><g><title>visibility (237,222 samples, 0.23%)</title><rect x="21.9847%" y="197" width="0.2284%" height="15" fill="rgb(250,191,14)"/><text x="22.2347%" y="207.50"></text></g><g><title>misc_checking_3 (4,558,741 samples, 4.39%)</title><rect x="17.9439%" y="245" width="4.3901%" height="15" fill="rgb(239,60,40)"/><text x="18.1939%" y="255.50">misc_..</text></g><g><title>unused_lib_feature_checking (125,491 samples, 0.12%)</title><rect x="22.2132%" y="229" width="0.1208%" height="15" fill="rgb(206,27,48)"/><text x="22.4632%" y="239.50"></text></g><g><title>adt_sized_constraint (116,092 samples, 0.11%)</title><rect x="24.2259%" y="165" width="0.1118%" height="15" fill="rgb(225,35,8)"/><text x="24.4759%" y="175.50"></text></g><g><title>adt_sized_constraint (156,603 samples, 0.15%)</title><rect x="24.1900%" y="181" width="0.1508%" height="15" fill="rgb(250,213,24)"/><text x="24.4400%" y="191.50"></text></g><g><title>impl_parent (1,201,514 samples, 1.16%)</title><rect x="24.3452%" y="181" width="1.1571%" height="15" fill="rgb(247,123,22)"/><text x="24.5952%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (784,671 samples, 0.76%)</title><rect x="24.7466%" y="165" width="0.7556%" height="15" fill="rgb(231,138,38)"/><text x="24.9966%" y="175.50"></text></g><g><title>impl_trait_ref (3,843,697 samples, 3.70%)</title><rect x="25.5033%" y="181" width="3.7015%" height="15" fill="rgb(231,145,46)"/><text x="25.7533%" y="191.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,177,691 samples, 3.06%)</title><rect x="26.1446%" y="165" width="3.0601%" height="15" fill="rgb(251,118,11)"/><text x="26.3946%" y="175.50">met..</text></g><g><title>trait_impls_of (551,255 samples, 0.53%)</title><rect x="29.2804%" y="181" width="0.5309%" height="15" fill="rgb(217,147,25)"/><text x="29.5304%" y="191.50"></text></g><g><title>implementations_of_trait (203,233 samples, 0.20%)</title><rect x="29.6155%" y="165" width="0.1957%" height="15" fill="rgb(247,81,37)"/><text x="29.8655%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (129,032 samples, 0.12%)</title><rect x="29.6870%" y="149" width="0.1243%" height="15" fill="rgb(209,12,38)"/><text x="29.9370%" y="159.50"></text></g><g><title>coherent_trait (7,700,626 samples, 7.42%)</title><rect x="22.3961%" y="213" width="7.4157%" height="15" fill="rgb(227,1,9)"/><text x="22.6461%" y="223.50">coherent_t..</text></g><g><title>specialization_graph_of (7,688,876 samples, 7.40%)</title><rect x="22.4074%" y="197" width="7.4044%" height="15" fill="rgb(248,47,43)"/><text x="22.6574%" y="207.50">specializa..</text></g><g><title>coherence_checking (7,760,666 samples, 7.47%)</title><rect x="22.3843%" y="229" width="7.4735%" height="15" fill="rgb(221,10,30)"/><text x="22.6343%" y="239.50">coherence_..</text></g><g><title>associated_item (175,161 samples, 0.17%)</title><rect x="39.4433%" y="165" width="0.1687%" height="15" fill="rgb(210,229,1)"/><text x="39.6933%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (133,051 samples, 0.13%)</title><rect x="39.4839%" y="149" width="0.1281%" height="15" fill="rgb(222,148,37)"/><text x="39.7339%" y="159.50"></text></g><g><title>associated_items (263,751 samples, 0.25%)</title><rect x="39.3692%" y="181" width="0.2540%" height="15" fill="rgb(234,67,33)"/><text x="39.6192%" y="191.50"></text></g><g><title>adt_dtorck_constraint (127,022 samples, 0.12%)</title><rect x="39.8991%" y="149" width="0.1223%" height="15" fill="rgb(247,98,35)"/><text x="40.1491%" y="159.50"></text></g><g><title>dropck_outlives (368,715 samples, 0.36%)</title><rect x="39.6877%" y="181" width="0.3551%" height="15" fill="rgb(247,138,52)"/><text x="39.9377%" y="191.50"></text></g><g><title>adt_dtorck_constraint (232,963 samples, 0.22%)</title><rect x="39.8185%" y="165" width="0.2243%" height="15" fill="rgb(213,79,30)"/><text x="40.0685%" y="175.50"></text></g><g><title>evaluate_obligation (1,067,609 samples, 1.03%)</title><rect x="40.0428%" y="181" width="1.0281%" height="15" fill="rgb(246,177,23)"/><text x="40.2928%" y="191.50"></text></g><g><title>trait_impls_of (522,675 samples, 0.50%)</title><rect x="40.5676%" y="165" width="0.5033%" height="15" fill="rgb(230,62,27)"/><text x="40.8176%" y="175.50"></text></g><g><title>implementations_of_trait (171,402 samples, 0.17%)</title><rect x="40.9059%" y="149" width="0.1651%" height="15" fill="rgb(216,154,8)"/><text x="41.1559%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (125,881 samples, 0.12%)</title><rect x="40.9497%" y="133" width="0.1212%" height="15" fill="rgb(244,35,45)"/><text x="41.1997%" y="143.50"></text></g><g><title>fn_sig (158,521 samples, 0.15%)</title><rect x="41.0856%" y="181" width="0.1527%" height="15" fill="rgb(251,115,12)"/><text x="41.3356%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (136,481 samples, 0.13%)</title><rect x="41.1068%" y="165" width="0.1314%" height="15" fill="rgb(240,54,50)"/><text x="41.3568%" y="175.50"></text></g><g><title>item_attrs (153,861 samples, 0.15%)</title><rect x="41.3658%" y="181" width="0.1482%" height="15" fill="rgb(233,84,52)"/><text x="41.6158%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (146,691 samples, 0.14%)</title><rect x="41.3727%" y="165" width="0.1413%" height="15" fill="rgb(207,117,47)"/><text x="41.6227%" y="175.50"></text></g><g><title>object_safety_violations (125,672 samples, 0.12%)</title><rect x="41.6451%" y="181" width="0.1210%" height="15" fill="rgb(249,43,39)"/><text x="41.8951%" y="191.50"></text></g><g><title>predicates_of (327,323 samples, 0.32%)</title><rect x="41.7987%" y="181" width="0.3152%" height="15" fill="rgb(209,38,44)"/><text x="42.0487%" y="191.50"></text></g><g><title>predicates_defined_on (202,821 samples, 0.20%)</title><rect x="41.9186%" y="165" width="0.1953%" height="15" fill="rgb(236,212,23)"/><text x="42.1686%" y="175.50"></text></g><g><title>item_bodies_checking (12,824,062 samples, 12.35%)</title><rect x="29.8773%" y="229" width="12.3496%" height="15" fill="rgb(242,79,21)"/><text x="30.1273%" y="239.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (12,821,492 samples, 12.35%)</title><rect x="29.8798%" y="213" width="12.3471%" height="15" fill="rgb(211,96,35)"/><text x="30.1298%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (12,768,000 samples, 12.30%)</title><rect x="29.9313%" y="197" width="12.2956%" height="15" fill="rgb(253,215,40)"/><text x="30.1813%" y="207.50">typeck</text></g><g><title>impl_trait_ref (235,484 samples, 0.23%)</title><rect x="43.2498%" y="149" width="0.2268%" height="15" fill="rgb(211,81,21)"/><text x="43.4998%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (205,774 samples, 0.20%)</title><rect x="43.2784%" y="133" width="0.1982%" height="15" fill="rgb(208,190,38)"/><text x="43.5284%" y="143.50"></text></g><g><title>adt_destructor (506,636 samples, 0.49%)</title><rect x="43.0467%" y="197" width="0.4879%" height="15" fill="rgb(235,213,38)"/><text x="43.2967%" y="207.50"></text></g><g><title>coherent_trait (501,716 samples, 0.48%)</title><rect x="43.0515%" y="181" width="0.4832%" height="15" fill="rgb(237,122,38)"/><text x="43.3015%" y="191.50"></text></g><g><title>specialization_graph_of (500,196 samples, 0.48%)</title><rect x="43.0529%" y="165" width="0.4817%" height="15" fill="rgb(244,218,35)"/><text x="43.3029%" y="175.50"></text></g><g><title>explicit_item_bounds (152,881 samples, 0.15%)</title><rect x="43.5445%" y="197" width="0.1472%" height="15" fill="rgb(240,68,47)"/><text x="43.7945%" y="207.50"></text></g><g><title>implied_outlives_bounds (173,422 samples, 0.17%)</title><rect x="50.0255%" y="149" width="0.1670%" height="15" fill="rgb(210,16,53)"/><text x="50.2755%" y="159.50"></text></g><g><title>implied_outlives_bounds (164,082 samples, 0.16%)</title><rect x="51.4956%" y="133" width="0.1580%" height="15" fill="rgb(235,124,12)"/><text x="51.7456%" y="143.50"></text></g><g><title>mir_promoted (167,551 samples, 0.16%)</title><rect x="51.6536%" y="133" width="0.1614%" height="15" fill="rgb(224,169,11)"/><text x="51.9036%" y="143.50"></text></g><g><title>mir_borrowck (1,772,849 samples, 1.71%)</title><rect x="50.1925%" y="149" width="1.7073%" height="15" fill="rgb(250,166,2)"/><text x="50.4425%" y="159.50"></text></g><g><title>mir_const (200,052 samples, 0.19%)</title><rect x="52.0586%" y="133" width="0.1926%" height="15" fill="rgb(242,216,29)"/><text x="52.3086%" y="143.50"></text></g><g><title>mir_promoted (370,172 samples, 0.36%)</title><rect x="51.8997%" y="149" width="0.3565%" height="15" fill="rgb(230,116,27)"/><text x="52.1497%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,505,317 samples, 1.45%)</title><rect x="52.2562%" y="149" width="1.4496%" height="15" fill="rgb(228,99,48)"/><text x="52.5062%" y="159.50"></text></g><g><title>normalize_projection_ty (1,034,102 samples, 1.00%)</title><rect x="52.7100%" y="133" width="0.9958%" height="15" fill="rgb(253,11,6)"/><text x="52.9600%" y="143.50"></text></g><g><title>mir_borrowck (10,486,425 samples, 10.10%)</title><rect x="45.8486%" y="165" width="10.0984%" height="15" fill="rgb(247,143,39)"/><text x="46.0986%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (2,327,239 samples, 2.24%)</title><rect x="53.7058%" y="149" width="2.2411%" height="15" fill="rgb(236,97,10)"/><text x="53.9558%" y="159.50">t..</text></g><g><title>needs_drop_raw (155,121 samples, 0.15%)</title><rect x="56.5669%" y="101" width="0.1494%" height="15" fill="rgb(233,208,19)"/><text x="56.8169%" y="111.50"></text></g><g><title>adt_dtorck_constraint (130,242 samples, 0.13%)</title><rect x="67.3023%" y="37" width="0.1254%" height="15" fill="rgb(216,164,2)"/><text x="67.5523%" y="47.50"></text></g><g><title>adt_dtorck_constraint (142,172 samples, 0.14%)</title><rect x="67.2932%" y="53" width="0.1369%" height="15" fill="rgb(220,129,5)"/><text x="67.5432%" y="63.50"></text></g><g><title>dropck_outlives (386,703 samples, 0.37%)</title><rect x="67.0702%" y="85" width="0.3724%" height="15" fill="rgb(242,17,10)"/><text x="67.3202%" y="95.50"></text></g><g><title>adt_dtorck_constraint (209,772 samples, 0.20%)</title><rect x="67.2406%" y="69" width="0.2020%" height="15" fill="rgb(242,107,0)"/><text x="67.4906%" y="79.50"></text></g><g><title>evaluate_obligation (913,392 samples, 0.88%)</title><rect x="67.4534%" y="85" width="0.8796%" height="15" fill="rgb(251,28,31)"/><text x="67.7034%" y="95.50"></text></g><g><title>trait_impls_of (107,653 samples, 0.10%)</title><rect x="68.2294%" y="69" width="0.1037%" height="15" fill="rgb(233,223,10)"/><text x="68.4794%" y="79.50"></text></g><g><title>implied_outlives_bounds (160,451 samples, 0.15%)</title><rect x="68.4194%" y="85" width="0.1545%" height="15" fill="rgb(215,21,27)"/><text x="68.6694%" y="95.50"></text></g><g><title>is_copy_raw (465,494 samples, 0.45%)</title><rect x="68.5775%" y="85" width="0.4483%" height="15" fill="rgb(232,23,21)"/><text x="68.8275%" y="95.50"></text></g><g><title>evaluate_obligation (386,313 samples, 0.37%)</title><rect x="68.6538%" y="69" width="0.3720%" height="15" fill="rgb(244,5,23)"/><text x="68.9038%" y="79.50"></text></g><g><title>trait_impls_of (201,892 samples, 0.19%)</title><rect x="68.8314%" y="53" width="0.1944%" height="15" fill="rgb(226,81,46)"/><text x="69.0814%" y="63.50"></text></g><g><title>item_bounds (106,062 samples, 0.10%)</title><rect x="69.0941%" y="85" width="0.1021%" height="15" fill="rgb(247,70,30)"/><text x="69.3441%" y="95.50"></text></g><g><title>method_autoderef_steps (118,761 samples, 0.11%)</title><rect x="69.2000%" y="85" width="0.1144%" height="15" fill="rgb(212,68,19)"/><text x="69.4500%" y="95.50"></text></g><g><title>predicates_of (113,300 samples, 0.11%)</title><rect x="69.3536%" y="85" width="0.1091%" height="15" fill="rgb(240,187,13)"/><text x="69.6036%" y="95.50"></text></g><g><title>mir_built (13,960,315 samples, 13.44%)</title><rect x="56.2029%" y="117" width="13.4438%" height="15" fill="rgb(223,113,26)"/><text x="56.4529%" y="127.50">mir_built</text></g><g><title>typeck (13,328,568 samples, 12.84%)</title><rect x="56.8113%" y="101" width="12.8354%" height="15" fill="rgb(206,192,2)"/><text x="57.0613%" y="111.50">typeck</text></g><g><title>needs_drop_raw (160,062 samples, 0.15%)</title><rect x="70.4144%" y="85" width="0.1541%" height="15" fill="rgb(241,108,4)"/><text x="70.6644%" y="95.50"></text></g><g><title>thir_body (262,394 samples, 0.25%)</title><rect x="70.5861%" y="85" width="0.2527%" height="15" fill="rgb(247,173,49)"/><text x="70.8361%" y="95.50"></text></g><g><title>mir_built (1,128,454 samples, 1.09%)</title><rect x="69.7603%" y="101" width="1.0867%" height="15" fill="rgb(224,114,35)"/><text x="70.0103%" y="111.50"></text></g><g><title>thir_body (117,940 samples, 0.11%)</title><rect x="71.1006%" y="69" width="0.1136%" height="15" fill="rgb(245,159,27)"/><text x="71.3506%" y="79.50"></text></g><g><title>mir_built (308,591 samples, 0.30%)</title><rect x="70.9243%" y="85" width="0.2972%" height="15" fill="rgb(245,172,44)"/><text x="71.1743%" y="95.50"></text></g><g><title>mir_const (15,776,065 samples, 15.19%)</title><rect x="56.0304%" y="149" width="15.1923%" height="15" fill="rgb(236,23,11)"/><text x="56.2804%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (15,633,534 samples, 15.06%)</title><rect x="56.1677%" y="133" width="15.0551%" height="15" fill="rgb(205,117,38)"/><text x="56.4177%" y="143.50">unsafety_check_result</text></g><g><title>unsafety_check_result (1,636,647 samples, 1.58%)</title><rect x="69.6467%" y="117" width="1.5761%" height="15" fill="rgb(237,72,25)"/><text x="69.8967%" y="127.50"></text></g><g><title>unsafety_check_result (388,123 samples, 0.37%)</title><rect x="70.8490%" y="101" width="0.3738%" height="15" fill="rgb(244,70,9)"/><text x="71.0990%" y="111.50"></text></g><g><title>mir_promoted (15,872,918 samples, 15.29%)</title><rect x="55.9470%" y="165" width="15.2856%" height="15" fill="rgb(217,125,39)"/><text x="56.1970%" y="175.50">mir_promoted</text></g><g><title>item_types_checking (30,838,713 samples, 29.70%)</title><rect x="42.2269%" y="229" width="29.6977%" height="15" fill="rgb(235,36,10)"/><text x="42.4769%" y="239.50">item_types_checking</text></g><g><title>check_mod_item_types (30,831,773 samples, 29.69%)</title><rect x="42.2336%" y="213" width="29.6910%" height="15" fill="rgb(251,123,47)"/><text x="42.4836%" y="223.50">check_mod_item_types</text></g><g><title>type_of (29,254,325 samples, 28.17%)</title><rect x="43.7527%" y="197" width="28.1719%" height="15" fill="rgb(221,13,13)"/><text x="44.0027%" y="207.50">type_of</text></g><g><title>mir_borrowck (29,214,295 samples, 28.13%)</title><rect x="43.7912%" y="181" width="28.1333%" height="15" fill="rgb(238,131,9)"/><text x="44.0412%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (585,696 samples, 0.56%)</title><rect x="71.3605%" y="165" width="0.5640%" height="15" fill="rgb(211,50,8)"/><text x="71.6105%" y="175.50"></text></g><g><title>is_late_bound_map (127,513 samples, 0.12%)</title><rect x="72.3411%" y="165" width="0.1228%" height="15" fill="rgb(245,182,24)"/><text x="72.5911%" y="175.50"></text></g><g><title>resolve_lifetimes (118,763 samples, 0.11%)</title><rect x="72.3495%" y="149" width="0.1144%" height="15" fill="rgb(242,14,37)"/><text x="72.5995%" y="159.50"></text></g><g><title>generics_of (147,484 samples, 0.14%)</title><rect x="72.3250%" y="181" width="0.1420%" height="15" fill="rgb(246,228,12)"/><text x="72.5750%" y="191.50"></text></g><g><title>fn_sig (552,268 samples, 0.53%)</title><rect x="72.0955%" y="197" width="0.5318%" height="15" fill="rgb(213,55,15)"/><text x="72.3455%" y="207.50"></text></g><g><title>named_region_map (330,413 samples, 0.32%)</title><rect x="72.7121%" y="181" width="0.3182%" height="15" fill="rgb(209,9,3)"/><text x="72.9621%" y="191.50"></text></g><g><title>resolve_lifetimes (319,623 samples, 0.31%)</title><rect x="72.7225%" y="165" width="0.3078%" height="15" fill="rgb(230,59,30)"/><text x="72.9725%" y="175.50"></text></g><g><title>lint_levels (108,751 samples, 0.10%)</title><rect x="72.9256%" y="149" width="0.1047%" height="15" fill="rgb(209,121,21)"/><text x="73.1756%" y="159.50"></text></g><g><title>generics_of (431,205 samples, 0.42%)</title><rect x="72.6273%" y="197" width="0.4153%" height="15" fill="rgb(220,109,13)"/><text x="72.8773%" y="207.50"></text></g><g><title>predicates_of (235,921 samples, 0.23%)</title><rect x="73.0778%" y="197" width="0.2272%" height="15" fill="rgb(232,18,1)"/><text x="73.3278%" y="207.50"></text></g><g><title>predicates_defined_on (208,501 samples, 0.20%)</title><rect x="73.1042%" y="181" width="0.2008%" height="15" fill="rgb(215,41,42)"/><text x="73.3542%" y="191.50"></text></g><g><title>inferred_outlives_of (111,521 samples, 0.11%)</title><rect x="73.1976%" y="165" width="0.1074%" height="15" fill="rgb(224,123,36)"/><text x="73.4476%" y="175.50"></text></g><g><title>type_collecting (1,487,166 samples, 1.43%)</title><rect x="71.9267%" y="229" width="1.4321%" height="15" fill="rgb(240,125,3)"/><text x="72.1767%" y="239.50"></text></g><g><title>collect_mod_item_types (1,476,596 samples, 1.42%)</title><rect x="71.9368%" y="213" width="1.4220%" height="15" fill="rgb(205,98,50)"/><text x="72.1868%" y="223.50"></text></g><g><title>adt_def (111,710 samples, 0.11%)</title><rect x="75.0713%" y="133" width="0.1076%" height="15" fill="rgb(205,185,37)"/><text x="75.3213%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (110,610 samples, 0.11%)</title><rect x="75.0724%" y="117" width="0.1065%" height="15" fill="rgb(238,207,15)"/><text x="75.3224%" y="127.50"></text></g><g><title>adt_sized_constraint (129,691 samples, 0.12%)</title><rect x="75.0670%" y="149" width="0.1249%" height="15" fill="rgb(213,199,42)"/><text x="75.3170%" y="159.50"></text></g><g><title>adt_sized_constraint (205,593 samples, 0.20%)</title><rect x="75.0047%" y="165" width="0.1980%" height="15" fill="rgb(235,201,11)"/><text x="75.2547%" y="175.50"></text></g><g><title>adt_sized_constraint (276,174 samples, 0.27%)</title><rect x="74.9393%" y="181" width="0.2660%" height="15" fill="rgb(207,46,11)"/><text x="75.1893%" y="191.50"></text></g><g><title>evaluate_obligation (537,338 samples, 0.52%)</title><rect x="74.7466%" y="197" width="0.5175%" height="15" fill="rgb(241,35,35)"/><text x="74.9966%" y="207.50"></text></g><g><title>implied_outlives_bounds (180,350 samples, 0.17%)</title><rect x="75.2707%" y="197" width="0.1737%" height="15" fill="rgb(243,32,47)"/><text x="75.5207%" y="207.50"></text></g><g><title>param_env (178,801 samples, 0.17%)</title><rect x="75.4443%" y="197" width="0.1722%" height="15" fill="rgb(247,202,23)"/><text x="75.6943%" y="207.50"></text></g><g><title>check_impl_item_well_formed (2,593,938 samples, 2.50%)</title><rect x="73.4813%" y="213" width="2.4980%" height="15" fill="rgb(219,102,11)"/><text x="73.7313%" y="223.50">ch..</text></g><g><title>region_scope_tree (317,392 samples, 0.31%)</title><rect x="75.6736%" y="197" width="0.3056%" height="15" fill="rgb(243,110,44)"/><text x="75.9236%" y="207.50"></text></g><g><title>evaluate_obligation (237,122 samples, 0.23%)</title><rect x="76.3145%" y="197" width="0.2283%" height="15" fill="rgb(222,74,54)"/><text x="76.5645%" y="207.50"></text></g><g><title>analysis (79,258,181 samples, 76.33%)</title><rect x="0.4284%" y="261" width="76.3256%" height="15" fill="rgb(216,99,12)"/><text x="0.6784%" y="271.50">analysis</text></g><g><title>type_check_crate (56,510,928 samples, 54.42%)</title><rect x="22.3340%" y="245" width="54.4200%" height="15" fill="rgb(226,22,26)"/><text x="22.5840%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,520,709 samples, 3.39%)</title><rect x="73.3635%" y="229" width="3.3904%" height="15" fill="rgb(217,163,10)"/><text x="73.6135%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (804,510 samples, 0.77%)</title><rect x="75.9792%" y="213" width="0.7747%" height="15" fill="rgb(213,25,53)"/><text x="76.2292%" y="223.50"></text></g><g><title>codegen_crate (462,985 samples, 0.45%)</title><rect x="76.7586%" y="261" width="0.4459%" height="15" fill="rgb(252,105,26)"/><text x="77.0086%" y="271.50"></text></g><g><title>metadata_register_crate (2,413,097 samples, 2.32%)</title><rect x="85.1998%" y="213" width="2.3238%" height="15" fill="rgb(220,39,43)"/><text x="85.4498%" y="223.50">m..</text></g><g><title>metadata_register_crate (1,279,407 samples, 1.23%)</title><rect x="86.2916%" y="197" width="1.2321%" height="15" fill="rgb(229,68,48)"/><text x="86.5416%" y="207.50"></text></g><g><title>metadata_register_crate (419,576 samples, 0.40%)</title><rect x="87.1196%" y="181" width="0.4041%" height="15" fill="rgb(252,8,32)"/><text x="87.3696%" y="191.50"></text></g><g><title>macro_expand_crate (10,531,877 samples, 10.14%)</title><rect x="77.4592%" y="245" width="10.1422%" height="15" fill="rgb(223,20,43)"/><text x="77.7092%" y="255.50">macro_expand_cr..</text></g><g><title>expand_crate (10,519,877 samples, 10.13%)</title><rect x="77.4708%" y="229" width="10.1306%" height="15" fill="rgb(229,81,49)"/><text x="77.7208%" y="239.50">expand_crate</text></g><g><title>late_resolve_crate (1,369,566 samples, 1.32%)</title><rect x="87.7317%" y="229" width="1.3189%" height="15" fill="rgb(236,28,36)"/><text x="87.9817%" y="239.50"></text></g><g><title>configure_and_expand (12,367,108 samples, 11.91%)</title><rect x="77.2045%" y="261" width="11.9095%" height="15" fill="rgb(249,185,26)"/><text x="77.4545%" y="271.50">configure_and_expa..</text></g><g><title>resolve_crate (1,523,107 samples, 1.47%)</title><rect x="87.6472%" y="245" width="1.4668%" height="15" fill="rgb(249,174,33)"/><text x="87.8972%" y="255.50"></text></g><g><title>early_lint_checks (191,802 samples, 0.18%)</title><rect x="89.2160%" y="261" width="0.1847%" height="15" fill="rgb(233,201,37)"/><text x="89.4660%" y="271.50"></text></g><g><title>free_global_ctxt (3,555,789 samples, 3.42%)</title><rect x="89.4007%" y="261" width="3.4242%" height="15" fill="rgb(221,78,26)"/><text x="89.6507%" y="271.50">fre..</text></g><g><title>layout_of (194,532 samples, 0.19%)</title><rect x="95.3010%" y="229" width="0.1873%" height="15" fill="rgb(250,127,30)"/><text x="95.5510%" y="239.50"></text></g><g><title>layout_of (182,022 samples, 0.18%)</title><rect x="95.3131%" y="213" width="0.1753%" height="15" fill="rgb(230,49,44)"/><text x="95.5631%" y="223.50"></text></g><g><title>layout_of (174,692 samples, 0.17%)</title><rect x="95.3201%" y="197" width="0.1682%" height="15" fill="rgb(229,67,23)"/><text x="95.5701%" y="207.50"></text></g><g><title>layout_of (168,662 samples, 0.16%)</title><rect x="95.3260%" y="181" width="0.1624%" height="15" fill="rgb(249,83,47)"/><text x="95.5760%" y="191.50"></text></g><g><title>layout_of (154,032 samples, 0.15%)</title><rect x="95.3400%" y="165" width="0.1483%" height="15" fill="rgb(215,43,3)"/><text x="95.5900%" y="175.50"></text></g><g><title>needs_drop_raw (120,021 samples, 0.12%)</title><rect x="96.5850%" y="213" width="0.1156%" height="15" fill="rgb(238,154,13)"/><text x="96.8350%" y="223.50"></text></g><g><title>is_copy_raw (108,271 samples, 0.10%)</title><rect x="96.5964%" y="197" width="0.1043%" height="15" fill="rgb(219,56,2)"/><text x="96.8464%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,261,611 samples, 1.21%)</title><rect x="95.4884%" y="229" width="1.2149%" height="15" fill="rgb(233,0,4)"/><text x="95.7384%" y="239.50"></text></g><g><title>optimized_mir (2,891,930 samples, 2.78%)</title><rect x="93.9187%" y="245" width="2.7849%" height="15" fill="rgb(235,30,7)"/><text x="94.1687%" y="255.50">op..</text></g><g><title>generate_crate_metadata (4,047,665 samples, 3.90%)</title><rect x="92.8249%" y="261" width="3.8979%" height="15" fill="rgb(250,79,13)"/><text x="93.0749%" y="271.50">gene..</text></g><g><title>hir_lowering (1,905,391 samples, 1.83%)</title><rect x="96.7228%" y="261" width="1.8349%" height="15" fill="rgb(211,146,34)"/><text x="96.9728%" y="271.50">h..</text></g><g><title>parse_crate (153,002 samples, 0.15%)</title><rect x="98.5997%" y="261" width="0.1473%" height="15" fill="rgb(228,22,38)"/><text x="98.8497%" y="271.50"></text></g><g><title>prepare_outputs (180,572 samples, 0.17%)</title><rect x="98.7511%" y="261" width="0.1739%" height="15" fill="rgb(235,168,5)"/><text x="99.0011%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (737,648 samples, 0.71%)</title><rect x="98.9250%" y="261" width="0.7104%" height="15" fill="rgb(221,155,16)"/><text x="99.1750%" y="271.50"></text></g><g><title>all (103,842,235 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (103,842,235 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (301,173 samples, 0.29%)</title><rect x="99.7100%" y="261" width="0.2900%" height="15" fill="rgb(234,103,6)"/><text x="99.9600%" y="271.50"></text></g></svg></svg>