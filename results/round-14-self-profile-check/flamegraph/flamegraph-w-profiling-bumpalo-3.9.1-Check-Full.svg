<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (513,155 samples, 0.30%)</title><rect x="14.1558%" y="197" width="0.2973%" height="15" fill="rgb(227,0,7)"/><text x="14.4058%" y="207.50"></text></g><g><title>item_attrs (406,655 samples, 0.24%)</title><rect x="15.0474%" y="165" width="0.2356%" height="15" fill="rgb(217,0,24)"/><text x="15.2974%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (393,434 samples, 0.23%)</title><rect x="15.0550%" y="149" width="0.2279%" height="15" fill="rgb(221,193,54)"/><text x="15.3050%" y="159.50"></text></g><g><title>codegen_fn_attrs (611,894 samples, 0.35%)</title><rect x="14.9453%" y="181" width="0.3545%" height="15" fill="rgb(248,212,6)"/><text x="15.1953%" y="191.50"></text></g><g><title>is_copy_raw (265,975 samples, 0.15%)</title><rect x="18.2665%" y="165" width="0.1541%" height="15" fill="rgb(208,68,35)"/><text x="18.5165%" y="175.50"></text></g><g><title>evaluate_obligation (221,845 samples, 0.13%)</title><rect x="18.2920%" y="149" width="0.1285%" height="15" fill="rgb(232,128,0)"/><text x="18.5420%" y="159.50"></text></g><g><title>adt_drop_tys (211,184 samples, 0.12%)</title><rect x="18.5338%" y="149" width="0.1223%" height="15" fill="rgb(207,160,47)"/><text x="18.7838%" y="159.50"></text></g><g><title>needs_drop_raw (1,822,349 samples, 1.06%)</title><rect x="18.4206%" y="165" width="1.0558%" height="15" fill="rgb(228,23,34)"/><text x="18.6706%" y="175.50"></text></g><g><title>is_copy_raw (1,415,764 samples, 0.82%)</title><rect x="18.6561%" y="149" width="0.8202%" height="15" fill="rgb(218,30,26)"/><text x="18.9061%" y="159.50"></text></g><g><title>evaluate_obligation (1,185,493 samples, 0.69%)</title><rect x="18.7895%" y="133" width="0.6868%" height="15" fill="rgb(220,122,19)"/><text x="19.0395%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (336,913 samples, 0.20%)</title><rect x="19.6672%" y="149" width="0.1952%" height="15" fill="rgb(250,228,42)"/><text x="19.9172%" y="159.50"></text></g><g><title>specialization_graph_of (420,825 samples, 0.24%)</title><rect x="19.8919%" y="149" width="0.2438%" height="15" fill="rgb(240,193,28)"/><text x="20.1419%" y="159.50"></text></g><g><title>resolve_instance (1,290,561 samples, 0.75%)</title><rect x="19.4763%" y="165" width="0.7477%" height="15" fill="rgb(216,20,37)"/><text x="19.7263%" y="175.50"></text></g><g><title>thir_body (2,074,352 samples, 1.20%)</title><rect x="20.2580%" y="165" width="1.2018%" height="15" fill="rgb(206,188,39)"/><text x="20.5080%" y="175.50"></text></g><g><title>mir_const (14,283,729 samples, 8.28%)</title><rect x="13.2078%" y="213" width="8.2751%" height="15" fill="rgb(217,207,13)"/><text x="13.4578%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (12,134,115 samples, 7.03%)</title><rect x="14.4531%" y="197" width="7.0298%" height="15" fill="rgb(231,73,38)"/><text x="14.7031%" y="207.50">unsafety_..</text></g><g><title>mir_built (10,672,721 samples, 6.18%)</title><rect x="15.2998%" y="181" width="6.1831%" height="15" fill="rgb(225,20,46)"/><text x="15.5498%" y="191.50">mir_built</text></g><g><title>mir_promoted (15,948,262 samples, 9.24%)</title><rect x="12.3971%" y="229" width="9.2394%" height="15" fill="rgb(210,31,41)"/><text x="12.6471%" y="239.50">mir_promoted</text></g><g><title>mir_const_qualif (265,202 samples, 0.15%)</title><rect x="21.4829%" y="213" width="0.1536%" height="15" fill="rgb(221,200,47)"/><text x="21.7329%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (591,165 samples, 0.34%)</title><rect x="21.6365%" y="229" width="0.3425%" height="15" fill="rgb(226,26,5)"/><text x="21.8865%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (582,850 samples, 0.34%)</title><rect x="21.9790%" y="229" width="0.3377%" height="15" fill="rgb(249,33,26)"/><text x="22.2290%" y="239.50"></text></g><g><title>normalize_projection_ty (402,148 samples, 0.23%)</title><rect x="22.0837%" y="213" width="0.2330%" height="15" fill="rgb(235,183,28)"/><text x="22.3337%" y="223.50"></text></g><g><title>type_op_normalize_predicate (312,966 samples, 0.18%)</title><rect x="22.3167%" y="229" width="0.1813%" height="15" fill="rgb(221,5,38)"/><text x="22.5667%" y="239.50"></text></g><g><title>normalize_projection_ty (194,444 samples, 0.11%)</title><rect x="22.3853%" y="213" width="0.1126%" height="15" fill="rgb(247,18,42)"/><text x="22.6353%" y="223.50"></text></g><g><title>type_op_prove_predicate (3,456,155 samples, 2.00%)</title><rect x="22.5184%" y="229" width="2.0023%" height="15" fill="rgb(241,131,45)"/><text x="22.7684%" y="239.50">t..</text></g><g><title>MIR_borrow_checking (41,315,377 samples, 23.94%)</title><rect x="0.5924%" y="261" width="23.9356%" height="15" fill="rgb(249,31,29)"/><text x="0.8424%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (41,115,036 samples, 23.82%)</title><rect x="0.7085%" y="245" width="23.8195%" height="15" fill="rgb(225,111,53)"/><text x="0.9585%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (249,993 samples, 0.14%)</title><rect x="24.5280%" y="261" width="0.1448%" height="15" fill="rgb(238,160,17)"/><text x="24.7780%" y="271.50"></text></g><g><title>hir_module_items (255,274 samples, 0.15%)</title><rect x="24.6728%" y="261" width="0.1479%" height="15" fill="rgb(214,148,48)"/><text x="24.9228%" y="271.50"></text></g><g><title>should_inherit_track_caller (254,413 samples, 0.15%)</title><rect x="25.2290%" y="213" width="0.1474%" height="15" fill="rgb(232,36,49)"/><text x="25.4790%" y="223.50"></text></g><g><title>codegen_fn_attrs (487,485 samples, 0.28%)</title><rect x="25.1077%" y="229" width="0.2824%" height="15" fill="rgb(209,103,24)"/><text x="25.3577%" y="239.50"></text></g><g><title>check_mod_attrs (967,610 samples, 0.56%)</title><rect x="24.8297%" y="245" width="0.5606%" height="15" fill="rgb(229,88,8)"/><text x="25.0797%" y="255.50"></text></g><g><title>check_mod_const_bodies (176,452 samples, 0.10%)</title><rect x="25.3903%" y="245" width="0.1022%" height="15" fill="rgb(213,181,19)"/><text x="25.6403%" y="255.50"></text></g><g><title>lint_levels (293,844 samples, 0.17%)</title><rect x="25.7171%" y="229" width="0.1702%" height="15" fill="rgb(254,191,54)"/><text x="25.9671%" y="239.50"></text></g><g><title>lookup_deprecation_entry (189,912 samples, 0.11%)</title><rect x="25.8873%" y="229" width="0.1100%" height="15" fill="rgb(241,83,37)"/><text x="26.1373%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (877,100 samples, 0.51%)</title><rect x="25.5630%" y="245" width="0.5081%" height="15" fill="rgb(233,36,39)"/><text x="25.8130%" y="255.50"></text></g><g><title>misc_checking_1 (2,215,734 samples, 1.28%)</title><rect x="24.8210%" y="261" width="1.2837%" height="15" fill="rgb(226,3,54)"/><text x="25.0710%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (811,698 samples, 0.47%)</title><rect x="26.1056%" y="245" width="0.4702%" height="15" fill="rgb(245,192,40)"/><text x="26.3556%" y="255.50"></text></g><g><title>check_mod_liveness (645,197 samples, 0.37%)</title><rect x="26.2020%" y="229" width="0.3738%" height="15" fill="rgb(238,167,29)"/><text x="26.4520%" y="239.50"></text></g><g><title>misc_checking_2 (1,809,049 samples, 1.05%)</title><rect x="26.1047%" y="261" width="1.0481%" height="15" fill="rgb(232,182,51)"/><text x="26.3547%" y="271.50"></text></g><g><title>match_checking (995,781 samples, 0.58%)</title><rect x="26.5758%" y="245" width="0.5769%" height="15" fill="rgb(231,60,39)"/><text x="26.8258%" y="255.50"></text></g><g><title>check_match (946,290 samples, 0.55%)</title><rect x="26.6045%" y="229" width="0.5482%" height="15" fill="rgb(208,69,12)"/><text x="26.8545%" y="239.50"></text></g><g><title>check_private_in_public (305,473 samples, 0.18%)</title><rect x="27.1583%" y="245" width="0.1770%" height="15" fill="rgb(235,93,37)"/><text x="27.4083%" y="255.50"></text></g><g><title>death_checking (579,647 samples, 0.34%)</title><rect x="27.3353%" y="245" width="0.3358%" height="15" fill="rgb(213,116,39)"/><text x="27.5853%" y="255.50"></text></g><g><title>eval_to_const_value_raw (269,553 samples, 0.16%)</title><rect x="28.4480%" y="213" width="0.1562%" height="15" fill="rgb(222,207,29)"/><text x="28.6980%" y="223.50"></text></g><g><title>eval_to_const_value_raw (263,823 samples, 0.15%)</title><rect x="28.4514%" y="197" width="0.1528%" height="15" fill="rgb(206,96,30)"/><text x="28.7014%" y="207.50"></text></g><g><title>eval_to_allocation_raw (252,013 samples, 0.15%)</title><rect x="28.4582%" y="181" width="0.1460%" height="15" fill="rgb(218,138,4)"/><text x="28.7082%" y="191.50"></text></g><g><title>param_env (176,833 samples, 0.10%)</title><rect x="28.6042%" y="213" width="0.1024%" height="15" fill="rgb(250,191,14)"/><text x="28.8542%" y="223.50"></text></g><g><title>crate_lints (2,274,175 samples, 1.32%)</title><rect x="27.6719%" y="229" width="1.3175%" height="15" fill="rgb(239,60,40)"/><text x="27.9219%" y="239.50"></text></g><g><title>type_of (427,074 samples, 0.25%)</title><rect x="28.7420%" y="213" width="0.2474%" height="15" fill="rgb(206,27,48)"/><text x="28.9920%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (338,243 samples, 0.20%)</title><rect x="28.7935%" y="197" width="0.1960%" height="15" fill="rgb(225,35,8)"/><text x="29.0435%" y="207.50"></text></g><g><title>lint_checking (2,992,383 samples, 1.73%)</title><rect x="27.6711%" y="245" width="1.7336%" height="15" fill="rgb(250,213,24)"/><text x="27.9211%" y="255.50"></text></g><g><title>module_lints (716,768 samples, 0.42%)</title><rect x="28.9894%" y="229" width="0.4153%" height="15" fill="rgb(247,123,22)"/><text x="29.2394%" y="239.50"></text></g><g><title>lint_mod (712,868 samples, 0.41%)</title><rect x="28.9917%" y="213" width="0.4130%" height="15" fill="rgb(231,138,38)"/><text x="29.2417%" y="223.50"></text></g><g><title>privacy_access_levels (445,955 samples, 0.26%)</title><rect x="29.4047%" y="245" width="0.2584%" height="15" fill="rgb(231,145,46)"/><text x="29.6547%" y="255.50"></text></g><g><title>privacy_checking_modules (1,360,635 samples, 0.79%)</title><rect x="29.6631%" y="245" width="0.7883%" height="15" fill="rgb(251,118,11)"/><text x="29.9131%" y="255.50"></text></g><g><title>check_mod_privacy (1,358,315 samples, 0.79%)</title><rect x="29.6644%" y="229" width="0.7869%" height="15" fill="rgb(217,147,25)"/><text x="29.9144%" y="239.50"></text></g><g><title>misc_checking_3 (5,719,963 samples, 3.31%)</title><rect x="27.1527%" y="261" width="3.3138%" height="15" fill="rgb(247,81,37)"/><text x="27.4027%" y="271.50">mis..</text></g><g><title>impl_parent (1,082,669 samples, 0.63%)</title><rect x="31.5884%" y="197" width="0.6272%" height="15" fill="rgb(209,12,38)"/><text x="31.8384%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (630,027 samples, 0.36%)</title><rect x="31.8506%" y="181" width="0.3650%" height="15" fill="rgb(227,1,9)"/><text x="32.1006%" y="191.50"></text></g><g><title>impl_trait_ref (2,714,549 samples, 1.57%)</title><rect x="32.2156%" y="197" width="1.5726%" height="15" fill="rgb(248,47,43)"/><text x="32.4656%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,015,880 samples, 1.17%)</title><rect x="32.6204%" y="181" width="1.1679%" height="15" fill="rgb(221,10,30)"/><text x="32.8704%" y="191.50"></text></g><g><title>trait_impls_of (362,943 samples, 0.21%)</title><rect x="33.7958%" y="197" width="0.2103%" height="15" fill="rgb(210,229,1)"/><text x="34.0458%" y="207.50"></text></g><g><title>coherent_trait (5,993,546 samples, 3.47%)</title><rect x="30.5341%" y="229" width="3.4723%" height="15" fill="rgb(222,148,37)"/><text x="30.7841%" y="239.50">coh..</text></g><g><title>specialization_graph_of (5,971,556 samples, 3.46%)</title><rect x="30.5469%" y="213" width="3.4596%" height="15" fill="rgb(234,67,33)"/><text x="30.7969%" y="223.50">spe..</text></g><g><title>coherence_checking (6,071,688 samples, 3.52%)</title><rect x="30.5216%" y="245" width="3.5176%" height="15" fill="rgb(247,98,35)"/><text x="30.7716%" y="255.50">coh..</text></g><g><title>associated_item (586,889 samples, 0.34%)</title><rect x="49.9818%" y="181" width="0.3400%" height="15" fill="rgb(247,138,52)"/><text x="50.2318%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (469,076 samples, 0.27%)</title><rect x="50.0501%" y="165" width="0.2718%" height="15" fill="rgb(213,79,30)"/><text x="50.3001%" y="175.50"></text></g><g><title>associated_items (839,241 samples, 0.49%)</title><rect x="49.8632%" y="197" width="0.4862%" height="15" fill="rgb(246,177,23)"/><text x="50.1132%" y="207.50"></text></g><g><title>dropck_outlives (398,614 samples, 0.23%)</title><rect x="50.4077%" y="197" width="0.2309%" height="15" fill="rgb(230,62,27)"/><text x="50.6577%" y="207.50"></text></g><g><title>specializes (197,234 samples, 0.11%)</title><rect x="51.7128%" y="181" width="0.1143%" height="15" fill="rgb(216,154,8)"/><text x="51.9628%" y="191.50"></text></g><g><title>evaluate_obligation (2,120,901 samples, 1.23%)</title><rect x="50.6386%" y="197" width="1.2287%" height="15" fill="rgb(244,35,45)"/><text x="50.8886%" y="207.50"></text></g><g><title>fn_sig (189,063 samples, 0.11%)</title><rect x="51.8809%" y="197" width="0.1095%" height="15" fill="rgb(251,115,12)"/><text x="52.1309%" y="207.50"></text></g><g><title>item_attrs (324,113 samples, 0.19%)</title><rect x="52.1514%" y="197" width="0.1878%" height="15" fill="rgb(240,54,50)"/><text x="52.4014%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (312,443 samples, 0.18%)</title><rect x="52.1582%" y="181" width="0.1810%" height="15" fill="rgb(233,84,52)"/><text x="52.4082%" y="191.50"></text></g><g><title>method_autoderef_steps (452,407 samples, 0.26%)</title><rect x="52.3904%" y="197" width="0.2621%" height="15" fill="rgb(207,117,47)"/><text x="52.6404%" y="207.50"></text></g><g><title>evaluate_obligation (230,193 samples, 0.13%)</title><rect x="52.5192%" y="181" width="0.1334%" height="15" fill="rgb(249,43,39)"/><text x="52.7692%" y="191.50"></text></g><g><title>predicates_of (395,305 samples, 0.23%)</title><rect x="52.7676%" y="197" width="0.2290%" height="15" fill="rgb(209,38,44)"/><text x="53.0176%" y="207.50"></text></g><g><title>predicates_defined_on (278,095 samples, 0.16%)</title><rect x="52.8355%" y="181" width="0.1611%" height="15" fill="rgb(236,212,23)"/><text x="53.0855%" y="191.50"></text></g><g><title>dropck_outlives (187,383 samples, 0.11%)</title><rect x="59.6545%" y="181" width="0.1086%" height="15" fill="rgb(242,79,21)"/><text x="59.9045%" y="191.50"></text></g><g><title>evaluate_obligation (1,179,703 samples, 0.68%)</title><rect x="59.7631%" y="181" width="0.6834%" height="15" fill="rgb(211,96,35)"/><text x="60.0131%" y="191.50"></text></g><g><title>is_copy_raw (277,265 samples, 0.16%)</title><rect x="60.5648%" y="181" width="0.1606%" height="15" fill="rgb(253,215,40)"/><text x="60.8148%" y="191.50"></text></g><g><title>evaluate_obligation (210,684 samples, 0.12%)</title><rect x="60.6034%" y="165" width="0.1221%" height="15" fill="rgb(211,81,21)"/><text x="60.8534%" y="175.50"></text></g><g><title>method_autoderef_steps (221,593 samples, 0.13%)</title><rect x="60.8214%" y="181" width="0.1284%" height="15" fill="rgb(208,190,38)"/><text x="61.0714%" y="191.50"></text></g><g><title>typeck (13,887,184 samples, 8.05%)</title><rect x="53.0664%" y="197" width="8.0454%" height="15" fill="rgb(235,213,38)"/><text x="53.3164%" y="207.50">typeck</text></g><g><title>item_bodies_checking (46,771,667 samples, 27.10%)</title><rect x="34.0567%" y="245" width="27.0966%" height="15" fill="rgb(237,122,38)"/><text x="34.3067%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (46,768,167 samples, 27.09%)</title><rect x="34.0587%" y="229" width="27.0946%" height="15" fill="rgb(244,218,35)"/><text x="34.3087%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (46,649,735 samples, 27.03%)</title><rect x="34.1273%" y="213" width="27.0260%" height="15" fill="rgb(240,68,47)"/><text x="34.3773%" y="223.50">typeck</text></g><g><title>generics_of (474,775 samples, 0.28%)</title><rect x="63.7424%" y="181" width="0.2751%" height="15" fill="rgb(210,16,53)"/><text x="63.9924%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (337,695 samples, 0.20%)</title><rect x="63.8218%" y="165" width="0.1956%" height="15" fill="rgb(235,124,12)"/><text x="64.0718%" y="175.50"></text></g><g><title>impl_trait_ref (673,750 samples, 0.39%)</title><rect x="64.0923%" y="181" width="0.3903%" height="15" fill="rgb(224,169,11)"/><text x="64.3423%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (537,617 samples, 0.31%)</title><rect x="64.1711%" y="165" width="0.3115%" height="15" fill="rgb(250,166,2)"/><text x="64.4211%" y="175.50"></text></g><g><title>predicates_of (866,922 samples, 0.50%)</title><rect x="64.5045%" y="181" width="0.5022%" height="15" fill="rgb(242,216,29)"/><text x="64.7545%" y="191.50"></text></g><g><title>predicates_defined_on (354,317 samples, 0.21%)</title><rect x="64.8015%" y="165" width="0.2053%" height="15" fill="rgb(230,116,27)"/><text x="65.0515%" y="175.50"></text></g><g><title>specializes (1,977,580 samples, 1.15%)</title><rect x="65.0067%" y="181" width="1.1457%" height="15" fill="rgb(228,99,48)"/><text x="65.2567%" y="191.50"></text></g><g><title>param_env (1,173,234 samples, 0.68%)</title><rect x="65.4727%" y="165" width="0.6797%" height="15" fill="rgb(253,11,6)"/><text x="65.7227%" y="175.50"></text></g><g><title>def_span (547,109 samples, 0.32%)</title><rect x="65.8354%" y="149" width="0.3170%" height="15" fill="rgb(247,143,39)"/><text x="66.0854%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (489,187 samples, 0.28%)</title><rect x="65.8690%" y="133" width="0.2834%" height="15" fill="rgb(236,97,10)"/><text x="66.1190%" y="143.50"></text></g><g><title>evaluate_obligation (6,481,961 samples, 3.76%)</title><rect x="62.4832%" y="197" width="3.7553%" height="15" fill="rgb(233,208,19)"/><text x="62.7332%" y="207.50">eval..</text></g><g><title>specializes (173,133 samples, 0.10%)</title><rect x="66.3931%" y="197" width="0.1003%" height="15" fill="rgb(216,164,2)"/><text x="66.6431%" y="207.50"></text></g><g><title>item_types_checking (9,223,772 samples, 5.34%)</title><rect x="61.1533%" y="245" width="5.3437%" height="15" fill="rgb(220,129,5)"/><text x="61.4033%" y="255.50">item_ty..</text></g><g><title>check_mod_item_types (9,218,332 samples, 5.34%)</title><rect x="61.1564%" y="229" width="5.3405%" height="15" fill="rgb(242,17,10)"/><text x="61.4064%" y="239.50">check_m..</text></g><g><title>typeck (8,244,361 samples, 4.78%)</title><rect x="61.7207%" y="213" width="4.7763%" height="15" fill="rgb(242,107,0)"/><text x="61.9707%" y="223.50">typeck</text></g><g><title>late_bound_vars_map (231,122 samples, 0.13%)</title><rect x="66.8550%" y="197" width="0.1339%" height="15" fill="rgb(251,28,31)"/><text x="67.1050%" y="207.50"></text></g><g><title>resolve_lifetimes (213,312 samples, 0.12%)</title><rect x="66.8654%" y="181" width="0.1236%" height="15" fill="rgb(233,223,10)"/><text x="67.1154%" y="191.50"></text></g><g><title>fn_sig (512,566 samples, 0.30%)</title><rect x="66.7107%" y="213" width="0.2969%" height="15" fill="rgb(215,21,27)"/><text x="66.9607%" y="223.50"></text></g><g><title>named_region_map (185,432 samples, 0.11%)</title><rect x="67.1452%" y="197" width="0.1074%" height="15" fill="rgb(232,23,21)"/><text x="67.3952%" y="207.50"></text></g><g><title>generics_of (451,347 samples, 0.26%)</title><rect x="67.0077%" y="213" width="0.2615%" height="15" fill="rgb(244,5,23)"/><text x="67.2577%" y="223.50"></text></g><g><title>explicit_predicates_of (587,188 samples, 0.34%)</title><rect x="67.4056%" y="181" width="0.3402%" height="15" fill="rgb(226,81,46)"/><text x="67.6556%" y="191.50"></text></g><g><title>predicates_of (1,006,261 samples, 0.58%)</title><rect x="67.3073%" y="213" width="0.5830%" height="15" fill="rgb(247,70,30)"/><text x="67.5573%" y="223.50"></text></g><g><title>predicates_defined_on (939,220 samples, 0.54%)</title><rect x="67.3461%" y="197" width="0.5441%" height="15" fill="rgb(212,68,19)"/><text x="67.5961%" y="207.50"></text></g><g><title>inferred_outlives_of (249,362 samples, 0.14%)</title><rect x="67.7458%" y="181" width="0.1445%" height="15" fill="rgb(240,187,13)"/><text x="67.9958%" y="191.50"></text></g><g><title>inferred_outlives_crate (223,272 samples, 0.13%)</title><rect x="67.7609%" y="165" width="0.1294%" height="15" fill="rgb(223,113,26)"/><text x="68.0109%" y="175.50"></text></g><g><title>type_collecting (2,546,178 samples, 1.48%)</title><rect x="66.4982%" y="245" width="1.4751%" height="15" fill="rgb(206,192,2)"/><text x="66.7482%" y="255.50"></text></g><g><title>collect_mod_item_types (2,538,688 samples, 1.47%)</title><rect x="66.5025%" y="229" width="1.4708%" height="15" fill="rgb(241,108,4)"/><text x="66.7525%" y="239.50"></text></g><g><title>evaluate_obligation (602,086 samples, 0.35%)</title><rect x="69.3958%" y="213" width="0.3488%" height="15" fill="rgb(247,173,49)"/><text x="69.6458%" y="223.50"></text></g><g><title>implied_outlives_bounds (313,438 samples, 0.18%)</title><rect x="69.7446%" y="213" width="0.1816%" height="15" fill="rgb(224,114,35)"/><text x="69.9946%" y="223.50"></text></g><g><title>param_env (378,923 samples, 0.22%)</title><rect x="69.9345%" y="213" width="0.2195%" height="15" fill="rgb(245,159,27)"/><text x="70.1845%" y="223.50"></text></g><g><title>region_scope_tree (548,617 samples, 0.32%)</title><rect x="70.1871%" y="213" width="0.3178%" height="15" fill="rgb(245,172,44)"/><text x="70.4371%" y="223.50"></text></g><g><title>check_impl_item_well_formed (4,151,476 samples, 2.41%)</title><rect x="68.1358%" y="229" width="2.4051%" height="15" fill="rgb(236,23,11)"/><text x="68.3858%" y="239.50">ch..</text></g><g><title>mir_borrowck (356,844 samples, 0.21%)</title><rect x="71.5888%" y="133" width="0.2067%" height="15" fill="rgb(205,117,38)"/><text x="71.8388%" y="143.50"></text></g><g><title>mir_for_ctfe (485,845 samples, 0.28%)</title><rect x="71.5143%" y="165" width="0.2815%" height="15" fill="rgb(237,72,25)"/><text x="71.7643%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (446,905 samples, 0.26%)</title><rect x="71.5368%" y="149" width="0.2589%" height="15" fill="rgb(244,70,9)"/><text x="71.7868%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (179,652 samples, 0.10%)</title><rect x="72.1282%" y="37" width="0.1041%" height="15" fill="rgb(217,125,39)"/><text x="72.3782%" y="47.50"></text></g><g><title>eval_to_const_value_raw (327,383 samples, 0.19%)</title><rect x="72.0589%" y="85" width="0.1897%" height="15" fill="rgb(235,36,10)"/><text x="72.3089%" y="95.50"></text></g><g><title>eval_to_const_value_raw (326,753 samples, 0.19%)</title><rect x="72.0593%" y="69" width="0.1893%" height="15" fill="rgb(251,123,47)"/><text x="72.3093%" y="79.50"></text></g><g><title>eval_to_allocation_raw (325,823 samples, 0.19%)</title><rect x="72.0598%" y="53" width="0.1888%" height="15" fill="rgb(221,13,13)"/><text x="72.3098%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (334,023 samples, 0.19%)</title><rect x="72.0567%" y="101" width="0.1935%" height="15" fill="rgb(238,131,9)"/><text x="72.3067%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,024,772 samples, 0.59%)</title><rect x="71.7998%" y="149" width="0.5937%" height="15" fill="rgb(211,50,8)"/><text x="72.0498%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,023,562 samples, 0.59%)</title><rect x="71.8005%" y="133" width="0.5930%" height="15" fill="rgb(245,182,24)"/><text x="72.0505%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,021,761 samples, 0.59%)</title><rect x="71.8016%" y="117" width="0.5919%" height="15" fill="rgb(242,14,37)"/><text x="72.0516%" y="127.50"></text></g><g><title>typeck (247,373 samples, 0.14%)</title><rect x="72.2502%" y="101" width="0.1433%" height="15" fill="rgb(246,228,12)"/><text x="72.5002%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,034,812 samples, 0.60%)</title><rect x="71.7959%" y="165" width="0.5995%" height="15" fill="rgb(213,55,15)"/><text x="72.0459%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,930,252 samples, 1.12%)</title><rect x="71.3349%" y="213" width="1.1183%" height="15" fill="rgb(209,9,3)"/><text x="71.5849%" y="223.50"></text></g><g><title>eval_to_const_value_raw (1,916,731 samples, 1.11%)</title><rect x="71.3427%" y="197" width="1.1104%" height="15" fill="rgb(230,59,30)"/><text x="71.5927%" y="207.50"></text></g><g><title>eval_to_allocation_raw (1,914,651 samples, 1.11%)</title><rect x="71.3439%" y="181" width="1.1092%" height="15" fill="rgb(209,121,21)"/><text x="71.5939%" y="191.50"></text></g><g><title>evaluate_obligation (261,313 samples, 0.15%)</title><rect x="72.4532%" y="213" width="0.1514%" height="15" fill="rgb(220,109,13)"/><text x="72.7032%" y="223.50"></text></g><g><title>param_env (297,886 samples, 0.17%)</title><rect x="72.6771%" y="213" width="0.1726%" height="15" fill="rgb(232,18,1)"/><text x="72.9271%" y="223.50"></text></g><g><title>check_item_well_formed (4,243,398 samples, 2.46%)</title><rect x="70.5409%" y="229" width="2.4584%" height="15" fill="rgb(215,41,42)"/><text x="70.7909%" y="239.50">ch..</text></g><g><title>evaluate_obligation (266,263 samples, 0.15%)</title><rect x="73.3947%" y="213" width="0.1543%" height="15" fill="rgb(224,123,36)"/><text x="73.6447%" y="223.50"></text></g><g><title>analysis (126,670,669 samples, 73.39%)</title><rect x="0.3381%" y="277" width="73.3852%" height="15" fill="rgb(240,125,3)"/><text x="0.5881%" y="287.50">analysis</text></g><g><title>type_check_crate (74,665,875 samples, 43.26%)</title><rect x="30.4665%" y="261" width="43.2568%" height="15" fill="rgb(205,98,50)"/><text x="30.7165%" y="271.50">type_check_crate</text></g><g><title>wf_checking (9,915,869 samples, 5.74%)</title><rect x="67.9787%" y="245" width="5.7446%" height="15" fill="rgb(205,185,37)"/><text x="68.2287%" y="255.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,249,834 samples, 0.72%)</title><rect x="72.9993%" y="229" width="0.7241%" height="15" fill="rgb(238,207,15)"/><text x="73.2493%" y="239.50"></text></g><g><title>codegen_crate (316,804 samples, 0.18%)</title><rect x="73.7294%" y="277" width="0.1835%" height="15" fill="rgb(213,199,42)"/><text x="73.9794%" y="287.50"></text></g><g><title>AST_validation (234,292 samples, 0.14%)</title><rect x="74.0186%" y="261" width="0.1357%" height="15" fill="rgb(235,201,11)"/><text x="74.2686%" y="271.50"></text></g><g><title>metadata_load_macro (426,064 samples, 0.25%)</title><rect x="85.0844%" y="229" width="0.2468%" height="15" fill="rgb(207,46,11)"/><text x="85.3344%" y="239.50"></text></g><g><title>metadata_register_crate (211,923 samples, 0.12%)</title><rect x="85.3313%" y="229" width="0.1228%" height="15" fill="rgb(241,35,35)"/><text x="85.5813%" y="239.50"></text></g><g><title>macro_expand_crate (19,474,626 samples, 11.28%)</title><rect x="74.2554%" y="261" width="11.2824%" height="15" fill="rgb(243,32,47)"/><text x="74.5054%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (19,462,576 samples, 11.28%)</title><rect x="74.2624%" y="245" width="11.2754%" height="15" fill="rgb(247,202,23)"/><text x="74.5124%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (602,367 samples, 0.35%)</title><rect x="85.5395%" y="261" width="0.3490%" height="15" fill="rgb(219,102,11)"/><text x="85.7895%" y="271.50"></text></g><g><title>late_resolve_crate (2,998,532 samples, 1.74%)</title><rect x="85.9956%" y="245" width="1.7372%" height="15" fill="rgb(243,110,44)"/><text x="86.2456%" y="255.50"></text></g><g><title>configure_and_expand (24,033,576 samples, 13.92%)</title><rect x="73.9129%" y="277" width="13.9236%" height="15" fill="rgb(222,74,54)"/><text x="74.1629%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (3,362,507 samples, 1.95%)</title><rect x="85.8885%" y="261" width="1.9480%" height="15" fill="rgb(216,99,12)"/><text x="86.1385%" y="271.50">r..</text></g><g><title>drop_ast (410,954 samples, 0.24%)</title><rect x="87.8365%" y="277" width="0.2381%" height="15" fill="rgb(226,22,26)"/><text x="88.0865%" y="287.50"></text></g><g><title>early_lint_checks (690,678 samples, 0.40%)</title><rect x="88.0825%" y="277" width="0.4001%" height="15" fill="rgb(217,163,10)"/><text x="88.3325%" y="287.50"></text></g><g><title>free_global_ctxt (3,103,644 samples, 1.80%)</title><rect x="88.4826%" y="277" width="1.7981%" height="15" fill="rgb(213,25,53)"/><text x="88.7326%" y="287.50">f..</text></g><g><title>generate_crate_metadata (1,443,896 samples, 0.84%)</title><rect x="90.2807%" y="277" width="0.8365%" height="15" fill="rgb(252,105,26)"/><text x="90.5307%" y="287.50"></text></g><g><title>hir_lowering (4,727,572 samples, 2.74%)</title><rect x="91.1172%" y="277" width="2.7389%" height="15" fill="rgb(220,39,43)"/><text x="91.3672%" y="287.50">hi..</text></g><g><title>parse_crate (8,983,019 samples, 5.20%)</title><rect x="93.8900%" y="277" width="5.2042%" height="15" fill="rgb(229,68,48)"/><text x="94.1400%" y="287.50">parse_..</text></g><g><title>prepare_outputs (186,212 samples, 0.11%)</title><rect x="99.0980%" y="277" width="0.1079%" height="15" fill="rgb(252,8,32)"/><text x="99.3480%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (885,500 samples, 0.51%)</title><rect x="99.2058%" y="277" width="0.5130%" height="15" fill="rgb(223,20,43)"/><text x="99.4558%" y="287.50"></text></g><g><title>all (172,610,587 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (172,610,587 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (382,394 samples, 0.22%)</title><rect x="99.7785%" y="277" width="0.2215%" height="15" fill="rgb(249,185,26)"/><text x="100.0285%" y="287.50"></text></g></svg></svg>