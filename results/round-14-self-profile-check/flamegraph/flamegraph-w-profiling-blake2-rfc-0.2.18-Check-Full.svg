<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (275,194 samples, 0.13%)</title><rect x="14.0759%" y="101" width="0.1281%" height="15" fill="rgb(227,0,7)"/><text x="14.3259%" y="111.50"></text></g><g><title>needs_drop_raw (604,309 samples, 0.28%)</title><rect x="16.6172%" y="85" width="0.2814%" height="15" fill="rgb(217,0,24)"/><text x="16.8672%" y="95.50"></text></g><g><title>is_copy_raw (359,205 samples, 0.17%)</title><rect x="16.7313%" y="69" width="0.1673%" height="15" fill="rgb(221,193,54)"/><text x="16.9813%" y="79.50"></text></g><g><title>evaluate_obligation (301,135 samples, 0.14%)</title><rect x="16.7584%" y="53" width="0.1402%" height="15" fill="rgb(248,212,6)"/><text x="17.0084%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (280,596 samples, 0.13%)</title><rect x="17.0325%" y="69" width="0.1307%" height="15" fill="rgb(208,68,35)"/><text x="17.2825%" y="79.50"></text></g><g><title>impl_parent (297,393 samples, 0.14%)</title><rect x="17.4778%" y="53" width="0.1385%" height="15" fill="rgb(232,128,0)"/><text x="17.7278%" y="63.50"></text></g><g><title>specialization_graph_of (1,409,976 samples, 0.66%)</title><rect x="17.1870%" y="69" width="0.6565%" height="15" fill="rgb(207,160,47)"/><text x="17.4370%" y="79.50"></text></g><g><title>impl_trait_ref (488,065 samples, 0.23%)</title><rect x="17.6163%" y="53" width="0.2273%" height="15" fill="rgb(228,23,34)"/><text x="17.8663%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (420,495 samples, 0.20%)</title><rect x="17.6478%" y="37" width="0.1958%" height="15" fill="rgb(218,30,26)"/><text x="17.8978%" y="47.50"></text></g><g><title>resolve_instance (2,139,315 samples, 1.00%)</title><rect x="16.8986%" y="85" width="0.9962%" height="15" fill="rgb(220,122,19)"/><text x="17.1486%" y="95.50"></text></g><g><title>thir_body (2,200,643 samples, 1.02%)</title><rect x="17.9118%" y="85" width="1.0247%" height="15" fill="rgb(250,228,42)"/><text x="18.1618%" y="95.50"></text></g><g><title>mir_const (12,806,232 samples, 5.96%)</title><rect x="12.9824%" y="133" width="5.9631%" height="15" fill="rgb(240,193,28)"/><text x="13.2324%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (11,367,198 samples, 5.29%)</title><rect x="13.6525%" y="117" width="5.2931%" height="15" fill="rgb(216,20,37)"/><text x="13.9025%" y="127.50">unsafe..</text></g><g><title>mir_built (10,182,694 samples, 4.74%)</title><rect x="14.2040%" y="101" width="4.7415%" height="15" fill="rgb(206,188,39)"/><text x="14.4540%" y="111.50">mir_bu..</text></g><g><title>thir_body (217,613 samples, 0.10%)</title><rect x="19.3793%" y="69" width="0.1013%" height="15" fill="rgb(217,207,13)"/><text x="19.6293%" y="79.50"></text></g><g><title>mir_const_qualif (1,158,796 samples, 0.54%)</title><rect x="18.9455%" y="133" width="0.5396%" height="15" fill="rgb(231,73,38)"/><text x="19.1955%" y="143.50"></text></g><g><title>mir_const (919,072 samples, 0.43%)</title><rect x="19.0572%" y="117" width="0.4280%" height="15" fill="rgb(225,20,46)"/><text x="19.3072%" y="127.50"></text></g><g><title>unsafety_check_result (698,910 samples, 0.33%)</title><rect x="19.1597%" y="101" width="0.3254%" height="15" fill="rgb(210,31,41)"/><text x="19.4097%" y="111.50"></text></g><g><title>mir_built (629,980 samples, 0.29%)</title><rect x="19.1918%" y="85" width="0.2933%" height="15" fill="rgb(221,200,47)"/><text x="19.4418%" y="95.50"></text></g><g><title>mir_promoted (15,561,938 samples, 7.25%)</title><rect x="12.2394%" y="149" width="7.2463%" height="15" fill="rgb(226,26,5)"/><text x="12.4894%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (379,244 samples, 0.18%)</title><rect x="19.4892%" y="149" width="0.1766%" height="15" fill="rgb(249,33,26)"/><text x="19.7392%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (367,812 samples, 0.17%)</title><rect x="19.6658%" y="149" width="0.1713%" height="15" fill="rgb(235,183,28)"/><text x="19.9158%" y="159.50"></text></g><g><title>normalize_projection_ty (241,962 samples, 0.11%)</title><rect x="19.7244%" y="133" width="0.1127%" height="15" fill="rgb(221,5,38)"/><text x="19.9744%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,500,474 samples, 0.70%)</title><rect x="19.9050%" y="149" width="0.6987%" height="15" fill="rgb(247,18,42)"/><text x="20.1550%" y="159.50"></text></g><g><title>MIR_borrow_checking (42,799,863 samples, 19.93%)</title><rect x="0.6775%" y="181" width="19.9294%" height="15" fill="rgb(241,131,45)"/><text x="0.9275%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,556,542 samples, 19.82%)</title><rect x="0.7908%" y="165" width="19.8161%" height="15" fill="rgb(249,31,29)"/><text x="1.0408%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (609,356 samples, 0.28%)</title><rect x="20.6069%" y="181" width="0.2837%" height="15" fill="rgb(225,111,53)"/><text x="20.8569%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (468,175 samples, 0.22%)</title><rect x="20.6727%" y="165" width="0.2180%" height="15" fill="rgb(238,160,17)"/><text x="20.9227%" y="175.50"></text></g><g><title>hir_module_items (294,932 samples, 0.14%)</title><rect x="20.8907%" y="181" width="0.1373%" height="15" fill="rgb(214,148,48)"/><text x="21.1407%" y="191.50"></text></g><g><title>should_inherit_track_caller (261,712 samples, 0.12%)</title><rect x="21.3548%" y="133" width="0.1219%" height="15" fill="rgb(232,36,49)"/><text x="21.6048%" y="143.50"></text></g><g><title>codegen_fn_attrs (517,664 samples, 0.24%)</title><rect x="21.2431%" y="149" width="0.2410%" height="15" fill="rgb(209,103,24)"/><text x="21.4931%" y="159.50"></text></g><g><title>check_mod_attrs (944,169 samples, 0.44%)</title><rect x="21.0446%" y="165" width="0.4396%" height="15" fill="rgb(229,88,8)"/><text x="21.2946%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (500,927 samples, 0.23%)</title><rect x="21.6346%" y="165" width="0.2333%" height="15" fill="rgb(213,181,19)"/><text x="21.8846%" y="175.50"></text></g><g><title>misc_checking_1 (1,877,011 samples, 0.87%)</title><rect x="21.0282%" y="181" width="0.8740%" height="15" fill="rgb(254,191,54)"/><text x="21.2782%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (660,307 samples, 0.31%)</title><rect x="21.9028%" y="165" width="0.3075%" height="15" fill="rgb(241,83,37)"/><text x="22.1528%" y="175.50"></text></g><g><title>check_mod_liveness (484,857 samples, 0.23%)</title><rect x="21.9845%" y="149" width="0.2258%" height="15" fill="rgb(233,36,39)"/><text x="22.2345%" y="159.50"></text></g><g><title>misc_checking_2 (1,558,107 samples, 0.73%)</title><rect x="21.9022%" y="181" width="0.7255%" height="15" fill="rgb(226,3,54)"/><text x="22.1522%" y="191.50"></text></g><g><title>match_checking (896,400 samples, 0.42%)</title><rect x="22.2103%" y="165" width="0.4174%" height="15" fill="rgb(245,192,40)"/><text x="22.4603%" y="175.50"></text></g><g><title>check_match (836,179 samples, 0.39%)</title><rect x="22.2384%" y="149" width="0.3894%" height="15" fill="rgb(238,167,29)"/><text x="22.4884%" y="159.50"></text></g><g><title>check_private_in_public (344,984 samples, 0.16%)</title><rect x="22.6330%" y="165" width="0.1606%" height="15" fill="rgb(232,182,51)"/><text x="22.8830%" y="175.50"></text></g><g><title>death_checking (965,091 samples, 0.45%)</title><rect x="22.7937%" y="165" width="0.4494%" height="15" fill="rgb(231,60,39)"/><text x="23.0437%" y="175.50"></text></g><g><title>item_attrs (403,355 samples, 0.19%)</title><rect x="23.0552%" y="149" width="0.1878%" height="15" fill="rgb(208,69,12)"/><text x="23.3052%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (401,955 samples, 0.19%)</title><rect x="23.0559%" y="133" width="0.1872%" height="15" fill="rgb(235,93,37)"/><text x="23.3059%" y="143.50"></text></g><g><title>eval_to_const_value_raw (455,245 samples, 0.21%)</title><rect x="23.8583%" y="133" width="0.2120%" height="15" fill="rgb(213,116,39)"/><text x="24.1083%" y="143.50"></text></g><g><title>eval_to_const_value_raw (447,885 samples, 0.21%)</title><rect x="23.8617%" y="117" width="0.2086%" height="15" fill="rgb(222,207,29)"/><text x="24.1117%" y="127.50"></text></g><g><title>eval_to_allocation_raw (433,385 samples, 0.20%)</title><rect x="23.8684%" y="101" width="0.2018%" height="15" fill="rgb(206,96,30)"/><text x="24.1184%" y="111.50"></text></g><g><title>param_env (374,874 samples, 0.17%)</title><rect x="24.0702%" y="133" width="0.1746%" height="15" fill="rgb(218,138,4)"/><text x="24.3202%" y="143.50"></text></g><g><title>crate_lints (3,274,377 samples, 1.52%)</title><rect x="23.2438%" y="149" width="1.5247%" height="15" fill="rgb(250,191,14)"/><text x="23.4938%" y="159.50"></text></g><g><title>type_of (1,122,002 samples, 0.52%)</title><rect x="24.2460%" y="133" width="0.5225%" height="15" fill="rgb(239,60,40)"/><text x="24.4960%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (892,389 samples, 0.42%)</title><rect x="24.3529%" y="117" width="0.4155%" height="15" fill="rgb(206,27,48)"/><text x="24.6029%" y="127.50"></text></g><g><title>lint_checking (4,258,487 samples, 1.98%)</title><rect x="23.2430%" y="165" width="1.9829%" height="15" fill="rgb(225,35,8)"/><text x="23.4930%" y="175.50">l..</text></g><g><title>module_lints (982,560 samples, 0.46%)</title><rect x="24.7685%" y="149" width="0.4575%" height="15" fill="rgb(250,213,24)"/><text x="25.0185%" y="159.50"></text></g><g><title>lint_mod (970,800 samples, 0.45%)</title><rect x="24.7739%" y="133" width="0.4520%" height="15" fill="rgb(247,123,22)"/><text x="25.0239%" y="143.50"></text></g><g><title>privacy_access_levels (343,024 samples, 0.16%)</title><rect x="25.2260%" y="165" width="0.1597%" height="15" fill="rgb(231,138,38)"/><text x="25.4760%" y="175.50"></text></g><g><title>privacy_checking_modules (1,282,224 samples, 0.60%)</title><rect x="25.3857%" y="165" width="0.5971%" height="15" fill="rgb(231,145,46)"/><text x="25.6357%" y="175.50"></text></g><g><title>check_mod_privacy (1,275,224 samples, 0.59%)</title><rect x="25.3890%" y="149" width="0.5938%" height="15" fill="rgb(251,118,11)"/><text x="25.6390%" y="159.50"></text></g><g><title>misc_checking_3 (7,229,260 samples, 3.37%)</title><rect x="22.6277%" y="181" width="3.3663%" height="15" fill="rgb(217,147,25)"/><text x="22.8777%" y="191.50">mis..</text></g><g><title>adt_destructor (339,474 samples, 0.16%)</title><rect x="26.0946%" y="133" width="0.1581%" height="15" fill="rgb(247,81,37)"/><text x="26.3446%" y="143.50"></text></g><g><title>coherent_trait (334,424 samples, 0.16%)</title><rect x="26.0969%" y="117" width="0.1557%" height="15" fill="rgb(209,12,38)"/><text x="26.3469%" y="127.50"></text></g><g><title>specialization_graph_of (333,054 samples, 0.16%)</title><rect x="26.0976%" y="101" width="0.1551%" height="15" fill="rgb(227,1,9)"/><text x="26.3476%" y="111.50"></text></g><g><title>is_copy_raw (258,233 samples, 0.12%)</title><rect x="26.2527%" y="133" width="0.1202%" height="15" fill="rgb(248,47,43)"/><text x="26.5027%" y="143.50"></text></g><g><title>evaluate_obligation (232,532 samples, 0.11%)</title><rect x="26.2646%" y="117" width="0.1083%" height="15" fill="rgb(221,10,30)"/><text x="26.5146%" y="127.50"></text></g><g><title>impl_parent (2,689,568 samples, 1.25%)</title><rect x="28.6322%" y="117" width="1.2524%" height="15" fill="rgb(210,229,1)"/><text x="28.8822%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,551,948 samples, 0.72%)</title><rect x="29.1619%" y="101" width="0.7227%" height="15" fill="rgb(222,148,37)"/><text x="29.4119%" y="111.50"></text></g><g><title>impl_trait_ref (6,058,075 samples, 2.82%)</title><rect x="29.8846%" y="117" width="2.8209%" height="15" fill="rgb(234,67,33)"/><text x="30.1346%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,919,217 samples, 2.29%)</title><rect x="30.4149%" y="101" width="2.2906%" height="15" fill="rgb(247,98,35)"/><text x="30.6649%" y="111.50">m..</text></g><g><title>coherent_trait (15,088,897 samples, 7.03%)</title><rect x="26.0587%" y="149" width="7.0260%" height="15" fill="rgb(247,138,52)"/><text x="26.3087%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (14,285,637 samples, 6.65%)</title><rect x="26.4328%" y="133" width="6.6520%" height="15" fill="rgb(213,79,30)"/><text x="26.6828%" y="143.50">specializ..</text></g><g><title>trait_impls_of (812,957 samples, 0.38%)</title><rect x="32.7062%" y="117" width="0.3785%" height="15" fill="rgb(246,177,23)"/><text x="32.9562%" y="127.50"></text></g><g><title>implementations_of_trait (260,174 samples, 0.12%)</title><rect x="32.9636%" y="101" width="0.1211%" height="15" fill="rgb(230,62,27)"/><text x="33.2136%" y="111.50"></text></g><g><title>coherence_checking (15,189,948 samples, 7.07%)</title><rect x="26.0486%" y="165" width="7.0731%" height="15" fill="rgb(216,154,8)"/><text x="26.2986%" y="175.50">coherence..</text></g><g><title>associated_item (445,454 samples, 0.21%)</title><rect x="61.0574%" y="101" width="0.2074%" height="15" fill="rgb(244,35,45)"/><text x="61.3074%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (358,872 samples, 0.17%)</title><rect x="61.0977%" y="85" width="0.1671%" height="15" fill="rgb(251,115,12)"/><text x="61.3477%" y="95.50"></text></g><g><title>associated_items (628,788 samples, 0.29%)</title><rect x="60.9862%" y="117" width="0.2928%" height="15" fill="rgb(240,54,50)"/><text x="61.2362%" y="127.50"></text></g><g><title>adt_dtorck_constraint (227,593 samples, 0.11%)</title><rect x="61.4439%" y="85" width="0.1060%" height="15" fill="rgb(233,84,52)"/><text x="61.6939%" y="95.50"></text></g><g><title>adt_dtorck_constraint (367,664 samples, 0.17%)</title><rect x="61.3917%" y="101" width="0.1712%" height="15" fill="rgb(207,117,47)"/><text x="61.6417%" y="111.50"></text></g><g><title>dropck_outlives (568,248 samples, 0.26%)</title><rect x="61.3070%" y="117" width="0.2646%" height="15" fill="rgb(249,43,39)"/><text x="61.5570%" y="127.50"></text></g><g><title>generics_of (1,150,673 samples, 0.54%)</title><rect x="63.7869%" y="101" width="0.5358%" height="15" fill="rgb(209,38,44)"/><text x="64.0369%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (919,170 samples, 0.43%)</title><rect x="63.8947%" y="85" width="0.4280%" height="15" fill="rgb(236,212,23)"/><text x="64.1447%" y="95.50"></text></g><g><title>impl_trait_ref (1,086,492 samples, 0.51%)</title><rect x="64.4437%" y="101" width="0.5059%" height="15" fill="rgb(242,79,21)"/><text x="64.6937%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (705,399 samples, 0.33%)</title><rect x="64.6212%" y="85" width="0.3285%" height="15" fill="rgb(211,96,35)"/><text x="64.8712%" y="95.50"></text></g><g><title>predicates_of (654,777 samples, 0.30%)</title><rect x="64.9687%" y="101" width="0.3049%" height="15" fill="rgb(253,215,40)"/><text x="65.2187%" y="111.50"></text></g><g><title>predicates_defined_on (379,635 samples, 0.18%)</title><rect x="65.0968%" y="85" width="0.1768%" height="15" fill="rgb(211,81,21)"/><text x="65.3468%" y="95.50"></text></g><g><title>specializes (1,529,458 samples, 0.71%)</title><rect x="65.2736%" y="101" width="0.7122%" height="15" fill="rgb(208,190,38)"/><text x="65.5236%" y="111.50"></text></g><g><title>param_env (923,648 samples, 0.43%)</title><rect x="65.5557%" y="85" width="0.4301%" height="15" fill="rgb(235,213,38)"/><text x="65.8057%" y="95.50"></text></g><g><title>def_span (424,734 samples, 0.20%)</title><rect x="65.7880%" y="69" width="0.1978%" height="15" fill="rgb(237,122,38)"/><text x="66.0380%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (379,573 samples, 0.18%)</title><rect x="65.8091%" y="53" width="0.1767%" height="15" fill="rgb(244,218,35)"/><text x="66.0591%" y="63.50"></text></g><g><title>trait_impls_of (537,445 samples, 0.25%)</title><rect x="65.9930%" y="101" width="0.2503%" height="15" fill="rgb(240,68,47)"/><text x="66.2430%" y="111.50"></text></g><g><title>evaluate_obligation (10,080,428 samples, 4.69%)</title><rect x="61.5716%" y="117" width="4.6939%" height="15" fill="rgb(210,16,53)"/><text x="61.8216%" y="127.50">evalu..</text></g><g><title>generics_of (753,436 samples, 0.35%)</title><rect x="66.3435%" y="117" width="0.3508%" height="15" fill="rgb(235,124,12)"/><text x="66.5935%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (596,804 samples, 0.28%)</title><rect x="66.4164%" y="101" width="0.2779%" height="15" fill="rgb(224,169,11)"/><text x="66.6664%" y="111.50"></text></g><g><title>impl_item_implementor_ids (256,454 samples, 0.12%)</title><rect x="66.6948%" y="117" width="0.1194%" height="15" fill="rgb(250,166,2)"/><text x="66.9448%" y="127.50"></text></g><g><title>associated_items (233,673 samples, 0.11%)</title><rect x="66.7054%" y="101" width="0.1088%" height="15" fill="rgb(242,216,29)"/><text x="66.9554%" y="111.50"></text></g><g><title>item_attrs (284,475 samples, 0.13%)</title><rect x="66.8942%" y="117" width="0.1325%" height="15" fill="rgb(230,116,27)"/><text x="67.1442%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (275,745 samples, 0.13%)</title><rect x="66.8983%" y="101" width="0.1284%" height="15" fill="rgb(228,99,48)"/><text x="67.1483%" y="111.50"></text></g><g><title>method_autoderef_steps (339,084 samples, 0.16%)</title><rect x="67.0584%" y="117" width="0.1579%" height="15" fill="rgb(253,11,6)"/><text x="67.3084%" y="127.50"></text></g><g><title>param_env (377,744 samples, 0.18%)</title><rect x="67.2993%" y="117" width="0.1759%" height="15" fill="rgb(247,143,39)"/><text x="67.5493%" y="127.50"></text></g><g><title>predicates_of (394,284 samples, 0.18%)</title><rect x="67.4926%" y="117" width="0.1836%" height="15" fill="rgb(236,97,10)"/><text x="67.7426%" y="127.50"></text></g><g><title>predicates_defined_on (277,873 samples, 0.13%)</title><rect x="67.5468%" y="101" width="0.1294%" height="15" fill="rgb(233,208,19)"/><text x="67.7968%" y="111.50"></text></g><g><title>item_bodies_checking (74,559,374 samples, 34.72%)</title><rect x="33.1463%" y="165" width="34.7180%" height="15" fill="rgb(216,164,2)"/><text x="33.3963%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (74,555,954 samples, 34.72%)</title><rect x="33.1479%" y="149" width="34.7164%" height="15" fill="rgb(220,129,5)"/><text x="33.3979%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (74,375,003 samples, 34.63%)</title><rect x="33.2321%" y="133" width="34.6322%" height="15" fill="rgb(242,17,10)"/><text x="33.4821%" y="143.50">typeck</text></g><g><title>predicates_of (239,183 samples, 0.11%)</title><rect x="68.4427%" y="133" width="0.1114%" height="15" fill="rgb(242,107,0)"/><text x="68.6927%" y="143.50"></text></g><g><title>predicates_defined_on (233,253 samples, 0.11%)</title><rect x="68.4455%" y="117" width="0.1086%" height="15" fill="rgb(251,28,31)"/><text x="68.6955%" y="127.50"></text></g><g><title>item_types_checking (1,843,810 samples, 0.86%)</title><rect x="67.8643%" y="165" width="0.8586%" height="15" fill="rgb(233,223,10)"/><text x="68.1143%" y="175.50"></text></g><g><title>check_mod_item_types (1,834,290 samples, 0.85%)</title><rect x="67.8687%" y="149" width="0.8541%" height="15" fill="rgb(215,21,27)"/><text x="68.1187%" y="159.50"></text></g><g><title>typeck (362,493 samples, 0.17%)</title><rect x="68.5541%" y="133" width="0.1688%" height="15" fill="rgb(232,23,21)"/><text x="68.8041%" y="143.50"></text></g><g><title>late_bound_vars_map (226,242 samples, 0.11%)</title><rect x="69.1023%" y="117" width="0.1053%" height="15" fill="rgb(244,5,23)"/><text x="69.3523%" y="127.50"></text></g><g><title>fn_sig (626,059 samples, 0.29%)</title><rect x="68.9445%" y="133" width="0.2915%" height="15" fill="rgb(226,81,46)"/><text x="69.1945%" y="143.50"></text></g><g><title>named_region_map (222,721 samples, 0.10%)</title><rect x="69.3144%" y="117" width="0.1037%" height="15" fill="rgb(247,70,30)"/><text x="69.5644%" y="127.50"></text></g><g><title>generics_of (419,672 samples, 0.20%)</title><rect x="69.2361%" y="133" width="0.1954%" height="15" fill="rgb(212,68,19)"/><text x="69.4861%" y="143.50"></text></g><g><title>late_bound_vars_map (423,655 samples, 0.20%)</title><rect x="69.6949%" y="85" width="0.1973%" height="15" fill="rgb(240,187,13)"/><text x="69.9449%" y="95.50"></text></g><g><title>resolve_lifetimes (412,755 samples, 0.19%)</title><rect x="69.7000%" y="69" width="0.1922%" height="15" fill="rgb(223,113,26)"/><text x="69.9500%" y="79.50"></text></g><g><title>lint_levels (258,093 samples, 0.12%)</title><rect x="69.7720%" y="53" width="0.1202%" height="15" fill="rgb(206,192,2)"/><text x="70.0220%" y="63.50"></text></g><g><title>explicit_predicates_of (656,418 samples, 0.31%)</title><rect x="69.5983%" y="101" width="0.3057%" height="15" fill="rgb(241,108,4)"/><text x="69.8483%" y="111.50"></text></g><g><title>predicates_of (1,156,262 samples, 0.54%)</title><rect x="69.4748%" y="133" width="0.5384%" height="15" fill="rgb(247,173,49)"/><text x="69.7248%" y="143.50"></text></g><g><title>predicates_defined_on (1,053,152 samples, 0.49%)</title><rect x="69.5228%" y="117" width="0.4904%" height="15" fill="rgb(224,114,35)"/><text x="69.7728%" y="127.50"></text></g><g><title>inferred_outlives_of (234,642 samples, 0.11%)</title><rect x="69.9040%" y="101" width="0.1093%" height="15" fill="rgb(245,159,27)"/><text x="70.1540%" y="111.50"></text></g><g><title>type_collecting (2,967,553 samples, 1.38%)</title><rect x="68.7244%" y="165" width="1.3818%" height="15" fill="rgb(245,172,44)"/><text x="68.9744%" y="175.50"></text></g><g><title>collect_mod_item_types (2,943,862 samples, 1.37%)</title><rect x="68.7354%" y="149" width="1.3708%" height="15" fill="rgb(236,23,11)"/><text x="68.9854%" y="159.50"></text></g><g><title>evaluate_obligation (453,063 samples, 0.21%)</title><rect x="71.1911%" y="133" width="0.2110%" height="15" fill="rgb(205,117,38)"/><text x="71.4411%" y="143.50"></text></g><g><title>param_env (339,751 samples, 0.16%)</title><rect x="71.5071%" y="133" width="0.1582%" height="15" fill="rgb(237,72,25)"/><text x="71.7571%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,665,311 samples, 1.71%)</title><rect x="70.2567%" y="149" width="1.7067%" height="15" fill="rgb(244,70,9)"/><text x="70.5067%" y="159.50"></text></g><g><title>region_scope_tree (604,551 samples, 0.28%)</title><rect x="71.6819%" y="133" width="0.2815%" height="15" fill="rgb(217,125,39)"/><text x="71.9319%" y="143.50"></text></g><g><title>evaluate_obligation (836,939 samples, 0.39%)</title><rect x="72.8563%" y="133" width="0.3897%" height="15" fill="rgb(235,36,10)"/><text x="73.1063%" y="143.50"></text></g><g><title>param_env (383,558 samples, 0.18%)</title><rect x="73.3084%" y="133" width="0.1786%" height="15" fill="rgb(251,123,47)"/><text x="73.5584%" y="143.50"></text></g><g><title>check_item_well_formed (3,618,320 samples, 1.68%)</title><rect x="71.9634%" y="149" width="1.6848%" height="15" fill="rgb(221,13,13)"/><text x="72.2134%" y="159.50"></text></g><g><title>analysis (157,949,985 samples, 73.55%)</title><rect x="0.4459%" y="197" width="73.5483%" height="15" fill="rgb(238,131,9)"/><text x="0.6959%" y="207.50">analysis</text></g><g><title>type_check_crate (103,083,819 samples, 48.00%)</title><rect x="25.9940%" y="181" width="48.0002%" height="15" fill="rgb(211,50,8)"/><text x="26.2440%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,337,592 samples, 3.88%)</title><rect x="70.1119%" y="165" width="3.8823%" height="15" fill="rgb(245,182,24)"/><text x="70.3619%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (742,918 samples, 0.35%)</title><rect x="73.6483%" y="149" width="0.3459%" height="15" fill="rgb(242,14,37)"/><text x="73.8983%" y="159.50"></text></g><g><title>codegen_crate (390,864 samples, 0.18%)</title><rect x="73.9996%" y="197" width="0.1820%" height="15" fill="rgb(246,228,12)"/><text x="74.2496%" y="207.50"></text></g><g><title>AST_validation (296,933 samples, 0.14%)</title><rect x="74.2830%" y="181" width="0.1383%" height="15" fill="rgb(213,55,15)"/><text x="74.5330%" y="191.50"></text></g><g><title>metadata_register_crate (2,304,676 samples, 1.07%)</title><rect x="89.3413%" y="149" width="1.0732%" height="15" fill="rgb(209,9,3)"/><text x="89.5913%" y="159.50"></text></g><g><title>metadata_register_crate (801,278 samples, 0.37%)</title><rect x="90.0414%" y="133" width="0.3731%" height="15" fill="rgb(230,59,30)"/><text x="90.2914%" y="143.50"></text></g><g><title>macro_expand_crate (34,715,164 samples, 16.16%)</title><rect x="74.5160%" y="181" width="16.1649%" height="15" fill="rgb(209,121,21)"/><text x="74.7660%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (34,701,464 samples, 16.16%)</title><rect x="74.5224%" y="165" width="16.1585%" height="15" fill="rgb(220,109,13)"/><text x="74.7724%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (572,064 samples, 0.27%)</title><rect x="90.4145%" y="149" width="0.2664%" height="15" fill="rgb(232,18,1)"/><text x="90.6645%" y="159.50"></text></g><g><title>late_resolve_crate (2,993,083 samples, 1.39%)</title><rect x="90.8273%" y="165" width="1.3937%" height="15" fill="rgb(215,41,42)"/><text x="91.0773%" y="175.50"></text></g><g><title>configure_and_expand (38,923,900 samples, 18.12%)</title><rect x="74.1816%" y="197" width="18.1246%" height="15" fill="rgb(224,123,36)"/><text x="74.4316%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,415,348 samples, 1.59%)</title><rect x="90.7159%" y="181" width="1.5903%" height="15" fill="rgb(240,125,3)"/><text x="90.9659%" y="191.50"></text></g><g><title>drop_ast (362,534 samples, 0.17%)</title><rect x="92.3062%" y="197" width="0.1688%" height="15" fill="rgb(205,98,50)"/><text x="92.5562%" y="207.50"></text></g><g><title>early_lint_checks (669,578 samples, 0.31%)</title><rect x="92.4828%" y="197" width="0.3118%" height="15" fill="rgb(205,185,37)"/><text x="92.7328%" y="207.50"></text></g><g><title>free_global_ctxt (4,663,042 samples, 2.17%)</title><rect x="92.7945%" y="197" width="2.1713%" height="15" fill="rgb(238,207,15)"/><text x="93.0445%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,294,305 samples, 1.07%)</title><rect x="94.9659%" y="197" width="1.0683%" height="15" fill="rgb(213,199,42)"/><text x="95.2159%" y="207.50"></text></g><g><title>hir_lowering (6,057,417 samples, 2.82%)</title><rect x="96.0342%" y="197" width="2.8206%" height="15" fill="rgb(235,201,11)"/><text x="96.2842%" y="207.50">hi..</text></g><g><title>parse_crate (483,565 samples, 0.23%)</title><rect x="98.8805%" y="197" width="0.2252%" height="15" fill="rgb(207,46,11)"/><text x="99.1305%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,237,104 samples, 0.58%)</title><rect x="99.1986%" y="197" width="0.5760%" height="15" fill="rgb(241,35,35)"/><text x="99.4486%" y="207.50"></text></g><g><title>all (214,756,873 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (214,756,873 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (386,804 samples, 0.18%)</title><rect x="99.8199%" y="197" width="0.1801%" height="15" fill="rgb(219,102,11)"/><text x="100.0699%" y="207.50"></text></g></svg></svg>