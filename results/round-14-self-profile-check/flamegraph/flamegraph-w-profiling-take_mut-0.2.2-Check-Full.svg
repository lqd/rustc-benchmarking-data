<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (126,330 samples, 0.23%)</title><rect x="6.7669%" y="133" width="0.2267%" height="15" fill="rgb(227,0,7)"/><text x="7.0169%" y="143.50"></text></g><g><title>is_sized_raw (80,031 samples, 0.14%)</title><rect x="7.0044%" y="133" width="0.1436%" height="15" fill="rgb(217,0,24)"/><text x="7.2544%" y="143.50"></text></g><g><title>param_env (91,802 samples, 0.16%)</title><rect x="8.0136%" y="101" width="0.1647%" height="15" fill="rgb(221,193,54)"/><text x="8.2636%" y="111.50"></text></g><g><title>codegen_fn_attrs (82,350 samples, 0.15%)</title><rect x="8.4282%" y="85" width="0.1478%" height="15" fill="rgb(248,212,6)"/><text x="8.6782%" y="95.50"></text></g><g><title>adt_drop_tys (68,560 samples, 0.12%)</title><rect x="9.9477%" y="53" width="0.1230%" height="15" fill="rgb(208,68,35)"/><text x="10.1977%" y="63.50"></text></g><g><title>needs_drop_raw (528,108 samples, 0.95%)</title><rect x="9.8479%" y="69" width="0.9477%" height="15" fill="rgb(232,128,0)"/><text x="10.0979%" y="79.50"></text></g><g><title>is_copy_raw (403,917 samples, 0.72%)</title><rect x="10.0708%" y="53" width="0.7248%" height="15" fill="rgb(207,160,47)"/><text x="10.3208%" y="63.50"></text></g><g><title>evaluate_obligation (311,624 samples, 0.56%)</title><rect x="10.2364%" y="37" width="0.5592%" height="15" fill="rgb(228,23,34)"/><text x="10.4864%" y="47.50"></text></g><g><title>resolve_instance (70,431 samples, 0.13%)</title><rect x="10.7956%" y="69" width="0.1264%" height="15" fill="rgb(218,30,26)"/><text x="11.0456%" y="79.50"></text></g><g><title>thir_body (243,152 samples, 0.44%)</title><rect x="10.9489%" y="69" width="0.4363%" height="15" fill="rgb(220,122,19)"/><text x="11.1989%" y="79.50"></text></g><g><title>mir_const (2,138,194 samples, 3.84%)</title><rect x="7.5620%" y="117" width="3.8369%" height="15" fill="rgb(250,228,42)"/><text x="7.8120%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (1,794,719 samples, 3.22%)</title><rect x="8.1783%" y="101" width="3.2205%" height="15" fill="rgb(240,193,28)"/><text x="8.4283%" y="111.50">uns..</text></g><g><title>mir_built (1,573,108 samples, 2.82%)</title><rect x="8.5760%" y="85" width="2.8228%" height="15" fill="rgb(216,20,37)"/><text x="8.8260%" y="95.50">mi..</text></g><g><title>mir_promoted (2,380,446 samples, 4.27%)</title><rect x="7.1480%" y="133" width="4.2716%" height="15" fill="rgb(206,188,39)"/><text x="7.3980%" y="143.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (118,890 samples, 0.21%)</title><rect x="11.4769%" y="133" width="0.2133%" height="15" fill="rgb(217,207,13)"/><text x="11.7269%" y="143.50"></text></g><g><title>normalize_projection_ty (66,680 samples, 0.12%)</title><rect x="11.5706%" y="117" width="0.1197%" height="15" fill="rgb(231,73,38)"/><text x="11.8206%" y="127.50"></text></g><g><title>MIR_borrow_checking (6,970,497 samples, 12.51%)</title><rect x="1.5604%" y="165" width="12.5081%" height="15" fill="rgb(225,20,46)"/><text x="1.8104%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,944,357 samples, 12.46%)</title><rect x="1.6073%" y="149" width="12.4612%" height="15" fill="rgb(210,31,41)"/><text x="1.8573%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,325,353 samples, 2.38%)</title><rect x="11.6902%" y="133" width="2.3783%" height="15" fill="rgb(221,200,47)"/><text x="11.9402%" y="143.50">ty..</text></g><g><title>hir_module_items (165,042 samples, 0.30%)</title><rect x="14.0817%" y="165" width="0.2962%" height="15" fill="rgb(226,26,5)"/><text x="14.3317%" y="175.50"></text></g><g><title>get_lang_items (97,692 samples, 0.18%)</title><rect x="14.8815%" y="117" width="0.1753%" height="15" fill="rgb(249,33,26)"/><text x="15.1315%" y="127.50"></text></g><g><title>should_inherit_track_caller (107,392 samples, 0.19%)</title><rect x="15.0568%" y="117" width="0.1927%" height="15" fill="rgb(235,183,28)"/><text x="15.3068%" y="127.50"></text></g><g><title>codegen_fn_attrs (328,885 samples, 0.59%)</title><rect x="14.7245%" y="133" width="0.5902%" height="15" fill="rgb(221,5,38)"/><text x="14.9745%" y="143.50"></text></g><g><title>check_mod_attrs (490,375 samples, 0.88%)</title><rect x="14.4352%" y="149" width="0.8799%" height="15" fill="rgb(247,18,42)"/><text x="14.6852%" y="159.50"></text></g><g><title>check_mod_const_bodies (76,792 samples, 0.14%)</title><rect x="15.3151%" y="149" width="0.1378%" height="15" fill="rgb(241,131,45)"/><text x="15.5651%" y="159.50"></text></g><g><title>lint_levels (73,581 samples, 0.13%)</title><rect x="15.8333%" y="133" width="0.1320%" height="15" fill="rgb(249,31,29)"/><text x="16.0833%" y="143.50"></text></g><g><title>lookup_deprecation_entry (132,392 samples, 0.24%)</title><rect x="15.9653%" y="133" width="0.2376%" height="15" fill="rgb(225,111,53)"/><text x="16.2153%" y="143.50"></text></g><g><title>stability_index (62,761 samples, 0.11%)</title><rect x="16.0902%" y="117" width="0.1126%" height="15" fill="rgb(238,160,17)"/><text x="16.3402%" y="127.50"></text></g><g><title>lookup_stability (65,421 samples, 0.12%)</title><rect x="16.2029%" y="133" width="0.1174%" height="15" fill="rgb(214,148,48)"/><text x="16.4529%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (469,765 samples, 0.84%)</title><rect x="15.5451%" y="149" width="0.8430%" height="15" fill="rgb(232,36,49)"/><text x="15.7951%" y="159.50"></text></g><g><title>misc_checking_1 (1,168,343 samples, 2.10%)</title><rect x="14.3786%" y="165" width="2.0965%" height="15" fill="rgb(209,103,24)"/><text x="14.6286%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (147,402 samples, 0.26%)</title><rect x="16.4775%" y="149" width="0.2645%" height="15" fill="rgb(229,88,8)"/><text x="16.7275%" y="159.50"></text></g><g><title>check_mod_liveness (119,021 samples, 0.21%)</title><rect x="16.5284%" y="133" width="0.2136%" height="15" fill="rgb(213,181,19)"/><text x="16.7784%" y="143.50"></text></g><g><title>misc_checking_2 (324,854 samples, 0.58%)</title><rect x="16.4751%" y="165" width="0.5829%" height="15" fill="rgb(254,191,54)"/><text x="16.7251%" y="175.50"></text></g><g><title>match_checking (176,102 samples, 0.32%)</title><rect x="16.7420%" y="149" width="0.3160%" height="15" fill="rgb(241,83,37)"/><text x="16.9920%" y="159.50"></text></g><g><title>check_match (167,902 samples, 0.30%)</title><rect x="16.7567%" y="133" width="0.3013%" height="15" fill="rgb(233,36,39)"/><text x="17.0067%" y="143.50"></text></g><g><title>check_private_in_public (58,930 samples, 0.11%)</title><rect x="17.0732%" y="149" width="0.1057%" height="15" fill="rgb(226,3,54)"/><text x="17.3232%" y="159.50"></text></g><g><title>death_checking (93,951 samples, 0.17%)</title><rect x="17.1789%" y="149" width="0.1686%" height="15" fill="rgb(245,192,40)"/><text x="17.4289%" y="159.50"></text></g><g><title>param_env (121,842 samples, 0.22%)</title><rect x="18.1442%" y="117" width="0.2186%" height="15" fill="rgb(238,167,29)"/><text x="18.3942%" y="127.50"></text></g><g><title>predicates_of (65,902 samples, 0.12%)</title><rect x="18.2446%" y="101" width="0.1183%" height="15" fill="rgb(232,182,51)"/><text x="18.4946%" y="111.50"></text></g><g><title>trait_impls_of (210,262 samples, 0.38%)</title><rect x="18.3628%" y="117" width="0.3773%" height="15" fill="rgb(231,60,39)"/><text x="18.6128%" y="127.50"></text></g><g><title>crate_lints (3,574,030 samples, 6.41%)</title><rect x="17.3502%" y="133" width="6.4134%" height="15" fill="rgb(208,69,12)"/><text x="17.6002%" y="143.50">crate_li..</text></g><g><title>type_of (2,799,459 samples, 5.02%)</title><rect x="18.7401%" y="117" width="5.0235%" height="15" fill="rgb(235,93,37)"/><text x="18.9901%" y="127.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,553,378 samples, 4.58%)</title><rect x="19.1817%" y="101" width="4.5819%" height="15" fill="rgb(213,116,39)"/><text x="19.4317%" y="111.50">metad..</text></g><g><title>lint_checking (3,688,851 samples, 6.62%)</title><rect x="17.3475%" y="149" width="6.6194%" height="15" fill="rgb(222,207,29)"/><text x="17.5975%" y="159.50">lint_chec..</text></g><g><title>module_lints (113,321 samples, 0.20%)</title><rect x="23.7636%" y="133" width="0.2033%" height="15" fill="rgb(206,96,30)"/><text x="24.0136%" y="143.50"></text></g><g><title>lint_mod (109,991 samples, 0.20%)</title><rect x="23.7696%" y="117" width="0.1974%" height="15" fill="rgb(218,138,4)"/><text x="24.0196%" y="127.50"></text></g><g><title>privacy_access_levels (77,511 samples, 0.14%)</title><rect x="23.9669%" y="149" width="0.1391%" height="15" fill="rgb(250,191,14)"/><text x="24.2169%" y="159.50"></text></g><g><title>privacy_checking_modules (183,112 samples, 0.33%)</title><rect x="24.1060%" y="149" width="0.3286%" height="15" fill="rgb(239,60,40)"/><text x="24.3560%" y="159.50"></text></g><g><title>check_mod_privacy (181,242 samples, 0.33%)</title><rect x="24.1094%" y="133" width="0.3252%" height="15" fill="rgb(206,27,48)"/><text x="24.3594%" y="143.50"></text></g><g><title>misc_checking_3 (4,123,866 samples, 7.40%)</title><rect x="17.0580%" y="165" width="7.4000%" height="15" fill="rgb(225,35,8)"/><text x="17.3080%" y="175.50">misc_check..</text></g><g><title>impl_parent (179,892 samples, 0.32%)</title><rect x="25.0767%" y="101" width="0.3228%" height="15" fill="rgb(250,213,24)"/><text x="25.3267%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (120,092 samples, 0.22%)</title><rect x="25.1840%" y="85" width="0.2155%" height="15" fill="rgb(247,123,22)"/><text x="25.4340%" y="95.50"></text></g><g><title>impl_trait_ref (678,177 samples, 1.22%)</title><rect x="25.3995%" y="101" width="1.2169%" height="15" fill="rgb(231,138,38)"/><text x="25.6495%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (627,067 samples, 1.13%)</title><rect x="25.4913%" y="85" width="1.1252%" height="15" fill="rgb(231,145,46)"/><text x="25.7413%" y="95.50"></text></g><g><title>coherent_trait (1,236,154 samples, 2.22%)</title><rect x="24.5679%" y="133" width="2.2182%" height="15" fill="rgb(251,118,11)"/><text x="24.8179%" y="143.50">c..</text></g><g><title>specialization_graph_of (1,226,994 samples, 2.20%)</title><rect x="24.5843%" y="117" width="2.2018%" height="15" fill="rgb(217,147,25)"/><text x="24.8343%" y="127.50">s..</text></g><g><title>trait_impls_of (94,512 samples, 0.17%)</title><rect x="26.6165%" y="101" width="0.1696%" height="15" fill="rgb(247,81,37)"/><text x="26.8665%" y="111.50"></text></g><g><title>coherence_checking (1,306,434 samples, 2.34%)</title><rect x="24.5357%" y="149" width="2.3443%" height="15" fill="rgb(209,12,38)"/><text x="24.7857%" y="159.50">c..</text></g><g><title>associated_item (115,281 samples, 0.21%)</title><rect x="31.8393%" y="85" width="0.2069%" height="15" fill="rgb(227,1,9)"/><text x="32.0893%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (83,571 samples, 0.15%)</title><rect x="31.8962%" y="69" width="0.1500%" height="15" fill="rgb(248,47,43)"/><text x="32.1462%" y="79.50"></text></g><g><title>associated_items (175,202 samples, 0.31%)</title><rect x="31.7484%" y="101" width="0.3144%" height="15" fill="rgb(221,10,30)"/><text x="31.9984%" y="111.50"></text></g><g><title>dropck_outlives (82,050 samples, 0.15%)</title><rect x="32.0922%" y="101" width="0.1472%" height="15" fill="rgb(210,229,1)"/><text x="32.3422%" y="111.50"></text></g><g><title>predicates_of (71,171 samples, 0.13%)</title><rect x="33.0030%" y="85" width="0.1277%" height="15" fill="rgb(222,148,37)"/><text x="33.2530%" y="95.50"></text></g><g><title>specializes (215,692 samples, 0.39%)</title><rect x="33.1307%" y="85" width="0.3870%" height="15" fill="rgb(234,67,33)"/><text x="33.3807%" y="95.50"></text></g><g><title>param_env (192,142 samples, 0.34%)</title><rect x="33.1730%" y="69" width="0.3448%" height="15" fill="rgb(247,98,35)"/><text x="33.4230%" y="79.50"></text></g><g><title>def_span (165,141 samples, 0.30%)</title><rect x="33.2214%" y="53" width="0.2963%" height="15" fill="rgb(247,138,52)"/><text x="33.4714%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (163,121 samples, 0.29%)</title><rect x="33.2251%" y="37" width="0.2927%" height="15" fill="rgb(213,79,30)"/><text x="33.4751%" y="47.50"></text></g><g><title>evaluate_obligation (1,382,403 samples, 2.48%)</title><rect x="32.2395%" y="101" width="2.4806%" height="15" fill="rgb(246,177,23)"/><text x="32.4895%" y="111.50">ev..</text></g><g><title>trait_impls_of (661,826 samples, 1.19%)</title><rect x="33.5325%" y="85" width="1.1876%" height="15" fill="rgb(230,62,27)"/><text x="33.7825%" y="95.50"></text></g><g><title>implementations_of_trait (203,331 samples, 0.36%)</title><rect x="34.3552%" y="69" width="0.3649%" height="15" fill="rgb(216,154,8)"/><text x="34.6052%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (153,731 samples, 0.28%)</title><rect x="34.4442%" y="53" width="0.2759%" height="15" fill="rgb(244,35,45)"/><text x="34.6942%" y="63.50"></text></g><g><title>generics_of (62,151 samples, 0.11%)</title><rect x="34.8223%" y="101" width="0.1115%" height="15" fill="rgb(251,115,12)"/><text x="35.0723%" y="111.50"></text></g><g><title>item_attrs (99,420 samples, 0.18%)</title><rect x="35.0604%" y="101" width="0.1784%" height="15" fill="rgb(240,54,50)"/><text x="35.3104%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,600 samples, 0.17%)</title><rect x="35.0655%" y="85" width="0.1733%" height="15" fill="rgb(233,84,52)"/><text x="35.3155%" y="95.50"></text></g><g><title>method_autoderef_steps (132,182 samples, 0.24%)</title><rect x="35.2592%" y="101" width="0.2372%" height="15" fill="rgb(207,117,47)"/><text x="35.5092%" y="111.50"></text></g><g><title>evaluate_obligation (86,921 samples, 0.16%)</title><rect x="35.3404%" y="85" width="0.1560%" height="15" fill="rgb(249,43,39)"/><text x="35.5904%" y="95.50"></text></g><g><title>explicit_predicates_of (65,460 samples, 0.12%)</title><rect x="35.6380%" y="69" width="0.1175%" height="15" fill="rgb(209,38,44)"/><text x="35.8880%" y="79.50"></text></g><g><title>predicates_of (161,983 samples, 0.29%)</title><rect x="35.5126%" y="101" width="0.2907%" height="15" fill="rgb(236,212,23)"/><text x="35.7626%" y="111.50"></text></g><g><title>predicates_defined_on (120,562 samples, 0.22%)</title><rect x="35.5870%" y="85" width="0.2163%" height="15" fill="rgb(242,79,21)"/><text x="35.8370%" y="95.50"></text></g><g><title>dropck_outlives (134,721 samples, 0.24%)</title><rect x="41.0463%" y="85" width="0.2417%" height="15" fill="rgb(211,96,35)"/><text x="41.2963%" y="95.50"></text></g><g><title>adt_dtorck_constraint (61,631 samples, 0.11%)</title><rect x="41.1775%" y="69" width="0.1106%" height="15" fill="rgb(253,215,40)"/><text x="41.4275%" y="79.50"></text></g><g><title>evaluate_obligation (454,525 samples, 0.82%)</title><rect x="41.2881%" y="85" width="0.8156%" height="15" fill="rgb(211,81,21)"/><text x="41.5381%" y="95.50"></text></g><g><title>trait_impls_of (65,352 samples, 0.12%)</title><rect x="41.9864%" y="69" width="0.1173%" height="15" fill="rgb(208,190,38)"/><text x="42.2364%" y="79.50"></text></g><g><title>is_copy_raw (72,650 samples, 0.13%)</title><rect x="42.3089%" y="85" width="0.1304%" height="15" fill="rgb(235,213,38)"/><text x="42.5589%" y="95.50"></text></g><g><title>item_attrs (67,821 samples, 0.12%)</title><rect x="42.4393%" y="85" width="0.1217%" height="15" fill="rgb(237,122,38)"/><text x="42.6893%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (65,951 samples, 0.12%)</title><rect x="42.4427%" y="69" width="0.1183%" height="15" fill="rgb(244,218,35)"/><text x="42.6927%" y="79.50"></text></g><g><title>object_safety_violations (164,482 samples, 0.30%)</title><rect x="42.6587%" y="85" width="0.2952%" height="15" fill="rgb(240,68,47)"/><text x="42.9087%" y="95.50"></text></g><g><title>explicit_predicates_of (56,560 samples, 0.10%)</title><rect x="43.0581%" y="53" width="0.1015%" height="15" fill="rgb(210,16,53)"/><text x="43.3081%" y="63.50"></text></g><g><title>predicates_of (131,420 samples, 0.24%)</title><rect x="42.9577%" y="85" width="0.2358%" height="15" fill="rgb(235,124,12)"/><text x="43.2077%" y="95.50"></text></g><g><title>predicates_defined_on (99,490 samples, 0.18%)</title><rect x="43.0150%" y="69" width="0.1785%" height="15" fill="rgb(224,169,11)"/><text x="43.2650%" y="79.50"></text></g><g><title>typeck (4,091,366 samples, 7.34%)</title><rect x="35.9386%" y="101" width="7.3417%" height="15" fill="rgb(250,166,2)"/><text x="36.1886%" y="111.50">typeck</text></g><g><title>item_bodies_checking (9,117,112 samples, 16.36%)</title><rect x="26.9281%" y="149" width="16.3601%" height="15" fill="rgb(242,216,29)"/><text x="27.1781%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,114,612 samples, 16.36%)</title><rect x="26.9326%" y="133" width="16.3556%" height="15" fill="rgb(230,116,27)"/><text x="27.1826%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (9,099,072 samples, 16.33%)</title><rect x="26.9605%" y="117" width="16.3277%" height="15" fill="rgb(228,99,48)"/><text x="27.2105%" y="127.50">typeck</text></g><g><title>item_types_checking (192,112 samples, 0.34%)</title><rect x="43.2882%" y="149" width="0.3447%" height="15" fill="rgb(253,11,6)"/><text x="43.5382%" y="159.50"></text></g><g><title>check_mod_item_types (188,832 samples, 0.34%)</title><rect x="43.2941%" y="133" width="0.3388%" height="15" fill="rgb(247,143,39)"/><text x="43.5441%" y="143.50"></text></g><g><title>fn_sig (122,420 samples, 0.22%)</title><rect x="43.9711%" y="117" width="0.2197%" height="15" fill="rgb(236,97,10)"/><text x="44.2211%" y="127.50"></text></g><g><title>is_late_bound_map (210,681 samples, 0.38%)</title><rect x="44.3985%" y="101" width="0.3781%" height="15" fill="rgb(233,208,19)"/><text x="44.6485%" y="111.50"></text></g><g><title>resolve_lifetimes (194,381 samples, 0.35%)</title><rect x="44.4277%" y="85" width="0.3488%" height="15" fill="rgb(216,164,2)"/><text x="44.6777%" y="95.50"></text></g><g><title>named_region_map (111,141 samples, 0.20%)</title><rect x="44.7765%" y="101" width="0.1994%" height="15" fill="rgb(220,129,5)"/><text x="45.0265%" y="111.50"></text></g><g><title>resolve_lifetimes (96,321 samples, 0.17%)</title><rect x="44.8031%" y="85" width="0.1728%" height="15" fill="rgb(242,17,10)"/><text x="45.0531%" y="95.50"></text></g><g><title>generics_of (449,384 samples, 0.81%)</title><rect x="44.1908%" y="117" width="0.8064%" height="15" fill="rgb(242,107,0)"/><text x="44.4408%" y="127.50"></text></g><g><title>explicit_predicates_of (399,055 samples, 0.72%)</title><rect x="45.1353%" y="85" width="0.7161%" height="15" fill="rgb(251,28,31)"/><text x="45.3853%" y="95.50"></text></g><g><title>predicates_of (755,040 samples, 1.35%)</title><rect x="45.0183%" y="117" width="1.3549%" height="15" fill="rgb(233,223,10)"/><text x="45.2683%" y="127.50"></text></g><g><title>predicates_defined_on (733,769 samples, 1.32%)</title><rect x="45.0564%" y="101" width="1.3167%" height="15" fill="rgb(215,21,27)"/><text x="45.3064%" y="111.50"></text></g><g><title>inferred_outlives_of (290,763 samples, 0.52%)</title><rect x="45.8514%" y="85" width="0.5218%" height="15" fill="rgb(232,23,21)"/><text x="46.1014%" y="95.50"></text></g><g><title>inferred_outlives_crate (277,973 samples, 0.50%)</title><rect x="45.8743%" y="69" width="0.4988%" height="15" fill="rgb(244,5,23)"/><text x="46.1243%" y="79.50"></text></g><g><title>type_of (122,091 samples, 0.22%)</title><rect x="46.1540%" y="53" width="0.2191%" height="15" fill="rgb(226,81,46)"/><text x="46.4040%" y="63.50"></text></g><g><title>type_collecting (1,656,828 samples, 2.97%)</title><rect x="43.6356%" y="149" width="2.9731%" height="15" fill="rgb(247,70,30)"/><text x="43.8856%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (1,644,208 samples, 2.95%)</title><rect x="43.6582%" y="133" width="2.9504%" height="15" fill="rgb(212,68,19)"/><text x="43.9082%" y="143.50">col..</text></g><g><title>type_of (131,251 samples, 0.24%)</title><rect x="46.3731%" y="117" width="0.2355%" height="15" fill="rgb(240,187,13)"/><text x="46.6231%" y="127.50"></text></g><g><title>evaluate_obligation (305,034 samples, 0.55%)</title><rect x="48.0487%" y="117" width="0.5474%" height="15" fill="rgb(223,113,26)"/><text x="48.2987%" y="127.50"></text></g><g><title>implied_outlives_bounds (161,891 samples, 0.29%)</title><rect x="48.5961%" y="117" width="0.2905%" height="15" fill="rgb(206,192,2)"/><text x="48.8461%" y="127.50"></text></g><g><title>param_env (107,913 samples, 0.19%)</title><rect x="48.8866%" y="117" width="0.1936%" height="15" fill="rgb(241,108,4)"/><text x="49.1366%" y="127.50"></text></g><g><title>region_scope_tree (76,890 samples, 0.14%)</title><rect x="49.1281%" y="117" width="0.1380%" height="15" fill="rgb(247,173,49)"/><text x="49.3781%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,437,316 samples, 2.58%)</title><rect x="46.7603%" y="133" width="2.5792%" height="15" fill="rgb(224,114,35)"/><text x="47.0103%" y="143.50">ch..</text></g><g><title>adt_sized_constraint (58,860 samples, 0.11%)</title><rect x="51.1581%" y="117" width="0.1056%" height="15" fill="rgb(245,159,27)"/><text x="51.4081%" y="127.50"></text></g><g><title>adt_def (56,780 samples, 0.10%)</title><rect x="51.1618%" y="101" width="0.1019%" height="15" fill="rgb(245,172,44)"/><text x="51.4118%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (55,840 samples, 0.10%)</title><rect x="51.1635%" y="85" width="0.1002%" height="15" fill="rgb(236,23,11)"/><text x="51.4135%" y="95.50"></text></g><g><title>adt_sized_constraint (68,831 samples, 0.12%)</title><rect x="51.6040%" y="85" width="0.1235%" height="15" fill="rgb(205,117,38)"/><text x="51.8540%" y="95.50"></text></g><g><title>adt_sized_constraint (115,692 samples, 0.21%)</title><rect x="51.5286%" y="101" width="0.2076%" height="15" fill="rgb(237,72,25)"/><text x="51.7786%" y="111.50"></text></g><g><title>evaluate_obligation (265,662 samples, 0.48%)</title><rect x="51.2637%" y="117" width="0.4767%" height="15" fill="rgb(244,70,9)"/><text x="51.5137%" y="127.50"></text></g><g><title>implied_outlives_bounds (147,303 samples, 0.26%)</title><rect x="51.7454%" y="117" width="0.2643%" height="15" fill="rgb(217,125,39)"/><text x="51.9954%" y="127.50"></text></g><g><title>param_env (280,582 samples, 0.50%)</title><rect x="52.0097%" y="117" width="0.5035%" height="15" fill="rgb(235,36,10)"/><text x="52.2597%" y="127.50"></text></g><g><title>region_scope_tree (74,030 samples, 0.13%)</title><rect x="52.5272%" y="117" width="0.1328%" height="15" fill="rgb(251,123,47)"/><text x="52.7772%" y="127.50"></text></g><g><title>analysis (28,781,411 samples, 51.65%)</title><rect x="1.1583%" y="181" width="51.6465%" height="15" fill="rgb(221,13,13)"/><text x="1.4083%" y="191.50">analysis</text></g><g><title>type_check_crate (15,796,966 samples, 28.35%)</title><rect x="24.4580%" y="165" width="28.3467%" height="15" fill="rgb(238,131,9)"/><text x="24.7080%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,451,598 samples, 6.19%)</title><rect x="46.6110%" y="149" width="6.1937%" height="15" fill="rgb(211,50,8)"/><text x="46.8610%" y="159.50">wf_check..</text></g><g><title>check_item_well_formed (1,931,082 samples, 3.47%)</title><rect x="49.3395%" y="133" width="3.4652%" height="15" fill="rgb(245,182,24)"/><text x="49.5895%" y="143.50">che..</text></g><g><title>variances_of (79,801 samples, 0.14%)</title><rect x="52.6615%" y="117" width="0.1432%" height="15" fill="rgb(242,14,37)"/><text x="52.9115%" y="127.50"></text></g><g><title>crate_variances (74,250 samples, 0.13%)</title><rect x="52.6715%" y="101" width="0.1332%" height="15" fill="rgb(246,228,12)"/><text x="52.9215%" y="111.50"></text></g><g><title>codegen_crate (394,034 samples, 0.71%)</title><rect x="52.8247%" y="181" width="0.7071%" height="15" fill="rgb(213,55,15)"/><text x="53.0747%" y="191.50"></text></g><g><title>AST_validation (125,191 samples, 0.22%)</title><rect x="53.9369%" y="165" width="0.2246%" height="15" fill="rgb(209,9,3)"/><text x="54.1869%" y="175.50"></text></g><g><title>crate_injection (95,351 samples, 0.17%)</title><rect x="54.2335%" y="165" width="0.1711%" height="15" fill="rgb(230,59,30)"/><text x="54.4835%" y="175.50"></text></g><g><title>metadata_load_macro (154,311 samples, 0.28%)</title><rect x="75.9413%" y="133" width="0.2769%" height="15" fill="rgb(209,121,21)"/><text x="76.1913%" y="143.50"></text></g><g><title>metadata_register_crate (2,698,100 samples, 4.84%)</title><rect x="76.2182%" y="133" width="4.8416%" height="15" fill="rgb(220,109,13)"/><text x="76.4682%" y="143.50">metada..</text></g><g><title>metadata_register_crate (966,230 samples, 1.73%)</title><rect x="79.3260%" y="117" width="1.7338%" height="15" fill="rgb(232,18,1)"/><text x="79.5760%" y="127.50"></text></g><g><title>metadata_register_crate (73,010 samples, 0.13%)</title><rect x="80.9288%" y="101" width="0.1310%" height="15" fill="rgb(215,41,42)"/><text x="81.1788%" y="111.50"></text></g><g><title>macro_expand_crate (14,987,087 samples, 26.89%)</title><rect x="54.4046%" y="165" width="26.8934%" height="15" fill="rgb(224,123,36)"/><text x="54.6546%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (14,962,086 samples, 26.85%)</title><rect x="54.4495%" y="149" width="26.8485%" height="15" fill="rgb(240,125,3)"/><text x="54.6995%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (132,762 samples, 0.24%)</title><rect x="81.0598%" y="133" width="0.2382%" height="15" fill="rgb(205,98,50)"/><text x="81.3098%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (124,542 samples, 0.22%)</title><rect x="81.3082%" y="165" width="0.2235%" height="15" fill="rgb(205,185,37)"/><text x="81.5582%" y="175.50"></text></g><g><title>finalize_imports (63,741 samples, 0.11%)</title><rect x="81.5477%" y="149" width="0.1144%" height="15" fill="rgb(238,207,15)"/><text x="81.7977%" y="159.50"></text></g><g><title>late_resolve_crate (2,139,964 samples, 3.84%)</title><rect x="81.7080%" y="149" width="3.8400%" height="15" fill="rgb(213,199,42)"/><text x="81.9580%" y="159.50">late..</text></g><g><title>configure_and_expand (17,930,639 samples, 32.18%)</title><rect x="53.5318%" y="181" width="32.1754%" height="15" fill="rgb(235,201,11)"/><text x="53.7818%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,326,916 samples, 4.18%)</title><rect x="81.5317%" y="165" width="4.1755%" height="15" fill="rgb(207,46,11)"/><text x="81.7817%" y="175.50">resol..</text></g><g><title>drop_ast (109,191 samples, 0.20%)</title><rect x="85.7072%" y="181" width="0.1959%" height="15" fill="rgb(241,35,35)"/><text x="85.9572%" y="191.50"></text></g><g><title>early_lint_checks (242,093 samples, 0.43%)</title><rect x="85.9271%" y="181" width="0.4344%" height="15" fill="rgb(243,32,47)"/><text x="86.1771%" y="191.50"></text></g><g><title>free_global_ctxt (2,359,286 samples, 4.23%)</title><rect x="86.3616%" y="181" width="4.2336%" height="15" fill="rgb(247,202,23)"/><text x="86.6116%" y="191.50">free_..</text></g><g><title>crate_hash (67,641 samples, 0.12%)</title><rect x="91.2305%" y="165" width="0.1214%" height="15" fill="rgb(219,102,11)"/><text x="91.4805%" y="175.50"></text></g><g><title>generate_crate_metadata (520,126 samples, 0.93%)</title><rect x="90.5952%" y="181" width="0.9333%" height="15" fill="rgb(243,110,44)"/><text x="90.8452%" y="191.50"></text></g><g><title>hir_lowering (1,833,600 samples, 3.29%)</title><rect x="91.5285%" y="181" width="3.2903%" height="15" fill="rgb(222,74,54)"/><text x="91.7785%" y="191.50">hir..</text></g><g><title>parse_crate (1,593,698 samples, 2.86%)</title><rect x="94.8966%" y="181" width="2.8598%" height="15" fill="rgb(216,99,12)"/><text x="95.1466%" y="191.50">pa..</text></g><g><title>prepare_outputs (340,034 samples, 0.61%)</title><rect x="97.7744%" y="181" width="0.6102%" height="15" fill="rgb(226,22,26)"/><text x="98.0244%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (415,575 samples, 0.75%)</title><rect x="98.3846%" y="181" width="0.7457%" height="15" fill="rgb(217,163,10)"/><text x="98.6346%" y="191.50"></text></g><g><title>setup_global_ctxt (140,152 samples, 0.25%)</title><rect x="99.1489%" y="181" width="0.2515%" height="15" fill="rgb(213,25,53)"/><text x="99.3989%" y="191.50"></text></g><g><title>all (55,727,760 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (55,727,760 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (334,144 samples, 0.60%)</title><rect x="99.4004%" y="181" width="0.5996%" height="15" fill="rgb(229,68,48)"/><text x="99.6504%" y="191.50"></text></g></svg></svg>