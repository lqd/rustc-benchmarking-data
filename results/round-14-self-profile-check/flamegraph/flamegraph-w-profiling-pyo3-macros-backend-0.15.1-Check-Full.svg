<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (5,680,820 samples, 0.30%)</title><rect x="18.7228%" y="85" width="0.3041%" height="15" fill="rgb(227,0,7)"/><text x="18.9728%" y="95.50"></text></g><g><title>evaluate_obligation (4,701,781 samples, 0.25%)</title><rect x="18.7752%" y="69" width="0.2517%" height="15" fill="rgb(217,0,24)"/><text x="19.0252%" y="79.50"></text></g><g><title>needs_drop_raw (8,012,409 samples, 0.43%)</title><rect x="18.6040%" y="101" width="0.4289%" height="15" fill="rgb(221,193,54)"/><text x="18.8540%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,646,651 samples, 0.14%)</title><rect x="19.1141%" y="85" width="0.1417%" height="15" fill="rgb(248,212,6)"/><text x="19.3641%" y="95.50"></text></g><g><title>specialization_graph_of (2,349,417 samples, 0.13%)</title><rect x="19.2808%" y="85" width="0.1258%" height="15" fill="rgb(208,68,35)"/><text x="19.5308%" y="95.50"></text></g><g><title>resolve_instance (7,412,017 samples, 0.40%)</title><rect x="19.0329%" y="101" width="0.3967%" height="15" fill="rgb(232,128,0)"/><text x="19.2829%" y="111.50"></text></g><g><title>thir_body (22,708,601 samples, 1.22%)</title><rect x="19.4414%" y="101" width="1.2155%" height="15" fill="rgb(207,160,47)"/><text x="19.6914%" y="111.50"></text></g><g><title>mir_const (114,979,361 samples, 6.15%)</title><rect x="14.5118%" y="149" width="6.1545%" height="15" fill="rgb(228,23,34)"/><text x="14.7618%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (103,661,198 samples, 5.55%)</title><rect x="15.1177%" y="133" width="5.5486%" height="15" fill="rgb(218,30,26)"/><text x="15.3677%" y="143.50">unsafet..</text></g><g><title>mir_built (95,532,380 samples, 5.11%)</title><rect x="15.5528%" y="117" width="5.1135%" height="15" fill="rgb(220,122,19)"/><text x="15.8028%" y="127.50">mir_bu..</text></g><g><title>mir_const (6,272,012 samples, 0.34%)</title><rect x="20.8350%" y="133" width="0.3357%" height="15" fill="rgb(250,228,42)"/><text x="21.0850%" y="143.50"></text></g><g><title>unsafety_check_result (5,420,280 samples, 0.29%)</title><rect x="20.8806%" y="117" width="0.2901%" height="15" fill="rgb(240,193,28)"/><text x="21.1306%" y="127.50"></text></g><g><title>mir_built (4,808,380 samples, 0.26%)</title><rect x="20.9134%" y="101" width="0.2574%" height="15" fill="rgb(216,20,37)"/><text x="21.1634%" y="111.50"></text></g><g><title>mir_const_qualif (9,473,942 samples, 0.51%)</title><rect x="20.6663%" y="149" width="0.5071%" height="15" fill="rgb(206,188,39)"/><text x="20.9163%" y="159.50"></text></g><g><title>mir_promoted (137,013,430 samples, 7.33%)</title><rect x="13.8403%" y="165" width="7.3339%" height="15" fill="rgb(217,207,13)"/><text x="14.0903%" y="175.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (3,460,744 samples, 0.19%)</title><rect x="21.1744%" y="165" width="0.1852%" height="15" fill="rgb(231,73,38)"/><text x="21.4244%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (4,293,110 samples, 0.23%)</title><rect x="21.3596%" y="165" width="0.2298%" height="15" fill="rgb(225,20,46)"/><text x="21.6096%" y="175.50"></text></g><g><title>normalize_projection_ty (2,736,721 samples, 0.15%)</title><rect x="21.4429%" y="149" width="0.1465%" height="15" fill="rgb(210,31,41)"/><text x="21.6929%" y="159.50"></text></g><g><title>type_op_normalize_predicate (2,275,078 samples, 0.12%)</title><rect x="21.5894%" y="165" width="0.1218%" height="15" fill="rgb(221,200,47)"/><text x="21.8394%" y="175.50"></text></g><g><title>type_op_prove_predicate (16,745,586 samples, 0.90%)</title><rect x="21.7145%" y="165" width="0.8963%" height="15" fill="rgb(226,26,5)"/><text x="21.9645%" y="175.50"></text></g><g><title>MIR_borrow_checking (416,731,890 samples, 22.31%)</title><rect x="0.3059%" y="197" width="22.3063%" height="15" fill="rgb(249,33,26)"/><text x="0.5559%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (415,656,403 samples, 22.25%)</title><rect x="0.3634%" y="181" width="22.2487%" height="15" fill="rgb(235,183,28)"/><text x="0.6134%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,383,467 samples, 0.13%)</title><rect x="22.6121%" y="197" width="0.1276%" height="15" fill="rgb(221,5,38)"/><text x="22.8621%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,972,923 samples, 0.11%)</title><rect x="22.6341%" y="181" width="0.1056%" height="15" fill="rgb(247,18,42)"/><text x="22.8841%" y="191.50"></text></g><g><title>hir_module_items (1,907,700 samples, 0.10%)</title><rect x="22.7397%" y="197" width="0.1021%" height="15" fill="rgb(241,131,45)"/><text x="22.9897%" y="207.50"></text></g><g><title>check_mod_attrs (4,380,628 samples, 0.23%)</title><rect x="22.8452%" y="181" width="0.2345%" height="15" fill="rgb(249,31,29)"/><text x="23.0952%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (2,751,942 samples, 0.15%)</title><rect x="23.2071%" y="181" width="0.1473%" height="15" fill="rgb(225,111,53)"/><text x="23.4571%" y="191.50"></text></g><g><title>misc_checking_1 (9,900,531 samples, 0.53%)</title><rect x="22.8418%" y="197" width="0.5299%" height="15" fill="rgb(238,160,17)"/><text x="23.0918%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (8,347,224 samples, 0.45%)</title><rect x="23.3720%" y="181" width="0.4468%" height="15" fill="rgb(214,148,48)"/><text x="23.6220%" y="191.50"></text></g><g><title>check_mod_liveness (6,800,248 samples, 0.36%)</title><rect x="23.4548%" y="165" width="0.3640%" height="15" fill="rgb(232,36,49)"/><text x="23.7048%" y="175.50"></text></g><g><title>misc_checking_2 (17,178,793 samples, 0.92%)</title><rect x="23.3718%" y="197" width="0.9195%" height="15" fill="rgb(209,103,24)"/><text x="23.6218%" y="207.50"></text></g><g><title>match_checking (8,827,709 samples, 0.47%)</title><rect x="23.8188%" y="181" width="0.4725%" height="15" fill="rgb(229,88,8)"/><text x="24.0688%" y="191.50"></text></g><g><title>check_match (8,262,962 samples, 0.44%)</title><rect x="23.8490%" y="165" width="0.4423%" height="15" fill="rgb(213,181,19)"/><text x="24.0990%" y="175.50"></text></g><g><title>check_private_in_public (2,256,385 samples, 0.12%)</title><rect x="24.2925%" y="181" width="0.1208%" height="15" fill="rgb(254,191,54)"/><text x="24.5425%" y="191.50"></text></g><g><title>death_checking (4,686,022 samples, 0.25%)</title><rect x="24.4133%" y="181" width="0.2508%" height="15" fill="rgb(241,83,37)"/><text x="24.6633%" y="191.50"></text></g><g><title>promoted_mir (2,380,349 samples, 0.13%)</title><rect x="25.7917%" y="37" width="0.1274%" height="15" fill="rgb(233,36,39)"/><text x="26.0417%" y="47.50"></text></g><g><title>eval_to_const_value_raw (8,307,052 samples, 0.44%)</title><rect x="25.4873%" y="85" width="0.4446%" height="15" fill="rgb(226,3,54)"/><text x="25.7373%" y="95.50"></text></g><g><title>eval_to_const_value_raw (8,244,642 samples, 0.44%)</title><rect x="25.4906%" y="69" width="0.4413%" height="15" fill="rgb(245,192,40)"/><text x="25.7406%" y="79.50"></text></g><g><title>eval_to_allocation_raw (8,135,721 samples, 0.44%)</title><rect x="25.4964%" y="53" width="0.4355%" height="15" fill="rgb(238,167,29)"/><text x="25.7464%" y="63.50"></text></g><g><title>eval_to_const_value_raw (15,465,965 samples, 0.83%)</title><rect x="25.1057%" y="149" width="0.8278%" height="15" fill="rgb(232,182,51)"/><text x="25.3557%" y="159.50"></text></g><g><title>eval_to_const_value_raw (15,404,685 samples, 0.82%)</title><rect x="25.1090%" y="133" width="0.8246%" height="15" fill="rgb(231,60,39)"/><text x="25.3590%" y="143.50"></text></g><g><title>eval_to_allocation_raw (15,302,965 samples, 0.82%)</title><rect x="25.1144%" y="117" width="0.8191%" height="15" fill="rgb(208,69,12)"/><text x="25.3644%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,651,568 samples, 0.46%)</title><rect x="25.4705%" y="101" width="0.4631%" height="15" fill="rgb(235,93,37)"/><text x="25.7205%" y="111.50"></text></g><g><title>param_env (1,948,803 samples, 0.10%)</title><rect x="25.9335%" y="149" width="0.1043%" height="15" fill="rgb(213,116,39)"/><text x="26.1835%" y="159.50"></text></g><g><title>crate_lints (27,487,418 samples, 1.47%)</title><rect x="24.6643%" y="165" width="1.4713%" height="15" fill="rgb(222,207,29)"/><text x="24.9143%" y="175.50"></text></g><g><title>lint_checking (38,755,083 samples, 2.07%)</title><rect x="24.6641%" y="181" width="2.0744%" height="15" fill="rgb(206,96,30)"/><text x="24.9141%" y="191.50">l..</text></g><g><title>module_lints (11,264,095 samples, 0.60%)</title><rect x="26.1356%" y="165" width="0.6029%" height="15" fill="rgb(218,138,4)"/><text x="26.3856%" y="175.50"></text></g><g><title>lint_mod (11,244,404 samples, 0.60%)</title><rect x="26.1366%" y="149" width="0.6019%" height="15" fill="rgb(250,191,14)"/><text x="26.3866%" y="159.50"></text></g><g><title>privacy_access_levels (4,665,032 samples, 0.25%)</title><rect x="26.7385%" y="181" width="0.2497%" height="15" fill="rgb(239,60,40)"/><text x="26.9885%" y="191.50"></text></g><g><title>privacy_checking_modules (15,467,814 samples, 0.83%)</title><rect x="26.9882%" y="181" width="0.8279%" height="15" fill="rgb(206,27,48)"/><text x="27.2382%" y="191.50"></text></g><g><title>check_mod_privacy (15,451,512 samples, 0.83%)</title><rect x="26.9891%" y="165" width="0.8271%" height="15" fill="rgb(225,35,8)"/><text x="27.2391%" y="175.50"></text></g><g><title>misc_checking_3 (65,935,607 samples, 3.53%)</title><rect x="24.2913%" y="197" width="3.5293%" height="15" fill="rgb(250,213,24)"/><text x="24.5413%" y="207.50">mis..</text></g><g><title>impl_parent (3,640,325 samples, 0.19%)</title><rect x="28.1894%" y="133" width="0.1949%" height="15" fill="rgb(247,123,22)"/><text x="28.4394%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,965,391 samples, 0.11%)</title><rect x="28.2791%" y="117" width="0.1052%" height="15" fill="rgb(231,138,38)"/><text x="28.5291%" y="127.50"></text></g><g><title>impl_trait_ref (6,710,177 samples, 0.36%)</title><rect x="28.3843%" y="133" width="0.3592%" height="15" fill="rgb(231,145,46)"/><text x="28.6343%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,080,020 samples, 0.27%)</title><rect x="28.4715%" y="117" width="0.2719%" height="15" fill="rgb(251,118,11)"/><text x="28.7215%" y="127.50"></text></g><g><title>coherent_trait (17,735,789 samples, 0.95%)</title><rect x="27.8600%" y="165" width="0.9493%" height="15" fill="rgb(217,147,25)"/><text x="28.1100%" y="175.50"></text></g><g><title>specialization_graph_of (17,115,862 samples, 0.92%)</title><rect x="27.8932%" y="149" width="0.9162%" height="15" fill="rgb(247,81,37)"/><text x="28.1432%" y="159.50"></text></g><g><title>coherence_checking (18,104,573 samples, 0.97%)</title><rect x="27.8585%" y="181" width="0.9691%" height="15" fill="rgb(209,12,38)"/><text x="28.1085%" y="191.50"></text></g><g><title>adt_dtorck_constraint (2,488,168 samples, 0.13%)</title><rect x="44.0895%" y="117" width="0.1332%" height="15" fill="rgb(227,1,9)"/><text x="44.3395%" y="127.50"></text></g><g><title>dropck_outlives (8,888,145 samples, 0.48%)</title><rect x="43.7501%" y="133" width="0.4758%" height="15" fill="rgb(248,47,43)"/><text x="44.0001%" y="143.50"></text></g><g><title>evaluate_obligation (8,745,332 samples, 0.47%)</title><rect x="44.2258%" y="133" width="0.4681%" height="15" fill="rgb(221,10,30)"/><text x="44.4758%" y="143.50"></text></g><g><title>dropck_outlives (4,192,027 samples, 0.22%)</title><rect x="52.9862%" y="117" width="0.2244%" height="15" fill="rgb(210,229,1)"/><text x="53.2362%" y="127.50"></text></g><g><title>evaluate_obligation (5,098,809 samples, 0.27%)</title><rect x="53.2106%" y="117" width="0.2729%" height="15" fill="rgb(222,148,37)"/><text x="53.4606%" y="127.50"></text></g><g><title>typeck (164,616,210 samples, 8.81%)</title><rect x="44.9848%" y="133" width="8.8114%" height="15" fill="rgb(234,67,33)"/><text x="45.2348%" y="143.50">typeck</text></g><g><title>item_bodies_checking (466,497,367 samples, 24.97%)</title><rect x="28.8375%" y="181" width="24.9700%" height="15" fill="rgb(247,98,35)"/><text x="29.0875%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (466,493,347 samples, 24.97%)</title><rect x="28.8378%" y="165" width="24.9698%" height="15" fill="rgb(247,138,52)"/><text x="29.0878%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (465,392,226 samples, 24.91%)</title><rect x="28.8967%" y="149" width="24.9109%" height="15" fill="rgb(213,79,30)"/><text x="29.1467%" y="159.50">typeck</text></g><g><title>mir_borrowck (2,064,744 samples, 0.11%)</title><rect x="54.1716%" y="117" width="0.1105%" height="15" fill="rgb(246,177,23)"/><text x="54.4216%" y="127.50"></text></g><g><title>mir_built (7,089,350 samples, 0.38%)</title><rect x="54.3000%" y="69" width="0.3795%" height="15" fill="rgb(230,62,27)"/><text x="54.5500%" y="79.50"></text></g><g><title>typeck (5,744,135 samples, 0.31%)</title><rect x="54.3720%" y="53" width="0.3075%" height="15" fill="rgb(216,154,8)"/><text x="54.6220%" y="63.50"></text></g><g><title>mir_const (8,020,790 samples, 0.43%)</title><rect x="54.2863%" y="101" width="0.4293%" height="15" fill="rgb(244,35,45)"/><text x="54.5363%" y="111.50"></text></g><g><title>unsafety_check_result (7,861,498 samples, 0.42%)</title><rect x="54.2949%" y="85" width="0.4208%" height="15" fill="rgb(251,115,12)"/><text x="54.5449%" y="95.50"></text></g><g><title>mir_promoted (8,105,482 samples, 0.43%)</title><rect x="54.2821%" y="117" width="0.4339%" height="15" fill="rgb(240,54,50)"/><text x="54.5321%" y="127.50"></text></g><g><title>type_of (11,878,734 samples, 0.64%)</title><rect x="54.1004%" y="149" width="0.6358%" height="15" fill="rgb(233,84,52)"/><text x="54.3504%" y="159.50"></text></g><g><title>mir_borrowck (11,601,141 samples, 0.62%)</title><rect x="54.1152%" y="133" width="0.6210%" height="15" fill="rgb(207,117,47)"/><text x="54.3652%" y="143.50"></text></g><g><title>typeck (26,010,990 samples, 1.39%)</title><rect x="54.7362%" y="149" width="1.3923%" height="15" fill="rgb(249,43,39)"/><text x="54.9862%" y="159.50"></text></g><g><title>item_types_checking (43,361,635 samples, 2.32%)</title><rect x="53.8076%" y="181" width="2.3210%" height="15" fill="rgb(209,38,44)"/><text x="54.0576%" y="191.50">i..</text></g><g><title>check_mod_item_types (43,342,175 samples, 2.32%)</title><rect x="53.8086%" y="165" width="2.3200%" height="15" fill="rgb(236,212,23)"/><text x="54.0586%" y="175.50">c..</text></g><g><title>lint_levels (3,177,946 samples, 0.17%)</title><rect x="56.5521%" y="101" width="0.1701%" height="15" fill="rgb(242,79,21)"/><text x="56.8021%" y="111.50"></text></g><g><title>named_region_map (6,212,665 samples, 0.33%)</title><rect x="56.3897%" y="133" width="0.3325%" height="15" fill="rgb(211,96,35)"/><text x="56.6397%" y="143.50"></text></g><g><title>resolve_lifetimes (6,060,592 samples, 0.32%)</title><rect x="56.3979%" y="117" width="0.3244%" height="15" fill="rgb(253,215,40)"/><text x="56.6479%" y="127.50"></text></g><g><title>generics_of (7,634,267 samples, 0.41%)</title><rect x="56.3179%" y="149" width="0.4086%" height="15" fill="rgb(211,81,21)"/><text x="56.5679%" y="159.50"></text></g><g><title>predicates_of (3,143,570 samples, 0.17%)</title><rect x="56.7358%" y="149" width="0.1683%" height="15" fill="rgb(208,190,38)"/><text x="56.9858%" y="159.50"></text></g><g><title>predicates_defined_on (2,777,235 samples, 0.15%)</title><rect x="56.7554%" y="133" width="0.1487%" height="15" fill="rgb(235,213,38)"/><text x="57.0054%" y="143.50"></text></g><g><title>type_collecting (14,834,246 samples, 0.79%)</title><rect x="56.1297%" y="181" width="0.7940%" height="15" fill="rgb(237,122,38)"/><text x="56.3797%" y="191.50"></text></g><g><title>collect_mod_item_types (14,794,856 samples, 0.79%)</title><rect x="56.1318%" y="165" width="0.7919%" height="15" fill="rgb(244,218,35)"/><text x="56.3818%" y="175.50"></text></g><g><title>region_scope_tree (3,087,275 samples, 0.17%)</title><rect x="57.5422%" y="149" width="0.1653%" height="15" fill="rgb(240,68,47)"/><text x="57.7922%" y="159.50"></text></g><g><title>check_impl_item_well_formed (13,178,253 samples, 0.71%)</title><rect x="57.0086%" y="165" width="0.7054%" height="15" fill="rgb(210,16,53)"/><text x="57.2586%" y="175.50"></text></g><g><title>evaluate_obligation (2,789,623 samples, 0.15%)</title><rect x="58.0692%" y="149" width="0.1493%" height="15" fill="rgb(235,124,12)"/><text x="58.3192%" y="159.50"></text></g><g><title>region_scope_tree (3,896,336 samples, 0.21%)</title><rect x="58.3544%" y="149" width="0.2086%" height="15" fill="rgb(224,169,11)"/><text x="58.6044%" y="159.50"></text></g><g><title>analysis (1,093,041,304 samples, 58.51%)</title><rect x="0.0721%" y="213" width="58.5068%" height="15" fill="rgb(250,166,2)"/><text x="0.3221%" y="223.50">analysis</text></g><g><title>type_check_crate (574,634,746 samples, 30.76%)</title><rect x="27.8206%" y="197" width="30.7583%" height="15" fill="rgb(242,216,29)"/><text x="28.0706%" y="207.50">type_check_crate</text></g><g><title>wf_checking (30,856,214 samples, 1.65%)</title><rect x="56.9273%" y="181" width="1.6516%" height="15" fill="rgb(230,116,27)"/><text x="57.1773%" y="191.50"></text></g><g><title>check_item_well_formed (16,159,081 samples, 0.86%)</title><rect x="57.7140%" y="165" width="0.8649%" height="15" fill="rgb(228,99,48)"/><text x="57.9640%" y="175.50"></text></g><g><title>AST_validation (2,605,199 samples, 0.14%)</title><rect x="58.6098%" y="197" width="0.1394%" height="15" fill="rgb(253,11,6)"/><text x="58.8598%" y="207.50"></text></g><g><title>complete_gated_feature_checking (2,489,048 samples, 0.13%)</title><rect x="58.7492%" y="197" width="0.1332%" height="15" fill="rgb(247,143,39)"/><text x="58.9992%" y="207.50"></text></g><g><title>metadata_register_crate (2,752,112 samples, 0.15%)</title><rect x="92.5712%" y="165" width="0.1473%" height="15" fill="rgb(236,97,10)"/><text x="92.8212%" y="175.50"></text></g><g><title>macro_expand_crate (635,001,171 samples, 33.99%)</title><rect x="58.8851%" y="197" width="33.9895%" height="15" fill="rgb(233,208,19)"/><text x="59.1351%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (634,975,121 samples, 33.99%)</title><rect x="58.8865%" y="181" width="33.9881%" height="15" fill="rgb(216,164,2)"/><text x="59.1365%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,914,774 samples, 0.16%)</title><rect x="92.7185%" y="165" width="0.1560%" height="15" fill="rgb(220,129,5)"/><text x="92.9685%" y="175.50"></text></g><g><title>finalize_macro_resolutions (11,163,855 samples, 0.60%)</title><rect x="92.9032%" y="181" width="0.5976%" height="15" fill="rgb(242,17,10)"/><text x="93.1532%" y="191.50"></text></g><g><title>late_resolve_crate (24,417,093 samples, 1.31%)</title><rect x="93.5007%" y="181" width="1.3070%" height="15" fill="rgb(242,107,0)"/><text x="93.7507%" y="191.50"></text></g><g><title>resolve_check_unused (2,275,455 samples, 0.12%)</title><rect x="94.8124%" y="181" width="0.1218%" height="15" fill="rgb(251,28,31)"/><text x="95.0624%" y="191.50"></text></g><g><title>resolve_postprocess (2,097,134 samples, 0.11%)</title><rect x="94.9342%" y="181" width="0.1123%" height="15" fill="rgb(233,223,10)"/><text x="95.1842%" y="191.50"></text></g><g><title>configure_and_expand (680,888,834 samples, 36.45%)</title><rect x="58.6008%" y="213" width="36.4457%" height="15" fill="rgb(215,21,27)"/><text x="58.8508%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (40,537,683 samples, 2.17%)</title><rect x="92.8767%" y="197" width="2.1698%" height="15" fill="rgb(232,23,21)"/><text x="93.1267%" y="207.50">r..</text></g><g><title>drop_ast (8,562,716 samples, 0.46%)</title><rect x="95.0465%" y="213" width="0.4583%" height="15" fill="rgb(244,5,23)"/><text x="95.2965%" y="223.50"></text></g><g><title>early_lint_checks (9,644,317 samples, 0.52%)</title><rect x="95.5061%" y="213" width="0.5162%" height="15" fill="rgb(226,81,46)"/><text x="95.7561%" y="223.50"></text></g><g><title>free_global_ctxt (11,952,553 samples, 0.64%)</title><rect x="96.0223%" y="213" width="0.6398%" height="15" fill="rgb(247,70,30)"/><text x="96.2723%" y="223.50"></text></g><g><title>generate_crate_metadata (10,348,016 samples, 0.55%)</title><rect x="96.6621%" y="213" width="0.5539%" height="15" fill="rgb(212,68,19)"/><text x="96.9121%" y="223.50"></text></g><g><title>hir_lowering (47,844,215 samples, 2.56%)</title><rect x="97.2160%" y="213" width="2.5609%" height="15" fill="rgb(240,187,13)"/><text x="97.4660%" y="223.50">hi..</text></g><g><title>self_profile_alloc_query_strings (2,286,716 samples, 0.12%)</title><rect x="99.8106%" y="213" width="0.1224%" height="15" fill="rgb(223,113,26)"/><text x="100.0606%" y="223.50"></text></g><g><title>all (1,868,228,363 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,868,228,363 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>