<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (165,733 samples, 0.11%)</title><rect x="10.2479%" y="181" width="0.1143%" height="15" fill="rgb(227,0,7)"/><text x="10.4979%" y="191.50"></text></g><g><title>param_env (414,277 samples, 0.29%)</title><rect x="11.4994%" y="149" width="0.2857%" height="15" fill="rgb(217,0,24)"/><text x="11.7494%" y="159.50"></text></g><g><title>item_attrs (409,875 samples, 0.28%)</title><rect x="12.1979%" y="117" width="0.2826%" height="15" fill="rgb(221,193,54)"/><text x="12.4479%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (394,434 samples, 0.27%)</title><rect x="12.2085%" y="101" width="0.2720%" height="15" fill="rgb(248,212,6)"/><text x="12.4585%" y="111.50"></text></g><g><title>codegen_fn_attrs (570,227 samples, 0.39%)</title><rect x="12.1055%" y="133" width="0.3932%" height="15" fill="rgb(208,68,35)"/><text x="12.3555%" y="143.50"></text></g><g><title>adt_drop_tys (222,762 samples, 0.15%)</title><rect x="14.8431%" y="85" width="0.1536%" height="15" fill="rgb(232,128,0)"/><text x="15.0931%" y="95.50"></text></g><g><title>param_env (186,593 samples, 0.13%)</title><rect x="15.0910%" y="85" width="0.1287%" height="15" fill="rgb(207,160,47)"/><text x="15.3410%" y="95.50"></text></g><g><title>adt_drop_tys (610,797 samples, 0.42%)</title><rect x="14.7992%" y="101" width="0.4212%" height="15" fill="rgb(228,23,34)"/><text x="15.0492%" y="111.50"></text></g><g><title>needs_drop_raw (1,480,343 samples, 1.02%)</title><rect x="14.6946%" y="117" width="1.0207%" height="15" fill="rgb(218,30,26)"/><text x="14.9446%" y="127.50"></text></g><g><title>is_copy_raw (717,795 samples, 0.49%)</title><rect x="15.2204%" y="101" width="0.4949%" height="15" fill="rgb(220,122,19)"/><text x="15.4704%" y="111.50"></text></g><g><title>evaluate_obligation (603,535 samples, 0.42%)</title><rect x="15.2992%" y="85" width="0.4162%" height="15" fill="rgb(250,228,42)"/><text x="15.5492%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,420,497 samples, 0.98%)</title><rect x="15.8893%" y="101" width="0.9795%" height="15" fill="rgb(240,193,28)"/><text x="16.1393%" y="111.50"></text></g><g><title>evaluate_obligation (289,194 samples, 0.20%)</title><rect x="16.6694%" y="85" width="0.1994%" height="15" fill="rgb(216,20,37)"/><text x="16.9194%" y="95.50"></text></g><g><title>impl_parent (1,293,972 samples, 0.89%)</title><rect x="18.1317%" y="85" width="0.8922%" height="15" fill="rgb(206,188,39)"/><text x="18.3817%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (862,929 samples, 0.60%)</title><rect x="18.4289%" y="69" width="0.5950%" height="15" fill="rgb(217,207,13)"/><text x="18.6789%" y="79.50"></text></g><g><title>specialization_graph_of (7,390,122 samples, 5.10%)</title><rect x="16.9059%" y="101" width="5.0957%" height="15" fill="rgb(231,73,38)"/><text x="17.1559%" y="111.50">specia..</text></g><g><title>impl_trait_ref (4,318,487 samples, 2.98%)</title><rect x="19.0239%" y="85" width="2.9777%" height="15" fill="rgb(225,20,46)"/><text x="19.2739%" y="95.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,643,270 samples, 2.51%)</title><rect x="19.4895%" y="69" width="2.5122%" height="15" fill="rgb(210,31,41)"/><text x="19.7395%" y="79.50">me..</text></g><g><title>resolve_instance (9,201,962 samples, 6.35%)</title><rect x="15.7153%" y="117" width="6.3451%" height="15" fill="rgb(221,200,47)"/><text x="15.9653%" y="127.50">resolve_..</text></g><g><title>thir_body (1,200,545 samples, 0.83%)</title><rect x="22.0782%" y="117" width="0.8278%" height="15" fill="rgb(226,26,5)"/><text x="22.3282%" y="127.50"></text></g><g><title>mir_const (17,357,085 samples, 11.97%)</title><rect x="10.9541%" y="165" width="11.9683%" height="15" fill="rgb(249,33,26)"/><text x="11.2041%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (16,152,028 samples, 11.14%)</title><rect x="11.7850%" y="149" width="11.1374%" height="15" fill="rgb(235,183,28)"/><text x="12.0350%" y="159.50">unsafety_check_r..</text></g><g><title>mir_built (15,117,067 samples, 10.42%)</title><rect x="12.4987%" y="133" width="10.4237%" height="15" fill="rgb(221,5,38)"/><text x="12.7487%" y="143.50">mir_built</text></g><g><title>has_structural_eq_impls (157,972 samples, 0.11%)</title><rect x="22.9834%" y="149" width="0.1089%" height="15" fill="rgb(247,18,42)"/><text x="23.2334%" y="159.50"></text></g><g><title>evaluate_obligation (147,642 samples, 0.10%)</title><rect x="22.9905%" y="133" width="0.1018%" height="15" fill="rgb(241,131,45)"/><text x="23.2405%" y="143.50"></text></g><g><title>mir_promoted (18,630,917 samples, 12.85%)</title><rect x="10.3870%" y="181" width="12.8467%" height="15" fill="rgb(249,31,29)"/><text x="10.6370%" y="191.50">mir_promoted</text></g><g><title>mir_const_qualif (451,374 samples, 0.31%)</title><rect x="22.9224%" y="165" width="0.3112%" height="15" fill="rgb(225,111,53)"/><text x="23.1724%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (301,803 samples, 0.21%)</title><rect x="23.2374%" y="181" width="0.2081%" height="15" fill="rgb(238,160,17)"/><text x="23.4874%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (738,138 samples, 0.51%)</title><rect x="23.4455%" y="181" width="0.5090%" height="15" fill="rgb(214,148,48)"/><text x="23.6955%" y="191.50"></text></g><g><title>normalize_projection_ty (509,547 samples, 0.35%)</title><rect x="23.6032%" y="165" width="0.3514%" height="15" fill="rgb(232,36,49)"/><text x="23.8532%" y="175.50"></text></g><g><title>type_op_normalize_predicate (1,230,503 samples, 0.85%)</title><rect x="23.9545%" y="181" width="0.8485%" height="15" fill="rgb(209,103,24)"/><text x="24.2045%" y="191.50"></text></g><g><title>normalize_projection_ty (762,739 samples, 0.53%)</title><rect x="24.2770%" y="165" width="0.5259%" height="15" fill="rgb(229,88,8)"/><text x="24.5270%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,049,571 samples, 2.79%)</title><rect x="24.8030%" y="181" width="2.7923%" height="15" fill="rgb(213,181,19)"/><text x="25.0530%" y="191.50">ty..</text></g><g><title>MIR_borrow_checking (39,081,866 samples, 26.95%)</title><rect x="0.6515%" y="213" width="26.9483%" height="15" fill="rgb(254,191,54)"/><text x="0.9015%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (39,009,416 samples, 26.90%)</title><rect x="0.7014%" y="197" width="26.8983%" height="15" fill="rgb(241,83,37)"/><text x="0.9514%" y="207.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (178,042 samples, 0.12%)</title><rect x="27.8911%" y="181" width="0.1228%" height="15" fill="rgb(233,36,39)"/><text x="28.1411%" y="191.50"></text></g><g><title>check_mod_attrs (351,414 samples, 0.24%)</title><rect x="27.7716%" y="197" width="0.2423%" height="15" fill="rgb(226,3,54)"/><text x="28.0216%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (285,153 samples, 0.20%)</title><rect x="28.1032%" y="197" width="0.1966%" height="15" fill="rgb(245,192,40)"/><text x="28.3532%" y="207.50"></text></g><g><title>misc_checking_1 (826,479 samples, 0.57%)</title><rect x="27.7622%" y="213" width="0.5699%" height="15" fill="rgb(238,167,29)"/><text x="28.0122%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (640,047 samples, 0.44%)</title><rect x="28.3331%" y="197" width="0.4413%" height="15" fill="rgb(232,182,51)"/><text x="28.5831%" y="207.50"></text></g><g><title>check_mod_liveness (547,906 samples, 0.38%)</title><rect x="28.3967%" y="181" width="0.3778%" height="15" fill="rgb(231,60,39)"/><text x="28.6467%" y="191.50"></text></g><g><title>type_uninhabited_from (187,723 samples, 0.13%)</title><rect x="28.6450%" y="165" width="0.1294%" height="15" fill="rgb(208,69,12)"/><text x="28.8950%" y="175.50"></text></g><g><title>type_uninhabited_from (158,172 samples, 0.11%)</title><rect x="28.6654%" y="149" width="0.1091%" height="15" fill="rgb(235,93,37)"/><text x="28.9154%" y="159.50"></text></g><g><title>misc_checking_2 (1,252,484 samples, 0.86%)</title><rect x="28.3321%" y="213" width="0.8636%" height="15" fill="rgb(213,116,39)"/><text x="28.5821%" y="223.50"></text></g><g><title>match_checking (610,867 samples, 0.42%)</title><rect x="28.7745%" y="197" width="0.4212%" height="15" fill="rgb(222,207,29)"/><text x="29.0245%" y="207.50"></text></g><g><title>check_match (592,177 samples, 0.41%)</title><rect x="28.7874%" y="181" width="0.4083%" height="15" fill="rgb(206,96,30)"/><text x="29.0374%" y="191.50"></text></g><g><title>death_checking (213,952 samples, 0.15%)</title><rect x="29.2724%" y="197" width="0.1475%" height="15" fill="rgb(218,138,4)"/><text x="29.5224%" y="207.50"></text></g><g><title>eval_to_const_value_raw (394,374 samples, 0.27%)</title><rect x="29.6754%" y="117" width="0.2719%" height="15" fill="rgb(250,191,14)"/><text x="29.9254%" y="127.50"></text></g><g><title>eval_to_const_value_raw (393,644 samples, 0.27%)</title><rect x="29.6760%" y="101" width="0.2714%" height="15" fill="rgb(239,60,40)"/><text x="29.9260%" y="111.50"></text></g><g><title>eval_to_allocation_raw (391,894 samples, 0.27%)</title><rect x="29.6772%" y="85" width="0.2702%" height="15" fill="rgb(206,27,48)"/><text x="29.9272%" y="95.50"></text></g><g><title>eval_to_allocation_raw (436,495 samples, 0.30%)</title><rect x="29.6473%" y="165" width="0.3010%" height="15" fill="rgb(225,35,8)"/><text x="29.8973%" y="175.50"></text></g><g><title>eval_to_allocation_raw (435,845 samples, 0.30%)</title><rect x="29.6478%" y="149" width="0.3005%" height="15" fill="rgb(250,213,24)"/><text x="29.8978%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (402,955 samples, 0.28%)</title><rect x="29.6704%" y="133" width="0.2779%" height="15" fill="rgb(247,123,22)"/><text x="29.9204%" y="143.50"></text></g><g><title>crate_lints (1,098,252 samples, 0.76%)</title><rect x="29.4211%" y="181" width="0.7573%" height="15" fill="rgb(231,138,38)"/><text x="29.6711%" y="191.50"></text></g><g><title>lint_checking (1,690,759 samples, 1.17%)</title><rect x="29.4199%" y="197" width="1.1658%" height="15" fill="rgb(231,145,46)"/><text x="29.6699%" y="207.50"></text></g><g><title>module_lints (590,827 samples, 0.41%)</title><rect x="30.1784%" y="181" width="0.4074%" height="15" fill="rgb(251,118,11)"/><text x="30.4284%" y="191.50"></text></g><g><title>lint_mod (588,477 samples, 0.41%)</title><rect x="30.1800%" y="165" width="0.4058%" height="15" fill="rgb(217,147,25)"/><text x="30.4300%" y="175.50"></text></g><g><title>layout_of (147,072 samples, 0.10%)</title><rect x="30.4843%" y="149" width="0.1014%" height="15" fill="rgb(247,81,37)"/><text x="30.7343%" y="159.50"></text></g><g><title>privacy_checking_modules (771,469 samples, 0.53%)</title><rect x="30.6533%" y="197" width="0.5320%" height="15" fill="rgb(209,12,38)"/><text x="30.9033%" y="207.50"></text></g><g><title>check_mod_privacy (769,469 samples, 0.53%)</title><rect x="30.6547%" y="181" width="0.5306%" height="15" fill="rgb(227,1,9)"/><text x="30.9047%" y="191.50"></text></g><g><title>misc_checking_3 (2,896,623 samples, 2.00%)</title><rect x="29.1957%" y="213" width="1.9973%" height="15" fill="rgb(248,47,43)"/><text x="29.4457%" y="223.50">m..</text></g><g><title>associated_item (163,961 samples, 0.11%)</title><rect x="37.5884%" y="133" width="0.1131%" height="15" fill="rgb(221,10,30)"/><text x="37.8384%" y="143.50"></text></g><g><title>associated_items (237,641 samples, 0.16%)</title><rect x="37.5463%" y="149" width="0.1639%" height="15" fill="rgb(210,229,1)"/><text x="37.7963%" y="159.50"></text></g><g><title>adt_def (182,361 samples, 0.13%)</title><rect x="38.0008%" y="117" width="0.1257%" height="15" fill="rgb(222,148,37)"/><text x="38.2508%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (176,191 samples, 0.12%)</title><rect x="38.0050%" y="101" width="0.1215%" height="15" fill="rgb(234,67,33)"/><text x="38.2550%" y="111.50"></text></g><g><title>adt_def (162,612 samples, 0.11%)</title><rect x="38.5046%" y="85" width="0.1121%" height="15" fill="rgb(247,98,35)"/><text x="38.7546%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (157,922 samples, 0.11%)</title><rect x="38.5079%" y="69" width="0.1089%" height="15" fill="rgb(247,138,52)"/><text x="38.7579%" y="79.50"></text></g><g><title>adt_def (206,072 samples, 0.14%)</title><rect x="38.6975%" y="69" width="0.1421%" height="15" fill="rgb(213,79,30)"/><text x="38.9475%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (197,552 samples, 0.14%)</title><rect x="38.7034%" y="53" width="0.1362%" height="15" fill="rgb(246,177,23)"/><text x="38.9534%" y="63.50"></text></g><g><title>adt_dtorck_constraint (508,928 samples, 0.35%)</title><rect x="38.6377%" y="85" width="0.3509%" height="15" fill="rgb(230,62,27)"/><text x="38.8877%" y="95.50"></text></g><g><title>adt_dtorck_constraint (884,150 samples, 0.61%)</title><rect x="38.4320%" y="101" width="0.6097%" height="15" fill="rgb(216,154,8)"/><text x="38.6820%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,429,536 samples, 0.99%)</title><rect x="38.1557%" y="117" width="0.9857%" height="15" fill="rgb(244,35,45)"/><text x="38.4057%" y="127.50"></text></g><g><title>dropck_outlives (2,115,722 samples, 1.46%)</title><rect x="37.7372%" y="149" width="1.4589%" height="15" fill="rgb(251,115,12)"/><text x="37.9872%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,916,718 samples, 1.32%)</title><rect x="37.8744%" y="133" width="1.3216%" height="15" fill="rgb(240,54,50)"/><text x="38.1244%" y="143.50"></text></g><g><title>trait_impls_of (500,405 samples, 0.35%)</title><rect x="39.6179%" y="133" width="0.3450%" height="15" fill="rgb(233,84,52)"/><text x="39.8679%" y="143.50"></text></g><g><title>implementations_of_trait (156,902 samples, 0.11%)</title><rect x="39.8547%" y="117" width="0.1082%" height="15" fill="rgb(207,117,47)"/><text x="40.1047%" y="127.50"></text></g><g><title>evaluate_obligation (1,114,304 samples, 0.77%)</title><rect x="39.1961%" y="149" width="0.7684%" height="15" fill="rgb(249,43,39)"/><text x="39.4461%" y="159.50"></text></g><g><title>method_autoderef_steps (152,680 samples, 0.11%)</title><rect x="40.2593%" y="149" width="0.1053%" height="15" fill="rgb(209,38,44)"/><text x="40.5093%" y="159.50"></text></g><g><title>predicates_of (254,672 samples, 0.18%)</title><rect x="40.3792%" y="149" width="0.1756%" height="15" fill="rgb(236,212,23)"/><text x="40.6292%" y="159.50"></text></g><g><title>predicates_defined_on (156,851 samples, 0.11%)</title><rect x="40.4466%" y="133" width="0.1082%" height="15" fill="rgb(242,79,21)"/><text x="40.6966%" y="143.50"></text></g><g><title>adt_sized_constraint (182,422 samples, 0.13%)</title><rect x="51.8153%" y="133" width="0.1258%" height="15" fill="rgb(211,96,35)"/><text x="52.0653%" y="143.50"></text></g><g><title>associated_item (444,245 samples, 0.31%)</title><rect x="52.0433%" y="117" width="0.3063%" height="15" fill="rgb(253,215,40)"/><text x="52.2933%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (350,234 samples, 0.24%)</title><rect x="52.1082%" y="101" width="0.2415%" height="15" fill="rgb(211,81,21)"/><text x="52.3582%" y="111.50"></text></g><g><title>associated_items (618,326 samples, 0.43%)</title><rect x="51.9459%" y="133" width="0.4264%" height="15" fill="rgb(208,190,38)"/><text x="52.1959%" y="143.50"></text></g><g><title>adt_dtorck_constraint (155,933 samples, 0.11%)</title><rect x="52.7725%" y="101" width="0.1075%" height="15" fill="rgb(235,213,38)"/><text x="53.0225%" y="111.50"></text></g><g><title>dropck_outlives (696,278 samples, 0.48%)</title><rect x="52.4219%" y="133" width="0.4801%" height="15" fill="rgb(237,122,38)"/><text x="52.6719%" y="143.50"></text></g><g><title>adt_dtorck_constraint (304,134 samples, 0.21%)</title><rect x="52.6923%" y="117" width="0.2097%" height="15" fill="rgb(244,218,35)"/><text x="52.9423%" y="127.50"></text></g><g><title>adt_def (281,383 samples, 0.19%)</title><rect x="54.6565%" y="85" width="0.1940%" height="15" fill="rgb(240,68,47)"/><text x="54.9065%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (280,213 samples, 0.19%)</title><rect x="54.6573%" y="69" width="0.1932%" height="15" fill="rgb(210,16,53)"/><text x="54.9073%" y="79.50"></text></g><g><title>item_attrs (238,313 samples, 0.16%)</title><rect x="54.6862%" y="53" width="0.1643%" height="15" fill="rgb(235,124,12)"/><text x="54.9362%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (237,063 samples, 0.16%)</title><rect x="54.6871%" y="37" width="0.1635%" height="15" fill="rgb(224,169,11)"/><text x="54.9371%" y="47.50"></text></g><g><title>adt_sized_constraint (323,264 samples, 0.22%)</title><rect x="54.6526%" y="101" width="0.2229%" height="15" fill="rgb(250,166,2)"/><text x="54.9026%" y="111.50"></text></g><g><title>adt_sized_constraint (462,946 samples, 0.32%)</title><rect x="54.5639%" y="117" width="0.3192%" height="15" fill="rgb(242,216,29)"/><text x="54.8139%" y="127.50"></text></g><g><title>predicates_of (209,804 samples, 0.14%)</title><rect x="55.0163%" y="117" width="0.1447%" height="15" fill="rgb(230,116,27)"/><text x="55.2663%" y="127.50"></text></g><g><title>evaluate_obligation (4,168,536 samples, 2.87%)</title><rect x="52.9020%" y="133" width="2.8743%" height="15" fill="rgb(228,99,48)"/><text x="53.1520%" y="143.50">ev..</text></g><g><title>trait_impls_of (797,356 samples, 0.55%)</title><rect x="55.2266%" y="117" width="0.5498%" height="15" fill="rgb(253,11,6)"/><text x="55.4766%" y="127.50"></text></g><g><title>implementations_of_trait (256,141 samples, 0.18%)</title><rect x="55.5997%" y="101" width="0.1766%" height="15" fill="rgb(247,143,39)"/><text x="55.8497%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (181,551 samples, 0.13%)</title><rect x="55.6512%" y="85" width="0.1252%" height="15" fill="rgb(236,97,10)"/><text x="55.9012%" y="95.50"></text></g><g><title>fn_sig (171,711 samples, 0.12%)</title><rect x="55.7987%" y="133" width="0.1184%" height="15" fill="rgb(233,208,19)"/><text x="56.0487%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (152,821 samples, 0.11%)</title><rect x="55.8117%" y="117" width="0.1054%" height="15" fill="rgb(216,164,2)"/><text x="56.0617%" y="127.50"></text></g><g><title>generics_of (360,764 samples, 0.25%)</title><rect x="55.9171%" y="133" width="0.2488%" height="15" fill="rgb(220,129,5)"/><text x="56.1671%" y="143.50"></text></g><g><title>is_copy_raw (246,964 samples, 0.17%)</title><rect x="56.3765%" y="133" width="0.1703%" height="15" fill="rgb(242,17,10)"/><text x="56.6265%" y="143.50"></text></g><g><title>evaluate_obligation (207,834 samples, 0.14%)</title><rect x="56.4035%" y="117" width="0.1433%" height="15" fill="rgb(242,107,0)"/><text x="56.6535%" y="127.50"></text></g><g><title>evaluate_obligation (332,133 samples, 0.23%)</title><rect x="57.0091%" y="117" width="0.2290%" height="15" fill="rgb(251,28,31)"/><text x="57.2591%" y="127.50"></text></g><g><title>method_autoderef_steps (735,620 samples, 0.51%)</title><rect x="56.7376%" y="133" width="0.5072%" height="15" fill="rgb(233,223,10)"/><text x="56.9876%" y="143.50"></text></g><g><title>explicit_predicates_of (181,553 samples, 0.13%)</title><rect x="57.4545%" y="101" width="0.1252%" height="15" fill="rgb(215,21,27)"/><text x="57.7045%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (145,361 samples, 0.10%)</title><rect x="57.4794%" y="85" width="0.1002%" height="15" fill="rgb(232,23,21)"/><text x="57.7294%" y="95.50"></text></g><g><title>predicates_of (524,986 samples, 0.36%)</title><rect x="57.2611%" y="133" width="0.3620%" height="15" fill="rgb(244,5,23)"/><text x="57.5111%" y="143.50"></text></g><g><title>predicates_defined_on (348,595 samples, 0.24%)</title><rect x="57.3828%" y="117" width="0.2404%" height="15" fill="rgb(226,81,46)"/><text x="57.6328%" y="127.50"></text></g><g><title>trait_impls_of (169,801 samples, 0.12%)</title><rect x="57.6402%" y="133" width="0.1171%" height="15" fill="rgb(247,70,30)"/><text x="57.8902%" y="143.50"></text></g><g><title>typeck (24,990,881 samples, 17.23%)</title><rect x="40.6429%" y="149" width="17.2321%" height="15" fill="rgb(212,68,19)"/><text x="40.8929%" y="159.50">typeck</text></g><g><title>item_bodies_checking (38,626,701 samples, 26.63%)</title><rect x="31.2594%" y="197" width="26.6344%" height="15" fill="rgb(240,187,13)"/><text x="31.5094%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (38,624,001 samples, 26.63%)</title><rect x="31.2613%" y="181" width="26.6326%" height="15" fill="rgb(223,113,26)"/><text x="31.5113%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (38,589,941 samples, 26.61%)</title><rect x="31.2847%" y="165" width="26.6091%" height="15" fill="rgb(206,192,2)"/><text x="31.5347%" y="175.50">typeck</text></g><g><title>impl_trait_ref (321,024 samples, 0.22%)</title><rect x="58.0797%" y="117" width="0.2214%" height="15" fill="rgb(241,108,4)"/><text x="58.3297%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (291,563 samples, 0.20%)</title><rect x="58.1001%" y="101" width="0.2010%" height="15" fill="rgb(247,173,49)"/><text x="58.3501%" y="111.50"></text></g><g><title>adt_destructor (557,396 samples, 0.38%)</title><rect x="57.9381%" y="165" width="0.3843%" height="15" fill="rgb(224,114,35)"/><text x="58.1881%" y="175.50"></text></g><g><title>coherent_trait (553,416 samples, 0.38%)</title><rect x="57.9408%" y="149" width="0.3816%" height="15" fill="rgb(245,159,27)"/><text x="58.1908%" y="159.50"></text></g><g><title>specialization_graph_of (549,516 samples, 0.38%)</title><rect x="57.9435%" y="133" width="0.3789%" height="15" fill="rgb(245,172,44)"/><text x="58.1935%" y="143.50"></text></g><g><title>item_types_checking (1,267,624 samples, 0.87%)</title><rect x="57.8938%" y="197" width="0.8741%" height="15" fill="rgb(236,23,11)"/><text x="58.1438%" y="207.50"></text></g><g><title>check_mod_item_types (1,265,834 samples, 0.87%)</title><rect x="57.8951%" y="181" width="0.8728%" height="15" fill="rgb(205,117,38)"/><text x="58.1451%" y="191.50"></text></g><g><title>typeck (569,647 samples, 0.39%)</title><rect x="58.3751%" y="165" width="0.3928%" height="15" fill="rgb(237,72,25)"/><text x="58.6251%" y="175.50"></text></g><g><title>fn_sig (216,114 samples, 0.15%)</title><rect x="58.8582%" y="165" width="0.1490%" height="15" fill="rgb(244,70,9)"/><text x="59.1082%" y="175.50"></text></g><g><title>named_region_map (185,123 samples, 0.13%)</title><rect x="59.0833%" y="149" width="0.1276%" height="15" fill="rgb(217,125,39)"/><text x="59.3333%" y="159.50"></text></g><g><title>resolve_lifetimes (170,653 samples, 0.12%)</title><rect x="59.0933%" y="133" width="0.1177%" height="15" fill="rgb(235,36,10)"/><text x="59.3433%" y="143.50"></text></g><g><title>generics_of (302,384 samples, 0.21%)</title><rect x="59.0072%" y="165" width="0.2085%" height="15" fill="rgb(251,123,47)"/><text x="59.2572%" y="175.50"></text></g><g><title>predicates_of (181,781 samples, 0.13%)</title><rect x="59.2160%" y="165" width="0.1253%" height="15" fill="rgb(221,13,13)"/><text x="59.4660%" y="175.50"></text></g><g><title>predicates_defined_on (167,911 samples, 0.12%)</title><rect x="59.2255%" y="149" width="0.1158%" height="15" fill="rgb(238,131,9)"/><text x="59.4755%" y="159.50"></text></g><g><title>type_collecting (878,090 samples, 0.61%)</title><rect x="58.7691%" y="197" width="0.6055%" height="15" fill="rgb(211,50,8)"/><text x="59.0191%" y="207.50"></text></g><g><title>collect_mod_item_types (871,719 samples, 0.60%)</title><rect x="58.7735%" y="181" width="0.6011%" height="15" fill="rgb(245,182,24)"/><text x="59.0235%" y="191.50"></text></g><g><title>check_impl_item_well_formed (495,976 samples, 0.34%)</title><rect x="59.4284%" y="181" width="0.3420%" height="15" fill="rgb(242,14,37)"/><text x="59.6784%" y="191.50"></text></g><g><title>adt_def (192,871 samples, 0.13%)</title><rect x="60.5297%" y="69" width="0.1330%" height="15" fill="rgb(246,228,12)"/><text x="60.7797%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (184,991 samples, 0.13%)</title><rect x="60.5352%" y="53" width="0.1276%" height="15" fill="rgb(213,55,15)"/><text x="60.7852%" y="63.50"></text></g><g><title>adt_sized_constraint (178,502 samples, 0.12%)</title><rect x="60.6627%" y="69" width="0.1231%" height="15" fill="rgb(209,9,3)"/><text x="60.9127%" y="79.50"></text></g><g><title>adt_sized_constraint (426,354 samples, 0.29%)</title><rect x="60.5068%" y="85" width="0.2940%" height="15" fill="rgb(230,59,30)"/><text x="60.7568%" y="95.50"></text></g><g><title>adt_sized_constraint (596,396 samples, 0.41%)</title><rect x="60.4187%" y="101" width="0.4112%" height="15" fill="rgb(209,121,21)"/><text x="60.6687%" y="111.50"></text></g><g><title>adt_sized_constraint (698,038 samples, 0.48%)</title><rect x="60.3632%" y="117" width="0.4813%" height="15" fill="rgb(220,109,13)"/><text x="60.6132%" y="127.50"></text></g><g><title>adt_sized_constraint (752,969 samples, 0.52%)</title><rect x="60.3394%" y="133" width="0.5192%" height="15" fill="rgb(232,18,1)"/><text x="60.5894%" y="143.50"></text></g><g><title>adt_sized_constraint (871,389 samples, 0.60%)</title><rect x="60.2590%" y="149" width="0.6009%" height="15" fill="rgb(215,41,42)"/><text x="60.5090%" y="159.50"></text></g><g><title>evaluate_obligation (1,130,632 samples, 0.78%)</title><rect x="60.1558%" y="165" width="0.7796%" height="15" fill="rgb(224,123,36)"/><text x="60.4058%" y="175.50"></text></g><g><title>param_env (179,753 samples, 0.12%)</title><rect x="61.0359%" y="165" width="0.1239%" height="15" fill="rgb(240,125,3)"/><text x="61.2859%" y="175.50"></text></g><g><title>region_scope_tree (193,272 samples, 0.13%)</title><rect x="61.2051%" y="165" width="0.1333%" height="15" fill="rgb(205,98,50)"/><text x="61.4551%" y="175.50"></text></g><g><title>analysis (88,298,006 samples, 60.88%)</title><rect x="0.4739%" y="229" width="60.8845%" height="15" fill="rgb(205,185,37)"/><text x="0.7239%" y="239.50">analysis</text></g><g><title>type_check_crate (43,747,459 samples, 30.17%)</title><rect x="31.1930%" y="213" width="30.1654%" height="15" fill="rgb(238,207,15)"/><text x="31.4430%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,874,142 samples, 1.98%)</title><rect x="59.3766%" y="197" width="1.9818%" height="15" fill="rgb(213,199,42)"/><text x="59.6266%" y="207.50">w..</text></g><g><title>check_item_well_formed (2,302,975 samples, 1.59%)</title><rect x="59.7704%" y="181" width="1.5880%" height="15" fill="rgb(235,201,11)"/><text x="60.0204%" y="191.50"></text></g><g><title>codegen_crate (452,025 samples, 0.31%)</title><rect x="61.3667%" y="229" width="0.3117%" height="15" fill="rgb(207,46,11)"/><text x="61.6167%" y="239.50"></text></g><g><title>metadata_load_macro (1,166,903 samples, 0.80%)</title><rect x="86.6587%" y="181" width="0.8046%" height="15" fill="rgb(241,35,35)"/><text x="86.9087%" y="191.50"></text></g><g><title>macro_expand_crate (39,828,264 samples, 27.46%)</title><rect x="62.0131%" y="213" width="27.4630%" height="15" fill="rgb(243,32,47)"/><text x="62.2631%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (39,814,114 samples, 27.45%)</title><rect x="62.0228%" y="197" width="27.4532%" height="15" fill="rgb(247,202,23)"/><text x="62.2728%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,918,894 samples, 2.01%)</title><rect x="87.4633%" y="181" width="2.0127%" height="15" fill="rgb(219,102,11)"/><text x="87.7133%" y="191.50">m..</text></g><g><title>metadata_register_crate (977,241 samples, 0.67%)</title><rect x="88.8022%" y="165" width="0.6738%" height="15" fill="rgb(243,110,44)"/><text x="89.0522%" y="175.50"></text></g><g><title>maybe_create_a_macro_crate (376,714 samples, 0.26%)</title><rect x="89.4768%" y="213" width="0.2598%" height="15" fill="rgb(222,74,54)"/><text x="89.7268%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (256,323 samples, 0.18%)</title><rect x="89.7366%" y="213" width="0.1767%" height="15" fill="rgb(216,99,12)"/><text x="89.9866%" y="223.50"></text></g><g><title>finalize_macro_resolutions (222,582 samples, 0.15%)</title><rect x="89.9405%" y="197" width="0.1535%" height="15" fill="rgb(226,22,26)"/><text x="90.1905%" y="207.50"></text></g><g><title>late_resolve_crate (2,201,535 samples, 1.52%)</title><rect x="90.0939%" y="197" width="1.5180%" height="15" fill="rgb(217,163,10)"/><text x="90.3439%" y="207.50"></text></g><g><title>configure_and_expand (43,514,716 samples, 30.00%)</title><rect x="61.6784%" y="229" width="30.0049%" height="15" fill="rgb(213,25,53)"/><text x="61.9284%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,566,919 samples, 1.77%)</title><rect x="89.9133%" y="213" width="1.7700%" height="15" fill="rgb(252,105,26)"/><text x="90.1633%" y="223.50"></text></g><g><title>drop_ast (155,102 samples, 0.11%)</title><rect x="91.6833%" y="229" width="0.1069%" height="15" fill="rgb(220,39,43)"/><text x="91.9333%" y="239.50"></text></g><g><title>early_lint_checks (362,434 samples, 0.25%)</title><rect x="91.8034%" y="229" width="0.2499%" height="15" fill="rgb(229,68,48)"/><text x="92.0534%" y="239.50"></text></g><g><title>free_global_ctxt (3,533,860 samples, 2.44%)</title><rect x="92.0533%" y="229" width="2.4367%" height="15" fill="rgb(252,8,32)"/><text x="92.3033%" y="239.50">fr..</text></g><g><title>generate_crate_metadata (178,832 samples, 0.12%)</title><rect x="94.4900%" y="229" width="0.1233%" height="15" fill="rgb(223,20,43)"/><text x="94.7400%" y="239.50"></text></g><g><title>hir_lowering (2,105,314 samples, 1.45%)</title><rect x="94.6133%" y="229" width="1.4517%" height="15" fill="rgb(229,81,49)"/><text x="94.8633%" y="239.50"></text></g><g><title>parse_crate (4,245,627 samples, 2.93%)</title><rect x="96.1063%" y="229" width="2.9275%" height="15" fill="rgb(236,28,36)"/><text x="96.3563%" y="239.50">pa..</text></g><g><title>prepare_outputs (191,402 samples, 0.13%)</title><rect x="99.0404%" y="229" width="0.1320%" height="15" fill="rgb(249,185,26)"/><text x="99.2904%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (801,929 samples, 0.55%)</title><rect x="99.1724%" y="229" width="0.5530%" height="15" fill="rgb(249,174,33)"/><text x="99.4224%" y="239.50"></text></g><g><title>all (145,025,379 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (145,025,379 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (292,833 samples, 0.20%)</title><rect x="99.7981%" y="229" width="0.2019%" height="15" fill="rgb(250,127,30)"/><text x="100.0481%" y="239.50"></text></g></svg></svg>