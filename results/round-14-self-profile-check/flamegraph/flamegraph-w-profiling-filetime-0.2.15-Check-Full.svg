<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (209,004 samples, 0.19%)</title><rect x="8.9339%" y="133" width="0.1916%" height="15" fill="rgb(227,0,7)"/><text x="9.1839%" y="143.50"></text></g><g><title>item_attrs (198,691 samples, 0.18%)</title><rect x="9.5186%" y="101" width="0.1821%" height="15" fill="rgb(217,0,24)"/><text x="9.7686%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (190,181 samples, 0.17%)</title><rect x="9.5264%" y="85" width="0.1743%" height="15" fill="rgb(221,193,54)"/><text x="9.7764%" y="95.50"></text></g><g><title>codegen_fn_attrs (292,603 samples, 0.27%)</title><rect x="9.4463%" y="117" width="0.2682%" height="15" fill="rgb(248,212,6)"/><text x="9.6963%" y="127.50"></text></g><g><title>adt_drop_tys (117,843 samples, 0.11%)</title><rect x="11.7527%" y="69" width="0.1080%" height="15" fill="rgb(208,68,35)"/><text x="12.0027%" y="79.50"></text></g><g><title>adt_drop_tys (234,323 samples, 0.21%)</title><rect x="11.7323%" y="85" width="0.2148%" height="15" fill="rgb(232,128,0)"/><text x="11.9823%" y="95.50"></text></g><g><title>needs_drop_raw (998,921 samples, 0.92%)</title><rect x="11.6663%" y="101" width="0.9157%" height="15" fill="rgb(207,160,47)"/><text x="11.9163%" y="111.50"></text></g><g><title>is_copy_raw (692,557 samples, 0.63%)</title><rect x="11.9471%" y="85" width="0.6348%" height="15" fill="rgb(228,23,34)"/><text x="12.1971%" y="95.50"></text></g><g><title>evaluate_obligation (588,136 samples, 0.54%)</title><rect x="12.0428%" y="69" width="0.5391%" height="15" fill="rgb(218,30,26)"/><text x="12.2928%" y="79.50"></text></g><g><title>specialization_graph_of (315,863 samples, 0.29%)</title><rect x="12.9225%" y="85" width="0.2895%" height="15" fill="rgb(220,122,19)"/><text x="13.1725%" y="95.50"></text></g><g><title>resolve_instance (733,356 samples, 0.67%)</title><rect x="12.6079%" y="101" width="0.6722%" height="15" fill="rgb(250,228,42)"/><text x="12.8579%" y="111.50"></text></g><g><title>thir_body (793,231 samples, 0.73%)</title><rect x="13.3019%" y="101" width="0.7271%" height="15" fill="rgb(240,193,28)"/><text x="13.5519%" y="111.50"></text></g><g><title>mir_const (6,246,210 samples, 5.73%)</title><rect x="8.3176%" y="149" width="5.7257%" height="15" fill="rgb(216,20,37)"/><text x="8.5676%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (5,364,901 samples, 4.92%)</title><rect x="9.1255%" y="133" width="4.9179%" height="15" fill="rgb(206,188,39)"/><text x="9.3755%" y="143.50">unsafe..</text></g><g><title>mir_built (4,722,295 samples, 4.33%)</title><rect x="9.7145%" y="117" width="4.3288%" height="15" fill="rgb(217,207,13)"/><text x="9.9645%" y="127.50">mir_b..</text></g><g><title>mir_const_qualif (299,422 samples, 0.27%)</title><rect x="14.0433%" y="149" width="0.2745%" height="15" fill="rgb(231,73,38)"/><text x="14.2933%" y="159.50"></text></g><g><title>mir_promoted (7,193,458 samples, 6.59%)</title><rect x="7.7253%" y="165" width="6.5940%" height="15" fill="rgb(225,20,46)"/><text x="7.9753%" y="175.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (185,661 samples, 0.17%)</title><rect x="14.3193%" y="165" width="0.1702%" height="15" fill="rgb(210,31,41)"/><text x="14.5693%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,027,106 samples, 0.94%)</title><rect x="14.6599%" y="165" width="0.9415%" height="15" fill="rgb(221,200,47)"/><text x="14.9099%" y="175.50"></text></g><g><title>evaluate_obligation (149,261 samples, 0.14%)</title><rect x="15.4646%" y="149" width="0.1368%" height="15" fill="rgb(226,26,5)"/><text x="15.7146%" y="159.50"></text></g><g><title>MIR_borrow_checking (16,044,478 samples, 14.71%)</title><rect x="0.8990%" y="197" width="14.7075%" height="15" fill="rgb(249,33,26)"/><text x="1.1490%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,952,747 samples, 14.62%)</title><rect x="0.9831%" y="181" width="14.6234%" height="15" fill="rgb(235,183,28)"/><text x="1.2331%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (137,552 samples, 0.13%)</title><rect x="15.6065%" y="197" width="0.1261%" height="15" fill="rgb(221,5,38)"/><text x="15.8565%" y="207.50"></text></g><g><title>hir_module_items (144,321 samples, 0.13%)</title><rect x="15.7326%" y="197" width="0.1323%" height="15" fill="rgb(247,18,42)"/><text x="15.9826%" y="207.50"></text></g><g><title>should_inherit_track_caller (169,252 samples, 0.16%)</title><rect x="16.1558%" y="149" width="0.1551%" height="15" fill="rgb(241,131,45)"/><text x="16.4058%" y="159.50"></text></g><g><title>codegen_fn_attrs (316,863 samples, 0.29%)</title><rect x="16.0390%" y="165" width="0.2905%" height="15" fill="rgb(249,31,29)"/><text x="16.2890%" y="175.50"></text></g><g><title>check_mod_attrs (487,138 samples, 0.45%)</title><rect x="15.8830%" y="181" width="0.4465%" height="15" fill="rgb(225,111,53)"/><text x="16.1330%" y="191.50"></text></g><g><title>lookup_deprecation_entry (118,212 samples, 0.11%)</title><rect x="16.5912%" y="165" width="0.1084%" height="15" fill="rgb(238,160,17)"/><text x="16.8412%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (351,683 samples, 0.32%)</title><rect x="16.4628%" y="181" width="0.3224%" height="15" fill="rgb(214,148,48)"/><text x="16.7128%" y="191.50"></text></g><g><title>misc_checking_1 (1,052,772 samples, 0.97%)</title><rect x="15.8653%" y="197" width="0.9650%" height="15" fill="rgb(232,36,49)"/><text x="16.1153%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (334,824 samples, 0.31%)</title><rect x="16.8317%" y="181" width="0.3069%" height="15" fill="rgb(209,103,24)"/><text x="17.0817%" y="191.50"></text></g><g><title>check_mod_liveness (261,793 samples, 0.24%)</title><rect x="16.8987%" y="165" width="0.2400%" height="15" fill="rgb(229,88,8)"/><text x="17.1487%" y="175.50"></text></g><g><title>misc_checking_2 (793,459 samples, 0.73%)</title><rect x="16.8303%" y="197" width="0.7273%" height="15" fill="rgb(213,181,19)"/><text x="17.0803%" y="207.50"></text></g><g><title>match_checking (457,085 samples, 0.42%)</title><rect x="17.1386%" y="181" width="0.4190%" height="15" fill="rgb(254,191,54)"/><text x="17.3886%" y="191.50"></text></g><g><title>check_match (434,054 samples, 0.40%)</title><rect x="17.1598%" y="165" width="0.3979%" height="15" fill="rgb(241,83,37)"/><text x="17.4098%" y="175.50"></text></g><g><title>check_private_in_public (128,111 samples, 0.12%)</title><rect x="17.5668%" y="181" width="0.1174%" height="15" fill="rgb(233,36,39)"/><text x="17.8168%" y="191.50"></text></g><g><title>death_checking (570,067 samples, 0.52%)</title><rect x="17.6842%" y="181" width="0.5226%" height="15" fill="rgb(226,3,54)"/><text x="17.9342%" y="191.50"></text></g><g><title>item_attrs (209,493 samples, 0.19%)</title><rect x="18.0148%" y="165" width="0.1920%" height="15" fill="rgb(245,192,40)"/><text x="18.2648%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (207,583 samples, 0.19%)</title><rect x="18.0165%" y="149" width="0.1903%" height="15" fill="rgb(238,167,29)"/><text x="18.2665%" y="159.50"></text></g><g><title>eval_to_allocation_raw (236,692 samples, 0.22%)</title><rect x="18.8142%" y="149" width="0.2170%" height="15" fill="rgb(232,182,51)"/><text x="19.0642%" y="159.50"></text></g><g><title>eval_to_allocation_raw (233,712 samples, 0.21%)</title><rect x="18.8170%" y="133" width="0.2142%" height="15" fill="rgb(231,60,39)"/><text x="19.0670%" y="143.50"></text></g><g><title>param_env (188,912 samples, 0.17%)</title><rect x="19.0598%" y="149" width="0.1732%" height="15" fill="rgb(208,69,12)"/><text x="19.3098%" y="159.50"></text></g><g><title>crate_lints (2,452,827 samples, 2.25%)</title><rect x="18.2084%" y="165" width="2.2484%" height="15" fill="rgb(235,93,37)"/><text x="18.4584%" y="175.50">c..</text></g><g><title>type_of (1,328,326 samples, 1.22%)</title><rect x="19.2392%" y="149" width="1.2176%" height="15" fill="rgb(213,116,39)"/><text x="19.4892%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (858,021 samples, 0.79%)</title><rect x="19.6704%" y="133" width="0.7865%" height="15" fill="rgb(222,207,29)"/><text x="19.9204%" y="143.50"></text></g><g><title>lint_checking (2,745,961 samples, 2.52%)</title><rect x="18.2068%" y="181" width="2.5171%" height="15" fill="rgb(206,96,30)"/><text x="18.4568%" y="191.50">li..</text></g><g><title>module_lints (291,354 samples, 0.27%)</title><rect x="20.4569%" y="165" width="0.2671%" height="15" fill="rgb(218,138,4)"/><text x="20.7069%" y="175.50"></text></g><g><title>lint_mod (285,814 samples, 0.26%)</title><rect x="20.4620%" y="149" width="0.2620%" height="15" fill="rgb(250,191,14)"/><text x="20.7120%" y="159.50"></text></g><g><title>privacy_access_levels (148,762 samples, 0.14%)</title><rect x="20.7240%" y="181" width="0.1364%" height="15" fill="rgb(239,60,40)"/><text x="20.9740%" y="191.50"></text></g><g><title>privacy_checking_modules (554,616 samples, 0.51%)</title><rect x="20.8603%" y="181" width="0.5084%" height="15" fill="rgb(206,27,48)"/><text x="21.1103%" y="191.50"></text></g><g><title>check_mod_privacy (550,886 samples, 0.50%)</title><rect x="20.8637%" y="165" width="0.5050%" height="15" fill="rgb(225,35,8)"/><text x="21.1137%" y="175.50"></text></g><g><title>misc_checking_3 (4,175,267 samples, 3.83%)</title><rect x="17.5576%" y="197" width="3.8274%" height="15" fill="rgb(250,213,24)"/><text x="17.8076%" y="207.50">misc..</text></g><g><title>impl_trait_ref (139,971 samples, 0.13%)</title><rect x="21.6141%" y="101" width="0.1283%" height="15" fill="rgb(247,123,22)"/><text x="21.8641%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (121,321 samples, 0.11%)</title><rect x="21.6312%" y="85" width="0.1112%" height="15" fill="rgb(231,138,38)"/><text x="21.8812%" y="95.50"></text></g><g><title>adt_destructor (290,633 samples, 0.27%)</title><rect x="21.4983%" y="149" width="0.2664%" height="15" fill="rgb(231,145,46)"/><text x="21.7483%" y="159.50"></text></g><g><title>coherent_trait (278,893 samples, 0.26%)</title><rect x="21.5090%" y="133" width="0.2557%" height="15" fill="rgb(251,118,11)"/><text x="21.7590%" y="143.50"></text></g><g><title>specialization_graph_of (277,563 samples, 0.25%)</title><rect x="21.5102%" y="117" width="0.2544%" height="15" fill="rgb(217,147,25)"/><text x="21.7602%" y="127.50"></text></g><g><title>is_copy_raw (113,302 samples, 0.10%)</title><rect x="21.7647%" y="149" width="0.1039%" height="15" fill="rgb(247,81,37)"/><text x="22.0147%" y="159.50"></text></g><g><title>impl_parent (3,069,433 samples, 2.81%)</title><rect x="26.1750%" y="133" width="2.8137%" height="15" fill="rgb(209,12,38)"/><text x="26.4250%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,682,716 samples, 1.54%)</title><rect x="27.4461%" y="117" width="1.5425%" height="15" fill="rgb(227,1,9)"/><text x="27.6961%" y="127.50"></text></g><g><title>impl_trait_ref (5,959,077 samples, 5.46%)</title><rect x="28.9886%" y="133" width="5.4625%" height="15" fill="rgb(248,47,43)"/><text x="29.2386%" y="143.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,481,497 samples, 4.11%)</title><rect x="30.3431%" y="117" width="4.1081%" height="15" fill="rgb(221,10,30)"/><text x="30.5931%" y="127.50">meta..</text></g><g><title>trait_impls_of (1,023,811 samples, 0.94%)</title><rect x="34.4774%" y="133" width="0.9385%" height="15" fill="rgb(210,229,1)"/><text x="34.7274%" y="143.50"></text></g><g><title>implementations_of_trait (267,082 samples, 0.24%)</title><rect x="35.1711%" y="117" width="0.2448%" height="15" fill="rgb(222,148,37)"/><text x="35.4211%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (216,182 samples, 0.20%)</title><rect x="35.2177%" y="101" width="0.1982%" height="15" fill="rgb(234,67,33)"/><text x="35.4677%" y="111.50"></text></g><g><title>coherent_trait (15,228,790 samples, 13.96%)</title><rect x="21.4570%" y="165" width="13.9598%" height="15" fill="rgb(247,98,35)"/><text x="21.7070%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (14,745,755 samples, 13.52%)</title><rect x="21.8998%" y="149" width="13.5170%" height="15" fill="rgb(247,138,52)"/><text x="22.1498%" y="159.50">specialization_graph..</text></g><g><title>coherence_checking (15,296,110 samples, 14.02%)</title><rect x="21.4388%" y="181" width="14.0215%" height="15" fill="rgb(213,79,30)"/><text x="21.6888%" y="191.50">coherence_checking</text></g><g><title>associated_items (121,240 samples, 0.11%)</title><rect x="43.6106%" y="133" width="0.1111%" height="15" fill="rgb(246,177,23)"/><text x="43.8606%" y="143.50"></text></g><g><title>adt_dtorck_constraint (113,431 samples, 0.10%)</title><rect x="43.8911%" y="101" width="0.1040%" height="15" fill="rgb(230,62,27)"/><text x="44.1411%" y="111.50"></text></g><g><title>dropck_outlives (285,492 samples, 0.26%)</title><rect x="43.7480%" y="133" width="0.2617%" height="15" fill="rgb(216,154,8)"/><text x="43.9980%" y="143.50"></text></g><g><title>adt_dtorck_constraint (192,562 samples, 0.18%)</title><rect x="43.8332%" y="117" width="0.1765%" height="15" fill="rgb(244,35,45)"/><text x="44.0832%" y="127.50"></text></g><g><title>evaluate_obligation (936,981 samples, 0.86%)</title><rect x="44.0097%" y="133" width="0.8589%" height="15" fill="rgb(251,115,12)"/><text x="44.2597%" y="143.50"></text></g><g><title>trait_impls_of (136,692 samples, 0.13%)</title><rect x="44.7433%" y="117" width="0.1253%" height="15" fill="rgb(240,54,50)"/><text x="44.9933%" y="127.50"></text></g><g><title>method_autoderef_steps (114,782 samples, 0.11%)</title><rect x="45.2245%" y="133" width="0.1052%" height="15" fill="rgb(233,84,52)"/><text x="45.4745%" y="143.50"></text></g><g><title>object_safety_violations (132,562 samples, 0.12%)</title><rect x="45.3297%" y="133" width="0.1215%" height="15" fill="rgb(207,117,47)"/><text x="45.5797%" y="143.50"></text></g><g><title>predicates_of (184,783 samples, 0.17%)</title><rect x="45.4783%" y="133" width="0.1694%" height="15" fill="rgb(249,43,39)"/><text x="45.7283%" y="143.50"></text></g><g><title>predicates_defined_on (128,552 samples, 0.12%)</title><rect x="45.5298%" y="117" width="0.1178%" height="15" fill="rgb(209,38,44)"/><text x="45.7798%" y="127.50"></text></g><g><title>associated_item (372,907 samples, 0.34%)</title><rect x="49.1714%" y="101" width="0.3418%" height="15" fill="rgb(236,212,23)"/><text x="49.4214%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (288,565 samples, 0.26%)</title><rect x="49.2487%" y="85" width="0.2645%" height="15" fill="rgb(242,79,21)"/><text x="49.4987%" y="95.50"></text></g><g><title>associated_items (538,889 samples, 0.49%)</title><rect x="49.0406%" y="117" width="0.4940%" height="15" fill="rgb(211,96,35)"/><text x="49.2906%" y="127.50"></text></g><g><title>adt_dtorck_constraint (115,991 samples, 0.11%)</title><rect x="49.6938%" y="85" width="0.1063%" height="15" fill="rgb(253,215,40)"/><text x="49.9438%" y="95.50"></text></g><g><title>dropck_outlives (277,313 samples, 0.25%)</title><rect x="49.5605%" y="117" width="0.2542%" height="15" fill="rgb(211,81,21)"/><text x="49.8105%" y="127.50"></text></g><g><title>adt_dtorck_constraint (215,453 samples, 0.20%)</title><rect x="49.6172%" y="101" width="0.1975%" height="15" fill="rgb(208,190,38)"/><text x="49.8672%" y="111.50"></text></g><g><title>adt_def (227,054 samples, 0.21%)</title><rect x="51.3521%" y="85" width="0.2081%" height="15" fill="rgb(235,213,38)"/><text x="51.6021%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (224,824 samples, 0.21%)</title><rect x="51.3541%" y="69" width="0.2061%" height="15" fill="rgb(237,122,38)"/><text x="51.6041%" y="79.50"></text></g><g><title>item_attrs (191,603 samples, 0.18%)</title><rect x="51.3846%" y="53" width="0.1756%" height="15" fill="rgb(244,218,35)"/><text x="51.6346%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (188,813 samples, 0.17%)</title><rect x="51.3871%" y="37" width="0.1731%" height="15" fill="rgb(240,68,47)"/><text x="51.6371%" y="47.50"></text></g><g><title>adt_sized_constraint (249,064 samples, 0.23%)</title><rect x="51.3370%" y="101" width="0.2283%" height="15" fill="rgb(210,16,53)"/><text x="51.5870%" y="111.50"></text></g><g><title>generics_of (419,025 samples, 0.38%)</title><rect x="51.5653%" y="101" width="0.3841%" height="15" fill="rgb(235,124,12)"/><text x="51.8153%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (316,894 samples, 0.29%)</title><rect x="51.6589%" y="85" width="0.2905%" height="15" fill="rgb(224,169,11)"/><text x="51.9089%" y="95.50"></text></g><g><title>impl_trait_ref (915,950 samples, 0.84%)</title><rect x="51.9879%" y="101" width="0.8396%" height="15" fill="rgb(250,166,2)"/><text x="52.2379%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (588,144 samples, 0.54%)</title><rect x="52.2883%" y="85" width="0.5391%" height="15" fill="rgb(242,216,29)"/><text x="52.5383%" y="95.50"></text></g><g><title>predicates_of (197,571 samples, 0.18%)</title><rect x="52.8392%" y="101" width="0.1811%" height="15" fill="rgb(230,116,27)"/><text x="53.0892%" y="111.50"></text></g><g><title>predicates_defined_on (125,871 samples, 0.12%)</title><rect x="52.9050%" y="85" width="0.1154%" height="15" fill="rgb(228,99,48)"/><text x="53.1550%" y="95.50"></text></g><g><title>specializes (376,623 samples, 0.35%)</title><rect x="53.0204%" y="101" width="0.3452%" height="15" fill="rgb(253,11,6)"/><text x="53.2704%" y="111.50"></text></g><g><title>param_env (225,481 samples, 0.21%)</title><rect x="53.1589%" y="85" width="0.2067%" height="15" fill="rgb(247,143,39)"/><text x="53.4089%" y="95.50"></text></g><g><title>trait_impls_of (181,492 samples, 0.17%)</title><rect x="53.3698%" y="101" width="0.1664%" height="15" fill="rgb(236,97,10)"/><text x="53.6198%" y="111.50"></text></g><g><title>evaluate_obligation (4,078,598 samples, 3.74%)</title><rect x="49.8147%" y="117" width="3.7387%" height="15" fill="rgb(233,208,19)"/><text x="50.0647%" y="127.50">eval..</text></g><g><title>method_autoderef_steps (128,220 samples, 0.12%)</title><rect x="53.9067%" y="117" width="0.1175%" height="15" fill="rgb(216,164,2)"/><text x="54.1567%" y="127.50"></text></g><g><title>predicates_of (203,012 samples, 0.19%)</title><rect x="54.0369%" y="117" width="0.1861%" height="15" fill="rgb(220,129,5)"/><text x="54.2869%" y="127.50"></text></g><g><title>predicates_defined_on (135,231 samples, 0.12%)</title><rect x="54.0990%" y="101" width="0.1240%" height="15" fill="rgb(242,17,10)"/><text x="54.3490%" y="111.50"></text></g><g><title>typeck (9,339,994 samples, 8.56%)</title><rect x="45.7263%" y="133" width="8.5617%" height="15" fill="rgb(242,107,0)"/><text x="45.9763%" y="143.50">typeck</text></g><g><title>item_bodies_checking (20,580,229 samples, 18.87%)</title><rect x="35.4737%" y="181" width="18.8653%" height="15" fill="rgb(251,28,31)"/><text x="35.7237%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,577,409 samples, 18.86%)</title><rect x="35.4762%" y="165" width="18.8627%" height="15" fill="rgb(233,223,10)"/><text x="35.7262%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (20,521,759 samples, 18.81%)</title><rect x="35.5273%" y="149" width="18.8117%" height="15" fill="rgb(215,21,27)"/><text x="35.7773%" y="159.50">typeck</text></g><g><title>item_types_checking (808,709 samples, 0.74%)</title><rect x="54.3390%" y="181" width="0.7413%" height="15" fill="rgb(232,23,21)"/><text x="54.5890%" y="191.50"></text></g><g><title>check_mod_item_types (804,139 samples, 0.74%)</title><rect x="54.3432%" y="165" width="0.7371%" height="15" fill="rgb(244,5,23)"/><text x="54.5932%" y="175.50"></text></g><g><title>typeck (392,154 samples, 0.36%)</title><rect x="54.7208%" y="149" width="0.3595%" height="15" fill="rgb(226,81,46)"/><text x="54.9708%" y="159.50"></text></g><g><title>fn_sig (251,406 samples, 0.23%)</title><rect x="55.2448%" y="149" width="0.2305%" height="15" fill="rgb(247,70,30)"/><text x="55.4948%" y="159.50"></text></g><g><title>named_region_map (313,142 samples, 0.29%)</title><rect x="55.5410%" y="133" width="0.2870%" height="15" fill="rgb(212,68,19)"/><text x="55.7910%" y="143.50"></text></g><g><title>resolve_lifetimes (298,372 samples, 0.27%)</title><rect x="55.5545%" y="117" width="0.2735%" height="15" fill="rgb(240,187,13)"/><text x="55.8045%" y="127.50"></text></g><g><title>generics_of (398,933 samples, 0.37%)</title><rect x="55.4753%" y="149" width="0.3657%" height="15" fill="rgb(223,113,26)"/><text x="55.7253%" y="159.50"></text></g><g><title>explicit_predicates_of (202,632 samples, 0.19%)</title><rect x="55.9626%" y="117" width="0.1857%" height="15" fill="rgb(206,192,2)"/><text x="56.2126%" y="127.50"></text></g><g><title>predicates_of (325,083 samples, 0.30%)</title><rect x="55.8976%" y="149" width="0.2980%" height="15" fill="rgb(241,108,4)"/><text x="56.1476%" y="159.50"></text></g><g><title>predicates_defined_on (297,953 samples, 0.27%)</title><rect x="55.9225%" y="133" width="0.2731%" height="15" fill="rgb(247,173,49)"/><text x="56.1725%" y="143.50"></text></g><g><title>type_collecting (1,308,995 samples, 1.20%)</title><rect x="55.0827%" y="181" width="1.1999%" height="15" fill="rgb(224,114,35)"/><text x="55.3327%" y="191.50"></text></g><g><title>collect_mod_item_types (1,299,474 samples, 1.19%)</title><rect x="55.0914%" y="165" width="1.1912%" height="15" fill="rgb(245,159,27)"/><text x="55.3414%" y="175.50"></text></g><g><title>evaluate_obligation (154,121 samples, 0.14%)</title><rect x="56.8873%" y="149" width="0.1413%" height="15" fill="rgb(245,172,44)"/><text x="57.1373%" y="159.50"></text></g><g><title>region_scope_tree (132,792 samples, 0.12%)</title><rect x="57.2193%" y="149" width="0.1217%" height="15" fill="rgb(236,23,11)"/><text x="57.4693%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,043,913 samples, 0.96%)</title><rect x="56.3966%" y="165" width="0.9569%" height="15" fill="rgb(205,117,38)"/><text x="56.6466%" y="175.50"></text></g><g><title>adt_sized_constraint (177,162 samples, 0.16%)</title><rect x="58.3736%" y="117" width="0.1624%" height="15" fill="rgb(237,72,25)"/><text x="58.6236%" y="127.50"></text></g><g><title>adt_sized_constraint (254,623 samples, 0.23%)</title><rect x="58.3086%" y="133" width="0.2334%" height="15" fill="rgb(244,70,9)"/><text x="58.5586%" y="143.50"></text></g><g><title>evaluate_obligation (453,394 samples, 0.42%)</title><rect x="58.1536%" y="149" width="0.4156%" height="15" fill="rgb(217,125,39)"/><text x="58.4036%" y="159.50"></text></g><g><title>param_env (164,051 samples, 0.15%)</title><rect x="58.6427%" y="149" width="0.1504%" height="15" fill="rgb(235,36,10)"/><text x="58.8927%" y="159.50"></text></g><g><title>region_scope_tree (181,271 samples, 0.17%)</title><rect x="58.8837%" y="149" width="0.1662%" height="15" fill="rgb(251,123,47)"/><text x="59.1337%" y="159.50"></text></g><g><title>analysis (63,745,471 samples, 58.43%)</title><rect x="0.6965%" y="213" width="58.4337%" height="15" fill="rgb(221,13,13)"/><text x="0.9465%" y="223.50">analysis</text></g><g><title>type_check_crate (41,176,319 samples, 37.75%)</title><rect x="21.3850%" y="197" width="37.7452%" height="15" fill="rgb(238,131,9)"/><text x="21.6350%" y="207.50">type_check_crate</text></g><g><title>wf_checking (3,102,595 samples, 2.84%)</title><rect x="56.2861%" y="181" width="2.8441%" height="15" fill="rgb(211,50,8)"/><text x="56.5361%" y="191.50">wf..</text></g><g><title>check_item_well_formed (1,938,190 samples, 1.78%)</title><rect x="57.3535%" y="165" width="1.7767%" height="15" fill="rgb(245,182,24)"/><text x="57.6035%" y="175.50">c..</text></g><g><title>codegen_crate (523,386 samples, 0.48%)</title><rect x="59.1409%" y="213" width="0.4798%" height="15" fill="rgb(242,14,37)"/><text x="59.3909%" y="223.50"></text></g><g><title>AST_validation (122,742 samples, 0.11%)</title><rect x="59.8288%" y="197" width="0.1125%" height="15" fill="rgb(246,228,12)"/><text x="60.0788%" y="207.50"></text></g><g><title>metadata_load_macro (268,612 samples, 0.25%)</title><rect x="82.2748%" y="165" width="0.2462%" height="15" fill="rgb(213,55,15)"/><text x="82.5248%" y="175.50"></text></g><g><title>metadata_register_crate (2,631,700 samples, 2.41%)</title><rect x="82.5210%" y="165" width="2.4124%" height="15" fill="rgb(209,9,3)"/><text x="82.7710%" y="175.50">me..</text></g><g><title>metadata_register_crate (962,212 samples, 0.88%)</title><rect x="84.0514%" y="149" width="0.8820%" height="15" fill="rgb(230,59,30)"/><text x="84.3014%" y="159.50"></text></g><g><title>macro_expand_crate (27,386,135 samples, 25.10%)</title><rect x="60.0649%" y="197" width="25.1041%" height="15" fill="rgb(209,121,21)"/><text x="60.3149%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (27,365,535 samples, 25.09%)</title><rect x="60.0838%" y="181" width="25.0852%" height="15" fill="rgb(220,109,13)"/><text x="60.3338%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (256,983 samples, 0.24%)</title><rect x="84.9334%" y="165" width="0.2356%" height="15" fill="rgb(232,18,1)"/><text x="85.1834%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (381,285 samples, 0.35%)</title><rect x="85.1731%" y="197" width="0.3495%" height="15" fill="rgb(215,41,42)"/><text x="85.4231%" y="207.50"></text></g><g><title>finalize_macro_resolutions (169,522 samples, 0.16%)</title><rect x="85.5806%" y="181" width="0.1554%" height="15" fill="rgb(224,123,36)"/><text x="85.8306%" y="191.50"></text></g><g><title>late_resolve_crate (1,426,126 samples, 1.31%)</title><rect x="85.7360%" y="181" width="1.3073%" height="15" fill="rgb(240,125,3)"/><text x="85.9860%" y="191.50"></text></g><g><title>configure_and_expand (29,992,875 samples, 27.49%)</title><rect x="59.6206%" y="213" width="27.4936%" height="15" fill="rgb(205,98,50)"/><text x="59.8706%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,736,369 samples, 1.59%)</title><rect x="85.5226%" y="197" width="1.5917%" height="15" fill="rgb(205,185,37)"/><text x="85.7726%" y="207.50"></text></g><g><title>drop_ast (150,041 samples, 0.14%)</title><rect x="87.1143%" y="213" width="0.1375%" height="15" fill="rgb(238,207,15)"/><text x="87.3643%" y="223.50"></text></g><g><title>early_lint_checks (255,623 samples, 0.23%)</title><rect x="87.2653%" y="213" width="0.2343%" height="15" fill="rgb(213,199,42)"/><text x="87.5153%" y="223.50"></text></g><g><title>free_global_ctxt (3,431,979 samples, 3.15%)</title><rect x="87.4996%" y="213" width="3.1460%" height="15" fill="rgb(235,201,11)"/><text x="87.7496%" y="223.50">fre..</text></g><g><title>generate_crate_metadata (782,379 samples, 0.72%)</title><rect x="90.6456%" y="213" width="0.7172%" height="15" fill="rgb(207,46,11)"/><text x="90.8956%" y="223.50"></text></g><g><title>hir_lowering (1,859,971 samples, 1.70%)</title><rect x="91.3628%" y="213" width="1.7050%" height="15" fill="rgb(241,35,35)"/><text x="91.6128%" y="223.50"></text></g><g><title>parse_crate (6,100,579 samples, 5.59%)</title><rect x="93.1176%" y="213" width="5.5922%" height="15" fill="rgb(243,32,47)"/><text x="93.3676%" y="223.50">parse_c..</text></g><g><title>prepare_outputs (182,072 samples, 0.17%)</title><rect x="98.7171%" y="213" width="0.1669%" height="15" fill="rgb(247,202,23)"/><text x="98.9671%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (882,490 samples, 0.81%)</title><rect x="98.8840%" y="213" width="0.8090%" height="15" fill="rgb(219,102,11)"/><text x="99.1340%" y="223.50"></text></g><g><title>all (109,090,227 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (109,090,227 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (235,722 samples, 0.22%)</title><rect x="99.7839%" y="213" width="0.2161%" height="15" fill="rgb(216,99,12)"/><text x="100.0339%" y="223.50"></text></g></svg></svg>