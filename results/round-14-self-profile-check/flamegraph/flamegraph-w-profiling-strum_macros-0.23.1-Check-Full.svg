<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (746,331 samples, 0.11%)</title><rect x="16.0259%" y="101" width="0.1082%" height="15" fill="rgb(227,0,7)"/><text x="16.2759%" y="111.50"></text></g><g><title>codegen_fn_attrs (932,067 samples, 0.14%)</title><rect x="16.5343%" y="85" width="0.1351%" height="15" fill="rgb(217,0,24)"/><text x="16.7843%" y="95.50"></text></g><g><title>adt_drop_tys (900,061 samples, 0.13%)</title><rect x="20.0924%" y="53" width="0.1304%" height="15" fill="rgb(221,193,54)"/><text x="20.3424%" y="63.50"></text></g><g><title>needs_drop_raw (4,032,034 samples, 0.58%)</title><rect x="20.0293%" y="69" width="0.5844%" height="15" fill="rgb(248,212,6)"/><text x="20.2793%" y="79.50"></text></g><g><title>is_copy_raw (2,695,139 samples, 0.39%)</title><rect x="20.2231%" y="53" width="0.3906%" height="15" fill="rgb(208,68,35)"/><text x="20.4731%" y="63.50"></text></g><g><title>evaluate_obligation (2,212,572 samples, 0.32%)</title><rect x="20.2930%" y="37" width="0.3207%" height="15" fill="rgb(232,128,0)"/><text x="20.5430%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (787,387 samples, 0.11%)</title><rect x="20.6901%" y="53" width="0.1141%" height="15" fill="rgb(207,160,47)"/><text x="20.9401%" y="63.50"></text></g><g><title>specialization_graph_of (1,359,516 samples, 0.20%)</title><rect x="20.8371%" y="53" width="0.1970%" height="15" fill="rgb(228,23,34)"/><text x="21.0871%" y="63.50"></text></g><g><title>resolve_instance (3,083,715 samples, 0.45%)</title><rect x="20.6137%" y="69" width="0.4469%" height="15" fill="rgb(218,30,26)"/><text x="20.8637%" y="79.50"></text></g><g><title>thir_body (8,330,063 samples, 1.21%)</title><rect x="21.0771%" y="69" width="1.2073%" height="15" fill="rgb(220,122,19)"/><text x="21.3271%" y="79.50"></text></g><g><title>mir_const (48,013,765 samples, 6.96%)</title><rect x="15.3399%" y="117" width="6.9585%" height="15" fill="rgb(250,228,42)"/><text x="15.5899%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (42,533,524 samples, 6.16%)</title><rect x="16.1341%" y="101" width="6.1643%" height="15" fill="rgb(240,193,28)"/><text x="16.3841%" y="111.50">unsafety..</text></g><g><title>mir_built (38,840,288 samples, 5.63%)</title><rect x="16.6694%" y="85" width="5.6290%" height="15" fill="rgb(216,20,37)"/><text x="16.9194%" y="95.50">mir_bui..</text></g><g><title>mir_const_qualif (1,123,517 samples, 0.16%)</title><rect x="22.2984%" y="117" width="0.1628%" height="15" fill="rgb(206,188,39)"/><text x="22.5484%" y="127.50"></text></g><g><title>mir_promoted (53,954,540 samples, 7.82%)</title><rect x="14.6418%" y="133" width="7.8195%" height="15" fill="rgb(217,207,13)"/><text x="14.8918%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,560,894 samples, 0.23%)</title><rect x="22.4617%" y="133" width="0.2262%" height="15" fill="rgb(231,73,38)"/><text x="22.7117%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,996,883 samples, 0.29%)</title><rect x="22.6879%" y="133" width="0.2894%" height="15" fill="rgb(225,20,46)"/><text x="22.9379%" y="143.50"></text></g><g><title>normalize_projection_ty (1,356,623 samples, 0.20%)</title><rect x="22.7807%" y="117" width="0.1966%" height="15" fill="rgb(210,31,41)"/><text x="23.0307%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,491,312 samples, 0.22%)</title><rect x="22.9773%" y="133" width="0.2161%" height="15" fill="rgb(221,200,47)"/><text x="23.2273%" y="143.50"></text></g><g><title>normalize_projection_ty (866,665 samples, 0.13%)</title><rect x="23.0679%" y="117" width="0.1256%" height="15" fill="rgb(226,26,5)"/><text x="23.3179%" y="127.50"></text></g><g><title>type_op_prove_predicate (8,820,499 samples, 1.28%)</title><rect x="23.1971%" y="133" width="1.2783%" height="15" fill="rgb(249,33,26)"/><text x="23.4471%" y="143.50"></text></g><g><title>evaluate_obligation (1,054,535 samples, 0.15%)</title><rect x="24.3227%" y="117" width="0.1528%" height="15" fill="rgb(235,183,28)"/><text x="24.5727%" y="127.50"></text></g><g><title>MIR_borrow_checking (165,756,665 samples, 24.02%)</title><rect x="0.4552%" y="165" width="24.0227%" height="15" fill="rgb(221,5,38)"/><text x="0.7052%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (165,242,908 samples, 23.95%)</title><rect x="0.5297%" y="149" width="23.9482%" height="15" fill="rgb(247,18,42)"/><text x="0.7797%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (882,910 samples, 0.13%)</title><rect x="24.5390%" y="165" width="0.1280%" height="15" fill="rgb(241,131,45)"/><text x="24.7890%" y="175.50"></text></g><g><title>codegen_fn_attrs (748,678 samples, 0.11%)</title><rect x="24.8614%" y="133" width="0.1085%" height="15" fill="rgb(249,31,29)"/><text x="25.1114%" y="143.50"></text></g><g><title>check_mod_attrs (2,039,846 samples, 0.30%)</title><rect x="24.6743%" y="149" width="0.2956%" height="15" fill="rgb(225,111,53)"/><text x="24.9243%" y="159.50"></text></g><g><title>lint_levels (1,093,362 samples, 0.16%)</title><rect x="25.1762%" y="133" width="0.1585%" height="15" fill="rgb(238,160,17)"/><text x="25.4262%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,203,961 samples, 0.32%)</title><rect x="25.0944%" y="149" width="0.3194%" height="15" fill="rgb(214,148,48)"/><text x="25.3444%" y="159.50"></text></g><g><title>misc_checking_1 (5,340,710 samples, 0.77%)</title><rect x="24.6670%" y="165" width="0.7740%" height="15" fill="rgb(232,36,49)"/><text x="24.9170%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,314,777 samples, 0.48%)</title><rect x="25.4413%" y="149" width="0.4804%" height="15" fill="rgb(209,103,24)"/><text x="25.6913%" y="159.50"></text></g><g><title>check_mod_liveness (2,723,059 samples, 0.39%)</title><rect x="25.5271%" y="133" width="0.3946%" height="15" fill="rgb(229,88,8)"/><text x="25.7771%" y="143.50"></text></g><g><title>misc_checking_2 (7,019,708 samples, 1.02%)</title><rect x="25.4410%" y="165" width="1.0173%" height="15" fill="rgb(213,181,19)"/><text x="25.6910%" y="175.50"></text></g><g><title>match_checking (3,703,021 samples, 0.54%)</title><rect x="25.9217%" y="149" width="0.5367%" height="15" fill="rgb(254,191,54)"/><text x="26.1717%" y="159.50"></text></g><g><title>check_match (3,567,011 samples, 0.52%)</title><rect x="25.9414%" y="133" width="0.5170%" height="15" fill="rgb(241,83,37)"/><text x="26.1914%" y="143.50"></text></g><g><title>check_private_in_public (896,510 samples, 0.13%)</title><rect x="26.4602%" y="149" width="0.1299%" height="15" fill="rgb(233,36,39)"/><text x="26.7102%" y="159.50"></text></g><g><title>death_checking (1,788,830 samples, 0.26%)</title><rect x="26.5901%" y="149" width="0.2593%" height="15" fill="rgb(226,3,54)"/><text x="26.8401%" y="159.50"></text></g><g><title>eval_to_const_value_raw (805,109 samples, 0.12%)</title><rect x="27.2362%" y="69" width="0.1167%" height="15" fill="rgb(245,192,40)"/><text x="27.4862%" y="79.50"></text></g><g><title>eval_to_const_value_raw (804,239 samples, 0.12%)</title><rect x="27.2363%" y="53" width="0.1166%" height="15" fill="rgb(238,167,29)"/><text x="27.4863%" y="63.50"></text></g><g><title>eval_to_allocation_raw (802,439 samples, 0.12%)</title><rect x="27.2366%" y="37" width="0.1163%" height="15" fill="rgb(232,182,51)"/><text x="27.4866%" y="47.50"></text></g><g><title>eval_to_allocation_raw (917,190 samples, 0.13%)</title><rect x="27.2201%" y="117" width="0.1329%" height="15" fill="rgb(231,60,39)"/><text x="27.4701%" y="127.50"></text></g><g><title>eval_to_allocation_raw (916,380 samples, 0.13%)</title><rect x="27.2203%" y="101" width="0.1328%" height="15" fill="rgb(208,69,12)"/><text x="27.4703%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (811,189 samples, 0.12%)</title><rect x="27.2355%" y="85" width="0.1176%" height="15" fill="rgb(235,93,37)"/><text x="27.4855%" y="95.50"></text></g><g><title>param_env (1,561,392 samples, 0.23%)</title><rect x="27.4284%" y="117" width="0.2263%" height="15" fill="rgb(213,116,39)"/><text x="27.6784%" y="127.50"></text></g><g><title>predicates_of (815,091 samples, 0.12%)</title><rect x="27.5365%" y="101" width="0.1181%" height="15" fill="rgb(222,207,29)"/><text x="27.7865%" y="111.50"></text></g><g><title>predicates_defined_on (701,021 samples, 0.10%)</title><rect x="27.5530%" y="85" width="0.1016%" height="15" fill="rgb(206,96,30)"/><text x="27.8030%" y="95.50"></text></g><g><title>crate_lints (5,842,025 samples, 0.85%)</title><rect x="26.8499%" y="133" width="0.8467%" height="15" fill="rgb(218,138,4)"/><text x="27.0999%" y="143.50"></text></g><g><title>lint_checking (10,045,351 samples, 1.46%)</title><rect x="26.8494%" y="149" width="1.4558%" height="15" fill="rgb(250,191,14)"/><text x="27.0994%" y="159.50"></text></g><g><title>module_lints (4,199,866 samples, 0.61%)</title><rect x="27.6965%" y="133" width="0.6087%" height="15" fill="rgb(239,60,40)"/><text x="27.9465%" y="143.50"></text></g><g><title>lint_mod (4,180,676 samples, 0.61%)</title><rect x="27.6993%" y="117" width="0.6059%" height="15" fill="rgb(206,27,48)"/><text x="27.9493%" y="127.50"></text></g><g><title>privacy_checking_modules (5,554,183 samples, 0.80%)</title><rect x="28.3914%" y="149" width="0.8050%" height="15" fill="rgb(225,35,8)"/><text x="28.6414%" y="159.50"></text></g><g><title>check_mod_privacy (5,540,923 samples, 0.80%)</title><rect x="28.3934%" y="133" width="0.8030%" height="15" fill="rgb(250,213,24)"/><text x="28.6434%" y="143.50"></text></g><g><title>misc_checking_3 (18,920,371 samples, 2.74%)</title><rect x="26.4584%" y="165" width="2.7421%" height="15" fill="rgb(247,123,22)"/><text x="26.7084%" y="175.50">mi..</text></g><g><title>impl_parent (3,337,538 samples, 0.48%)</title><rect x="30.2049%" y="101" width="0.4837%" height="15" fill="rgb(231,138,38)"/><text x="30.4549%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,772,961 samples, 0.26%)</title><rect x="30.4317%" y="85" width="0.2570%" height="15" fill="rgb(231,145,46)"/><text x="30.6817%" y="95.50"></text></g><g><title>impl_trait_ref (6,500,417 samples, 0.94%)</title><rect x="30.6888%" y="101" width="0.9421%" height="15" fill="rgb(251,118,11)"/><text x="30.9388%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,898,800 samples, 0.71%)</title><rect x="30.9210%" y="85" width="0.7100%" height="15" fill="rgb(217,147,25)"/><text x="31.1710%" y="95.50"></text></g><g><title>trait_impls_of (1,160,834 samples, 0.17%)</title><rect x="31.6344%" y="101" width="0.1682%" height="15" fill="rgb(247,81,37)"/><text x="31.8844%" y="111.50"></text></g><g><title>coherent_trait (17,636,026 samples, 2.56%)</title><rect x="29.2468%" y="133" width="2.5559%" height="15" fill="rgb(209,12,38)"/><text x="29.4968%" y="143.50">co..</text></g><g><title>specialization_graph_of (17,082,580 samples, 2.48%)</title><rect x="29.3271%" y="117" width="2.4757%" height="15" fill="rgb(227,1,9)"/><text x="29.5771%" y="127.50">sp..</text></g><g><title>coherence_checking (17,834,188 samples, 2.58%)</title><rect x="29.2420%" y="149" width="2.5847%" height="15" fill="rgb(248,47,43)"/><text x="29.4920%" y="159.50">co..</text></g><g><title>adt_dtorck_constraint (878,560 samples, 0.13%)</title><rect x="43.5836%" y="37" width="0.1273%" height="15" fill="rgb(221,10,30)"/><text x="43.8336%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,147,934 samples, 0.17%)</title><rect x="43.5499%" y="53" width="0.1664%" height="15" fill="rgb(210,229,1)"/><text x="43.7999%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,500,319 samples, 0.22%)</title><rect x="43.5080%" y="69" width="0.2174%" height="15" fill="rgb(222,148,37)"/><text x="43.7580%" y="79.50"></text></g><g><title>dropck_outlives (3,064,474 samples, 0.44%)</title><rect x="43.2905%" y="101" width="0.4441%" height="15" fill="rgb(234,67,33)"/><text x="43.5405%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,948,671 samples, 0.28%)</title><rect x="43.4522%" y="85" width="0.2824%" height="15" fill="rgb(247,98,35)"/><text x="43.7022%" y="95.50"></text></g><g><title>evaluate_obligation (4,186,414 samples, 0.61%)</title><rect x="43.7346%" y="101" width="0.6067%" height="15" fill="rgb(247,138,52)"/><text x="43.9846%" y="111.50"></text></g><g><title>adt_dtorck_constraint (802,069 samples, 0.12%)</title><rect x="57.9340%" y="69" width="0.1162%" height="15" fill="rgb(213,79,30)"/><text x="58.1840%" y="79.50"></text></g><g><title>dropck_outlives (1,735,226 samples, 0.25%)</title><rect x="57.8025%" y="85" width="0.2515%" height="15" fill="rgb(246,177,23)"/><text x="58.0525%" y="95.50"></text></g><g><title>evaluate_obligation (5,310,830 samples, 0.77%)</title><rect x="58.0540%" y="85" width="0.7697%" height="15" fill="rgb(230,62,27)"/><text x="58.3040%" y="95.50"></text></g><g><title>is_copy_raw (894,813 samples, 0.13%)</title><rect x="58.9681%" y="85" width="0.1297%" height="15" fill="rgb(216,154,8)"/><text x="59.2181%" y="95.50"></text></g><g><title>evaluate_obligation (724,652 samples, 0.11%)</title><rect x="58.9928%" y="69" width="0.1050%" height="15" fill="rgb(244,35,45)"/><text x="59.2428%" y="79.50"></text></g><g><title>method_autoderef_steps (1,154,081 samples, 0.17%)</title><rect x="59.1316%" y="85" width="0.1673%" height="15" fill="rgb(251,115,12)"/><text x="59.3816%" y="95.50"></text></g><g><title>predicates_of (730,302 samples, 0.11%)</title><rect x="59.3045%" y="85" width="0.1058%" height="15" fill="rgb(240,54,50)"/><text x="59.5545%" y="95.50"></text></g><g><title>typeck (101,948,913 samples, 14.78%)</title><rect x="44.6998%" y="101" width="14.7752%" height="15" fill="rgb(233,84,52)"/><text x="44.9498%" y="111.50">typeck</text></g><g><title>item_bodies_checking (190,769,984 samples, 27.65%)</title><rect x="31.8405%" y="149" width="27.6478%" height="15" fill="rgb(207,117,47)"/><text x="32.0905%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (190,765,784 samples, 27.65%)</title><rect x="31.8411%" y="133" width="27.6472%" height="15" fill="rgb(249,43,39)"/><text x="32.0911%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (190,472,857 samples, 27.60%)</title><rect x="31.8835%" y="117" width="27.6048%" height="15" fill="rgb(209,38,44)"/><text x="32.1335%" y="127.50">typeck</text></g><g><title>typeck (1,542,388 samples, 0.22%)</title><rect x="59.9766%" y="117" width="0.2235%" height="15" fill="rgb(236,212,23)"/><text x="60.2266%" y="127.50"></text></g><g><title>item_types_checking (4,919,225 samples, 0.71%)</title><rect x="59.4883%" y="149" width="0.7129%" height="15" fill="rgb(242,79,21)"/><text x="59.7383%" y="159.50"></text></g><g><title>check_mod_item_types (4,904,025 samples, 0.71%)</title><rect x="59.4905%" y="133" width="0.7107%" height="15" fill="rgb(211,96,35)"/><text x="59.7405%" y="143.50"></text></g><g><title>fn_sig (719,479 samples, 0.10%)</title><rect x="60.3411%" y="117" width="0.1043%" height="15" fill="rgb(253,215,40)"/><text x="60.5911%" y="127.50"></text></g><g><title>named_region_map (1,330,075 samples, 0.19%)</title><rect x="60.5040%" y="101" width="0.1928%" height="15" fill="rgb(211,81,21)"/><text x="60.7540%" y="111.50"></text></g><g><title>resolve_lifetimes (1,243,865 samples, 0.18%)</title><rect x="60.5165%" y="85" width="0.1803%" height="15" fill="rgb(208,190,38)"/><text x="60.7665%" y="95.50"></text></g><g><title>generics_of (1,771,568 samples, 0.26%)</title><rect x="60.4454%" y="117" width="0.2567%" height="15" fill="rgb(235,213,38)"/><text x="60.6954%" y="127.50"></text></g><g><title>predicates_of (1,308,497 samples, 0.19%)</title><rect x="60.7186%" y="117" width="0.1896%" height="15" fill="rgb(237,122,38)"/><text x="60.9686%" y="127.50"></text></g><g><title>predicates_defined_on (1,140,234 samples, 0.17%)</title><rect x="60.7430%" y="101" width="0.1653%" height="15" fill="rgb(244,218,35)"/><text x="60.9930%" y="111.50"></text></g><g><title>type_collecting (5,093,527 samples, 0.74%)</title><rect x="60.2036%" y="149" width="0.7382%" height="15" fill="rgb(240,68,47)"/><text x="60.4536%" y="159.50"></text></g><g><title>collect_mod_item_types (5,074,557 samples, 0.74%)</title><rect x="60.2064%" y="133" width="0.7354%" height="15" fill="rgb(210,16,53)"/><text x="60.4564%" y="143.50"></text></g><g><title>evaluate_obligation (699,726 samples, 0.10%)</title><rect x="61.5389%" y="117" width="0.1014%" height="15" fill="rgb(235,124,12)"/><text x="61.7889%" y="127.50"></text></g><g><title>region_scope_tree (881,746 samples, 0.13%)</title><rect x="61.7694%" y="117" width="0.1278%" height="15" fill="rgb(224,169,11)"/><text x="62.0194%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,876,208 samples, 0.85%)</title><rect x="61.0494%" y="133" width="0.8516%" height="15" fill="rgb(250,166,2)"/><text x="61.2994%" y="143.50"></text></g><g><title>evaluate_obligation (1,707,420 samples, 0.25%)</title><rect x="62.4200%" y="117" width="0.2475%" height="15" fill="rgb(242,216,29)"/><text x="62.6700%" y="127.50"></text></g><g><title>param_env (804,996 samples, 0.12%)</title><rect x="62.7000%" y="117" width="0.1167%" height="15" fill="rgb(230,116,27)"/><text x="62.9500%" y="127.50"></text></g><g><title>region_scope_tree (1,897,641 samples, 0.28%)</title><rect x="62.8366%" y="117" width="0.2750%" height="15" fill="rgb(228,99,48)"/><text x="63.0866%" y="127.50"></text></g><g><title>check_item_well_formed (8,590,503 samples, 1.25%)</title><rect x="61.9010%" y="133" width="1.2450%" height="15" fill="rgb(253,11,6)"/><text x="62.1510%" y="143.50"></text></g><g><title>analysis (434,735,200 samples, 63.01%)</title><rect x="0.2156%" y="181" width="63.0051%" height="15" fill="rgb(247,143,39)"/><text x="0.4656%" y="191.50">analysis</text></g><g><title>type_check_crate (234,739,274 samples, 34.02%)</title><rect x="29.2005%" y="165" width="34.0202%" height="15" fill="rgb(236,97,10)"/><text x="29.4505%" y="175.50">type_check_crate</text></g><g><title>wf_checking (15,703,605 samples, 2.28%)</title><rect x="60.9448%" y="149" width="2.2759%" height="15" fill="rgb(233,208,19)"/><text x="61.1948%" y="159.50">w..</text></g><g><title>AST_validation (749,079 samples, 0.11%)</title><rect x="63.3140%" y="165" width="0.1086%" height="15" fill="rgb(216,164,2)"/><text x="63.5640%" y="175.50"></text></g><g><title>metadata_load_macro (863,373 samples, 0.13%)</title><rect x="92.4186%" y="133" width="0.1251%" height="15" fill="rgb(220,129,5)"/><text x="92.6686%" y="143.50"></text></g><g><title>metadata_register_crate (1,930,383 samples, 0.28%)</title><rect x="92.5438%" y="133" width="0.2798%" height="15" fill="rgb(242,17,10)"/><text x="92.7938%" y="143.50"></text></g><g><title>macro_expand_crate (202,826,228 samples, 29.40%)</title><rect x="63.4880%" y="165" width="29.3951%" height="15" fill="rgb(242,107,0)"/><text x="63.7380%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (202,801,228 samples, 29.39%)</title><rect x="63.4916%" y="149" width="29.3915%" height="15" fill="rgb(251,28,31)"/><text x="63.7416%" y="159.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (937,280 samples, 0.14%)</title><rect x="92.8833%" y="165" width="0.1358%" height="15" fill="rgb(233,223,10)"/><text x="93.1333%" y="175.50"></text></g><g><title>finalize_macro_resolutions (3,150,834 samples, 0.46%)</title><rect x="93.0874%" y="149" width="0.4566%" height="15" fill="rgb(215,21,27)"/><text x="93.3374%" y="159.50"></text></g><g><title>late_resolve_crate (10,057,493 samples, 1.46%)</title><rect x="93.5441%" y="149" width="1.4576%" height="15" fill="rgb(232,23,21)"/><text x="93.7941%" y="159.50"></text></g><g><title>resolve_check_unused (728,688 samples, 0.11%)</title><rect x="95.0073%" y="149" width="0.1056%" height="15" fill="rgb(244,5,23)"/><text x="95.2573%" y="159.50"></text></g><g><title>configure_and_expand (219,904,328 samples, 31.87%)</title><rect x="63.2948%" y="181" width="31.8702%" height="15" fill="rgb(226,81,46)"/><text x="63.5448%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (14,733,884 samples, 2.14%)</title><rect x="93.0296%" y="165" width="2.1353%" height="15" fill="rgb(247,70,30)"/><text x="93.2796%" y="175.50">r..</text></g><g><title>drop_ast (1,080,652 samples, 0.16%)</title><rect x="95.1650%" y="181" width="0.1566%" height="15" fill="rgb(212,68,19)"/><text x="95.4150%" y="191.50"></text></g><g><title>early_lint_checks (3,392,608 samples, 0.49%)</title><rect x="95.3246%" y="181" width="0.4917%" height="15" fill="rgb(240,187,13)"/><text x="95.5746%" y="191.50"></text></g><g><title>free_global_ctxt (6,643,714 samples, 0.96%)</title><rect x="95.8163%" y="181" width="0.9629%" height="15" fill="rgb(223,113,26)"/><text x="96.0663%" y="191.50"></text></g><g><title>hir_lowering (18,278,754 samples, 2.65%)</title><rect x="96.8255%" y="181" width="2.6491%" height="15" fill="rgb(206,192,2)"/><text x="97.0755%" y="191.50">hi..</text></g><g><title>parse_crate (1,276,314 samples, 0.18%)</title><rect x="99.4857%" y="181" width="0.1850%" height="15" fill="rgb(241,108,4)"/><text x="99.7357%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,517,327 samples, 0.22%)</title><rect x="99.7080%" y="181" width="0.2199%" height="15" fill="rgb(247,173,49)"/><text x="99.9580%" y="191.50"></text></g><g><title>all (689,999,962 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (689,999,962 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>