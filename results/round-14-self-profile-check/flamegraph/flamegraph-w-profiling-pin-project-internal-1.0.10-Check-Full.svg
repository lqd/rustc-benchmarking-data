<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (950,740 samples, 0.19%)</title><rect x="15.2453%" y="165" width="0.1912%" height="15" fill="rgb(227,0,7)"/><text x="15.4953%" y="175.50"></text></g><g><title>item_attrs (766,239 samples, 0.15%)</title><rect x="15.9006%" y="133" width="0.1541%" height="15" fill="rgb(217,0,24)"/><text x="16.1506%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (734,289 samples, 0.15%)</title><rect x="15.9070%" y="117" width="0.1476%" height="15" fill="rgb(221,193,54)"/><text x="16.1570%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,123,395 samples, 0.23%)</title><rect x="15.8415%" y="149" width="0.2259%" height="15" fill="rgb(248,212,6)"/><text x="16.0915%" y="159.50"></text></g><g><title>param_env (572,603 samples, 0.12%)</title><rect x="19.4280%" y="101" width="0.1151%" height="15" fill="rgb(208,68,35)"/><text x="19.6780%" y="111.50"></text></g><g><title>adt_drop_tys (1,337,354 samples, 0.27%)</title><rect x="19.2745%" y="117" width="0.2689%" height="15" fill="rgb(232,128,0)"/><text x="19.5245%" y="127.50"></text></g><g><title>needs_drop_raw (4,271,748 samples, 0.86%)</title><rect x="19.1873%" y="133" width="0.8589%" height="15" fill="rgb(207,160,47)"/><text x="19.4373%" y="143.50"></text></g><g><title>is_copy_raw (2,500,329 samples, 0.50%)</title><rect x="19.5434%" y="117" width="0.5028%" height="15" fill="rgb(228,23,34)"/><text x="19.7934%" y="127.50"></text></g><g><title>evaluate_obligation (2,112,179 samples, 0.42%)</title><rect x="19.6215%" y="101" width="0.4247%" height="15" fill="rgb(218,30,26)"/><text x="19.8715%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,087,774 samples, 0.22%)</title><rect x="20.1694%" y="117" width="0.2187%" height="15" fill="rgb(220,122,19)"/><text x="20.4194%" y="127.50"></text></g><g><title>specialization_graph_of (1,491,037 samples, 0.30%)</title><rect x="20.4333%" y="117" width="0.2998%" height="15" fill="rgb(250,228,42)"/><text x="20.6833%" y="127.50"></text></g><g><title>impl_trait_ref (698,161 samples, 0.14%)</title><rect x="20.5927%" y="101" width="0.1404%" height="15" fill="rgb(240,193,28)"/><text x="20.8427%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (602,528 samples, 0.12%)</title><rect x="20.6120%" y="85" width="0.1212%" height="15" fill="rgb(216,20,37)"/><text x="20.8620%" y="95.50"></text></g><g><title>resolve_instance (3,675,288 samples, 0.74%)</title><rect x="20.0462%" y="133" width="0.7390%" height="15" fill="rgb(206,188,39)"/><text x="20.2962%" y="143.50"></text></g><g><title>thir_body (5,994,587 samples, 1.21%)</title><rect x="20.8026%" y="133" width="1.2054%" height="15" fill="rgb(217,207,13)"/><text x="21.0526%" y="143.50"></text></g><g><title>mir_const (36,810,492 samples, 7.40%)</title><rect x="14.6176%" y="181" width="7.4017%" height="15" fill="rgb(231,73,38)"/><text x="14.8676%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (32,738,373 samples, 6.58%)</title><rect x="15.4365%" y="165" width="6.5829%" height="15" fill="rgb(225,20,46)"/><text x="15.6865%" y="175.50">unsafety_..</text></g><g><title>mir_built (29,600,476 samples, 5.95%)</title><rect x="16.0674%" y="149" width="5.9520%" height="15" fill="rgb(210,31,41)"/><text x="16.3174%" y="159.50">mir_built</text></g><g><title>mir_promoted (40,684,733 samples, 8.18%)</title><rect x="13.9319%" y="197" width="8.1808%" height="15" fill="rgb(221,200,47)"/><text x="14.1819%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (773,838 samples, 0.16%)</title><rect x="22.1137%" y="197" width="0.1556%" height="15" fill="rgb(226,26,5)"/><text x="22.3637%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,972,463 samples, 0.40%)</title><rect x="22.2693%" y="197" width="0.3966%" height="15" fill="rgb(249,33,26)"/><text x="22.5193%" y="207.50"></text></g><g><title>normalize_projection_ty (1,313,112 samples, 0.26%)</title><rect x="22.4019%" y="181" width="0.2640%" height="15" fill="rgb(235,183,28)"/><text x="22.6519%" y="191.50"></text></g><g><title>type_op_normalize_predicate (1,172,438 samples, 0.24%)</title><rect x="22.6659%" y="197" width="0.2358%" height="15" fill="rgb(221,5,38)"/><text x="22.9159%" y="207.50"></text></g><g><title>normalize_projection_ty (633,868 samples, 0.13%)</title><rect x="22.7742%" y="181" width="0.1275%" height="15" fill="rgb(247,18,42)"/><text x="23.0242%" y="191.50"></text></g><g><title>type_op_prove_predicate (8,265,774 samples, 1.66%)</title><rect x="22.9017%" y="197" width="1.6621%" height="15" fill="rgb(241,131,45)"/><text x="23.1517%" y="207.50"></text></g><g><title>evaluate_obligation (557,766 samples, 0.11%)</title><rect x="24.4516%" y="181" width="0.1122%" height="15" fill="rgb(249,31,29)"/><text x="24.7016%" y="191.50"></text></g><g><title>MIR_borrow_checking (119,895,161 samples, 24.11%)</title><rect x="0.4589%" y="229" width="24.1081%" height="15" fill="rgb(225,111,53)"/><text x="0.7089%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (119,652,710 samples, 24.06%)</title><rect x="0.5077%" y="213" width="24.0594%" height="15" fill="rgb(238,160,17)"/><text x="0.7577%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (552,766 samples, 0.11%)</title><rect x="24.6087%" y="229" width="0.1111%" height="15" fill="rgb(214,148,48)"/><text x="24.8587%" y="239.50"></text></g><g><title>codegen_fn_attrs (501,125 samples, 0.10%)</title><rect x="24.9049%" y="197" width="0.1008%" height="15" fill="rgb(232,36,49)"/><text x="25.1549%" y="207.50"></text></g><g><title>check_mod_attrs (1,384,596 samples, 0.28%)</title><rect x="24.7273%" y="213" width="0.2784%" height="15" fill="rgb(209,103,24)"/><text x="24.9773%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (848,572 samples, 0.17%)</title><rect x="25.1164%" y="213" width="0.1706%" height="15" fill="rgb(229,88,8)"/><text x="25.3664%" y="223.50"></text></g><g><title>misc_checking_1 (2,927,933 samples, 0.59%)</title><rect x="24.7199%" y="229" width="0.5887%" height="15" fill="rgb(213,181,19)"/><text x="24.9699%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (2,459,538 samples, 0.49%)</title><rect x="25.3091%" y="213" width="0.4946%" height="15" fill="rgb(254,191,54)"/><text x="25.5591%" y="223.50"></text></g><g><title>check_mod_liveness (2,024,204 samples, 0.41%)</title><rect x="25.3966%" y="197" width="0.4070%" height="15" fill="rgb(241,83,37)"/><text x="25.6466%" y="207.50"></text></g><g><title>misc_checking_2 (5,030,437 samples, 1.01%)</title><rect x="25.3086%" y="229" width="1.0115%" height="15" fill="rgb(233,36,39)"/><text x="25.5586%" y="239.50"></text></g><g><title>match_checking (2,568,629 samples, 0.52%)</title><rect x="25.8036%" y="213" width="0.5165%" height="15" fill="rgb(226,3,54)"/><text x="26.0536%" y="223.50"></text></g><g><title>check_match (2,505,308 samples, 0.50%)</title><rect x="25.8164%" y="197" width="0.5038%" height="15" fill="rgb(245,192,40)"/><text x="26.0664%" y="207.50"></text></g><g><title>check_private_in_public (542,266 samples, 0.11%)</title><rect x="26.3223%" y="213" width="0.1090%" height="15" fill="rgb(238,167,29)"/><text x="26.5723%" y="223.50"></text></g><g><title>death_checking (1,163,883 samples, 0.23%)</title><rect x="26.4313%" y="213" width="0.2340%" height="15" fill="rgb(232,182,51)"/><text x="26.6813%" y="223.50"></text></g><g><title>eval_to_const_value_raw (537,476 samples, 0.11%)</title><rect x="27.0319%" y="133" width="0.1081%" height="15" fill="rgb(231,60,39)"/><text x="27.2819%" y="143.50"></text></g><g><title>eval_to_const_value_raw (536,796 samples, 0.11%)</title><rect x="27.0320%" y="117" width="0.1079%" height="15" fill="rgb(208,69,12)"/><text x="27.2820%" y="127.50"></text></g><g><title>eval_to_allocation_raw (535,086 samples, 0.11%)</title><rect x="27.0324%" y="101" width="0.1076%" height="15" fill="rgb(235,93,37)"/><text x="27.2824%" y="111.50"></text></g><g><title>eval_to_allocation_raw (584,167 samples, 0.12%)</title><rect x="27.0228%" y="181" width="0.1175%" height="15" fill="rgb(213,116,39)"/><text x="27.2728%" y="191.50"></text></g><g><title>eval_to_allocation_raw (583,557 samples, 0.12%)</title><rect x="27.0230%" y="165" width="0.1173%" height="15" fill="rgb(222,207,29)"/><text x="27.2730%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (546,636 samples, 0.11%)</title><rect x="27.0304%" y="149" width="0.1099%" height="15" fill="rgb(206,96,30)"/><text x="27.2804%" y="159.50"></text></g><g><title>param_env (950,779 samples, 0.19%)</title><rect x="27.1953%" y="181" width="0.1912%" height="15" fill="rgb(218,138,4)"/><text x="27.4453%" y="191.50"></text></g><g><title>crate_lints (3,815,933 samples, 0.77%)</title><rect x="26.6658%" y="197" width="0.7673%" height="15" fill="rgb(250,191,14)"/><text x="26.9158%" y="207.50"></text></g><g><title>lint_checking (6,732,806 samples, 1.35%)</title><rect x="26.6654%" y="213" width="1.3538%" height="15" fill="rgb(239,60,40)"/><text x="26.9154%" y="223.50"></text></g><g><title>module_lints (2,914,693 samples, 0.59%)</title><rect x="27.4331%" y="197" width="0.5861%" height="15" fill="rgb(206,27,48)"/><text x="27.6831%" y="207.50"></text></g><g><title>lint_mod (2,905,233 samples, 0.58%)</title><rect x="27.4350%" y="181" width="0.5842%" height="15" fill="rgb(225,35,8)"/><text x="27.6850%" y="191.50"></text></g><g><title>privacy_checking_modules (3,863,323 samples, 0.78%)</title><rect x="28.0974%" y="213" width="0.7768%" height="15" fill="rgb(250,213,24)"/><text x="28.3474%" y="223.50"></text></g><g><title>check_mod_privacy (3,856,743 samples, 0.78%)</title><rect x="28.0987%" y="197" width="0.7755%" height="15" fill="rgb(247,123,22)"/><text x="28.3487%" y="207.50"></text></g><g><title>misc_checking_3 (12,723,242 samples, 2.56%)</title><rect x="26.3201%" y="229" width="2.5583%" height="15" fill="rgb(231,138,38)"/><text x="26.5701%" y="239.50">mi..</text></g><g><title>impl_parent (2,570,152 samples, 0.52%)</title><rect x="29.7482%" y="165" width="0.5168%" height="15" fill="rgb(231,145,46)"/><text x="29.9982%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,244,978 samples, 0.25%)</title><rect x="30.0146%" y="149" width="0.2503%" height="15" fill="rgb(251,118,11)"/><text x="30.2646%" y="159.50"></text></g><g><title>impl_trait_ref (4,812,801 samples, 0.97%)</title><rect x="30.2650%" y="165" width="0.9677%" height="15" fill="rgb(217,147,25)"/><text x="30.5150%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,867,462 samples, 0.78%)</title><rect x="30.4551%" y="149" width="0.7777%" height="15" fill="rgb(247,81,37)"/><text x="30.7051%" y="159.50"></text></g><g><title>coherent_trait (12,319,837 samples, 2.48%)</title><rect x="28.9162%" y="197" width="2.4772%" height="15" fill="rgb(209,12,38)"/><text x="29.1662%" y="207.50">co..</text></g><g><title>specialization_graph_of (11,667,590 samples, 2.35%)</title><rect x="29.0473%" y="181" width="2.3461%" height="15" fill="rgb(227,1,9)"/><text x="29.2973%" y="191.50">s..</text></g><g><title>trait_impls_of (799,048 samples, 0.16%)</title><rect x="31.2327%" y="165" width="0.1607%" height="15" fill="rgb(248,47,43)"/><text x="31.4827%" y="175.50"></text></g><g><title>coherence_checking (12,426,679 samples, 2.50%)</title><rect x="28.9118%" y="213" width="2.4987%" height="15" fill="rgb(221,10,30)"/><text x="29.1618%" y="223.50">co..</text></g><g><title>adt_dtorck_constraint (572,675 samples, 0.12%)</title><rect x="45.1015%" y="37" width="0.1152%" height="15" fill="rgb(210,229,1)"/><text x="45.3515%" y="47.50"></text></g><g><title>adt_dtorck_constraint (854,470 samples, 0.17%)</title><rect x="45.0525%" y="53" width="0.1718%" height="15" fill="rgb(222,148,37)"/><text x="45.3025%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,299,344 samples, 0.26%)</title><rect x="44.9750%" y="69" width="0.2613%" height="15" fill="rgb(234,67,33)"/><text x="45.2250%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,467,526 samples, 0.30%)</title><rect x="44.9463%" y="85" width="0.2951%" height="15" fill="rgb(247,98,35)"/><text x="45.1963%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,650,859 samples, 0.33%)</title><rect x="44.9164%" y="101" width="0.3319%" height="15" fill="rgb(247,138,52)"/><text x="45.1664%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,997,953 samples, 0.40%)</title><rect x="44.8597%" y="117" width="0.4017%" height="15" fill="rgb(213,79,30)"/><text x="45.1097%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,433,600 samples, 0.49%)</title><rect x="44.7869%" y="133" width="0.4893%" height="15" fill="rgb(246,177,23)"/><text x="45.0369%" y="143.50"></text></g><g><title>adt_dtorck_constraint (3,056,186 samples, 0.61%)</title><rect x="44.6843%" y="149" width="0.6145%" height="15" fill="rgb(230,62,27)"/><text x="44.9343%" y="159.50"></text></g><g><title>dropck_outlives (5,504,314 samples, 1.11%)</title><rect x="44.1940%" y="165" width="1.1068%" height="15" fill="rgb(216,154,8)"/><text x="44.4440%" y="175.50"></text></g><g><title>adt_sized_constraint (527,887 samples, 0.11%)</title><rect x="45.8564%" y="85" width="0.1061%" height="15" fill="rgb(244,35,45)"/><text x="46.1064%" y="95.50"></text></g><g><title>adt_sized_constraint (617,317 samples, 0.12%)</title><rect x="45.8394%" y="101" width="0.1241%" height="15" fill="rgb(251,115,12)"/><text x="46.0894%" y="111.50"></text></g><g><title>adt_sized_constraint (692,937 samples, 0.14%)</title><rect x="45.8262%" y="117" width="0.1393%" height="15" fill="rgb(240,54,50)"/><text x="46.0762%" y="127.50"></text></g><g><title>adt_sized_constraint (757,078 samples, 0.15%)</title><rect x="45.8146%" y="133" width="0.1522%" height="15" fill="rgb(233,84,52)"/><text x="46.0646%" y="143.50"></text></g><g><title>adt_sized_constraint (927,451 samples, 0.19%)</title><rect x="45.7825%" y="149" width="0.1865%" height="15" fill="rgb(207,117,47)"/><text x="46.0325%" y="159.50"></text></g><g><title>trait_impls_of (689,727 samples, 0.14%)</title><rect x="46.1380%" y="149" width="0.1387%" height="15" fill="rgb(249,43,39)"/><text x="46.3880%" y="159.50"></text></g><g><title>evaluate_obligation (4,854,688 samples, 0.98%)</title><rect x="45.3008%" y="165" width="0.9762%" height="15" fill="rgb(209,38,44)"/><text x="45.5508%" y="175.50"></text></g><g><title>method_autoderef_steps (579,355 samples, 0.12%)</title><rect x="46.5443%" y="165" width="0.1165%" height="15" fill="rgb(236,212,23)"/><text x="46.7943%" y="175.50"></text></g><g><title>predicates_of (774,178 samples, 0.16%)</title><rect x="46.7237%" y="165" width="0.1557%" height="15" fill="rgb(242,79,21)"/><text x="46.9737%" y="175.50"></text></g><g><title>predicates_defined_on (499,955 samples, 0.10%)</title><rect x="46.7789%" y="149" width="0.1005%" height="15" fill="rgb(211,96,35)"/><text x="47.0289%" y="159.50"></text></g><g><title>associated_items (629,767 samples, 0.13%)</title><rect x="59.9082%" y="149" width="0.1266%" height="15" fill="rgb(253,215,40)"/><text x="60.1582%" y="159.50"></text></g><g><title>dropck_outlives (1,759,270 samples, 0.35%)</title><rect x="60.0703%" y="149" width="0.3537%" height="15" fill="rgb(211,81,21)"/><text x="60.3203%" y="159.50"></text></g><g><title>evaluate_obligation (5,914,946 samples, 1.19%)</title><rect x="60.4240%" y="149" width="1.1894%" height="15" fill="rgb(208,190,38)"/><text x="60.6740%" y="159.50"></text></g><g><title>is_copy_raw (516,485 samples, 0.10%)</title><rect x="61.8146%" y="149" width="0.1039%" height="15" fill="rgb(235,213,38)"/><text x="62.0646%" y="159.50"></text></g><g><title>evaluate_obligation (610,224 samples, 0.12%)</title><rect x="62.0850%" y="133" width="0.1227%" height="15" fill="rgb(237,122,38)"/><text x="62.3350%" y="143.50"></text></g><g><title>method_autoderef_steps (1,233,354 samples, 0.25%)</title><rect x="61.9651%" y="149" width="0.2480%" height="15" fill="rgb(244,218,35)"/><text x="62.2151%" y="159.50"></text></g><g><title>predicates_of (664,745 samples, 0.13%)</title><rect x="62.2203%" y="149" width="0.1337%" height="15" fill="rgb(240,68,47)"/><text x="62.4703%" y="159.50"></text></g><g><title>typeck (77,138,994 samples, 15.51%)</title><rect x="46.9277%" y="165" width="15.5109%" height="15" fill="rgb(210,16,53)"/><text x="47.1777%" y="175.50">typeck</text></g><g><title>item_bodies_checking (154,361,208 samples, 31.04%)</title><rect x="31.4189%" y="213" width="31.0385%" height="15" fill="rgb(235,124,12)"/><text x="31.6689%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (154,357,588 samples, 31.04%)</title><rect x="31.4196%" y="197" width="31.0377%" height="15" fill="rgb(224,169,11)"/><text x="31.6696%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (154,218,934 samples, 31.01%)</title><rect x="31.4475%" y="181" width="31.0098%" height="15" fill="rgb(250,166,2)"/><text x="31.6975%" y="191.50">typeck</text></g><g><title>typeck (739,708 samples, 0.15%)</title><rect x="62.6901%" y="181" width="0.1487%" height="15" fill="rgb(242,216,29)"/><text x="62.9401%" y="191.50"></text></g><g><title>item_types_checking (1,897,941 samples, 0.38%)</title><rect x="62.4574%" y="213" width="0.3816%" height="15" fill="rgb(230,116,27)"/><text x="62.7074%" y="223.50"></text></g><g><title>check_mod_item_types (1,889,561 samples, 0.38%)</title><rect x="62.4590%" y="197" width="0.3799%" height="15" fill="rgb(228,99,48)"/><text x="62.7090%" y="207.50"></text></g><g><title>fn_sig (530,458 samples, 0.11%)</title><rect x="62.9449%" y="181" width="0.1067%" height="15" fill="rgb(253,11,6)"/><text x="63.1949%" y="191.50"></text></g><g><title>named_region_map (1,258,853 samples, 0.25%)</title><rect x="63.1325%" y="165" width="0.2531%" height="15" fill="rgb(247,143,39)"/><text x="63.3825%" y="175.50"></text></g><g><title>resolve_lifetimes (1,229,453 samples, 0.25%)</title><rect x="63.1384%" y="149" width="0.2472%" height="15" fill="rgb(236,97,10)"/><text x="63.3884%" y="159.50"></text></g><g><title>lint_levels (688,987 samples, 0.14%)</title><rect x="63.2471%" y="133" width="0.1385%" height="15" fill="rgb(233,208,19)"/><text x="63.4971%" y="143.50"></text></g><g><title>generics_of (1,678,566 samples, 0.34%)</title><rect x="63.0516%" y="181" width="0.3375%" height="15" fill="rgb(216,164,2)"/><text x="63.3016%" y="191.50"></text></g><g><title>predicates_of (721,508 samples, 0.15%)</title><rect x="63.4001%" y="181" width="0.1451%" height="15" fill="rgb(220,129,5)"/><text x="63.6501%" y="191.50"></text></g><g><title>predicates_defined_on (653,878 samples, 0.13%)</title><rect x="63.4137%" y="165" width="0.1315%" height="15" fill="rgb(242,17,10)"/><text x="63.6637%" y="175.50"></text></g><g><title>type_collecting (3,673,791 samples, 0.74%)</title><rect x="62.8414%" y="213" width="0.7387%" height="15" fill="rgb(242,107,0)"/><text x="63.0914%" y="223.50"></text></g><g><title>collect_mod_item_types (3,660,221 samples, 0.74%)</title><rect x="62.8441%" y="197" width="0.7360%" height="15" fill="rgb(251,28,31)"/><text x="63.0941%" y="207.50"></text></g><g><title>check_impl_item_well_formed (2,101,419 samples, 0.42%)</title><rect x="63.6593%" y="197" width="0.4225%" height="15" fill="rgb(233,223,10)"/><text x="63.9093%" y="207.50"></text></g><g><title>evaluate_obligation (889,880 samples, 0.18%)</title><rect x="64.4349%" y="181" width="0.1789%" height="15" fill="rgb(215,21,27)"/><text x="64.6849%" y="191.50"></text></g><g><title>region_scope_tree (1,343,945 samples, 0.27%)</title><rect x="64.7534%" y="181" width="0.2702%" height="15" fill="rgb(232,23,21)"/><text x="65.0034%" y="191.50"></text></g><g><title>check_item_well_formed (4,794,762 samples, 0.96%)</title><rect x="64.0818%" y="197" width="0.9641%" height="15" fill="rgb(244,5,23)"/><text x="64.3318%" y="207.50"></text></g><g><title>analysis (322,638,251 samples, 64.88%)</title><rect x="0.2334%" y="245" width="64.8751%" height="15" fill="rgb(226,81,46)"/><text x="0.4834%" y="255.50">analysis</text></g><g><title>type_check_crate (180,180,027 samples, 36.23%)</title><rect x="28.8785%" y="229" width="36.2300%" height="15" fill="rgb(247,70,30)"/><text x="29.1285%" y="239.50">type_check_crate</text></g><g><title>wf_checking (7,591,315 samples, 1.53%)</title><rect x="63.5821%" y="213" width="1.5264%" height="15" fill="rgb(212,68,19)"/><text x="63.8321%" y="223.50"></text></g><g><title>metadata_load_macro (1,343,794 samples, 0.27%)</title><rect x="92.3692%" y="197" width="0.2702%" height="15" fill="rgb(240,187,13)"/><text x="92.6192%" y="207.50"></text></g><g><title>metadata_register_crate (1,404,025 samples, 0.28%)</title><rect x="92.6394%" y="197" width="0.2823%" height="15" fill="rgb(223,113,26)"/><text x="92.8894%" y="207.50"></text></g><g><title>macro_expand_crate (137,369,538 samples, 27.62%)</title><rect x="65.3786%" y="229" width="27.6218%" height="15" fill="rgb(206,192,2)"/><text x="65.6286%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (137,349,917 samples, 27.62%)</title><rect x="65.3826%" y="213" width="27.6179%" height="15" fill="rgb(241,108,4)"/><text x="65.6326%" y="223.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (701,718 samples, 0.14%)</title><rect x="93.0007%" y="229" width="0.1411%" height="15" fill="rgb(247,173,49)"/><text x="93.2507%" y="239.50"></text></g><g><title>finalize_macro_resolutions (2,134,644 samples, 0.43%)</title><rect x="93.2169%" y="213" width="0.4292%" height="15" fill="rgb(224,114,35)"/><text x="93.4669%" y="223.50"></text></g><g><title>late_resolve_crate (7,653,356 samples, 1.54%)</title><rect x="93.6461%" y="213" width="1.5389%" height="15" fill="rgb(245,159,27)"/><text x="93.8961%" y="223.50"></text></g><g><title>configure_and_expand (149,698,916 samples, 30.10%)</title><rect x="65.2023%" y="245" width="30.1010%" height="15" fill="rgb(245,172,44)"/><text x="65.4523%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (10,661,040 samples, 2.14%)</title><rect x="93.1596%" y="229" width="2.1437%" height="15" fill="rgb(236,23,11)"/><text x="93.4096%" y="239.50">r..</text></g><g><title>drop_ast (736,578 samples, 0.15%)</title><rect x="95.3032%" y="245" width="0.1481%" height="15" fill="rgb(205,117,38)"/><text x="95.5532%" y="255.50"></text></g><g><title>early_lint_checks (2,089,864 samples, 0.42%)</title><rect x="95.4551%" y="245" width="0.4202%" height="15" fill="rgb(237,72,25)"/><text x="95.7051%" y="255.50"></text></g><g><title>free_global_ctxt (6,032,687 samples, 1.21%)</title><rect x="95.8753%" y="245" width="1.2130%" height="15" fill="rgb(244,70,9)"/><text x="96.1253%" y="255.50"></text></g><g><title>hir_lowering (11,658,931 samples, 2.34%)</title><rect x="97.1434%" y="245" width="2.3443%" height="15" fill="rgb(217,125,39)"/><text x="97.3934%" y="255.50">h..</text></g><g><title>parse_crate (620,137 samples, 0.12%)</title><rect x="99.5016%" y="245" width="0.1247%" height="15" fill="rgb(235,36,10)"/><text x="99.7516%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,192,643 samples, 0.24%)</title><rect x="99.6736%" y="245" width="0.2398%" height="15" fill="rgb(251,123,47)"/><text x="99.9236%" y="255.50"></text></g><g><title>all (497,322,487 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (497,322,487 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>