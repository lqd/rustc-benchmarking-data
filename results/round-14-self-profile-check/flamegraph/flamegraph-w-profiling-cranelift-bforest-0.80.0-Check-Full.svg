<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (501,143 samples, 0.20%)</title><rect x="14.7000%" y="149" width="0.1952%" height="15" fill="rgb(227,0,7)"/><text x="14.9500%" y="159.50"></text></g><g><title>param_env (454,823 samples, 0.18%)</title><rect x="16.6469%" y="117" width="0.1772%" height="15" fill="rgb(217,0,24)"/><text x="16.8969%" y="127.50"></text></g><g><title>item_attrs (284,896 samples, 0.11%)</title><rect x="17.4904%" y="85" width="0.1110%" height="15" fill="rgb(221,193,54)"/><text x="17.7404%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (271,906 samples, 0.11%)</title><rect x="17.4954%" y="69" width="0.1059%" height="15" fill="rgb(248,212,6)"/><text x="17.7454%" y="79.50"></text></g><g><title>codegen_fn_attrs (440,937 samples, 0.17%)</title><rect x="17.4414%" y="101" width="0.1717%" height="15" fill="rgb(208,68,35)"/><text x="17.6914%" y="111.50"></text></g><g><title>is_copy_raw (334,892 samples, 0.13%)</title><rect x="20.7529%" y="85" width="0.1304%" height="15" fill="rgb(232,128,0)"/><text x="21.0029%" y="95.50"></text></g><g><title>evaluate_obligation (260,672 samples, 0.10%)</title><rect x="20.7818%" y="69" width="0.1015%" height="15" fill="rgb(207,160,47)"/><text x="21.0318%" y="79.50"></text></g><g><title>is_copy_raw (1,862,958 samples, 0.73%)</title><rect x="21.0343%" y="69" width="0.7256%" height="15" fill="rgb(228,23,34)"/><text x="21.2843%" y="79.50"></text></g><g><title>evaluate_obligation (1,518,566 samples, 0.59%)</title><rect x="21.1685%" y="53" width="0.5915%" height="15" fill="rgb(218,30,26)"/><text x="21.4185%" y="63.50"></text></g><g><title>needs_drop_raw (2,289,631 samples, 0.89%)</title><rect x="20.8833%" y="85" width="0.8918%" height="15" fill="rgb(220,122,19)"/><text x="21.1333%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (735,025 samples, 0.29%)</title><rect x="21.9467%" y="69" width="0.2863%" height="15" fill="rgb(250,228,42)"/><text x="22.1967%" y="79.50"></text></g><g><title>specialization_graph_of (397,955 samples, 0.16%)</title><rect x="22.2723%" y="69" width="0.1550%" height="15" fill="rgb(240,193,28)"/><text x="22.5223%" y="79.50"></text></g><g><title>resolve_instance (1,795,465 samples, 0.70%)</title><rect x="21.7751%" y="85" width="0.6993%" height="15" fill="rgb(216,20,37)"/><text x="22.0251%" y="95.50"></text></g><g><title>thir_body (3,287,410 samples, 1.28%)</title><rect x="22.5142%" y="85" width="1.2805%" height="15" fill="rgb(206,188,39)"/><text x="22.7642%" y="95.50"></text></g><g><title>mir_const (20,615,983 samples, 8.03%)</title><rect x="15.8058%" y="133" width="8.0300%" height="15" fill="rgb(217,207,13)"/><text x="16.0558%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (18,001,761 samples, 7.01%)</title><rect x="16.8241%" y="117" width="7.0118%" height="15" fill="rgb(231,73,38)"/><text x="17.0741%" y="127.50">unsafety_..</text></g><g><title>mir_built (15,975,804 samples, 6.22%)</title><rect x="17.6132%" y="101" width="6.2227%" height="15" fill="rgb(225,20,46)"/><text x="17.8632%" y="111.50">mir_built</text></g><g><title>mir_promoted (22,784,397 samples, 8.87%)</title><rect x="15.0006%" y="149" width="8.8747%" height="15" fill="rgb(210,31,41)"/><text x="15.2506%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (984,609 samples, 0.38%)</title><rect x="23.8753%" y="149" width="0.3835%" height="15" fill="rgb(221,200,47)"/><text x="24.1253%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,883,073 samples, 0.73%)</title><rect x="24.2588%" y="149" width="0.7335%" height="15" fill="rgb(226,26,5)"/><text x="24.5088%" y="159.50"></text></g><g><title>normalize_projection_ty (1,068,275 samples, 0.42%)</title><rect x="24.5761%" y="133" width="0.4161%" height="15" fill="rgb(249,33,26)"/><text x="24.8261%" y="143.50"></text></g><g><title>type_op_normalize_predicate (325,966 samples, 0.13%)</title><rect x="24.9940%" y="149" width="0.1270%" height="15" fill="rgb(235,183,28)"/><text x="25.2440%" y="159.50"></text></g><g><title>type_op_normalize_ty (479,666 samples, 0.19%)</title><rect x="25.1209%" y="149" width="0.1868%" height="15" fill="rgb(221,5,38)"/><text x="25.3709%" y="159.50"></text></g><g><title>type_op_prove_predicate (6,942,305 samples, 2.70%)</title><rect x="25.3078%" y="149" width="2.7041%" height="15" fill="rgb(247,18,42)"/><text x="25.5578%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (70,626,680 samples, 27.51%)</title><rect x="0.5056%" y="181" width="27.5095%" height="15" fill="rgb(241,131,45)"/><text x="0.7556%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (70,325,168 samples, 27.39%)</title><rect x="0.6230%" y="165" width="27.3921%" height="15" fill="rgb(249,31,29)"/><text x="0.8730%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (378,344 samples, 0.15%)</title><rect x="28.0494%" y="181" width="0.1474%" height="15" fill="rgb(225,111,53)"/><text x="28.2994%" y="191.50"></text></g><g><title>should_inherit_track_caller (369,883 samples, 0.14%)</title><rect x="28.5068%" y="133" width="0.1441%" height="15" fill="rgb(238,160,17)"/><text x="28.7568%" y="143.50"></text></g><g><title>codegen_fn_attrs (634,406 samples, 0.25%)</title><rect x="28.4112%" y="149" width="0.2471%" height="15" fill="rgb(214,148,48)"/><text x="28.6612%" y="159.50"></text></g><g><title>check_mod_attrs (1,157,043 samples, 0.45%)</title><rect x="28.2077%" y="165" width="0.4507%" height="15" fill="rgb(232,36,49)"/><text x="28.4577%" y="175.50"></text></g><g><title>check_mod_const_bodies (259,353 samples, 0.10%)</title><rect x="28.6584%" y="165" width="0.1010%" height="15" fill="rgb(209,103,24)"/><text x="28.9084%" y="175.50"></text></g><g><title>lint_levels (312,234 samples, 0.12%)</title><rect x="28.9444%" y="149" width="0.1216%" height="15" fill="rgb(229,88,8)"/><text x="29.1944%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (913,660 samples, 0.36%)</title><rect x="28.8338%" y="165" width="0.3559%" height="15" fill="rgb(213,181,19)"/><text x="29.0838%" y="175.50"></text></g><g><title>misc_checking_1 (2,617,139 samples, 1.02%)</title><rect x="28.1969%" y="181" width="1.0194%" height="15" fill="rgb(254,191,54)"/><text x="28.4469%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,413,466 samples, 0.55%)</title><rect x="29.2169%" y="165" width="0.5506%" height="15" fill="rgb(241,83,37)"/><text x="29.4669%" y="175.50"></text></g><g><title>check_mod_liveness (1,152,683 samples, 0.45%)</title><rect x="29.3185%" y="149" width="0.4490%" height="15" fill="rgb(233,36,39)"/><text x="29.5685%" y="159.50"></text></g><g><title>misc_checking_2 (3,012,093 samples, 1.17%)</title><rect x="29.2163%" y="181" width="1.1732%" height="15" fill="rgb(226,3,54)"/><text x="29.4663%" y="191.50"></text></g><g><title>match_checking (1,597,057 samples, 0.62%)</title><rect x="29.7675%" y="165" width="0.6221%" height="15" fill="rgb(245,192,40)"/><text x="30.0175%" y="175.50"></text></g><g><title>check_match (1,519,446 samples, 0.59%)</title><rect x="29.7977%" y="149" width="0.5918%" height="15" fill="rgb(238,167,29)"/><text x="30.0477%" y="159.50"></text></g><g><title>check_private_in_public (486,835 samples, 0.19%)</title><rect x="30.3937%" y="165" width="0.1896%" height="15" fill="rgb(232,182,51)"/><text x="30.6437%" y="175.50"></text></g><g><title>death_checking (908,940 samples, 0.35%)</title><rect x="30.5833%" y="165" width="0.3540%" height="15" fill="rgb(231,60,39)"/><text x="30.8333%" y="175.50"></text></g><g><title>param_env (413,335 samples, 0.16%)</title><rect x="31.3046%" y="133" width="0.1610%" height="15" fill="rgb(208,69,12)"/><text x="31.5546%" y="143.50"></text></g><g><title>crate_lints (1,801,180 samples, 0.70%)</title><rect x="30.9379%" y="149" width="0.7016%" height="15" fill="rgb(235,93,37)"/><text x="31.1879%" y="159.50"></text></g><g><title>type_of (436,503 samples, 0.17%)</title><rect x="31.4695%" y="133" width="0.1700%" height="15" fill="rgb(213,116,39)"/><text x="31.7195%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (346,381 samples, 0.13%)</title><rect x="31.5046%" y="117" width="0.1349%" height="15" fill="rgb(222,207,29)"/><text x="31.7546%" y="127.50"></text></g><g><title>lint_checking (3,056,084 samples, 1.19%)</title><rect x="30.9373%" y="165" width="1.1904%" height="15" fill="rgb(206,96,30)"/><text x="31.1873%" y="175.50"></text></g><g><title>module_lints (1,253,374 samples, 0.49%)</title><rect x="31.6395%" y="149" width="0.4882%" height="15" fill="rgb(218,138,4)"/><text x="31.8895%" y="159.50"></text></g><g><title>lint_mod (1,246,264 samples, 0.49%)</title><rect x="31.6423%" y="133" width="0.4854%" height="15" fill="rgb(250,191,14)"/><text x="31.8923%" y="143.50"></text></g><g><title>privacy_access_levels (514,856 samples, 0.20%)</title><rect x="32.1277%" y="165" width="0.2005%" height="15" fill="rgb(239,60,40)"/><text x="32.3777%" y="175.50"></text></g><g><title>privacy_checking_modules (2,317,275 samples, 0.90%)</title><rect x="32.3282%" y="165" width="0.9026%" height="15" fill="rgb(206,27,48)"/><text x="32.5782%" y="175.50"></text></g><g><title>check_mod_privacy (2,311,415 samples, 0.90%)</title><rect x="32.3305%" y="149" width="0.9003%" height="15" fill="rgb(225,35,8)"/><text x="32.5805%" y="159.50"></text></g><g><title>misc_checking_3 (7,313,630 samples, 2.85%)</title><rect x="30.3896%" y="181" width="2.8487%" height="15" fill="rgb(250,213,24)"/><text x="30.6396%" y="191.50">mi..</text></g><g><title>mir_borrowck (446,755 samples, 0.17%)</title><rect x="33.6550%" y="53" width="0.1740%" height="15" fill="rgb(247,123,22)"/><text x="33.9050%" y="63.50"></text></g><g><title>mir_for_ctfe (606,017 samples, 0.24%)</title><rect x="33.5937%" y="85" width="0.2360%" height="15" fill="rgb(231,138,38)"/><text x="33.8437%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (560,657 samples, 0.22%)</title><rect x="33.6113%" y="69" width="0.2184%" height="15" fill="rgb(231,145,46)"/><text x="33.8613%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,707,509 samples, 0.67%)</title><rect x="33.4203%" y="133" width="0.6651%" height="15" fill="rgb(251,118,11)"/><text x="33.6703%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,692,609 samples, 0.66%)</title><rect x="33.4262%" y="117" width="0.6593%" height="15" fill="rgb(217,147,25)"/><text x="33.6762%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,689,279 samples, 0.66%)</title><rect x="33.4274%" y="101" width="0.6580%" height="15" fill="rgb(247,81,37)"/><text x="33.6774%" y="111.50"></text></g><g><title>typeck (453,735 samples, 0.18%)</title><rect x="33.9087%" y="85" width="0.1767%" height="15" fill="rgb(209,12,38)"/><text x="34.1587%" y="95.50"></text></g><g><title>is_copy_raw (262,812 samples, 0.10%)</title><rect x="34.0854%" y="133" width="0.1024%" height="15" fill="rgb(227,1,9)"/><text x="34.3354%" y="143.50"></text></g><g><title>impl_parent (1,012,278 samples, 0.39%)</title><rect x="34.8826%" y="117" width="0.3943%" height="15" fill="rgb(248,47,43)"/><text x="35.1326%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (620,125 samples, 0.24%)</title><rect x="35.0354%" y="101" width="0.2415%" height="15" fill="rgb(221,10,30)"/><text x="35.2854%" y="111.50"></text></g><g><title>impl_trait_ref (2,283,439 samples, 0.89%)</title><rect x="35.2769%" y="117" width="0.8894%" height="15" fill="rgb(210,229,1)"/><text x="35.5269%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,657,697 samples, 0.65%)</title><rect x="35.5206%" y="101" width="0.6457%" height="15" fill="rgb(222,148,37)"/><text x="35.7706%" y="111.50"></text></g><g><title>coherent_trait (7,739,666 samples, 3.01%)</title><rect x="33.3032%" y="149" width="3.0146%" height="15" fill="rgb(234,67,33)"/><text x="33.5532%" y="159.50">coh..</text></g><g><title>specialization_graph_of (5,414,839 samples, 2.11%)</title><rect x="34.2087%" y="133" width="2.1091%" height="15" fill="rgb(247,98,35)"/><text x="34.4587%" y="143.50">s..</text></g><g><title>trait_impls_of (358,662 samples, 0.14%)</title><rect x="36.1781%" y="117" width="0.1397%" height="15" fill="rgb(247,138,52)"/><text x="36.4281%" y="127.50"></text></g><g><title>coherence_checking (7,830,697 samples, 3.05%)</title><rect x="33.2954%" y="165" width="3.0501%" height="15" fill="rgb(213,79,30)"/><text x="33.5454%" y="175.50">coh..</text></g><g><title>associated_item (352,483 samples, 0.14%)</title><rect x="61.3246%" y="101" width="0.1373%" height="15" fill="rgb(246,177,23)"/><text x="61.5746%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (286,393 samples, 0.11%)</title><rect x="61.3503%" y="85" width="0.1116%" height="15" fill="rgb(230,62,27)"/><text x="61.6003%" y="95.50"></text></g><g><title>associated_items (519,584 samples, 0.20%)</title><rect x="61.2729%" y="117" width="0.2024%" height="15" fill="rgb(216,154,8)"/><text x="61.5229%" y="127.50"></text></g><g><title>adt_dtorck_constraint (302,274 samples, 0.12%)</title><rect x="61.6827%" y="101" width="0.1177%" height="15" fill="rgb(244,35,45)"/><text x="61.9327%" y="111.50"></text></g><g><title>dropck_outlives (943,009 samples, 0.37%)</title><rect x="61.5063%" y="117" width="0.3673%" height="15" fill="rgb(251,115,12)"/><text x="61.7563%" y="127.50"></text></g><g><title>mir_borrowck (284,112 samples, 0.11%)</title><rect x="62.0105%" y="53" width="0.1107%" height="15" fill="rgb(240,54,50)"/><text x="62.2605%" y="63.50"></text></g><g><title>mir_for_ctfe (402,394 samples, 0.16%)</title><rect x="61.9647%" y="85" width="0.1567%" height="15" fill="rgb(233,84,52)"/><text x="62.2147%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (367,674 samples, 0.14%)</title><rect x="61.9782%" y="69" width="0.1432%" height="15" fill="rgb(207,117,47)"/><text x="62.2282%" y="79.50"></text></g><g><title>eval_to_allocation_raw (623,786 samples, 0.24%)</title><rect x="61.8823%" y="101" width="0.2430%" height="15" fill="rgb(249,43,39)"/><text x="62.1323%" y="111.50"></text></g><g><title>mir_borrowck (594,978 samples, 0.23%)</title><rect x="62.4029%" y="37" width="0.2317%" height="15" fill="rgb(209,38,44)"/><text x="62.6529%" y="47.50"></text></g><g><title>mir_for_ctfe (870,950 samples, 0.34%)</title><rect x="62.2962%" y="69" width="0.3392%" height="15" fill="rgb(236,212,23)"/><text x="62.5462%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (786,910 samples, 0.31%)</title><rect x="62.3290%" y="53" width="0.3065%" height="15" fill="rgb(242,79,21)"/><text x="62.5790%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,962,371 samples, 0.76%)</title><rect x="61.8754%" y="117" width="0.7644%" height="15" fill="rgb(211,96,35)"/><text x="62.1254%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,320,965 samples, 0.51%)</title><rect x="62.1252%" y="101" width="0.5145%" height="15" fill="rgb(253,215,40)"/><text x="62.3752%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,307,505 samples, 0.51%)</title><rect x="62.1305%" y="85" width="0.5093%" height="15" fill="rgb(211,81,21)"/><text x="62.3805%" y="95.50"></text></g><g><title>generics_of (278,772 samples, 0.11%)</title><rect x="64.4605%" y="101" width="0.1086%" height="15" fill="rgb(208,190,38)"/><text x="64.7105%" y="111.50"></text></g><g><title>impl_trait_ref (276,062 samples, 0.11%)</title><rect x="64.5883%" y="101" width="0.1075%" height="15" fill="rgb(235,213,38)"/><text x="64.8383%" y="111.50"></text></g><g><title>predicates_of (287,245 samples, 0.11%)</title><rect x="64.7026%" y="101" width="0.1119%" height="15" fill="rgb(237,122,38)"/><text x="64.9526%" y="111.50"></text></g><g><title>specializes (330,174 samples, 0.13%)</title><rect x="64.8145%" y="101" width="0.1286%" height="15" fill="rgb(244,218,35)"/><text x="65.0645%" y="111.50"></text></g><g><title>evaluate_obligation (6,130,488 samples, 2.39%)</title><rect x="62.6397%" y="117" width="2.3879%" height="15" fill="rgb(240,68,47)"/><text x="62.8897%" y="127.50">ev..</text></g><g><title>impl_trait_ref (568,998 samples, 0.22%)</title><rect x="65.2333%" y="117" width="0.2216%" height="15" fill="rgb(210,16,53)"/><text x="65.4833%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (505,258 samples, 0.20%)</title><rect x="65.2581%" y="101" width="0.1968%" height="15" fill="rgb(235,124,12)"/><text x="65.5081%" y="111.50"></text></g><g><title>method_autoderef_steps (794,392 samples, 0.31%)</title><rect x="65.5395%" y="117" width="0.3094%" height="15" fill="rgb(224,169,11)"/><text x="65.7895%" y="127.50"></text></g><g><title>evaluate_obligation (424,211 samples, 0.17%)</title><rect x="65.6837%" y="101" width="0.1652%" height="15" fill="rgb(250,166,2)"/><text x="65.9337%" y="111.50"></text></g><g><title>predicates_of (390,603 samples, 0.15%)</title><rect x="65.9662%" y="117" width="0.1521%" height="15" fill="rgb(242,216,29)"/><text x="66.2162%" y="127.50"></text></g><g><title>evaluate_obligation (1,223,504 samples, 0.48%)</title><rect x="73.7393%" y="101" width="0.4766%" height="15" fill="rgb(230,116,27)"/><text x="73.9893%" y="111.50"></text></g><g><title>is_copy_raw (454,653 samples, 0.18%)</title><rect x="74.3230%" y="101" width="0.1771%" height="15" fill="rgb(228,99,48)"/><text x="74.5730%" y="111.50"></text></g><g><title>evaluate_obligation (348,262 samples, 0.14%)</title><rect x="74.3645%" y="85" width="0.1357%" height="15" fill="rgb(253,11,6)"/><text x="74.6145%" y="95.50"></text></g><g><title>method_autoderef_steps (386,704 samples, 0.15%)</title><rect x="74.5136%" y="101" width="0.1506%" height="15" fill="rgb(247,143,39)"/><text x="74.7636%" y="111.50"></text></g><g><title>typeck (21,819,333 samples, 8.50%)</title><rect x="66.2646%" y="117" width="8.4988%" height="15" fill="rgb(236,97,10)"/><text x="66.5146%" y="127.50">typeck</text></g><g><title>item_bodies_checking (98,646,839 samples, 38.42%)</title><rect x="36.3673%" y="165" width="38.4235%" height="15" fill="rgb(233,208,19)"/><text x="36.6173%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (98,642,919 samples, 38.42%)</title><rect x="36.3688%" y="149" width="38.4220%" height="15" fill="rgb(216,164,2)"/><text x="36.6188%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (98,436,395 samples, 38.34%)</title><rect x="36.4492%" y="133" width="38.3416%" height="15" fill="rgb(220,129,5)"/><text x="36.6992%" y="143.50">typeck</text></g><g><title>item_types_checking (1,728,069 samples, 0.67%)</title><rect x="74.7908%" y="165" width="0.6731%" height="15" fill="rgb(242,17,10)"/><text x="75.0408%" y="175.50"></text></g><g><title>check_mod_item_types (1,720,769 samples, 0.67%)</title><rect x="74.7936%" y="149" width="0.6702%" height="15" fill="rgb(242,107,0)"/><text x="75.0436%" y="159.50"></text></g><g><title>fn_sig (730,934 samples, 0.28%)</title><rect x="75.6777%" y="133" width="0.2847%" height="15" fill="rgb(251,28,31)"/><text x="75.9277%" y="143.50"></text></g><g><title>generics_of (521,296 samples, 0.20%)</title><rect x="75.9624%" y="133" width="0.2030%" height="15" fill="rgb(233,223,10)"/><text x="76.2124%" y="143.50"></text></g><g><title>late_bound_vars_map (520,685 samples, 0.20%)</title><rect x="76.4665%" y="85" width="0.2028%" height="15" fill="rgb(215,21,27)"/><text x="76.7165%" y="95.50"></text></g><g><title>resolve_lifetimes (499,405 samples, 0.19%)</title><rect x="76.4748%" y="69" width="0.1945%" height="15" fill="rgb(232,23,21)"/><text x="76.7248%" y="79.50"></text></g><g><title>explicit_predicates_of (937,281 samples, 0.37%)</title><rect x="76.3344%" y="101" width="0.3651%" height="15" fill="rgb(244,5,23)"/><text x="76.5844%" y="111.50"></text></g><g><title>predicates_of (1,739,740 samples, 0.68%)</title><rect x="76.2334%" y="133" width="0.6776%" height="15" fill="rgb(226,81,46)"/><text x="76.4834%" y="143.50"></text></g><g><title>predicates_defined_on (1,644,269 samples, 0.64%)</title><rect x="76.2706%" y="117" width="0.6405%" height="15" fill="rgb(247,70,30)"/><text x="76.5206%" y="127.50"></text></g><g><title>inferred_outlives_of (543,287 samples, 0.21%)</title><rect x="76.6994%" y="101" width="0.2116%" height="15" fill="rgb(212,68,19)"/><text x="76.9494%" y="111.50"></text></g><g><title>inferred_outlives_crate (509,406 samples, 0.20%)</title><rect x="76.7126%" y="85" width="0.1984%" height="15" fill="rgb(240,187,13)"/><text x="76.9626%" y="95.50"></text></g><g><title>type_of (278,844 samples, 0.11%)</title><rect x="76.8024%" y="69" width="0.1086%" height="15" fill="rgb(223,113,26)"/><text x="77.0524%" y="79.50"></text></g><g><title>type_collecting (3,943,673 samples, 1.54%)</title><rect x="75.4658%" y="165" width="1.5361%" height="15" fill="rgb(206,192,2)"/><text x="75.7158%" y="175.50"></text></g><g><title>collect_mod_item_types (3,932,933 samples, 1.53%)</title><rect x="75.4700%" y="149" width="1.5319%" height="15" fill="rgb(241,108,4)"/><text x="75.7200%" y="159.50"></text></g><g><title>mir_borrowck (333,544 samples, 0.13%)</title><rect x="79.5273%" y="53" width="0.1299%" height="15" fill="rgb(247,173,49)"/><text x="79.7773%" y="63.50"></text></g><g><title>mir_for_ctfe (493,557 samples, 0.19%)</title><rect x="79.4655%" y="85" width="0.1922%" height="15" fill="rgb(224,114,35)"/><text x="79.7155%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (451,196 samples, 0.18%)</title><rect x="79.4820%" y="69" width="0.1757%" height="15" fill="rgb(245,159,27)"/><text x="79.7320%" y="79.50"></text></g><g><title>impl_trait_ref (259,882 samples, 0.10%)</title><rect x="80.0842%" y="53" width="0.1012%" height="15" fill="rgb(245,172,44)"/><text x="80.3342%" y="63.50"></text></g><g><title>evaluate_obligation (1,283,454 samples, 0.50%)</title><rect x="79.8043%" y="69" width="0.4999%" height="15" fill="rgb(236,23,11)"/><text x="80.0543%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,447,788 samples, 0.95%)</title><rect x="79.3714%" y="133" width="0.9534%" height="15" fill="rgb(205,117,38)"/><text x="79.6214%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,444,098 samples, 0.95%)</title><rect x="79.3728%" y="117" width="0.9520%" height="15" fill="rgb(237,72,25)"/><text x="79.6228%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,435,778 samples, 0.95%)</title><rect x="79.3760%" y="101" width="0.9487%" height="15" fill="rgb(244,70,9)"/><text x="79.6260%" y="111.50"></text></g><g><title>typeck (1,711,639 samples, 0.67%)</title><rect x="79.6581%" y="85" width="0.6667%" height="15" fill="rgb(217,125,39)"/><text x="79.9081%" y="95.50"></text></g><g><title>evaluate_obligation (628,797 samples, 0.24%)</title><rect x="80.3248%" y="133" width="0.2449%" height="15" fill="rgb(235,36,10)"/><text x="80.5748%" y="143.50"></text></g><g><title>implied_outlives_bounds (640,881 samples, 0.25%)</title><rect x="80.5763%" y="133" width="0.2496%" height="15" fill="rgb(251,123,47)"/><text x="80.8263%" y="143.50"></text></g><g><title>param_env (918,212 samples, 0.36%)</title><rect x="80.8837%" y="133" width="0.3576%" height="15" fill="rgb(221,13,13)"/><text x="81.1337%" y="143.50"></text></g><g><title>region_scope_tree (1,041,281 samples, 0.41%)</title><rect x="81.2494%" y="133" width="0.4056%" height="15" fill="rgb(238,131,9)"/><text x="81.4994%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,513,659 samples, 4.48%)</title><rect x="77.1794%" y="149" width="4.4846%" height="15" fill="rgb(211,50,8)"/><text x="77.4294%" y="159.50">check..</text></g><g><title>eval_to_const_value_raw (521,046 samples, 0.20%)</title><rect x="82.6312%" y="133" width="0.2030%" height="15" fill="rgb(245,182,24)"/><text x="82.8812%" y="143.50"></text></g><g><title>eval_to_const_value_raw (518,476 samples, 0.20%)</title><rect x="82.6322%" y="117" width="0.2019%" height="15" fill="rgb(242,14,37)"/><text x="82.8822%" y="127.50"></text></g><g><title>eval_to_allocation_raw (514,536 samples, 0.20%)</title><rect x="82.6338%" y="101" width="0.2004%" height="15" fill="rgb(246,228,12)"/><text x="82.8838%" y="111.50"></text></g><g><title>evaluate_obligation (327,392 samples, 0.13%)</title><rect x="82.8342%" y="133" width="0.1275%" height="15" fill="rgb(213,55,15)"/><text x="83.0842%" y="143.50"></text></g><g><title>param_env (432,702 samples, 0.17%)</title><rect x="83.0122%" y="133" width="0.1685%" height="15" fill="rgb(209,9,3)"/><text x="83.2622%" y="143.50"></text></g><g><title>check_item_well_formed (4,258,434 samples, 1.66%)</title><rect x="81.6640%" y="149" width="1.6587%" height="15" fill="rgb(230,59,30)"/><text x="81.9140%" y="159.50"></text></g><g><title>analysis (213,812,970 samples, 83.28%)</title><rect x="0.2584%" y="197" width="83.2814%" height="15" fill="rgb(209,121,21)"/><text x="0.5084%" y="207.50">analysis</text></g><g><title>type_check_crate (129,141,886 samples, 50.30%)</title><rect x="33.2383%" y="181" width="50.3015%" height="15" fill="rgb(220,109,13)"/><text x="33.4883%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,771,825 samples, 6.53%)</title><rect x="77.0071%" y="165" width="6.5327%" height="15" fill="rgb(232,18,1)"/><text x="77.2571%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (557,277 samples, 0.22%)</title><rect x="83.3227%" y="149" width="0.2171%" height="15" fill="rgb(215,41,42)"/><text x="83.5727%" y="159.50"></text></g><g><title>codegen_crate (283,433 samples, 0.11%)</title><rect x="83.5423%" y="197" width="0.1104%" height="15" fill="rgb(224,123,36)"/><text x="83.7923%" y="207.50"></text></g><g><title>metadata_load_macro (319,854 samples, 0.12%)</title><rect x="92.0925%" y="149" width="0.1246%" height="15" fill="rgb(240,125,3)"/><text x="92.3425%" y="159.50"></text></g><g><title>macro_expand_crate (22,292,905 samples, 8.68%)</title><rect x="83.8677%" y="181" width="8.6832%" height="15" fill="rgb(205,98,50)"/><text x="84.1177%" y="191.50">macro_expand..</text></g><g><title>expand_crate (22,277,025 samples, 8.68%)</title><rect x="83.8739%" y="165" width="8.6770%" height="15" fill="rgb(205,185,37)"/><text x="84.1239%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (648,217 samples, 0.25%)</title><rect x="92.2984%" y="149" width="0.2525%" height="15" fill="rgb(238,207,15)"/><text x="92.5484%" y="159.50"></text></g><g><title>late_resolve_crate (3,244,327 samples, 1.26%)</title><rect x="92.6662%" y="165" width="1.2637%" height="15" fill="rgb(213,199,42)"/><text x="92.9162%" y="175.50"></text></g><g><title>configure_and_expand (26,643,414 samples, 10.38%)</title><rect x="83.6527%" y="197" width="10.3778%" height="15" fill="rgb(235,201,11)"/><text x="83.9027%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (3,712,421 samples, 1.45%)</title><rect x="92.5844%" y="181" width="1.4460%" height="15" fill="rgb(207,46,11)"/><text x="92.8344%" y="191.50"></text></g><g><title>drop_ast (503,706 samples, 0.20%)</title><rect x="94.0304%" y="197" width="0.1962%" height="15" fill="rgb(241,35,35)"/><text x="94.2804%" y="207.50"></text></g><g><title>early_lint_checks (828,679 samples, 0.32%)</title><rect x="94.2327%" y="197" width="0.3228%" height="15" fill="rgb(243,32,47)"/><text x="94.4827%" y="207.50"></text></g><g><title>free_global_ctxt (3,341,927 samples, 1.30%)</title><rect x="94.5555%" y="197" width="1.3017%" height="15" fill="rgb(247,202,23)"/><text x="94.8055%" y="207.50"></text></g><g><title>generate_crate_metadata (1,892,201 samples, 0.74%)</title><rect x="95.8572%" y="197" width="0.7370%" height="15" fill="rgb(219,102,11)"/><text x="96.1072%" y="207.50"></text></g><g><title>hir_lowering (6,269,559 samples, 2.44%)</title><rect x="96.5942%" y="197" width="2.4420%" height="15" fill="rgb(243,110,44)"/><text x="96.8442%" y="207.50">hi..</text></g><g><title>parse_crate (819,639 samples, 0.32%)</title><rect x="99.0582%" y="197" width="0.3193%" height="15" fill="rgb(222,74,54)"/><text x="99.3082%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (918,400 samples, 0.36%)</title><rect x="99.4549%" y="197" width="0.3577%" height="15" fill="rgb(216,99,12)"/><text x="99.7049%" y="207.50"></text></g><g><title>all (256,735,544 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (256,735,544 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (388,785 samples, 0.15%)</title><rect x="99.8486%" y="197" width="0.1514%" height="15" fill="rgb(213,25,53)"/><text x="100.0986%" y="207.50"></text></g></svg></svg>