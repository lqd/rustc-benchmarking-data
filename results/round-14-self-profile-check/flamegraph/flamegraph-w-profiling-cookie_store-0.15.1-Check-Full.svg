<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,174,522 samples, 0.29%)</title><rect x="12.7385%" y="197" width="0.2872%" height="15" fill="rgb(227,0,7)"/><text x="12.9885%" y="207.50"></text></g><g><title>param_env (920,771 samples, 0.23%)</title><rect x="14.4273%" y="165" width="0.2252%" height="15" fill="rgb(217,0,24)"/><text x="14.6773%" y="175.50"></text></g><g><title>item_attrs (662,658 samples, 0.16%)</title><rect x="15.0937%" y="133" width="0.1620%" height="15" fill="rgb(221,193,54)"/><text x="15.3437%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (635,838 samples, 0.16%)</title><rect x="15.1003%" y="117" width="0.1555%" height="15" fill="rgb(248,212,6)"/><text x="15.3503%" y="127.50"></text></g><g><title>codegen_fn_attrs (994,892 samples, 0.24%)</title><rect x="15.0268%" y="149" width="0.2433%" height="15" fill="rgb(208,68,35)"/><text x="15.2768%" y="159.50"></text></g><g><title>adt_drop_tys (730,029 samples, 0.18%)</title><rect x="17.7186%" y="117" width="0.1785%" height="15" fill="rgb(232,128,0)"/><text x="17.9686%" y="127.50"></text></g><g><title>is_copy_raw (4,099,058 samples, 1.00%)</title><rect x="17.8973%" y="117" width="1.0024%" height="15" fill="rgb(207,160,47)"/><text x="18.1473%" y="127.50"></text></g><g><title>evaluate_obligation (3,326,994 samples, 0.81%)</title><rect x="18.0861%" y="101" width="0.8136%" height="15" fill="rgb(228,23,34)"/><text x="18.3361%" y="111.50"></text></g><g><title>needs_drop_raw (5,965,286 samples, 1.46%)</title><rect x="17.5764%" y="133" width="1.4588%" height="15" fill="rgb(218,30,26)"/><text x="17.8264%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (553,966 samples, 0.14%)</title><rect x="18.8997%" y="117" width="0.1355%" height="15" fill="rgb(220,122,19)"/><text x="19.1497%" y="127.50"></text></g><g><title>normalize_projection_ty (517,796 samples, 0.13%)</title><rect x="18.9085%" y="101" width="0.1266%" height="15" fill="rgb(250,228,42)"/><text x="19.1585%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,808,870 samples, 0.44%)</title><rect x="19.1878%" y="117" width="0.4423%" height="15" fill="rgb(240,193,28)"/><text x="19.4378%" y="127.50"></text></g><g><title>resolve_instance (3,033,102 samples, 0.74%)</title><rect x="19.0431%" y="133" width="0.7417%" height="15" fill="rgb(216,20,37)"/><text x="19.2931%" y="143.50"></text></g><g><title>thir_body (3,296,624 samples, 0.81%)</title><rect x="19.8125%" y="133" width="0.8062%" height="15" fill="rgb(206,188,39)"/><text x="20.0625%" y="143.50"></text></g><g><title>mir_const (28,077,425 samples, 6.87%)</title><rect x="13.8229%" y="181" width="6.8661%" height="15" fill="rgb(217,207,13)"/><text x="14.0729%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (24,685,130 samples, 6.04%)</title><rect x="14.6524%" y="165" width="6.0365%" height="15" fill="rgb(231,73,38)"/><text x="14.9024%" y="175.50">unsafety..</text></g><g><title>mir_built (22,159,534 samples, 5.42%)</title><rect x="15.2700%" y="149" width="5.4189%" height="15" fill="rgb(225,20,46)"/><text x="15.5200%" y="159.50">mir_bui..</text></g><g><title>mir_const_qualif (787,652 samples, 0.19%)</title><rect x="20.6889%" y="181" width="0.1926%" height="15" fill="rgb(210,31,41)"/><text x="20.9389%" y="191.50"></text></g><g><title>mir_promoted (31,509,414 samples, 7.71%)</title><rect x="13.1765%" y="197" width="7.7053%" height="15" fill="rgb(221,200,47)"/><text x="13.4265%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,142,286 samples, 0.77%)</title><rect x="20.8818%" y="197" width="0.7684%" height="15" fill="rgb(226,26,5)"/><text x="21.1318%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (2,016,946 samples, 0.49%)</title><rect x="21.6502%" y="197" width="0.4932%" height="15" fill="rgb(249,33,26)"/><text x="21.9002%" y="207.50"></text></g><g><title>normalize_projection_ty (940,870 samples, 0.23%)</title><rect x="21.9134%" y="181" width="0.2301%" height="15" fill="rgb(235,183,28)"/><text x="22.1634%" y="191.50"></text></g><g><title>type_op_normalize_predicate (6,666,122 samples, 1.63%)</title><rect x="22.1434%" y="197" width="1.6301%" height="15" fill="rgb(221,5,38)"/><text x="22.3934%" y="207.50"></text></g><g><title>normalize_projection_ty (3,975,751 samples, 0.97%)</title><rect x="22.8014%" y="181" width="0.9722%" height="15" fill="rgb(247,18,42)"/><text x="23.0514%" y="191.50"></text></g><g><title>type_op_normalize_ty (1,030,329 samples, 0.25%)</title><rect x="23.7736%" y="197" width="0.2520%" height="15" fill="rgb(241,131,45)"/><text x="24.0236%" y="207.50"></text></g><g><title>type_op_prove_predicate (17,623,949 samples, 4.31%)</title><rect x="24.0255%" y="197" width="4.3098%" height="15" fill="rgb(249,31,29)"/><text x="24.2755%" y="207.50">type_..</text></g><g><title>MIR_borrow_checking (114,429,813 samples, 27.98%)</title><rect x="0.3641%" y="229" width="27.9827%" height="15" fill="rgb(225,111,53)"/><text x="0.6141%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (114,018,058 samples, 27.88%)</title><rect x="0.4648%" y="213" width="27.8820%" height="15" fill="rgb(238,160,17)"/><text x="0.7148%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (506,925 samples, 0.12%)</title><rect x="28.4258%" y="229" width="0.1240%" height="15" fill="rgb(214,148,48)"/><text x="28.6758%" y="239.50"></text></g><g><title>codegen_fn_attrs (757,219 samples, 0.19%)</title><rect x="28.7019%" y="197" width="0.1852%" height="15" fill="rgb(232,36,49)"/><text x="28.9519%" y="207.50"></text></g><g><title>should_inherit_track_caller (647,677 samples, 0.16%)</title><rect x="28.7287%" y="181" width="0.1584%" height="15" fill="rgb(209,103,24)"/><text x="28.9787%" y="191.50"></text></g><g><title>check_mod_attrs (1,341,184 samples, 0.33%)</title><rect x="28.5592%" y="213" width="0.3280%" height="15" fill="rgb(229,88,8)"/><text x="28.8092%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (887,341 samples, 0.22%)</title><rect x="29.0199%" y="213" width="0.2170%" height="15" fill="rgb(213,181,19)"/><text x="29.2699%" y="223.50"></text></g><g><title>misc_checking_1 (2,922,122 samples, 0.71%)</title><rect x="28.5499%" y="229" width="0.7146%" height="15" fill="rgb(254,191,54)"/><text x="28.7999%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,736,669 samples, 0.42%)</title><rect x="29.2650%" y="213" width="0.4247%" height="15" fill="rgb(241,83,37)"/><text x="29.5150%" y="223.50"></text></g><g><title>check_mod_liveness (1,454,836 samples, 0.36%)</title><rect x="29.3339%" y="197" width="0.3558%" height="15" fill="rgb(233,36,39)"/><text x="29.5839%" y="207.50"></text></g><g><title>type_uninhabited_from (612,005 samples, 0.15%)</title><rect x="29.5400%" y="181" width="0.1497%" height="15" fill="rgb(226,3,54)"/><text x="29.7900%" y="191.50"></text></g><g><title>type_uninhabited_from (505,284 samples, 0.12%)</title><rect x="29.5661%" y="165" width="0.1236%" height="15" fill="rgb(245,192,40)"/><text x="29.8161%" y="175.50"></text></g><g><title>misc_checking_2 (4,129,336 samples, 1.01%)</title><rect x="29.2645%" y="229" width="1.0098%" height="15" fill="rgb(238,167,29)"/><text x="29.5145%" y="239.50"></text></g><g><title>match_checking (2,390,527 samples, 0.58%)</title><rect x="29.6897%" y="213" width="0.5846%" height="15" fill="rgb(232,182,51)"/><text x="29.9397%" y="223.50"></text></g><g><title>check_match (2,273,986 samples, 0.56%)</title><rect x="29.7182%" y="197" width="0.5561%" height="15" fill="rgb(231,60,39)"/><text x="29.9682%" y="207.50"></text></g><g><title>check_private_in_public (638,127 samples, 0.16%)</title><rect x="30.2780%" y="213" width="0.1560%" height="15" fill="rgb(208,69,12)"/><text x="30.5280%" y="223.50"></text></g><g><title>death_checking (1,448,946 samples, 0.35%)</title><rect x="30.4340%" y="213" width="0.3543%" height="15" fill="rgb(235,93,37)"/><text x="30.6840%" y="223.50"></text></g><g><title>eval_to_const_value_raw (946,612 samples, 0.23%)</title><rect x="31.1569%" y="181" width="0.2315%" height="15" fill="rgb(213,116,39)"/><text x="31.4069%" y="191.50"></text></g><g><title>eval_to_const_value_raw (930,502 samples, 0.23%)</title><rect x="31.1608%" y="165" width="0.2275%" height="15" fill="rgb(222,207,29)"/><text x="31.4108%" y="175.50"></text></g><g><title>eval_to_allocation_raw (910,812 samples, 0.22%)</title><rect x="31.1656%" y="149" width="0.2227%" height="15" fill="rgb(206,96,30)"/><text x="31.4156%" y="159.50"></text></g><g><title>param_env (837,208 samples, 0.20%)</title><rect x="31.3884%" y="181" width="0.2047%" height="15" fill="rgb(218,138,4)"/><text x="31.6384%" y="191.50"></text></g><g><title>crate_lints (4,691,891 samples, 1.15%)</title><rect x="30.7889%" y="197" width="1.1474%" height="15" fill="rgb(250,191,14)"/><text x="31.0389%" y="207.50"></text></g><g><title>type_of (1,306,176 samples, 0.32%)</title><rect x="31.6169%" y="181" width="0.3194%" height="15" fill="rgb(239,60,40)"/><text x="31.8669%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,043,850 samples, 0.26%)</title><rect x="31.6810%" y="165" width="0.2553%" height="15" fill="rgb(206,27,48)"/><text x="31.9310%" y="175.50"></text></g><g><title>lint_checking (6,207,318 samples, 1.52%)</title><rect x="30.7884%" y="213" width="1.5179%" height="15" fill="rgb(225,35,8)"/><text x="31.0384%" y="223.50"></text></g><g><title>module_lints (1,513,037 samples, 0.37%)</title><rect x="31.9363%" y="197" width="0.3700%" height="15" fill="rgb(250,213,24)"/><text x="32.1863%" y="207.50"></text></g><g><title>lint_mod (1,502,317 samples, 0.37%)</title><rect x="31.9389%" y="181" width="0.3674%" height="15" fill="rgb(247,123,22)"/><text x="32.1889%" y="191.50"></text></g><g><title>privacy_access_levels (988,171 samples, 0.24%)</title><rect x="32.3063%" y="213" width="0.2416%" height="15" fill="rgb(231,138,38)"/><text x="32.5563%" y="223.50"></text></g><g><title>privacy_checking_modules (3,215,106 samples, 0.79%)</title><rect x="32.5479%" y="213" width="0.7862%" height="15" fill="rgb(231,145,46)"/><text x="32.7979%" y="223.50"></text></g><g><title>check_mod_privacy (3,206,886 samples, 0.78%)</title><rect x="32.5499%" y="197" width="0.7842%" height="15" fill="rgb(251,118,11)"/><text x="32.7999%" y="207.50"></text></g><g><title>misc_checking_3 (12,534,509 samples, 3.07%)</title><rect x="30.2743%" y="229" width="3.0652%" height="15" fill="rgb(217,147,25)"/><text x="30.5243%" y="239.50">mis..</text></g><g><title>adt_sized_constraint (426,774 samples, 0.10%)</title><rect x="34.9306%" y="165" width="0.1044%" height="15" fill="rgb(247,81,37)"/><text x="35.1806%" y="175.50"></text></g><g><title>adt_sized_constraint (423,124 samples, 0.10%)</title><rect x="34.9315%" y="149" width="0.1035%" height="15" fill="rgb(209,12,38)"/><text x="35.1815%" y="159.50"></text></g><g><title>impl_parent (3,317,037 samples, 0.81%)</title><rect x="35.0367%" y="165" width="0.8111%" height="15" fill="rgb(227,1,9)"/><text x="35.2867%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,898,747 samples, 0.46%)</title><rect x="35.3835%" y="149" width="0.4643%" height="15" fill="rgb(248,47,43)"/><text x="35.6335%" y="159.50"></text></g><g><title>impl_trait_ref (7,080,175 samples, 1.73%)</title><rect x="35.8481%" y="165" width="1.7314%" height="15" fill="rgb(221,10,30)"/><text x="36.0981%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,473,274 samples, 1.34%)</title><rect x="36.2410%" y="149" width="1.3384%" height="15" fill="rgb(210,229,1)"/><text x="36.4910%" y="159.50"></text></g><g><title>trait_impls_of (1,440,218 samples, 0.35%)</title><rect x="37.6035%" y="165" width="0.3522%" height="15" fill="rgb(222,148,37)"/><text x="37.8535%" y="175.50"></text></g><g><title>implementations_of_trait (502,696 samples, 0.12%)</title><rect x="37.8328%" y="149" width="0.1229%" height="15" fill="rgb(234,67,33)"/><text x="38.0828%" y="159.50"></text></g><g><title>coherent_trait (18,643,546 samples, 4.56%)</title><rect x="33.3972%" y="197" width="4.5591%" height="15" fill="rgb(247,98,35)"/><text x="33.6472%" y="207.50">coher..</text></g><g><title>specialization_graph_of (18,606,225 samples, 4.55%)</title><rect x="33.4063%" y="181" width="4.5500%" height="15" fill="rgb(247,138,52)"/><text x="33.6563%" y="191.50">speci..</text></g><g><title>coherence_checking (18,789,148 samples, 4.59%)</title><rect x="33.3891%" y="213" width="4.5947%" height="15" fill="rgb(213,79,30)"/><text x="33.6391%" y="223.50">coher..</text></g><g><title>associated_items (517,676 samples, 0.13%)</title><rect x="49.3364%" y="165" width="0.1266%" height="15" fill="rgb(246,177,23)"/><text x="49.5864%" y="175.50"></text></g><g><title>dropck_outlives (1,992,034 samples, 0.49%)</title><rect x="49.4998%" y="165" width="0.4871%" height="15" fill="rgb(230,62,27)"/><text x="49.7498%" y="175.50"></text></g><g><title>specializes (434,884 samples, 0.11%)</title><rect x="51.1740%" y="149" width="0.1063%" height="15" fill="rgb(216,154,8)"/><text x="51.4240%" y="159.50"></text></g><g><title>trait_impls_of (543,888 samples, 0.13%)</title><rect x="51.2841%" y="149" width="0.1330%" height="15" fill="rgb(244,35,45)"/><text x="51.5341%" y="159.50"></text></g><g><title>evaluate_obligation (5,863,216 samples, 1.43%)</title><rect x="49.9869%" y="165" width="1.4338%" height="15" fill="rgb(251,115,12)"/><text x="50.2369%" y="175.50"></text></g><g><title>method_autoderef_steps (422,236 samples, 0.10%)</title><rect x="51.7444%" y="165" width="0.1033%" height="15" fill="rgb(240,54,50)"/><text x="51.9944%" y="175.50"></text></g><g><title>predicates_of (985,803 samples, 0.24%)</title><rect x="51.9056%" y="165" width="0.2411%" height="15" fill="rgb(233,84,52)"/><text x="52.1556%" y="175.50"></text></g><g><title>predicates_defined_on (495,225 samples, 0.12%)</title><rect x="52.0256%" y="149" width="0.1211%" height="15" fill="rgb(207,117,47)"/><text x="52.2756%" y="159.50"></text></g><g><title>dropck_outlives (2,487,624 samples, 0.61%)</title><rect x="61.2229%" y="149" width="0.6083%" height="15" fill="rgb(249,43,39)"/><text x="61.4729%" y="159.50"></text></g><g><title>normalize_projection_ty (595,665 samples, 0.15%)</title><rect x="61.6855%" y="133" width="0.1457%" height="15" fill="rgb(209,38,44)"/><text x="61.9355%" y="143.50"></text></g><g><title>evaluate_obligation (6,264,931 samples, 1.53%)</title><rect x="61.8312%" y="149" width="1.5320%" height="15" fill="rgb(236,212,23)"/><text x="62.0812%" y="159.50"></text></g><g><title>is_copy_raw (448,408 samples, 0.11%)</title><rect x="63.5242%" y="149" width="0.1097%" height="15" fill="rgb(242,79,21)"/><text x="63.7742%" y="159.50"></text></g><g><title>evaluate_obligation (642,698 samples, 0.16%)</title><rect x="63.8751%" y="133" width="0.1572%" height="15" fill="rgb(211,96,35)"/><text x="64.1251%" y="143.50"></text></g><g><title>method_autoderef_steps (1,472,896 samples, 0.36%)</title><rect x="63.6741%" y="149" width="0.3602%" height="15" fill="rgb(253,215,40)"/><text x="63.9241%" y="159.50"></text></g><g><title>typeck (48,712,828 samples, 11.91%)</title><rect x="52.2812%" y="165" width="11.9122%" height="15" fill="rgb(211,81,21)"/><text x="52.5312%" y="175.50">typeck</text></g><g><title>item_bodies_checking (107,191,964 samples, 26.21%)</title><rect x="38.0027%" y="213" width="26.2127%" height="15" fill="rgb(208,190,38)"/><text x="38.2527%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (107,188,123 samples, 26.21%)</title><rect x="38.0037%" y="197" width="26.2118%" height="15" fill="rgb(235,213,38)"/><text x="38.2537%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (106,948,270 samples, 26.15%)</title><rect x="38.0623%" y="181" width="26.1531%" height="15" fill="rgb(237,122,38)"/><text x="38.3123%" y="191.50">typeck</text></g><g><title>adt_destructor (436,435 samples, 0.11%)</title><rect x="65.1558%" y="181" width="0.1067%" height="15" fill="rgb(244,218,35)"/><text x="65.4058%" y="191.50"></text></g><g><title>coherent_trait (419,305 samples, 0.10%)</title><rect x="65.1600%" y="165" width="0.1025%" height="15" fill="rgb(240,68,47)"/><text x="65.4100%" y="175.50"></text></g><g><title>specialization_graph_of (416,705 samples, 0.10%)</title><rect x="65.1606%" y="149" width="0.1019%" height="15" fill="rgb(210,16,53)"/><text x="65.4106%" y="159.50"></text></g><g><title>mir_borrowck (1,304,284 samples, 0.32%)</title><rect x="66.1723%" y="149" width="0.3189%" height="15" fill="rgb(235,124,12)"/><text x="66.4223%" y="159.50"></text></g><g><title>needs_drop_raw (549,825 samples, 0.13%)</title><rect x="66.6457%" y="85" width="0.1345%" height="15" fill="rgb(224,169,11)"/><text x="66.8957%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (453,395 samples, 0.11%)</title><rect x="66.7967%" y="69" width="0.1109%" height="15" fill="rgb(250,166,2)"/><text x="67.0467%" y="79.50"></text></g><g><title>specialization_graph_of (1,115,263 samples, 0.27%)</title><rect x="66.9080%" y="69" width="0.2727%" height="15" fill="rgb(242,216,29)"/><text x="67.1580%" y="79.50"></text></g><g><title>impl_trait_ref (575,129 samples, 0.14%)</title><rect x="67.0401%" y="53" width="0.1406%" height="15" fill="rgb(230,116,27)"/><text x="67.2901%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (500,358 samples, 0.12%)</title><rect x="67.0584%" y="37" width="0.1224%" height="15" fill="rgb(228,99,48)"/><text x="67.3084%" y="47.50"></text></g><g><title>resolve_instance (1,649,249 samples, 0.40%)</title><rect x="66.7802%" y="85" width="0.4033%" height="15" fill="rgb(253,11,6)"/><text x="67.0302%" y="95.50"></text></g><g><title>dropck_outlives (439,504 samples, 0.11%)</title><rect x="68.5895%" y="69" width="0.1075%" height="15" fill="rgb(247,143,39)"/><text x="68.8395%" y="79.50"></text></g><g><title>evaluate_obligation (807,397 samples, 0.20%)</title><rect x="68.6969%" y="69" width="0.1974%" height="15" fill="rgb(236,97,10)"/><text x="68.9469%" y="79.50"></text></g><g><title>mir_built (10,377,285 samples, 2.54%)</title><rect x="66.5920%" y="101" width="2.5377%" height="15" fill="rgb(233,208,19)"/><text x="66.8420%" y="111.50">mi..</text></g><g><title>typeck (7,901,396 samples, 1.93%)</title><rect x="67.1974%" y="85" width="1.9322%" height="15" fill="rgb(216,164,2)"/><text x="67.4474%" y="95.50">t..</text></g><g><title>mir_const (11,007,580 samples, 2.69%)</title><rect x="66.5037%" y="133" width="2.6918%" height="15" fill="rgb(220,129,5)"/><text x="66.7537%" y="143.50">mi..</text></g><g><title>unsafety_check_result (10,772,708 samples, 2.63%)</title><rect x="66.5612%" y="117" width="2.6344%" height="15" fill="rgb(242,17,10)"/><text x="66.8112%" y="127.50">un..</text></g><g><title>mir_promoted (11,062,671 samples, 2.71%)</title><rect x="66.4913%" y="149" width="2.7053%" height="15" fill="rgb(242,107,0)"/><text x="66.7413%" y="159.50">mi..</text></g><g><title>type_op_normalize_predicate (862,710 samples, 0.21%)</title><rect x="69.2048%" y="149" width="0.2110%" height="15" fill="rgb(251,28,31)"/><text x="69.4548%" y="159.50"></text></g><g><title>normalize_projection_ty (491,125 samples, 0.12%)</title><rect x="69.2957%" y="133" width="0.1201%" height="15" fill="rgb(233,223,10)"/><text x="69.5457%" y="143.50"></text></g><g><title>type_of (18,003,219 samples, 4.40%)</title><rect x="65.3665%" y="181" width="4.4025%" height="15" fill="rgb(215,21,27)"/><text x="65.6165%" y="191.50">type_..</text></g><g><title>mir_borrowck (17,923,587 samples, 4.38%)</title><rect x="65.3859%" y="165" width="4.3830%" height="15" fill="rgb(232,23,21)"/><text x="65.6359%" y="175.50">mir_b..</text></g><g><title>type_op_prove_predicate (1,421,114 samples, 0.35%)</title><rect x="69.4215%" y="149" width="0.3475%" height="15" fill="rgb(244,5,23)"/><text x="69.6715%" y="159.50"></text></g><g><title>item_types_checking (23,731,232 samples, 5.80%)</title><rect x="64.2155%" y="213" width="5.8032%" height="15" fill="rgb(226,81,46)"/><text x="64.4655%" y="223.50">item_ty..</text></g><g><title>check_mod_item_types (23,718,872 samples, 5.80%)</title><rect x="64.2185%" y="197" width="5.8002%" height="15" fill="rgb(247,70,30)"/><text x="64.4685%" y="207.50">check_m..</text></g><g><title>typeck (1,021,258 samples, 0.25%)</title><rect x="69.7690%" y="181" width="0.2497%" height="15" fill="rgb(212,68,19)"/><text x="70.0190%" y="191.50"></text></g><g><title>mir_const_qualif (433,345 samples, 0.11%)</title><rect x="70.2910%" y="133" width="0.1060%" height="15" fill="rgb(240,187,13)"/><text x="70.5410%" y="143.50"></text></g><g><title>mir_borrowck (473,025 samples, 0.12%)</title><rect x="70.4367%" y="101" width="0.1157%" height="15" fill="rgb(223,113,26)"/><text x="70.6867%" y="111.50"></text></g><g><title>mir_for_ctfe (636,697 samples, 0.16%)</title><rect x="70.3969%" y="133" width="0.1557%" height="15" fill="rgb(206,192,2)"/><text x="70.6469%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (591,816 samples, 0.14%)</title><rect x="70.4079%" y="117" width="0.1447%" height="15" fill="rgb(241,108,4)"/><text x="70.6579%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,804,530 samples, 0.44%)</title><rect x="70.2211%" y="181" width="0.4413%" height="15" fill="rgb(247,173,49)"/><text x="70.4711%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,789,330 samples, 0.44%)</title><rect x="70.2248%" y="165" width="0.4376%" height="15" fill="rgb(224,114,35)"/><text x="70.4748%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,782,210 samples, 0.44%)</title><rect x="70.2265%" y="149" width="0.4358%" height="15" fill="rgb(245,159,27)"/><text x="70.4765%" y="159.50"></text></g><g><title>typeck (448,236 samples, 0.11%)</title><rect x="70.5527%" y="133" width="0.1096%" height="15" fill="rgb(245,172,44)"/><text x="70.8027%" y="143.50"></text></g><g><title>fn_sig (1,207,149 samples, 0.30%)</title><rect x="70.6624%" y="181" width="0.2952%" height="15" fill="rgb(236,23,11)"/><text x="70.9124%" y="191.50"></text></g><g><title>is_late_bound_map (644,449 samples, 0.16%)</title><rect x="71.0448%" y="165" width="0.1576%" height="15" fill="rgb(205,117,38)"/><text x="71.2948%" y="175.50"></text></g><g><title>resolve_lifetimes (600,138 samples, 0.15%)</title><rect x="71.0556%" y="149" width="0.1468%" height="15" fill="rgb(237,72,25)"/><text x="71.3056%" y="159.50"></text></g><g><title>named_region_map (1,147,482 samples, 0.28%)</title><rect x="71.2023%" y="165" width="0.2806%" height="15" fill="rgb(244,70,9)"/><text x="71.4523%" y="175.50"></text></g><g><title>resolve_lifetimes (1,105,581 samples, 0.27%)</title><rect x="71.2126%" y="149" width="0.2704%" height="15" fill="rgb(217,125,39)"/><text x="71.4626%" y="159.50"></text></g><g><title>lint_levels (433,825 samples, 0.11%)</title><rect x="71.3769%" y="133" width="0.1061%" height="15" fill="rgb(235,36,10)"/><text x="71.6269%" y="143.50"></text></g><g><title>generics_of (2,185,723 samples, 0.53%)</title><rect x="70.9576%" y="181" width="0.5345%" height="15" fill="rgb(251,123,47)"/><text x="71.2076%" y="191.50"></text></g><g><title>explicit_predicates_of (521,351 samples, 0.13%)</title><rect x="71.6499%" y="149" width="0.1275%" height="15" fill="rgb(221,13,13)"/><text x="71.8999%" y="159.50"></text></g><g><title>predicates_of (1,455,872 samples, 0.36%)</title><rect x="71.5543%" y="181" width="0.3560%" height="15" fill="rgb(238,131,9)"/><text x="71.8043%" y="191.50"></text></g><g><title>predicates_defined_on (1,309,499 samples, 0.32%)</title><rect x="71.5901%" y="165" width="0.3202%" height="15" fill="rgb(211,50,8)"/><text x="71.8401%" y="175.50"></text></g><g><title>inferred_outlives_of (543,545 samples, 0.13%)</title><rect x="71.7774%" y="149" width="0.1329%" height="15" fill="rgb(245,182,24)"/><text x="72.0274%" y="159.50"></text></g><g><title>inferred_outlives_crate (497,035 samples, 0.12%)</title><rect x="71.7888%" y="133" width="0.1215%" height="15" fill="rgb(242,14,37)"/><text x="72.0388%" y="143.50"></text></g><g><title>type_collecting (8,216,841 samples, 2.01%)</title><rect x="70.0206%" y="213" width="2.0093%" height="15" fill="rgb(246,228,12)"/><text x="70.2706%" y="223.50">t..</text></g><g><title>collect_mod_item_types (8,202,611 samples, 2.01%)</title><rect x="70.0240%" y="197" width="2.0059%" height="15" fill="rgb(213,55,15)"/><text x="70.2740%" y="207.50">c..</text></g><g><title>type_of (486,325 samples, 0.12%)</title><rect x="71.9110%" y="181" width="0.1189%" height="15" fill="rgb(209,9,3)"/><text x="72.1610%" y="191.50"></text></g><g><title>evaluate_obligation (954,962 samples, 0.23%)</title><rect x="73.5446%" y="181" width="0.2335%" height="15" fill="rgb(230,59,30)"/><text x="73.7946%" y="191.50"></text></g><g><title>implied_outlives_bounds (847,014 samples, 0.21%)</title><rect x="73.7948%" y="181" width="0.2071%" height="15" fill="rgb(209,121,21)"/><text x="74.0448%" y="191.50"></text></g><g><title>object_safety_violations (441,965 samples, 0.11%)</title><rect x="74.0076%" y="181" width="0.1081%" height="15" fill="rgb(220,109,13)"/><text x="74.2576%" y="191.50"></text></g><g><title>param_env (763,106 samples, 0.19%)</title><rect x="74.1168%" y="181" width="0.1866%" height="15" fill="rgb(232,18,1)"/><text x="74.3668%" y="191.50"></text></g><g><title>region_scope_tree (1,098,302 samples, 0.27%)</title><rect x="74.3409%" y="181" width="0.2686%" height="15" fill="rgb(215,41,42)"/><text x="74.5909%" y="191.50"></text></g><g><title>trait_impls_of (565,946 samples, 0.14%)</title><rect x="74.6098%" y="181" width="0.1384%" height="15" fill="rgb(224,123,36)"/><text x="74.8598%" y="191.50"></text></g><g><title>check_impl_item_well_formed (10,539,323 samples, 2.58%)</title><rect x="72.1710%" y="197" width="2.5773%" height="15" fill="rgb(240,125,3)"/><text x="72.4210%" y="207.50">ch..</text></g><g><title>evaluate_obligation (864,787 samples, 0.21%)</title><rect x="75.5014%" y="181" width="0.2115%" height="15" fill="rgb(205,98,50)"/><text x="75.7514%" y="191.50"></text></g><g><title>param_env (567,266 samples, 0.14%)</title><rect x="75.7809%" y="181" width="0.1387%" height="15" fill="rgb(205,185,37)"/><text x="76.0309%" y="191.50"></text></g><g><title>check_item_well_formed (5,346,335 samples, 1.31%)</title><rect x="74.7483%" y="197" width="1.3074%" height="15" fill="rgb(238,207,15)"/><text x="74.9983%" y="207.50"></text></g><g><title>analysis (310,314,717 samples, 75.88%)</title><rect x="0.1894%" y="245" width="75.8844%" height="15" fill="rgb(213,199,42)"/><text x="0.4394%" y="255.50">analysis</text></g><g><title>type_check_crate (174,754,030 samples, 42.73%)</title><rect x="33.3395%" y="229" width="42.7344%" height="15" fill="rgb(235,201,11)"/><text x="33.5895%" y="239.50">type_check_crate</text></g><g><title>wf_checking (16,517,032 samples, 4.04%)</title><rect x="72.0348%" y="213" width="4.0391%" height="15" fill="rgb(207,46,11)"/><text x="72.2848%" y="223.50">wf_c..</text></g><g><title>codegen_crate (694,147 samples, 0.17%)</title><rect x="76.0754%" y="245" width="0.1697%" height="15" fill="rgb(241,35,35)"/><text x="76.3254%" y="255.50"></text></g><g><title>metadata_register_crate (10,000,609 samples, 2.45%)</title><rect x="90.1561%" y="197" width="2.4456%" height="15" fill="rgb(243,32,47)"/><text x="90.4061%" y="207.50">me..</text></g><g><title>metadata_register_crate (8,415,344 samples, 2.06%)</title><rect x="90.5438%" y="181" width="2.0579%" height="15" fill="rgb(247,202,23)"/><text x="90.7938%" y="191.50">m..</text></g><g><title>metadata_register_crate (4,450,779 samples, 1.09%)</title><rect x="91.5132%" y="165" width="1.0884%" height="15" fill="rgb(219,102,11)"/><text x="91.7632%" y="175.50"></text></g><g><title>metadata_register_crate (3,490,398 samples, 0.85%)</title><rect x="91.7481%" y="149" width="0.8535%" height="15" fill="rgb(243,110,44)"/><text x="91.9981%" y="159.50"></text></g><g><title>macro_expand_crate (66,653,505 samples, 16.30%)</title><rect x="76.4278%" y="229" width="16.2995%" height="15" fill="rgb(222,74,54)"/><text x="76.6778%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (66,632,155 samples, 16.29%)</title><rect x="76.4331%" y="213" width="16.2942%" height="15" fill="rgb(216,99,12)"/><text x="76.6831%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (513,893 samples, 0.13%)</title><rect x="92.6016%" y="197" width="0.1257%" height="15" fill="rgb(226,22,26)"/><text x="92.8516%" y="207.50"></text></g><g><title>late_resolve_crate (5,775,704 samples, 1.41%)</title><rect x="92.8421%" y="213" width="1.4124%" height="15" fill="rgb(217,163,10)"/><text x="93.0921%" y="223.50"></text></g><g><title>configure_and_expand (73,933,676 samples, 18.08%)</title><rect x="76.2451%" y="245" width="18.0798%" height="15" fill="rgb(213,25,53)"/><text x="76.4951%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (6,484,551 samples, 1.59%)</title><rect x="92.7391%" y="229" width="1.5857%" height="15" fill="rgb(252,105,26)"/><text x="92.9891%" y="239.50"></text></g><g><title>drop_ast (625,607 samples, 0.15%)</title><rect x="94.3249%" y="245" width="0.1530%" height="15" fill="rgb(220,39,43)"/><text x="94.5749%" y="255.50"></text></g><g><title>early_lint_checks (1,141,043 samples, 0.28%)</title><rect x="94.4839%" y="245" width="0.2790%" height="15" fill="rgb(229,68,48)"/><text x="94.7339%" y="255.50"></text></g><g><title>free_global_ctxt (5,843,455 samples, 1.43%)</title><rect x="94.7629%" y="245" width="1.4290%" height="15" fill="rgb(252,8,32)"/><text x="95.0129%" y="255.50"></text></g><g><title>generate_crate_metadata (4,368,758 samples, 1.07%)</title><rect x="96.1919%" y="245" width="1.0683%" height="15" fill="rgb(223,20,43)"/><text x="96.4419%" y="255.50"></text></g><g><title>hir_lowering (8,328,792 samples, 2.04%)</title><rect x="97.2602%" y="245" width="2.0367%" height="15" fill="rgb(229,81,49)"/><text x="97.5102%" y="255.50">h..</text></g><g><title>parse_crate (430,265 samples, 0.11%)</title><rect x="99.3133%" y="245" width="0.1052%" height="15" fill="rgb(236,28,36)"/><text x="99.5633%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,538,046 samples, 0.38%)</title><rect x="99.4668%" y="245" width="0.3761%" height="15" fill="rgb(249,185,26)"/><text x="99.7168%" y="255.50"></text></g><g><title>all (408,930,776 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (408,930,776 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (539,606 samples, 0.13%)</title><rect x="99.8680%" y="245" width="0.1320%" height="15" fill="rgb(221,78,26)"/><text x="100.1180%" y="255.50"></text></g></svg></svg>