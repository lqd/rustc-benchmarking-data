<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (416,888 samples, 0.16%)</title><rect x="14.0972%" y="133" width="0.1561%" height="15" fill="rgb(227,0,7)"/><text x="14.3472%" y="143.50"></text></g><g><title>needs_drop_raw (1,069,099 samples, 0.40%)</title><rect x="20.3150%" y="69" width="0.4003%" height="15" fill="rgb(217,0,24)"/><text x="20.5650%" y="79.50"></text></g><g><title>is_copy_raw (761,668 samples, 0.29%)</title><rect x="20.4301%" y="53" width="0.2852%" height="15" fill="rgb(221,193,54)"/><text x="20.6801%" y="63.50"></text></g><g><title>evaluate_obligation (645,505 samples, 0.24%)</title><rect x="20.4736%" y="37" width="0.2417%" height="15" fill="rgb(248,212,6)"/><text x="20.7236%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (520,196 samples, 0.19%)</title><rect x="20.8975%" y="53" width="0.1948%" height="15" fill="rgb(208,68,35)"/><text x="21.1475%" y="63.50"></text></g><g><title>specialization_graph_of (333,593 samples, 0.12%)</title><rect x="21.1226%" y="53" width="0.1249%" height="15" fill="rgb(232,128,0)"/><text x="21.3726%" y="63.50"></text></g><g><title>resolve_instance (1,508,817 samples, 0.56%)</title><rect x="20.7153%" y="69" width="0.5650%" height="15" fill="rgb(207,160,47)"/><text x="20.9653%" y="79.50"></text></g><g><title>thir_body (3,562,548 samples, 1.33%)</title><rect x="21.3076%" y="69" width="1.3340%" height="15" fill="rgb(228,23,34)"/><text x="21.5576%" y="79.50"></text></g><g><title>mir_const (19,687,763 samples, 7.37%)</title><rect x="15.2889%" y="117" width="7.3721%" height="15" fill="rgb(218,30,26)"/><text x="15.5389%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (17,073,709 samples, 6.39%)</title><rect x="16.2677%" y="101" width="6.3933%" height="15" fill="rgb(220,122,19)"/><text x="16.5177%" y="111.50">unsafety..</text></g><g><title>mir_built (15,464,159 samples, 5.79%)</title><rect x="16.8704%" y="85" width="5.7906%" height="15" fill="rgb(250,228,42)"/><text x="17.1204%" y="95.50">mir_bui..</text></g><g><title>mir_const_qualif (2,390,882 samples, 0.90%)</title><rect x="22.6610%" y="117" width="0.8953%" height="15" fill="rgb(240,193,28)"/><text x="22.9110%" y="127.50"></text></g><g><title>mir_const (1,848,596 samples, 0.69%)</title><rect x="22.8641%" y="101" width="0.6922%" height="15" fill="rgb(216,20,37)"/><text x="23.1141%" y="111.50"></text></g><g><title>unsafety_check_result (1,322,579 samples, 0.50%)</title><rect x="23.0610%" y="85" width="0.4952%" height="15" fill="rgb(206,188,39)"/><text x="23.3110%" y="95.50"></text></g><g><title>mir_built (1,148,046 samples, 0.43%)</title><rect x="23.1264%" y="69" width="0.4299%" height="15" fill="rgb(217,207,13)"/><text x="23.3764%" y="79.50"></text></g><g><title>mir_promoted (24,852,228 samples, 9.31%)</title><rect x="14.2533%" y="133" width="9.3059%" height="15" fill="rgb(231,73,38)"/><text x="14.5033%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (839,368 samples, 0.31%)</title><rect x="23.5660%" y="133" width="0.3143%" height="15" fill="rgb(225,20,46)"/><text x="23.8160%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (379,893 samples, 0.14%)</title><rect x="23.8803%" y="133" width="0.1423%" height="15" fill="rgb(210,31,41)"/><text x="24.1303%" y="143.50"></text></g><g><title>type_op_normalize_predicate (420,104 samples, 0.16%)</title><rect x="24.0225%" y="133" width="0.1573%" height="15" fill="rgb(221,200,47)"/><text x="24.2725%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,072,943 samples, 0.78%)</title><rect x="24.1798%" y="133" width="0.7762%" height="15" fill="rgb(226,26,5)"/><text x="24.4298%" y="143.50"></text></g><g><title>MIR_borrow_checking (65,149,538 samples, 24.40%)</title><rect x="0.5625%" y="165" width="24.3953%" height="15" fill="rgb(249,33,26)"/><text x="0.8125%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (64,621,688 samples, 24.20%)</title><rect x="0.7601%" y="149" width="24.1976%" height="15" fill="rgb(235,183,28)"/><text x="1.0101%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,210,643 samples, 0.45%)</title><rect x="24.9577%" y="165" width="0.4533%" height="15" fill="rgb(221,5,38)"/><text x="25.2077%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (989,221 samples, 0.37%)</title><rect x="25.0406%" y="149" width="0.3704%" height="15" fill="rgb(247,18,42)"/><text x="25.2906%" y="159.50"></text></g><g><title>hir_module_items (471,426 samples, 0.18%)</title><rect x="25.4111%" y="165" width="0.1765%" height="15" fill="rgb(241,131,45)"/><text x="25.6611%" y="175.50"></text></g><g><title>codegen_fn_attrs (619,506 samples, 0.23%)</title><rect x="25.8582%" y="133" width="0.2320%" height="15" fill="rgb(249,31,29)"/><text x="26.1082%" y="143.50"></text></g><g><title>should_inherit_track_caller (500,985 samples, 0.19%)</title><rect x="25.9025%" y="117" width="0.1876%" height="15" fill="rgb(225,111,53)"/><text x="26.1525%" y="127.50"></text></g><g><title>check_mod_attrs (1,288,916 samples, 0.48%)</title><rect x="25.6075%" y="149" width="0.4826%" height="15" fill="rgb(238,160,17)"/><text x="25.8575%" y="159.50"></text></g><g><title>check_mod_const_bodies (332,572 samples, 0.12%)</title><rect x="26.0902%" y="149" width="0.1245%" height="15" fill="rgb(214,148,48)"/><text x="26.3402%" y="159.50"></text></g><g><title>lookup_deprecation_entry (268,913 samples, 0.10%)</title><rect x="26.3813%" y="133" width="0.1007%" height="15" fill="rgb(232,36,49)"/><text x="26.6313%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (552,058 samples, 0.21%)</title><rect x="26.2895%" y="149" width="0.2067%" height="15" fill="rgb(209,103,24)"/><text x="26.5395%" y="159.50"></text></g><g><title>misc_checking_1 (2,542,618 samples, 0.95%)</title><rect x="25.5877%" y="165" width="0.9521%" height="15" fill="rgb(229,88,8)"/><text x="25.8377%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,099,303 samples, 0.41%)</title><rect x="26.5405%" y="149" width="0.4116%" height="15" fill="rgb(213,181,19)"/><text x="26.7905%" y="159.50"></text></g><g><title>check_mod_liveness (837,902 samples, 0.31%)</title><rect x="26.6384%" y="133" width="0.3138%" height="15" fill="rgb(254,191,54)"/><text x="26.8884%" y="143.50"></text></g><g><title>misc_checking_2 (2,635,090 samples, 0.99%)</title><rect x="26.5398%" y="165" width="0.9867%" height="15" fill="rgb(241,83,37)"/><text x="26.7898%" y="175.50"></text></g><g><title>match_checking (1,534,067 samples, 0.57%)</title><rect x="26.9521%" y="149" width="0.5744%" height="15" fill="rgb(233,36,39)"/><text x="27.2021%" y="159.50"></text></g><g><title>check_match (1,404,797 samples, 0.53%)</title><rect x="27.0005%" y="133" width="0.5260%" height="15" fill="rgb(226,3,54)"/><text x="27.2505%" y="143.50"></text></g><g><title>check_private_in_public (537,897 samples, 0.20%)</title><rect x="27.5306%" y="149" width="0.2014%" height="15" fill="rgb(245,192,40)"/><text x="27.7806%" y="159.50"></text></g><g><title>death_checking (1,096,762 samples, 0.41%)</title><rect x="27.7320%" y="149" width="0.4107%" height="15" fill="rgb(238,167,29)"/><text x="27.9820%" y="159.50"></text></g><g><title>eval_to_const_value_raw (613,237 samples, 0.23%)</title><rect x="28.6371%" y="117" width="0.2296%" height="15" fill="rgb(232,182,51)"/><text x="28.8871%" y="127.50"></text></g><g><title>eval_to_const_value_raw (592,847 samples, 0.22%)</title><rect x="28.6448%" y="101" width="0.2220%" height="15" fill="rgb(231,60,39)"/><text x="28.8948%" y="111.50"></text></g><g><title>eval_to_allocation_raw (563,927 samples, 0.21%)</title><rect x="28.6556%" y="85" width="0.2112%" height="15" fill="rgb(208,69,12)"/><text x="28.9056%" y="95.50"></text></g><g><title>param_env (823,928 samples, 0.31%)</title><rect x="28.8668%" y="117" width="0.3085%" height="15" fill="rgb(235,93,37)"/><text x="29.1168%" y="127.50"></text></g><g><title>predicates_of (393,272 samples, 0.15%)</title><rect x="29.0280%" y="101" width="0.1473%" height="15" fill="rgb(213,116,39)"/><text x="29.2780%" y="111.50"></text></g><g><title>predicates_defined_on (328,322 samples, 0.12%)</title><rect x="29.0523%" y="85" width="0.1229%" height="15" fill="rgb(222,207,29)"/><text x="29.3023%" y="95.50"></text></g><g><title>crate_lints (3,116,275 samples, 1.17%)</title><rect x="28.1434%" y="133" width="1.1669%" height="15" fill="rgb(206,96,30)"/><text x="28.3934%" y="143.50"></text></g><g><title>type_of (357,952 samples, 0.13%)</title><rect x="29.1762%" y="117" width="0.1340%" height="15" fill="rgb(218,138,4)"/><text x="29.4262%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (280,832 samples, 0.11%)</title><rect x="29.2051%" y="101" width="0.1052%" height="15" fill="rgb(250,191,14)"/><text x="29.4551%" y="111.50"></text></g><g><title>lint_checking (4,493,080 samples, 1.68%)</title><rect x="28.1427%" y="149" width="1.6824%" height="15" fill="rgb(239,60,40)"/><text x="28.3927%" y="159.50"></text></g><g><title>module_lints (1,375,095 samples, 0.51%)</title><rect x="29.3103%" y="133" width="0.5149%" height="15" fill="rgb(206,27,48)"/><text x="29.5603%" y="143.50"></text></g><g><title>lint_mod (1,358,215 samples, 0.51%)</title><rect x="29.3166%" y="117" width="0.5086%" height="15" fill="rgb(225,35,8)"/><text x="29.5666%" y="127.50"></text></g><g><title>privacy_access_levels (708,047 samples, 0.27%)</title><rect x="29.8252%" y="149" width="0.2651%" height="15" fill="rgb(250,213,24)"/><text x="30.0752%" y="159.50"></text></g><g><title>privacy_checking_modules (1,858,470 samples, 0.70%)</title><rect x="30.0903%" y="149" width="0.6959%" height="15" fill="rgb(247,123,22)"/><text x="30.3403%" y="159.50"></text></g><g><title>check_mod_privacy (1,845,699 samples, 0.69%)</title><rect x="30.0951%" y="133" width="0.6911%" height="15" fill="rgb(231,138,38)"/><text x="30.3451%" y="143.50"></text></g><g><title>misc_checking_3 (8,729,997 samples, 3.27%)</title><rect x="27.5265%" y="165" width="3.2690%" height="15" fill="rgb(231,145,46)"/><text x="27.7765%" y="175.50">mis..</text></g><g><title>impl_parent (688,527 samples, 0.26%)</title><rect x="31.3900%" y="101" width="0.2578%" height="15" fill="rgb(251,118,11)"/><text x="31.6400%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (406,483 samples, 0.15%)</title><rect x="31.4956%" y="85" width="0.1522%" height="15" fill="rgb(217,147,25)"/><text x="31.7456%" y="95.50"></text></g><g><title>impl_trait_ref (1,642,719 samples, 0.62%)</title><rect x="31.6479%" y="101" width="0.6151%" height="15" fill="rgb(247,81,37)"/><text x="31.8979%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,137,333 samples, 0.43%)</title><rect x="31.8371%" y="85" width="0.4259%" height="15" fill="rgb(209,12,38)"/><text x="32.0871%" y="95.50"></text></g><g><title>coherent_trait (3,727,832 samples, 1.40%)</title><rect x="30.9670%" y="133" width="1.3959%" height="15" fill="rgb(227,1,9)"/><text x="31.2170%" y="143.50"></text></g><g><title>specialization_graph_of (3,705,312 samples, 1.39%)</title><rect x="30.9755%" y="117" width="1.3875%" height="15" fill="rgb(248,47,43)"/><text x="31.2255%" y="127.50"></text></g><g><title>coherence_checking (3,856,784 samples, 1.44%)</title><rect x="30.9610%" y="149" width="1.4442%" height="15" fill="rgb(221,10,30)"/><text x="31.2110%" y="159.50"></text></g><g><title>associated_item (400,093 samples, 0.15%)</title><rect x="61.1145%" y="85" width="0.1498%" height="15" fill="rgb(210,229,1)"/><text x="61.3645%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (325,291 samples, 0.12%)</title><rect x="61.1425%" y="69" width="0.1218%" height="15" fill="rgb(222,148,37)"/><text x="61.3925%" y="79.50"></text></g><g><title>associated_items (557,034 samples, 0.21%)</title><rect x="61.0630%" y="101" width="0.2086%" height="15" fill="rgb(234,67,33)"/><text x="61.3130%" y="111.50"></text></g><g><title>generics_of (725,161 samples, 0.27%)</title><rect x="62.9370%" y="85" width="0.2715%" height="15" fill="rgb(247,98,35)"/><text x="63.1870%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (528,309 samples, 0.20%)</title><rect x="63.0107%" y="69" width="0.1978%" height="15" fill="rgb(247,138,52)"/><text x="63.2607%" y="79.50"></text></g><g><title>impl_polarity (366,824 samples, 0.14%)</title><rect x="63.2271%" y="85" width="0.1374%" height="15" fill="rgb(213,79,30)"/><text x="63.4771%" y="95.50"></text></g><g><title>impl_trait_ref (914,129 samples, 0.34%)</title><rect x="63.3645%" y="85" width="0.3423%" height="15" fill="rgb(246,177,23)"/><text x="63.6145%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (739,959 samples, 0.28%)</title><rect x="63.4297%" y="69" width="0.2771%" height="15" fill="rgb(230,62,27)"/><text x="63.6797%" y="79.50"></text></g><g><title>predicates_of (827,770 samples, 0.31%)</title><rect x="63.7249%" y="85" width="0.3100%" height="15" fill="rgb(216,154,8)"/><text x="63.9749%" y="95.50"></text></g><g><title>predicates_defined_on (469,763 samples, 0.18%)</title><rect x="63.8589%" y="69" width="0.1759%" height="15" fill="rgb(244,35,45)"/><text x="64.1089%" y="79.50"></text></g><g><title>specializes (2,327,883 samples, 0.87%)</title><rect x="64.0348%" y="85" width="0.8717%" height="15" fill="rgb(251,115,12)"/><text x="64.2848%" y="95.50"></text></g><g><title>param_env (1,348,001 samples, 0.50%)</title><rect x="64.4018%" y="69" width="0.5048%" height="15" fill="rgb(240,54,50)"/><text x="64.6518%" y="79.50"></text></g><g><title>def_span (617,624 samples, 0.23%)</title><rect x="64.6752%" y="53" width="0.2313%" height="15" fill="rgb(233,84,52)"/><text x="64.9252%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (548,724 samples, 0.21%)</title><rect x="64.7010%" y="37" width="0.2055%" height="15" fill="rgb(207,117,47)"/><text x="64.9510%" y="47.50"></text></g><g><title>evaluate_obligation (9,514,576 samples, 3.56%)</title><rect x="61.4345%" y="101" width="3.5627%" height="15" fill="rgb(249,43,39)"/><text x="61.6845%" y="111.50">eval..</text></g><g><title>method_autoderef_steps (373,389 samples, 0.14%)</title><rect x="65.2130%" y="101" width="0.1398%" height="15" fill="rgb(209,38,44)"/><text x="65.4630%" y="111.50"></text></g><g><title>param_env (988,211 samples, 0.37%)</title><rect x="65.4342%" y="101" width="0.3700%" height="15" fill="rgb(236,212,23)"/><text x="65.6842%" y="111.50"></text></g><g><title>predicates_of (511,044 samples, 0.19%)</title><rect x="65.6129%" y="85" width="0.1914%" height="15" fill="rgb(242,79,21)"/><text x="65.8629%" y="95.50"></text></g><g><title>predicates_defined_on (428,044 samples, 0.16%)</title><rect x="65.6440%" y="69" width="0.1603%" height="15" fill="rgb(211,96,35)"/><text x="65.8940%" y="79.50"></text></g><g><title>predicates_of (296,383 samples, 0.11%)</title><rect x="65.8224%" y="101" width="0.1110%" height="15" fill="rgb(253,215,40)"/><text x="66.0724%" y="111.50"></text></g><g><title>typeck (7,316,911 samples, 2.74%)</title><rect x="66.1217%" y="101" width="2.7398%" height="15" fill="rgb(211,81,21)"/><text x="66.3717%" y="111.50">ty..</text></g><g><title>item_bodies_checking (97,369,588 samples, 36.46%)</title><rect x="32.4379%" y="149" width="36.4601%" height="15" fill="rgb(208,190,38)"/><text x="32.6879%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (97,366,628 samples, 36.46%)</title><rect x="32.4390%" y="133" width="36.4590%" height="15" fill="rgb(235,213,38)"/><text x="32.6890%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (97,011,186 samples, 36.33%)</title><rect x="32.5721%" y="117" width="36.3259%" height="15" fill="rgb(237,122,38)"/><text x="32.8221%" y="127.50">typeck</text></g><g><title>mir_for_ctfe (764,268 samples, 0.29%)</title><rect x="70.5210%" y="53" width="0.2862%" height="15" fill="rgb(244,218,35)"/><text x="70.7710%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (755,398 samples, 0.28%)</title><rect x="70.5243%" y="37" width="0.2829%" height="15" fill="rgb(240,68,47)"/><text x="70.7743%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,660,370 samples, 0.62%)</title><rect x="70.1952%" y="101" width="0.6217%" height="15" fill="rgb(210,16,53)"/><text x="70.4452%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,625,749 samples, 0.61%)</title><rect x="70.2082%" y="85" width="0.6088%" height="15" fill="rgb(235,124,12)"/><text x="70.4582%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,589,148 samples, 0.60%)</title><rect x="70.2219%" y="69" width="0.5951%" height="15" fill="rgb(224,169,11)"/><text x="70.4719%" y="79.50"></text></g><g><title>evaluate_obligation (2,198,285 samples, 0.82%)</title><rect x="70.0472%" y="117" width="0.8231%" height="15" fill="rgb(250,166,2)"/><text x="70.2972%" y="127.50"></text></g><g><title>item_types_checking (6,035,078 samples, 2.26%)</title><rect x="68.8980%" y="149" width="2.2598%" height="15" fill="rgb(242,216,29)"/><text x="69.1480%" y="159.50">i..</text></g><g><title>check_mod_item_types (6,017,508 samples, 2.25%)</title><rect x="68.9046%" y="133" width="2.2533%" height="15" fill="rgb(230,116,27)"/><text x="69.1546%" y="143.50">c..</text></g><g><title>typeck (529,384 samples, 0.20%)</title><rect x="70.9596%" y="117" width="0.1982%" height="15" fill="rgb(228,99,48)"/><text x="71.2096%" y="127.50"></text></g><g><title>fn_sig (624,547 samples, 0.23%)</title><rect x="71.4267%" y="117" width="0.2339%" height="15" fill="rgb(253,11,6)"/><text x="71.6767%" y="127.50"></text></g><g><title>named_region_map (1,253,924 samples, 0.47%)</title><rect x="71.7649%" y="101" width="0.4695%" height="15" fill="rgb(247,143,39)"/><text x="72.0149%" y="111.50"></text></g><g><title>resolve_lifetimes (1,184,073 samples, 0.44%)</title><rect x="71.7910%" y="85" width="0.4434%" height="15" fill="rgb(236,97,10)"/><text x="72.0410%" y="95.50"></text></g><g><title>lint_levels (440,425 samples, 0.16%)</title><rect x="72.0695%" y="69" width="0.1649%" height="15" fill="rgb(233,208,19)"/><text x="72.3195%" y="79.50"></text></g><g><title>generics_of (1,572,519 samples, 0.59%)</title><rect x="71.6606%" y="117" width="0.5888%" height="15" fill="rgb(216,164,2)"/><text x="71.9106%" y="127.50"></text></g><g><title>predicates_of (750,806 samples, 0.28%)</title><rect x="72.2947%" y="117" width="0.2811%" height="15" fill="rgb(220,129,5)"/><text x="72.5447%" y="127.50"></text></g><g><title>predicates_defined_on (613,634 samples, 0.23%)</title><rect x="72.3460%" y="101" width="0.2298%" height="15" fill="rgb(242,17,10)"/><text x="72.5960%" y="111.50"></text></g><g><title>type_collecting (4,013,755 samples, 1.50%)</title><rect x="71.1602%" y="149" width="1.5030%" height="15" fill="rgb(242,107,0)"/><text x="71.4102%" y="159.50"></text></g><g><title>collect_mod_item_types (3,985,345 samples, 1.49%)</title><rect x="71.1708%" y="133" width="1.4923%" height="15" fill="rgb(251,28,31)"/><text x="71.4208%" y="143.50"></text></g><g><title>evaluate_obligation (741,015 samples, 0.28%)</title><rect x="74.4660%" y="117" width="0.2775%" height="15" fill="rgb(233,223,10)"/><text x="74.7160%" y="127.50"></text></g><g><title>param_env (714,437 samples, 0.27%)</title><rect x="74.8255%" y="117" width="0.2675%" height="15" fill="rgb(215,21,27)"/><text x="75.0755%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,215,503 samples, 2.70%)</title><rect x="72.8647%" y="133" width="2.7018%" height="15" fill="rgb(232,23,21)"/><text x="73.1147%" y="143.50">ch..</text></g><g><title>region_scope_tree (1,228,694 samples, 0.46%)</title><rect x="75.1064%" y="117" width="0.4601%" height="15" fill="rgb(244,5,23)"/><text x="75.3564%" y="127.50"></text></g><g><title>evaluate_obligation (940,681 samples, 0.35%)</title><rect x="76.3918%" y="117" width="0.3522%" height="15" fill="rgb(226,81,46)"/><text x="76.6418%" y="127.50"></text></g><g><title>param_env (665,981 samples, 0.25%)</title><rect x="76.7999%" y="117" width="0.2494%" height="15" fill="rgb(247,70,30)"/><text x="77.0499%" y="127.50"></text></g><g><title>analysis (205,206,604 samples, 76.84%)</title><rect x="0.2929%" y="181" width="76.8397%" height="15" fill="rgb(212,68,19)"/><text x="0.5429%" y="191.50">analysis</text></g><g><title>type_check_crate (123,747,084 samples, 46.34%)</title><rect x="30.7955%" y="165" width="46.3371%" height="15" fill="rgb(240,187,13)"/><text x="31.0455%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,911,443 samples, 4.46%)</title><rect x="72.6724%" y="149" width="4.4602%" height="15" fill="rgb(223,113,26)"/><text x="72.9224%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (4,182,455 samples, 1.57%)</title><rect x="75.5665%" y="133" width="1.5661%" height="15" fill="rgb(206,192,2)"/><text x="75.8165%" y="143.50"></text></g><g><title>codegen_crate (444,695 samples, 0.17%)</title><rect x="77.1356%" y="181" width="0.1665%" height="15" fill="rgb(241,108,4)"/><text x="77.3856%" y="191.50"></text></g><g><title>macro_expand_crate (37,532,480 samples, 14.05%)</title><rect x="77.5413%" y="165" width="14.0541%" height="15" fill="rgb(247,173,49)"/><text x="77.7913%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (37,514,369 samples, 14.05%)</title><rect x="77.5481%" y="149" width="14.0473%" height="15" fill="rgb(224,114,35)"/><text x="77.7981%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (824,402 samples, 0.31%)</title><rect x="91.2867%" y="133" width="0.3087%" height="15" fill="rgb(245,159,27)"/><text x="91.5367%" y="143.50"></text></g><g><title>finalize_macro_resolutions (419,185 samples, 0.16%)</title><rect x="91.6903%" y="149" width="0.1570%" height="15" fill="rgb(245,172,44)"/><text x="91.9403%" y="159.50"></text></g><g><title>late_resolve_crate (3,183,546 samples, 1.19%)</title><rect x="91.8473%" y="149" width="1.1921%" height="15" fill="rgb(236,23,11)"/><text x="92.0973%" y="159.50"></text></g><g><title>configure_and_expand (42,268,553 samples, 15.83%)</title><rect x="77.3022%" y="181" width="15.8275%" height="15" fill="rgb(205,117,38)"/><text x="77.5522%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,999,995 samples, 1.50%)</title><rect x="91.6318%" y="165" width="1.4978%" height="15" fill="rgb(237,72,25)"/><text x="91.8818%" y="175.50"></text></g><g><title>drop_ast (423,944 samples, 0.16%)</title><rect x="93.1296%" y="181" width="0.1587%" height="15" fill="rgb(244,70,9)"/><text x="93.3796%" y="191.50"></text></g><g><title>early_lint_checks (964,901 samples, 0.36%)</title><rect x="93.2944%" y="181" width="0.3613%" height="15" fill="rgb(217,125,39)"/><text x="93.5444%" y="191.50"></text></g><g><title>free_global_ctxt (3,309,107 samples, 1.24%)</title><rect x="93.6557%" y="181" width="1.2391%" height="15" fill="rgb(235,36,10)"/><text x="93.9057%" y="191.50"></text></g><g><title>generate_crate_metadata (3,168,456 samples, 1.19%)</title><rect x="94.8948%" y="181" width="1.1864%" height="15" fill="rgb(251,123,47)"/><text x="95.1448%" y="191.50"></text></g><g><title>hir_lowering (7,978,709 samples, 2.99%)</title><rect x="96.0812%" y="181" width="2.9876%" height="15" fill="rgb(221,13,13)"/><text x="96.3312%" y="191.50">hir..</text></g><g><title>parse_crate (548,826 samples, 0.21%)</title><rect x="99.0901%" y="181" width="0.2055%" height="15" fill="rgb(238,131,9)"/><text x="99.3401%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,103,833 samples, 0.41%)</title><rect x="99.3773%" y="181" width="0.4133%" height="15" fill="rgb(211,50,8)"/><text x="99.6273%" y="191.50"></text></g><g><title>all (267,058,066 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (267,058,066 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (460,005 samples, 0.17%)</title><rect x="99.8278%" y="181" width="0.1722%" height="15" fill="rgb(246,228,12)"/><text x="100.0778%" y="191.50"></text></g></svg></svg>