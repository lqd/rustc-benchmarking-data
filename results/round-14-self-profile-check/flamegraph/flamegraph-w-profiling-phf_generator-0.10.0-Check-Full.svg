<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (59,350 samples, 0.13%)</title><rect x="7.2079%" y="165" width="0.1258%" height="15" fill="rgb(227,0,7)"/><text x="7.4579%" y="175.50"></text></g><g><title>param_env (177,912 samples, 0.38%)</title><rect x="8.1557%" y="133" width="0.3770%" height="15" fill="rgb(217,0,24)"/><text x="8.4057%" y="143.50"></text></g><g><title>item_attrs (159,231 samples, 0.34%)</title><rect x="8.8421%" y="101" width="0.3374%" height="15" fill="rgb(221,193,54)"/><text x="9.0921%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (154,031 samples, 0.33%)</title><rect x="8.8531%" y="85" width="0.3264%" height="15" fill="rgb(248,212,6)"/><text x="9.1031%" y="95.50"></text></g><g><title>codegen_fn_attrs (209,002 samples, 0.44%)</title><rect x="8.7504%" y="117" width="0.4429%" height="15" fill="rgb(208,68,35)"/><text x="9.0004%" y="127.50"></text></g><g><title>is_copy_raw (49,001 samples, 0.10%)</title><rect x="10.7007%" y="101" width="0.1038%" height="15" fill="rgb(232,128,0)"/><text x="10.9507%" y="111.50"></text></g><g><title>is_copy_raw (77,702 samples, 0.16%)</title><rect x="10.9823%" y="69" width="0.1647%" height="15" fill="rgb(207,160,47)"/><text x="11.2323%" y="79.50"></text></g><g><title>evaluate_obligation (63,252 samples, 0.13%)</title><rect x="11.0129%" y="53" width="0.1340%" height="15" fill="rgb(228,23,34)"/><text x="11.2629%" y="63.50"></text></g><g><title>param_env (60,330 samples, 0.13%)</title><rect x="11.1469%" y="69" width="0.1278%" height="15" fill="rgb(218,30,26)"/><text x="11.3969%" y="79.50"></text></g><g><title>adt_drop_tys (171,012 samples, 0.36%)</title><rect x="10.9148%" y="85" width="0.3624%" height="15" fill="rgb(220,122,19)"/><text x="11.1648%" y="95.50"></text></g><g><title>needs_drop_raw (473,353 samples, 1.00%)</title><rect x="10.8073%" y="101" width="1.0031%" height="15" fill="rgb(250,228,42)"/><text x="11.0573%" y="111.50"></text></g><g><title>is_copy_raw (251,631 samples, 0.53%)</title><rect x="11.2772%" y="85" width="0.5332%" height="15" fill="rgb(240,193,28)"/><text x="11.5272%" y="95.50"></text></g><g><title>evaluate_obligation (204,260 samples, 0.43%)</title><rect x="11.3776%" y="69" width="0.4328%" height="15" fill="rgb(216,20,37)"/><text x="11.6276%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (245,403 samples, 0.52%)</title><rect x="11.9780%" y="85" width="0.5200%" height="15" fill="rgb(206,188,39)"/><text x="12.2280%" y="95.50"></text></g><g><title>impl_parent (241,091 samples, 0.51%)</title><rect x="13.1537%" y="69" width="0.5109%" height="15" fill="rgb(217,207,13)"/><text x="13.4037%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (173,320 samples, 0.37%)</title><rect x="13.2973%" y="53" width="0.3673%" height="15" fill="rgb(231,73,38)"/><text x="13.5473%" y="63.50"></text></g><g><title>specialization_graph_of (1,146,233 samples, 2.43%)</title><rect x="12.5276%" y="85" width="2.4290%" height="15" fill="rgb(225,20,46)"/><text x="12.7776%" y="95.50">sp..</text></g><g><title>impl_trait_ref (609,700 samples, 1.29%)</title><rect x="13.6646%" y="69" width="1.2920%" height="15" fill="rgb(210,31,41)"/><text x="13.9146%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (538,790 samples, 1.14%)</title><rect x="13.8148%" y="53" width="1.1418%" height="15" fill="rgb(221,200,47)"/><text x="14.0648%" y="63.50"></text></g><g><title>resolve_instance (1,514,328 samples, 3.21%)</title><rect x="11.8104%" y="101" width="3.2090%" height="15" fill="rgb(226,26,5)"/><text x="12.0604%" y="111.50">res..</text></g><g><title>thir_body (220,781 samples, 0.47%)</title><rect x="15.0332%" y="101" width="0.4679%" height="15" fill="rgb(249,33,26)"/><text x="15.2832%" y="111.50"></text></g><g><title>mir_const (3,664,019 samples, 7.76%)</title><rect x="7.7470%" y="149" width="7.7645%" height="15" fill="rgb(235,183,28)"/><text x="7.9970%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (3,293,226 samples, 6.98%)</title><rect x="8.5328%" y="133" width="6.9787%" height="15" fill="rgb(221,5,38)"/><text x="8.7828%" y="143.50">unsafety_..</text></g><g><title>mir_built (2,981,523 samples, 6.32%)</title><rect x="9.1933%" y="117" width="6.3182%" height="15" fill="rgb(247,18,42)"/><text x="9.4433%" y="127.50">mir_built</text></g><g><title>mir_promoted (4,004,863 samples, 8.49%)</title><rect x="7.3704%" y="165" width="8.4867%" height="15" fill="rgb(241,131,45)"/><text x="7.6204%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (163,111 samples, 0.35%)</title><rect x="15.5115%" y="149" width="0.3457%" height="15" fill="rgb(249,31,29)"/><text x="15.7615%" y="159.50"></text></g><g><title>mir_const (139,161 samples, 0.29%)</title><rect x="15.5622%" y="133" width="0.2949%" height="15" fill="rgb(225,111,53)"/><text x="15.8122%" y="143.50"></text></g><g><title>unsafety_check_result (96,441 samples, 0.20%)</title><rect x="15.6527%" y="117" width="0.2044%" height="15" fill="rgb(238,160,17)"/><text x="15.9027%" y="127.50"></text></g><g><title>mir_built (60,990 samples, 0.13%)</title><rect x="15.7279%" y="101" width="0.1292%" height="15" fill="rgb(214,148,48)"/><text x="15.9779%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (173,211 samples, 0.37%)</title><rect x="15.8571%" y="165" width="0.3671%" height="15" fill="rgb(232,36,49)"/><text x="16.1071%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (531,717 samples, 1.13%)</title><rect x="16.2242%" y="165" width="1.1268%" height="15" fill="rgb(209,103,24)"/><text x="16.4742%" y="175.50"></text></g><g><title>normalize_projection_ty (351,905 samples, 0.75%)</title><rect x="16.6052%" y="149" width="0.7457%" height="15" fill="rgb(229,88,8)"/><text x="16.8552%" y="159.50"></text></g><g><title>type_op_normalize_predicate (247,303 samples, 0.52%)</title><rect x="17.3509%" y="165" width="0.5241%" height="15" fill="rgb(213,181,19)"/><text x="17.6009%" y="175.50"></text></g><g><title>normalize_projection_ty (159,931 samples, 0.34%)</title><rect x="17.5361%" y="149" width="0.3389%" height="15" fill="rgb(254,191,54)"/><text x="17.7861%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,084,772 samples, 19.25%)</title><rect x="1.0149%" y="197" width="19.2516%" height="15" fill="rgb(241,83,37)"/><text x="1.2649%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,068,940 samples, 19.22%)</title><rect x="1.0484%" y="181" width="19.2181%" height="15" fill="rgb(233,36,39)"/><text x="1.2984%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,128,539 samples, 2.39%)</title><rect x="17.8750%" y="165" width="2.3915%" height="15" fill="rgb(226,3,54)"/><text x="18.1250%" y="175.50">ty..</text></g><g><title>evaluate_obligation (87,790 samples, 0.19%)</title><rect x="20.0805%" y="149" width="0.1860%" height="15" fill="rgb(245,192,40)"/><text x="20.3305%" y="159.50"></text></g><g><title>MIR_effect_checking (109,762 samples, 0.23%)</title><rect x="20.2665%" y="197" width="0.2326%" height="15" fill="rgb(238,167,29)"/><text x="20.5165%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (84,550 samples, 0.18%)</title><rect x="20.3199%" y="181" width="0.1792%" height="15" fill="rgb(232,182,51)"/><text x="20.5699%" y="191.50"></text></g><g><title>hir_module_items (84,151 samples, 0.18%)</title><rect x="20.4991%" y="197" width="0.1783%" height="15" fill="rgb(231,60,39)"/><text x="20.7491%" y="207.50"></text></g><g><title>codegen_fn_attrs (119,591 samples, 0.25%)</title><rect x="20.8475%" y="165" width="0.2534%" height="15" fill="rgb(208,69,12)"/><text x="21.0975%" y="175.50"></text></g><g><title>check_mod_attrs (183,832 samples, 0.39%)</title><rect x="20.7116%" y="181" width="0.3896%" height="15" fill="rgb(235,93,37)"/><text x="20.9616%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (110,861 samples, 0.23%)</title><rect x="21.1925%" y="181" width="0.2349%" height="15" fill="rgb(213,116,39)"/><text x="21.4425%" y="191.50"></text></g><g><title>misc_checking_1 (379,704 samples, 0.80%)</title><rect x="20.6784%" y="197" width="0.8046%" height="15" fill="rgb(222,207,29)"/><text x="20.9284%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (194,592 samples, 0.41%)</title><rect x="21.4862%" y="181" width="0.4124%" height="15" fill="rgb(206,96,30)"/><text x="21.7362%" y="191.50"></text></g><g><title>check_mod_liveness (167,562 samples, 0.36%)</title><rect x="21.5435%" y="165" width="0.3551%" height="15" fill="rgb(218,138,4)"/><text x="21.7935%" y="175.50"></text></g><g><title>type_uninhabited_from (49,680 samples, 0.11%)</title><rect x="21.7933%" y="149" width="0.1053%" height="15" fill="rgb(250,191,14)"/><text x="22.0433%" y="159.50"></text></g><g><title>misc_checking_2 (386,484 samples, 0.82%)</title><rect x="21.4830%" y="197" width="0.8190%" height="15" fill="rgb(239,60,40)"/><text x="21.7330%" y="207.50"></text></g><g><title>match_checking (190,372 samples, 0.40%)</title><rect x="21.8986%" y="181" width="0.4034%" height="15" fill="rgb(206,27,48)"/><text x="22.1486%" y="191.50"></text></g><g><title>check_match (183,322 samples, 0.39%)</title><rect x="21.9135%" y="165" width="0.3885%" height="15" fill="rgb(225,35,8)"/><text x="22.1635%" y="175.50"></text></g><g><title>death_checking (71,250 samples, 0.15%)</title><rect x="22.4006%" y="181" width="0.1510%" height="15" fill="rgb(250,213,24)"/><text x="22.6506%" y="191.50"></text></g><g><title>eval_to_const_value_raw (110,691 samples, 0.23%)</title><rect x="23.5430%" y="149" width="0.2346%" height="15" fill="rgb(247,123,22)"/><text x="23.7930%" y="159.50"></text></g><g><title>eval_to_const_value_raw (108,441 samples, 0.23%)</title><rect x="23.5477%" y="133" width="0.2298%" height="15" fill="rgb(231,138,38)"/><text x="23.7977%" y="143.50"></text></g><g><title>eval_to_allocation_raw (103,411 samples, 0.22%)</title><rect x="23.5584%" y="117" width="0.2191%" height="15" fill="rgb(231,145,46)"/><text x="23.8084%" y="127.50"></text></g><g><title>explicit_predicates_of (262,452 samples, 0.56%)</title><rect x="23.8805%" y="101" width="0.5562%" height="15" fill="rgb(251,118,11)"/><text x="24.1305%" y="111.50"></text></g><g><title>generics_of (254,092 samples, 0.54%)</title><rect x="23.8982%" y="85" width="0.5384%" height="15" fill="rgb(217,147,25)"/><text x="24.1482%" y="95.50"></text></g><g><title>param_env (312,803 samples, 0.66%)</title><rect x="23.7775%" y="149" width="0.6629%" height="15" fill="rgb(247,81,37)"/><text x="24.0275%" y="159.50"></text></g><g><title>predicates_of (276,692 samples, 0.59%)</title><rect x="23.8541%" y="133" width="0.5863%" height="15" fill="rgb(209,12,38)"/><text x="24.1041%" y="143.50"></text></g><g><title>predicates_defined_on (271,792 samples, 0.58%)</title><rect x="23.8644%" y="117" width="0.5760%" height="15" fill="rgb(227,1,9)"/><text x="24.1144%" y="127.50"></text></g><g><title>trait_impls_of (214,993 samples, 0.46%)</title><rect x="24.4404%" y="149" width="0.4556%" height="15" fill="rgb(248,47,43)"/><text x="24.6904%" y="159.50"></text></g><g><title>implementations_of_trait (55,291 samples, 0.12%)</title><rect x="24.7788%" y="133" width="0.1172%" height="15" fill="rgb(221,10,30)"/><text x="25.0288%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (49,590 samples, 0.11%)</title><rect x="24.7909%" y="117" width="0.1051%" height="15" fill="rgb(210,229,1)"/><text x="25.0409%" y="127.50"></text></g><g><title>crate_lints (3,814,722 samples, 8.08%)</title><rect x="22.5555%" y="165" width="8.0838%" height="15" fill="rgb(222,148,37)"/><text x="22.8055%" y="175.50">crate_lints</text></g><g><title>type_of (2,704,360 samples, 5.73%)</title><rect x="24.9085%" y="149" width="5.7308%" height="15" fill="rgb(234,67,33)"/><text x="25.1585%" y="159.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,438,668 samples, 5.17%)</title><rect x="25.4715%" y="133" width="5.1678%" height="15" fill="rgb(247,98,35)"/><text x="25.7215%" y="143.50">metada..</text></g><g><title>lint_checking (3,969,044 samples, 8.41%)</title><rect x="22.5516%" y="181" width="8.4108%" height="15" fill="rgb(247,138,52)"/><text x="22.8016%" y="191.50">lint_checking</text></g><g><title>module_lints (152,452 samples, 0.32%)</title><rect x="30.6393%" y="165" width="0.3231%" height="15" fill="rgb(213,79,30)"/><text x="30.8893%" y="175.50"></text></g><g><title>lint_mod (148,752 samples, 0.32%)</title><rect x="30.6472%" y="149" width="0.3152%" height="15" fill="rgb(246,177,23)"/><text x="30.8972%" y="159.50"></text></g><g><title>privacy_access_levels (56,520 samples, 0.12%)</title><rect x="30.9624%" y="181" width="0.1198%" height="15" fill="rgb(230,62,27)"/><text x="31.2124%" y="191.50"></text></g><g><title>privacy_checking_modules (187,262 samples, 0.40%)</title><rect x="31.0822%" y="181" width="0.3968%" height="15" fill="rgb(216,154,8)"/><text x="31.3322%" y="191.50"></text></g><g><title>check_mod_privacy (185,682 samples, 0.39%)</title><rect x="31.0855%" y="165" width="0.3935%" height="15" fill="rgb(244,35,45)"/><text x="31.3355%" y="175.50"></text></g><g><title>misc_checking_3 (4,345,308 samples, 9.21%)</title><rect x="22.3020%" y="197" width="9.2082%" height="15" fill="rgb(251,115,12)"/><text x="22.5520%" y="207.50">misc_checking..</text></g><g><title>adt_def (73,221 samples, 0.16%)</title><rect x="48.4502%" y="101" width="0.1552%" height="15" fill="rgb(240,54,50)"/><text x="48.7002%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (71,121 samples, 0.15%)</title><rect x="48.4547%" y="85" width="0.1507%" height="15" fill="rgb(233,84,52)"/><text x="48.7047%" y="95.50"></text></g><g><title>adt_sized_constraint (125,451 samples, 0.27%)</title><rect x="48.4276%" y="117" width="0.2658%" height="15" fill="rgb(207,117,47)"/><text x="48.6776%" y="127.50"></text></g><g><title>associated_item (467,004 samples, 0.99%)</title><rect x="49.0595%" y="101" width="0.9896%" height="15" fill="rgb(249,43,39)"/><text x="49.3095%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (376,654 samples, 0.80%)</title><rect x="49.2509%" y="85" width="0.7982%" height="15" fill="rgb(209,38,44)"/><text x="49.5009%" y="95.50"></text></g><g><title>associated_items (676,686 samples, 1.43%)</title><rect x="48.7290%" y="117" width="1.4340%" height="15" fill="rgb(236,212,23)"/><text x="48.9790%" y="127.50"></text></g><g><title>associated_item_def_ids (53,720 samples, 0.11%)</title><rect x="50.0491%" y="101" width="0.1138%" height="15" fill="rgb(242,79,21)"/><text x="50.2991%" y="111.50"></text></g><g><title>adt_dtorck_constraint (54,991 samples, 0.12%)</title><rect x="50.6621%" y="69" width="0.1165%" height="15" fill="rgb(211,96,35)"/><text x="50.9121%" y="79.50"></text></g><g><title>adt_dtorck_constraint (90,311 samples, 0.19%)</title><rect x="50.6005%" y="85" width="0.1914%" height="15" fill="rgb(253,215,40)"/><text x="50.8505%" y="95.50"></text></g><g><title>dropck_outlives (271,153 samples, 0.57%)</title><rect x="50.2613%" y="117" width="0.5746%" height="15" fill="rgb(211,81,21)"/><text x="50.5113%" y="127.50"></text></g><g><title>adt_dtorck_constraint (165,413 samples, 0.35%)</title><rect x="50.4853%" y="101" width="0.3505%" height="15" fill="rgb(208,190,38)"/><text x="50.7353%" y="111.50"></text></g><g><title>def_span (48,240 samples, 0.10%)</title><rect x="52.5998%" y="69" width="0.1022%" height="15" fill="rgb(235,213,38)"/><text x="52.8498%" y="79.50"></text></g><g><title>mir_for_ctfe (881,402 samples, 1.87%)</title><rect x="52.7731%" y="69" width="1.8678%" height="15" fill="rgb(237,122,38)"/><text x="53.0231%" y="79.50">m..</text></g><g><title>metadata_decode_entry_mir_for_ctfe (870,032 samples, 1.84%)</title><rect x="52.7972%" y="53" width="1.8437%" height="15" fill="rgb(244,218,35)"/><text x="53.0472%" y="63.50">m..</text></g><g><title>eval_to_const_value_raw (1,823,470 samples, 3.86%)</title><rect x="50.8359%" y="117" width="3.8641%" height="15" fill="rgb(240,68,47)"/><text x="51.0859%" y="127.50">eval..</text></g><g><title>eval_to_const_value_raw (1,775,189 samples, 3.76%)</title><rect x="50.9382%" y="101" width="3.7618%" height="15" fill="rgb(210,16,53)"/><text x="51.1882%" y="111.50">eval..</text></g><g><title>eval_to_allocation_raw (1,727,918 samples, 3.66%)</title><rect x="51.0383%" y="85" width="3.6616%" height="15" fill="rgb(235,124,12)"/><text x="51.2883%" y="95.50">eval..</text></g><g><title>adt_def (94,721 samples, 0.20%)</title><rect x="57.3773%" y="85" width="0.2007%" height="15" fill="rgb(224,169,11)"/><text x="57.6273%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (92,291 samples, 0.20%)</title><rect x="57.3824%" y="69" width="0.1956%" height="15" fill="rgb(250,166,2)"/><text x="57.6324%" y="79.50"></text></g><g><title>item_attrs (67,831 samples, 0.14%)</title><rect x="57.4343%" y="53" width="0.1437%" height="15" fill="rgb(242,216,29)"/><text x="57.6843%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (65,261 samples, 0.14%)</title><rect x="57.4397%" y="37" width="0.1383%" height="15" fill="rgb(230,116,27)"/><text x="57.6897%" y="47.50"></text></g><g><title>adt_sized_constraint (117,401 samples, 0.25%)</title><rect x="57.3562%" y="101" width="0.2488%" height="15" fill="rgb(228,99,48)"/><text x="57.6062%" y="111.50"></text></g><g><title>generics_of (68,660 samples, 0.15%)</title><rect x="57.6050%" y="101" width="0.1455%" height="15" fill="rgb(253,11,6)"/><text x="57.8550%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (58,440 samples, 0.12%)</title><rect x="57.6267%" y="85" width="0.1238%" height="15" fill="rgb(247,143,39)"/><text x="57.8767%" y="95.50"></text></g><g><title>impl_trait_ref (93,800 samples, 0.20%)</title><rect x="57.8638%" y="101" width="0.1988%" height="15" fill="rgb(236,97,10)"/><text x="58.1138%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (82,760 samples, 0.18%)</title><rect x="57.8872%" y="85" width="0.1754%" height="15" fill="rgb(233,208,19)"/><text x="58.1372%" y="95.50"></text></g><g><title>explicit_predicates_of (52,850 samples, 0.11%)</title><rect x="58.3256%" y="69" width="0.1120%" height="15" fill="rgb(216,164,2)"/><text x="58.5756%" y="79.50"></text></g><g><title>predicates_of (179,930 samples, 0.38%)</title><rect x="58.1189%" y="101" width="0.3813%" height="15" fill="rgb(220,129,5)"/><text x="58.3689%" y="111.50"></text></g><g><title>predicates_defined_on (117,430 samples, 0.25%)</title><rect x="58.2514%" y="85" width="0.2488%" height="15" fill="rgb(242,17,10)"/><text x="58.5014%" y="95.50"></text></g><g><title>specializes (164,122 samples, 0.35%)</title><rect x="58.5002%" y="101" width="0.3478%" height="15" fill="rgb(242,107,0)"/><text x="58.7502%" y="111.50"></text></g><g><title>param_env (130,571 samples, 0.28%)</title><rect x="58.5713%" y="85" width="0.2767%" height="15" fill="rgb(251,28,31)"/><text x="58.8213%" y="95.50"></text></g><g><title>def_span (82,331 samples, 0.17%)</title><rect x="58.6736%" y="69" width="0.1745%" height="15" fill="rgb(233,223,10)"/><text x="58.9236%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (79,111 samples, 0.17%)</title><rect x="58.6804%" y="53" width="0.1676%" height="15" fill="rgb(215,21,27)"/><text x="58.9304%" y="63.50"></text></g><g><title>trait_impls_of (1,000,870 samples, 2.12%)</title><rect x="58.8710%" y="101" width="2.1210%" height="15" fill="rgb(232,23,21)"/><text x="59.1210%" y="111.50">t..</text></g><g><title>implementations_of_trait (341,324 samples, 0.72%)</title><rect x="60.2686%" y="85" width="0.7233%" height="15" fill="rgb(244,5,23)"/><text x="60.5186%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (216,573 samples, 0.46%)</title><rect x="60.5330%" y="69" width="0.4589%" height="15" fill="rgb(226,81,46)"/><text x="60.7830%" y="79.50"></text></g><g><title>evaluate_obligation (2,971,497 samples, 6.30%)</title><rect x="54.7000%" y="117" width="6.2969%" height="15" fill="rgb(247,70,30)"/><text x="54.9500%" y="127.50">evaluate..</text></g><g><title>fn_sig (108,190 samples, 0.23%)</title><rect x="61.0387%" y="117" width="0.2293%" height="15" fill="rgb(212,68,19)"/><text x="61.2887%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (95,820 samples, 0.20%)</title><rect x="61.0649%" y="101" width="0.2031%" height="15" fill="rgb(240,187,13)"/><text x="61.3149%" y="111.50"></text></g><g><title>generics_of (210,892 samples, 0.45%)</title><rect x="61.2679%" y="117" width="0.4469%" height="15" fill="rgb(223,113,26)"/><text x="61.5179%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (160,822 samples, 0.34%)</title><rect x="61.3740%" y="101" width="0.3408%" height="15" fill="rgb(206,192,2)"/><text x="61.6240%" y="111.50"></text></g><g><title>associated_item (58,160 samples, 0.12%)</title><rect x="61.8178%" y="85" width="0.1232%" height="15" fill="rgb(241,108,4)"/><text x="62.0678%" y="95.50"></text></g><g><title>impl_item_implementor_ids (115,580 samples, 0.24%)</title><rect x="61.7148%" y="117" width="0.2449%" height="15" fill="rgb(247,173,49)"/><text x="61.9648%" y="127.50"></text></g><g><title>associated_items (99,560 samples, 0.21%)</title><rect x="61.7488%" y="101" width="0.2110%" height="15" fill="rgb(224,114,35)"/><text x="61.9988%" y="111.50"></text></g><g><title>impl_trait_ref (180,712 samples, 0.38%)</title><rect x="62.0421%" y="117" width="0.3829%" height="15" fill="rgb(245,159,27)"/><text x="62.2921%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (157,151 samples, 0.33%)</title><rect x="62.0921%" y="101" width="0.3330%" height="15" fill="rgb(245,172,44)"/><text x="62.3421%" y="111.50"></text></g><g><title>explicit_predicates_of (55,871 samples, 0.12%)</title><rect x="62.8684%" y="53" width="0.1184%" height="15" fill="rgb(236,23,11)"/><text x="63.1184%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (54,751 samples, 0.12%)</title><rect x="62.8708%" y="37" width="0.1160%" height="15" fill="rgb(205,117,38)"/><text x="63.1208%" y="47.50"></text></g><g><title>predicates_of (74,962 samples, 0.16%)</title><rect x="62.8410%" y="85" width="0.1589%" height="15" fill="rgb(237,72,25)"/><text x="63.0910%" y="95.50"></text></g><g><title>predicates_defined_on (65,592 samples, 0.14%)</title><rect x="62.8609%" y="69" width="0.1390%" height="15" fill="rgb(244,70,9)"/><text x="63.1109%" y="79.50"></text></g><g><title>is_copy_raw (389,046 samples, 0.82%)</title><rect x="62.5594%" y="117" width="0.8244%" height="15" fill="rgb(217,125,39)"/><text x="62.8094%" y="127.50"></text></g><g><title>evaluate_obligation (364,195 samples, 0.77%)</title><rect x="62.6120%" y="101" width="0.7718%" height="15" fill="rgb(235,36,10)"/><text x="62.8620%" y="111.50"></text></g><g><title>trait_impls_of (180,082 samples, 0.38%)</title><rect x="63.0022%" y="85" width="0.3816%" height="15" fill="rgb(251,123,47)"/><text x="63.2522%" y="95.50"></text></g><g><title>item_attrs (68,350 samples, 0.14%)</title><rect x="63.3935%" y="117" width="0.1448%" height="15" fill="rgb(221,13,13)"/><text x="63.6435%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (65,130 samples, 0.14%)</title><rect x="63.4003%" y="101" width="0.1380%" height="15" fill="rgb(238,131,9)"/><text x="63.6503%" y="111.50"></text></g><g><title>evaluate_obligation (208,603 samples, 0.44%)</title><rect x="64.1851%" y="101" width="0.4421%" height="15" fill="rgb(211,50,8)"/><text x="64.4351%" y="111.50"></text></g><g><title>method_autoderef_steps (442,685 samples, 0.94%)</title><rect x="63.7111%" y="117" width="0.9381%" height="15" fill="rgb(245,182,24)"/><text x="63.9611%" y="127.50"></text></g><g><title>explicit_predicates_of (235,215 samples, 0.50%)</title><rect x="65.2527%" y="85" width="0.4984%" height="15" fill="rgb(242,14,37)"/><text x="65.5027%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (199,135 samples, 0.42%)</title><rect x="65.3292%" y="69" width="0.4220%" height="15" fill="rgb(246,228,12)"/><text x="65.5792%" y="79.50"></text></g><g><title>predicates_of (564,408 samples, 1.20%)</title><rect x="64.6920%" y="117" width="1.1960%" height="15" fill="rgb(213,55,15)"/><text x="64.9420%" y="127.50"></text></g><g><title>predicates_defined_on (404,186 samples, 0.86%)</title><rect x="65.0315%" y="101" width="0.8565%" height="15" fill="rgb(209,9,3)"/><text x="65.2815%" y="111.50"></text></g><g><title>inferred_outlives_of (64,571 samples, 0.14%)</title><rect x="65.7512%" y="85" width="0.1368%" height="15" fill="rgb(230,59,30)"/><text x="66.0012%" y="95.50"></text></g><g><title>resolve_instance (76,262 samples, 0.16%)</title><rect x="65.8880%" y="117" width="0.1616%" height="15" fill="rgb(209,121,21)"/><text x="66.1380%" y="127.50"></text></g><g><title>specializes (185,703 samples, 0.39%)</title><rect x="66.0496%" y="117" width="0.3935%" height="15" fill="rgb(220,109,13)"/><text x="66.2996%" y="127.50"></text></g><g><title>param_env (79,351 samples, 0.17%)</title><rect x="66.2750%" y="101" width="0.1682%" height="15" fill="rgb(232,18,1)"/><text x="66.5250%" y="111.50"></text></g><g><title>type_of (51,492 samples, 0.11%)</title><rect x="66.5341%" y="117" width="0.1091%" height="15" fill="rgb(215,41,42)"/><text x="66.7841%" y="127.50"></text></g><g><title>item_bodies_checking (16,576,065 samples, 35.13%)</title><rect x="31.6155%" y="181" width="35.1265%" height="15" fill="rgb(224,123,36)"/><text x="31.8655%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,573,395 samples, 35.12%)</title><rect x="31.6212%" y="165" width="35.1208%" height="15" fill="rgb(240,125,3)"/><text x="31.8712%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (16,566,235 samples, 35.11%)</title><rect x="31.6363%" y="149" width="35.1057%" height="15" fill="rgb(205,98,50)"/><text x="31.8863%" y="159.50">typeck</text></g><g><title>typeck (16,556,245 samples, 35.08%)</title><rect x="31.6575%" y="133" width="35.0845%" height="15" fill="rgb(205,185,37)"/><text x="31.9075%" y="143.50">typeck</text></g><g><title>impl_parent (100,181 samples, 0.21%)</title><rect x="67.0048%" y="101" width="0.2123%" height="15" fill="rgb(238,207,15)"/><text x="67.2548%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (78,391 samples, 0.17%)</title><rect x="67.0510%" y="85" width="0.1661%" height="15" fill="rgb(213,199,42)"/><text x="67.3010%" y="95.50"></text></g><g><title>impl_trait_ref (335,604 samples, 0.71%)</title><rect x="67.2171%" y="101" width="0.7112%" height="15" fill="rgb(235,201,11)"/><text x="67.4671%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (316,244 samples, 0.67%)</title><rect x="67.2581%" y="85" width="0.6702%" height="15" fill="rgb(207,46,11)"/><text x="67.5081%" y="95.50"></text></g><g><title>adt_destructor (558,347 samples, 1.18%)</title><rect x="66.8049%" y="149" width="1.1832%" height="15" fill="rgb(241,35,35)"/><text x="67.0549%" y="159.50"></text></g><g><title>coherent_trait (553,067 samples, 1.17%)</title><rect x="66.8161%" y="133" width="1.1720%" height="15" fill="rgb(243,32,47)"/><text x="67.0661%" y="143.50"></text></g><g><title>specialization_graph_of (549,477 samples, 1.16%)</title><rect x="66.8237%" y="117" width="1.1644%" height="15" fill="rgb(247,202,23)"/><text x="67.0737%" y="127.50"></text></g><g><title>item_types_checking (714,258 samples, 1.51%)</title><rect x="66.7420%" y="181" width="1.5136%" height="15" fill="rgb(219,102,11)"/><text x="66.9920%" y="191.50"></text></g><g><title>check_mod_item_types (712,578 samples, 1.51%)</title><rect x="66.7456%" y="165" width="1.5100%" height="15" fill="rgb(243,110,44)"/><text x="66.9956%" y="175.50"></text></g><g><title>typeck (112,101 samples, 0.24%)</title><rect x="68.0180%" y="149" width="0.2376%" height="15" fill="rgb(222,74,54)"/><text x="68.2680%" y="159.50"></text></g><g><title>named_region_map (69,142 samples, 0.15%)</title><rect x="68.5087%" y="133" width="0.1465%" height="15" fill="rgb(216,99,12)"/><text x="68.7587%" y="143.50"></text></g><g><title>resolve_lifetimes (65,542 samples, 0.14%)</title><rect x="68.5163%" y="117" width="0.1389%" height="15" fill="rgb(226,22,26)"/><text x="68.7663%" y="127.50"></text></g><g><title>generics_of (106,902 samples, 0.23%)</title><rect x="68.4489%" y="149" width="0.2265%" height="15" fill="rgb(217,163,10)"/><text x="68.6989%" y="159.50"></text></g><g><title>predicates_of (169,921 samples, 0.36%)</title><rect x="68.6755%" y="149" width="0.3601%" height="15" fill="rgb(213,25,53)"/><text x="68.9255%" y="159.50"></text></g><g><title>predicates_defined_on (164,701 samples, 0.35%)</title><rect x="68.6865%" y="133" width="0.3490%" height="15" fill="rgb(252,105,26)"/><text x="68.9365%" y="143.50"></text></g><g><title>inferred_outlives_of (107,821 samples, 0.23%)</title><rect x="68.8071%" y="117" width="0.2285%" height="15" fill="rgb(220,39,43)"/><text x="69.0571%" y="127.50"></text></g><g><title>inferred_outlives_crate (99,201 samples, 0.21%)</title><rect x="68.8253%" y="101" width="0.2102%" height="15" fill="rgb(229,68,48)"/><text x="69.0753%" y="111.50"></text></g><g><title>type_collecting (423,005 samples, 0.90%)</title><rect x="68.2586%" y="181" width="0.8964%" height="15" fill="rgb(252,8,32)"/><text x="68.5086%" y="191.50"></text></g><g><title>collect_mod_item_types (416,505 samples, 0.88%)</title><rect x="68.2723%" y="165" width="0.8826%" height="15" fill="rgb(223,20,43)"/><text x="68.5223%" y="175.50"></text></g><g><title>type_of (56,341 samples, 0.12%)</title><rect x="69.0356%" y="149" width="0.1194%" height="15" fill="rgb(229,81,49)"/><text x="69.2856%" y="159.50"></text></g><g><title>adt_def (61,661 samples, 0.13%)</title><rect x="70.1516%" y="117" width="0.1307%" height="15" fill="rgb(236,28,36)"/><text x="70.4016%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (60,511 samples, 0.13%)</title><rect x="70.1541%" y="101" width="0.1282%" height="15" fill="rgb(249,185,26)"/><text x="70.4041%" y="111.50"></text></g><g><title>item_attrs (52,441 samples, 0.11%)</title><rect x="70.1712%" y="85" width="0.1111%" height="15" fill="rgb(249,174,33)"/><text x="70.4212%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (51,501 samples, 0.11%)</title><rect x="70.1732%" y="69" width="0.1091%" height="15" fill="rgb(233,201,37)"/><text x="70.4232%" y="79.50"></text></g><g><title>adt_sized_constraint (68,341 samples, 0.14%)</title><rect x="70.1393%" y="133" width="0.1448%" height="15" fill="rgb(221,78,26)"/><text x="70.3893%" y="143.50"></text></g><g><title>evaluate_obligation (216,912 samples, 0.46%)</title><rect x="69.9157%" y="149" width="0.4597%" height="15" fill="rgb(250,127,30)"/><text x="70.1657%" y="159.50"></text></g><g><title>implied_outlives_bounds (66,141 samples, 0.14%)</title><rect x="70.3754%" y="149" width="0.1402%" height="15" fill="rgb(230,49,44)"/><text x="70.6254%" y="159.50"></text></g><g><title>param_env (155,931 samples, 0.33%)</title><rect x="70.5156%" y="149" width="0.3304%" height="15" fill="rgb(229,67,23)"/><text x="70.7656%" y="159.50"></text></g><g><title>region_scope_tree (56,831 samples, 0.12%)</title><rect x="70.9295%" y="149" width="0.1204%" height="15" fill="rgb(249,83,47)"/><text x="71.1795%" y="159.50"></text></g><g><title>analysis (33,205,511 samples, 70.37%)</title><rect x="0.7882%" y="213" width="70.3661%" height="15" fill="rgb(215,43,3)"/><text x="1.0382%" y="223.50">analysis</text></g><g><title>type_check_crate (18,707,919 samples, 39.64%)</title><rect x="31.5102%" y="197" width="39.6441%" height="15" fill="rgb(238,154,13)"/><text x="31.7602%" y="207.50">type_check_crate</text></g><g><title>wf_checking (942,331 samples, 2.00%)</title><rect x="69.1574%" y="181" width="1.9969%" height="15" fill="rgb(219,56,2)"/><text x="69.4074%" y="191.50">w..</text></g><g><title>check_item_well_formed (911,480 samples, 1.93%)</title><rect x="69.2228%" y="165" width="1.9315%" height="15" fill="rgb(233,0,4)"/><text x="69.4728%" y="175.50">c..</text></g><g><title>codegen_crate (368,194 samples, 0.78%)</title><rect x="71.1674%" y="213" width="0.7802%" height="15" fill="rgb(235,30,7)"/><text x="71.4174%" y="223.50"></text></g><g><title>AST_validation (69,251 samples, 0.15%)</title><rect x="72.2231%" y="197" width="0.1468%" height="15" fill="rgb(250,79,13)"/><text x="72.4731%" y="207.50"></text></g><g><title>crate_injection (51,621 samples, 0.11%)</title><rect x="72.4093%" y="197" width="0.1094%" height="15" fill="rgb(211,146,34)"/><text x="72.6593%" y="207.50"></text></g><g><title>metadata_load_macro (62,822 samples, 0.13%)</title><rect x="82.6636%" y="165" width="0.1331%" height="15" fill="rgb(228,22,38)"/><text x="82.9136%" y="175.50"></text></g><g><title>macro_expand_crate (6,423,822 samples, 13.61%)</title><rect x="72.5187%" y="197" width="13.6128%" height="15" fill="rgb(235,168,5)"/><text x="72.7687%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (6,408,622 samples, 13.58%)</title><rect x="72.5509%" y="181" width="13.5806%" height="15" fill="rgb(221,155,16)"/><text x="72.8009%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (1,573,668 samples, 3.33%)</title><rect x="82.7967%" y="165" width="3.3348%" height="15" fill="rgb(215,215,53)"/><text x="83.0467%" y="175.50">met..</text></g><g><title>metadata_register_crate (639,749 samples, 1.36%)</title><rect x="84.7758%" y="149" width="1.3557%" height="15" fill="rgb(223,4,10)"/><text x="85.0258%" y="159.50"></text></g><g><title>metadata_register_crate (127,192 samples, 0.27%)</title><rect x="85.8620%" y="133" width="0.2695%" height="15" fill="rgb(234,103,6)"/><text x="86.1120%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (56,781 samples, 0.12%)</title><rect x="86.1385%" y="197" width="0.1203%" height="15" fill="rgb(227,97,0)"/><text x="86.3885%" y="207.50"></text></g><g><title>finalize_imports (186,442 samples, 0.40%)</title><rect x="86.2678%" y="181" width="0.3951%" height="15" fill="rgb(234,150,53)"/><text x="86.5178%" y="191.50"></text></g><g><title>late_resolve_crate (595,326 samples, 1.26%)</title><rect x="86.6849%" y="181" width="1.2616%" height="15" fill="rgb(228,201,54)"/><text x="86.9349%" y="191.50"></text></g><g><title>configure_and_expand (7,581,055 samples, 16.07%)</title><rect x="71.9476%" y="213" width="16.0651%" height="15" fill="rgb(222,22,37)"/><text x="72.1976%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (827,669 samples, 1.75%)</title><rect x="86.2588%" y="197" width="1.7539%" height="15" fill="rgb(237,53,32)"/><text x="86.5088%" y="207.50"></text></g><g><title>early_lint_checks (86,381 samples, 0.18%)</title><rect x="88.1392%" y="213" width="0.1831%" height="15" fill="rgb(233,25,53)"/><text x="88.3892%" y="223.50"></text></g><g><title>free_global_ctxt (2,853,922 samples, 6.05%)</title><rect x="88.3222%" y="213" width="6.0478%" height="15" fill="rgb(210,40,34)"/><text x="88.5722%" y="223.50">free_glo..</text></g><g><title>crate_hash (70,261 samples, 0.15%)</title><rect x="94.9325%" y="197" width="0.1489%" height="15" fill="rgb(241,220,44)"/><text x="95.1825%" y="207.50"></text></g><g><title>generate_crate_metadata (402,645 samples, 0.85%)</title><rect x="94.3700%" y="213" width="0.8532%" height="15" fill="rgb(235,28,35)"/><text x="94.6200%" y="223.50"></text></g><g><title>hir_lowering (506,346 samples, 1.07%)</title><rect x="95.2232%" y="213" width="1.0730%" height="15" fill="rgb(210,56,17)"/><text x="95.4732%" y="223.50"></text></g><g><title>link (49,610 samples, 0.11%)</title><rect x="96.2962%" y="213" width="0.1051%" height="15" fill="rgb(224,130,29)"/><text x="96.5462%" y="223.50"></text></g><g><title>parse_crate (664,087 samples, 1.41%)</title><rect x="96.4014%" y="213" width="1.4073%" height="15" fill="rgb(235,212,8)"/><text x="96.6514%" y="223.50"></text></g><g><title>prepare_outputs (162,072 samples, 0.34%)</title><rect x="97.8215%" y="213" width="0.3434%" height="15" fill="rgb(223,33,50)"/><text x="98.0715%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (500,816 samples, 1.06%)</title><rect x="98.1649%" y="213" width="1.0613%" height="15" fill="rgb(219,149,13)"/><text x="98.4149%" y="223.50"></text></g><g><title>setup_global_ctxt (78,031 samples, 0.17%)</title><rect x="99.2494%" y="213" width="0.1654%" height="15" fill="rgb(250,156,29)"/><text x="99.4994%" y="223.50"></text></g><g><title>all (47,189,638 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,193,19)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (47,189,638 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,135,14)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (276,163 samples, 0.59%)</title><rect x="99.4148%" y="213" width="0.5852%" height="15" fill="rgb(241,47,5)"/><text x="99.6648%" y="223.50"></text></g></svg></svg>