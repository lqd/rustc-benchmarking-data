<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (494,717 samples, 0.11%)</title><rect x="13.4154%" y="133" width="0.1140%" height="15" fill="rgb(227,0,7)"/><text x="13.6654%" y="143.50"></text></g><g><title>mir_borrowck_const_arg (794,068 samples, 0.18%)</title><rect x="13.6359%" y="133" width="0.1830%" height="15" fill="rgb(217,0,24)"/><text x="13.8859%" y="143.50"></text></g><g><title>param_env (625,607 samples, 0.14%)</title><rect x="15.3568%" y="101" width="0.1442%" height="15" fill="rgb(221,193,54)"/><text x="15.6068%" y="111.50"></text></g><g><title>item_attrs (606,579 samples, 0.14%)</title><rect x="16.0349%" y="69" width="0.1398%" height="15" fill="rgb(248,212,6)"/><text x="16.2849%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (585,768 samples, 0.13%)</title><rect x="16.0397%" y="53" width="0.1350%" height="15" fill="rgb(208,68,35)"/><text x="16.2897%" y="63.50"></text></g><g><title>codegen_fn_attrs (912,751 samples, 0.21%)</title><rect x="15.9736%" y="85" width="0.2104%" height="15" fill="rgb(232,128,0)"/><text x="16.2236%" y="95.50"></text></g><g><title>is_copy_raw (957,023 samples, 0.22%)</title><rect x="19.0649%" y="69" width="0.2206%" height="15" fill="rgb(207,160,47)"/><text x="19.3149%" y="79.50"></text></g><g><title>evaluate_obligation (682,970 samples, 0.16%)</title><rect x="19.1280%" y="53" width="0.1574%" height="15" fill="rgb(228,23,34)"/><text x="19.3780%" y="63.50"></text></g><g><title>is_copy_raw (2,755,326 samples, 0.64%)</title><rect x="19.4511%" y="53" width="0.6350%" height="15" fill="rgb(218,30,26)"/><text x="19.7011%" y="63.50"></text></g><g><title>evaluate_obligation (2,251,392 samples, 0.52%)</title><rect x="19.5672%" y="37" width="0.5189%" height="15" fill="rgb(220,122,19)"/><text x="19.8172%" y="47.50"></text></g><g><title>needs_drop_raw (3,477,827 samples, 0.80%)</title><rect x="19.2854%" y="69" width="0.8015%" height="15" fill="rgb(250,228,42)"/><text x="19.5354%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,590,787 samples, 0.37%)</title><rect x="20.3540%" y="53" width="0.3666%" height="15" fill="rgb(240,193,28)"/><text x="20.6040%" y="63.50"></text></g><g><title>resolve_instance (3,410,587 samples, 0.79%)</title><rect x="20.0869%" y="69" width="0.7860%" height="15" fill="rgb(216,20,37)"/><text x="20.3369%" y="79.50"></text></g><g><title>thir_body (4,814,014 samples, 1.11%)</title><rect x="20.9001%" y="69" width="1.1095%" height="15" fill="rgb(206,188,39)"/><text x="21.1501%" y="79.50"></text></g><g><title>mir_const (32,401,723 samples, 7.47%)</title><rect x="14.5847%" y="117" width="7.4675%" height="15" fill="rgb(217,207,13)"/><text x="14.8347%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (28,425,769 samples, 6.55%)</title><rect x="15.5010%" y="101" width="6.5511%" height="15" fill="rgb(231,73,38)"/><text x="15.7510%" y="111.50">unsafety_..</text></g><g><title>mir_built (25,462,406 samples, 5.87%)</title><rect x="16.1839%" y="85" width="5.8682%" height="15" fill="rgb(225,20,46)"/><text x="16.4339%" y="95.50">mir_bui..</text></g><g><title>mir_const_qualif (754,735 samples, 0.17%)</title><rect x="22.0521%" y="117" width="0.1739%" height="15" fill="rgb(210,31,41)"/><text x="22.3021%" y="127.50"></text></g><g><title>mir_const (452,383 samples, 0.10%)</title><rect x="22.1218%" y="101" width="0.1043%" height="15" fill="rgb(221,200,47)"/><text x="22.3718%" y="111.50"></text></g><g><title>mir_promoted (36,479,332 samples, 8.41%)</title><rect x="13.8189%" y="133" width="8.4072%" height="15" fill="rgb(226,26,5)"/><text x="14.0689%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,264,047 samples, 0.52%)</title><rect x="22.2264%" y="133" width="0.5218%" height="15" fill="rgb(249,33,26)"/><text x="22.4764%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,729,303 samples, 0.63%)</title><rect x="22.7482%" y="133" width="0.6290%" height="15" fill="rgb(235,183,28)"/><text x="22.9982%" y="143.50"></text></g><g><title>normalize_projection_ty (1,828,012 samples, 0.42%)</title><rect x="22.9559%" y="117" width="0.4213%" height="15" fill="rgb(221,5,38)"/><text x="23.2059%" y="127.50"></text></g><g><title>type_op_normalize_predicate (688,915 samples, 0.16%)</title><rect x="23.3772%" y="133" width="0.1588%" height="15" fill="rgb(247,18,42)"/><text x="23.6272%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,444,014 samples, 0.33%)</title><rect x="23.5359%" y="133" width="0.3328%" height="15" fill="rgb(241,131,45)"/><text x="23.7859%" y="143.50"></text></g><g><title>normalize_projection_ty (908,340 samples, 0.21%)</title><rect x="23.6594%" y="117" width="0.2093%" height="15" fill="rgb(249,31,29)"/><text x="23.9094%" y="127.50"></text></g><g><title>type_op_prove_predicate (8,621,238 samples, 1.99%)</title><rect x="23.8687%" y="133" width="1.9869%" height="15" fill="rgb(225,111,53)"/><text x="24.1187%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (110,133,438 samples, 25.38%)</title><rect x="0.4819%" y="165" width="25.3819%" height="15" fill="rgb(238,160,17)"/><text x="0.7319%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (109,514,523 samples, 25.24%)</title><rect x="0.6245%" y="149" width="25.2393%" height="15" fill="rgb(214,148,48)"/><text x="0.8745%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (652,647 samples, 0.15%)</title><rect x="25.8638%" y="165" width="0.1504%" height="15" fill="rgb(232,36,49)"/><text x="26.1138%" y="175.50"></text></g><g><title>hir_module_items (816,788 samples, 0.19%)</title><rect x="26.0142%" y="165" width="0.1882%" height="15" fill="rgb(209,103,24)"/><text x="26.2642%" y="175.50"></text></g><g><title>should_inherit_track_caller (692,064 samples, 0.16%)</title><rect x="26.5008%" y="117" width="0.1595%" height="15" fill="rgb(229,88,8)"/><text x="26.7508%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,070,430 samples, 0.25%)</title><rect x="26.4183%" y="133" width="0.2467%" height="15" fill="rgb(213,181,19)"/><text x="26.6683%" y="143.50"></text></g><g><title>check_mod_attrs (1,959,569 samples, 0.45%)</title><rect x="26.2134%" y="149" width="0.4516%" height="15" fill="rgb(254,191,54)"/><text x="26.4634%" y="159.50"></text></g><g><title>check_mod_const_bodies (502,868 samples, 0.12%)</title><rect x="26.6650%" y="149" width="0.1159%" height="15" fill="rgb(241,83,37)"/><text x="26.9150%" y="159.50"></text></g><g><title>lookup_deprecation_entry (544,846 samples, 0.13%)</title><rect x="26.9794%" y="133" width="0.1256%" height="15" fill="rgb(233,36,39)"/><text x="27.2294%" y="143.50"></text></g><g><title>stability_index (463,745 samples, 0.11%)</title><rect x="26.9981%" y="117" width="0.1069%" height="15" fill="rgb(226,3,54)"/><text x="27.2481%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,237,373 samples, 0.29%)</title><rect x="26.8527%" y="149" width="0.2852%" height="15" fill="rgb(245,192,40)"/><text x="27.1027%" y="159.50"></text></g><g><title>misc_checking_1 (4,215,676 samples, 0.97%)</title><rect x="26.2026%" y="165" width="0.9716%" height="15" fill="rgb(238,167,29)"/><text x="26.4526%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,838,880 samples, 0.42%)</title><rect x="27.1746%" y="149" width="0.4238%" height="15" fill="rgb(232,182,51)"/><text x="27.4246%" y="159.50"></text></g><g><title>check_mod_liveness (1,450,026 samples, 0.33%)</title><rect x="27.2643%" y="133" width="0.3342%" height="15" fill="rgb(231,60,39)"/><text x="27.5143%" y="143.50"></text></g><g><title>misc_checking_2 (4,342,588 samples, 1.00%)</title><rect x="27.1742%" y="165" width="1.0008%" height="15" fill="rgb(208,69,12)"/><text x="27.4242%" y="175.50"></text></g><g><title>match_checking (2,501,598 samples, 0.58%)</title><rect x="27.5984%" y="149" width="0.5765%" height="15" fill="rgb(235,93,37)"/><text x="27.8484%" y="159.50"></text></g><g><title>check_match (2,356,807 samples, 0.54%)</title><rect x="27.6318%" y="133" width="0.5432%" height="15" fill="rgb(213,116,39)"/><text x="27.8818%" y="143.50"></text></g><g><title>check_private_in_public (883,800 samples, 0.20%)</title><rect x="28.1778%" y="149" width="0.2037%" height="15" fill="rgb(222,207,29)"/><text x="28.4278%" y="159.50"></text></g><g><title>death_checking (1,610,158 samples, 0.37%)</title><rect x="28.3815%" y="149" width="0.3711%" height="15" fill="rgb(206,96,30)"/><text x="28.6315%" y="159.50"></text></g><g><title>param_env (825,300 samples, 0.19%)</title><rect x="29.2908%" y="117" width="0.1902%" height="15" fill="rgb(218,138,4)"/><text x="29.5408%" y="127.50"></text></g><g><title>crate_lints (4,466,120 samples, 1.03%)</title><rect x="28.7531%" y="133" width="1.0293%" height="15" fill="rgb(250,191,14)"/><text x="29.0031%" y="143.50"></text></g><g><title>type_of (1,168,347 samples, 0.27%)</title><rect x="29.5131%" y="117" width="0.2693%" height="15" fill="rgb(239,60,40)"/><text x="29.7631%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (931,765 samples, 0.21%)</title><rect x="29.5676%" y="101" width="0.2147%" height="15" fill="rgb(206,27,48)"/><text x="29.8176%" y="111.50"></text></g><g><title>lint_checking (6,478,893 samples, 1.49%)</title><rect x="28.7526%" y="149" width="1.4932%" height="15" fill="rgb(225,35,8)"/><text x="29.0026%" y="159.50"></text></g><g><title>module_lints (2,010,633 samples, 0.46%)</title><rect x="29.7823%" y="133" width="0.4634%" height="15" fill="rgb(250,213,24)"/><text x="30.0323%" y="143.50"></text></g><g><title>lint_mod (1,996,143 samples, 0.46%)</title><rect x="29.7857%" y="117" width="0.4600%" height="15" fill="rgb(247,123,22)"/><text x="30.0357%" y="127.50"></text></g><g><title>privacy_access_levels (1,734,750 samples, 0.40%)</title><rect x="30.2457%" y="149" width="0.3998%" height="15" fill="rgb(231,138,38)"/><text x="30.4957%" y="159.50"></text></g><g><title>privacy_checking_modules (3,651,611 samples, 0.84%)</title><rect x="30.6455%" y="149" width="0.8416%" height="15" fill="rgb(231,145,46)"/><text x="30.8955%" y="159.50"></text></g><g><title>check_mod_privacy (3,640,551 samples, 0.84%)</title><rect x="30.6481%" y="133" width="0.8390%" height="15" fill="rgb(251,118,11)"/><text x="30.8981%" y="143.50"></text></g><g><title>misc_checking_3 (14,405,842 samples, 3.32%)</title><rect x="28.1750%" y="165" width="3.3200%" height="15" fill="rgb(217,147,25)"/><text x="28.4250%" y="175.50">mis..</text></g><g><title>impl_parent (2,788,556 samples, 0.64%)</title><rect x="32.9329%" y="101" width="0.6427%" height="15" fill="rgb(247,81,37)"/><text x="33.1829%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,648,190 samples, 0.38%)</title><rect x="33.1957%" y="85" width="0.3799%" height="15" fill="rgb(209,12,38)"/><text x="33.4457%" y="95.50"></text></g><g><title>impl_trait_ref (6,210,168 samples, 1.43%)</title><rect x="33.5756%" y="101" width="1.4312%" height="15" fill="rgb(227,1,9)"/><text x="33.8256%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,059,418 samples, 1.17%)</title><rect x="33.8408%" y="85" width="1.1660%" height="15" fill="rgb(248,47,43)"/><text x="34.0908%" y="95.50"></text></g><g><title>trait_impls_of (1,317,384 samples, 0.30%)</title><rect x="35.0812%" y="101" width="0.3036%" height="15" fill="rgb(221,10,30)"/><text x="35.3312%" y="111.50"></text></g><g><title>implementations_of_trait (543,158 samples, 0.13%)</title><rect x="35.2596%" y="85" width="0.1252%" height="15" fill="rgb(210,229,1)"/><text x="35.5096%" y="95.50"></text></g><g><title>coherent_trait (16,586,855 samples, 3.82%)</title><rect x="31.5667%" y="133" width="3.8227%" height="15" fill="rgb(222,148,37)"/><text x="31.8167%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (15,863,238 samples, 3.66%)</title><rect x="31.7335%" y="117" width="3.6559%" height="15" fill="rgb(234,67,33)"/><text x="31.9835%" y="127.50">spec..</text></g><g><title>coherence_checking (16,799,917 samples, 3.87%)</title><rect x="31.5599%" y="149" width="3.8718%" height="15" fill="rgb(247,98,35)"/><text x="31.8099%" y="159.50">cohe..</text></g><g><title>associated_item (1,336,585 samples, 0.31%)</title><rect x="58.7361%" y="85" width="0.3080%" height="15" fill="rgb(247,138,52)"/><text x="58.9861%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,054,832 samples, 0.24%)</title><rect x="58.8011%" y="69" width="0.2431%" height="15" fill="rgb(213,79,30)"/><text x="59.0511%" y="79.50"></text></g><g><title>associated_items (2,164,453 samples, 0.50%)</title><rect x="58.5631%" y="101" width="0.4988%" height="15" fill="rgb(246,177,23)"/><text x="58.8131%" y="111.50"></text></g><g><title>dropck_outlives (1,373,226 samples, 0.32%)</title><rect x="59.1008%" y="101" width="0.3165%" height="15" fill="rgb(230,62,27)"/><text x="59.3508%" y="111.50"></text></g><g><title>eval_to_allocation_raw (449,885 samples, 0.10%)</title><rect x="59.4197%" y="85" width="0.1037%" height="15" fill="rgb(216,154,8)"/><text x="59.6697%" y="95.50"></text></g><g><title>mir_for_ctfe (495,055 samples, 0.11%)</title><rect x="59.6606%" y="53" width="0.1141%" height="15" fill="rgb(244,35,45)"/><text x="59.9106%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (436,035 samples, 0.10%)</title><rect x="59.6742%" y="37" width="0.1005%" height="15" fill="rgb(251,115,12)"/><text x="59.9242%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,714,909 samples, 0.40%)</title><rect x="59.4173%" y="101" width="0.3952%" height="15" fill="rgb(240,54,50)"/><text x="59.6673%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,254,804 samples, 0.29%)</title><rect x="59.5234%" y="85" width="0.2892%" height="15" fill="rgb(233,84,52)"/><text x="59.7734%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,247,824 samples, 0.29%)</title><rect x="59.5250%" y="69" width="0.2876%" height="15" fill="rgb(207,117,47)"/><text x="59.7750%" y="79.50"></text></g><g><title>generics_of (851,184 samples, 0.20%)</title><rect x="61.9441%" y="85" width="0.1962%" height="15" fill="rgb(249,43,39)"/><text x="62.1941%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (630,453 samples, 0.15%)</title><rect x="61.9950%" y="69" width="0.1453%" height="15" fill="rgb(209,38,44)"/><text x="62.2450%" y="79.50"></text></g><g><title>impl_trait_ref (1,223,969 samples, 0.28%)</title><rect x="62.2056%" y="85" width="0.2821%" height="15" fill="rgb(236,212,23)"/><text x="62.4556%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (794,983 samples, 0.18%)</title><rect x="62.3045%" y="69" width="0.1832%" height="15" fill="rgb(242,79,21)"/><text x="62.5545%" y="79.50"></text></g><g><title>predicates_of (1,174,352 samples, 0.27%)</title><rect x="62.5028%" y="85" width="0.2706%" height="15" fill="rgb(211,96,35)"/><text x="62.7528%" y="95.50"></text></g><g><title>predicates_defined_on (695,077 samples, 0.16%)</title><rect x="62.6132%" y="69" width="0.1602%" height="15" fill="rgb(253,215,40)"/><text x="62.8632%" y="79.50"></text></g><g><title>specializes (2,336,491 samples, 0.54%)</title><rect x="62.7734%" y="85" width="0.5385%" height="15" fill="rgb(211,81,21)"/><text x="63.0234%" y="95.50"></text></g><g><title>param_env (1,368,677 samples, 0.32%)</title><rect x="62.9965%" y="69" width="0.3154%" height="15" fill="rgb(208,190,38)"/><text x="63.2465%" y="79.50"></text></g><g><title>def_span (606,551 samples, 0.14%)</title><rect x="63.1721%" y="53" width="0.1398%" height="15" fill="rgb(235,213,38)"/><text x="63.4221%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (535,249 samples, 0.12%)</title><rect x="63.1886%" y="37" width="0.1234%" height="15" fill="rgb(237,122,38)"/><text x="63.4386%" y="47.50"></text></g><g><title>trait_impls_of (647,362 samples, 0.15%)</title><rect x="63.3186%" y="85" width="0.1492%" height="15" fill="rgb(244,218,35)"/><text x="63.5686%" y="95.50"></text></g><g><title>evaluate_obligation (15,892,925 samples, 3.66%)</title><rect x="59.8125%" y="101" width="3.6628%" height="15" fill="rgb(240,68,47)"/><text x="60.0625%" y="111.50">eval..</text></g><g><title>generics_of (650,676 samples, 0.15%)</title><rect x="63.5508%" y="101" width="0.1500%" height="15" fill="rgb(210,16,53)"/><text x="63.8008%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (512,733 samples, 0.12%)</title><rect x="63.5826%" y="85" width="0.1182%" height="15" fill="rgb(235,124,12)"/><text x="63.8326%" y="95.50"></text></g><g><title>item_attrs (561,839 samples, 0.13%)</title><rect x="63.8374%" y="101" width="0.1295%" height="15" fill="rgb(224,169,11)"/><text x="64.0874%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (542,269 samples, 0.12%)</title><rect x="63.8419%" y="85" width="0.1250%" height="15" fill="rgb(250,166,2)"/><text x="64.0919%" y="95.50"></text></g><g><title>evaluate_obligation (755,040 samples, 0.17%)</title><rect x="64.2251%" y="85" width="0.1740%" height="15" fill="rgb(242,216,29)"/><text x="64.4751%" y="95.50"></text></g><g><title>method_autoderef_steps (1,737,153 samples, 0.40%)</title><rect x="64.0082%" y="101" width="0.4004%" height="15" fill="rgb(230,116,27)"/><text x="64.2582%" y="111.50"></text></g><g><title>predicates_of (849,192 samples, 0.20%)</title><rect x="64.4844%" y="101" width="0.1957%" height="15" fill="rgb(228,99,48)"/><text x="64.7344%" y="111.50"></text></g><g><title>predicates_defined_on (574,828 samples, 0.13%)</title><rect x="64.5477%" y="85" width="0.1325%" height="15" fill="rgb(253,11,6)"/><text x="64.7977%" y="95.50"></text></g><g><title>evaluate_obligation (840,439 samples, 0.19%)</title><rect x="65.9567%" y="85" width="0.1937%" height="15" fill="rgb(247,143,39)"/><text x="66.2067%" y="95.50"></text></g><g><title>typeck (6,838,137 samples, 1.58%)</title><rect x="64.7982%" y="101" width="1.5760%" height="15" fill="rgb(236,97,10)"/><text x="65.0482%" y="111.50"></text></g><g><title>item_bodies_checking (134,621,681 samples, 31.03%)</title><rect x="35.4676%" y="149" width="31.0256%" height="15" fill="rgb(233,208,19)"/><text x="35.7176%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (134,617,581 samples, 31.02%)</title><rect x="35.4686%" y="133" width="31.0247%" height="15" fill="rgb(216,164,2)"/><text x="35.7186%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (134,183,676 samples, 30.92%)</title><rect x="35.5686%" y="117" width="30.9247%" height="15" fill="rgb(220,129,5)"/><text x="35.8186%" y="127.50">typeck</text></g><g><title>evaluate_obligation (541,637 samples, 0.12%)</title><rect x="67.9605%" y="101" width="0.1248%" height="15" fill="rgb(242,17,10)"/><text x="68.2105%" y="111.50"></text></g><g><title>item_types_checking (6,996,488 samples, 1.61%)</title><rect x="66.4932%" y="149" width="1.6124%" height="15" fill="rgb(242,107,0)"/><text x="66.7432%" y="159.50"></text></g><g><title>check_mod_item_types (6,981,578 samples, 1.61%)</title><rect x="66.4967%" y="133" width="1.6090%" height="15" fill="rgb(251,28,31)"/><text x="66.7467%" y="143.50"></text></g><g><title>typeck (1,140,843 samples, 0.26%)</title><rect x="67.8427%" y="117" width="0.2629%" height="15" fill="rgb(233,223,10)"/><text x="68.0927%" y="127.50"></text></g><g><title>fn_sig (1,226,892 samples, 0.28%)</title><rect x="68.3897%" y="117" width="0.2828%" height="15" fill="rgb(215,21,27)"/><text x="68.6397%" y="127.50"></text></g><g><title>lint_levels (618,817 samples, 0.14%)</title><rect x="69.1931%" y="69" width="0.1426%" height="15" fill="rgb(232,23,21)"/><text x="69.4431%" y="79.50"></text></g><g><title>is_late_bound_map (2,130,204 samples, 0.49%)</title><rect x="68.8458%" y="101" width="0.4909%" height="15" fill="rgb(244,5,23)"/><text x="69.0958%" y="111.50"></text></g><g><title>resolve_lifetimes (2,020,554 samples, 0.47%)</title><rect x="68.8711%" y="85" width="0.4657%" height="15" fill="rgb(226,81,46)"/><text x="69.1211%" y="95.50"></text></g><g><title>named_region_map (483,498 samples, 0.11%)</title><rect x="69.3367%" y="101" width="0.1114%" height="15" fill="rgb(247,70,30)"/><text x="69.5867%" y="111.50"></text></g><g><title>generics_of (3,415,820 samples, 0.79%)</title><rect x="68.6724%" y="117" width="0.7872%" height="15" fill="rgb(212,68,19)"/><text x="68.9224%" y="127.50"></text></g><g><title>explicit_predicates_of (896,622 samples, 0.21%)</title><rect x="69.6718%" y="85" width="0.2066%" height="15" fill="rgb(240,187,13)"/><text x="69.9218%" y="95.50"></text></g><g><title>predicates_of (2,142,939 samples, 0.49%)</title><rect x="69.5221%" y="117" width="0.4939%" height="15" fill="rgb(223,113,26)"/><text x="69.7721%" y="127.50"></text></g><g><title>predicates_defined_on (1,899,177 samples, 0.44%)</title><rect x="69.5783%" y="101" width="0.4377%" height="15" fill="rgb(206,192,2)"/><text x="69.8283%" y="111.50"></text></g><g><title>inferred_outlives_of (596,605 samples, 0.14%)</title><rect x="69.8784%" y="85" width="0.1375%" height="15" fill="rgb(241,108,4)"/><text x="70.1284%" y="95.50"></text></g><g><title>inferred_outlives_crate (508,845 samples, 0.12%)</title><rect x="69.8987%" y="69" width="0.1173%" height="15" fill="rgb(247,173,49)"/><text x="70.1487%" y="79.50"></text></g><g><title>type_collecting (8,820,619 samples, 2.03%)</title><rect x="68.1074%" y="149" width="2.0328%" height="15" fill="rgb(224,114,35)"/><text x="68.3574%" y="159.50">t..</text></g><g><title>collect_mod_item_types (8,794,528 samples, 2.03%)</title><rect x="68.1134%" y="133" width="2.0268%" height="15" fill="rgb(245,159,27)"/><text x="68.3634%" y="143.50">c..</text></g><g><title>type_of (519,427 samples, 0.12%)</title><rect x="70.0206%" y="117" width="0.1197%" height="15" fill="rgb(245,172,44)"/><text x="70.2706%" y="127.50"></text></g><g><title>evaluate_obligation (1,538,146 samples, 0.35%)</title><rect x="72.3888%" y="117" width="0.3545%" height="15" fill="rgb(236,23,11)"/><text x="72.6388%" y="127.50"></text></g><g><title>implied_outlives_bounds (944,950 samples, 0.22%)</title><rect x="72.7587%" y="117" width="0.2178%" height="15" fill="rgb(205,117,38)"/><text x="73.0087%" y="127.50"></text></g><g><title>object_safety_violations (435,145 samples, 0.10%)</title><rect x="72.9765%" y="117" width="0.1003%" height="15" fill="rgb(237,72,25)"/><text x="73.2265%" y="127.50"></text></g><g><title>param_env (1,395,002 samples, 0.32%)</title><rect x="73.0768%" y="117" width="0.3215%" height="15" fill="rgb(244,70,9)"/><text x="73.3268%" y="127.50"></text></g><g><title>check_impl_item_well_formed (14,838,508 samples, 3.42%)</title><rect x="70.3687%" y="133" width="3.4198%" height="15" fill="rgb(217,125,39)"/><text x="70.6187%" y="143.50">che..</text></g><g><title>region_scope_tree (1,650,775 samples, 0.38%)</title><rect x="73.4080%" y="117" width="0.3804%" height="15" fill="rgb(235,36,10)"/><text x="73.6580%" y="127.50"></text></g><g><title>evaluate_obligation (1,130,818 samples, 0.26%)</title><rect x="75.3074%" y="117" width="0.2606%" height="15" fill="rgb(251,123,47)"/><text x="75.5574%" y="127.50"></text></g><g><title>param_env (1,188,052 samples, 0.27%)</title><rect x="75.6896%" y="117" width="0.2738%" height="15" fill="rgb(221,13,13)"/><text x="75.9396%" y="127.50"></text></g><g><title>check_item_well_formed (10,097,653 samples, 2.33%)</title><rect x="73.7884%" y="133" width="2.3272%" height="15" fill="rgb(238,131,9)"/><text x="74.0384%" y="143.50">c..</text></g><g><title>analysis (329,623,645 samples, 75.97%)</title><rect x="0.2384%" y="181" width="75.9667%" height="15" fill="rgb(211,50,8)"/><text x="0.4884%" y="191.50">analysis</text></g><g><title>type_check_crate (193,999,603 samples, 44.71%)</title><rect x="31.4950%" y="165" width="44.7101%" height="15" fill="rgb(245,182,24)"/><text x="31.7450%" y="175.50">type_check_crate</text></g><g><title>wf_checking (26,290,143 samples, 6.06%)</title><rect x="70.1462%" y="149" width="6.0590%" height="15" fill="rgb(242,14,37)"/><text x="70.3962%" y="159.50">wf_check..</text></g><g><title>AST_validation (540,096 samples, 0.12%)</title><rect x="76.3465%" y="165" width="0.1245%" height="15" fill="rgb(246,228,12)"/><text x="76.5965%" y="175.50"></text></g><g><title>metadata_register_crate (7,261,620 samples, 1.67%)</title><rect x="89.8198%" y="133" width="1.6735%" height="15" fill="rgb(213,55,15)"/><text x="90.0698%" y="143.50"></text></g><g><title>metadata_register_crate (5,078,967 samples, 1.17%)</title><rect x="90.3228%" y="117" width="1.1705%" height="15" fill="rgb(209,9,3)"/><text x="90.5728%" y="127.50"></text></g><g><title>macro_expand_crate (66,138,847 samples, 15.24%)</title><rect x="76.5505%" y="165" width="15.2427%" height="15" fill="rgb(230,59,30)"/><text x="76.8005%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (66,115,597 samples, 15.24%)</title><rect x="76.5559%" y="149" width="15.2373%" height="15" fill="rgb(209,121,21)"/><text x="76.8059%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,301,095 samples, 0.30%)</title><rect x="91.4934%" y="133" width="0.2999%" height="15" fill="rgb(220,109,13)"/><text x="91.7434%" y="143.50"></text></g><g><title>late_resolve_crate (6,205,870 samples, 1.43%)</title><rect x="91.9241%" y="149" width="1.4302%" height="15" fill="rgb(232,18,1)"/><text x="92.1741%" y="159.50"></text></g><g><title>configure_and_expand (74,516,881 samples, 17.17%)</title><rect x="76.2971%" y="181" width="17.1735%" height="15" fill="rgb(215,41,42)"/><text x="76.5471%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (7,207,591 samples, 1.66%)</title><rect x="91.8095%" y="165" width="1.6611%" height="15" fill="rgb(224,123,36)"/><text x="92.0595%" y="175.50"></text></g><g><title>drop_ast (745,338 samples, 0.17%)</title><rect x="93.4706%" y="181" width="0.1718%" height="15" fill="rgb(240,125,3)"/><text x="93.7206%" y="191.50"></text></g><g><title>early_lint_checks (1,504,037 samples, 0.35%)</title><rect x="93.6470%" y="181" width="0.3466%" height="15" fill="rgb(205,98,50)"/><text x="93.8970%" y="191.50"></text></g><g><title>free_global_ctxt (5,691,773 samples, 1.31%)</title><rect x="93.9936%" y="181" width="1.3118%" height="15" fill="rgb(205,185,37)"/><text x="94.2436%" y="191.50"></text></g><g><title>generate_crate_metadata (4,721,592 samples, 1.09%)</title><rect x="95.3054%" y="181" width="1.0882%" height="15" fill="rgb(238,207,15)"/><text x="95.5554%" y="191.50"></text></g><g><title>hir_lowering (12,545,750 samples, 2.89%)</title><rect x="96.3935%" y="181" width="2.8914%" height="15" fill="rgb(213,199,42)"/><text x="96.6435%" y="191.50">hi..</text></g><g><title>parse_crate (518,836 samples, 0.12%)</title><rect x="99.3016%" y="181" width="0.1196%" height="15" fill="rgb(235,201,11)"/><text x="99.5516%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,672,239 samples, 0.39%)</title><rect x="99.4743%" y="181" width="0.3854%" height="15" fill="rgb(207,46,11)"/><text x="99.7243%" y="191.50"></text></g><g><title>all (433,905,198 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (433,905,198 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (502,485 samples, 0.12%)</title><rect x="99.8842%" y="181" width="0.1158%" height="15" fill="rgb(247,202,23)"/><text x="100.1342%" y="191.50"></text></g></svg></svg>