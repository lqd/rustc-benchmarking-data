<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>hir_module_items (82,681 samples, 0.38%)</title><rect x="3.5395%" y="149" width="0.3817%" height="15" fill="rgb(227,0,7)"/><text x="3.7895%" y="159.50"></text></g><g><title>hir_owner (22,650 samples, 0.10%)</title><rect x="3.8167%" y="133" width="0.1046%" height="15" fill="rgb(217,0,24)"/><text x="4.0667%" y="143.50"></text></g><g><title>check_mod_attrs (61,630 samples, 0.28%)</title><rect x="4.0399%" y="133" width="0.2845%" height="15" fill="rgb(221,193,54)"/><text x="4.2899%" y="143.50"></text></g><g><title>lookup_deprecation_entry (22,550 samples, 0.10%)</title><rect x="4.6352%" y="117" width="0.1041%" height="15" fill="rgb(248,212,6)"/><text x="4.8852%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (85,871 samples, 0.40%)</title><rect x="4.4207%" y="133" width="0.3964%" height="15" fill="rgb(208,68,35)"/><text x="4.6707%" y="143.50"></text></g><g><title>looking_for_derive_registrar (38,770 samples, 0.18%)</title><rect x="4.8260%" y="133" width="0.1790%" height="15" fill="rgb(232,128,0)"/><text x="5.0760%" y="143.50"></text></g><g><title>misc_checking_1 (237,743 samples, 1.10%)</title><rect x="3.9241%" y="149" width="1.0975%" height="15" fill="rgb(207,160,47)"/><text x="4.1741%" y="159.50"></text></g><g><title>get_lang_items (60,761 samples, 0.28%)</title><rect x="5.7193%" y="101" width="0.2805%" height="15" fill="rgb(228,23,34)"/><text x="5.9693%" y="111.50"></text></g><g><title>defined_lang_items (22,130 samples, 0.10%)</title><rect x="5.8976%" y="85" width="0.1022%" height="15" fill="rgb(218,30,26)"/><text x="6.1476%" y="95.50"></text></g><g><title>codegen_fn_attrs (159,252 samples, 0.74%)</title><rect x="5.5222%" y="117" width="0.7352%" height="15" fill="rgb(220,122,19)"/><text x="5.7722%" y="127.50"></text></g><g><title>supported_target_features (40,250 samples, 0.19%)</title><rect x="6.0716%" y="101" width="0.1858%" height="15" fill="rgb(250,228,42)"/><text x="6.3216%" y="111.50"></text></g><g><title>death_checking (261,753 samples, 1.21%)</title><rect x="5.2033%" y="133" width="1.2084%" height="15" fill="rgb(240,193,28)"/><text x="5.4533%" y="143.50"></text></g><g><title>lint_levels (27,150 samples, 0.13%)</title><rect x="6.2864%" y="117" width="0.1253%" height="15" fill="rgb(216,20,37)"/><text x="6.5364%" y="127.50"></text></g><g><title>explicit_predicates_of (59,350 samples, 0.27%)</title><rect x="8.9765%" y="53" width="0.2740%" height="15" fill="rgb(206,188,39)"/><text x="9.2265%" y="63.50"></text></g><g><title>generics_of (33,220 samples, 0.15%)</title><rect x="9.0971%" y="37" width="0.1534%" height="15" fill="rgb(217,207,13)"/><text x="9.3471%" y="47.50"></text></g><g><title>crate_lints (611,617 samples, 2.82%)</title><rect x="6.4435%" y="117" width="2.8235%" height="15" fill="rgb(231,73,38)"/><text x="6.6935%" y="127.50">cr..</text></g><g><title>param_env (369,004 samples, 1.70%)</title><rect x="7.5636%" y="101" width="1.7035%" height="15" fill="rgb(225,20,46)"/><text x="7.8136%" y="111.50"></text></g><g><title>predicates_of (104,822 samples, 0.48%)</title><rect x="8.7832%" y="85" width="0.4839%" height="15" fill="rgb(210,31,41)"/><text x="9.0332%" y="95.50"></text></g><g><title>predicates_defined_on (90,101 samples, 0.42%)</title><rect x="8.8511%" y="69" width="0.4160%" height="15" fill="rgb(221,200,47)"/><text x="9.1011%" y="79.50"></text></g><g><title>lint_checking (637,737 samples, 2.94%)</title><rect x="6.4117%" y="133" width="2.9441%" height="15" fill="rgb(226,26,5)"/><text x="6.6617%" y="143.50">li..</text></g><g><title>privacy_access_levels (28,480 samples, 0.13%)</title><rect x="9.3559%" y="133" width="0.1315%" height="15" fill="rgb(249,33,26)"/><text x="9.6059%" y="143.50"></text></g><g><title>misc_checking_3 (990,661 samples, 4.57%)</title><rect x="5.0800%" y="149" width="4.5734%" height="15" fill="rgb(235,183,28)"/><text x="5.3300%" y="159.50">misc_..</text></g><g><title>unused_lib_feature_checking (29,721 samples, 0.14%)</title><rect x="9.5162%" y="133" width="0.1372%" height="15" fill="rgb(221,5,38)"/><text x="9.7662%" y="143.50"></text></g><g><title>coherence_checking (40,651 samples, 0.19%)</title><rect x="9.8434%" y="133" width="0.1877%" height="15" fill="rgb(247,18,42)"/><text x="10.0934%" y="143.50"></text></g><g><title>type_collecting (47,420 samples, 0.22%)</title><rect x="10.1407%" y="133" width="0.2189%" height="15" fill="rgb(241,131,45)"/><text x="10.3907%" y="143.50"></text></g><g><title>collect_mod_item_types (21,760 samples, 0.10%)</title><rect x="10.2592%" y="117" width="0.1005%" height="15" fill="rgb(249,31,29)"/><text x="10.5092%" y="127.50"></text></g><g><title>analysis (1,613,068 samples, 7.45%)</title><rect x="3.0692%" y="165" width="7.4468%" height="15" fill="rgb(225,111,53)"/><text x="3.3192%" y="175.50">analysis</text></g><g><title>type_check_crate (186,842 samples, 0.86%)</title><rect x="9.6535%" y="149" width="0.8626%" height="15" fill="rgb(238,160,17)"/><text x="9.9035%" y="159.50"></text></g><g><title>wf_checking (33,870 samples, 0.16%)</title><rect x="10.3597%" y="133" width="0.1564%" height="15" fill="rgb(214,148,48)"/><text x="10.6097%" y="143.50"></text></g><g><title>native_libraries (48,270 samples, 0.22%)</title><rect x="12.9099%" y="149" width="0.2228%" height="15" fill="rgb(232,36,49)"/><text x="13.1599%" y="159.50"></text></g><g><title>metadata_decode_entry_native_libraries (34,250 samples, 0.16%)</title><rect x="12.9746%" y="133" width="0.1581%" height="15" fill="rgb(209,103,24)"/><text x="13.2246%" y="143.50"></text></g><g><title>codegen_crate (597,427 samples, 2.76%)</title><rect x="10.5550%" y="165" width="2.7580%" height="15" fill="rgb(229,88,8)"/><text x="10.8050%" y="175.50">co..</text></g><g><title>used_crate_source (23,090 samples, 0.11%)</title><rect x="13.2065%" y="149" width="0.1066%" height="15" fill="rgb(213,181,19)"/><text x="13.4565%" y="159.50"></text></g><g><title>AST_validation (92,841 samples, 0.43%)</title><rect x="14.1265%" y="149" width="0.4286%" height="15" fill="rgb(254,191,54)"/><text x="14.3765%" y="159.50"></text></g><g><title>complete_gated_feature_checking (31,181 samples, 0.14%)</title><rect x="14.5551%" y="149" width="0.1439%" height="15" fill="rgb(241,83,37)"/><text x="14.8051%" y="159.50"></text></g><g><title>crate_injection (75,761 samples, 0.35%)</title><rect x="14.6990%" y="149" width="0.3498%" height="15" fill="rgb(233,36,39)"/><text x="14.9490%" y="159.50"></text></g><g><title>metadata_load_macro (115,672 samples, 0.53%)</title><rect x="63.3350%" y="117" width="0.5340%" height="15" fill="rgb(226,3,54)"/><text x="63.5850%" y="127.50"></text></g><g><title>macro_expand_crate (13,289,699 samples, 61.35%)</title><rect x="15.0488%" y="149" width="61.3523%" height="15" fill="rgb(245,192,40)"/><text x="15.2988%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (13,276,609 samples, 61.29%)</title><rect x="15.1092%" y="133" width="61.2918%" height="15" fill="rgb(238,167,29)"/><text x="15.3592%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (2,714,609 samples, 12.53%)</title><rect x="63.8690%" y="117" width="12.5321%" height="15" fill="rgb(232,182,51)"/><text x="64.1190%" y="127.50">metadata_register_c..</text></g><g><title>metadata_register_crate (870,899 samples, 4.02%)</title><rect x="72.3805%" y="101" width="4.0205%" height="15" fill="rgb(231,60,39)"/><text x="72.6305%" y="111.50">meta..</text></g><g><title>metadata_register_crate (67,081 samples, 0.31%)</title><rect x="76.0913%" y="85" width="0.3097%" height="15" fill="rgb(208,69,12)"/><text x="76.3413%" y="95.50"></text></g><g><title>pre_AST_expansion_lint_checks (76,931 samples, 0.36%)</title><rect x="76.4496%" y="149" width="0.3552%" height="15" fill="rgb(235,93,37)"/><text x="76.6996%" y="159.50"></text></g><g><title>finalize_imports (87,991 samples, 0.41%)</title><rect x="76.8349%" y="133" width="0.4062%" height="15" fill="rgb(213,116,39)"/><text x="77.0849%" y="143.50"></text></g><g><title>finalize_macro_resolutions (22,770 samples, 0.11%)</title><rect x="77.2411%" y="133" width="0.1051%" height="15" fill="rgb(222,207,29)"/><text x="77.4911%" y="143.50"></text></g><g><title>late_resolve_crate (45,351 samples, 0.21%)</title><rect x="77.3462%" y="133" width="0.2094%" height="15" fill="rgb(206,96,30)"/><text x="77.5962%" y="143.50"></text></g><g><title>configure_and_expand (13,954,566 samples, 64.42%)</title><rect x="13.3131%" y="165" width="64.4216%" height="15" fill="rgb(218,138,4)"/><text x="13.5631%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (201,432 samples, 0.93%)</title><rect x="76.8048%" y="149" width="0.9299%" height="15" fill="rgb(250,191,14)"/><text x="77.0548%" y="159.50"></text></g><g><title>drop_compiler (29,990 samples, 0.14%)</title><rect x="77.8286%" y="165" width="0.1384%" height="15" fill="rgb(239,60,40)"/><text x="78.0786%" y="175.50"></text></g><g><title>early_lint_checks (66,950 samples, 0.31%)</title><rect x="77.9671%" y="165" width="0.3091%" height="15" fill="rgb(206,27,48)"/><text x="78.2171%" y="175.50"></text></g><g><title>free_global_ctxt (2,056,533 samples, 9.49%)</title><rect x="78.2761%" y="165" width="9.4940%" height="15" fill="rgb(225,35,8)"/><text x="78.5261%" y="175.50">free_global_ct..</text></g><g><title>crate_hash (133,901 samples, 0.62%)</title><rect x="89.2120%" y="149" width="0.6182%" height="15" fill="rgb(250,213,24)"/><text x="89.4620%" y="159.50"></text></g><g><title>mir_keys (37,350 samples, 0.17%)</title><rect x="90.2034%" y="149" width="0.1724%" height="15" fill="rgb(247,123,22)"/><text x="90.4534%" y="159.50"></text></g><g><title>generate_crate_metadata (575,936 samples, 2.66%)</title><rect x="87.7702%" y="165" width="2.6588%" height="15" fill="rgb(231,138,38)"/><text x="88.0202%" y="175.50">ge..</text></g><g><title>hir_lowering (280,323 samples, 1.29%)</title><rect x="90.4290%" y="165" width="1.2941%" height="15" fill="rgb(231,145,46)"/><text x="90.6790%" y="175.50"></text></g><g><title>link_crate (25,311 samples, 0.12%)</title><rect x="91.8735%" y="149" width="0.1168%" height="15" fill="rgb(251,118,11)"/><text x="92.1235%" y="159.50"></text></g><g><title>link (66,081 samples, 0.31%)</title><rect x="91.7231%" y="165" width="0.3051%" height="15" fill="rgb(217,147,25)"/><text x="91.9731%" y="175.50"></text></g><g><title>parse_crate (383,625 samples, 1.77%)</title><rect x="92.0282%" y="165" width="1.7710%" height="15" fill="rgb(247,81,37)"/><text x="92.2782%" y="175.50">p..</text></g><g><title>prepare_outputs (257,502 samples, 1.19%)</title><rect x="93.8377%" y="165" width="1.1888%" height="15" fill="rgb(209,12,38)"/><text x="94.0877%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (577,717 samples, 2.67%)</title><rect x="95.0265%" y="165" width="2.6670%" height="15" fill="rgb(227,1,9)"/><text x="95.2765%" y="175.50">se..</text></g><g><title>setup_global_ctxt (124,071 samples, 0.57%)</title><rect x="97.7663%" y="165" width="0.5728%" height="15" fill="rgb(248,47,43)"/><text x="98.0163%" y="175.50"></text></g><g><title>all (21,661,302 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(221,10,30)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (21,661,302 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(210,229,1)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (359,784 samples, 1.66%)</title><rect x="98.3390%" y="165" width="1.6610%" height="15" fill="rgb(222,148,37)"/><text x="98.5890%" y="175.50"></text></g></svg></svg>