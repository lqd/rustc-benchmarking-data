<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (1,602,734 samples, 0.22%)</title><rect x="14.9096%" y="149" width="0.2192%" height="15" fill="rgb(227,0,7)"/><text x="15.1596%" y="159.50"></text></g><g><title>needs_drop_raw (1,044,053 samples, 0.14%)</title><rect x="21.0773%" y="85" width="0.1428%" height="15" fill="rgb(217,0,24)"/><text x="21.3273%" y="95.50"></text></g><g><title>is_copy_raw (853,740 samples, 0.12%)</title><rect x="21.1033%" y="69" width="0.1167%" height="15" fill="rgb(221,193,54)"/><text x="21.3533%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (874,053 samples, 0.12%)</title><rect x="21.3351%" y="69" width="0.1195%" height="15" fill="rgb(248,212,6)"/><text x="21.5851%" y="79.50"></text></g><g><title>resolve_instance (2,211,174 samples, 0.30%)</title><rect x="21.2245%" y="85" width="0.3024%" height="15" fill="rgb(208,68,35)"/><text x="21.4745%" y="95.50"></text></g><g><title>thir_body (8,764,802 samples, 1.20%)</title><rect x="21.5648%" y="85" width="1.1985%" height="15" fill="rgb(232,128,0)"/><text x="21.8148%" y="95.50"></text></g><g><title>mir_const (47,372,390 samples, 6.48%)</title><rect x="16.3138%" y="133" width="6.4776%" height="15" fill="rgb(207,160,47)"/><text x="16.5638%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (40,264,324 samples, 5.51%)</title><rect x="17.2858%" y="117" width="5.5056%" height="15" fill="rgb(228,23,34)"/><text x="17.5358%" y="127.50">unsafet..</text></g><g><title>mir_built (36,775,179 samples, 5.03%)</title><rect x="17.7628%" y="101" width="5.0285%" height="15" fill="rgb(218,30,26)"/><text x="18.0128%" y="111.50">mir_bu..</text></g><g><title>thir_body (2,187,581 samples, 0.30%)</title><rect x="24.8721%" y="69" width="0.2991%" height="15" fill="rgb(220,122,19)"/><text x="25.1221%" y="79.50"></text></g><g><title>mir_const (13,153,770 samples, 1.80%)</title><rect x="23.3861%" y="117" width="1.7986%" height="15" fill="rgb(250,228,42)"/><text x="23.6361%" y="127.50">m..</text></g><g><title>unsafety_check_result (10,477,796 samples, 1.43%)</title><rect x="23.7520%" y="101" width="1.4327%" height="15" fill="rgb(240,193,28)"/><text x="24.0020%" y="111.50"></text></g><g><title>mir_built (9,348,165 samples, 1.28%)</title><rect x="23.9064%" y="85" width="1.2782%" height="15" fill="rgb(216,20,37)"/><text x="24.1564%" y="95.50"></text></g><g><title>mir_promoted (73,813,193 samples, 10.09%)</title><rect x="15.1516%" y="149" width="10.0930%" height="15" fill="rgb(206,188,39)"/><text x="15.4016%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (17,941,394 samples, 2.45%)</title><rect x="22.7914%" y="133" width="2.4533%" height="15" fill="rgb(217,207,13)"/><text x="23.0414%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (953,204 samples, 0.13%)</title><rect x="25.2499%" y="149" width="0.1303%" height="15" fill="rgb(231,73,38)"/><text x="25.4999%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,015,952 samples, 0.14%)</title><rect x="25.3802%" y="149" width="0.1389%" height="15" fill="rgb(225,20,46)"/><text x="25.6302%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,394,135 samples, 0.46%)</title><rect x="25.5504%" y="149" width="0.4641%" height="15" fill="rgb(210,31,41)"/><text x="25.8004%" y="159.50"></text></g><g><title>MIR_borrow_checking (185,206,526 samples, 25.32%)</title><rect x="0.6904%" y="181" width="25.3246%" height="15" fill="rgb(221,200,47)"/><text x="0.9404%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (183,174,374 samples, 25.05%)</title><rect x="0.9683%" y="165" width="25.0468%" height="15" fill="rgb(226,26,5)"/><text x="1.2183%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (7,647,104 samples, 1.05%)</title><rect x="26.0151%" y="181" width="1.0456%" height="15" fill="rgb(249,33,26)"/><text x="26.2651%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,534,064 samples, 0.89%)</title><rect x="26.1673%" y="165" width="0.8935%" height="15" fill="rgb(235,183,28)"/><text x="26.4173%" y="175.50"></text></g><g><title>hir_module_items (2,054,143 samples, 0.28%)</title><rect x="27.0607%" y="181" width="0.2809%" height="15" fill="rgb(221,5,38)"/><text x="27.3107%" y="191.50"></text></g><g><title>get_lang_items (809,559 samples, 0.11%)</title><rect x="27.8352%" y="133" width="0.1107%" height="15" fill="rgb(247,18,42)"/><text x="28.0852%" y="143.50"></text></g><g><title>should_inherit_track_caller (1,364,613 samples, 0.19%)</title><rect x="27.9459%" y="133" width="0.1866%" height="15" fill="rgb(241,131,45)"/><text x="28.1959%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,735,668 samples, 0.37%)</title><rect x="27.7614%" y="149" width="0.3741%" height="15" fill="rgb(249,31,29)"/><text x="28.0114%" y="159.50"></text></g><g><title>check_mod_attrs (5,783,594 samples, 0.79%)</title><rect x="27.3446%" y="165" width="0.7908%" height="15" fill="rgb(225,111,53)"/><text x="27.5946%" y="175.50"></text></g><g><title>check_mod_const_bodies (1,542,217 samples, 0.21%)</title><rect x="28.1355%" y="165" width="0.2109%" height="15" fill="rgb(238,160,17)"/><text x="28.3855%" y="175.50"></text></g><g><title>lookup_deprecation_entry (1,050,511 samples, 0.14%)</title><rect x="28.6843%" y="149" width="0.1436%" height="15" fill="rgb(214,148,48)"/><text x="28.9343%" y="159.50"></text></g><g><title>stability_index (966,110 samples, 0.13%)</title><rect x="28.6959%" y="133" width="0.1321%" height="15" fill="rgb(232,36,49)"/><text x="28.9459%" y="143.50"></text></g><g><title>param_env (778,699 samples, 0.11%)</title><rect x="28.8731%" y="149" width="0.1065%" height="15" fill="rgb(209,103,24)"/><text x="29.1231%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (4,017,634 samples, 0.55%)</title><rect x="28.4446%" y="165" width="0.5494%" height="15" fill="rgb(229,88,8)"/><text x="28.6946%" y="175.50"></text></g><g><title>misc_checking_1 (12,422,588 samples, 1.70%)</title><rect x="27.3417%" y="181" width="1.6986%" height="15" fill="rgb(213,181,19)"/><text x="27.5917%" y="191.50"></text></g><g><title>check_mod_intrinsics (941,640 samples, 0.13%)</title><rect x="29.0415%" y="149" width="0.1288%" height="15" fill="rgb(254,191,54)"/><text x="29.2915%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (3,757,251 samples, 0.51%)</title><rect x="29.0406%" y="165" width="0.5138%" height="15" fill="rgb(241,83,37)"/><text x="29.2906%" y="175.50"></text></g><g><title>check_mod_liveness (2,809,311 samples, 0.38%)</title><rect x="29.1703%" y="149" width="0.3841%" height="15" fill="rgb(233,36,39)"/><text x="29.4203%" y="159.50"></text></g><g><title>misc_checking_2 (9,984,670 samples, 1.37%)</title><rect x="29.0403%" y="181" width="1.3653%" height="15" fill="rgb(226,3,54)"/><text x="29.2903%" y="191.50"></text></g><g><title>match_checking (6,224,999 samples, 0.85%)</title><rect x="29.5544%" y="165" width="0.8512%" height="15" fill="rgb(245,192,40)"/><text x="29.8044%" y="175.50"></text></g><g><title>check_match (5,683,744 samples, 0.78%)</title><rect x="29.6284%" y="149" width="0.7772%" height="15" fill="rgb(238,167,29)"/><text x="29.8784%" y="159.50"></text></g><g><title>check_private_in_public (2,257,845 samples, 0.31%)</title><rect x="30.4079%" y="165" width="0.3087%" height="15" fill="rgb(232,182,51)"/><text x="30.6579%" y="175.50"></text></g><g><title>death_checking (4,301,707 samples, 0.59%)</title><rect x="30.7167%" y="165" width="0.5882%" height="15" fill="rgb(231,60,39)"/><text x="30.9667%" y="175.50"></text></g><g><title>crate_lints (5,064,716 samples, 0.69%)</title><rect x="31.3053%" y="149" width="0.6925%" height="15" fill="rgb(208,69,12)"/><text x="31.5553%" y="159.50"></text></g><g><title>lint_checking (9,836,669 samples, 1.35%)</title><rect x="31.3049%" y="165" width="1.3450%" height="15" fill="rgb(235,93,37)"/><text x="31.5549%" y="175.50"></text></g><g><title>module_lints (4,768,593 samples, 0.65%)</title><rect x="31.9979%" y="149" width="0.6520%" height="15" fill="rgb(213,116,39)"/><text x="32.2479%" y="159.50"></text></g><g><title>lint_mod (4,763,693 samples, 0.65%)</title><rect x="31.9985%" y="133" width="0.6514%" height="15" fill="rgb(222,207,29)"/><text x="32.2485%" y="143.50"></text></g><g><title>privacy_access_levels (3,729,852 samples, 0.51%)</title><rect x="32.6499%" y="165" width="0.5100%" height="15" fill="rgb(206,96,30)"/><text x="32.8999%" y="175.50"></text></g><g><title>privacy_checking_modules (7,969,948 samples, 1.09%)</title><rect x="33.1599%" y="165" width="1.0898%" height="15" fill="rgb(218,138,4)"/><text x="33.4099%" y="175.50"></text></g><g><title>check_mod_privacy (7,965,628 samples, 1.09%)</title><rect x="33.1605%" y="149" width="1.0892%" height="15" fill="rgb(250,191,14)"/><text x="33.4105%" y="159.50"></text></g><g><title>misc_checking_3 (28,276,793 samples, 3.87%)</title><rect x="30.4056%" y="181" width="3.8665%" height="15" fill="rgb(239,60,40)"/><text x="30.6556%" y="191.50">misc..</text></g><g><title>impl_parent (1,487,289 samples, 0.20%)</title><rect x="34.8757%" y="117" width="0.2034%" height="15" fill="rgb(206,27,48)"/><text x="35.1257%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (822,324 samples, 0.11%)</title><rect x="34.9666%" y="101" width="0.1124%" height="15" fill="rgb(225,35,8)"/><text x="35.2166%" y="111.50"></text></g><g><title>impl_trait_ref (2,860,689 samples, 0.39%)</title><rect x="35.0790%" y="117" width="0.3912%" height="15" fill="rgb(250,213,24)"/><text x="35.3290%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,970,261 samples, 0.27%)</title><rect x="35.2008%" y="101" width="0.2694%" height="15" fill="rgb(247,123,22)"/><text x="35.4508%" y="111.50"></text></g><g><title>coherent_trait (8,541,784 samples, 1.17%)</title><rect x="34.3827%" y="149" width="1.1680%" height="15" fill="rgb(231,138,38)"/><text x="34.6327%" y="159.50"></text></g><g><title>specialization_graph_of (7,731,586 samples, 1.06%)</title><rect x="34.4935%" y="133" width="1.0572%" height="15" fill="rgb(231,145,46)"/><text x="34.7435%" y="143.50"></text></g><g><title>coherence_checking (9,204,001 samples, 1.26%)</title><rect x="34.3770%" y="165" width="1.2585%" height="15" fill="rgb(251,118,11)"/><text x="34.6270%" y="175.50"></text></g><g><title>evaluate_obligation (4,523,677 samples, 0.62%)</title><rect x="58.9566%" y="117" width="0.6186%" height="15" fill="rgb(217,147,25)"/><text x="59.2066%" y="127.50"></text></g><g><title>item_bodies_checking (177,181,277 samples, 24.23%)</title><rect x="35.7067%" y="165" width="24.2273%" height="15" fill="rgb(247,81,37)"/><text x="35.9567%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (177,177,657 samples, 24.23%)</title><rect x="35.7072%" y="149" width="24.2268%" height="15" fill="rgb(209,12,38)"/><text x="35.9572%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (175,802,866 samples, 24.04%)</title><rect x="35.8952%" y="133" width="24.0388%" height="15" fill="rgb(227,1,9)"/><text x="36.1452%" y="143.50">typeck</text></g><g><title>impl_item_implementor_ids (761,042 samples, 0.10%)</title><rect x="61.6099%" y="133" width="0.1041%" height="15" fill="rgb(248,47,43)"/><text x="61.8599%" y="143.50"></text></g><g><title>item_types_checking (13,480,658 samples, 1.84%)</title><rect x="59.9340%" y="165" width="1.8433%" height="15" fill="rgb(221,10,30)"/><text x="60.1840%" y="175.50">i..</text></g><g><title>check_mod_item_types (13,476,618 samples, 1.84%)</title><rect x="59.9346%" y="149" width="1.8428%" height="15" fill="rgb(210,229,1)"/><text x="60.1846%" y="159.50">c..</text></g><g><title>mir_const_qualif (3,296,065 samples, 0.45%)</title><rect x="62.7734%" y="85" width="0.4507%" height="15" fill="rgb(222,148,37)"/><text x="63.0234%" y="95.50"></text></g><g><title>mir_const (2,768,253 samples, 0.38%)</title><rect x="62.8456%" y="69" width="0.3785%" height="15" fill="rgb(234,67,33)"/><text x="63.0956%" y="79.50"></text></g><g><title>unsafety_check_result (1,937,881 samples, 0.26%)</title><rect x="62.9591%" y="53" width="0.2650%" height="15" fill="rgb(247,98,35)"/><text x="63.2091%" y="63.50"></text></g><g><title>mir_built (1,674,227 samples, 0.23%)</title><rect x="62.9951%" y="37" width="0.2289%" height="15" fill="rgb(247,138,52)"/><text x="63.2451%" y="47.50"></text></g><g><title>mir_borrowck (6,923,667 samples, 0.95%)</title><rect x="63.7425%" y="53" width="0.9467%" height="15" fill="rgb(213,79,30)"/><text x="63.9925%" y="63.50"></text></g><g><title>mir_for_ctfe (10,764,915 samples, 1.47%)</title><rect x="63.2241%" y="85" width="1.4720%" height="15" fill="rgb(246,177,23)"/><text x="63.4741%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,820,409 samples, 1.34%)</title><rect x="63.3532%" y="69" width="1.3428%" height="15" fill="rgb(230,62,27)"/><text x="63.6032%" y="79.50"></text></g><g><title>eval_to_const_value_raw (21,191,118 samples, 2.90%)</title><rect x="62.3678%" y="133" width="2.8976%" height="15" fill="rgb(216,154,8)"/><text x="62.6178%" y="143.50">ev..</text></g><g><title>eval_to_const_value_raw (21,042,566 samples, 2.88%)</title><rect x="62.3881%" y="117" width="2.8773%" height="15" fill="rgb(244,35,45)"/><text x="62.6381%" y="127.50">ev..</text></g><g><title>eval_to_allocation_raw (20,764,082 samples, 2.84%)</title><rect x="62.4262%" y="101" width="2.8392%" height="15" fill="rgb(251,115,12)"/><text x="62.6762%" y="111.50">ev..</text></g><g><title>typeck (4,137,198 samples, 0.57%)</title><rect x="64.6997%" y="85" width="0.5657%" height="15" fill="rgb(240,54,50)"/><text x="64.9497%" y="95.50"></text></g><g><title>late_bound_vars_map (1,484,349 samples, 0.20%)</title><rect x="65.5076%" y="117" width="0.2030%" height="15" fill="rgb(233,84,52)"/><text x="65.7576%" y="127.50"></text></g><g><title>resolve_lifetimes (1,163,873 samples, 0.16%)</title><rect x="65.5515%" y="101" width="0.1591%" height="15" fill="rgb(207,117,47)"/><text x="65.8015%" y="111.50"></text></g><g><title>fn_sig (3,305,339 samples, 0.45%)</title><rect x="65.2654%" y="133" width="0.4520%" height="15" fill="rgb(249,43,39)"/><text x="65.5154%" y="143.50"></text></g><g><title>named_region_map (6,211,411 samples, 0.85%)</title><rect x="65.9316%" y="117" width="0.8493%" height="15" fill="rgb(209,38,44)"/><text x="66.1816%" y="127.50"></text></g><g><title>resolve_lifetimes (5,898,250 samples, 0.81%)</title><rect x="65.9744%" y="101" width="0.8065%" height="15" fill="rgb(236,212,23)"/><text x="66.2244%" y="111.50"></text></g><g><title>lint_levels (3,064,034 samples, 0.42%)</title><rect x="66.3620%" y="85" width="0.4190%" height="15" fill="rgb(242,79,21)"/><text x="66.6120%" y="95.50"></text></g><g><title>generics_of (7,955,844 samples, 1.09%)</title><rect x="65.7174%" y="133" width="1.0879%" height="15" fill="rgb(211,96,35)"/><text x="65.9674%" y="143.50"></text></g><g><title>param_env (1,507,603 samples, 0.21%)</title><rect x="66.8628%" y="133" width="0.2061%" height="15" fill="rgb(253,215,40)"/><text x="67.1128%" y="143.50"></text></g><g><title>explicit_predicates_of (1,556,120 samples, 0.21%)</title><rect x="67.3702%" y="101" width="0.2128%" height="15" fill="rgb(211,81,21)"/><text x="67.6202%" y="111.50"></text></g><g><title>predicates_of (4,042,444 samples, 0.55%)</title><rect x="67.0689%" y="133" width="0.5528%" height="15" fill="rgb(208,190,38)"/><text x="67.3189%" y="143.50"></text></g><g><title>predicates_defined_on (3,197,195 samples, 0.44%)</title><rect x="67.1845%" y="117" width="0.4372%" height="15" fill="rgb(235,213,38)"/><text x="67.4345%" y="127.50"></text></g><g><title>type_collecting (43,572,171 samples, 5.96%)</title><rect x="61.7774%" y="165" width="5.9579%" height="15" fill="rgb(237,122,38)"/><text x="62.0274%" y="175.50">type_col..</text></g><g><title>collect_mod_item_types (43,567,661 samples, 5.96%)</title><rect x="61.7780%" y="149" width="5.9573%" height="15" fill="rgb(244,218,35)"/><text x="62.0280%" y="159.50">collect_..</text></g><g><title>type_of (733,788 samples, 0.10%)</title><rect x="67.6350%" y="133" width="0.1003%" height="15" fill="rgb(240,68,47)"/><text x="67.8850%" y="143.50"></text></g><g><title>evaluate_obligation (2,469,965 samples, 0.34%)</title><rect x="70.6682%" y="133" width="0.3377%" height="15" fill="rgb(210,16,53)"/><text x="70.9182%" y="143.50"></text></g><g><title>implied_outlives_bounds (873,497 samples, 0.12%)</title><rect x="71.0065%" y="133" width="0.1194%" height="15" fill="rgb(235,124,12)"/><text x="71.2565%" y="143.50"></text></g><g><title>param_env (3,545,692 samples, 0.48%)</title><rect x="71.1260%" y="133" width="0.4848%" height="15" fill="rgb(224,169,11)"/><text x="71.3760%" y="143.50"></text></g><g><title>region_scope_tree (4,538,818 samples, 0.62%)</title><rect x="71.6172%" y="133" width="0.6206%" height="15" fill="rgb(250,166,2)"/><text x="71.8672%" y="143.50"></text></g><g><title>check_impl_item_well_formed (30,594,587 samples, 4.18%)</title><rect x="68.0603%" y="149" width="4.1834%" height="15" fill="rgb(242,216,29)"/><text x="68.3103%" y="159.50">check..</text></g><g><title>evaluate_obligation (4,709,386 samples, 0.64%)</title><rect x="73.7801%" y="133" width="0.6439%" height="15" fill="rgb(230,116,27)"/><text x="74.0301%" y="143.50"></text></g><g><title>param_env (2,652,281 samples, 0.36%)</title><rect x="74.4886%" y="133" width="0.3627%" height="15" fill="rgb(228,99,48)"/><text x="74.7386%" y="143.50"></text></g><g><title>check_item_well_formed (20,039,101 samples, 2.74%)</title><rect x="72.2437%" y="149" width="2.7401%" height="15" fill="rgb(253,11,6)"/><text x="72.4937%" y="159.50">ch..</text></g><g><title>analysis (549,333,467 samples, 75.11%)</title><rect x="0.3503%" y="197" width="75.1144%" height="15" fill="rgb(247,143,39)"/><text x="0.6003%" y="207.50">analysis</text></g><g><title>type_check_crate (301,253,957 samples, 41.19%)</title><rect x="34.2721%" y="181" width="41.1927%" height="15" fill="rgb(236,97,10)"/><text x="34.5221%" y="191.50">type_check_crate</text></g><g><title>wf_checking (56,413,974 samples, 7.71%)</title><rect x="67.7508%" y="165" width="7.7139%" height="15" fill="rgb(233,208,19)"/><text x="68.0008%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,517,119 samples, 0.48%)</title><rect x="74.9838%" y="149" width="0.4809%" height="15" fill="rgb(216,164,2)"/><text x="75.2338%" y="159.50"></text></g><g><title>AST_validation (1,435,496 samples, 0.20%)</title><rect x="75.5428%" y="181" width="0.1963%" height="15" fill="rgb(220,129,5)"/><text x="75.7928%" y="191.50"></text></g><g><title>macro_expand_crate (75,949,128 samples, 10.39%)</title><rect x="75.8500%" y="181" width="10.3851%" height="15" fill="rgb(242,17,10)"/><text x="76.1000%" y="191.50">macro_expand_cr..</text></g><g><title>expand_crate (75,932,558 samples, 10.38%)</title><rect x="75.8523%" y="165" width="10.3828%" height="15" fill="rgb(242,107,0)"/><text x="76.1023%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (804,229 samples, 0.11%)</title><rect x="86.2359%" y="181" width="0.1100%" height="15" fill="rgb(251,28,31)"/><text x="86.4859%" y="191.50"></text></g><g><title>finalize_macro_resolutions (1,523,746 samples, 0.21%)</title><rect x="86.3529%" y="165" width="0.2084%" height="15" fill="rgb(233,223,10)"/><text x="86.6029%" y="175.50"></text></g><g><title>late_resolve_crate (12,015,723 samples, 1.64%)</title><rect x="86.5613%" y="165" width="1.6430%" height="15" fill="rgb(215,21,27)"/><text x="86.8113%" y="175.50"></text></g><g><title>resolve_check_unused (872,320 samples, 0.12%)</title><rect x="88.2150%" y="165" width="0.1193%" height="15" fill="rgb(232,23,21)"/><text x="88.4650%" y="175.50"></text></g><g><title>configure_and_expand (94,331,051 samples, 12.90%)</title><rect x="75.5115%" y="197" width="12.8986%" height="15" fill="rgb(244,5,23)"/><text x="75.7615%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (15,095,707 samples, 2.06%)</title><rect x="86.3459%" y="181" width="2.0641%" height="15" fill="rgb(226,81,46)"/><text x="86.5959%" y="191.50">r..</text></g><g><title>drop_ast (2,538,809 samples, 0.35%)</title><rect x="88.4100%" y="197" width="0.3472%" height="15" fill="rgb(247,70,30)"/><text x="88.6600%" y="207.50"></text></g><g><title>early_lint_checks (4,214,226 samples, 0.58%)</title><rect x="88.7597%" y="197" width="0.5762%" height="15" fill="rgb(212,68,19)"/><text x="89.0097%" y="207.50"></text></g><g><title>free_global_ctxt (7,110,929 samples, 0.97%)</title><rect x="89.3360%" y="197" width="0.9723%" height="15" fill="rgb(240,187,13)"/><text x="89.5860%" y="207.50"></text></g><g><title>eval_to_const_value_raw (951,399 samples, 0.13%)</title><rect x="92.6422%" y="149" width="0.1301%" height="15" fill="rgb(223,113,26)"/><text x="92.8922%" y="159.50"></text></g><g><title>eval_to_const_value_raw (876,589 samples, 0.12%)</title><rect x="92.6524%" y="133" width="0.1199%" height="15" fill="rgb(206,192,2)"/><text x="92.9024%" y="143.50"></text></g><g><title>eval_to_allocation_raw (805,039 samples, 0.11%)</title><rect x="92.6622%" y="117" width="0.1101%" height="15" fill="rgb(241,108,4)"/><text x="92.9122%" y="127.50"></text></g><g><title>mir_for_ctfe (4,633,673 samples, 0.63%)</title><rect x="92.1494%" y="181" width="0.6336%" height="15" fill="rgb(247,173,49)"/><text x="92.3994%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,257,633 samples, 0.17%)</title><rect x="92.6110%" y="165" width="0.1720%" height="15" fill="rgb(224,114,35)"/><text x="92.8610%" y="175.50"></text></g><g><title>generate_crate_metadata (18,807,618 samples, 2.57%)</title><rect x="90.3083%" y="197" width="2.5717%" height="15" fill="rgb(245,159,27)"/><text x="90.5583%" y="207.50">ge..</text></g><g><title>hir_lowering (33,218,667 samples, 4.54%)</title><rect x="92.8800%" y="197" width="4.5422%" height="15" fill="rgb(245,172,44)"/><text x="93.1300%" y="207.50">hir_l..</text></g><g><title>parse_crate (14,663,032 samples, 2.00%)</title><rect x="97.4424%" y="197" width="2.0050%" height="15" fill="rgb(236,23,11)"/><text x="97.6924%" y="207.50">p..</text></g><g><title>self_profile_alloc_query_strings (2,604,399 samples, 0.36%)</title><rect x="99.4816%" y="197" width="0.3561%" height="15" fill="rgb(205,117,38)"/><text x="99.7316%" y="207.50"></text></g><g><title>all (731,329,087 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (731,329,087 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (1,027,711 samples, 0.14%)</title><rect x="99.8595%" y="197" width="0.1405%" height="15" fill="rgb(217,125,39)"/><text x="100.1095%" y="207.50"></text></g></svg></svg>