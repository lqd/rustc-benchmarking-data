<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (2,277,911 samples, 0.18%)</title><rect x="12.8862%" y="133" width="0.1835%" height="15" fill="rgb(227,0,7)"/><text x="13.1362%" y="143.50"></text></g><g><title>is_copy_raw (12,066,944 samples, 0.97%)</title><rect x="18.1492%" y="53" width="0.9721%" height="15" fill="rgb(217,0,24)"/><text x="18.3992%" y="63.50"></text></g><g><title>evaluate_obligation (9,577,014 samples, 0.77%)</title><rect x="18.3498%" y="37" width="0.7715%" height="15" fill="rgb(221,193,54)"/><text x="18.5998%" y="47.50"></text></g><g><title>needs_drop_raw (14,855,028 samples, 1.20%)</title><rect x="17.9273%" y="69" width="1.1967%" height="15" fill="rgb(248,212,6)"/><text x="18.1773%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,359,621 samples, 0.11%)</title><rect x="19.1979%" y="53" width="0.1095%" height="15" fill="rgb(208,68,35)"/><text x="19.4479%" y="63.50"></text></g><g><title>resolve_instance (3,113,053 samples, 0.25%)</title><rect x="19.1268%" y="69" width="0.2508%" height="15" fill="rgb(232,128,0)"/><text x="19.3768%" y="79.50"></text></g><g><title>thir_body (13,347,875 samples, 1.08%)</title><rect x="19.3901%" y="69" width="1.0753%" height="15" fill="rgb(207,160,47)"/><text x="19.6401%" y="79.50"></text></g><g><title>mir_const (82,698,982 samples, 6.66%)</title><rect x="13.8913%" y="117" width="6.6621%" height="15" fill="rgb(228,23,34)"/><text x="14.1413%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (74,027,987 samples, 5.96%)</title><rect x="14.5899%" y="101" width="5.9636%" height="15" fill="rgb(218,30,26)"/><text x="14.8399%" y="111.50">unsafety..</text></g><g><title>mir_built (68,928,307 samples, 5.55%)</title><rect x="15.0007%" y="85" width="5.5527%" height="15" fill="rgb(220,122,19)"/><text x="15.2507%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (94,070,321 samples, 7.58%)</title><rect x="13.1722%" y="133" width="7.5781%" height="15" fill="rgb(250,228,42)"/><text x="13.4222%" y="143.50">mir_promot..</text></g><g><title>mir_const_qualif (2,444,980 samples, 0.20%)</title><rect x="20.5534%" y="117" width="0.1970%" height="15" fill="rgb(240,193,28)"/><text x="20.8034%" y="127.50"></text></g><g><title>mir_const (1,800,848 samples, 0.15%)</title><rect x="20.6053%" y="101" width="0.1451%" height="15" fill="rgb(216,20,37)"/><text x="20.8553%" y="111.50"></text></g><g><title>unsafety_check_result (1,373,564 samples, 0.11%)</title><rect x="20.6397%" y="85" width="0.1107%" height="15" fill="rgb(206,188,39)"/><text x="20.8897%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (7,424,360 samples, 0.60%)</title><rect x="20.7504%" y="133" width="0.5981%" height="15" fill="rgb(217,207,13)"/><text x="21.0004%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,189,173 samples, 0.34%)</title><rect x="21.3485%" y="133" width="0.3375%" height="15" fill="rgb(231,73,38)"/><text x="21.5985%" y="143.50"></text></g><g><title>normalize_projection_ty (1,305,784 samples, 0.11%)</title><rect x="21.5807%" y="117" width="0.1052%" height="15" fill="rgb(225,20,46)"/><text x="21.8307%" y="127.50"></text></g><g><title>type_op_normalize_ty (3,889,939 samples, 0.31%)</title><rect x="21.7185%" y="133" width="0.3134%" height="15" fill="rgb(210,31,41)"/><text x="21.9685%" y="143.50"></text></g><g><title>normalize_projection_ty (1,328,960 samples, 0.11%)</title><rect x="21.9248%" y="117" width="0.1071%" height="15" fill="rgb(221,200,47)"/><text x="22.1748%" y="127.50"></text></g><g><title>type_op_prove_predicate (16,933,498 samples, 1.36%)</title><rect x="22.0319%" y="133" width="1.3641%" height="15" fill="rgb(226,26,5)"/><text x="22.2819%" y="143.50"></text></g><g><title>MIR_borrow_checking (284,863,256 samples, 22.95%)</title><rect x="0.4504%" y="165" width="22.9481%" height="15" fill="rgb(249,33,26)"/><text x="0.7004%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (283,173,108 samples, 22.81%)</title><rect x="0.5866%" y="149" width="22.8119%" height="15" fill="rgb(235,183,28)"/><text x="0.8366%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,423,156 samples, 0.11%)</title><rect x="23.3985%" y="165" width="0.1146%" height="15" fill="rgb(221,5,38)"/><text x="23.6485%" y="175.50"></text></g><g><title>hir_module_items (1,685,340 samples, 0.14%)</title><rect x="23.5131%" y="165" width="0.1358%" height="15" fill="rgb(247,18,42)"/><text x="23.7631%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,588,207 samples, 0.13%)</title><rect x="23.8257%" y="133" width="0.1279%" height="15" fill="rgb(241,131,45)"/><text x="24.0757%" y="143.50"></text></g><g><title>check_mod_attrs (3,743,180 samples, 0.30%)</title><rect x="23.6521%" y="149" width="0.3015%" height="15" fill="rgb(249,31,29)"/><text x="23.9021%" y="159.50"></text></g><g><title>lint_levels (1,832,060 samples, 0.15%)</title><rect x="24.1904%" y="133" width="0.1476%" height="15" fill="rgb(225,111,53)"/><text x="24.4404%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (4,307,360 samples, 0.35%)</title><rect x="24.0863%" y="149" width="0.3470%" height="15" fill="rgb(238,160,17)"/><text x="24.3363%" y="159.50"></text></g><g><title>misc_checking_1 (9,990,610 samples, 0.80%)</title><rect x="23.6489%" y="165" width="0.8048%" height="15" fill="rgb(214,148,48)"/><text x="23.8989%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,662,752 samples, 0.38%)</title><rect x="24.4540%" y="149" width="0.3756%" height="15" fill="rgb(232,36,49)"/><text x="24.7040%" y="159.50"></text></g><g><title>check_mod_liveness (3,750,392 samples, 0.30%)</title><rect x="24.5275%" y="133" width="0.3021%" height="15" fill="rgb(209,103,24)"/><text x="24.7775%" y="143.50"></text></g><g><title>misc_checking_2 (15,159,578 samples, 1.22%)</title><rect x="24.4538%" y="165" width="1.2212%" height="15" fill="rgb(229,88,8)"/><text x="24.7038%" y="175.50"></text></g><g><title>match_checking (10,493,636 samples, 0.85%)</title><rect x="24.8296%" y="149" width="0.8453%" height="15" fill="rgb(213,181,19)"/><text x="25.0796%" y="159.50"></text></g><g><title>check_match (10,214,794 samples, 0.82%)</title><rect x="24.8521%" y="133" width="0.8229%" height="15" fill="rgb(254,191,54)"/><text x="25.1021%" y="143.50"></text></g><g><title>check_private_in_public (1,812,140 samples, 0.15%)</title><rect x="25.6763%" y="149" width="0.1460%" height="15" fill="rgb(241,83,37)"/><text x="25.9263%" y="159.50"></text></g><g><title>death_checking (3,115,754 samples, 0.25%)</title><rect x="25.8223%" y="149" width="0.2510%" height="15" fill="rgb(233,36,39)"/><text x="26.0723%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,059,383 samples, 0.25%)</title><rect x="26.4892%" y="117" width="0.2465%" height="15" fill="rgb(226,3,54)"/><text x="26.7392%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,007,131 samples, 0.24%)</title><rect x="26.4935%" y="101" width="0.2422%" height="15" fill="rgb(245,192,40)"/><text x="26.7435%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,931,621 samples, 0.24%)</title><rect x="26.4995%" y="85" width="0.2362%" height="15" fill="rgb(238,167,29)"/><text x="26.7495%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,254,714 samples, 0.10%)</title><rect x="26.6346%" y="69" width="0.1011%" height="15" fill="rgb(232,182,51)"/><text x="26.8846%" y="79.50"></text></g><g><title>crate_lints (10,816,220 samples, 0.87%)</title><rect x="26.0735%" y="133" width="0.8713%" height="15" fill="rgb(231,60,39)"/><text x="26.3235%" y="143.50"></text></g><g><title>type_of (1,311,293 samples, 0.11%)</title><rect x="26.8392%" y="117" width="0.1056%" height="15" fill="rgb(208,69,12)"/><text x="27.0892%" y="127.50"></text></g><g><title>lint_checking (17,147,980 samples, 1.38%)</title><rect x="26.0733%" y="149" width="1.3814%" height="15" fill="rgb(235,93,37)"/><text x="26.3233%" y="159.50"></text></g><g><title>module_lints (6,328,640 samples, 0.51%)</title><rect x="26.9449%" y="133" width="0.5098%" height="15" fill="rgb(213,116,39)"/><text x="27.1949%" y="143.50"></text></g><g><title>lint_mod (6,319,350 samples, 0.51%)</title><rect x="26.9456%" y="117" width="0.5091%" height="15" fill="rgb(222,207,29)"/><text x="27.1956%" y="127.50"></text></g><g><title>privacy_access_levels (2,741,921 samples, 0.22%)</title><rect x="27.4547%" y="149" width="0.2209%" height="15" fill="rgb(206,96,30)"/><text x="27.7047%" y="159.50"></text></g><g><title>privacy_checking_modules (11,624,218 samples, 0.94%)</title><rect x="27.6756%" y="149" width="0.9364%" height="15" fill="rgb(218,138,4)"/><text x="27.9256%" y="159.50"></text></g><g><title>check_mod_privacy (11,617,228 samples, 0.94%)</title><rect x="27.6762%" y="133" width="0.9359%" height="15" fill="rgb(250,191,14)"/><text x="27.9262%" y="143.50"></text></g><g><title>misc_checking_3 (36,516,613 samples, 2.94%)</title><rect x="25.6750%" y="165" width="2.9417%" height="15" fill="rgb(239,60,40)"/><text x="25.9250%" y="175.50">mi..</text></g><g><title>impl_parent (3,729,234 samples, 0.30%)</title><rect x="29.1824%" y="101" width="0.3004%" height="15" fill="rgb(206,27,48)"/><text x="29.4324%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,003,554 samples, 0.16%)</title><rect x="29.3214%" y="85" width="0.1614%" height="15" fill="rgb(225,35,8)"/><text x="29.5714%" y="95.50"></text></g><g><title>impl_trait_ref (7,180,124 samples, 0.58%)</title><rect x="29.4828%" y="101" width="0.5784%" height="15" fill="rgb(250,213,24)"/><text x="29.7328%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,703,886 samples, 0.46%)</title><rect x="29.6017%" y="85" width="0.4595%" height="15" fill="rgb(247,123,22)"/><text x="29.8517%" y="95.50"></text></g><g><title>trait_impls_of (1,318,584 samples, 0.11%)</title><rect x="30.0636%" y="101" width="0.1062%" height="15" fill="rgb(231,138,38)"/><text x="30.3136%" y="111.50"></text></g><g><title>coherent_trait (18,859,299 samples, 1.52%)</title><rect x="28.6506%" y="133" width="1.5193%" height="15" fill="rgb(231,145,46)"/><text x="28.9006%" y="143.50"></text></g><g><title>specialization_graph_of (18,328,654 samples, 1.48%)</title><rect x="28.6934%" y="117" width="1.4765%" height="15" fill="rgb(251,118,11)"/><text x="28.9434%" y="127.50"></text></g><g><title>coherence_checking (19,138,432 samples, 1.54%)</title><rect x="28.6483%" y="149" width="1.5418%" height="15" fill="rgb(217,147,25)"/><text x="28.8983%" y="159.50"></text></g><g><title>dropck_outlives (4,590,116 samples, 0.37%)</title><rect x="52.6665%" y="101" width="0.3698%" height="15" fill="rgb(247,81,37)"/><text x="52.9165%" y="111.50"></text></g><g><title>evaluate_obligation (8,239,944 samples, 0.66%)</title><rect x="53.0363%" y="101" width="0.6638%" height="15" fill="rgb(209,12,38)"/><text x="53.2863%" y="111.50"></text></g><g><title>evaluate_obligation (1,874,677 samples, 0.15%)</title><rect x="55.2582%" y="85" width="0.1510%" height="15" fill="rgb(227,1,9)"/><text x="55.5082%" y="95.50"></text></g><g><title>typeck (21,001,632 samples, 1.69%)</title><rect x="53.9017%" y="101" width="1.6919%" height="15" fill="rgb(248,47,43)"/><text x="54.1517%" y="111.50"></text></g><g><title>item_bodies_checking (315,333,343 samples, 25.40%)</title><rect x="30.2076%" y="149" width="25.4027%" height="15" fill="rgb(221,10,30)"/><text x="30.4576%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (315,329,663 samples, 25.40%)</title><rect x="30.2079%" y="133" width="25.4024%" height="15" fill="rgb(210,229,1)"/><text x="30.4579%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (314,709,908 samples, 25.35%)</title><rect x="30.2578%" y="117" width="25.3525%" height="15" fill="rgb(222,148,37)"/><text x="30.5078%" y="127.50">typeck</text></g><g><title>item_types_checking (14,655,222 samples, 1.18%)</title><rect x="55.6103%" y="149" width="1.1806%" height="15" fill="rgb(234,67,33)"/><text x="55.8603%" y="159.50"></text></g><g><title>check_mod_item_types (14,647,362 samples, 1.18%)</title><rect x="55.6109%" y="133" width="1.1800%" height="15" fill="rgb(247,98,35)"/><text x="55.8609%" y="143.50"></text></g><g><title>typeck (2,564,506 samples, 0.21%)</title><rect x="56.5843%" y="117" width="0.2066%" height="15" fill="rgb(247,138,52)"/><text x="56.8343%" y="127.50"></text></g><g><title>fn_sig (3,068,401 samples, 0.25%)</title><rect x="56.9670%" y="117" width="0.2472%" height="15" fill="rgb(213,79,30)"/><text x="57.2170%" y="127.50"></text></g><g><title>is_late_bound_map (2,332,777 samples, 0.19%)</title><rect x="57.2854%" y="101" width="0.1879%" height="15" fill="rgb(246,177,23)"/><text x="57.5354%" y="111.50"></text></g><g><title>resolve_lifetimes (2,222,467 samples, 0.18%)</title><rect x="57.2943%" y="85" width="0.1790%" height="15" fill="rgb(230,62,27)"/><text x="57.5443%" y="95.50"></text></g><g><title>named_region_map (1,358,943 samples, 0.11%)</title><rect x="57.4733%" y="101" width="0.1095%" height="15" fill="rgb(216,154,8)"/><text x="57.7233%" y="111.50"></text></g><g><title>resolve_lifetimes (1,254,571 samples, 0.10%)</title><rect x="57.4817%" y="85" width="0.1011%" height="15" fill="rgb(244,35,45)"/><text x="57.7317%" y="95.50"></text></g><g><title>generics_of (4,664,735 samples, 0.38%)</title><rect x="57.2142%" y="117" width="0.3758%" height="15" fill="rgb(251,115,12)"/><text x="57.4642%" y="127.50"></text></g><g><title>explicit_predicates_of (1,365,412 samples, 0.11%)</title><rect x="57.7070%" y="85" width="0.1100%" height="15" fill="rgb(240,54,50)"/><text x="57.9570%" y="95.50"></text></g><g><title>predicates_of (3,851,250 samples, 0.31%)</title><rect x="57.6140%" y="117" width="0.3102%" height="15" fill="rgb(233,84,52)"/><text x="57.8640%" y="127.50"></text></g><g><title>predicates_defined_on (3,405,296 samples, 0.27%)</title><rect x="57.6499%" y="101" width="0.2743%" height="15" fill="rgb(207,117,47)"/><text x="57.8999%" y="111.50"></text></g><g><title>inferred_outlives_of (1,331,237 samples, 0.11%)</title><rect x="57.8170%" y="85" width="0.1072%" height="15" fill="rgb(249,43,39)"/><text x="58.0670%" y="95.50"></text></g><g><title>type_collecting (14,722,843 samples, 1.19%)</title><rect x="56.7912%" y="149" width="1.1860%" height="15" fill="rgb(209,38,44)"/><text x="57.0412%" y="159.50"></text></g><g><title>collect_mod_item_types (14,705,663 samples, 1.18%)</title><rect x="56.7926%" y="133" width="1.1847%" height="15" fill="rgb(236,212,23)"/><text x="57.0426%" y="143.50"></text></g><g><title>evaluate_obligation (2,828,576 samples, 0.23%)</title><rect x="59.4241%" y="117" width="0.2279%" height="15" fill="rgb(242,79,21)"/><text x="59.6741%" y="127.50"></text></g><g><title>implied_outlives_bounds (2,610,564 samples, 0.21%)</title><rect x="59.6627%" y="117" width="0.2103%" height="15" fill="rgb(211,96,35)"/><text x="59.9127%" y="127.50"></text></g><g><title>param_env (2,318,737 samples, 0.19%)</title><rect x="59.9104%" y="117" width="0.1868%" height="15" fill="rgb(253,215,40)"/><text x="60.1604%" y="127.50"></text></g><g><title>region_scope_tree (4,621,247 samples, 0.37%)</title><rect x="60.1052%" y="117" width="0.3723%" height="15" fill="rgb(211,81,21)"/><text x="60.3552%" y="127.50"></text></g><g><title>check_impl_item_well_formed (29,784,626 samples, 2.40%)</title><rect x="58.1118%" y="133" width="2.3994%" height="15" fill="rgb(208,190,38)"/><text x="58.3618%" y="143.50">ch..</text></g><g><title>evaluate_obligation (2,481,955 samples, 0.20%)</title><rect x="61.1200%" y="117" width="0.1999%" height="15" fill="rgb(235,213,38)"/><text x="61.3700%" y="127.50"></text></g><g><title>param_env (1,630,361 samples, 0.13%)</title><rect x="61.3598%" y="117" width="0.1313%" height="15" fill="rgb(237,122,38)"/><text x="61.6098%" y="127.50"></text></g><g><title>analysis (761,583,223 samples, 61.35%)</title><rect x="0.2164%" y="181" width="61.3518%" height="15" fill="rgb(244,218,35)"/><text x="0.4664%" y="191.50">analysis</text></g><g><title>type_check_crate (409,038,529 samples, 32.95%)</title><rect x="28.6167%" y="165" width="32.9514%" height="15" fill="rgb(240,68,47)"/><text x="28.8667%" y="175.50">type_check_crate</text></g><g><title>wf_checking (44,532,162 samples, 3.59%)</title><rect x="57.9807%" y="149" width="3.5874%" height="15" fill="rgb(210,16,53)"/><text x="58.2307%" y="159.50">wf_c..</text></g><g><title>check_item_well_formed (13,119,507 samples, 1.06%)</title><rect x="60.5112%" y="133" width="1.0569%" height="15" fill="rgb(235,124,12)"/><text x="60.7612%" y="143.50"></text></g><g><title>AST_validation (1,767,979 samples, 0.14%)</title><rect x="61.6354%" y="165" width="0.1424%" height="15" fill="rgb(224,169,11)"/><text x="61.8854%" y="175.50"></text></g><g><title>metadata_register_crate (4,310,537 samples, 0.35%)</title><rect x="90.4151%" y="133" width="0.3472%" height="15" fill="rgb(250,166,2)"/><text x="90.6651%" y="143.50"></text></g><g><title>metadata_register_crate (3,404,375 samples, 0.27%)</title><rect x="90.4881%" y="117" width="0.2743%" height="15" fill="rgb(242,216,29)"/><text x="90.7381%" y="127.50"></text></g><g><title>metadata_register_crate (2,600,389 samples, 0.21%)</title><rect x="90.5529%" y="101" width="0.2095%" height="15" fill="rgb(230,116,27)"/><text x="90.8029%" y="111.50"></text></g><g><title>macro_expand_crate (358,809,844 samples, 28.91%)</title><rect x="61.8628%" y="165" width="28.9051%" height="15" fill="rgb(228,99,48)"/><text x="62.1128%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (358,787,903 samples, 28.90%)</title><rect x="61.8646%" y="149" width="28.9033%" height="15" fill="rgb(253,11,6)"/><text x="62.1146%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (25,825,125 samples, 2.08%)</title><rect x="90.8719%" y="149" width="2.0804%" height="15" fill="rgb(247,143,39)"/><text x="91.1219%" y="159.50">l..</text></g><g><title>resolve_check_unused (1,401,066 samples, 0.11%)</title><rect x="92.9572%" y="149" width="0.1129%" height="15" fill="rgb(236,97,10)"/><text x="93.2072%" y="159.50"></text></g><g><title>configure_and_expand (391,304,302 samples, 31.52%)</title><rect x="61.6233%" y="181" width="31.5228%" height="15" fill="rgb(233,208,19)"/><text x="61.8733%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (29,398,705 samples, 2.37%)</title><rect x="90.7777%" y="165" width="2.3683%" height="15" fill="rgb(216,164,2)"/><text x="91.0277%" y="175.50">re..</text></g><g><title>drop_ast (3,103,964 samples, 0.25%)</title><rect x="93.1460%" y="181" width="0.2500%" height="15" fill="rgb(220,129,5)"/><text x="93.3960%" y="191.50"></text></g><g><title>early_lint_checks (6,938,676 samples, 0.56%)</title><rect x="93.3980%" y="181" width="0.5590%" height="15" fill="rgb(242,17,10)"/><text x="93.6480%" y="191.50"></text></g><g><title>free_global_ctxt (9,141,221 samples, 0.74%)</title><rect x="93.9570%" y="181" width="0.7364%" height="15" fill="rgb(242,107,0)"/><text x="94.2070%" y="191.50"></text></g><g><title>generate_crate_metadata (25,744,204 samples, 2.07%)</title><rect x="94.6934%" y="181" width="2.0739%" height="15" fill="rgb(251,28,31)"/><text x="94.9434%" y="191.50">g..</text></g><g><title>hir_lowering (33,864,425 samples, 2.73%)</title><rect x="96.7673%" y="181" width="2.7281%" height="15" fill="rgb(233,223,10)"/><text x="97.0173%" y="191.50">hi..</text></g><g><title>parse_crate (1,668,478 samples, 0.13%)</title><rect x="99.5041%" y="181" width="0.1344%" height="15" fill="rgb(215,21,27)"/><text x="99.7541%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,328,095 samples, 0.19%)</title><rect x="99.6588%" y="181" width="0.1875%" height="15" fill="rgb(232,23,21)"/><text x="99.9088%" y="191.50"></text></g><g><title>all (1,241,338,963 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,241,338,963 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,734,039 samples, 0.14%)</title><rect x="99.8603%" y="181" width="0.1397%" height="15" fill="rgb(247,70,30)"/><text x="100.1103%" y="191.50"></text></g></svg></svg>