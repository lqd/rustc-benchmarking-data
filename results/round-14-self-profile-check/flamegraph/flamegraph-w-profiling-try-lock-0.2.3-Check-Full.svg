<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (76,240 samples, 0.17%)</title><rect x="7.9294%" y="117" width="0.1673%" height="15" fill="rgb(227,0,7)"/><text x="8.1794%" y="127.50"></text></g><g><title>item_attrs (82,331 samples, 0.18%)</title><rect x="8.4389%" y="85" width="0.1807%" height="15" fill="rgb(217,0,24)"/><text x="8.6889%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,461 samples, 0.17%)</title><rect x="8.4452%" y="69" width="0.1744%" height="15" fill="rgb(221,193,54)"/><text x="8.6952%" y="79.50"></text></g><g><title>codegen_fn_attrs (123,771 samples, 0.27%)</title><rect x="8.3542%" y="101" width="0.2716%" height="15" fill="rgb(248,212,6)"/><text x="8.6042%" y="111.50"></text></g><g><title>is_copy_raw (74,270 samples, 0.16%)</title><rect x="9.7655%" y="53" width="0.1630%" height="15" fill="rgb(208,68,35)"/><text x="10.0155%" y="63.50"></text></g><g><title>evaluate_obligation (63,920 samples, 0.14%)</title><rect x="9.7883%" y="37" width="0.1403%" height="15" fill="rgb(232,128,0)"/><text x="10.0383%" y="47.50"></text></g><g><title>adt_drop_tys (108,921 samples, 0.24%)</title><rect x="9.7367%" y="69" width="0.2390%" height="15" fill="rgb(207,160,47)"/><text x="9.9867%" y="79.50"></text></g><g><title>needs_drop_raw (310,566 samples, 0.68%)</title><rect x="9.6703%" y="85" width="0.6815%" height="15" fill="rgb(228,23,34)"/><text x="9.9203%" y="95.50"></text></g><g><title>is_copy_raw (171,405 samples, 0.38%)</title><rect x="9.9757%" y="69" width="0.3761%" height="15" fill="rgb(218,30,26)"/><text x="10.2257%" y="79.50"></text></g><g><title>evaluate_obligation (142,362 samples, 0.31%)</title><rect x="10.0394%" y="53" width="0.3124%" height="15" fill="rgb(220,122,19)"/><text x="10.2894%" y="63.50"></text></g><g><title>resolve_instance (139,782 samples, 0.31%)</title><rect x="10.3518%" y="85" width="0.3067%" height="15" fill="rgb(250,228,42)"/><text x="10.6018%" y="95.50"></text></g><g><title>thir_body (197,941 samples, 0.43%)</title><rect x="10.6730%" y="85" width="0.4344%" height="15" fill="rgb(240,193,28)"/><text x="10.9230%" y="95.50"></text></g><g><title>mir_const (1,670,698 samples, 3.67%)</title><rect x="7.4486%" y="133" width="3.6661%" height="15" fill="rgb(216,20,37)"/><text x="7.6986%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (1,375,364 samples, 3.02%)</title><rect x="8.0967%" y="117" width="3.0181%" height="15" fill="rgb(206,188,39)"/><text x="8.3467%" y="127.50">uns..</text></g><g><title>mir_built (1,134,253 samples, 2.49%)</title><rect x="8.6258%" y="101" width="2.4890%" height="15" fill="rgb(217,207,13)"/><text x="8.8758%" y="111.50">mi..</text></g><g><title>mir_promoted (1,899,961 samples, 4.17%)</title><rect x="6.9752%" y="149" width="4.1692%" height="15" fill="rgb(231,73,38)"/><text x="7.2252%" y="159.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (86,331 samples, 0.19%)</title><rect x="11.2086%" y="149" width="0.1894%" height="15" fill="rgb(225,20,46)"/><text x="11.4586%" y="159.50"></text></g><g><title>normalize_projection_ty (50,051 samples, 0.11%)</title><rect x="11.2882%" y="133" width="0.1098%" height="15" fill="rgb(210,31,41)"/><text x="11.5382%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,516,101 samples, 9.91%)</title><rect x="2.3005%" y="181" width="9.9101%" height="15" fill="rgb(221,200,47)"/><text x="2.5505%" y="191.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (4,493,731 samples, 9.86%)</title><rect x="2.3496%" y="165" width="9.8610%" height="15" fill="rgb(226,26,5)"/><text x="2.5996%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (370,283 samples, 0.81%)</title><rect x="11.3980%" y="149" width="0.8125%" height="15" fill="rgb(249,33,26)"/><text x="11.6480%" y="159.50"></text></g><g><title>hir_module_items (144,651 samples, 0.32%)</title><rect x="12.2362%" y="181" width="0.3174%" height="15" fill="rgb(235,183,28)"/><text x="12.4862%" y="191.50"></text></g><g><title>associated_item (68,240 samples, 0.15%)</title><rect x="13.1934%" y="117" width="0.1497%" height="15" fill="rgb(221,5,38)"/><text x="13.4434%" y="127.50"></text></g><g><title>get_lang_items (67,681 samples, 0.15%)</title><rect x="13.4189%" y="101" width="0.1485%" height="15" fill="rgb(247,18,42)"/><text x="13.6689%" y="111.50"></text></g><g><title>item_attrs (73,321 samples, 0.16%)</title><rect x="13.5674%" y="101" width="0.1609%" height="15" fill="rgb(241,131,45)"/><text x="13.8174%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (62,241 samples, 0.14%)</title><rect x="13.5918%" y="85" width="0.1366%" height="15" fill="rgb(249,31,29)"/><text x="13.8418%" y="95.50"></text></g><g><title>codegen_fn_attrs (243,222 samples, 0.53%)</title><rect x="13.3431%" y="117" width="0.5337%" height="15" fill="rgb(225,111,53)"/><text x="13.5931%" y="127.50"></text></g><g><title>codegen_fn_attrs (417,605 samples, 0.92%)</title><rect x="12.9694%" y="149" width="0.9164%" height="15" fill="rgb(238,160,17)"/><text x="13.2194%" y="159.50"></text></g><g><title>should_inherit_track_caller (361,244 samples, 0.79%)</title><rect x="13.0931%" y="133" width="0.7927%" height="15" fill="rgb(214,148,48)"/><text x="13.3431%" y="143.50"></text></g><g><title>check_mod_attrs (578,487 samples, 1.27%)</title><rect x="12.6175%" y="165" width="1.2694%" height="15" fill="rgb(232,36,49)"/><text x="12.8675%" y="175.50"></text></g><g><title>check_mod_const_bodies (80,971 samples, 0.18%)</title><rect x="13.8869%" y="165" width="0.1777%" height="15" fill="rgb(209,103,24)"/><text x="14.1369%" y="175.50"></text></g><g><title>lookup_deprecation_entry (130,771 samples, 0.29%)</title><rect x="14.4386%" y="149" width="0.2870%" height="15" fill="rgb(229,88,8)"/><text x="14.6886%" y="159.50"></text></g><g><title>stability_index (74,191 samples, 0.16%)</title><rect x="14.5627%" y="133" width="0.1628%" height="15" fill="rgb(213,181,19)"/><text x="14.8127%" y="143.50"></text></g><g><title>lookup_stability (54,541 samples, 0.12%)</title><rect x="14.7255%" y="149" width="0.1197%" height="15" fill="rgb(254,191,54)"/><text x="14.9755%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (342,474 samples, 0.75%)</title><rect x="14.1655%" y="165" width="0.7515%" height="15" fill="rgb(241,83,37)"/><text x="14.4155%" y="175.50"></text></g><g><title>misc_checking_1 (1,127,303 samples, 2.47%)</title><rect x="12.5545%" y="181" width="2.4737%" height="15" fill="rgb(233,36,39)"/><text x="12.8045%" y="191.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (101,551 samples, 0.22%)</title><rect x="15.0315%" y="165" width="0.2228%" height="15" fill="rgb(226,3,54)"/><text x="15.2815%" y="175.50"></text></g><g><title>check_mod_liveness (78,211 samples, 0.17%)</title><rect x="15.0827%" y="149" width="0.1716%" height="15" fill="rgb(245,192,40)"/><text x="15.3327%" y="159.50"></text></g><g><title>misc_checking_2 (328,833 samples, 0.72%)</title><rect x="15.0282%" y="181" width="0.7216%" height="15" fill="rgb(238,167,29)"/><text x="15.2782%" y="191.50"></text></g><g><title>match_checking (225,782 samples, 0.50%)</title><rect x="15.2543%" y="165" width="0.4955%" height="15" fill="rgb(232,182,51)"/><text x="15.5043%" y="175.50"></text></g><g><title>check_match (216,682 samples, 0.48%)</title><rect x="15.2743%" y="149" width="0.4755%" height="15" fill="rgb(231,60,39)"/><text x="15.5243%" y="159.50"></text></g><g><title>check_private_in_public (57,840 samples, 0.13%)</title><rect x="15.7673%" y="165" width="0.1269%" height="15" fill="rgb(208,69,12)"/><text x="16.0173%" y="175.50"></text></g><g><title>death_checking (112,782 samples, 0.25%)</title><rect x="15.8942%" y="165" width="0.2475%" height="15" fill="rgb(235,93,37)"/><text x="16.1442%" y="175.50"></text></g><g><title>param_env (62,500 samples, 0.14%)</title><rect x="16.6849%" y="133" width="0.1371%" height="15" fill="rgb(213,116,39)"/><text x="16.9349%" y="143.50"></text></g><g><title>crate_lints (615,326 samples, 1.35%)</title><rect x="16.1447%" y="149" width="1.3503%" height="15" fill="rgb(222,207,29)"/><text x="16.3947%" y="159.50"></text></g><g><title>type_of (305,815 samples, 0.67%)</title><rect x="16.8239%" y="133" width="0.6711%" height="15" fill="rgb(206,96,30)"/><text x="17.0739%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (224,654 samples, 0.49%)</title><rect x="17.0020%" y="117" width="0.4930%" height="15" fill="rgb(218,138,4)"/><text x="17.2520%" y="127.50"></text></g><g><title>lint_checking (690,497 samples, 1.52%)</title><rect x="16.1417%" y="165" width="1.5152%" height="15" fill="rgb(250,191,14)"/><text x="16.3917%" y="175.50"></text></g><g><title>module_lints (73,811 samples, 0.16%)</title><rect x="17.4949%" y="149" width="0.1620%" height="15" fill="rgb(239,60,40)"/><text x="17.7449%" y="159.50"></text></g><g><title>lint_mod (72,251 samples, 0.16%)</title><rect x="17.4984%" y="133" width="0.1585%" height="15" fill="rgb(206,27,48)"/><text x="17.7484%" y="143.50"></text></g><g><title>privacy_access_levels (69,711 samples, 0.15%)</title><rect x="17.6569%" y="165" width="0.1530%" height="15" fill="rgb(225,35,8)"/><text x="17.9069%" y="175.50"></text></g><g><title>privacy_checking_modules (132,392 samples, 0.29%)</title><rect x="17.8099%" y="165" width="0.2905%" height="15" fill="rgb(250,213,24)"/><text x="18.0599%" y="175.50"></text></g><g><title>check_mod_privacy (130,982 samples, 0.29%)</title><rect x="17.8130%" y="149" width="0.2874%" height="15" fill="rgb(247,123,22)"/><text x="18.0630%" y="159.50"></text></g><g><title>misc_checking_3 (1,080,822 samples, 2.37%)</title><rect x="15.7498%" y="181" width="2.3717%" height="15" fill="rgb(231,138,38)"/><text x="15.9998%" y="191.50">mi..</text></g><g><title>impl_parent (750,168 samples, 1.65%)</title><rect x="21.1159%" y="117" width="1.6462%" height="15" fill="rgb(231,145,46)"/><text x="21.3659%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (443,226 samples, 0.97%)</title><rect x="21.7895%" y="101" width="0.9726%" height="15" fill="rgb(251,118,11)"/><text x="22.0395%" y="111.50"></text></g><g><title>impl_trait_ref (2,262,647 samples, 4.97%)</title><rect x="22.7621%" y="117" width="4.9651%" height="15" fill="rgb(217,147,25)"/><text x="23.0121%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,951,455 samples, 4.28%)</title><rect x="23.4449%" y="101" width="4.2822%" height="15" fill="rgb(247,81,37)"/><text x="23.6949%" y="111.50">metad..</text></g><g><title>coherent_trait (4,604,822 samples, 10.10%)</title><rect x="18.2567%" y="149" width="10.1047%" height="15" fill="rgb(209,12,38)"/><text x="18.5067%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (4,581,922 samples, 10.05%)</title><rect x="18.3070%" y="133" width="10.0545%" height="15" fill="rgb(227,1,9)"/><text x="18.5570%" y="143.50">specialization_..</text></g><g><title>trait_impls_of (286,253 samples, 0.63%)</title><rect x="27.7333%" y="117" width="0.6281%" height="15" fill="rgb(248,47,43)"/><text x="27.9833%" y="127.50"></text></g><g><title>implementations_of_trait (62,090 samples, 0.14%)</title><rect x="28.2252%" y="101" width="0.1362%" height="15" fill="rgb(221,10,30)"/><text x="28.4752%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (48,920 samples, 0.11%)</title><rect x="28.2541%" y="85" width="0.1073%" height="15" fill="rgb(210,229,1)"/><text x="28.5041%" y="95.50"></text></g><g><title>coherence_checking (4,696,342 samples, 10.31%)</title><rect x="18.1978%" y="165" width="10.3056%" height="15" fill="rgb(222,148,37)"/><text x="18.4478%" y="175.50">coherence_check..</text></g><g><title>adt_def (55,700 samples, 0.12%)</title><rect x="38.4055%" y="101" width="0.1222%" height="15" fill="rgb(234,67,33)"/><text x="38.6555%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (54,260 samples, 0.12%)</title><rect x="38.4087%" y="85" width="0.1191%" height="15" fill="rgb(247,98,35)"/><text x="38.6587%" y="95.50"></text></g><g><title>adt_sized_constraint (65,110 samples, 0.14%)</title><rect x="38.3901%" y="117" width="0.1429%" height="15" fill="rgb(247,138,52)"/><text x="38.6401%" y="127.50"></text></g><g><title>associated_item (90,532 samples, 0.20%)</title><rect x="38.6274%" y="101" width="0.1987%" height="15" fill="rgb(213,79,30)"/><text x="38.8774%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (69,662 samples, 0.15%)</title><rect x="38.6732%" y="85" width="0.1529%" height="15" fill="rgb(246,177,23)"/><text x="38.9232%" y="95.50"></text></g><g><title>associated_items (141,394 samples, 0.31%)</title><rect x="38.5330%" y="117" width="0.3103%" height="15" fill="rgb(230,62,27)"/><text x="38.7830%" y="127.50"></text></g><g><title>dropck_outlives (147,162 samples, 0.32%)</title><rect x="38.9000%" y="117" width="0.3229%" height="15" fill="rgb(216,154,8)"/><text x="39.1500%" y="127.50"></text></g><g><title>adt_dtorck_constraint (59,622 samples, 0.13%)</title><rect x="39.0921%" y="101" width="0.1308%" height="15" fill="rgb(244,35,45)"/><text x="39.3421%" y="111.50"></text></g><g><title>evaluate_obligation (353,265 samples, 0.78%)</title><rect x="39.2230%" y="117" width="0.7752%" height="15" fill="rgb(251,115,12)"/><text x="39.4730%" y="127.50"></text></g><g><title>fn_sig (55,310 samples, 0.12%)</title><rect x="40.0236%" y="117" width="0.1214%" height="15" fill="rgb(240,54,50)"/><text x="40.2736%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (48,260 samples, 0.11%)</title><rect x="40.0391%" y="101" width="0.1059%" height="15" fill="rgb(233,84,52)"/><text x="40.2891%" y="111.50"></text></g><g><title>generics_of (57,590 samples, 0.13%)</title><rect x="40.1450%" y="117" width="0.1264%" height="15" fill="rgb(207,117,47)"/><text x="40.3950%" y="127.50"></text></g><g><title>item_attrs (56,362 samples, 0.12%)</title><rect x="40.4470%" y="117" width="0.1237%" height="15" fill="rgb(249,43,39)"/><text x="40.6970%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (53,682 samples, 0.12%)</title><rect x="40.4529%" y="101" width="0.1178%" height="15" fill="rgb(209,38,44)"/><text x="40.7029%" y="111.50"></text></g><g><title>method_autoderef_steps (171,220 samples, 0.38%)</title><rect x="40.6467%" y="117" width="0.3757%" height="15" fill="rgb(236,212,23)"/><text x="40.8967%" y="127.50"></text></g><g><title>evaluate_obligation (90,420 samples, 0.20%)</title><rect x="40.8240%" y="101" width="0.1984%" height="15" fill="rgb(242,79,21)"/><text x="41.0740%" y="111.50"></text></g><g><title>object_safety_violations (154,961 samples, 0.34%)</title><rect x="41.0225%" y="117" width="0.3400%" height="15" fill="rgb(211,96,35)"/><text x="41.2725%" y="127.50"></text></g><g><title>explicit_predicates_of (50,540 samples, 0.11%)</title><rect x="41.6580%" y="85" width="0.1109%" height="15" fill="rgb(253,215,40)"/><text x="41.9080%" y="95.50"></text></g><g><title>predicates_of (181,150 samples, 0.40%)</title><rect x="41.4210%" y="117" width="0.3975%" height="15" fill="rgb(211,81,21)"/><text x="41.6710%" y="127.50"></text></g><g><title>predicates_defined_on (126,710 samples, 0.28%)</title><rect x="41.5404%" y="101" width="0.2781%" height="15" fill="rgb(208,190,38)"/><text x="41.7904%" y="111.50"></text></g><g><title>type_of (117,442 samples, 0.26%)</title><rect x="41.8598%" y="117" width="0.2577%" height="15" fill="rgb(235,213,38)"/><text x="42.1098%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (105,752 samples, 0.23%)</title><rect x="41.8855%" y="101" width="0.2321%" height="15" fill="rgb(237,122,38)"/><text x="42.1355%" y="111.50"></text></g><g><title>item_bodies_checking (6,178,798 samples, 13.56%)</title><rect x="28.6013%" y="165" width="13.5586%" height="15" fill="rgb(244,218,35)"/><text x="28.8513%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (6,176,408 samples, 13.55%)</title><rect x="28.6065%" y="149" width="13.5534%" height="15" fill="rgb(240,68,47)"/><text x="28.8565%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (6,150,107 samples, 13.50%)</title><rect x="28.6642%" y="133" width="13.4957%" height="15" fill="rgb(210,16,53)"/><text x="28.9142%" y="143.50">typeck</text></g><g><title>fn_sig (46,821 samples, 0.10%)</title><rect x="43.7292%" y="133" width="0.1027%" height="15" fill="rgb(235,124,12)"/><text x="43.9792%" y="143.50"></text></g><g><title>item_types_checking (849,080 samples, 1.86%)</title><rect x="42.1599%" y="165" width="1.8632%" height="15" fill="rgb(224,169,11)"/><text x="42.4099%" y="175.50">i..</text></g><g><title>check_mod_item_types (844,989 samples, 1.85%)</title><rect x="42.1689%" y="149" width="1.8542%" height="15" fill="rgb(250,166,2)"/><text x="42.4189%" y="159.50">c..</text></g><g><title>late_bound_vars_map (75,280 samples, 0.17%)</title><rect x="44.6889%" y="117" width="0.1652%" height="15" fill="rgb(242,216,29)"/><text x="44.9389%" y="127.50"></text></g><g><title>resolve_lifetimes (67,560 samples, 0.15%)</title><rect x="44.7058%" y="101" width="0.1483%" height="15" fill="rgb(230,116,27)"/><text x="44.9558%" y="111.50"></text></g><g><title>fn_sig (221,464 samples, 0.49%)</title><rect x="44.4527%" y="133" width="0.4860%" height="15" fill="rgb(228,99,48)"/><text x="44.7027%" y="143.50"></text></g><g><title>is_late_bound_map (111,991 samples, 0.25%)</title><rect x="45.1684%" y="117" width="0.2458%" height="15" fill="rgb(253,11,6)"/><text x="45.4184%" y="127.50"></text></g><g><title>resolve_lifetimes (98,501 samples, 0.22%)</title><rect x="45.1980%" y="101" width="0.2161%" height="15" fill="rgb(247,143,39)"/><text x="45.4480%" y="111.50"></text></g><g><title>generics_of (262,832 samples, 0.58%)</title><rect x="44.9387%" y="133" width="0.5768%" height="15" fill="rgb(236,97,10)"/><text x="45.1887%" y="143.50"></text></g><g><title>impl_trait_ref (75,330 samples, 0.17%)</title><rect x="45.5154%" y="133" width="0.1653%" height="15" fill="rgb(233,208,19)"/><text x="45.7654%" y="143.50"></text></g><g><title>late_bound_vars_map (185,091 samples, 0.41%)</title><rect x="46.2693%" y="85" width="0.4062%" height="15" fill="rgb(216,164,2)"/><text x="46.5193%" y="95.50"></text></g><g><title>resolve_lifetimes (178,261 samples, 0.39%)</title><rect x="46.2843%" y="69" width="0.3912%" height="15" fill="rgb(220,129,5)"/><text x="46.5343%" y="79.50"></text></g><g><title>lint_levels (87,211 samples, 0.19%)</title><rect x="46.4841%" y="53" width="0.1914%" height="15" fill="rgb(242,17,10)"/><text x="46.7341%" y="63.50"></text></g><g><title>explicit_predicates_of (354,954 samples, 0.78%)</title><rect x="45.9075%" y="101" width="0.7789%" height="15" fill="rgb(242,107,0)"/><text x="46.1575%" y="111.50"></text></g><g><title>predicates_of (53,370 samples, 0.12%)</title><rect x="46.9783%" y="69" width="0.1171%" height="15" fill="rgb(251,28,31)"/><text x="47.2283%" y="79.50"></text></g><g><title>predicates_defined_on (49,950 samples, 0.11%)</title><rect x="46.9858%" y="53" width="0.1096%" height="15" fill="rgb(233,223,10)"/><text x="47.2358%" y="63.50"></text></g><g><title>named_region_map (53,990 samples, 0.12%)</title><rect x="47.2215%" y="53" width="0.1185%" height="15" fill="rgb(215,21,27)"/><text x="47.4715%" y="63.50"></text></g><g><title>predicates_of (815,880 samples, 1.79%)</title><rect x="45.6807%" y="133" width="1.7904%" height="15" fill="rgb(232,23,21)"/><text x="45.9307%" y="143.50">p..</text></g><g><title>predicates_defined_on (783,259 samples, 1.72%)</title><rect x="45.7523%" y="117" width="1.7188%" height="15" fill="rgb(244,5,23)"/><text x="46.0023%" y="127.50"></text></g><g><title>inferred_outlives_of (357,584 samples, 0.78%)</title><rect x="46.6864%" y="101" width="0.7847%" height="15" fill="rgb(226,81,46)"/><text x="46.9364%" y="111.50"></text></g><g><title>inferred_outlives_crate (340,844 samples, 0.75%)</title><rect x="46.7231%" y="85" width="0.7479%" height="15" fill="rgb(247,70,30)"/><text x="46.9731%" y="95.50"></text></g><g><title>type_of (171,183 samples, 0.38%)</title><rect x="47.0955%" y="69" width="0.3756%" height="15" fill="rgb(212,68,19)"/><text x="47.3455%" y="79.50"></text></g><g><title>type_of (59,762 samples, 0.13%)</title><rect x="47.3400%" y="53" width="0.1311%" height="15" fill="rgb(240,187,13)"/><text x="47.5900%" y="63.50"></text></g><g><title>metadata_decode_entry_type_of (56,732 samples, 0.12%)</title><rect x="47.3466%" y="37" width="0.1245%" height="15" fill="rgb(223,113,26)"/><text x="47.5966%" y="47.50"></text></g><g><title>adt_def (45,910 samples, 0.10%)</title><rect x="47.6728%" y="117" width="0.1007%" height="15" fill="rgb(206,192,2)"/><text x="47.9228%" y="127.50"></text></g><g><title>type_collecting (1,709,699 samples, 3.75%)</title><rect x="44.0268%" y="165" width="3.7517%" height="15" fill="rgb(241,108,4)"/><text x="44.2768%" y="175.50">type..</text></g><g><title>collect_mod_item_types (1,698,609 samples, 3.73%)</title><rect x="44.0512%" y="149" width="3.7274%" height="15" fill="rgb(247,173,49)"/><text x="44.3012%" y="159.50">coll..</text></g><g><title>type_of (140,111 samples, 0.31%)</title><rect x="47.4711%" y="133" width="0.3075%" height="15" fill="rgb(224,114,35)"/><text x="47.7211%" y="143.50"></text></g><g><title>adt_sized_constraint (83,621 samples, 0.18%)</title><rect x="51.1002%" y="133" width="0.1835%" height="15" fill="rgb(245,159,27)"/><text x="51.3502%" y="143.50"></text></g><g><title>adt_sized_constraint (76,671 samples, 0.17%)</title><rect x="51.1154%" y="117" width="0.1682%" height="15" fill="rgb(245,172,44)"/><text x="51.3654%" y="127.50"></text></g><g><title>adt_def (73,991 samples, 0.16%)</title><rect x="51.1213%" y="101" width="0.1624%" height="15" fill="rgb(236,23,11)"/><text x="51.3713%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (55,320 samples, 0.12%)</title><rect x="51.1623%" y="85" width="0.1214%" height="15" fill="rgb(205,117,38)"/><text x="51.4123%" y="95.50"></text></g><g><title>evaluate_obligation (531,076 samples, 1.17%)</title><rect x="51.3379%" y="133" width="1.1654%" height="15" fill="rgb(237,72,25)"/><text x="51.5879%" y="143.50"></text></g><g><title>implied_outlives_bounds (252,942 samples, 0.56%)</title><rect x="52.5033%" y="133" width="0.5551%" height="15" fill="rgb(244,70,9)"/><text x="52.7533%" y="143.50"></text></g><g><title>param_env (202,873 samples, 0.45%)</title><rect x="53.0583%" y="133" width="0.4452%" height="15" fill="rgb(217,125,39)"/><text x="53.3083%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,670,849 samples, 5.86%)</title><rect x="48.0866%" y="149" width="5.8609%" height="15" fill="rgb(235,36,10)"/><text x="48.3366%" y="159.50">check_i..</text></g><g><title>region_scope_tree (165,722 samples, 0.36%)</title><rect x="53.5838%" y="133" width="0.3637%" height="15" fill="rgb(251,123,47)"/><text x="53.8338%" y="143.50"></text></g><g><title>adt_def (82,651 samples, 0.18%)</title><rect x="57.0166%" y="85" width="0.1814%" height="15" fill="rgb(221,13,13)"/><text x="57.2666%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (82,101 samples, 0.18%)</title><rect x="57.0178%" y="69" width="0.1802%" height="15" fill="rgb(238,131,9)"/><text x="57.2678%" y="79.50"></text></g><g><title>item_attrs (77,631 samples, 0.17%)</title><rect x="57.0276%" y="53" width="0.1704%" height="15" fill="rgb(211,50,8)"/><text x="57.2776%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (76,951 samples, 0.17%)</title><rect x="57.0291%" y="37" width="0.1689%" height="15" fill="rgb(245,182,24)"/><text x="57.2791%" y="47.50"></text></g><g><title>adt_sized_constraint (88,461 samples, 0.19%)</title><rect x="57.0065%" y="101" width="0.1941%" height="15" fill="rgb(242,14,37)"/><text x="57.2565%" y="111.50"></text></g><g><title>evaluate_obligation (179,432 samples, 0.39%)</title><rect x="56.8215%" y="133" width="0.3937%" height="15" fill="rgb(246,228,12)"/><text x="57.0715%" y="143.50"></text></g><g><title>adt_sized_constraint (137,221 samples, 0.30%)</title><rect x="56.9141%" y="117" width="0.3011%" height="15" fill="rgb(213,55,15)"/><text x="57.1641%" y="127.50"></text></g><g><title>implied_outlives_bounds (157,343 samples, 0.35%)</title><rect x="57.2371%" y="133" width="0.3453%" height="15" fill="rgb(209,9,3)"/><text x="57.4871%" y="143.50"></text></g><g><title>param_env (418,893 samples, 0.92%)</title><rect x="57.5824%" y="133" width="0.9192%" height="15" fill="rgb(230,59,30)"/><text x="57.8324%" y="143.50"></text></g><g><title>predicates_of (84,862 samples, 0.19%)</title><rect x="58.5016%" y="133" width="0.1862%" height="15" fill="rgb(209,121,21)"/><text x="58.7516%" y="143.50"></text></g><g><title>predicates_defined_on (48,341 samples, 0.11%)</title><rect x="58.5817%" y="117" width="0.1061%" height="15" fill="rgb(220,109,13)"/><text x="58.8317%" y="127.50"></text></g><g><title>analysis (26,036,580 samples, 57.13%)</title><rect x="1.8404%" y="197" width="57.1342%" height="15" fill="rgb(232,18,1)"/><text x="2.0904%" y="207.50">analysis</text></g><g><title>type_check_crate (18,617,127 samples, 40.85%)</title><rect x="18.1215%" y="181" width="40.8531%" height="15" fill="rgb(215,41,42)"/><text x="18.3715%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,101,206 samples, 11.19%)</title><rect x="47.7806%" y="165" width="11.1940%" height="15" fill="rgb(224,123,36)"/><text x="48.0306%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (2,290,917 samples, 5.03%)</title><rect x="53.9475%" y="149" width="5.0271%" height="15" fill="rgb(240,125,3)"/><text x="54.1975%" y="159.50">check_..</text></g><g><title>variances_of (96,471 samples, 0.21%)</title><rect x="58.7629%" y="133" width="0.2117%" height="15" fill="rgb(205,98,50)"/><text x="59.0129%" y="143.50"></text></g><g><title>crate_variances (89,541 samples, 0.20%)</title><rect x="58.7781%" y="117" width="0.1965%" height="15" fill="rgb(205,185,37)"/><text x="59.0281%" y="127.50"></text></g><g><title>codegen_crate (446,885 samples, 0.98%)</title><rect x="59.0006%" y="197" width="0.9806%" height="15" fill="rgb(238,207,15)"/><text x="59.2506%" y="207.50"></text></g><g><title>AST_validation (138,941 samples, 0.30%)</title><rect x="60.4628%" y="181" width="0.3049%" height="15" fill="rgb(213,199,42)"/><text x="60.7128%" y="191.50"></text></g><g><title>complete_gated_feature_checking (49,561 samples, 0.11%)</title><rect x="60.7677%" y="181" width="0.1088%" height="15" fill="rgb(235,201,11)"/><text x="61.0177%" y="191.50"></text></g><g><title>crate_injection (85,991 samples, 0.19%)</title><rect x="60.8765%" y="181" width="0.1887%" height="15" fill="rgb(207,46,11)"/><text x="61.1265%" y="191.50"></text></g><g><title>metadata_load_macro (397,963 samples, 0.87%)</title><rect x="80.3550%" y="149" width="0.8733%" height="15" fill="rgb(241,35,35)"/><text x="80.6050%" y="159.50"></text></g><g><title>macro_expand_crate (9,382,895 samples, 20.59%)</title><rect x="61.0651%" y="181" width="20.5897%" height="15" fill="rgb(243,32,47)"/><text x="61.3151%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (9,355,974 samples, 20.53%)</title><rect x="61.1242%" y="165" width="20.5306%" height="15" fill="rgb(247,202,23)"/><text x="61.3742%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (194,352 samples, 0.43%)</title><rect x="81.2283%" y="149" width="0.4265%" height="15" fill="rgb(219,102,11)"/><text x="81.4783%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (152,382 samples, 0.33%)</title><rect x="81.6795%" y="181" width="0.3344%" height="15" fill="rgb(243,110,44)"/><text x="81.9295%" y="191.50"></text></g><g><title>finalize_macro_resolutions (69,671 samples, 0.15%)</title><rect x="82.1130%" y="165" width="0.1529%" height="15" fill="rgb(222,74,54)"/><text x="82.3630%" y="175.50"></text></g><g><title>late_resolve_crate (1,047,621 samples, 2.30%)</title><rect x="82.2659%" y="165" width="2.2989%" height="15" fill="rgb(216,99,12)"/><text x="82.5159%" y="175.50">l..</text></g><g><title>configure_and_expand (11,274,906 samples, 24.74%)</title><rect x="59.9812%" y="197" width="24.7415%" height="15" fill="rgb(226,22,26)"/><text x="60.2312%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,234,424 samples, 2.71%)</title><rect x="82.0139%" y="181" width="2.7088%" height="15" fill="rgb(217,163,10)"/><text x="82.2639%" y="191.50">re..</text></g><g><title>drop_ast (110,711 samples, 0.24%)</title><rect x="84.7227%" y="197" width="0.2429%" height="15" fill="rgb(213,25,53)"/><text x="84.9727%" y="207.50"></text></g><g><title>early_lint_checks (234,563 samples, 0.51%)</title><rect x="84.9963%" y="197" width="0.5147%" height="15" fill="rgb(252,105,26)"/><text x="85.2463%" y="207.50"></text></g><g><title>free_global_ctxt (1,471,736 samples, 3.23%)</title><rect x="85.5110%" y="197" width="3.2296%" height="15" fill="rgb(220,39,43)"/><text x="85.7610%" y="207.50">fre..</text></g><g><title>crate_hash (60,891 samples, 0.13%)</title><rect x="89.4414%" y="181" width="0.1336%" height="15" fill="rgb(229,68,48)"/><text x="89.6914%" y="191.50"></text></g><g><title>generate_crate_metadata (441,525 samples, 0.97%)</title><rect x="88.7406%" y="197" width="0.9689%" height="15" fill="rgb(252,8,32)"/><text x="88.9906%" y="207.50"></text></g><g><title>hir_lowering (1,457,146 samples, 3.20%)</title><rect x="89.7095%" y="197" width="3.1975%" height="15" fill="rgb(223,20,43)"/><text x="89.9595%" y="207.50">hir..</text></g><g><title>parse_crate (2,078,083 samples, 4.56%)</title><rect x="92.9864%" y="197" width="4.5601%" height="15" fill="rgb(229,81,49)"/><text x="93.2364%" y="207.50">parse..</text></g><g><title>prepare_outputs (303,873 samples, 0.67%)</title><rect x="97.5692%" y="197" width="0.6668%" height="15" fill="rgb(236,28,36)"/><text x="97.8192%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (373,474 samples, 0.82%)</title><rect x="98.2360%" y="197" width="0.8195%" height="15" fill="rgb(249,185,26)"/><text x="98.4860%" y="207.50"></text></g><g><title>setup_global_ctxt (147,332 samples, 0.32%)</title><rect x="99.0793%" y="197" width="0.3233%" height="15" fill="rgb(249,174,33)"/><text x="99.3293%" y="207.50"></text></g><g><title>all (45,570,916 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (45,570,916 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (272,233 samples, 0.60%)</title><rect x="99.4026%" y="197" width="0.5974%" height="15" fill="rgb(250,127,30)"/><text x="99.6526%" y="207.50"></text></g></svg></svg>