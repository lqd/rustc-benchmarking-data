<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (199,643 samples, 0.15%)</title><rect x="3.2019%" y="149" width="0.1473%" height="15" fill="rgb(227,0,7)"/><text x="3.4519%" y="159.50"></text></g><g><title>param_env (186,251 samples, 0.14%)</title><rect x="3.7170%" y="117" width="0.1375%" height="15" fill="rgb(217,0,24)"/><text x="3.9670%" y="127.50"></text></g><g><title>is_copy_raw (570,879 samples, 0.42%)</title><rect x="4.5867%" y="69" width="0.4213%" height="15" fill="rgb(221,193,54)"/><text x="4.8367%" y="79.50"></text></g><g><title>evaluate_obligation (513,198 samples, 0.38%)</title><rect x="4.6293%" y="53" width="0.3788%" height="15" fill="rgb(248,212,6)"/><text x="4.8793%" y="63.50"></text></g><g><title>needs_drop_raw (2,311,339 samples, 1.71%)</title><rect x="4.4644%" y="85" width="1.7059%" height="15" fill="rgb(208,68,35)"/><text x="4.7144%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,574,757 samples, 1.16%)</title><rect x="5.0081%" y="69" width="1.1623%" height="15" fill="rgb(232,128,0)"/><text x="5.2581%" y="79.50"></text></g><g><title>normalize_projection_ty (1,554,457 samples, 1.15%)</title><rect x="5.0231%" y="53" width="1.1473%" height="15" fill="rgb(207,160,47)"/><text x="5.2731%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (6,170,978 samples, 4.55%)</title><rect x="6.2501%" y="69" width="4.5546%" height="15" fill="rgb(228,23,34)"/><text x="6.5001%" y="79.50">codeg..</text></g><g><title>evaluate_obligation (5,874,255 samples, 4.34%)</title><rect x="6.4691%" y="53" width="4.3356%" height="15" fill="rgb(218,30,26)"/><text x="6.7191%" y="63.50">evalu..</text></g><g><title>specialization_graph_of (465,395 samples, 0.34%)</title><rect x="10.8477%" y="69" width="0.3435%" height="15" fill="rgb(220,122,19)"/><text x="11.0977%" y="79.50"></text></g><g><title>impl_trait_ref (197,762 samples, 0.15%)</title><rect x="11.0452%" y="53" width="0.1460%" height="15" fill="rgb(250,228,42)"/><text x="11.2952%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (163,312 samples, 0.12%)</title><rect x="11.0706%" y="37" width="0.1205%" height="15" fill="rgb(240,193,28)"/><text x="11.3206%" y="47.50"></text></g><g><title>resolve_instance (6,838,123 samples, 5.05%)</title><rect x="6.1704%" y="85" width="5.0470%" height="15" fill="rgb(216,20,37)"/><text x="6.4204%" y="95.50">resolv..</text></g><g><title>thir_body (203,081 samples, 0.15%)</title><rect x="11.2199%" y="85" width="0.1499%" height="15" fill="rgb(206,188,39)"/><text x="11.4699%" y="95.50"></text></g><g><title>mir_const (10,567,756 samples, 7.80%)</title><rect x="3.5721%" y="133" width="7.7997%" height="15" fill="rgb(217,207,13)"/><text x="3.8221%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (10,185,191 samples, 7.52%)</title><rect x="3.8544%" y="117" width="7.5173%" height="15" fill="rgb(231,73,38)"/><text x="4.1044%" y="127.50">unsafety_c..</text></g><g><title>mir_built (9,944,868 samples, 7.34%)</title><rect x="4.0318%" y="101" width="7.3399%" height="15" fill="rgb(225,20,46)"/><text x="4.2818%" y="111.50">mir_built</text></g><g><title>mir_promoted (10,997,671 samples, 8.12%)</title><rect x="3.4310%" y="149" width="8.1170%" height="15" fill="rgb(210,31,41)"/><text x="3.6810%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (238,772 samples, 0.18%)</title><rect x="11.3717%" y="133" width="0.1762%" height="15" fill="rgb(221,200,47)"/><text x="11.6217%" y="143.50"></text></g><g><title>mir_const (197,321 samples, 0.15%)</title><rect x="11.4023%" y="117" width="0.1456%" height="15" fill="rgb(226,26,5)"/><text x="11.6523%" y="127.50"></text></g><g><title>unsafety_check_result (138,411 samples, 0.10%)</title><rect x="11.4458%" y="101" width="0.1022%" height="15" fill="rgb(249,33,26)"/><text x="11.6958%" y="111.50"></text></g><g><title>type_op_normalize_fn_sig (316,805 samples, 0.23%)</title><rect x="11.6053%" y="149" width="0.2338%" height="15" fill="rgb(235,183,28)"/><text x="11.8553%" y="159.50"></text></g><g><title>normalize_projection_ty (194,873 samples, 0.14%)</title><rect x="11.6953%" y="133" width="0.1438%" height="15" fill="rgb(221,5,38)"/><text x="11.9453%" y="143.50"></text></g><g><title>type_op_prove_predicate (710,880 samples, 0.52%)</title><rect x="11.9038%" y="149" width="0.5247%" height="15" fill="rgb(247,18,42)"/><text x="12.1538%" y="159.50"></text></g><g><title>MIR_borrow_checking (15,562,042 samples, 11.49%)</title><rect x="0.9436%" y="181" width="11.4858%" height="15" fill="rgb(241,131,45)"/><text x="1.1936%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (15,540,761 samples, 11.47%)</title><rect x="0.9593%" y="165" width="11.4701%" height="15" fill="rgb(249,31,29)"/><text x="1.2093%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (151,782 samples, 0.11%)</title><rect x="12.4294%" y="181" width="0.1120%" height="15" fill="rgb(225,111,53)"/><text x="12.6794%" y="191.50"></text></g><g><title>hir_module_items (205,502 samples, 0.15%)</title><rect x="12.5414%" y="181" width="0.1517%" height="15" fill="rgb(238,160,17)"/><text x="12.7914%" y="191.50"></text></g><g><title>codegen_fn_attrs (256,322 samples, 0.19%)</title><rect x="12.9623%" y="117" width="0.1892%" height="15" fill="rgb(214,148,48)"/><text x="13.2123%" y="127.50"></text></g><g><title>codegen_fn_attrs (406,264 samples, 0.30%)</title><rect x="12.8542%" y="149" width="0.2998%" height="15" fill="rgb(232,36,49)"/><text x="13.1042%" y="159.50"></text></g><g><title>should_inherit_track_caller (355,693 samples, 0.26%)</title><rect x="12.8915%" y="133" width="0.2625%" height="15" fill="rgb(209,103,24)"/><text x="13.1415%" y="143.50"></text></g><g><title>check_mod_attrs (591,186 samples, 0.44%)</title><rect x="12.7181%" y="165" width="0.4363%" height="15" fill="rgb(229,88,8)"/><text x="12.9681%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (308,583 samples, 0.23%)</title><rect x="13.2504%" y="165" width="0.2278%" height="15" fill="rgb(213,181,19)"/><text x="13.5004%" y="175.50"></text></g><g><title>misc_checking_1 (1,134,373 samples, 0.84%)</title><rect x="12.6934%" y="181" width="0.8372%" height="15" fill="rgb(254,191,54)"/><text x="12.9434%" y="191.50"></text></g><g><title>misc_checking_2 (273,293 samples, 0.20%)</title><rect x="13.5307%" y="181" width="0.2017%" height="15" fill="rgb(241,83,37)"/><text x="13.7807%" y="191.50"></text></g><g><title>match_checking (139,722 samples, 0.10%)</title><rect x="13.6292%" y="165" width="0.1031%" height="15" fill="rgb(233,36,39)"/><text x="13.8792%" y="175.50"></text></g><g><title>death_checking (238,643 samples, 0.18%)</title><rect x="13.8082%" y="165" width="0.1761%" height="15" fill="rgb(226,3,54)"/><text x="14.0582%" y="175.50"></text></g><g><title>eval_to_const_value_raw (155,512 samples, 0.11%)</title><rect x="14.2628%" y="133" width="0.1148%" height="15" fill="rgb(245,192,40)"/><text x="14.5128%" y="143.50"></text></g><g><title>eval_to_const_value_raw (152,542 samples, 0.11%)</title><rect x="14.2650%" y="117" width="0.1126%" height="15" fill="rgb(238,167,29)"/><text x="14.5150%" y="127.50"></text></g><g><title>eval_to_allocation_raw (145,222 samples, 0.11%)</title><rect x="14.2704%" y="101" width="0.1072%" height="15" fill="rgb(232,182,51)"/><text x="14.5204%" y="111.50"></text></g><g><title>param_env (230,453 samples, 0.17%)</title><rect x="14.3776%" y="133" width="0.1701%" height="15" fill="rgb(231,60,39)"/><text x="14.6276%" y="143.50"></text></g><g><title>crate_lints (1,454,876 samples, 1.07%)</title><rect x="13.9856%" y="149" width="1.0738%" height="15" fill="rgb(208,69,12)"/><text x="14.2356%" y="159.50"></text></g><g><title>type_of (564,957 samples, 0.42%)</title><rect x="14.6424%" y="133" width="0.4170%" height="15" fill="rgb(235,93,37)"/><text x="14.8924%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (462,094 samples, 0.34%)</title><rect x="14.7183%" y="117" width="0.3411%" height="15" fill="rgb(213,116,39)"/><text x="14.9683%" y="127.50"></text></g><g><title>lint_checking (1,581,688 samples, 1.17%)</title><rect x="13.9843%" y="165" width="1.1674%" height="15" fill="rgb(222,207,29)"/><text x="14.2343%" y="175.50"></text></g><g><title>privacy_checking_modules (377,024 samples, 0.28%)</title><rect x="15.2333%" y="165" width="0.2783%" height="15" fill="rgb(206,96,30)"/><text x="15.4833%" y="175.50"></text></g><g><title>check_mod_privacy (375,464 samples, 0.28%)</title><rect x="15.2345%" y="149" width="0.2771%" height="15" fill="rgb(218,138,4)"/><text x="15.4845%" y="159.50"></text></g><g><title>misc_checking_3 (2,419,937 samples, 1.79%)</title><rect x="13.7324%" y="181" width="1.7861%" height="15" fill="rgb(250,191,14)"/><text x="13.9824%" y="191.50">m..</text></g><g><title>impl_parent (681,963 samples, 0.50%)</title><rect x="16.6512%" y="117" width="0.5033%" height="15" fill="rgb(239,60,40)"/><text x="16.9012%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (389,520 samples, 0.29%)</title><rect x="16.8670%" y="101" width="0.2875%" height="15" fill="rgb(206,27,48)"/><text x="17.1170%" y="111.50"></text></g><g><title>impl_trait_ref (2,285,336 samples, 1.69%)</title><rect x="17.1566%" y="117" width="1.6867%" height="15" fill="rgb(225,35,8)"/><text x="17.4066%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,982,802 samples, 1.46%)</title><rect x="17.3799%" y="101" width="1.4634%" height="15" fill="rgb(250,213,24)"/><text x="17.6299%" y="111.50"></text></g><g><title>trait_impls_of (340,763 samples, 0.25%)</title><rect x="18.8720%" y="117" width="0.2515%" height="15" fill="rgb(247,123,22)"/><text x="19.1220%" y="127.50"></text></g><g><title>coherent_trait (10,696,698 samples, 7.89%)</title><rect x="15.5701%" y="149" width="7.8948%" height="15" fill="rgb(231,138,38)"/><text x="15.8201%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (10,680,597 samples, 7.88%)</title><rect x="15.5819%" y="133" width="7.8830%" height="15" fill="rgb(231,145,46)"/><text x="15.8319%" y="143.50">specializat..</text></g><g><title>visible_parent_map (5,881,055 samples, 4.34%)</title><rect x="19.1243%" y="117" width="4.3406%" height="15" fill="rgb(251,118,11)"/><text x="19.3743%" y="127.50">visib..</text></g><g><title>module_children (5,337,466 samples, 3.94%)</title><rect x="19.5255%" y="101" width="3.9394%" height="15" fill="rgb(217,147,25)"/><text x="19.7755%" y="111.50">modu..</text></g><g><title>metadata_decode_entry_module_children (5,237,576 samples, 3.87%)</title><rect x="19.5992%" y="85" width="3.8657%" height="15" fill="rgb(247,81,37)"/><text x="19.8492%" y="95.50">meta..</text></g><g><title>coherence_checking (10,778,529 samples, 7.96%)</title><rect x="15.5549%" y="165" width="7.9552%" height="15" fill="rgb(209,12,38)"/><text x="15.8049%" y="175.50">coherence_c..</text></g><g><title>associated_item (368,373 samples, 0.27%)</title><rect x="30.5602%" y="101" width="0.2719%" height="15" fill="rgb(227,1,9)"/><text x="30.8102%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (317,623 samples, 0.23%)</title><rect x="30.5977%" y="85" width="0.2344%" height="15" fill="rgb(248,47,43)"/><text x="30.8477%" y="95.50"></text></g><g><title>associated_items (486,526 samples, 0.36%)</title><rect x="30.4924%" y="117" width="0.3591%" height="15" fill="rgb(221,10,30)"/><text x="30.7424%" y="127.50"></text></g><g><title>evaluate_obligation (27,001,067 samples, 19.93%)</title><rect x="35.4700%" y="85" width="19.9285%" height="15" fill="rgb(210,229,1)"/><text x="35.7200%" y="95.50">evaluate_obligation</text></g><g><title>dropck_outlives (33,240,445 samples, 24.53%)</title><rect x="30.8831%" y="117" width="24.5336%" height="15" fill="rgb(222,148,37)"/><text x="31.1331%" y="127.50">dropck_outlives</text></g><g><title>normalize_projection_ty (32,937,304 samples, 24.31%)</title><rect x="31.1068%" y="101" width="24.3098%" height="15" fill="rgb(234,67,33)"/><text x="31.3568%" y="111.50">normalize_projection_ty</text></g><g><title>eval_to_const_value_raw (274,613 samples, 0.20%)</title><rect x="55.4198%" y="117" width="0.2027%" height="15" fill="rgb(247,98,35)"/><text x="55.6698%" y="127.50"></text></g><g><title>eval_to_const_value_raw (255,443 samples, 0.19%)</title><rect x="55.4339%" y="101" width="0.1885%" height="15" fill="rgb(247,138,52)"/><text x="55.6839%" y="111.50"></text></g><g><title>eval_to_allocation_raw (250,303 samples, 0.18%)</title><rect x="55.4377%" y="85" width="0.1847%" height="15" fill="rgb(213,79,30)"/><text x="55.6877%" y="95.50"></text></g><g><title>evaluate_obligation (2,467,648 samples, 1.82%)</title><rect x="55.6224%" y="117" width="1.8213%" height="15" fill="rgb(246,177,23)"/><text x="55.8724%" y="127.50">e..</text></g><g><title>trait_impls_of (226,891 samples, 0.17%)</title><rect x="57.2763%" y="101" width="0.1675%" height="15" fill="rgb(230,62,27)"/><text x="57.5263%" y="111.50"></text></g><g><title>impl_item_implementor_ids (290,574 samples, 0.21%)</title><rect x="57.5838%" y="117" width="0.2145%" height="15" fill="rgb(216,154,8)"/><text x="57.8338%" y="127.50"></text></g><g><title>associated_items (279,734 samples, 0.21%)</title><rect x="57.5918%" y="101" width="0.2065%" height="15" fill="rgb(244,35,45)"/><text x="57.8418%" y="111.50"></text></g><g><title>evaluate_obligation (288,093 samples, 0.21%)</title><rect x="57.9849%" y="101" width="0.2126%" height="15" fill="rgb(251,115,12)"/><text x="58.2349%" y="111.50"></text></g><g><title>method_autoderef_steps (435,703 samples, 0.32%)</title><rect x="57.8842%" y="117" width="0.3216%" height="15" fill="rgb(240,54,50)"/><text x="58.1342%" y="127.50"></text></g><g><title>predicates_of (243,373 samples, 0.18%)</title><rect x="58.2189%" y="117" width="0.1796%" height="15" fill="rgb(233,84,52)"/><text x="58.4689%" y="127.50"></text></g><g><title>predicates_defined_on (156,671 samples, 0.12%)</title><rect x="58.2829%" y="101" width="0.1156%" height="15" fill="rgb(207,117,47)"/><text x="58.5329%" y="111.50"></text></g><g><title>item_bodies_checking (47,443,215 samples, 35.02%)</title><rect x="23.5409%" y="165" width="35.0161%" height="15" fill="rgb(249,43,39)"/><text x="23.7909%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,439,295 samples, 35.01%)</title><rect x="23.5438%" y="149" width="35.0132%" height="15" fill="rgb(209,38,44)"/><text x="23.7938%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (47,424,285 samples, 35.00%)</title><rect x="23.5549%" y="133" width="35.0022%" height="15" fill="rgb(236,212,23)"/><text x="23.8049%" y="143.50">typeck</text></g><g><title>adt_destructor (215,583 samples, 0.16%)</title><rect x="59.1268%" y="133" width="0.1591%" height="15" fill="rgb(242,79,21)"/><text x="59.3768%" y="143.50"></text></g><g><title>coherent_trait (212,653 samples, 0.16%)</title><rect x="59.1290%" y="117" width="0.1570%" height="15" fill="rgb(211,96,35)"/><text x="59.3790%" y="127.50"></text></g><g><title>specialization_graph_of (209,943 samples, 0.15%)</title><rect x="59.1310%" y="101" width="0.1550%" height="15" fill="rgb(253,215,40)"/><text x="59.3810%" y="111.50"></text></g><g><title>evaluate_obligation (254,112 samples, 0.19%)</title><rect x="59.2902%" y="133" width="0.1876%" height="15" fill="rgb(211,81,21)"/><text x="59.5402%" y="143.50"></text></g><g><title>generics_of (704,356 samples, 0.52%)</title><rect x="62.4093%" y="101" width="0.5199%" height="15" fill="rgb(208,190,38)"/><text x="62.6593%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (506,374 samples, 0.37%)</title><rect x="62.5554%" y="85" width="0.3737%" height="15" fill="rgb(235,213,38)"/><text x="62.8054%" y="95.50"></text></g><g><title>impl_trait_ref (960,913 samples, 0.71%)</title><rect x="63.0285%" y="101" width="0.7092%" height="15" fill="rgb(237,122,38)"/><text x="63.2785%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (778,793 samples, 0.57%)</title><rect x="63.1630%" y="85" width="0.5748%" height="15" fill="rgb(244,218,35)"/><text x="63.4130%" y="95.50"></text></g><g><title>predicates_of (674,648 samples, 0.50%)</title><rect x="63.7646%" y="101" width="0.4979%" height="15" fill="rgb(240,68,47)"/><text x="64.0146%" y="111.50"></text></g><g><title>predicates_defined_on (374,513 samples, 0.28%)</title><rect x="63.9861%" y="85" width="0.2764%" height="15" fill="rgb(210,16,53)"/><text x="64.2361%" y="95.50"></text></g><g><title>specializes (1,985,791 samples, 1.47%)</title><rect x="64.2626%" y="101" width="1.4656%" height="15" fill="rgb(235,124,12)"/><text x="64.5126%" y="111.50"></text></g><g><title>param_env (1,153,623 samples, 0.85%)</title><rect x="64.8768%" y="85" width="0.8514%" height="15" fill="rgb(224,169,11)"/><text x="65.1268%" y="95.50"></text></g><g><title>def_span (515,295 samples, 0.38%)</title><rect x="65.3479%" y="69" width="0.3803%" height="15" fill="rgb(250,166,2)"/><text x="65.5979%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (454,325 samples, 0.34%)</title><rect x="65.3929%" y="53" width="0.3353%" height="15" fill="rgb(242,216,29)"/><text x="65.6429%" y="63.50"></text></g><g><title>evaluate_obligation (7,120,051 samples, 5.26%)</title><rect x="60.4895%" y="117" width="5.2551%" height="15" fill="rgb(230,116,27)"/><text x="60.7395%" y="127.50">evalua..</text></g><g><title>specializes (180,811 samples, 0.13%)</title><rect x="65.8004%" y="117" width="0.1335%" height="15" fill="rgb(228,99,48)"/><text x="66.0504%" y="127.50"></text></g><g><title>item_types_checking (10,014,971 samples, 7.39%)</title><rect x="58.5571%" y="165" width="7.3917%" height="15" fill="rgb(253,11,6)"/><text x="58.8071%" y="175.50">item_types..</text></g><g><title>check_mod_item_types (10,011,081 samples, 7.39%)</title><rect x="58.5599%" y="149" width="7.3888%" height="15" fill="rgb(247,143,39)"/><text x="58.8099%" y="159.50">check_mod_..</text></g><g><title>typeck (8,667,386 samples, 6.40%)</title><rect x="59.5517%" y="133" width="6.3971%" height="15" fill="rgb(236,97,10)"/><text x="59.8017%" y="143.50">typeck</text></g><g><title>fn_sig (265,282 samples, 0.20%)</title><rect x="66.1093%" y="133" width="0.1958%" height="15" fill="rgb(233,208,19)"/><text x="66.3593%" y="143.50"></text></g><g><title>late_bound_vars_map (392,565 samples, 0.29%)</title><rect x="66.8555%" y="85" width="0.2897%" height="15" fill="rgb(216,164,2)"/><text x="67.1055%" y="95.50"></text></g><g><title>resolve_lifetimes (365,475 samples, 0.27%)</title><rect x="66.8755%" y="69" width="0.2697%" height="15" fill="rgb(220,129,5)"/><text x="67.1255%" y="79.50"></text></g><g><title>explicit_predicates_of (1,258,484 samples, 0.93%)</title><rect x="66.4904%" y="101" width="0.9288%" height="15" fill="rgb(242,17,10)"/><text x="66.7404%" y="111.50"></text></g><g><title>type_param_predicates (343,233 samples, 0.25%)</title><rect x="67.1660%" y="85" width="0.2533%" height="15" fill="rgb(242,107,0)"/><text x="67.4160%" y="95.50"></text></g><g><title>predicates_of (1,464,869 samples, 1.08%)</title><rect x="66.4220%" y="133" width="1.0812%" height="15" fill="rgb(251,28,31)"/><text x="66.6720%" y="143.50"></text></g><g><title>predicates_defined_on (1,433,859 samples, 1.06%)</title><rect x="66.4449%" y="117" width="1.0583%" height="15" fill="rgb(233,223,10)"/><text x="66.6949%" y="127.50"></text></g><g><title>type_collecting (2,419,377 samples, 1.79%)</title><rect x="65.9507%" y="165" width="1.7857%" height="15" fill="rgb(215,21,27)"/><text x="66.2007%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,406,237 samples, 1.78%)</title><rect x="65.9604%" y="149" width="1.7760%" height="15" fill="rgb(232,23,21)"/><text x="66.2104%" y="159.50">c..</text></g><g><title>type_of (315,932 samples, 0.23%)</title><rect x="67.5032%" y="133" width="0.2332%" height="15" fill="rgb(244,5,23)"/><text x="67.7532%" y="143.50"></text></g><g><title>impl_item_implementor_ids (182,412 samples, 0.13%)</title><rect x="73.6433%" y="117" width="0.1346%" height="15" fill="rgb(226,81,46)"/><text x="73.8933%" y="127.50"></text></g><g><title>associated_items (150,192 samples, 0.11%)</title><rect x="73.6671%" y="101" width="0.1109%" height="15" fill="rgb(247,70,30)"/><text x="73.9171%" y="111.50"></text></g><g><title>explicit_predicates_of (169,991 samples, 0.13%)</title><rect x="73.9869%" y="85" width="0.1255%" height="15" fill="rgb(212,68,19)"/><text x="74.2369%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (145,131 samples, 0.11%)</title><rect x="74.0052%" y="69" width="0.1071%" height="15" fill="rgb(240,187,13)"/><text x="74.2552%" y="79.50"></text></g><g><title>predicates_of (346,652 samples, 0.26%)</title><rect x="73.8767%" y="117" width="0.2559%" height="15" fill="rgb(223,113,26)"/><text x="74.1267%" y="127.50"></text></g><g><title>predicates_defined_on (253,182 samples, 0.19%)</title><rect x="73.9457%" y="101" width="0.1869%" height="15" fill="rgb(206,192,2)"/><text x="74.1957%" y="111.50"></text></g><g><title>trait_impls_of (447,733 samples, 0.33%)</title><rect x="74.1458%" y="117" width="0.3305%" height="15" fill="rgb(241,108,4)"/><text x="74.3958%" y="127.50"></text></g><g><title>implementations_of_trait (210,651 samples, 0.16%)</title><rect x="74.3208%" y="101" width="0.1555%" height="15" fill="rgb(247,173,49)"/><text x="74.5708%" y="111.50"></text></g><g><title>evaluate_obligation (8,091,089 samples, 5.97%)</title><rect x="68.5404%" y="133" width="5.9717%" height="15" fill="rgb(224,114,35)"/><text x="68.7904%" y="143.50">evaluate..</text></g><g><title>implied_outlives_bounds (173,060 samples, 0.13%)</title><rect x="74.5254%" y="133" width="0.1277%" height="15" fill="rgb(245,159,27)"/><text x="74.7754%" y="143.50"></text></g><g><title>param_env (272,785 samples, 0.20%)</title><rect x="74.6610%" y="133" width="0.2013%" height="15" fill="rgb(245,172,44)"/><text x="74.9110%" y="143.50"></text></g><g><title>check_impl_item_well_formed (9,712,899 samples, 7.17%)</title><rect x="67.7880%" y="149" width="7.1687%" height="15" fill="rgb(236,23,11)"/><text x="68.0380%" y="159.50">check_impl..</text></g><g><title>evaluate_obligation (710,619 samples, 0.52%)</title><rect x="75.7497%" y="133" width="0.5245%" height="15" fill="rgb(205,117,38)"/><text x="75.9997%" y="143.50"></text></g><g><title>param_env (270,582 samples, 0.20%)</title><rect x="76.3625%" y="133" width="0.1997%" height="15" fill="rgb(237,72,25)"/><text x="76.6125%" y="143.50"></text></g><g><title>analysis (102,878,928 samples, 75.93%)</title><rect x="0.7370%" y="197" width="75.9312%" height="15" fill="rgb(244,70,9)"/><text x="0.9870%" y="207.50">analysis</text></g><g><title>type_check_crate (82,851,566 samples, 61.15%)</title><rect x="15.5184%" y="181" width="61.1498%" height="15" fill="rgb(217,125,39)"/><text x="15.7684%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,100,144 samples, 8.93%)</title><rect x="67.7375%" y="165" width="8.9307%" height="15" fill="rgb(235,36,10)"/><text x="67.9875%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (2,318,895 samples, 1.71%)</title><rect x="74.9567%" y="149" width="1.7115%" height="15" fill="rgb(251,123,47)"/><text x="75.2067%" y="159.50"></text></g><g><title>codegen_crate (373,004 samples, 0.28%)</title><rect x="76.6776%" y="197" width="0.2753%" height="15" fill="rgb(221,13,13)"/><text x="76.9276%" y="207.50"></text></g><g><title>AST_validation (149,781 samples, 0.11%)</title><rect x="77.1522%" y="181" width="0.1105%" height="15" fill="rgb(238,131,9)"/><text x="77.4022%" y="191.50"></text></g><g><title>macro_expand_crate (18,999,521 samples, 14.02%)</title><rect x="77.3721%" y="181" width="14.0229%" height="15" fill="rgb(211,50,8)"/><text x="77.6221%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (18,980,560 samples, 14.01%)</title><rect x="77.3861%" y="165" width="14.0089%" height="15" fill="rgb(245,182,24)"/><text x="77.6361%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,367,462 samples, 1.01%)</title><rect x="90.3857%" y="149" width="1.0093%" height="15" fill="rgb(242,14,37)"/><text x="90.6357%" y="159.50"></text></g><g><title>metadata_register_crate (393,333 samples, 0.29%)</title><rect x="91.1046%" y="133" width="0.2903%" height="15" fill="rgb(246,228,12)"/><text x="91.3546%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (203,122 samples, 0.15%)</title><rect x="91.3991%" y="181" width="0.1499%" height="15" fill="rgb(213,55,15)"/><text x="91.6491%" y="191.50"></text></g><g><title>finalize_imports (159,271 samples, 0.12%)</title><rect x="91.5557%" y="165" width="0.1176%" height="15" fill="rgb(209,9,3)"/><text x="91.8057%" y="175.50"></text></g><g><title>late_resolve_crate (1,494,647 samples, 1.10%)</title><rect x="91.7074%" y="165" width="1.1031%" height="15" fill="rgb(230,59,30)"/><text x="91.9574%" y="175.50"></text></g><g><title>configure_and_expand (21,594,100 samples, 15.94%)</title><rect x="76.9530%" y="197" width="15.9378%" height="15" fill="rgb(209,121,21)"/><text x="77.2030%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,817,890 samples, 1.34%)</title><rect x="91.5491%" y="181" width="1.3417%" height="15" fill="rgb(220,109,13)"/><text x="91.7991%" y="191.50"></text></g><g><title>drop_ast (142,991 samples, 0.11%)</title><rect x="92.8908%" y="197" width="0.1055%" height="15" fill="rgb(232,18,1)"/><text x="93.1408%" y="207.50"></text></g><g><title>early_lint_checks (322,924 samples, 0.24%)</title><rect x="93.0114%" y="197" width="0.2383%" height="15" fill="rgb(215,41,42)"/><text x="93.2614%" y="207.50"></text></g><g><title>free_global_ctxt (2,540,628 samples, 1.88%)</title><rect x="93.2497%" y="197" width="1.8751%" height="15" fill="rgb(224,123,36)"/><text x="93.4997%" y="207.50">f..</text></g><g><title>generate_crate_metadata (558,566 samples, 0.41%)</title><rect x="95.1249%" y="197" width="0.4123%" height="15" fill="rgb(240,125,3)"/><text x="95.3749%" y="207.50"></text></g><g><title>hir_lowering (1,939,422 samples, 1.43%)</title><rect x="95.5371%" y="197" width="1.4314%" height="15" fill="rgb(205,98,50)"/><text x="95.7871%" y="207.50"></text></g><g><title>parse_crate (2,560,988 samples, 1.89%)</title><rect x="97.0031%" y="197" width="1.8902%" height="15" fill="rgb(205,185,37)"/><text x="97.2531%" y="207.50">p..</text></g><g><title>prepare_outputs (314,183 samples, 0.23%)</title><rect x="98.9011%" y="197" width="0.2319%" height="15" fill="rgb(238,207,15)"/><text x="99.1511%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (691,578 samples, 0.51%)</title><rect x="99.1330%" y="197" width="0.5104%" height="15" fill="rgb(213,199,42)"/><text x="99.3830%" y="207.50"></text></g><g><title>setup_global_ctxt (149,531 samples, 0.11%)</title><rect x="99.6551%" y="197" width="0.1104%" height="15" fill="rgb(235,201,11)"/><text x="99.9051%" y="207.50"></text></g><g><title>all (135,489,598 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (135,489,598 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (317,804 samples, 0.23%)</title><rect x="99.7654%" y="197" width="0.2346%" height="15" fill="rgb(243,32,47)"/><text x="100.0154%" y="207.50"></text></g></svg></svg>