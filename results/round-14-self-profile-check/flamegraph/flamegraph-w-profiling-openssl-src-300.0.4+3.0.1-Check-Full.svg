<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (341,232 samples, 0.34%)</title><rect x="14.7380%" y="149" width="0.3352%" height="15" fill="rgb(227,0,7)"/><text x="14.9880%" y="159.50"></text></g><g><title>item_attrs (385,295 samples, 0.38%)</title><rect x="15.5611%" y="117" width="0.3785%" height="15" fill="rgb(217,0,24)"/><text x="15.8111%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (371,775 samples, 0.37%)</title><rect x="15.5744%" y="101" width="0.3652%" height="15" fill="rgb(221,193,54)"/><text x="15.8244%" y="111.50"></text></g><g><title>codegen_fn_attrs (521,907 samples, 0.51%)</title><rect x="15.4495%" y="133" width="0.5127%" height="15" fill="rgb(248,212,6)"/><text x="15.6995%" y="143.50"></text></g><g><title>adt_drop_tys (159,412 samples, 0.16%)</title><rect x="18.6031%" y="85" width="0.1566%" height="15" fill="rgb(208,68,35)"/><text x="18.8531%" y="95.50"></text></g><g><title>is_copy_raw (142,432 samples, 0.14%)</title><rect x="18.7613%" y="85" width="0.1399%" height="15" fill="rgb(232,128,0)"/><text x="19.0113%" y="95.50"></text></g><g><title>evaluate_obligation (107,632 samples, 0.11%)</title><rect x="18.7955%" y="69" width="0.1057%" height="15" fill="rgb(207,160,47)"/><text x="19.0455%" y="79.50"></text></g><g><title>param_env (142,852 samples, 0.14%)</title><rect x="18.9012%" y="85" width="0.1403%" height="15" fill="rgb(228,23,34)"/><text x="19.1512%" y="95.50"></text></g><g><title>adt_drop_tys (547,566 samples, 0.54%)</title><rect x="18.5519%" y="101" width="0.5380%" height="15" fill="rgb(218,30,26)"/><text x="18.8019%" y="111.50"></text></g><g><title>is_copy_raw (648,677 samples, 0.64%)</title><rect x="19.0899%" y="101" width="0.6373%" height="15" fill="rgb(220,122,19)"/><text x="19.3399%" y="111.50"></text></g><g><title>evaluate_obligation (567,016 samples, 0.56%)</title><rect x="19.1701%" y="85" width="0.5571%" height="15" fill="rgb(250,228,42)"/><text x="19.4201%" y="95.50"></text></g><g><title>needs_drop_raw (1,303,044 samples, 1.28%)</title><rect x="18.4684%" y="117" width="1.2802%" height="15" fill="rgb(240,193,28)"/><text x="18.7184%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (171,422 samples, 0.17%)</title><rect x="19.9230%" y="101" width="0.1684%" height="15" fill="rgb(216,20,37)"/><text x="20.1730%" y="111.50"></text></g><g><title>impl_parent (608,275 samples, 0.60%)</title><rect x="20.8491%" y="85" width="0.5976%" height="15" fill="rgb(206,188,39)"/><text x="21.0991%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (429,863 samples, 0.42%)</title><rect x="21.0244%" y="69" width="0.4223%" height="15" fill="rgb(217,207,13)"/><text x="21.2744%" y="79.50"></text></g><g><title>specialization_graph_of (3,162,905 samples, 3.11%)</title><rect x="20.1327%" y="101" width="3.1074%" height="15" fill="rgb(231,73,38)"/><text x="20.3827%" y="111.50">spe..</text></g><g><title>impl_trait_ref (1,825,391 samples, 1.79%)</title><rect x="21.4467%" y="85" width="1.7933%" height="15" fill="rgb(225,20,46)"/><text x="21.6967%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,653,877 samples, 1.62%)</title><rect x="21.6152%" y="69" width="1.6248%" height="15" fill="rgb(210,31,41)"/><text x="21.8652%" y="79.50"></text></g><g><title>resolve_instance (3,652,380 samples, 3.59%)</title><rect x="19.7485%" y="117" width="3.5883%" height="15" fill="rgb(221,200,47)"/><text x="19.9985%" y="127.50">reso..</text></g><g><title>lit_to_const (106,431 samples, 0.10%)</title><rect x="24.4975%" y="101" width="0.1046%" height="15" fill="rgb(226,26,5)"/><text x="24.7475%" y="111.50"></text></g><g><title>thir_body (1,279,193 samples, 1.26%)</title><rect x="23.3461%" y="117" width="1.2567%" height="15" fill="rgb(249,33,26)"/><text x="23.5961%" y="127.50"></text></g><g><title>mir_const (10,711,151 samples, 10.52%)</title><rect x="14.0912%" y="165" width="10.5231%" height="15" fill="rgb(235,183,28)"/><text x="14.3412%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (9,711,553 samples, 9.54%)</title><rect x="15.0732%" y="149" width="9.5411%" height="15" fill="rgb(221,5,38)"/><text x="15.3232%" y="159.50">unsafety_check..</text></g><g><title>mir_built (8,803,420 samples, 8.65%)</title><rect x="15.9654%" y="133" width="8.6489%" height="15" fill="rgb(247,18,42)"/><text x="16.2154%" y="143.50">mir_built</text></g><g><title>mir_promoted (11,467,861 samples, 11.27%)</title><rect x="13.3635%" y="181" width="11.2665%" height="15" fill="rgb(241,131,45)"/><text x="13.6135%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (300,041 samples, 0.29%)</title><rect x="24.6428%" y="181" width="0.2948%" height="15" fill="rgb(249,31,29)"/><text x="24.8928%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (383,085 samples, 0.38%)</title><rect x="24.9376%" y="181" width="0.3764%" height="15" fill="rgb(225,111,53)"/><text x="25.1876%" y="191.50"></text></g><g><title>normalize_projection_ty (246,294 samples, 0.24%)</title><rect x="25.0720%" y="165" width="0.2420%" height="15" fill="rgb(238,160,17)"/><text x="25.3220%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,316,009 samples, 1.29%)</title><rect x="25.3745%" y="181" width="1.2929%" height="15" fill="rgb(214,148,48)"/><text x="25.6245%" y="191.50"></text></g><g><title>MIR_borrow_checking (26,112,512 samples, 25.65%)</title><rect x="1.0180%" y="213" width="25.6541%" height="15" fill="rgb(232,36,49)"/><text x="1.2680%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,074,312 samples, 25.62%)</title><rect x="1.0555%" y="197" width="25.6165%" height="15" fill="rgb(209,103,24)"/><text x="1.3055%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (164,112 samples, 0.16%)</title><rect x="26.6823%" y="213" width="0.1612%" height="15" fill="rgb(229,88,8)"/><text x="26.9323%" y="223.50"></text></g><g><title>codegen_fn_attrs (244,593 samples, 0.24%)</title><rect x="27.0778%" y="181" width="0.2403%" height="15" fill="rgb(213,181,19)"/><text x="27.3278%" y="191.50"></text></g><g><title>check_mod_attrs (460,465 samples, 0.45%)</title><rect x="26.8659%" y="197" width="0.4524%" height="15" fill="rgb(254,191,54)"/><text x="27.1159%" y="207.50"></text></g><g><title>lookup_deprecation_entry (120,571 samples, 0.12%)</title><rect x="27.5906%" y="181" width="0.1185%" height="15" fill="rgb(241,83,37)"/><text x="27.8406%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (348,034 samples, 0.34%)</title><rect x="27.4525%" y="197" width="0.3419%" height="15" fill="rgb(233,36,39)"/><text x="27.7025%" y="207.50"></text></g><g><title>misc_checking_1 (1,020,182 samples, 1.00%)</title><rect x="26.8441%" y="213" width="1.0023%" height="15" fill="rgb(226,3,54)"/><text x="27.0941%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (379,365 samples, 0.37%)</title><rect x="27.8478%" y="197" width="0.3727%" height="15" fill="rgb(245,192,40)"/><text x="28.0978%" y="207.50"></text></g><g><title>check_mod_liveness (316,264 samples, 0.31%)</title><rect x="27.9098%" y="181" width="0.3107%" height="15" fill="rgb(238,167,29)"/><text x="28.1598%" y="191.50"></text></g><g><title>type_uninhabited_from (108,840 samples, 0.11%)</title><rect x="28.1136%" y="165" width="0.1069%" height="15" fill="rgb(232,182,51)"/><text x="28.3636%" y="175.50"></text></g><g><title>misc_checking_2 (942,531 samples, 0.93%)</title><rect x="27.8463%" y="213" width="0.9260%" height="15" fill="rgb(231,60,39)"/><text x="28.0963%" y="223.50"></text></g><g><title>match_checking (561,696 samples, 0.55%)</title><rect x="28.2205%" y="197" width="0.5518%" height="15" fill="rgb(208,69,12)"/><text x="28.4705%" y="207.50"></text></g><g><title>check_match (551,706 samples, 0.54%)</title><rect x="28.2303%" y="181" width="0.5420%" height="15" fill="rgb(235,93,37)"/><text x="28.4803%" y="191.50"></text></g><g><title>death_checking (263,033 samples, 0.26%)</title><rect x="28.8685%" y="197" width="0.2584%" height="15" fill="rgb(213,116,39)"/><text x="29.1185%" y="207.50"></text></g><g><title>crate_lints (2,674,280 samples, 2.63%)</title><rect x="29.1292%" y="181" width="2.6273%" height="15" fill="rgb(222,207,29)"/><text x="29.3792%" y="191.50">cr..</text></g><g><title>type_of (2,022,841 samples, 1.99%)</title><rect x="29.7692%" y="165" width="1.9873%" height="15" fill="rgb(206,96,30)"/><text x="30.0192%" y="175.50">t..</text></g><g><title>metadata_decode_entry_type_of (1,774,226 samples, 1.74%)</title><rect x="30.0135%" y="149" width="1.7431%" height="15" fill="rgb(218,138,4)"/><text x="30.2635%" y="159.50"></text></g><g><title>lint_checking (3,044,324 samples, 2.99%)</title><rect x="29.1270%" y="197" width="2.9909%" height="15" fill="rgb(250,191,14)"/><text x="29.3770%" y="207.50">lin..</text></g><g><title>module_lints (367,744 samples, 0.36%)</title><rect x="31.7566%" y="181" width="0.3613%" height="15" fill="rgb(239,60,40)"/><text x="32.0066%" y="191.50"></text></g><g><title>lint_mod (364,174 samples, 0.36%)</title><rect x="31.7601%" y="165" width="0.3578%" height="15" fill="rgb(206,27,48)"/><text x="32.0101%" y="175.50"></text></g><g><title>privacy_access_levels (123,611 samples, 0.12%)</title><rect x="32.1178%" y="197" width="0.1214%" height="15" fill="rgb(225,35,8)"/><text x="32.3678%" y="207.50"></text></g><g><title>privacy_checking_modules (522,376 samples, 0.51%)</title><rect x="32.2393%" y="197" width="0.5132%" height="15" fill="rgb(250,213,24)"/><text x="32.4893%" y="207.50"></text></g><g><title>check_mod_privacy (520,406 samples, 0.51%)</title><rect x="32.2412%" y="181" width="0.5113%" height="15" fill="rgb(247,123,22)"/><text x="32.4912%" y="191.50"></text></g><g><title>misc_checking_3 (4,068,506 samples, 4.00%)</title><rect x="28.7723%" y="213" width="3.9971%" height="15" fill="rgb(231,138,38)"/><text x="29.0223%" y="223.50">misc..</text></g><g><title>adt_sized_constraint (116,911 samples, 0.11%)</title><rect x="52.9519%" y="149" width="0.1149%" height="15" fill="rgb(231,145,46)"/><text x="53.2019%" y="159.50"></text></g><g><title>associated_item (458,646 samples, 0.45%)</title><rect x="53.2415%" y="133" width="0.4506%" height="15" fill="rgb(251,118,11)"/><text x="53.4915%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (346,315 samples, 0.34%)</title><rect x="53.3519%" y="117" width="0.3402%" height="15" fill="rgb(217,147,25)"/><text x="53.6019%" y="127.50"></text></g><g><title>associated_items (652,107 samples, 0.64%)</title><rect x="53.0766%" y="149" width="0.6407%" height="15" fill="rgb(247,81,37)"/><text x="53.3266%" y="159.50"></text></g><g><title>adt_def (200,463 samples, 0.20%)</title><rect x="54.1295%" y="117" width="0.1969%" height="15" fill="rgb(209,12,38)"/><text x="54.3795%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (197,292 samples, 0.19%)</title><rect x="54.1326%" y="101" width="0.1938%" height="15" fill="rgb(227,1,9)"/><text x="54.3826%" y="111.50"></text></g><g><title>adt_def (221,223 samples, 0.22%)</title><rect x="54.4178%" y="101" width="0.2173%" height="15" fill="rgb(248,47,43)"/><text x="54.6678%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (219,343 samples, 0.22%)</title><rect x="54.4196%" y="85" width="0.2155%" height="15" fill="rgb(221,10,30)"/><text x="54.6696%" y="95.50"></text></g><g><title>adt_def (327,905 samples, 0.32%)</title><rect x="54.6993%" y="85" width="0.3221%" height="15" fill="rgb(210,229,1)"/><text x="54.9493%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (325,765 samples, 0.32%)</title><rect x="54.7014%" y="69" width="0.3200%" height="15" fill="rgb(222,148,37)"/><text x="54.9514%" y="79.50"></text></g><g><title>item_attrs (273,203 samples, 0.27%)</title><rect x="54.7531%" y="53" width="0.2684%" height="15" fill="rgb(234,67,33)"/><text x="55.0031%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (270,603 samples, 0.27%)</title><rect x="54.7556%" y="37" width="0.2659%" height="15" fill="rgb(247,98,35)"/><text x="55.0056%" y="47.50"></text></g><g><title>adt_dtorck_constraint (176,691 samples, 0.17%)</title><rect x="55.0495%" y="85" width="0.1736%" height="15" fill="rgb(247,138,52)"/><text x="55.2995%" y="95.50"></text></g><g><title>adt_dtorck_constraint (602,386 samples, 0.59%)</title><rect x="54.6682%" y="101" width="0.5918%" height="15" fill="rgb(213,79,30)"/><text x="54.9182%" y="111.50"></text></g><g><title>adt_dtorck_constraint (976,992 samples, 0.96%)</title><rect x="54.3682%" y="117" width="0.9598%" height="15" fill="rgb(246,177,23)"/><text x="54.6182%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,438,158 samples, 1.41%)</title><rect x="54.0240%" y="133" width="1.4129%" height="15" fill="rgb(230,62,27)"/><text x="54.2740%" y="143.50"></text></g><g><title>dropck_outlives (1,677,739 samples, 1.65%)</title><rect x="53.8116%" y="149" width="1.6483%" height="15" fill="rgb(216,154,8)"/><text x="54.0616%" y="159.50"></text></g><g><title>adt_def (154,273 samples, 0.15%)</title><rect x="56.5128%" y="117" width="0.1516%" height="15" fill="rgb(244,35,45)"/><text x="56.7628%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (149,913 samples, 0.15%)</title><rect x="56.5171%" y="101" width="0.1473%" height="15" fill="rgb(251,115,12)"/><text x="56.7671%" y="111.50"></text></g><g><title>item_attrs (104,752 samples, 0.10%)</title><rect x="56.5615%" y="85" width="0.1029%" height="15" fill="rgb(240,54,50)"/><text x="56.8115%" y="95.50"></text></g><g><title>adt_sized_constraint (119,840 samples, 0.12%)</title><rect x="56.6644%" y="117" width="0.1177%" height="15" fill="rgb(233,84,52)"/><text x="56.9144%" y="127.50"></text></g><g><title>adt_sized_constraint (331,763 samples, 0.33%)</title><rect x="56.4910%" y="133" width="0.3259%" height="15" fill="rgb(207,117,47)"/><text x="56.7410%" y="143.50"></text></g><g><title>impl_trait_ref (138,351 samples, 0.14%)</title><rect x="56.9304%" y="133" width="0.1359%" height="15" fill="rgb(249,43,39)"/><text x="57.1804%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (114,521 samples, 0.11%)</title><rect x="56.9538%" y="117" width="0.1125%" height="15" fill="rgb(209,38,44)"/><text x="57.2038%" y="127.50"></text></g><g><title>predicates_of (228,202 samples, 0.22%)</title><rect x="57.0831%" y="133" width="0.2242%" height="15" fill="rgb(236,212,23)"/><text x="57.3331%" y="143.50"></text></g><g><title>predicates_defined_on (137,231 samples, 0.13%)</title><rect x="57.1725%" y="117" width="0.1348%" height="15" fill="rgb(242,79,21)"/><text x="57.4225%" y="127.50"></text></g><g><title>specializes (270,144 samples, 0.27%)</title><rect x="57.3073%" y="133" width="0.2654%" height="15" fill="rgb(211,96,35)"/><text x="57.5573%" y="143.50"></text></g><g><title>param_env (163,422 samples, 0.16%)</title><rect x="57.4122%" y="117" width="0.1606%" height="15" fill="rgb(253,215,40)"/><text x="57.6622%" y="127.50"></text></g><g><title>trait_impls_of (601,670 samples, 0.59%)</title><rect x="57.5920%" y="133" width="0.5911%" height="15" fill="rgb(211,81,21)"/><text x="57.8420%" y="143.50"></text></g><g><title>implementations_of_trait (193,185 samples, 0.19%)</title><rect x="57.9933%" y="117" width="0.1898%" height="15" fill="rgb(208,190,38)"/><text x="58.2433%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (139,382 samples, 0.14%)</title><rect x="58.0461%" y="101" width="0.1369%" height="15" fill="rgb(235,213,38)"/><text x="58.2961%" y="111.50"></text></g><g><title>evaluate_obligation (2,772,622 samples, 2.72%)</title><rect x="55.4599%" y="149" width="2.7239%" height="15" fill="rgb(237,122,38)"/><text x="55.7099%" y="159.50">ev..</text></g><g><title>fn_sig (226,933 samples, 0.22%)</title><rect x="58.2070%" y="149" width="0.2229%" height="15" fill="rgb(244,218,35)"/><text x="58.4570%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (199,503 samples, 0.20%)</title><rect x="58.2340%" y="133" width="0.1960%" height="15" fill="rgb(240,68,47)"/><text x="58.4840%" y="143.50"></text></g><g><title>generics_of (200,282 samples, 0.20%)</title><rect x="58.4300%" y="149" width="0.1968%" height="15" fill="rgb(210,16,53)"/><text x="58.6800%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (150,812 samples, 0.15%)</title><rect x="58.4786%" y="133" width="0.1482%" height="15" fill="rgb(235,124,12)"/><text x="58.7286%" y="143.50"></text></g><g><title>impl_item_implementor_ids (189,491 samples, 0.19%)</title><rect x="58.6267%" y="149" width="0.1862%" height="15" fill="rgb(224,169,11)"/><text x="58.8767%" y="159.50"></text></g><g><title>associated_items (167,411 samples, 0.16%)</title><rect x="58.6484%" y="133" width="0.1645%" height="15" fill="rgb(250,166,2)"/><text x="58.8984%" y="143.50"></text></g><g><title>impl_trait_ref (157,633 samples, 0.15%)</title><rect x="58.8230%" y="149" width="0.1549%" height="15" fill="rgb(242,216,29)"/><text x="59.0730%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (140,002 samples, 0.14%)</title><rect x="58.8403%" y="133" width="0.1375%" height="15" fill="rgb(230,116,27)"/><text x="59.0903%" y="143.50"></text></g><g><title>item_attrs (146,542 samples, 0.14%)</title><rect x="59.0116%" y="149" width="0.1440%" height="15" fill="rgb(228,99,48)"/><text x="59.2616%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (139,762 samples, 0.14%)</title><rect x="59.0183%" y="133" width="0.1373%" height="15" fill="rgb(253,11,6)"/><text x="59.2683%" y="143.50"></text></g><g><title>evaluate_obligation (208,323 samples, 0.20%)</title><rect x="59.6017%" y="133" width="0.2047%" height="15" fill="rgb(247,143,39)"/><text x="59.8517%" y="143.50"></text></g><g><title>method_autoderef_steps (587,576 samples, 0.58%)</title><rect x="59.2441%" y="149" width="0.5773%" height="15" fill="rgb(236,97,10)"/><text x="59.4941%" y="159.50"></text></g><g><title>explicit_predicates_of (266,394 samples, 0.26%)</title><rect x="60.1291%" y="117" width="0.2617%" height="15" fill="rgb(233,208,19)"/><text x="60.3791%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (228,332 samples, 0.22%)</title><rect x="60.1665%" y="101" width="0.2243%" height="15" fill="rgb(216,164,2)"/><text x="60.4165%" y="111.50"></text></g><g><title>predicates_of (600,947 samples, 0.59%)</title><rect x="59.8650%" y="149" width="0.5904%" height="15" fill="rgb(220,129,5)"/><text x="60.1150%" y="159.50"></text></g><g><title>predicates_defined_on (450,227 samples, 0.44%)</title><rect x="60.0131%" y="133" width="0.4423%" height="15" fill="rgb(242,17,10)"/><text x="60.2631%" y="143.50"></text></g><g><title>type_of (123,230 samples, 0.12%)</title><rect x="60.5134%" y="149" width="0.1211%" height="15" fill="rgb(242,107,0)"/><text x="60.7634%" y="159.50"></text></g><g><title>associated_item (142,133 samples, 0.14%)</title><rect x="61.3448%" y="117" width="0.1396%" height="15" fill="rgb(251,28,31)"/><text x="61.5948%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (106,371 samples, 0.10%)</title><rect x="61.3800%" y="101" width="0.1045%" height="15" fill="rgb(233,223,10)"/><text x="61.6300%" y="111.50"></text></g><g><title>associated_items (203,124 samples, 0.20%)</title><rect x="61.2935%" y="133" width="0.1996%" height="15" fill="rgb(215,21,27)"/><text x="61.5435%" y="143.50"></text></g><g><title>evaluate_obligation (309,912 samples, 0.30%)</title><rect x="61.5335%" y="133" width="0.3045%" height="15" fill="rgb(232,23,21)"/><text x="61.7835%" y="143.50"></text></g><g><title>is_copy_raw (136,202 samples, 0.13%)</title><rect x="61.9024%" y="133" width="0.1338%" height="15" fill="rgb(244,5,23)"/><text x="62.1524%" y="143.50"></text></g><g><title>evaluate_obligation (120,462 samples, 0.12%)</title><rect x="61.9179%" y="117" width="0.1183%" height="15" fill="rgb(226,81,46)"/><text x="62.1679%" y="127.50"></text></g><g><title>typeck (1,689,719 samples, 1.66%)</title><rect x="60.6345%" y="149" width="1.6601%" height="15" fill="rgb(247,70,30)"/><text x="60.8845%" y="159.50"></text></g><g><title>item_bodies_checking (30,051,017 samples, 29.52%)</title><rect x="32.8321%" y="197" width="29.5234%" height="15" fill="rgb(212,68,19)"/><text x="33.0821%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,047,527 samples, 29.52%)</title><rect x="32.8355%" y="181" width="29.5200%" height="15" fill="rgb(240,187,13)"/><text x="33.0855%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (30,022,267 samples, 29.50%)</title><rect x="32.8603%" y="165" width="29.4952%" height="15" fill="rgb(223,113,26)"/><text x="33.1103%" y="175.50">typeck</text></g><g><title>impl_trait_ref (272,092 samples, 0.27%)</title><rect x="62.5770%" y="117" width="0.2673%" height="15" fill="rgb(206,192,2)"/><text x="62.8270%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (252,992 samples, 0.25%)</title><rect x="62.5957%" y="101" width="0.2486%" height="15" fill="rgb(241,108,4)"/><text x="62.8457%" y="111.50"></text></g><g><title>adt_destructor (481,966 samples, 0.47%)</title><rect x="62.3955%" y="165" width="0.4735%" height="15" fill="rgb(247,173,49)"/><text x="62.6455%" y="175.50"></text></g><g><title>coherent_trait (477,875 samples, 0.47%)</title><rect x="62.3995%" y="149" width="0.4695%" height="15" fill="rgb(224,114,35)"/><text x="62.6495%" y="159.50"></text></g><g><title>specialization_graph_of (474,285 samples, 0.47%)</title><rect x="62.4030%" y="133" width="0.4660%" height="15" fill="rgb(245,159,27)"/><text x="62.6530%" y="143.50"></text></g><g><title>item_types_checking (533,696 samples, 0.52%)</title><rect x="62.3555%" y="197" width="0.5243%" height="15" fill="rgb(245,172,44)"/><text x="62.6055%" y="207.50"></text></g><g><title>check_mod_item_types (532,226 samples, 0.52%)</title><rect x="62.3570%" y="181" width="0.5229%" height="15" fill="rgb(236,23,11)"/><text x="62.6070%" y="191.50"></text></g><g><title>fn_sig (202,714 samples, 0.20%)</title><rect x="62.9747%" y="165" width="0.1992%" height="15" fill="rgb(205,117,38)"/><text x="63.2247%" y="175.50"></text></g><g><title>generics_of (112,060 samples, 0.11%)</title><rect x="63.1739%" y="165" width="0.1101%" height="15" fill="rgb(237,72,25)"/><text x="63.4239%" y="175.50"></text></g><g><title>predicates_of (223,412 samples, 0.22%)</title><rect x="63.2845%" y="165" width="0.2195%" height="15" fill="rgb(244,70,9)"/><text x="63.5345%" y="175.50"></text></g><g><title>predicates_defined_on (211,472 samples, 0.21%)</title><rect x="63.2963%" y="149" width="0.2078%" height="15" fill="rgb(217,125,39)"/><text x="63.5463%" y="159.50"></text></g><g><title>inferred_outlives_of (132,732 samples, 0.13%)</title><rect x="63.3736%" y="133" width="0.1304%" height="15" fill="rgb(235,36,10)"/><text x="63.6236%" y="143.50"></text></g><g><title>inferred_outlives_crate (122,532 samples, 0.12%)</title><rect x="63.3836%" y="117" width="0.1204%" height="15" fill="rgb(251,123,47)"/><text x="63.6336%" y="127.50"></text></g><g><title>type_collecting (681,868 samples, 0.67%)</title><rect x="62.8808%" y="197" width="0.6699%" height="15" fill="rgb(221,13,13)"/><text x="63.1308%" y="207.50"></text></g><g><title>collect_mod_item_types (674,878 samples, 0.66%)</title><rect x="62.8877%" y="181" width="0.6630%" height="15" fill="rgb(238,131,9)"/><text x="63.1377%" y="191.50"></text></g><g><title>evaluate_obligation (139,682 samples, 0.14%)</title><rect x="63.9123%" y="165" width="0.1372%" height="15" fill="rgb(211,50,8)"/><text x="64.1623%" y="175.50"></text></g><g><title>region_scope_tree (170,411 samples, 0.17%)</title><rect x="64.1641%" y="165" width="0.1674%" height="15" fill="rgb(245,182,24)"/><text x="64.4141%" y="175.50"></text></g><g><title>check_impl_item_well_formed (752,788 samples, 0.74%)</title><rect x="63.6097%" y="181" width="0.7396%" height="15" fill="rgb(242,14,37)"/><text x="63.8597%" y="191.50"></text></g><g><title>adt_sized_constraint (179,282 samples, 0.18%)</title><rect x="64.7259%" y="149" width="0.1761%" height="15" fill="rgb(246,228,12)"/><text x="64.9759%" y="159.50"></text></g><g><title>evaluate_obligation (293,423 samples, 0.29%)</title><rect x="64.6539%" y="165" width="0.2883%" height="15" fill="rgb(213,55,15)"/><text x="64.9039%" y="175.50"></text></g><g><title>param_env (137,071 samples, 0.13%)</title><rect x="65.0320%" y="165" width="0.1347%" height="15" fill="rgb(209,9,3)"/><text x="65.2820%" y="175.50"></text></g><g><title>analysis (65,682,186 samples, 64.53%)</title><rect x="0.6992%" y="229" width="64.5290%" height="15" fill="rgb(230,59,30)"/><text x="0.9492%" y="239.50">analysis</text></g><g><title>type_check_crate (33,038,850 samples, 32.46%)</title><rect x="32.7694%" y="213" width="32.4588%" height="15" fill="rgb(209,121,21)"/><text x="33.0194%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,705,329 samples, 1.68%)</title><rect x="63.5528%" y="197" width="1.6754%" height="15" fill="rgb(220,109,13)"/><text x="63.8028%" y="207.50"></text></g><g><title>check_item_well_formed (894,670 samples, 0.88%)</title><rect x="64.3492%" y="181" width="0.8790%" height="15" fill="rgb(232,18,1)"/><text x="64.5992%" y="191.50"></text></g><g><title>codegen_crate (539,536 samples, 0.53%)</title><rect x="65.2399%" y="229" width="0.5301%" height="15" fill="rgb(215,41,42)"/><text x="65.4899%" y="239.50"></text></g><g><title>AST_validation (160,902 samples, 0.16%)</title><rect x="65.9954%" y="213" width="0.1581%" height="15" fill="rgb(224,123,36)"/><text x="66.2454%" y="223.50"></text></g><g><title>metadata_load_macro (380,736 samples, 0.37%)</title><rect x="80.4393%" y="181" width="0.3741%" height="15" fill="rgb(240,125,3)"/><text x="80.6893%" y="191.50"></text></g><g><title>macro_expand_crate (17,415,855 samples, 17.11%)</title><rect x="66.3162%" y="213" width="17.1101%" height="15" fill="rgb(205,98,50)"/><text x="66.5662%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (17,399,025 samples, 17.09%)</title><rect x="66.3327%" y="197" width="17.0936%" height="15" fill="rgb(205,185,37)"/><text x="66.5827%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,659,571 samples, 2.61%)</title><rect x="80.8134%" y="181" width="2.6129%" height="15" fill="rgb(238,207,15)"/><text x="81.0634%" y="191.50">me..</text></g><g><title>metadata_register_crate (965,980 samples, 0.95%)</title><rect x="82.4772%" y="165" width="0.9490%" height="15" fill="rgb(213,199,42)"/><text x="82.7272%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (280,743 samples, 0.28%)</title><rect x="83.4313%" y="213" width="0.2758%" height="15" fill="rgb(235,201,11)"/><text x="83.6813%" y="223.50"></text></g><g><title>finalize_macro_resolutions (270,973 samples, 0.27%)</title><rect x="83.7506%" y="197" width="0.2662%" height="15" fill="rgb(207,46,11)"/><text x="84.0006%" y="207.50"></text></g><g><title>late_resolve_crate (3,309,087 samples, 3.25%)</title><rect x="84.0168%" y="197" width="3.2510%" height="15" fill="rgb(241,35,35)"/><text x="84.2668%" y="207.50">lat..</text></g><g><title>configure_and_expand (22,021,817 samples, 21.64%)</title><rect x="65.7700%" y="229" width="21.6352%" height="15" fill="rgb(243,32,47)"/><text x="66.0200%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (3,764,122 samples, 3.70%)</title><rect x="83.7072%" y="213" width="3.6980%" height="15" fill="rgb(247,202,23)"/><text x="83.9572%" y="223.50">reso..</text></g><g><title>drop_ast (189,382 samples, 0.19%)</title><rect x="87.4052%" y="229" width="0.1861%" height="15" fill="rgb(219,102,11)"/><text x="87.6552%" y="239.50"></text></g><g><title>early_lint_checks (405,905 samples, 0.40%)</title><rect x="87.6059%" y="229" width="0.3988%" height="15" fill="rgb(243,110,44)"/><text x="87.8559%" y="239.50"></text></g><g><title>free_global_ctxt (2,976,523 samples, 2.92%)</title><rect x="88.0047%" y="229" width="2.9243%" height="15" fill="rgb(222,74,54)"/><text x="88.2547%" y="239.50">fr..</text></g><g><title>generate_crate_metadata (434,135 samples, 0.43%)</title><rect x="90.9290%" y="229" width="0.4265%" height="15" fill="rgb(216,99,12)"/><text x="91.1790%" y="239.50"></text></g><g><title>hir_lowering (2,918,232 samples, 2.87%)</title><rect x="91.3555%" y="229" width="2.8670%" height="15" fill="rgb(226,22,26)"/><text x="91.6055%" y="239.50">hi..</text></g><g><title>parse_crate (4,607,732 samples, 4.53%)</title><rect x="94.2632%" y="229" width="4.5268%" height="15" fill="rgb(217,163,10)"/><text x="94.5132%" y="239.50">parse..</text></g><g><title>prepare_outputs (315,974 samples, 0.31%)</title><rect x="98.7996%" y="229" width="0.3104%" height="15" fill="rgb(213,25,53)"/><text x="99.0496%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (545,436 samples, 0.54%)</title><rect x="99.1100%" y="229" width="0.5359%" height="15" fill="rgb(252,105,26)"/><text x="99.3600%" y="239.50"></text></g><g><title>setup_global_ctxt (110,602 samples, 0.11%)</title><rect x="99.6583%" y="229" width="0.1087%" height="15" fill="rgb(220,39,43)"/><text x="99.9083%" y="239.50"></text></g><g><title>all (101,787,031 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (101,787,031 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (237,223 samples, 0.23%)</title><rect x="99.7669%" y="229" width="0.2331%" height="15" fill="rgb(223,20,43)"/><text x="100.0169%" y="239.50"></text></g></svg></svg>