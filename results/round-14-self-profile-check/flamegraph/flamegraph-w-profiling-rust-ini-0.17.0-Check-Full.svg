<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (503,823 samples, 0.24%)</title><rect x="13.8161%" y="165" width="0.2446%" height="15" fill="rgb(227,0,7)"/><text x="14.0661%" y="175.50"></text></g><g><title>item_attrs (465,877 samples, 0.23%)</title><rect x="14.5583%" y="133" width="0.2261%" height="15" fill="rgb(217,0,24)"/><text x="14.8083%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (448,687 samples, 0.22%)</title><rect x="14.5666%" y="117" width="0.2178%" height="15" fill="rgb(221,193,54)"/><text x="14.8166%" y="127.50"></text></g><g><title>codegen_fn_attrs (655,129 samples, 0.32%)</title><rect x="14.4804%" y="149" width="0.3180%" height="15" fill="rgb(248,212,6)"/><text x="14.7304%" y="159.50"></text></g><g><title>adt_drop_tys (260,863 samples, 0.13%)</title><rect x="17.6769%" y="101" width="0.1266%" height="15" fill="rgb(208,68,35)"/><text x="17.9269%" y="111.50"></text></g><g><title>adt_drop_tys (538,279 samples, 0.26%)</title><rect x="17.6529%" y="117" width="0.2613%" height="15" fill="rgb(232,128,0)"/><text x="17.9029%" y="127.50"></text></g><g><title>needs_drop_raw (2,326,677 samples, 1.13%)</title><rect x="17.5347%" y="133" width="1.1294%" height="15" fill="rgb(207,160,47)"/><text x="17.7847%" y="143.50"></text></g><g><title>is_copy_raw (1,544,937 samples, 0.75%)</title><rect x="17.9142%" y="117" width="0.7499%" height="15" fill="rgb(228,23,34)"/><text x="18.1642%" y="127.50"></text></g><g><title>evaluate_obligation (1,270,576 samples, 0.62%)</title><rect x="18.0474%" y="101" width="0.6168%" height="15" fill="rgb(218,30,26)"/><text x="18.2974%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (405,776 samples, 0.20%)</title><rect x="18.8565%" y="117" width="0.1970%" height="15" fill="rgb(220,122,19)"/><text x="19.1065%" y="127.50"></text></g><g><title>specialization_graph_of (692,488 samples, 0.34%)</title><rect x="19.0901%" y="117" width="0.3361%" height="15" fill="rgb(250,228,42)"/><text x="19.3401%" y="127.50"></text></g><g><title>resolve_instance (1,711,320 samples, 0.83%)</title><rect x="18.6641%" y="133" width="0.8307%" height="15" fill="rgb(240,193,28)"/><text x="18.9141%" y="143.50"></text></g><g><title>thir_body (2,006,074 samples, 0.97%)</title><rect x="19.5261%" y="133" width="0.9738%" height="15" fill="rgb(216,20,37)"/><text x="19.7761%" y="143.50"></text></g><g><title>mir_const (15,369,100 samples, 7.46%)</title><rect x="13.0610%" y="181" width="7.4604%" height="15" fill="rgb(206,188,39)"/><text x="13.3110%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (13,309,784 samples, 6.46%)</title><rect x="14.0606%" y="165" width="6.4607%" height="15" fill="rgb(217,207,13)"/><text x="14.3106%" y="175.50">unsafety..</text></g><g><title>mir_built (11,789,820 samples, 5.72%)</title><rect x="14.7984%" y="149" width="5.7229%" height="15" fill="rgb(231,73,38)"/><text x="15.0484%" y="159.50">mir_bui..</text></g><g><title>mir_promoted (17,128,704 samples, 8.31%)</title><rect x="12.2735%" y="197" width="8.3145%" height="15" fill="rgb(225,20,46)"/><text x="12.5235%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (588,378 samples, 0.29%)</title><rect x="20.5881%" y="197" width="0.2856%" height="15" fill="rgb(210,31,41)"/><text x="20.8381%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (666,318 samples, 0.32%)</title><rect x="20.8737%" y="197" width="0.3234%" height="15" fill="rgb(221,200,47)"/><text x="21.1237%" y="207.50"></text></g><g><title>normalize_projection_ty (419,625 samples, 0.20%)</title><rect x="20.9935%" y="181" width="0.2037%" height="15" fill="rgb(226,26,5)"/><text x="21.2435%" y="191.50"></text></g><g><title>type_op_prove_predicate (3,966,454 samples, 1.93%)</title><rect x="21.3156%" y="197" width="1.9254%" height="15" fill="rgb(249,33,26)"/><text x="21.5656%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (46,738,852 samples, 22.69%)</title><rect x="0.5605%" y="229" width="22.6877%" height="15" fill="rgb(235,183,28)"/><text x="0.8105%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (46,504,118 samples, 22.57%)</title><rect x="0.6744%" y="213" width="22.5737%" height="15" fill="rgb(221,5,38)"/><text x="0.9244%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (243,103 samples, 0.12%)</title><rect x="23.3414%" y="229" width="0.1180%" height="15" fill="rgb(247,18,42)"/><text x="23.5914%" y="239.50"></text></g><g><title>should_inherit_track_caller (339,634 samples, 0.16%)</title><rect x="23.7344%" y="181" width="0.1649%" height="15" fill="rgb(241,131,45)"/><text x="23.9844%" y="191.50"></text></g><g><title>codegen_fn_attrs (566,647 samples, 0.28%)</title><rect x="23.6337%" y="197" width="0.2751%" height="15" fill="rgb(249,31,29)"/><text x="23.8837%" y="207.50"></text></g><g><title>check_mod_attrs (907,110 samples, 0.44%)</title><rect x="23.4685%" y="213" width="0.4403%" height="15" fill="rgb(225,111,53)"/><text x="23.7185%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (566,316 samples, 0.27%)</title><rect x="24.0606%" y="213" width="0.2749%" height="15" fill="rgb(238,160,17)"/><text x="24.3106%" y="223.50"></text></g><g><title>misc_checking_1 (1,860,691 samples, 0.90%)</title><rect x="23.4597%" y="229" width="0.9032%" height="15" fill="rgb(214,148,48)"/><text x="23.7097%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (987,851 samples, 0.48%)</title><rect x="24.3640%" y="213" width="0.4795%" height="15" fill="rgb(232,36,49)"/><text x="24.6140%" y="223.50"></text></g><g><title>check_mod_liveness (837,970 samples, 0.41%)</title><rect x="24.4367%" y="197" width="0.4068%" height="15" fill="rgb(209,103,24)"/><text x="24.6867%" y="207.50"></text></g><g><title>type_uninhabited_from (264,342 samples, 0.13%)</title><rect x="24.7152%" y="181" width="0.1283%" height="15" fill="rgb(229,88,8)"/><text x="24.9652%" y="191.50"></text></g><g><title>misc_checking_2 (2,087,963 samples, 1.01%)</title><rect x="24.3629%" y="229" width="1.0135%" height="15" fill="rgb(213,181,19)"/><text x="24.6129%" y="239.50"></text></g><g><title>match_checking (1,097,862 samples, 0.53%)</title><rect x="24.8435%" y="213" width="0.5329%" height="15" fill="rgb(254,191,54)"/><text x="25.0935%" y="223.50"></text></g><g><title>check_match (1,038,760 samples, 0.50%)</title><rect x="24.8722%" y="197" width="0.5042%" height="15" fill="rgb(241,83,37)"/><text x="25.1222%" y="207.50"></text></g><g><title>check_private_in_public (352,614 samples, 0.17%)</title><rect x="25.3813%" y="213" width="0.1712%" height="15" fill="rgb(233,36,39)"/><text x="25.6313%" y="223.50"></text></g><g><title>death_checking (636,627 samples, 0.31%)</title><rect x="25.5524%" y="213" width="0.3090%" height="15" fill="rgb(226,3,54)"/><text x="25.8024%" y="223.50"></text></g><g><title>param_env (225,063 samples, 0.11%)</title><rect x="26.4328%" y="181" width="0.1092%" height="15" fill="rgb(245,192,40)"/><text x="26.6828%" y="191.50"></text></g><g><title>crate_lints (2,956,823 samples, 1.44%)</title><rect x="25.8622%" y="197" width="1.4353%" height="15" fill="rgb(238,167,29)"/><text x="26.1122%" y="207.50"></text></g><g><title>type_of (1,466,358 samples, 0.71%)</title><rect x="26.5857%" y="181" width="0.7118%" height="15" fill="rgb(232,182,51)"/><text x="26.8357%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (974,012 samples, 0.47%)</title><rect x="26.8247%" y="165" width="0.4728%" height="15" fill="rgb(231,60,39)"/><text x="27.0747%" y="175.50"></text></g><g><title>lint_checking (3,892,224 samples, 1.89%)</title><rect x="25.8615%" y="213" width="1.8893%" height="15" fill="rgb(208,69,12)"/><text x="26.1115%" y="223.50">l..</text></g><g><title>module_lints (933,871 samples, 0.45%)</title><rect x="27.2975%" y="197" width="0.4533%" height="15" fill="rgb(235,93,37)"/><text x="27.5475%" y="207.50"></text></g><g><title>lint_mod (930,620 samples, 0.45%)</title><rect x="27.2991%" y="181" width="0.4517%" height="15" fill="rgb(213,116,39)"/><text x="27.5491%" y="191.50"></text></g><g><title>layout_of (209,662 samples, 0.10%)</title><rect x="27.6490%" y="165" width="0.1018%" height="15" fill="rgb(222,207,29)"/><text x="27.8990%" y="175.50"></text></g><g><title>privacy_access_levels (497,916 samples, 0.24%)</title><rect x="27.7508%" y="213" width="0.2417%" height="15" fill="rgb(206,96,30)"/><text x="28.0008%" y="223.50"></text></g><g><title>privacy_checking_modules (1,573,808 samples, 0.76%)</title><rect x="27.9925%" y="213" width="0.7639%" height="15" fill="rgb(218,138,4)"/><text x="28.2425%" y="223.50"></text></g><g><title>check_mod_privacy (1,571,958 samples, 0.76%)</title><rect x="27.9934%" y="197" width="0.7630%" height="15" fill="rgb(250,191,14)"/><text x="28.2434%" y="207.50"></text></g><g><title>misc_checking_3 (6,978,749 samples, 3.39%)</title><rect x="25.3764%" y="229" width="3.3876%" height="15" fill="rgb(239,60,40)"/><text x="25.6264%" y="239.50">mis..</text></g><g><title>adt_destructor (319,424 samples, 0.16%)</title><rect x="28.8469%" y="181" width="0.1551%" height="15" fill="rgb(206,27,48)"/><text x="29.0969%" y="191.50"></text></g><g><title>coherent_trait (315,894 samples, 0.15%)</title><rect x="28.8486%" y="165" width="0.1533%" height="15" fill="rgb(225,35,8)"/><text x="29.0986%" y="175.50"></text></g><g><title>specialization_graph_of (314,924 samples, 0.15%)</title><rect x="28.8491%" y="149" width="0.1529%" height="15" fill="rgb(250,213,24)"/><text x="29.0991%" y="159.50"></text></g><g><title>impl_parent (3,360,043 samples, 1.63%)</title><rect x="31.6664%" y="165" width="1.6310%" height="15" fill="rgb(247,123,22)"/><text x="31.9164%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,870,113 samples, 0.91%)</title><rect x="32.3896%" y="149" width="0.9078%" height="15" fill="rgb(231,138,38)"/><text x="32.6396%" y="159.50"></text></g><g><title>impl_trait_ref (6,741,804 samples, 3.27%)</title><rect x="33.2981%" y="165" width="3.2726%" height="15" fill="rgb(231,145,46)"/><text x="33.5481%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,278,686 samples, 2.56%)</title><rect x="34.0083%" y="149" width="2.5623%" height="15" fill="rgb(251,118,11)"/><text x="34.2583%" y="159.50">me..</text></g><g><title>predicates_of (249,421 samples, 0.12%)</title><rect x="36.6357%" y="165" width="0.1211%" height="15" fill="rgb(217,147,25)"/><text x="36.8857%" y="175.50"></text></g><g><title>trait_impls_of (1,178,403 samples, 0.57%)</title><rect x="36.7578%" y="165" width="0.5720%" height="15" fill="rgb(247,81,37)"/><text x="37.0078%" y="175.50"></text></g><g><title>implementations_of_trait (352,223 samples, 0.17%)</title><rect x="37.1588%" y="149" width="0.1710%" height="15" fill="rgb(209,12,38)"/><text x="37.4088%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (265,273 samples, 0.13%)</title><rect x="37.2010%" y="133" width="0.1288%" height="15" fill="rgb(227,1,9)"/><text x="37.4510%" y="143.50"></text></g><g><title>coherent_trait (17,539,865 samples, 8.51%)</title><rect x="28.8289%" y="197" width="8.5141%" height="15" fill="rgb(248,47,43)"/><text x="29.0789%" y="207.50">coherent_tra..</text></g><g><title>specialization_graph_of (17,147,561 samples, 8.32%)</title><rect x="29.0193%" y="181" width="8.3237%" height="15" fill="rgb(221,10,30)"/><text x="29.2693%" y="191.50">specializati..</text></g><g><title>coherence_checking (17,641,777 samples, 8.56%)</title><rect x="28.8172%" y="213" width="8.5636%" height="15" fill="rgb(210,229,1)"/><text x="29.0672%" y="223.50">coherence_ch..</text></g><g><title>associated_item (458,404 samples, 0.22%)</title><rect x="54.3739%" y="149" width="0.2225%" height="15" fill="rgb(222,148,37)"/><text x="54.6239%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (372,943 samples, 0.18%)</title><rect x="54.4154%" y="133" width="0.1810%" height="15" fill="rgb(234,67,33)"/><text x="54.6654%" y="143.50"></text></g><g><title>associated_items (682,218 samples, 0.33%)</title><rect x="54.2833%" y="165" width="0.3312%" height="15" fill="rgb(247,98,35)"/><text x="54.5333%" y="175.50"></text></g><g><title>adt_dtorck_constraint (331,673 samples, 0.16%)</title><rect x="54.9582%" y="133" width="0.1610%" height="15" fill="rgb(247,138,52)"/><text x="55.2082%" y="143.50"></text></g><g><title>dropck_outlives (944,340 samples, 0.46%)</title><rect x="54.6718%" y="165" width="0.4584%" height="15" fill="rgb(213,79,30)"/><text x="54.9218%" y="175.50"></text></g><g><title>adt_dtorck_constraint (460,326 samples, 0.22%)</title><rect x="54.9067%" y="149" width="0.2234%" height="15" fill="rgb(246,177,23)"/><text x="55.1567%" y="159.50"></text></g><g><title>adt_sized_constraint (223,961 samples, 0.11%)</title><rect x="56.0082%" y="149" width="0.1087%" height="15" fill="rgb(230,62,27)"/><text x="56.2582%" y="159.50"></text></g><g><title>predicates_of (243,472 samples, 0.12%)</title><rect x="56.2059%" y="149" width="0.1182%" height="15" fill="rgb(216,154,8)"/><text x="56.4559%" y="159.50"></text></g><g><title>trait_impls_of (392,524 samples, 0.19%)</title><rect x="56.3729%" y="149" width="0.1905%" height="15" fill="rgb(244,35,45)"/><text x="56.6229%" y="159.50"></text></g><g><title>evaluate_obligation (2,956,049 samples, 1.43%)</title><rect x="55.1302%" y="165" width="1.4349%" height="15" fill="rgb(251,115,12)"/><text x="55.3802%" y="175.50"></text></g><g><title>fn_sig (224,590 samples, 0.11%)</title><rect x="56.5866%" y="165" width="0.1090%" height="15" fill="rgb(240,54,50)"/><text x="56.8366%" y="175.50"></text></g><g><title>item_attrs (258,873 samples, 0.13%)</title><rect x="56.8977%" y="165" width="0.1257%" height="15" fill="rgb(233,84,52)"/><text x="57.1477%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (247,353 samples, 0.12%)</title><rect x="56.9033%" y="149" width="0.1201%" height="15" fill="rgb(207,117,47)"/><text x="57.1533%" y="159.50"></text></g><g><title>method_autoderef_steps (656,470 samples, 0.32%)</title><rect x="57.0916%" y="165" width="0.3187%" height="15" fill="rgb(249,43,39)"/><text x="57.3416%" y="175.50"></text></g><g><title>evaluate_obligation (324,416 samples, 0.16%)</title><rect x="57.2528%" y="149" width="0.1575%" height="15" fill="rgb(209,38,44)"/><text x="57.5028%" y="159.50"></text></g><g><title>predicates_of (550,786 samples, 0.27%)</title><rect x="57.4801%" y="165" width="0.2674%" height="15" fill="rgb(236,212,23)"/><text x="57.7301%" y="175.50"></text></g><g><title>predicates_defined_on (382,654 samples, 0.19%)</title><rect x="57.5618%" y="149" width="0.1857%" height="15" fill="rgb(242,79,21)"/><text x="57.8118%" y="159.50"></text></g><g><title>evaluate_obligation (427,104 samples, 0.21%)</title><rect x="60.8126%" y="149" width="0.2073%" height="15" fill="rgb(211,96,35)"/><text x="61.0626%" y="159.50"></text></g><g><title>typeck (7,071,938 samples, 3.43%)</title><rect x="57.8640%" y="165" width="3.4328%" height="15" fill="rgb(253,215,40)"/><text x="58.1140%" y="175.50">typ..</text></g><g><title>item_bodies_checking (49,318,820 samples, 23.94%)</title><rect x="37.4038%" y="213" width="23.9400%" height="15" fill="rgb(211,81,21)"/><text x="37.6538%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (49,315,110 samples, 23.94%)</title><rect x="37.4056%" y="197" width="23.9382%" height="15" fill="rgb(208,190,38)"/><text x="37.6556%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (49,159,969 samples, 23.86%)</title><rect x="37.4809%" y="181" width="23.8629%" height="15" fill="rgb(235,213,38)"/><text x="37.7309%" y="191.50">typeck</text></g><g><title>mir_borrowck (684,748 samples, 0.33%)</title><rect x="63.5453%" y="149" width="0.3324%" height="15" fill="rgb(237,122,38)"/><text x="63.7953%" y="159.50"></text></g><g><title>needs_drop_raw (259,353 samples, 0.13%)</title><rect x="64.2425%" y="85" width="0.1259%" height="15" fill="rgb(244,218,35)"/><text x="64.4925%" y="95.50"></text></g><g><title>associated_item (519,125 samples, 0.25%)</title><rect x="66.2630%" y="53" width="0.2520%" height="15" fill="rgb(240,68,47)"/><text x="66.5130%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (480,195 samples, 0.23%)</title><rect x="66.2818%" y="37" width="0.2331%" height="15" fill="rgb(210,16,53)"/><text x="66.5318%" y="47.50"></text></g><g><title>associated_items (595,216 samples, 0.29%)</title><rect x="66.2316%" y="69" width="0.2889%" height="15" fill="rgb(235,124,12)"/><text x="66.4816%" y="79.50"></text></g><g><title>dropck_outlives (467,696 samples, 0.23%)</title><rect x="66.5339%" y="69" width="0.2270%" height="15" fill="rgb(224,169,11)"/><text x="66.7839%" y="79.50"></text></g><g><title>adt_dtorck_constraint (362,734 samples, 0.18%)</title><rect x="66.5848%" y="53" width="0.1761%" height="15" fill="rgb(250,166,2)"/><text x="66.8348%" y="63.50"></text></g><g><title>evaluate_obligation (774,091 samples, 0.38%)</title><rect x="66.7609%" y="69" width="0.3758%" height="15" fill="rgb(242,216,29)"/><text x="67.0109%" y="79.50"></text></g><g><title>method_autoderef_steps (218,512 samples, 0.11%)</title><rect x="67.2813%" y="69" width="0.1061%" height="15" fill="rgb(230,116,27)"/><text x="67.5313%" y="79.50"></text></g><g><title>mir_built (7,031,038 samples, 3.41%)</title><rect x="64.1128%" y="101" width="3.4130%" height="15" fill="rgb(228,99,48)"/><text x="64.3628%" y="111.50">mir..</text></g><g><title>typeck (6,275,030 samples, 3.05%)</title><rect x="64.4798%" y="85" width="3.0460%" height="15" fill="rgb(253,11,6)"/><text x="64.7298%" y="95.50">typ..</text></g><g><title>mir_const (7,599,276 samples, 3.69%)</title><rect x="63.9409%" y="133" width="3.6888%" height="15" fill="rgb(247,143,39)"/><text x="64.1909%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (7,390,384 samples, 3.59%)</title><rect x="64.0423%" y="117" width="3.5874%" height="15" fill="rgb(236,97,10)"/><text x="64.2923%" y="127.50">unsa..</text></g><g><title>unsafety_check_result (214,233 samples, 0.10%)</title><rect x="67.5257%" y="101" width="0.1040%" height="15" fill="rgb(233,208,19)"/><text x="67.7757%" y="111.50"></text></g><g><title>mir_promoted (7,741,357 samples, 3.76%)</title><rect x="63.8777%" y="149" width="3.7578%" height="15" fill="rgb(216,164,2)"/><text x="64.1277%" y="159.50">mir_..</text></g><g><title>type_of (11,212,905 samples, 5.44%)</title><rect x="62.5292%" y="181" width="5.4429%" height="15" fill="rgb(220,129,5)"/><text x="62.7792%" y="191.50">type_of</text></g><g><title>mir_borrowck (11,132,444 samples, 5.40%)</title><rect x="62.5682%" y="165" width="5.4038%" height="15" fill="rgb(242,17,10)"/><text x="62.8182%" y="175.50">mir_bor..</text></g><g><title>type_op_prove_predicate (486,368 samples, 0.24%)</title><rect x="67.7360%" y="149" width="0.2361%" height="15" fill="rgb(242,107,0)"/><text x="67.9860%" y="159.50"></text></g><g><title>item_types_checking (13,782,194 samples, 6.69%)</title><rect x="61.3438%" y="213" width="6.6901%" height="15" fill="rgb(251,28,31)"/><text x="61.5938%" y="223.50">item_type..</text></g><g><title>check_mod_item_types (13,778,494 samples, 6.69%)</title><rect x="61.3456%" y="197" width="6.6883%" height="15" fill="rgb(233,223,10)"/><text x="61.5956%" y="207.50">check_mod..</text></g><g><title>late_bound_vars_map (264,223 samples, 0.13%)</title><rect x="68.5250%" y="165" width="0.1283%" height="15" fill="rgb(215,21,27)"/><text x="68.7750%" y="175.50"></text></g><g><title>resolve_lifetimes (245,763 samples, 0.12%)</title><rect x="68.5339%" y="149" width="0.1193%" height="15" fill="rgb(232,23,21)"/><text x="68.7839%" y="159.50"></text></g><g><title>fn_sig (882,169 samples, 0.43%)</title><rect x="68.2486%" y="181" width="0.4282%" height="15" fill="rgb(244,5,23)"/><text x="68.4986%" y="191.50"></text></g><g><title>is_late_bound_map (230,205 samples, 0.11%)</title><rect x="68.7790%" y="165" width="0.1117%" height="15" fill="rgb(226,81,46)"/><text x="69.0290%" y="175.50"></text></g><g><title>resolve_lifetimes (214,104 samples, 0.10%)</title><rect x="68.7869%" y="149" width="0.1039%" height="15" fill="rgb(247,70,30)"/><text x="69.0369%" y="159.50"></text></g><g><title>named_region_map (492,817 samples, 0.24%)</title><rect x="68.8908%" y="165" width="0.2392%" height="15" fill="rgb(212,68,19)"/><text x="69.1408%" y="175.50"></text></g><g><title>resolve_lifetimes (465,497 samples, 0.23%)</title><rect x="68.9040%" y="149" width="0.2260%" height="15" fill="rgb(240,187,13)"/><text x="69.1540%" y="159.50"></text></g><g><title>lint_levels (221,513 samples, 0.11%)</title><rect x="69.0225%" y="133" width="0.1075%" height="15" fill="rgb(223,113,26)"/><text x="69.2725%" y="143.50"></text></g><g><title>generics_of (955,545 samples, 0.46%)</title><rect x="68.6768%" y="181" width="0.4638%" height="15" fill="rgb(206,192,2)"/><text x="68.9268%" y="191.50"></text></g><g><title>explicit_predicates_of (316,743 samples, 0.15%)</title><rect x="69.2939%" y="149" width="0.1538%" height="15" fill="rgb(241,108,4)"/><text x="69.5439%" y="159.50"></text></g><g><title>predicates_of (983,641 samples, 0.48%)</title><rect x="69.1839%" y="181" width="0.4775%" height="15" fill="rgb(247,173,49)"/><text x="69.4339%" y="191.50"></text></g><g><title>predicates_defined_on (897,419 samples, 0.44%)</title><rect x="69.2257%" y="165" width="0.4356%" height="15" fill="rgb(224,114,35)"/><text x="69.4757%" y="175.50"></text></g><g><title>inferred_outlives_of (440,275 samples, 0.21%)</title><rect x="69.4476%" y="149" width="0.2137%" height="15" fill="rgb(245,159,27)"/><text x="69.6976%" y="159.50"></text></g><g><title>inferred_outlives_crate (413,495 samples, 0.20%)</title><rect x="69.4606%" y="133" width="0.2007%" height="15" fill="rgb(245,172,44)"/><text x="69.7106%" y="143.50"></text></g><g><title>type_of (227,453 samples, 0.11%)</title><rect x="69.5510%" y="117" width="0.1104%" height="15" fill="rgb(236,23,11)"/><text x="69.8010%" y="127.50"></text></g><g><title>type_collecting (3,509,400 samples, 1.70%)</title><rect x="68.0351%" y="213" width="1.7035%" height="15" fill="rgb(205,117,38)"/><text x="68.2851%" y="223.50"></text></g><g><title>collect_mod_item_types (3,502,900 samples, 1.70%)</title><rect x="68.0383%" y="197" width="1.7004%" height="15" fill="rgb(237,72,25)"/><text x="68.2883%" y="207.50"></text></g><g><title>evaluate_obligation (644,138 samples, 0.31%)</title><rect x="71.6637%" y="181" width="0.3127%" height="15" fill="rgb(244,70,9)"/><text x="71.9137%" y="191.50"></text></g><g><title>implied_outlives_bounds (392,601 samples, 0.19%)</title><rect x="71.9832%" y="181" width="0.1906%" height="15" fill="rgb(217,125,39)"/><text x="72.2332%" y="191.50"></text></g><g><title>object_safety_violations (423,755 samples, 0.21%)</title><rect x="72.1738%" y="181" width="0.2057%" height="15" fill="rgb(235,36,10)"/><text x="72.4238%" y="191.50"></text></g><g><title>param_env (572,685 samples, 0.28%)</title><rect x="72.3795%" y="181" width="0.2780%" height="15" fill="rgb(251,123,47)"/><text x="72.6295%" y="191.50"></text></g><g><title>region_scope_tree (722,390 samples, 0.35%)</title><rect x="72.6822%" y="181" width="0.3507%" height="15" fill="rgb(221,13,13)"/><text x="72.9322%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,546,657 samples, 3.18%)</title><rect x="69.9061%" y="197" width="3.1778%" height="15" fill="rgb(238,131,9)"/><text x="70.1561%" y="207.50">che..</text></g><g><title>adt_sized_constraint (240,402 samples, 0.12%)</title><rect x="73.7853%" y="165" width="0.1167%" height="15" fill="rgb(211,50,8)"/><text x="74.0353%" y="175.50"></text></g><g><title>adt_sized_constraint (272,862 samples, 0.13%)</title><rect x="73.7730%" y="181" width="0.1325%" height="15" fill="rgb(245,182,24)"/><text x="74.0230%" y="191.50"></text></g><g><title>evaluate_obligation (568,270 samples, 0.28%)</title><rect x="73.9078%" y="181" width="0.2758%" height="15" fill="rgb(242,14,37)"/><text x="74.1578%" y="191.50"></text></g><g><title>param_env (257,751 samples, 0.13%)</title><rect x="74.2593%" y="181" width="0.1251%" height="15" fill="rgb(246,228,12)"/><text x="74.5093%" y="191.50"></text></g><g><title>analysis (152,817,586 samples, 74.18%)</title><rect x="0.3446%" y="245" width="74.1797%" height="15" fill="rgb(213,55,15)"/><text x="0.5946%" y="255.50">analysis</text></g><g><title>type_check_crate (94,270,832 samples, 45.76%)</title><rect x="28.7640%" y="229" width="45.7603%" height="15" fill="rgb(209,9,3)"/><text x="29.0140%" y="239.50">type_check_crate</text></g><g><title>wf_checking (9,848,359 samples, 4.78%)</title><rect x="69.7438%" y="213" width="4.7805%" height="15" fill="rgb(230,59,30)"/><text x="69.9938%" y="223.50">wf_che..</text></g><g><title>check_item_well_formed (2,967,360 samples, 1.44%)</title><rect x="73.0839%" y="197" width="1.4404%" height="15" fill="rgb(209,121,21)"/><text x="73.3339%" y="207.50"></text></g><g><title>codegen_crate (563,566 samples, 0.27%)</title><rect x="74.5308%" y="245" width="0.2736%" height="15" fill="rgb(220,109,13)"/><text x="74.7808%" y="255.50"></text></g><g><title>metadata_load_macro (218,785 samples, 0.11%)</title><rect x="82.5247%" y="197" width="0.1062%" height="15" fill="rgb(232,18,1)"/><text x="82.7747%" y="207.50"></text></g><g><title>macro_expand_crate (18,869,480 samples, 9.16%)</title><rect x="75.0883%" y="229" width="9.1595%" height="15" fill="rgb(215,41,42)"/><text x="75.3383%" y="239.50">macro_expand_..</text></g><g><title>expand_crate (18,855,880 samples, 9.15%)</title><rect x="75.0949%" y="213" width="9.1529%" height="15" fill="rgb(224,123,36)"/><text x="75.3449%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (3,331,006 samples, 1.62%)</title><rect x="82.6309%" y="197" width="1.6169%" height="15" fill="rgb(240,125,3)"/><text x="82.8809%" y="207.50"></text></g><g><title>metadata_register_crate (1,515,026 samples, 0.74%)</title><rect x="83.5124%" y="181" width="0.7354%" height="15" fill="rgb(205,98,50)"/><text x="83.7624%" y="191.50"></text></g><g><title>metadata_register_crate (469,814 samples, 0.23%)</title><rect x="84.0197%" y="165" width="0.2281%" height="15" fill="rgb(205,185,37)"/><text x="84.2697%" y="175.50"></text></g><g><title>metadata_register_crate (236,783 samples, 0.11%)</title><rect x="84.1328%" y="149" width="0.1149%" height="15" fill="rgb(238,207,15)"/><text x="84.3828%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (782,999 samples, 0.38%)</title><rect x="84.2520%" y="229" width="0.3801%" height="15" fill="rgb(213,199,42)"/><text x="84.5020%" y="239.50"></text></g><g><title>finalize_macro_resolutions (222,522 samples, 0.11%)</title><rect x="84.6603%" y="213" width="0.1080%" height="15" fill="rgb(235,201,11)"/><text x="84.9103%" y="223.50"></text></g><g><title>late_resolve_crate (2,408,367 samples, 1.17%)</title><rect x="84.7683%" y="213" width="1.1691%" height="15" fill="rgb(207,46,11)"/><text x="85.0183%" y="223.50"></text></g><g><title>configure_and_expand (23,098,148 samples, 11.21%)</title><rect x="74.8044%" y="245" width="11.2121%" height="15" fill="rgb(241,35,35)"/><text x="75.0544%" y="255.50">configure_and_exp..</text></g><g><title>resolve_crate (2,852,052 samples, 1.38%)</title><rect x="84.6321%" y="229" width="1.3844%" height="15" fill="rgb(243,32,47)"/><text x="84.8821%" y="239.50"></text></g><g><title>drop_ast (329,494 samples, 0.16%)</title><rect x="86.0165%" y="245" width="0.1599%" height="15" fill="rgb(247,202,23)"/><text x="86.2665%" y="255.50"></text></g><g><title>early_lint_checks (538,186 samples, 0.26%)</title><rect x="86.1868%" y="245" width="0.2612%" height="15" fill="rgb(219,102,11)"/><text x="86.4368%" y="255.50"></text></g><g><title>free_global_ctxt (4,523,330 samples, 2.20%)</title><rect x="86.4481%" y="245" width="2.1957%" height="15" fill="rgb(243,110,44)"/><text x="86.6981%" y="255.50">f..</text></g><g><title>generate_crate_metadata (1,636,328 samples, 0.79%)</title><rect x="88.6437%" y="245" width="0.7943%" height="15" fill="rgb(222,74,54)"/><text x="88.8937%" y="255.50"></text></g><g><title>hir_lowering (4,431,700 samples, 2.15%)</title><rect x="89.4380%" y="245" width="2.1512%" height="15" fill="rgb(216,99,12)"/><text x="89.6880%" y="255.50">h..</text></g><g><title>parse_crate (15,571,574 samples, 7.56%)</title><rect x="91.6185%" y="245" width="7.5586%" height="15" fill="rgb(226,22,26)"/><text x="91.8685%" y="255.50">parse_crate</text></g><g><title>self_profile_alloc_query_strings (1,086,982 samples, 0.53%)</title><rect x="99.2689%" y="245" width="0.5276%" height="15" fill="rgb(217,163,10)"/><text x="99.5189%" y="255.50"></text></g><g><title>all (206,009,999 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (206,009,999 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (316,374 samples, 0.15%)</title><rect x="99.8464%" y="245" width="0.1536%" height="15" fill="rgb(220,39,43)"/><text x="100.0964%" y="255.50"></text></g></svg></svg>