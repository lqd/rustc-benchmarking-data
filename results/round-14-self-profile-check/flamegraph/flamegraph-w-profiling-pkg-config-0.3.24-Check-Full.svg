<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (211,700 samples, 0.13%)</title><rect x="14.0594%" y="149" width="0.1336%" height="15" fill="rgb(227,0,7)"/><text x="14.3094%" y="159.50"></text></g><g><title>param_env (494,399 samples, 0.31%)</title><rect x="15.6941%" y="117" width="0.3120%" height="15" fill="rgb(217,0,24)"/><text x="15.9441%" y="127.50"></text></g><g><title>item_attrs (565,487 samples, 0.36%)</title><rect x="16.6933%" y="85" width="0.3569%" height="15" fill="rgb(221,193,54)"/><text x="16.9433%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (546,717 samples, 0.35%)</title><rect x="16.7052%" y="69" width="0.3451%" height="15" fill="rgb(248,212,6)"/><text x="16.9552%" y="79.50"></text></g><g><title>codegen_fn_attrs (757,397 samples, 0.48%)</title><rect x="16.5950%" y="101" width="0.4780%" height="15" fill="rgb(208,68,35)"/><text x="16.8450%" y="111.50"></text></g><g><title>is_copy_raw (258,223 samples, 0.16%)</title><rect x="19.8174%" y="53" width="0.1630%" height="15" fill="rgb(232,128,0)"/><text x="20.0674%" y="63.50"></text></g><g><title>evaluate_obligation (214,542 samples, 0.14%)</title><rect x="19.8450%" y="37" width="0.1354%" height="15" fill="rgb(207,160,47)"/><text x="20.0950%" y="47.50"></text></g><g><title>param_env (197,992 samples, 0.12%)</title><rect x="19.9804%" y="53" width="0.1250%" height="15" fill="rgb(228,23,34)"/><text x="20.2304%" y="63.50"></text></g><g><title>adt_drop_tys (656,699 samples, 0.41%)</title><rect x="19.7194%" y="69" width="0.4145%" height="15" fill="rgb(218,30,26)"/><text x="19.9694%" y="79.50"></text></g><g><title>is_copy_raw (907,045 samples, 0.57%)</title><rect x="20.1339%" y="69" width="0.5725%" height="15" fill="rgb(220,122,19)"/><text x="20.3839%" y="79.50"></text></g><g><title>evaluate_obligation (728,075 samples, 0.46%)</title><rect x="20.2468%" y="53" width="0.4595%" height="15" fill="rgb(250,228,42)"/><text x="20.4968%" y="63.50"></text></g><g><title>needs_drop_raw (1,775,676 samples, 1.12%)</title><rect x="19.6147%" y="85" width="1.1207%" height="15" fill="rgb(240,193,28)"/><text x="19.8647%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (950,922 samples, 0.60%)</title><rect x="20.9199%" y="69" width="0.6002%" height="15" fill="rgb(216,20,37)"/><text x="21.1699%" y="79.50"></text></g><g><title>evaluate_obligation (203,402 samples, 0.13%)</title><rect x="21.3917%" y="53" width="0.1284%" height="15" fill="rgb(206,188,39)"/><text x="21.6417%" y="63.50"></text></g><g><title>impl_parent (664,244 samples, 0.42%)</title><rect x="22.3184%" y="53" width="0.4192%" height="15" fill="rgb(217,207,13)"/><text x="22.5684%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (410,704 samples, 0.26%)</title><rect x="22.4785%" y="37" width="0.2592%" height="15" fill="rgb(231,73,38)"/><text x="22.7285%" y="47.50"></text></g><g><title>specialization_graph_of (3,048,202 samples, 1.92%)</title><rect x="21.5862%" y="69" width="1.9239%" height="15" fill="rgb(225,20,46)"/><text x="21.8362%" y="79.50">s..</text></g><g><title>impl_trait_ref (1,223,776 samples, 0.77%)</title><rect x="22.7377%" y="53" width="0.7724%" height="15" fill="rgb(210,31,41)"/><text x="22.9877%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (964,434 samples, 0.61%)</title><rect x="22.9014%" y="37" width="0.6087%" height="15" fill="rgb(221,200,47)"/><text x="23.1514%" y="47.50"></text></g><g><title>resolve_instance (4,516,568 samples, 2.85%)</title><rect x="20.7354%" y="85" width="2.8507%" height="15" fill="rgb(226,26,5)"/><text x="20.9854%" y="95.50">re..</text></g><g><title>thir_body (1,505,966 samples, 0.95%)</title><rect x="23.6147%" y="85" width="0.9505%" height="15" fill="rgb(249,33,26)"/><text x="23.8647%" y="95.50"></text></g><g><title>mir_const (15,188,790 samples, 9.59%)</title><rect x="15.0000%" y="133" width="9.5866%" height="15" fill="rgb(235,183,28)"/><text x="15.2500%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (13,594,662 samples, 8.58%)</title><rect x="16.0061%" y="117" width="8.5805%" height="15" fill="rgb(221,5,38)"/><text x="16.2561%" y="127.50">unsafety_che..</text></g><g><title>mir_built (11,901,055 samples, 7.51%)</title><rect x="17.0751%" y="101" width="7.5115%" height="15" fill="rgb(247,18,42)"/><text x="17.3251%" y="111.50">mir_built</text></g><g><title>mir_promoted (16,450,546 samples, 10.38%)</title><rect x="14.2281%" y="149" width="10.3830%" height="15" fill="rgb(241,131,45)"/><text x="14.4781%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (522,597 samples, 0.33%)</title><rect x="24.6137%" y="149" width="0.3298%" height="15" fill="rgb(249,31,29)"/><text x="24.8637%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (779,359 samples, 0.49%)</title><rect x="24.9435%" y="149" width="0.4919%" height="15" fill="rgb(225,111,53)"/><text x="25.1935%" y="159.50"></text></g><g><title>normalize_projection_ty (546,695 samples, 0.35%)</title><rect x="25.0904%" y="133" width="0.3451%" height="15" fill="rgb(238,160,17)"/><text x="25.3404%" y="143.50"></text></g><g><title>type_op_normalize_predicate (535,945 samples, 0.34%)</title><rect x="25.4354%" y="149" width="0.3383%" height="15" fill="rgb(214,148,48)"/><text x="25.6854%" y="159.50"></text></g><g><title>normalize_projection_ty (275,824 samples, 0.17%)</title><rect x="25.5996%" y="133" width="0.1741%" height="15" fill="rgb(232,36,49)"/><text x="25.8496%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,629,613 samples, 2.29%)</title><rect x="25.7737%" y="149" width="2.2909%" height="15" fill="rgb(209,103,24)"/><text x="26.0237%" y="159.50">t..</text></g><g><title>evaluate_obligation (192,063 samples, 0.12%)</title><rect x="27.9434%" y="133" width="0.1212%" height="15" fill="rgb(229,88,8)"/><text x="28.1934%" y="143.50"></text></g><g><title>MIR_borrow_checking (43,513,797 samples, 27.46%)</title><rect x="0.6052%" y="181" width="27.4644%" height="15" fill="rgb(213,181,19)"/><text x="0.8552%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (43,396,885 samples, 27.39%)</title><rect x="0.6790%" y="165" width="27.3906%" height="15" fill="rgb(254,191,54)"/><text x="0.9290%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (280,221 samples, 0.18%)</title><rect x="28.3400%" y="149" width="0.1769%" height="15" fill="rgb(241,83,37)"/><text x="28.5900%" y="159.50"></text></g><g><title>check_mod_attrs (508,226 samples, 0.32%)</title><rect x="28.1962%" y="165" width="0.3208%" height="15" fill="rgb(233,36,39)"/><text x="28.4462%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (363,854 samples, 0.23%)</title><rect x="28.6255%" y="165" width="0.2297%" height="15" fill="rgb(226,3,54)"/><text x="28.8755%" y="175.50"></text></g><g><title>misc_checking_1 (1,096,332 samples, 0.69%)</title><rect x="28.1847%" y="181" width="0.6920%" height="15" fill="rgb(245,192,40)"/><text x="28.4347%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (604,017 samples, 0.38%)</title><rect x="28.8778%" y="165" width="0.3812%" height="15" fill="rgb(238,167,29)"/><text x="29.1278%" y="175.50"></text></g><g><title>check_mod_liveness (487,076 samples, 0.31%)</title><rect x="28.9516%" y="149" width="0.3074%" height="15" fill="rgb(232,182,51)"/><text x="29.2016%" y="159.50"></text></g><g><title>misc_checking_2 (1,559,157 samples, 0.98%)</title><rect x="28.8767%" y="181" width="0.9841%" height="15" fill="rgb(231,60,39)"/><text x="29.1267%" y="191.50"></text></g><g><title>match_checking (953,450 samples, 0.60%)</title><rect x="29.2590%" y="165" width="0.6018%" height="15" fill="rgb(208,69,12)"/><text x="29.5090%" y="175.50"></text></g><g><title>check_match (922,230 samples, 0.58%)</title><rect x="29.2787%" y="149" width="0.5821%" height="15" fill="rgb(235,93,37)"/><text x="29.5287%" y="159.50"></text></g><g><title>check_private_in_public (159,212 samples, 0.10%)</title><rect x="29.8669%" y="165" width="0.1005%" height="15" fill="rgb(213,116,39)"/><text x="30.1169%" y="175.50"></text></g><g><title>death_checking (332,373 samples, 0.21%)</title><rect x="29.9674%" y="165" width="0.2098%" height="15" fill="rgb(222,207,29)"/><text x="30.2174%" y="175.50"></text></g><g><title>crate_lints (1,917,351 samples, 1.21%)</title><rect x="30.1780%" y="149" width="1.2102%" height="15" fill="rgb(206,96,30)"/><text x="30.4280%" y="159.50"></text></g><g><title>type_of (1,077,071 samples, 0.68%)</title><rect x="30.7084%" y="133" width="0.6798%" height="15" fill="rgb(218,138,4)"/><text x="30.9584%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (844,238 samples, 0.53%)</title><rect x="30.8553%" y="117" width="0.5329%" height="15" fill="rgb(250,191,14)"/><text x="31.1053%" y="127.50"></text></g><g><title>lint_checking (2,666,919 samples, 1.68%)</title><rect x="30.1771%" y="165" width="1.6833%" height="15" fill="rgb(239,60,40)"/><text x="30.4271%" y="175.50"></text></g><g><title>module_lints (748,208 samples, 0.47%)</title><rect x="31.3882%" y="149" width="0.4722%" height="15" fill="rgb(206,27,48)"/><text x="31.6382%" y="159.50"></text></g><g><title>lint_mod (745,808 samples, 0.47%)</title><rect x="31.3897%" y="133" width="0.4707%" height="15" fill="rgb(225,35,8)"/><text x="31.6397%" y="143.50"></text></g><g><title>layout_of (174,442 samples, 0.11%)</title><rect x="31.7503%" y="117" width="0.1101%" height="15" fill="rgb(250,213,24)"/><text x="32.0003%" y="127.50"></text></g><g><title>layout_of (162,872 samples, 0.10%)</title><rect x="31.7576%" y="101" width="0.1028%" height="15" fill="rgb(247,123,22)"/><text x="32.0076%" y="111.50"></text></g><g><title>privacy_access_levels (220,193 samples, 0.14%)</title><rect x="31.8604%" y="165" width="0.1390%" height="15" fill="rgb(231,138,38)"/><text x="32.1104%" y="175.50"></text></g><g><title>privacy_checking_modules (1,010,332 samples, 0.64%)</title><rect x="31.9994%" y="165" width="0.6377%" height="15" fill="rgb(231,145,46)"/><text x="32.2494%" y="175.50"></text></g><g><title>check_mod_privacy (1,008,752 samples, 0.64%)</title><rect x="32.0004%" y="149" width="0.6367%" height="15" fill="rgb(251,118,11)"/><text x="32.2504%" y="159.50"></text></g><g><title>misc_checking_3 (4,417,080 samples, 2.79%)</title><rect x="29.8608%" y="181" width="2.7879%" height="15" fill="rgb(217,147,25)"/><text x="30.1108%" y="191.50">mi..</text></g><g><title>impl_parent (1,496,585 samples, 0.94%)</title><rect x="34.1139%" y="117" width="0.9446%" height="15" fill="rgb(247,81,37)"/><text x="34.3639%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (955,056 samples, 0.60%)</title><rect x="34.4557%" y="101" width="0.6028%" height="15" fill="rgb(209,12,38)"/><text x="34.7057%" y="111.50"></text></g><g><title>impl_trait_ref (3,941,644 samples, 2.49%)</title><rect x="35.0585%" y="117" width="2.4878%" height="15" fill="rgb(227,1,9)"/><text x="35.3085%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,404,726 samples, 2.15%)</title><rect x="35.3973%" y="101" width="2.1489%" height="15" fill="rgb(248,47,43)"/><text x="35.6473%" y="111.50">m..</text></g><g><title>coherent_trait (8,131,671 samples, 5.13%)</title><rect x="32.6912%" y="149" width="5.1324%" height="15" fill="rgb(221,10,30)"/><text x="32.9412%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (8,120,171 samples, 5.13%)</title><rect x="32.6984%" y="133" width="5.1252%" height="15" fill="rgb(210,229,1)"/><text x="32.9484%" y="143.50">specia..</text></g><g><title>trait_impls_of (437,815 samples, 0.28%)</title><rect x="37.5473%" y="117" width="0.2763%" height="15" fill="rgb(222,148,37)"/><text x="37.7973%" y="127.50"></text></g><g><title>coherence_checking (8,185,582 samples, 5.17%)</title><rect x="32.6825%" y="165" width="5.1665%" height="15" fill="rgb(234,67,33)"/><text x="32.9325%" y="175.50">cohere..</text></g><g><title>associated_item (277,903 samples, 0.18%)</title><rect x="46.9893%" y="101" width="0.1754%" height="15" fill="rgb(247,98,35)"/><text x="47.2393%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (223,132 samples, 0.14%)</title><rect x="47.0239%" y="85" width="0.1408%" height="15" fill="rgb(247,138,52)"/><text x="47.2739%" y="95.50"></text></g><g><title>associated_items (395,534 samples, 0.25%)</title><rect x="46.9294%" y="117" width="0.2496%" height="15" fill="rgb(213,79,30)"/><text x="47.1794%" y="127.50"></text></g><g><title>adt_dtorck_constraint (161,522 samples, 0.10%)</title><rect x="47.3758%" y="85" width="0.1019%" height="15" fill="rgb(246,177,23)"/><text x="47.6258%" y="95.50"></text></g><g><title>adt_dtorck_constraint (300,193 samples, 0.19%)</title><rect x="47.3036%" y="101" width="0.1895%" height="15" fill="rgb(230,62,27)"/><text x="47.5536%" y="111.50"></text></g><g><title>dropck_outlives (468,375 samples, 0.30%)</title><rect x="47.2046%" y="117" width="0.2956%" height="15" fill="rgb(216,154,8)"/><text x="47.4546%" y="127.50"></text></g><g><title>predicates_of (164,203 samples, 0.10%)</title><rect x="48.0933%" y="101" width="0.1036%" height="15" fill="rgb(244,35,45)"/><text x="48.3433%" y="111.50"></text></g><g><title>trait_impls_of (163,441 samples, 0.10%)</title><rect x="48.2594%" y="101" width="0.1032%" height="15" fill="rgb(251,115,12)"/><text x="48.5094%" y="111.50"></text></g><g><title>evaluate_obligation (1,367,204 samples, 0.86%)</title><rect x="47.5002%" y="117" width="0.8629%" height="15" fill="rgb(240,54,50)"/><text x="47.7502%" y="127.50"></text></g><g><title>item_attrs (503,094 samples, 0.32%)</title><rect x="48.5201%" y="117" width="0.3175%" height="15" fill="rgb(233,84,52)"/><text x="48.7701%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (496,564 samples, 0.31%)</title><rect x="48.5242%" y="101" width="0.3134%" height="15" fill="rgb(207,117,47)"/><text x="48.7742%" y="111.50"></text></g><g><title>impl_trait_ref (174,802 samples, 0.11%)</title><rect x="49.0526%" y="85" width="0.1103%" height="15" fill="rgb(249,43,39)"/><text x="49.3026%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (173,862 samples, 0.11%)</title><rect x="49.0532%" y="69" width="0.1097%" height="15" fill="rgb(209,38,44)"/><text x="49.3032%" y="79.50"></text></g><g><title>evaluate_obligation (365,863 samples, 0.23%)</title><rect x="48.9472%" y="101" width="0.2309%" height="15" fill="rgb(236,212,23)"/><text x="49.1972%" y="111.50"></text></g><g><title>method_autoderef_steps (494,764 samples, 0.31%)</title><rect x="48.8708%" y="117" width="0.3123%" height="15" fill="rgb(242,79,21)"/><text x="49.1208%" y="127.50"></text></g><g><title>predicates_of (239,052 samples, 0.15%)</title><rect x="49.2984%" y="117" width="0.1509%" height="15" fill="rgb(211,96,35)"/><text x="49.5484%" y="127.50"></text></g><g><title>predicates_defined_on (169,031 samples, 0.11%)</title><rect x="49.3426%" y="101" width="0.1067%" height="15" fill="rgb(253,215,40)"/><text x="49.5926%" y="111.50"></text></g><g><title>adt_sized_constraint (191,152 samples, 0.12%)</title><rect x="64.7618%" y="101" width="0.1206%" height="15" fill="rgb(211,81,21)"/><text x="65.0118%" y="111.50"></text></g><g><title>associated_item (397,482 samples, 0.25%)</title><rect x="64.9781%" y="85" width="0.2509%" height="15" fill="rgb(208,190,38)"/><text x="65.2281%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (312,400 samples, 0.20%)</title><rect x="65.0318%" y="69" width="0.1972%" height="15" fill="rgb(235,213,38)"/><text x="65.2818%" y="79.50"></text></g><g><title>associated_items (571,892 samples, 0.36%)</title><rect x="64.8875%" y="101" width="0.3610%" height="15" fill="rgb(237,122,38)"/><text x="65.1375%" y="111.50"></text></g><g><title>adt_dtorck_constraint (181,532 samples, 0.11%)</title><rect x="65.5185%" y="69" width="0.1146%" height="15" fill="rgb(244,218,35)"/><text x="65.7685%" y="79.50"></text></g><g><title>adt_dtorck_constraint (371,464 samples, 0.23%)</title><rect x="65.4267%" y="85" width="0.2345%" height="15" fill="rgb(240,68,47)"/><text x="65.6767%" y="95.50"></text></g><g><title>dropck_outlives (650,449 samples, 0.41%)</title><rect x="65.2966%" y="101" width="0.4105%" height="15" fill="rgb(210,16,53)"/><text x="65.5466%" y="111.50"></text></g><g><title>predicates_of (223,800 samples, 0.14%)</title><rect x="66.9994%" y="85" width="0.1413%" height="15" fill="rgb(235,124,12)"/><text x="67.2494%" y="95.50"></text></g><g><title>specializes (177,772 samples, 0.11%)</title><rect x="67.1406%" y="85" width="0.1122%" height="15" fill="rgb(224,169,11)"/><text x="67.3906%" y="95.50"></text></g><g><title>trait_impls_of (763,392 samples, 0.48%)</title><rect x="67.2666%" y="85" width="0.4818%" height="15" fill="rgb(250,166,2)"/><text x="67.5166%" y="95.50"></text></g><g><title>implementations_of_trait (194,112 samples, 0.12%)</title><rect x="67.6259%" y="69" width="0.1225%" height="15" fill="rgb(242,216,29)"/><text x="67.8759%" y="79.50"></text></g><g><title>evaluate_obligation (3,235,096 samples, 2.04%)</title><rect x="65.7072%" y="101" width="2.0419%" height="15" fill="rgb(230,116,27)"/><text x="65.9572%" y="111.50">e..</text></g><g><title>generics_of (188,741 samples, 0.12%)</title><rect x="67.8523%" y="101" width="0.1191%" height="15" fill="rgb(228,99,48)"/><text x="68.1023%" y="111.50"></text></g><g><title>is_copy_raw (299,704 samples, 0.19%)</title><rect x="68.1982%" y="101" width="0.1892%" height="15" fill="rgb(253,11,6)"/><text x="68.4482%" y="111.50"></text></g><g><title>evaluate_obligation (250,424 samples, 0.16%)</title><rect x="68.2293%" y="85" width="0.1581%" height="15" fill="rgb(247,143,39)"/><text x="68.4793%" y="95.50"></text></g><g><title>evaluate_obligation (282,823 samples, 0.18%)</title><rect x="68.7132%" y="85" width="0.1785%" height="15" fill="rgb(236,97,10)"/><text x="68.9632%" y="95.50"></text></g><g><title>method_autoderef_steps (591,888 samples, 0.37%)</title><rect x="68.5234%" y="101" width="0.3736%" height="15" fill="rgb(233,208,19)"/><text x="68.7734%" y="111.50"></text></g><g><title>explicit_predicates_of (199,902 samples, 0.13%)</title><rect x="69.0557%" y="69" width="0.1262%" height="15" fill="rgb(216,164,2)"/><text x="69.3057%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (168,091 samples, 0.11%)</title><rect x="69.0758%" y="53" width="0.1061%" height="15" fill="rgb(220,129,5)"/><text x="69.3258%" y="63.50"></text></g><g><title>predicates_of (467,936 samples, 0.30%)</title><rect x="68.9233%" y="101" width="0.2953%" height="15" fill="rgb(242,17,10)"/><text x="69.1733%" y="111.50"></text></g><g><title>predicates_defined_on (350,005 samples, 0.22%)</title><rect x="68.9977%" y="85" width="0.2209%" height="15" fill="rgb(242,107,0)"/><text x="69.2477%" y="95.50"></text></g><g><title>typeck (31,460,603 samples, 19.86%)</title><rect x="49.5005%" y="117" width="19.8569%" height="15" fill="rgb(251,28,31)"/><text x="49.7505%" y="127.50">typeck</text></g><g><title>item_bodies_checking (49,946,120 samples, 31.52%)</title><rect x="37.8604%" y="165" width="31.5243%" height="15" fill="rgb(233,223,10)"/><text x="38.1104%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (49,942,990 samples, 31.52%)</title><rect x="37.8624%" y="149" width="31.5223%" height="15" fill="rgb(215,21,27)"/><text x="38.1124%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (49,881,160 samples, 31.48%)</title><rect x="37.9014%" y="133" width="31.4833%" height="15" fill="rgb(232,23,21)"/><text x="38.1514%" y="143.50">typeck</text></g><g><title>adt_destructor (315,014 samples, 0.20%)</title><rect x="69.5539%" y="133" width="0.1988%" height="15" fill="rgb(244,5,23)"/><text x="69.8039%" y="143.50"></text></g><g><title>coherent_trait (310,524 samples, 0.20%)</title><rect x="69.5567%" y="117" width="0.1960%" height="15" fill="rgb(226,81,46)"/><text x="69.8067%" y="127.50"></text></g><g><title>specialization_graph_of (309,134 samples, 0.20%)</title><rect x="69.5576%" y="101" width="0.1951%" height="15" fill="rgb(247,70,30)"/><text x="69.8076%" y="111.50"></text></g><g><title>item_types_checking (665,167 samples, 0.42%)</title><rect x="69.3847%" y="165" width="0.4198%" height="15" fill="rgb(212,68,19)"/><text x="69.6347%" y="175.50"></text></g><g><title>check_mod_item_types (663,017 samples, 0.42%)</title><rect x="69.3861%" y="149" width="0.4185%" height="15" fill="rgb(240,187,13)"/><text x="69.6361%" y="159.50"></text></g><g><title>late_bound_vars_map (164,642 samples, 0.10%)</title><rect x="70.0077%" y="117" width="0.1039%" height="15" fill="rgb(223,113,26)"/><text x="70.2577%" y="127.50"></text></g><g><title>fn_sig (317,974 samples, 0.20%)</title><rect x="69.9324%" y="133" width="0.2007%" height="15" fill="rgb(206,192,2)"/><text x="70.1824%" y="143.50"></text></g><g><title>named_region_map (313,772 samples, 0.20%)</title><rect x="70.1867%" y="117" width="0.1980%" height="15" fill="rgb(241,108,4)"/><text x="70.4367%" y="127.50"></text></g><g><title>resolve_lifetimes (300,092 samples, 0.19%)</title><rect x="70.1953%" y="101" width="0.1894%" height="15" fill="rgb(247,173,49)"/><text x="70.4453%" y="111.50"></text></g><g><title>generics_of (412,115 samples, 0.26%)</title><rect x="70.1331%" y="133" width="0.2601%" height="15" fill="rgb(224,114,35)"/><text x="70.3831%" y="143.50"></text></g><g><title>predicates_of (422,525 samples, 0.27%)</title><rect x="70.4077%" y="133" width="0.2667%" height="15" fill="rgb(245,159,27)"/><text x="70.6577%" y="143.50"></text></g><g><title>predicates_defined_on (395,034 samples, 0.25%)</title><rect x="70.4251%" y="117" width="0.2493%" height="15" fill="rgb(245,172,44)"/><text x="70.6751%" y="127.50"></text></g><g><title>inferred_outlives_of (264,373 samples, 0.17%)</title><rect x="70.5075%" y="101" width="0.1669%" height="15" fill="rgb(236,23,11)"/><text x="70.7575%" y="111.50"></text></g><g><title>inferred_outlives_crate (249,373 samples, 0.16%)</title><rect x="70.5170%" y="85" width="0.1574%" height="15" fill="rgb(205,117,38)"/><text x="70.7670%" y="95.50"></text></g><g><title>type_collecting (1,444,506 samples, 0.91%)</title><rect x="69.8057%" y="165" width="0.9117%" height="15" fill="rgb(237,72,25)"/><text x="70.0557%" y="175.50"></text></g><g><title>collect_mod_item_types (1,437,466 samples, 0.91%)</title><rect x="69.8102%" y="149" width="0.9073%" height="15" fill="rgb(244,70,9)"/><text x="70.0602%" y="159.50"></text></g><g><title>evaluate_obligation (276,673 samples, 0.17%)</title><rect x="71.3302%" y="133" width="0.1746%" height="15" fill="rgb(217,125,39)"/><text x="71.5802%" y="143.50"></text></g><g><title>region_scope_tree (361,226 samples, 0.23%)</title><rect x="71.6582%" y="133" width="0.2280%" height="15" fill="rgb(235,36,10)"/><text x="71.9082%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,762,430 samples, 1.11%)</title><rect x="70.7928%" y="149" width="1.1124%" height="15" fill="rgb(251,123,47)"/><text x="71.0428%" y="159.50"></text></g><g><title>adt_def (182,182 samples, 0.11%)</title><rect x="72.3896%" y="101" width="0.1150%" height="15" fill="rgb(221,13,13)"/><text x="72.6396%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (178,792 samples, 0.11%)</title><rect x="72.3917%" y="85" width="0.1128%" height="15" fill="rgb(238,131,9)"/><text x="72.6417%" y="95.50"></text></g><g><title>adt_def (190,832 samples, 0.12%)</title><rect x="72.5088%" y="85" width="0.1204%" height="15" fill="rgb(211,50,8)"/><text x="72.7588%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (190,162 samples, 0.12%)</title><rect x="72.5092%" y="69" width="0.1200%" height="15" fill="rgb(245,182,24)"/><text x="72.7592%" y="79.50"></text></g><g><title>adt_sized_constraint (281,784 samples, 0.18%)</title><rect x="72.5046%" y="101" width="0.1779%" height="15" fill="rgb(242,14,37)"/><text x="72.7546%" y="111.50"></text></g><g><title>adt_sized_constraint (495,097 samples, 0.31%)</title><rect x="72.3769%" y="117" width="0.3125%" height="15" fill="rgb(246,228,12)"/><text x="72.6269%" y="127.50"></text></g><g><title>evaluate_obligation (717,908 samples, 0.45%)</title><rect x="72.2534%" y="133" width="0.4531%" height="15" fill="rgb(213,55,15)"/><text x="72.5034%" y="143.50"></text></g><g><title>param_env (177,252 samples, 0.11%)</title><rect x="72.7603%" y="133" width="0.1119%" height="15" fill="rgb(209,9,3)"/><text x="73.0103%" y="143.50"></text></g><g><title>analysis (114,969,947 samples, 72.57%)</title><rect x="0.4074%" y="197" width="72.5651%" height="15" fill="rgb(230,59,30)"/><text x="0.6574%" y="207.50">analysis</text></g><g><title>type_check_crate (63,887,816 samples, 40.32%)</title><rect x="32.6487%" y="181" width="40.3238%" height="15" fill="rgb(209,121,21)"/><text x="32.8987%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,567,920 samples, 2.25%)</title><rect x="70.7206%" y="165" width="2.2519%" height="15" fill="rgb(220,109,13)"/><text x="70.9706%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,691,080 samples, 1.07%)</title><rect x="71.9052%" y="149" width="1.0674%" height="15" fill="rgb(232,18,1)"/><text x="72.1552%" y="159.50"></text></g><g><title>codegen_crate (391,735 samples, 0.25%)</title><rect x="72.9807%" y="197" width="0.2472%" height="15" fill="rgb(215,41,42)"/><text x="73.2307%" y="207.50"></text></g><g><title>AST_validation (184,672 samples, 0.12%)</title><rect x="73.3738%" y="181" width="0.1166%" height="15" fill="rgb(224,123,36)"/><text x="73.6238%" y="191.50"></text></g><g><title>metadata_load_macro (456,004 samples, 0.29%)</title><rect x="85.3748%" y="149" width="0.2878%" height="15" fill="rgb(240,125,3)"/><text x="85.6248%" y="159.50"></text></g><g><title>macro_expand_crate (21,694,403 samples, 13.69%)</title><rect x="73.5896%" y="181" width="13.6928%" height="15" fill="rgb(205,98,50)"/><text x="73.8396%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (21,671,503 samples, 13.68%)</title><rect x="73.6041%" y="165" width="13.6783%" height="15" fill="rgb(205,185,37)"/><text x="73.8541%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,566,378 samples, 1.62%)</title><rect x="85.6626%" y="149" width="1.6198%" height="15" fill="rgb(238,207,15)"/><text x="85.9126%" y="159.50"></text></g><g><title>metadata_register_crate (931,981 samples, 0.59%)</title><rect x="86.6942%" y="133" width="0.5882%" height="15" fill="rgb(213,199,42)"/><text x="86.9442%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (370,634 samples, 0.23%)</title><rect x="87.2850%" y="181" width="0.2339%" height="15" fill="rgb(235,201,11)"/><text x="87.5350%" y="191.50"></text></g><g><title>late_resolve_crate (3,466,429 samples, 2.19%)</title><rect x="87.6211%" y="165" width="2.1879%" height="15" fill="rgb(207,46,11)"/><text x="87.8711%" y="175.50">l..</text></g><g><title>configure_and_expand (26,380,636 samples, 16.65%)</title><rect x="73.2279%" y="197" width="16.6506%" height="15" fill="rgb(241,35,35)"/><text x="73.4779%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,738,372 samples, 2.36%)</title><rect x="87.5190%" y="181" width="2.3595%" height="15" fill="rgb(243,32,47)"/><text x="87.7690%" y="191.50">r..</text></g><g><title>drop_ast (185,822 samples, 0.12%)</title><rect x="89.8785%" y="197" width="0.1173%" height="15" fill="rgb(247,202,23)"/><text x="90.1285%" y="207.50"></text></g><g><title>early_lint_checks (376,854 samples, 0.24%)</title><rect x="90.0062%" y="197" width="0.2379%" height="15" fill="rgb(219,102,11)"/><text x="90.2562%" y="207.50"></text></g><g><title>free_global_ctxt (3,869,084 samples, 2.44%)</title><rect x="90.2441%" y="197" width="2.4420%" height="15" fill="rgb(243,110,44)"/><text x="90.4941%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (746,568 samples, 0.47%)</title><rect x="92.6861%" y="197" width="0.4712%" height="15" fill="rgb(222,74,54)"/><text x="92.9361%" y="207.50"></text></g><g><title>hir_lowering (2,656,770 samples, 1.68%)</title><rect x="93.1573%" y="197" width="1.6769%" height="15" fill="rgb(216,99,12)"/><text x="93.4073%" y="207.50"></text></g><g><title>parse_crate (6,611,224 samples, 4.17%)</title><rect x="94.8693%" y="197" width="4.1728%" height="15" fill="rgb(226,22,26)"/><text x="95.1193%" y="207.50">parse..</text></g><g><title>prepare_outputs (215,772 samples, 0.14%)</title><rect x="99.0481%" y="197" width="0.1362%" height="15" fill="rgb(217,163,10)"/><text x="99.2981%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (854,309 samples, 0.54%)</title><rect x="99.1843%" y="197" width="0.5392%" height="15" fill="rgb(213,25,53)"/><text x="99.4343%" y="207.50"></text></g><g><title>all (158,436,914 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (158,436,914 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (355,244 samples, 0.22%)</title><rect x="99.7758%" y="197" width="0.2242%" height="15" fill="rgb(229,68,48)"/><text x="100.0258%" y="207.50"></text></g></svg></svg>