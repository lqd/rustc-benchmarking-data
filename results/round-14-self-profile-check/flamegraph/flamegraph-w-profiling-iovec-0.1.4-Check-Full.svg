<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (79,163 samples, 0.15%)</title><rect x="6.6916%" y="181" width="0.1536%" height="15" fill="rgb(227,0,7)"/><text x="6.9416%" y="191.50"></text></g><g><title>codegen_fn_attrs (74,790 samples, 0.15%)</title><rect x="7.0315%" y="165" width="0.1451%" height="15" fill="rgb(217,0,24)"/><text x="7.2815%" y="175.50"></text></g><g><title>is_copy_raw (117,811 samples, 0.23%)</title><rect x="8.1321%" y="149" width="0.2286%" height="15" fill="rgb(221,193,54)"/><text x="8.3821%" y="159.50"></text></g><g><title>evaluate_obligation (101,761 samples, 0.20%)</title><rect x="8.1633%" y="133" width="0.1975%" height="15" fill="rgb(248,212,6)"/><text x="8.4133%" y="143.50"></text></g><g><title>explicit_predicates_of (52,180 samples, 0.10%)</title><rect x="8.5726%" y="69" width="0.1013%" height="15" fill="rgb(208,68,35)"/><text x="8.8226%" y="79.50"></text></g><g><title>predicates_of (61,060 samples, 0.12%)</title><rect x="8.5576%" y="101" width="0.1185%" height="15" fill="rgb(232,128,0)"/><text x="8.8076%" y="111.50"></text></g><g><title>predicates_defined_on (55,720 samples, 0.11%)</title><rect x="8.5680%" y="85" width="0.1081%" height="15" fill="rgb(207,160,47)"/><text x="8.8180%" y="95.50"></text></g><g><title>needs_drop_raw (339,124 samples, 0.66%)</title><rect x="8.3608%" y="149" width="0.6581%" height="15" fill="rgb(228,23,34)"/><text x="8.6108%" y="159.50"></text></g><g><title>is_copy_raw (330,144 samples, 0.64%)</title><rect x="8.3782%" y="133" width="0.6407%" height="15" fill="rgb(218,30,26)"/><text x="8.6282%" y="143.50"></text></g><g><title>evaluate_obligation (320,154 samples, 0.62%)</title><rect x="8.3976%" y="117" width="0.6213%" height="15" fill="rgb(220,122,19)"/><text x="8.6476%" y="127.50"></text></g><g><title>trait_impls_of (176,632 samples, 0.34%)</title><rect x="8.6761%" y="101" width="0.3428%" height="15" fill="rgb(250,228,42)"/><text x="8.9261%" y="111.50"></text></g><g><title>resolve_instance (85,321 samples, 0.17%)</title><rect x="9.0189%" y="149" width="0.1656%" height="15" fill="rgb(240,193,28)"/><text x="9.2689%" y="159.50"></text></g><g><title>thir_body (174,750 samples, 0.34%)</title><rect x="9.1970%" y="149" width="0.3391%" height="15" fill="rgb(216,20,37)"/><text x="9.4470%" y="159.50"></text></g><g><title>mir_const (1,690,790 samples, 3.28%)</title><rect x="6.2628%" y="197" width="3.2812%" height="15" fill="rgb(206,188,39)"/><text x="6.5128%" y="207.50">mir..</text></g><g><title>unsafety_check_result (1,390,686 samples, 2.70%)</title><rect x="6.8452%" y="181" width="2.6988%" height="15" fill="rgb(217,207,13)"/><text x="7.0952%" y="191.50">un..</text></g><g><title>mir_built (1,219,906 samples, 2.37%)</title><rect x="7.1766%" y="165" width="2.3674%" height="15" fill="rgb(231,73,38)"/><text x="7.4266%" y="175.50">mi..</text></g><g><title>mir_promoted (2,074,653 samples, 4.03%)</title><rect x="5.8615%" y="213" width="4.0262%" height="15" fill="rgb(225,20,46)"/><text x="6.1115%" y="223.50">mir_..</text></g><g><title>mir_const_qualif (177,042 samples, 0.34%)</title><rect x="9.5441%" y="197" width="0.3436%" height="15" fill="rgb(210,31,41)"/><text x="9.7941%" y="207.50"></text></g><g><title>mir_const (136,252 samples, 0.26%)</title><rect x="9.6232%" y="181" width="0.2644%" height="15" fill="rgb(221,200,47)"/><text x="9.8732%" y="191.50"></text></g><g><title>unsafety_check_result (94,261 samples, 0.18%)</title><rect x="9.7047%" y="165" width="0.1829%" height="15" fill="rgb(226,26,5)"/><text x="9.9547%" y="175.50"></text></g><g><title>mir_built (54,490 samples, 0.11%)</title><rect x="9.7819%" y="149" width="0.1057%" height="15" fill="rgb(249,33,26)"/><text x="10.0319%" y="159.50"></text></g><g><title>type_op_prove_predicate (275,426 samples, 0.53%)</title><rect x="10.0061%" y="213" width="0.5345%" height="15" fill="rgb(235,183,28)"/><text x="10.2561%" y="223.50"></text></g><g><title>MIR_borrow_checking (4,721,113 samples, 9.16%)</title><rect x="1.3902%" y="245" width="9.1620%" height="15" fill="rgb(221,5,38)"/><text x="1.6402%" y="255.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (4,687,773 samples, 9.10%)</title><rect x="1.4549%" y="229" width="9.0973%" height="15" fill="rgb(247,18,42)"/><text x="1.7049%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (119,991 samples, 0.23%)</title><rect x="10.5522%" y="245" width="0.2329%" height="15" fill="rgb(241,131,45)"/><text x="10.8022%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (92,651 samples, 0.18%)</title><rect x="10.6053%" y="229" width="0.1798%" height="15" fill="rgb(249,31,29)"/><text x="10.8553%" y="239.50"></text></g><g><title>hir_module_items (94,341 samples, 0.18%)</title><rect x="10.7851%" y="245" width="0.1831%" height="15" fill="rgb(225,111,53)"/><text x="11.0351%" y="255.50"></text></g><g><title>get_lang_items (51,710 samples, 0.10%)</title><rect x="11.2432%" y="197" width="0.1004%" height="15" fill="rgb(238,160,17)"/><text x="11.4932%" y="207.50"></text></g><g><title>should_inherit_track_caller (106,940 samples, 0.21%)</title><rect x="11.3436%" y="197" width="0.2075%" height="15" fill="rgb(214,148,48)"/><text x="11.5936%" y="207.50"></text></g><g><title>codegen_fn_attrs (218,641 samples, 0.42%)</title><rect x="11.1505%" y="213" width="0.4243%" height="15" fill="rgb(232,36,49)"/><text x="11.4005%" y="223.50"></text></g><g><title>check_mod_attrs (291,583 samples, 0.57%)</title><rect x="11.0093%" y="229" width="0.5659%" height="15" fill="rgb(209,103,24)"/><text x="11.2593%" y="239.50"></text></g><g><title>lookup_deprecation_entry (75,931 samples, 0.15%)</title><rect x="11.8593%" y="213" width="0.1474%" height="15" fill="rgb(229,88,8)"/><text x="12.1093%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (211,793 samples, 0.41%)</title><rect x="11.6891%" y="229" width="0.4110%" height="15" fill="rgb(213,181,19)"/><text x="11.9391%" y="239.50"></text></g><g><title>misc_checking_1 (616,157 samples, 1.20%)</title><rect x="10.9689%" y="245" width="1.1957%" height="15" fill="rgb(254,191,54)"/><text x="11.2189%" y="255.50"></text></g><g><title>check_mod_intrinsics (121,942 samples, 0.24%)</title><rect x="12.1773%" y="213" width="0.2366%" height="15" fill="rgb(241,83,37)"/><text x="12.4273%" y="223.50"></text></g><g><title>layout_of (84,550 samples, 0.16%)</title><rect x="12.2498%" y="197" width="0.1641%" height="15" fill="rgb(233,36,39)"/><text x="12.4998%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (212,462 samples, 0.41%)</title><rect x="12.1674%" y="229" width="0.4123%" height="15" fill="rgb(226,3,54)"/><text x="12.4174%" y="239.50"></text></g><g><title>check_mod_liveness (85,430 samples, 0.17%)</title><rect x="12.4139%" y="213" width="0.1658%" height="15" fill="rgb(245,192,40)"/><text x="12.6639%" y="223.50"></text></g><g><title>misc_checking_2 (315,473 samples, 0.61%)</title><rect x="12.1646%" y="245" width="0.6122%" height="15" fill="rgb(238,167,29)"/><text x="12.4146%" y="255.50"></text></g><g><title>match_checking (101,571 samples, 0.20%)</title><rect x="12.5797%" y="229" width="0.1971%" height="15" fill="rgb(232,182,51)"/><text x="12.8297%" y="239.50"></text></g><g><title>check_match (92,840 samples, 0.18%)</title><rect x="12.5966%" y="213" width="0.1802%" height="15" fill="rgb(231,60,39)"/><text x="12.8466%" y="223.50"></text></g><g><title>check_private_in_public (62,481 samples, 0.12%)</title><rect x="12.7910%" y="229" width="0.1213%" height="15" fill="rgb(208,69,12)"/><text x="13.0410%" y="239.50"></text></g><g><title>death_checking (92,501 samples, 0.18%)</title><rect x="12.9123%" y="229" width="0.1795%" height="15" fill="rgb(235,93,37)"/><text x="13.1623%" y="239.50"></text></g><g><title>eval_to_const_value_raw (64,141 samples, 0.12%)</title><rect x="14.2890%" y="69" width="0.1245%" height="15" fill="rgb(213,116,39)"/><text x="14.5390%" y="79.50"></text></g><g><title>eval_to_const_value_raw (63,081 samples, 0.12%)</title><rect x="14.2910%" y="53" width="0.1224%" height="15" fill="rgb(222,207,29)"/><text x="14.5410%" y="63.50"></text></g><g><title>eval_to_allocation_raw (59,261 samples, 0.12%)</title><rect x="14.2985%" y="37" width="0.1150%" height="15" fill="rgb(206,96,30)"/><text x="14.5485%" y="47.50"></text></g><g><title>eval_to_const_value_raw (105,441 samples, 0.20%)</title><rect x="14.2236%" y="133" width="0.2046%" height="15" fill="rgb(218,138,4)"/><text x="14.4736%" y="143.50"></text></g><g><title>eval_to_const_value_raw (104,671 samples, 0.20%)</title><rect x="14.2251%" y="117" width="0.2031%" height="15" fill="rgb(250,191,14)"/><text x="14.4751%" y="127.50"></text></g><g><title>eval_to_allocation_raw (103,771 samples, 0.20%)</title><rect x="14.2269%" y="101" width="0.2014%" height="15" fill="rgb(239,60,40)"/><text x="14.4769%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (75,851 samples, 0.15%)</title><rect x="14.2811%" y="85" width="0.1472%" height="15" fill="rgb(206,27,48)"/><text x="14.5311%" y="95.50"></text></g><g><title>eval_to_const_value_raw (237,463 samples, 0.46%)</title><rect x="13.9774%" y="197" width="0.4608%" height="15" fill="rgb(225,35,8)"/><text x="14.2274%" y="207.50"></text></g><g><title>eval_to_const_value_raw (235,243 samples, 0.46%)</title><rect x="13.9817%" y="181" width="0.4565%" height="15" fill="rgb(250,213,24)"/><text x="14.2317%" y="191.50"></text></g><g><title>eval_to_allocation_raw (231,802 samples, 0.45%)</title><rect x="13.9884%" y="165" width="0.4498%" height="15" fill="rgb(247,123,22)"/><text x="14.2384%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (119,801 samples, 0.23%)</title><rect x="14.2057%" y="149" width="0.2325%" height="15" fill="rgb(231,138,38)"/><text x="14.4557%" y="159.50"></text></g><g><title>param_env (134,442 samples, 0.26%)</title><rect x="14.4382%" y="197" width="0.2609%" height="15" fill="rgb(231,145,46)"/><text x="14.6882%" y="207.50"></text></g><g><title>predicates_of (69,972 samples, 0.14%)</title><rect x="14.5633%" y="181" width="0.1358%" height="15" fill="rgb(251,118,11)"/><text x="14.8133%" y="191.50"></text></g><g><title>predicates_defined_on (58,512 samples, 0.11%)</title><rect x="14.5856%" y="165" width="0.1136%" height="15" fill="rgb(217,147,25)"/><text x="14.8356%" y="175.50"></text></g><g><title>trait_impls_of (206,522 samples, 0.40%)</title><rect x="14.6991%" y="197" width="0.4008%" height="15" fill="rgb(247,81,37)"/><text x="14.9491%" y="207.50"></text></g><g><title>crate_lints (3,273,116 samples, 6.35%)</title><rect x="13.0944%" y="213" width="6.3520%" height="15" fill="rgb(209,12,38)"/><text x="13.3444%" y="223.50">crate_li..</text></g><g><title>type_of (2,237,595 samples, 4.34%)</title><rect x="15.1040%" y="197" width="4.3424%" height="15" fill="rgb(227,1,9)"/><text x="15.3540%" y="207.50">type_..</text></g><g><title>metadata_decode_entry_type_of (1,991,514 samples, 3.86%)</title><rect x="15.5815%" y="181" width="3.8648%" height="15" fill="rgb(248,47,43)"/><text x="15.8315%" y="191.50">meta..</text></g><g><title>lint_checking (3,397,778 samples, 6.59%)</title><rect x="13.0918%" y="229" width="6.5939%" height="15" fill="rgb(221,10,30)"/><text x="13.3418%" y="239.50">lint_chec..</text></g><g><title>module_lints (123,312 samples, 0.24%)</title><rect x="19.4464%" y="213" width="0.2393%" height="15" fill="rgb(210,229,1)"/><text x="19.6964%" y="223.50"></text></g><g><title>lint_mod (118,562 samples, 0.23%)</title><rect x="19.4556%" y="197" width="0.2301%" height="15" fill="rgb(222,148,37)"/><text x="19.7056%" y="207.50"></text></g><g><title>privacy_access_levels (84,991 samples, 0.16%)</title><rect x="19.6857%" y="229" width="0.1649%" height="15" fill="rgb(234,67,33)"/><text x="19.9357%" y="239.50"></text></g><g><title>privacy_checking_modules (146,271 samples, 0.28%)</title><rect x="19.8506%" y="229" width="0.2839%" height="15" fill="rgb(247,98,35)"/><text x="20.1006%" y="239.50"></text></g><g><title>check_mod_privacy (143,391 samples, 0.28%)</title><rect x="19.8562%" y="213" width="0.2783%" height="15" fill="rgb(247,138,52)"/><text x="20.1062%" y="223.50"></text></g><g><title>misc_checking_3 (3,805,482 samples, 7.39%)</title><rect x="12.7768%" y="245" width="7.3851%" height="15" fill="rgb(213,79,30)"/><text x="13.0268%" y="255.50">misc_check..</text></g><g><title>impl_parent (462,311 samples, 0.90%)</title><rect x="21.6933%" y="181" width="0.8972%" height="15" fill="rgb(246,177,23)"/><text x="21.9433%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (313,671 samples, 0.61%)</title><rect x="21.9817%" y="165" width="0.6087%" height="15" fill="rgb(230,62,27)"/><text x="22.2317%" y="175.50"></text></g><g><title>impl_trait_ref (1,199,755 samples, 2.33%)</title><rect x="22.5905%" y="181" width="2.3283%" height="15" fill="rgb(216,154,8)"/><text x="22.8405%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,066,113 samples, 2.07%)</title><rect x="22.8498%" y="165" width="2.0689%" height="15" fill="rgb(244,35,45)"/><text x="23.0998%" y="175.50">m..</text></g><g><title>trait_impls_of (145,091 samples, 0.28%)</title><rect x="25.0698%" y="181" width="0.2816%" height="15" fill="rgb(251,115,12)"/><text x="25.3198%" y="191.50"></text></g><g><title>implementations_of_trait (53,521 samples, 0.10%)</title><rect x="25.2475%" y="165" width="0.1039%" height="15" fill="rgb(240,54,50)"/><text x="25.4975%" y="175.50"></text></g><g><title>coherent_trait (2,647,939 samples, 5.14%)</title><rect x="20.2318%" y="213" width="5.1387%" height="15" fill="rgb(233,84,52)"/><text x="20.4818%" y="223.50">cohere..</text></g><g><title>specialization_graph_of (2,638,759 samples, 5.12%)</title><rect x="20.2496%" y="197" width="5.1209%" height="15" fill="rgb(207,117,47)"/><text x="20.4996%" y="207.50">specia..</text></g><g><title>coherence_checking (2,703,951 samples, 5.25%)</title><rect x="20.2083%" y="229" width="5.2474%" height="15" fill="rgb(249,43,39)"/><text x="20.4583%" y="239.50">cohere..</text></g><g><title>associated_item (158,851 samples, 0.31%)</title><rect x="32.2745%" y="165" width="0.3083%" height="15" fill="rgb(209,38,44)"/><text x="32.5245%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (124,921 samples, 0.24%)</title><rect x="32.3403%" y="149" width="0.2424%" height="15" fill="rgb(236,212,23)"/><text x="32.5903%" y="159.50"></text></g><g><title>associated_items (232,072 samples, 0.45%)</title><rect x="32.1595%" y="181" width="0.4504%" height="15" fill="rgb(242,79,21)"/><text x="32.4095%" y="191.50"></text></g><g><title>evaluate_obligation (466,385 samples, 0.91%)</title><rect x="32.7284%" y="181" width="0.9051%" height="15" fill="rgb(211,96,35)"/><text x="32.9784%" y="191.50"></text></g><g><title>trait_impls_of (199,832 samples, 0.39%)</title><rect x="33.2456%" y="165" width="0.3878%" height="15" fill="rgb(253,215,40)"/><text x="33.4956%" y="175.50"></text></g><g><title>implementations_of_trait (63,540 samples, 0.12%)</title><rect x="33.5101%" y="149" width="0.1233%" height="15" fill="rgb(211,81,21)"/><text x="33.7601%" y="159.50"></text></g><g><title>associated_item (52,811 samples, 0.10%)</title><rect x="33.8053%" y="149" width="0.1025%" height="15" fill="rgb(208,190,38)"/><text x="34.0553%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (52,361 samples, 0.10%)</title><rect x="33.8062%" y="133" width="0.1016%" height="15" fill="rgb(235,213,38)"/><text x="34.0562%" y="143.50"></text></g><g><title>impl_item_implementor_ids (55,351 samples, 0.11%)</title><rect x="33.8015%" y="181" width="0.1074%" height="15" fill="rgb(237,122,38)"/><text x="34.0515%" y="191.50"></text></g><g><title>associated_items (54,451 samples, 0.11%)</title><rect x="33.8032%" y="165" width="0.1057%" height="15" fill="rgb(244,218,35)"/><text x="34.0532%" y="175.50"></text></g><g><title>item_attrs (100,572 samples, 0.20%)</title><rect x="33.9687%" y="181" width="0.1952%" height="15" fill="rgb(240,68,47)"/><text x="34.2187%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,062 samples, 0.19%)</title><rect x="33.9736%" y="165" width="0.1903%" height="15" fill="rgb(210,16,53)"/><text x="34.2236%" y="175.50"></text></g><g><title>method_autoderef_steps (67,190 samples, 0.13%)</title><rect x="34.1845%" y="181" width="0.1304%" height="15" fill="rgb(235,124,12)"/><text x="34.4345%" y="191.50"></text></g><g><title>predicates_of (111,971 samples, 0.22%)</title><rect x="34.3401%" y="181" width="0.2173%" height="15" fill="rgb(224,169,11)"/><text x="34.5901%" y="191.50"></text></g><g><title>predicates_defined_on (79,991 samples, 0.16%)</title><rect x="34.4021%" y="165" width="0.1552%" height="15" fill="rgb(250,166,2)"/><text x="34.6521%" y="175.50"></text></g><g><title>trait_impls_of (91,401 samples, 0.18%)</title><rect x="34.5641%" y="181" width="0.1774%" height="15" fill="rgb(242,216,29)"/><text x="34.8141%" y="191.50"></text></g><g><title>item_bodies_checking (4,814,673 samples, 9.34%)</title><rect x="25.4918%" y="229" width="9.3436%" height="15" fill="rgb(230,116,27)"/><text x="25.7418%" y="239.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (4,812,843 samples, 9.34%)</title><rect x="25.4953%" y="213" width="9.3400%" height="15" fill="rgb(228,99,48)"/><text x="25.7453%" y="223.50">typeck_item_b..</text></g><g><title>typeck (4,788,693 samples, 9.29%)</title><rect x="25.5422%" y="197" width="9.2931%" height="15" fill="rgb(253,11,6)"/><text x="25.7922%" y="207.50">typeck</text></g><g><title>impl_parent (58,260 samples, 0.11%)</title><rect x="35.3824%" y="149" width="0.1131%" height="15" fill="rgb(247,143,39)"/><text x="35.6324%" y="159.50"></text></g><g><title>impl_trait_ref (161,242 samples, 0.31%)</title><rect x="35.4955%" y="149" width="0.3129%" height="15" fill="rgb(236,97,10)"/><text x="35.7455%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (141,132 samples, 0.27%)</title><rect x="35.5345%" y="133" width="0.2739%" height="15" fill="rgb(233,208,19)"/><text x="35.7845%" y="143.50"></text></g><g><title>adt_destructor (319,254 samples, 0.62%)</title><rect x="35.2350%" y="197" width="0.6196%" height="15" fill="rgb(216,164,2)"/><text x="35.4850%" y="207.50"></text></g><g><title>coherent_trait (316,084 samples, 0.61%)</title><rect x="35.2411%" y="181" width="0.6134%" height="15" fill="rgb(220,129,5)"/><text x="35.4911%" y="191.50"></text></g><g><title>specialization_graph_of (314,804 samples, 0.61%)</title><rect x="35.2436%" y="165" width="0.6109%" height="15" fill="rgb(242,17,10)"/><text x="35.4936%" y="175.50"></text></g><g><title>item_types_checking (706,998 samples, 1.37%)</title><rect x="34.8353%" y="229" width="1.3720%" height="15" fill="rgb(242,107,0)"/><text x="35.0853%" y="239.50"></text></g><g><title>check_mod_item_types (703,788 samples, 1.37%)</title><rect x="34.8416%" y="213" width="1.3658%" height="15" fill="rgb(251,28,31)"/><text x="35.0916%" y="223.50"></text></g><g><title>typeck (127,682 samples, 0.25%)</title><rect x="35.9596%" y="197" width="0.2478%" height="15" fill="rgb(233,223,10)"/><text x="36.2096%" y="207.50"></text></g><g><title>fn_sig (86,751 samples, 0.17%)</title><rect x="36.4013%" y="197" width="0.1684%" height="15" fill="rgb(215,21,27)"/><text x="36.6513%" y="207.50"></text></g><g><title>is_late_bound_map (117,484 samples, 0.23%)</title><rect x="36.6512%" y="181" width="0.2280%" height="15" fill="rgb(232,23,21)"/><text x="36.9012%" y="191.50"></text></g><g><title>resolve_lifetimes (106,374 samples, 0.21%)</title><rect x="36.6727%" y="165" width="0.2064%" height="15" fill="rgb(244,5,23)"/><text x="36.9227%" y="175.50"></text></g><g><title>generics_of (214,544 samples, 0.42%)</title><rect x="36.5697%" y="197" width="0.4164%" height="15" fill="rgb(226,81,46)"/><text x="36.8197%" y="207.50"></text></g><g><title>predicates_of (152,912 samples, 0.30%)</title><rect x="37.0382%" y="197" width="0.2967%" height="15" fill="rgb(247,70,30)"/><text x="37.2882%" y="207.50"></text></g><g><title>predicates_defined_on (138,722 samples, 0.27%)</title><rect x="37.0657%" y="181" width="0.2692%" height="15" fill="rgb(212,68,19)"/><text x="37.3157%" y="191.50"></text></g><g><title>inferred_outlives_of (59,851 samples, 0.12%)</title><rect x="37.2188%" y="165" width="0.1161%" height="15" fill="rgb(240,187,13)"/><text x="37.4688%" y="175.50"></text></g><g><title>type_collecting (663,877 samples, 1.29%)</title><rect x="36.2097%" y="229" width="1.2883%" height="15" fill="rgb(223,113,26)"/><text x="36.4597%" y="239.50"></text></g><g><title>collect_mod_item_types (654,667 samples, 1.27%)</title><rect x="36.2276%" y="213" width="1.2705%" height="15" fill="rgb(206,192,2)"/><text x="36.4776%" y="223.50"></text></g><g><title>type_of (84,080 samples, 0.16%)</title><rect x="37.3349%" y="197" width="0.1632%" height="15" fill="rgb(241,108,4)"/><text x="37.5849%" y="207.50"></text></g><g><title>evaluate_obligation (128,011 samples, 0.25%)</title><rect x="38.3409%" y="197" width="0.2484%" height="15" fill="rgb(247,173,49)"/><text x="38.5909%" y="207.50"></text></g><g><title>implied_outlives_bounds (53,780 samples, 0.10%)</title><rect x="38.5893%" y="197" width="0.1044%" height="15" fill="rgb(224,114,35)"/><text x="38.8393%" y="207.50"></text></g><g><title>param_env (63,550 samples, 0.12%)</title><rect x="38.6937%" y="197" width="0.1233%" height="15" fill="rgb(245,159,27)"/><text x="38.9437%" y="207.50"></text></g><g><title>check_impl_item_well_formed (705,208 samples, 1.37%)</title><rect x="37.6021%" y="213" width="1.3686%" height="15" fill="rgb(245,172,44)"/><text x="37.8521%" y="223.50"></text></g><g><title>region_scope_tree (60,712 samples, 0.12%)</title><rect x="38.8528%" y="197" width="0.1178%" height="15" fill="rgb(236,23,11)"/><text x="39.1028%" y="207.50"></text></g><g><title>evaluate_obligation (88,740 samples, 0.17%)</title><rect x="39.9424%" y="197" width="0.1722%" height="15" fill="rgb(205,117,38)"/><text x="40.1924%" y="207.50"></text></g><g><title>implied_outlives_bounds (62,211 samples, 0.12%)</title><rect x="40.1221%" y="197" width="0.1207%" height="15" fill="rgb(237,72,25)"/><text x="40.3721%" y="207.50"></text></g><g><title>param_env (90,160 samples, 0.17%)</title><rect x="40.2428%" y="197" width="0.1750%" height="15" fill="rgb(244,70,9)"/><text x="40.4928%" y="207.50"></text></g><g><title>analysis (20,305,286 samples, 39.41%)</title><rect x="1.1638%" y="261" width="39.4053%" height="15" fill="rgb(217,125,39)"/><text x="1.4138%" y="271.50">analysis</text></g><g><title>type_check_crate (10,515,697 samples, 20.41%)</title><rect x="20.1619%" y="245" width="20.4072%" height="15" fill="rgb(235,36,10)"/><text x="20.4119%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,580,927 samples, 3.07%)</title><rect x="37.5011%" y="229" width="3.0680%" height="15" fill="rgb(251,123,47)"/><text x="37.7511%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (823,699 samples, 1.60%)</title><rect x="38.9706%" y="213" width="1.5985%" height="15" fill="rgb(221,13,13)"/><text x="39.2206%" y="223.50"></text></g><g><title>codegen_crate (427,805 samples, 0.83%)</title><rect x="40.5921%" y="261" width="0.8302%" height="15" fill="rgb(238,131,9)"/><text x="40.8421%" y="271.50"></text></g><g><title>AST_validation (140,151 samples, 0.27%)</title><rect x="41.8591%" y="245" width="0.2720%" height="15" fill="rgb(211,50,8)"/><text x="42.1091%" y="255.50"></text></g><g><title>crate_injection (87,481 samples, 0.17%)</title><rect x="42.1846%" y="245" width="0.1698%" height="15" fill="rgb(245,182,24)"/><text x="42.4346%" y="255.50"></text></g><g><title>metadata_load_macro (159,010 samples, 0.31%)</title><rect x="64.3905%" y="213" width="0.3086%" height="15" fill="rgb(242,14,37)"/><text x="64.6405%" y="223.50"></text></g><g><title>metadata_register_crate (2,701,591 samples, 5.24%)</title><rect x="64.6991%" y="213" width="5.2428%" height="15" fill="rgb(246,228,12)"/><text x="64.9491%" y="223.50">metada..</text></g><g><title>metadata_register_crate (970,793 samples, 1.88%)</title><rect x="68.0580%" y="197" width="1.8840%" height="15" fill="rgb(213,55,15)"/><text x="68.3080%" y="207.50">m..</text></g><g><title>metadata_register_crate (76,743 samples, 0.15%)</title><rect x="69.7930%" y="181" width="0.1489%" height="15" fill="rgb(209,9,3)"/><text x="70.0430%" y="191.50"></text></g><g><title>macro_expand_crate (14,282,269 samples, 27.72%)</title><rect x="42.3544%" y="245" width="27.7168%" height="15" fill="rgb(230,59,30)"/><text x="42.6044%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (14,257,039 samples, 27.67%)</title><rect x="42.4034%" y="229" width="27.6678%" height="15" fill="rgb(209,121,21)"/><text x="42.6534%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (66,623 samples, 0.13%)</title><rect x="69.9419%" y="213" width="0.1293%" height="15" fill="rgb(220,109,13)"/><text x="70.1919%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (108,141 samples, 0.21%)</title><rect x="70.0800%" y="245" width="0.2099%" height="15" fill="rgb(232,18,1)"/><text x="70.3300%" y="255.50"></text></g><g><title>finalize_imports (51,761 samples, 0.10%)</title><rect x="70.3032%" y="229" width="0.1004%" height="15" fill="rgb(215,41,42)"/><text x="70.5532%" y="239.50"></text></g><g><title>finalize_macro_resolutions (323,584 samples, 0.63%)</title><rect x="70.4036%" y="229" width="0.6280%" height="15" fill="rgb(224,123,36)"/><text x="70.6536%" y="239.50"></text></g><g><title>late_resolve_crate (8,320,172 samples, 16.15%)</title><rect x="71.0316%" y="229" width="16.1465%" height="15" fill="rgb(240,125,3)"/><text x="71.2816%" y="239.50">late_resolve_crate</text></g><g><title>configure_and_expand (23,617,773 samples, 45.83%)</title><rect x="41.4223%" y="261" width="45.8337%" height="15" fill="rgb(205,98,50)"/><text x="41.6723%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (8,742,517 samples, 16.97%)</title><rect x="70.2899%" y="245" width="16.9661%" height="15" fill="rgb(205,185,37)"/><text x="70.5399%" y="255.50">resolve_crate</text></g><g><title>early_lint_checks (104,061 samples, 0.20%)</title><rect x="87.3735%" y="261" width="0.2019%" height="15" fill="rgb(238,207,15)"/><text x="87.6235%" y="271.50"></text></g><g><title>free_global_ctxt (2,543,088 samples, 4.94%)</title><rect x="87.5755%" y="261" width="4.9352%" height="15" fill="rgb(213,199,42)"/><text x="87.8255%" y="271.50">free_g..</text></g><g><title>crate_hash (68,141 samples, 0.13%)</title><rect x="93.1826%" y="245" width="0.1322%" height="15" fill="rgb(235,201,11)"/><text x="93.4326%" y="255.50"></text></g><g><title>generate_crate_metadata (485,856 samples, 0.94%)</title><rect x="92.5107%" y="261" width="0.9429%" height="15" fill="rgb(207,46,11)"/><text x="92.7607%" y="271.50"></text></g><g><title>hir_lowering (838,699 samples, 1.63%)</title><rect x="93.4536%" y="261" width="1.6276%" height="15" fill="rgb(241,35,35)"/><text x="93.7036%" y="271.50"></text></g><g><title>parse_crate (1,488,726 samples, 2.89%)</title><rect x="95.1658%" y="261" width="2.8891%" height="15" fill="rgb(243,32,47)"/><text x="95.4158%" y="271.50">pa..</text></g><g><title>prepare_outputs (180,722 samples, 0.35%)</title><rect x="98.0707%" y="261" width="0.3507%" height="15" fill="rgb(247,202,23)"/><text x="98.3207%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (418,015 samples, 0.81%)</title><rect x="98.4214%" y="261" width="0.8112%" height="15" fill="rgb(219,102,11)"/><text x="98.6714%" y="271.50"></text></g><g><title>setup_global_ctxt (73,801 samples, 0.14%)</title><rect x="99.2521%" y="261" width="0.1432%" height="15" fill="rgb(243,110,44)"/><text x="99.5021%" y="271.50"></text></g><g><title>all (51,529,283 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (51,529,283 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (311,573 samples, 0.60%)</title><rect x="99.3953%" y="261" width="0.6047%" height="15" fill="rgb(226,22,26)"/><text x="99.6453%" y="271.50"></text></g></svg></svg>