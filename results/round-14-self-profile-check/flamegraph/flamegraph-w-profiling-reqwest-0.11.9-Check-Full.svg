<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,811,883 samples, 0.24%)</title><rect x="12.5372%" y="181" width="0.2408%" height="15" fill="rgb(227,0,7)"/><text x="12.7872%" y="191.50"></text></g><g><title>item_attrs (1,261,996 samples, 0.17%)</title><rect x="13.2483%" y="149" width="0.1677%" height="15" fill="rgb(217,0,24)"/><text x="13.4983%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,206,976 samples, 0.16%)</title><rect x="13.2556%" y="133" width="0.1604%" height="15" fill="rgb(221,193,54)"/><text x="13.5056%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,765,018 samples, 0.23%)</title><rect x="13.1923%" y="165" width="0.2346%" height="15" fill="rgb(248,212,6)"/><text x="13.4423%" y="175.50"></text></g><g><title>adt_drop_tys (1,319,117 samples, 0.18%)</title><rect x="15.9689%" y="133" width="0.1753%" height="15" fill="rgb(208,68,35)"/><text x="16.2189%" y="143.50"></text></g><g><title>is_copy_raw (6,510,711 samples, 0.87%)</title><rect x="16.1469%" y="133" width="0.8653%" height="15" fill="rgb(232,128,0)"/><text x="16.3969%" y="143.50"></text></g><g><title>evaluate_obligation (5,351,570 samples, 0.71%)</title><rect x="16.3009%" y="117" width="0.7112%" height="15" fill="rgb(207,160,47)"/><text x="16.5509%" y="127.50"></text></g><g><title>needs_drop_raw (8,795,696 samples, 1.17%)</title><rect x="15.8482%" y="149" width="1.1690%" height="15" fill="rgb(228,23,34)"/><text x="16.0982%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (2,199,327 samples, 0.29%)</title><rect x="17.1916%" y="133" width="0.2923%" height="15" fill="rgb(218,30,26)"/><text x="17.4416%" y="143.50"></text></g><g><title>specialization_graph_of (1,201,052 samples, 0.16%)</title><rect x="17.5391%" y="133" width="0.1596%" height="15" fill="rgb(220,122,19)"/><text x="17.7891%" y="143.50"></text></g><g><title>resolve_instance (5,563,351 samples, 0.74%)</title><rect x="17.0220%" y="149" width="0.7394%" height="15" fill="rgb(250,228,42)"/><text x="17.2720%" y="159.50"></text></g><g><title>thir_body (6,916,704 samples, 0.92%)</title><rect x="17.7840%" y="149" width="0.9192%" height="15" fill="rgb(240,193,28)"/><text x="18.0340%" y="159.50"></text></g><g><title>mir_const (51,600,157 samples, 6.86%)</title><rect x="11.8685%" y="197" width="6.8578%" height="15" fill="rgb(216,20,37)"/><text x="12.1185%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (44,756,454 samples, 5.95%)</title><rect x="12.7780%" y="181" width="5.9483%" height="15" fill="rgb(206,188,39)"/><text x="13.0280%" y="191.50">unsafety..</text></g><g><title>mir_built (39,874,474 samples, 5.30%)</title><rect x="13.4269%" y="165" width="5.2994%" height="15" fill="rgb(217,207,13)"/><text x="13.6769%" y="175.50">mir_bu..</text></g><g><title>mir_const_qualif (1,447,346 samples, 0.19%)</title><rect x="18.7263%" y="197" width="0.1924%" height="15" fill="rgb(231,73,38)"/><text x="18.9763%" y="207.50"></text></g><g><title>mir_promoted (58,445,284 samples, 7.77%)</title><rect x="11.1521%" y="213" width="7.7675%" height="15" fill="rgb(225,20,46)"/><text x="11.4021%" y="223.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,263,139 samples, 0.43%)</title><rect x="18.9198%" y="213" width="0.4337%" height="15" fill="rgb(210,31,41)"/><text x="19.1698%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (3,672,370 samples, 0.49%)</title><rect x="19.3535%" y="213" width="0.4881%" height="15" fill="rgb(221,200,47)"/><text x="19.6035%" y="223.50"></text></g><g><title>normalize_projection_ty (2,206,834 samples, 0.29%)</title><rect x="19.5483%" y="197" width="0.2933%" height="15" fill="rgb(226,26,5)"/><text x="19.7983%" y="207.50"></text></g><g><title>type_op_normalize_predicate (919,424 samples, 0.12%)</title><rect x="19.8416%" y="213" width="0.1222%" height="15" fill="rgb(249,33,26)"/><text x="20.0916%" y="223.50"></text></g><g><title>type_op_normalize_ty (924,350 samples, 0.12%)</title><rect x="19.9638%" y="213" width="0.1228%" height="15" fill="rgb(235,183,28)"/><text x="20.2138%" y="223.50"></text></g><g><title>type_op_prove_predicate (18,213,155 samples, 2.42%)</title><rect x="20.0866%" y="213" width="2.4206%" height="15" fill="rgb(221,5,38)"/><text x="20.3366%" y="223.50">ty..</text></g><g><title>MIR_borrow_checking (166,125,136 samples, 22.08%)</title><rect x="0.4306%" y="245" width="22.0785%" height="15" fill="rgb(247,18,42)"/><text x="0.6806%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (164,998,030 samples, 21.93%)</title><rect x="0.5804%" y="229" width="21.9287%" height="15" fill="rgb(241,131,45)"/><text x="0.8304%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (1,217,812 samples, 0.16%)</title><rect x="22.6082%" y="245" width="0.1619%" height="15" fill="rgb(249,31,29)"/><text x="22.8582%" y="255.50"></text></g><g><title>should_inherit_track_caller (826,108 samples, 0.11%)</title><rect x="23.0424%" y="197" width="0.1098%" height="15" fill="rgb(225,111,53)"/><text x="23.2924%" y="207.50"></text></g><g><title>codegen_fn_attrs (1,486,118 samples, 0.20%)</title><rect x="22.9564%" y="213" width="0.1975%" height="15" fill="rgb(238,160,17)"/><text x="23.2064%" y="223.50"></text></g><g><title>check_mod_attrs (2,825,953 samples, 0.38%)</title><rect x="22.7784%" y="229" width="0.3756%" height="15" fill="rgb(214,148,48)"/><text x="23.0284%" y="239.50"></text></g><g><title>lint_levels (1,215,943 samples, 0.16%)</title><rect x="23.4252%" y="213" width="0.1616%" height="15" fill="rgb(232,36,49)"/><text x="23.6752%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (2,902,094 samples, 0.39%)</title><rect x="23.3137%" y="229" width="0.3857%" height="15" fill="rgb(209,103,24)"/><text x="23.5637%" y="239.50"></text></g><g><title>misc_checking_1 (7,238,660 samples, 0.96%)</title><rect x="22.7701%" y="245" width="0.9620%" height="15" fill="rgb(229,88,8)"/><text x="23.0201%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (4,404,760 samples, 0.59%)</title><rect x="23.7326%" y="229" width="0.5854%" height="15" fill="rgb(213,181,19)"/><text x="23.9826%" y="239.50"></text></g><g><title>check_mod_liveness (3,797,671 samples, 0.50%)</title><rect x="23.8133%" y="213" width="0.5047%" height="15" fill="rgb(254,191,54)"/><text x="24.0633%" y="223.50"></text></g><g><title>type_uninhabited_from (1,486,517 samples, 0.20%)</title><rect x="24.1204%" y="197" width="0.1976%" height="15" fill="rgb(241,83,37)"/><text x="24.3704%" y="207.50"></text></g><g><title>type_uninhabited_from (913,953 samples, 0.12%)</title><rect x="24.1965%" y="181" width="0.1215%" height="15" fill="rgb(233,36,39)"/><text x="24.4465%" y="191.50"></text></g><g><title>misc_checking_2 (14,979,298 samples, 1.99%)</title><rect x="23.7321%" y="245" width="1.9908%" height="15" fill="rgb(226,3,54)"/><text x="23.9821%" y="255.50">m..</text></g><g><title>match_checking (10,571,188 samples, 1.40%)</title><rect x="24.3180%" y="229" width="1.4049%" height="15" fill="rgb(245,192,40)"/><text x="24.5680%" y="239.50"></text></g><g><title>check_match (10,288,406 samples, 1.37%)</title><rect x="24.3556%" y="213" width="1.3674%" height="15" fill="rgb(238,167,29)"/><text x="24.6056%" y="223.50"></text></g><g><title>visible_parent_map (5,315,299 samples, 0.71%)</title><rect x="25.0165%" y="197" width="0.7064%" height="15" fill="rgb(232,182,51)"/><text x="25.2665%" y="207.50"></text></g><g><title>module_children (4,746,235 samples, 0.63%)</title><rect x="25.0921%" y="181" width="0.6308%" height="15" fill="rgb(231,60,39)"/><text x="25.3421%" y="191.50"></text></g><g><title>metadata_decode_entry_module_children (4,638,862 samples, 0.62%)</title><rect x="25.1064%" y="165" width="0.6165%" height="15" fill="rgb(208,69,12)"/><text x="25.3564%" y="175.50"></text></g><g><title>check_private_in_public (1,445,396 samples, 0.19%)</title><rect x="25.7247%" y="229" width="0.1921%" height="15" fill="rgb(235,93,37)"/><text x="25.9747%" y="239.50"></text></g><g><title>death_checking (2,565,208 samples, 0.34%)</title><rect x="25.9168%" y="229" width="0.3409%" height="15" fill="rgb(213,116,39)"/><text x="26.1668%" y="239.50"></text></g><g><title>param_env (1,786,930 samples, 0.24%)</title><rect x="26.9252%" y="197" width="0.2375%" height="15" fill="rgb(222,207,29)"/><text x="27.1752%" y="207.50"></text></g><g><title>predicates_of (836,256 samples, 0.11%)</title><rect x="27.0515%" y="181" width="0.1111%" height="15" fill="rgb(206,96,30)"/><text x="27.3015%" y="191.50"></text></g><g><title>crate_lints (9,254,284 samples, 1.23%)</title><rect x="26.2581%" y="213" width="1.2299%" height="15" fill="rgb(218,138,4)"/><text x="26.5081%" y="223.50"></text></g><g><title>type_of (1,960,198 samples, 0.26%)</title><rect x="27.2275%" y="197" width="0.2605%" height="15" fill="rgb(250,191,14)"/><text x="27.4775%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (1,528,815 samples, 0.20%)</title><rect x="27.2848%" y="181" width="0.2032%" height="15" fill="rgb(239,60,40)"/><text x="27.5348%" y="191.50"></text></g><g><title>lint_checking (13,479,601 samples, 1.79%)</title><rect x="26.2577%" y="229" width="1.7915%" height="15" fill="rgb(206,27,48)"/><text x="26.5077%" y="239.50">l..</text></g><g><title>module_lints (4,222,347 samples, 0.56%)</title><rect x="27.4880%" y="213" width="0.5612%" height="15" fill="rgb(225,35,8)"/><text x="27.7380%" y="223.50"></text></g><g><title>lint_mod (4,202,736 samples, 0.56%)</title><rect x="27.4906%" y="197" width="0.5586%" height="15" fill="rgb(250,213,24)"/><text x="27.7406%" y="207.50"></text></g><g><title>privacy_access_levels (2,626,668 samples, 0.35%)</title><rect x="28.0492%" y="229" width="0.3491%" height="15" fill="rgb(247,123,22)"/><text x="28.2992%" y="239.50"></text></g><g><title>privacy_checking_modules (7,498,334 samples, 1.00%)</title><rect x="28.3983%" y="229" width="0.9965%" height="15" fill="rgb(231,138,38)"/><text x="28.6483%" y="239.50"></text></g><g><title>check_mod_privacy (7,481,964 samples, 0.99%)</title><rect x="28.4004%" y="213" width="0.9944%" height="15" fill="rgb(231,145,46)"/><text x="28.6504%" y="223.50"></text></g><g><title>misc_checking_3 (27,679,759 samples, 3.68%)</title><rect x="25.7229%" y="245" width="3.6787%" height="15" fill="rgb(251,118,11)"/><text x="25.9729%" y="255.50">misc..</text></g><g><title>adt_destructor (756,848 samples, 0.10%)</title><rect x="29.4794%" y="197" width="0.1006%" height="15" fill="rgb(217,147,25)"/><text x="29.7294%" y="207.50"></text></g><g><title>coherent_trait (752,618 samples, 0.10%)</title><rect x="29.4800%" y="181" width="0.1000%" height="15" fill="rgb(247,81,37)"/><text x="29.7300%" y="191.50"></text></g><g><title>impl_parent (5,593,812 samples, 0.74%)</title><rect x="30.8720%" y="181" width="0.7434%" height="15" fill="rgb(209,12,38)"/><text x="31.1220%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (3,057,984 samples, 0.41%)</title><rect x="31.2091%" y="165" width="0.4064%" height="15" fill="rgb(227,1,9)"/><text x="31.4591%" y="175.50"></text></g><g><title>impl_trait_ref (10,716,769 samples, 1.42%)</title><rect x="31.6157%" y="181" width="1.4243%" height="15" fill="rgb(248,47,43)"/><text x="31.8657%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,348,579 samples, 1.11%)</title><rect x="31.9304%" y="165" width="1.1095%" height="15" fill="rgb(221,10,30)"/><text x="32.1804%" y="175.50"></text></g><g><title>trait_impls_of (2,753,831 samples, 0.37%)</title><rect x="33.0569%" y="181" width="0.3660%" height="15" fill="rgb(210,229,1)"/><text x="33.3069%" y="191.50"></text></g><g><title>implementations_of_trait (1,061,743 samples, 0.14%)</title><rect x="33.2818%" y="165" width="0.1411%" height="15" fill="rgb(222,148,37)"/><text x="33.5318%" y="175.50"></text></g><g><title>coherent_trait (29,762,563 samples, 3.96%)</title><rect x="29.4676%" y="213" width="3.9555%" height="15" fill="rgb(234,67,33)"/><text x="29.7176%" y="223.50">cohe..</text></g><g><title>specialization_graph_of (28,788,191 samples, 3.83%)</title><rect x="29.5971%" y="197" width="3.8260%" height="15" fill="rgb(247,98,35)"/><text x="29.8471%" y="207.50">spec..</text></g><g><title>coherence_checking (30,255,758 samples, 4.02%)</title><rect x="29.4619%" y="229" width="4.0211%" height="15" fill="rgb(247,138,52)"/><text x="29.7119%" y="239.50">cohe..</text></g><g><title>associated_items (890,457 samples, 0.12%)</title><rect x="48.3046%" y="181" width="0.1183%" height="15" fill="rgb(213,79,30)"/><text x="48.5546%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,149,054 samples, 0.15%)</title><rect x="48.7741%" y="165" width="0.1527%" height="15" fill="rgb(246,177,23)"/><text x="49.0241%" y="175.50"></text></g><g><title>dropck_outlives (3,659,766 samples, 0.49%)</title><rect x="48.4642%" y="181" width="0.4864%" height="15" fill="rgb(230,62,27)"/><text x="48.7142%" y="191.50"></text></g><g><title>generics_of (1,216,367 samples, 0.16%)</title><rect x="50.7140%" y="165" width="0.1617%" height="15" fill="rgb(216,154,8)"/><text x="50.9640%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (942,595 samples, 0.13%)</title><rect x="50.7504%" y="149" width="0.1253%" height="15" fill="rgb(244,35,45)"/><text x="51.0004%" y="159.50"></text></g><g><title>impl_trait_ref (1,913,172 samples, 0.25%)</title><rect x="50.9020%" y="165" width="0.2543%" height="15" fill="rgb(251,115,12)"/><text x="51.1520%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,865,512 samples, 0.25%)</title><rect x="50.9083%" y="149" width="0.2479%" height="15" fill="rgb(240,54,50)"/><text x="51.1583%" y="159.50"></text></g><g><title>predicates_of (942,070 samples, 0.13%)</title><rect x="51.1639%" y="165" width="0.1252%" height="15" fill="rgb(233,84,52)"/><text x="51.4139%" y="175.50"></text></g><g><title>trait_impls_of (1,050,793 samples, 0.14%)</title><rect x="51.3864%" y="165" width="0.1397%" height="15" fill="rgb(207,117,47)"/><text x="51.6364%" y="175.50"></text></g><g><title>evaluate_obligation (19,553,558 samples, 2.60%)</title><rect x="48.9506%" y="181" width="2.5987%" height="15" fill="rgb(249,43,39)"/><text x="49.2006%" y="191.50">ev..</text></g><g><title>method_autoderef_steps (2,468,596 samples, 0.33%)</title><rect x="51.8326%" y="181" width="0.3281%" height="15" fill="rgb(209,38,44)"/><text x="52.0826%" y="191.50"></text></g><g><title>evaluate_obligation (859,060 samples, 0.11%)</title><rect x="52.0465%" y="165" width="0.1142%" height="15" fill="rgb(236,212,23)"/><text x="52.2965%" y="175.50"></text></g><g><title>predicates_of (1,630,508 samples, 0.22%)</title><rect x="52.2046%" y="181" width="0.2167%" height="15" fill="rgb(242,79,21)"/><text x="52.4546%" y="191.50"></text></g><g><title>predicates_defined_on (909,644 samples, 0.12%)</title><rect x="52.3004%" y="165" width="0.1209%" height="15" fill="rgb(211,96,35)"/><text x="52.5504%" y="175.50"></text></g><g><title>specializes (1,084,922 samples, 0.14%)</title><rect x="52.4222%" y="181" width="0.1442%" height="15" fill="rgb(253,215,40)"/><text x="52.6722%" y="191.50"></text></g><g><title>dropck_outlives (1,160,066 samples, 0.15%)</title><rect x="57.0488%" y="165" width="0.1542%" height="15" fill="rgb(211,81,21)"/><text x="57.2988%" y="175.50"></text></g><g><title>evaluate_obligation (5,147,626 samples, 0.68%)</title><rect x="57.2029%" y="165" width="0.6841%" height="15" fill="rgb(208,190,38)"/><text x="57.4529%" y="175.50"></text></g><g><title>evaluate_obligation (963,681 samples, 0.13%)</title><rect x="58.2372%" y="149" width="0.1281%" height="15" fill="rgb(235,213,38)"/><text x="58.4872%" y="159.50"></text></g><g><title>method_autoderef_steps (1,954,795 samples, 0.26%)</title><rect x="58.1079%" y="165" width="0.2598%" height="15" fill="rgb(237,122,38)"/><text x="58.3579%" y="175.50"></text></g><g><title>typeck (44,117,783 samples, 5.86%)</title><rect x="52.6223%" y="181" width="5.8634%" height="15" fill="rgb(244,218,35)"/><text x="52.8723%" y="191.50">typeck</text></g><g><title>item_bodies_checking (188,153,602 samples, 25.01%)</title><rect x="33.5083%" y="229" width="25.0061%" height="15" fill="rgb(240,68,47)"/><text x="33.7583%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (188,149,572 samples, 25.01%)</title><rect x="33.5088%" y="213" width="25.0056%" height="15" fill="rgb(210,16,53)"/><text x="33.7588%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (187,561,155 samples, 24.93%)</title><rect x="33.5870%" y="197" width="24.9274%" height="15" fill="rgb(235,124,12)"/><text x="33.8370%" y="207.50">typeck</text></g><g><title>evaluate_obligation (1,878,562 samples, 0.25%)</title><rect x="59.4700%" y="197" width="0.2497%" height="15" fill="rgb(224,169,11)"/><text x="59.7200%" y="207.50"></text></g><g><title>mir_borrowck (1,007,421 samples, 0.13%)</title><rect x="61.6860%" y="149" width="0.1339%" height="15" fill="rgb(250,166,2)"/><text x="61.9360%" y="159.50"></text></g><g><title>mir_const (1,060,461 samples, 0.14%)</title><rect x="61.9244%" y="133" width="0.1409%" height="15" fill="rgb(242,216,29)"/><text x="62.1744%" y="143.50"></text></g><g><title>mir_promoted (1,860,214 samples, 0.25%)</title><rect x="61.8199%" y="149" width="0.2472%" height="15" fill="rgb(230,116,27)"/><text x="62.0699%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,381,798 samples, 0.18%)</title><rect x="62.0950%" y="149" width="0.1836%" height="15" fill="rgb(228,99,48)"/><text x="62.3450%" y="159.50"></text></g><g><title>normalize_projection_ty (962,986 samples, 0.13%)</title><rect x="62.1506%" y="133" width="0.1280%" height="15" fill="rgb(253,11,6)"/><text x="62.4006%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,288,666 samples, 0.44%)</title><rect x="62.3200%" y="149" width="0.4371%" height="15" fill="rgb(247,143,39)"/><text x="62.5700%" y="159.50"></text></g><g><title>mir_borrowck (18,966,625 samples, 2.52%)</title><rect x="60.2368%" y="165" width="2.5207%" height="15" fill="rgb(236,97,10)"/><text x="60.4868%" y="175.50">mi..</text></g><g><title>associated_item (1,391,956 samples, 0.18%)</title><rect x="67.0494%" y="69" width="0.1850%" height="15" fill="rgb(233,208,19)"/><text x="67.2994%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (1,250,315 samples, 0.17%)</title><rect x="67.0682%" y="53" width="0.1662%" height="15" fill="rgb(216,164,2)"/><text x="67.3182%" y="63.50"></text></g><g><title>associated_items (1,723,239 samples, 0.23%)</title><rect x="67.0133%" y="85" width="0.2290%" height="15" fill="rgb(220,129,5)"/><text x="67.2633%" y="95.50"></text></g><g><title>adt_dtorck_constraint (970,274 samples, 0.13%)</title><rect x="67.5168%" y="37" width="0.1290%" height="15" fill="rgb(242,17,10)"/><text x="67.7668%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,420,297 samples, 0.19%)</title><rect x="67.4692%" y="53" width="0.1888%" height="15" fill="rgb(242,107,0)"/><text x="67.7192%" y="63.50"></text></g><g><title>adt_dtorck_constraint (2,351,026 samples, 0.31%)</title><rect x="67.3679%" y="69" width="0.3125%" height="15" fill="rgb(251,28,31)"/><text x="67.6179%" y="79.50"></text></g><g><title>dropck_outlives (3,460,201 samples, 0.46%)</title><rect x="67.2567%" y="85" width="0.4599%" height="15" fill="rgb(233,223,10)"/><text x="67.5067%" y="95.50"></text></g><g><title>trait_impls_of (1,185,393 samples, 0.16%)</title><rect x="68.4748%" y="69" width="0.1575%" height="15" fill="rgb(215,21,27)"/><text x="68.7248%" y="79.50"></text></g><g><title>evaluate_obligation (6,927,326 samples, 0.92%)</title><rect x="67.7177%" y="85" width="0.9207%" height="15" fill="rgb(232,23,21)"/><text x="67.9677%" y="95.50"></text></g><g><title>is_copy_raw (1,181,837 samples, 0.16%)</title><rect x="68.7676%" y="85" width="0.1571%" height="15" fill="rgb(244,5,23)"/><text x="69.0176%" y="95.50"></text></g><g><title>evaluate_obligation (938,464 samples, 0.12%)</title><rect x="68.8000%" y="69" width="0.1247%" height="15" fill="rgb(226,81,46)"/><text x="69.0500%" y="79.50"></text></g><g><title>mir_built (48,423,771 samples, 6.44%)</title><rect x="62.8254%" y="117" width="6.4357%" height="15" fill="rgb(247,70,30)"/><text x="63.0754%" y="127.50">mir_built</text></g><g><title>typeck (46,850,902 samples, 6.23%)</title><rect x="63.0345%" y="101" width="6.2266%" height="15" fill="rgb(212,68,19)"/><text x="63.2845%" y="111.50">typeck</text></g><g><title>needs_drop_raw (986,433 samples, 0.13%)</title><rect x="69.6981%" y="85" width="0.1311%" height="15" fill="rgb(240,187,13)"/><text x="69.9481%" y="95.50"></text></g><g><title>thir_body (805,991 samples, 0.11%)</title><rect x="69.8333%" y="85" width="0.1071%" height="15" fill="rgb(223,113,26)"/><text x="70.0833%" y="95.50"></text></g><g><title>mir_built (4,319,759 samples, 0.57%)</title><rect x="69.3692%" y="101" width="0.5741%" height="15" fill="rgb(206,192,2)"/><text x="69.6192%" y="111.50"></text></g><g><title>mir_const (54,167,175 samples, 7.20%)</title><rect x="62.7820%" y="149" width="7.1990%" height="15" fill="rgb(241,108,4)"/><text x="63.0320%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (53,925,843 samples, 7.17%)</title><rect x="62.8141%" y="133" width="7.1669%" height="15" fill="rgb(247,173,49)"/><text x="63.0641%" y="143.50">unsafety_c..</text></g><g><title>unsafety_check_result (5,416,671 samples, 0.72%)</title><rect x="69.2611%" y="117" width="0.7199%" height="15" fill="rgb(224,114,35)"/><text x="69.5111%" y="127.50"></text></g><g><title>mir_promoted (54,370,248 samples, 7.23%)</title><rect x="62.7575%" y="165" width="7.2260%" height="15" fill="rgb(245,159,27)"/><text x="63.0075%" y="175.50">mir_promot..</text></g><g><title>type_of (77,283,644 samples, 10.27%)</title><rect x="59.8288%" y="197" width="10.2712%" height="15" fill="rgb(245,172,44)"/><text x="60.0788%" y="207.50">type_of</text></g><g><title>mir_borrowck (77,124,053 samples, 10.25%)</title><rect x="59.8500%" y="181" width="10.2500%" height="15" fill="rgb(236,23,11)"/><text x="60.1000%" y="191.50">mir_borrowck</text></g><g><title>item_types_checking (88,078,825 samples, 11.71%)</title><rect x="58.5144%" y="229" width="11.7059%" height="15" fill="rgb(205,117,38)"/><text x="58.7644%" y="239.50">item_types_checki..</text></g><g><title>check_mod_item_types (88,053,725 samples, 11.70%)</title><rect x="58.5177%" y="213" width="11.7026%" height="15" fill="rgb(237,72,25)"/><text x="58.7677%" y="223.50">check_mod_item_ty..</text></g><g><title>typeck (905,313 samples, 0.12%)</title><rect x="70.1000%" y="197" width="0.1203%" height="15" fill="rgb(244,70,9)"/><text x="70.3500%" y="207.50"></text></g><g><title>fn_sig (1,914,233 samples, 0.25%)</title><rect x="70.4405%" y="197" width="0.2544%" height="15" fill="rgb(217,125,39)"/><text x="70.6905%" y="207.50"></text></g><g><title>named_region_map (1,109,766 samples, 0.15%)</title><rect x="70.8248%" y="181" width="0.1475%" height="15" fill="rgb(235,36,10)"/><text x="71.0748%" y="191.50"></text></g><g><title>resolve_lifetimes (1,019,104 samples, 0.14%)</title><rect x="70.8369%" y="165" width="0.1354%" height="15" fill="rgb(251,123,47)"/><text x="71.0869%" y="175.50"></text></g><g><title>generics_of (2,162,062 samples, 0.29%)</title><rect x="70.6949%" y="197" width="0.2873%" height="15" fill="rgb(221,13,13)"/><text x="70.9449%" y="207.50"></text></g><g><title>explicit_predicates_of (1,764,673 samples, 0.23%)</title><rect x="71.1554%" y="165" width="0.2345%" height="15" fill="rgb(238,131,9)"/><text x="71.4054%" y="175.50"></text></g><g><title>predicates_of (4,951,723 samples, 0.66%)</title><rect x="71.0057%" y="197" width="0.6581%" height="15" fill="rgb(211,50,8)"/><text x="71.2557%" y="207.50"></text></g><g><title>predicates_defined_on (4,598,840 samples, 0.61%)</title><rect x="71.0526%" y="181" width="0.6112%" height="15" fill="rgb(245,182,24)"/><text x="71.3026%" y="191.50"></text></g><g><title>inferred_outlives_of (2,060,603 samples, 0.27%)</title><rect x="71.3899%" y="165" width="0.2739%" height="15" fill="rgb(242,14,37)"/><text x="71.6399%" y="175.50"></text></g><g><title>inferred_outlives_crate (1,943,101 samples, 0.26%)</title><rect x="71.4056%" y="149" width="0.2582%" height="15" fill="rgb(246,228,12)"/><text x="71.6556%" y="159.50"></text></g><g><title>type_of (1,227,716 samples, 0.16%)</title><rect x="71.5006%" y="133" width="0.1632%" height="15" fill="rgb(213,55,15)"/><text x="71.7506%" y="143.50"></text></g><g><title>type_collecting (11,426,789 samples, 1.52%)</title><rect x="70.2226%" y="229" width="1.5187%" height="15" fill="rgb(209,9,3)"/><text x="70.4726%" y="239.50"></text></g><g><title>collect_mod_item_types (11,402,177 samples, 1.52%)</title><rect x="70.2259%" y="213" width="1.5154%" height="15" fill="rgb(230,59,30)"/><text x="70.4759%" y="223.50"></text></g><g><title>evaluate_obligation (3,814,521 samples, 0.51%)</title><rect x="73.7146%" y="197" width="0.5070%" height="15" fill="rgb(209,121,21)"/><text x="73.9646%" y="207.50"></text></g><g><title>implied_outlives_bounds (1,273,501 samples, 0.17%)</title><rect x="74.2355%" y="197" width="0.1693%" height="15" fill="rgb(220,109,13)"/><text x="74.4855%" y="207.50"></text></g><g><title>param_env (1,992,891 samples, 0.26%)</title><rect x="74.4808%" y="197" width="0.2649%" height="15" fill="rgb(232,18,1)"/><text x="74.7308%" y="207.50"></text></g><g><title>region_scope_tree (2,256,200 samples, 0.30%)</title><rect x="74.7747%" y="197" width="0.2999%" height="15" fill="rgb(215,41,42)"/><text x="75.0247%" y="207.50"></text></g><g><title>check_impl_item_well_formed (23,932,086 samples, 3.18%)</title><rect x="71.9157%" y="213" width="3.1806%" height="15" fill="rgb(224,123,36)"/><text x="72.1657%" y="223.50">che..</text></g><g><title>adt_sized_constraint (1,141,093 samples, 0.15%)</title><rect x="76.2051%" y="181" width="0.1517%" height="15" fill="rgb(240,125,3)"/><text x="76.4551%" y="191.50"></text></g><g><title>evaluate_obligation (2,792,219 samples, 0.37%)</title><rect x="75.9957%" y="197" width="0.3711%" height="15" fill="rgb(205,98,50)"/><text x="76.2457%" y="207.50"></text></g><g><title>object_safety_violations (1,176,863 samples, 0.16%)</title><rect x="76.4320%" y="197" width="0.1564%" height="15" fill="rgb(205,185,37)"/><text x="76.6820%" y="207.50"></text></g><g><title>param_env (1,428,680 samples, 0.19%)</title><rect x="76.5885%" y="197" width="0.1899%" height="15" fill="rgb(238,207,15)"/><text x="76.8385%" y="207.50"></text></g><g><title>check_item_well_formed (13,875,505 samples, 1.84%)</title><rect x="75.0963%" y="213" width="1.8441%" height="15" fill="rgb(213,199,42)"/><text x="75.3463%" y="223.50">c..</text></g><g><title>analysis (577,486,324 samples, 76.75%)</title><rect x="0.2350%" y="261" width="76.7495%" height="15" fill="rgb(235,201,11)"/><text x="0.4850%" y="271.50">analysis</text></g><g><title>type_check_crate (358,028,012 samples, 47.58%)</title><rect x="29.4016%" y="245" width="47.5829%" height="15" fill="rgb(207,46,11)"/><text x="29.6516%" y="255.50">type_check_crate</text></g><g><title>wf_checking (39,406,860 samples, 5.24%)</title><rect x="71.7473%" y="229" width="5.2373%" height="15" fill="rgb(241,35,35)"/><text x="71.9973%" y="239.50">wf_che..</text></g><g><title>AST_validation (988,581 samples, 0.13%)</title><rect x="77.1023%" y="245" width="0.1314%" height="15" fill="rgb(243,32,47)"/><text x="77.3523%" y="255.50"></text></g><g><title>metadata_load_macro (1,331,872 samples, 0.18%)</title><rect x="88.2623%" y="213" width="0.1770%" height="15" fill="rgb(247,202,23)"/><text x="88.5123%" y="223.50"></text></g><g><title>metadata_register_crate (12,230,998 samples, 1.63%)</title><rect x="88.4393%" y="213" width="1.6255%" height="15" fill="rgb(219,102,11)"/><text x="88.6893%" y="223.50"></text></g><g><title>metadata_register_crate (8,667,637 samples, 1.15%)</title><rect x="88.9129%" y="197" width="1.1520%" height="15" fill="rgb(243,110,44)"/><text x="89.1629%" y="207.50"></text></g><g><title>macro_expand_crate (97,761,973 samples, 12.99%)</title><rect x="77.2933%" y="245" width="12.9928%" height="15" fill="rgb(222,74,54)"/><text x="77.5433%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (97,743,562 samples, 12.99%)</title><rect x="77.2958%" y="229" width="12.9904%" height="15" fill="rgb(216,99,12)"/><text x="77.5458%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,665,601 samples, 0.22%)</title><rect x="90.0648%" y="213" width="0.2214%" height="15" fill="rgb(226,22,26)"/><text x="90.3148%" y="223.50"></text></g><g><title>late_resolve_crate (9,963,101 samples, 1.32%)</title><rect x="90.4656%" y="229" width="1.3241%" height="15" fill="rgb(217,163,10)"/><text x="90.7156%" y="239.50"></text></g><g><title>configure_and_expand (111,605,047 samples, 14.83%)</title><rect x="77.0754%" y="261" width="14.8326%" height="15" fill="rgb(213,25,53)"/><text x="77.3254%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (12,073,275 samples, 1.60%)</title><rect x="90.3034%" y="245" width="1.6046%" height="15" fill="rgb(252,105,26)"/><text x="90.5534%" y="255.50"></text></g><g><title>drop_ast (1,539,908 samples, 0.20%)</title><rect x="91.9080%" y="261" width="0.2047%" height="15" fill="rgb(220,39,43)"/><text x="92.1580%" y="271.50"></text></g><g><title>early_lint_checks (2,973,743 samples, 0.40%)</title><rect x="92.1172%" y="261" width="0.3952%" height="15" fill="rgb(229,68,48)"/><text x="92.3672%" y="271.50"></text></g><g><title>free_global_ctxt (9,734,118 samples, 1.29%)</title><rect x="92.5124%" y="261" width="1.2937%" height="15" fill="rgb(252,8,32)"/><text x="92.7624%" y="271.50"></text></g><g><title>layout_of (884,172 samples, 0.12%)</title><rect x="95.7437%" y="229" width="0.1175%" height="15" fill="rgb(223,20,43)"/><text x="95.9937%" y="239.50"></text></g><g><title>layout_of (766,512 samples, 0.10%)</title><rect x="95.7594%" y="213" width="0.1019%" height="15" fill="rgb(229,81,49)"/><text x="96.0094%" y="223.50"></text></g><g><title>is_copy_raw (937,742 samples, 0.12%)</title><rect x="96.7048%" y="197" width="0.1246%" height="15" fill="rgb(236,28,36)"/><text x="96.9548%" y="207.50"></text></g><g><title>evaluate_obligation (756,321 samples, 0.10%)</title><rect x="96.7289%" y="181" width="0.1005%" height="15" fill="rgb(249,185,26)"/><text x="96.9789%" y="191.50"></text></g><g><title>needs_drop_raw (1,190,726 samples, 0.16%)</title><rect x="96.6743%" y="213" width="0.1583%" height="15" fill="rgb(249,174,33)"/><text x="96.9243%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,507,462 samples, 1.00%)</title><rect x="95.8612%" y="229" width="0.9978%" height="15" fill="rgb(233,201,37)"/><text x="96.1112%" y="239.50"></text></g><g><title>optimized_mir (14,425,561 samples, 1.92%)</title><rect x="94.9435%" y="245" width="1.9172%" height="15" fill="rgb(221,78,26)"/><text x="95.1935%" y="255.50">o..</text></g><g><title>generate_crate_metadata (23,388,992 samples, 3.11%)</title><rect x="93.8061%" y="261" width="3.1085%" height="15" fill="rgb(250,127,30)"/><text x="94.0561%" y="271.50">gen..</text></g><g><title>hir_lowering (18,276,305 samples, 2.43%)</title><rect x="96.9146%" y="261" width="2.4290%" height="15" fill="rgb(230,49,44)"/><text x="97.1646%" y="271.50">hi..</text></g><g><title>parse_crate (1,063,282 samples, 0.14%)</title><rect x="99.3557%" y="261" width="0.1413%" height="15" fill="rgb(229,67,23)"/><text x="99.6057%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (2,700,821 samples, 0.36%)</title><rect x="99.5259%" y="261" width="0.3589%" height="15" fill="rgb(249,83,47)"/><text x="99.7759%" y="271.50"></text></g><g><title>all (752,429,619 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (752,429,619 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="287.50">rustc</text></g></svg></svg>