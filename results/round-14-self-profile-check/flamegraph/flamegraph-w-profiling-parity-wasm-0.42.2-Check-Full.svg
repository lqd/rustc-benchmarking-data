<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (8,422,648 samples, 0.60%)</title><rect x="23.6974%" y="69" width="0.6040%" height="15" fill="rgb(227,0,7)"/><text x="23.9474%" y="79.50"></text></g><g><title>evaluate_obligation (6,592,040 samples, 0.47%)</title><rect x="23.8286%" y="53" width="0.4727%" height="15" fill="rgb(217,0,24)"/><text x="24.0786%" y="63.50"></text></g><g><title>needs_drop_raw (10,341,288 samples, 0.74%)</title><rect x="23.5602%" y="85" width="0.7416%" height="15" fill="rgb(221,193,54)"/><text x="23.8102%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,534,560 samples, 0.33%)</title><rect x="24.4858%" y="69" width="0.3252%" height="15" fill="rgb(248,212,6)"/><text x="24.7358%" y="79.50"></text></g><g><title>resolve_instance (8,231,934 samples, 0.59%)</title><rect x="24.3018%" y="85" width="0.5903%" height="15" fill="rgb(208,68,35)"/><text x="24.5518%" y="95.50"></text></g><g><title>thir_body (22,063,178 samples, 1.58%)</title><rect x="24.9154%" y="85" width="1.5822%" height="15" fill="rgb(232,128,0)"/><text x="25.1654%" y="95.50"></text></g><g><title>mir_const (117,988,568 samples, 8.46%)</title><rect x="18.0534%" y="133" width="8.4613%" height="15" fill="rgb(207,160,47)"/><text x="18.3034%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (104,325,075 samples, 7.48%)</title><rect x="19.0333%" y="117" width="7.4815%" height="15" fill="rgb(228,23,34)"/><text x="19.2833%" y="127.50">unsafety_c..</text></g><g><title>mir_built (95,089,180 samples, 6.82%)</title><rect x="19.6956%" y="101" width="6.8192%" height="15" fill="rgb(218,30,26)"/><text x="19.9456%" y="111.50">mir_built</text></g><g><title>mir_promoted (132,023,258 samples, 9.47%)</title><rect x="17.1248%" y="149" width="9.4678%" height="15" fill="rgb(220,122,19)"/><text x="17.3748%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (5,293,036 samples, 0.38%)</title><rect x="26.5939%" y="149" width="0.3796%" height="15" fill="rgb(250,228,42)"/><text x="26.8439%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (6,278,674 samples, 0.45%)</title><rect x="26.9735%" y="149" width="0.4503%" height="15" fill="rgb(240,193,28)"/><text x="27.2235%" y="159.50"></text></g><g><title>normalize_projection_ty (4,106,784 samples, 0.29%)</title><rect x="27.1292%" y="133" width="0.2945%" height="15" fill="rgb(216,20,37)"/><text x="27.3792%" y="143.50"></text></g><g><title>type_op_normalize_predicate (2,836,756 samples, 0.20%)</title><rect x="27.4237%" y="149" width="0.2034%" height="15" fill="rgb(206,188,39)"/><text x="27.6737%" y="159.50"></text></g><g><title>normalize_projection_ty (1,816,773 samples, 0.13%)</title><rect x="27.4969%" y="133" width="0.1303%" height="15" fill="rgb(217,207,13)"/><text x="27.7469%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,813,104 samples, 0.13%)</title><rect x="27.6272%" y="149" width="0.1300%" height="15" fill="rgb(231,73,38)"/><text x="27.8772%" y="159.50"></text></g><g><title>type_op_prove_predicate (20,258,090 samples, 1.45%)</title><rect x="27.7572%" y="149" width="1.4528%" height="15" fill="rgb(225,20,46)"/><text x="28.0072%" y="159.50"></text></g><g><title>evaluate_obligation (1,544,249 samples, 0.11%)</title><rect x="29.0992%" y="133" width="0.1107%" height="15" fill="rgb(210,31,41)"/><text x="29.3492%" y="143.50"></text></g><g><title>MIR_borrow_checking (401,906,292 samples, 28.82%)</title><rect x="0.3896%" y="181" width="28.8220%" height="15" fill="rgb(221,200,47)"/><text x="0.6396%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (399,174,690 samples, 28.63%)</title><rect x="0.5855%" y="165" width="28.6261%" height="15" fill="rgb(226,26,5)"/><text x="0.8355%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (2,713,111 samples, 0.19%)</title><rect x="29.2917%" y="181" width="0.1946%" height="15" fill="rgb(249,33,26)"/><text x="29.5417%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,294,876 samples, 0.16%)</title><rect x="29.7632%" y="149" width="0.1646%" height="15" fill="rgb(235,183,28)"/><text x="30.0132%" y="159.50"></text></g><g><title>check_mod_attrs (6,076,239 samples, 0.44%)</title><rect x="29.4920%" y="165" width="0.4357%" height="15" fill="rgb(221,5,38)"/><text x="29.7420%" y="175.50"></text></g><g><title>check_mod_const_bodies (1,467,365 samples, 0.11%)</title><rect x="29.9278%" y="165" width="0.1052%" height="15" fill="rgb(247,18,42)"/><text x="30.1778%" y="175.50"></text></g><g><title>check_mod_loops (1,438,199 samples, 0.10%)</title><rect x="30.0330%" y="165" width="0.1031%" height="15" fill="rgb(241,131,45)"/><text x="30.2830%" y="175.50"></text></g><g><title>lookup_deprecation_entry (2,008,661 samples, 0.14%)</title><rect x="30.2583%" y="149" width="0.1440%" height="15" fill="rgb(249,31,29)"/><text x="30.5083%" y="159.50"></text></g><g><title>stability_index (1,879,741 samples, 0.13%)</title><rect x="30.2675%" y="133" width="0.1348%" height="15" fill="rgb(225,111,53)"/><text x="30.5175%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,694,140 samples, 0.26%)</title><rect x="30.1472%" y="165" width="0.2649%" height="15" fill="rgb(238,160,17)"/><text x="30.3972%" y="175.50"></text></g><g><title>misc_checking_1 (13,387,360 samples, 0.96%)</title><rect x="29.4863%" y="181" width="0.9601%" height="15" fill="rgb(214,148,48)"/><text x="29.7363%" y="191.50"></text></g><g><title>check_mod_intrinsics (1,550,038 samples, 0.11%)</title><rect x="30.4491%" y="149" width="0.1112%" height="15" fill="rgb(232,36,49)"/><text x="30.6991%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (7,593,565 samples, 0.54%)</title><rect x="30.4467%" y="165" width="0.5446%" height="15" fill="rgb(209,103,24)"/><text x="30.6967%" y="175.50"></text></g><g><title>check_mod_liveness (6,009,406 samples, 0.43%)</title><rect x="30.5603%" y="149" width="0.4310%" height="15" fill="rgb(229,88,8)"/><text x="30.8103%" y="159.50"></text></g><g><title>mir_borrowck (7,976,480 samples, 0.57%)</title><rect x="32.7676%" y="53" width="0.5720%" height="15" fill="rgb(213,181,19)"/><text x="33.0176%" y="63.50"></text></g><g><title>eval_to_const_value_raw (15,073,470 samples, 1.08%)</title><rect x="32.2626%" y="133" width="1.0810%" height="15" fill="rgb(254,191,54)"/><text x="32.5126%" y="143.50"></text></g><g><title>eval_to_const_value_raw (14,685,855 samples, 1.05%)</title><rect x="32.2904%" y="117" width="1.0532%" height="15" fill="rgb(241,83,37)"/><text x="32.5404%" y="127.50"></text></g><g><title>eval_to_allocation_raw (14,370,312 samples, 1.03%)</title><rect x="32.3130%" y="101" width="1.0305%" height="15" fill="rgb(233,36,39)"/><text x="32.5630%" y="111.50"></text></g><g><title>mir_for_ctfe (12,412,779 samples, 0.89%)</title><rect x="32.4534%" y="85" width="0.8902%" height="15" fill="rgb(226,3,54)"/><text x="32.7034%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,361,725 samples, 0.81%)</title><rect x="32.5288%" y="69" width="0.8148%" height="15" fill="rgb(245,192,40)"/><text x="32.7788%" y="79.50"></text></g><g><title>mir_const_qualif (3,522,816 samples, 0.25%)</title><rect x="33.3499%" y="133" width="0.2526%" height="15" fill="rgb(238,167,29)"/><text x="33.5999%" y="143.50"></text></g><g><title>mir_const (3,009,699 samples, 0.22%)</title><rect x="33.3867%" y="117" width="0.2158%" height="15" fill="rgb(232,182,51)"/><text x="33.6367%" y="127.50"></text></g><g><title>unsafety_check_result (2,174,961 samples, 0.16%)</title><rect x="33.4465%" y="101" width="0.1560%" height="15" fill="rgb(231,60,39)"/><text x="33.6965%" y="111.50"></text></g><g><title>mir_built (1,888,280 samples, 0.14%)</title><rect x="33.4671%" y="85" width="0.1354%" height="15" fill="rgb(208,69,12)"/><text x="33.7171%" y="95.50"></text></g><g><title>misc_checking_2 (44,643,680 samples, 3.20%)</title><rect x="30.4464%" y="181" width="3.2015%" height="15" fill="rgb(235,93,37)"/><text x="30.6964%" y="191.50">mis..</text></g><g><title>match_checking (37,045,925 samples, 2.66%)</title><rect x="30.9912%" y="165" width="2.6567%" height="15" fill="rgb(213,116,39)"/><text x="31.2412%" y="175.50">ma..</text></g><g><title>check_match (36,462,320 samples, 2.61%)</title><rect x="31.0331%" y="149" width="2.6148%" height="15" fill="rgb(222,207,29)"/><text x="31.2831%" y="159.50">ch..</text></g><g><title>check_private_in_public (3,924,494 samples, 0.28%)</title><rect x="33.6495%" y="165" width="0.2814%" height="15" fill="rgb(206,96,30)"/><text x="33.8995%" y="175.50"></text></g><g><title>death_checking (6,521,593 samples, 0.47%)</title><rect x="33.9309%" y="165" width="0.4677%" height="15" fill="rgb(218,138,4)"/><text x="34.1809%" y="175.50"></text></g><g><title>param_env (2,188,953 samples, 0.16%)</title><rect x="34.9843%" y="133" width="0.1570%" height="15" fill="rgb(250,191,14)"/><text x="35.2343%" y="143.50"></text></g><g><title>crate_lints (11,670,840 samples, 0.84%)</title><rect x="34.3989%" y="149" width="0.8370%" height="15" fill="rgb(239,60,40)"/><text x="34.6489%" y="159.50"></text></g><g><title>lint_checking (22,076,677 samples, 1.58%)</title><rect x="34.3986%" y="165" width="1.5832%" height="15" fill="rgb(206,27,48)"/><text x="34.6486%" y="175.50"></text></g><g><title>module_lints (10,401,967 samples, 0.75%)</title><rect x="35.2358%" y="149" width="0.7460%" height="15" fill="rgb(225,35,8)"/><text x="35.4858%" y="159.50"></text></g><g><title>lint_mod (10,372,077 samples, 0.74%)</title><rect x="35.2380%" y="133" width="0.7438%" height="15" fill="rgb(250,213,24)"/><text x="35.4880%" y="143.50"></text></g><g><title>privacy_access_levels (7,586,355 samples, 0.54%)</title><rect x="35.9818%" y="165" width="0.5440%" height="15" fill="rgb(247,123,22)"/><text x="36.2318%" y="175.50"></text></g><g><title>privacy_checking_modules (16,473,865 samples, 1.18%)</title><rect x="36.5258%" y="165" width="1.1814%" height="15" fill="rgb(231,138,38)"/><text x="36.7758%" y="175.50"></text></g><g><title>check_mod_privacy (16,448,035 samples, 1.18%)</title><rect x="36.5277%" y="149" width="1.1795%" height="15" fill="rgb(231,145,46)"/><text x="36.7777%" y="159.50"></text></g><g><title>misc_checking_3 (56,768,156 samples, 4.07%)</title><rect x="33.6479%" y="181" width="4.0710%" height="15" fill="rgb(251,118,11)"/><text x="33.8979%" y="191.50">misc..</text></g><g><title>impl_parent (3,053,330 samples, 0.22%)</title><rect x="38.2052%" y="117" width="0.2190%" height="15" fill="rgb(217,147,25)"/><text x="38.4552%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,665,662 samples, 0.12%)</title><rect x="38.3047%" y="101" width="0.1195%" height="15" fill="rgb(247,81,37)"/><text x="38.5547%" y="111.50"></text></g><g><title>impl_trait_ref (5,998,888 samples, 0.43%)</title><rect x="38.4241%" y="117" width="0.4302%" height="15" fill="rgb(209,12,38)"/><text x="38.6741%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,633,722 samples, 0.33%)</title><rect x="38.5220%" y="101" width="0.3323%" height="15" fill="rgb(227,1,9)"/><text x="38.7720%" y="111.50"></text></g><g><title>coherent_trait (16,380,983 samples, 1.17%)</title><rect x="37.7799%" y="149" width="1.1747%" height="15" fill="rgb(248,47,43)"/><text x="38.0299%" y="159.50"></text></g><g><title>specialization_graph_of (15,520,393 samples, 1.11%)</title><rect x="37.8416%" y="133" width="1.1130%" height="15" fill="rgb(221,10,30)"/><text x="38.0916%" y="143.50"></text></g><g><title>coherence_checking (16,987,199 samples, 1.22%)</title><rect x="37.7771%" y="165" width="1.2182%" height="15" fill="rgb(210,229,1)"/><text x="38.0271%" y="175.50"></text></g><g><title>associated_items (1,518,966 samples, 0.11%)</title><rect x="66.0621%" y="117" width="0.1089%" height="15" fill="rgb(222,148,37)"/><text x="66.3121%" y="127.50"></text></g><g><title>dropck_outlives (3,442,672 samples, 0.25%)</title><rect x="66.1885%" y="117" width="0.2469%" height="15" fill="rgb(234,67,33)"/><text x="66.4385%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,454,427 samples, 0.10%)</title><rect x="66.4354%" y="117" width="0.1043%" height="15" fill="rgb(247,98,35)"/><text x="66.6854%" y="127.50"></text></g><g><title>specializes (2,306,085 samples, 0.17%)</title><rect x="68.2356%" y="101" width="0.1654%" height="15" fill="rgb(247,138,52)"/><text x="68.4856%" y="111.50"></text></g><g><title>evaluate_obligation (26,724,626 samples, 1.92%)</title><rect x="66.5397%" y="117" width="1.9165%" height="15" fill="rgb(213,79,30)"/><text x="66.7897%" y="127.50">e..</text></g><g><title>evaluate_obligation (2,186,614 samples, 0.16%)</title><rect x="68.7940%" y="101" width="0.1568%" height="15" fill="rgb(246,177,23)"/><text x="69.0440%" y="111.50"></text></g><g><title>method_autoderef_steps (4,403,835 samples, 0.32%)</title><rect x="68.6356%" y="117" width="0.3158%" height="15" fill="rgb(230,62,27)"/><text x="68.8856%" y="127.50"></text></g><g><title>evaluate_obligation (4,391,506 samples, 0.31%)</title><rect x="75.9070%" y="101" width="0.3149%" height="15" fill="rgb(216,154,8)"/><text x="76.1570%" y="111.50"></text></g><g><title>typeck (102,258,955 samples, 7.33%)</title><rect x="69.1047%" y="117" width="7.3333%" height="15" fill="rgb(244,35,45)"/><text x="69.3547%" y="127.50">typeck</text></g><g><title>item_bodies_checking (521,952,766 samples, 37.43%)</title><rect x="39.0321%" y="165" width="37.4310%" height="15" fill="rgb(251,115,12)"/><text x="39.2821%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (521,948,426 samples, 37.43%)</title><rect x="39.0324%" y="149" width="37.4306%" height="15" fill="rgb(240,54,50)"/><text x="39.2824%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (520,817,336 samples, 37.35%)</title><rect x="39.1135%" y="133" width="37.3495%" height="15" fill="rgb(233,84,52)"/><text x="39.3635%" y="143.50">typeck</text></g><g><title>mir_built (1,800,980 samples, 0.13%)</title><rect x="77.6298%" y="53" width="0.1292%" height="15" fill="rgb(207,117,47)"/><text x="77.8798%" y="63.50"></text></g><g><title>typeck (1,524,667 samples, 0.11%)</title><rect x="77.6496%" y="37" width="0.1093%" height="15" fill="rgb(249,43,39)"/><text x="77.8996%" y="47.50"></text></g><g><title>mir_const (2,446,307 samples, 0.18%)</title><rect x="77.5921%" y="85" width="0.1754%" height="15" fill="rgb(209,38,44)"/><text x="77.8421%" y="95.50"></text></g><g><title>unsafety_check_result (1,971,952 samples, 0.14%)</title><rect x="77.6261%" y="69" width="0.1414%" height="15" fill="rgb(236,212,23)"/><text x="77.8761%" y="79.50"></text></g><g><title>mir_promoted (2,514,919 samples, 0.18%)</title><rect x="77.5876%" y="101" width="0.1804%" height="15" fill="rgb(242,79,21)"/><text x="77.8376%" y="111.50"></text></g><g><title>type_of (3,580,530 samples, 0.26%)</title><rect x="77.5239%" y="133" width="0.2568%" height="15" fill="rgb(211,96,35)"/><text x="77.7739%" y="143.50"></text></g><g><title>mir_borrowck (3,552,760 samples, 0.25%)</title><rect x="77.5259%" y="117" width="0.2548%" height="15" fill="rgb(253,215,40)"/><text x="77.7759%" y="127.50"></text></g><g><title>item_types_checking (20,362,938 samples, 1.46%)</title><rect x="76.4630%" y="165" width="1.4603%" height="15" fill="rgb(211,81,21)"/><text x="76.7130%" y="175.50"></text></g><g><title>check_mod_item_types (20,332,247 samples, 1.46%)</title><rect x="76.4652%" y="149" width="1.4581%" height="15" fill="rgb(208,190,38)"/><text x="76.7152%" y="159.50"></text></g><g><title>typeck (1,988,773 samples, 0.14%)</title><rect x="77.7807%" y="133" width="0.1426%" height="15" fill="rgb(235,213,38)"/><text x="78.0307%" y="143.50"></text></g><g><title>fn_sig (3,961,232 samples, 0.28%)</title><rect x="78.1833%" y="133" width="0.2841%" height="15" fill="rgb(237,122,38)"/><text x="78.4333%" y="143.50"></text></g><g><title>named_region_map (8,420,205 samples, 0.60%)</title><rect x="78.5743%" y="117" width="0.6038%" height="15" fill="rgb(244,218,35)"/><text x="78.8243%" y="127.50"></text></g><g><title>resolve_lifetimes (8,193,251 samples, 0.59%)</title><rect x="78.5906%" y="101" width="0.5876%" height="15" fill="rgb(240,68,47)"/><text x="78.8406%" y="111.50"></text></g><g><title>lint_levels (4,673,902 samples, 0.34%)</title><rect x="78.8430%" y="85" width="0.3352%" height="15" fill="rgb(210,16,53)"/><text x="79.0930%" y="95.50"></text></g><g><title>generics_of (10,059,262 samples, 0.72%)</title><rect x="78.4674%" y="133" width="0.7214%" height="15" fill="rgb(235,124,12)"/><text x="78.7174%" y="143.50"></text></g><g><title>explicit_predicates_of (2,508,807 samples, 0.18%)</title><rect x="79.3787%" y="101" width="0.1799%" height="15" fill="rgb(224,169,11)"/><text x="79.6287%" y="111.50"></text></g><g><title>predicates_of (6,189,607 samples, 0.44%)</title><rect x="79.2213%" y="133" width="0.4439%" height="15" fill="rgb(250,166,2)"/><text x="79.4713%" y="143.50"></text></g><g><title>predicates_defined_on (5,417,762 samples, 0.39%)</title><rect x="79.2767%" y="117" width="0.3885%" height="15" fill="rgb(242,216,29)"/><text x="79.5267%" y="127.50"></text></g><g><title>inferred_outlives_of (1,485,876 samples, 0.11%)</title><rect x="79.5586%" y="101" width="0.1066%" height="15" fill="rgb(230,116,27)"/><text x="79.8086%" y="111.50"></text></g><g><title>type_collecting (25,272,893 samples, 1.81%)</title><rect x="77.9247%" y="165" width="1.8124%" height="15" fill="rgb(228,99,48)"/><text x="78.1747%" y="175.50">t..</text></g><g><title>collect_mod_item_types (25,232,403 samples, 1.81%)</title><rect x="77.9276%" y="149" width="1.8095%" height="15" fill="rgb(253,11,6)"/><text x="78.1776%" y="159.50">c..</text></g><g><title>evaluate_obligation (2,905,964 samples, 0.21%)</title><rect x="81.5079%" y="133" width="0.2084%" height="15" fill="rgb(247,143,39)"/><text x="81.7579%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,997,439 samples, 0.14%)</title><rect x="81.7340%" y="133" width="0.1432%" height="15" fill="rgb(236,97,10)"/><text x="81.9840%" y="143.50"></text></g><g><title>param_env (3,771,627 samples, 0.27%)</title><rect x="81.8772%" y="133" width="0.2705%" height="15" fill="rgb(233,208,19)"/><text x="82.1272%" y="143.50"></text></g><g><title>region_scope_tree (7,059,238 samples, 0.51%)</title><rect x="82.1526%" y="133" width="0.5062%" height="15" fill="rgb(216,164,2)"/><text x="82.4026%" y="143.50"></text></g><g><title>check_impl_item_well_formed (38,159,547 samples, 2.74%)</title><rect x="79.9263%" y="149" width="2.7365%" height="15" fill="rgb(220,129,5)"/><text x="80.1763%" y="159.50">ch..</text></g><g><title>evaluate_obligation (3,653,846 samples, 0.26%)</title><rect x="83.5217%" y="133" width="0.2620%" height="15" fill="rgb(242,17,10)"/><text x="83.7717%" y="143.50"></text></g><g><title>param_env (2,932,728 samples, 0.21%)</title><rect x="83.8335%" y="133" width="0.2103%" height="15" fill="rgb(242,107,0)"/><text x="84.0835%" y="143.50"></text></g><g><title>check_item_well_formed (20,517,757 samples, 1.47%)</title><rect x="82.6628%" y="149" width="1.4714%" height="15" fill="rgb(251,28,31)"/><text x="82.9128%" y="159.50"></text></g><g><title>analysis (1,172,184,199 samples, 84.06%)</title><rect x="0.1087%" y="197" width="84.0612%" height="15" fill="rgb(233,223,10)"/><text x="0.3587%" y="207.50">analysis</text></g><g><title>type_check_crate (647,731,845 samples, 46.45%)</title><rect x="37.7189%" y="181" width="46.4510%" height="15" fill="rgb(215,21,27)"/><text x="37.9689%" y="191.50">type_check_crate</text></g><g><title>wf_checking (61,715,882 samples, 4.43%)</title><rect x="79.7441%" y="165" width="4.4258%" height="15" fill="rgb(232,23,21)"/><text x="79.9941%" y="175.50">wf_ch..</text></g><g><title>AST_validation (1,607,288 samples, 0.12%)</title><rect x="84.2187%" y="181" width="0.1153%" height="15" fill="rgb(244,5,23)"/><text x="84.4687%" y="191.50"></text></g><g><title>macro_expand_crate (102,914,254 samples, 7.38%)</title><rect x="84.4315%" y="181" width="7.3803%" height="15" fill="rgb(226,81,46)"/><text x="84.6815%" y="191.50">macro_expa..</text></g><g><title>expand_crate (102,897,163 samples, 7.38%)</title><rect x="84.4327%" y="165" width="7.3791%" height="15" fill="rgb(247,70,30)"/><text x="84.6827%" y="175.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (2,511,299 samples, 0.18%)</title><rect x="91.6317%" y="149" width="0.1801%" height="15" fill="rgb(212,68,19)"/><text x="91.8817%" y="159.50"></text></g><g><title>late_resolve_crate (20,722,312 samples, 1.49%)</title><rect x="91.9239%" y="165" width="1.4861%" height="15" fill="rgb(240,187,13)"/><text x="92.1739%" y="175.50"></text></g><g><title>resolve_check_unused (1,566,828 samples, 0.11%)</title><rect x="93.4247%" y="165" width="0.1124%" height="15" fill="rgb(223,113,26)"/><text x="93.6747%" y="175.50"></text></g><g><title>configure_and_expand (131,312,021 samples, 9.42%)</title><rect x="84.1988%" y="197" width="9.4168%" height="15" fill="rgb(206,192,2)"/><text x="84.4488%" y="207.50">configure_and..</text></g><g><title>resolve_crate (25,062,971 samples, 1.80%)</title><rect x="91.8183%" y="181" width="1.7973%" height="15" fill="rgb(241,108,4)"/><text x="92.0683%" y="191.50">r..</text></g><g><title>drop_ast (4,267,538 samples, 0.31%)</title><rect x="93.6156%" y="197" width="0.3060%" height="15" fill="rgb(247,173,49)"/><text x="93.8656%" y="207.50"></text></g><g><title>early_lint_checks (5,908,946 samples, 0.42%)</title><rect x="93.9232%" y="197" width="0.4238%" height="15" fill="rgb(224,114,35)"/><text x="94.1732%" y="207.50"></text></g><g><title>free_global_ctxt (12,447,759 samples, 0.89%)</title><rect x="94.3469%" y="197" width="0.8927%" height="15" fill="rgb(245,159,27)"/><text x="94.5969%" y="207.50"></text></g><g><title>generate_crate_metadata (14,454,962 samples, 1.04%)</title><rect x="95.2396%" y="197" width="1.0366%" height="15" fill="rgb(245,172,44)"/><text x="95.4896%" y="207.50"></text></g><g><title>hir_lowering (46,853,255 samples, 3.36%)</title><rect x="96.2762%" y="197" width="3.3600%" height="15" fill="rgb(236,23,11)"/><text x="96.5262%" y="207.50">hir..</text></g><g><title>self_profile_alloc_query_strings (3,410,258 samples, 0.24%)</title><rect x="99.6786%" y="197" width="0.2446%" height="15" fill="rgb(205,117,38)"/><text x="99.9286%" y="207.50"></text></g><g><title>all (1,394,441,499 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,394,441,499 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>