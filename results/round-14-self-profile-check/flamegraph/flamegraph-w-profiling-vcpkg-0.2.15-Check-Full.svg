<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (252,896 samples, 0.11%)</title><rect x="15.5368%" y="149" width="0.1080%" height="15" fill="rgb(227,0,7)"/><text x="15.7868%" y="159.50"></text></g><g><title>param_env (705,512 samples, 0.30%)</title><rect x="17.2468%" y="117" width="0.3014%" height="15" fill="rgb(217,0,24)"/><text x="17.4968%" y="127.50"></text></g><g><title>item_attrs (1,588,607 samples, 0.68%)</title><rect x="18.1105%" y="85" width="0.6787%" height="15" fill="rgb(221,193,54)"/><text x="18.3605%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,562,817 samples, 0.67%)</title><rect x="18.1215%" y="69" width="0.6677%" height="15" fill="rgb(248,212,6)"/><text x="18.3715%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,829,452 samples, 0.78%)</title><rect x="18.0272%" y="101" width="0.7816%" height="15" fill="rgb(208,68,35)"/><text x="18.2772%" y="111.50"></text></g><g><title>adt_drop_tys (447,735 samples, 0.19%)</title><rect x="21.9733%" y="53" width="0.1913%" height="15" fill="rgb(232,128,0)"/><text x="22.2233%" y="63.50"></text></g><g><title>is_copy_raw (335,903 samples, 0.14%)</title><rect x="22.1653%" y="53" width="0.1435%" height="15" fill="rgb(207,160,47)"/><text x="22.4153%" y="63.50"></text></g><g><title>evaluate_obligation (265,503 samples, 0.11%)</title><rect x="22.1954%" y="37" width="0.1134%" height="15" fill="rgb(228,23,34)"/><text x="22.4454%" y="47.50"></text></g><g><title>param_env (300,724 samples, 0.13%)</title><rect x="22.3088%" y="53" width="0.1285%" height="15" fill="rgb(218,30,26)"/><text x="22.5588%" y="63.50"></text></g><g><title>adt_drop_tys (1,272,316 samples, 0.54%)</title><rect x="21.9258%" y="69" width="0.5436%" height="15" fill="rgb(220,122,19)"/><text x="22.1758%" y="79.50"></text></g><g><title>is_copy_raw (1,538,244 samples, 0.66%)</title><rect x="22.4694%" y="69" width="0.6572%" height="15" fill="rgb(250,228,42)"/><text x="22.7194%" y="79.50"></text></g><g><title>evaluate_obligation (1,270,723 samples, 0.54%)</title><rect x="22.5837%" y="53" width="0.5429%" height="15" fill="rgb(240,193,28)"/><text x="22.8337%" y="63.50"></text></g><g><title>needs_drop_raw (3,229,174 samples, 1.38%)</title><rect x="21.8036%" y="85" width="1.3796%" height="15" fill="rgb(216,20,37)"/><text x="22.0536%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (551,766 samples, 0.24%)</title><rect x="23.3039%" y="69" width="0.2357%" height="15" fill="rgb(206,188,39)"/><text x="23.5539%" y="79.50"></text></g><g><title>impl_parent (483,165 samples, 0.21%)</title><rect x="24.0301%" y="53" width="0.2064%" height="15" fill="rgb(217,207,13)"/><text x="24.2801%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (307,242 samples, 0.13%)</title><rect x="24.1052%" y="37" width="0.1313%" height="15" fill="rgb(231,73,38)"/><text x="24.3552%" y="47.50"></text></g><g><title>specialization_graph_of (2,447,257 samples, 1.05%)</title><rect x="23.5806%" y="69" width="1.0455%" height="15" fill="rgb(225,20,46)"/><text x="23.8306%" y="79.50"></text></g><g><title>impl_trait_ref (912,000 samples, 0.39%)</title><rect x="24.2365%" y="53" width="0.3896%" height="15" fill="rgb(210,31,41)"/><text x="24.4865%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (728,760 samples, 0.31%)</title><rect x="24.3148%" y="37" width="0.3113%" height="15" fill="rgb(221,200,47)"/><text x="24.5648%" y="47.50"></text></g><g><title>resolve_instance (3,504,936 samples, 1.50%)</title><rect x="23.1832%" y="85" width="1.4974%" height="15" fill="rgb(226,26,5)"/><text x="23.4332%" y="95.50"></text></g><g><title>thir_body (2,858,882 samples, 1.22%)</title><rect x="24.7028%" y="85" width="1.2214%" height="15" fill="rgb(249,33,26)"/><text x="24.9528%" y="95.50"></text></g><g><title>mir_const (22,099,471 samples, 9.44%)</title><rect x="16.4978%" y="133" width="9.4415%" height="15" fill="rgb(235,183,28)"/><text x="16.7478%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (19,640,743 samples, 8.39%)</title><rect x="17.5482%" y="117" width="8.3910%" height="15" fill="rgb(221,5,38)"/><text x="17.7982%" y="127.50">unsafety_che..</text></g><g><title>mir_built (16,687,209 samples, 7.13%)</title><rect x="18.8100%" y="101" width="7.1292%" height="15" fill="rgb(247,18,42)"/><text x="19.0600%" y="111.50">mir_built</text></g><g><title>mir_promoted (24,082,815 samples, 10.29%)</title><rect x="15.6693%" y="149" width="10.2888%" height="15" fill="rgb(241,131,45)"/><text x="15.9193%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,181,964 samples, 0.50%)</title><rect x="25.9607%" y="149" width="0.5050%" height="15" fill="rgb(249,31,29)"/><text x="26.2107%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,397,233 samples, 0.60%)</title><rect x="26.4656%" y="149" width="0.5969%" height="15" fill="rgb(225,111,53)"/><text x="26.7156%" y="159.50"></text></g><g><title>normalize_projection_ty (844,041 samples, 0.36%)</title><rect x="26.7020%" y="133" width="0.3606%" height="15" fill="rgb(238,160,17)"/><text x="26.9520%" y="143.50"></text></g><g><title>type_op_normalize_predicate (649,218 samples, 0.28%)</title><rect x="27.0626%" y="149" width="0.2774%" height="15" fill="rgb(214,148,48)"/><text x="27.3126%" y="159.50"></text></g><g><title>normalize_projection_ty (353,014 samples, 0.15%)</title><rect x="27.1891%" y="133" width="0.1508%" height="15" fill="rgb(232,36,49)"/><text x="27.4391%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,298,101 samples, 2.26%)</title><rect x="27.3399%" y="149" width="2.2635%" height="15" fill="rgb(209,103,24)"/><text x="27.5899%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (68,163,579 samples, 29.12%)</title><rect x="0.4925%" y="181" width="29.1213%" height="15" fill="rgb(229,88,8)"/><text x="0.7425%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (68,017,098 samples, 29.06%)</title><rect x="0.5551%" y="165" width="29.0587%" height="15" fill="rgb(213,181,19)"/><text x="0.8051%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (295,796 samples, 0.13%)</title><rect x="29.8605%" y="149" width="0.1264%" height="15" fill="rgb(254,191,54)"/><text x="30.1105%" y="159.50"></text></g><g><title>check_mod_attrs (634,027 samples, 0.27%)</title><rect x="29.7160%" y="165" width="0.2709%" height="15" fill="rgb(241,83,37)"/><text x="29.9660%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (677,358 samples, 0.29%)</title><rect x="30.0929%" y="165" width="0.2894%" height="15" fill="rgb(233,36,39)"/><text x="30.3429%" y="175.50"></text></g><g><title>misc_checking_1 (1,605,999 samples, 0.69%)</title><rect x="29.7102%" y="181" width="0.6861%" height="15" fill="rgb(226,3,54)"/><text x="29.9602%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,023,631 samples, 0.44%)</title><rect x="30.3969%" y="165" width="0.4373%" height="15" fill="rgb(245,192,40)"/><text x="30.6469%" y="175.50"></text></g><g><title>check_mod_liveness (842,209 samples, 0.36%)</title><rect x="30.4744%" y="149" width="0.3598%" height="15" fill="rgb(238,167,29)"/><text x="30.7244%" y="159.50"></text></g><g><title>misc_checking_2 (2,206,705 samples, 0.94%)</title><rect x="30.3964%" y="181" width="0.9428%" height="15" fill="rgb(232,182,51)"/><text x="30.6464%" y="191.50"></text></g><g><title>match_checking (1,181,764 samples, 0.50%)</title><rect x="30.8342%" y="165" width="0.5049%" height="15" fill="rgb(231,60,39)"/><text x="31.0842%" y="175.50"></text></g><g><title>check_match (1,146,552 samples, 0.49%)</title><rect x="30.8493%" y="149" width="0.4898%" height="15" fill="rgb(208,69,12)"/><text x="31.0993%" y="159.50"></text></g><g><title>death_checking (480,855 samples, 0.21%)</title><rect x="31.4403%" y="165" width="0.2054%" height="15" fill="rgb(235,93,37)"/><text x="31.6903%" y="175.50"></text></g><g><title>crate_lints (2,498,488 samples, 1.07%)</title><rect x="31.6463%" y="149" width="1.0674%" height="15" fill="rgb(213,116,39)"/><text x="31.8963%" y="159.50"></text></g><g><title>type_of (1,088,083 samples, 0.46%)</title><rect x="32.2489%" y="133" width="0.4649%" height="15" fill="rgb(222,207,29)"/><text x="32.4989%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (854,432 samples, 0.37%)</title><rect x="32.3487%" y="117" width="0.3650%" height="15" fill="rgb(206,96,30)"/><text x="32.5987%" y="127.50"></text></g><g><title>lint_checking (3,526,889 samples, 1.51%)</title><rect x="31.6457%" y="165" width="1.5068%" height="15" fill="rgb(218,138,4)"/><text x="31.8957%" y="175.50"></text></g><g><title>module_lints (1,027,031 samples, 0.44%)</title><rect x="32.7137%" y="149" width="0.4388%" height="15" fill="rgb(250,191,14)"/><text x="32.9637%" y="159.50"></text></g><g><title>lint_mod (1,024,811 samples, 0.44%)</title><rect x="32.7147%" y="133" width="0.4378%" height="15" fill="rgb(239,60,40)"/><text x="32.9647%" y="143.50"></text></g><g><title>privacy_access_levels (298,073 samples, 0.13%)</title><rect x="33.1525%" y="165" width="0.1273%" height="15" fill="rgb(206,27,48)"/><text x="33.4025%" y="175.50"></text></g><g><title>privacy_checking_modules (1,833,881 samples, 0.78%)</title><rect x="33.2798%" y="165" width="0.7835%" height="15" fill="rgb(225,35,8)"/><text x="33.5298%" y="175.50"></text></g><g><title>check_mod_privacy (1,831,981 samples, 0.78%)</title><rect x="33.2806%" y="149" width="0.7827%" height="15" fill="rgb(250,213,24)"/><text x="33.5306%" y="159.50"></text></g><g><title>misc_checking_3 (6,386,882 samples, 2.73%)</title><rect x="31.3391%" y="181" width="2.7286%" height="15" fill="rgb(247,123,22)"/><text x="31.5891%" y="191.50">mi..</text></g><g><title>impl_parent (1,675,253 samples, 0.72%)</title><rect x="35.1573%" y="117" width="0.7157%" height="15" fill="rgb(231,138,38)"/><text x="35.4073%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,061,415 samples, 0.45%)</title><rect x="35.4196%" y="101" width="0.4535%" height="15" fill="rgb(231,145,46)"/><text x="35.6696%" y="111.50"></text></g><g><title>impl_trait_ref (4,637,421 samples, 1.98%)</title><rect x="35.8740%" y="117" width="1.9812%" height="15" fill="rgb(251,118,11)"/><text x="36.1240%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,744,132 samples, 1.60%)</title><rect x="36.2556%" y="101" width="1.5996%" height="15" fill="rgb(217,147,25)"/><text x="36.5056%" y="111.50"></text></g><g><title>trait_impls_of (536,955 samples, 0.23%)</title><rect x="37.8765%" y="117" width="0.2294%" height="15" fill="rgb(247,81,37)"/><text x="38.1265%" y="127.50"></text></g><g><title>coherent_trait (13,203,259 samples, 5.64%)</title><rect x="34.0996%" y="149" width="5.6408%" height="15" fill="rgb(209,12,38)"/><text x="34.3496%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (13,190,078 samples, 5.64%)</title><rect x="34.1053%" y="133" width="5.6351%" height="15" fill="rgb(227,1,9)"/><text x="34.3553%" y="143.50">special..</text></g><g><title>visible_parent_map (3,824,593 samples, 1.63%)</title><rect x="38.1064%" y="117" width="1.6340%" height="15" fill="rgb(248,47,43)"/><text x="38.3564%" y="127.50"></text></g><g><title>module_children (3,476,689 samples, 1.49%)</title><rect x="38.2551%" y="101" width="1.4853%" height="15" fill="rgb(221,10,30)"/><text x="38.5051%" y="111.50"></text></g><g><title>metadata_decode_entry_module_children (3,410,287 samples, 1.46%)</title><rect x="38.2835%" y="85" width="1.4570%" height="15" fill="rgb(210,229,1)"/><text x="38.5335%" y="95.50"></text></g><g><title>coherence_checking (13,253,349 samples, 5.66%)</title><rect x="34.0932%" y="165" width="5.6622%" height="15" fill="rgb(222,148,37)"/><text x="34.3432%" y="175.50">coheren..</text></g><g><title>dropck_outlives (336,315 samples, 0.14%)</title><rect x="50.8886%" y="117" width="0.1437%" height="15" fill="rgb(234,67,33)"/><text x="51.1386%" y="127.50"></text></g><g><title>evaluate_obligation (1,194,885 samples, 0.51%)</title><rect x="51.0323%" y="117" width="0.5105%" height="15" fill="rgb(247,98,35)"/><text x="51.2823%" y="127.50"></text></g><g><title>predicates_of (255,951 samples, 0.11%)</title><rect x="51.9123%" y="117" width="0.1093%" height="15" fill="rgb(247,138,52)"/><text x="52.1623%" y="127.50"></text></g><g><title>adt_sized_constraint (312,425 samples, 0.13%)</title><rect x="70.1213%" y="101" width="0.1335%" height="15" fill="rgb(213,79,30)"/><text x="70.3713%" y="111.50"></text></g><g><title>associated_item (604,058 samples, 0.26%)</title><rect x="70.3512%" y="85" width="0.2581%" height="15" fill="rgb(246,177,23)"/><text x="70.6012%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (468,066 samples, 0.20%)</title><rect x="70.4093%" y="69" width="0.2000%" height="15" fill="rgb(230,62,27)"/><text x="70.6593%" y="79.50"></text></g><g><title>associated_items (872,981 samples, 0.37%)</title><rect x="70.2568%" y="101" width="0.3730%" height="15" fill="rgb(216,154,8)"/><text x="70.5068%" y="111.50"></text></g><g><title>adt_dtorck_constraint (324,954 samples, 0.14%)</title><rect x="71.1162%" y="53" width="0.1388%" height="15" fill="rgb(244,35,45)"/><text x="71.3662%" y="63.50"></text></g><g><title>adt_dtorck_constraint (482,695 samples, 0.21%)</title><rect x="71.0642%" y="69" width="0.2062%" height="15" fill="rgb(251,115,12)"/><text x="71.3142%" y="79.50"></text></g><g><title>adt_dtorck_constraint (947,749 samples, 0.40%)</title><rect x="70.9075%" y="85" width="0.4049%" height="15" fill="rgb(240,54,50)"/><text x="71.1575%" y="95.50"></text></g><g><title>dropck_outlives (1,772,528 samples, 0.76%)</title><rect x="70.6898%" y="101" width="0.7573%" height="15" fill="rgb(233,84,52)"/><text x="70.9398%" y="111.50"></text></g><g><title>normalize_projection_ty (315,263 samples, 0.13%)</title><rect x="71.3124%" y="85" width="0.1347%" height="15" fill="rgb(207,117,47)"/><text x="71.5624%" y="95.50"></text></g><g><title>adt_sized_constraint (347,133 samples, 0.15%)</title><rect x="72.5005%" y="85" width="0.1483%" height="15" fill="rgb(249,43,39)"/><text x="72.7505%" y="95.50"></text></g><g><title>predicates_of (338,933 samples, 0.14%)</title><rect x="72.7905%" y="85" width="0.1448%" height="15" fill="rgb(209,38,44)"/><text x="73.0405%" y="95.50"></text></g><g><title>trait_impls_of (586,646 samples, 0.25%)</title><rect x="73.0071%" y="85" width="0.2506%" height="15" fill="rgb(236,212,23)"/><text x="73.2571%" y="95.50"></text></g><g><title>evaluate_obligation (4,238,927 samples, 1.81%)</title><rect x="71.4471%" y="101" width="1.8110%" height="15" fill="rgb(242,79,21)"/><text x="71.6971%" y="111.50">e..</text></g><g><title>fn_sig (469,328 samples, 0.20%)</title><rect x="73.2728%" y="101" width="0.2005%" height="15" fill="rgb(211,96,35)"/><text x="73.5228%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (435,257 samples, 0.19%)</title><rect x="73.2873%" y="85" width="0.1860%" height="15" fill="rgb(253,215,40)"/><text x="73.5373%" y="95.50"></text></g><g><title>is_copy_raw (336,946 samples, 0.14%)</title><rect x="73.7321%" y="101" width="0.1440%" height="15" fill="rgb(211,81,21)"/><text x="73.9821%" y="111.50"></text></g><g><title>evaluate_obligation (295,996 samples, 0.13%)</title><rect x="73.7496%" y="85" width="0.1265%" height="15" fill="rgb(208,190,38)"/><text x="73.9996%" y="95.50"></text></g><g><title>evaluate_obligation (552,975 samples, 0.24%)</title><rect x="74.2586%" y="85" width="0.2362%" height="15" fill="rgb(235,213,38)"/><text x="74.5086%" y="95.50"></text></g><g><title>method_autoderef_steps (1,133,470 samples, 0.48%)</title><rect x="74.0280%" y="101" width="0.4842%" height="15" fill="rgb(237,122,38)"/><text x="74.2780%" y="111.50"></text></g><g><title>explicit_predicates_of (267,043 samples, 0.11%)</title><rect x="74.7177%" y="69" width="0.1141%" height="15" fill="rgb(244,218,35)"/><text x="74.9677%" y="79.50"></text></g><g><title>predicates_of (775,404 samples, 0.33%)</title><rect x="74.5385%" y="101" width="0.3313%" height="15" fill="rgb(240,68,47)"/><text x="74.7885%" y="111.50"></text></g><g><title>predicates_defined_on (561,654 samples, 0.24%)</title><rect x="74.6298%" y="85" width="0.2400%" height="15" fill="rgb(210,16,53)"/><text x="74.8798%" y="95.50"></text></g><g><title>typeck (53,574,317 samples, 22.89%)</title><rect x="52.1157%" y="117" width="22.8883%" height="15" fill="rgb(235,124,12)"/><text x="52.3657%" y="127.50">typeck</text></g><g><title>item_bodies_checking (82,521,272 samples, 35.26%)</title><rect x="39.7631%" y="165" width="35.2552%" height="15" fill="rgb(224,169,11)"/><text x="40.0131%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (82,519,042 samples, 35.25%)</title><rect x="39.7640%" y="149" width="35.2543%" height="15" fill="rgb(250,166,2)"/><text x="40.0140%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (82,447,552 samples, 35.22%)</title><rect x="39.7945%" y="133" width="35.2237%" height="15" fill="rgb(242,216,29)"/><text x="40.0445%" y="143.50">typeck</text></g><g><title>adt_destructor (311,083 samples, 0.13%)</title><rect x="75.1750%" y="133" width="0.1329%" height="15" fill="rgb(230,116,27)"/><text x="75.4250%" y="143.50"></text></g><g><title>coherent_trait (305,223 samples, 0.13%)</title><rect x="75.1775%" y="117" width="0.1304%" height="15" fill="rgb(228,99,48)"/><text x="75.4275%" y="127.50"></text></g><g><title>specialization_graph_of (303,503 samples, 0.13%)</title><rect x="75.1782%" y="101" width="0.1297%" height="15" fill="rgb(253,11,6)"/><text x="75.4282%" y="111.50"></text></g><g><title>item_types_checking (745,268 samples, 0.32%)</title><rect x="75.0183%" y="165" width="0.3184%" height="15" fill="rgb(247,143,39)"/><text x="75.2683%" y="175.50"></text></g><g><title>check_mod_item_types (742,928 samples, 0.32%)</title><rect x="75.0193%" y="149" width="0.3174%" height="15" fill="rgb(236,97,10)"/><text x="75.2693%" y="159.50"></text></g><g><title>fn_sig (416,394 samples, 0.18%)</title><rect x="75.4516%" y="133" width="0.1779%" height="15" fill="rgb(233,208,19)"/><text x="75.7016%" y="143.50"></text></g><g><title>named_region_map (307,974 samples, 0.13%)</title><rect x="75.6691%" y="117" width="0.1316%" height="15" fill="rgb(216,164,2)"/><text x="75.9191%" y="127.50"></text></g><g><title>resolve_lifetimes (288,984 samples, 0.12%)</title><rect x="75.6772%" y="101" width="0.1235%" height="15" fill="rgb(220,129,5)"/><text x="75.9272%" y="111.50"></text></g><g><title>generics_of (413,274 samples, 0.18%)</title><rect x="75.6295%" y="133" width="0.1766%" height="15" fill="rgb(242,17,10)"/><text x="75.8795%" y="143.50"></text></g><g><title>predicates_of (463,856 samples, 0.20%)</title><rect x="75.8167%" y="133" width="0.1982%" height="15" fill="rgb(242,107,0)"/><text x="76.0667%" y="143.50"></text></g><g><title>predicates_defined_on (424,765 samples, 0.18%)</title><rect x="75.8334%" y="117" width="0.1815%" height="15" fill="rgb(251,28,31)"/><text x="76.0834%" y="127.50"></text></g><g><title>inferred_outlives_of (245,552 samples, 0.10%)</title><rect x="75.9100%" y="101" width="0.1049%" height="15" fill="rgb(233,223,10)"/><text x="76.1600%" y="111.50"></text></g><g><title>type_collecting (1,645,328 samples, 0.70%)</title><rect x="75.3376%" y="165" width="0.7029%" height="15" fill="rgb(215,21,27)"/><text x="75.5876%" y="175.50"></text></g><g><title>collect_mod_item_types (1,639,558 samples, 0.70%)</title><rect x="75.3400%" y="149" width="0.7005%" height="15" fill="rgb(232,23,21)"/><text x="75.5900%" y="159.50"></text></g><g><title>adt_sized_constraint (262,483 samples, 0.11%)</title><rect x="76.6042%" y="117" width="0.1121%" height="15" fill="rgb(244,5,23)"/><text x="76.8542%" y="127.50"></text></g><g><title>evaluate_obligation (529,943 samples, 0.23%)</title><rect x="76.5106%" y="133" width="0.2264%" height="15" fill="rgb(226,81,46)"/><text x="76.7606%" y="143.50"></text></g><g><title>object_safety_violations (420,505 samples, 0.18%)</title><rect x="76.7885%" y="133" width="0.1797%" height="15" fill="rgb(247,70,30)"/><text x="77.0385%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,630,507 samples, 1.12%)</title><rect x="76.1171%" y="149" width="1.1238%" height="15" fill="rgb(212,68,19)"/><text x="76.3671%" y="159.50"></text></g><g><title>region_scope_tree (501,759 samples, 0.21%)</title><rect x="77.0266%" y="133" width="0.2144%" height="15" fill="rgb(240,187,13)"/><text x="77.2766%" y="143.50"></text></g><g><title>evaluate_obligation (356,295 samples, 0.15%)</title><rect x="77.5359%" y="133" width="0.1522%" height="15" fill="rgb(223,113,26)"/><text x="77.7859%" y="143.50"></text></g><g><title>region_scope_tree (249,513 samples, 0.11%)</title><rect x="77.8202%" y="133" width="0.1066%" height="15" fill="rgb(206,192,2)"/><text x="78.0702%" y="143.50"></text></g><g><title>analysis (181,759,781 samples, 77.65%)</title><rect x="0.2855%" y="197" width="77.6525%" height="15" fill="rgb(241,108,4)"/><text x="0.5355%" y="207.50">analysis</text></g><g><title>type_check_crate (102,686,208 samples, 43.87%)</title><rect x="34.0678%" y="181" width="43.8702%" height="15" fill="rgb(247,173,49)"/><text x="34.3178%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,435,410 samples, 1.89%)</title><rect x="76.0431%" y="165" width="1.8949%" height="15" fill="rgb(224,114,35)"/><text x="76.2931%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,631,531 samples, 0.70%)</title><rect x="77.2410%" y="149" width="0.6970%" height="15" fill="rgb(245,159,27)"/><text x="77.4910%" y="159.50"></text></g><g><title>codegen_crate (717,328 samples, 0.31%)</title><rect x="77.9426%" y="197" width="0.3065%" height="15" fill="rgb(245,172,44)"/><text x="78.1926%" y="207.50"></text></g><g><title>metadata_load_macro (338,553 samples, 0.14%)</title><rect x="85.8811%" y="149" width="0.1446%" height="15" fill="rgb(236,23,11)"/><text x="86.1311%" y="159.50"></text></g><g><title>macro_expand_crate (20,285,989 samples, 8.67%)</title><rect x="78.4702%" y="181" width="8.6667%" height="15" fill="rgb(205,117,38)"/><text x="78.7202%" y="191.50">macro_expand..</text></g><g><title>expand_crate (20,269,828 samples, 8.66%)</title><rect x="78.4771%" y="165" width="8.6598%" height="15" fill="rgb(237,72,25)"/><text x="78.7271%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,600,979 samples, 1.11%)</title><rect x="86.0257%" y="149" width="1.1112%" height="15" fill="rgb(244,70,9)"/><text x="86.2757%" y="159.50"></text></g><g><title>metadata_register_crate (961,611 samples, 0.41%)</title><rect x="86.7261%" y="133" width="0.4108%" height="15" fill="rgb(217,125,39)"/><text x="86.9761%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (793,739 samples, 0.34%)</title><rect x="87.1383%" y="181" width="0.3391%" height="15" fill="rgb(235,36,10)"/><text x="87.3883%" y="191.50"></text></g><g><title>late_resolve_crate (2,826,092 samples, 1.21%)</title><rect x="87.5325%" y="165" width="1.2074%" height="15" fill="rgb(251,123,47)"/><text x="87.7825%" y="175.50"></text></g><g><title>configure_and_expand (24,725,599 samples, 10.56%)</title><rect x="78.2491%" y="197" width="10.5634%" height="15" fill="rgb(221,13,13)"/><text x="78.4991%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (3,124,905 samples, 1.34%)</title><rect x="87.4774%" y="181" width="1.3350%" height="15" fill="rgb(238,131,9)"/><text x="87.7274%" y="191.50"></text></g><g><title>drop_ast (329,083 samples, 0.14%)</title><rect x="88.8125%" y="197" width="0.1406%" height="15" fill="rgb(211,50,8)"/><text x="89.0625%" y="207.50"></text></g><g><title>early_lint_checks (649,718 samples, 0.28%)</title><rect x="88.9584%" y="197" width="0.2776%" height="15" fill="rgb(245,182,24)"/><text x="89.2084%" y="207.50"></text></g><g><title>free_global_ctxt (4,191,778 samples, 1.79%)</title><rect x="89.2360%" y="197" width="1.7908%" height="15" fill="rgb(242,14,37)"/><text x="89.4860%" y="207.50">f..</text></g><g><title>generate_crate_metadata (954,610 samples, 0.41%)</title><rect x="91.0268%" y="197" width="0.4078%" height="15" fill="rgb(246,228,12)"/><text x="91.2768%" y="207.50"></text></g><g><title>hir_lowering (4,556,161 samples, 1.95%)</title><rect x="91.4347%" y="197" width="1.9465%" height="15" fill="rgb(213,55,15)"/><text x="91.6847%" y="207.50">h..</text></g><g><title>parse_crate (13,945,757 samples, 5.96%)</title><rect x="93.4009%" y="197" width="5.9580%" height="15" fill="rgb(209,9,3)"/><text x="93.6509%" y="207.50">parse_cr..</text></g><g><title>self_profile_alloc_query_strings (835,189 samples, 0.36%)</title><rect x="99.4545%" y="197" width="0.3568%" height="15" fill="rgb(230,59,30)"/><text x="99.7045%" y="207.50"></text></g><g><title>all (234,068,101 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (234,068,101 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (370,844 samples, 0.16%)</title><rect x="99.8416%" y="197" width="0.1584%" height="15" fill="rgb(232,18,1)"/><text x="100.0916%" y="207.50"></text></g></svg></svg>