<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (2,221,322 samples, 0.19%)</title><rect x="14.0456%" y="133" width="0.1861%" height="15" fill="rgb(227,0,7)"/><text x="14.2956%" y="143.50"></text></g><g><title>param_env (1,766,127 samples, 0.15%)</title><rect x="16.0274%" y="101" width="0.1480%" height="15" fill="rgb(217,0,24)"/><text x="16.2774%" y="111.50"></text></g><g><title>item_attrs (1,232,847 samples, 0.10%)</title><rect x="16.7205%" y="69" width="0.1033%" height="15" fill="rgb(221,193,54)"/><text x="16.9705%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,803,583 samples, 0.15%)</title><rect x="16.6797%" y="85" width="0.1511%" height="15" fill="rgb(248,212,6)"/><text x="16.9297%" y="95.50"></text></g><g><title>adt_drop_tys (2,408,993 samples, 0.20%)</title><rect x="20.0621%" y="53" width="0.2019%" height="15" fill="rgb(208,68,35)"/><text x="20.3121%" y="63.50"></text></g><g><title>is_copy_raw (12,073,667 samples, 1.01%)</title><rect x="20.2639%" y="53" width="1.0117%" height="15" fill="rgb(232,128,0)"/><text x="20.5139%" y="63.50"></text></g><g><title>evaluate_obligation (9,621,189 samples, 0.81%)</title><rect x="20.4695%" y="37" width="0.8062%" height="15" fill="rgb(207,160,47)"/><text x="20.7195%" y="47.50"></text></g><g><title>needs_drop_raw (16,332,962 samples, 1.37%)</title><rect x="19.9130%" y="69" width="1.3686%" height="15" fill="rgb(228,23,34)"/><text x="20.1630%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (4,020,296 samples, 0.34%)</title><rect x="21.4438%" y="53" width="0.3369%" height="15" fill="rgb(218,30,26)"/><text x="21.6938%" y="63.50"></text></g><g><title>specialization_graph_of (1,213,574 samples, 0.10%)</title><rect x="21.8456%" y="53" width="0.1017%" height="15" fill="rgb(220,122,19)"/><text x="22.0956%" y="63.50"></text></g><g><title>resolve_instance (8,487,557 samples, 0.71%)</title><rect x="21.2827%" y="69" width="0.7112%" height="15" fill="rgb(250,228,42)"/><text x="21.5327%" y="79.50"></text></g><g><title>thir_body (13,694,236 samples, 1.15%)</title><rect x="22.0189%" y="69" width="1.1475%" height="15" fill="rgb(240,193,28)"/><text x="22.2689%" y="79.50"></text></g><g><title>mir_const (95,977,074 samples, 8.04%)</title><rect x="15.1881%" y="117" width="8.0424%" height="15" fill="rgb(216,20,37)"/><text x="15.4381%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (84,194,104 samples, 7.06%)</title><rect x="16.1754%" y="101" width="7.0550%" height="15" fill="rgb(206,188,39)"/><text x="16.4254%" y="111.50">unsafety_..</text></g><g><title>mir_built (76,373,019 samples, 6.40%)</title><rect x="16.8308%" y="85" width="6.3997%" height="15" fill="rgb(217,207,13)"/><text x="17.0808%" y="95.50">mir_built</text></g><g><title>mir_const_qualif (1,644,851 samples, 0.14%)</title><rect x="23.2305%" y="117" width="0.1378%" height="15" fill="rgb(231,73,38)"/><text x="23.4805%" y="127.50"></text></g><g><title>mir_promoted (107,572,384 samples, 9.01%)</title><rect x="14.3543%" y="133" width="9.0140%" height="15" fill="rgb(225,20,46)"/><text x="14.6043%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (5,873,103 samples, 0.49%)</title><rect x="23.3684%" y="133" width="0.4921%" height="15" fill="rgb(210,31,41)"/><text x="23.6184%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (6,273,918 samples, 0.53%)</title><rect x="23.8605%" y="133" width="0.5257%" height="15" fill="rgb(221,200,47)"/><text x="24.1105%" y="143.50"></text></g><g><title>normalize_projection_ty (3,372,178 samples, 0.28%)</title><rect x="24.1036%" y="117" width="0.2826%" height="15" fill="rgb(226,26,5)"/><text x="24.3536%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,340,451 samples, 0.20%)</title><rect x="24.3862%" y="133" width="0.1961%" height="15" fill="rgb(249,33,26)"/><text x="24.6362%" y="143.50"></text></g><g><title>normalize_projection_ty (1,207,001 samples, 0.10%)</title><rect x="24.4812%" y="117" width="0.1011%" height="15" fill="rgb(235,183,28)"/><text x="24.7312%" y="127.50"></text></g><g><title>type_op_normalize_ty (2,797,411 samples, 0.23%)</title><rect x="24.5823%" y="133" width="0.2344%" height="15" fill="rgb(221,5,38)"/><text x="24.8323%" y="143.50"></text></g><g><title>type_op_prove_predicate (27,792,612 samples, 2.33%)</title><rect x="24.8167%" y="133" width="2.3289%" height="15" fill="rgb(247,18,42)"/><text x="25.0667%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (318,344,946 samples, 26.68%)</title><rect x="0.4739%" y="165" width="26.6756%" height="15" fill="rgb(241,131,45)"/><text x="0.7239%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (316,097,484 samples, 26.49%)</title><rect x="0.6622%" y="149" width="26.4873%" height="15" fill="rgb(249,31,29)"/><text x="0.9122%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,450,696 samples, 0.12%)</title><rect x="27.1495%" y="165" width="0.1216%" height="15" fill="rgb(225,111,53)"/><text x="27.3995%" y="175.50"></text></g><g><title>hir_module_items (2,260,696 samples, 0.19%)</title><rect x="27.2711%" y="165" width="0.1894%" height="15" fill="rgb(238,160,17)"/><text x="27.5211%" y="175.50"></text></g><g><title>should_inherit_track_caller (1,213,132 samples, 0.10%)</title><rect x="27.7787%" y="117" width="0.1017%" height="15" fill="rgb(214,148,48)"/><text x="28.0287%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,339,454 samples, 0.20%)</title><rect x="27.6866%" y="133" width="0.1960%" height="15" fill="rgb(232,36,49)"/><text x="27.9366%" y="143.50"></text></g><g><title>check_mod_attrs (4,956,192 samples, 0.42%)</title><rect x="27.4673%" y="149" width="0.4153%" height="15" fill="rgb(209,103,24)"/><text x="27.7173%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,545,907 samples, 0.13%)</title><rect x="27.8826%" y="149" width="0.1295%" height="15" fill="rgb(229,88,8)"/><text x="28.1326%" y="159.50"></text></g><g><title>lookup_deprecation_entry (1,307,616 samples, 0.11%)</title><rect x="28.2273%" y="133" width="0.1096%" height="15" fill="rgb(213,181,19)"/><text x="28.4773%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,920,091 samples, 0.24%)</title><rect x="28.1094%" y="149" width="0.2447%" height="15" fill="rgb(254,191,54)"/><text x="28.3594%" y="159.50"></text></g><g><title>misc_checking_1 (11,164,374 samples, 0.94%)</title><rect x="27.4606%" y="165" width="0.9355%" height="15" fill="rgb(241,83,37)"/><text x="27.7106%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (5,592,501 samples, 0.47%)</title><rect x="28.3963%" y="149" width="0.4686%" height="15" fill="rgb(233,36,39)"/><text x="28.6463%" y="159.50"></text></g><g><title>check_mod_liveness (4,496,180 samples, 0.38%)</title><rect x="28.4882%" y="133" width="0.3768%" height="15" fill="rgb(226,3,54)"/><text x="28.7382%" y="143.50"></text></g><g><title>misc_checking_2 (14,786,614 samples, 1.24%)</title><rect x="28.3961%" y="165" width="1.2390%" height="15" fill="rgb(245,192,40)"/><text x="28.6461%" y="175.50"></text></g><g><title>match_checking (9,190,883 samples, 0.77%)</title><rect x="28.8650%" y="149" width="0.7701%" height="15" fill="rgb(238,167,29)"/><text x="29.1150%" y="159.50"></text></g><g><title>check_match (8,718,406 samples, 0.73%)</title><rect x="28.9046%" y="133" width="0.7306%" height="15" fill="rgb(232,182,51)"/><text x="29.1546%" y="143.50"></text></g><g><title>check_private_in_public (2,863,962 samples, 0.24%)</title><rect x="29.6366%" y="149" width="0.2400%" height="15" fill="rgb(231,60,39)"/><text x="29.8866%" y="159.50"></text></g><g><title>death_checking (5,159,617 samples, 0.43%)</title><rect x="29.8766%" y="149" width="0.4323%" height="15" fill="rgb(208,69,12)"/><text x="30.1266%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,098,221 samples, 0.18%)</title><rect x="30.8028%" y="117" width="0.1758%" height="15" fill="rgb(235,93,37)"/><text x="31.0528%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,071,280 samples, 0.17%)</title><rect x="30.8050%" y="101" width="0.1736%" height="15" fill="rgb(213,116,39)"/><text x="31.0550%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,031,200 samples, 0.17%)</title><rect x="30.8084%" y="85" width="0.1702%" height="15" fill="rgb(222,207,29)"/><text x="31.0584%" y="95.50"></text></g><g><title>param_env (2,322,729 samples, 0.19%)</title><rect x="30.9786%" y="117" width="0.1946%" height="15" fill="rgb(206,96,30)"/><text x="31.2286%" y="127.50"></text></g><g><title>crate_lints (12,699,611 samples, 1.06%)</title><rect x="30.3093%" y="133" width="1.0642%" height="15" fill="rgb(218,138,4)"/><text x="30.5593%" y="143.50"></text></g><g><title>type_of (1,967,563 samples, 0.16%)</title><rect x="31.2086%" y="117" width="0.1649%" height="15" fill="rgb(250,191,14)"/><text x="31.4586%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,400,155 samples, 0.12%)</title><rect x="31.2561%" y="101" width="0.1173%" height="15" fill="rgb(239,60,40)"/><text x="31.5061%" y="111.50"></text></g><g><title>lint_checking (19,890,381 samples, 1.67%)</title><rect x="30.3090%" y="149" width="1.6667%" height="15" fill="rgb(206,27,48)"/><text x="30.5590%" y="159.50"></text></g><g><title>module_lints (7,187,180 samples, 0.60%)</title><rect x="31.3734%" y="133" width="0.6022%" height="15" fill="rgb(225,35,8)"/><text x="31.6234%" y="143.50"></text></g><g><title>lint_mod (7,148,880 samples, 0.60%)</title><rect x="31.3766%" y="117" width="0.5990%" height="15" fill="rgb(250,213,24)"/><text x="31.6266%" y="127.50"></text></g><g><title>privacy_access_levels (4,658,912 samples, 0.39%)</title><rect x="31.9757%" y="149" width="0.3904%" height="15" fill="rgb(247,123,22)"/><text x="32.2257%" y="159.50"></text></g><g><title>privacy_checking_modules (13,847,604 samples, 1.16%)</title><rect x="32.3661%" y="149" width="1.1604%" height="15" fill="rgb(231,138,38)"/><text x="32.6161%" y="159.50"></text></g><g><title>check_mod_privacy (13,819,062 samples, 1.16%)</title><rect x="32.3685%" y="133" width="1.1580%" height="15" fill="rgb(231,145,46)"/><text x="32.6185%" y="143.50"></text></g><g><title>misc_checking_3 (46,555,108 samples, 3.90%)</title><rect x="29.6351%" y="165" width="3.9011%" height="15" fill="rgb(251,118,11)"/><text x="29.8851%" y="175.50">misc..</text></g><g><title>impl_parent (4,285,386 samples, 0.36%)</title><rect x="34.4088%" y="101" width="0.3591%" height="15" fill="rgb(217,147,25)"/><text x="34.6588%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,466,210 samples, 0.21%)</title><rect x="34.5612%" y="85" width="0.2067%" height="15" fill="rgb(247,81,37)"/><text x="34.8112%" y="95.50"></text></g><g><title>impl_trait_ref (8,873,333 samples, 0.74%)</title><rect x="34.7679%" y="101" width="0.7435%" height="15" fill="rgb(209,12,38)"/><text x="35.0179%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,028,584 samples, 0.59%)</title><rect x="34.9225%" y="85" width="0.5890%" height="15" fill="rgb(227,1,9)"/><text x="35.1725%" y="95.50"></text></g><g><title>trait_impls_of (1,977,432 samples, 0.17%)</title><rect x="35.5160%" y="101" width="0.1657%" height="15" fill="rgb(248,47,43)"/><text x="35.7660%" y="111.50"></text></g><g><title>coherent_trait (24,803,486 samples, 2.08%)</title><rect x="33.6034%" y="133" width="2.0784%" height="15" fill="rgb(221,10,30)"/><text x="33.8534%" y="143.50">c..</text></g><g><title>specialization_graph_of (23,184,307 samples, 1.94%)</title><rect x="33.7390%" y="117" width="1.9427%" height="15" fill="rgb(210,229,1)"/><text x="33.9890%" y="127.50">s..</text></g><g><title>coherence_checking (25,376,762 samples, 2.13%)</title><rect x="33.5996%" y="149" width="2.1264%" height="15" fill="rgb(222,148,37)"/><text x="33.8496%" y="159.50">c..</text></g><g><title>adt_dtorck_constraint (1,270,230 samples, 0.11%)</title><rect x="56.0995%" y="85" width="0.1064%" height="15" fill="rgb(234,67,33)"/><text x="56.3495%" y="95.50"></text></g><g><title>dropck_outlives (4,932,773 samples, 0.41%)</title><rect x="55.8160%" y="101" width="0.4133%" height="15" fill="rgb(247,98,35)"/><text x="56.0660%" y="111.50"></text></g><g><title>evaluate_obligation (16,659,862 samples, 1.40%)</title><rect x="56.2300%" y="101" width="1.3960%" height="15" fill="rgb(247,138,52)"/><text x="56.4800%" y="111.50"></text></g><g><title>method_autoderef_steps (2,268,942 samples, 0.19%)</title><rect x="57.8891%" y="101" width="0.1901%" height="15" fill="rgb(213,79,30)"/><text x="58.1391%" y="111.50"></text></g><g><title>predicates_of (1,498,437 samples, 0.13%)</title><rect x="58.1272%" y="101" width="0.1256%" height="15" fill="rgb(246,177,23)"/><text x="58.3772%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,225,693 samples, 0.10%)</title><rect x="62.7512%" y="37" width="0.1027%" height="15" fill="rgb(230,62,27)"/><text x="63.0012%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,609,045 samples, 0.13%)</title><rect x="62.7255%" y="53" width="0.1348%" height="15" fill="rgb(216,154,8)"/><text x="62.9755%" y="63.50"></text></g><g><title>adt_dtorck_constraint (2,951,611 samples, 0.25%)</title><rect x="62.6248%" y="69" width="0.2473%" height="15" fill="rgb(244,35,45)"/><text x="62.8748%" y="79.50"></text></g><g><title>dropck_outlives (4,108,713 samples, 0.34%)</title><rect x="62.5358%" y="85" width="0.3443%" height="15" fill="rgb(251,115,12)"/><text x="62.7858%" y="95.50"></text></g><g><title>evaluate_obligation (7,588,184 samples, 0.64%)</title><rect x="62.8805%" y="85" width="0.6358%" height="15" fill="rgb(240,54,50)"/><text x="63.1305%" y="95.50"></text></g><g><title>typeck (67,152,197 samples, 5.63%)</title><rect x="58.3060%" y="101" width="5.6270%" height="15" fill="rgb(233,84,52)"/><text x="58.5560%" y="111.50">typeck</text></g><g><title>item_bodies_checking (336,453,508 samples, 28.19%)</title><rect x="35.7683%" y="149" width="28.1930%" height="15" fill="rgb(207,117,47)"/><text x="36.0183%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (336,449,337 samples, 28.19%)</title><rect x="35.7687%" y="133" width="28.1927%" height="15" fill="rgb(249,43,39)"/><text x="36.0187%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (335,381,936 samples, 28.10%)</title><rect x="35.8581%" y="117" width="28.1032%" height="15" fill="rgb(209,38,44)"/><text x="36.1081%" y="127.50">typeck</text></g><g><title>typeck (1,423,869 samples, 0.12%)</title><rect x="65.3734%" y="117" width="0.1193%" height="15" fill="rgb(236,212,23)"/><text x="65.6234%" y="127.50"></text></g><g><title>item_types_checking (18,275,842 samples, 1.53%)</title><rect x="63.9613%" y="149" width="1.5314%" height="15" fill="rgb(242,79,21)"/><text x="64.2113%" y="159.50"></text></g><g><title>check_mod_item_types (18,244,972 samples, 1.53%)</title><rect x="63.9639%" y="133" width="1.5288%" height="15" fill="rgb(211,96,35)"/><text x="64.2139%" y="143.50"></text></g><g><title>fn_sig (3,849,659 samples, 0.32%)</title><rect x="65.8102%" y="117" width="0.3226%" height="15" fill="rgb(253,215,40)"/><text x="66.0602%" y="127.50"></text></g><g><title>is_late_bound_map (2,053,167 samples, 0.17%)</title><rect x="66.2465%" y="101" width="0.1720%" height="15" fill="rgb(211,81,21)"/><text x="66.4965%" y="111.50"></text></g><g><title>resolve_lifetimes (1,942,766 samples, 0.16%)</title><rect x="66.2558%" y="85" width="0.1628%" height="15" fill="rgb(208,190,38)"/><text x="66.5058%" y="95.50"></text></g><g><title>lint_levels (2,703,600 samples, 0.23%)</title><rect x="66.6382%" y="69" width="0.2265%" height="15" fill="rgb(235,213,38)"/><text x="66.8882%" y="79.50"></text></g><g><title>named_region_map (5,325,184 samples, 0.45%)</title><rect x="66.4186%" y="101" width="0.4462%" height="15" fill="rgb(237,122,38)"/><text x="66.6686%" y="111.50"></text></g><g><title>resolve_lifetimes (5,090,032 samples, 0.43%)</title><rect x="66.4383%" y="85" width="0.4265%" height="15" fill="rgb(244,218,35)"/><text x="66.6883%" y="95.50"></text></g><g><title>generics_of (8,894,715 samples, 0.75%)</title><rect x="66.1328%" y="117" width="0.7453%" height="15" fill="rgb(240,68,47)"/><text x="66.3828%" y="127.50"></text></g><g><title>explicit_predicates_of (1,998,699 samples, 0.17%)</title><rect x="67.0750%" y="85" width="0.1675%" height="15" fill="rgb(210,16,53)"/><text x="67.3250%" y="95.50"></text></g><g><title>predicates_of (6,633,613 samples, 0.56%)</title><rect x="66.9188%" y="117" width="0.5559%" height="15" fill="rgb(235,124,12)"/><text x="67.1688%" y="127.50"></text></g><g><title>predicates_defined_on (5,881,674 samples, 0.49%)</title><rect x="66.9818%" y="101" width="0.4929%" height="15" fill="rgb(224,169,11)"/><text x="67.2318%" y="111.50"></text></g><g><title>inferred_outlives_of (2,770,301 samples, 0.23%)</title><rect x="67.2425%" y="85" width="0.2321%" height="15" fill="rgb(250,166,2)"/><text x="67.4925%" y="95.50"></text></g><g><title>inferred_outlives_crate (2,539,829 samples, 0.21%)</title><rect x="67.2618%" y="69" width="0.2128%" height="15" fill="rgb(242,216,29)"/><text x="67.5118%" y="79.50"></text></g><g><title>type_of (1,540,856 samples, 0.13%)</title><rect x="67.3455%" y="53" width="0.1291%" height="15" fill="rgb(230,116,27)"/><text x="67.5955%" y="63.50"></text></g><g><title>type_collecting (25,029,788 samples, 2.10%)</title><rect x="65.4946%" y="149" width="2.0974%" height="15" fill="rgb(228,99,48)"/><text x="65.7446%" y="159.50">t..</text></g><g><title>collect_mod_item_types (24,992,838 samples, 2.09%)</title><rect x="65.4977%" y="133" width="2.0943%" height="15" fill="rgb(253,11,6)"/><text x="65.7477%" y="143.50">c..</text></g><g><title>type_of (1,381,364 samples, 0.12%)</title><rect x="67.4762%" y="117" width="0.1158%" height="15" fill="rgb(247,143,39)"/><text x="67.7262%" y="127.50"></text></g><g><title>evaluate_obligation (4,614,419 samples, 0.39%)</title><rect x="69.8571%" y="117" width="0.3867%" height="15" fill="rgb(236,97,10)"/><text x="70.1071%" y="127.50"></text></g><g><title>implied_outlives_bounds (2,970,483 samples, 0.25%)</title><rect x="70.2523%" y="117" width="0.2489%" height="15" fill="rgb(233,208,19)"/><text x="70.5023%" y="127.50"></text></g><g><title>param_env (3,439,355 samples, 0.29%)</title><rect x="70.5611%" y="117" width="0.2882%" height="15" fill="rgb(216,164,2)"/><text x="70.8111%" y="127.50"></text></g><g><title>region_scope_tree (4,942,644 samples, 0.41%)</title><rect x="70.8584%" y="117" width="0.4142%" height="15" fill="rgb(220,129,5)"/><text x="71.1084%" y="127.50"></text></g><g><title>check_impl_item_well_formed (41,592,463 samples, 3.49%)</title><rect x="67.8148%" y="133" width="3.4852%" height="15" fill="rgb(242,17,10)"/><text x="68.0648%" y="143.50">che..</text></g><g><title>adt_sized_constraint (1,396,487 samples, 0.12%)</title><rect x="72.9153%" y="101" width="0.1170%" height="15" fill="rgb(242,107,0)"/><text x="73.1653%" y="111.50"></text></g><g><title>evaluate_obligation (6,918,833 samples, 0.58%)</title><rect x="72.5029%" y="117" width="0.5798%" height="15" fill="rgb(251,28,31)"/><text x="72.7529%" y="127.50"></text></g><g><title>param_env (3,078,568 samples, 0.26%)</title><rect x="73.2043%" y="117" width="0.2580%" height="15" fill="rgb(233,223,10)"/><text x="73.4543%" y="127.50"></text></g><g><title>check_item_well_formed (27,556,348 samples, 2.31%)</title><rect x="71.3000%" y="133" width="2.3091%" height="15" fill="rgb(215,21,27)"/><text x="71.5500%" y="143.50">c..</text></g><g><title>analysis (876,776,769 samples, 73.47%)</title><rect x="0.2390%" y="181" width="73.4692%" height="15" fill="rgb(232,23,21)"/><text x="0.4890%" y="191.50">analysis</text></g><g><title>type_check_crate (479,411,005 samples, 40.17%)</title><rect x="33.5362%" y="165" width="40.1721%" height="15" fill="rgb(244,5,23)"/><text x="33.7862%" y="175.50">type_check_crate</text></g><g><title>wf_checking (72,922,340 samples, 6.11%)</title><rect x="67.5978%" y="149" width="6.1105%" height="15" fill="rgb(226,81,46)"/><text x="67.8478%" y="159.50">wf_check..</text></g><g><title>AST_validation (1,774,899 samples, 0.15%)</title><rect x="73.7966%" y="165" width="0.1487%" height="15" fill="rgb(247,70,30)"/><text x="74.0466%" y="175.50"></text></g><g><title>metadata_register_crate (10,492,736 samples, 0.88%)</title><rect x="89.4850%" y="133" width="0.8792%" height="15" fill="rgb(212,68,19)"/><text x="89.7350%" y="143.50"></text></g><g><title>metadata_register_crate (6,474,132 samples, 0.54%)</title><rect x="89.8218%" y="117" width="0.5425%" height="15" fill="rgb(240,187,13)"/><text x="90.0718%" y="127.50"></text></g><g><title>metadata_register_crate (2,881,762 samples, 0.24%)</title><rect x="90.1228%" y="101" width="0.2415%" height="15" fill="rgb(223,113,26)"/><text x="90.3728%" y="111.50"></text></g><g><title>macro_expand_crate (196,548,194 samples, 16.47%)</title><rect x="74.0305%" y="165" width="16.4697%" height="15" fill="rgb(206,192,2)"/><text x="74.2805%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (196,530,324 samples, 16.47%)</title><rect x="74.0320%" y="149" width="16.4682%" height="15" fill="rgb(241,108,4)"/><text x="74.2820%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,622,490 samples, 0.14%)</title><rect x="90.3643%" y="133" width="0.1360%" height="15" fill="rgb(247,173,49)"/><text x="90.6143%" y="143.50"></text></g><g><title>finalize_macro_resolutions (1,261,324 samples, 0.11%)</title><rect x="90.5678%" y="149" width="0.1057%" height="15" fill="rgb(224,114,35)"/><text x="90.8178%" y="159.50"></text></g><g><title>late_resolve_crate (22,927,665 samples, 1.92%)</title><rect x="90.6735%" y="149" width="1.9212%" height="15" fill="rgb(245,159,27)"/><text x="90.9235%" y="159.50">l..</text></g><g><title>resolve_check_unused (1,300,984 samples, 0.11%)</title><rect x="92.6035%" y="149" width="0.1090%" height="15" fill="rgb(245,172,44)"/><text x="92.8535%" y="159.50"></text></g><g><title>configure_and_expand (226,765,099 samples, 19.00%)</title><rect x="73.7762%" y="181" width="19.0017%" height="15" fill="rgb(236,23,11)"/><text x="74.0262%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (26,880,599 samples, 2.25%)</title><rect x="90.5255%" y="165" width="2.2525%" height="15" fill="rgb(205,117,38)"/><text x="90.7755%" y="175.50">r..</text></g><g><title>drop_ast (2,782,441 samples, 0.23%)</title><rect x="92.7779%" y="181" width="0.2332%" height="15" fill="rgb(237,72,25)"/><text x="93.0279%" y="191.50"></text></g><g><title>early_lint_checks (6,780,285 samples, 0.57%)</title><rect x="93.0141%" y="181" width="0.5682%" height="15" fill="rgb(244,70,9)"/><text x="93.2641%" y="191.50"></text></g><g><title>free_global_ctxt (12,592,009 samples, 1.06%)</title><rect x="93.5822%" y="181" width="1.0551%" height="15" fill="rgb(217,125,39)"/><text x="93.8322%" y="191.50"></text></g><g><title>generate_crate_metadata (18,056,730 samples, 1.51%)</title><rect x="94.6374%" y="181" width="1.5131%" height="15" fill="rgb(235,36,10)"/><text x="94.8874%" y="191.50"></text></g><g><title>hir_lowering (36,751,578 samples, 3.08%)</title><rect x="96.1504%" y="181" width="3.0796%" height="15" fill="rgb(251,123,47)"/><text x="96.4004%" y="191.50">hir..</text></g><g><title>parse_crate (3,864,013 samples, 0.32%)</title><rect x="99.2429%" y="181" width="0.3238%" height="15" fill="rgb(221,13,13)"/><text x="99.4929%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,536,790 samples, 0.30%)</title><rect x="99.5902%" y="181" width="0.2964%" height="15" fill="rgb(238,131,9)"/><text x="99.8402%" y="191.50"></text></g><g><title>all (1,193,393,145 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,193,393,145 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>