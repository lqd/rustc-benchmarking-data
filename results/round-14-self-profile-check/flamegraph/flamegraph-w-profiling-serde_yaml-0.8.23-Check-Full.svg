<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,567,767 samples, 0.20%)</title><rect x="16.7220%" y="133" width="0.2026%" height="15" fill="rgb(227,0,7)"/><text x="16.9720%" y="143.50"></text></g><g><title>param_env (2,327,391 samples, 0.30%)</title><rect x="19.1633%" y="101" width="0.3008%" height="15" fill="rgb(217,0,24)"/><text x="19.4133%" y="111.50"></text></g><g><title>item_attrs (834,154 samples, 0.11%)</title><rect x="20.1225%" y="69" width="0.1078%" height="15" fill="rgb(221,193,54)"/><text x="20.3725%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (797,734 samples, 0.10%)</title><rect x="20.1272%" y="53" width="0.1031%" height="15" fill="rgb(248,212,6)"/><text x="20.3772%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,250,367 samples, 0.16%)</title><rect x="20.0767%" y="85" width="0.1616%" height="15" fill="rgb(208,68,35)"/><text x="20.3267%" y="95.50"></text></g><g><title>is_copy_raw (1,319,132 samples, 0.17%)</title><rect x="23.7290%" y="69" width="0.1705%" height="15" fill="rgb(232,128,0)"/><text x="23.9790%" y="79.50"></text></g><g><title>evaluate_obligation (1,056,879 samples, 0.14%)</title><rect x="23.7629%" y="53" width="0.1366%" height="15" fill="rgb(207,160,47)"/><text x="24.0129%" y="63.50"></text></g><g><title>adt_drop_tys (928,569 samples, 0.12%)</title><rect x="24.0451%" y="53" width="0.1200%" height="15" fill="rgb(228,23,34)"/><text x="24.2951%" y="63.50"></text></g><g><title>is_copy_raw (8,033,764 samples, 1.04%)</title><rect x="24.1651%" y="53" width="1.0382%" height="15" fill="rgb(218,30,26)"/><text x="24.4151%" y="63.50"></text></g><g><title>evaluate_obligation (6,511,537 samples, 0.84%)</title><rect x="24.3619%" y="37" width="0.8415%" height="15" fill="rgb(220,122,19)"/><text x="24.6119%" y="47.50"></text></g><g><title>needs_drop_raw (10,124,662 samples, 1.31%)</title><rect x="23.8998%" y="69" width="1.3084%" height="15" fill="rgb(250,228,42)"/><text x="24.1498%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,589,428 samples, 0.33%)</title><rect x="25.4365%" y="53" width="0.3346%" height="15" fill="rgb(240,193,28)"/><text x="25.6865%" y="63.50"></text></g><g><title>resolve_instance (5,809,356 samples, 0.75%)</title><rect x="25.2125%" y="69" width="0.7508%" height="15" fill="rgb(216,20,37)"/><text x="25.4625%" y="79.50"></text></g><g><title>thir_body (9,215,650 samples, 1.19%)</title><rect x="26.0233%" y="69" width="1.1910%" height="15" fill="rgb(206,188,39)"/><text x="26.2733%" y="79.50"></text></g><g><title>mir_const (71,376,277 samples, 9.22%)</title><rect x="18.0850%" y="117" width="9.2242%" height="15" fill="rgb(217,207,13)"/><text x="18.3350%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (60,704,349 samples, 7.85%)</title><rect x="19.4641%" y="101" width="7.8450%" height="15" fill="rgb(231,73,38)"/><text x="19.7141%" y="111.50">unsafety_ch..</text></g><g><title>mir_built (54,713,543 samples, 7.07%)</title><rect x="20.2383%" y="85" width="7.0708%" height="15" fill="rgb(225,20,46)"/><text x="20.4883%" y="95.50">mir_built</text></g><g><title>mir_promoted (80,184,091 samples, 10.36%)</title><rect x="17.0596%" y="133" width="10.3625%" height="15" fill="rgb(210,31,41)"/><text x="17.3096%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (873,849 samples, 0.11%)</title><rect x="27.3091%" y="117" width="0.1129%" height="15" fill="rgb(221,200,47)"/><text x="27.5591%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (1,614,516 samples, 0.21%)</title><rect x="27.4221%" y="133" width="0.2086%" height="15" fill="rgb(226,26,5)"/><text x="27.6721%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,988,268 samples, 0.77%)</title><rect x="27.6307%" y="133" width="0.7739%" height="15" fill="rgb(249,33,26)"/><text x="27.8807%" y="143.50"></text></g><g><title>normalize_projection_ty (2,924,982 samples, 0.38%)</title><rect x="28.0266%" y="117" width="0.3780%" height="15" fill="rgb(235,183,28)"/><text x="28.2766%" y="127.50"></text></g><g><title>type_op_normalize_predicate (3,520,361 samples, 0.45%)</title><rect x="28.4046%" y="133" width="0.4549%" height="15" fill="rgb(221,5,38)"/><text x="28.6546%" y="143.50"></text></g><g><title>normalize_projection_ty (1,446,073 samples, 0.19%)</title><rect x="28.6727%" y="117" width="0.1869%" height="15" fill="rgb(247,18,42)"/><text x="28.9227%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,639,481 samples, 0.21%)</title><rect x="28.8596%" y="133" width="0.2119%" height="15" fill="rgb(241,131,45)"/><text x="29.1096%" y="143.50"></text></g><g><title>type_op_prove_predicate (24,038,345 samples, 3.11%)</title><rect x="29.0714%" y="133" width="3.1066%" height="15" fill="rgb(249,31,29)"/><text x="29.3214%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (245,639,207 samples, 31.74%)</title><rect x="0.4368%" y="165" width="31.7448%" height="15" fill="rgb(225,111,53)"/><text x="0.6868%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (244,108,503 samples, 31.55%)</title><rect x="0.6346%" y="149" width="31.5469%" height="15" fill="rgb(238,160,17)"/><text x="0.8846%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,421,066 samples, 0.18%)</title><rect x="32.2512%" y="165" width="0.1836%" height="15" fill="rgb(214,148,48)"/><text x="32.5012%" y="175.50"></text></g><g><title>codegen_fn_attrs (821,281 samples, 0.11%)</title><rect x="32.8550%" y="101" width="0.1061%" height="15" fill="rgb(232,36,49)"/><text x="33.1050%" y="111.50"></text></g><g><title>should_inherit_track_caller (1,641,988 samples, 0.21%)</title><rect x="32.7580%" y="117" width="0.2122%" height="15" fill="rgb(209,103,24)"/><text x="33.0080%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,295,134 samples, 0.30%)</title><rect x="32.6763%" y="133" width="0.2966%" height="15" fill="rgb(229,88,8)"/><text x="32.9263%" y="143.50"></text></g><g><title>check_mod_attrs (4,109,676 samples, 0.53%)</title><rect x="32.4418%" y="149" width="0.5311%" height="15" fill="rgb(213,181,19)"/><text x="32.6918%" y="159.50"></text></g><g><title>check_mod_const_bodies (959,119 samples, 0.12%)</title><rect x="32.9729%" y="149" width="0.1240%" height="15" fill="rgb(254,191,54)"/><text x="33.2229%" y="159.50"></text></g><g><title>lint_levels (1,155,563 samples, 0.15%)</title><rect x="33.2962%" y="133" width="0.1493%" height="15" fill="rgb(241,83,37)"/><text x="33.5462%" y="143.50"></text></g><g><title>lookup_deprecation_entry (916,240 samples, 0.12%)</title><rect x="33.4455%" y="133" width="0.1184%" height="15" fill="rgb(233,36,39)"/><text x="33.6955%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,227,398 samples, 0.42%)</title><rect x="33.1715%" y="149" width="0.4171%" height="15" fill="rgb(226,3,54)"/><text x="33.4215%" y="159.50"></text></g><g><title>misc_checking_1 (9,127,012 samples, 1.18%)</title><rect x="32.4349%" y="165" width="1.1795%" height="15" fill="rgb(245,192,40)"/><text x="32.6849%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,287,828 samples, 0.55%)</title><rect x="33.6147%" y="149" width="0.5541%" height="15" fill="rgb(238,167,29)"/><text x="33.8647%" y="159.50"></text></g><g><title>check_mod_liveness (3,652,452 samples, 0.47%)</title><rect x="33.6968%" y="133" width="0.4720%" height="15" fill="rgb(232,182,51)"/><text x="33.9468%" y="143.50"></text></g><g><title>misc_checking_2 (10,898,222 samples, 1.41%)</title><rect x="33.6144%" y="165" width="1.4084%" height="15" fill="rgb(231,60,39)"/><text x="33.8644%" y="175.50"></text></g><g><title>match_checking (6,608,134 samples, 0.85%)</title><rect x="34.1688%" y="149" width="0.8540%" height="15" fill="rgb(208,69,12)"/><text x="34.4188%" y="159.50"></text></g><g><title>check_match (6,243,780 samples, 0.81%)</title><rect x="34.2159%" y="133" width="0.8069%" height="15" fill="rgb(235,93,37)"/><text x="34.4659%" y="143.50"></text></g><g><title>check_private_in_public (1,571,328 samples, 0.20%)</title><rect x="35.0246%" y="149" width="0.2031%" height="15" fill="rgb(213,116,39)"/><text x="35.2746%" y="159.50"></text></g><g><title>death_checking (2,490,577 samples, 0.32%)</title><rect x="35.2276%" y="149" width="0.3219%" height="15" fill="rgb(222,207,29)"/><text x="35.4776%" y="159.50"></text></g><g><title>param_env (1,324,377 samples, 0.17%)</title><rect x="35.9892%" y="117" width="0.1712%" height="15" fill="rgb(206,96,30)"/><text x="36.2392%" y="127.50"></text></g><g><title>crate_lints (6,177,618 samples, 0.80%)</title><rect x="35.5499%" y="133" width="0.7984%" height="15" fill="rgb(218,138,4)"/><text x="35.7999%" y="143.50"></text></g><g><title>type_of (1,334,654 samples, 0.17%)</title><rect x="36.1758%" y="117" width="0.1725%" height="15" fill="rgb(250,191,14)"/><text x="36.4258%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,084,641 samples, 0.14%)</title><rect x="36.2081%" y="101" width="0.1402%" height="15" fill="rgb(239,60,40)"/><text x="36.4581%" y="111.50"></text></g><g><title>lint_checking (9,929,640 samples, 1.28%)</title><rect x="35.5495%" y="149" width="1.2832%" height="15" fill="rgb(206,27,48)"/><text x="35.7995%" y="159.50"></text></g><g><title>module_lints (3,748,822 samples, 0.48%)</title><rect x="36.3483%" y="133" width="0.4845%" height="15" fill="rgb(225,35,8)"/><text x="36.5983%" y="143.50"></text></g><g><title>lint_mod (3,731,731 samples, 0.48%)</title><rect x="36.3505%" y="117" width="0.4823%" height="15" fill="rgb(250,213,24)"/><text x="36.6005%" y="127.50"></text></g><g><title>privacy_access_levels (2,202,905 samples, 0.28%)</title><rect x="36.8327%" y="149" width="0.2847%" height="15" fill="rgb(247,123,22)"/><text x="37.0827%" y="159.50"></text></g><g><title>privacy_checking_modules (8,909,829 samples, 1.15%)</title><rect x="37.1174%" y="149" width="1.1514%" height="15" fill="rgb(231,138,38)"/><text x="37.3674%" y="159.50"></text></g><g><title>check_mod_privacy (8,896,769 samples, 1.15%)</title><rect x="37.1191%" y="133" width="1.1498%" height="15" fill="rgb(231,145,46)"/><text x="37.3691%" y="143.50"></text></g><g><title>misc_checking_3 (25,177,850 samples, 3.25%)</title><rect x="35.0228%" y="165" width="3.2538%" height="15" fill="rgb(251,118,11)"/><text x="35.2728%" y="175.50">mis..</text></g><g><title>impl_parent (3,516,483 samples, 0.45%)</title><rect x="39.3087%" y="101" width="0.4544%" height="15" fill="rgb(217,147,25)"/><text x="39.5587%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,067,310 samples, 0.27%)</title><rect x="39.4960%" y="85" width="0.2672%" height="15" fill="rgb(247,81,37)"/><text x="39.7460%" y="95.50"></text></g><g><title>impl_trait_ref (7,929,392 samples, 1.02%)</title><rect x="39.7633%" y="101" width="1.0247%" height="15" fill="rgb(209,12,38)"/><text x="40.0133%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,318,485 samples, 0.82%)</title><rect x="39.9714%" y="85" width="0.8166%" height="15" fill="rgb(227,1,9)"/><text x="40.2214%" y="95.50"></text></g><g><title>trait_impls_of (1,592,333 samples, 0.21%)</title><rect x="40.8446%" y="101" width="0.2058%" height="15" fill="rgb(248,47,43)"/><text x="41.0946%" y="111.50"></text></g><g><title>coherent_trait (20,947,964 samples, 2.71%)</title><rect x="38.3479%" y="133" width="2.7072%" height="15" fill="rgb(221,10,30)"/><text x="38.5979%" y="143.50">co..</text></g><g><title>specialization_graph_of (20,311,388 samples, 2.62%)</title><rect x="38.4302%" y="117" width="2.6249%" height="15" fill="rgb(210,229,1)"/><text x="38.6802%" y="127.50">sp..</text></g><g><title>coherence_checking (21,278,037 samples, 2.75%)</title><rect x="38.3419%" y="149" width="2.7498%" height="15" fill="rgb(222,148,37)"/><text x="38.5919%" y="159.50">co..</text></g><g><title>associated_item (1,723,557 samples, 0.22%)</title><rect x="60.6461%" y="85" width="0.2227%" height="15" fill="rgb(234,67,33)"/><text x="60.8961%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,367,204 samples, 0.18%)</title><rect x="60.6922%" y="69" width="0.1767%" height="15" fill="rgb(247,98,35)"/><text x="60.9422%" y="79.50"></text></g><g><title>associated_items (2,459,836 samples, 0.32%)</title><rect x="60.5658%" y="101" width="0.3179%" height="15" fill="rgb(247,138,52)"/><text x="60.8158%" y="111.50"></text></g><g><title>adt_dtorck_constraint (890,108 samples, 0.12%)</title><rect x="61.1975%" y="85" width="0.1150%" height="15" fill="rgb(213,79,30)"/><text x="61.4475%" y="95.50"></text></g><g><title>dropck_outlives (3,124,654 samples, 0.40%)</title><rect x="60.9302%" y="101" width="0.4038%" height="15" fill="rgb(246,177,23)"/><text x="61.1802%" y="111.50"></text></g><g><title>predicates_of (1,022,971 samples, 0.13%)</title><rect x="62.6280%" y="85" width="0.1322%" height="15" fill="rgb(230,62,27)"/><text x="62.8780%" y="95.50"></text></g><g><title>evaluate_obligation (12,042,612 samples, 1.56%)</title><rect x="61.3343%" y="101" width="1.5563%" height="15" fill="rgb(216,154,8)"/><text x="61.5843%" y="111.50"></text></g><g><title>evaluate_obligation (1,419,375 samples, 0.18%)</title><rect x="63.3089%" y="85" width="0.1834%" height="15" fill="rgb(244,35,45)"/><text x="63.5589%" y="95.50"></text></g><g><title>method_autoderef_steps (2,676,621 samples, 0.35%)</title><rect x="63.1487%" y="101" width="0.3459%" height="15" fill="rgb(251,115,12)"/><text x="63.3987%" y="111.50"></text></g><g><title>predicates_of (1,105,169 samples, 0.14%)</title><rect x="63.5565%" y="101" width="0.1428%" height="15" fill="rgb(240,54,50)"/><text x="63.8065%" y="111.50"></text></g><g><title>evaluate_obligation (4,405,144 samples, 0.57%)</title><rect x="71.2509%" y="85" width="0.5693%" height="15" fill="rgb(233,84,52)"/><text x="71.5009%" y="95.50"></text></g><g><title>is_copy_raw (804,669 samples, 0.10%)</title><rect x="71.8981%" y="85" width="0.1040%" height="15" fill="rgb(207,117,47)"/><text x="72.1481%" y="95.50"></text></g><g><title>typeck (65,334,529 samples, 8.44%)</title><rect x="63.7508%" y="101" width="8.4434%" height="15" fill="rgb(249,43,39)"/><text x="64.0008%" y="111.50">typeck</text></g><g><title>item_bodies_checking (240,748,443 samples, 31.11%)</title><rect x="41.1258%" y="149" width="31.1127%" height="15" fill="rgb(209,38,44)"/><text x="41.3758%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (240,744,563 samples, 31.11%)</title><rect x="41.1263%" y="133" width="31.1122%" height="15" fill="rgb(236,212,23)"/><text x="41.3763%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (239,848,423 samples, 31.00%)</title><rect x="41.2421%" y="117" width="30.9964%" height="15" fill="rgb(242,79,21)"/><text x="41.4921%" y="127.50">typeck</text></g><g><title>item_types_checking (20,121,715 samples, 2.60%)</title><rect x="72.2385%" y="149" width="2.6004%" height="15" fill="rgb(211,96,35)"/><text x="72.4885%" y="159.50">it..</text></g><g><title>check_mod_item_types (20,105,594 samples, 2.60%)</title><rect x="72.2406%" y="133" width="2.5983%" height="15" fill="rgb(253,215,40)"/><text x="72.4906%" y="143.50">ch..</text></g><g><title>fn_sig (3,889,549 samples, 0.50%)</title><rect x="75.1340%" y="117" width="0.5027%" height="15" fill="rgb(211,81,21)"/><text x="75.3840%" y="127.50"></text></g><g><title>is_late_bound_map (2,428,988 samples, 0.31%)</title><rect x="75.7665%" y="101" width="0.3139%" height="15" fill="rgb(208,190,38)"/><text x="76.0165%" y="111.50"></text></g><g><title>resolve_lifetimes (2,313,126 samples, 0.30%)</title><rect x="75.7815%" y="85" width="0.2989%" height="15" fill="rgb(235,213,38)"/><text x="76.0315%" y="95.50"></text></g><g><title>named_region_map (959,909 samples, 0.12%)</title><rect x="76.0804%" y="101" width="0.1241%" height="15" fill="rgb(237,122,38)"/><text x="76.3304%" y="111.50"></text></g><g><title>resolve_lifetimes (866,159 samples, 0.11%)</title><rect x="76.0925%" y="85" width="0.1119%" height="15" fill="rgb(244,218,35)"/><text x="76.3425%" y="95.50"></text></g><g><title>generics_of (4,484,531 samples, 0.58%)</title><rect x="75.6367%" y="117" width="0.5796%" height="15" fill="rgb(240,68,47)"/><text x="75.8867%" y="127.50"></text></g><g><title>explicit_predicates_of (1,783,731 samples, 0.23%)</title><rect x="76.3901%" y="85" width="0.2305%" height="15" fill="rgb(210,16,53)"/><text x="76.6401%" y="95.50"></text></g><g><title>predicates_of (4,233,533 samples, 0.55%)</title><rect x="76.2529%" y="117" width="0.5471%" height="15" fill="rgb(235,124,12)"/><text x="76.5029%" y="127.50"></text></g><g><title>predicates_defined_on (3,828,711 samples, 0.49%)</title><rect x="76.3052%" y="101" width="0.4948%" height="15" fill="rgb(224,169,11)"/><text x="76.5552%" y="111.50"></text></g><g><title>inferred_outlives_of (1,387,725 samples, 0.18%)</title><rect x="76.6206%" y="85" width="0.1793%" height="15" fill="rgb(250,166,2)"/><text x="76.8706%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,255,054 samples, 0.16%)</title><rect x="76.6378%" y="69" width="0.1622%" height="15" fill="rgb(242,216,29)"/><text x="76.8878%" y="79.50"></text></g><g><title>type_collecting (15,800,846 samples, 2.04%)</title><rect x="74.8404%" y="149" width="2.0420%" height="15" fill="rgb(230,116,27)"/><text x="75.0904%" y="159.50">t..</text></g><g><title>collect_mod_item_types (15,766,986 samples, 2.04%)</title><rect x="74.8448%" y="133" width="2.0376%" height="15" fill="rgb(228,99,48)"/><text x="75.0948%" y="143.50">c..</text></g><g><title>evaluate_obligation (2,282,618 samples, 0.29%)</title><rect x="80.0653%" y="117" width="0.2950%" height="15" fill="rgb(253,11,6)"/><text x="80.3153%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,641,107 samples, 0.21%)</title><rect x="80.3685%" y="117" width="0.2121%" height="15" fill="rgb(247,143,39)"/><text x="80.6185%" y="127.50"></text></g><g><title>param_env (3,632,933 samples, 0.47%)</title><rect x="80.6303%" y="117" width="0.4695%" height="15" fill="rgb(236,97,10)"/><text x="80.8803%" y="127.50"></text></g><g><title>region_scope_tree (3,115,715 samples, 0.40%)</title><rect x="81.1153%" y="117" width="0.4027%" height="15" fill="rgb(233,208,19)"/><text x="81.3653%" y="127.50"></text></g><g><title>check_impl_item_well_formed (34,125,692 samples, 4.41%)</title><rect x="77.1147%" y="133" width="4.4102%" height="15" fill="rgb(216,164,2)"/><text x="77.3647%" y="143.50">check..</text></g><g><title>evaluate_obligation (2,152,302 samples, 0.28%)</title><rect x="82.4664%" y="117" width="0.2781%" height="15" fill="rgb(220,129,5)"/><text x="82.7164%" y="127.50"></text></g><g><title>param_env (1,322,037 samples, 0.17%)</title><rect x="82.8740%" y="117" width="0.1709%" height="15" fill="rgb(242,17,10)"/><text x="83.1240%" y="127.50"></text></g><g><title>check_item_well_formed (13,132,179 samples, 1.70%)</title><rect x="81.5249%" y="133" width="1.6971%" height="15" fill="rgb(242,107,0)"/><text x="81.7749%" y="143.50"></text></g><g><title>analysis (642,567,890 samples, 83.04%)</title><rect x="0.2040%" y="181" width="83.0411%" height="15" fill="rgb(251,28,31)"/><text x="0.4540%" y="191.50">analysis</text></g><g><title>type_check_crate (347,963,948 samples, 44.97%)</title><rect x="38.2766%" y="165" width="44.9685%" height="15" fill="rgb(233,223,10)"/><text x="38.5266%" y="175.50">type_check_crate</text></g><g><title>wf_checking (49,176,438 samples, 6.36%)</title><rect x="76.8899%" y="149" width="6.3552%" height="15" fill="rgb(215,21,27)"/><text x="77.1399%" y="159.50">wf_check..</text></g><g><title>AST_validation (809,209 samples, 0.10%)</title><rect x="83.3279%" y="165" width="0.1046%" height="15" fill="rgb(232,23,21)"/><text x="83.5779%" y="175.50"></text></g><g><title>metadata_register_crate (1,393,446 samples, 0.18%)</title><rect x="91.6707%" y="133" width="0.1801%" height="15" fill="rgb(244,5,23)"/><text x="91.9207%" y="143.50"></text></g><g><title>macro_expand_crate (66,303,909 samples, 8.57%)</title><rect x="83.4962%" y="165" width="8.5687%" height="15" fill="rgb(226,81,46)"/><text x="83.7462%" y="175.50">macro_expand..</text></g><g><title>expand_crate (66,279,439 samples, 8.57%)</title><rect x="83.4993%" y="149" width="8.5655%" height="15" fill="rgb(247,70,30)"/><text x="83.7493%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,656,710 samples, 0.21%)</title><rect x="91.8507%" y="133" width="0.2141%" height="15" fill="rgb(212,68,19)"/><text x="92.1007%" y="143.50"></text></g><g><title>late_resolve_crate (11,459,658 samples, 1.48%)</title><rect x="92.1760%" y="149" width="1.4810%" height="15" fill="rgb(240,187,13)"/><text x="92.4260%" y="159.50"></text></g><g><title>configure_and_expand (81,190,425 samples, 10.49%)</title><rect x="83.3007%" y="181" width="10.4925%" height="15" fill="rgb(223,113,26)"/><text x="83.5507%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (13,088,676 samples, 1.69%)</title><rect x="92.1017%" y="165" width="1.6915%" height="15" fill="rgb(206,192,2)"/><text x="92.3517%" y="175.50"></text></g><g><title>drop_ast (1,453,867 samples, 0.19%)</title><rect x="93.7932%" y="181" width="0.1879%" height="15" fill="rgb(241,108,4)"/><text x="94.0432%" y="191.50"></text></g><g><title>early_lint_checks (2,737,450 samples, 0.35%)</title><rect x="93.9840%" y="181" width="0.3538%" height="15" fill="rgb(247,173,49)"/><text x="94.2340%" y="191.50"></text></g><g><title>free_global_ctxt (8,308,862 samples, 1.07%)</title><rect x="94.3377%" y="181" width="1.0738%" height="15" fill="rgb(224,114,35)"/><text x="94.5877%" y="191.50"></text></g><g><title>generate_crate_metadata (7,932,549 samples, 1.03%)</title><rect x="95.4115%" y="181" width="1.0251%" height="15" fill="rgb(245,159,27)"/><text x="95.6615%" y="191.50"></text></g><g><title>hir_lowering (23,344,121 samples, 3.02%)</title><rect x="96.4367%" y="181" width="3.0168%" height="15" fill="rgb(245,172,44)"/><text x="96.6867%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (2,489,998 samples, 0.32%)</title><rect x="99.5767%" y="181" width="0.3218%" height="15" fill="rgb(236,23,11)"/><text x="99.8267%" y="191.50"></text></g><g><title>all (773,794,614 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (773,794,614 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>