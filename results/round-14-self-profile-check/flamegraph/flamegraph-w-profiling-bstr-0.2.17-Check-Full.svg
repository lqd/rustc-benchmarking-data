<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (653,095 samples, 0.11%)</title><rect x="14.1578%" y="149" width="0.1102%" height="15" fill="rgb(227,0,7)"/><text x="14.4078%" y="159.50"></text></g><g><title>eval_to_const_value_raw (998,261 samples, 0.17%)</title><rect x="15.2169%" y="133" width="0.1684%" height="15" fill="rgb(217,0,24)"/><text x="15.4669%" y="143.50"></text></g><g><title>eval_to_const_value_raw (990,671 samples, 0.17%)</title><rect x="15.2182%" y="117" width="0.1671%" height="15" fill="rgb(221,193,54)"/><text x="15.4682%" y="127.50"></text></g><g><title>eval_to_allocation_raw (758,199 samples, 0.13%)</title><rect x="15.2574%" y="101" width="0.1279%" height="15" fill="rgb(248,212,6)"/><text x="15.5074%" y="111.50"></text></g><g><title>param_env (1,209,312 samples, 0.20%)</title><rect x="16.3295%" y="117" width="0.2040%" height="15" fill="rgb(208,68,35)"/><text x="16.5795%" y="127.50"></text></g><g><title>item_attrs (1,181,207 samples, 0.20%)</title><rect x="17.1367%" y="85" width="0.1993%" height="15" fill="rgb(232,128,0)"/><text x="17.3867%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,145,356 samples, 0.19%)</title><rect x="17.1428%" y="69" width="0.1932%" height="15" fill="rgb(207,160,47)"/><text x="17.3928%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,625,443 samples, 0.27%)</title><rect x="17.0720%" y="101" width="0.2742%" height="15" fill="rgb(228,23,34)"/><text x="17.3220%" y="111.50"></text></g><g><title>needs_drop_raw (3,535,705 samples, 0.60%)</title><rect x="20.4616%" y="85" width="0.5965%" height="15" fill="rgb(218,30,26)"/><text x="20.7116%" y="95.50"></text></g><g><title>is_copy_raw (2,600,408 samples, 0.44%)</title><rect x="20.6194%" y="69" width="0.4387%" height="15" fill="rgb(220,122,19)"/><text x="20.8694%" y="79.50"></text></g><g><title>evaluate_obligation (2,100,093 samples, 0.35%)</title><rect x="20.7038%" y="53" width="0.3543%" height="15" fill="rgb(250,228,42)"/><text x="20.9538%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,901,113 samples, 0.32%)</title><rect x="21.2889%" y="69" width="0.3208%" height="15" fill="rgb(240,193,28)"/><text x="21.5389%" y="79.50"></text></g><g><title>resolve_instance (4,197,552 samples, 0.71%)</title><rect x="21.0584%" y="85" width="0.7082%" height="15" fill="rgb(216,20,37)"/><text x="21.3084%" y="95.50"></text></g><g><title>thir_body (7,114,835 samples, 1.20%)</title><rect x="21.7996%" y="85" width="1.2004%" height="15" fill="rgb(206,188,39)"/><text x="22.0496%" y="95.50"></text></g><g><title>mir_const (45,223,935 samples, 7.63%)</title><rect x="15.3956%" y="133" width="7.6301%" height="15" fill="rgb(217,207,13)"/><text x="15.6456%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (38,479,624 samples, 6.49%)</title><rect x="16.5335%" y="117" width="6.4922%" height="15" fill="rgb(231,73,38)"/><text x="16.7835%" y="127.50">unsafety_..</text></g><g><title>mir_built (33,662,595 samples, 5.68%)</title><rect x="17.3462%" y="101" width="5.6795%" height="15" fill="rgb(225,20,46)"/><text x="17.5962%" y="111.50">mir_bui..</text></g><g><title>thir_body (1,000,563 samples, 0.17%)</title><rect x="23.5339%" y="69" width="0.1688%" height="15" fill="rgb(210,31,41)"/><text x="23.7839%" y="79.50"></text></g><g><title>mir_const (2,171,305 samples, 0.37%)</title><rect x="23.3383%" y="117" width="0.3663%" height="15" fill="rgb(221,200,47)"/><text x="23.5883%" y="127.50"></text></g><g><title>unsafety_check_result (1,891,154 samples, 0.32%)</title><rect x="23.3856%" y="101" width="0.3191%" height="15" fill="rgb(226,26,5)"/><text x="23.6356%" y="111.50"></text></g><g><title>mir_built (1,788,853 samples, 0.30%)</title><rect x="23.4028%" y="85" width="0.3018%" height="15" fill="rgb(249,33,26)"/><text x="23.6528%" y="95.50"></text></g><g><title>mir_const_qualif (4,405,330 samples, 0.74%)</title><rect x="23.0258%" y="133" width="0.7433%" height="15" fill="rgb(235,183,28)"/><text x="23.2758%" y="143.50"></text></g><g><title>mir_promoted (56,053,664 samples, 9.46%)</title><rect x="14.3123%" y="149" width="9.4573%" height="15" fill="rgb(221,5,38)"/><text x="14.5623%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,377,286 samples, 0.40%)</title><rect x="23.7703%" y="149" width="0.4011%" height="15" fill="rgb(247,18,42)"/><text x="24.0203%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,727,613 samples, 0.46%)</title><rect x="24.1714%" y="149" width="0.4602%" height="15" fill="rgb(241,131,45)"/><text x="24.4214%" y="159.50"></text></g><g><title>normalize_projection_ty (1,690,519 samples, 0.29%)</title><rect x="24.3464%" y="133" width="0.2852%" height="15" fill="rgb(249,31,29)"/><text x="24.5964%" y="143.50"></text></g><g><title>type_op_prove_predicate (10,314,724 samples, 1.74%)</title><rect x="24.6730%" y="149" width="1.7403%" height="15" fill="rgb(225,111,53)"/><text x="24.9230%" y="159.50"></text></g><g><title>MIR_borrow_checking (153,614,757 samples, 25.92%)</title><rect x="0.5009%" y="181" width="25.9177%" height="15" fill="rgb(238,160,17)"/><text x="0.7509%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (152,545,138 samples, 25.74%)</title><rect x="0.6814%" y="165" width="25.7373%" height="15" fill="rgb(214,148,48)"/><text x="0.9314%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,053,081 samples, 0.18%)</title><rect x="26.4186%" y="181" width="0.1777%" height="15" fill="rgb(232,36,49)"/><text x="26.6686%" y="191.50"></text></g><g><title>hir_module_items (1,239,141 samples, 0.21%)</title><rect x="26.5963%" y="181" width="0.2091%" height="15" fill="rgb(209,103,24)"/><text x="26.8463%" y="191.50"></text></g><g><title>should_inherit_track_caller (845,524 samples, 0.14%)</title><rect x="27.1330%" y="133" width="0.1427%" height="15" fill="rgb(229,88,8)"/><text x="27.3830%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,407,136 samples, 0.24%)</title><rect x="27.0423%" y="149" width="0.2374%" height="15" fill="rgb(213,181,19)"/><text x="27.2923%" y="159.50"></text></g><g><title>check_mod_attrs (2,748,064 samples, 0.46%)</title><rect x="26.8160%" y="165" width="0.4637%" height="15" fill="rgb(254,191,54)"/><text x="27.0660%" y="175.50"></text></g><g><title>check_mod_const_bodies (762,617 samples, 0.13%)</title><rect x="27.2797%" y="165" width="0.1287%" height="15" fill="rgb(241,83,37)"/><text x="27.5297%" y="175.50"></text></g><g><title>lint_levels (758,958 samples, 0.13%)</title><rect x="27.6195%" y="149" width="0.1281%" height="15" fill="rgb(233,36,39)"/><text x="27.8695%" y="159.50"></text></g><g><title>lookup_deprecation_entry (794,919 samples, 0.13%)</title><rect x="27.7475%" y="149" width="0.1341%" height="15" fill="rgb(226,3,54)"/><text x="27.9975%" y="159.50"></text></g><g><title>stability_index (651,037 samples, 0.11%)</title><rect x="27.7718%" y="133" width="0.1098%" height="15" fill="rgb(245,192,40)"/><text x="28.0218%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,549,316 samples, 0.43%)</title><rect x="27.4910%" y="165" width="0.4301%" height="15" fill="rgb(238,167,29)"/><text x="27.7410%" y="175.50"></text></g><g><title>misc_checking_1 (6,857,055 samples, 1.16%)</title><rect x="26.8055%" y="181" width="1.1569%" height="15" fill="rgb(232,182,51)"/><text x="27.0555%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,885,372 samples, 0.49%)</title><rect x="27.9627%" y="165" width="0.4868%" height="15" fill="rgb(231,60,39)"/><text x="28.2127%" y="175.50"></text></g><g><title>check_mod_liveness (2,311,737 samples, 0.39%)</title><rect x="28.0595%" y="149" width="0.3900%" height="15" fill="rgb(208,69,12)"/><text x="28.3095%" y="159.50"></text></g><g><title>misc_checking_2 (5,987,347 samples, 1.01%)</title><rect x="27.9624%" y="181" width="1.0102%" height="15" fill="rgb(235,93,37)"/><text x="28.2124%" y="191.50"></text></g><g><title>match_checking (3,100,245 samples, 0.52%)</title><rect x="28.4495%" y="165" width="0.5231%" height="15" fill="rgb(213,116,39)"/><text x="28.6995%" y="175.50"></text></g><g><title>check_match (2,856,654 samples, 0.48%)</title><rect x="28.4906%" y="149" width="0.4820%" height="15" fill="rgb(222,207,29)"/><text x="28.7406%" y="159.50"></text></g><g><title>check_private_in_public (1,229,833 samples, 0.21%)</title><rect x="28.9748%" y="165" width="0.2075%" height="15" fill="rgb(206,96,30)"/><text x="29.2248%" y="175.50"></text></g><g><title>death_checking (2,320,486 samples, 0.39%)</title><rect x="29.1823%" y="165" width="0.3915%" height="15" fill="rgb(218,138,4)"/><text x="29.4323%" y="175.50"></text></g><g><title>eval_to_const_value_raw (643,458 samples, 0.11%)</title><rect x="32.5379%" y="85" width="0.1086%" height="15" fill="rgb(250,191,14)"/><text x="32.7879%" y="95.50"></text></g><g><title>eval_to_const_value_raw (639,448 samples, 0.11%)</title><rect x="32.5386%" y="69" width="0.1079%" height="15" fill="rgb(239,60,40)"/><text x="32.7886%" y="79.50"></text></g><g><title>eval_to_allocation_raw (634,298 samples, 0.11%)</title><rect x="32.5395%" y="53" width="0.1070%" height="15" fill="rgb(206,27,48)"/><text x="32.7895%" y="63.50"></text></g><g><title>eval_to_allocation_raw (15,134,126 samples, 2.55%)</title><rect x="30.0938%" y="133" width="2.5534%" height="15" fill="rgb(225,35,8)"/><text x="30.3438%" y="143.50">ev..</text></g><g><title>eval_to_allocation_raw (15,112,526 samples, 2.55%)</title><rect x="30.0974%" y="117" width="2.5498%" height="15" fill="rgb(250,213,24)"/><text x="30.3474%" y="127.50">ev..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (674,578 samples, 0.11%)</title><rect x="32.5334%" y="101" width="0.1138%" height="15" fill="rgb(247,123,22)"/><text x="32.7834%" y="111.50"></text></g><g><title>param_env (1,187,924 samples, 0.20%)</title><rect x="32.7419%" y="133" width="0.2004%" height="15" fill="rgb(231,138,38)"/><text x="32.9919%" y="143.50"></text></g><g><title>crate_lints (21,248,504 samples, 3.59%)</title><rect x="29.5745%" y="149" width="3.5850%" height="15" fill="rgb(231,145,46)"/><text x="29.8245%" y="159.50">crat..</text></g><g><title>type_of (1,253,934 samples, 0.21%)</title><rect x="32.9479%" y="133" width="0.2116%" height="15" fill="rgb(251,118,11)"/><text x="33.1979%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,013,834 samples, 0.17%)</title><rect x="32.9884%" y="117" width="0.1711%" height="15" fill="rgb(217,147,25)"/><text x="33.2384%" y="127.50"></text></g><g><title>lint_checking (24,229,408 samples, 4.09%)</title><rect x="29.5738%" y="165" width="4.0880%" height="15" fill="rgb(247,81,37)"/><text x="29.8238%" y="175.50">lint..</text></g><g><title>module_lints (2,977,244 samples, 0.50%)</title><rect x="33.1595%" y="149" width="0.5023%" height="15" fill="rgb(209,12,38)"/><text x="33.4095%" y="159.50"></text></g><g><title>lint_mod (2,955,622 samples, 0.50%)</title><rect x="33.1631%" y="133" width="0.4987%" height="15" fill="rgb(227,1,9)"/><text x="33.4131%" y="143.50"></text></g><g><title>privacy_access_levels (2,371,226 samples, 0.40%)</title><rect x="33.6618%" y="165" width="0.4001%" height="15" fill="rgb(248,47,43)"/><text x="33.9118%" y="175.50"></text></g><g><title>privacy_checking_modules (5,297,158 samples, 0.89%)</title><rect x="34.0619%" y="165" width="0.8937%" height="15" fill="rgb(221,10,30)"/><text x="34.3119%" y="175.50"></text></g><g><title>check_mod_privacy (5,280,938 samples, 0.89%)</title><rect x="34.0646%" y="149" width="0.8910%" height="15" fill="rgb(210,229,1)"/><text x="34.3146%" y="159.50"></text></g><g><title>misc_checking_3 (35,534,203 samples, 6.00%)</title><rect x="28.9726%" y="181" width="5.9953%" height="15" fill="rgb(222,148,37)"/><text x="29.2226%" y="191.50">misc_che..</text></g><g><title>impl_parent (3,182,453 samples, 0.54%)</title><rect x="35.9472%" y="117" width="0.5369%" height="15" fill="rgb(234,67,33)"/><text x="36.1972%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,753,421 samples, 0.30%)</title><rect x="36.1883%" y="101" width="0.2958%" height="15" fill="rgb(247,98,35)"/><text x="36.4383%" y="111.50"></text></g><g><title>impl_trait_ref (6,559,356 samples, 1.11%)</title><rect x="36.4842%" y="117" width="1.1067%" height="15" fill="rgb(247,138,52)"/><text x="36.7342%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,118,103 samples, 0.86%)</title><rect x="36.7273%" y="101" width="0.8635%" height="15" fill="rgb(213,79,30)"/><text x="36.9773%" y="111.50"></text></g><g><title>trait_impls_of (1,364,557 samples, 0.23%)</title><rect x="37.6423%" y="117" width="0.2302%" height="15" fill="rgb(246,177,23)"/><text x="37.8923%" y="127.50"></text></g><g><title>coherent_trait (16,782,735 samples, 2.83%)</title><rect x="35.0478%" y="149" width="2.8316%" height="15" fill="rgb(230,62,27)"/><text x="35.2978%" y="159.50">co..</text></g><g><title>specialization_graph_of (16,725,394 samples, 2.82%)</title><rect x="35.0575%" y="133" width="2.8219%" height="15" fill="rgb(216,154,8)"/><text x="35.3075%" y="143.50">sp..</text></g><g><title>coherence_checking (17,186,519 samples, 2.90%)</title><rect x="35.0405%" y="165" width="2.8997%" height="15" fill="rgb(244,35,45)"/><text x="35.2905%" y="175.50">co..</text></g><g><title>associated_item (1,113,664 samples, 0.19%)</title><rect x="61.3183%" y="101" width="0.1879%" height="15" fill="rgb(251,115,12)"/><text x="61.5683%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (899,529 samples, 0.15%)</title><rect x="61.3544%" y="85" width="0.1518%" height="15" fill="rgb(240,54,50)"/><text x="61.6044%" y="95.50"></text></g><g><title>associated_items (1,641,459 samples, 0.28%)</title><rect x="61.2430%" y="117" width="0.2769%" height="15" fill="rgb(233,84,52)"/><text x="61.4930%" y="127.50"></text></g><g><title>adt_dtorck_constraint (618,374 samples, 0.10%)</title><rect x="61.7541%" y="101" width="0.1043%" height="15" fill="rgb(207,117,47)"/><text x="62.0041%" y="111.50"></text></g><g><title>dropck_outlives (1,917,526 samples, 0.32%)</title><rect x="61.5696%" y="117" width="0.3235%" height="15" fill="rgb(249,43,39)"/><text x="61.8196%" y="127.50"></text></g><g><title>generics_of (1,651,104 samples, 0.28%)</title><rect x="63.8599%" y="101" width="0.2786%" height="15" fill="rgb(209,38,44)"/><text x="64.1099%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,246,790 samples, 0.21%)</title><rect x="63.9282%" y="85" width="0.2104%" height="15" fill="rgb(236,212,23)"/><text x="64.1782%" y="95.50"></text></g><g><title>impl_trait_ref (1,738,998 samples, 0.29%)</title><rect x="64.1938%" y="101" width="0.2934%" height="15" fill="rgb(242,79,21)"/><text x="64.4438%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,233,204 samples, 0.21%)</title><rect x="64.2791%" y="85" width="0.2081%" height="15" fill="rgb(211,96,35)"/><text x="64.5291%" y="95.50"></text></g><g><title>predicates_of (1,644,690 samples, 0.28%)</title><rect x="64.5008%" y="101" width="0.2775%" height="15" fill="rgb(253,215,40)"/><text x="64.7508%" y="111.50"></text></g><g><title>predicates_defined_on (949,630 samples, 0.16%)</title><rect x="64.6181%" y="85" width="0.1602%" height="15" fill="rgb(211,81,21)"/><text x="64.8681%" y="95.50"></text></g><g><title>specializes (2,848,376 samples, 0.48%)</title><rect x="64.7783%" y="101" width="0.4806%" height="15" fill="rgb(208,190,38)"/><text x="65.0283%" y="111.50"></text></g><g><title>param_env (1,706,017 samples, 0.29%)</title><rect x="64.9711%" y="85" width="0.2878%" height="15" fill="rgb(235,213,38)"/><text x="65.2211%" y="95.50"></text></g><g><title>def_span (701,494 samples, 0.12%)</title><rect x="65.1406%" y="69" width="0.1184%" height="15" fill="rgb(237,122,38)"/><text x="65.3906%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (610,953 samples, 0.10%)</title><rect x="65.1558%" y="53" width="0.1031%" height="15" fill="rgb(244,218,35)"/><text x="65.4058%" y="63.50"></text></g><g><title>trait_impls_of (666,659 samples, 0.11%)</title><rect x="65.2638%" y="101" width="0.1125%" height="15" fill="rgb(240,68,47)"/><text x="65.5138%" y="111.50"></text></g><g><title>evaluate_obligation (20,692,444 samples, 3.49%)</title><rect x="61.8932%" y="117" width="3.4912%" height="15" fill="rgb(210,16,53)"/><text x="62.1432%" y="127.50">eva..</text></g><g><title>generics_of (1,719,081 samples, 0.29%)</title><rect x="65.4691%" y="117" width="0.2900%" height="15" fill="rgb(235,124,12)"/><text x="65.7191%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,201,168 samples, 0.20%)</title><rect x="65.5565%" y="101" width="0.2027%" height="15" fill="rgb(224,169,11)"/><text x="65.8065%" y="111.50"></text></g><g><title>impl_trait_ref (669,716 samples, 0.11%)</title><rect x="65.8281%" y="117" width="0.1130%" height="15" fill="rgb(250,166,2)"/><text x="66.0781%" y="127.50"></text></g><g><title>evaluate_obligation (992,058 samples, 0.17%)</title><rect x="66.3142%" y="101" width="0.1674%" height="15" fill="rgb(242,216,29)"/><text x="66.5642%" y="111.50"></text></g><g><title>method_autoderef_steps (2,358,938 samples, 0.40%)</title><rect x="66.0877%" y="117" width="0.3980%" height="15" fill="rgb(230,116,27)"/><text x="66.3377%" y="127.50"></text></g><g><title>predicates_of (1,406,573 samples, 0.24%)</title><rect x="66.6045%" y="117" width="0.2373%" height="15" fill="rgb(228,99,48)"/><text x="66.8545%" y="127.50"></text></g><g><title>predicates_defined_on (1,048,810 samples, 0.18%)</title><rect x="66.6648%" y="101" width="0.1770%" height="15" fill="rgb(253,11,6)"/><text x="66.9148%" y="111.50"></text></g><g><title>evaluate_obligation (1,394,555 samples, 0.24%)</title><rect x="68.9061%" y="101" width="0.2353%" height="15" fill="rgb(247,143,39)"/><text x="69.1561%" y="111.50"></text></g><g><title>typeck (13,859,363 samples, 2.34%)</title><rect x="66.9323%" y="117" width="2.3383%" height="15" fill="rgb(236,97,10)"/><text x="67.1823%" y="127.50">t..</text></g><g><title>item_bodies_checking (185,793,603 samples, 31.35%)</title><rect x="37.9762%" y="165" width="31.3469%" height="15" fill="rgb(233,208,19)"/><text x="38.2262%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (185,789,613 samples, 31.35%)</title><rect x="37.9768%" y="149" width="31.3462%" height="15" fill="rgb(216,164,2)"/><text x="38.2268%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (184,808,667 samples, 31.18%)</title><rect x="38.1423%" y="133" width="31.1807%" height="15" fill="rgb(220,129,5)"/><text x="38.3923%" y="143.50">typeck</text></g><g><title>evaluate_obligation (1,785,581 samples, 0.30%)</title><rect x="71.3105%" y="117" width="0.3013%" height="15" fill="rgb(242,17,10)"/><text x="71.5605%" y="127.50"></text></g><g><title>item_types_checking (13,758,092 samples, 2.32%)</title><rect x="69.3231%" y="165" width="2.3213%" height="15" fill="rgb(242,107,0)"/><text x="69.5731%" y="175.50">i..</text></g><g><title>check_mod_item_types (13,732,502 samples, 2.32%)</title><rect x="69.3274%" y="149" width="2.3169%" height="15" fill="rgb(251,28,31)"/><text x="69.5774%" y="159.50">c..</text></g><g><title>typeck (5,190,923 samples, 0.88%)</title><rect x="70.7685%" y="133" width="0.8758%" height="15" fill="rgb(233,223,10)"/><text x="71.0185%" y="143.50"></text></g><g><title>fn_sig (1,465,522 samples, 0.25%)</title><rect x="71.9225%" y="133" width="0.2473%" height="15" fill="rgb(215,21,27)"/><text x="72.1725%" y="143.50"></text></g><g><title>is_late_bound_map (1,797,361 samples, 0.30%)</title><rect x="72.2973%" y="117" width="0.3032%" height="15" fill="rgb(232,23,21)"/><text x="72.5473%" y="127.50"></text></g><g><title>resolve_lifetimes (1,633,880 samples, 0.28%)</title><rect x="72.3248%" y="101" width="0.2757%" height="15" fill="rgb(244,5,23)"/><text x="72.5748%" y="111.50"></text></g><g><title>named_region_map (1,234,644 samples, 0.21%)</title><rect x="72.6005%" y="117" width="0.2083%" height="15" fill="rgb(226,81,46)"/><text x="72.8505%" y="127.50"></text></g><g><title>resolve_lifetimes (1,102,374 samples, 0.19%)</title><rect x="72.6228%" y="101" width="0.1860%" height="15" fill="rgb(247,70,30)"/><text x="72.8728%" y="111.50"></text></g><g><title>generics_of (3,873,125 samples, 0.65%)</title><rect x="72.1698%" y="133" width="0.6535%" height="15" fill="rgb(212,68,19)"/><text x="72.4198%" y="143.50"></text></g><g><title>explicit_predicates_of (1,055,744 samples, 0.18%)</title><rect x="73.0744%" y="101" width="0.1781%" height="15" fill="rgb(240,187,13)"/><text x="73.3244%" y="111.50"></text></g><g><title>predicates_of (2,967,784 samples, 0.50%)</title><rect x="72.8846%" y="133" width="0.5007%" height="15" fill="rgb(223,113,26)"/><text x="73.1346%" y="143.50"></text></g><g><title>predicates_defined_on (2,625,678 samples, 0.44%)</title><rect x="72.9423%" y="117" width="0.4430%" height="15" fill="rgb(206,192,2)"/><text x="73.1923%" y="127.50"></text></g><g><title>inferred_outlives_of (786,759 samples, 0.13%)</title><rect x="73.2526%" y="101" width="0.1327%" height="15" fill="rgb(241,108,4)"/><text x="73.5026%" y="111.50"></text></g><g><title>inferred_outlives_crate (678,908 samples, 0.11%)</title><rect x="73.2708%" y="85" width="0.1145%" height="15" fill="rgb(247,173,49)"/><text x="73.5208%" y="95.50"></text></g><g><title>type_collecting (11,110,243 samples, 1.87%)</title><rect x="71.6459%" y="165" width="1.8745%" height="15" fill="rgb(224,114,35)"/><text x="71.8959%" y="175.50">t..</text></g><g><title>collect_mod_item_types (11,075,283 samples, 1.87%)</title><rect x="71.6518%" y="149" width="1.8686%" height="15" fill="rgb(245,159,27)"/><text x="71.9018%" y="159.50">c..</text></g><g><title>type_of (744,944 samples, 0.13%)</title><rect x="73.3947%" y="133" width="0.1257%" height="15" fill="rgb(245,172,44)"/><text x="73.6447%" y="143.50"></text></g><g><title>evaluate_obligation (1,780,921 samples, 0.30%)</title><rect x="75.2681%" y="133" width="0.3005%" height="15" fill="rgb(236,23,11)"/><text x="75.5181%" y="143.50"></text></g><g><title>implied_outlives_bounds (719,990 samples, 0.12%)</title><rect x="75.5686%" y="133" width="0.1215%" height="15" fill="rgb(205,117,38)"/><text x="75.8186%" y="143.50"></text></g><g><title>param_env (1,329,875 samples, 0.22%)</title><rect x="75.6900%" y="133" width="0.2244%" height="15" fill="rgb(237,72,25)"/><text x="75.9400%" y="143.50"></text></g><g><title>region_scope_tree (1,568,741 samples, 0.26%)</title><rect x="75.9220%" y="133" width="0.2647%" height="15" fill="rgb(244,70,9)"/><text x="76.1720%" y="143.50"></text></g><g><title>check_impl_item_well_formed (14,379,586 samples, 2.43%)</title><rect x="73.7635%" y="149" width="2.4261%" height="15" fill="rgb(217,125,39)"/><text x="74.0135%" y="159.50">ch..</text></g><g><title>adt_def (1,109,902 samples, 0.19%)</title><rect x="77.8016%" y="85" width="0.1873%" height="15" fill="rgb(235,36,10)"/><text x="78.0516%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (1,109,272 samples, 0.19%)</title><rect x="77.8017%" y="69" width="0.1872%" height="15" fill="rgb(251,123,47)"/><text x="78.0517%" y="79.50"></text></g><g><title>item_attrs (1,102,582 samples, 0.19%)</title><rect x="77.8028%" y="53" width="0.1860%" height="15" fill="rgb(221,13,13)"/><text x="78.0528%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,101,642 samples, 0.19%)</title><rect x="77.8030%" y="37" width="0.1859%" height="15" fill="rgb(238,131,9)"/><text x="78.0530%" y="47.50"></text></g><g><title>adt_sized_constraint (1,197,413 samples, 0.20%)</title><rect x="77.8011%" y="101" width="0.2020%" height="15" fill="rgb(211,50,8)"/><text x="78.0511%" y="111.50"></text></g><g><title>adt_sized_constraint (1,243,553 samples, 0.21%)</title><rect x="77.7947%" y="117" width="0.2098%" height="15" fill="rgb(245,182,24)"/><text x="78.0447%" y="127.50"></text></g><g><title>adt_sized_constraint (1,310,395 samples, 0.22%)</title><rect x="77.7845%" y="133" width="0.2211%" height="15" fill="rgb(242,14,37)"/><text x="78.0345%" y="143.50"></text></g><g><title>evaluate_obligation (1,956,839 samples, 0.33%)</title><rect x="78.0126%" y="133" width="0.3302%" height="15" fill="rgb(246,228,12)"/><text x="78.2626%" y="143.50"></text></g><g><title>param_env (1,676,731 samples, 0.28%)</title><rect x="78.4351%" y="133" width="0.2829%" height="15" fill="rgb(213,55,15)"/><text x="78.6851%" y="143.50"></text></g><g><title>region_scope_tree (804,662 samples, 0.14%)</title><rect x="78.7503%" y="133" width="0.1358%" height="15" fill="rgb(209,9,3)"/><text x="79.0003%" y="143.50"></text></g><g><title>check_item_well_formed (16,502,193 samples, 2.78%)</title><rect x="76.1896%" y="149" width="2.7842%" height="15" fill="rgb(230,59,30)"/><text x="76.4396%" y="159.50">ch..</text></g><g><title>evaluate_obligation (824,952 samples, 0.14%)</title><rect x="79.6345%" y="133" width="0.1392%" height="15" fill="rgb(209,121,21)"/><text x="79.8845%" y="143.50"></text></g><g><title>param_env (783,509 samples, 0.13%)</title><rect x="79.8468%" y="133" width="0.1322%" height="15" fill="rgb(220,109,13)"/><text x="80.0968%" y="143.50"></text></g><g><title>analysis (473,100,197 samples, 79.82%)</title><rect x="0.2576%" y="197" width="79.8210%" height="15" fill="rgb(232,18,1)"/><text x="0.5076%" y="207.50">analysis</text></g><g><title>type_check_crate (267,371,944 samples, 45.11%)</title><rect x="34.9679%" y="181" width="45.1107%" height="15" fill="rgb(215,41,42)"/><text x="35.2179%" y="191.50">type_check_crate</text></g><g><title>wf_checking (38,820,838 samples, 6.55%)</title><rect x="73.5288%" y="165" width="6.5498%" height="15" fill="rgb(224,123,36)"/><text x="73.7788%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (6,547,624 samples, 1.10%)</title><rect x="78.9739%" y="149" width="1.1047%" height="15" fill="rgb(240,125,3)"/><text x="79.2239%" y="159.50"></text></g><g><title>AST_validation (771,269 samples, 0.13%)</title><rect x="80.1726%" y="181" width="0.1301%" height="15" fill="rgb(205,98,50)"/><text x="80.4226%" y="191.50"></text></g><g><title>metadata_register_crate (1,303,424 samples, 0.22%)</title><rect x="90.5943%" y="149" width="0.2199%" height="15" fill="rgb(205,185,37)"/><text x="90.8443%" y="159.50"></text></g><g><title>macro_expand_crate (62,989,656 samples, 10.63%)</title><rect x="80.3730%" y="181" width="10.6275%" height="15" fill="rgb(238,207,15)"/><text x="80.6230%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (62,977,936 samples, 10.63%)</title><rect x="80.3750%" y="165" width="10.6256%" height="15" fill="rgb(213,199,42)"/><text x="80.6250%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,104,693 samples, 0.19%)</title><rect x="90.8142%" y="149" width="0.1864%" height="15" fill="rgb(235,201,11)"/><text x="91.0642%" y="159.50"></text></g><g><title>late_resolve_crate (8,917,948 samples, 1.50%)</title><rect x="91.1529%" y="165" width="1.5046%" height="15" fill="rgb(207,46,11)"/><text x="91.4029%" y="175.50"></text></g><g><title>configure_and_expand (74,943,219 samples, 12.64%)</title><rect x="80.1498%" y="197" width="12.6443%" height="15" fill="rgb(241,35,35)"/><text x="80.3998%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (10,582,137 samples, 1.79%)</title><rect x="91.0087%" y="181" width="1.7854%" height="15" fill="rgb(243,32,47)"/><text x="91.2587%" y="191.50">r..</text></g><g><title>drop_ast (1,669,709 samples, 0.28%)</title><rect x="92.7942%" y="197" width="0.2817%" height="15" fill="rgb(247,202,23)"/><text x="93.0442%" y="207.50"></text></g><g><title>early_lint_checks (2,623,619 samples, 0.44%)</title><rect x="93.0791%" y="197" width="0.4427%" height="15" fill="rgb(219,102,11)"/><text x="93.3291%" y="207.50"></text></g><g><title>free_global_ctxt (7,269,960 samples, 1.23%)</title><rect x="93.5218%" y="197" width="1.2266%" height="15" fill="rgb(243,110,44)"/><text x="93.7718%" y="207.50"></text></g><g><title>generate_crate_metadata (8,174,331 samples, 1.38%)</title><rect x="94.7484%" y="197" width="1.3792%" height="15" fill="rgb(222,74,54)"/><text x="94.9984%" y="207.50"></text></g><g><title>hir_lowering (18,368,972 samples, 3.10%)</title><rect x="96.1275%" y="197" width="3.0992%" height="15" fill="rgb(216,99,12)"/><text x="96.3775%" y="207.50">hir..</text></g><g><title>self_profile_alloc_query_strings (2,535,077 samples, 0.43%)</title><rect x="99.3846%" y="197" width="0.4277%" height="15" fill="rgb(226,22,26)"/><text x="99.6346%" y="207.50"></text></g><g><title>all (592,701,678 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (592,701,678 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (1,011,851 samples, 0.17%)</title><rect x="99.8293%" y="197" width="0.1707%" height="15" fill="rgb(252,105,26)"/><text x="100.0793%" y="207.50"></text></g></svg></svg>