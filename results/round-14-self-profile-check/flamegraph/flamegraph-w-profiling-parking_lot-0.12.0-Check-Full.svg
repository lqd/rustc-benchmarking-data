<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (474,284 samples, 0.27%)</title><rect x="13.8306%" y="133" width="0.2715%" height="15" fill="rgb(227,0,7)"/><text x="14.0806%" y="143.50"></text></g><g><title>is_late_bound_map (199,591 samples, 0.11%)</title><rect x="14.1021%" y="133" width="0.1142%" height="15" fill="rgb(217,0,24)"/><text x="14.3521%" y="143.50"></text></g><g><title>param_env (515,634 samples, 0.30%)</title><rect x="16.2980%" y="101" width="0.2951%" height="15" fill="rgb(221,193,54)"/><text x="16.5480%" y="111.50"></text></g><g><title>item_attrs (466,923 samples, 0.27%)</title><rect x="17.2160%" y="69" width="0.2673%" height="15" fill="rgb(248,212,6)"/><text x="17.4660%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (451,643 samples, 0.26%)</title><rect x="17.2248%" y="53" width="0.2585%" height="15" fill="rgb(208,68,35)"/><text x="17.4748%" y="63.50"></text></g><g><title>codegen_fn_attrs (620,765 samples, 0.36%)</title><rect x="17.1393%" y="85" width="0.3553%" height="15" fill="rgb(232,128,0)"/><text x="17.3893%" y="95.50"></text></g><g><title>needs_drop_raw (880,851 samples, 0.50%)</title><rect x="21.0194%" y="69" width="0.5042%" height="15" fill="rgb(207,160,47)"/><text x="21.2694%" y="79.50"></text></g><g><title>is_copy_raw (736,179 samples, 0.42%)</title><rect x="21.1022%" y="53" width="0.4214%" height="15" fill="rgb(228,23,34)"/><text x="21.3522%" y="63.50"></text></g><g><title>evaluate_obligation (588,257 samples, 0.34%)</title><rect x="21.1868%" y="37" width="0.3367%" height="15" fill="rgb(218,30,26)"/><text x="21.4368%" y="47.50"></text></g><g><title>resolve_instance (414,856 samples, 0.24%)</title><rect x="21.5236%" y="69" width="0.2375%" height="15" fill="rgb(220,122,19)"/><text x="21.7736%" y="79.50"></text></g><g><title>thir_body (2,644,449 samples, 1.51%)</title><rect x="21.8186%" y="69" width="1.5137%" height="15" fill="rgb(250,228,42)"/><text x="22.0686%" y="79.50"></text></g><g><title>mir_const (14,177,559 samples, 8.12%)</title><rect x="15.2457%" y="117" width="8.1152%" height="15" fill="rgb(240,193,28)"/><text x="15.4957%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (11,823,440 samples, 6.77%)</title><rect x="16.5932%" y="101" width="6.7677%" height="15" fill="rgb(216,20,37)"/><text x="16.8432%" y="111.50">unsafety_..</text></g><g><title>mir_built (10,248,552 samples, 5.87%)</title><rect x="17.4946%" y="85" width="5.8663%" height="15" fill="rgb(206,188,39)"/><text x="17.7446%" y="95.50">mir_bui..</text></g><g><title>is_freeze_raw (199,942 samples, 0.11%)</title><rect x="23.8123%" y="101" width="0.1144%" height="15" fill="rgb(217,207,13)"/><text x="24.0623%" y="111.50"></text></g><g><title>evaluate_obligation (177,252 samples, 0.10%)</title><rect x="23.8252%" y="85" width="0.1015%" height="15" fill="rgb(231,73,38)"/><text x="24.0752%" y="95.50"></text></g><g><title>mir_const (887,011 samples, 0.51%)</title><rect x="23.9387%" y="101" width="0.5077%" height="15" fill="rgb(225,20,46)"/><text x="24.1887%" y="111.50"></text></g><g><title>unsafety_check_result (623,857 samples, 0.36%)</title><rect x="24.0893%" y="85" width="0.3571%" height="15" fill="rgb(210,31,41)"/><text x="24.3393%" y="95.50"></text></g><g><title>mir_built (493,895 samples, 0.28%)</title><rect x="24.1637%" y="69" width="0.2827%" height="15" fill="rgb(221,200,47)"/><text x="24.4137%" y="79.50"></text></g><g><title>mir_const_qualif (2,065,882 samples, 1.18%)</title><rect x="23.3609%" y="117" width="1.1825%" height="15" fill="rgb(226,26,5)"/><text x="23.6109%" y="127.50"></text></g><g><title>mir_promoted (18,027,653 samples, 10.32%)</title><rect x="14.2245%" y="133" width="10.3190%" height="15" fill="rgb(249,33,26)"/><text x="14.4745%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (452,518 samples, 0.26%)</title><rect x="24.5442%" y="133" width="0.2590%" height="15" fill="rgb(235,183,28)"/><text x="24.7942%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (178,801 samples, 0.10%)</title><rect x="24.8033%" y="133" width="0.1023%" height="15" fill="rgb(221,5,38)"/><text x="25.0533%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,812,614 samples, 1.61%)</title><rect x="24.9458%" y="133" width="1.6099%" height="15" fill="rgb(247,18,42)"/><text x="25.1958%" y="143.50"></text></g><g><title>MIR_borrow_checking (45,240,877 samples, 25.90%)</title><rect x="0.6636%" y="165" width="25.8959%" height="15" fill="rgb(241,131,45)"/><text x="0.9136%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (44,701,181 samples, 25.59%)</title><rect x="0.9725%" y="149" width="25.5869%" height="15" fill="rgb(249,31,29)"/><text x="1.2225%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (704,538 samples, 0.40%)</title><rect x="26.5594%" y="165" width="0.4033%" height="15" fill="rgb(225,111,53)"/><text x="26.8094%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (417,314 samples, 0.24%)</title><rect x="26.7238%" y="149" width="0.2389%" height="15" fill="rgb(238,160,17)"/><text x="26.9738%" y="159.50"></text></g><g><title>hir_module_items (346,895 samples, 0.20%)</title><rect x="26.9627%" y="165" width="0.1986%" height="15" fill="rgb(214,148,48)"/><text x="27.2127%" y="175.50"></text></g><g><title>codegen_fn_attrs (339,703 samples, 0.19%)</title><rect x="27.5898%" y="101" width="0.1944%" height="15" fill="rgb(232,36,49)"/><text x="27.8398%" y="111.50"></text></g><g><title>codegen_fn_attrs (631,807 samples, 0.36%)</title><rect x="27.4326%" y="133" width="0.3616%" height="15" fill="rgb(209,103,24)"/><text x="27.6826%" y="143.50"></text></g><g><title>should_inherit_track_caller (529,644 samples, 0.30%)</title><rect x="27.4910%" y="117" width="0.3032%" height="15" fill="rgb(229,88,8)"/><text x="27.7410%" y="127.50"></text></g><g><title>check_mod_attrs (1,071,620 samples, 0.61%)</title><rect x="27.1809%" y="149" width="0.6134%" height="15" fill="rgb(213,181,19)"/><text x="27.4309%" y="159.50"></text></g><g><title>check_mod_const_bodies (230,423 samples, 0.13%)</title><rect x="27.7943%" y="149" width="0.1319%" height="15" fill="rgb(254,191,54)"/><text x="28.0443%" y="159.50"></text></g><g><title>lookup_deprecation_entry (266,294 samples, 0.15%)</title><rect x="28.1751%" y="133" width="0.1524%" height="15" fill="rgb(241,83,37)"/><text x="28.4251%" y="143.50"></text></g><g><title>stability_index (178,212 samples, 0.10%)</title><rect x="28.2255%" y="117" width="0.1020%" height="15" fill="rgb(233,36,39)"/><text x="28.4755%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (660,569 samples, 0.38%)</title><rect x="28.0102%" y="149" width="0.3781%" height="15" fill="rgb(226,3,54)"/><text x="28.2602%" y="159.50"></text></g><g><title>misc_checking_1 (2,248,665 samples, 1.29%)</title><rect x="27.1615%" y="165" width="1.2871%" height="15" fill="rgb(245,192,40)"/><text x="27.4115%" y="175.50"></text></g><g><title>check_mod_intrinsics (184,182 samples, 0.11%)</title><rect x="28.4575%" y="133" width="0.1054%" height="15" fill="rgb(238,167,29)"/><text x="28.7075%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (968,900 samples, 0.55%)</title><rect x="28.4497%" y="149" width="0.5546%" height="15" fill="rgb(232,182,51)"/><text x="28.6997%" y="159.50"></text></g><g><title>check_mod_liveness (771,048 samples, 0.44%)</title><rect x="28.5629%" y="133" width="0.4413%" height="15" fill="rgb(231,60,39)"/><text x="28.8129%" y="143.50"></text></g><g><title>mir_borrowck (356,344 samples, 0.20%)</title><rect x="29.7665%" y="37" width="0.2040%" height="15" fill="rgb(208,69,12)"/><text x="30.0165%" y="47.50"></text></g><g><title>eval_to_const_value_raw (682,947 samples, 0.39%)</title><rect x="29.5798%" y="117" width="0.3909%" height="15" fill="rgb(235,93,37)"/><text x="29.8298%" y="127.50"></text></g><g><title>eval_to_const_value_raw (680,387 samples, 0.39%)</title><rect x="29.5813%" y="101" width="0.3895%" height="15" fill="rgb(213,116,39)"/><text x="29.8313%" y="111.50"></text></g><g><title>eval_to_allocation_raw (674,277 samples, 0.39%)</title><rect x="29.5848%" y="85" width="0.3860%" height="15" fill="rgb(222,207,29)"/><text x="29.8348%" y="95.50"></text></g><g><title>mir_for_ctfe (492,305 samples, 0.28%)</title><rect x="29.6890%" y="69" width="0.2818%" height="15" fill="rgb(206,96,30)"/><text x="29.9390%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (451,745 samples, 0.26%)</title><rect x="29.7122%" y="53" width="0.2586%" height="15" fill="rgb(218,138,4)"/><text x="29.9622%" y="63.50"></text></g><g><title>mir_const_qualif (320,014 samples, 0.18%)</title><rect x="29.9937%" y="117" width="0.1832%" height="15" fill="rgb(250,191,14)"/><text x="30.2437%" y="127.50"></text></g><g><title>param_env (191,484 samples, 0.11%)</title><rect x="30.1790%" y="117" width="0.1096%" height="15" fill="rgb(239,60,40)"/><text x="30.4290%" y="127.50"></text></g><g><title>misc_checking_2 (3,222,326 samples, 1.84%)</title><rect x="28.4486%" y="165" width="1.8445%" height="15" fill="rgb(206,27,48)"/><text x="28.6986%" y="175.50">m..</text></g><g><title>match_checking (2,251,596 samples, 1.29%)</title><rect x="29.0043%" y="149" width="1.2888%" height="15" fill="rgb(225,35,8)"/><text x="29.2543%" y="159.50"></text></g><g><title>check_match (2,176,456 samples, 1.25%)</title><rect x="29.0473%" y="133" width="1.2458%" height="15" fill="rgb(250,213,24)"/><text x="29.2973%" y="143.50"></text></g><g><title>check_private_in_public (423,615 samples, 0.24%)</title><rect x="30.2988%" y="149" width="0.2425%" height="15" fill="rgb(247,123,22)"/><text x="30.5488%" y="159.50"></text></g><g><title>death_checking (885,049 samples, 0.51%)</title><rect x="30.5413%" y="149" width="0.5066%" height="15" fill="rgb(231,138,38)"/><text x="30.7913%" y="159.50"></text></g><g><title>eval_to_allocation_raw (294,933 samples, 0.17%)</title><rect x="31.7317%" y="117" width="0.1688%" height="15" fill="rgb(231,145,46)"/><text x="31.9817%" y="127.50"></text></g><g><title>eval_to_allocation_raw (294,083 samples, 0.17%)</title><rect x="31.7322%" y="101" width="0.1683%" height="15" fill="rgb(251,118,11)"/><text x="31.9822%" y="111.50"></text></g><g><title>eval_to_const_value_raw (459,885 samples, 0.26%)</title><rect x="31.9005%" y="117" width="0.2632%" height="15" fill="rgb(217,147,25)"/><text x="32.1505%" y="127.50"></text></g><g><title>eval_to_const_value_raw (448,285 samples, 0.26%)</title><rect x="31.9072%" y="101" width="0.2566%" height="15" fill="rgb(247,81,37)"/><text x="32.1572%" y="111.50"></text></g><g><title>eval_to_allocation_raw (426,305 samples, 0.24%)</title><rect x="31.9198%" y="85" width="0.2440%" height="15" fill="rgb(209,12,38)"/><text x="32.1698%" y="95.50"></text></g><g><title>param_env (764,409 samples, 0.44%)</title><rect x="32.1638%" y="117" width="0.4375%" height="15" fill="rgb(227,1,9)"/><text x="32.4138%" y="127.50"></text></g><g><title>predicates_of (301,734 samples, 0.17%)</title><rect x="32.4286%" y="101" width="0.1727%" height="15" fill="rgb(248,47,43)"/><text x="32.6786%" y="111.50"></text></g><g><title>predicates_defined_on (241,453 samples, 0.14%)</title><rect x="32.4631%" y="85" width="0.1382%" height="15" fill="rgb(221,10,30)"/><text x="32.7131%" y="95.50"></text></g><g><title>crate_lints (3,854,463 samples, 2.21%)</title><rect x="31.0490%" y="133" width="2.2063%" height="15" fill="rgb(210,229,1)"/><text x="31.2990%" y="143.50">c..</text></g><g><title>type_of (1,128,964 samples, 0.65%)</title><rect x="32.6091%" y="117" width="0.6462%" height="15" fill="rgb(222,148,37)"/><text x="32.8591%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (893,991 samples, 0.51%)</title><rect x="32.7435%" y="101" width="0.5117%" height="15" fill="rgb(234,67,33)"/><text x="32.9935%" y="111.50"></text></g><g><title>lint_checking (4,716,613 samples, 2.70%)</title><rect x="31.0479%" y="149" width="2.6998%" height="15" fill="rgb(247,98,35)"/><text x="31.2979%" y="159.50">li..</text></g><g><title>module_lints (860,220 samples, 0.49%)</title><rect x="33.2553%" y="133" width="0.4924%" height="15" fill="rgb(247,138,52)"/><text x="33.5053%" y="143.50"></text></g><g><title>lint_mod (849,209 samples, 0.49%)</title><rect x="33.2616%" y="117" width="0.4861%" height="15" fill="rgb(213,79,30)"/><text x="33.5116%" y="127.50"></text></g><g><title>privacy_access_levels (479,226 samples, 0.27%)</title><rect x="33.7477%" y="149" width="0.2743%" height="15" fill="rgb(246,177,23)"/><text x="33.9977%" y="159.50"></text></g><g><title>privacy_checking_modules (1,366,095 samples, 0.78%)</title><rect x="34.0220%" y="149" width="0.7820%" height="15" fill="rgb(230,62,27)"/><text x="34.2720%" y="159.50"></text></g><g><title>check_mod_privacy (1,358,285 samples, 0.78%)</title><rect x="34.0264%" y="133" width="0.7775%" height="15" fill="rgb(216,154,8)"/><text x="34.2764%" y="143.50"></text></g><g><title>misc_checking_3 (7,901,129 samples, 4.52%)</title><rect x="30.2931%" y="165" width="4.5226%" height="15" fill="rgb(244,35,45)"/><text x="30.5431%" y="175.50">misc_..</text></g><g><title>impl_trait_ref (206,621 samples, 0.12%)</title><rect x="35.0427%" y="69" width="0.1183%" height="15" fill="rgb(251,115,12)"/><text x="35.2927%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (185,111 samples, 0.11%)</title><rect x="35.0550%" y="53" width="0.1060%" height="15" fill="rgb(240,54,50)"/><text x="35.3050%" y="63.50"></text></g><g><title>adt_destructor (400,815 samples, 0.23%)</title><rect x="34.9508%" y="117" width="0.2294%" height="15" fill="rgb(233,84,52)"/><text x="35.2008%" y="127.50"></text></g><g><title>coherent_trait (392,565 samples, 0.22%)</title><rect x="34.9555%" y="101" width="0.2247%" height="15" fill="rgb(207,117,47)"/><text x="35.2055%" y="111.50"></text></g><g><title>specialization_graph_of (390,605 samples, 0.22%)</title><rect x="34.9566%" y="85" width="0.2236%" height="15" fill="rgb(249,43,39)"/><text x="35.2066%" y="95.50"></text></g><g><title>impl_parent (2,438,657 samples, 1.40%)</title><rect x="37.7262%" y="101" width="1.3959%" height="15" fill="rgb(209,38,44)"/><text x="37.9762%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,430,547 samples, 0.82%)</title><rect x="38.3032%" y="85" width="0.8188%" height="15" fill="rgb(236,212,23)"/><text x="38.5532%" y="95.50"></text></g><g><title>impl_trait_ref (5,181,124 samples, 2.97%)</title><rect x="39.1220%" y="101" width="2.9657%" height="15" fill="rgb(242,79,21)"/><text x="39.3720%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,169,023 samples, 2.39%)</title><rect x="39.7014%" y="85" width="2.3863%" height="15" fill="rgb(211,96,35)"/><text x="39.9514%" y="95.50">me..</text></g><g><title>coherent_trait (13,528,031 samples, 7.74%)</title><rect x="34.9208%" y="133" width="7.7434%" height="15" fill="rgb(253,215,40)"/><text x="35.1708%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (12,858,774 samples, 7.36%)</title><rect x="35.3039%" y="117" width="7.3604%" height="15" fill="rgb(211,81,21)"/><text x="35.5539%" y="127.50">specializa..</text></g><g><title>trait_impls_of (1,005,462 samples, 0.58%)</title><rect x="42.0887%" y="101" width="0.5755%" height="15" fill="rgb(208,190,38)"/><text x="42.3387%" y="111.50"></text></g><g><title>implementations_of_trait (316,545 samples, 0.18%)</title><rect x="42.4831%" y="85" width="0.1812%" height="15" fill="rgb(235,213,38)"/><text x="42.7331%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (207,344 samples, 0.12%)</title><rect x="42.5456%" y="69" width="0.1187%" height="15" fill="rgb(237,122,38)"/><text x="42.7956%" y="79.50"></text></g><g><title>coherence_checking (13,638,443 samples, 7.81%)</title><rect x="34.9037%" y="149" width="7.8066%" height="15" fill="rgb(244,218,35)"/><text x="35.1537%" y="159.50">coherence_c..</text></g><g><title>associated_item (332,014 samples, 0.19%)</title><rect x="53.3733%" y="85" width="0.1900%" height="15" fill="rgb(240,68,47)"/><text x="53.6233%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (267,392 samples, 0.15%)</title><rect x="53.4103%" y="69" width="0.1531%" height="15" fill="rgb(210,16,53)"/><text x="53.6603%" y="79.50"></text></g><g><title>associated_items (470,097 samples, 0.27%)</title><rect x="53.3080%" y="101" width="0.2691%" height="15" fill="rgb(235,124,12)"/><text x="53.5580%" y="111.50"></text></g><g><title>dropck_outlives (233,392 samples, 0.13%)</title><rect x="53.6126%" y="101" width="0.1336%" height="15" fill="rgb(224,169,11)"/><text x="53.8626%" y="111.50"></text></g><g><title>evaluate_obligation (602,784 samples, 0.35%)</title><rect x="53.7462%" y="101" width="0.3450%" height="15" fill="rgb(250,166,2)"/><text x="53.9962%" y="111.50"></text></g><g><title>method_autoderef_steps (226,865 samples, 0.13%)</title><rect x="54.3753%" y="101" width="0.1299%" height="15" fill="rgb(242,216,29)"/><text x="54.6253%" y="111.50"></text></g><g><title>predicates_of (252,752 samples, 0.14%)</title><rect x="54.6047%" y="101" width="0.1447%" height="15" fill="rgb(230,116,27)"/><text x="54.8547%" y="111.50"></text></g><g><title>predicates_defined_on (182,452 samples, 0.10%)</title><rect x="54.6450%" y="85" width="0.1044%" height="15" fill="rgb(228,99,48)"/><text x="54.8950%" y="95.50"></text></g><g><title>associated_items (239,792 samples, 0.14%)</title><rect x="63.9882%" y="85" width="0.1373%" height="15" fill="rgb(253,11,6)"/><text x="64.2382%" y="95.50"></text></g><g><title>trait_impls_of (304,223 samples, 0.17%)</title><rect x="65.0493%" y="69" width="0.1741%" height="15" fill="rgb(247,143,39)"/><text x="65.2993%" y="79.50"></text></g><g><title>evaluate_obligation (1,786,209 samples, 1.02%)</title><rect x="64.2018%" y="85" width="1.0224%" height="15" fill="rgb(236,97,10)"/><text x="64.4518%" y="95.50"></text></g><g><title>is_copy_raw (419,773 samples, 0.24%)</title><rect x="65.3623%" y="85" width="0.2403%" height="15" fill="rgb(233,208,19)"/><text x="65.6123%" y="95.50"></text></g><g><title>evaluate_obligation (347,933 samples, 0.20%)</title><rect x="65.4035%" y="69" width="0.1992%" height="15" fill="rgb(216,164,2)"/><text x="65.6535%" y="79.50"></text></g><g><title>predicates_of (238,384 samples, 0.14%)</title><rect x="65.7707%" y="85" width="0.1365%" height="15" fill="rgb(220,129,5)"/><text x="66.0207%" y="95.50"></text></g><g><title>typeck (19,594,079 samples, 11.22%)</title><rect x="54.7919%" y="101" width="11.2156%" height="15" fill="rgb(242,17,10)"/><text x="55.0419%" y="111.50">typeck</text></g><g><title>item_bodies_checking (40,711,006 samples, 23.30%)</title><rect x="42.7401%" y="149" width="23.3030%" height="15" fill="rgb(242,107,0)"/><text x="42.9901%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,707,135 samples, 23.30%)</title><rect x="42.7423%" y="133" width="23.3007%" height="15" fill="rgb(251,28,31)"/><text x="42.9923%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (40,537,652 samples, 23.20%)</title><rect x="42.8393%" y="117" width="23.2037%" height="15" fill="rgb(233,223,10)"/><text x="43.0893%" y="127.50">typeck</text></g><g><title>evaluate_obligation (275,544 samples, 0.16%)</title><rect x="67.7306%" y="101" width="0.1577%" height="15" fill="rgb(215,21,27)"/><text x="67.9806%" y="111.50"></text></g><g><title>item_types_checking (3,386,158 samples, 1.94%)</title><rect x="66.0430%" y="149" width="1.9382%" height="15" fill="rgb(232,23,21)"/><text x="66.2930%" y="159.50">i..</text></g><g><title>check_mod_item_types (3,374,428 samples, 1.93%)</title><rect x="66.0497%" y="133" width="1.9315%" height="15" fill="rgb(244,5,23)"/><text x="66.2997%" y="143.50">c..</text></g><g><title>typeck (1,305,335 samples, 0.75%)</title><rect x="67.2341%" y="117" width="0.7472%" height="15" fill="rgb(226,81,46)"/><text x="67.4841%" y="127.50"></text></g><g><title>fn_sig (701,430 samples, 0.40%)</title><rect x="68.2623%" y="117" width="0.4015%" height="15" fill="rgb(247,70,30)"/><text x="68.5123%" y="127.50"></text></g><g><title>named_region_map (677,957 samples, 0.39%)</title><rect x="68.8264%" y="101" width="0.3881%" height="15" fill="rgb(212,68,19)"/><text x="69.0764%" y="111.50"></text></g><g><title>resolve_lifetimes (642,867 samples, 0.37%)</title><rect x="68.8465%" y="85" width="0.3680%" height="15" fill="rgb(240,187,13)"/><text x="69.0965%" y="95.50"></text></g><g><title>lint_levels (232,233 samples, 0.13%)</title><rect x="69.0815%" y="69" width="0.1329%" height="15" fill="rgb(223,113,26)"/><text x="69.3315%" y="79.50"></text></g><g><title>generics_of (992,970 samples, 0.57%)</title><rect x="68.6638%" y="117" width="0.5684%" height="15" fill="rgb(206,192,2)"/><text x="68.9138%" y="127.50"></text></g><g><title>explicit_predicates_of (219,240 samples, 0.13%)</title><rect x="69.4506%" y="85" width="0.1255%" height="15" fill="rgb(241,108,4)"/><text x="69.7006%" y="95.50"></text></g><g><title>predicates_of (680,995 samples, 0.39%)</title><rect x="69.3170%" y="117" width="0.3898%" height="15" fill="rgb(247,173,49)"/><text x="69.5670%" y="127.50"></text></g><g><title>predicates_defined_on (596,545 samples, 0.34%)</title><rect x="69.3653%" y="101" width="0.3415%" height="15" fill="rgb(224,114,35)"/><text x="69.6153%" y="111.50"></text></g><g><title>inferred_outlives_of (228,353 samples, 0.13%)</title><rect x="69.5761%" y="85" width="0.1307%" height="15" fill="rgb(245,159,27)"/><text x="69.8261%" y="95.50"></text></g><g><title>inferred_outlives_crate (196,333 samples, 0.11%)</title><rect x="69.5944%" y="69" width="0.1124%" height="15" fill="rgb(245,172,44)"/><text x="69.8444%" y="79.50"></text></g><g><title>type_collecting (3,295,136 samples, 1.89%)</title><rect x="67.9855%" y="149" width="1.8861%" height="15" fill="rgb(236,23,11)"/><text x="68.2355%" y="159.50">t..</text></g><g><title>collect_mod_item_types (3,274,226 samples, 1.87%)</title><rect x="67.9975%" y="133" width="1.8742%" height="15" fill="rgb(205,117,38)"/><text x="68.2475%" y="143.50">c..</text></g><g><title>type_of (261,612 samples, 0.15%)</title><rect x="69.7219%" y="117" width="0.1497%" height="15" fill="rgb(237,72,25)"/><text x="69.9719%" y="127.50"></text></g><g><title>evaluate_obligation (506,505 samples, 0.29%)</title><rect x="71.6267%" y="117" width="0.2899%" height="15" fill="rgb(244,70,9)"/><text x="71.8767%" y="127.50"></text></g><g><title>object_safety_violations (236,462 samples, 0.14%)</title><rect x="72.0244%" y="117" width="0.1354%" height="15" fill="rgb(217,125,39)"/><text x="72.2744%" y="127.50"></text></g><g><title>param_env (470,543 samples, 0.27%)</title><rect x="72.1598%" y="117" width="0.2693%" height="15" fill="rgb(235,36,10)"/><text x="72.4098%" y="127.50"></text></g><g><title>region_scope_tree (978,200 samples, 0.56%)</title><rect x="72.4762%" y="117" width="0.5599%" height="15" fill="rgb(251,123,47)"/><text x="72.7262%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,181,463 samples, 2.97%)</title><rect x="70.0800%" y="133" width="2.9659%" height="15" fill="rgb(221,13,13)"/><text x="70.3300%" y="143.50">che..</text></g><g><title>adt_def (362,364 samples, 0.21%)</title><rect x="73.9272%" y="85" width="0.2074%" height="15" fill="rgb(238,131,9)"/><text x="74.1772%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (360,924 samples, 0.21%)</title><rect x="73.9280%" y="69" width="0.2066%" height="15" fill="rgb(211,50,8)"/><text x="74.1780%" y="79.50"></text></g><g><title>item_attrs (344,414 samples, 0.20%)</title><rect x="73.9375%" y="53" width="0.1971%" height="15" fill="rgb(245,182,24)"/><text x="74.1875%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (342,884 samples, 0.20%)</title><rect x="73.9383%" y="37" width="0.1963%" height="15" fill="rgb(242,14,37)"/><text x="74.1883%" y="47.50"></text></g><g><title>adt_sized_constraint (521,395 samples, 0.30%)</title><rect x="73.9187%" y="101" width="0.2984%" height="15" fill="rgb(246,228,12)"/><text x="74.1687%" y="111.50"></text></g><g><title>evaluate_obligation (878,900 samples, 0.50%)</title><rect x="73.7148%" y="117" width="0.5031%" height="15" fill="rgb(213,55,15)"/><text x="73.9648%" y="127.50"></text></g><g><title>param_env (271,895 samples, 0.16%)</title><rect x="74.2771%" y="117" width="0.1556%" height="15" fill="rgb(209,9,3)"/><text x="74.5271%" y="127.50"></text></g><g><title>check_item_well_formed (2,769,453 samples, 1.59%)</title><rect x="73.0459%" y="133" width="1.5852%" height="15" fill="rgb(230,59,30)"/><text x="73.2959%" y="143.50"></text></g><g><title>analysis (129,952,715 samples, 74.38%)</title><rect x="0.3655%" y="181" width="74.3849%" height="15" fill="rgb(209,121,21)"/><text x="0.6155%" y="191.50">analysis</text></g><g><title>type_check_crate (69,767,121 samples, 39.93%)</title><rect x="34.8157%" y="165" width="39.9347%" height="15" fill="rgb(220,109,13)"/><text x="35.0657%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,510,375 samples, 4.87%)</title><rect x="69.8790%" y="149" width="4.8713%" height="15" fill="rgb(232,18,1)"/><text x="70.1290%" y="159.50">wf_che..</text></g><g><title>check_trait_item_well_formed (208,293 samples, 0.12%)</title><rect x="74.6311%" y="133" width="0.1192%" height="15" fill="rgb(215,41,42)"/><text x="74.8811%" y="143.50"></text></g><g><title>codegen_crate (425,335 samples, 0.24%)</title><rect x="74.7542%" y="181" width="0.2435%" height="15" fill="rgb(224,123,36)"/><text x="75.0042%" y="191.50"></text></g><g><title>AST_validation (207,132 samples, 0.12%)</title><rect x="75.0788%" y="165" width="0.1186%" height="15" fill="rgb(240,125,3)"/><text x="75.3288%" y="175.50"></text></g><g><title>metadata_load_macro (249,971 samples, 0.14%)</title><rect x="87.8682%" y="133" width="0.1431%" height="15" fill="rgb(205,98,50)"/><text x="88.1182%" y="143.50"></text></g><g><title>metadata_register_crate (1,454,427 samples, 0.83%)</title><rect x="88.0113%" y="133" width="0.8325%" height="15" fill="rgb(205,185,37)"/><text x="88.2613%" y="143.50"></text></g><g><title>metadata_register_crate (494,796 samples, 0.28%)</title><rect x="88.5606%" y="117" width="0.2832%" height="15" fill="rgb(238,207,15)"/><text x="88.8106%" y="127.50"></text></g><g><title>macro_expand_crate (24,365,883 samples, 13.95%)</title><rect x="75.3032%" y="165" width="13.9470%" height="15" fill="rgb(213,199,42)"/><text x="75.5532%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (24,355,183 samples, 13.94%)</title><rect x="75.3094%" y="149" width="13.9409%" height="15" fill="rgb(235,201,11)"/><text x="75.5594%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (710,077 samples, 0.41%)</title><rect x="88.8438%" y="133" width="0.4064%" height="15" fill="rgb(207,46,11)"/><text x="89.0938%" y="143.50"></text></g><g><title>finalize_macro_resolutions (182,582 samples, 0.10%)</title><rect x="89.3903%" y="149" width="0.1045%" height="15" fill="rgb(241,35,35)"/><text x="89.6403%" y="159.50"></text></g><g><title>late_resolve_crate (2,892,463 samples, 1.66%)</title><rect x="89.4948%" y="149" width="1.6556%" height="15" fill="rgb(243,32,47)"/><text x="89.7448%" y="159.50"></text></g><g><title>configure_and_expand (28,426,678 samples, 16.27%)</title><rect x="74.9977%" y="181" width="16.2714%" height="15" fill="rgb(247,202,23)"/><text x="75.2477%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,444,759 samples, 1.97%)</title><rect x="89.2973%" y="165" width="1.9718%" height="15" fill="rgb(219,102,11)"/><text x="89.5473%" y="175.50">r..</text></g><g><title>drop_ast (414,065 samples, 0.24%)</title><rect x="91.2691%" y="181" width="0.2370%" height="15" fill="rgb(243,110,44)"/><text x="91.5191%" y="191.50"></text></g><g><title>early_lint_checks (734,998 samples, 0.42%)</title><rect x="91.5156%" y="181" width="0.4207%" height="15" fill="rgb(222,74,54)"/><text x="91.7656%" y="191.50"></text></g><g><title>free_global_ctxt (4,508,451 samples, 2.58%)</title><rect x="91.9363%" y="181" width="2.5806%" height="15" fill="rgb(216,99,12)"/><text x="92.1863%" y="191.50">fr..</text></g><g><title>mir_for_ctfe (338,922 samples, 0.19%)</title><rect x="95.5542%" y="165" width="0.1940%" height="15" fill="rgb(226,22,26)"/><text x="95.8042%" y="175.50"></text></g><g><title>generate_crate_metadata (2,287,246 samples, 1.31%)</title><rect x="94.5169%" y="181" width="1.3092%" height="15" fill="rgb(217,163,10)"/><text x="94.7669%" y="191.50"></text></g><g><title>hir_lowering (5,131,787 samples, 2.94%)</title><rect x="95.8261%" y="181" width="2.9374%" height="15" fill="rgb(213,25,53)"/><text x="96.0761%" y="191.50">hi..</text></g><g><title>parse_crate (261,873 samples, 0.15%)</title><rect x="98.8069%" y="181" width="0.1499%" height="15" fill="rgb(252,105,26)"/><text x="99.0569%" y="191.50"></text></g><g><title>prepare_outputs (210,312 samples, 0.12%)</title><rect x="98.9595%" y="181" width="0.1204%" height="15" fill="rgb(220,39,43)"/><text x="99.2095%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,094,532 samples, 0.63%)</title><rect x="99.0799%" y="181" width="0.6265%" height="15" fill="rgb(229,68,48)"/><text x="99.3299%" y="191.50"></text></g><g><title>all (174,703,177 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (174,703,177 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (403,304 samples, 0.23%)</title><rect x="99.7691%" y="181" width="0.2309%" height="15" fill="rgb(229,81,49)"/><text x="100.0191%" y="191.50"></text></g></svg></svg>