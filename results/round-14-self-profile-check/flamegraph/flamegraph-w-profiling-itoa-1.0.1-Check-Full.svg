<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (108,682 samples, 0.10%)</title><rect x="10.3948%" y="133" width="0.1036%" height="15" fill="rgb(227,0,7)"/><text x="10.6448%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (105,602 samples, 0.10%)</title><rect x="10.3977%" y="117" width="0.1007%" height="15" fill="rgb(217,0,24)"/><text x="10.6477%" y="127.50"></text></g><g><title>codegen_fn_attrs (155,993 samples, 0.15%)</title><rect x="10.3539%" y="149" width="0.1487%" height="15" fill="rgb(221,193,54)"/><text x="10.6039%" y="159.50"></text></g><g><title>is_copy_raw (152,813 samples, 0.15%)</title><rect x="13.1509%" y="133" width="0.1457%" height="15" fill="rgb(248,212,6)"/><text x="13.4009%" y="143.50"></text></g><g><title>evaluate_obligation (116,872 samples, 0.11%)</title><rect x="13.1852%" y="117" width="0.1114%" height="15" fill="rgb(208,68,35)"/><text x="13.4352%" y="127.50"></text></g><g><title>needs_drop_raw (120,052 samples, 0.11%)</title><rect x="13.2994%" y="133" width="0.1145%" height="15" fill="rgb(232,128,0)"/><text x="13.5494%" y="143.50"></text></g><g><title>is_copy_raw (111,672 samples, 0.11%)</title><rect x="13.3074%" y="117" width="0.1065%" height="15" fill="rgb(207,160,47)"/><text x="13.5574%" y="127.50"></text></g><g><title>thir_body (1,240,081 samples, 1.18%)</title><rect x="13.5159%" y="133" width="1.1825%" height="15" fill="rgb(228,23,34)"/><text x="13.7659%" y="143.50"></text></g><g><title>mir_const (5,532,872 samples, 5.28%)</title><rect x="9.4267%" y="181" width="5.2758%" height="15" fill="rgb(218,30,26)"/><text x="9.6767%" y="191.50">mir_co..</text></g><g><title>unsafety_check_result (4,913,047 samples, 4.68%)</title><rect x="10.0178%" y="165" width="4.6847%" height="15" fill="rgb(220,122,19)"/><text x="10.2678%" y="175.50">unsaf..</text></g><g><title>mir_built (4,404,559 samples, 4.20%)</title><rect x="10.5026%" y="149" width="4.1999%" height="15" fill="rgb(250,228,42)"/><text x="10.7526%" y="159.50">mir_b..</text></g><g><title>mir_promoted (6,179,829 samples, 5.89%)</title><rect x="8.8596%" y="197" width="5.8926%" height="15" fill="rgb(240,193,28)"/><text x="9.1096%" y="207.50">mir_pro..</text></g><g><title>type_op_normalize_ty (128,371 samples, 0.12%)</title><rect x="14.8150%" y="197" width="0.1224%" height="15" fill="rgb(216,20,37)"/><text x="15.0650%" y="207.50"></text></g><g><title>MIR_borrow_checking (15,522,692 samples, 14.80%)</title><rect x="0.8958%" y="229" width="14.8013%" height="15" fill="rgb(206,188,39)"/><text x="1.1458%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,467,492 samples, 14.75%)</title><rect x="0.9485%" y="213" width="14.7487%" height="15" fill="rgb(217,207,13)"/><text x="1.1985%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (796,807 samples, 0.76%)</title><rect x="14.9374%" y="197" width="0.7598%" height="15" fill="rgb(231,73,38)"/><text x="15.1874%" y="207.50"></text></g><g><title>hir_module_items (133,701 samples, 0.13%)</title><rect x="15.7661%" y="229" width="0.1275%" height="15" fill="rgb(225,20,46)"/><text x="16.0161%" y="239.50"></text></g><g><title>codegen_fn_attrs (123,432 samples, 0.12%)</title><rect x="16.2011%" y="165" width="0.1177%" height="15" fill="rgb(210,31,41)"/><text x="16.4511%" y="175.50"></text></g><g><title>codegen_fn_attrs (207,812 samples, 0.20%)</title><rect x="16.1230%" y="197" width="0.1982%" height="15" fill="rgb(221,200,47)"/><text x="16.3730%" y="207.50"></text></g><g><title>should_inherit_track_caller (182,222 samples, 0.17%)</title><rect x="16.1474%" y="181" width="0.1738%" height="15" fill="rgb(226,26,5)"/><text x="16.3974%" y="191.50"></text></g><g><title>check_mod_attrs (428,065 samples, 0.41%)</title><rect x="15.9132%" y="213" width="0.4082%" height="15" fill="rgb(249,33,26)"/><text x="16.1632%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (225,603 samples, 0.22%)</title><rect x="16.4597%" y="213" width="0.2151%" height="15" fill="rgb(235,183,28)"/><text x="16.7097%" y="223.50"></text></g><g><title>misc_checking_1 (861,370 samples, 0.82%)</title><rect x="15.8941%" y="229" width="0.8213%" height="15" fill="rgb(221,5,38)"/><text x="16.1441%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (472,836 samples, 0.45%)</title><rect x="16.7167%" y="213" width="0.4509%" height="15" fill="rgb(247,18,42)"/><text x="16.9667%" y="223.50"></text></g><g><title>check_mod_liveness (375,575 samples, 0.36%)</title><rect x="16.8094%" y="197" width="0.3581%" height="15" fill="rgb(241,131,45)"/><text x="17.0594%" y="207.50"></text></g><g><title>misc_checking_2 (832,810 samples, 0.79%)</title><rect x="16.7154%" y="229" width="0.7941%" height="15" fill="rgb(249,31,29)"/><text x="16.9654%" y="239.50"></text></g><g><title>match_checking (358,664 samples, 0.34%)</title><rect x="17.1675%" y="213" width="0.3420%" height="15" fill="rgb(225,111,53)"/><text x="17.4175%" y="223.50"></text></g><g><title>check_match (334,043 samples, 0.32%)</title><rect x="17.1910%" y="197" width="0.3185%" height="15" fill="rgb(238,160,17)"/><text x="17.4410%" y="207.50"></text></g><g><title>check_private_in_public (134,781 samples, 0.13%)</title><rect x="17.5186%" y="213" width="0.1285%" height="15" fill="rgb(214,148,48)"/><text x="17.7686%" y="223.50"></text></g><g><title>death_checking (217,333 samples, 0.21%)</title><rect x="17.6471%" y="213" width="0.2072%" height="15" fill="rgb(232,36,49)"/><text x="17.8971%" y="223.50"></text></g><g><title>eval_to_const_value_raw (121,841 samples, 0.12%)</title><rect x="18.3159%" y="181" width="0.1162%" height="15" fill="rgb(209,103,24)"/><text x="18.5659%" y="191.50"></text></g><g><title>eval_to_const_value_raw (120,141 samples, 0.11%)</title><rect x="18.3175%" y="165" width="0.1146%" height="15" fill="rgb(229,88,8)"/><text x="18.5675%" y="175.50"></text></g><g><title>eval_to_allocation_raw (115,401 samples, 0.11%)</title><rect x="18.3220%" y="149" width="0.1100%" height="15" fill="rgb(213,181,19)"/><text x="18.5720%" y="159.50"></text></g><g><title>crate_lints (1,230,674 samples, 1.17%)</title><rect x="17.8559%" y="197" width="1.1735%" height="15" fill="rgb(254,191,54)"/><text x="18.1059%" y="207.50"></text></g><g><title>type_of (524,105 samples, 0.50%)</title><rect x="18.5296%" y="181" width="0.4997%" height="15" fill="rgb(241,83,37)"/><text x="18.7796%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (442,625 samples, 0.42%)</title><rect x="18.6073%" y="165" width="0.4221%" height="15" fill="rgb(233,36,39)"/><text x="18.8573%" y="175.50"></text></g><g><title>lint_checking (1,714,099 samples, 1.63%)</title><rect x="17.8543%" y="213" width="1.6344%" height="15" fill="rgb(226,3,54)"/><text x="18.1043%" y="223.50"></text></g><g><title>module_lints (481,805 samples, 0.46%)</title><rect x="19.0294%" y="197" width="0.4594%" height="15" fill="rgb(245,192,40)"/><text x="19.2794%" y="207.50"></text></g><g><title>lint_mod (478,015 samples, 0.46%)</title><rect x="19.0330%" y="181" width="0.4558%" height="15" fill="rgb(238,167,29)"/><text x="19.2830%" y="191.50"></text></g><g><title>privacy_access_levels (178,742 samples, 0.17%)</title><rect x="19.4888%" y="213" width="0.1704%" height="15" fill="rgb(232,182,51)"/><text x="19.7388%" y="223.50"></text></g><g><title>privacy_checking_modules (580,967 samples, 0.55%)</title><rect x="19.6592%" y="213" width="0.5540%" height="15" fill="rgb(231,60,39)"/><text x="19.9092%" y="223.50"></text></g><g><title>check_mod_privacy (577,837 samples, 0.55%)</title><rect x="19.6622%" y="197" width="0.5510%" height="15" fill="rgb(208,69,12)"/><text x="19.9122%" y="207.50"></text></g><g><title>misc_checking_3 (2,852,692 samples, 2.72%)</title><rect x="17.5095%" y="229" width="2.7201%" height="15" fill="rgb(235,93,37)"/><text x="17.7595%" y="239.50">mi..</text></g><g><title>impl_parent (234,462 samples, 0.22%)</title><rect x="20.6414%" y="165" width="0.2236%" height="15" fill="rgb(213,116,39)"/><text x="20.8914%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (151,942 samples, 0.14%)</title><rect x="20.7201%" y="149" width="0.1449%" height="15" fill="rgb(222,207,29)"/><text x="20.9701%" y="159.50"></text></g><g><title>impl_trait_ref (743,419 samples, 0.71%)</title><rect x="20.8650%" y="165" width="0.7089%" height="15" fill="rgb(206,96,30)"/><text x="21.1150%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (663,999 samples, 0.63%)</title><rect x="20.9407%" y="149" width="0.6331%" height="15" fill="rgb(218,138,4)"/><text x="21.1907%" y="159.50"></text></g><g><title>coherent_trait (1,425,026 samples, 1.36%)</title><rect x="20.2931%" y="197" width="1.3588%" height="15" fill="rgb(250,191,14)"/><text x="20.5431%" y="207.50"></text></g><g><title>specialization_graph_of (1,415,986 samples, 1.35%)</title><rect x="20.3018%" y="181" width="1.3502%" height="15" fill="rgb(239,60,40)"/><text x="20.5518%" y="191.50"></text></g><g><title>coherence_checking (1,479,727 samples, 1.41%)</title><rect x="20.2791%" y="213" width="1.4110%" height="15" fill="rgb(206,27,48)"/><text x="20.5291%" y="223.50"></text></g><g><title>associated_item (670,620 samples, 0.64%)</title><rect x="42.8481%" y="149" width="0.6395%" height="15" fill="rgb(225,35,8)"/><text x="43.0981%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (538,696 samples, 0.51%)</title><rect x="42.9739%" y="133" width="0.5137%" height="15" fill="rgb(250,213,24)"/><text x="43.2239%" y="143.50"></text></g><g><title>associated_items (880,150 samples, 0.84%)</title><rect x="42.6706%" y="165" width="0.8392%" height="15" fill="rgb(247,123,22)"/><text x="42.9206%" y="175.50"></text></g><g><title>mir_borrowck (117,401 samples, 0.11%)</title><rect x="43.7460%" y="101" width="0.1119%" height="15" fill="rgb(231,138,38)"/><text x="43.9960%" y="111.50"></text></g><g><title>mir_for_ctfe (172,742 samples, 0.16%)</title><rect x="43.6937%" y="133" width="0.1647%" height="15" fill="rgb(231,145,46)"/><text x="43.9437%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (155,762 samples, 0.15%)</title><rect x="43.7099%" y="117" width="0.1485%" height="15" fill="rgb(251,118,11)"/><text x="43.9599%" y="127.50"></text></g><g><title>eval_to_allocation_raw (264,763 samples, 0.25%)</title><rect x="43.6063%" y="149" width="0.2525%" height="15" fill="rgb(217,147,25)"/><text x="43.8563%" y="159.50"></text></g><g><title>mir_const_qualif (133,550 samples, 0.13%)</title><rect x="43.9483%" y="117" width="0.1273%" height="15" fill="rgb(247,81,37)"/><text x="44.1983%" y="127.50"></text></g><g><title>mir_const (110,950 samples, 0.11%)</title><rect x="43.9698%" y="101" width="0.1058%" height="15" fill="rgb(209,12,38)"/><text x="44.2198%" y="111.50"></text></g><g><title>mir_borrowck (283,453 samples, 0.27%)</title><rect x="44.2225%" y="85" width="0.2703%" height="15" fill="rgb(227,1,9)"/><text x="44.4725%" y="95.50"></text></g><g><title>mir_for_ctfe (439,625 samples, 0.42%)</title><rect x="44.0756%" y="117" width="0.4192%" height="15" fill="rgb(248,47,43)"/><text x="44.3256%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (399,685 samples, 0.38%)</title><rect x="44.1137%" y="101" width="0.3811%" height="15" fill="rgb(221,10,30)"/><text x="44.3637%" y="111.50"></text></g><g><title>eval_to_const_value_raw (942,220 samples, 0.90%)</title><rect x="43.5975%" y="165" width="0.8984%" height="15" fill="rgb(210,229,1)"/><text x="43.8475%" y="175.50"></text></g><g><title>eval_to_const_value_raw (668,207 samples, 0.64%)</title><rect x="43.8587%" y="149" width="0.6372%" height="15" fill="rgb(222,148,37)"/><text x="44.1087%" y="159.50"></text></g><g><title>eval_to_allocation_raw (657,847 samples, 0.63%)</title><rect x="43.8686%" y="133" width="0.6273%" height="15" fill="rgb(234,67,33)"/><text x="44.1186%" y="143.50"></text></g><g><title>generics_of (606,479 samples, 0.58%)</title><rect x="48.1315%" y="149" width="0.5783%" height="15" fill="rgb(247,98,35)"/><text x="48.3815%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (436,658 samples, 0.42%)</title><rect x="48.2934%" y="133" width="0.4164%" height="15" fill="rgb(247,138,52)"/><text x="48.5434%" y="143.50"></text></g><g><title>impl_polarity (165,431 samples, 0.16%)</title><rect x="48.8056%" y="149" width="0.1577%" height="15" fill="rgb(213,79,30)"/><text x="49.0556%" y="159.50"></text></g><g><title>impl_trait_ref (872,488 samples, 0.83%)</title><rect x="48.9633%" y="149" width="0.8319%" height="15" fill="rgb(246,177,23)"/><text x="49.2133%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (700,198 samples, 0.67%)</title><rect x="49.1276%" y="133" width="0.6677%" height="15" fill="rgb(230,62,27)"/><text x="49.3776%" y="143.50"></text></g><g><title>opt_def_kind (183,370 samples, 0.17%)</title><rect x="50.1176%" y="133" width="0.1748%" height="15" fill="rgb(216,154,8)"/><text x="50.3676%" y="143.50"></text></g><g><title>explicit_predicates_of (154,064 samples, 0.15%)</title><rect x="50.5248%" y="117" width="0.1469%" height="15" fill="rgb(244,35,45)"/><text x="50.7748%" y="127.50"></text></g><g><title>predicates_of (999,764 samples, 0.95%)</title><rect x="49.8558%" y="149" width="0.9533%" height="15" fill="rgb(251,115,12)"/><text x="50.1058%" y="159.50"></text></g><g><title>predicates_defined_on (541,780 samples, 0.52%)</title><rect x="50.2925%" y="133" width="0.5166%" height="15" fill="rgb(240,54,50)"/><text x="50.5425%" y="143.50"></text></g><g><title>inferred_outlives_of (144,022 samples, 0.14%)</title><rect x="50.6717%" y="117" width="0.1373%" height="15" fill="rgb(233,84,52)"/><text x="50.9217%" y="127.50"></text></g><g><title>specializes (2,665,916 samples, 2.54%)</title><rect x="50.8091%" y="149" width="2.5420%" height="15" fill="rgb(207,117,47)"/><text x="51.0591%" y="159.50">sp..</text></g><g><title>param_env (1,562,645 samples, 1.49%)</title><rect x="51.8611%" y="133" width="1.4900%" height="15" fill="rgb(249,43,39)"/><text x="52.1111%" y="143.50"></text></g><g><title>def_span (715,855 samples, 0.68%)</title><rect x="52.6685%" y="117" width="0.6826%" height="15" fill="rgb(209,38,44)"/><text x="52.9185%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (636,095 samples, 0.61%)</title><rect x="52.7446%" y="101" width="0.6065%" height="15" fill="rgb(236,212,23)"/><text x="52.9946%" y="111.50"></text></g><g><title>trait_impls_of (352,163 samples, 0.34%)</title><rect x="53.3640%" y="149" width="0.3358%" height="15" fill="rgb(242,79,21)"/><text x="53.6140%" y="159.50"></text></g><g><title>implementations_of_trait (125,661 samples, 0.12%)</title><rect x="53.5799%" y="133" width="0.1198%" height="15" fill="rgb(211,96,35)"/><text x="53.8299%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (115,671 samples, 0.11%)</title><rect x="53.5895%" y="117" width="0.1103%" height="15" fill="rgb(253,215,40)"/><text x="53.8395%" y="127.50"></text></g><g><title>evaluate_obligation (9,674,403 samples, 9.22%)</title><rect x="44.4959%" y="165" width="9.2248%" height="15" fill="rgb(211,81,21)"/><text x="44.7459%" y="175.50">evaluate_obli..</text></g><g><title>item_attrs (109,871 samples, 0.10%)</title><rect x="54.0320%" y="165" width="0.1048%" height="15" fill="rgb(208,190,38)"/><text x="54.2820%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (107,260 samples, 0.10%)</title><rect x="54.0345%" y="149" width="0.1023%" height="15" fill="rgb(235,213,38)"/><text x="54.2845%" y="159.50"></text></g><g><title>lint_levels (232,363 samples, 0.22%)</title><rect x="54.1368%" y="165" width="0.2216%" height="15" fill="rgb(237,122,38)"/><text x="54.3868%" y="175.50"></text></g><g><title>method_autoderef_steps (195,131 samples, 0.19%)</title><rect x="54.3769%" y="165" width="0.1861%" height="15" fill="rgb(244,218,35)"/><text x="54.6269%" y="175.50"></text></g><g><title>predicates_of (238,032 samples, 0.23%)</title><rect x="54.6472%" y="165" width="0.2270%" height="15" fill="rgb(240,68,47)"/><text x="54.8972%" y="175.50"></text></g><g><title>predicates_defined_on (157,071 samples, 0.15%)</title><rect x="54.7244%" y="149" width="0.1498%" height="15" fill="rgb(210,16,53)"/><text x="54.9744%" y="159.50"></text></g><g><title>specializes (178,851 samples, 0.17%)</title><rect x="54.9027%" y="165" width="0.1705%" height="15" fill="rgb(235,124,12)"/><text x="55.1527%" y="175.50"></text></g><g><title>item_bodies_checking (35,097,491 samples, 33.47%)</title><rect x="21.7104%" y="213" width="33.4665%" height="15" fill="rgb(224,169,11)"/><text x="21.9604%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (35,093,931 samples, 33.46%)</title><rect x="21.7138%" y="197" width="33.4631%" height="15" fill="rgb(250,166,2)"/><text x="21.9638%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (35,051,221 samples, 33.42%)</title><rect x="21.7545%" y="181" width="33.4224%" height="15" fill="rgb(242,216,29)"/><text x="22.0045%" y="191.50">typeck</text></g><g><title>item_types_checking (992,241 samples, 0.95%)</title><rect x="55.1769%" y="213" width="0.9461%" height="15" fill="rgb(230,116,27)"/><text x="55.4269%" y="223.50"></text></g><g><title>check_mod_item_types (989,131 samples, 0.94%)</title><rect x="55.1799%" y="197" width="0.9432%" height="15" fill="rgb(228,99,48)"/><text x="55.4299%" y="207.50"></text></g><g><title>fn_sig (184,413 samples, 0.18%)</title><rect x="56.3009%" y="181" width="0.1758%" height="15" fill="rgb(253,11,6)"/><text x="56.5509%" y="191.50"></text></g><g><title>named_region_map (176,761 samples, 0.17%)</title><rect x="56.5321%" y="165" width="0.1685%" height="15" fill="rgb(247,143,39)"/><text x="56.7821%" y="175.50"></text></g><g><title>resolve_lifetimes (167,261 samples, 0.16%)</title><rect x="56.5411%" y="149" width="0.1595%" height="15" fill="rgb(236,97,10)"/><text x="56.7911%" y="159.50"></text></g><g><title>generics_of (245,433 samples, 0.23%)</title><rect x="56.4768%" y="181" width="0.2340%" height="15" fill="rgb(233,208,19)"/><text x="56.7268%" y="191.50"></text></g><g><title>predicates_of (275,062 samples, 0.26%)</title><rect x="56.8122%" y="181" width="0.2623%" height="15" fill="rgb(216,164,2)"/><text x="57.0622%" y="191.50"></text></g><g><title>predicates_defined_on (246,072 samples, 0.23%)</title><rect x="56.8399%" y="165" width="0.2346%" height="15" fill="rgb(220,129,5)"/><text x="57.0899%" y="175.50"></text></g><g><title>inferred_outlives_of (121,431 samples, 0.12%)</title><rect x="56.9587%" y="149" width="0.1158%" height="15" fill="rgb(242,17,10)"/><text x="57.2087%" y="159.50"></text></g><g><title>inferred_outlives_crate (106,241 samples, 0.10%)</title><rect x="56.9732%" y="133" width="0.1013%" height="15" fill="rgb(242,107,0)"/><text x="57.2232%" y="143.50"></text></g><g><title>type_collecting (1,175,963 samples, 1.12%)</title><rect x="56.1248%" y="213" width="1.1213%" height="15" fill="rgb(251,28,31)"/><text x="56.3748%" y="223.50"></text></g><g><title>collect_mod_item_types (1,168,623 samples, 1.11%)</title><rect x="56.1318%" y="197" width="1.1143%" height="15" fill="rgb(233,223,10)"/><text x="56.3818%" y="207.50"></text></g><g><title>type_of (105,132 samples, 0.10%)</title><rect x="57.1458%" y="181" width="0.1002%" height="15" fill="rgb(215,21,27)"/><text x="57.3958%" y="191.50"></text></g><g><title>mir_const_qualif (511,403 samples, 0.49%)</title><rect x="58.6253%" y="133" width="0.4876%" height="15" fill="rgb(232,23,21)"/><text x="58.8753%" y="143.50"></text></g><g><title>mir_const (418,133 samples, 0.40%)</title><rect x="58.7143%" y="117" width="0.3987%" height="15" fill="rgb(244,5,23)"/><text x="58.9643%" y="127.50"></text></g><g><title>unsafety_check_result (276,281 samples, 0.26%)</title><rect x="58.8495%" y="101" width="0.2634%" height="15" fill="rgb(226,81,46)"/><text x="59.0995%" y="111.50"></text></g><g><title>mir_built (235,261 samples, 0.22%)</title><rect x="58.8886%" y="85" width="0.2243%" height="15" fill="rgb(247,70,30)"/><text x="59.1386%" y="95.50"></text></g><g><title>mir_borrowck (1,191,807 samples, 1.14%)</title><rect x="59.7178%" y="101" width="1.1364%" height="15" fill="rgb(212,68,19)"/><text x="59.9678%" y="111.50"></text></g><g><title>mir_for_ctfe (1,833,752 samples, 1.75%)</title><rect x="59.1130%" y="133" width="1.7485%" height="15" fill="rgb(240,187,13)"/><text x="59.3630%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,679,702 samples, 1.60%)</title><rect x="59.2599%" y="117" width="1.6016%" height="15" fill="rgb(223,113,26)"/><text x="59.5099%" y="127.50"></text></g><g><title>mir_const_qualif (185,843 samples, 0.18%)</title><rect x="61.0461%" y="69" width="0.1772%" height="15" fill="rgb(206,192,2)"/><text x="61.2961%" y="79.50"></text></g><g><title>mir_const (153,013 samples, 0.15%)</title><rect x="61.0774%" y="53" width="0.1459%" height="15" fill="rgb(241,108,4)"/><text x="61.3274%" y="63.50"></text></g><g><title>unsafety_check_result (108,292 samples, 0.10%)</title><rect x="61.1201%" y="37" width="0.1033%" height="15" fill="rgb(247,173,49)"/><text x="61.3701%" y="47.50"></text></g><g><title>mir_borrowck (398,414 samples, 0.38%)</title><rect x="61.4374%" y="37" width="0.3799%" height="15" fill="rgb(224,114,35)"/><text x="61.6874%" y="47.50"></text></g><g><title>mir_for_ctfe (625,906 samples, 0.60%)</title><rect x="61.2233%" y="69" width="0.5968%" height="15" fill="rgb(245,159,27)"/><text x="61.4733%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (571,546 samples, 0.54%)</title><rect x="61.2752%" y="53" width="0.5450%" height="15" fill="rgb(245,172,44)"/><text x="61.5252%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,170,103 samples, 1.12%)</title><rect x="60.9059%" y="117" width="1.1157%" height="15" fill="rgb(236,23,11)"/><text x="61.1559%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,159,233 samples, 1.11%)</title><rect x="60.9162%" y="101" width="1.1054%" height="15" fill="rgb(205,117,38)"/><text x="61.1662%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,141,462 samples, 1.09%)</title><rect x="60.9332%" y="85" width="1.0884%" height="15" fill="rgb(237,72,25)"/><text x="61.1832%" y="95.50"></text></g><g><title>typeck (211,262 samples, 0.20%)</title><rect x="61.8201%" y="69" width="0.2014%" height="15" fill="rgb(244,70,9)"/><text x="62.0701%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,235,983 samples, 1.18%)</title><rect x="60.8662%" y="133" width="1.1785%" height="15" fill="rgb(217,125,39)"/><text x="61.1162%" y="143.50"></text></g><g><title>param_env (139,061 samples, 0.13%)</title><rect x="62.5874%" y="117" width="0.1326%" height="15" fill="rgb(235,36,10)"/><text x="62.8374%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,747,461 samples, 4.53%)</title><rect x="58.2476%" y="181" width="4.5268%" height="15" fill="rgb(251,123,47)"/><text x="58.4976%" y="191.50">eval_..</text></g><g><title>eval_to_const_value_raw (4,726,621 samples, 4.51%)</title><rect x="58.2675%" y="165" width="4.5070%" height="15" fill="rgb(221,13,13)"/><text x="58.5175%" y="175.50">eval_..</text></g><g><title>eval_to_allocation_raw (4,689,131 samples, 4.47%)</title><rect x="58.3033%" y="149" width="4.4712%" height="15" fill="rgb(238,131,9)"/><text x="58.5533%" y="159.50">eval_..</text></g><g><title>typeck (765,350 samples, 0.73%)</title><rect x="62.0447%" y="133" width="0.7298%" height="15" fill="rgb(211,50,8)"/><text x="62.2947%" y="143.50"></text></g><g><title>param_env (126,171 samples, 0.12%)</title><rect x="62.9465%" y="181" width="0.1203%" height="15" fill="rgb(245,182,24)"/><text x="63.1965%" y="191.50"></text></g><g><title>region_scope_tree (395,144 samples, 0.38%)</title><rect x="63.0722%" y="181" width="0.3768%" height="15" fill="rgb(242,14,37)"/><text x="63.3222%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,404,989 samples, 6.11%)</title><rect x="57.3889%" y="197" width="6.1073%" height="15" fill="rgb(246,228,12)"/><text x="57.6389%" y="207.50">check_im..</text></g><g><title>mir_const_qualif (154,642 samples, 0.15%)</title><rect x="64.3775%" y="133" width="0.1475%" height="15" fill="rgb(213,55,15)"/><text x="64.6275%" y="143.50"></text></g><g><title>mir_const (134,382 samples, 0.13%)</title><rect x="64.3968%" y="117" width="0.1281%" height="15" fill="rgb(209,9,3)"/><text x="64.6468%" y="127.50"></text></g><g><title>mir_borrowck (362,824 samples, 0.35%)</title><rect x="64.6506%" y="101" width="0.3460%" height="15" fill="rgb(230,59,30)"/><text x="64.9006%" y="111.50"></text></g><g><title>mir_for_ctfe (495,096 samples, 0.47%)</title><rect x="64.5250%" y="133" width="0.4721%" height="15" fill="rgb(209,121,21)"/><text x="64.7750%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (456,955 samples, 0.44%)</title><rect x="64.5613%" y="117" width="0.4357%" height="15" fill="rgb(220,109,13)"/><text x="64.8113%" y="127.50"></text></g><g><title>eval_to_const_value_raw (184,752 samples, 0.18%)</title><rect x="65.0048%" y="117" width="0.1762%" height="15" fill="rgb(232,18,1)"/><text x="65.2548%" y="127.50"></text></g><g><title>eval_to_const_value_raw (183,072 samples, 0.17%)</title><rect x="65.0064%" y="101" width="0.1746%" height="15" fill="rgb(215,41,42)"/><text x="65.2564%" y="111.50"></text></g><g><title>eval_to_allocation_raw (178,782 samples, 0.17%)</title><rect x="65.0105%" y="85" width="0.1705%" height="15" fill="rgb(224,123,36)"/><text x="65.2605%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (195,222 samples, 0.19%)</title><rect x="64.9973%" y="133" width="0.1861%" height="15" fill="rgb(240,125,3)"/><text x="65.2473%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,071,502 samples, 1.02%)</title><rect x="64.2650%" y="181" width="1.0217%" height="15" fill="rgb(205,98,50)"/><text x="64.5150%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,062,222 samples, 1.01%)</title><rect x="64.2738%" y="165" width="1.0129%" height="15" fill="rgb(205,185,37)"/><text x="64.5238%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,060,672 samples, 1.01%)</title><rect x="64.2753%" y="149" width="1.0114%" height="15" fill="rgb(238,207,15)"/><text x="64.5253%" y="159.50"></text></g><g><title>typeck (108,292 samples, 0.10%)</title><rect x="65.1834%" y="133" width="0.1033%" height="15" fill="rgb(213,199,42)"/><text x="65.4334%" y="143.50"></text></g><g><title>evaluate_obligation (637,569 samples, 0.61%)</title><rect x="65.2867%" y="181" width="0.6079%" height="15" fill="rgb(235,201,11)"/><text x="65.5367%" y="191.50"></text></g><g><title>param_env (244,452 samples, 0.23%)</title><rect x="65.9842%" y="181" width="0.2331%" height="15" fill="rgb(207,46,11)"/><text x="66.2342%" y="191.50"></text></g><g><title>check_item_well_formed (2,984,274 samples, 2.85%)</title><rect x="63.4963%" y="197" width="2.8456%" height="15" fill="rgb(241,35,35)"/><text x="63.7463%" y="207.50">ch..</text></g><g><title>analysis (69,063,879 samples, 65.85%)</title><rect x="0.6129%" y="245" width="65.8544%" height="15" fill="rgb(243,32,47)"/><text x="0.8629%" y="255.50">analysis</text></g><g><title>type_check_crate (48,491,069 samples, 46.24%)</title><rect x="20.2297%" y="229" width="46.2377%" height="15" fill="rgb(247,202,23)"/><text x="20.4797%" y="239.50">type_check_crate</text></g><g><title>wf_checking (9,662,587 samples, 9.21%)</title><rect x="57.2538%" y="213" width="9.2136%" height="15" fill="rgb(219,102,11)"/><text x="57.5038%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (131,562 samples, 0.13%)</title><rect x="66.3419%" y="197" width="0.1254%" height="15" fill="rgb(243,110,44)"/><text x="66.5919%" y="207.50"></text></g><g><title>codegen_crate (294,943 samples, 0.28%)</title><rect x="66.4780%" y="245" width="0.2812%" height="15" fill="rgb(222,74,54)"/><text x="66.7280%" y="255.50"></text></g><g><title>AST_validation (276,583 samples, 0.26%)</title><rect x="66.9698%" y="229" width="0.2637%" height="15" fill="rgb(216,99,12)"/><text x="67.2198%" y="239.50"></text></g><g><title>complete_gated_feature_checking (111,241 samples, 0.11%)</title><rect x="67.2336%" y="229" width="0.1061%" height="15" fill="rgb(226,22,26)"/><text x="67.4836%" y="239.50"></text></g><g><title>metadata_load_macro (121,053 samples, 0.12%)</title><rect x="83.7403%" y="197" width="0.1154%" height="15" fill="rgb(217,163,10)"/><text x="83.9903%" y="207.50"></text></g><g><title>metadata_register_crate (210,402 samples, 0.20%)</title><rect x="83.8557%" y="197" width="0.2006%" height="15" fill="rgb(213,25,53)"/><text x="84.1057%" y="207.50"></text></g><g><title>macro_expand_crate (17,477,184 samples, 16.67%)</title><rect x="67.4276%" y="229" width="16.6650%" height="15" fill="rgb(252,105,26)"/><text x="67.6776%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (17,450,944 samples, 16.64%)</title><rect x="67.4526%" y="213" width="16.6400%" height="15" fill="rgb(220,39,43)"/><text x="67.7026%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (232,303 samples, 0.22%)</title><rect x="84.0971%" y="229" width="0.2215%" height="15" fill="rgb(229,68,48)"/><text x="84.3471%" y="239.50"></text></g><g><title>finalize_imports (311,084 samples, 0.30%)</title><rect x="84.3263%" y="213" width="0.2966%" height="15" fill="rgb(252,8,32)"/><text x="84.5763%" y="223.50"></text></g><g><title>late_resolve_crate (5,230,688 samples, 4.99%)</title><rect x="84.6744%" y="213" width="4.9876%" height="15" fill="rgb(223,20,43)"/><text x="84.9244%" y="223.50">late_r..</text></g><g><title>configure_and_expand (24,210,879 samples, 23.09%)</title><rect x="66.7592%" y="245" width="23.0858%" height="15" fill="rgb(229,81,49)"/><text x="67.0092%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (5,795,695 samples, 5.53%)</title><rect x="84.3186%" y="229" width="5.5264%" height="15" fill="rgb(236,28,36)"/><text x="84.5686%" y="239.50">resolve..</text></g><g><title>drop_ast (191,202 samples, 0.18%)</title><rect x="89.8450%" y="245" width="0.1823%" height="15" fill="rgb(249,185,26)"/><text x="90.0950%" y="255.50"></text></g><g><title>early_lint_checks (439,035 samples, 0.42%)</title><rect x="90.0409%" y="245" width="0.4186%" height="15" fill="rgb(249,174,33)"/><text x="90.2909%" y="255.50"></text></g><g><title>free_global_ctxt (1,993,863 samples, 1.90%)</title><rect x="90.4595%" y="245" width="1.9012%" height="15" fill="rgb(233,201,37)"/><text x="90.7095%" y="255.50">f..</text></g><g><title>generate_crate_metadata (781,618 samples, 0.75%)</title><rect x="92.3607%" y="245" width="0.7453%" height="15" fill="rgb(221,78,26)"/><text x="92.6107%" y="255.50"></text></g><g><title>hir_lowering (4,047,754 samples, 3.86%)</title><rect x="93.1060%" y="245" width="3.8597%" height="15" fill="rgb(250,127,30)"/><text x="93.3560%" y="255.50">hir_..</text></g><g><title>parse_crate (1,849,611 samples, 1.76%)</title><rect x="97.0153%" y="245" width="1.7637%" height="15" fill="rgb(230,49,44)"/><text x="97.2653%" y="255.50"></text></g><g><title>prepare_outputs (252,433 samples, 0.24%)</title><rect x="98.7882%" y="245" width="0.2407%" height="15" fill="rgb(229,67,23)"/><text x="99.0382%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (603,396 samples, 0.58%)</title><rect x="99.0289%" y="245" width="0.5754%" height="15" fill="rgb(249,83,47)"/><text x="99.2789%" y="255.50"></text></g><g><title>all (104,873,537 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (104,873,537 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (322,824 samples, 0.31%)</title><rect x="99.6922%" y="245" width="0.3078%" height="15" fill="rgb(219,56,2)"/><text x="99.9422%" y="255.50"></text></g></svg></svg>