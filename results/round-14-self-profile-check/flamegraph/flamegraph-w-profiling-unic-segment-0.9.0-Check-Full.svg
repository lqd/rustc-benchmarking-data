<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (238,620 samples, 0.15%)</title><rect x="14.9584%" y="101" width="0.1504%" height="15" fill="rgb(227,0,7)"/><text x="15.2084%" y="111.50"></text></g><g><title>item_attrs (238,722 samples, 0.15%)</title><rect x="15.6143%" y="69" width="0.1504%" height="15" fill="rgb(217,0,24)"/><text x="15.8643%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (232,062 samples, 0.15%)</title><rect x="15.6185%" y="53" width="0.1462%" height="15" fill="rgb(221,193,54)"/><text x="15.8685%" y="63.50"></text></g><g><title>codegen_fn_attrs (339,383 samples, 0.21%)</title><rect x="15.5625%" y="85" width="0.2139%" height="15" fill="rgb(248,212,6)"/><text x="15.8125%" y="95.50"></text></g><g><title>adt_drop_tys (302,474 samples, 0.19%)</title><rect x="19.0868%" y="53" width="0.1906%" height="15" fill="rgb(208,68,35)"/><text x="19.3368%" y="63.50"></text></g><g><title>needs_drop_raw (959,982 samples, 0.60%)</title><rect x="19.0304%" y="69" width="0.6050%" height="15" fill="rgb(232,128,0)"/><text x="19.2804%" y="79.50"></text></g><g><title>is_copy_raw (568,097 samples, 0.36%)</title><rect x="19.2774%" y="53" width="0.3580%" height="15" fill="rgb(207,160,47)"/><text x="19.5274%" y="63.50"></text></g><g><title>evaluate_obligation (463,205 samples, 0.29%)</title><rect x="19.3435%" y="37" width="0.2919%" height="15" fill="rgb(228,23,34)"/><text x="19.5935%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (370,806 samples, 0.23%)</title><rect x="19.7660%" y="53" width="0.2337%" height="15" fill="rgb(218,30,26)"/><text x="20.0160%" y="63.50"></text></g><g><title>specialization_graph_of (225,673 samples, 0.14%)</title><rect x="20.0428%" y="53" width="0.1422%" height="15" fill="rgb(220,122,19)"/><text x="20.2928%" y="63.50"></text></g><g><title>resolve_instance (933,302 samples, 0.59%)</title><rect x="19.6354%" y="69" width="0.5881%" height="15" fill="rgb(250,228,42)"/><text x="19.8854%" y="79.50"></text></g><g><title>thir_body (2,082,803 samples, 1.31%)</title><rect x="20.2471%" y="69" width="1.3125%" height="15" fill="rgb(240,193,28)"/><text x="20.4971%" y="79.50"></text></g><g><title>mir_const (11,803,054 samples, 7.44%)</title><rect x="14.1357%" y="117" width="7.4380%" height="15" fill="rgb(216,20,37)"/><text x="14.3857%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (10,258,871 samples, 6.46%)</title><rect x="15.1088%" y="101" width="6.4649%" height="15" fill="rgb(206,188,39)"/><text x="15.3588%" y="111.50">unsafety..</text></g><g><title>mir_built (9,199,470 samples, 5.80%)</title><rect x="15.7764%" y="85" width="5.7973%" height="15" fill="rgb(217,207,13)"/><text x="16.0264%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (13,388,254 samples, 8.44%)</title><rect x="13.2756%" y="133" width="8.4370%" height="15" fill="rgb(231,73,38)"/><text x="13.5256%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (220,292 samples, 0.14%)</title><rect x="21.5737%" y="117" width="0.1388%" height="15" fill="rgb(225,20,46)"/><text x="21.8237%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (225,212 samples, 0.14%)</title><rect x="21.7125%" y="133" width="0.1419%" height="15" fill="rgb(210,31,41)"/><text x="21.9625%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (550,025 samples, 0.35%)</title><rect x="21.8544%" y="133" width="0.3466%" height="15" fill="rgb(221,200,47)"/><text x="22.1044%" y="143.50"></text></g><g><title>normalize_projection_ty (349,083 samples, 0.22%)</title><rect x="21.9811%" y="117" width="0.2200%" height="15" fill="rgb(226,26,5)"/><text x="22.2311%" y="127.50"></text></g><g><title>type_op_normalize_predicate (303,864 samples, 0.19%)</title><rect x="22.2011%" y="133" width="0.1915%" height="15" fill="rgb(249,33,26)"/><text x="22.4511%" y="143.50"></text></g><g><title>normalize_projection_ty (187,934 samples, 0.12%)</title><rect x="22.2741%" y="117" width="0.1184%" height="15" fill="rgb(235,183,28)"/><text x="22.5241%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,454,807 samples, 1.55%)</title><rect x="22.3925%" y="133" width="1.5470%" height="15" fill="rgb(221,5,38)"/><text x="22.6425%" y="143.50"></text></g><g><title>MIR_borrow_checking (36,944,750 samples, 23.28%)</title><rect x="0.6641%" y="165" width="23.2817%" height="15" fill="rgb(247,18,42)"/><text x="0.9141%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (36,770,619 samples, 23.17%)</title><rect x="0.7738%" y="149" width="23.1720%" height="15" fill="rgb(241,131,45)"/><text x="1.0238%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (219,003 samples, 0.14%)</title><rect x="24.0342%" y="165" width="0.1380%" height="15" fill="rgb(249,31,29)"/><text x="24.2842%" y="175.50"></text></g><g><title>should_inherit_track_caller (202,330 samples, 0.13%)</title><rect x="24.4769%" y="117" width="0.1275%" height="15" fill="rgb(225,111,53)"/><text x="24.7269%" y="127.50"></text></g><g><title>codegen_fn_attrs (332,632 samples, 0.21%)</title><rect x="24.4045%" y="133" width="0.2096%" height="15" fill="rgb(238,160,17)"/><text x="24.6545%" y="143.50"></text></g><g><title>check_mod_attrs (685,137 samples, 0.43%)</title><rect x="24.1824%" y="149" width="0.4318%" height="15" fill="rgb(214,148,48)"/><text x="24.4324%" y="159.50"></text></g><g><title>lookup_deprecation_entry (205,554 samples, 0.13%)</title><rect x="24.9201%" y="133" width="0.1295%" height="15" fill="rgb(232,36,49)"/><text x="25.1701%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (487,608 samples, 0.31%)</title><rect x="24.7840%" y="149" width="0.3073%" height="15" fill="rgb(209,103,24)"/><text x="25.0340%" y="159.50"></text></g><g><title>misc_checking_1 (1,510,747 samples, 0.95%)</title><rect x="24.1725%" y="165" width="0.9520%" height="15" fill="rgb(229,88,8)"/><text x="24.4225%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (619,397 samples, 0.39%)</title><rect x="25.1255%" y="149" width="0.3903%" height="15" fill="rgb(213,181,19)"/><text x="25.3755%" y="159.50"></text></g><g><title>check_mod_liveness (456,735 samples, 0.29%)</title><rect x="25.2280%" y="133" width="0.2878%" height="15" fill="rgb(254,191,54)"/><text x="25.4780%" y="143.50"></text></g><g><title>misc_checking_2 (1,916,022 samples, 1.21%)</title><rect x="25.1246%" y="165" width="1.2074%" height="15" fill="rgb(241,83,37)"/><text x="25.3746%" y="175.50"></text></g><g><title>match_checking (1,295,145 samples, 0.82%)</title><rect x="25.5158%" y="149" width="0.8162%" height="15" fill="rgb(233,36,39)"/><text x="25.7658%" y="159.50"></text></g><g><title>check_match (1,249,775 samples, 0.79%)</title><rect x="25.5444%" y="133" width="0.7876%" height="15" fill="rgb(226,3,54)"/><text x="25.7944%" y="143.50"></text></g><g><title>check_private_in_public (269,673 samples, 0.17%)</title><rect x="26.3369%" y="149" width="0.1699%" height="15" fill="rgb(245,192,40)"/><text x="26.5869%" y="159.50"></text></g><g><title>death_checking (1,008,702 samples, 0.64%)</title><rect x="26.5068%" y="149" width="0.6357%" height="15" fill="rgb(238,167,29)"/><text x="26.7568%" y="159.50"></text></g><g><title>item_attrs (492,536 samples, 0.31%)</title><rect x="26.8321%" y="133" width="0.3104%" height="15" fill="rgb(232,182,51)"/><text x="27.0821%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (490,706 samples, 0.31%)</title><rect x="26.8333%" y="117" width="0.3092%" height="15" fill="rgb(231,60,39)"/><text x="27.0833%" y="127.50"></text></g><g><title>eval_to_const_value_raw (197,603 samples, 0.12%)</title><rect x="27.7284%" y="117" width="0.1245%" height="15" fill="rgb(208,69,12)"/><text x="27.9784%" y="127.50"></text></g><g><title>eval_to_const_value_raw (188,583 samples, 0.12%)</title><rect x="27.7341%" y="101" width="0.1188%" height="15" fill="rgb(235,93,37)"/><text x="27.9841%" y="111.50"></text></g><g><title>eval_to_allocation_raw (182,833 samples, 0.12%)</title><rect x="27.7377%" y="85" width="0.1152%" height="15" fill="rgb(213,116,39)"/><text x="27.9877%" y="95.50"></text></g><g><title>param_env (166,021 samples, 0.10%)</title><rect x="27.8529%" y="117" width="0.1046%" height="15" fill="rgb(222,207,29)"/><text x="28.1029%" y="127.50"></text></g><g><title>crate_lints (2,366,156 samples, 1.49%)</title><rect x="27.1434%" y="133" width="1.4911%" height="15" fill="rgb(206,96,30)"/><text x="27.3934%" y="143.50"></text></g><g><title>type_of (1,067,192 samples, 0.67%)</title><rect x="27.9619%" y="117" width="0.6725%" height="15" fill="rgb(218,138,4)"/><text x="28.2119%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (835,149 samples, 0.53%)</title><rect x="28.1082%" y="101" width="0.5263%" height="15" fill="rgb(250,191,14)"/><text x="28.3582%" y="111.50"></text></g><g><title>lint_checking (3,131,054 samples, 1.97%)</title><rect x="27.1425%" y="149" width="1.9731%" height="15" fill="rgb(239,60,40)"/><text x="27.3925%" y="159.50">l..</text></g><g><title>module_lints (763,488 samples, 0.48%)</title><rect x="28.6345%" y="133" width="0.4811%" height="15" fill="rgb(206,27,48)"/><text x="28.8845%" y="143.50"></text></g><g><title>lint_mod (759,028 samples, 0.48%)</title><rect x="28.6373%" y="117" width="0.4783%" height="15" fill="rgb(225,35,8)"/><text x="28.8873%" y="127.50"></text></g><g><title>privacy_access_levels (338,414 samples, 0.21%)</title><rect x="29.1156%" y="149" width="0.2133%" height="15" fill="rgb(250,213,24)"/><text x="29.3656%" y="159.50"></text></g><g><title>privacy_checking_modules (1,233,484 samples, 0.78%)</title><rect x="29.3289%" y="149" width="0.7773%" height="15" fill="rgb(247,123,22)"/><text x="29.5789%" y="159.50"></text></g><g><title>check_mod_privacy (1,230,454 samples, 0.78%)</title><rect x="29.3308%" y="133" width="0.7754%" height="15" fill="rgb(231,138,38)"/><text x="29.5808%" y="143.50"></text></g><g><title>misc_checking_3 (6,003,637 samples, 3.78%)</title><rect x="26.3320%" y="165" width="3.7833%" height="15" fill="rgb(231,145,46)"/><text x="26.5820%" y="175.50">misc..</text></g><g><title>impl_trait_ref (209,594 samples, 0.13%)</title><rect x="30.3363%" y="69" width="0.1321%" height="15" fill="rgb(251,118,11)"/><text x="30.5863%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (190,574 samples, 0.12%)</title><rect x="30.3483%" y="53" width="0.1201%" height="15" fill="rgb(217,147,25)"/><text x="30.5983%" y="63.50"></text></g><g><title>adt_destructor (457,035 samples, 0.29%)</title><rect x="30.1961%" y="117" width="0.2880%" height="15" fill="rgb(247,81,37)"/><text x="30.4461%" y="127.50"></text></g><g><title>coherent_trait (447,005 samples, 0.28%)</title><rect x="30.2024%" y="101" width="0.2817%" height="15" fill="rgb(209,12,38)"/><text x="30.4524%" y="111.50"></text></g><g><title>specialization_graph_of (445,655 samples, 0.28%)</title><rect x="30.2033%" y="85" width="0.2808%" height="15" fill="rgb(227,1,9)"/><text x="30.4533%" y="95.50"></text></g><g><title>impl_parent (2,600,075 samples, 1.64%)</title><rect x="32.9525%" y="101" width="1.6385%" height="15" fill="rgb(248,47,43)"/><text x="33.2025%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,391,442 samples, 0.88%)</title><rect x="33.7142%" y="85" width="0.8769%" height="15" fill="rgb(221,10,30)"/><text x="33.9642%" y="95.50"></text></g><g><title>impl_trait_ref (5,405,334 samples, 3.41%)</title><rect x="34.5910%" y="101" width="3.4063%" height="15" fill="rgb(210,229,1)"/><text x="34.8410%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,227,801 samples, 2.66%)</title><rect x="35.3331%" y="85" width="2.6643%" height="15" fill="rgb(222,148,37)"/><text x="35.5831%" y="95.50">me..</text></g><g><title>coherent_trait (13,243,307 samples, 8.35%)</title><rect x="30.1710%" y="133" width="8.3456%" height="15" fill="rgb(234,67,33)"/><text x="30.4210%" y="143.50">coherent_tra..</text></g><g><title>specialization_graph_of (12,581,590 samples, 7.93%)</title><rect x="30.5880%" y="117" width="7.9286%" height="15" fill="rgb(247,98,35)"/><text x="30.8380%" y="127.50">specializat..</text></g><g><title>trait_impls_of (822,418 samples, 0.52%)</title><rect x="37.9984%" y="101" width="0.5183%" height="15" fill="rgb(247,138,52)"/><text x="38.2484%" y="111.50"></text></g><g><title>implementations_of_trait (219,690 samples, 0.14%)</title><rect x="38.3782%" y="85" width="0.1384%" height="15" fill="rgb(213,79,30)"/><text x="38.6282%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (177,620 samples, 0.11%)</title><rect x="38.4047%" y="69" width="0.1119%" height="15" fill="rgb(246,177,23)"/><text x="38.6547%" y="79.50"></text></g><g><title>coherence_checking (13,338,148 samples, 8.41%)</title><rect x="30.1586%" y="149" width="8.4054%" height="15" fill="rgb(230,62,27)"/><text x="30.4086%" y="159.50">coherence_ch..</text></g><g><title>adt_sized_constraint (178,462 samples, 0.11%)</title><rect x="56.7501%" y="101" width="0.1125%" height="15" fill="rgb(216,154,8)"/><text x="57.0001%" y="111.50"></text></g><g><title>associated_item (161,592 samples, 0.10%)</title><rect x="56.9115%" y="85" width="0.1018%" height="15" fill="rgb(244,35,45)"/><text x="57.1615%" y="95.50"></text></g><g><title>associated_items (249,764 samples, 0.16%)</title><rect x="56.8665%" y="101" width="0.1574%" height="15" fill="rgb(251,115,12)"/><text x="57.1165%" y="111.50"></text></g><g><title>dropck_outlives (310,174 samples, 0.20%)</title><rect x="57.0722%" y="101" width="0.1955%" height="15" fill="rgb(240,54,50)"/><text x="57.3222%" y="111.50"></text></g><g><title>adt_dtorck_constraint (160,601 samples, 0.10%)</title><rect x="57.1665%" y="85" width="0.1012%" height="15" fill="rgb(233,84,52)"/><text x="57.4165%" y="95.50"></text></g><g><title>predicates_of (212,681 samples, 0.13%)</title><rect x="57.9561%" y="85" width="0.1340%" height="15" fill="rgb(207,117,47)"/><text x="58.2061%" y="95.50"></text></g><g><title>trait_impls_of (484,516 samples, 0.31%)</title><rect x="58.1662%" y="85" width="0.3053%" height="15" fill="rgb(249,43,39)"/><text x="58.4162%" y="95.50"></text></g><g><title>implementations_of_trait (200,903 samples, 0.13%)</title><rect x="58.3449%" y="69" width="0.1266%" height="15" fill="rgb(209,38,44)"/><text x="58.5949%" y="79.50"></text></g><g><title>evaluate_obligation (1,911,255 samples, 1.20%)</title><rect x="57.2677%" y="101" width="1.2044%" height="15" fill="rgb(236,212,23)"/><text x="57.5177%" y="111.50"></text></g><g><title>generics_of (160,340 samples, 0.10%)</title><rect x="58.5574%" y="101" width="0.1010%" height="15" fill="rgb(242,79,21)"/><text x="58.8074%" y="111.50"></text></g><g><title>method_autoderef_steps (181,801 samples, 0.11%)</title><rect x="58.9027%" y="101" width="0.1146%" height="15" fill="rgb(211,96,35)"/><text x="59.1527%" y="111.50"></text></g><g><title>predicates_of (391,789 samples, 0.25%)</title><rect x="59.1361%" y="101" width="0.2469%" height="15" fill="rgb(253,215,40)"/><text x="59.3861%" y="111.50"></text></g><g><title>predicates_defined_on (260,025 samples, 0.16%)</title><rect x="59.2192%" y="85" width="0.1639%" height="15" fill="rgb(211,81,21)"/><text x="59.4692%" y="95.50"></text></g><g><title>evaluate_obligation (932,820 samples, 0.59%)</title><rect x="63.9300%" y="85" width="0.5878%" height="15" fill="rgb(208,190,38)"/><text x="64.1800%" y="95.50"></text></g><g><title>typeck (8,500,464 samples, 5.36%)</title><rect x="59.4532%" y="101" width="5.3568%" height="15" fill="rgb(235,213,38)"/><text x="59.7032%" y="111.50">typeck</text></g><g><title>item_bodies_checking (41,655,393 samples, 26.25%)</title><rect x="38.5900%" y="149" width="26.2502%" height="15" fill="rgb(237,122,38)"/><text x="38.8400%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (41,653,202 samples, 26.25%)</title><rect x="38.5914%" y="133" width="26.2488%" height="15" fill="rgb(244,218,35)"/><text x="38.8414%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (41,547,930 samples, 26.18%)</title><rect x="38.6577%" y="117" width="26.1825%" height="15" fill="rgb(240,68,47)"/><text x="38.9077%" y="127.50">typeck</text></g><g><title>item_types_checking (1,639,668 samples, 1.03%)</title><rect x="64.8402%" y="149" width="1.0333%" height="15" fill="rgb(210,16,53)"/><text x="65.0902%" y="159.50"></text></g><g><title>check_mod_item_types (1,635,248 samples, 1.03%)</title><rect x="64.8430%" y="133" width="1.0305%" height="15" fill="rgb(235,124,12)"/><text x="65.0930%" y="143.50"></text></g><g><title>typeck (166,732 samples, 0.11%)</title><rect x="65.7684%" y="117" width="0.1051%" height="15" fill="rgb(224,169,11)"/><text x="66.0184%" y="127.50"></text></g><g><title>fn_sig (290,383 samples, 0.18%)</title><rect x="66.1036%" y="117" width="0.1830%" height="15" fill="rgb(250,166,2)"/><text x="66.3536%" y="127.50"></text></g><g><title>lint_levels (243,363 samples, 0.15%)</title><rect x="66.5917%" y="69" width="0.1534%" height="15" fill="rgb(242,216,29)"/><text x="66.8417%" y="79.50"></text></g><g><title>is_late_bound_map (577,816 samples, 0.36%)</title><rect x="66.3814%" y="101" width="0.3641%" height="15" fill="rgb(230,116,27)"/><text x="66.6314%" y="111.50"></text></g><g><title>resolve_lifetimes (551,005 samples, 0.35%)</title><rect x="66.3983%" y="85" width="0.3472%" height="15" fill="rgb(228,99,48)"/><text x="66.6483%" y="95.50"></text></g><g><title>named_region_map (160,634 samples, 0.10%)</title><rect x="66.7456%" y="101" width="0.1012%" height="15" fill="rgb(253,11,6)"/><text x="66.9956%" y="111.50"></text></g><g><title>generics_of (906,110 samples, 0.57%)</title><rect x="66.2866%" y="117" width="0.5710%" height="15" fill="rgb(247,143,39)"/><text x="66.5366%" y="127.50"></text></g><g><title>predicates_of (584,796 samples, 0.37%)</title><rect x="66.8986%" y="117" width="0.3685%" height="15" fill="rgb(236,97,10)"/><text x="67.1486%" y="127.50"></text></g><g><title>predicates_defined_on (512,685 samples, 0.32%)</title><rect x="66.9440%" y="101" width="0.3231%" height="15" fill="rgb(233,208,19)"/><text x="67.1940%" y="111.50"></text></g><g><title>inferred_outlives_of (272,964 samples, 0.17%)</title><rect x="67.0951%" y="85" width="0.1720%" height="15" fill="rgb(216,164,2)"/><text x="67.3451%" y="95.50"></text></g><g><title>inferred_outlives_crate (244,753 samples, 0.15%)</title><rect x="67.1129%" y="69" width="0.1542%" height="15" fill="rgb(220,129,5)"/><text x="67.3629%" y="79.50"></text></g><g><title>type_collecting (2,375,517 samples, 1.50%)</title><rect x="65.8743%" y="149" width="1.4970%" height="15" fill="rgb(242,17,10)"/><text x="66.1243%" y="159.50"></text></g><g><title>collect_mod_item_types (2,365,666 samples, 1.49%)</title><rect x="65.8805%" y="133" width="1.4908%" height="15" fill="rgb(242,107,0)"/><text x="66.1305%" y="143.50"></text></g><g><title>type_of (165,281 samples, 0.10%)</title><rect x="67.2671%" y="117" width="0.1042%" height="15" fill="rgb(251,28,31)"/><text x="67.5171%" y="127.50"></text></g><g><title>evaluate_obligation (487,522 samples, 0.31%)</title><rect x="68.8604%" y="117" width="0.3072%" height="15" fill="rgb(233,223,10)"/><text x="69.1104%" y="127.50"></text></g><g><title>param_env (271,603 samples, 0.17%)</title><rect x="69.2642%" y="117" width="0.1712%" height="15" fill="rgb(215,21,27)"/><text x="69.5142%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,832,010 samples, 2.41%)</title><rect x="67.5417%" y="133" width="2.4148%" height="15" fill="rgb(232,23,21)"/><text x="67.7917%" y="143.50">ch..</text></g><g><title>region_scope_tree (813,829 samples, 0.51%)</title><rect x="69.4437%" y="117" width="0.5129%" height="15" fill="rgb(244,5,23)"/><text x="69.6937%" y="127.50"></text></g><g><title>evaluate_obligation (317,953 samples, 0.20%)</title><rect x="70.8520%" y="117" width="0.2004%" height="15" fill="rgb(226,81,46)"/><text x="71.1020%" y="127.50"></text></g><g><title>param_env (266,795 samples, 0.17%)</title><rect x="71.1120%" y="117" width="0.1681%" height="15" fill="rgb(247,70,30)"/><text x="71.3620%" y="127.50"></text></g><g><title>analysis (112,738,981 samples, 71.05%)</title><rect x="0.3689%" y="181" width="71.0454%" height="15" fill="rgb(212,68,19)"/><text x="0.6189%" y="191.50">analysis</text></g><g><title>type_check_crate (65,535,537 samples, 41.30%)</title><rect x="30.1153%" y="165" width="41.2989%" height="15" fill="rgb(240,187,13)"/><text x="30.3653%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,408,691 samples, 4.04%)</title><rect x="67.3756%" y="149" width="4.0386%" height="15" fill="rgb(223,113,26)"/><text x="67.6256%" y="159.50">wf_c..</text></g><g><title>check_item_well_formed (2,313,159 samples, 1.46%)</title><rect x="69.9566%" y="133" width="1.4577%" height="15" fill="rgb(206,192,2)"/><text x="70.2066%" y="143.50"></text></g><g><title>codegen_crate (586,676 samples, 0.37%)</title><rect x="71.4187%" y="181" width="0.3697%" height="15" fill="rgb(241,108,4)"/><text x="71.6687%" y="191.50"></text></g><g><title>AST_validation (162,102 samples, 0.10%)</title><rect x="71.8878%" y="165" width="0.1022%" height="15" fill="rgb(247,173,49)"/><text x="72.1378%" y="175.50"></text></g><g><title>metadata_load_macro (376,952 samples, 0.24%)</title><rect x="87.9256%" y="133" width="0.2375%" height="15" fill="rgb(224,114,35)"/><text x="88.1756%" y="143.50"></text></g><g><title>metadata_register_crate (2,650,709 samples, 1.67%)</title><rect x="88.1631%" y="133" width="1.6704%" height="15" fill="rgb(245,159,27)"/><text x="88.4131%" y="143.50"></text></g><g><title>metadata_register_crate (975,810 samples, 0.61%)</title><rect x="89.2186%" y="117" width="0.6149%" height="15" fill="rgb(245,172,44)"/><text x="89.4686%" y="127.50"></text></g><g><title>macro_expand_crate (28,653,418 samples, 18.06%)</title><rect x="72.1005%" y="165" width="18.0567%" height="15" fill="rgb(236,23,11)"/><text x="72.3505%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (28,639,018 samples, 18.05%)</title><rect x="72.1096%" y="149" width="18.0476%" height="15" fill="rgb(205,117,38)"/><text x="72.3596%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (513,577 samples, 0.32%)</title><rect x="89.8335%" y="133" width="0.3236%" height="15" fill="rgb(237,72,25)"/><text x="90.0835%" y="143.50"></text></g><g><title>finalize_macro_resolutions (206,012 samples, 0.13%)</title><rect x="90.2458%" y="149" width="0.1298%" height="15" fill="rgb(244,70,9)"/><text x="90.4958%" y="159.50"></text></g><g><title>late_resolve_crate (2,549,978 samples, 1.61%)</title><rect x="90.3756%" y="149" width="1.6069%" height="15" fill="rgb(217,125,39)"/><text x="90.6256%" y="159.50"></text></g><g><title>configure_and_expand (32,211,727 samples, 20.30%)</title><rect x="71.7884%" y="181" width="20.2990%" height="15" fill="rgb(235,36,10)"/><text x="72.0384%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,970,523 samples, 1.87%)</title><rect x="90.2155%" y="165" width="1.8720%" height="15" fill="rgb(251,123,47)"/><text x="90.4655%" y="175.50">r..</text></g><g><title>drop_ast (291,653 samples, 0.18%)</title><rect x="92.0874%" y="181" width="0.1838%" height="15" fill="rgb(221,13,13)"/><text x="92.3374%" y="191.50"></text></g><g><title>early_lint_checks (632,867 samples, 0.40%)</title><rect x="92.2821%" y="181" width="0.3988%" height="15" fill="rgb(238,131,9)"/><text x="92.5321%" y="191.50"></text></g><g><title>free_global_ctxt (3,964,644 samples, 2.50%)</title><rect x="92.6809%" y="181" width="2.4984%" height="15" fill="rgb(211,50,8)"/><text x="92.9309%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,383,125 samples, 0.87%)</title><rect x="95.1793%" y="181" width="0.8716%" height="15" fill="rgb(245,182,24)"/><text x="95.4293%" y="191.50"></text></g><g><title>hir_lowering (4,424,189 samples, 2.79%)</title><rect x="96.0509%" y="181" width="2.7880%" height="15" fill="rgb(242,14,37)"/><text x="96.3009%" y="191.50">hi..</text></g><g><title>parse_crate (362,294 samples, 0.23%)</title><rect x="98.8659%" y="181" width="0.2283%" height="15" fill="rgb(246,228,12)"/><text x="99.1159%" y="191.50"></text></g><g><title>prepare_outputs (201,123 samples, 0.13%)</title><rect x="99.0978%" y="181" width="0.1267%" height="15" fill="rgb(213,55,15)"/><text x="99.3478%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (773,699 samples, 0.49%)</title><rect x="99.2246%" y="181" width="0.4876%" height="15" fill="rgb(209,9,3)"/><text x="99.4746%" y="191.50"></text></g><g><title>all (158,685,890 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (158,685,890 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (385,835 samples, 0.24%)</title><rect x="99.7569%" y="181" width="0.2431%" height="15" fill="rgb(220,109,13)"/><text x="100.0069%" y="191.50"></text></g></svg></svg>