<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (57,711 samples, 0.12%)</title><rect x="9.8861%" y="245" width="0.1200%" height="15" fill="rgb(227,0,7)"/><text x="10.1361%" y="255.50"></text></g><g><title>diagnostic_items (49,830 samples, 0.10%)</title><rect x="11.6218%" y="213" width="0.1036%" height="15" fill="rgb(217,0,24)"/><text x="11.8718%" y="223.50"></text></g><g><title>param_env (223,932 samples, 0.47%)</title><rect x="11.7254%" y="213" width="0.4655%" height="15" fill="rgb(221,193,54)"/><text x="11.9754%" y="223.50"></text></g><g><title>item_attrs (118,171 samples, 0.25%)</title><rect x="12.7661%" y="181" width="0.2456%" height="15" fill="rgb(248,212,6)"/><text x="13.0161%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (112,641 samples, 0.23%)</title><rect x="12.7776%" y="165" width="0.2341%" height="15" fill="rgb(208,68,35)"/><text x="13.0276%" y="175.50"></text></g><g><title>codegen_fn_attrs (188,051 samples, 0.39%)</title><rect x="12.6509%" y="197" width="0.3909%" height="15" fill="rgb(232,128,0)"/><text x="12.9009%" y="207.50"></text></g><g><title>adt_drop_tys (102,081 samples, 0.21%)</title><rect x="15.1330%" y="133" width="0.2122%" height="15" fill="rgb(207,160,47)"/><text x="15.3830%" y="143.50"></text></g><g><title>adt_drop_tys (148,182 samples, 0.31%)</title><rect x="15.1124%" y="149" width="0.3080%" height="15" fill="rgb(228,23,34)"/><text x="15.3624%" y="159.50"></text></g><g><title>adt_drop_tys (189,972 samples, 0.39%)</title><rect x="15.0903%" y="165" width="0.3949%" height="15" fill="rgb(218,30,26)"/><text x="15.3403%" y="175.50"></text></g><g><title>explicit_predicates_of (153,152 samples, 0.32%)</title><rect x="16.3677%" y="101" width="0.3183%" height="15" fill="rgb(220,122,19)"/><text x="16.6177%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (146,222 samples, 0.30%)</title><rect x="16.3821%" y="85" width="0.3039%" height="15" fill="rgb(250,228,42)"/><text x="16.6321%" y="95.50"></text></g><g><title>needs_drop_raw (817,777 samples, 1.70%)</title><rect x="14.9950%" y="181" width="1.6998%" height="15" fill="rgb(240,193,28)"/><text x="15.2450%" y="191.50"></text></g><g><title>is_copy_raw (581,984 samples, 1.21%)</title><rect x="15.4851%" y="165" width="1.2097%" height="15" fill="rgb(216,20,37)"/><text x="15.7351%" y="175.50"></text></g><g><title>evaluate_obligation (512,174 samples, 1.06%)</title><rect x="15.6302%" y="149" width="1.0646%" height="15" fill="rgb(206,188,39)"/><text x="15.8802%" y="159.50"></text></g><g><title>predicates_of (179,572 samples, 0.37%)</title><rect x="16.3216%" y="133" width="0.3732%" height="15" fill="rgb(217,207,13)"/><text x="16.5716%" y="143.50"></text></g><g><title>predicates_defined_on (165,812 samples, 0.34%)</title><rect x="16.3502%" y="117" width="0.3446%" height="15" fill="rgb(231,73,38)"/><text x="16.6002%" y="127.50"></text></g><g><title>specialization_graph_of (57,291 samples, 0.12%)</title><rect x="16.9022%" y="165" width="0.1191%" height="15" fill="rgb(225,20,46)"/><text x="17.1522%" y="175.50"></text></g><g><title>resolve_instance (179,272 samples, 0.37%)</title><rect x="16.6948%" y="181" width="0.3726%" height="15" fill="rgb(210,31,41)"/><text x="16.9448%" y="191.50"></text></g><g><title>thir_body (360,585 samples, 0.75%)</title><rect x="17.0887%" y="181" width="0.7495%" height="15" fill="rgb(221,200,47)"/><text x="17.3387%" y="191.50"></text></g><g><title>mir_const (3,401,589 samples, 7.07%)</title><rect x="10.7930%" y="229" width="7.0704%" height="15" fill="rgb(226,26,5)"/><text x="11.0430%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (2,729,083 samples, 5.67%)</title><rect x="12.1908%" y="213" width="5.6725%" height="15" fill="rgb(249,33,26)"/><text x="12.4408%" y="223.50">unsafet..</text></g><g><title>mir_built (2,319,675 samples, 4.82%)</title><rect x="13.0418%" y="197" width="4.8215%" height="15" fill="rgb(235,183,28)"/><text x="13.2918%" y="207.50">mir_bu..</text></g><g><title>mir_promoted (3,791,233 samples, 7.88%)</title><rect x="10.0276%" y="245" width="7.8802%" height="15" fill="rgb(221,5,38)"/><text x="10.2776%" y="255.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (153,653 samples, 0.32%)</title><rect x="17.9079%" y="245" width="0.3194%" height="15" fill="rgb(247,18,42)"/><text x="18.1579%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (106,560 samples, 0.22%)</title><rect x="18.2272%" y="245" width="0.2215%" height="15" fill="rgb(241,131,45)"/><text x="18.4772%" y="255.50"></text></g><g><title>normalize_projection_ty (64,390 samples, 0.13%)</title><rect x="18.3149%" y="229" width="0.1338%" height="15" fill="rgb(249,31,29)"/><text x="18.5649%" y="239.50"></text></g><g><title>type_op_normalize_predicate (64,171 samples, 0.13%)</title><rect x="18.4487%" y="245" width="0.1334%" height="15" fill="rgb(225,111,53)"/><text x="18.6987%" y="255.50"></text></g><g><title>type_op_prove_predicate (894,101 samples, 1.86%)</title><rect x="18.5821%" y="245" width="1.8584%" height="15" fill="rgb(238,160,17)"/><text x="18.8321%" y="255.50">t..</text></g><g><title>evaluate_obligation (337,024 samples, 0.70%)</title><rect x="19.7400%" y="229" width="0.7005%" height="15" fill="rgb(214,148,48)"/><text x="19.9900%" y="239.50"></text></g><g><title>MIR_borrow_checking (9,005,000 samples, 18.72%)</title><rect x="1.7280%" y="277" width="18.7173%" height="15" fill="rgb(232,36,49)"/><text x="1.9780%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,960,739 samples, 18.63%)</title><rect x="1.8200%" y="261" width="18.6253%" height="15" fill="rgb(209,103,24)"/><text x="2.0700%" y="271.50">mir_borrowck</text></g><g><title>hir_module_items (105,551 samples, 0.22%)</title><rect x="20.4661%" y="277" width="0.2194%" height="15" fill="rgb(229,88,8)"/><text x="20.7161%" y="287.50"></text></g><g><title>get_lang_items (65,390 samples, 0.14%)</title><rect x="21.1603%" y="229" width="0.1359%" height="15" fill="rgb(213,181,19)"/><text x="21.4103%" y="239.50"></text></g><g><title>codegen_fn_attrs (179,522 samples, 0.37%)</title><rect x="21.0242%" y="245" width="0.3731%" height="15" fill="rgb(254,191,54)"/><text x="21.2742%" y="255.50"></text></g><g><title>check_mod_attrs (312,094 samples, 0.65%)</title><rect x="20.7491%" y="261" width="0.6487%" height="15" fill="rgb(241,83,37)"/><text x="20.9991%" y="271.50"></text></g><g><title>check_mod_const_bodies (53,430 samples, 0.11%)</title><rect x="21.3978%" y="261" width="0.1111%" height="15" fill="rgb(233,36,39)"/><text x="21.6478%" y="271.50"></text></g><g><title>lint_levels (69,211 samples, 0.14%)</title><rect x="21.7768%" y="245" width="0.1439%" height="15" fill="rgb(226,3,54)"/><text x="22.0268%" y="255.50"></text></g><g><title>lookup_deprecation_entry (86,901 samples, 0.18%)</title><rect x="21.9207%" y="245" width="0.1806%" height="15" fill="rgb(245,192,40)"/><text x="22.1707%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (323,224 samples, 0.67%)</title><rect x="21.5639%" y="261" width="0.6718%" height="15" fill="rgb(238,167,29)"/><text x="21.8139%" y="271.50"></text></g><g><title>misc_checking_1 (786,129 samples, 1.63%)</title><rect x="20.6869%" y="277" width="1.6340%" height="15" fill="rgb(232,182,51)"/><text x="20.9369%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (166,882 samples, 0.35%)</title><rect x="22.3265%" y="261" width="0.3469%" height="15" fill="rgb(231,60,39)"/><text x="22.5765%" y="271.50"></text></g><g><title>check_mod_liveness (134,391 samples, 0.28%)</title><rect x="22.3940%" y="245" width="0.2793%" height="15" fill="rgb(208,69,12)"/><text x="22.6440%" y="255.50"></text></g><g><title>param_env (63,872 samples, 0.13%)</title><rect x="23.1210%" y="229" width="0.1328%" height="15" fill="rgb(235,93,37)"/><text x="23.3710%" y="239.50"></text></g><g><title>misc_checking_2 (450,025 samples, 0.94%)</title><rect x="22.3209%" y="277" width="0.9354%" height="15" fill="rgb(213,116,39)"/><text x="22.5709%" y="287.50"></text></g><g><title>match_checking (280,443 samples, 0.58%)</title><rect x="22.6734%" y="261" width="0.5829%" height="15" fill="rgb(222,207,29)"/><text x="22.9234%" y="271.50"></text></g><g><title>check_match (266,183 samples, 0.55%)</title><rect x="22.7030%" y="245" width="0.5533%" height="15" fill="rgb(206,96,30)"/><text x="22.9530%" y="255.50"></text></g><g><title>death_checking (97,941 samples, 0.20%)</title><rect x="23.3793%" y="261" width="0.2036%" height="15" fill="rgb(218,138,4)"/><text x="23.6293%" y="271.50"></text></g><g><title>param_env (97,151 samples, 0.20%)</title><rect x="23.9048%" y="229" width="0.2019%" height="15" fill="rgb(250,191,14)"/><text x="24.1548%" y="239.50"></text></g><g><title>crate_lints (253,752 samples, 0.53%)</title><rect x="23.5877%" y="245" width="0.5274%" height="15" fill="rgb(239,60,40)"/><text x="23.8377%" y="255.50"></text></g><g><title>lint_checking (363,224 samples, 0.75%)</title><rect x="23.5828%" y="261" width="0.7550%" height="15" fill="rgb(206,27,48)"/><text x="23.8328%" y="271.50"></text></g><g><title>module_lints (107,112 samples, 0.22%)</title><rect x="24.1152%" y="245" width="0.2226%" height="15" fill="rgb(225,35,8)"/><text x="24.3652%" y="255.50"></text></g><g><title>lint_mod (104,002 samples, 0.22%)</title><rect x="24.1216%" y="229" width="0.2162%" height="15" fill="rgb(250,213,24)"/><text x="24.3716%" y="239.50"></text></g><g><title>privacy_access_levels (67,061 samples, 0.14%)</title><rect x="24.3378%" y="261" width="0.1394%" height="15" fill="rgb(247,123,22)"/><text x="24.5878%" y="271.50"></text></g><g><title>privacy_checking_modules (200,272 samples, 0.42%)</title><rect x="24.4772%" y="261" width="0.4163%" height="15" fill="rgb(231,138,38)"/><text x="24.7272%" y="271.50"></text></g><g><title>check_mod_privacy (197,962 samples, 0.41%)</title><rect x="24.4820%" y="245" width="0.4115%" height="15" fill="rgb(231,145,46)"/><text x="24.7320%" y="255.50"></text></g><g><title>misc_checking_3 (799,619 samples, 1.66%)</title><rect x="23.2563%" y="277" width="1.6620%" height="15" fill="rgb(251,118,11)"/><text x="23.5063%" y="287.50"></text></g><g><title>adt_def (68,500 samples, 0.14%)</title><rect x="29.3327%" y="181" width="0.1424%" height="15" fill="rgb(217,147,25)"/><text x="29.5827%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (66,540 samples, 0.14%)</title><rect x="29.3368%" y="165" width="0.1383%" height="15" fill="rgb(247,81,37)"/><text x="29.5868%" y="175.50"></text></g><g><title>item_attrs (49,720 samples, 0.10%)</title><rect x="29.3718%" y="149" width="0.1033%" height="15" fill="rgb(209,12,38)"/><text x="29.6218%" y="159.50"></text></g><g><title>impl_parent (148,750 samples, 0.31%)</title><rect x="29.9773%" y="117" width="0.3092%" height="15" fill="rgb(227,1,9)"/><text x="30.2273%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (103,570 samples, 0.22%)</title><rect x="30.0712%" y="101" width="0.2153%" height="15" fill="rgb(248,47,43)"/><text x="30.3212%" y="111.50"></text></g><g><title>impl_trait_ref (597,787 samples, 1.24%)</title><rect x="30.2865%" y="117" width="1.2425%" height="15" fill="rgb(221,10,30)"/><text x="30.5365%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (554,626 samples, 1.15%)</title><rect x="30.3762%" y="101" width="1.1528%" height="15" fill="rgb(210,229,1)"/><text x="30.6262%" y="111.50"></text></g><g><title>coherent_trait (1,018,211 samples, 2.12%)</title><rect x="29.5218%" y="149" width="2.1164%" height="15" fill="rgb(222,148,37)"/><text x="29.7718%" y="159.50">c..</text></g><g><title>specialization_graph_of (1,009,231 samples, 2.10%)</title><rect x="29.5405%" y="133" width="2.0977%" height="15" fill="rgb(234,67,33)"/><text x="29.7905%" y="143.50">s..</text></g><g><title>trait_impls_of (52,520 samples, 0.11%)</title><rect x="31.5290%" y="117" width="0.1092%" height="15" fill="rgb(247,98,35)"/><text x="31.7790%" y="127.50"></text></g><g><title>adt_destructor (1,048,391 samples, 2.18%)</title><rect x="29.4751%" y="181" width="2.1791%" height="15" fill="rgb(247,138,52)"/><text x="29.7251%" y="191.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (1,038,921 samples, 2.16%)</title><rect x="29.4948%" y="165" width="2.1594%" height="15" fill="rgb(213,79,30)"/><text x="29.7448%" y="175.50">m..</text></g><g><title>adt_def (73,891 samples, 0.15%)</title><rect x="31.9953%" y="85" width="0.1536%" height="15" fill="rgb(246,177,23)"/><text x="32.2453%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (73,361 samples, 0.15%)</title><rect x="31.9964%" y="69" width="0.1525%" height="15" fill="rgb(230,62,27)"/><text x="32.2464%" y="79.50"></text></g><g><title>item_attrs (69,051 samples, 0.14%)</title><rect x="32.0054%" y="53" width="0.1435%" height="15" fill="rgb(216,154,8)"/><text x="32.2554%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (68,421 samples, 0.14%)</title><rect x="32.0067%" y="37" width="0.1422%" height="15" fill="rgb(244,35,45)"/><text x="32.2567%" y="47.50"></text></g><g><title>adt_dtorck_constraint (88,891 samples, 0.18%)</title><rect x="31.9867%" y="101" width="0.1848%" height="15" fill="rgb(251,115,12)"/><text x="32.2367%" y="111.50"></text></g><g><title>adt_dtorck_constraint (146,661 samples, 0.30%)</title><rect x="31.9080%" y="117" width="0.3048%" height="15" fill="rgb(240,54,50)"/><text x="32.1580%" y="127.50"></text></g><g><title>adt_dtorck_constraint (231,523 samples, 0.48%)</title><rect x="31.7742%" y="133" width="0.4812%" height="15" fill="rgb(233,84,52)"/><text x="32.0242%" y="143.50"></text></g><g><title>adt_dtorck_constraint (252,583 samples, 0.53%)</title><rect x="31.7461%" y="149" width="0.5250%" height="15" fill="rgb(207,117,47)"/><text x="31.9961%" y="159.50"></text></g><g><title>adt_dtorck_constraint (293,584 samples, 0.61%)</title><rect x="31.6820%" y="165" width="0.6102%" height="15" fill="rgb(249,43,39)"/><text x="31.9320%" y="175.50"></text></g><g><title>adt_dtorck_constraint (309,334 samples, 0.64%)</title><rect x="31.6542%" y="181" width="0.6430%" height="15" fill="rgb(209,38,44)"/><text x="31.9042%" y="191.50"></text></g><g><title>dropck_outlives (1,583,937 samples, 3.29%)</title><rect x="29.0559%" y="213" width="3.2923%" height="15" fill="rgb(236,212,23)"/><text x="29.3059%" y="223.50">dro..</text></g><g><title>adt_dtorck_constraint (1,509,286 samples, 3.14%)</title><rect x="29.2110%" y="197" width="3.1371%" height="15" fill="rgb(242,79,21)"/><text x="29.4610%" y="207.50">adt..</text></g><g><title>adt_def (120,621 samples, 0.25%)</title><rect x="32.7680%" y="181" width="0.2507%" height="15" fill="rgb(211,96,35)"/><text x="33.0180%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (118,261 samples, 0.25%)</title><rect x="32.7729%" y="165" width="0.2458%" height="15" fill="rgb(253,215,40)"/><text x="33.0229%" y="175.50"></text></g><g><title>item_attrs (62,731 samples, 0.13%)</title><rect x="32.8883%" y="149" width="0.1304%" height="15" fill="rgb(211,81,21)"/><text x="33.1383%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (59,901 samples, 0.12%)</title><rect x="32.8942%" y="133" width="0.1245%" height="15" fill="rgb(208,190,38)"/><text x="33.1442%" y="143.50"></text></g><g><title>adt_sized_constraint (136,801 samples, 0.28%)</title><rect x="32.7410%" y="197" width="0.2843%" height="15" fill="rgb(235,213,38)"/><text x="32.9910%" y="207.50"></text></g><g><title>evaluate_obligation (655,226 samples, 1.36%)</title><rect x="32.3481%" y="213" width="1.3619%" height="15" fill="rgb(237,122,38)"/><text x="32.5981%" y="223.50"></text></g><g><title>trait_impls_of (252,243 samples, 0.52%)</title><rect x="33.1858%" y="197" width="0.5243%" height="15" fill="rgb(244,218,35)"/><text x="33.4358%" y="207.50"></text></g><g><title>implementations_of_trait (80,932 samples, 0.17%)</title><rect x="33.5418%" y="181" width="0.1682%" height="15" fill="rgb(240,68,47)"/><text x="33.7918%" y="191.50"></text></g><g><title>fn_sig (48,221 samples, 0.10%)</title><rect x="33.7287%" y="213" width="0.1002%" height="15" fill="rgb(210,16,53)"/><text x="33.9787%" y="223.50"></text></g><g><title>item_attrs (79,970 samples, 0.17%)</title><rect x="34.0313%" y="213" width="0.1662%" height="15" fill="rgb(235,124,12)"/><text x="34.2813%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (77,150 samples, 0.16%)</title><rect x="34.0372%" y="197" width="0.1604%" height="15" fill="rgb(224,169,11)"/><text x="34.2872%" y="207.50"></text></g><g><title>explicit_predicates_of (66,181 samples, 0.14%)</title><rect x="34.4009%" y="181" width="0.1376%" height="15" fill="rgb(250,166,2)"/><text x="34.6509%" y="191.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (56,790 samples, 0.12%)</title><rect x="34.4204%" y="165" width="0.1180%" height="15" fill="rgb(242,216,29)"/><text x="34.6704%" y="175.50"></text></g><g><title>predicates_of (184,953 samples, 0.38%)</title><rect x="34.2372%" y="213" width="0.3844%" height="15" fill="rgb(230,116,27)"/><text x="34.4872%" y="223.50"></text></g><g><title>predicates_defined_on (137,952 samples, 0.29%)</title><rect x="34.3349%" y="197" width="0.2867%" height="15" fill="rgb(228,99,48)"/><text x="34.5849%" y="207.50"></text></g><g><title>trait_impls_of (58,170 samples, 0.12%)</title><rect x="34.6390%" y="213" width="0.1209%" height="15" fill="rgb(253,11,6)"/><text x="34.8890%" y="223.50"></text></g><g><title>type_of (48,910 samples, 0.10%)</title><rect x="34.7599%" y="213" width="0.1017%" height="15" fill="rgb(247,143,39)"/><text x="35.0099%" y="223.50"></text></g><g><title>associated_item (326,785 samples, 0.68%)</title><rect x="45.6929%" y="181" width="0.6792%" height="15" fill="rgb(236,97,10)"/><text x="45.9429%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (226,325 samples, 0.47%)</title><rect x="45.9017%" y="165" width="0.4704%" height="15" fill="rgb(233,208,19)"/><text x="46.1517%" y="175.50"></text></g><g><title>associated_items (529,437 samples, 1.10%)</title><rect x="45.3097%" y="197" width="1.1005%" height="15" fill="rgb(216,164,2)"/><text x="45.5597%" y="207.50"></text></g><g><title>impl_trait_ref (199,932 samples, 0.42%)</title><rect x="47.9188%" y="181" width="0.4156%" height="15" fill="rgb(220,129,5)"/><text x="48.1688%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (181,162 samples, 0.38%)</title><rect x="47.9578%" y="165" width="0.3766%" height="15" fill="rgb(242,17,10)"/><text x="48.2078%" y="175.50"></text></g><g><title>predicates_of (78,640 samples, 0.16%)</title><rect x="48.3527%" y="181" width="0.1635%" height="15" fill="rgb(242,107,0)"/><text x="48.6027%" y="191.50"></text></g><g><title>predicates_defined_on (48,530 samples, 0.10%)</title><rect x="48.4153%" y="165" width="0.1009%" height="15" fill="rgb(251,28,31)"/><text x="48.6653%" y="175.50"></text></g><g><title>specializes (95,551 samples, 0.20%)</title><rect x="48.5161%" y="181" width="0.1986%" height="15" fill="rgb(233,223,10)"/><text x="48.7661%" y="191.50"></text></g><g><title>param_env (49,861 samples, 0.10%)</title><rect x="48.6111%" y="165" width="0.1036%" height="15" fill="rgb(215,21,27)"/><text x="48.8611%" y="175.50"></text></g><g><title>evaluate_obligation (1,365,635 samples, 2.84%)</title><rect x="46.5145%" y="197" width="2.8385%" height="15" fill="rgb(232,23,21)"/><text x="46.7645%" y="207.50">ev..</text></g><g><title>trait_impls_of (294,885 samples, 0.61%)</title><rect x="48.7401%" y="181" width="0.6129%" height="15" fill="rgb(244,5,23)"/><text x="48.9901%" y="191.50"></text></g><g><title>implementations_of_trait (107,332 samples, 0.22%)</title><rect x="49.1299%" y="165" width="0.2231%" height="15" fill="rgb(226,81,46)"/><text x="49.3799%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (54,432 samples, 0.11%)</title><rect x="49.2399%" y="149" width="0.1131%" height="15" fill="rgb(247,70,30)"/><text x="49.4899%" y="159.50"></text></g><g><title>fn_sig (86,090 samples, 0.18%)</title><rect x="49.3751%" y="197" width="0.1789%" height="15" fill="rgb(212,68,19)"/><text x="49.6251%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (76,330 samples, 0.16%)</title><rect x="49.3954%" y="181" width="0.1587%" height="15" fill="rgb(240,187,13)"/><text x="49.6454%" y="191.50"></text></g><g><title>generics_of (84,511 samples, 0.18%)</title><rect x="49.5541%" y="197" width="0.1757%" height="15" fill="rgb(223,113,26)"/><text x="49.8041%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (50,091 samples, 0.10%)</title><rect x="49.6256%" y="181" width="0.1041%" height="15" fill="rgb(206,192,2)"/><text x="49.8756%" y="191.50"></text></g><g><title>associated_item (126,592 samples, 0.26%)</title><rect x="49.7396%" y="165" width="0.2631%" height="15" fill="rgb(241,108,4)"/><text x="49.9896%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (125,462 samples, 0.26%)</title><rect x="49.7420%" y="149" width="0.2608%" height="15" fill="rgb(247,173,49)"/><text x="49.9920%" y="159.50"></text></g><g><title>impl_item_implementor_ids (132,402 samples, 0.28%)</title><rect x="49.7297%" y="197" width="0.2752%" height="15" fill="rgb(224,114,35)"/><text x="49.9797%" y="207.50"></text></g><g><title>associated_items (130,272 samples, 0.27%)</title><rect x="49.7342%" y="181" width="0.2708%" height="15" fill="rgb(245,159,27)"/><text x="49.9842%" y="191.50"></text></g><g><title>is_copy_raw (490,384 samples, 1.02%)</title><rect x="50.1771%" y="197" width="1.0193%" height="15" fill="rgb(245,172,44)"/><text x="50.4271%" y="207.50"></text></g><g><title>evaluate_obligation (454,164 samples, 0.94%)</title><rect x="50.2524%" y="181" width="0.9440%" height="15" fill="rgb(236,23,11)"/><text x="50.5024%" y="191.50"></text></g><g><title>trait_impls_of (295,744 samples, 0.61%)</title><rect x="50.5817%" y="165" width="0.6147%" height="15" fill="rgb(205,117,38)"/><text x="50.8317%" y="175.50"></text></g><g><title>implementations_of_trait (65,291 samples, 0.14%)</title><rect x="51.0607%" y="149" width="0.1357%" height="15" fill="rgb(237,72,25)"/><text x="51.3107%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (56,201 samples, 0.12%)</title><rect x="51.0796%" y="133" width="0.1168%" height="15" fill="rgb(244,70,9)"/><text x="51.3296%" y="143.50"></text></g><g><title>item_attrs (72,812 samples, 0.15%)</title><rect x="51.1964%" y="197" width="0.1513%" height="15" fill="rgb(217,125,39)"/><text x="51.4464%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (69,202 samples, 0.14%)</title><rect x="51.2039%" y="181" width="0.1438%" height="15" fill="rgb(235,36,10)"/><text x="51.4539%" y="191.50"></text></g><g><title>evaluate_obligation (100,493 samples, 0.21%)</title><rect x="51.5995%" y="181" width="0.2089%" height="15" fill="rgb(251,123,47)"/><text x="51.8495%" y="191.50"></text></g><g><title>method_autoderef_steps (198,543 samples, 0.41%)</title><rect x="51.4265%" y="197" width="0.4127%" height="15" fill="rgb(221,13,13)"/><text x="51.6765%" y="207.50"></text></g><g><title>explicit_predicates_of (138,501 samples, 0.29%)</title><rect x="52.1224%" y="165" width="0.2879%" height="15" fill="rgb(238,131,9)"/><text x="52.3724%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (122,121 samples, 0.25%)</title><rect x="52.1565%" y="149" width="0.2538%" height="15" fill="rgb(211,50,8)"/><text x="52.4065%" y="159.50"></text></g><g><title>predicates_of (284,922 samples, 0.59%)</title><rect x="51.8658%" y="197" width="0.5922%" height="15" fill="rgb(245,182,24)"/><text x="52.1158%" y="207.50"></text></g><g><title>predicates_defined_on (219,422 samples, 0.46%)</title><rect x="52.0019%" y="181" width="0.4561%" height="15" fill="rgb(242,14,37)"/><text x="52.2519%" y="191.50"></text></g><g><title>typeck (8,538,246 samples, 17.75%)</title><rect x="34.8615%" y="213" width="17.7471%" height="15" fill="rgb(246,228,12)"/><text x="35.1115%" y="223.50">typeck</text></g><g><title>variances_of (48,253 samples, 0.10%)</title><rect x="52.6157%" y="213" width="0.1003%" height="15" fill="rgb(213,55,15)"/><text x="52.8657%" y="223.50"></text></g><g><title>item_bodies_checking (13,301,238 samples, 27.65%)</title><rect x="25.0722%" y="261" width="27.6472%" height="15" fill="rgb(209,9,3)"/><text x="25.3222%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,289,418 samples, 27.62%)</title><rect x="25.0968%" y="245" width="27.6226%" height="15" fill="rgb(230,59,30)"/><text x="25.3468%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (13,268,618 samples, 27.58%)</title><rect x="25.1400%" y="229" width="27.5794%" height="15" fill="rgb(209,121,21)"/><text x="25.3900%" y="239.50">typeck</text></g><g><title>late_bound_vars_map (83,120 samples, 0.17%)</title><rect x="53.1547%" y="213" width="0.1728%" height="15" fill="rgb(220,109,13)"/><text x="53.4047%" y="223.50"></text></g><g><title>resolve_lifetimes (67,720 samples, 0.14%)</title><rect x="53.1867%" y="197" width="0.1408%" height="15" fill="rgb(232,18,1)"/><text x="53.4367%" y="207.50"></text></g><g><title>fn_sig (271,323 samples, 0.56%)</title><rect x="52.9355%" y="229" width="0.5640%" height="15" fill="rgb(215,41,42)"/><text x="53.1855%" y="239.50"></text></g><g><title>type_of (82,740 samples, 0.17%)</title><rect x="53.3274%" y="213" width="0.1720%" height="15" fill="rgb(224,123,36)"/><text x="53.5774%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (79,310 samples, 0.16%)</title><rect x="53.3346%" y="197" width="0.1648%" height="15" fill="rgb(240,125,3)"/><text x="53.5846%" y="207.50"></text></g><g><title>named_region_map (56,371 samples, 0.12%)</title><rect x="53.6856%" y="213" width="0.1172%" height="15" fill="rgb(205,98,50)"/><text x="53.9356%" y="223.50"></text></g><g><title>resolve_lifetimes (53,241 samples, 0.11%)</title><rect x="53.6921%" y="197" width="0.1107%" height="15" fill="rgb(205,185,37)"/><text x="53.9421%" y="207.50"></text></g><g><title>generics_of (155,571 samples, 0.32%)</title><rect x="53.4994%" y="229" width="0.3234%" height="15" fill="rgb(238,207,15)"/><text x="53.7494%" y="239.50"></text></g><g><title>predicates_of (56,861 samples, 0.12%)</title><rect x="53.8228%" y="229" width="0.1182%" height="15" fill="rgb(213,199,42)"/><text x="54.0728%" y="239.50"></text></g><g><title>predicates_defined_on (48,981 samples, 0.10%)</title><rect x="53.8392%" y="213" width="0.1018%" height="15" fill="rgb(235,201,11)"/><text x="54.0892%" y="223.50"></text></g><g><title>type_collecting (601,327 samples, 1.25%)</title><rect x="52.7339%" y="261" width="1.2499%" height="15" fill="rgb(207,46,11)"/><text x="52.9839%" y="271.50"></text></g><g><title>collect_mod_item_types (590,177 samples, 1.23%)</title><rect x="52.7571%" y="245" width="1.2267%" height="15" fill="rgb(241,35,35)"/><text x="53.0071%" y="255.50"></text></g><g><title>adt_def (59,471 samples, 0.12%)</title><rect x="55.4422%" y="197" width="0.1236%" height="15" fill="rgb(243,32,47)"/><text x="55.6922%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (57,571 samples, 0.12%)</title><rect x="55.4462%" y="181" width="0.1197%" height="15" fill="rgb(247,202,23)"/><text x="55.6962%" y="191.50"></text></g><g><title>adt_def (52,011 samples, 0.11%)</title><rect x="55.6969%" y="165" width="0.1081%" height="15" fill="rgb(219,102,11)"/><text x="55.9469%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (50,581 samples, 0.11%)</title><rect x="55.6998%" y="149" width="0.1051%" height="15" fill="rgb(243,110,44)"/><text x="55.9498%" y="159.50"></text></g><g><title>adt_def (88,921 samples, 0.18%)</title><rect x="55.8094%" y="149" width="0.1848%" height="15" fill="rgb(222,74,54)"/><text x="56.0594%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (88,451 samples, 0.18%)</title><rect x="55.8104%" y="133" width="0.1838%" height="15" fill="rgb(216,99,12)"/><text x="56.0604%" y="143.50"></text></g><g><title>item_attrs (82,941 samples, 0.17%)</title><rect x="55.8218%" y="117" width="0.1724%" height="15" fill="rgb(226,22,26)"/><text x="56.0718%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (82,341 samples, 0.17%)</title><rect x="55.8231%" y="101" width="0.1711%" height="15" fill="rgb(217,163,10)"/><text x="56.0731%" y="111.50"></text></g><g><title>adt_sized_constraint (98,871 samples, 0.21%)</title><rect x="55.8050%" y="165" width="0.2055%" height="15" fill="rgb(213,25,53)"/><text x="56.0550%" y="175.50"></text></g><g><title>adt_sized_constraint (197,463 samples, 0.41%)</title><rect x="55.6593%" y="181" width="0.4104%" height="15" fill="rgb(252,105,26)"/><text x="55.9093%" y="191.50"></text></g><g><title>adt_sized_constraint (279,994 samples, 0.58%)</title><rect x="55.5658%" y="197" width="0.5820%" height="15" fill="rgb(220,39,43)"/><text x="55.8158%" y="207.50"></text></g><g><title>adt_sized_constraint (368,195 samples, 0.77%)</title><rect x="55.4188%" y="213" width="0.7653%" height="15" fill="rgb(229,68,48)"/><text x="55.6688%" y="223.50"></text></g><g><title>evaluate_obligation (485,975 samples, 1.01%)</title><rect x="55.1768%" y="229" width="1.0101%" height="15" fill="rgb(252,8,32)"/><text x="55.4268%" y="239.50"></text></g><g><title>implied_outlives_bounds (91,461 samples, 0.19%)</title><rect x="56.1869%" y="229" width="0.1901%" height="15" fill="rgb(223,20,43)"/><text x="56.4369%" y="239.50"></text></g><g><title>param_env (241,424 samples, 0.50%)</title><rect x="56.3770%" y="229" width="0.5018%" height="15" fill="rgb(229,81,49)"/><text x="56.6270%" y="239.50"></text></g><g><title>explicit_predicates_of (50,700 samples, 0.11%)</title><rect x="56.9199%" y="197" width="0.1054%" height="15" fill="rgb(236,28,36)"/><text x="57.1699%" y="207.50"></text></g><g><title>predicates_of (88,320 samples, 0.18%)</title><rect x="56.8788%" y="229" width="0.1836%" height="15" fill="rgb(249,185,26)"/><text x="57.1288%" y="239.50"></text></g><g><title>predicates_defined_on (78,650 samples, 0.16%)</title><rect x="56.8989%" y="213" width="0.1635%" height="15" fill="rgb(249,174,33)"/><text x="57.1489%" y="223.50"></text></g><g><title>analysis (26,873,759 samples, 55.86%)</title><rect x="1.3792%" y="293" width="55.8583%" height="15" fill="rgb(233,201,37)"/><text x="1.6292%" y="303.50">analysis</text></g><g><title>type_check_crate (15,548,954 samples, 32.32%)</title><rect x="24.9183%" y="277" width="32.3192%" height="15" fill="rgb(221,78,26)"/><text x="25.1683%" y="287.50">type_check_crate</text></g><g><title>wf_checking (1,563,327 samples, 3.25%)</title><rect x="53.9881%" y="261" width="3.2494%" height="15" fill="rgb(250,127,30)"/><text x="54.2381%" y="271.50">wf_..</text></g><g><title>check_item_well_formed (1,524,096 samples, 3.17%)</title><rect x="54.0696%" y="245" width="3.1679%" height="15" fill="rgb(230,49,44)"/><text x="54.3196%" y="255.50">che..</text></g><g><title>region_scope_tree (84,240 samples, 0.18%)</title><rect x="57.0624%" y="229" width="0.1751%" height="15" fill="rgb(229,67,23)"/><text x="57.3124%" y="239.50"></text></g><g><title>codegen_crate (947,320 samples, 1.97%)</title><rect x="57.2602%" y="293" width="1.9690%" height="15" fill="rgb(249,83,47)"/><text x="57.5102%" y="303.50">c..</text></g><g><title>AST_validation (85,860 samples, 0.18%)</title><rect x="59.6740%" y="277" width="0.1785%" height="15" fill="rgb(215,43,3)"/><text x="59.9240%" y="287.50"></text></g><g><title>crate_injection (73,371 samples, 0.15%)</title><rect x="59.9309%" y="277" width="0.1525%" height="15" fill="rgb(238,154,13)"/><text x="60.1809%" y="287.50"></text></g><g><title>macro_expand_crate (10,592,547 samples, 22.02%)</title><rect x="60.0834%" y="277" width="22.0171%" height="15" fill="rgb(219,56,2)"/><text x="60.3334%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (10,569,587 samples, 21.97%)</title><rect x="60.1312%" y="261" width="21.9694%" height="15" fill="rgb(233,0,4)"/><text x="60.3812%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (2,408,447 samples, 5.01%)</title><rect x="77.0945%" y="245" width="5.0061%" height="15" fill="rgb(235,30,7)"/><text x="77.3445%" y="255.50">metada..</text></g><g><title>metadata_register_crate (869,089 samples, 1.81%)</title><rect x="80.2941%" y="229" width="1.8064%" height="15" fill="rgb(250,79,13)"/><text x="80.5441%" y="239.50">m..</text></g><g><title>metadata_register_crate (69,091 samples, 0.14%)</title><rect x="81.9569%" y="213" width="0.1436%" height="15" fill="rgb(211,146,34)"/><text x="82.2069%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (126,251 samples, 0.26%)</title><rect x="82.1217%" y="277" width="0.2624%" height="15" fill="rgb(228,22,38)"/><text x="82.3717%" y="287.50"></text></g><g><title>finalize_imports (306,503 samples, 0.64%)</title><rect x="82.4027%" y="261" width="0.6371%" height="15" fill="rgb(235,168,5)"/><text x="82.6527%" y="271.50"></text></g><g><title>late_resolve_crate (1,189,204 samples, 2.47%)</title><rect x="83.0651%" y="261" width="2.4718%" height="15" fill="rgb(221,155,16)"/><text x="83.3151%" y="271.50">la..</text></g><g><title>configure_and_expand (12,711,072 samples, 26.42%)</title><rect x="59.2293%" y="293" width="26.4205%" height="15" fill="rgb(215,215,53)"/><text x="59.4793%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (1,571,147 samples, 3.27%)</title><rect x="82.3841%" y="277" width="3.2657%" height="15" fill="rgb(223,4,10)"/><text x="82.6341%" y="287.50">res..</text></g><g><title>drop_ast (57,271 samples, 0.12%)</title><rect x="85.6498%" y="293" width="0.1190%" height="15" fill="rgb(234,103,6)"/><text x="85.8998%" y="303.50"></text></g><g><title>early_lint_checks (137,531 samples, 0.29%)</title><rect x="85.8097%" y="293" width="0.2859%" height="15" fill="rgb(227,97,0)"/><text x="86.0597%" y="303.50"></text></g><g><title>free_global_ctxt (2,554,318 samples, 5.31%)</title><rect x="86.0956%" y="293" width="5.3093%" height="15" fill="rgb(234,150,53)"/><text x="86.3456%" y="303.50">free_g..</text></g><g><title>crate_hash (127,342 samples, 0.26%)</title><rect x="92.1762%" y="277" width="0.2647%" height="15" fill="rgb(228,201,54)"/><text x="92.4262%" y="287.50"></text></g><g><title>generate_crate_metadata (620,227 samples, 1.29%)</title><rect x="91.4048%" y="293" width="1.2892%" height="15" fill="rgb(222,22,37)"/><text x="91.6548%" y="303.50"></text></g><g><title>hir_lowering (777,298 samples, 1.62%)</title><rect x="92.6940%" y="293" width="1.6156%" height="15" fill="rgb(237,53,32)"/><text x="92.9440%" y="303.50"></text></g><g><title>link (66,721 samples, 0.14%)</title><rect x="94.3096%" y="293" width="0.1387%" height="15" fill="rgb(233,25,53)"/><text x="94.5596%" y="303.50"></text></g><g><title>parse_crate (1,130,222 samples, 2.35%)</title><rect x="94.4483%" y="293" width="2.3492%" height="15" fill="rgb(210,40,34)"/><text x="94.6983%" y="303.50">p..</text></g><g><title>prepare_outputs (264,183 samples, 0.55%)</title><rect x="96.8168%" y="293" width="0.5491%" height="15" fill="rgb(241,220,44)"/><text x="97.0668%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (669,157 samples, 1.39%)</title><rect x="97.3659%" y="293" width="1.3909%" height="15" fill="rgb(235,28,35)"/><text x="97.6159%" y="303.50"></text></g><g><title>setup_global_ctxt (139,042 samples, 0.29%)</title><rect x="98.7919%" y="293" width="0.2890%" height="15" fill="rgb(210,56,17)"/><text x="99.0419%" y="303.50"></text></g><g><title>all (48,110,595 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (48,110,595 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(235,212,8)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (442,185 samples, 0.92%)</title><rect x="99.0809%" y="293" width="0.9191%" height="15" fill="rgb(223,33,50)"/><text x="99.3309%" y="303.50"></text></g></svg></svg>