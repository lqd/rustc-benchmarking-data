<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (122,842 samples, 0.12%)</title><rect x="10.0519%" y="101" width="0.1209%" height="15" fill="rgb(227,0,7)"/><text x="10.3019%" y="111.50"></text></g><g><title>eval_to_const_value_raw (107,861 samples, 0.11%)</title><rect x="12.3392%" y="85" width="0.1062%" height="15" fill="rgb(217,0,24)"/><text x="12.5892%" y="95.50"></text></g><g><title>adt_drop_tys (129,131 samples, 0.13%)</title><rect x="12.5315%" y="69" width="0.1271%" height="15" fill="rgb(221,193,54)"/><text x="12.7815%" y="79.50"></text></g><g><title>needs_drop_raw (360,113 samples, 0.35%)</title><rect x="12.4976%" y="85" width="0.3545%" height="15" fill="rgb(248,212,6)"/><text x="12.7476%" y="95.50"></text></g><g><title>is_copy_raw (196,572 samples, 0.19%)</title><rect x="12.6586%" y="69" width="0.1935%" height="15" fill="rgb(208,68,35)"/><text x="12.9086%" y="79.50"></text></g><g><title>evaluate_obligation (161,981 samples, 0.16%)</title><rect x="12.6927%" y="53" width="0.1595%" height="15" fill="rgb(232,128,0)"/><text x="12.9427%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (112,492 samples, 0.11%)</title><rect x="12.9803%" y="69" width="0.1107%" height="15" fill="rgb(207,160,47)"/><text x="13.2303%" y="79.50"></text></g><g><title>impl_parent (151,070 samples, 0.15%)</title><rect x="13.3890%" y="53" width="0.1487%" height="15" fill="rgb(228,23,34)"/><text x="13.6390%" y="63.50"></text></g><g><title>specialization_graph_of (754,568 samples, 0.74%)</title><rect x="13.1492%" y="69" width="0.7428%" height="15" fill="rgb(218,30,26)"/><text x="13.3992%" y="79.50"></text></g><g><title>impl_trait_ref (359,943 samples, 0.35%)</title><rect x="13.5377%" y="53" width="0.3543%" height="15" fill="rgb(220,122,19)"/><text x="13.7877%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (309,843 samples, 0.31%)</title><rect x="13.5870%" y="37" width="0.3050%" height="15" fill="rgb(250,228,42)"/><text x="13.8370%" y="47.50"></text></g><g><title>resolve_instance (1,068,412 samples, 1.05%)</title><rect x="12.8786%" y="85" width="1.0517%" height="15" fill="rgb(240,193,28)"/><text x="13.1286%" y="95.50"></text></g><g><title>thir_body (832,309 samples, 0.82%)</title><rect x="13.9415%" y="85" width="0.8193%" height="15" fill="rgb(216,20,37)"/><text x="14.1915%" y="95.50"></text></g><g><title>mir_const (5,724,365 samples, 5.64%)</title><rect x="9.1347%" y="133" width="5.6351%" height="15" fill="rgb(206,188,39)"/><text x="9.3847%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (5,108,497 samples, 5.03%)</title><rect x="9.7409%" y="117" width="5.0288%" height="15" fill="rgb(217,207,13)"/><text x="9.9909%" y="127.50">unsafe..</text></g><g><title>mir_built (4,669,773 samples, 4.60%)</title><rect x="10.1728%" y="101" width="4.5969%" height="15" fill="rgb(231,73,38)"/><text x="10.4228%" y="111.50">mir_b..</text></g><g><title>mir_promoted (6,294,759 samples, 6.20%)</title><rect x="8.5934%" y="149" width="6.1966%" height="15" fill="rgb(225,20,46)"/><text x="8.8434%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (123,642 samples, 0.12%)</title><rect x="14.7900%" y="149" width="0.1217%" height="15" fill="rgb(210,31,41)"/><text x="15.0400%" y="159.50"></text></g><g><title>type_op_prove_predicate (850,606 samples, 0.84%)</title><rect x="15.0551%" y="149" width="0.8373%" height="15" fill="rgb(221,200,47)"/><text x="15.3051%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,950,826 samples, 14.72%)</title><rect x="1.1905%" y="181" width="14.7176%" height="15" fill="rgb(226,26,5)"/><text x="1.4405%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,903,645 samples, 14.67%)</title><rect x="1.2370%" y="165" width="14.6712%" height="15" fill="rgb(249,33,26)"/><text x="1.4870%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (225,393 samples, 0.22%)</title><rect x="15.9267%" y="181" width="0.2219%" height="15" fill="rgb(235,183,28)"/><text x="16.1767%" y="191.50"></text></g><g><title>codegen_fn_attrs (121,311 samples, 0.12%)</title><rect x="16.7708%" y="117" width="0.1194%" height="15" fill="rgb(221,5,38)"/><text x="17.0208%" y="127.50"></text></g><g><title>should_inherit_track_caller (242,592 samples, 0.24%)</title><rect x="16.6576%" y="133" width="0.2388%" height="15" fill="rgb(247,18,42)"/><text x="16.9076%" y="143.50"></text></g><g><title>codegen_fn_attrs (458,685 samples, 0.45%)</title><rect x="16.4673%" y="149" width="0.4515%" height="15" fill="rgb(241,131,45)"/><text x="16.7173%" y="159.50"></text></g><g><title>check_mod_attrs (758,158 samples, 0.75%)</title><rect x="16.1727%" y="165" width="0.7463%" height="15" fill="rgb(249,31,29)"/><text x="16.4227%" y="175.50"></text></g><g><title>check_mod_const_bodies (119,901 samples, 0.12%)</title><rect x="16.9190%" y="165" width="0.1180%" height="15" fill="rgb(225,111,53)"/><text x="17.1690%" y="175.50"></text></g><g><title>lookup_deprecation_entry (175,853 samples, 0.17%)</title><rect x="17.3211%" y="149" width="0.1731%" height="15" fill="rgb(238,160,17)"/><text x="17.5711%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (488,996 samples, 0.48%)</title><rect x="17.1209%" y="165" width="0.4814%" height="15" fill="rgb(214,148,48)"/><text x="17.3709%" y="175.50"></text></g><g><title>misc_checking_1 (1,526,957 samples, 1.50%)</title><rect x="16.1490%" y="181" width="1.5031%" height="15" fill="rgb(232,36,49)"/><text x="16.3990%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (205,672 samples, 0.20%)</title><rect x="17.6538%" y="165" width="0.2025%" height="15" fill="rgb(209,103,24)"/><text x="17.9038%" y="175.50"></text></g><g><title>check_mod_liveness (129,051 samples, 0.13%)</title><rect x="17.7293%" y="149" width="0.1270%" height="15" fill="rgb(229,88,8)"/><text x="17.9793%" y="159.50"></text></g><g><title>misc_checking_2 (817,469 samples, 0.80%)</title><rect x="17.6521%" y="181" width="0.8047%" height="15" fill="rgb(213,181,19)"/><text x="17.9021%" y="191.50"></text></g><g><title>match_checking (610,017 samples, 0.60%)</title><rect x="17.8563%" y="165" width="0.6005%" height="15" fill="rgb(254,191,54)"/><text x="18.1063%" y="175.50"></text></g><g><title>check_match (595,557 samples, 0.59%)</title><rect x="17.8705%" y="149" width="0.5863%" height="15" fill="rgb(241,83,37)"/><text x="18.1205%" y="159.50"></text></g><g><title>check_private_in_public (112,171 samples, 0.11%)</title><rect x="18.4668%" y="165" width="0.1104%" height="15" fill="rgb(233,36,39)"/><text x="18.7168%" y="175.50"></text></g><g><title>death_checking (402,134 samples, 0.40%)</title><rect x="18.5773%" y="165" width="0.3959%" height="15" fill="rgb(226,3,54)"/><text x="18.8273%" y="175.50"></text></g><g><title>item_attrs (208,181 samples, 0.20%)</title><rect x="18.7682%" y="149" width="0.2049%" height="15" fill="rgb(245,192,40)"/><text x="19.0182%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (206,041 samples, 0.20%)</title><rect x="18.7703%" y="133" width="0.2028%" height="15" fill="rgb(238,167,29)"/><text x="19.0203%" y="143.50"></text></g><g><title>crate_lints (1,742,359 samples, 1.72%)</title><rect x="18.9746%" y="149" width="1.7152%" height="15" fill="rgb(232,182,51)"/><text x="19.2246%" y="159.50"></text></g><g><title>type_of (1,042,121 samples, 1.03%)</title><rect x="19.6639%" y="133" width="1.0259%" height="15" fill="rgb(231,60,39)"/><text x="19.9139%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (808,208 samples, 0.80%)</title><rect x="19.8941%" y="117" width="0.7956%" height="15" fill="rgb(208,69,12)"/><text x="20.1441%" y="127.50"></text></g><g><title>lint_checking (2,064,923 samples, 2.03%)</title><rect x="18.9731%" y="165" width="2.0327%" height="15" fill="rgb(235,93,37)"/><text x="19.2231%" y="175.50">l..</text></g><g><title>module_lints (321,094 samples, 0.32%)</title><rect x="20.6897%" y="149" width="0.3161%" height="15" fill="rgb(213,116,39)"/><text x="20.9397%" y="159.50"></text></g><g><title>lint_mod (318,794 samples, 0.31%)</title><rect x="20.6920%" y="133" width="0.3138%" height="15" fill="rgb(222,207,29)"/><text x="20.9420%" y="143.50"></text></g><g><title>privacy_access_levels (156,832 samples, 0.15%)</title><rect x="21.0058%" y="165" width="0.1544%" height="15" fill="rgb(206,96,30)"/><text x="21.2558%" y="175.50"></text></g><g><title>privacy_checking_modules (501,595 samples, 0.49%)</title><rect x="21.1602%" y="165" width="0.4938%" height="15" fill="rgb(218,138,4)"/><text x="21.4102%" y="175.50"></text></g><g><title>check_mod_privacy (500,125 samples, 0.49%)</title><rect x="21.1617%" y="149" width="0.4923%" height="15" fill="rgb(250,191,14)"/><text x="21.4117%" y="159.50"></text></g><g><title>misc_checking_3 (3,265,106 samples, 3.21%)</title><rect x="18.4568%" y="181" width="3.2142%" height="15" fill="rgb(239,60,40)"/><text x="18.7068%" y="191.50">mis..</text></g><g><title>impl_trait_ref (145,551 samples, 0.14%)</title><rect x="21.9001%" y="85" width="0.1433%" height="15" fill="rgb(206,27,48)"/><text x="22.1501%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (127,260 samples, 0.13%)</title><rect x="21.9181%" y="69" width="0.1253%" height="15" fill="rgb(225,35,8)"/><text x="22.1681%" y="79.50"></text></g><g><title>adt_destructor (296,933 samples, 0.29%)</title><rect x="21.7757%" y="133" width="0.2923%" height="15" fill="rgb(250,213,24)"/><text x="22.0257%" y="143.50"></text></g><g><title>coherent_trait (287,743 samples, 0.28%)</title><rect x="21.7847%" y="117" width="0.2833%" height="15" fill="rgb(247,123,22)"/><text x="22.0347%" y="127.50"></text></g><g><title>specialization_graph_of (286,473 samples, 0.28%)</title><rect x="21.7860%" y="101" width="0.2820%" height="15" fill="rgb(231,138,38)"/><text x="22.0360%" y="111.50"></text></g><g><title>is_copy_raw (240,732 samples, 0.24%)</title><rect x="22.0680%" y="133" width="0.2370%" height="15" fill="rgb(231,145,46)"/><text x="22.3180%" y="143.50"></text></g><g><title>evaluate_obligation (201,742 samples, 0.20%)</title><rect x="22.1063%" y="117" width="0.1986%" height="15" fill="rgb(251,118,11)"/><text x="22.3563%" y="127.50"></text></g><g><title>param_env (108,051 samples, 0.11%)</title><rect x="22.3049%" y="133" width="0.1064%" height="15" fill="rgb(217,147,25)"/><text x="22.5549%" y="143.50"></text></g><g><title>impl_parent (2,697,704 samples, 2.66%)</title><rect x="26.6186%" y="117" width="2.6556%" height="15" fill="rgb(247,81,37)"/><text x="26.8686%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,461,842 samples, 1.44%)</title><rect x="27.8352%" y="101" width="1.4390%" height="15" fill="rgb(209,12,38)"/><text x="28.0852%" y="111.50"></text></g><g><title>impl_trait_ref (5,153,516 samples, 5.07%)</title><rect x="29.2742%" y="117" width="5.0731%" height="15" fill="rgb(227,1,9)"/><text x="29.5242%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,118,067 samples, 4.05%)</title><rect x="30.2935%" y="101" width="4.0538%" height="15" fill="rgb(248,47,43)"/><text x="30.5435%" y="111.50">meta..</text></g><g><title>coherent_trait (13,798,274 samples, 13.58%)</title><rect x="21.7242%" y="149" width="13.5830%" height="15" fill="rgb(221,10,30)"/><text x="21.9742%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,100,316 samples, 12.90%)</title><rect x="22.4113%" y="133" width="12.8960%" height="15" fill="rgb(210,229,1)"/><text x="22.6613%" y="143.50">specialization_grap..</text></g><g><title>trait_impls_of (973,143 samples, 0.96%)</title><rect x="34.3493%" y="117" width="0.9580%" height="15" fill="rgb(222,148,37)"/><text x="34.5993%" y="127.50"></text></g><g><title>implementations_of_trait (235,393 samples, 0.23%)</title><rect x="35.0755%" y="101" width="0.2317%" height="15" fill="rgb(234,67,33)"/><text x="35.3255%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (193,703 samples, 0.19%)</title><rect x="35.1166%" y="85" width="0.1907%" height="15" fill="rgb(247,98,35)"/><text x="35.3666%" y="95.50"></text></g><g><title>coherence_checking (13,865,415 samples, 13.65%)</title><rect x="21.7048%" y="165" width="13.6491%" height="15" fill="rgb(247,138,52)"/><text x="21.9548%" y="175.50">coherence_checking</text></g><g><title>associated_item (228,732 samples, 0.23%)</title><rect x="51.9252%" y="101" width="0.2252%" height="15" fill="rgb(213,79,30)"/><text x="52.1752%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (183,311 samples, 0.18%)</title><rect x="51.9699%" y="85" width="0.1805%" height="15" fill="rgb(246,177,23)"/><text x="52.2199%" y="95.50"></text></g><g><title>associated_items (321,563 samples, 0.32%)</title><rect x="51.8494%" y="117" width="0.3165%" height="15" fill="rgb(230,62,27)"/><text x="52.0994%" y="127.50"></text></g><g><title>dropck_outlives (106,772 samples, 0.11%)</title><rect x="52.1983%" y="117" width="0.1051%" height="15" fill="rgb(216,154,8)"/><text x="52.4483%" y="127.50"></text></g><g><title>generics_of (639,337 samples, 0.63%)</title><rect x="54.3814%" y="101" width="0.6294%" height="15" fill="rgb(244,35,45)"/><text x="54.6314%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (537,797 samples, 0.53%)</title><rect x="54.4813%" y="85" width="0.5294%" height="15" fill="rgb(251,115,12)"/><text x="54.7313%" y="95.50"></text></g><g><title>impl_trait_ref (187,041 samples, 0.18%)</title><rect x="55.0980%" y="101" width="0.1841%" height="15" fill="rgb(240,54,50)"/><text x="55.3480%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (156,551 samples, 0.15%)</title><rect x="55.1280%" y="85" width="0.1541%" height="15" fill="rgb(233,84,52)"/><text x="55.3780%" y="95.50"></text></g><g><title>predicates_of (383,135 samples, 0.38%)</title><rect x="55.3100%" y="101" width="0.3772%" height="15" fill="rgb(207,117,47)"/><text x="55.5600%" y="111.50"></text></g><g><title>predicates_defined_on (222,563 samples, 0.22%)</title><rect x="55.4681%" y="85" width="0.2191%" height="15" fill="rgb(249,43,39)"/><text x="55.7181%" y="95.50"></text></g><g><title>specializes (557,107 samples, 0.55%)</title><rect x="55.6872%" y="101" width="0.5484%" height="15" fill="rgb(209,38,44)"/><text x="55.9372%" y="111.50"></text></g><g><title>param_env (351,527 samples, 0.35%)</title><rect x="55.8896%" y="85" width="0.3460%" height="15" fill="rgb(236,212,23)"/><text x="56.1396%" y="95.50"></text></g><g><title>def_span (162,082 samples, 0.16%)</title><rect x="56.0761%" y="69" width="0.1596%" height="15" fill="rgb(242,79,21)"/><text x="56.3261%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (145,412 samples, 0.14%)</title><rect x="56.0925%" y="53" width="0.1431%" height="15" fill="rgb(211,96,35)"/><text x="56.3425%" y="63.50"></text></g><g><title>trait_impls_of (366,825 samples, 0.36%)</title><rect x="56.2500%" y="101" width="0.3611%" height="15" fill="rgb(253,215,40)"/><text x="56.5000%" y="111.50"></text></g><g><title>implementations_of_trait (157,042 samples, 0.15%)</title><rect x="56.4565%" y="85" width="0.1546%" height="15" fill="rgb(211,81,21)"/><text x="56.7065%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (108,911 samples, 0.11%)</title><rect x="56.5039%" y="69" width="0.1072%" height="15" fill="rgb(208,190,38)"/><text x="56.7539%" y="79.50"></text></g><g><title>evaluate_obligation (4,382,521 samples, 4.31%)</title><rect x="52.3034%" y="117" width="4.3142%" height="15" fill="rgb(235,213,38)"/><text x="52.5534%" y="127.50">evalu..</text></g><g><title>generics_of (654,550 samples, 0.64%)</title><rect x="56.7153%" y="117" width="0.6443%" height="15" fill="rgb(237,122,38)"/><text x="56.9653%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (512,499 samples, 0.50%)</title><rect x="56.8551%" y="101" width="0.5045%" height="15" fill="rgb(244,218,35)"/><text x="57.1051%" y="111.50"></text></g><g><title>item_attrs (154,402 samples, 0.15%)</title><rect x="57.4742%" y="117" width="0.1520%" height="15" fill="rgb(240,68,47)"/><text x="57.7242%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (148,952 samples, 0.15%)</title><rect x="57.4795%" y="101" width="0.1466%" height="15" fill="rgb(210,16,53)"/><text x="57.7295%" y="111.50"></text></g><g><title>object_safety_violations (155,852 samples, 0.15%)</title><rect x="57.6776%" y="117" width="0.1534%" height="15" fill="rgb(235,124,12)"/><text x="57.9276%" y="127.50"></text></g><g><title>predicates_of (267,562 samples, 0.26%)</title><rect x="57.8546%" y="117" width="0.2634%" height="15" fill="rgb(224,169,11)"/><text x="58.1046%" y="127.50"></text></g><g><title>predicates_defined_on (183,411 samples, 0.18%)</title><rect x="57.9374%" y="101" width="0.1805%" height="15" fill="rgb(250,166,2)"/><text x="58.1874%" y="111.50"></text></g><g><title>associated_item (163,472 samples, 0.16%)</title><rect x="58.9050%" y="85" width="0.1609%" height="15" fill="rgb(242,216,29)"/><text x="59.1550%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (126,212 samples, 0.12%)</title><rect x="58.9416%" y="69" width="0.1242%" height="15" fill="rgb(230,116,27)"/><text x="59.1916%" y="79.50"></text></g><g><title>associated_items (235,863 samples, 0.23%)</title><rect x="58.8421%" y="101" width="0.2322%" height="15" fill="rgb(228,99,48)"/><text x="59.0921%" y="111.50"></text></g><g><title>evaluate_obligation (133,961 samples, 0.13%)</title><rect x="59.1293%" y="101" width="0.1319%" height="15" fill="rgb(253,11,6)"/><text x="59.3793%" y="111.50"></text></g><g><title>typeck (1,190,534 samples, 1.17%)</title><rect x="58.3110%" y="117" width="1.1720%" height="15" fill="rgb(247,143,39)"/><text x="58.5610%" y="127.50"></text></g><g><title>item_bodies_checking (24,504,163 samples, 24.12%)</title><rect x="35.3851%" y="165" width="24.1219%" height="15" fill="rgb(236,97,10)"/><text x="35.6351%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (24,501,533 samples, 24.12%)</title><rect x="35.3877%" y="149" width="24.1193%" height="15" fill="rgb(233,208,19)"/><text x="35.6377%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (24,464,463 samples, 24.08%)</title><rect x="35.4242%" y="133" width="24.0828%" height="15" fill="rgb(216,164,2)"/><text x="35.6742%" y="143.50">typeck</text></g><g><title>item_types_checking (546,476 samples, 0.54%)</title><rect x="59.5070%" y="165" width="0.5380%" height="15" fill="rgb(220,129,5)"/><text x="59.7570%" y="175.50"></text></g><g><title>check_mod_item_types (544,056 samples, 0.54%)</title><rect x="59.5094%" y="149" width="0.5356%" height="15" fill="rgb(242,17,10)"/><text x="59.7594%" y="159.50"></text></g><g><title>fn_sig (245,251 samples, 0.24%)</title><rect x="60.3481%" y="133" width="0.2414%" height="15" fill="rgb(242,107,0)"/><text x="60.5981%" y="143.50"></text></g><g><title>is_late_bound_map (489,145 samples, 0.48%)</title><rect x="60.7026%" y="117" width="0.4815%" height="15" fill="rgb(251,28,31)"/><text x="60.9526%" y="127.50"></text></g><g><title>resolve_lifetimes (465,425 samples, 0.46%)</title><rect x="60.7259%" y="101" width="0.4582%" height="15" fill="rgb(233,223,10)"/><text x="60.9759%" y="111.50"></text></g><g><title>lint_levels (200,362 samples, 0.20%)</title><rect x="60.9869%" y="85" width="0.1972%" height="15" fill="rgb(215,21,27)"/><text x="61.2369%" y="95.50"></text></g><g><title>named_region_map (209,323 samples, 0.21%)</title><rect x="61.1841%" y="117" width="0.2061%" height="15" fill="rgb(232,23,21)"/><text x="61.4341%" y="127.50"></text></g><g><title>resolve_lifetimes (193,753 samples, 0.19%)</title><rect x="61.1994%" y="101" width="0.1907%" height="15" fill="rgb(244,5,23)"/><text x="61.4494%" y="111.50"></text></g><g><title>generics_of (836,751 samples, 0.82%)</title><rect x="60.5895%" y="133" width="0.8237%" height="15" fill="rgb(226,81,46)"/><text x="60.8395%" y="143.50"></text></g><g><title>explicit_predicates_of (129,211 samples, 0.13%)</title><rect x="61.6454%" y="101" width="0.1272%" height="15" fill="rgb(247,70,30)"/><text x="61.8954%" y="111.50"></text></g><g><title>predicates_of (457,794 samples, 0.45%)</title><rect x="61.5062%" y="133" width="0.4507%" height="15" fill="rgb(212,68,19)"/><text x="61.7562%" y="143.50"></text></g><g><title>predicates_defined_on (407,714 samples, 0.40%)</title><rect x="61.5555%" y="117" width="0.4014%" height="15" fill="rgb(240,187,13)"/><text x="61.8055%" y="127.50"></text></g><g><title>inferred_outlives_of (187,202 samples, 0.18%)</title><rect x="61.7726%" y="101" width="0.1843%" height="15" fill="rgb(223,113,26)"/><text x="62.0226%" y="111.50"></text></g><g><title>inferred_outlives_crate (164,482 samples, 0.16%)</title><rect x="61.7949%" y="85" width="0.1619%" height="15" fill="rgb(206,192,2)"/><text x="62.0449%" y="95.50"></text></g><g><title>type_collecting (2,093,643 samples, 2.06%)</title><rect x="60.0459%" y="165" width="2.0610%" height="15" fill="rgb(241,108,4)"/><text x="60.2959%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,083,783 samples, 2.05%)</title><rect x="60.0556%" y="149" width="2.0513%" height="15" fill="rgb(247,173,49)"/><text x="60.3056%" y="159.50">c..</text></g><g><title>type_of (152,432 samples, 0.15%)</title><rect x="61.9568%" y="133" width="0.1501%" height="15" fill="rgb(224,114,35)"/><text x="62.2068%" y="143.50"></text></g><g><title>evaluate_obligation (202,552 samples, 0.20%)</title><rect x="62.9005%" y="133" width="0.1994%" height="15" fill="rgb(245,159,27)"/><text x="63.1505%" y="143.50"></text></g><g><title>region_scope_tree (286,072 samples, 0.28%)</title><rect x="63.2939%" y="133" width="0.2816%" height="15" fill="rgb(245,172,44)"/><text x="63.5439%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,398,004 samples, 1.38%)</title><rect x="62.2182%" y="149" width="1.3762%" height="15" fill="rgb(236,23,11)"/><text x="62.4682%" y="159.50"></text></g><g><title>evaluate_obligation (126,872 samples, 0.12%)</title><rect x="64.3722%" y="133" width="0.1249%" height="15" fill="rgb(205,117,38)"/><text x="64.6222%" y="143.50"></text></g><g><title>param_env (127,432 samples, 0.13%)</title><rect x="64.5756%" y="133" width="0.1254%" height="15" fill="rgb(237,72,25)"/><text x="64.8256%" y="143.50"></text></g><g><title>region_scope_tree (106,701 samples, 0.11%)</title><rect x="64.7527%" y="133" width="0.1050%" height="15" fill="rgb(244,70,9)"/><text x="65.0027%" y="143.50"></text></g><g><title>analysis (65,165,066 samples, 64.15%)</title><rect x="0.7731%" y="197" width="64.1485%" height="15" fill="rgb(217,125,39)"/><text x="1.0231%" y="207.50">analysis</text></g><g><title>type_check_crate (43,935,990 samples, 43.25%)</title><rect x="21.6710%" y="181" width="43.2506%" height="15" fill="rgb(235,36,10)"/><text x="21.9210%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,857,041 samples, 2.81%)</title><rect x="62.1091%" y="165" width="2.8125%" height="15" fill="rgb(251,123,47)"/><text x="62.3591%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,348,187 samples, 1.33%)</title><rect x="63.5944%" y="149" width="1.3272%" height="15" fill="rgb(221,13,13)"/><text x="63.8444%" y="159.50"></text></g><g><title>codegen_crate (394,464 samples, 0.39%)</title><rect x="64.9315%" y="197" width="0.3883%" height="15" fill="rgb(238,131,9)"/><text x="65.1815%" y="207.50"></text></g><g><title>AST_validation (189,753 samples, 0.19%)</title><rect x="65.5154%" y="181" width="0.1868%" height="15" fill="rgb(211,50,8)"/><text x="65.7654%" y="191.50"></text></g><g><title>complete_gated_feature_checking (112,011 samples, 0.11%)</title><rect x="65.7022%" y="181" width="0.1103%" height="15" fill="rgb(245,182,24)"/><text x="65.9522%" y="191.50"></text></g><g><title>metadata_load_macro (505,166 samples, 0.50%)</title><rect x="79.4131%" y="149" width="0.4973%" height="15" fill="rgb(242,14,37)"/><text x="79.6631%" y="159.50"></text></g><g><title>macro_expand_crate (16,536,524 samples, 16.28%)</title><rect x="65.8800%" y="181" width="16.2786%" height="15" fill="rgb(246,228,12)"/><text x="66.1300%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (16,514,884 samples, 16.26%)</title><rect x="65.9013%" y="165" width="16.2573%" height="15" fill="rgb(213,55,15)"/><text x="66.1513%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,283,856 samples, 2.25%)</title><rect x="79.9104%" y="149" width="2.2482%" height="15" fill="rgb(209,9,3)"/><text x="80.1604%" y="159.50">m..</text></g><g><title>metadata_register_crate (819,937 samples, 0.81%)</title><rect x="81.3515%" y="133" width="0.8071%" height="15" fill="rgb(230,59,30)"/><text x="81.6015%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (153,392 samples, 0.15%)</title><rect x="82.1624%" y="181" width="0.1510%" height="15" fill="rgb(209,121,21)"/><text x="82.4124%" y="191.50"></text></g><g><title>finalize_macro_resolutions (358,484 samples, 0.35%)</title><rect x="82.3429%" y="165" width="0.3529%" height="15" fill="rgb(220,109,13)"/><text x="82.5929%" y="175.50"></text></g><g><title>late_resolve_crate (3,465,838 samples, 3.41%)</title><rect x="82.6958%" y="165" width="3.4118%" height="15" fill="rgb(232,18,1)"/><text x="82.9458%" y="175.50">lat..</text></g><g><title>configure_and_expand (21,278,676 samples, 20.95%)</title><rect x="65.3198%" y="197" width="20.9467%" height="15" fill="rgb(215,41,42)"/><text x="65.5698%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,015,704 samples, 3.95%)</title><rect x="82.3134%" y="181" width="3.9531%" height="15" fill="rgb(224,123,36)"/><text x="82.5634%" y="191.50">reso..</text></g><g><title>drop_ast (277,373 samples, 0.27%)</title><rect x="86.2665%" y="197" width="0.2730%" height="15" fill="rgb(240,125,3)"/><text x="86.5165%" y="207.50"></text></g><g><title>early_lint_checks (1,131,213 samples, 1.11%)</title><rect x="86.5541%" y="197" width="1.1136%" height="15" fill="rgb(205,98,50)"/><text x="86.8041%" y="207.50"></text></g><g><title>free_global_ctxt (3,507,788 samples, 3.45%)</title><rect x="87.6677%" y="197" width="3.4531%" height="15" fill="rgb(205,185,37)"/><text x="87.9177%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (808,810 samples, 0.80%)</title><rect x="91.1207%" y="197" width="0.7962%" height="15" fill="rgb(238,207,15)"/><text x="91.3707%" y="207.50"></text></g><g><title>hir_lowering (4,355,988 samples, 4.29%)</title><rect x="91.9169%" y="197" width="4.2880%" height="15" fill="rgb(213,199,42)"/><text x="92.1669%" y="207.50">hir_l..</text></g><g><title>parse_crate (2,247,365 samples, 2.21%)</title><rect x="96.2713%" y="197" width="2.2123%" height="15" fill="rgb(235,201,11)"/><text x="96.5213%" y="207.50">p..</text></g><g><title>prepare_outputs (255,482 samples, 0.25%)</title><rect x="98.4910%" y="197" width="0.2515%" height="15" fill="rgb(207,46,11)"/><text x="98.7410%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (841,069 samples, 0.83%)</title><rect x="98.7425%" y="197" width="0.8279%" height="15" fill="rgb(241,35,35)"/><text x="98.9925%" y="207.50"></text></g><g><title>setup_global_ctxt (116,741 samples, 0.11%)</title><rect x="99.5808%" y="197" width="0.1149%" height="15" fill="rgb(243,32,47)"/><text x="99.8308%" y="207.50"></text></g><g><title>all (101,584,692 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (101,584,692 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (309,083 samples, 0.30%)</title><rect x="99.6957%" y="197" width="0.3043%" height="15" fill="rgb(243,110,44)"/><text x="99.9457%" y="207.50"></text></g></svg></svg>