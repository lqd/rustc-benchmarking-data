<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,980,669 samples, 0.11%)</title><rect x="10.9412%" y="149" width="0.1126%" height="15" fill="rgb(227,0,7)"/><text x="11.1912%" y="159.50"></text></g><g><title>is_late_bound_map (2,184,105 samples, 0.12%)</title><rect x="11.0539%" y="149" width="0.1242%" height="15" fill="rgb(217,0,24)"/><text x="11.3039%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,590,042 samples, 0.20%)</title><rect x="14.9602%" y="85" width="0.2042%" height="15" fill="rgb(221,193,54)"/><text x="15.2102%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,518,082 samples, 0.20%)</title><rect x="14.9643%" y="69" width="0.2001%" height="15" fill="rgb(248,212,6)"/><text x="15.2143%" y="79.50"></text></g><g><title>eval_to_allocation_raw (3,407,142 samples, 0.19%)</title><rect x="14.9706%" y="53" width="0.1938%" height="15" fill="rgb(208,68,35)"/><text x="15.2206%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,180,985 samples, 0.12%)</title><rect x="15.0404%" y="37" width="0.1240%" height="15" fill="rgb(232,128,0)"/><text x="15.2904%" y="47.50"></text></g><g><title>is_copy_raw (6,192,169 samples, 0.35%)</title><rect x="15.2785%" y="69" width="0.3522%" height="15" fill="rgb(207,160,47)"/><text x="15.5285%" y="79.50"></text></g><g><title>evaluate_obligation (4,820,342 samples, 0.27%)</title><rect x="15.3565%" y="53" width="0.2741%" height="15" fill="rgb(228,23,34)"/><text x="15.6065%" y="63.50"></text></g><g><title>needs_drop_raw (8,031,210 samples, 0.46%)</title><rect x="15.1741%" y="85" width="0.4568%" height="15" fill="rgb(218,30,26)"/><text x="15.4241%" y="95.50"></text></g><g><title>resolve_instance (4,697,912 samples, 0.27%)</title><rect x="15.6900%" y="85" width="0.2672%" height="15" fill="rgb(220,122,19)"/><text x="15.9400%" y="95.50"></text></g><g><title>thir_body (15,349,099 samples, 0.87%)</title><rect x="15.9729%" y="85" width="0.8729%" height="15" fill="rgb(250,228,42)"/><text x="16.2229%" y="95.50"></text></g><g><title>mir_const (87,021,646 samples, 4.95%)</title><rect x="11.9212%" y="133" width="4.9491%" height="15" fill="rgb(240,193,28)"/><text x="12.1712%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (77,009,204 samples, 4.38%)</title><rect x="12.4907%" y="117" width="4.3797%" height="15" fill="rgb(216,20,37)"/><text x="12.7407%" y="127.50">unsaf..</text></g><g><title>mir_built (70,471,599 samples, 4.01%)</title><rect x="12.8625%" y="101" width="4.0079%" height="15" fill="rgb(206,188,39)"/><text x="13.1125%" y="111.50">mir_..</text></g><g><title>thir_body (4,055,380 samples, 0.23%)</title><rect x="17.8706%" y="69" width="0.2306%" height="15" fill="rgb(217,207,13)"/><text x="18.1206%" y="79.50"></text></g><g><title>mir_const (16,251,289 samples, 0.92%)</title><rect x="17.1814%" y="117" width="0.9242%" height="15" fill="rgb(231,73,38)"/><text x="17.4314%" y="127.50"></text></g><g><title>unsafety_check_result (13,522,820 samples, 0.77%)</title><rect x="17.3366%" y="101" width="0.7691%" height="15" fill="rgb(225,20,46)"/><text x="17.5866%" y="111.50"></text></g><g><title>mir_built (12,211,292 samples, 0.69%)</title><rect x="17.4112%" y="85" width="0.6945%" height="15" fill="rgb(210,31,41)"/><text x="17.6612%" y="95.50"></text></g><g><title>mir_const_qualif (21,738,445 samples, 1.24%)</title><rect x="16.8704%" y="133" width="1.2363%" height="15" fill="rgb(221,200,47)"/><text x="17.1204%" y="143.50"></text></g><g><title>mir_promoted (121,566,124 samples, 6.91%)</title><rect x="11.1930%" y="149" width="6.9137%" height="15" fill="rgb(226,26,5)"/><text x="11.4430%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (2,620,391 samples, 0.15%)</title><rect x="18.1086%" y="149" width="0.1490%" height="15" fill="rgb(249,33,26)"/><text x="18.3586%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,216,041 samples, 0.13%)</title><rect x="18.2576%" y="149" width="0.1260%" height="15" fill="rgb(235,183,28)"/><text x="18.5076%" y="159.50"></text></g><g><title>type_op_prove_predicate (15,322,822 samples, 0.87%)</title><rect x="18.4792%" y="149" width="0.8714%" height="15" fill="rgb(221,5,38)"/><text x="18.7292%" y="159.50"></text></g><g><title>MIR_borrow_checking (335,612,651 samples, 19.09%)</title><rect x="0.2644%" y="181" width="19.0871%" height="15" fill="rgb(247,18,42)"/><text x="0.5144%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (333,303,870 samples, 18.96%)</title><rect x="0.3957%" y="165" width="18.9558%" height="15" fill="rgb(241,131,45)"/><text x="0.6457%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (8,144,172 samples, 0.46%)</title><rect x="19.3515%" y="181" width="0.4632%" height="15" fill="rgb(249,31,29)"/><text x="19.6015%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,982,159 samples, 0.40%)</title><rect x="19.4176%" y="165" width="0.3971%" height="15" fill="rgb(225,111,53)"/><text x="19.6676%" y="175.50"></text></g><g><title>hir_module_items (2,741,290 samples, 0.16%)</title><rect x="19.8146%" y="181" width="0.1559%" height="15" fill="rgb(238,160,17)"/><text x="20.0646%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,833,922 samples, 0.16%)</title><rect x="20.2455%" y="149" width="0.1612%" height="15" fill="rgb(214,148,48)"/><text x="20.4955%" y="159.50"></text></g><g><title>check_mod_attrs (7,580,365 samples, 0.43%)</title><rect x="19.9756%" y="165" width="0.4311%" height="15" fill="rgb(232,36,49)"/><text x="20.2256%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (3,460,171 samples, 0.20%)</title><rect x="20.5810%" y="165" width="0.1968%" height="15" fill="rgb(209,103,24)"/><text x="20.8310%" y="175.50"></text></g><g><title>misc_checking_1 (14,738,876 samples, 0.84%)</title><rect x="19.9706%" y="181" width="0.8382%" height="15" fill="rgb(229,88,8)"/><text x="20.2206%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (6,470,643 samples, 0.37%)</title><rect x="20.8090%" y="165" width="0.3680%" height="15" fill="rgb(213,181,19)"/><text x="21.0590%" y="175.50"></text></g><g><title>check_mod_liveness (5,038,726 samples, 0.29%)</title><rect x="20.8905%" y="149" width="0.2866%" height="15" fill="rgb(254,191,54)"/><text x="21.1405%" y="159.50"></text></g><g><title>misc_checking_2 (16,541,456 samples, 0.94%)</title><rect x="20.8088%" y="181" width="0.9408%" height="15" fill="rgb(241,83,37)"/><text x="21.0588%" y="191.50"></text></g><g><title>match_checking (10,067,303 samples, 0.57%)</title><rect x="21.1770%" y="165" width="0.5726%" height="15" fill="rgb(233,36,39)"/><text x="21.4270%" y="175.50"></text></g><g><title>check_match (9,366,295 samples, 0.53%)</title><rect x="21.2169%" y="149" width="0.5327%" height="15" fill="rgb(226,3,54)"/><text x="21.4669%" y="159.50"></text></g><g><title>check_private_in_public (3,572,631 samples, 0.20%)</title><rect x="21.7508%" y="165" width="0.2032%" height="15" fill="rgb(245,192,40)"/><text x="22.0008%" y="175.50"></text></g><g><title>death_checking (6,303,191 samples, 0.36%)</title><rect x="21.9540%" y="165" width="0.3585%" height="15" fill="rgb(238,167,29)"/><text x="22.2040%" y="175.50"></text></g><g><title>eval_to_const_value_raw (6,034,568 samples, 0.34%)</title><rect x="23.3456%" y="85" width="0.3432%" height="15" fill="rgb(232,182,51)"/><text x="23.5956%" y="95.50"></text></g><g><title>eval_to_const_value_raw (5,927,898 samples, 0.34%)</title><rect x="23.3517%" y="69" width="0.3371%" height="15" fill="rgb(231,60,39)"/><text x="23.6017%" y="79.50"></text></g><g><title>eval_to_allocation_raw (5,867,646 samples, 0.33%)</title><rect x="23.3551%" y="53" width="0.3337%" height="15" fill="rgb(208,69,12)"/><text x="23.6051%" y="63.50"></text></g><g><title>promoted_mir (1,864,821 samples, 0.11%)</title><rect x="23.5828%" y="37" width="0.1061%" height="15" fill="rgb(235,93,37)"/><text x="23.8328%" y="47.50"></text></g><g><title>eval_to_allocation_raw (11,387,533 samples, 0.65%)</title><rect x="23.0427%" y="133" width="0.6476%" height="15" fill="rgb(213,116,39)"/><text x="23.2927%" y="143.50"></text></g><g><title>eval_to_allocation_raw (11,302,053 samples, 0.64%)</title><rect x="23.0475%" y="117" width="0.6428%" height="15" fill="rgb(222,207,29)"/><text x="23.2975%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,225,672 samples, 0.35%)</title><rect x="23.3362%" y="101" width="0.3541%" height="15" fill="rgb(206,96,30)"/><text x="23.5862%" y="111.50"></text></g><g><title>param_env (3,510,288 samples, 0.20%)</title><rect x="23.7731%" y="133" width="0.1996%" height="15" fill="rgb(218,138,4)"/><text x="24.0231%" y="143.50"></text></g><g><title>predicates_of (1,780,798 samples, 0.10%)</title><rect x="23.8714%" y="117" width="0.1013%" height="15" fill="rgb(250,191,14)"/><text x="24.1214%" y="127.50"></text></g><g><title>crate_lints (31,380,543 samples, 1.78%)</title><rect x="22.3126%" y="149" width="1.7847%" height="15" fill="rgb(239,60,40)"/><text x="22.5626%" y="159.50">c..</text></g><g><title>type_of (1,826,101 samples, 0.10%)</title><rect x="23.9935%" y="133" width="0.1039%" height="15" fill="rgb(206,27,48)"/><text x="24.2435%" y="143.50"></text></g><g><title>lint_checking (41,404,046 samples, 2.35%)</title><rect x="22.3124%" y="165" width="2.3547%" height="15" fill="rgb(225,35,8)"/><text x="22.5624%" y="175.50">l..</text></g><g><title>module_lints (10,020,013 samples, 0.57%)</title><rect x="24.0973%" y="149" width="0.5699%" height="15" fill="rgb(250,213,24)"/><text x="24.3473%" y="159.50"></text></g><g><title>lint_mod (9,985,713 samples, 0.57%)</title><rect x="24.0993%" y="133" width="0.5679%" height="15" fill="rgb(247,123,22)"/><text x="24.3493%" y="143.50"></text></g><g><title>privacy_access_levels (4,929,615 samples, 0.28%)</title><rect x="24.6672%" y="165" width="0.2804%" height="15" fill="rgb(231,138,38)"/><text x="24.9172%" y="175.50"></text></g><g><title>privacy_checking_modules (15,457,665 samples, 0.88%)</title><rect x="24.9475%" y="165" width="0.8791%" height="15" fill="rgb(231,145,46)"/><text x="25.1975%" y="175.50"></text></g><g><title>check_mod_privacy (15,425,664 samples, 0.88%)</title><rect x="24.9494%" y="149" width="0.8773%" height="15" fill="rgb(251,118,11)"/><text x="25.1994%" y="159.50"></text></g><g><title>misc_checking_3 (71,837,080 samples, 4.09%)</title><rect x="21.7496%" y="181" width="4.0855%" height="15" fill="rgb(217,147,25)"/><text x="21.9996%" y="191.50">misc..</text></g><g><title>impl_parent (5,847,625 samples, 0.33%)</title><rect x="26.5211%" y="117" width="0.3326%" height="15" fill="rgb(247,81,37)"/><text x="26.7711%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,969,884 samples, 0.17%)</title><rect x="26.6847%" y="101" width="0.1689%" height="15" fill="rgb(209,12,38)"/><text x="26.9347%" y="111.50"></text></g><g><title>impl_trait_ref (9,500,119 samples, 0.54%)</title><rect x="26.8537%" y="117" width="0.5403%" height="15" fill="rgb(227,1,9)"/><text x="27.1037%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,118,661 samples, 0.40%)</title><rect x="26.9891%" y="101" width="0.4049%" height="15" fill="rgb(248,47,43)"/><text x="27.2391%" y="111.50"></text></g><g><title>trait_impls_of (2,242,091 samples, 0.13%)</title><rect x="27.3991%" y="117" width="0.1275%" height="15" fill="rgb(221,10,30)"/><text x="27.6491%" y="127.50"></text></g><g><title>coherent_trait (28,294,880 samples, 1.61%)</title><rect x="25.9175%" y="149" width="1.6092%" height="15" fill="rgb(210,229,1)"/><text x="26.1675%" y="159.50"></text></g><g><title>specialization_graph_of (27,639,993 samples, 1.57%)</title><rect x="25.9548%" y="133" width="1.5719%" height="15" fill="rgb(222,148,37)"/><text x="26.2048%" y="143.50"></text></g><g><title>coherence_checking (29,014,167 samples, 1.65%)</title><rect x="25.9150%" y="165" width="1.6501%" height="15" fill="rgb(234,67,33)"/><text x="26.1650%" y="175.50"></text></g><g><title>dropck_outlives (2,705,523 samples, 0.15%)</title><rect x="44.6053%" y="117" width="0.1539%" height="15" fill="rgb(247,98,35)"/><text x="44.8553%" y="127.50"></text></g><g><title>evaluate_obligation (7,417,049 samples, 0.42%)</title><rect x="44.7592%" y="117" width="0.4218%" height="15" fill="rgb(247,138,52)"/><text x="45.0092%" y="127.50"></text></g><g><title>method_autoderef_steps (2,083,573 samples, 0.12%)</title><rect x="45.2719%" y="117" width="0.1185%" height="15" fill="rgb(213,79,30)"/><text x="45.5219%" y="127.50"></text></g><g><title>evaluate_obligation (5,032,332 samples, 0.29%)</title><rect x="47.9306%" y="101" width="0.2862%" height="15" fill="rgb(246,177,23)"/><text x="48.1806%" y="111.50"></text></g><g><title>typeck (50,695,059 samples, 2.88%)</title><rect x="45.5082%" y="117" width="2.8831%" height="15" fill="rgb(230,62,27)"/><text x="45.7582%" y="127.50">ty..</text></g><g><title>item_bodies_checking (365,991,504 samples, 20.81%)</title><rect x="27.5970%" y="165" width="20.8148%" height="15" fill="rgb(216,154,8)"/><text x="27.8470%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (365,987,104 samples, 20.81%)</title><rect x="27.5973%" y="149" width="20.8145%" height="15" fill="rgb(244,35,45)"/><text x="27.8473%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (363,402,093 samples, 20.67%)</title><rect x="27.7443%" y="133" width="20.6675%" height="15" fill="rgb(251,115,12)"/><text x="27.9943%" y="143.50">typeck</text></g><g><title>item_types_checking (51,718,892 samples, 2.94%)</title><rect x="48.4118%" y="165" width="2.9414%" height="15" fill="rgb(240,54,50)"/><text x="48.6618%" y="175.50">it..</text></g><g><title>check_mod_item_types (51,684,842 samples, 2.94%)</title><rect x="48.4137%" y="149" width="2.9394%" height="15" fill="rgb(233,84,52)"/><text x="48.6637%" y="159.50">ch..</text></g><g><title>typeck (36,019,428 samples, 2.05%)</title><rect x="49.3047%" y="133" width="2.0485%" height="15" fill="rgb(207,117,47)"/><text x="49.5547%" y="143.50">t..</text></g><g><title>mir_const_qualif (3,562,660 samples, 0.20%)</title><rect x="51.8092%" y="85" width="0.2026%" height="15" fill="rgb(249,43,39)"/><text x="52.0592%" y="95.50"></text></g><g><title>mir_const (2,978,584 samples, 0.17%)</title><rect x="51.8424%" y="69" width="0.1694%" height="15" fill="rgb(209,38,44)"/><text x="52.0924%" y="79.50"></text></g><g><title>unsafety_check_result (2,045,827 samples, 0.12%)</title><rect x="51.8954%" y="53" width="0.1164%" height="15" fill="rgb(236,212,23)"/><text x="52.1454%" y="63.50"></text></g><g><title>mir_built (1,773,054 samples, 0.10%)</title><rect x="51.9109%" y="37" width="0.1008%" height="15" fill="rgb(242,79,21)"/><text x="52.1609%" y="47.50"></text></g><g><title>mir_borrowck (7,930,192 samples, 0.45%)</title><rect x="52.2559%" y="53" width="0.4510%" height="15" fill="rgb(211,96,35)"/><text x="52.5059%" y="63.50"></text></g><g><title>mir_for_ctfe (12,276,729 samples, 0.70%)</title><rect x="52.0118%" y="85" width="0.6982%" height="15" fill="rgb(253,215,40)"/><text x="52.2618%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,210,539 samples, 0.64%)</title><rect x="52.0724%" y="69" width="0.6376%" height="15" fill="rgb(211,81,21)"/><text x="52.3224%" y="79.50"></text></g><g><title>eval_to_const_value_raw (23,955,041 samples, 1.36%)</title><rect x="51.6102%" y="133" width="1.3624%" height="15" fill="rgb(208,190,38)"/><text x="51.8602%" y="143.50"></text></g><g><title>eval_to_const_value_raw (23,792,599 samples, 1.35%)</title><rect x="51.6194%" y="117" width="1.3531%" height="15" fill="rgb(235,213,38)"/><text x="51.8694%" y="127.50"></text></g><g><title>eval_to_allocation_raw (23,494,155 samples, 1.34%)</title><rect x="51.6364%" y="101" width="1.3362%" height="15" fill="rgb(237,122,38)"/><text x="51.8864%" y="111.50"></text></g><g><title>typeck (4,586,430 samples, 0.26%)</title><rect x="52.7117%" y="85" width="0.2608%" height="15" fill="rgb(244,218,35)"/><text x="52.9617%" y="95.50"></text></g><g><title>fn_sig (3,624,700 samples, 0.21%)</title><rect x="52.9726%" y="133" width="0.2061%" height="15" fill="rgb(240,68,47)"/><text x="53.2226%" y="143.50"></text></g><g><title>named_region_map (8,041,945 samples, 0.46%)</title><rect x="53.2716%" y="117" width="0.4574%" height="15" fill="rgb(210,16,53)"/><text x="53.5216%" y="127.50"></text></g><g><title>resolve_lifetimes (7,745,813 samples, 0.44%)</title><rect x="53.2884%" y="101" width="0.4405%" height="15" fill="rgb(235,124,12)"/><text x="53.5384%" y="111.50"></text></g><g><title>lint_levels (3,679,052 samples, 0.21%)</title><rect x="53.5197%" y="85" width="0.2092%" height="15" fill="rgb(224,169,11)"/><text x="53.7697%" y="95.50"></text></g><g><title>generics_of (9,877,368 samples, 0.56%)</title><rect x="53.1787%" y="133" width="0.5617%" height="15" fill="rgb(250,166,2)"/><text x="53.4287%" y="143.50"></text></g><g><title>predicates_of (6,510,557 samples, 0.37%)</title><rect x="53.8668%" y="133" width="0.3703%" height="15" fill="rgb(242,216,29)"/><text x="54.1168%" y="143.50"></text></g><g><title>predicates_defined_on (5,645,176 samples, 0.32%)</title><rect x="53.9160%" y="117" width="0.3211%" height="15" fill="rgb(230,116,27)"/><text x="54.1660%" y="127.50"></text></g><g><title>inferred_outlives_of (2,497,253 samples, 0.14%)</title><rect x="54.0951%" y="101" width="0.1420%" height="15" fill="rgb(228,99,48)"/><text x="54.3451%" y="111.50"></text></g><g><title>inferred_outlives_crate (2,217,996 samples, 0.13%)</title><rect x="54.1109%" y="85" width="0.1261%" height="15" fill="rgb(253,11,6)"/><text x="54.3609%" y="95.50"></text></g><g><title>type_collecting (51,834,555 samples, 2.95%)</title><rect x="51.3550%" y="165" width="2.9479%" height="15" fill="rgb(247,143,39)"/><text x="51.6050%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (51,788,794 samples, 2.95%)</title><rect x="51.3576%" y="149" width="2.9453%" height="15" fill="rgb(236,97,10)"/><text x="51.6076%" y="159.50">co..</text></g><g><title>evaluate_obligation (3,972,561 samples, 0.23%)</title><rect x="55.7245%" y="133" width="0.2259%" height="15" fill="rgb(233,208,19)"/><text x="55.9745%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,999,893 samples, 0.11%)</title><rect x="55.9558%" y="133" width="0.1137%" height="15" fill="rgb(216,164,2)"/><text x="56.2058%" y="143.50"></text></g><g><title>param_env (3,288,616 samples, 0.19%)</title><rect x="56.1491%" y="133" width="0.1870%" height="15" fill="rgb(220,129,5)"/><text x="56.3991%" y="143.50"></text></g><g><title>region_scope_tree (5,441,212 samples, 0.31%)</title><rect x="56.3394%" y="133" width="0.3095%" height="15" fill="rgb(242,17,10)"/><text x="56.5894%" y="143.50"></text></g><g><title>check_impl_item_well_formed (38,469,149 samples, 2.19%)</title><rect x="54.4687%" y="149" width="2.1878%" height="15" fill="rgb(242,107,0)"/><text x="54.7187%" y="159.50">c..</text></g><g><title>evaluate_obligation (5,193,862 samples, 0.30%)</title><rect x="57.3210%" y="133" width="0.2954%" height="15" fill="rgb(251,28,31)"/><text x="57.5710%" y="143.50"></text></g><g><title>param_env (2,824,199 samples, 0.16%)</title><rect x="57.6617%" y="133" width="0.1606%" height="15" fill="rgb(233,223,10)"/><text x="57.9117%" y="143.50"></text></g><g><title>check_item_well_formed (22,419,026 samples, 1.28%)</title><rect x="56.6565%" y="149" width="1.2750%" height="15" fill="rgb(215,21,27)"/><text x="56.9065%" y="159.50"></text></g><g><title>analysis (1,019,814,311 samples, 58.00%)</title><rect x="0.0564%" y="197" width="57.9992%" height="15" fill="rgb(232,23,21)"/><text x="0.3064%" y="207.50">analysis</text></g><g><title>type_check_crate (566,541,174 samples, 32.22%)</title><rect x="25.8351%" y="181" width="32.2205%" height="15" fill="rgb(244,5,23)"/><text x="26.0851%" y="191.50">type_check_crate</text></g><g><title>wf_checking (65,779,731 samples, 3.74%)</title><rect x="54.3146%" y="165" width="3.7410%" height="15" fill="rgb(226,81,46)"/><text x="54.5646%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (2,181,302 samples, 0.12%)</title><rect x="57.9315%" y="149" width="0.1241%" height="15" fill="rgb(247,70,30)"/><text x="58.1815%" y="159.50"></text></g><g><title>AST_validation (2,363,957 samples, 0.13%)</title><rect x="58.0953%" y="181" width="0.1344%" height="15" fill="rgb(212,68,19)"/><text x="58.3453%" y="191.50"></text></g><g><title>metadata_register_crate (9,519,757 samples, 0.54%)</title><rect x="92.3150%" y="149" width="0.5414%" height="15" fill="rgb(240,187,13)"/><text x="92.5650%" y="159.50"></text></g><g><title>metadata_register_crate (4,080,247 samples, 0.23%)</title><rect x="92.6243%" y="133" width="0.2321%" height="15" fill="rgb(223,113,26)"/><text x="92.8743%" y="143.50"></text></g><g><title>macro_expand_crate (607,433,513 samples, 34.55%)</title><rect x="58.3290%" y="181" width="34.5461%" height="15" fill="rgb(206,192,2)"/><text x="58.5790%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (607,402,573 samples, 34.54%)</title><rect x="58.3308%" y="165" width="34.5444%" height="15" fill="rgb(241,108,4)"/><text x="58.5808%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (21,335,441 samples, 1.21%)</title><rect x="92.9935%" y="165" width="1.2134%" height="15" fill="rgb(247,173,49)"/><text x="93.2435%" y="175.50"></text></g><g><title>resolve_check_unused (1,904,182 samples, 0.11%)</title><rect x="94.2184%" y="165" width="0.1083%" height="15" fill="rgb(224,114,35)"/><text x="94.4684%" y="175.50"></text></g><g><title>configure_and_expand (638,623,776 samples, 36.32%)</title><rect x="58.0837%" y="197" width="36.3200%" height="15" fill="rgb(245,159,27)"/><text x="58.3337%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (26,760,772 samples, 1.52%)</title><rect x="92.8817%" y="181" width="1.5219%" height="15" fill="rgb(245,172,44)"/><text x="93.1317%" y="191.50"></text></g><g><title>drop_ast (6,785,036 samples, 0.39%)</title><rect x="94.4037%" y="197" width="0.3859%" height="15" fill="rgb(236,23,11)"/><text x="94.6537%" y="207.50"></text></g><g><title>early_lint_checks (6,777,897 samples, 0.39%)</title><rect x="94.7915%" y="197" width="0.3855%" height="15" fill="rgb(205,117,38)"/><text x="95.0415%" y="207.50"></text></g><g><title>free_global_ctxt (12,396,670 samples, 0.71%)</title><rect x="95.1769%" y="197" width="0.7050%" height="15" fill="rgb(237,72,25)"/><text x="95.4269%" y="207.50"></text></g><g><title>generate_crate_metadata (19,684,912 samples, 1.12%)</title><rect x="95.8820%" y="197" width="1.1195%" height="15" fill="rgb(244,70,9)"/><text x="96.1320%" y="207.50"></text></g><g><title>hir_lowering (46,524,994 samples, 2.65%)</title><rect x="97.0015%" y="197" width="2.6460%" height="15" fill="rgb(217,125,39)"/><text x="97.2515%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (3,517,509 samples, 0.20%)</title><rect x="99.7179%" y="197" width="0.2000%" height="15" fill="rgb(235,36,10)"/><text x="99.9679%" y="207.50"></text></g><g><title>all (1,758,325,551 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,758,325,551 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>