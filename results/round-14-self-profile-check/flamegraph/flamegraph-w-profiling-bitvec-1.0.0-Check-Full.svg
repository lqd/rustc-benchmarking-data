<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (15,373,127 samples, 0.49%)</title><rect x="12.5689%" y="149" width="0.4866%" height="15" fill="rgb(227,0,7)"/><text x="12.8189%" y="159.50"></text></g><g><title>param_env (3,434,841 samples, 0.11%)</title><rect x="14.3092%" y="117" width="0.1087%" height="15" fill="rgb(217,0,24)"/><text x="14.5592%" y="127.50"></text></g><g><title>codegen_fn_attrs (3,351,270 samples, 0.11%)</title><rect x="14.7711%" y="101" width="0.1061%" height="15" fill="rgb(221,193,54)"/><text x="15.0211%" y="111.50"></text></g><g><title>is_copy_raw (4,592,059 samples, 0.15%)</title><rect x="17.3838%" y="85" width="0.1453%" height="15" fill="rgb(248,212,6)"/><text x="17.6338%" y="95.50"></text></g><g><title>evaluate_obligation (3,380,715 samples, 0.11%)</title><rect x="17.4221%" y="69" width="0.1070%" height="15" fill="rgb(208,68,35)"/><text x="17.6721%" y="79.50"></text></g><g><title>is_copy_raw (23,626,753 samples, 0.75%)</title><rect x="17.6388%" y="69" width="0.7478%" height="15" fill="rgb(232,128,0)"/><text x="17.8888%" y="79.50"></text></g><g><title>evaluate_obligation (17,757,877 samples, 0.56%)</title><rect x="17.8246%" y="53" width="0.5620%" height="15" fill="rgb(207,160,47)"/><text x="18.0746%" y="63.50"></text></g><g><title>needs_drop_raw (28,236,128 samples, 0.89%)</title><rect x="17.5291%" y="85" width="0.8937%" height="15" fill="rgb(228,23,34)"/><text x="17.7791%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (20,278,907 samples, 0.64%)</title><rect x="18.6059%" y="69" width="0.6418%" height="15" fill="rgb(218,30,26)"/><text x="18.8559%" y="79.50"></text></g><g><title>resolve_instance (28,346,502 samples, 0.90%)</title><rect x="18.4240%" y="85" width="0.8972%" height="15" fill="rgb(220,122,19)"/><text x="18.6740%" y="95.50"></text></g><g><title>thir_body (21,793,611 samples, 0.69%)</title><rect x="19.3442%" y="85" width="0.6898%" height="15" fill="rgb(250,228,42)"/><text x="19.5942%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,198,911 samples, 0.10%)</title><rect x="20.0451%" y="85" width="0.1012%" height="15" fill="rgb(240,193,28)"/><text x="20.2951%" y="95.50"></text></g><g><title>mir_const (203,087,828 samples, 6.43%)</title><rect x="13.7230%" y="133" width="6.4277%" height="15" fill="rgb(216,20,37)"/><text x="13.9730%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (181,129,818 samples, 5.73%)</title><rect x="14.4179%" y="117" width="5.7327%" height="15" fill="rgb(206,188,39)"/><text x="14.6679%" y="127.50">unsafet..</text></g><g><title>mir_built (166,619,963 samples, 5.27%)</title><rect x="14.8772%" y="101" width="5.2735%" height="15" fill="rgb(217,207,13)"/><text x="15.1272%" y="111.50">mir_bu..</text></g><g><title>mir_const (4,083,751 samples, 0.13%)</title><rect x="20.2819%" y="117" width="0.1293%" height="15" fill="rgb(231,73,38)"/><text x="20.5319%" y="127.50"></text></g><g><title>mir_const_qualif (8,851,209 samples, 0.28%)</title><rect x="20.1507%" y="133" width="0.2801%" height="15" fill="rgb(225,20,46)"/><text x="20.4007%" y="143.50"></text></g><g><title>mir_promoted (229,147,491 samples, 7.25%)</title><rect x="13.1785%" y="149" width="7.2525%" height="15" fill="rgb(210,31,41)"/><text x="13.4285%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (41,592,783 samples, 1.32%)</title><rect x="20.4324%" y="149" width="1.3164%" height="15" fill="rgb(221,200,47)"/><text x="20.6824%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (26,091,727 samples, 0.83%)</title><rect x="21.7488%" y="149" width="0.8258%" height="15" fill="rgb(226,26,5)"/><text x="21.9988%" y="159.50"></text></g><g><title>normalize_projection_ty (14,157,876 samples, 0.45%)</title><rect x="22.1265%" y="133" width="0.4481%" height="15" fill="rgb(249,33,26)"/><text x="22.3765%" y="143.50"></text></g><g><title>type_op_normalize_predicate (12,249,275 samples, 0.39%)</title><rect x="22.5779%" y="149" width="0.3877%" height="15" fill="rgb(235,183,28)"/><text x="22.8279%" y="159.50"></text></g><g><title>type_op_normalize_ty (14,043,787 samples, 0.44%)</title><rect x="22.9656%" y="149" width="0.4445%" height="15" fill="rgb(221,5,38)"/><text x="23.2156%" y="159.50"></text></g><g><title>normalize_projection_ty (6,708,777 samples, 0.21%)</title><rect x="23.1977%" y="133" width="0.2123%" height="15" fill="rgb(247,18,42)"/><text x="23.4477%" y="143.50"></text></g><g><title>type_op_prove_predicate (120,768,508 samples, 3.82%)</title><rect x="23.4101%" y="149" width="3.8223%" height="15" fill="rgb(241,131,45)"/><text x="23.6601%" y="159.50">type..</text></g><g><title>MIR_borrow_checking (854,032,898 samples, 27.03%)</title><rect x="0.2044%" y="181" width="27.0301%" height="15" fill="rgb(249,31,29)"/><text x="0.4544%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (850,134,702 samples, 26.91%)</title><rect x="0.3278%" y="165" width="26.9067%" height="15" fill="rgb(225,111,53)"/><text x="0.5778%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (3,630,061 samples, 0.11%)</title><rect x="27.2345%" y="181" width="0.1149%" height="15" fill="rgb(238,160,17)"/><text x="27.4845%" y="191.50"></text></g><g><title>hir_module_items (4,156,629 samples, 0.13%)</title><rect x="27.3494%" y="181" width="0.1316%" height="15" fill="rgb(214,148,48)"/><text x="27.5994%" y="191.50"></text></g><g><title>codegen_fn_attrs (6,487,387 samples, 0.21%)</title><rect x="27.7683%" y="149" width="0.2053%" height="15" fill="rgb(232,36,49)"/><text x="28.0183%" y="159.50"></text></g><g><title>check_mod_attrs (15,443,564 samples, 0.49%)</title><rect x="27.4849%" y="165" width="0.4888%" height="15" fill="rgb(209,103,24)"/><text x="27.7349%" y="175.50"></text></g><g><title>lookup_deprecation_entry (3,637,569 samples, 0.12%)</title><rect x="28.2257%" y="149" width="0.1151%" height="15" fill="rgb(229,88,8)"/><text x="28.4757%" y="159.50"></text></g><g><title>stability_index (3,348,907 samples, 0.11%)</title><rect x="28.2349%" y="133" width="0.1060%" height="15" fill="rgb(213,181,19)"/><text x="28.4849%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (6,706,993 samples, 0.21%)</title><rect x="28.1386%" y="165" width="0.2123%" height="15" fill="rgb(254,191,54)"/><text x="28.3886%" y="175.50"></text></g><g><title>misc_checking_1 (28,340,543 samples, 0.90%)</title><rect x="27.4810%" y="181" width="0.8970%" height="15" fill="rgb(241,83,37)"/><text x="27.7310%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (11,052,352 samples, 0.35%)</title><rect x="28.3781%" y="165" width="0.3498%" height="15" fill="rgb(233,36,39)"/><text x="28.6281%" y="175.50"></text></g><g><title>check_mod_liveness (9,241,413 samples, 0.29%)</title><rect x="28.4354%" y="149" width="0.2925%" height="15" fill="rgb(226,3,54)"/><text x="28.6854%" y="159.50"></text></g><g><title>misc_checking_2 (25,202,408 samples, 0.80%)</title><rect x="28.3780%" y="181" width="0.7977%" height="15" fill="rgb(245,192,40)"/><text x="28.6280%" y="191.50"></text></g><g><title>match_checking (14,145,896 samples, 0.45%)</title><rect x="28.7279%" y="165" width="0.4477%" height="15" fill="rgb(238,167,29)"/><text x="28.9779%" y="175.50"></text></g><g><title>check_match (12,793,565 samples, 0.40%)</title><rect x="28.7707%" y="149" width="0.4049%" height="15" fill="rgb(232,182,51)"/><text x="29.0207%" y="159.50"></text></g><g><title>check_private_in_public (7,766,536 samples, 0.25%)</title><rect x="29.1763%" y="165" width="0.2458%" height="15" fill="rgb(231,60,39)"/><text x="29.4263%" y="175.50"></text></g><g><title>death_checking (11,080,833 samples, 0.35%)</title><rect x="29.4222%" y="165" width="0.3507%" height="15" fill="rgb(208,69,12)"/><text x="29.6722%" y="175.50"></text></g><g><title>param_env (6,533,730 samples, 0.21%)</title><rect x="31.9001%" y="133" width="0.2068%" height="15" fill="rgb(235,93,37)"/><text x="32.1501%" y="143.50"></text></g><g><title>crate_lints (75,329,062 samples, 2.38%)</title><rect x="29.7730%" y="149" width="2.3842%" height="15" fill="rgb(213,116,39)"/><text x="30.0230%" y="159.50">cr..</text></g><g><title>lint_checking (88,680,620 samples, 2.81%)</title><rect x="29.7729%" y="165" width="2.8067%" height="15" fill="rgb(222,207,29)"/><text x="30.0229%" y="175.50">li..</text></g><g><title>module_lints (13,346,568 samples, 0.42%)</title><rect x="32.1572%" y="149" width="0.4224%" height="15" fill="rgb(206,96,30)"/><text x="32.4072%" y="159.50"></text></g><g><title>lint_mod (13,287,497 samples, 0.42%)</title><rect x="32.1591%" y="133" width="0.4205%" height="15" fill="rgb(218,138,4)"/><text x="32.4091%" y="143.50"></text></g><g><title>privacy_access_levels (9,471,794 samples, 0.30%)</title><rect x="32.5796%" y="165" width="0.2998%" height="15" fill="rgb(250,191,14)"/><text x="32.8296%" y="175.50"></text></g><g><title>privacy_checking_modules (27,367,652 samples, 0.87%)</title><rect x="32.8794%" y="165" width="0.8662%" height="15" fill="rgb(239,60,40)"/><text x="33.1294%" y="175.50"></text></g><g><title>check_mod_privacy (27,322,682 samples, 0.86%)</title><rect x="32.8808%" y="149" width="0.8648%" height="15" fill="rgb(206,27,48)"/><text x="33.1308%" y="159.50"></text></g><g><title>misc_checking_3 (144,654,708 samples, 4.58%)</title><rect x="29.1756%" y="181" width="4.5783%" height="15" fill="rgb(225,35,8)"/><text x="29.4256%" y="191.50">misc_..</text></g><g><title>impl_parent (4,654,326 samples, 0.15%)</title><rect x="34.2024%" y="117" width="0.1473%" height="15" fill="rgb(250,213,24)"/><text x="34.4524%" y="127.50"></text></g><g><title>impl_trait_ref (9,050,165 samples, 0.29%)</title><rect x="34.3498%" y="117" width="0.2864%" height="15" fill="rgb(247,123,22)"/><text x="34.5998%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,030,276 samples, 0.22%)</title><rect x="34.4137%" y="101" width="0.2225%" height="15" fill="rgb(231,138,38)"/><text x="34.6637%" y="111.50"></text></g><g><title>specialization_graph_of (25,842,346 samples, 0.82%)</title><rect x="33.9034%" y="133" width="0.8179%" height="15" fill="rgb(231,145,46)"/><text x="34.1534%" y="143.50"></text></g><g><title>coherent_trait (28,828,838 samples, 0.91%)</title><rect x="33.8092%" y="149" width="0.9124%" height="15" fill="rgb(251,118,11)"/><text x="34.0592%" y="159.50"></text></g><g><title>coherence_checking (30,064,911 samples, 0.95%)</title><rect x="33.8072%" y="165" width="0.9516%" height="15" fill="rgb(217,147,25)"/><text x="34.0572%" y="175.50"></text></g><g><title>dropck_outlives (11,547,816 samples, 0.37%)</title><rect x="57.7141%" y="117" width="0.3655%" height="15" fill="rgb(247,81,37)"/><text x="57.9641%" y="127.50"></text></g><g><title>mir_for_ctfe (4,064,336 samples, 0.13%)</title><rect x="58.1631%" y="69" width="0.1286%" height="15" fill="rgb(209,12,38)"/><text x="58.4131%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,739,782 samples, 0.12%)</title><rect x="58.1734%" y="53" width="0.1184%" height="15" fill="rgb(227,1,9)"/><text x="58.4234%" y="63.50"></text></g><g><title>eval_to_const_value_raw (3,165,643 samples, 0.10%)</title><rect x="58.2944%" y="53" width="0.1002%" height="15" fill="rgb(248,47,43)"/><text x="58.5444%" y="63.50"></text></g><g><title>eval_to_const_value_raw (3,162,283 samples, 0.10%)</title><rect x="58.2945%" y="37" width="0.1001%" height="15" fill="rgb(221,10,30)"/><text x="58.5445%" y="47.50"></text></g><g><title>eval_to_const_value_raw (9,950,783 samples, 0.31%)</title><rect x="58.0798%" y="117" width="0.3149%" height="15" fill="rgb(210,229,1)"/><text x="58.3298%" y="127.50"></text></g><g><title>eval_to_const_value_raw (9,918,003 samples, 0.31%)</title><rect x="58.0809%" y="101" width="0.3139%" height="15" fill="rgb(222,148,37)"/><text x="58.3309%" y="111.50"></text></g><g><title>eval_to_allocation_raw (9,859,503 samples, 0.31%)</title><rect x="58.0827%" y="85" width="0.3121%" height="15" fill="rgb(234,67,33)"/><text x="58.3327%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,201,393 samples, 0.10%)</title><rect x="58.2934%" y="69" width="0.1013%" height="15" fill="rgb(247,98,35)"/><text x="58.5434%" y="79.50"></text></g><g><title>specializes (4,671,834 samples, 0.15%)</title><rect x="59.7932%" y="101" width="0.1479%" height="15" fill="rgb(247,138,52)"/><text x="60.0432%" y="111.50"></text></g><g><title>evaluate_obligation (49,148,909 samples, 1.56%)</title><rect x="58.3948%" y="117" width="1.5556%" height="15" fill="rgb(213,79,30)"/><text x="58.6448%" y="127.50"></text></g><g><title>evaluate_obligation (6,899,180 samples, 0.22%)</title><rect x="60.3536%" y="101" width="0.2184%" height="15" fill="rgb(246,177,23)"/><text x="60.6036%" y="111.50"></text></g><g><title>method_autoderef_steps (16,688,318 samples, 0.53%)</title><rect x="60.0441%" y="117" width="0.5282%" height="15" fill="rgb(230,62,27)"/><text x="60.2941%" y="127.50"></text></g><g><title>evaluate_obligation (13,377,507 samples, 0.42%)</title><rect x="67.8287%" y="101" width="0.4234%" height="15" fill="rgb(216,154,8)"/><text x="68.0787%" y="111.50"></text></g><g><title>method_autoderef_steps (5,228,056 samples, 0.17%)</title><rect x="68.4384%" y="101" width="0.1655%" height="15" fill="rgb(244,35,45)"/><text x="68.6884%" y="111.50"></text></g><g><title>typeck (250,986,974 samples, 7.94%)</title><rect x="60.7067%" y="117" width="7.9437%" height="15" fill="rgb(251,115,12)"/><text x="60.9567%" y="127.50">typeck</text></g><g><title>item_bodies_checking (1,070,170,697 samples, 33.87%)</title><rect x="34.8004%" y="165" width="33.8708%" height="15" fill="rgb(240,54,50)"/><text x="35.0504%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,070,166,487 samples, 33.87%)</title><rect x="34.8005%" y="149" width="33.8707%" height="15" fill="rgb(233,84,52)"/><text x="35.0505%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (1,065,333,471 samples, 33.72%)</title><rect x="34.9535%" y="133" width="33.7178%" height="15" fill="rgb(207,117,47)"/><text x="35.2035%" y="143.50">typeck</text></g><g><title>mir_built (13,060,425 samples, 0.41%)</title><rect x="71.8285%" y="53" width="0.4134%" height="15" fill="rgb(249,43,39)"/><text x="72.0785%" y="63.50"></text></g><g><title>typeck (11,343,615 samples, 0.36%)</title><rect x="71.8829%" y="37" width="0.3590%" height="15" fill="rgb(209,38,44)"/><text x="72.1329%" y="47.50"></text></g><g><title>mir_const (14,901,123 samples, 0.47%)</title><rect x="71.7946%" y="85" width="0.4716%" height="15" fill="rgb(236,212,23)"/><text x="72.0446%" y="95.50"></text></g><g><title>unsafety_check_result (13,932,214 samples, 0.44%)</title><rect x="71.8253%" y="69" width="0.4410%" height="15" fill="rgb(242,79,21)"/><text x="72.0753%" y="79.50"></text></g><g><title>mir_promoted (15,027,955 samples, 0.48%)</title><rect x="71.7909%" y="101" width="0.4756%" height="15" fill="rgb(211,96,35)"/><text x="72.0409%" y="111.50"></text></g><g><title>type_of (22,041,942 samples, 0.70%)</title><rect x="71.6184%" y="133" width="0.6976%" height="15" fill="rgb(253,215,40)"/><text x="71.8684%" y="143.50"></text></g><g><title>mir_borrowck (22,016,301 samples, 0.70%)</title><rect x="71.6192%" y="117" width="0.6968%" height="15" fill="rgb(211,81,21)"/><text x="71.8692%" y="127.50"></text></g><g><title>item_types_checking (116,421,486 samples, 3.68%)</title><rect x="68.6712%" y="165" width="3.6847%" height="15" fill="rgb(208,190,38)"/><text x="68.9212%" y="175.50">item..</text></g><g><title>check_mod_item_types (116,375,426 samples, 3.68%)</title><rect x="68.6727%" y="149" width="3.6833%" height="15" fill="rgb(235,213,38)"/><text x="68.9227%" y="159.50">chec..</text></g><g><title>fn_sig (5,950,488 samples, 0.19%)</title><rect x="72.6578%" y="133" width="0.1883%" height="15" fill="rgb(237,122,38)"/><text x="72.9078%" y="143.50"></text></g><g><title>is_late_bound_map (5,519,961 samples, 0.17%)</title><rect x="72.9338%" y="117" width="0.1747%" height="15" fill="rgb(244,218,35)"/><text x="73.1838%" y="127.50"></text></g><g><title>resolve_lifetimes (5,140,588 samples, 0.16%)</title><rect x="72.9458%" y="101" width="0.1627%" height="15" fill="rgb(240,68,47)"/><text x="73.1958%" y="111.50"></text></g><g><title>named_region_map (5,201,087 samples, 0.16%)</title><rect x="73.1085%" y="117" width="0.1646%" height="15" fill="rgb(210,16,53)"/><text x="73.3585%" y="127.50"></text></g><g><title>resolve_lifetimes (4,891,187 samples, 0.15%)</title><rect x="73.1183%" y="101" width="0.1548%" height="15" fill="rgb(235,124,12)"/><text x="73.3683%" y="111.50"></text></g><g><title>lint_levels (4,325,268 samples, 0.14%)</title><rect x="73.1363%" y="85" width="0.1369%" height="15" fill="rgb(224,169,11)"/><text x="73.3863%" y="95.50"></text></g><g><title>generics_of (13,728,874 samples, 0.43%)</title><rect x="72.8461%" y="133" width="0.4345%" height="15" fill="rgb(250,166,2)"/><text x="73.0961%" y="143.50"></text></g><g><title>late_bound_vars_map (5,197,820 samples, 0.16%)</title><rect x="73.6612%" y="85" width="0.1645%" height="15" fill="rgb(242,216,29)"/><text x="73.9112%" y="95.50"></text></g><g><title>resolve_lifetimes (4,870,443 samples, 0.15%)</title><rect x="73.6716%" y="69" width="0.1541%" height="15" fill="rgb(230,116,27)"/><text x="73.9216%" y="79.50"></text></g><g><title>explicit_predicates_of (13,362,061 samples, 0.42%)</title><rect x="73.4295%" y="101" width="0.4229%" height="15" fill="rgb(228,99,48)"/><text x="73.6795%" y="111.50"></text></g><g><title>predicates_of (19,169,676 samples, 0.61%)</title><rect x="73.3361%" y="133" width="0.6067%" height="15" fill="rgb(253,11,6)"/><text x="73.5861%" y="143.50"></text></g><g><title>predicates_defined_on (18,018,815 samples, 0.57%)</title><rect x="73.3725%" y="117" width="0.5703%" height="15" fill="rgb(247,143,39)"/><text x="73.6225%" y="127.50"></text></g><g><title>type_collecting (53,296,829 samples, 1.69%)</title><rect x="72.3577%" y="165" width="1.6868%" height="15" fill="rgb(236,97,10)"/><text x="72.6077%" y="175.50"></text></g><g><title>collect_mod_item_types (53,244,178 samples, 1.69%)</title><rect x="72.3594%" y="149" width="1.6852%" height="15" fill="rgb(233,208,19)"/><text x="72.6094%" y="159.50"></text></g><g><title>type_of (3,164,115 samples, 0.10%)</title><rect x="73.9444%" y="133" width="0.1001%" height="15" fill="rgb(216,164,2)"/><text x="74.1944%" y="143.50"></text></g><g><title>evaluate_obligation (9,837,660 samples, 0.31%)</title><rect x="78.9288%" y="133" width="0.3114%" height="15" fill="rgb(220,129,5)"/><text x="79.1788%" y="143.50"></text></g><g><title>implied_outlives_bounds (10,471,548 samples, 0.33%)</title><rect x="79.2525%" y="133" width="0.3314%" height="15" fill="rgb(242,17,10)"/><text x="79.5025%" y="143.50"></text></g><g><title>param_env (37,551,466 samples, 1.19%)</title><rect x="79.5903%" y="133" width="1.1885%" height="15" fill="rgb(242,107,0)"/><text x="79.8403%" y="143.50"></text></g><g><title>region_scope_tree (8,315,844 samples, 0.26%)</title><rect x="80.7827%" y="133" width="0.2632%" height="15" fill="rgb(251,28,31)"/><text x="81.0327%" y="143.50"></text></g><g><title>check_impl_item_well_formed (215,333,583 samples, 6.82%)</title><rect x="74.2327%" y="149" width="6.8153%" height="15" fill="rgb(233,223,10)"/><text x="74.4827%" y="159.50">check_imp..</text></g><g><title>evaluate_obligation (27,080,296 samples, 0.86%)</title><rect x="85.5628%" y="133" width="0.8571%" height="15" fill="rgb(215,21,27)"/><text x="85.8128%" y="143.50"></text></g><g><title>implied_outlives_bounds (4,928,347 samples, 0.16%)</title><rect x="86.4377%" y="133" width="0.1560%" height="15" fill="rgb(232,23,21)"/><text x="86.6877%" y="143.50"></text></g><g><title>param_env (27,012,420 samples, 0.85%)</title><rect x="86.5948%" y="133" width="0.8549%" height="15" fill="rgb(244,5,23)"/><text x="86.8448%" y="143.50"></text></g><g><title>check_item_well_formed (206,227,468 samples, 6.53%)</title><rect x="81.0480%" y="149" width="6.5271%" height="15" fill="rgb(226,81,46)"/><text x="81.2980%" y="159.50">check_ite..</text></g><g><title>param_env (3,438,309 samples, 0.11%)</title><rect x="88.2124%" y="133" width="0.1088%" height="15" fill="rgb(247,70,30)"/><text x="88.4624%" y="143.50"></text></g><g><title>analysis (2,789,132,063 samples, 88.28%)</title><rect x="0.0511%" y="197" width="88.2759%" height="15" fill="rgb(212,68,19)"/><text x="0.3011%" y="207.50">analysis</text></g><g><title>type_check_crate (1,724,270,075 samples, 54.57%)</title><rect x="33.7539%" y="181" width="54.5731%" height="15" fill="rgb(240,187,13)"/><text x="34.0039%" y="191.50">type_check_crate</text></g><g><title>wf_checking (451,100,386 samples, 14.28%)</title><rect x="74.0497%" y="165" width="14.2773%" height="15" fill="rgb(223,113,26)"/><text x="74.2997%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (23,756,721 samples, 0.75%)</title><rect x="87.5751%" y="149" width="0.7519%" height="15" fill="rgb(206,192,2)"/><text x="87.8251%" y="159.50"></text></g><g><title>AST_validation (4,285,708 samples, 0.14%)</title><rect x="88.3485%" y="181" width="0.1356%" height="15" fill="rgb(241,108,4)"/><text x="88.5985%" y="191.50"></text></g><g><title>macro_expand_crate (163,746,760 samples, 5.18%)</title><rect x="88.5772%" y="181" width="5.1826%" height="15" fill="rgb(247,173,49)"/><text x="88.8272%" y="191.50">macro_..</text></g><g><title>expand_crate (163,728,518 samples, 5.18%)</title><rect x="88.5778%" y="165" width="5.1820%" height="15" fill="rgb(224,114,35)"/><text x="88.8278%" y="175.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (4,604,501 samples, 0.15%)</title><rect x="93.6141%" y="149" width="0.1457%" height="15" fill="rgb(245,159,27)"/><text x="93.8641%" y="159.50"></text></g><g><title>late_resolve_crate (28,946,829 samples, 0.92%)</title><rect x="93.8324%" y="165" width="0.9162%" height="15" fill="rgb(245,172,44)"/><text x="94.0824%" y="175.50"></text></g><g><title>configure_and_expand (207,424,332 samples, 6.56%)</title><rect x="88.3409%" y="197" width="6.5650%" height="15" fill="rgb(236,23,11)"/><text x="88.5909%" y="207.50">configure..</text></g><g><title>resolve_crate (36,102,269 samples, 1.14%)</title><rect x="93.7632%" y="181" width="1.1426%" height="15" fill="rgb(205,117,38)"/><text x="94.0132%" y="191.50"></text></g><g><title>drop_ast (8,194,941 samples, 0.26%)</title><rect x="94.9059%" y="197" width="0.2594%" height="15" fill="rgb(237,72,25)"/><text x="95.1559%" y="207.50"></text></g><g><title>early_lint_checks (8,364,223 samples, 0.26%)</title><rect x="95.1661%" y="197" width="0.2647%" height="15" fill="rgb(244,70,9)"/><text x="95.4161%" y="207.50"></text></g><g><title>free_global_ctxt (19,757,958 samples, 0.63%)</title><rect x="95.4308%" y="197" width="0.6253%" height="15" fill="rgb(217,125,39)"/><text x="95.6808%" y="207.50"></text></g><g><title>generate_crate_metadata (34,049,236 samples, 1.08%)</title><rect x="96.0561%" y="197" width="1.0777%" height="15" fill="rgb(235,36,10)"/><text x="96.3061%" y="207.50"></text></g><g><title>hir_lowering (80,629,271 samples, 2.55%)</title><rect x="97.1338%" y="197" width="2.5519%" height="15" fill="rgb(251,123,47)"/><text x="97.3838%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (6,381,490 samples, 0.20%)</title><rect x="99.7203%" y="197" width="0.2020%" height="15" fill="rgb(221,13,13)"/><text x="99.9703%" y="207.50"></text></g><g><title>all (3,159,562,677 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (3,159,562,677 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>