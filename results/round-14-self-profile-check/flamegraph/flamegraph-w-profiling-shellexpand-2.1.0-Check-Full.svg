<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (91,462 samples, 0.12%)</title><rect x="9.1833%" y="149" width="0.1215%" height="15" fill="rgb(227,0,7)"/><text x="9.4333%" y="159.50"></text></g><g><title>param_env (134,842 samples, 0.18%)</title><rect x="10.6142%" y="117" width="0.1791%" height="15" fill="rgb(217,0,24)"/><text x="10.8642%" y="127.50"></text></g><g><title>item_attrs (160,331 samples, 0.21%)</title><rect x="11.1795%" y="85" width="0.2130%" height="15" fill="rgb(221,193,54)"/><text x="11.4295%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (154,631 samples, 0.21%)</title><rect x="11.1871%" y="69" width="0.2054%" height="15" fill="rgb(248,212,6)"/><text x="11.4371%" y="79.50"></text></g><g><title>codegen_fn_attrs (223,462 samples, 0.30%)</title><rect x="11.1063%" y="101" width="0.2968%" height="15" fill="rgb(208,68,35)"/><text x="11.3563%" y="111.50"></text></g><g><title>is_copy_raw (104,280 samples, 0.14%)</title><rect x="13.6990%" y="53" width="0.1385%" height="15" fill="rgb(232,128,0)"/><text x="13.9490%" y="63.50"></text></g><g><title>evaluate_obligation (84,560 samples, 0.11%)</title><rect x="13.7252%" y="37" width="0.1123%" height="15" fill="rgb(207,160,47)"/><text x="13.9752%" y="47.50"></text></g><g><title>adt_drop_tys (290,712 samples, 0.39%)</title><rect x="13.5829%" y="69" width="0.3862%" height="15" fill="rgb(228,23,34)"/><text x="13.8329%" y="79.50"></text></g><g><title>is_copy_raw (554,529 samples, 0.74%)</title><rect x="13.9691%" y="69" width="0.7366%" height="15" fill="rgb(218,30,26)"/><text x="14.2191%" y="79.50"></text></g><g><title>evaluate_obligation (448,188 samples, 0.60%)</title><rect x="14.1103%" y="53" width="0.5954%" height="15" fill="rgb(220,122,19)"/><text x="14.3603%" y="63.50"></text></g><g><title>needs_drop_raw (940,662 samples, 1.25%)</title><rect x="13.4674%" y="85" width="1.2495%" height="15" fill="rgb(250,228,42)"/><text x="13.7174%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (143,161 samples, 0.19%)</title><rect x="14.8631%" y="69" width="0.1902%" height="15" fill="rgb(240,193,28)"/><text x="15.1131%" y="79.50"></text></g><g><title>specialization_graph_of (109,221 samples, 0.15%)</title><rect x="15.0997%" y="69" width="0.1451%" height="15" fill="rgb(216,20,37)"/><text x="15.3497%" y="79.50"></text></g><g><title>resolve_instance (439,363 samples, 0.58%)</title><rect x="14.7170%" y="85" width="0.5836%" height="15" fill="rgb(206,188,39)"/><text x="14.9670%" y="95.50"></text></g><g><title>thir_body (540,626 samples, 0.72%)</title><rect x="15.3236%" y="85" width="0.7181%" height="15" fill="rgb(217,207,13)"/><text x="15.5736%" y="95.50"></text></g><g><title>mir_const (4,548,332 samples, 6.04%)</title><rect x="10.0140%" y="133" width="6.0418%" height="15" fill="rgb(231,73,38)"/><text x="10.2640%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (3,961,652 samples, 5.26%)</title><rect x="10.7933%" y="117" width="5.2625%" height="15" fill="rgb(225,20,46)"/><text x="11.0433%" y="127.50">unsafe..</text></g><g><title>mir_built (3,502,587 samples, 4.65%)</title><rect x="11.4031%" y="101" width="4.6527%" height="15" fill="rgb(210,31,41)"/><text x="11.6531%" y="111.50">mir_b..</text></g><g><title>mir_promoted (5,038,997 samples, 6.69%)</title><rect x="9.3882%" y="149" width="6.6935%" height="15" fill="rgb(221,200,47)"/><text x="9.6382%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (181,171 samples, 0.24%)</title><rect x="16.0817%" y="149" width="0.2407%" height="15" fill="rgb(226,26,5)"/><text x="16.3317%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (257,604 samples, 0.34%)</title><rect x="16.3224%" y="149" width="0.3422%" height="15" fill="rgb(249,33,26)"/><text x="16.5724%" y="159.50"></text></g><g><title>normalize_projection_ty (151,101 samples, 0.20%)</title><rect x="16.4638%" y="133" width="0.2007%" height="15" fill="rgb(235,183,28)"/><text x="16.7138%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,014,862 samples, 2.68%)</title><rect x="16.6738%" y="149" width="2.6764%" height="15" fill="rgb(221,5,38)"/><text x="16.9238%" y="159.50">ty..</text></g><g><title>evaluate_obligation (104,382 samples, 0.14%)</title><rect x="19.2116%" y="133" width="0.1387%" height="15" fill="rgb(247,18,42)"/><text x="19.4616%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,019,356 samples, 18.62%)</title><rect x="0.7352%" y="181" width="18.6226%" height="15" fill="rgb(241,131,45)"/><text x="0.9852%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,973,316 samples, 18.56%)</title><rect x="0.7963%" y="165" width="18.5614%" height="15" fill="rgb(249,31,29)"/><text x="1.0463%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (92,961 samples, 0.12%)</title><rect x="19.3739%" y="181" width="0.1235%" height="15" fill="rgb(225,111,53)"/><text x="19.6239%" y="191.50"></text></g><g><title>codegen_fn_attrs (76,282 samples, 0.10%)</title><rect x="19.8921%" y="117" width="0.1013%" height="15" fill="rgb(238,160,17)"/><text x="20.1421%" y="127.50"></text></g><g><title>should_inherit_track_caller (127,412 samples, 0.17%)</title><rect x="19.8286%" y="133" width="0.1692%" height="15" fill="rgb(214,148,48)"/><text x="20.0786%" y="143.50"></text></g><g><title>codegen_fn_attrs (254,203 samples, 0.34%)</title><rect x="19.6860%" y="149" width="0.3377%" height="15" fill="rgb(232,36,49)"/><text x="19.9360%" y="159.50"></text></g><g><title>check_mod_attrs (376,254 samples, 0.50%)</title><rect x="19.5240%" y="165" width="0.4998%" height="15" fill="rgb(209,103,24)"/><text x="19.7740%" y="175.50"></text></g><g><title>lookup_deprecation_entry (87,112 samples, 0.12%)</title><rect x="20.2775%" y="149" width="0.1157%" height="15" fill="rgb(229,88,8)"/><text x="20.5275%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (251,633 samples, 0.33%)</title><rect x="20.1463%" y="165" width="0.3343%" height="15" fill="rgb(213,181,19)"/><text x="20.3963%" y="175.50"></text></g><g><title>misc_checking_1 (765,108 samples, 1.02%)</title><rect x="19.4980%" y="181" width="1.0163%" height="15" fill="rgb(254,191,54)"/><text x="19.7480%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (276,653 samples, 0.37%)</title><rect x="20.5167%" y="165" width="0.3675%" height="15" fill="rgb(241,83,37)"/><text x="20.7667%" y="175.50"></text></g><g><title>check_mod_liveness (226,012 samples, 0.30%)</title><rect x="20.5840%" y="149" width="0.3002%" height="15" fill="rgb(233,36,39)"/><text x="20.8340%" y="159.50"></text></g><g><title>misc_checking_2 (643,957 samples, 0.86%)</title><rect x="20.5143%" y="181" width="0.8554%" height="15" fill="rgb(226,3,54)"/><text x="20.7643%" y="191.50"></text></g><g><title>match_checking (365,454 samples, 0.49%)</title><rect x="20.8842%" y="165" width="0.4855%" height="15" fill="rgb(245,192,40)"/><text x="21.1342%" y="175.50"></text></g><g><title>check_match (351,034 samples, 0.47%)</title><rect x="20.9034%" y="149" width="0.4663%" height="15" fill="rgb(238,167,29)"/><text x="21.1534%" y="159.50"></text></g><g><title>death_checking (576,956 samples, 0.77%)</title><rect x="21.4788%" y="165" width="0.7664%" height="15" fill="rgb(232,182,51)"/><text x="21.7288%" y="175.50"></text></g><g><title>item_attrs (442,445 samples, 0.59%)</title><rect x="21.6575%" y="149" width="0.5877%" height="15" fill="rgb(231,60,39)"/><text x="21.9075%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (440,945 samples, 0.59%)</title><rect x="21.6594%" y="133" width="0.5857%" height="15" fill="rgb(208,69,12)"/><text x="21.9094%" y="143.50"></text></g><g><title>param_env (85,021 samples, 0.11%)</title><rect x="22.9890%" y="133" width="0.1129%" height="15" fill="rgb(235,93,37)"/><text x="23.2390%" y="143.50"></text></g><g><title>crate_lints (1,683,329 samples, 2.24%)</title><rect x="22.2469%" y="149" width="2.2360%" height="15" fill="rgb(213,116,39)"/><text x="22.4969%" y="159.50">c..</text></g><g><title>type_of (1,034,989 samples, 1.37%)</title><rect x="23.1081%" y="133" width="1.3748%" height="15" fill="rgb(222,207,29)"/><text x="23.3581%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (802,148 samples, 1.07%)</title><rect x="23.4174%" y="117" width="1.0655%" height="15" fill="rgb(206,96,30)"/><text x="23.6674%" y="127.50"></text></g><g><title>lint_checking (1,875,631 samples, 2.49%)</title><rect x="22.2452%" y="165" width="2.4915%" height="15" fill="rgb(218,138,4)"/><text x="22.4952%" y="175.50">li..</text></g><g><title>module_lints (190,992 samples, 0.25%)</title><rect x="24.4830%" y="149" width="0.2537%" height="15" fill="rgb(250,191,14)"/><text x="24.7330%" y="159.50"></text></g><g><title>lint_mod (188,802 samples, 0.25%)</title><rect x="24.4859%" y="133" width="0.2508%" height="15" fill="rgb(239,60,40)"/><text x="24.7359%" y="143.50"></text></g><g><title>privacy_access_levels (121,342 samples, 0.16%)</title><rect x="24.7367%" y="165" width="0.1612%" height="15" fill="rgb(206,27,48)"/><text x="24.9867%" y="175.50"></text></g><g><title>privacy_checking_modules (468,045 samples, 0.62%)</title><rect x="24.8979%" y="165" width="0.6217%" height="15" fill="rgb(225,35,8)"/><text x="25.1479%" y="175.50"></text></g><g><title>check_mod_privacy (466,375 samples, 0.62%)</title><rect x="24.9001%" y="149" width="0.6195%" height="15" fill="rgb(250,213,24)"/><text x="25.1501%" y="159.50"></text></g><g><title>misc_checking_3 (3,137,125 samples, 4.17%)</title><rect x="21.3697%" y="181" width="4.1672%" height="15" fill="rgb(247,123,22)"/><text x="21.6197%" y="191.50">misc_..</text></g><g><title>impl_parent (2,337,532 samples, 3.11%)</title><rect x="29.9126%" y="117" width="3.1051%" height="15" fill="rgb(231,138,38)"/><text x="30.1626%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,279,058 samples, 1.70%)</title><rect x="31.3186%" y="101" width="1.6990%" height="15" fill="rgb(231,145,46)"/><text x="31.5686%" y="111.50"></text></g><g><title>impl_trait_ref (4,773,682 samples, 6.34%)</title><rect x="33.0177%" y="117" width="6.3411%" height="15" fill="rgb(251,118,11)"/><text x="33.2677%" y="127.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,949,842 samples, 5.25%)</title><rect x="34.1120%" y="101" width="5.2468%" height="15" fill="rgb(217,147,25)"/><text x="34.3620%" y="111.50">metada..</text></g><g><title>coherent_trait (11,060,564 samples, 14.69%)</title><rect x="25.6036%" y="149" width="14.6923%" height="15" fill="rgb(247,81,37)"/><text x="25.8536%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (11,046,304 samples, 14.67%)</title><rect x="25.6226%" y="133" width="14.6734%" height="15" fill="rgb(209,12,38)"/><text x="25.8726%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (703,410 samples, 0.93%)</title><rect x="39.3615%" y="117" width="0.9344%" height="15" fill="rgb(227,1,9)"/><text x="39.6115%" y="127.50"></text></g><g><title>implementations_of_trait (187,533 samples, 0.25%)</title><rect x="40.0468%" y="101" width="0.2491%" height="15" fill="rgb(248,47,43)"/><text x="40.2968%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (145,210 samples, 0.19%)</title><rect x="40.1030%" y="85" width="0.1929%" height="15" fill="rgb(221,10,30)"/><text x="40.3530%" y="95.50"></text></g><g><title>coherence_checking (11,106,554 samples, 14.75%)</title><rect x="25.5805%" y="165" width="14.7534%" height="15" fill="rgb(210,229,1)"/><text x="25.8305%" y="175.50">coherence_checking</text></g><g><title>associated_item (119,881 samples, 0.16%)</title><rect x="46.3728%" y="101" width="0.1592%" height="15" fill="rgb(222,148,37)"/><text x="46.6228%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (96,701 samples, 0.13%)</title><rect x="46.4036%" y="85" width="0.1285%" height="15" fill="rgb(234,67,33)"/><text x="46.6536%" y="95.50"></text></g><g><title>associated_items (168,821 samples, 0.22%)</title><rect x="46.3161%" y="117" width="0.2243%" height="15" fill="rgb(247,98,35)"/><text x="46.5661%" y="127.50"></text></g><g><title>dropck_outlives (123,492 samples, 0.16%)</title><rect x="46.5545%" y="117" width="0.1640%" height="15" fill="rgb(247,138,52)"/><text x="46.8045%" y="127.50"></text></g><g><title>evaluate_obligation (404,085 samples, 0.54%)</title><rect x="46.7185%" y="117" width="0.5368%" height="15" fill="rgb(213,79,30)"/><text x="46.9685%" y="127.50"></text></g><g><title>method_autoderef_steps (100,091 samples, 0.13%)</title><rect x="47.4883%" y="117" width="0.1330%" height="15" fill="rgb(246,177,23)"/><text x="47.7383%" y="127.50"></text></g><g><title>predicates_of (99,340 samples, 0.13%)</title><rect x="47.6675%" y="117" width="0.1320%" height="15" fill="rgb(230,62,27)"/><text x="47.9175%" y="127.50"></text></g><g><title>associated_item (236,222 samples, 0.31%)</title><rect x="61.0683%" y="85" width="0.3138%" height="15" fill="rgb(216,154,8)"/><text x="61.3183%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (181,512 samples, 0.24%)</title><rect x="61.1410%" y="69" width="0.2411%" height="15" fill="rgb(244,35,45)"/><text x="61.3910%" y="79.50"></text></g><g><title>associated_items (545,856 samples, 0.73%)</title><rect x="60.6787%" y="101" width="0.7251%" height="15" fill="rgb(251,115,12)"/><text x="60.9287%" y="111.50"></text></g><g><title>adt_dtorck_constraint (105,221 samples, 0.14%)</title><rect x="61.8232%" y="37" width="0.1398%" height="15" fill="rgb(240,54,50)"/><text x="62.0732%" y="47.50"></text></g><g><title>adt_dtorck_constraint (154,661 samples, 0.21%)</title><rect x="61.7751%" y="53" width="0.2054%" height="15" fill="rgb(233,84,52)"/><text x="62.0251%" y="63.50"></text></g><g><title>adt_dtorck_constraint (185,922 samples, 0.25%)</title><rect x="61.7423%" y="69" width="0.2470%" height="15" fill="rgb(207,117,47)"/><text x="61.9923%" y="79.50"></text></g><g><title>adt_dtorck_constraint (255,224 samples, 0.34%)</title><rect x="61.6662%" y="85" width="0.3390%" height="15" fill="rgb(249,43,39)"/><text x="61.9162%" y="95.50"></text></g><g><title>dropck_outlives (461,605 samples, 0.61%)</title><rect x="61.4596%" y="101" width="0.6132%" height="15" fill="rgb(209,38,44)"/><text x="61.7096%" y="111.50"></text></g><g><title>adt_def (79,841 samples, 0.11%)</title><rect x="63.7306%" y="69" width="0.1061%" height="15" fill="rgb(236,212,23)"/><text x="63.9806%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (78,201 samples, 0.10%)</title><rect x="63.7328%" y="53" width="0.1039%" height="15" fill="rgb(242,79,21)"/><text x="63.9828%" y="63.50"></text></g><g><title>adt_sized_constraint (89,611 samples, 0.12%)</title><rect x="63.7185%" y="85" width="0.1190%" height="15" fill="rgb(211,96,35)"/><text x="63.9685%" y="95.50"></text></g><g><title>generics_of (245,515 samples, 0.33%)</title><rect x="63.8602%" y="85" width="0.3261%" height="15" fill="rgb(253,215,40)"/><text x="64.1102%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (195,294 samples, 0.26%)</title><rect x="63.9269%" y="69" width="0.2594%" height="15" fill="rgb(211,81,21)"/><text x="64.1769%" y="79.50"></text></g><g><title>impl_trait_ref (325,861 samples, 0.43%)</title><rect x="64.2173%" y="85" width="0.4329%" height="15" fill="rgb(208,190,38)"/><text x="64.4673%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (270,891 samples, 0.36%)</title><rect x="64.2903%" y="69" width="0.3598%" height="15" fill="rgb(235,213,38)"/><text x="64.5403%" y="79.50"></text></g><g><title>predicates_of (170,834 samples, 0.23%)</title><rect x="64.6680%" y="85" width="0.2269%" height="15" fill="rgb(237,122,38)"/><text x="64.9180%" y="95.50"></text></g><g><title>predicates_defined_on (119,241 samples, 0.16%)</title><rect x="64.7365%" y="69" width="0.1584%" height="15" fill="rgb(244,218,35)"/><text x="64.9865%" y="79.50"></text></g><g><title>specializes (235,761 samples, 0.31%)</title><rect x="64.8949%" y="85" width="0.3132%" height="15" fill="rgb(240,68,47)"/><text x="65.1449%" y="95.50"></text></g><g><title>param_env (149,541 samples, 0.20%)</title><rect x="65.0095%" y="69" width="0.1986%" height="15" fill="rgb(210,16,53)"/><text x="65.2595%" y="79.50"></text></g><g><title>def_span (76,021 samples, 0.10%)</title><rect x="65.1071%" y="53" width="0.1010%" height="15" fill="rgb(235,124,12)"/><text x="65.3571%" y="63.50"></text></g><g><title>trait_impls_of (458,345 samples, 0.61%)</title><rect x="65.2180%" y="85" width="0.6088%" height="15" fill="rgb(224,169,11)"/><text x="65.4680%" y="95.50"></text></g><g><title>implementations_of_trait (145,851 samples, 0.19%)</title><rect x="65.6331%" y="69" width="0.1937%" height="15" fill="rgb(250,166,2)"/><text x="65.8831%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (101,341 samples, 0.13%)</title><rect x="65.6922%" y="53" width="0.1346%" height="15" fill="rgb(242,216,29)"/><text x="65.9422%" y="63.50"></text></g><g><title>evaluate_obligation (2,834,434 samples, 3.77%)</title><rect x="62.0728%" y="101" width="3.7651%" height="15" fill="rgb(230,116,27)"/><text x="62.3228%" y="111.50">eval..</text></g><g><title>fn_sig (164,743 samples, 0.22%)</title><rect x="65.8856%" y="101" width="0.2188%" height="15" fill="rgb(228,99,48)"/><text x="66.1356%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (154,923 samples, 0.21%)</title><rect x="65.8987%" y="85" width="0.2058%" height="15" fill="rgb(253,11,6)"/><text x="66.1487%" y="95.50"></text></g><g><title>generics_of (77,980 samples, 0.10%)</title><rect x="66.1044%" y="101" width="0.1036%" height="15" fill="rgb(247,143,39)"/><text x="66.3544%" y="111.50"></text></g><g><title>associated_item (88,140 samples, 0.12%)</title><rect x="66.2493%" y="69" width="0.1171%" height="15" fill="rgb(236,97,10)"/><text x="66.4993%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (80,730 samples, 0.11%)</title><rect x="66.2592%" y="53" width="0.1072%" height="15" fill="rgb(233,208,19)"/><text x="66.5092%" y="63.50"></text></g><g><title>impl_item_implementor_ids (125,480 samples, 0.17%)</title><rect x="66.2080%" y="101" width="0.1667%" height="15" fill="rgb(216,164,2)"/><text x="66.4580%" y="111.50"></text></g><g><title>associated_items (115,070 samples, 0.15%)</title><rect x="66.2219%" y="85" width="0.1529%" height="15" fill="rgb(220,129,5)"/><text x="66.4719%" y="95.50"></text></g><g><title>is_copy_raw (361,774 samples, 0.48%)</title><rect x="66.5511%" y="101" width="0.4806%" height="15" fill="rgb(242,17,10)"/><text x="66.8011%" y="111.50"></text></g><g><title>evaluate_obligation (314,613 samples, 0.42%)</title><rect x="66.6137%" y="85" width="0.4179%" height="15" fill="rgb(242,107,0)"/><text x="66.8637%" y="95.50"></text></g><g><title>evaluate_obligation (106,392 samples, 0.14%)</title><rect x="67.2580%" y="85" width="0.1413%" height="15" fill="rgb(251,28,31)"/><text x="67.5080%" y="95.50"></text></g><g><title>method_autoderef_steps (201,332 samples, 0.27%)</title><rect x="67.1438%" y="101" width="0.2674%" height="15" fill="rgb(233,223,10)"/><text x="67.3938%" y="111.50"></text></g><g><title>predicates_of (193,673 samples, 0.26%)</title><rect x="67.4474%" y="101" width="0.2573%" height="15" fill="rgb(215,21,27)"/><text x="67.6974%" y="111.50"></text></g><g><title>predicates_defined_on (135,603 samples, 0.18%)</title><rect x="67.5246%" y="85" width="0.1801%" height="15" fill="rgb(232,23,21)"/><text x="67.7746%" y="95.50"></text></g><g><title>trait_impls_of (90,511 samples, 0.12%)</title><rect x="67.7200%" y="101" width="0.1202%" height="15" fill="rgb(244,5,23)"/><text x="67.9700%" y="111.50"></text></g><g><title>typeck (15,133,740 samples, 20.10%)</title><rect x="47.8583%" y="117" width="20.1029%" height="15" fill="rgb(226,81,46)"/><text x="48.1083%" y="127.50">typeck</text></g><g><title>item_bodies_checking (20,796,772 samples, 27.63%)</title><rect x="40.3513%" y="165" width="27.6254%" height="15" fill="rgb(247,70,30)"/><text x="40.6013%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,794,022 samples, 27.62%)</title><rect x="40.3549%" y="149" width="27.6217%" height="15" fill="rgb(212,68,19)"/><text x="40.6049%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (20,767,081 samples, 27.59%)</title><rect x="40.3907%" y="133" width="27.5859%" height="15" fill="rgb(240,187,13)"/><text x="40.6407%" y="143.50">typeck</text></g><g><title>impl_trait_ref (142,411 samples, 0.19%)</title><rect x="68.4697%" y="85" width="0.1892%" height="15" fill="rgb(223,113,26)"/><text x="68.7197%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (123,581 samples, 0.16%)</title><rect x="68.4947%" y="69" width="0.1642%" height="15" fill="rgb(206,192,2)"/><text x="68.7447%" y="79.50"></text></g><g><title>adt_destructor (318,643 samples, 0.42%)</title><rect x="68.2782%" y="133" width="0.4233%" height="15" fill="rgb(241,108,4)"/><text x="68.5282%" y="143.50"></text></g><g><title>coherent_trait (315,613 samples, 0.42%)</title><rect x="68.2823%" y="117" width="0.4192%" height="15" fill="rgb(247,173,49)"/><text x="68.5323%" y="127.50"></text></g><g><title>specialization_graph_of (314,193 samples, 0.42%)</title><rect x="68.2842%" y="101" width="0.4174%" height="15" fill="rgb(224,114,35)"/><text x="68.5342%" y="111.50"></text></g><g><title>item_types_checking (586,516 samples, 0.78%)</title><rect x="67.9767%" y="165" width="0.7791%" height="15" fill="rgb(245,159,27)"/><text x="68.2267%" y="175.50"></text></g><g><title>check_mod_item_types (584,156 samples, 0.78%)</title><rect x="67.9798%" y="149" width="0.7760%" height="15" fill="rgb(245,172,44)"/><text x="68.2298%" y="159.50"></text></g><g><title>fn_sig (226,313 samples, 0.30%)</title><rect x="68.9035%" y="133" width="0.3006%" height="15" fill="rgb(236,23,11)"/><text x="69.1535%" y="143.50"></text></g><g><title>named_region_map (264,014 samples, 0.35%)</title><rect x="69.2984%" y="117" width="0.3507%" height="15" fill="rgb(205,117,38)"/><text x="69.5484%" y="127.50"></text></g><g><title>resolve_lifetimes (250,504 samples, 0.33%)</title><rect x="69.3163%" y="101" width="0.3328%" height="15" fill="rgb(237,72,25)"/><text x="69.5663%" y="111.50"></text></g><g><title>generics_of (342,144 samples, 0.45%)</title><rect x="69.2041%" y="133" width="0.4545%" height="15" fill="rgb(244,70,9)"/><text x="69.4541%" y="143.50"></text></g><g><title>explicit_predicates_of (456,116 samples, 0.61%)</title><rect x="69.7392%" y="101" width="0.6059%" height="15" fill="rgb(217,125,39)"/><text x="69.9892%" y="111.50"></text></g><g><title>predicates_of (535,676 samples, 0.71%)</title><rect x="69.6900%" y="133" width="0.7116%" height="15" fill="rgb(235,36,10)"/><text x="69.9400%" y="143.50"></text></g><g><title>predicates_defined_on (522,206 samples, 0.69%)</title><rect x="69.7079%" y="117" width="0.6937%" height="15" fill="rgb(251,123,47)"/><text x="69.9579%" y="127.50"></text></g><g><title>type_collecting (1,270,925 samples, 1.69%)</title><rect x="68.7571%" y="165" width="1.6882%" height="15" fill="rgb(221,13,13)"/><text x="69.0071%" y="175.50"></text></g><g><title>collect_mod_item_types (1,264,185 samples, 1.68%)</title><rect x="68.7660%" y="149" width="1.6793%" height="15" fill="rgb(238,131,9)"/><text x="69.0160%" y="159.50"></text></g><g><title>evaluate_obligation (168,032 samples, 0.22%)</title><rect x="71.0330%" y="133" width="0.2232%" height="15" fill="rgb(211,50,8)"/><text x="71.2830%" y="143.50"></text></g><g><title>evaluate_obligation (125,100 samples, 0.17%)</title><rect x="71.5118%" y="117" width="0.1662%" height="15" fill="rgb(245,182,24)"/><text x="71.7618%" y="127.50"></text></g><g><title>layout_of (98,893 samples, 0.13%)</title><rect x="71.7266%" y="117" width="0.1314%" height="15" fill="rgb(242,14,37)"/><text x="71.9766%" y="127.50"></text></g><g><title>object_safety_violations (448,745 samples, 0.60%)</title><rect x="71.3558%" y="133" width="0.5961%" height="15" fill="rgb(246,228,12)"/><text x="71.6058%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,147,813 samples, 1.52%)</title><rect x="70.5513%" y="149" width="1.5247%" height="15" fill="rgb(213,55,15)"/><text x="70.8013%" y="159.50"></text></g><g><title>adt_sized_constraint (91,260 samples, 0.12%)</title><rect x="74.0401%" y="101" width="0.1212%" height="15" fill="rgb(209,9,3)"/><text x="74.2901%" y="111.50"></text></g><g><title>evaluate_obligation (303,233 samples, 0.40%)</title><rect x="73.7710%" y="133" width="0.4028%" height="15" fill="rgb(230,59,30)"/><text x="74.0210%" y="143.50"></text></g><g><title>adt_sized_constraint (169,041 samples, 0.22%)</title><rect x="73.9492%" y="117" width="0.2245%" height="15" fill="rgb(209,121,21)"/><text x="74.1992%" y="127.50"></text></g><g><title>implied_outlives_bounds (179,054 samples, 0.24%)</title><rect x="74.2024%" y="133" width="0.2378%" height="15" fill="rgb(220,109,13)"/><text x="74.4524%" y="143.50"></text></g><g><title>param_env (236,972 samples, 0.31%)</title><rect x="74.4415%" y="133" width="0.3148%" height="15" fill="rgb(232,18,1)"/><text x="74.6915%" y="143.50"></text></g><g><title>predicates_of (118,021 samples, 0.16%)</title><rect x="74.7563%" y="133" width="0.1568%" height="15" fill="rgb(215,41,42)"/><text x="75.0063%" y="143.50"></text></g><g><title>predicates_defined_on (87,311 samples, 0.12%)</title><rect x="74.7971%" y="117" width="0.1160%" height="15" fill="rgb(224,123,36)"/><text x="75.0471%" y="127.50"></text></g><g><title>region_scope_tree (143,732 samples, 0.19%)</title><rect x="74.9131%" y="133" width="0.1909%" height="15" fill="rgb(240,125,3)"/><text x="75.1631%" y="143.50"></text></g><g><title>analysis (56,258,927 samples, 74.73%)</title><rect x="0.5090%" y="197" width="74.7315%" height="15" fill="rgb(205,98,50)"/><text x="0.7590%" y="207.50">analysis</text></g><g><title>type_check_crate (37,417,588 samples, 49.70%)</title><rect x="25.5369%" y="181" width="49.7036%" height="15" fill="rgb(205,185,37)"/><text x="25.7869%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,607,930 samples, 4.79%)</title><rect x="70.4479%" y="165" width="4.7926%" height="15" fill="rgb(238,207,15)"/><text x="70.6979%" y="175.50">wf_che..</text></g><g><title>check_item_well_formed (2,382,326 samples, 3.16%)</title><rect x="72.0760%" y="149" width="3.1646%" height="15" fill="rgb(213,199,42)"/><text x="72.3260%" y="159.50">che..</text></g><g><title>codegen_crate (403,324 samples, 0.54%)</title><rect x="75.2498%" y="197" width="0.5358%" height="15" fill="rgb(235,201,11)"/><text x="75.4998%" y="207.50"></text></g><g><title>AST_validation (76,021 samples, 0.10%)</title><rect x="75.9666%" y="181" width="0.1010%" height="15" fill="rgb(207,46,11)"/><text x="76.2166%" y="191.50"></text></g><g><title>metadata_load_macro (129,711 samples, 0.17%)</title><rect x="84.1311%" y="149" width="0.1723%" height="15" fill="rgb(241,35,35)"/><text x="84.3811%" y="159.50"></text></g><g><title>macro_expand_crate (7,528,075 samples, 10.00%)</title><rect x="76.1877%" y="181" width="9.9999%" height="15" fill="rgb(243,32,47)"/><text x="76.4377%" y="191.50">macro_expand_c..</text></g><g><title>expand_crate (7,512,734 samples, 9.98%)</title><rect x="76.2081%" y="165" width="9.9795%" height="15" fill="rgb(247,202,23)"/><text x="76.4581%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,418,506 samples, 1.88%)</title><rect x="84.3034%" y="149" width="1.8843%" height="15" fill="rgb(219,102,11)"/><text x="84.5534%" y="159.50">m..</text></g><g><title>metadata_register_crate (520,405 samples, 0.69%)</title><rect x="85.4964%" y="133" width="0.6913%" height="15" fill="rgb(243,110,44)"/><text x="85.7464%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (131,182 samples, 0.17%)</title><rect x="86.1912%" y="181" width="0.1743%" height="15" fill="rgb(222,74,54)"/><text x="86.4412%" y="191.50"></text></g><g><title>late_resolve_crate (927,710 samples, 1.23%)</title><rect x="86.4830%" y="165" width="1.2323%" height="15" fill="rgb(216,99,12)"/><text x="86.7330%" y="175.50"></text></g><g><title>configure_and_expand (9,044,621 samples, 12.01%)</title><rect x="75.7855%" y="197" width="12.0144%" height="15" fill="rgb(226,22,26)"/><text x="76.0355%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (1,079,872 samples, 1.43%)</title><rect x="86.3655%" y="181" width="1.4344%" height="15" fill="rgb(217,163,10)"/><text x="86.6155%" y="191.50"></text></g><g><title>drop_ast (108,871 samples, 0.14%)</title><rect x="87.7999%" y="197" width="0.1446%" height="15" fill="rgb(213,25,53)"/><text x="88.0499%" y="207.50"></text></g><g><title>early_lint_checks (207,583 samples, 0.28%)</title><rect x="87.9661%" y="197" width="0.2757%" height="15" fill="rgb(252,105,26)"/><text x="88.2161%" y="207.50"></text></g><g><title>free_global_ctxt (3,259,986 samples, 4.33%)</title><rect x="88.2419%" y="197" width="4.3304%" height="15" fill="rgb(220,39,43)"/><text x="88.4919%" y="207.50">free_..</text></g><g><title>crate_hash (77,000 samples, 0.10%)</title><rect x="93.1588%" y="181" width="0.1023%" height="15" fill="rgb(229,68,48)"/><text x="93.4088%" y="191.50"></text></g><g><title>generate_crate_metadata (623,736 samples, 0.83%)</title><rect x="92.5723%" y="197" width="0.8285%" height="15" fill="rgb(252,8,32)"/><text x="92.8223%" y="207.50"></text></g><g><title>hir_lowering (1,301,534 samples, 1.73%)</title><rect x="93.4008%" y="197" width="1.7289%" height="15" fill="rgb(223,20,43)"/><text x="93.6508%" y="207.50"></text></g><g><title>parse_crate (2,316,806 samples, 3.08%)</title><rect x="95.2001%" y="197" width="3.0775%" height="15" fill="rgb(229,81,49)"/><text x="95.4501%" y="207.50">par..</text></g><g><title>prepare_outputs (181,482 samples, 0.24%)</title><rect x="98.2849%" y="197" width="0.2411%" height="15" fill="rgb(236,28,36)"/><text x="98.5349%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (707,208 samples, 0.94%)</title><rect x="98.5260%" y="197" width="0.9394%" height="15" fill="rgb(249,185,26)"/><text x="98.7760%" y="207.50"></text></g><g><title>setup_global_ctxt (87,771 samples, 0.12%)</title><rect x="99.4793%" y="197" width="0.1166%" height="15" fill="rgb(249,174,33)"/><text x="99.7293%" y="207.50"></text></g><g><title>all (75,281,389 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (75,281,389 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (304,224 samples, 0.40%)</title><rect x="99.5959%" y="197" width="0.4041%" height="15" fill="rgb(250,127,30)"/><text x="99.8459%" y="207.50"></text></g></svg></svg>