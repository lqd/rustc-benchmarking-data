<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (39,861 samples, 0.15%)</title><rect x="12.2458%" y="245" width="0.1450%" height="15" fill="rgb(227,0,7)"/><text x="12.4958%" y="255.50"></text></g><g><title>diagnostic_items (29,531 samples, 0.11%)</title><rect x="14.8555%" y="213" width="0.1075%" height="15" fill="rgb(217,0,24)"/><text x="15.1055%" y="223.50"></text></g><g><title>param_env (76,960 samples, 0.28%)</title><rect x="14.9629%" y="213" width="0.2800%" height="15" fill="rgb(221,193,54)"/><text x="15.2129%" y="223.50"></text></g><g><title>item_attrs (62,741 samples, 0.23%)</title><rect x="15.8897%" y="181" width="0.2283%" height="15" fill="rgb(248,212,6)"/><text x="16.1397%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (60,071 samples, 0.22%)</title><rect x="15.8995%" y="165" width="0.2186%" height="15" fill="rgb(208,68,35)"/><text x="16.1495%" y="175.50"></text></g><g><title>codegen_fn_attrs (85,461 samples, 0.31%)</title><rect x="15.8144%" y="197" width="0.3110%" height="15" fill="rgb(232,128,0)"/><text x="16.0644%" y="207.50"></text></g><g><title>adt_drop_tys (30,501 samples, 0.11%)</title><rect x="18.7717%" y="133" width="0.1110%" height="15" fill="rgb(207,160,47)"/><text x="19.0217%" y="143.50"></text></g><g><title>adt_drop_tys (50,741 samples, 0.18%)</title><rect x="18.7624%" y="149" width="0.1846%" height="15" fill="rgb(228,23,34)"/><text x="19.0124%" y="159.50"></text></g><g><title>adt_drop_tys (77,381 samples, 0.28%)</title><rect x="18.7462%" y="165" width="0.2816%" height="15" fill="rgb(218,30,26)"/><text x="18.9962%" y="175.50"></text></g><g><title>needs_drop_raw (177,812 samples, 0.65%)</title><rect x="18.6750%" y="181" width="0.6470%" height="15" fill="rgb(220,122,19)"/><text x="18.9250%" y="191.50"></text></g><g><title>is_copy_raw (80,870 samples, 0.29%)</title><rect x="19.0278%" y="165" width="0.2943%" height="15" fill="rgb(250,228,42)"/><text x="19.2778%" y="175.50"></text></g><g><title>evaluate_obligation (60,270 samples, 0.22%)</title><rect x="19.1028%" y="149" width="0.2193%" height="15" fill="rgb(240,193,28)"/><text x="19.3528%" y="159.50"></text></g><g><title>resolve_instance (59,070 samples, 0.21%)</title><rect x="19.3221%" y="181" width="0.2149%" height="15" fill="rgb(216,20,37)"/><text x="19.5721%" y="191.50"></text></g><g><title>lit_to_const (31,700 samples, 0.12%)</title><rect x="20.5184%" y="165" width="0.1154%" height="15" fill="rgb(206,188,39)"/><text x="20.7684%" y="175.50"></text></g><g><title>thir_body (287,063 samples, 1.04%)</title><rect x="19.6003%" y="181" width="1.0446%" height="15" fill="rgb(217,207,13)"/><text x="19.8503%" y="191.50"></text></g><g><title>mir_const (1,940,762 samples, 7.06%)</title><rect x="13.6469%" y="229" width="7.0622%" height="15" fill="rgb(231,73,38)"/><text x="13.8969%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (1,502,147 samples, 5.47%)</title><rect x="15.2430%" y="213" width="5.4661%" height="15" fill="rgb(225,20,46)"/><text x="15.4930%" y="223.50">unsafet..</text></g><g><title>mir_built (1,259,652 samples, 4.58%)</title><rect x="16.1254%" y="197" width="4.5837%" height="15" fill="rgb(210,31,41)"/><text x="16.3754%" y="207.50">mir_b..</text></g><g><title>mir_promoted (2,292,815 samples, 8.34%)</title><rect x="12.4566%" y="245" width="8.3433%" height="15" fill="rgb(221,200,47)"/><text x="12.7066%" y="255.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (30,520 samples, 0.11%)</title><rect x="20.7999%" y="245" width="0.1111%" height="15" fill="rgb(226,26,5)"/><text x="21.0499%" y="255.50"></text></g><g><title>MIR_borrow_checking (5,703,914 samples, 20.76%)</title><rect x="1.7519%" y="277" width="20.7558%" height="15" fill="rgb(249,33,26)"/><text x="2.0019%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (5,638,984 samples, 20.52%)</title><rect x="1.9882%" y="261" width="20.5196%" height="15" fill="rgb(235,183,28)"/><text x="2.2382%" y="271.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (438,814 samples, 1.60%)</title><rect x="20.9110%" y="245" width="1.5968%" height="15" fill="rgb(221,5,38)"/><text x="21.1610%" y="255.50"></text></g><g><title>evaluate_obligation (191,253 samples, 0.70%)</title><rect x="21.8118%" y="229" width="0.6959%" height="15" fill="rgb(247,18,42)"/><text x="22.0618%" y="239.50"></text></g><g><title>hir_module_items (86,361 samples, 0.31%)</title><rect x="22.5454%" y="277" width="0.3143%" height="15" fill="rgb(241,131,45)"/><text x="22.7954%" y="287.50"></text></g><g><title>get_lang_items (42,111 samples, 0.15%)</title><rect x="23.3692%" y="229" width="0.1532%" height="15" fill="rgb(249,31,29)"/><text x="23.6192%" y="239.50"></text></g><g><title>codegen_fn_attrs (133,942 samples, 0.49%)</title><rect x="23.1813%" y="245" width="0.4874%" height="15" fill="rgb(225,111,53)"/><text x="23.4313%" y="255.50"></text></g><g><title>check_mod_attrs (204,802 samples, 0.75%)</title><rect x="22.9237%" y="261" width="0.7452%" height="15" fill="rgb(238,160,17)"/><text x="23.1737%" y="271.50"></text></g><g><title>check_mod_const_bodies (53,322 samples, 0.19%)</title><rect x="23.6690%" y="261" width="0.1940%" height="15" fill="rgb(214,148,48)"/><text x="23.9190%" y="271.50"></text></g><g><title>lookup_deprecation_entry (46,690 samples, 0.17%)</title><rect x="24.1076%" y="245" width="0.1699%" height="15" fill="rgb(232,36,49)"/><text x="24.3576%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (132,531 samples, 0.48%)</title><rect x="23.9307%" y="261" width="0.4823%" height="15" fill="rgb(209,103,24)"/><text x="24.1807%" y="271.50"></text></g><g><title>looking_for_derive_registrar (35,040 samples, 0.13%)</title><rect x="24.4172%" y="261" width="0.1275%" height="15" fill="rgb(229,88,8)"/><text x="24.6672%" y="271.50"></text></g><g><title>misc_checking_1 (465,735 samples, 1.69%)</title><rect x="22.8612%" y="277" width="1.6948%" height="15" fill="rgb(213,181,19)"/><text x="23.1112%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (103,001 samples, 0.37%)</title><rect x="24.5628%" y="261" width="0.3748%" height="15" fill="rgb(254,191,54)"/><text x="24.8128%" y="271.50"></text></g><g><title>check_mod_liveness (79,571 samples, 0.29%)</title><rect x="24.6481%" y="245" width="0.2895%" height="15" fill="rgb(241,83,37)"/><text x="24.8981%" y="255.50"></text></g><g><title>misc_checking_2 (250,853 samples, 0.91%)</title><rect x="24.5560%" y="277" width="0.9128%" height="15" fill="rgb(233,36,39)"/><text x="24.8060%" y="287.50"></text></g><g><title>match_checking (145,972 samples, 0.53%)</title><rect x="24.9376%" y="261" width="0.5312%" height="15" fill="rgb(226,3,54)"/><text x="25.1876%" y="271.50"></text></g><g><title>check_match (130,921 samples, 0.48%)</title><rect x="24.9924%" y="245" width="0.4764%" height="15" fill="rgb(245,192,40)"/><text x="25.2424%" y="255.50"></text></g><g><title>param_env (49,510 samples, 0.18%)</title><rect x="25.2886%" y="229" width="0.1802%" height="15" fill="rgb(238,167,29)"/><text x="25.5386%" y="239.50"></text></g><g><title>check_private_in_public (39,391 samples, 0.14%)</title><rect x="25.4952%" y="261" width="0.1433%" height="15" fill="rgb(232,182,51)"/><text x="25.7452%" y="271.50"></text></g><g><title>death_checking (62,650 samples, 0.23%)</title><rect x="25.6385%" y="261" width="0.2280%" height="15" fill="rgb(231,60,39)"/><text x="25.8885%" y="271.50"></text></g><g><title>param_env (50,590 samples, 0.18%)</title><rect x="26.1439%" y="229" width="0.1841%" height="15" fill="rgb(208,69,12)"/><text x="26.3939%" y="239.50"></text></g><g><title>crate_lints (127,531 samples, 0.46%)</title><rect x="25.8721%" y="245" width="0.4641%" height="15" fill="rgb(235,93,37)"/><text x="26.1221%" y="255.50"></text></g><g><title>lint_checking (212,452 samples, 0.77%)</title><rect x="25.8665%" y="261" width="0.7731%" height="15" fill="rgb(213,116,39)"/><text x="26.1165%" y="271.50"></text></g><g><title>module_lints (83,381 samples, 0.30%)</title><rect x="26.3362%" y="245" width="0.3034%" height="15" fill="rgb(222,207,29)"/><text x="26.5862%" y="255.50"></text></g><g><title>lint_mod (81,501 samples, 0.30%)</title><rect x="26.3430%" y="229" width="0.2966%" height="15" fill="rgb(206,96,30)"/><text x="26.5930%" y="239.50"></text></g><g><title>privacy_access_levels (45,650 samples, 0.17%)</title><rect x="26.6396%" y="261" width="0.1661%" height="15" fill="rgb(218,138,4)"/><text x="26.8896%" y="271.50"></text></g><g><title>privacy_checking_modules (122,921 samples, 0.45%)</title><rect x="26.8057%" y="261" width="0.4473%" height="15" fill="rgb(250,191,14)"/><text x="27.0557%" y="271.50"></text></g><g><title>check_mod_privacy (121,481 samples, 0.44%)</title><rect x="26.8110%" y="245" width="0.4421%" height="15" fill="rgb(239,60,40)"/><text x="27.0610%" y="255.50"></text></g><g><title>misc_checking_3 (500,455 samples, 1.82%)</title><rect x="25.4688%" y="277" width="1.8211%" height="15" fill="rgb(206,27,48)"/><text x="25.7188%" y="287.50">m..</text></g><g><title>impl_parent (87,061 samples, 0.32%)</title><rect x="33.0082%" y="117" width="0.3168%" height="15" fill="rgb(225,35,8)"/><text x="33.2582%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (66,781 samples, 0.24%)</title><rect x="33.0820%" y="101" width="0.2430%" height="15" fill="rgb(250,213,24)"/><text x="33.3320%" y="111.50"></text></g><g><title>impl_trait_ref (325,534 samples, 1.18%)</title><rect x="33.3250%" y="117" width="1.1846%" height="15" fill="rgb(247,123,22)"/><text x="33.5750%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (305,114 samples, 1.11%)</title><rect x="33.3993%" y="101" width="1.1103%" height="15" fill="rgb(231,138,38)"/><text x="33.6493%" y="111.50"></text></g><g><title>coherent_trait (532,736 samples, 1.94%)</title><rect x="32.6629%" y="149" width="1.9386%" height="15" fill="rgb(231,145,46)"/><text x="32.9129%" y="159.50">c..</text></g><g><title>specialization_graph_of (528,796 samples, 1.92%)</title><rect x="32.6773%" y="133" width="1.9242%" height="15" fill="rgb(251,118,11)"/><text x="32.9273%" y="143.50">s..</text></g><g><title>adt_destructor (546,376 samples, 1.99%)</title><rect x="32.6176%" y="181" width="1.9882%" height="15" fill="rgb(217,147,25)"/><text x="32.8676%" y="191.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (543,016 samples, 1.98%)</title><rect x="32.6299%" y="165" width="1.9760%" height="15" fill="rgb(247,81,37)"/><text x="32.8799%" y="175.50">m..</text></g><g><title>adt_def (39,440 samples, 0.14%)</title><rect x="34.8672%" y="85" width="0.1435%" height="15" fill="rgb(209,12,38)"/><text x="35.1172%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (39,210 samples, 0.14%)</title><rect x="34.8681%" y="69" width="0.1427%" height="15" fill="rgb(227,1,9)"/><text x="35.1181%" y="79.50"></text></g><g><title>item_attrs (36,410 samples, 0.13%)</title><rect x="34.8783%" y="53" width="0.1325%" height="15" fill="rgb(248,47,43)"/><text x="35.1283%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (36,160 samples, 0.13%)</title><rect x="34.8792%" y="37" width="0.1316%" height="15" fill="rgb(221,10,30)"/><text x="35.1292%" y="47.50"></text></g><g><title>adt_dtorck_constraint (47,780 samples, 0.17%)</title><rect x="34.8595%" y="101" width="0.1739%" height="15" fill="rgb(210,229,1)"/><text x="35.1095%" y="111.50"></text></g><g><title>adt_dtorck_constraint (73,591 samples, 0.27%)</title><rect x="34.7756%" y="117" width="0.2678%" height="15" fill="rgb(222,148,37)"/><text x="35.0256%" y="127.50"></text></g><g><title>adt_dtorck_constraint (120,742 samples, 0.44%)</title><rect x="34.6453%" y="133" width="0.4394%" height="15" fill="rgb(234,67,33)"/><text x="34.8953%" y="143.50"></text></g><g><title>adt_dtorck_constraint (138,622 samples, 0.50%)</title><rect x="34.6237%" y="149" width="0.5044%" height="15" fill="rgb(247,98,35)"/><text x="34.8737%" y="159.50"></text></g><g><title>adt_dtorck_constraint (141,852 samples, 0.52%)</title><rect x="34.6138%" y="165" width="0.5162%" height="15" fill="rgb(247,138,52)"/><text x="34.8638%" y="175.50"></text></g><g><title>adt_dtorck_constraint (144,412 samples, 0.53%)</title><rect x="34.6058%" y="181" width="0.5255%" height="15" fill="rgb(213,79,30)"/><text x="34.8558%" y="191.50"></text></g><g><title>dropck_outlives (740,898 samples, 2.70%)</title><rect x="32.4457%" y="213" width="2.6960%" height="15" fill="rgb(246,177,23)"/><text x="32.6957%" y="223.50">dr..</text></g><g><title>adt_dtorck_constraint (717,568 samples, 2.61%)</title><rect x="32.5306%" y="197" width="2.6111%" height="15" fill="rgb(230,62,27)"/><text x="32.7806%" y="207.50">ad..</text></g><g><title>evaluate_obligation (31,060 samples, 0.11%)</title><rect x="35.1417%" y="213" width="0.1130%" height="15" fill="rgb(216,154,8)"/><text x="35.3917%" y="223.50"></text></g><g><title>trait_impls_of (29,290 samples, 0.11%)</title><rect x="35.4425%" y="213" width="0.1066%" height="15" fill="rgb(244,35,45)"/><text x="35.6925%" y="223.50"></text></g><g><title>associated_item (138,122 samples, 0.50%)</title><rect x="44.2142%" y="181" width="0.5026%" height="15" fill="rgb(251,115,12)"/><text x="44.4642%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (102,042 samples, 0.37%)</title><rect x="44.3455%" y="165" width="0.3713%" height="15" fill="rgb(240,54,50)"/><text x="44.5955%" y="175.50"></text></g><g><title>associated_items (211,082 samples, 0.77%)</title><rect x="43.9725%" y="197" width="0.7681%" height="15" fill="rgb(233,84,52)"/><text x="44.2225%" y="207.50"></text></g><g><title>evaluate_obligation (193,884 samples, 0.71%)</title><rect x="44.8023%" y="197" width="0.7055%" height="15" fill="rgb(207,117,47)"/><text x="45.0523%" y="207.50"></text></g><g><title>trait_impls_of (38,301 samples, 0.14%)</title><rect x="45.3684%" y="181" width="0.1394%" height="15" fill="rgb(249,43,39)"/><text x="45.6184%" y="191.50"></text></g><g><title>fn_sig (42,580 samples, 0.15%)</title><rect x="45.5237%" y="197" width="0.1549%" height="15" fill="rgb(209,38,44)"/><text x="45.7737%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (39,740 samples, 0.14%)</title><rect x="45.5341%" y="181" width="0.1446%" height="15" fill="rgb(236,212,23)"/><text x="45.7841%" y="191.50"></text></g><g><title>explicit_predicates_of (69,002 samples, 0.25%)</title><rect x="46.3286%" y="133" width="0.2511%" height="15" fill="rgb(242,79,21)"/><text x="46.5786%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (68,362 samples, 0.25%)</title><rect x="46.3309%" y="117" width="0.2488%" height="15" fill="rgb(211,96,35)"/><text x="46.5809%" y="127.50"></text></g><g><title>predicates_of (84,112 samples, 0.31%)</title><rect x="46.2910%" y="165" width="0.3061%" height="15" fill="rgb(253,215,40)"/><text x="46.5410%" y="175.50"></text></g><g><title>predicates_defined_on (75,882 samples, 0.28%)</title><rect x="46.3209%" y="149" width="0.2761%" height="15" fill="rgb(211,81,21)"/><text x="46.5709%" y="159.50"></text></g><g><title>is_copy_raw (378,565 samples, 1.38%)</title><rect x="45.8763%" y="197" width="1.3776%" height="15" fill="rgb(208,190,38)"/><text x="46.1263%" y="207.50"></text></g><g><title>evaluate_obligation (353,455 samples, 1.29%)</title><rect x="45.9677%" y="181" width="1.2862%" height="15" fill="rgb(235,213,38)"/><text x="46.2177%" y="191.50"></text></g><g><title>trait_impls_of (179,092 samples, 0.65%)</title><rect x="46.6022%" y="165" width="0.6517%" height="15" fill="rgb(237,122,38)"/><text x="46.8522%" y="175.50"></text></g><g><title>implementations_of_trait (35,410 samples, 0.13%)</title><rect x="47.1250%" y="149" width="0.1289%" height="15" fill="rgb(244,218,35)"/><text x="47.3750%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (30,920 samples, 0.11%)</title><rect x="47.1413%" y="133" width="0.1125%" height="15" fill="rgb(240,68,47)"/><text x="47.3913%" y="143.50"></text></g><g><title>lint_levels (34,320 samples, 0.12%)</title><rect x="47.2850%" y="197" width="0.1249%" height="15" fill="rgb(210,16,53)"/><text x="47.5350%" y="207.50"></text></g><g><title>evaluate_obligation (49,140 samples, 0.18%)</title><rect x="47.5863%" y="181" width="0.1788%" height="15" fill="rgb(235,124,12)"/><text x="47.8363%" y="191.50"></text></g><g><title>method_autoderef_steps (101,891 samples, 0.37%)</title><rect x="47.4561%" y="197" width="0.3708%" height="15" fill="rgb(224,169,11)"/><text x="47.7061%" y="207.50"></text></g><g><title>explicit_predicates_of (42,020 samples, 0.15%)</title><rect x="47.9677%" y="165" width="0.1529%" height="15" fill="rgb(250,166,2)"/><text x="48.2177%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (37,270 samples, 0.14%)</title><rect x="47.9850%" y="149" width="0.1356%" height="15" fill="rgb(242,216,29)"/><text x="48.2350%" y="159.50"></text></g><g><title>predicates_of (87,390 samples, 0.32%)</title><rect x="47.8499%" y="197" width="0.3180%" height="15" fill="rgb(230,116,27)"/><text x="48.0999%" y="207.50"></text></g><g><title>predicates_defined_on (69,510 samples, 0.25%)</title><rect x="47.9150%" y="181" width="0.2529%" height="15" fill="rgb(228,99,48)"/><text x="48.1650%" y="191.50"></text></g><g><title>typeck (3,498,919 samples, 12.73%)</title><rect x="35.5702%" y="213" width="12.7321%" height="15" fill="rgb(253,11,6)"/><text x="35.8202%" y="223.50">typeck</text></g><g><title>item_bodies_checking (5,734,854 samples, 20.87%)</title><rect x="27.4997%" y="261" width="20.8684%" height="15" fill="rgb(247,143,39)"/><text x="27.7497%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (5,733,314 samples, 20.86%)</title><rect x="27.5053%" y="245" width="20.8628%" height="15" fill="rgb(236,97,10)"/><text x="27.7553%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (5,700,874 samples, 20.74%)</title><rect x="27.6233%" y="229" width="20.7448%" height="15" fill="rgb(233,208,19)"/><text x="27.8733%" y="239.50">typeck</text></g><g><title>late_bound_vars_map (117,391 samples, 0.43%)</title><rect x="49.0336%" y="213" width="0.4272%" height="15" fill="rgb(216,164,2)"/><text x="49.2836%" y="223.50"></text></g><g><title>resolve_lifetimes (98,091 samples, 0.36%)</title><rect x="49.1038%" y="197" width="0.3569%" height="15" fill="rgb(220,129,5)"/><text x="49.3538%" y="207.50"></text></g><g><title>fn_sig (236,112 samples, 0.86%)</title><rect x="48.7044%" y="229" width="0.8592%" height="15" fill="rgb(242,17,10)"/><text x="48.9544%" y="239.50"></text></g><g><title>type_of (28,260 samples, 0.10%)</title><rect x="49.4607%" y="213" width="0.1028%" height="15" fill="rgb(242,107,0)"/><text x="49.7107%" y="223.50"></text></g><g><title>generics_of (74,770 samples, 0.27%)</title><rect x="49.5636%" y="229" width="0.2721%" height="15" fill="rgb(251,28,31)"/><text x="49.8136%" y="239.50"></text></g><g><title>predicates_of (63,232 samples, 0.23%)</title><rect x="49.8356%" y="229" width="0.2301%" height="15" fill="rgb(233,223,10)"/><text x="50.0856%" y="239.50"></text></g><g><title>predicates_defined_on (48,871 samples, 0.18%)</title><rect x="49.8879%" y="213" width="0.1778%" height="15" fill="rgb(215,21,27)"/><text x="50.1379%" y="223.50"></text></g><g><title>type_collecting (481,575 samples, 1.75%)</title><rect x="48.3845%" y="261" width="1.7524%" height="15" fill="rgb(232,23,21)"/><text x="48.6345%" y="271.50"></text></g><g><title>collect_mod_item_types (470,615 samples, 1.71%)</title><rect x="48.4243%" y="245" width="1.7125%" height="15" fill="rgb(244,5,23)"/><text x="48.6743%" y="255.50"></text></g><g><title>adt_def (48,220 samples, 0.18%)</title><rect x="52.1912%" y="149" width="0.1755%" height="15" fill="rgb(226,81,46)"/><text x="52.4412%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (47,990 samples, 0.17%)</title><rect x="52.1920%" y="133" width="0.1746%" height="15" fill="rgb(247,70,30)"/><text x="52.4420%" y="143.50"></text></g><g><title>item_attrs (44,940 samples, 0.16%)</title><rect x="52.2031%" y="117" width="0.1635%" height="15" fill="rgb(212,68,19)"/><text x="52.4531%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (44,650 samples, 0.16%)</title><rect x="52.2042%" y="101" width="0.1625%" height="15" fill="rgb(240,187,13)"/><text x="52.4542%" y="111.50"></text></g><g><title>adt_sized_constraint (54,651 samples, 0.20%)</title><rect x="52.1868%" y="165" width="0.1989%" height="15" fill="rgb(223,113,26)"/><text x="52.4368%" y="175.50"></text></g><g><title>adt_sized_constraint (72,411 samples, 0.26%)</title><rect x="52.1334%" y="181" width="0.2635%" height="15" fill="rgb(206,192,2)"/><text x="52.3834%" y="191.50"></text></g><g><title>adt_sized_constraint (93,221 samples, 0.34%)</title><rect x="52.0776%" y="197" width="0.3392%" height="15" fill="rgb(241,108,4)"/><text x="52.3276%" y="207.50"></text></g><g><title>adt_sized_constraint (125,662 samples, 0.46%)</title><rect x="51.9865%" y="213" width="0.4573%" height="15" fill="rgb(247,173,49)"/><text x="52.2365%" y="223.50"></text></g><g><title>evaluate_obligation (187,362 samples, 0.68%)</title><rect x="51.7643%" y="229" width="0.6818%" height="15" fill="rgb(224,114,35)"/><text x="52.0143%" y="239.50"></text></g><g><title>implied_outlives_bounds (31,171 samples, 0.11%)</title><rect x="52.4461%" y="229" width="0.1134%" height="15" fill="rgb(245,159,27)"/><text x="52.6961%" y="239.50"></text></g><g><title>param_env (206,523 samples, 0.75%)</title><rect x="52.5595%" y="229" width="0.7515%" height="15" fill="rgb(245,172,44)"/><text x="52.8095%" y="239.50"></text></g><g><title>analysis (14,357,900 samples, 52.25%)</title><rect x="1.3609%" y="293" width="52.2466%" height="15" fill="rgb(236,23,11)"/><text x="1.6109%" y="303.50">analysis</text></g><g><title>type_check_crate (7,232,360 samples, 26.32%)</title><rect x="27.2899%" y="277" width="26.3177%" height="15" fill="rgb(205,117,38)"/><text x="27.5399%" y="287.50">type_check_crate</text></g><g><title>wf_checking (950,920 samples, 3.46%)</title><rect x="50.1473%" y="261" width="3.4603%" height="15" fill="rgb(237,72,25)"/><text x="50.3973%" y="271.50">wf_..</text></g><g><title>check_item_well_formed (914,390 samples, 3.33%)</title><rect x="50.2802%" y="245" width="3.3274%" height="15" fill="rgb(244,70,9)"/><text x="50.5302%" y="255.50">che..</text></g><g><title>region_scope_tree (56,421 samples, 0.21%)</title><rect x="53.4022%" y="229" width="0.2053%" height="15" fill="rgb(217,125,39)"/><text x="53.6522%" y="239.50"></text></g><g><title>codegen_crate (437,954 samples, 1.59%)</title><rect x="53.6303%" y="293" width="1.5937%" height="15" fill="rgb(235,36,10)"/><text x="53.8803%" y="303.50"></text></g><g><title>AST_validation (31,920 samples, 0.12%)</title><rect x="55.6629%" y="277" width="0.1162%" height="15" fill="rgb(251,123,47)"/><text x="55.9129%" y="287.50"></text></g><g><title>crate_injection (53,950 samples, 0.20%)</title><rect x="55.8416%" y="277" width="0.1963%" height="15" fill="rgb(221,13,13)"/><text x="56.0916%" y="287.50"></text></g><g><title>metadata_load_macro (51,040 samples, 0.19%)</title><rect x="75.2859%" y="245" width="0.1857%" height="15" fill="rgb(238,131,9)"/><text x="75.5359%" y="255.50"></text></g><g><title>metadata_register_crate (1,352,585 samples, 4.92%)</title><rect x="75.4717%" y="245" width="4.9219%" height="15" fill="rgb(211,50,8)"/><text x="75.7217%" y="255.50">metada..</text></g><g><title>metadata_register_crate (479,488 samples, 1.74%)</title><rect x="78.6488%" y="229" width="1.7448%" height="15" fill="rgb(245,182,24)"/><text x="78.8988%" y="239.50"></text></g><g><title>metadata_register_crate (38,871 samples, 0.14%)</title><rect x="80.2521%" y="213" width="0.1414%" height="15" fill="rgb(242,14,37)"/><text x="80.5021%" y="223.50"></text></g><g><title>macro_expand_crate (6,721,746 samples, 24.46%)</title><rect x="56.0380%" y="277" width="24.4596%" height="15" fill="rgb(246,228,12)"/><text x="56.2880%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (6,707,215 samples, 24.41%)</title><rect x="56.0908%" y="261" width="24.4067%" height="15" fill="rgb(213,55,15)"/><text x="56.3408%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (28,580 samples, 0.10%)</title><rect x="80.3936%" y="245" width="0.1040%" height="15" fill="rgb(209,9,3)"/><text x="80.6436%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (80,481 samples, 0.29%)</title><rect x="80.5248%" y="277" width="0.2929%" height="15" fill="rgb(230,59,30)"/><text x="80.7748%" y="287.50"></text></g><g><title>finalize_imports (164,742 samples, 0.60%)</title><rect x="80.8310%" y="261" width="0.5995%" height="15" fill="rgb(209,121,21)"/><text x="81.0810%" y="271.50"></text></g><g><title>late_resolve_crate (527,366 samples, 1.92%)</title><rect x="81.4683%" y="261" width="1.9190%" height="15" fill="rgb(220,109,13)"/><text x="81.7183%" y="271.50">l..</text></g><g><title>metadata_register_crate (55,151 samples, 0.20%)</title><rect x="83.1867%" y="245" width="0.2007%" height="15" fill="rgb(232,18,1)"/><text x="83.4367%" y="255.50"></text></g><g><title>configure_and_expand (7,775,247 samples, 28.29%)</title><rect x="55.2240%" y="293" width="28.2932%" height="15" fill="rgb(215,41,42)"/><text x="55.4740%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (741,839 samples, 2.70%)</title><rect x="80.8177%" y="277" width="2.6995%" height="15" fill="rgb(224,123,36)"/><text x="81.0677%" y="287.50">re..</text></g><g><title>drop_ast (36,590 samples, 0.13%)</title><rect x="83.5172%" y="293" width="0.1331%" height="15" fill="rgb(240,125,3)"/><text x="83.7672%" y="303.50"></text></g><g><title>early_lint_checks (84,951 samples, 0.31%)</title><rect x="83.7067%" y="293" width="0.3091%" height="15" fill="rgb(205,98,50)"/><text x="83.9567%" y="303.50"></text></g><g><title>free_global_ctxt (1,744,840 samples, 6.35%)</title><rect x="84.0159%" y="293" width="6.3493%" height="15" fill="rgb(205,185,37)"/><text x="84.2659%" y="303.50">free_glo..</text></g><g><title>crate_hash (67,511 samples, 0.25%)</title><rect x="91.3402%" y="277" width="0.2457%" height="15" fill="rgb(238,207,15)"/><text x="91.5902%" y="287.50"></text></g><g><title>generate_crate_metadata (420,585 samples, 1.53%)</title><rect x="90.3651%" y="293" width="1.5305%" height="15" fill="rgb(213,199,42)"/><text x="90.6151%" y="303.50"></text></g><g><title>hir_lowering (531,446 samples, 1.93%)</title><rect x="91.8956%" y="293" width="1.9339%" height="15" fill="rgb(235,201,11)"/><text x="92.1456%" y="303.50">h..</text></g><g><title>link (46,591 samples, 0.17%)</title><rect x="93.8295%" y="293" width="0.1695%" height="15" fill="rgb(207,46,11)"/><text x="94.0795%" y="303.50"></text></g><g><title>parse_crate (623,457 samples, 2.27%)</title><rect x="93.9990%" y="293" width="2.2687%" height="15" fill="rgb(241,35,35)"/><text x="94.2490%" y="303.50">p..</text></g><g><title>prepare_outputs (151,582 samples, 0.55%)</title><rect x="96.2860%" y="293" width="0.5516%" height="15" fill="rgb(243,32,47)"/><text x="96.5360%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (429,665 samples, 1.56%)</title><rect x="96.8376%" y="293" width="1.5635%" height="15" fill="rgb(247,202,23)"/><text x="97.0876%" y="303.50"></text></g><g><title>setup_global_ctxt (130,961 samples, 0.48%)</title><rect x="98.4379%" y="293" width="0.4766%" height="15" fill="rgb(219,102,11)"/><text x="98.6879%" y="303.50"></text></g><g><title>all (27,481,017 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (27,481,017 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (298,333 samples, 1.09%)</title><rect x="98.9144%" y="293" width="1.0856%" height="15" fill="rgb(216,99,12)"/><text x="99.1644%" y="303.50"></text></g></svg></svg>