<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (5,053,229 samples, 0.17%)</title><rect x="12.3526%" y="133" width="0.1671%" height="15" fill="rgb(227,0,7)"/><text x="12.6026%" y="143.50"></text></g><g><title>is_copy_raw (25,886,394 samples, 0.86%)</title><rect x="17.4948%" y="53" width="0.8560%" height="15" fill="rgb(217,0,24)"/><text x="17.7448%" y="63.50"></text></g><g><title>evaluate_obligation (20,411,270 samples, 0.67%)</title><rect x="17.6758%" y="37" width="0.6749%" height="15" fill="rgb(221,193,54)"/><text x="17.9258%" y="47.50"></text></g><g><title>needs_drop_raw (31,368,543 samples, 1.04%)</title><rect x="17.3251%" y="69" width="1.0373%" height="15" fill="rgb(248,212,6)"/><text x="17.5751%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (3,942,340 samples, 0.13%)</title><rect x="18.4386%" y="53" width="0.1304%" height="15" fill="rgb(208,68,35)"/><text x="18.6886%" y="63.50"></text></g><g><title>resolve_instance (7,827,617 samples, 0.26%)</title><rect x="18.3638%" y="69" width="0.2588%" height="15" fill="rgb(232,128,0)"/><text x="18.6138%" y="79.50"></text></g><g><title>thir_body (30,479,143 samples, 1.01%)</title><rect x="18.6358%" y="69" width="1.0078%" height="15" fill="rgb(207,160,47)"/><text x="18.8858%" y="79.50"></text></g><g><title>mir_const (193,089,074 samples, 6.38%)</title><rect x="13.3329%" y="117" width="6.3848%" height="15" fill="rgb(228,23,34)"/><text x="13.5829%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (171,609,684 samples, 5.67%)</title><rect x="14.0431%" y="101" width="5.6745%" height="15" fill="rgb(218,30,26)"/><text x="14.2931%" y="111.50">unsafet..</text></g><g><title>mir_built (158,523,204 samples, 5.24%)</title><rect x="14.4758%" y="85" width="5.2418%" height="15" fill="rgb(220,122,19)"/><text x="14.7258%" y="95.50">mir_bu..</text></g><g><title>mir_const_qualif (5,146,106 samples, 0.17%)</title><rect x="19.7177%" y="117" width="0.1702%" height="15" fill="rgb(250,228,42)"/><text x="19.9677%" y="127.50"></text></g><g><title>mir_const (3,403,860 samples, 0.11%)</title><rect x="19.7753%" y="101" width="0.1126%" height="15" fill="rgb(240,193,28)"/><text x="20.0253%" y="111.50"></text></g><g><title>mir_promoted (219,815,323 samples, 7.27%)</title><rect x="12.6193%" y="133" width="7.2685%" height="15" fill="rgb(216,20,37)"/><text x="12.8693%" y="143.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (17,713,682 samples, 0.59%)</title><rect x="19.8879%" y="133" width="0.5857%" height="15" fill="rgb(206,188,39)"/><text x="20.1379%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (9,568,012 samples, 0.32%)</title><rect x="20.4737%" y="133" width="0.3164%" height="15" fill="rgb(217,207,13)"/><text x="20.7237%" y="143.50"></text></g><g><title>normalize_projection_ty (3,545,455 samples, 0.12%)</title><rect x="20.6728%" y="117" width="0.1172%" height="15" fill="rgb(231,73,38)"/><text x="20.9228%" y="127.50"></text></g><g><title>type_op_normalize_ty (8,579,337 samples, 0.28%)</title><rect x="20.8249%" y="133" width="0.2837%" height="15" fill="rgb(225,20,46)"/><text x="21.0749%" y="143.50"></text></g><g><title>type_op_prove_predicate (38,193,500 samples, 1.26%)</title><rect x="21.1086%" y="133" width="1.2629%" height="15" fill="rgb(210,31,41)"/><text x="21.3586%" y="143.50"></text></g><g><title>MIR_borrow_checking (667,161,350 samples, 22.06%)</title><rect x="0.3121%" y="165" width="22.0608%" height="15" fill="rgb(221,200,47)"/><text x="0.5621%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (664,554,350 samples, 21.97%)</title><rect x="0.3983%" y="149" width="21.9745%" height="15" fill="rgb(226,26,5)"/><text x="0.6483%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (3,993,714 samples, 0.13%)</title><rect x="22.4601%" y="165" width="0.1321%" height="15" fill="rgb(249,33,26)"/><text x="22.7101%" y="175.50"></text></g><g><title>codegen_fn_attrs (3,676,866 samples, 0.12%)</title><rect x="22.8177%" y="133" width="0.1216%" height="15" fill="rgb(235,183,28)"/><text x="23.0677%" y="143.50"></text></g><g><title>check_mod_attrs (10,411,916 samples, 0.34%)</title><rect x="22.5950%" y="149" width="0.3443%" height="15" fill="rgb(221,5,38)"/><text x="22.8450%" y="159.50"></text></g><g><title>check_mod_const_bodies (3,411,266 samples, 0.11%)</title><rect x="22.9393%" y="149" width="0.1128%" height="15" fill="rgb(247,18,42)"/><text x="23.1893%" y="159.50"></text></g><g><title>lookup_deprecation_entry (3,839,304 samples, 0.13%)</title><rect x="23.2810%" y="133" width="0.1270%" height="15" fill="rgb(241,131,45)"/><text x="23.5310%" y="143.50"></text></g><g><title>stability_index (3,588,540 samples, 0.12%)</title><rect x="23.2893%" y="117" width="0.1187%" height="15" fill="rgb(249,31,29)"/><text x="23.5393%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (8,031,769 samples, 0.27%)</title><rect x="23.1493%" y="149" width="0.2656%" height="15" fill="rgb(225,111,53)"/><text x="23.3993%" y="159.50"></text></g><g><title>misc_checking_1 (25,542,856 samples, 0.84%)</title><rect x="22.5922%" y="165" width="0.8446%" height="15" fill="rgb(238,160,17)"/><text x="22.8422%" y="175.50"></text></g><g><title>check_mod_intrinsics (3,229,186 samples, 0.11%)</title><rect x="23.4380%" y="133" width="0.1068%" height="15" fill="rgb(214,148,48)"/><text x="23.6880%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (12,772,703 samples, 0.42%)</title><rect x="23.4369%" y="149" width="0.4223%" height="15" fill="rgb(232,36,49)"/><text x="23.6869%" y="159.50"></text></g><g><title>check_mod_liveness (9,511,654 samples, 0.31%)</title><rect x="23.5448%" y="133" width="0.3145%" height="15" fill="rgb(209,103,24)"/><text x="23.7948%" y="143.50"></text></g><g><title>misc_checking_2 (36,523,807 samples, 1.21%)</title><rect x="23.4368%" y="165" width="1.2077%" height="15" fill="rgb(229,88,8)"/><text x="23.6868%" y="175.50"></text></g><g><title>match_checking (23,746,714 samples, 0.79%)</title><rect x="23.8593%" y="149" width="0.7852%" height="15" fill="rgb(213,181,19)"/><text x="24.1093%" y="159.50"></text></g><g><title>check_match (22,961,815 samples, 0.76%)</title><rect x="23.8852%" y="133" width="0.7593%" height="15" fill="rgb(254,191,54)"/><text x="24.1352%" y="143.50"></text></g><g><title>check_private_in_public (7,510,754 samples, 0.25%)</title><rect x="24.6453%" y="149" width="0.2484%" height="15" fill="rgb(241,83,37)"/><text x="24.8953%" y="159.50"></text></g><g><title>death_checking (8,387,014 samples, 0.28%)</title><rect x="24.8936%" y="149" width="0.2773%" height="15" fill="rgb(233,36,39)"/><text x="25.1436%" y="159.50"></text></g><g><title>eval_to_const_value_raw (5,494,170 samples, 0.18%)</title><rect x="25.5587%" y="117" width="0.1817%" height="15" fill="rgb(226,3,54)"/><text x="25.8087%" y="127.50"></text></g><g><title>eval_to_const_value_raw (5,396,329 samples, 0.18%)</title><rect x="25.5619%" y="101" width="0.1784%" height="15" fill="rgb(245,192,40)"/><text x="25.8119%" y="111.50"></text></g><g><title>eval_to_allocation_raw (5,259,508 samples, 0.17%)</title><rect x="25.5665%" y="85" width="0.1739%" height="15" fill="rgb(238,167,29)"/><text x="25.8165%" y="95.50"></text></g><g><title>crate_lints (21,127,975 samples, 0.70%)</title><rect x="25.1711%" y="133" width="0.6986%" height="15" fill="rgb(232,182,51)"/><text x="25.4211%" y="143.50"></text></g><g><title>lint_checking (37,403,157 samples, 1.24%)</title><rect x="25.1709%" y="149" width="1.2368%" height="15" fill="rgb(231,60,39)"/><text x="25.4209%" y="159.50"></text></g><g><title>module_lints (16,271,162 samples, 0.54%)</title><rect x="25.8697%" y="133" width="0.5380%" height="15" fill="rgb(208,69,12)"/><text x="26.1197%" y="143.50"></text></g><g><title>lint_mod (16,248,252 samples, 0.54%)</title><rect x="25.8705%" y="117" width="0.5373%" height="15" fill="rgb(235,93,37)"/><text x="26.1205%" y="127.50"></text></g><g><title>privacy_access_levels (7,996,519 samples, 0.26%)</title><rect x="26.4077%" y="149" width="0.2644%" height="15" fill="rgb(213,116,39)"/><text x="26.6577%" y="159.50"></text></g><g><title>privacy_checking_modules (30,954,005 samples, 1.02%)</title><rect x="26.6722%" y="149" width="1.0235%" height="15" fill="rgb(222,207,29)"/><text x="26.9222%" y="159.50"></text></g><g><title>check_mod_privacy (30,933,845 samples, 1.02%)</title><rect x="26.6728%" y="133" width="1.0229%" height="15" fill="rgb(206,96,30)"/><text x="26.9228%" y="143.50"></text></g><g><title>misc_checking_3 (92,415,880 samples, 3.06%)</title><rect x="24.6445%" y="165" width="3.0559%" height="15" fill="rgb(218,138,4)"/><text x="24.8945%" y="175.50">mis..</text></g><g><title>impl_parent (4,548,869 samples, 0.15%)</title><rect x="28.0226%" y="101" width="0.1504%" height="15" fill="rgb(250,191,14)"/><text x="28.2726%" y="111.50"></text></g><g><title>impl_trait_ref (8,700,595 samples, 0.29%)</title><rect x="28.1731%" y="101" width="0.2877%" height="15" fill="rgb(239,60,40)"/><text x="28.4231%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,915,839 samples, 0.23%)</title><rect x="28.2321%" y="85" width="0.2287%" height="15" fill="rgb(206,27,48)"/><text x="28.4821%" y="95.50"></text></g><g><title>coherent_trait (24,791,387 samples, 0.82%)</title><rect x="27.7353%" y="133" width="0.8198%" height="15" fill="rgb(225,35,8)"/><text x="27.9853%" y="143.50"></text></g><g><title>specialization_graph_of (24,087,790 samples, 0.80%)</title><rect x="27.7586%" y="117" width="0.7965%" height="15" fill="rgb(250,213,24)"/><text x="28.0086%" y="127.50"></text></g><g><title>coherence_checking (25,483,745 samples, 0.84%)</title><rect x="27.7340%" y="149" width="0.8427%" height="15" fill="rgb(247,123,22)"/><text x="27.9840%" y="159.50"></text></g><g><title>dropck_outlives (10,217,952 samples, 0.34%)</title><rect x="50.2836%" y="101" width="0.3379%" height="15" fill="rgb(231,138,38)"/><text x="50.5336%" y="111.50"></text></g><g><title>evaluate_obligation (17,510,216 samples, 0.58%)</title><rect x="50.6215%" y="101" width="0.5790%" height="15" fill="rgb(231,145,46)"/><text x="50.8715%" y="111.50"></text></g><g><title>evaluate_obligation (4,900,261 samples, 0.16%)</title><rect x="53.1490%" y="85" width="0.1620%" height="15" fill="rgb(251,118,11)"/><text x="53.3990%" y="95.50"></text></g><g><title>typeck (62,607,786 samples, 2.07%)</title><rect x="51.3822%" y="101" width="2.0702%" height="15" fill="rgb(217,147,25)"/><text x="51.6322%" y="111.50">t..</text></g><g><title>item_bodies_checking (752,049,157 samples, 24.87%)</title><rect x="28.6014%" y="149" width="24.8677%" height="15" fill="rgb(247,81,37)"/><text x="28.8514%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (752,045,287 samples, 24.87%)</title><rect x="28.6015%" y="133" width="24.8676%" height="15" fill="rgb(209,12,38)"/><text x="28.8515%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (750,317,081 samples, 24.81%)</title><rect x="28.6586%" y="117" width="24.8104%" height="15" fill="rgb(227,1,9)"/><text x="28.9086%" y="127.50">typeck</text></g><g><title>item_types_checking (36,074,452 samples, 1.19%)</title><rect x="53.4691%" y="149" width="1.1929%" height="15" fill="rgb(248,47,43)"/><text x="53.7191%" y="159.50"></text></g><g><title>check_mod_item_types (36,055,842 samples, 1.19%)</title><rect x="53.4697%" y="133" width="1.1922%" height="15" fill="rgb(221,10,30)"/><text x="53.7197%" y="143.50"></text></g><g><title>typeck (4,852,910 samples, 0.16%)</title><rect x="54.5015%" y="117" width="0.1605%" height="15" fill="rgb(210,229,1)"/><text x="54.7515%" y="127.50"></text></g><g><title>fn_sig (6,838,105 samples, 0.23%)</title><rect x="54.8796%" y="117" width="0.2261%" height="15" fill="rgb(222,148,37)"/><text x="55.1296%" y="127.50"></text></g><g><title>lint_levels (5,917,445 samples, 0.20%)</title><rect x="55.3953%" y="69" width="0.1957%" height="15" fill="rgb(234,67,33)"/><text x="55.6453%" y="79.50"></text></g><g><title>is_late_bound_map (12,209,854 samples, 0.40%)</title><rect x="55.1887%" y="101" width="0.4037%" height="15" fill="rgb(247,98,35)"/><text x="55.4387%" y="111.50"></text></g><g><title>resolve_lifetimes (11,915,019 samples, 0.39%)</title><rect x="55.1985%" y="85" width="0.3940%" height="15" fill="rgb(247,138,52)"/><text x="55.4485%" y="95.50"></text></g><g><title>named_region_map (3,324,668 samples, 0.11%)</title><rect x="55.5925%" y="101" width="0.1099%" height="15" fill="rgb(213,79,30)"/><text x="55.8425%" y="111.50"></text></g><g><title>generics_of (18,267,884 samples, 0.60%)</title><rect x="55.1057%" y="117" width="0.6041%" height="15" fill="rgb(246,177,23)"/><text x="55.3557%" y="127.50"></text></g><g><title>explicit_predicates_of (3,646,868 samples, 0.12%)</title><rect x="55.8425%" y="85" width="0.1206%" height="15" fill="rgb(230,62,27)"/><text x="56.0925%" y="95.50"></text></g><g><title>predicates_of (10,233,165 samples, 0.34%)</title><rect x="55.7347%" y="117" width="0.3384%" height="15" fill="rgb(216,154,8)"/><text x="55.9847%" y="127.50"></text></g><g><title>predicates_defined_on (9,055,517 samples, 0.30%)</title><rect x="55.7736%" y="101" width="0.2994%" height="15" fill="rgb(244,35,45)"/><text x="56.0236%" y="111.50"></text></g><g><title>inferred_outlives_of (3,325,168 samples, 0.11%)</title><rect x="55.9631%" y="85" width="0.1100%" height="15" fill="rgb(251,115,12)"/><text x="56.2131%" y="95.50"></text></g><g><title>type_collecting (44,337,314 samples, 1.47%)</title><rect x="54.6622%" y="149" width="1.4661%" height="15" fill="rgb(240,54,50)"/><text x="54.9122%" y="159.50"></text></g><g><title>collect_mod_item_types (44,304,363 samples, 1.46%)</title><rect x="54.6633%" y="133" width="1.4650%" height="15" fill="rgb(233,84,52)"/><text x="54.9133%" y="143.50"></text></g><g><title>evaluate_obligation (5,714,351 samples, 0.19%)</title><rect x="57.6573%" y="117" width="0.1890%" height="15" fill="rgb(207,117,47)"/><text x="57.9073%" y="127.50"></text></g><g><title>implied_outlives_bounds (5,346,870 samples, 0.18%)</title><rect x="57.8584%" y="117" width="0.1768%" height="15" fill="rgb(249,43,39)"/><text x="58.1084%" y="127.50"></text></g><g><title>param_env (6,248,611 samples, 0.21%)</title><rect x="58.0510%" y="117" width="0.2066%" height="15" fill="rgb(209,38,44)"/><text x="58.3010%" y="127.50"></text></g><g><title>region_scope_tree (11,499,493 samples, 0.38%)</title><rect x="58.2637%" y="117" width="0.3802%" height="15" fill="rgb(236,212,23)"/><text x="58.5137%" y="127.50"></text></g><g><title>check_impl_item_well_formed (72,024,579 samples, 2.38%)</title><rect x="56.2695%" y="133" width="2.3816%" height="15" fill="rgb(242,79,21)"/><text x="56.5195%" y="143.50">ch..</text></g><g><title>evaluate_obligation (5,262,462 samples, 0.17%)</title><rect x="59.3373%" y="117" width="0.1740%" height="15" fill="rgb(211,96,35)"/><text x="59.5873%" y="127.50"></text></g><g><title>param_env (4,044,361 samples, 0.13%)</title><rect x="59.5559%" y="117" width="0.1337%" height="15" fill="rgb(253,215,40)"/><text x="59.8059%" y="127.50"></text></g><g><title>analysis (1,805,821,648 samples, 59.71%)</title><rect x="0.0513%" y="181" width="59.7124%" height="15" fill="rgb(211,81,21)"/><text x="0.3013%" y="191.50">analysis</text></g><g><title>type_check_crate (969,656,834 samples, 32.06%)</title><rect x="27.7004%" y="165" width="32.0632%" height="15" fill="rgb(208,190,38)"/><text x="27.9504%" y="175.50">type_check_crate</text></g><g><title>wf_checking (109,801,465 samples, 3.63%)</title><rect x="56.1329%" y="149" width="3.6308%" height="15" fill="rgb(235,213,38)"/><text x="56.3829%" y="159.50">wf_c..</text></g><g><title>check_item_well_formed (33,644,460 samples, 1.11%)</title><rect x="58.6511%" y="133" width="1.1125%" height="15" fill="rgb(237,122,38)"/><text x="58.9011%" y="143.50"></text></g><g><title>AST_validation (5,040,906 samples, 0.17%)</title><rect x="59.7874%" y="165" width="0.1667%" height="15" fill="rgb(244,218,35)"/><text x="60.0374%" y="175.50"></text></g><g><title>complete_gated_feature_checking (4,009,585 samples, 0.13%)</title><rect x="59.9540%" y="165" width="0.1326%" height="15" fill="rgb(240,68,47)"/><text x="60.2040%" y="175.50"></text></g><g><title>metadata_register_crate (7,267,092 samples, 0.24%)</title><rect x="90.5857%" y="133" width="0.2403%" height="15" fill="rgb(210,16,53)"/><text x="90.8357%" y="143.50"></text></g><g><title>metadata_register_crate (5,547,383 samples, 0.18%)</title><rect x="90.6425%" y="117" width="0.1834%" height="15" fill="rgb(235,124,12)"/><text x="90.8925%" y="127.50"></text></g><g><title>macro_expand_crate (930,061,223 samples, 30.75%)</title><rect x="60.0882%" y="165" width="30.7540%" height="15" fill="rgb(224,169,11)"/><text x="60.3382%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (930,022,321 samples, 30.75%)</title><rect x="60.0894%" y="149" width="30.7527%" height="15" fill="rgb(250,166,2)"/><text x="60.3394%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (58,875,106 samples, 1.95%)</title><rect x="90.9366%" y="149" width="1.9468%" height="15" fill="rgb(242,216,29)"/><text x="91.1866%" y="159.50">l..</text></g><g><title>resolve_check_unused (3,304,157 samples, 0.11%)</title><rect x="92.8885%" y="149" width="0.1093%" height="15" fill="rgb(230,116,27)"/><text x="93.1385%" y="159.50"></text></g><g><title>resolve_postprocess (3,132,516 samples, 0.10%)</title><rect x="92.9977%" y="149" width="0.1036%" height="15" fill="rgb(228,99,48)"/><text x="93.2477%" y="159.50"></text></g><g><title>configure_and_expand (1,007,622,598 samples, 33.32%)</title><rect x="59.7827%" y="181" width="33.3186%" height="15" fill="rgb(253,11,6)"/><text x="60.0327%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (68,266,702 samples, 2.26%)</title><rect x="90.8440%" y="165" width="2.2573%" height="15" fill="rgb(247,143,39)"/><text x="91.0940%" y="175.50">r..</text></g><g><title>drop_ast (14,653,614 samples, 0.48%)</title><rect x="93.1014%" y="181" width="0.4845%" height="15" fill="rgb(236,97,10)"/><text x="93.3514%" y="191.50"></text></g><g><title>early_lint_checks (17,338,113 samples, 0.57%)</title><rect x="93.5871%" y="181" width="0.5733%" height="15" fill="rgb(233,208,19)"/><text x="93.8371%" y="191.50"></text></g><g><title>free_global_ctxt (20,238,086 samples, 0.67%)</title><rect x="94.1604%" y="181" width="0.6692%" height="15" fill="rgb(216,164,2)"/><text x="94.4104%" y="191.50"></text></g><g><title>generate_crate_metadata (58,039,647 samples, 1.92%)</title><rect x="94.8296%" y="181" width="1.9192%" height="15" fill="rgb(220,129,5)"/><text x="95.0796%" y="191.50">g..</text></g><g><title>hir_lowering (89,638,270 samples, 2.96%)</title><rect x="96.7487%" y="181" width="2.9640%" height="15" fill="rgb(242,17,10)"/><text x="96.9987%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (3,944,374 samples, 0.13%)</title><rect x="99.7333%" y="181" width="0.1304%" height="15" fill="rgb(242,107,0)"/><text x="99.9833%" y="191.50"></text></g><g><title>all (3,024,200,507 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (3,024,200,507 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (3,804,182 samples, 0.13%)</title><rect x="99.8742%" y="181" width="0.1258%" height="15" fill="rgb(215,21,27)"/><text x="100.1242%" y="191.50"></text></g></svg></svg>