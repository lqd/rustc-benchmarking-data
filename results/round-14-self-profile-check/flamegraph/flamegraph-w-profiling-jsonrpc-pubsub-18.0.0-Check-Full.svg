<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (749,633 samples, 0.27%)</title><rect x="10.0067%" y="181" width="0.2654%" height="15" fill="rgb(227,0,7)"/><text x="10.2567%" y="191.50"></text></g><g><title>param_env (694,240 samples, 0.25%)</title><rect x="11.4621%" y="149" width="0.2458%" height="15" fill="rgb(217,0,24)"/><text x="11.7121%" y="159.50"></text></g><g><title>item_attrs (375,975 samples, 0.13%)</title><rect x="12.1034%" y="117" width="0.1331%" height="15" fill="rgb(221,193,54)"/><text x="12.3534%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (359,285 samples, 0.13%)</title><rect x="12.1093%" y="101" width="0.1272%" height="15" fill="rgb(248,212,6)"/><text x="12.3593%" y="111.50"></text></g><g><title>codegen_fn_attrs (587,027 samples, 0.21%)</title><rect x="12.0388%" y="133" width="0.2078%" height="15" fill="rgb(208,68,35)"/><text x="12.2888%" y="143.50"></text></g><g><title>adt_drop_tys (560,199 samples, 0.20%)</title><rect x="14.3029%" y="101" width="0.1983%" height="15" fill="rgb(232,128,0)"/><text x="14.5529%" y="111.50"></text></g><g><title>is_copy_raw (2,507,942 samples, 0.89%)</title><rect x="14.5015%" y="101" width="0.8880%" height="15" fill="rgb(207,160,47)"/><text x="14.7515%" y="111.50"></text></g><g><title>evaluate_obligation (1,968,167 samples, 0.70%)</title><rect x="14.6926%" y="85" width="0.6969%" height="15" fill="rgb(228,23,34)"/><text x="14.9426%" y="95.50"></text></g><g><title>needs_drop_raw (3,461,587 samples, 1.23%)</title><rect x="14.1644%" y="117" width="1.2256%" height="15" fill="rgb(218,30,26)"/><text x="14.4144%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,326,980 samples, 0.47%)</title><rect x="15.5894%" y="101" width="0.4698%" height="15" fill="rgb(220,122,19)"/><text x="15.8394%" y="111.50"></text></g><g><title>specialization_graph_of (971,201 samples, 0.34%)</title><rect x="16.1151%" y="101" width="0.3439%" height="15" fill="rgb(250,228,42)"/><text x="16.3651%" y="111.50"></text></g><g><title>impl_trait_ref (478,772 samples, 0.17%)</title><rect x="16.2894%" y="85" width="0.1695%" height="15" fill="rgb(240,193,28)"/><text x="16.5394%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (417,642 samples, 0.15%)</title><rect x="16.3111%" y="69" width="0.1479%" height="15" fill="rgb(216,20,37)"/><text x="16.5611%" y="79.50"></text></g><g><title>resolve_instance (3,196,148 samples, 1.13%)</title><rect x="15.3900%" y="117" width="1.1316%" height="15" fill="rgb(206,188,39)"/><text x="15.6400%" y="127.50"></text></g><g><title>thir_body (1,896,830 samples, 0.67%)</title><rect x="16.5475%" y="117" width="0.6716%" height="15" fill="rgb(217,207,13)"/><text x="16.7975%" y="127.50"></text></g><g><title>mir_const (17,853,276 samples, 6.32%)</title><rect x="10.9354%" y="165" width="6.3212%" height="15" fill="rgb(231,73,38)"/><text x="11.1854%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (15,671,449 samples, 5.55%)</title><rect x="11.7079%" y="149" width="5.5487%" height="15" fill="rgb(225,20,46)"/><text x="11.9579%" y="159.50">unsafet..</text></g><g><title>mir_built (14,149,894 samples, 5.01%)</title><rect x="12.2466%" y="133" width="5.0100%" height="15" fill="rgb(210,31,41)"/><text x="12.4966%" y="143.50">mir_bu..</text></g><g><title>mir_const_qualif (457,155 samples, 0.16%)</title><rect x="17.2566%" y="165" width="0.1619%" height="15" fill="rgb(221,200,47)"/><text x="17.5066%" y="175.50"></text></g><g><title>mir_promoted (19,874,076 samples, 7.04%)</title><rect x="10.3822%" y="181" width="7.0367%" height="15" fill="rgb(226,26,5)"/><text x="10.6322%" y="191.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (1,608,168 samples, 0.57%)</title><rect x="17.4204%" y="181" width="0.5694%" height="15" fill="rgb(249,33,26)"/><text x="17.6704%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (2,370,429 samples, 0.84%)</title><rect x="17.9898%" y="181" width="0.8393%" height="15" fill="rgb(235,183,28)"/><text x="18.2398%" y="191.50"></text></g><g><title>normalize_projection_ty (1,561,463 samples, 0.55%)</title><rect x="18.2762%" y="165" width="0.5529%" height="15" fill="rgb(221,5,38)"/><text x="18.5262%" y="175.50"></text></g><g><title>type_op_normalize_predicate (728,988 samples, 0.26%)</title><rect x="18.8290%" y="181" width="0.2581%" height="15" fill="rgb(247,18,42)"/><text x="19.0790%" y="191.50"></text></g><g><title>normalize_projection_ty (599,278 samples, 0.21%)</title><rect x="18.8750%" y="165" width="0.2122%" height="15" fill="rgb(241,131,45)"/><text x="19.1250%" y="175.50"></text></g><g><title>type_op_normalize_ty (436,056 samples, 0.15%)</title><rect x="19.0871%" y="181" width="0.1544%" height="15" fill="rgb(249,31,29)"/><text x="19.3371%" y="191.50"></text></g><g><title>normalize_projection_ty (289,974 samples, 0.10%)</title><rect x="19.1389%" y="165" width="0.1027%" height="15" fill="rgb(225,111,53)"/><text x="19.3889%" y="175.50"></text></g><g><title>type_op_prove_predicate (14,235,256 samples, 5.04%)</title><rect x="19.2415%" y="181" width="5.0402%" height="15" fill="rgb(238,160,17)"/><text x="19.4915%" y="191.50">type_o..</text></g><g><title>evaluate_obligation (354,572 samples, 0.13%)</title><rect x="24.1562%" y="165" width="0.1255%" height="15" fill="rgb(214,148,48)"/><text x="24.4062%" y="175.50"></text></g><g><title>MIR_borrow_checking (67,456,660 samples, 23.88%)</title><rect x="0.4038%" y="213" width="23.8840%" height="15" fill="rgb(232,36,49)"/><text x="0.6538%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (66,984,048 samples, 23.72%)</title><rect x="0.5711%" y="197" width="23.7167%" height="15" fill="rgb(209,103,24)"/><text x="0.8211%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (341,721 samples, 0.12%)</title><rect x="24.3509%" y="213" width="0.1210%" height="15" fill="rgb(229,88,8)"/><text x="24.6009%" y="223.50"></text></g><g><title>codegen_fn_attrs (353,852 samples, 0.13%)</title><rect x="24.7048%" y="149" width="0.1253%" height="15" fill="rgb(213,181,19)"/><text x="24.9548%" y="159.50"></text></g><g><title>codegen_fn_attrs (612,628 samples, 0.22%)</title><rect x="24.6178%" y="181" width="0.2169%" height="15" fill="rgb(254,191,54)"/><text x="24.8678%" y="191.50"></text></g><g><title>should_inherit_track_caller (521,665 samples, 0.18%)</title><rect x="24.6500%" y="165" width="0.1847%" height="15" fill="rgb(241,83,37)"/><text x="24.9000%" y="175.50"></text></g><g><title>check_mod_attrs (995,981 samples, 0.35%)</title><rect x="24.4821%" y="197" width="0.3526%" height="15" fill="rgb(233,36,39)"/><text x="24.7321%" y="207.50"></text></g><g><title>lookup_deprecation_entry (292,374 samples, 0.10%)</title><rect x="25.0954%" y="181" width="0.1035%" height="15" fill="rgb(226,3,54)"/><text x="25.3454%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (777,908 samples, 0.28%)</title><rect x="24.9702%" y="197" width="0.2754%" height="15" fill="rgb(245,192,40)"/><text x="25.2202%" y="207.50"></text></g><g><title>misc_checking_1 (2,292,996 samples, 0.81%)</title><rect x="24.4721%" y="213" width="0.8119%" height="15" fill="rgb(238,167,29)"/><text x="24.7221%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (1,190,893 samples, 0.42%)</title><rect x="25.2845%" y="197" width="0.4217%" height="15" fill="rgb(232,182,51)"/><text x="25.5345%" y="207.50"></text></g><g><title>check_mod_liveness (1,007,051 samples, 0.36%)</title><rect x="25.3496%" y="181" width="0.3566%" height="15" fill="rgb(231,60,39)"/><text x="25.5996%" y="191.50"></text></g><g><title>type_uninhabited_from (411,265 samples, 0.15%)</title><rect x="25.5606%" y="165" width="0.1456%" height="15" fill="rgb(208,69,12)"/><text x="25.8106%" y="175.50"></text></g><g><title>type_uninhabited_from (307,165 samples, 0.11%)</title><rect x="25.5974%" y="149" width="0.1088%" height="15" fill="rgb(235,93,37)"/><text x="25.8474%" y="159.50"></text></g><g><title>misc_checking_2 (2,374,936 samples, 0.84%)</title><rect x="25.2839%" y="213" width="0.8409%" height="15" fill="rgb(213,116,39)"/><text x="25.5339%" y="223.50"></text></g><g><title>match_checking (1,182,323 samples, 0.42%)</title><rect x="25.7062%" y="197" width="0.4186%" height="15" fill="rgb(222,207,29)"/><text x="25.9562%" y="207.50"></text></g><g><title>check_match (1,117,213 samples, 0.40%)</title><rect x="25.7292%" y="181" width="0.3956%" height="15" fill="rgb(206,96,30)"/><text x="25.9792%" y="191.50"></text></g><g><title>check_private_in_public (506,056 samples, 0.18%)</title><rect x="26.1286%" y="197" width="0.1792%" height="15" fill="rgb(218,138,4)"/><text x="26.3786%" y="207.50"></text></g><g><title>death_checking (932,130 samples, 0.33%)</title><rect x="26.3077%" y="197" width="0.3300%" height="15" fill="rgb(250,191,14)"/><text x="26.5577%" y="207.50"></text></g><g><title>fn_abi_of_instance (320,344 samples, 0.11%)</title><rect x="27.1593%" y="69" width="0.1134%" height="15" fill="rgb(239,60,40)"/><text x="27.4093%" y="79.50"></text></g><g><title>eval_to_const_value_raw (703,968 samples, 0.25%)</title><rect x="27.1389%" y="117" width="0.2492%" height="15" fill="rgb(206,27,48)"/><text x="27.3889%" y="127.50"></text></g><g><title>eval_to_const_value_raw (702,938 samples, 0.25%)</title><rect x="27.1392%" y="101" width="0.2489%" height="15" fill="rgb(225,35,8)"/><text x="27.3892%" y="111.50"></text></g><g><title>eval_to_allocation_raw (701,348 samples, 0.25%)</title><rect x="27.1398%" y="85" width="0.2483%" height="15" fill="rgb(250,213,24)"/><text x="27.3898%" y="95.50"></text></g><g><title>eval_to_allocation_raw (905,270 samples, 0.32%)</title><rect x="27.0678%" y="165" width="0.3205%" height="15" fill="rgb(247,123,22)"/><text x="27.3178%" y="175.50"></text></g><g><title>eval_to_allocation_raw (901,260 samples, 0.32%)</title><rect x="27.0693%" y="149" width="0.3191%" height="15" fill="rgb(231,138,38)"/><text x="27.3193%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (713,478 samples, 0.25%)</title><rect x="27.1357%" y="133" width="0.2526%" height="15" fill="rgb(231,145,46)"/><text x="27.3857%" y="143.50"></text></g><g><title>param_env (1,004,091 samples, 0.36%)</title><rect x="27.3884%" y="165" width="0.3555%" height="15" fill="rgb(251,118,11)"/><text x="27.6384%" y="175.50"></text></g><g><title>predicates_of (589,197 samples, 0.21%)</title><rect x="27.5353%" y="149" width="0.2086%" height="15" fill="rgb(217,147,25)"/><text x="27.7853%" y="159.50"></text></g><g><title>predicates_defined_on (287,474 samples, 0.10%)</title><rect x="27.6421%" y="133" width="0.1018%" height="15" fill="rgb(247,81,37)"/><text x="27.8921%" y="143.50"></text></g><g><title>crate_lints (4,757,153 samples, 1.68%)</title><rect x="26.6385%" y="181" width="1.6843%" height="15" fill="rgb(209,12,38)"/><text x="26.8885%" y="191.50"></text></g><g><title>type_of (1,507,024 samples, 0.53%)</title><rect x="27.7893%" y="165" width="0.5336%" height="15" fill="rgb(227,1,9)"/><text x="28.0393%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (1,190,041 samples, 0.42%)</title><rect x="27.9015%" y="149" width="0.4214%" height="15" fill="rgb(248,47,43)"/><text x="28.1515%" y="159.50"></text></g><g><title>lint_checking (5,782,975 samples, 2.05%)</title><rect x="26.6378%" y="197" width="2.0475%" height="15" fill="rgb(221,10,30)"/><text x="26.8878%" y="207.50">l..</text></g><g><title>module_lints (1,023,772 samples, 0.36%)</title><rect x="28.3228%" y="181" width="0.3625%" height="15" fill="rgb(210,229,1)"/><text x="28.5728%" y="191.50"></text></g><g><title>lint_mod (1,014,332 samples, 0.36%)</title><rect x="28.3262%" y="165" width="0.3591%" height="15" fill="rgb(222,148,37)"/><text x="28.5762%" y="175.50"></text></g><g><title>privacy_access_levels (651,387 samples, 0.23%)</title><rect x="28.6853%" y="197" width="0.2306%" height="15" fill="rgb(234,67,33)"/><text x="28.9353%" y="207.50"></text></g><g><title>privacy_checking_modules (2,338,006 samples, 0.83%)</title><rect x="28.9160%" y="197" width="0.8278%" height="15" fill="rgb(247,98,35)"/><text x="29.1660%" y="207.50"></text></g><g><title>check_mod_privacy (2,330,886 samples, 0.83%)</title><rect x="28.9185%" y="181" width="0.8253%" height="15" fill="rgb(247,138,52)"/><text x="29.1685%" y="191.50"></text></g><g><title>misc_checking_3 (10,238,574 samples, 3.63%)</title><rect x="26.1248%" y="213" width="3.6251%" height="15" fill="rgb(213,79,30)"/><text x="26.3748%" y="223.50">misc..</text></g><g><title>adt_destructor (441,495 samples, 0.16%)</title><rect x="29.8402%" y="165" width="0.1563%" height="15" fill="rgb(246,177,23)"/><text x="30.0902%" y="175.50"></text></g><g><title>coherent_trait (434,085 samples, 0.15%)</title><rect x="29.8428%" y="149" width="0.1537%" height="15" fill="rgb(230,62,27)"/><text x="30.0928%" y="159.50"></text></g><g><title>specialization_graph_of (432,135 samples, 0.15%)</title><rect x="29.8435%" y="133" width="0.1530%" height="15" fill="rgb(216,154,8)"/><text x="30.0935%" y="143.50"></text></g><g><title>impl_parent (3,748,483 samples, 1.33%)</title><rect x="32.4419%" y="149" width="1.3272%" height="15" fill="rgb(244,35,45)"/><text x="32.6919%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,092,084 samples, 0.74%)</title><rect x="33.0284%" y="133" width="0.7407%" height="15" fill="rgb(251,115,12)"/><text x="33.2784%" y="143.50"></text></g><g><title>impl_trait_ref (7,685,226 samples, 2.72%)</title><rect x="33.7691%" y="149" width="2.7211%" height="15" fill="rgb(240,54,50)"/><text x="34.0191%" y="159.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,011,713 samples, 2.13%)</title><rect x="34.3617%" y="133" width="2.1285%" height="15" fill="rgb(233,84,52)"/><text x="34.6117%" y="143.50">m..</text></g><g><title>trait_impls_of (1,662,310 samples, 0.59%)</title><rect x="36.5356%" y="149" width="0.5886%" height="15" fill="rgb(207,117,47)"/><text x="36.7856%" y="159.50"></text></g><g><title>implementations_of_trait (602,350 samples, 0.21%)</title><rect x="36.9109%" y="133" width="0.2133%" height="15" fill="rgb(249,43,39)"/><text x="37.1609%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (380,305 samples, 0.13%)</title><rect x="36.9896%" y="117" width="0.1347%" height="15" fill="rgb(209,38,44)"/><text x="37.2396%" y="127.50"></text></g><g><title>coherent_trait (20,633,830 samples, 7.31%)</title><rect x="29.8195%" y="181" width="7.3057%" height="15" fill="rgb(236,212,23)"/><text x="30.0695%" y="191.50">coherent_t..</text></g><g><title>specialization_graph_of (20,027,474 samples, 7.09%)</title><rect x="30.0342%" y="165" width="7.0910%" height="15" fill="rgb(242,79,21)"/><text x="30.2842%" y="175.50">specializa..</text></g><g><title>coherence_checking (20,850,542 samples, 7.38%)</title><rect x="29.8066%" y="197" width="7.3824%" height="15" fill="rgb(211,96,35)"/><text x="30.0566%" y="207.50">coherence_..</text></g><g><title>associated_item (742,309 samples, 0.26%)</title><rect x="48.5407%" y="133" width="0.2628%" height="15" fill="rgb(253,215,40)"/><text x="48.7907%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (604,757 samples, 0.21%)</title><rect x="48.5894%" y="117" width="0.2141%" height="15" fill="rgb(211,81,21)"/><text x="48.8394%" y="127.50"></text></g><g><title>associated_items (1,021,042 samples, 0.36%)</title><rect x="48.4593%" y="149" width="0.3615%" height="15" fill="rgb(208,190,38)"/><text x="48.7093%" y="159.50"></text></g><g><title>adt_dtorck_constraint (319,354 samples, 0.11%)</title><rect x="49.2254%" y="117" width="0.1131%" height="15" fill="rgb(235,213,38)"/><text x="49.4754%" y="127.50"></text></g><g><title>adt_dtorck_constraint (553,367 samples, 0.20%)</title><rect x="49.1619%" y="133" width="0.1959%" height="15" fill="rgb(237,122,38)"/><text x="49.4119%" y="143.50"></text></g><g><title>dropck_outlives (1,485,517 samples, 0.53%)</title><rect x="48.8547%" y="149" width="0.5260%" height="15" fill="rgb(244,218,35)"/><text x="49.1047%" y="159.50"></text></g><g><title>predicates_of (294,442 samples, 0.10%)</title><rect x="50.7583%" y="133" width="0.1043%" height="15" fill="rgb(240,68,47)"/><text x="51.0083%" y="143.50"></text></g><g><title>evaluate_obligation (4,546,147 samples, 1.61%)</title><rect x="49.3806%" y="149" width="1.6096%" height="15" fill="rgb(210,16,53)"/><text x="49.6306%" y="159.50"></text></g><g><title>evaluate_obligation (680,487 samples, 0.24%)</title><rect x="51.5203%" y="133" width="0.2409%" height="15" fill="rgb(235,124,12)"/><text x="51.7703%" y="143.50"></text></g><g><title>method_autoderef_steps (1,427,437 samples, 0.51%)</title><rect x="51.2591%" y="149" width="0.5054%" height="15" fill="rgb(224,169,11)"/><text x="51.5091%" y="159.50"></text></g><g><title>predicates_of (431,496 samples, 0.15%)</title><rect x="51.8191%" y="149" width="0.1528%" height="15" fill="rgb(250,166,2)"/><text x="52.0691%" y="159.50"></text></g><g><title>predicates_defined_on (298,073 samples, 0.11%)</title><rect x="51.8664%" y="133" width="0.1055%" height="15" fill="rgb(242,216,29)"/><text x="52.1164%" y="143.50"></text></g><g><title>associated_item (388,353 samples, 0.14%)</title><rect x="60.6466%" y="117" width="0.1375%" height="15" fill="rgb(230,116,27)"/><text x="60.8966%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (307,242 samples, 0.11%)</title><rect x="60.6753%" y="101" width="0.1088%" height="15" fill="rgb(228,99,48)"/><text x="60.9253%" y="111.50"></text></g><g><title>associated_items (628,196 samples, 0.22%)</title><rect x="60.5751%" y="133" width="0.2224%" height="15" fill="rgb(253,11,6)"/><text x="60.8251%" y="143.50"></text></g><g><title>dropck_outlives (799,455 samples, 0.28%)</title><rect x="60.8178%" y="133" width="0.2831%" height="15" fill="rgb(247,143,39)"/><text x="61.0678%" y="143.50"></text></g><g><title>predicates_of (321,595 samples, 0.11%)</title><rect x="62.8468%" y="117" width="0.1139%" height="15" fill="rgb(236,97,10)"/><text x="63.0968%" y="127.50"></text></g><g><title>trait_impls_of (466,245 samples, 0.17%)</title><rect x="62.9705%" y="117" width="0.1651%" height="15" fill="rgb(233,208,19)"/><text x="63.2205%" y="127.50"></text></g><g><title>evaluate_obligation (5,735,757 samples, 2.03%)</title><rect x="61.1051%" y="133" width="2.0308%" height="15" fill="rgb(216,164,2)"/><text x="61.3551%" y="143.50">e..</text></g><g><title>is_copy_raw (478,595 samples, 0.17%)</title><rect x="63.3640%" y="133" width="0.1695%" height="15" fill="rgb(220,129,5)"/><text x="63.6140%" y="143.50"></text></g><g><title>evaluate_obligation (338,615 samples, 0.12%)</title><rect x="63.4136%" y="117" width="0.1199%" height="15" fill="rgb(242,17,10)"/><text x="63.6636%" y="127.50"></text></g><g><title>evaluate_obligation (508,716 samples, 0.18%)</title><rect x="63.7665%" y="117" width="0.1801%" height="15" fill="rgb(242,107,0)"/><text x="64.0165%" y="127.50"></text></g><g><title>method_autoderef_steps (1,018,902 samples, 0.36%)</title><rect x="63.5921%" y="133" width="0.3608%" height="15" fill="rgb(251,28,31)"/><text x="63.8421%" y="143.50"></text></g><g><title>predicates_of (452,594 samples, 0.16%)</title><rect x="63.9758%" y="133" width="0.1602%" height="15" fill="rgb(233,223,10)"/><text x="64.2258%" y="143.50"></text></g><g><title>predicates_defined_on (319,603 samples, 0.11%)</title><rect x="64.0228%" y="117" width="0.1132%" height="15" fill="rgb(215,21,27)"/><text x="64.2728%" y="127.50"></text></g><g><title>typeck (34,425,362 samples, 12.19%)</title><rect x="52.0235%" y="149" width="12.1888%" height="15" fill="rgb(232,23,21)"/><text x="52.2735%" y="159.50">typeck</text></g><g><title>item_bodies_checking (76,338,728 samples, 27.03%)</title><rect x="37.2123%" y="197" width="27.0288%" height="15" fill="rgb(244,5,23)"/><text x="37.4623%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (76,335,158 samples, 27.03%)</title><rect x="37.2136%" y="181" width="27.0276%" height="15" fill="rgb(226,81,46)"/><text x="37.4636%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (76,164,476 samples, 26.97%)</title><rect x="37.2740%" y="165" width="26.9671%" height="15" fill="rgb(247,70,30)"/><text x="37.5240%" y="175.50">typeck</text></g><g><title>evaluate_obligation (751,209 samples, 0.27%)</title><rect x="66.2172%" y="133" width="0.2660%" height="15" fill="rgb(212,68,19)"/><text x="66.4672%" y="143.50"></text></g><g><title>mir_borrowck (1,710,210 samples, 0.61%)</title><rect x="66.4869%" y="133" width="0.6055%" height="15" fill="rgb(240,187,13)"/><text x="66.7369%" y="143.50"></text></g><g><title>is_copy_raw (402,956 samples, 0.14%)</title><rect x="67.4951%" y="53" width="0.1427%" height="15" fill="rgb(223,113,26)"/><text x="67.7451%" y="63.50"></text></g><g><title>evaluate_obligation (294,825 samples, 0.10%)</title><rect x="67.5333%" y="37" width="0.1044%" height="15" fill="rgb(206,192,2)"/><text x="67.7833%" y="47.50"></text></g><g><title>needs_drop_raw (591,769 samples, 0.21%)</title><rect x="67.4283%" y="69" width="0.2095%" height="15" fill="rgb(241,108,4)"/><text x="67.6783%" y="79.50"></text></g><g><title>resolve_instance (344,143 samples, 0.12%)</title><rect x="67.6378%" y="69" width="0.1218%" height="15" fill="rgb(247,173,49)"/><text x="67.8878%" y="79.50"></text></g><g><title>dropck_outlives (644,267 samples, 0.23%)</title><rect x="69.7766%" y="53" width="0.2281%" height="15" fill="rgb(224,114,35)"/><text x="70.0266%" y="63.50"></text></g><g><title>adt_dtorck_constraint (472,874 samples, 0.17%)</title><rect x="69.8373%" y="37" width="0.1674%" height="15" fill="rgb(245,159,27)"/><text x="70.0873%" y="47.50"></text></g><g><title>evaluate_obligation (1,070,310 samples, 0.38%)</title><rect x="70.0048%" y="53" width="0.3790%" height="15" fill="rgb(245,172,44)"/><text x="70.2548%" y="63.50"></text></g><g><title>mir_built (10,066,920 samples, 3.56%)</title><rect x="67.2945%" y="85" width="3.5643%" height="15" fill="rgb(236,23,11)"/><text x="67.5445%" y="95.50">mir_..</text></g><g><title>typeck (8,639,885 samples, 3.06%)</title><rect x="67.7997%" y="69" width="3.0591%" height="15" fill="rgb(205,117,38)"/><text x="68.0497%" y="79.50">typ..</text></g><g><title>mir_built (591,937 samples, 0.21%)</title><rect x="70.8944%" y="69" width="0.2096%" height="15" fill="rgb(237,72,25)"/><text x="71.1444%" y="79.50"></text></g><g><title>mir_const (11,202,385 samples, 3.97%)</title><rect x="67.1382%" y="117" width="3.9664%" height="15" fill="rgb(244,70,9)"/><text x="67.3882%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (10,876,331 samples, 3.85%)</title><rect x="67.2536%" y="101" width="3.8509%" height="15" fill="rgb(217,125,39)"/><text x="67.5036%" y="111.50">unsa..</text></g><g><title>unsafety_check_result (694,129 samples, 0.25%)</title><rect x="70.8588%" y="85" width="0.2458%" height="15" fill="rgb(235,36,10)"/><text x="71.1088%" y="95.50"></text></g><g><title>mir_promoted (11,341,766 samples, 4.02%)</title><rect x="67.0924%" y="133" width="4.0157%" height="15" fill="rgb(251,123,47)"/><text x="67.3424%" y="143.50">mir_..</text></g><g><title>type_of (16,054,218 samples, 5.68%)</title><rect x="65.6447%" y="165" width="5.6842%" height="15" fill="rgb(221,13,13)"/><text x="65.8947%" y="175.50">type_of</text></g><g><title>mir_borrowck (16,018,768 samples, 5.67%)</title><rect x="65.6573%" y="149" width="5.6717%" height="15" fill="rgb(238,131,9)"/><text x="65.9073%" y="159.50">mir_bor..</text></g><g><title>type_op_prove_predicate (326,284 samples, 0.12%)</title><rect x="71.2134%" y="133" width="0.1155%" height="15" fill="rgb(211,50,8)"/><text x="71.4634%" y="143.50"></text></g><g><title>adt_dtorck_constraint (457,525 samples, 0.16%)</title><rect x="71.5384%" y="117" width="0.1620%" height="15" fill="rgb(245,182,24)"/><text x="71.7884%" y="127.50"></text></g><g><title>dropck_outlives (874,711 samples, 0.31%)</title><rect x="71.4233%" y="149" width="0.3097%" height="15" fill="rgb(242,14,37)"/><text x="71.6733%" y="159.50"></text></g><g><title>adt_dtorck_constraint (833,459 samples, 0.30%)</title><rect x="71.4379%" y="133" width="0.2951%" height="15" fill="rgb(246,228,12)"/><text x="71.6879%" y="143.50"></text></g><g><title>item_types_checking (21,232,876 samples, 7.52%)</title><rect x="64.2411%" y="197" width="7.5178%" height="15" fill="rgb(213,55,15)"/><text x="64.4911%" y="207.50">item_types..</text></g><g><title>check_mod_item_types (21,221,136 samples, 7.51%)</title><rect x="64.2453%" y="181" width="7.5136%" height="15" fill="rgb(209,9,3)"/><text x="64.4953%" y="191.50">check_mod_..</text></g><g><title>typeck (1,214,334 samples, 0.43%)</title><rect x="71.3290%" y="165" width="0.4300%" height="15" fill="rgb(230,59,30)"/><text x="71.5790%" y="175.50"></text></g><g><title>fn_sig (696,045 samples, 0.25%)</title><rect x="71.9603%" y="165" width="0.2464%" height="15" fill="rgb(209,121,21)"/><text x="72.2103%" y="175.50"></text></g><g><title>named_region_map (515,197 samples, 0.18%)</title><rect x="72.3467%" y="149" width="0.1824%" height="15" fill="rgb(220,109,13)"/><text x="72.5967%" y="159.50"></text></g><g><title>resolve_lifetimes (479,307 samples, 0.17%)</title><rect x="72.3594%" y="133" width="0.1697%" height="15" fill="rgb(232,18,1)"/><text x="72.6094%" y="143.50"></text></g><g><title>generics_of (941,030 samples, 0.33%)</title><rect x="72.2067%" y="165" width="0.3332%" height="15" fill="rgb(215,41,42)"/><text x="72.4567%" y="175.50"></text></g><g><title>late_bound_vars_map (458,793 samples, 0.16%)</title><rect x="72.8817%" y="117" width="0.1624%" height="15" fill="rgb(224,123,36)"/><text x="73.1317%" y="127.50"></text></g><g><title>resolve_lifetimes (436,533 samples, 0.15%)</title><rect x="72.8896%" y="101" width="0.1546%" height="15" fill="rgb(240,125,3)"/><text x="73.1396%" y="111.50"></text></g><g><title>explicit_predicates_of (1,038,510 samples, 0.37%)</title><rect x="72.6928%" y="133" width="0.3677%" height="15" fill="rgb(205,98,50)"/><text x="72.9428%" y="143.50"></text></g><g><title>predicates_of (2,122,184 samples, 0.75%)</title><rect x="72.5969%" y="165" width="0.7514%" height="15" fill="rgb(205,185,37)"/><text x="72.8469%" y="175.50"></text></g><g><title>predicates_defined_on (2,018,421 samples, 0.71%)</title><rect x="72.6336%" y="149" width="0.7147%" height="15" fill="rgb(238,207,15)"/><text x="72.8836%" y="159.50"></text></g><g><title>inferred_outlives_of (812,719 samples, 0.29%)</title><rect x="73.0605%" y="133" width="0.2878%" height="15" fill="rgb(213,199,42)"/><text x="73.3105%" y="143.50"></text></g><g><title>inferred_outlives_crate (771,419 samples, 0.27%)</title><rect x="73.0752%" y="117" width="0.2731%" height="15" fill="rgb(235,201,11)"/><text x="73.3252%" y="127.50"></text></g><g><title>type_of (537,406 samples, 0.19%)</title><rect x="73.1580%" y="101" width="0.1903%" height="15" fill="rgb(207,46,11)"/><text x="73.4080%" y="111.50"></text></g><g><title>type_collecting (4,688,192 samples, 1.66%)</title><rect x="71.7617%" y="197" width="1.6599%" height="15" fill="rgb(241,35,35)"/><text x="72.0117%" y="207.50"></text></g><g><title>collect_mod_item_types (4,670,352 samples, 1.65%)</title><rect x="71.7680%" y="181" width="1.6536%" height="15" fill="rgb(243,32,47)"/><text x="72.0180%" y="191.50"></text></g><g><title>evaluate_obligation (1,180,569 samples, 0.42%)</title><rect x="75.5123%" y="165" width="0.4180%" height="15" fill="rgb(247,202,23)"/><text x="75.7623%" y="175.50"></text></g><g><title>implied_outlives_bounds (792,678 samples, 0.28%)</title><rect x="75.9540%" y="165" width="0.2807%" height="15" fill="rgb(219,102,11)"/><text x="76.2040%" y="175.50"></text></g><g><title>object_safety_violations (382,004 samples, 0.14%)</title><rect x="76.2347%" y="165" width="0.1353%" height="15" fill="rgb(243,110,44)"/><text x="76.4847%" y="175.50"></text></g><g><title>param_env (789,048 samples, 0.28%)</title><rect x="76.3699%" y="165" width="0.2794%" height="15" fill="rgb(222,74,54)"/><text x="76.6199%" y="175.50"></text></g><g><title>region_scope_tree (694,852 samples, 0.25%)</title><rect x="76.6794%" y="165" width="0.2460%" height="15" fill="rgb(216,99,12)"/><text x="76.9294%" y="175.50"></text></g><g><title>check_impl_item_well_formed (9,500,365 samples, 3.36%)</title><rect x="73.5853%" y="181" width="3.3637%" height="15" fill="rgb(226,22,26)"/><text x="73.8353%" y="191.50">che..</text></g><g><title>adt_sized_constraint (423,213 samples, 0.15%)</title><rect x="78.7599%" y="149" width="0.1498%" height="15" fill="rgb(217,163,10)"/><text x="79.0099%" y="159.50"></text></g><g><title>evaluate_obligation (1,944,995 samples, 0.69%)</title><rect x="78.3610%" y="165" width="0.6887%" height="15" fill="rgb(213,25,53)"/><text x="78.6110%" y="175.50"></text></g><g><title>param_env (657,190 samples, 0.23%)</title><rect x="79.2508%" y="165" width="0.2327%" height="15" fill="rgb(252,105,26)"/><text x="79.5008%" y="175.50"></text></g><g><title>trait_impls_of (289,726 samples, 0.10%)</title><rect x="79.5785%" y="165" width="0.1026%" height="15" fill="rgb(220,39,43)"/><text x="79.8285%" y="175.50"></text></g><g><title>check_item_well_formed (7,892,730 samples, 2.79%)</title><rect x="76.9490%" y="181" width="2.7945%" height="15" fill="rgb(229,68,48)"/><text x="77.1990%" y="191.50">ch..</text></g><g><title>analysis (225,106,832 samples, 79.70%)</title><rect x="0.2271%" y="229" width="79.7023%" height="15" fill="rgb(252,8,32)"/><text x="0.4771%" y="239.50">analysis</text></g><g><title>type_check_crate (141,724,135 samples, 50.18%)</title><rect x="29.7499%" y="213" width="50.1795%" height="15" fill="rgb(223,20,43)"/><text x="29.9999%" y="223.50">type_check_crate</text></g><g><title>wf_checking (18,369,554 samples, 6.50%)</title><rect x="73.4254%" y="197" width="6.5040%" height="15" fill="rgb(229,81,49)"/><text x="73.6754%" y="207.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (524,905 samples, 0.19%)</title><rect x="79.7435%" y="181" width="0.1859%" height="15" fill="rgb(236,28,36)"/><text x="79.9935%" y="191.50"></text></g><g><title>codegen_crate (502,126 samples, 0.18%)</title><rect x="79.9315%" y="229" width="0.1778%" height="15" fill="rgb(249,185,26)"/><text x="80.1815%" y="239.50"></text></g><g><title>metadata_load_macro (380,963 samples, 0.13%)</title><rect x="87.5557%" y="181" width="0.1349%" height="15" fill="rgb(249,174,33)"/><text x="87.8057%" y="191.50"></text></g><g><title>metadata_register_crate (9,510,064 samples, 3.37%)</title><rect x="87.6906%" y="181" width="3.3672%" height="15" fill="rgb(233,201,37)"/><text x="87.9406%" y="191.50">met..</text></g><g><title>metadata_register_crate (7,894,246 samples, 2.80%)</title><rect x="88.2627%" y="165" width="2.7951%" height="15" fill="rgb(221,78,26)"/><text x="88.5127%" y="175.50">me..</text></g><g><title>metadata_register_crate (3,710,362 samples, 1.31%)</title><rect x="89.7441%" y="149" width="1.3137%" height="15" fill="rgb(250,127,30)"/><text x="89.9941%" y="159.50"></text></g><g><title>metadata_register_crate (3,156,096 samples, 1.12%)</title><rect x="89.9403%" y="133" width="1.1175%" height="15" fill="rgb(230,49,44)"/><text x="90.1903%" y="143.50"></text></g><g><title>macro_expand_crate (30,722,192 samples, 10.88%)</title><rect x="80.2925%" y="213" width="10.8776%" height="15" fill="rgb(229,67,23)"/><text x="80.5425%" y="223.50">macro_expand_cra..</text></g><g><title>expand_crate (30,705,261 samples, 10.87%)</title><rect x="80.2985%" y="197" width="10.8716%" height="15" fill="rgb(249,83,47)"/><text x="80.5485%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (317,253 samples, 0.11%)</title><rect x="91.0578%" y="181" width="0.1123%" height="15" fill="rgb(215,43,3)"/><text x="91.3078%" y="191.50"></text></g><g><title>late_resolve_crate (4,178,996 samples, 1.48%)</title><rect x="91.3174%" y="197" width="1.4796%" height="15" fill="rgb(238,154,13)"/><text x="91.5674%" y="207.50"></text></g><g><title>configure_and_expand (36,039,471 samples, 12.76%)</title><rect x="80.1093%" y="229" width="12.7603%" height="15" fill="rgb(219,56,2)"/><text x="80.3593%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (4,718,562 samples, 1.67%)</title><rect x="91.1989%" y="213" width="1.6707%" height="15" fill="rgb(233,0,4)"/><text x="91.4489%" y="223.50"></text></g><g><title>drop_ast (340,264 samples, 0.12%)</title><rect x="92.8696%" y="229" width="0.1205%" height="15" fill="rgb(235,30,7)"/><text x="93.1196%" y="239.50"></text></g><g><title>early_lint_checks (598,037 samples, 0.21%)</title><rect x="92.9996%" y="229" width="0.2117%" height="15" fill="rgb(250,79,13)"/><text x="93.2496%" y="239.50"></text></g><g><title>free_global_ctxt (5,472,081 samples, 1.94%)</title><rect x="93.2113%" y="229" width="1.9375%" height="15" fill="rgb(211,146,34)"/><text x="93.4613%" y="239.50">f..</text></g><g><title>needs_drop_raw (508,194 samples, 0.18%)</title><rect x="96.9427%" y="181" width="0.1799%" height="15" fill="rgb(228,22,38)"/><text x="97.1927%" y="191.50"></text></g><g><title>is_copy_raw (349,943 samples, 0.12%)</title><rect x="96.9987%" y="165" width="0.1239%" height="15" fill="rgb(235,168,5)"/><text x="97.2487%" y="175.50"></text></g><g><title>evaluate_obligation (282,933 samples, 0.10%)</title><rect x="97.0224%" y="149" width="0.1002%" height="15" fill="rgb(221,155,16)"/><text x="97.2724%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,764,050 samples, 0.62%)</title><rect x="96.5319%" y="197" width="0.6246%" height="15" fill="rgb(215,215,53)"/><text x="96.7819%" y="207.50"></text></g><g><title>optimized_mir (3,195,525 samples, 1.13%)</title><rect x="96.0270%" y="213" width="1.1314%" height="15" fill="rgb(223,4,10)"/><text x="96.2770%" y="223.50"></text></g><g><title>generate_crate_metadata (5,722,153 samples, 2.03%)</title><rect x="95.1488%" y="229" width="2.0260%" height="15" fill="rgb(234,103,6)"/><text x="95.3988%" y="239.50">g..</text></g><g><title>hir_lowering (5,491,461 samples, 1.94%)</title><rect x="97.1748%" y="229" width="1.9443%" height="15" fill="rgb(227,97,0)"/><text x="97.4248%" y="239.50">h..</text></g><g><title>self_profile_alloc_query_strings (1,446,186 samples, 0.51%)</title><rect x="99.3031%" y="229" width="0.5120%" height="15" fill="rgb(234,150,53)"/><text x="99.5531%" y="239.50"></text></g><g><title>all (282,434,588 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (282,434,588 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (423,175 samples, 0.15%)</title><rect x="99.8502%" y="229" width="0.1498%" height="15" fill="rgb(237,53,32)"/><text x="100.1002%" y="239.50"></text></g></svg></svg>