<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (192,134 samples, 0.11%)</title><rect x="10.9770%" y="117" width="0.1136%" height="15" fill="rgb(227,0,7)"/><text x="11.2270%" y="127.50"></text></g><g><title>is_copy_raw (415,852 samples, 0.25%)</title><rect x="17.6671%" y="53" width="0.2459%" height="15" fill="rgb(217,0,24)"/><text x="17.9171%" y="63.50"></text></g><g><title>evaluate_obligation (287,201 samples, 0.17%)</title><rect x="17.7432%" y="37" width="0.1698%" height="15" fill="rgb(221,193,54)"/><text x="17.9932%" y="47.50"></text></g><g><title>needs_drop_raw (201,761 samples, 0.12%)</title><rect x="17.9155%" y="53" width="0.1193%" height="15" fill="rgb(248,212,6)"/><text x="18.1655%" y="63.50"></text></g><g><title>is_copy_raw (174,731 samples, 0.10%)</title><rect x="17.9315%" y="37" width="0.1033%" height="15" fill="rgb(208,68,35)"/><text x="18.1815%" y="47.50"></text></g><g><title>thir_body (2,690,353 samples, 1.59%)</title><rect x="18.1498%" y="53" width="1.5910%" height="15" fill="rgb(232,128,0)"/><text x="18.3998%" y="63.50"></text></g><g><title>mir_const (12,882,350 samples, 7.62%)</title><rect x="12.1504%" y="101" width="7.6185%" height="15" fill="rgb(207,160,47)"/><text x="12.4004%" y="111.50">mir_const</text></g><g><title>unsafety_check_result (10,854,895 samples, 6.42%)</title><rect x="13.3494%" y="85" width="6.4195%" height="15" fill="rgb(228,23,34)"/><text x="13.5994%" y="95.50">unsafety..</text></g><g><title>mir_built (9,942,551 samples, 5.88%)</title><rect x="13.8889%" y="69" width="5.8799%" height="15" fill="rgb(218,30,26)"/><text x="14.1389%" y="79.50">mir_bui..</text></g><g><title>mir_promoted (14,742,374 samples, 8.72%)</title><rect x="11.1281%" y="117" width="8.7185%" height="15" fill="rgb(220,122,19)"/><text x="11.3781%" y="127.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (213,075 samples, 0.13%)</title><rect x="19.8466%" y="117" width="0.1260%" height="15" fill="rgb(250,228,42)"/><text x="20.0966%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,804,886 samples, 1.07%)</title><rect x="20.0059%" y="117" width="1.0674%" height="15" fill="rgb(240,193,28)"/><text x="20.2559%" y="127.50"></text></g><g><title>normalize_projection_ty (1,255,710 samples, 0.74%)</title><rect x="20.3307%" y="101" width="0.7426%" height="15" fill="rgb(216,20,37)"/><text x="20.5807%" y="111.50"></text></g><g><title>type_op_prove_predicate (466,916 samples, 0.28%)</title><rect x="21.0733%" y="117" width="0.2761%" height="15" fill="rgb(206,188,39)"/><text x="21.3233%" y="127.50"></text></g><g><title>MIR_borrow_checking (34,434,280 samples, 20.36%)</title><rect x="0.9873%" y="149" width="20.3640%" height="15" fill="rgb(217,207,13)"/><text x="1.2373%" y="159.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (34,083,655 samples, 20.16%)</title><rect x="1.1946%" y="133" width="20.1567%" height="15" fill="rgb(231,73,38)"/><text x="1.4446%" y="143.50">mir_borrowck</text></g><g><title>hir_module_items (537,596 samples, 0.32%)</title><rect x="21.4022%" y="149" width="0.3179%" height="15" fill="rgb(225,20,46)"/><text x="21.6522%" y="159.50"></text></g><g><title>get_lang_items (200,213 samples, 0.12%)</title><rect x="22.1289%" y="101" width="0.1184%" height="15" fill="rgb(210,31,41)"/><text x="22.3789%" y="111.50"></text></g><g><title>should_inherit_track_caller (318,526 samples, 0.19%)</title><rect x="22.2473%" y="101" width="0.1884%" height="15" fill="rgb(221,200,47)"/><text x="22.4973%" y="111.50"></text></g><g><title>codegen_fn_attrs (671,209 samples, 0.40%)</title><rect x="22.0503%" y="117" width="0.3969%" height="15" fill="rgb(226,26,5)"/><text x="22.3003%" y="127.50"></text></g><g><title>check_mod_attrs (1,205,504 samples, 0.71%)</title><rect x="21.7344%" y="133" width="0.7129%" height="15" fill="rgb(249,33,26)"/><text x="21.9844%" y="143.50"></text></g><g><title>check_mod_const_bodies (280,884 samples, 0.17%)</title><rect x="22.4473%" y="133" width="0.1661%" height="15" fill="rgb(235,183,28)"/><text x="22.6973%" y="143.50"></text></g><g><title>lint_levels (266,653 samples, 0.16%)</title><rect x="23.1153%" y="117" width="0.1577%" height="15" fill="rgb(221,5,38)"/><text x="23.3653%" y="127.50"></text></g><g><title>lookup_deprecation_entry (217,542 samples, 0.13%)</title><rect x="23.2730%" y="117" width="0.1287%" height="15" fill="rgb(247,18,42)"/><text x="23.5230%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,264,664 samples, 0.75%)</title><rect x="22.7117%" y="133" width="0.7479%" height="15" fill="rgb(241,131,45)"/><text x="22.9617%" y="143.50"></text></g><g><title>misc_checking_1 (3,069,464 samples, 1.82%)</title><rect x="21.7204%" y="149" width="1.8152%" height="15" fill="rgb(249,31,29)"/><text x="21.9704%" y="159.50">m..</text></g><g><title>check_mod_intrinsics (178,413 samples, 0.11%)</title><rect x="23.5401%" y="117" width="0.1055%" height="15" fill="rgb(225,111,53)"/><text x="23.7901%" y="127.50"></text></g><g><title>liveness_and_intrinsic_checking (804,519 samples, 0.48%)</title><rect x="23.5365%" y="133" width="0.4758%" height="15" fill="rgb(238,160,17)"/><text x="23.7865%" y="143.50"></text></g><g><title>check_mod_liveness (619,966 samples, 0.37%)</title><rect x="23.6456%" y="117" width="0.3666%" height="15" fill="rgb(214,148,48)"/><text x="23.8956%" y="127.50"></text></g><g><title>misc_checking_2 (1,495,087 samples, 0.88%)</title><rect x="23.5356%" y="149" width="0.8842%" height="15" fill="rgb(232,36,49)"/><text x="23.7856%" y="159.50"></text></g><g><title>match_checking (689,178 samples, 0.41%)</title><rect x="24.0122%" y="133" width="0.4076%" height="15" fill="rgb(209,103,24)"/><text x="24.2622%" y="143.50"></text></g><g><title>check_match (614,367 samples, 0.36%)</title><rect x="24.0565%" y="117" width="0.3633%" height="15" fill="rgb(229,88,8)"/><text x="24.3065%" y="127.50"></text></g><g><title>check_private_in_public (541,386 samples, 0.32%)</title><rect x="24.4259%" y="133" width="0.3202%" height="15" fill="rgb(213,181,19)"/><text x="24.6759%" y="143.50"></text></g><g><title>codegen_fn_attrs (224,453 samples, 0.13%)</title><rect x="25.1208%" y="117" width="0.1327%" height="15" fill="rgb(254,191,54)"/><text x="25.3708%" y="127.50"></text></g><g><title>death_checking (1,002,221 samples, 0.59%)</title><rect x="24.7461%" y="133" width="0.5927%" height="15" fill="rgb(241,83,37)"/><text x="24.9961%" y="143.50"></text></g><g><title>explicit_predicates_of (172,330 samples, 0.10%)</title><rect x="26.3405%" y="53" width="0.1019%" height="15" fill="rgb(233,36,39)"/><text x="26.5905%" y="63.50"></text></g><g><title>param_env (850,510 samples, 0.50%)</title><rect x="25.9479%" y="101" width="0.5030%" height="15" fill="rgb(226,3,54)"/><text x="26.1979%" y="111.50"></text></g><g><title>predicates_of (408,434 samples, 0.24%)</title><rect x="26.2093%" y="85" width="0.2415%" height="15" fill="rgb(245,192,40)"/><text x="26.4593%" y="95.50"></text></g><g><title>predicates_defined_on (317,064 samples, 0.19%)</title><rect x="26.2634%" y="69" width="0.1875%" height="15" fill="rgb(238,167,29)"/><text x="26.5134%" y="79.50"></text></g><g><title>crate_lints (2,215,794 samples, 1.31%)</title><rect x="25.3397%" y="117" width="1.3104%" height="15" fill="rgb(232,182,51)"/><text x="25.5897%" y="127.50"></text></g><g><title>type_of (333,984 samples, 0.20%)</title><rect x="26.4526%" y="101" width="0.1975%" height="15" fill="rgb(231,60,39)"/><text x="26.7026%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (256,172 samples, 0.15%)</title><rect x="26.4986%" y="85" width="0.1515%" height="15" fill="rgb(208,69,12)"/><text x="26.7486%" y="95.50"></text></g><g><title>lint_checking (3,060,034 samples, 1.81%)</title><rect x="25.3388%" y="133" width="1.8097%" height="15" fill="rgb(235,93,37)"/><text x="25.5888%" y="143.50">l..</text></g><g><title>module_lints (842,690 samples, 0.50%)</title><rect x="26.6501%" y="117" width="0.4984%" height="15" fill="rgb(213,116,39)"/><text x="26.9001%" y="127.50"></text></g><g><title>lint_mod (838,180 samples, 0.50%)</title><rect x="26.6528%" y="101" width="0.4957%" height="15" fill="rgb(222,207,29)"/><text x="26.9028%" y="111.50"></text></g><g><title>privacy_access_levels (775,739 samples, 0.46%)</title><rect x="27.1484%" y="133" width="0.4588%" height="15" fill="rgb(206,96,30)"/><text x="27.3984%" y="143.50"></text></g><g><title>privacy_checking_modules (1,505,557 samples, 0.89%)</title><rect x="27.6072%" y="133" width="0.8904%" height="15" fill="rgb(218,138,4)"/><text x="27.8572%" y="143.50"></text></g><g><title>check_mod_privacy (1,502,597 samples, 0.89%)</title><rect x="27.6090%" y="117" width="0.8886%" height="15" fill="rgb(250,191,14)"/><text x="27.8590%" y="127.50"></text></g><g><title>misc_checking_3 (6,915,527 samples, 4.09%)</title><rect x="24.4198%" y="149" width="4.0898%" height="15" fill="rgb(239,60,40)"/><text x="24.6698%" y="159.50">misc..</text></g><g><title>impl_parent (951,912 samples, 0.56%)</title><rect x="29.4625%" y="85" width="0.5629%" height="15" fill="rgb(206,27,48)"/><text x="29.7125%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (435,337 samples, 0.26%)</title><rect x="29.7680%" y="69" width="0.2575%" height="15" fill="rgb(225,35,8)"/><text x="30.0180%" y="79.50"></text></g><g><title>impl_trait_ref (1,414,206 samples, 0.84%)</title><rect x="30.0254%" y="85" width="0.8363%" height="15" fill="rgb(250,213,24)"/><text x="30.2754%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,117,351 samples, 0.66%)</title><rect x="30.2010%" y="69" width="0.6608%" height="15" fill="rgb(247,123,22)"/><text x="30.4510%" y="79.50"></text></g><g><title>coherent_trait (4,065,625 samples, 2.40%)</title><rect x="28.6131%" y="117" width="2.4044%" height="15" fill="rgb(231,138,38)"/><text x="28.8631%" y="127.50">co..</text></g><g><title>specialization_graph_of (3,906,383 samples, 2.31%)</title><rect x="28.7072%" y="101" width="2.3102%" height="15" fill="rgb(231,145,46)"/><text x="28.9572%" y="111.50">s..</text></g><g><title>trait_impls_of (261,445 samples, 0.15%)</title><rect x="30.8628%" y="85" width="0.1546%" height="15" fill="rgb(251,118,11)"/><text x="31.1128%" y="95.50"></text></g><g><title>coherence_checking (4,192,016 samples, 2.48%)</title><rect x="28.6020%" y="133" width="2.4791%" height="15" fill="rgb(217,147,25)"/><text x="28.8520%" y="143.50">co..</text></g><g><title>associated_items (169,473 samples, 0.10%)</title><rect x="50.5170%" y="85" width="0.1002%" height="15" fill="rgb(247,81,37)"/><text x="50.7670%" y="95.50"></text></g><g><title>adt_destructor (219,473 samples, 0.13%)</title><rect x="50.7249%" y="53" width="0.1298%" height="15" fill="rgb(209,12,38)"/><text x="50.9749%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_destructor (218,283 samples, 0.13%)</title><rect x="50.7256%" y="37" width="0.1291%" height="15" fill="rgb(227,1,9)"/><text x="50.9756%" y="47.50"></text></g><g><title>adt_dtorck_constraint (261,213 samples, 0.15%)</title><rect x="50.7177%" y="69" width="0.1545%" height="15" fill="rgb(248,47,43)"/><text x="50.9677%" y="79.50"></text></g><g><title>dropck_outlives (479,624 samples, 0.28%)</title><rect x="50.6261%" y="85" width="0.2836%" height="15" fill="rgb(221,10,30)"/><text x="50.8761%" y="95.50"></text></g><g><title>evaluate_obligation (874,718 samples, 0.52%)</title><rect x="50.9098%" y="85" width="0.5173%" height="15" fill="rgb(210,229,1)"/><text x="51.1598%" y="95.50"></text></g><g><title>predicates_of (234,034 samples, 0.14%)</title><rect x="51.6903%" y="85" width="0.1384%" height="15" fill="rgb(222,148,37)"/><text x="51.9403%" y="95.50"></text></g><g><title>item_bodies_checking (35,116,188 samples, 20.77%)</title><rect x="31.1577%" y="133" width="20.7673%" height="15" fill="rgb(234,67,33)"/><text x="31.4077%" y="143.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (35,113,468 samples, 20.77%)</title><rect x="31.1593%" y="117" width="20.7657%" height="15" fill="rgb(247,98,35)"/><text x="31.4093%" y="127.50">typeck_item_bodies</text></g><g><title>typeck (34,878,374 samples, 20.63%)</title><rect x="31.2983%" y="101" width="20.6267%" height="15" fill="rgb(247,138,52)"/><text x="31.5483%" y="111.50">typeck</text></g><g><title>item_types_checking (6,428,960 samples, 3.80%)</title><rect x="51.9250%" y="133" width="3.8020%" height="15" fill="rgb(213,79,30)"/><text x="52.1750%" y="143.50">item..</text></g><g><title>check_mod_item_types (6,424,770 samples, 3.80%)</title><rect x="51.9275%" y="117" width="3.7995%" height="15" fill="rgb(246,177,23)"/><text x="52.1775%" y="127.50">chec..</text></g><g><title>late_bound_vars_map (917,352 samples, 0.54%)</title><rect x="56.5709%" y="85" width="0.5425%" height="15" fill="rgb(230,62,27)"/><text x="56.8209%" y="95.50"></text></g><g><title>resolve_lifetimes (813,062 samples, 0.48%)</title><rect x="56.6326%" y="69" width="0.4808%" height="15" fill="rgb(216,154,8)"/><text x="56.8826%" y="79.50"></text></g><g><title>fn_sig (1,494,786 samples, 0.88%)</title><rect x="56.2553%" y="101" width="0.8840%" height="15" fill="rgb(244,35,45)"/><text x="56.5053%" y="111.50"></text></g><g><title>generics_of (433,332 samples, 0.26%)</title><rect x="57.1393%" y="101" width="0.2563%" height="15" fill="rgb(251,115,12)"/><text x="57.3893%" y="111.50"></text></g><g><title>impl_trait_ref (170,214 samples, 0.10%)</title><rect x="57.3956%" y="101" width="0.1007%" height="15" fill="rgb(240,54,50)"/><text x="57.6456%" y="111.50"></text></g><g><title>explicit_predicates_of (469,553 samples, 0.28%)</title><rect x="57.8740%" y="69" width="0.2777%" height="15" fill="rgb(233,84,52)"/><text x="58.1240%" y="79.50"></text></g><g><title>predicates_of (1,122,592 samples, 0.66%)</title><rect x="57.5374%" y="101" width="0.6639%" height="15" fill="rgb(207,117,47)"/><text x="57.7874%" y="111.50"></text></g><g><title>predicates_defined_on (910,969 samples, 0.54%)</title><rect x="57.6626%" y="85" width="0.5387%" height="15" fill="rgb(249,43,39)"/><text x="57.9126%" y="95.50"></text></g><g><title>type_collecting (4,536,500 samples, 2.68%)</title><rect x="55.7325%" y="133" width="2.6828%" height="15" fill="rgb(209,38,44)"/><text x="55.9825%" y="143.50">ty..</text></g><g><title>collect_mod_item_types (4,525,070 samples, 2.68%)</title><rect x="55.7393%" y="117" width="2.6761%" height="15" fill="rgb(236,212,23)"/><text x="55.9893%" y="127.50">co..</text></g><g><title>type_of (334,086 samples, 0.20%)</title><rect x="58.2178%" y="101" width="0.1976%" height="15" fill="rgb(242,79,21)"/><text x="58.4678%" y="111.50"></text></g><g><title>impl_item_implementor_ids (216,331 samples, 0.13%)</title><rect x="61.4968%" y="101" width="0.1279%" height="15" fill="rgb(211,96,35)"/><text x="61.7468%" y="111.50"></text></g><g><title>param_env (1,309,079 samples, 0.77%)</title><rect x="61.6778%" y="101" width="0.7742%" height="15" fill="rgb(253,215,40)"/><text x="61.9278%" y="111.50"></text></g><g><title>check_impl_item_well_formed (7,402,983 samples, 4.38%)</title><rect x="58.8012%" y="117" width="4.3780%" height="15" fill="rgb(211,81,21)"/><text x="59.0512%" y="127.50">check..</text></g><g><title>region_scope_tree (1,207,933 samples, 0.71%)</title><rect x="62.4649%" y="101" width="0.7144%" height="15" fill="rgb(208,190,38)"/><text x="62.7149%" y="111.50"></text></g><g><title>evaluate_obligation (1,719,525 samples, 1.02%)</title><rect x="65.0704%" y="101" width="1.0169%" height="15" fill="rgb(235,213,38)"/><text x="65.3204%" y="111.50"></text></g><g><title>param_env (723,114 samples, 0.43%)</title><rect x="66.2160%" y="101" width="0.4276%" height="15" fill="rgb(237,122,38)"/><text x="66.4660%" y="111.50"></text></g><g><title>check_item_well_formed (6,065,388 samples, 3.59%)</title><rect x="63.1793%" y="117" width="3.5870%" height="15" fill="rgb(244,218,35)"/><text x="63.4293%" y="127.50">chec..</text></g><g><title>analysis (111,980,928 samples, 66.22%)</title><rect x="0.5923%" y="165" width="66.2242%" height="15" fill="rgb(240,68,47)"/><text x="0.8423%" y="175.50">analysis</text></g><g><title>type_check_crate (64,774,605 samples, 38.31%)</title><rect x="28.5096%" y="149" width="38.3069%" height="15" fill="rgb(210,16,53)"/><text x="28.7596%" y="159.50">type_check_crate</text></g><g><title>wf_checking (14,191,638 samples, 8.39%)</title><rect x="58.4237%" y="133" width="8.3928%" height="15" fill="rgb(235,124,12)"/><text x="58.6737%" y="143.50">wf_checking</text></g><g><title>codegen_crate (322,504 samples, 0.19%)</title><rect x="66.8236%" y="165" width="0.1907%" height="15" fill="rgb(224,169,11)"/><text x="67.0736%" y="175.50"></text></g><g><title>AST_validation (203,022 samples, 0.12%)</title><rect x="67.1409%" y="149" width="0.1201%" height="15" fill="rgb(250,166,2)"/><text x="67.3909%" y="159.50"></text></g><g><title>metadata_load_macro (200,582 samples, 0.12%)</title><rect x="85.1155%" y="117" width="0.1186%" height="15" fill="rgb(242,216,29)"/><text x="85.3655%" y="127.50"></text></g><g><title>macro_expand_crate (30,372,076 samples, 17.96%)</title><rect x="67.3866%" y="149" width="17.9617%" height="15" fill="rgb(230,116,27)"/><text x="67.6366%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (30,349,985 samples, 17.95%)</title><rect x="67.3997%" y="133" width="17.9486%" height="15" fill="rgb(228,99,48)"/><text x="67.6497%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (193,023 samples, 0.11%)</title><rect x="85.2341%" y="117" width="0.1142%" height="15" fill="rgb(253,11,6)"/><text x="85.4841%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (238,222 samples, 0.14%)</title><rect x="85.3540%" y="149" width="0.1409%" height="15" fill="rgb(247,143,39)"/><text x="85.6040%" y="159.50"></text></g><g><title>finalize_imports (180,072 samples, 0.11%)</title><rect x="85.4978%" y="133" width="0.1065%" height="15" fill="rgb(236,97,10)"/><text x="85.7478%" y="143.50"></text></g><g><title>finalize_macro_resolutions (280,633 samples, 0.17%)</title><rect x="85.6043%" y="133" width="0.1660%" height="15" fill="rgb(233,208,19)"/><text x="85.8543%" y="143.50"></text></g><g><title>late_resolve_crate (4,591,851 samples, 2.72%)</title><rect x="85.7703%" y="133" width="2.7156%" height="15" fill="rgb(216,164,2)"/><text x="86.0203%" y="143.50">la..</text></g><g><title>configure_and_expand (36,504,733 samples, 21.59%)</title><rect x="67.0144%" y="165" width="21.5885%" height="15" fill="rgb(220,129,5)"/><text x="67.2644%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (5,255,348 samples, 3.11%)</title><rect x="85.4949%" y="149" width="3.1079%" height="15" fill="rgb(242,17,10)"/><text x="85.7449%" y="159.50">res..</text></g><g><title>drop_ast (551,206 samples, 0.33%)</title><rect x="88.6028%" y="165" width="0.3260%" height="15" fill="rgb(242,107,0)"/><text x="88.8528%" y="175.50"></text></g><g><title>early_lint_checks (751,639 samples, 0.44%)</title><rect x="88.9373%" y="165" width="0.4445%" height="15" fill="rgb(251,28,31)"/><text x="89.1873%" y="175.50"></text></g><g><title>free_global_ctxt (2,502,307 samples, 1.48%)</title><rect x="89.3818%" y="165" width="1.4798%" height="15" fill="rgb(233,223,10)"/><text x="89.6318%" y="175.50"></text></g><g><title>generate_crate_metadata (2,561,468 samples, 1.51%)</title><rect x="90.8617%" y="165" width="1.5148%" height="15" fill="rgb(215,21,27)"/><text x="91.1117%" y="175.50"></text></g><g><title>hir_lowering (8,687,385 samples, 5.14%)</title><rect x="92.3765%" y="165" width="5.1376%" height="15" fill="rgb(232,23,21)"/><text x="92.6265%" y="175.50">hir_lo..</text></g><g><title>parse_crate (2,575,038 samples, 1.52%)</title><rect x="97.5387%" y="165" width="1.5228%" height="15" fill="rgb(244,5,23)"/><text x="97.7887%" y="175.50"></text></g><g><title>prepare_outputs (192,892 samples, 0.11%)</title><rect x="99.0677%" y="165" width="0.1141%" height="15" fill="rgb(226,81,46)"/><text x="99.3177%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (886,330 samples, 0.52%)</title><rect x="99.1818%" y="165" width="0.5242%" height="15" fill="rgb(247,70,30)"/><text x="99.4318%" y="175.50"></text></g><g><title>all (169,093,718 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (169,093,718 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (385,304 samples, 0.23%)</title><rect x="99.7721%" y="165" width="0.2279%" height="15" fill="rgb(223,113,26)"/><text x="100.0221%" y="175.50"></text></g></svg></svg>