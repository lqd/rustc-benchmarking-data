<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (206,334 samples, 0.15%)</title><rect x="9.3568%" y="181" width="0.1505%" height="15" fill="rgb(227,0,7)"/><text x="9.6068%" y="191.50"></text></g><g><title>param_env (785,910 samples, 0.57%)</title><rect x="10.8368%" y="149" width="0.5731%" height="15" fill="rgb(217,0,24)"/><text x="11.0868%" y="159.50"></text></g><g><title>item_attrs (409,985 samples, 0.30%)</title><rect x="11.8497%" y="117" width="0.2990%" height="15" fill="rgb(221,193,54)"/><text x="12.0997%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (396,515 samples, 0.29%)</title><rect x="11.8596%" y="101" width="0.2891%" height="15" fill="rgb(248,212,6)"/><text x="12.1096%" y="111.50"></text></g><g><title>codegen_fn_attrs (529,075 samples, 0.39%)</title><rect x="11.7735%" y="133" width="0.3858%" height="15" fill="rgb(208,68,35)"/><text x="12.0235%" y="143.50"></text></g><g><title>opt_def_kind (255,233 samples, 0.19%)</title><rect x="14.2442%" y="37" width="0.1861%" height="15" fill="rgb(232,128,0)"/><text x="14.4942%" y="47.50"></text></g><g><title>param_env (276,544 samples, 0.20%)</title><rect x="14.2323%" y="69" width="0.2017%" height="15" fill="rgb(207,160,47)"/><text x="14.4823%" y="79.50"></text></g><g><title>predicates_of (262,773 samples, 0.19%)</title><rect x="14.2424%" y="53" width="0.1916%" height="15" fill="rgb(228,23,34)"/><text x="14.4924%" y="63.50"></text></g><g><title>adt_drop_tys (388,654 samples, 0.28%)</title><rect x="14.1514%" y="85" width="0.2834%" height="15" fill="rgb(218,30,26)"/><text x="14.4014%" y="95.50"></text></g><g><title>is_copy_raw (147,942 samples, 0.11%)</title><rect x="14.4356%" y="85" width="0.1079%" height="15" fill="rgb(220,122,19)"/><text x="14.6856%" y="95.50"></text></g><g><title>adt_drop_tys (660,998 samples, 0.48%)</title><rect x="14.1246%" y="101" width="0.4820%" height="15" fill="rgb(250,228,42)"/><text x="14.3746%" y="111.50"></text></g><g><title>needs_drop_raw (1,432,176 samples, 1.04%)</title><rect x="14.0222%" y="117" width="1.0444%" height="15" fill="rgb(240,193,28)"/><text x="14.2722%" y="127.50"></text></g><g><title>is_copy_raw (630,736 samples, 0.46%)</title><rect x="14.6066%" y="101" width="0.4599%" height="15" fill="rgb(216,20,37)"/><text x="14.8566%" y="111.50"></text></g><g><title>evaluate_obligation (466,884 samples, 0.34%)</title><rect x="14.7261%" y="85" width="0.3405%" height="15" fill="rgb(206,188,39)"/><text x="14.9761%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (929,229 samples, 0.68%)</title><rect x="15.3124%" y="101" width="0.6776%" height="15" fill="rgb(217,207,13)"/><text x="15.5624%" y="111.50"></text></g><g><title>resolve_instance (1,579,585 samples, 1.15%)</title><rect x="15.0665%" y="117" width="1.1518%" height="15" fill="rgb(231,73,38)"/><text x="15.3165%" y="127.50"></text></g><g><title>thir_body (935,772 samples, 0.68%)</title><rect x="16.2407%" y="117" width="0.6824%" height="15" fill="rgb(225,20,46)"/><text x="16.4907%" y="127.50"></text></g><g><title>mir_const (9,320,592 samples, 6.80%)</title><rect x="10.1470%" y="165" width="6.7966%" height="15" fill="rgb(210,31,41)"/><text x="10.3970%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (7,588,830 samples, 5.53%)</title><rect x="11.4098%" y="149" width="5.5338%" height="15" fill="rgb(221,200,47)"/><text x="11.6598%" y="159.50">unsafet..</text></g><g><title>mir_built (6,561,040 samples, 4.78%)</title><rect x="12.1593%" y="133" width="4.7843%" height="15" fill="rgb(226,26,5)"/><text x="12.4093%" y="143.50">mir_bu..</text></g><g><title>mir_promoted (10,145,960 samples, 7.40%)</title><rect x="9.5820%" y="181" width="7.3985%" height="15" fill="rgb(249,33,26)"/><text x="9.8320%" y="191.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (160,790 samples, 0.12%)</title><rect x="16.9805%" y="181" width="0.1172%" height="15" fill="rgb(235,183,28)"/><text x="17.2305%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (902,070 samples, 0.66%)</title><rect x="17.0977%" y="181" width="0.6578%" height="15" fill="rgb(221,5,38)"/><text x="17.3477%" y="191.50"></text></g><g><title>normalize_projection_ty (609,386 samples, 0.44%)</title><rect x="17.3111%" y="165" width="0.4444%" height="15" fill="rgb(247,18,42)"/><text x="17.5611%" y="175.50"></text></g><g><title>type_op_normalize_predicate (507,034 samples, 0.37%)</title><rect x="17.7555%" y="181" width="0.3697%" height="15" fill="rgb(241,131,45)"/><text x="18.0055%" y="191.50"></text></g><g><title>normalize_projection_ty (216,522 samples, 0.16%)</title><rect x="17.9673%" y="165" width="0.1579%" height="15" fill="rgb(249,31,29)"/><text x="18.2173%" y="175.50"></text></g><g><title>type_op_prove_predicate (3,061,607 samples, 2.23%)</title><rect x="18.1322%" y="181" width="2.2325%" height="15" fill="rgb(225,111,53)"/><text x="18.3822%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (26,987,988 samples, 19.68%)</title><rect x="0.6880%" y="213" width="19.6798%" height="15" fill="rgb(238,160,17)"/><text x="0.9380%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,846,254 samples, 19.58%)</title><rect x="0.7914%" y="197" width="19.5764%" height="15" fill="rgb(214,148,48)"/><text x="1.0414%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (157,582 samples, 0.11%)</title><rect x="20.3938%" y="213" width="0.1149%" height="15" fill="rgb(232,36,49)"/><text x="20.6438%" y="223.50"></text></g><g><title>should_inherit_track_caller (239,562 samples, 0.17%)</title><rect x="20.7813%" y="165" width="0.1747%" height="15" fill="rgb(209,103,24)"/><text x="21.0313%" y="175.50"></text></g><g><title>codegen_fn_attrs (424,673 samples, 0.31%)</title><rect x="20.6603%" y="181" width="0.3097%" height="15" fill="rgb(229,88,8)"/><text x="20.9103%" y="191.50"></text></g><g><title>check_mod_attrs (614,607 samples, 0.45%)</title><rect x="20.5220%" y="197" width="0.4482%" height="15" fill="rgb(213,181,19)"/><text x="20.7720%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (326,424 samples, 0.24%)</title><rect x="21.0914%" y="197" width="0.2380%" height="15" fill="rgb(254,191,54)"/><text x="21.3414%" y="207.50"></text></g><g><title>misc_checking_1 (1,162,353 samples, 0.85%)</title><rect x="20.5091%" y="213" width="0.8476%" height="15" fill="rgb(241,83,37)"/><text x="20.7591%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (414,925 samples, 0.30%)</title><rect x="21.3578%" y="197" width="0.3026%" height="15" fill="rgb(233,36,39)"/><text x="21.6078%" y="207.50"></text></g><g><title>check_mod_liveness (342,474 samples, 0.25%)</title><rect x="21.4107%" y="181" width="0.2497%" height="15" fill="rgb(226,3,54)"/><text x="21.6607%" y="191.50"></text></g><g><title>param_env (144,831 samples, 0.11%)</title><rect x="21.9567%" y="165" width="0.1056%" height="15" fill="rgb(245,192,40)"/><text x="22.2067%" y="175.50"></text></g><g><title>misc_checking_2 (970,601 samples, 0.71%)</title><rect x="21.3567%" y="213" width="0.7078%" height="15" fill="rgb(238,167,29)"/><text x="21.6067%" y="223.50"></text></g><g><title>match_checking (554,066 samples, 0.40%)</title><rect x="21.6604%" y="197" width="0.4040%" height="15" fill="rgb(232,182,51)"/><text x="21.9104%" y="207.50"></text></g><g><title>check_match (517,645 samples, 0.38%)</title><rect x="21.6870%" y="181" width="0.3775%" height="15" fill="rgb(231,60,39)"/><text x="21.9370%" y="191.50"></text></g><g><title>check_private_in_public (177,932 samples, 0.13%)</title><rect x="22.0715%" y="197" width="0.1297%" height="15" fill="rgb(208,69,12)"/><text x="22.3215%" y="207.50"></text></g><g><title>death_checking (296,553 samples, 0.22%)</title><rect x="22.2013%" y="197" width="0.2162%" height="15" fill="rgb(235,93,37)"/><text x="22.4513%" y="207.50"></text></g><g><title>crate_lints (1,835,190 samples, 1.34%)</title><rect x="22.4186%" y="181" width="1.3382%" height="15" fill="rgb(213,116,39)"/><text x="22.6686%" y="191.50"></text></g><g><title>type_of (1,067,604 samples, 0.78%)</title><rect x="22.9783%" y="165" width="0.7785%" height="15" fill="rgb(222,207,29)"/><text x="23.2283%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (827,859 samples, 0.60%)</title><rect x="23.1531%" y="149" width="0.6037%" height="15" fill="rgb(206,96,30)"/><text x="23.4031%" y="159.50"></text></g><g><title>lint_checking (2,143,214 samples, 1.56%)</title><rect x="22.4175%" y="197" width="1.5628%" height="15" fill="rgb(218,138,4)"/><text x="22.6675%" y="207.50"></text></g><g><title>module_lints (306,584 samples, 0.22%)</title><rect x="23.7568%" y="181" width="0.2236%" height="15" fill="rgb(250,191,14)"/><text x="24.0068%" y="191.50"></text></g><g><title>lint_mod (304,024 samples, 0.22%)</title><rect x="23.7587%" y="165" width="0.2217%" height="15" fill="rgb(239,60,40)"/><text x="24.0087%" y="175.50"></text></g><g><title>privacy_access_levels (225,033 samples, 0.16%)</title><rect x="23.9804%" y="197" width="0.1641%" height="15" fill="rgb(206,27,48)"/><text x="24.2304%" y="207.50"></text></g><g><title>privacy_checking_modules (693,477 samples, 0.51%)</title><rect x="24.1444%" y="197" width="0.5057%" height="15" fill="rgb(225,35,8)"/><text x="24.3944%" y="207.50"></text></g><g><title>check_mod_privacy (691,937 samples, 0.50%)</title><rect x="24.1456%" y="181" width="0.5046%" height="15" fill="rgb(250,213,24)"/><text x="24.3956%" y="191.50"></text></g><g><title>misc_checking_3 (3,558,579 samples, 2.59%)</title><rect x="22.0644%" y="213" width="2.5949%" height="15" fill="rgb(247,123,22)"/><text x="22.3144%" y="223.50">mi..</text></g><g><title>impl_parent (2,345,419 samples, 1.71%)</title><rect x="27.6746%" y="149" width="1.7103%" height="15" fill="rgb(231,138,38)"/><text x="27.9246%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,462,273 samples, 1.07%)</title><rect x="28.3186%" y="133" width="1.0663%" height="15" fill="rgb(231,145,46)"/><text x="28.5686%" y="143.50"></text></g><g><title>impl_trait_ref (5,671,154 samples, 4.14%)</title><rect x="29.3849%" y="149" width="4.1354%" height="15" fill="rgb(251,118,11)"/><text x="29.6349%" y="159.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,333,491 samples, 3.16%)</title><rect x="30.3603%" y="133" width="3.1600%" height="15" fill="rgb(217,147,25)"/><text x="30.6103%" y="143.50">met..</text></g><g><title>explicit_predicates_of (149,581 samples, 0.11%)</title><rect x="33.6391%" y="117" width="0.1091%" height="15" fill="rgb(247,81,37)"/><text x="33.8891%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (144,931 samples, 0.11%)</title><rect x="33.6425%" y="101" width="0.1057%" height="15" fill="rgb(209,12,38)"/><text x="33.8925%" y="111.50"></text></g><g><title>predicates_of (216,131 samples, 0.16%)</title><rect x="33.6114%" y="149" width="0.1576%" height="15" fill="rgb(227,1,9)"/><text x="33.8614%" y="159.50"></text></g><g><title>predicates_defined_on (191,401 samples, 0.14%)</title><rect x="33.6295%" y="133" width="0.1396%" height="15" fill="rgb(248,47,43)"/><text x="33.8795%" y="143.50"></text></g><g><title>trait_impls_of (838,208 samples, 0.61%)</title><rect x="33.7734%" y="149" width="0.6112%" height="15" fill="rgb(221,10,30)"/><text x="34.0234%" y="159.50"></text></g><g><title>implementations_of_trait (227,500 samples, 0.17%)</title><rect x="34.2187%" y="133" width="0.1659%" height="15" fill="rgb(210,229,1)"/><text x="34.4687%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (179,470 samples, 0.13%)</title><rect x="34.2537%" y="117" width="0.1309%" height="15" fill="rgb(222,148,37)"/><text x="34.5037%" y="127.50"></text></g><g><title>coherent_trait (13,274,957 samples, 9.68%)</title><rect x="24.7227%" y="181" width="9.6802%" height="15" fill="rgb(234,67,33)"/><text x="24.9727%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (13,251,737 samples, 9.66%)</title><rect x="24.7397%" y="165" width="9.6632%" height="15" fill="rgb(247,98,35)"/><text x="24.9897%" y="175.50">specialization..</text></g><g><title>coherence_checking (13,372,398 samples, 9.75%)</title><rect x="24.7068%" y="197" width="9.7512%" height="15" fill="rgb(247,138,52)"/><text x="24.9568%" y="207.50">coherence_chec..</text></g><g><title>associated_item (360,155 samples, 0.26%)</title><rect x="48.8456%" y="133" width="0.2626%" height="15" fill="rgb(213,79,30)"/><text x="49.0956%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (285,513 samples, 0.21%)</title><rect x="48.9000%" y="117" width="0.2082%" height="15" fill="rgb(246,177,23)"/><text x="49.1500%" y="127.50"></text></g><g><title>associated_items (510,565 samples, 0.37%)</title><rect x="48.7541%" y="149" width="0.3723%" height="15" fill="rgb(230,62,27)"/><text x="49.0041%" y="159.50"></text></g><g><title>adt_dtorck_constraint (173,682 samples, 0.13%)</title><rect x="49.4793%" y="101" width="0.1266%" height="15" fill="rgb(216,154,8)"/><text x="49.7293%" y="111.50"></text></g><g><title>adt_dtorck_constraint (202,102 samples, 0.15%)</title><rect x="49.4632%" y="117" width="0.1474%" height="15" fill="rgb(244,35,45)"/><text x="49.7132%" y="127.50"></text></g><g><title>adt_dtorck_constraint (280,292 samples, 0.20%)</title><rect x="49.4155%" y="133" width="0.2044%" height="15" fill="rgb(251,115,12)"/><text x="49.6655%" y="143.50"></text></g><g><title>dropck_outlives (600,575 samples, 0.44%)</title><rect x="49.1874%" y="149" width="0.4379%" height="15" fill="rgb(240,54,50)"/><text x="49.4374%" y="159.50"></text></g><g><title>generics_of (293,713 samples, 0.21%)</title><rect x="50.9930%" y="133" width="0.2142%" height="15" fill="rgb(233,84,52)"/><text x="51.2430%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (238,373 samples, 0.17%)</title><rect x="51.0334%" y="117" width="0.1738%" height="15" fill="rgb(207,117,47)"/><text x="51.2834%" y="127.50"></text></g><g><title>impl_trait_ref (328,492 samples, 0.24%)</title><rect x="51.2522%" y="133" width="0.2395%" height="15" fill="rgb(249,43,39)"/><text x="51.5022%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (277,641 samples, 0.20%)</title><rect x="51.2892%" y="117" width="0.2025%" height="15" fill="rgb(209,38,44)"/><text x="51.5392%" y="127.50"></text></g><g><title>predicates_of (199,552 samples, 0.15%)</title><rect x="51.5068%" y="133" width="0.1455%" height="15" fill="rgb(236,212,23)"/><text x="51.7568%" y="143.50"></text></g><g><title>specializes (379,115 samples, 0.28%)</title><rect x="51.6523%" y="133" width="0.2765%" height="15" fill="rgb(242,79,21)"/><text x="51.9023%" y="143.50"></text></g><g><title>param_env (273,713 samples, 0.20%)</title><rect x="51.7292%" y="117" width="0.1996%" height="15" fill="rgb(211,96,35)"/><text x="51.9792%" y="127.50"></text></g><g><title>def_span (171,730 samples, 0.13%)</title><rect x="51.8035%" y="101" width="0.1252%" height="15" fill="rgb(253,215,40)"/><text x="52.0535%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (163,270 samples, 0.12%)</title><rect x="51.8097%" y="85" width="0.1191%" height="15" fill="rgb(211,81,21)"/><text x="52.0597%" y="95.50"></text></g><g><title>trait_impls_of (159,970 samples, 0.12%)</title><rect x="51.9369%" y="133" width="0.1167%" height="15" fill="rgb(208,190,38)"/><text x="52.1869%" y="143.50"></text></g><g><title>evaluate_obligation (3,340,695 samples, 2.44%)</title><rect x="49.6254%" y="149" width="2.4361%" height="15" fill="rgb(235,213,38)"/><text x="49.8754%" y="159.50">ev..</text></g><g><title>impl_item_implementor_ids (147,221 samples, 0.11%)</title><rect x="52.2222%" y="149" width="0.1074%" height="15" fill="rgb(237,122,38)"/><text x="52.4722%" y="159.50"></text></g><g><title>method_autoderef_steps (401,481 samples, 0.29%)</title><rect x="52.4368%" y="149" width="0.2928%" height="15" fill="rgb(244,218,35)"/><text x="52.6868%" y="159.50"></text></g><g><title>evaluate_obligation (197,040 samples, 0.14%)</title><rect x="52.5859%" y="133" width="0.1437%" height="15" fill="rgb(240,68,47)"/><text x="52.8359%" y="143.50"></text></g><g><title>predicates_of (341,753 samples, 0.25%)</title><rect x="52.7636%" y="149" width="0.2492%" height="15" fill="rgb(210,16,53)"/><text x="53.0136%" y="159.50"></text></g><g><title>predicates_defined_on (233,383 samples, 0.17%)</title><rect x="52.8427%" y="133" width="0.1702%" height="15" fill="rgb(235,124,12)"/><text x="53.0927%" y="143.50"></text></g><g><title>associated_items (156,651 samples, 0.11%)</title><rect x="56.0489%" y="133" width="0.1142%" height="15" fill="rgb(224,169,11)"/><text x="56.2989%" y="143.50"></text></g><g><title>evaluate_obligation (469,196 samples, 0.34%)</title><rect x="56.2112%" y="133" width="0.3421%" height="15" fill="rgb(250,166,2)"/><text x="56.4612%" y="143.50"></text></g><g><title>method_autoderef_steps (189,392 samples, 0.14%)</title><rect x="56.7069%" y="133" width="0.1381%" height="15" fill="rgb(242,216,29)"/><text x="56.9569%" y="143.50"></text></g><g><title>typeck (5,356,189 samples, 3.91%)</title><rect x="53.0649%" y="149" width="3.9058%" height="15" fill="rgb(230,116,27)"/><text x="53.3149%" y="159.50">type..</text></g><g><title>item_bodies_checking (30,874,781 samples, 22.51%)</title><rect x="34.4844%" y="197" width="22.5141%" height="15" fill="rgb(228,99,48)"/><text x="34.7344%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,871,481 samples, 22.51%)</title><rect x="34.4868%" y="181" width="22.5117%" height="15" fill="rgb(253,11,6)"/><text x="34.7368%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (30,781,060 samples, 22.45%)</title><rect x="34.5528%" y="165" width="22.4457%" height="15" fill="rgb(247,143,39)"/><text x="34.8028%" y="175.50">typeck</text></g><g><title>adt_destructor (306,173 samples, 0.22%)</title><rect x="58.3835%" y="165" width="0.2233%" height="15" fill="rgb(236,97,10)"/><text x="58.6335%" y="175.50"></text></g><g><title>coherent_trait (300,103 samples, 0.22%)</title><rect x="58.3879%" y="149" width="0.2188%" height="15" fill="rgb(233,208,19)"/><text x="58.6379%" y="159.50"></text></g><g><title>specialization_graph_of (298,243 samples, 0.22%)</title><rect x="58.3893%" y="133" width="0.2175%" height="15" fill="rgb(216,164,2)"/><text x="58.6393%" y="143.50"></text></g><g><title>item_types_checking (2,406,207 samples, 1.75%)</title><rect x="56.9985%" y="197" width="1.7546%" height="15" fill="rgb(220,129,5)"/><text x="57.2485%" y="207.50"></text></g><g><title>check_mod_item_types (2,403,687 samples, 1.75%)</title><rect x="57.0003%" y="181" width="1.7528%" height="15" fill="rgb(242,17,10)"/><text x="57.2503%" y="191.50"></text></g><g><title>fn_sig (235,884 samples, 0.17%)</title><rect x="58.9372%" y="165" width="0.1720%" height="15" fill="rgb(242,107,0)"/><text x="59.1872%" y="175.50"></text></g><g><title>is_late_bound_map (238,444 samples, 0.17%)</title><rect x="59.2144%" y="149" width="0.1739%" height="15" fill="rgb(251,28,31)"/><text x="59.4644%" y="159.50"></text></g><g><title>resolve_lifetimes (210,044 samples, 0.15%)</title><rect x="59.2351%" y="133" width="0.1532%" height="15" fill="rgb(233,223,10)"/><text x="59.4851%" y="143.50"></text></g><g><title>generics_of (403,837 samples, 0.29%)</title><rect x="59.1092%" y="165" width="0.2945%" height="15" fill="rgb(215,21,27)"/><text x="59.3592%" y="175.50"></text></g><g><title>late_bound_vars_map (407,105 samples, 0.30%)</title><rect x="59.7739%" y="117" width="0.2969%" height="15" fill="rgb(232,23,21)"/><text x="60.0239%" y="127.50"></text></g><g><title>resolve_lifetimes (390,105 samples, 0.28%)</title><rect x="59.7863%" y="101" width="0.2845%" height="15" fill="rgb(244,5,23)"/><text x="60.0363%" y="111.50"></text></g><g><title>explicit_predicates_of (743,358 samples, 0.54%)</title><rect x="59.5462%" y="133" width="0.5421%" height="15" fill="rgb(226,81,46)"/><text x="59.7962%" y="143.50"></text></g><g><title>predicates_of (1,112,031 samples, 0.81%)</title><rect x="59.4450%" y="165" width="0.8109%" height="15" fill="rgb(247,70,30)"/><text x="59.6950%" y="175.50"></text></g><g><title>predicates_defined_on (1,062,721 samples, 0.77%)</title><rect x="59.4809%" y="149" width="0.7749%" height="15" fill="rgb(212,68,19)"/><text x="59.7309%" y="159.50"></text></g><g><title>inferred_outlives_of (229,912 samples, 0.17%)</title><rect x="60.0882%" y="133" width="0.1677%" height="15" fill="rgb(240,187,13)"/><text x="60.3382%" y="143.50"></text></g><g><title>inferred_outlives_crate (209,742 samples, 0.15%)</title><rect x="60.1029%" y="117" width="0.1529%" height="15" fill="rgb(223,113,26)"/><text x="60.3529%" y="127.50"></text></g><g><title>type_collecting (2,284,445 samples, 1.67%)</title><rect x="58.7543%" y="197" width="1.6658%" height="15" fill="rgb(206,192,2)"/><text x="59.0043%" y="207.50"></text></g><g><title>collect_mod_item_types (2,278,045 samples, 1.66%)</title><rect x="58.7590%" y="181" width="1.6612%" height="15" fill="rgb(241,108,4)"/><text x="59.0090%" y="191.50"></text></g><g><title>type_of (225,301 samples, 0.16%)</title><rect x="60.2559%" y="165" width="0.1643%" height="15" fill="rgb(247,173,49)"/><text x="60.5059%" y="175.50"></text></g><g><title>evaluate_obligation (639,346 samples, 0.47%)</title><rect x="64.2261%" y="165" width="0.4662%" height="15" fill="rgb(224,114,35)"/><text x="64.4761%" y="175.50"></text></g><g><title>implied_outlives_bounds (394,013 samples, 0.29%)</title><rect x="64.6932%" y="165" width="0.2873%" height="15" fill="rgb(245,159,27)"/><text x="64.9432%" y="175.50"></text></g><g><title>param_env (1,159,080 samples, 0.85%)</title><rect x="64.9805%" y="165" width="0.8452%" height="15" fill="rgb(245,172,44)"/><text x="65.2305%" y="175.50"></text></g><g><title>region_scope_tree (353,582 samples, 0.26%)</title><rect x="65.8609%" y="165" width="0.2578%" height="15" fill="rgb(236,23,11)"/><text x="66.1109%" y="175.50"></text></g><g><title>check_impl_item_well_formed (7,626,899 samples, 5.56%)</title><rect x="60.5851%" y="181" width="5.5616%" height="15" fill="rgb(205,117,38)"/><text x="60.8351%" y="191.50">check_i..</text></g><g><title>adt_sized_constraint (155,682 samples, 0.11%)</title><rect x="68.5667%" y="165" width="0.1135%" height="15" fill="rgb(237,72,25)"/><text x="68.8167%" y="175.50"></text></g><g><title>implied_outlives_bounds (239,221 samples, 0.17%)</title><rect x="68.7326%" y="165" width="0.1744%" height="15" fill="rgb(244,70,9)"/><text x="68.9826%" y="175.50"></text></g><g><title>param_env (685,464 samples, 0.50%)</title><rect x="68.9108%" y="165" width="0.4998%" height="15" fill="rgb(217,125,39)"/><text x="69.1608%" y="175.50"></text></g><g><title>trait_impls_of (463,845 samples, 0.34%)</title><rect x="69.5395%" y="165" width="0.3382%" height="15" fill="rgb(235,36,10)"/><text x="69.7895%" y="175.50"></text></g><g><title>implementations_of_trait (180,163 samples, 0.13%)</title><rect x="69.7464%" y="149" width="0.1314%" height="15" fill="rgb(251,123,47)"/><text x="69.9964%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (138,722 samples, 0.10%)</title><rect x="69.7766%" y="133" width="0.1012%" height="15" fill="rgb(221,13,13)"/><text x="70.0266%" y="143.50"></text></g><g><title>analysis (95,246,782 samples, 69.45%)</title><rect x="0.5087%" y="229" width="69.4545%" height="15" fill="rgb(238,131,9)"/><text x="0.7587%" y="239.50">analysis</text></g><g><title>type_check_crate (62,127,657 samples, 45.30%)</title><rect x="24.6594%" y="213" width="45.3038%" height="15" fill="rgb(211,50,8)"/><text x="24.9094%" y="223.50">type_check_crate</text></g><g><title>wf_checking (13,080,764 samples, 9.54%)</title><rect x="60.4246%" y="197" width="9.5386%" height="15" fill="rgb(245,182,24)"/><text x="60.6746%" y="207.50">wf_checking</text></g><g><title>check_item_well_formed (5,233,830 samples, 3.82%)</title><rect x="66.1467%" y="181" width="3.8165%" height="15" fill="rgb(242,14,37)"/><text x="66.3967%" y="191.50">chec..</text></g><g><title>codegen_crate (620,667 samples, 0.45%)</title><rect x="69.9723%" y="229" width="0.4526%" height="15" fill="rgb(246,228,12)"/><text x="70.2223%" y="239.50"></text></g><g><title>AST_validation (216,073 samples, 0.16%)</title><rect x="70.6084%" y="213" width="0.1576%" height="15" fill="rgb(213,55,15)"/><text x="70.8584%" y="223.50"></text></g><g><title>macro_expand_crate (14,638,052 samples, 10.67%)</title><rect x="70.9085%" y="213" width="10.6741%" height="15" fill="rgb(209,9,3)"/><text x="71.1585%" y="223.50">macro_expand_cra..</text></g><g><title>expand_crate (14,620,482 samples, 10.66%)</title><rect x="70.9213%" y="197" width="10.6613%" height="15" fill="rgb(230,59,30)"/><text x="71.1713%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,481,947 samples, 1.81%)</title><rect x="79.7728%" y="181" width="1.8098%" height="15" fill="rgb(209,121,21)"/><text x="80.0228%" y="191.50">m..</text></g><g><title>metadata_register_crate (1,972,372 samples, 1.44%)</title><rect x="80.1444%" y="165" width="1.4383%" height="15" fill="rgb(220,109,13)"/><text x="80.3944%" y="175.50"></text></g><g><title>metadata_register_crate (800,089 samples, 0.58%)</title><rect x="80.9992%" y="149" width="0.5834%" height="15" fill="rgb(232,18,1)"/><text x="81.2492%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (523,676 samples, 0.38%)</title><rect x="81.5864%" y="213" width="0.3819%" height="15" fill="rgb(215,41,42)"/><text x="81.8364%" y="223.50"></text></g><g><title>late_resolve_crate (2,703,370 samples, 1.97%)</title><rect x="82.0942%" y="197" width="1.9713%" height="15" fill="rgb(224,123,36)"/><text x="82.3442%" y="207.50">l..</text></g><g><title>configure_and_expand (18,909,629 samples, 13.79%)</title><rect x="70.4249%" y="229" width="13.7890%" height="15" fill="rgb(240,125,3)"/><text x="70.6749%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (3,079,654 samples, 2.25%)</title><rect x="81.9682%" y="213" width="2.2457%" height="15" fill="rgb(205,98,50)"/><text x="82.2182%" y="223.50">r..</text></g><g><title>drop_ast (196,502 samples, 0.14%)</title><rect x="84.2139%" y="229" width="0.1433%" height="15" fill="rgb(205,185,37)"/><text x="84.4639%" y="239.50"></text></g><g><title>early_lint_checks (406,714 samples, 0.30%)</title><rect x="84.3692%" y="229" width="0.2966%" height="15" fill="rgb(238,207,15)"/><text x="84.6192%" y="239.50"></text></g><g><title>free_global_ctxt (3,332,096 samples, 2.43%)</title><rect x="84.6658%" y="229" width="2.4298%" height="15" fill="rgb(213,199,42)"/><text x="84.9158%" y="239.50">fr..</text></g><g><title>generate_crate_metadata (1,228,784 samples, 0.90%)</title><rect x="87.0956%" y="229" width="0.8960%" height="15" fill="rgb(235,201,11)"/><text x="87.3456%" y="239.50"></text></g><g><title>hir_lowering (4,170,966 samples, 3.04%)</title><rect x="87.9916%" y="229" width="3.0415%" height="15" fill="rgb(207,46,11)"/><text x="88.2416%" y="239.50">hir..</text></g><g><title>parse_crate (10,646,428 samples, 7.76%)</title><rect x="91.0681%" y="229" width="7.7634%" height="15" fill="rgb(241,35,35)"/><text x="91.3181%" y="239.50">parse_crate</text></g><g><title>prepare_outputs (313,654 samples, 0.23%)</title><rect x="98.8392%" y="229" width="0.2287%" height="15" fill="rgb(243,32,47)"/><text x="99.0892%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (848,529 samples, 0.62%)</title><rect x="99.0679%" y="229" width="0.6188%" height="15" fill="rgb(247,202,23)"/><text x="99.3179%" y="239.50"></text></g><g><title>all (137,135,546 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (137,135,546 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (333,734 samples, 0.24%)</title><rect x="99.7566%" y="229" width="0.2434%" height="15" fill="rgb(222,74,54)"/><text x="100.0066%" y="239.50"></text></g></svg></svg>