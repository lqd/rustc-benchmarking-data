<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (220,402 samples, 0.19%)</title><rect x="10.1197%" y="245" width="0.1854%" height="15" fill="rgb(227,0,7)"/><text x="10.3697%" y="255.50"></text></g><g><title>param_env (350,244 samples, 0.29%)</title><rect x="11.5427%" y="213" width="0.2947%" height="15" fill="rgb(217,0,24)"/><text x="11.7927%" y="223.50"></text></g><g><title>item_attrs (700,297 samples, 0.59%)</title><rect x="12.2483%" y="181" width="0.5892%" height="15" fill="rgb(221,193,54)"/><text x="12.4983%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (688,827 samples, 0.58%)</title><rect x="12.2580%" y="165" width="0.5796%" height="15" fill="rgb(248,212,6)"/><text x="12.5080%" y="175.50"></text></g><g><title>codegen_fn_attrs (837,778 samples, 0.70%)</title><rect x="12.1490%" y="197" width="0.7049%" height="15" fill="rgb(208,68,35)"/><text x="12.3990%" y="207.50"></text></g><g><title>adt_drop_tys (219,554 samples, 0.18%)</title><rect x="14.7328%" y="165" width="0.1847%" height="15" fill="rgb(232,128,0)"/><text x="14.9828%" y="175.50"></text></g><g><title>is_copy_raw (1,006,161 samples, 0.85%)</title><rect x="14.9176%" y="165" width="0.8466%" height="15" fill="rgb(207,160,47)"/><text x="15.1676%" y="175.50"></text></g><g><title>evaluate_obligation (850,970 samples, 0.72%)</title><rect x="15.0481%" y="149" width="0.7160%" height="15" fill="rgb(228,23,34)"/><text x="15.2981%" y="159.50"></text></g><g><title>needs_drop_raw (1,339,786 samples, 1.13%)</title><rect x="14.6404%" y="181" width="1.1273%" height="15" fill="rgb(218,30,26)"/><text x="14.8904%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (299,823 samples, 0.25%)</title><rect x="15.9678%" y="165" width="0.2523%" height="15" fill="rgb(220,122,19)"/><text x="16.2178%" y="175.50"></text></g><g><title>own_existential_vtable_entries (147,322 samples, 0.12%)</title><rect x="16.2691%" y="165" width="0.1240%" height="15" fill="rgb(250,228,42)"/><text x="16.5191%" y="175.50"></text></g><g><title>impl_parent (359,067 samples, 0.30%)</title><rect x="16.8660%" y="149" width="0.3021%" height="15" fill="rgb(240,193,28)"/><text x="17.1160%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (228,915 samples, 0.19%)</title><rect x="16.9755%" y="133" width="0.1926%" height="15" fill="rgb(216,20,37)"/><text x="17.2255%" y="143.50"></text></g><g><title>specialization_graph_of (1,424,246 samples, 1.20%)</title><rect x="16.3930%" y="165" width="1.1983%" height="15" fill="rgb(206,188,39)"/><text x="16.6430%" y="175.50"></text></g><g><title>impl_trait_ref (503,047 samples, 0.42%)</title><rect x="17.1681%" y="149" width="0.4233%" height="15" fill="rgb(217,207,13)"/><text x="17.4181%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (372,986 samples, 0.31%)</title><rect x="17.2775%" y="133" width="0.3138%" height="15" fill="rgb(231,73,38)"/><text x="17.5275%" y="143.50"></text></g><g><title>resolve_instance (2,267,439 samples, 1.91%)</title><rect x="15.7677%" y="181" width="1.9078%" height="15" fill="rgb(225,20,46)"/><text x="16.0177%" y="191.50">r..</text></g><g><title>thir_body (924,063 samples, 0.78%)</title><rect x="17.6962%" y="181" width="0.7775%" height="15" fill="rgb(210,31,41)"/><text x="17.9462%" y="191.50"></text></g><g><title>mir_const (8,922,001 samples, 7.51%)</title><rect x="10.9899%" y="229" width="7.5067%" height="15" fill="rgb(221,200,47)"/><text x="11.2399%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (7,914,711 samples, 6.66%)</title><rect x="11.8374%" y="213" width="6.6592%" height="15" fill="rgb(226,26,5)"/><text x="12.0874%" y="223.50">unsafety_..</text></g><g><title>mir_built (6,706,538 samples, 5.64%)</title><rect x="12.8539%" y="197" width="5.6427%" height="15" fill="rgb(249,33,26)"/><text x="13.1039%" y="207.50">mir_bui..</text></g><g><title>has_structural_eq_impls (186,482 samples, 0.16%)</title><rect x="18.7419%" y="213" width="0.1569%" height="15" fill="rgb(235,183,28)"/><text x="18.9919%" y="223.50"></text></g><g><title>evaluate_obligation (168,452 samples, 0.14%)</title><rect x="18.7570%" y="197" width="0.1417%" height="15" fill="rgb(221,5,38)"/><text x="19.0070%" y="207.50"></text></g><g><title>trait_impls_of (146,222 samples, 0.12%)</title><rect x="18.7758%" y="181" width="0.1230%" height="15" fill="rgb(247,18,42)"/><text x="19.0258%" y="191.50"></text></g><g><title>mir_const (191,843 samples, 0.16%)</title><rect x="18.9597%" y="213" width="0.1614%" height="15" fill="rgb(241,131,45)"/><text x="19.2097%" y="223.50"></text></g><g><title>unsafety_check_result (142,181 samples, 0.12%)</title><rect x="19.0015%" y="197" width="0.1196%" height="15" fill="rgb(249,31,29)"/><text x="19.2515%" y="207.50"></text></g><g><title>mir_built (123,751 samples, 0.10%)</title><rect x="19.0170%" y="181" width="0.1041%" height="15" fill="rgb(225,111,53)"/><text x="19.2670%" y="191.50"></text></g><g><title>needs_drop_raw (134,852 samples, 0.11%)</title><rect x="19.1211%" y="213" width="0.1135%" height="15" fill="rgb(238,160,17)"/><text x="19.3711%" y="223.50"></text></g><g><title>mir_promoted (10,555,718 samples, 8.88%)</title><rect x="10.3548%" y="245" width="8.8813%" height="15" fill="rgb(214,148,48)"/><text x="10.6048%" y="255.50">mir_promoted</text></g><g><title>mir_const_qualif (878,920 samples, 0.74%)</title><rect x="18.4966%" y="229" width="0.7395%" height="15" fill="rgb(232,36,49)"/><text x="18.7466%" y="239.50"></text></g><g><title>type_op_ascribe_user_type (710,595 samples, 0.60%)</title><rect x="19.2396%" y="245" width="0.5979%" height="15" fill="rgb(209,103,24)"/><text x="19.4896%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (222,933 samples, 0.19%)</title><rect x="19.8375%" y="245" width="0.1876%" height="15" fill="rgb(229,88,8)"/><text x="20.0875%" y="255.50"></text></g><g><title>normalize_projection_ty (130,930 samples, 0.11%)</title><rect x="19.9149%" y="229" width="0.1102%" height="15" fill="rgb(213,181,19)"/><text x="20.1649%" y="239.50"></text></g><g><title>type_op_prove_predicate (2,995,178 samples, 2.52%)</title><rect x="20.0797%" y="245" width="2.5201%" height="15" fill="rgb(254,191,54)"/><text x="20.3297%" y="255.50">ty..</text></g><g><title>MIR_borrow_checking (26,055,761 samples, 21.92%)</title><rect x="0.6835%" y="277" width="21.9226%" height="15" fill="rgb(241,83,37)"/><text x="0.9335%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,965,869 samples, 21.85%)</title><rect x="0.7592%" y="261" width="21.8470%" height="15" fill="rgb(233,36,39)"/><text x="1.0092%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (202,943 samples, 0.17%)</title><rect x="22.6062%" y="277" width="0.1708%" height="15" fill="rgb(226,3,54)"/><text x="22.8562%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (154,242 samples, 0.13%)</title><rect x="22.6471%" y="261" width="0.1298%" height="15" fill="rgb(245,192,40)"/><text x="22.8971%" y="271.50"></text></g><g><title>hir_module_items (132,211 samples, 0.11%)</title><rect x="22.7769%" y="277" width="0.1112%" height="15" fill="rgb(238,167,29)"/><text x="23.0269%" y="287.50"></text></g><g><title>codegen_fn_attrs (267,774 samples, 0.23%)</title><rect x="23.0304%" y="245" width="0.2253%" height="15" fill="rgb(232,182,51)"/><text x="23.2804%" y="255.50"></text></g><g><title>check_mod_attrs (418,504 samples, 0.35%)</title><rect x="22.9037%" y="261" width="0.3521%" height="15" fill="rgb(231,60,39)"/><text x="23.1537%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (321,803 samples, 0.27%)</title><rect x="23.3748%" y="261" width="0.2708%" height="15" fill="rgb(208,69,12)"/><text x="23.6248%" y="271.50"></text></g><g><title>misc_checking_1 (942,941 samples, 0.79%)</title><rect x="22.8885%" y="277" width="0.7934%" height="15" fill="rgb(235,93,37)"/><text x="23.1385%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (425,914 samples, 0.36%)</title><rect x="23.6831%" y="261" width="0.3584%" height="15" fill="rgb(213,116,39)"/><text x="23.9331%" y="271.50"></text></g><g><title>check_mod_liveness (356,914 samples, 0.30%)</title><rect x="23.7412%" y="245" width="0.3003%" height="15" fill="rgb(222,207,29)"/><text x="23.9912%" y="255.50"></text></g><g><title>type_uninhabited_from (137,292 samples, 0.12%)</title><rect x="23.9259%" y="229" width="0.1155%" height="15" fill="rgb(206,96,30)"/><text x="24.1759%" y="239.50"></text></g><g><title>misc_checking_2 (800,149 samples, 0.67%)</title><rect x="23.6819%" y="277" width="0.6732%" height="15" fill="rgb(218,138,4)"/><text x="23.9319%" y="287.50"></text></g><g><title>match_checking (372,765 samples, 0.31%)</title><rect x="24.0415%" y="261" width="0.3136%" height="15" fill="rgb(250,191,14)"/><text x="24.2915%" y="271.50"></text></g><g><title>check_match (350,135 samples, 0.29%)</title><rect x="24.0605%" y="245" width="0.2946%" height="15" fill="rgb(239,60,40)"/><text x="24.3105%" y="255.50"></text></g><g><title>check_private_in_public (139,421 samples, 0.12%)</title><rect x="24.3635%" y="261" width="0.1173%" height="15" fill="rgb(206,27,48)"/><text x="24.6135%" y="271.50"></text></g><g><title>death_checking (250,093 samples, 0.21%)</title><rect x="24.4809%" y="261" width="0.2104%" height="15" fill="rgb(225,35,8)"/><text x="24.7309%" y="271.50"></text></g><g><title>fn_abi_of_instance (213,762 samples, 0.18%)</title><rect x="25.4401%" y="197" width="0.1799%" height="15" fill="rgb(250,213,24)"/><text x="25.6901%" y="207.50"></text></g><g><title>eval_to_allocation_raw (751,568 samples, 0.63%)</title><rect x="25.2042%" y="229" width="0.6323%" height="15" fill="rgb(247,123,22)"/><text x="25.4542%" y="239.50"></text></g><g><title>eval_to_allocation_raw (748,618 samples, 0.63%)</title><rect x="25.2066%" y="213" width="0.6299%" height="15" fill="rgb(231,138,38)"/><text x="25.4566%" y="223.50"></text></g><g><title>param_env (181,621 samples, 0.15%)</title><rect x="25.8365%" y="229" width="0.1528%" height="15" fill="rgb(231,145,46)"/><text x="26.0865%" y="239.50"></text></g><g><title>crate_lints (2,659,360 samples, 2.24%)</title><rect x="24.6926%" y="245" width="2.2375%" height="15" fill="rgb(251,118,11)"/><text x="24.9426%" y="255.50">c..</text></g><g><title>type_of (1,111,472 samples, 0.94%)</title><rect x="25.9949%" y="229" width="0.9352%" height="15" fill="rgb(217,147,25)"/><text x="26.2449%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (864,331 samples, 0.73%)</title><rect x="26.2029%" y="213" width="0.7272%" height="15" fill="rgb(247,81,37)"/><text x="26.4529%" y="223.50"></text></g><g><title>lint_checking (2,955,763 samples, 2.49%)</title><rect x="24.6913%" y="261" width="2.4869%" height="15" fill="rgb(209,12,38)"/><text x="24.9413%" y="271.50">li..</text></g><g><title>module_lints (294,873 samples, 0.25%)</title><rect x="26.9301%" y="245" width="0.2481%" height="15" fill="rgb(227,1,9)"/><text x="27.1801%" y="255.50"></text></g><g><title>lint_mod (291,343 samples, 0.25%)</title><rect x="26.9330%" y="229" width="0.2451%" height="15" fill="rgb(248,47,43)"/><text x="27.1830%" y="239.50"></text></g><g><title>privacy_access_levels (173,712 samples, 0.15%)</title><rect x="27.1782%" y="261" width="0.1462%" height="15" fill="rgb(221,10,30)"/><text x="27.4282%" y="271.50"></text></g><g><title>privacy_checking_modules (842,590 samples, 0.71%)</title><rect x="27.3243%" y="261" width="0.7089%" height="15" fill="rgb(210,229,1)"/><text x="27.5743%" y="271.50"></text></g><g><title>check_mod_privacy (840,510 samples, 0.71%)</title><rect x="27.3261%" y="245" width="0.7072%" height="15" fill="rgb(222,148,37)"/><text x="27.5761%" y="255.50"></text></g><g><title>misc_checking_3 (4,383,349 samples, 3.69%)</title><rect x="24.3551%" y="277" width="3.6880%" height="15" fill="rgb(234,67,33)"/><text x="24.6051%" y="287.50">misc..</text></g><g><title>impl_parent (1,055,492 samples, 0.89%)</title><rect x="29.5613%" y="213" width="0.8881%" height="15" fill="rgb(247,98,35)"/><text x="29.8113%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (675,139 samples, 0.57%)</title><rect x="29.8814%" y="197" width="0.5680%" height="15" fill="rgb(247,138,52)"/><text x="30.1314%" y="207.50"></text></g><g><title>impl_trait_ref (3,315,510 samples, 2.79%)</title><rect x="30.4506%" y="213" width="2.7896%" height="15" fill="rgb(213,79,30)"/><text x="30.7006%" y="223.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,930,228 samples, 2.47%)</title><rect x="30.7748%" y="197" width="2.4654%" height="15" fill="rgb(246,177,23)"/><text x="31.0248%" y="207.50">me..</text></g><g><title>trait_impls_of (303,044 samples, 0.25%)</title><rect x="33.2947%" y="213" width="0.2550%" height="15" fill="rgb(230,62,27)"/><text x="33.5447%" y="223.50"></text></g><g><title>coherent_trait (6,483,722 samples, 5.46%)</title><rect x="28.0989%" y="245" width="5.4552%" height="15" fill="rgb(216,154,8)"/><text x="28.3489%" y="255.50">coheren..</text></g><g><title>specialization_graph_of (6,471,702 samples, 5.45%)</title><rect x="28.1090%" y="229" width="5.4451%" height="15" fill="rgb(244,35,45)"/><text x="28.3590%" y="239.50">special..</text></g><g><title>coherence_checking (6,534,252 samples, 5.50%)</title><rect x="28.0878%" y="261" width="5.4977%" height="15" fill="rgb(251,115,12)"/><text x="28.3378%" y="271.50">coheren..</text></g><g><title>adt_def (139,042 samples, 0.12%)</title><rect x="45.7889%" y="181" width="0.1170%" height="15" fill="rgb(240,54,50)"/><text x="46.0389%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (138,442 samples, 0.12%)</title><rect x="45.7894%" y="165" width="0.1165%" height="15" fill="rgb(233,84,52)"/><text x="46.0394%" y="175.50"></text></g><g><title>adt_sized_constraint (129,191 samples, 0.11%)</title><rect x="45.9059%" y="181" width="0.1087%" height="15" fill="rgb(207,117,47)"/><text x="46.1559%" y="191.50"></text></g><g><title>adt_sized_constraint (285,463 samples, 0.24%)</title><rect x="45.7801%" y="197" width="0.2402%" height="15" fill="rgb(249,43,39)"/><text x="46.0301%" y="207.50"></text></g><g><title>adt_sized_constraint (386,993 samples, 0.33%)</title><rect x="45.7042%" y="213" width="0.3256%" height="15" fill="rgb(209,38,44)"/><text x="45.9542%" y="223.50"></text></g><g><title>associated_item (459,663 samples, 0.39%)</title><rect x="46.1968%" y="197" width="0.3867%" height="15" fill="rgb(236,212,23)"/><text x="46.4468%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (353,591 samples, 0.30%)</title><rect x="46.2860%" y="181" width="0.2975%" height="15" fill="rgb(242,79,21)"/><text x="46.5360%" y="191.50"></text></g><g><title>associated_items (687,496 samples, 0.58%)</title><rect x="46.0310%" y="213" width="0.5784%" height="15" fill="rgb(211,96,35)"/><text x="46.2810%" y="223.50"></text></g><g><title>adt_dtorck_constraint (182,692 samples, 0.15%)</title><rect x="46.9086%" y="165" width="0.1537%" height="15" fill="rgb(253,215,40)"/><text x="47.1586%" y="175.50"></text></g><g><title>adt_dtorck_constraint (211,732 samples, 0.18%)</title><rect x="46.8878%" y="181" width="0.1781%" height="15" fill="rgb(211,81,21)"/><text x="47.1378%" y="191.50"></text></g><g><title>dropck_outlives (521,005 samples, 0.44%)</title><rect x="46.6504%" y="213" width="0.4384%" height="15" fill="rgb(208,190,38)"/><text x="46.9004%" y="223.50"></text></g><g><title>adt_dtorck_constraint (294,132 samples, 0.25%)</title><rect x="46.8412%" y="197" width="0.2475%" height="15" fill="rgb(235,213,38)"/><text x="47.0912%" y="207.50"></text></g><g><title>adt_def (118,872 samples, 0.10%)</title><rect x="47.7801%" y="181" width="0.1000%" height="15" fill="rgb(237,122,38)"/><text x="48.0301%" y="191.50"></text></g><g><title>adt_sized_constraint (183,552 samples, 0.15%)</title><rect x="47.7664%" y="197" width="0.1544%" height="15" fill="rgb(244,218,35)"/><text x="48.0164%" y="207.50"></text></g><g><title>trait_impls_of (361,803 samples, 0.30%)</title><rect x="48.1265%" y="197" width="0.3044%" height="15" fill="rgb(240,68,47)"/><text x="48.3765%" y="207.50"></text></g><g><title>evaluate_obligation (1,594,197 samples, 1.34%)</title><rect x="47.0902%" y="213" width="1.3413%" height="15" fill="rgb(210,16,53)"/><text x="47.3402%" y="223.50"></text></g><g><title>item_attrs (129,470 samples, 0.11%)</title><rect x="48.7425%" y="213" width="0.1089%" height="15" fill="rgb(235,124,12)"/><text x="48.9925%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (123,980 samples, 0.10%)</title><rect x="48.7472%" y="197" width="0.1043%" height="15" fill="rgb(224,169,11)"/><text x="48.9972%" y="207.50"></text></g><g><title>evaluate_obligation (244,428 samples, 0.21%)</title><rect x="49.0820%" y="197" width="0.2057%" height="15" fill="rgb(250,166,2)"/><text x="49.3320%" y="207.50"></text></g><g><title>method_autoderef_steps (476,600 samples, 0.40%)</title><rect x="48.9046%" y="213" width="0.4010%" height="15" fill="rgb(242,216,29)"/><text x="49.1546%" y="223.50"></text></g><g><title>predicates_of (293,474 samples, 0.25%)</title><rect x="49.3782%" y="213" width="0.2469%" height="15" fill="rgb(230,116,27)"/><text x="49.6282%" y="223.50"></text></g><g><title>predicates_defined_on (199,723 samples, 0.17%)</title><rect x="49.4571%" y="197" width="0.1680%" height="15" fill="rgb(228,99,48)"/><text x="49.7071%" y="207.50"></text></g><g><title>associated_item (137,932 samples, 0.12%)</title><rect x="55.1731%" y="181" width="0.1161%" height="15" fill="rgb(253,11,6)"/><text x="55.4231%" y="191.50"></text></g><g><title>associated_items (210,302 samples, 0.18%)</title><rect x="55.1259%" y="197" width="0.1769%" height="15" fill="rgb(247,143,39)"/><text x="55.3759%" y="207.50"></text></g><g><title>dropck_outlives (225,293 samples, 0.19%)</title><rect x="55.3230%" y="197" width="0.1896%" height="15" fill="rgb(236,97,10)"/><text x="55.5730%" y="207.50"></text></g><g><title>generics_of (167,332 samples, 0.14%)</title><rect x="56.4405%" y="181" width="0.1408%" height="15" fill="rgb(233,208,19)"/><text x="56.6905%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (138,172 samples, 0.12%)</title><rect x="56.4651%" y="165" width="0.1163%" height="15" fill="rgb(216,164,2)"/><text x="56.7151%" y="175.50"></text></g><g><title>impl_trait_ref (192,614 samples, 0.16%)</title><rect x="56.5986%" y="181" width="0.1621%" height="15" fill="rgb(220,129,5)"/><text x="56.8486%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (163,142 samples, 0.14%)</title><rect x="56.6234%" y="165" width="0.1373%" height="15" fill="rgb(242,17,10)"/><text x="56.8734%" y="175.50"></text></g><g><title>predicates_of (155,871 samples, 0.13%)</title><rect x="56.7730%" y="181" width="0.1311%" height="15" fill="rgb(242,107,0)"/><text x="57.0230%" y="191.50"></text></g><g><title>specializes (234,941 samples, 0.20%)</title><rect x="56.9042%" y="181" width="0.1977%" height="15" fill="rgb(251,28,31)"/><text x="57.1542%" y="191.50"></text></g><g><title>param_env (141,260 samples, 0.12%)</title><rect x="56.9830%" y="165" width="0.1189%" height="15" fill="rgb(233,223,10)"/><text x="57.2330%" y="175.50"></text></g><g><title>evaluate_obligation (2,011,502 samples, 1.69%)</title><rect x="55.5126%" y="197" width="1.6924%" height="15" fill="rgb(215,21,27)"/><text x="55.7626%" y="207.50"></text></g><g><title>evaluate_obligation (181,292 samples, 0.15%)</title><rect x="57.6860%" y="181" width="0.1525%" height="15" fill="rgb(232,23,21)"/><text x="57.9360%" y="191.50"></text></g><g><title>method_autoderef_steps (315,473 samples, 0.27%)</title><rect x="57.5929%" y="197" width="0.2654%" height="15" fill="rgb(244,5,23)"/><text x="57.8429%" y="207.50"></text></g><g><title>predicates_of (188,465 samples, 0.16%)</title><rect x="57.8733%" y="197" width="0.1586%" height="15" fill="rgb(226,81,46)"/><text x="58.1233%" y="207.50"></text></g><g><title>predicates_defined_on (140,555 samples, 0.12%)</title><rect x="57.9136%" y="181" width="0.1183%" height="15" fill="rgb(247,70,30)"/><text x="58.1636%" y="191.50"></text></g><g><title>typeck (10,015,284 samples, 8.43%)</title><rect x="49.7094%" y="213" width="8.4266%" height="15" fill="rgb(212,68,19)"/><text x="49.9594%" y="223.50">typeck</text></g><g><title>item_bodies_checking (29,210,187 samples, 24.58%)</title><rect x="33.6026%" y="261" width="24.5767%" height="15" fill="rgb(240,187,13)"/><text x="33.8526%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,207,077 samples, 24.57%)</title><rect x="33.6053%" y="245" width="24.5741%" height="15" fill="rgb(223,113,26)"/><text x="33.8553%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (29,149,186 samples, 24.53%)</title><rect x="33.6540%" y="229" width="24.5254%" height="15" fill="rgb(206,192,2)"/><text x="33.9040%" y="239.50">typeck</text></g><g><title>layout_of (123,461 samples, 0.10%)</title><rect x="58.6574%" y="117" width="0.1039%" height="15" fill="rgb(241,108,4)"/><text x="58.9074%" y="127.50"></text></g><g><title>layout_of (152,922 samples, 0.13%)</title><rect x="58.6460%" y="133" width="0.1287%" height="15" fill="rgb(247,173,49)"/><text x="58.8960%" y="143.50"></text></g><g><title>layout_of (170,543 samples, 0.14%)</title><rect x="58.6348%" y="149" width="0.1435%" height="15" fill="rgb(224,114,35)"/><text x="58.8848%" y="159.50"></text></g><g><title>layout_of (218,423 samples, 0.18%)</title><rect x="58.5989%" y="165" width="0.1838%" height="15" fill="rgb(245,159,27)"/><text x="58.8489%" y="175.50"></text></g><g><title>layout_of (255,783 samples, 0.22%)</title><rect x="58.5741%" y="181" width="0.2152%" height="15" fill="rgb(245,172,44)"/><text x="58.8241%" y="191.50"></text></g><g><title>layout_of (288,493 samples, 0.24%)</title><rect x="58.5551%" y="197" width="0.2427%" height="15" fill="rgb(236,23,11)"/><text x="58.8051%" y="207.50"></text></g><g><title>layout_of (310,203 samples, 0.26%)</title><rect x="58.5457%" y="213" width="0.2610%" height="15" fill="rgb(205,117,38)"/><text x="58.7957%" y="223.50"></text></g><g><title>layout_of (338,593 samples, 0.28%)</title><rect x="58.5248%" y="229" width="0.2849%" height="15" fill="rgb(237,72,25)"/><text x="58.7748%" y="239.50"></text></g><g><title>associated_items (122,341 samples, 0.10%)</title><rect x="59.5612%" y="213" width="0.1029%" height="15" fill="rgb(244,70,9)"/><text x="59.8112%" y="223.50"></text></g><g><title>adt_def (184,252 samples, 0.16%)</title><rect x="59.8502%" y="133" width="0.1550%" height="15" fill="rgb(217,125,39)"/><text x="60.1002%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (183,572 samples, 0.15%)</title><rect x="59.8508%" y="117" width="0.1545%" height="15" fill="rgb(235,36,10)"/><text x="60.1008%" y="127.50"></text></g><g><title>impl_trait_ref (154,431 samples, 0.13%)</title><rect x="60.1368%" y="53" width="0.1299%" height="15" fill="rgb(251,123,47)"/><text x="60.3868%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (134,371 samples, 0.11%)</title><rect x="60.1537%" y="37" width="0.1131%" height="15" fill="rgb(221,13,13)"/><text x="60.4037%" y="47.50"></text></g><g><title>coherent_trait (323,243 samples, 0.27%)</title><rect x="60.0150%" y="85" width="0.2720%" height="15" fill="rgb(238,131,9)"/><text x="60.2650%" y="95.50"></text></g><g><title>specialization_graph_of (320,913 samples, 0.27%)</title><rect x="60.0170%" y="69" width="0.2700%" height="15" fill="rgb(211,50,8)"/><text x="60.2670%" y="79.50"></text></g><g><title>adt_destructor (327,953 samples, 0.28%)</title><rect x="60.0117%" y="117" width="0.2759%" height="15" fill="rgb(245,182,24)"/><text x="60.2617%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (327,243 samples, 0.28%)</title><rect x="60.0123%" y="101" width="0.2753%" height="15" fill="rgb(242,14,37)"/><text x="60.2623%" y="111.50"></text></g><g><title>adt_dtorck_constraint (334,563 samples, 0.28%)</title><rect x="60.0070%" y="133" width="0.2815%" height="15" fill="rgb(246,228,12)"/><text x="60.2570%" y="143.50"></text></g><g><title>adt_dtorck_constraint (535,615 samples, 0.45%)</title><rect x="59.8429%" y="149" width="0.4507%" height="15" fill="rgb(213,55,15)"/><text x="60.0929%" y="159.50"></text></g><g><title>adt_dtorck_constraint (612,346 samples, 0.52%)</title><rect x="59.7943%" y="165" width="0.5152%" height="15" fill="rgb(209,9,3)"/><text x="60.0443%" y="175.50"></text></g><g><title>adt_dtorck_constraint (670,667 samples, 0.56%)</title><rect x="59.7564%" y="181" width="0.5643%" height="15" fill="rgb(230,59,30)"/><text x="60.0064%" y="191.50"></text></g><g><title>dropck_outlives (790,819 samples, 0.67%)</title><rect x="59.6680%" y="213" width="0.6654%" height="15" fill="rgb(209,121,21)"/><text x="59.9180%" y="223.50"></text></g><g><title>adt_dtorck_constraint (757,279 samples, 0.64%)</title><rect x="59.6962%" y="197" width="0.6372%" height="15" fill="rgb(220,109,13)"/><text x="59.9462%" y="207.50"></text></g><g><title>trait_impls_of (122,221 samples, 0.10%)</title><rect x="60.7798%" y="197" width="0.1028%" height="15" fill="rgb(232,18,1)"/><text x="61.0298%" y="207.50"></text></g><g><title>evaluate_obligation (653,727 samples, 0.55%)</title><rect x="60.3334%" y="213" width="0.5500%" height="15" fill="rgb(215,41,42)"/><text x="60.5834%" y="223.50"></text></g><g><title>is_copy_raw (238,082 samples, 0.20%)</title><rect x="60.9380%" y="213" width="0.2003%" height="15" fill="rgb(224,123,36)"/><text x="61.1880%" y="223.50"></text></g><g><title>evaluate_obligation (226,002 samples, 0.19%)</title><rect x="60.9482%" y="197" width="0.1902%" height="15" fill="rgb(240,125,3)"/><text x="61.1982%" y="207.50"></text></g><g><title>trait_impls_of (147,292 samples, 0.12%)</title><rect x="61.0144%" y="181" width="0.1239%" height="15" fill="rgb(205,98,50)"/><text x="61.2644%" y="191.50"></text></g><g><title>item_types_checking (3,701,061 samples, 3.11%)</title><rect x="58.1793%" y="261" width="3.1140%" height="15" fill="rgb(205,185,37)"/><text x="58.4293%" y="271.50">ite..</text></g><g><title>check_mod_item_types (3,697,821 samples, 3.11%)</title><rect x="58.1820%" y="245" width="3.1112%" height="15" fill="rgb(238,207,15)"/><text x="58.4320%" y="255.50">che..</text></g><g><title>typeck (2,949,053 samples, 2.48%)</title><rect x="58.8120%" y="229" width="2.4813%" height="15" fill="rgb(213,199,42)"/><text x="59.0620%" y="239.50">ty..</text></g><g><title>fn_sig (369,845 samples, 0.31%)</title><rect x="61.4491%" y="229" width="0.3112%" height="15" fill="rgb(235,201,11)"/><text x="61.6991%" y="239.50"></text></g><g><title>generics_of (203,472 samples, 0.17%)</title><rect x="61.7603%" y="229" width="0.1712%" height="15" fill="rgb(207,46,11)"/><text x="62.0103%" y="239.50"></text></g><g><title>late_bound_vars_map (223,843 samples, 0.19%)</title><rect x="62.1105%" y="181" width="0.1883%" height="15" fill="rgb(241,35,35)"/><text x="62.3605%" y="191.50"></text></g><g><title>resolve_lifetimes (217,013 samples, 0.18%)</title><rect x="62.1162%" y="165" width="0.1826%" height="15" fill="rgb(243,32,47)"/><text x="62.3662%" y="175.50"></text></g><g><title>explicit_predicates_of (365,605 samples, 0.31%)</title><rect x="62.0057%" y="197" width="0.3076%" height="15" fill="rgb(247,202,23)"/><text x="62.2557%" y="207.50"></text></g><g><title>predicates_of (539,537 samples, 0.45%)</title><rect x="61.9425%" y="229" width="0.4540%" height="15" fill="rgb(219,102,11)"/><text x="62.1925%" y="239.50"></text></g><g><title>predicates_defined_on (510,707 samples, 0.43%)</title><rect x="61.9668%" y="213" width="0.4297%" height="15" fill="rgb(243,110,44)"/><text x="62.2168%" y="223.50"></text></g><g><title>type_collecting (1,708,798 samples, 1.44%)</title><rect x="61.2944%" y="261" width="1.4377%" height="15" fill="rgb(222,74,54)"/><text x="61.5444%" y="271.50"></text></g><g><title>collect_mod_item_types (1,697,558 samples, 1.43%)</title><rect x="61.3039%" y="245" width="1.4283%" height="15" fill="rgb(216,99,12)"/><text x="61.5539%" y="255.50"></text></g><g><title>type_of (396,343 samples, 0.33%)</title><rect x="62.3987%" y="229" width="0.3335%" height="15" fill="rgb(226,22,26)"/><text x="62.6487%" y="239.50"></text></g><g><title>param_env (124,421 samples, 0.10%)</title><rect x="63.8995%" y="229" width="0.1047%" height="15" fill="rgb(217,163,10)"/><text x="64.1495%" y="239.50"></text></g><g><title>check_impl_item_well_formed (1,491,905 samples, 1.26%)</title><rect x="62.8472%" y="245" width="1.2552%" height="15" fill="rgb(213,25,53)"/><text x="63.0972%" y="255.50"></text></g><g><title>adt_sized_constraint (221,902 samples, 0.19%)</title><rect x="65.3261%" y="213" width="0.1867%" height="15" fill="rgb(252,105,26)"/><text x="65.5761%" y="223.50"></text></g><g><title>evaluate_obligation (677,947 samples, 0.57%)</title><rect x="65.0395%" y="229" width="0.5704%" height="15" fill="rgb(220,39,43)"/><text x="65.2895%" y="239.50"></text></g><g><title>param_env (189,681 samples, 0.16%)</title><rect x="65.6678%" y="229" width="0.1596%" height="15" fill="rgb(229,68,48)"/><text x="65.9178%" y="239.50"></text></g><g><title>check_item_well_formed (2,219,664 samples, 1.87%)</title><rect x="64.1025%" y="245" width="1.8676%" height="15" fill="rgb(252,8,32)"/><text x="64.3525%" y="255.50">c..</text></g><g><title>evaluate_obligation (140,722 samples, 0.12%)</title><rect x="66.7203%" y="229" width="0.1184%" height="15" fill="rgb(223,20,43)"/><text x="66.9703%" y="239.50"></text></g><g><title>implied_outlives_bounds (122,271 samples, 0.10%)</title><rect x="66.8387%" y="229" width="0.1029%" height="15" fill="rgb(229,81,49)"/><text x="67.0887%" y="239.50"></text></g><g><title>evaluate_obligation (131,260 samples, 0.11%)</title><rect x="67.1438%" y="213" width="0.1104%" height="15" fill="rgb(236,28,36)"/><text x="67.3938%" y="223.50"></text></g><g><title>object_safety_violations (582,657 samples, 0.49%)</title><rect x="66.9416%" y="229" width="0.4902%" height="15" fill="rgb(249,185,26)"/><text x="67.1916%" y="239.50"></text></g><g><title>analysis (79,738,511 samples, 67.09%)</title><rect x="0.4918%" y="293" width="67.0899%" height="15" fill="rgb(249,174,33)"/><text x="0.7418%" y="303.50">analysis</text></g><g><title>type_check_crate (46,992,924 samples, 39.54%)</title><rect x="28.0431%" y="277" width="39.5386%" height="15" fill="rgb(233,201,37)"/><text x="28.2931%" y="287.50">type_check_crate</text></g><g><title>wf_checking (5,760,355 samples, 4.85%)</title><rect x="62.7351%" y="261" width="4.8466%" height="15" fill="rgb(221,78,26)"/><text x="62.9851%" y="271.50">wf_che..</text></g><g><title>check_trait_item_well_formed (1,915,541 samples, 1.61%)</title><rect x="65.9700%" y="245" width="1.6117%" height="15" fill="rgb(250,127,30)"/><text x="66.2200%" y="255.50"></text></g><g><title>codegen_crate (434,265 samples, 0.37%)</title><rect x="67.5903%" y="293" width="0.3654%" height="15" fill="rgb(230,49,44)"/><text x="67.8403%" y="303.50"></text></g><g><title>AST_validation (316,063 samples, 0.27%)</title><rect x="68.1226%" y="277" width="0.2659%" height="15" fill="rgb(229,67,23)"/><text x="68.3726%" y="287.50"></text></g><g><title>metadata_load_macro (406,855 samples, 0.34%)</title><rect x="83.7460%" y="245" width="0.3423%" height="15" fill="rgb(249,83,47)"/><text x="83.9960%" y="255.50"></text></g><g><title>metadata_register_crate (2,346,135 samples, 1.97%)</title><rect x="84.0883%" y="245" width="1.9740%" height="15" fill="rgb(215,43,3)"/><text x="84.3383%" y="255.50">m..</text></g><g><title>metadata_register_crate (864,989 samples, 0.73%)</title><rect x="85.3345%" y="229" width="0.7278%" height="15" fill="rgb(238,154,13)"/><text x="85.5845%" y="239.50"></text></g><g><title>macro_expand_crate (21,044,904 samples, 17.71%)</title><rect x="68.5228%" y="277" width="17.7066%" height="15" fill="rgb(219,56,2)"/><text x="68.7728%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (21,029,704 samples, 17.69%)</title><rect x="68.5356%" y="261" width="17.6938%" height="15" fill="rgb(233,0,4)"/><text x="68.7856%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (198,722 samples, 0.17%)</title><rect x="86.0623%" y="245" width="0.1672%" height="15" fill="rgb(235,30,7)"/><text x="86.3123%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (228,902 samples, 0.19%)</title><rect x="86.2348%" y="277" width="0.1926%" height="15" fill="rgb(250,79,13)"/><text x="86.4848%" y="287.50"></text></g><g><title>finalize_macro_resolutions (129,761 samples, 0.11%)</title><rect x="86.5117%" y="261" width="0.1092%" height="15" fill="rgb(211,146,34)"/><text x="86.7617%" y="271.50"></text></g><g><title>late_resolve_crate (3,770,362 samples, 3.17%)</title><rect x="86.6209%" y="261" width="3.1723%" height="15" fill="rgb(228,22,38)"/><text x="86.8709%" y="271.50">lat..</text></g><g><title>configure_and_expand (26,104,522 samples, 21.96%)</title><rect x="67.9557%" y="293" width="21.9637%" height="15" fill="rgb(235,168,5)"/><text x="68.2057%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (4,150,317 samples, 3.49%)</title><rect x="86.4274%" y="277" width="3.4920%" height="15" fill="rgb(221,155,16)"/><text x="86.6774%" y="287.50">res..</text></g><g><title>drop_ast (140,641 samples, 0.12%)</title><rect x="89.9193%" y="293" width="0.1183%" height="15" fill="rgb(215,215,53)"/><text x="90.1693%" y="303.50"></text></g><g><title>early_lint_checks (263,353 samples, 0.22%)</title><rect x="90.0521%" y="293" width="0.2216%" height="15" fill="rgb(223,4,10)"/><text x="90.3021%" y="303.50"></text></g><g><title>free_global_ctxt (3,666,621 samples, 3.08%)</title><rect x="90.2737%" y="293" width="3.0850%" height="15" fill="rgb(234,103,6)"/><text x="90.5237%" y="303.50">fre..</text></g><g><title>generate_crate_metadata (895,370 samples, 0.75%)</title><rect x="93.3587%" y="293" width="0.7533%" height="15" fill="rgb(227,97,0)"/><text x="93.6087%" y="303.50"></text></g><g><title>hir_lowering (3,298,947 samples, 2.78%)</title><rect x="94.1121%" y="293" width="2.7756%" height="15" fill="rgb(234,150,53)"/><text x="94.3621%" y="303.50">hi..</text></g><g><title>parse_crate (2,130,684 samples, 1.79%)</title><rect x="96.9374%" y="293" width="1.7927%" height="15" fill="rgb(228,201,54)"/><text x="97.1874%" y="303.50">p..</text></g><g><title>prepare_outputs (259,813 samples, 0.22%)</title><rect x="98.7370%" y="293" width="0.2186%" height="15" fill="rgb(222,22,37)"/><text x="98.9870%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (793,179 samples, 0.67%)</title><rect x="98.9556%" y="293" width="0.6674%" height="15" fill="rgb(237,53,32)"/><text x="99.2056%" y="303.50"></text></g><g><title>all (118,853,268 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (118,853,268 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (342,024 samples, 0.29%)</title><rect x="99.7122%" y="293" width="0.2878%" height="15" fill="rgb(241,220,44)"/><text x="99.9622%" y="303.50"></text></g></svg></svg>