<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (1,274,712 samples, 0.11%)</title><rect x="14.4281%" y="101" width="0.1143%" height="15" fill="rgb(227,0,7)"/><text x="14.6781%" y="111.50"></text></g><g><title>is_copy_raw (2,142,005 samples, 0.19%)</title><rect x="17.7142%" y="69" width="0.1921%" height="15" fill="rgb(217,0,24)"/><text x="17.9642%" y="79.50"></text></g><g><title>evaluate_obligation (1,668,401 samples, 0.15%)</title><rect x="17.7567%" y="53" width="0.1496%" height="15" fill="rgb(221,193,54)"/><text x="18.0067%" y="63.50"></text></g><g><title>needs_drop_raw (3,771,871 samples, 0.34%)</title><rect x="17.5742%" y="85" width="0.3383%" height="15" fill="rgb(248,212,6)"/><text x="17.8242%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,709,376 samples, 0.33%)</title><rect x="18.0086%" y="69" width="0.3327%" height="15" fill="rgb(208,68,35)"/><text x="18.2586%" y="79.50"></text></g><g><title>specialization_graph_of (1,941,163 samples, 0.17%)</title><rect x="18.3687%" y="69" width="0.1741%" height="15" fill="rgb(232,128,0)"/><text x="18.6187%" y="79.50"></text></g><g><title>resolve_instance (7,360,622 samples, 0.66%)</title><rect x="17.9125%" y="85" width="0.6602%" height="15" fill="rgb(207,160,47)"/><text x="18.1625%" y="95.50"></text></g><g><title>thir_body (14,279,691 samples, 1.28%)</title><rect x="18.5879%" y="85" width="1.2807%" height="15" fill="rgb(228,23,34)"/><text x="18.8379%" y="95.50"></text></g><g><title>mir_const (71,206,833 samples, 6.39%)</title><rect x="13.4921%" y="133" width="6.3864%" height="15" fill="rgb(218,30,26)"/><text x="13.7421%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (64,557,183 samples, 5.79%)</title><rect x="14.0885%" y="117" width="5.7900%" height="15" fill="rgb(220,122,19)"/><text x="14.3385%" y="127.50">unsafet..</text></g><g><title>mir_built (59,490,845 samples, 5.34%)</title><rect x="14.5429%" y="101" width="5.3356%" height="15" fill="rgb(250,228,42)"/><text x="14.7929%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (78,153,806 samples, 7.01%)</title><rect x="12.9475%" y="149" width="7.0095%" height="15" fill="rgb(240,193,28)"/><text x="13.1975%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (1,364,234 samples, 0.12%)</title><rect x="19.9574%" y="149" width="0.1224%" height="15" fill="rgb(216,20,37)"/><text x="20.2074%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,027,274 samples, 0.27%)</title><rect x="20.0797%" y="149" width="0.2715%" height="15" fill="rgb(206,188,39)"/><text x="20.3297%" y="159.50"></text></g><g><title>normalize_projection_ty (2,042,412 samples, 0.18%)</title><rect x="20.1681%" y="133" width="0.1832%" height="15" fill="rgb(217,207,13)"/><text x="20.4181%" y="143.50"></text></g><g><title>type_op_normalize_predicate (2,860,135 samples, 0.26%)</title><rect x="20.3512%" y="149" width="0.2565%" height="15" fill="rgb(231,73,38)"/><text x="20.6012%" y="159.50"></text></g><g><title>normalize_projection_ty (1,262,065 samples, 0.11%)</title><rect x="20.4946%" y="133" width="0.1132%" height="15" fill="rgb(225,20,46)"/><text x="20.7446%" y="143.50"></text></g><g><title>type_op_prove_predicate (12,121,231 samples, 1.09%)</title><rect x="20.6078%" y="149" width="1.0871%" height="15" fill="rgb(210,31,41)"/><text x="20.8578%" y="159.50"></text></g><g><title>MIR_borrow_checking (235,757,124 samples, 21.14%)</title><rect x="0.5512%" y="181" width="21.1447%" height="15" fill="rgb(221,200,47)"/><text x="0.8012%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (235,114,327 samples, 21.09%)</title><rect x="0.6089%" y="165" width="21.0870%" height="15" fill="rgb(226,26,5)"/><text x="0.8589%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (1,259,593 samples, 0.11%)</title><rect x="21.7290%" y="181" width="0.1130%" height="15" fill="rgb(249,33,26)"/><text x="21.9790%" y="191.50"></text></g><g><title>check_mod_attrs (2,587,019 samples, 0.23%)</title><rect x="21.8459%" y="165" width="0.2320%" height="15" fill="rgb(235,183,28)"/><text x="22.0959%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,497,189 samples, 0.13%)</title><rect x="22.1810%" y="165" width="0.1343%" height="15" fill="rgb(221,5,38)"/><text x="22.4310%" y="175.50"></text></g><g><title>misc_checking_1 (5,571,711 samples, 0.50%)</title><rect x="21.8420%" y="181" width="0.4997%" height="15" fill="rgb(247,18,42)"/><text x="22.0920%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (5,056,655 samples, 0.45%)</title><rect x="22.3420%" y="165" width="0.4535%" height="15" fill="rgb(241,131,45)"/><text x="22.5920%" y="175.50"></text></g><g><title>check_mod_liveness (4,154,215 samples, 0.37%)</title><rect x="22.4229%" y="149" width="0.3726%" height="15" fill="rgb(249,31,29)"/><text x="22.6729%" y="159.50"></text></g><g><title>misc_checking_2 (9,938,470 samples, 0.89%)</title><rect x="22.3417%" y="181" width="0.8914%" height="15" fill="rgb(225,111,53)"/><text x="22.5917%" y="191.50"></text></g><g><title>match_checking (4,879,125 samples, 0.44%)</title><rect x="22.7955%" y="165" width="0.4376%" height="15" fill="rgb(238,160,17)"/><text x="23.0455%" y="175.50"></text></g><g><title>check_match (4,750,465 samples, 0.43%)</title><rect x="22.8070%" y="149" width="0.4261%" height="15" fill="rgb(214,148,48)"/><text x="23.0570%" y="159.50"></text></g><g><title>check_private_in_public (1,481,686 samples, 0.13%)</title><rect x="23.2345%" y="165" width="0.1329%" height="15" fill="rgb(232,36,49)"/><text x="23.4845%" y="175.50"></text></g><g><title>death_checking (3,011,773 samples, 0.27%)</title><rect x="23.3674%" y="165" width="0.2701%" height="15" fill="rgb(209,103,24)"/><text x="23.6174%" y="175.50"></text></g><g><title>param_env (3,592,682 samples, 0.32%)</title><rect x="24.1388%" y="133" width="0.3222%" height="15" fill="rgb(229,88,8)"/><text x="24.3888%" y="143.50"></text></g><g><title>predicates_of (1,738,937 samples, 0.16%)</title><rect x="24.3051%" y="117" width="0.1560%" height="15" fill="rgb(213,181,19)"/><text x="24.5551%" y="127.50"></text></g><g><title>predicates_defined_on (1,458,575 samples, 0.13%)</title><rect x="24.3302%" y="101" width="0.1308%" height="15" fill="rgb(254,191,54)"/><text x="24.5802%" y="111.50"></text></g><g><title>crate_lints (9,517,475 samples, 0.85%)</title><rect x="23.6378%" y="149" width="0.8536%" height="15" fill="rgb(241,83,37)"/><text x="23.8878%" y="159.50"></text></g><g><title>layout_of (1,310,323 samples, 0.12%)</title><rect x="25.0921%" y="37" width="0.1175%" height="15" fill="rgb(233,36,39)"/><text x="25.3421%" y="47.50"></text></g><g><title>layout_of (1,669,306 samples, 0.15%)</title><rect x="25.0739%" y="53" width="0.1497%" height="15" fill="rgb(226,3,54)"/><text x="25.3239%" y="63.50"></text></g><g><title>lint_checking (17,851,747 samples, 1.60%)</title><rect x="23.6375%" y="165" width="1.6011%" height="15" fill="rgb(245,192,40)"/><text x="23.8875%" y="175.50"></text></g><g><title>module_lints (8,331,172 samples, 0.75%)</title><rect x="24.4914%" y="149" width="0.7472%" height="15" fill="rgb(238,167,29)"/><text x="24.7414%" y="159.50"></text></g><g><title>lint_mod (8,312,852 samples, 0.75%)</title><rect x="24.4930%" y="133" width="0.7456%" height="15" fill="rgb(232,182,51)"/><text x="24.7430%" y="143.50"></text></g><g><title>layout_of (2,105,683 samples, 0.19%)</title><rect x="25.0497%" y="117" width="0.1889%" height="15" fill="rgb(231,60,39)"/><text x="25.2997%" y="127.50"></text></g><g><title>layout_of (2,061,323 samples, 0.18%)</title><rect x="25.0537%" y="101" width="0.1849%" height="15" fill="rgb(208,69,12)"/><text x="25.3037%" y="111.50"></text></g><g><title>layout_of (2,038,552 samples, 0.18%)</title><rect x="25.0557%" y="85" width="0.1828%" height="15" fill="rgb(235,93,37)"/><text x="25.3057%" y="95.50"></text></g><g><title>layout_of (1,980,632 samples, 0.18%)</title><rect x="25.0609%" y="69" width="0.1776%" height="15" fill="rgb(213,116,39)"/><text x="25.3109%" y="79.50"></text></g><g><title>privacy_access_levels (1,282,265 samples, 0.12%)</title><rect x="25.2386%" y="165" width="0.1150%" height="15" fill="rgb(222,207,29)"/><text x="25.4886%" y="175.50"></text></g><g><title>privacy_checking_modules (8,221,351 samples, 0.74%)</title><rect x="25.3536%" y="165" width="0.7374%" height="15" fill="rgb(206,96,30)"/><text x="25.6036%" y="175.50"></text></g><g><title>check_mod_privacy (8,210,151 samples, 0.74%)</title><rect x="25.3546%" y="149" width="0.7364%" height="15" fill="rgb(218,138,4)"/><text x="25.6046%" y="159.50"></text></g><g><title>misc_checking_3 (31,920,033 samples, 2.86%)</title><rect x="23.2331%" y="181" width="2.8629%" height="15" fill="rgb(250,191,14)"/><text x="23.4831%" y="191.50">mi..</text></g><g><title>impl_parent (3,008,461 samples, 0.27%)</title><rect x="26.5940%" y="117" width="0.2698%" height="15" fill="rgb(239,60,40)"/><text x="26.8440%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,616,423 samples, 0.14%)</title><rect x="26.7189%" y="101" width="0.1450%" height="15" fill="rgb(206,27,48)"/><text x="26.9689%" y="111.50"></text></g><g><title>impl_trait_ref (5,957,813 samples, 0.53%)</title><rect x="26.8639%" y="117" width="0.5343%" height="15" fill="rgb(225,35,8)"/><text x="27.1139%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,812,307 samples, 0.43%)</title><rect x="26.9666%" y="101" width="0.4316%" height="15" fill="rgb(250,213,24)"/><text x="27.2166%" y="111.50"></text></g><g><title>coherent_trait (14,955,666 samples, 1.34%)</title><rect x="26.1448%" y="149" width="1.3414%" height="15" fill="rgb(247,123,22)"/><text x="26.3948%" y="159.50"></text></g><g><title>specialization_graph_of (14,542,602 samples, 1.30%)</title><rect x="26.1819%" y="133" width="1.3043%" height="15" fill="rgb(231,138,38)"/><text x="26.4319%" y="143.50"></text></g><g><title>coherence_checking (15,137,007 samples, 1.36%)</title><rect x="26.1428%" y="165" width="1.3576%" height="15" fill="rgb(231,145,46)"/><text x="26.3928%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,574,117 samples, 0.14%)</title><rect x="37.3011%" y="69" width="0.1412%" height="15" fill="rgb(251,118,11)"/><text x="37.5511%" y="79.50"></text></g><g><title>adt_dtorck_constraint (2,258,637 samples, 0.20%)</title><rect x="37.2489%" y="85" width="0.2026%" height="15" fill="rgb(217,147,25)"/><text x="37.4989%" y="95.50"></text></g><g><title>dropck_outlives (3,646,112 samples, 0.33%)</title><rect x="37.1326%" y="117" width="0.3270%" height="15" fill="rgb(247,81,37)"/><text x="37.3826%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,913,964 samples, 0.26%)</title><rect x="37.1983%" y="101" width="0.2613%" height="15" fill="rgb(209,12,38)"/><text x="37.4483%" y="111.50"></text></g><g><title>evaluate_obligation (2,823,544 samples, 0.25%)</title><rect x="37.4597%" y="117" width="0.2532%" height="15" fill="rgb(227,1,9)"/><text x="37.7097%" y="127.50"></text></g><g><title>dropck_outlives (3,823,343 samples, 0.34%)</title><rect x="51.1136%" y="101" width="0.3429%" height="15" fill="rgb(248,47,43)"/><text x="51.3636%" y="111.50"></text></g><g><title>evaluate_obligation (8,138,913 samples, 0.73%)</title><rect x="51.4565%" y="101" width="0.7300%" height="15" fill="rgb(221,10,30)"/><text x="51.7065%" y="111.50"></text></g><g><title>method_autoderef_steps (1,644,848 samples, 0.15%)</title><rect x="52.4208%" y="101" width="0.1475%" height="15" fill="rgb(210,229,1)"/><text x="52.6708%" y="111.50"></text></g><g><title>predicates_of (1,247,685 samples, 0.11%)</title><rect x="52.5738%" y="101" width="0.1119%" height="15" fill="rgb(222,148,37)"/><text x="52.8238%" y="111.50"></text></g><g><title>typeck (165,275,225 samples, 14.82%)</title><rect x="37.9363%" y="117" width="14.8233%" height="15" fill="rgb(234,67,33)"/><text x="38.1863%" y="127.50">typeck</text></g><g><title>item_bodies_checking (281,647,581 samples, 25.26%)</title><rect x="27.5069%" y="165" width="25.2605%" height="15" fill="rgb(247,98,35)"/><text x="27.7569%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (281,643,611 samples, 25.26%)</title><rect x="27.5073%" y="149" width="25.2602%" height="15" fill="rgb(247,138,52)"/><text x="27.7573%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (281,411,839 samples, 25.24%)</title><rect x="27.5280%" y="133" width="25.2394%" height="15" fill="rgb(213,79,30)"/><text x="27.7780%" y="143.50">typeck</text></g><g><title>item_types_checking (3,176,975 samples, 0.28%)</title><rect x="52.7674%" y="165" width="0.2849%" height="15" fill="rgb(246,177,23)"/><text x="53.0174%" y="175.50"></text></g><g><title>check_mod_item_types (3,167,055 samples, 0.28%)</title><rect x="52.7683%" y="149" width="0.2840%" height="15" fill="rgb(230,62,27)"/><text x="53.0183%" y="159.50"></text></g><g><title>named_region_map (3,128,964 samples, 0.28%)</title><rect x="53.2223%" y="117" width="0.2806%" height="15" fill="rgb(216,154,8)"/><text x="53.4723%" y="127.50"></text></g><g><title>resolve_lifetimes (3,080,492 samples, 0.28%)</title><rect x="53.2267%" y="101" width="0.2763%" height="15" fill="rgb(244,35,45)"/><text x="53.4767%" y="111.50"></text></g><g><title>lint_levels (1,853,051 samples, 0.17%)</title><rect x="53.3368%" y="85" width="0.1662%" height="15" fill="rgb(251,115,12)"/><text x="53.5868%" y="95.50"></text></g><g><title>generics_of (3,437,067 samples, 0.31%)</title><rect x="53.1969%" y="133" width="0.3083%" height="15" fill="rgb(240,54,50)"/><text x="53.4469%" y="143.50"></text></g><g><title>type_collecting (6,352,241 samples, 0.57%)</title><rect x="53.0567%" y="165" width="0.5697%" height="15" fill="rgb(233,84,52)"/><text x="53.3067%" y="175.50"></text></g><g><title>collect_mod_item_types (6,333,381 samples, 0.57%)</title><rect x="53.0584%" y="149" width="0.5680%" height="15" fill="rgb(207,117,47)"/><text x="53.3084%" y="159.50"></text></g><g><title>adt_sized_constraint (1,220,805 samples, 0.11%)</title><rect x="53.8835%" y="117" width="0.1095%" height="15" fill="rgb(249,43,39)"/><text x="54.1335%" y="127.50"></text></g><g><title>evaluate_obligation (1,661,087 samples, 0.15%)</title><rect x="53.8473%" y="133" width="0.1490%" height="15" fill="rgb(209,38,44)"/><text x="54.0973%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,055,889 samples, 0.45%)</title><rect x="53.6968%" y="149" width="0.4535%" height="15" fill="rgb(236,212,23)"/><text x="53.9468%" y="159.50"></text></g><g><title>region_scope_tree (1,125,186 samples, 0.10%)</title><rect x="54.0493%" y="133" width="0.1009%" height="15" fill="rgb(242,79,21)"/><text x="54.2993%" y="143.50"></text></g><g><title>region_scope_tree (2,860,303 samples, 0.26%)</title><rect x="54.4868%" y="133" width="0.2565%" height="15" fill="rgb(211,96,35)"/><text x="54.7368%" y="143.50"></text></g><g><title>analysis (607,204,327 samples, 54.46%)</title><rect x="0.3034%" y="197" width="54.4592%" height="15" fill="rgb(253,215,40)"/><text x="0.5534%" y="207.50">analysis</text></g><g><title>type_check_crate (319,624,990 samples, 28.67%)</title><rect x="26.0959%" y="181" width="28.6667%" height="15" fill="rgb(211,81,21)"/><text x="26.3459%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,653,140 samples, 1.13%)</title><rect x="53.6278%" y="165" width="1.1348%" height="15" fill="rgb(208,190,38)"/><text x="53.8778%" y="175.50"></text></g><g><title>check_item_well_formed (6,827,708 samples, 0.61%)</title><rect x="54.1502%" y="149" width="0.6124%" height="15" fill="rgb(235,213,38)"/><text x="54.4002%" y="159.50"></text></g><g><title>AST_validation (1,561,088 samples, 0.14%)</title><rect x="54.8291%" y="181" width="0.1400%" height="15" fill="rgb(237,122,38)"/><text x="55.0791%" y="191.50"></text></g><g><title>complete_gated_feature_checking (1,217,373 samples, 0.11%)</title><rect x="54.9691%" y="181" width="0.1092%" height="15" fill="rgb(244,218,35)"/><text x="55.2191%" y="191.50"></text></g><g><title>metadata_load_macro (1,168,772 samples, 0.10%)</title><rect x="92.3104%" y="149" width="0.1048%" height="15" fill="rgb(240,68,47)"/><text x="92.5604%" y="159.50"></text></g><g><title>metadata_register_crate (4,921,474 samples, 0.44%)</title><rect x="92.4152%" y="149" width="0.4414%" height="15" fill="rgb(210,16,53)"/><text x="92.6652%" y="159.50"></text></g><g><title>metadata_register_crate (2,624,068 samples, 0.24%)</title><rect x="92.6212%" y="133" width="0.2353%" height="15" fill="rgb(235,124,12)"/><text x="92.8712%" y="143.50"></text></g><g><title>macro_expand_crate (422,698,299 samples, 37.91%)</title><rect x="55.0865%" y="181" width="37.9111%" height="15" fill="rgb(224,169,11)"/><text x="55.3365%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (422,679,299 samples, 37.91%)</title><rect x="55.0882%" y="165" width="37.9094%" height="15" fill="rgb(250,166,2)"/><text x="55.3382%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,572,847 samples, 0.14%)</title><rect x="92.8566%" y="149" width="0.1411%" height="15" fill="rgb(242,216,29)"/><text x="93.1066%" y="159.50"></text></g><g><title>maybe_create_a_macro_crate (1,742,969 samples, 0.16%)</title><rect x="92.9978%" y="181" width="0.1563%" height="15" fill="rgb(230,116,27)"/><text x="93.2478%" y="191.50"></text></g><g><title>finalize_macro_resolutions (6,335,840 samples, 0.57%)</title><rect x="93.2383%" y="165" width="0.5683%" height="15" fill="rgb(228,99,48)"/><text x="93.4883%" y="175.50"></text></g><g><title>late_resolve_crate (15,171,638 samples, 1.36%)</title><rect x="93.8065%" y="165" width="1.3607%" height="15" fill="rgb(253,11,6)"/><text x="94.0565%" y="175.50"></text></g><g><title>resolve_check_unused (1,438,866 samples, 0.13%)</title><rect x="95.1704%" y="165" width="0.1290%" height="15" fill="rgb(247,143,39)"/><text x="95.4204%" y="175.50"></text></g><g><title>resolve_postprocess (1,116,902 samples, 0.10%)</title><rect x="95.2995%" y="165" width="0.1002%" height="15" fill="rgb(236,97,10)"/><text x="95.5495%" y="175.50"></text></g><g><title>configure_and_expand (452,601,869 samples, 40.59%)</title><rect x="54.8067%" y="197" width="40.5931%" height="15" fill="rgb(233,208,19)"/><text x="55.0567%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (24,907,265 samples, 2.23%)</title><rect x="93.1659%" y="181" width="2.2339%" height="15" fill="rgb(216,164,2)"/><text x="93.4159%" y="191.50">r..</text></g><g><title>drop_ast (2,950,932 samples, 0.26%)</title><rect x="95.3998%" y="197" width="0.2647%" height="15" fill="rgb(220,129,5)"/><text x="95.6498%" y="207.50"></text></g><g><title>early_lint_checks (6,178,059 samples, 0.55%)</title><rect x="95.6666%" y="197" width="0.5541%" height="15" fill="rgb(242,17,10)"/><text x="95.9166%" y="207.50"></text></g><g><title>free_global_ctxt (9,056,490 samples, 0.81%)</title><rect x="96.2207%" y="197" width="0.8123%" height="15" fill="rgb(242,107,0)"/><text x="96.4707%" y="207.50"></text></g><g><title>hir_lowering (29,205,352 samples, 2.62%)</title><rect x="97.0752%" y="197" width="2.6194%" height="15" fill="rgb(251,28,31)"/><text x="97.3252%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (1,645,578 samples, 0.15%)</title><rect x="99.7940%" y="197" width="0.1476%" height="15" fill="rgb(233,223,10)"/><text x="100.0440%" y="207.50"></text></g><g><title>all (1,114,971,055 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,114,971,055 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>