<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>def_span (315,343 samples, 0.15%)</title><rect x="13.6559%" y="101" width="0.1469%" height="15" fill="rgb(227,0,7)"/><text x="13.9059%" y="111.50"></text></g><g><title>param_env (1,018,941 samples, 0.47%)</title><rect x="13.3314%" y="117" width="0.4746%" height="15" fill="rgb(217,0,24)"/><text x="13.5814%" y="127.50"></text></g><g><title>item_attrs (823,694 samples, 0.38%)</title><rect x="14.3850%" y="85" width="0.3836%" height="15" fill="rgb(221,193,54)"/><text x="14.6350%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (795,664 samples, 0.37%)</title><rect x="14.3980%" y="69" width="0.3706%" height="15" fill="rgb(248,212,6)"/><text x="14.6480%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,141,046 samples, 0.53%)</title><rect x="14.2632%" y="101" width="0.5314%" height="15" fill="rgb(208,68,35)"/><text x="14.5132%" y="111.50"></text></g><g><title>is_copy_raw (217,811 samples, 0.10%)</title><rect x="17.7167%" y="53" width="0.1014%" height="15" fill="rgb(232,128,0)"/><text x="17.9667%" y="63.50"></text></g><g><title>adt_drop_tys (522,243 samples, 0.24%)</title><rect x="17.6610%" y="69" width="0.2432%" height="15" fill="rgb(207,160,47)"/><text x="17.9110%" y="79.50"></text></g><g><title>needs_drop_raw (3,143,035 samples, 1.46%)</title><rect x="17.5165%" y="85" width="1.4638%" height="15" fill="rgb(228,23,34)"/><text x="17.7665%" y="95.50"></text></g><g><title>is_copy_raw (2,306,845 samples, 1.07%)</title><rect x="17.9060%" y="69" width="1.0744%" height="15" fill="rgb(218,30,26)"/><text x="18.1560%" y="79.50"></text></g><g><title>evaluate_obligation (1,949,673 samples, 0.91%)</title><rect x="18.0723%" y="53" width="0.9080%" height="15" fill="rgb(220,122,19)"/><text x="18.3223%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (563,047 samples, 0.26%)</title><rect x="19.1832%" y="69" width="0.2622%" height="15" fill="rgb(250,228,42)"/><text x="19.4332%" y="79.50"></text></g><g><title>impl_parent (575,356 samples, 0.27%)</title><rect x="19.9926%" y="53" width="0.2680%" height="15" fill="rgb(240,193,28)"/><text x="20.2426%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (353,324 samples, 0.16%)</title><rect x="20.0960%" y="37" width="0.1646%" height="15" fill="rgb(216,20,37)"/><text x="20.3460%" y="47.50"></text></g><g><title>specialization_graph_of (2,838,042 samples, 1.32%)</title><rect x="19.4868%" y="69" width="1.3218%" height="15" fill="rgb(206,188,39)"/><text x="19.7368%" y="79.50"></text></g><g><title>impl_trait_ref (1,176,676 samples, 0.55%)</title><rect x="20.2606%" y="53" width="0.5480%" height="15" fill="rgb(217,207,13)"/><text x="20.5106%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (952,002 samples, 0.44%)</title><rect x="20.3652%" y="37" width="0.4434%" height="15" fill="rgb(231,73,38)"/><text x="20.6152%" y="47.50"></text></g><g><title>resolve_instance (4,123,987 samples, 1.92%)</title><rect x="18.9804%" y="85" width="1.9207%" height="15" fill="rgb(225,20,46)"/><text x="19.2304%" y="95.50">r..</text></g><g><title>thir_body (2,290,961 samples, 1.07%)</title><rect x="20.9265%" y="85" width="1.0670%" height="15" fill="rgb(210,31,41)"/><text x="21.1765%" y="95.50"></text></g><g><title>mir_const (20,293,659 samples, 9.45%)</title><rect x="12.5572%" y="133" width="9.4516%" height="15" fill="rgb(221,200,47)"/><text x="12.8072%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (17,612,463 samples, 8.20%)</title><rect x="13.8060%" y="117" width="8.2029%" height="15" fill="rgb(226,26,5)"/><text x="14.0560%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (15,489,731 samples, 7.21%)</title><rect x="14.7946%" y="101" width="7.2142%" height="15" fill="rgb(249,33,26)"/><text x="15.0446%" y="111.50">mir_built</text></g><g><title>evaluate_obligation (279,204 samples, 0.13%)</title><rect x="22.1894%" y="117" width="0.1300%" height="15" fill="rgb(235,183,28)"/><text x="22.4394%" y="127.50"></text></g><g><title>mir_const (267,295 samples, 0.12%)</title><rect x="22.4649%" y="117" width="0.1245%" height="15" fill="rgb(221,5,38)"/><text x="22.7149%" y="127.50"></text></g><g><title>mir_const_qualif (1,368,604 samples, 0.64%)</title><rect x="22.0089%" y="133" width="0.6374%" height="15" fill="rgb(247,18,42)"/><text x="22.2589%" y="143.50"></text></g><g><title>mir_promoted (23,384,177 samples, 10.89%)</title><rect x="11.7561%" y="149" width="10.8910%" height="15" fill="rgb(241,131,45)"/><text x="12.0061%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (947,589 samples, 0.44%)</title><rect x="22.6471%" y="149" width="0.4413%" height="15" fill="rgb(249,31,29)"/><text x="22.8971%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,243,096 samples, 0.58%)</title><rect x="23.0885%" y="149" width="0.5790%" height="15" fill="rgb(225,111,53)"/><text x="23.3385%" y="159.50"></text></g><g><title>normalize_projection_ty (787,028 samples, 0.37%)</title><rect x="23.3009%" y="133" width="0.3666%" height="15" fill="rgb(238,160,17)"/><text x="23.5509%" y="143.50"></text></g><g><title>type_op_normalize_predicate (369,003 samples, 0.17%)</title><rect x="23.6674%" y="149" width="0.1719%" height="15" fill="rgb(214,148,48)"/><text x="23.9174%" y="159.50"></text></g><g><title>normalize_projection_ty (282,700 samples, 0.13%)</title><rect x="23.7076%" y="133" width="0.1317%" height="15" fill="rgb(232,36,49)"/><text x="23.9576%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,384,361 samples, 2.04%)</title><rect x="23.8477%" y="149" width="2.0420%" height="15" fill="rgb(209,103,24)"/><text x="24.0977%" y="159.50">t..</text></g><g><title>evaluate_obligation (308,455 samples, 0.14%)</title><rect x="25.7460%" y="133" width="0.1437%" height="15" fill="rgb(229,88,8)"/><text x="25.9960%" y="143.50"></text></g><g><title>MIR_borrow_checking (54,458,785 samples, 25.36%)</title><rect x="0.5308%" y="181" width="25.3638%" height="15" fill="rgb(213,181,19)"/><text x="0.7808%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,221,821 samples, 25.25%)</title><rect x="0.6412%" y="165" width="25.2535%" height="15" fill="rgb(254,191,54)"/><text x="0.8912%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (449,295 samples, 0.21%)</title><rect x="25.8947%" y="181" width="0.2093%" height="15" fill="rgb(241,83,37)"/><text x="26.1447%" y="191.50"></text></g><g><title>hir_module_items (278,505 samples, 0.13%)</title><rect x="26.1039%" y="181" width="0.1297%" height="15" fill="rgb(233,36,39)"/><text x="26.3539%" y="191.50"></text></g><g><title>should_inherit_track_caller (306,953 samples, 0.14%)</title><rect x="26.5346%" y="133" width="0.1430%" height="15" fill="rgb(226,3,54)"/><text x="26.7846%" y="143.50"></text></g><g><title>codegen_fn_attrs (548,346 samples, 0.26%)</title><rect x="26.4318%" y="149" width="0.2554%" height="15" fill="rgb(245,192,40)"/><text x="26.6818%" y="159.50"></text></g><g><title>check_mod_attrs (945,970 samples, 0.44%)</title><rect x="26.2467%" y="165" width="0.4406%" height="15" fill="rgb(238,167,29)"/><text x="26.4967%" y="175.50"></text></g><g><title>lint_levels (275,604 samples, 0.13%)</title><rect x="26.9878%" y="149" width="0.1284%" height="15" fill="rgb(232,182,51)"/><text x="27.2378%" y="159.50"></text></g><g><title>lookup_deprecation_entry (220,783 samples, 0.10%)</title><rect x="27.1162%" y="149" width="0.1028%" height="15" fill="rgb(231,60,39)"/><text x="27.3662%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (958,731 samples, 0.45%)</title><rect x="26.8427%" y="165" width="0.4465%" height="15" fill="rgb(208,69,12)"/><text x="27.0927%" y="175.50"></text></g><g><title>misc_checking_1 (2,352,056 samples, 1.10%)</title><rect x="26.2339%" y="181" width="1.0955%" height="15" fill="rgb(235,93,37)"/><text x="26.4839%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,059,662 samples, 0.49%)</title><rect x="27.3303%" y="165" width="0.4935%" height="15" fill="rgb(213,116,39)"/><text x="27.5803%" y="175.50"></text></g><g><title>check_mod_liveness (879,320 samples, 0.41%)</title><rect x="27.4143%" y="149" width="0.4095%" height="15" fill="rgb(222,207,29)"/><text x="27.6643%" y="159.50"></text></g><g><title>type_uninhabited_from (225,911 samples, 0.11%)</title><rect x="27.7186%" y="133" width="0.1052%" height="15" fill="rgb(206,96,30)"/><text x="27.9686%" y="143.50"></text></g><g><title>mir_borrowck (451,704 samples, 0.21%)</title><rect x="28.4794%" y="53" width="0.2104%" height="15" fill="rgb(218,138,4)"/><text x="28.7294%" y="63.50"></text></g><g><title>eval_to_const_value_raw (840,539 samples, 0.39%)</title><rect x="28.2987%" y="133" width="0.3915%" height="15" fill="rgb(250,191,14)"/><text x="28.5487%" y="143.50"></text></g><g><title>eval_to_const_value_raw (832,109 samples, 0.39%)</title><rect x="28.3027%" y="117" width="0.3875%" height="15" fill="rgb(239,60,40)"/><text x="28.5527%" y="127.50"></text></g><g><title>eval_to_allocation_raw (823,379 samples, 0.38%)</title><rect x="28.3067%" y="101" width="0.3835%" height="15" fill="rgb(206,27,48)"/><text x="28.5567%" y="111.50"></text></g><g><title>mir_for_ctfe (645,508 samples, 0.30%)</title><rect x="28.3896%" y="85" width="0.3006%" height="15" fill="rgb(225,35,8)"/><text x="28.6396%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (593,236 samples, 0.28%)</title><rect x="28.4139%" y="69" width="0.2763%" height="15" fill="rgb(250,213,24)"/><text x="28.6639%" y="79.50"></text></g><g><title>mir_const_qualif (242,463 samples, 0.11%)</title><rect x="28.6930%" y="133" width="0.1129%" height="15" fill="rgb(247,123,22)"/><text x="28.9430%" y="143.50"></text></g><g><title>misc_checking_2 (3,266,296 samples, 1.52%)</title><rect x="27.3294%" y="181" width="1.5213%" height="15" fill="rgb(231,138,38)"/><text x="27.5794%" y="191.50"></text></g><g><title>match_checking (2,204,544 samples, 1.03%)</title><rect x="27.8239%" y="165" width="1.0268%" height="15" fill="rgb(231,145,46)"/><text x="28.0739%" y="175.50"></text></g><g><title>check_match (2,146,713 samples, 1.00%)</title><rect x="27.8508%" y="149" width="0.9998%" height="15" fill="rgb(251,118,11)"/><text x="28.1008%" y="159.50"></text></g><g><title>check_private_in_public (405,374 samples, 0.19%)</title><rect x="28.8552%" y="165" width="0.1888%" height="15" fill="rgb(217,147,25)"/><text x="29.1052%" y="175.50"></text></g><g><title>death_checking (785,809 samples, 0.37%)</title><rect x="29.0440%" y="165" width="0.3660%" height="15" fill="rgb(247,81,37)"/><text x="29.2940%" y="175.50"></text></g><g><title>eval_to_const_value_raw (355,473 samples, 0.17%)</title><rect x="30.1655%" y="85" width="0.1656%" height="15" fill="rgb(209,12,38)"/><text x="30.4155%" y="95.50"></text></g><g><title>eval_to_const_value_raw (354,783 samples, 0.17%)</title><rect x="30.1658%" y="69" width="0.1652%" height="15" fill="rgb(227,1,9)"/><text x="30.4158%" y="79.50"></text></g><g><title>eval_to_allocation_raw (353,443 samples, 0.16%)</title><rect x="30.1664%" y="53" width="0.1646%" height="15" fill="rgb(248,47,43)"/><text x="30.4164%" y="63.50"></text></g><g><title>eval_to_allocation_raw (670,348 samples, 0.31%)</title><rect x="30.0191%" y="133" width="0.3122%" height="15" fill="rgb(221,10,30)"/><text x="30.2691%" y="143.50"></text></g><g><title>eval_to_allocation_raw (666,508 samples, 0.31%)</title><rect x="30.0209%" y="117" width="0.3104%" height="15" fill="rgb(210,229,1)"/><text x="30.2709%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (360,304 samples, 0.17%)</title><rect x="30.1635%" y="101" width="0.1678%" height="15" fill="rgb(222,148,37)"/><text x="30.4135%" y="111.50"></text></g><g><title>eval_to_const_value_raw (403,024 samples, 0.19%)</title><rect x="30.3314%" y="133" width="0.1877%" height="15" fill="rgb(234,67,33)"/><text x="30.5814%" y="143.50"></text></g><g><title>eval_to_const_value_raw (395,304 samples, 0.18%)</title><rect x="30.3350%" y="117" width="0.1841%" height="15" fill="rgb(247,98,35)"/><text x="30.5850%" y="127.50"></text></g><g><title>eval_to_allocation_raw (381,464 samples, 0.18%)</title><rect x="30.3414%" y="101" width="0.1777%" height="15" fill="rgb(247,138,52)"/><text x="30.5914%" y="111.50"></text></g><g><title>param_env (538,286 samples, 0.25%)</title><rect x="30.5191%" y="133" width="0.2507%" height="15" fill="rgb(213,79,30)"/><text x="30.7691%" y="143.50"></text></g><g><title>predicates_of (229,132 samples, 0.11%)</title><rect x="30.6630%" y="117" width="0.1067%" height="15" fill="rgb(246,177,23)"/><text x="30.9130%" y="127.50"></text></g><g><title>crate_lints (4,589,591 samples, 2.14%)</title><rect x="29.4110%" y="149" width="2.1376%" height="15" fill="rgb(230,62,27)"/><text x="29.6610%" y="159.50">c..</text></g><g><title>type_of (1,575,818 samples, 0.73%)</title><rect x="30.8146%" y="133" width="0.7339%" height="15" fill="rgb(216,154,8)"/><text x="31.0646%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,070,249 samples, 0.50%)</title><rect x="31.0501%" y="117" width="0.4985%" height="15" fill="rgb(244,35,45)"/><text x="31.3001%" y="127.50"></text></g><g><title>lint_checking (5,406,700 samples, 2.52%)</title><rect x="29.4100%" y="165" width="2.5181%" height="15" fill="rgb(251,115,12)"/><text x="29.6600%" y="175.50">li..</text></g><g><title>module_lints (815,079 samples, 0.38%)</title><rect x="31.5485%" y="149" width="0.3796%" height="15" fill="rgb(240,54,50)"/><text x="31.7985%" y="159.50"></text></g><g><title>lint_mod (808,189 samples, 0.38%)</title><rect x="31.5517%" y="133" width="0.3764%" height="15" fill="rgb(233,84,52)"/><text x="31.8017%" y="143.50"></text></g><g><title>privacy_access_levels (377,055 samples, 0.18%)</title><rect x="31.9281%" y="165" width="0.1756%" height="15" fill="rgb(207,117,47)"/><text x="32.1781%" y="175.50"></text></g><g><title>privacy_checking_modules (1,706,009 samples, 0.79%)</title><rect x="32.1038%" y="165" width="0.7946%" height="15" fill="rgb(249,43,39)"/><text x="32.3538%" y="175.50"></text></g><g><title>check_mod_privacy (1,701,049 samples, 0.79%)</title><rect x="32.1061%" y="149" width="0.7923%" height="15" fill="rgb(209,38,44)"/><text x="32.3561%" y="159.50"></text></g><g><title>misc_checking_3 (8,709,617 samples, 4.06%)</title><rect x="28.8506%" y="181" width="4.0565%" height="15" fill="rgb(236,212,23)"/><text x="29.1006%" y="191.50">misc..</text></g><g><title>adt_destructor (429,185 samples, 0.20%)</title><rect x="33.0007%" y="133" width="0.1999%" height="15" fill="rgb(242,79,21)"/><text x="33.2507%" y="143.50"></text></g><g><title>coherent_trait (420,585 samples, 0.20%)</title><rect x="33.0047%" y="117" width="0.1959%" height="15" fill="rgb(211,96,35)"/><text x="33.2547%" y="127.50"></text></g><g><title>specialization_graph_of (418,365 samples, 0.19%)</title><rect x="33.0057%" y="101" width="0.1949%" height="15" fill="rgb(253,215,40)"/><text x="33.2557%" y="111.50"></text></g><g><title>impl_parent (3,114,288 samples, 1.45%)</title><rect x="35.4084%" y="117" width="1.4505%" height="15" fill="rgb(211,81,21)"/><text x="35.6584%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,695,688 samples, 0.79%)</title><rect x="36.0691%" y="101" width="0.7898%" height="15" fill="rgb(208,190,38)"/><text x="36.3191%" y="111.50"></text></g><g><title>impl_trait_ref (6,651,485 samples, 3.10%)</title><rect x="36.8589%" y="117" width="3.0979%" height="15" fill="rgb(235,213,38)"/><text x="37.1089%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,268,758 samples, 2.45%)</title><rect x="37.5028%" y="101" width="2.4539%" height="15" fill="rgb(237,122,38)"/><text x="37.7528%" y="111.50">me..</text></g><g><title>coherent_trait (16,259,590 samples, 7.57%)</title><rect x="32.9807%" y="149" width="7.5728%" height="15" fill="rgb(244,218,35)"/><text x="33.2307%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (15,708,353 samples, 7.32%)</title><rect x="33.2375%" y="133" width="7.3161%" height="15" fill="rgb(240,68,47)"/><text x="33.4875%" y="143.50">specializa..</text></g><g><title>trait_impls_of (1,279,074 samples, 0.60%)</title><rect x="39.9578%" y="117" width="0.5957%" height="15" fill="rgb(210,16,53)"/><text x="40.2078%" y="127.50"></text></g><g><title>implementations_of_trait (433,615 samples, 0.20%)</title><rect x="40.3516%" y="101" width="0.2020%" height="15" fill="rgb(235,124,12)"/><text x="40.6016%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (275,942 samples, 0.13%)</title><rect x="40.4250%" y="85" width="0.1285%" height="15" fill="rgb(224,169,11)"/><text x="40.6750%" y="95.50"></text></g><g><title>coherence_checking (16,421,803 samples, 7.65%)</title><rect x="32.9675%" y="165" width="7.6484%" height="15" fill="rgb(250,166,2)"/><text x="33.2175%" y="175.50">coherence_..</text></g><g><title>associated_item (629,395 samples, 0.29%)</title><rect x="58.2075%" y="101" width="0.2931%" height="15" fill="rgb(242,216,29)"/><text x="58.4575%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (501,344 samples, 0.23%)</title><rect x="58.2671%" y="85" width="0.2335%" height="15" fill="rgb(230,116,27)"/><text x="58.5171%" y="95.50"></text></g><g><title>associated_items (948,221 samples, 0.44%)</title><rect x="58.0875%" y="117" width="0.4416%" height="15" fill="rgb(228,99,48)"/><text x="58.3375%" y="127.50"></text></g><g><title>adt_dtorck_constraint (285,161 samples, 0.13%)</title><rect x="59.2633%" y="85" width="0.1328%" height="15" fill="rgb(253,11,6)"/><text x="59.5133%" y="95.50"></text></g><g><title>adt_dtorck_constraint (789,819 samples, 0.37%)</title><rect x="59.0843%" y="101" width="0.3679%" height="15" fill="rgb(247,143,39)"/><text x="59.3343%" y="111.50"></text></g><g><title>dropck_outlives (1,878,678 samples, 0.87%)</title><rect x="58.6163%" y="117" width="0.8750%" height="15" fill="rgb(236,97,10)"/><text x="58.8663%" y="127.50"></text></g><g><title>adt_sized_constraint (251,681 samples, 0.12%)</title><rect x="60.6986%" y="101" width="0.1172%" height="15" fill="rgb(233,208,19)"/><text x="60.9486%" y="111.50"></text></g><g><title>predicates_of (257,704 samples, 0.12%)</title><rect x="61.0011%" y="101" width="0.1200%" height="15" fill="rgb(216,164,2)"/><text x="61.2511%" y="111.50"></text></g><g><title>specializes (242,484 samples, 0.11%)</title><rect x="61.1211%" y="101" width="0.1129%" height="15" fill="rgb(220,129,5)"/><text x="61.3711%" y="111.50"></text></g><g><title>trait_impls_of (890,082 samples, 0.41%)</title><rect x="61.2415%" y="101" width="0.4146%" height="15" fill="rgb(242,17,10)"/><text x="61.4915%" y="111.50"></text></g><g><title>implementations_of_trait (376,811 samples, 0.18%)</title><rect x="61.4805%" y="85" width="0.1755%" height="15" fill="rgb(242,107,0)"/><text x="61.7305%" y="95.50"></text></g><g><title>evaluate_obligation (4,648,614 samples, 2.17%)</title><rect x="59.4913%" y="117" width="2.1651%" height="15" fill="rgb(251,28,31)"/><text x="59.7413%" y="127.50">e..</text></g><g><title>fn_sig (305,630 samples, 0.14%)</title><rect x="61.6851%" y="117" width="0.1423%" height="15" fill="rgb(233,223,10)"/><text x="61.9351%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (266,780 samples, 0.12%)</title><rect x="61.7032%" y="101" width="0.1243%" height="15" fill="rgb(215,21,27)"/><text x="61.9532%" y="111.50"></text></g><g><title>generics_of (496,354 samples, 0.23%)</title><rect x="61.8275%" y="117" width="0.2312%" height="15" fill="rgb(232,23,21)"/><text x="62.0775%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (378,574 samples, 0.18%)</title><rect x="61.8823%" y="101" width="0.1763%" height="15" fill="rgb(244,5,23)"/><text x="62.1323%" y="111.50"></text></g><g><title>impl_trait_ref (309,012 samples, 0.14%)</title><rect x="62.1365%" y="117" width="0.1439%" height="15" fill="rgb(226,81,46)"/><text x="62.3865%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (252,052 samples, 0.12%)</title><rect x="62.1630%" y="101" width="0.1174%" height="15" fill="rgb(247,70,30)"/><text x="62.4130%" y="111.50"></text></g><g><title>item_attrs (360,622 samples, 0.17%)</title><rect x="62.3149%" y="117" width="0.1680%" height="15" fill="rgb(212,68,19)"/><text x="62.5649%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (342,272 samples, 0.16%)</title><rect x="62.3234%" y="101" width="0.1594%" height="15" fill="rgb(240,187,13)"/><text x="62.5734%" y="111.50"></text></g><g><title>evaluate_obligation (465,804 samples, 0.22%)</title><rect x="62.8197%" y="101" width="0.2169%" height="15" fill="rgb(223,113,26)"/><text x="63.0697%" y="111.50"></text></g><g><title>method_autoderef_steps (1,061,884 samples, 0.49%)</title><rect x="62.5565%" y="117" width="0.4946%" height="15" fill="rgb(206,192,2)"/><text x="62.8065%" y="127.50"></text></g><g><title>explicit_predicates_of (225,802 samples, 0.11%)</title><rect x="63.4040%" y="85" width="0.1052%" height="15" fill="rgb(241,108,4)"/><text x="63.6540%" y="95.50"></text></g><g><title>predicates_of (905,124 samples, 0.42%)</title><rect x="63.1371%" y="117" width="0.4216%" height="15" fill="rgb(247,173,49)"/><text x="63.3871%" y="127.50"></text></g><g><title>predicates_defined_on (572,662 samples, 0.27%)</title><rect x="63.2919%" y="101" width="0.2667%" height="15" fill="rgb(224,114,35)"/><text x="63.5419%" y="111.50"></text></g><g><title>associated_item (491,828 samples, 0.23%)</title><rect x="67.2769%" y="85" width="0.2291%" height="15" fill="rgb(245,159,27)"/><text x="67.5269%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (227,595 samples, 0.11%)</title><rect x="67.4000%" y="69" width="0.1060%" height="15" fill="rgb(245,172,44)"/><text x="67.6500%" y="79.50"></text></g><g><title>associated_items (615,029 samples, 0.29%)</title><rect x="67.2313%" y="101" width="0.2864%" height="15" fill="rgb(236,23,11)"/><text x="67.4813%" y="111.50"></text></g><g><title>evaluate_obligation (1,311,962 samples, 0.61%)</title><rect x="67.6357%" y="101" width="0.6110%" height="15" fill="rgb(205,117,38)"/><text x="67.8857%" y="111.50"></text></g><g><title>is_copy_raw (387,953 samples, 0.18%)</title><rect x="68.3600%" y="101" width="0.1807%" height="15" fill="rgb(237,72,25)"/><text x="68.6100%" y="111.50"></text></g><g><title>evaluate_obligation (312,552 samples, 0.15%)</title><rect x="68.3951%" y="85" width="0.1456%" height="15" fill="rgb(244,70,9)"/><text x="68.6451%" y="95.50"></text></g><g><title>method_autoderef_steps (361,405 samples, 0.17%)</title><rect x="68.6153%" y="101" width="0.1683%" height="15" fill="rgb(217,125,39)"/><text x="68.8653%" y="111.50"></text></g><g><title>typeck (11,176,404 samples, 5.21%)</title><rect x="63.7286%" y="117" width="5.2053%" height="15" fill="rgb(235,36,10)"/><text x="63.9786%" y="127.50">typeck</text></g><g><title>item_bodies_checking (60,867,207 samples, 28.35%)</title><rect x="40.6368%" y="165" width="28.3485%" height="15" fill="rgb(251,123,47)"/><text x="40.8868%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (60,863,297 samples, 28.35%)</title><rect x="40.6386%" y="149" width="28.3467%" height="15" fill="rgb(221,13,13)"/><text x="40.8886%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (60,721,346 samples, 28.28%)</title><rect x="40.7047%" y="133" width="28.2806%" height="15" fill="rgb(238,131,9)"/><text x="40.9547%" y="143.50">typeck</text></g><g><title>layout_of (297,793 samples, 0.14%)</title><rect x="69.7300%" y="37" width="0.1387%" height="15" fill="rgb(211,50,8)"/><text x="69.9800%" y="47.50"></text></g><g><title>layout_of (338,474 samples, 0.16%)</title><rect x="69.7181%" y="53" width="0.1576%" height="15" fill="rgb(245,182,24)"/><text x="69.9681%" y="63.50"></text></g><g><title>layout_of (380,464 samples, 0.18%)</title><rect x="69.7006%" y="85" width="0.1772%" height="15" fill="rgb(242,14,37)"/><text x="69.9506%" y="95.50"></text></g><g><title>layout_of (354,954 samples, 0.17%)</title><rect x="69.7124%" y="69" width="0.1653%" height="15" fill="rgb(246,228,12)"/><text x="69.9624%" y="79.50"></text></g><g><title>layout_of (409,314 samples, 0.19%)</title><rect x="69.6881%" y="101" width="0.1906%" height="15" fill="rgb(213,55,15)"/><text x="69.9381%" y="111.50"></text></g><g><title>layout_of (459,716 samples, 0.21%)</title><rect x="69.6722%" y="117" width="0.2141%" height="15" fill="rgb(209,9,3)"/><text x="69.9222%" y="127.50"></text></g><g><title>layout_of (498,996 samples, 0.23%)</title><rect x="69.6578%" y="133" width="0.2324%" height="15" fill="rgb(230,59,30)"/><text x="69.9078%" y="143.50"></text></g><g><title>dropck_outlives (355,373 samples, 0.17%)</title><rect x="70.5843%" y="117" width="0.1655%" height="15" fill="rgb(209,121,21)"/><text x="70.8343%" y="127.50"></text></g><g><title>adt_dtorck_constraint (301,733 samples, 0.14%)</title><rect x="70.6093%" y="101" width="0.1405%" height="15" fill="rgb(220,109,13)"/><text x="70.8593%" y="111.50"></text></g><g><title>generics_of (690,878 samples, 0.32%)</title><rect x="71.9751%" y="101" width="0.3218%" height="15" fill="rgb(232,18,1)"/><text x="72.2251%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (502,865 samples, 0.23%)</title><rect x="72.0627%" y="85" width="0.2342%" height="15" fill="rgb(215,41,42)"/><text x="72.3127%" y="95.50"></text></g><g><title>impl_trait_ref (1,044,961 samples, 0.49%)</title><rect x="72.3591%" y="101" width="0.4867%" height="15" fill="rgb(224,123,36)"/><text x="72.6091%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (858,869 samples, 0.40%)</title><rect x="72.4458%" y="85" width="0.4000%" height="15" fill="rgb(240,125,3)"/><text x="72.6958%" y="95.50"></text></g><g><title>predicates_of (703,155 samples, 0.33%)</title><rect x="72.8643%" y="101" width="0.3275%" height="15" fill="rgb(205,98,50)"/><text x="73.1143%" y="111.50"></text></g><g><title>predicates_defined_on (388,012 samples, 0.18%)</title><rect x="73.0110%" y="85" width="0.1807%" height="15" fill="rgb(205,185,37)"/><text x="73.2610%" y="95.50"></text></g><g><title>specializes (2,302,335 samples, 1.07%)</title><rect x="73.1918%" y="101" width="1.0723%" height="15" fill="rgb(238,207,15)"/><text x="73.4418%" y="111.50"></text></g><g><title>param_env (1,429,081 samples, 0.67%)</title><rect x="73.5985%" y="85" width="0.6656%" height="15" fill="rgb(213,199,42)"/><text x="73.8485%" y="95.50"></text></g><g><title>def_span (559,830 samples, 0.26%)</title><rect x="74.0033%" y="69" width="0.2607%" height="15" fill="rgb(235,201,11)"/><text x="74.2533%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (493,809 samples, 0.23%)</title><rect x="74.0341%" y="53" width="0.2300%" height="15" fill="rgb(207,46,11)"/><text x="74.2841%" y="63.50"></text></g><g><title>evaluate_obligation (7,705,925 samples, 3.59%)</title><rect x="70.7498%" y="117" width="3.5890%" height="15" fill="rgb(241,35,35)"/><text x="70.9998%" y="127.50">eval..</text></g><g><title>item_types_checking (11,762,971 samples, 5.48%)</title><rect x="68.9853%" y="165" width="5.4785%" height="15" fill="rgb(243,32,47)"/><text x="69.2353%" y="175.50">item_ty..</text></g><g><title>check_mod_item_types (11,754,811 samples, 5.47%)</title><rect x="68.9891%" y="149" width="5.4747%" height="15" fill="rgb(247,202,23)"/><text x="69.2391%" y="159.50">check_m..</text></g><g><title>typeck (9,740,268 samples, 4.54%)</title><rect x="69.9273%" y="133" width="4.5365%" height="15" fill="rgb(219,102,11)"/><text x="70.1773%" y="143.50">typeck</text></g><g><title>fn_sig (693,926 samples, 0.32%)</title><rect x="74.6674%" y="133" width="0.3232%" height="15" fill="rgb(243,110,44)"/><text x="74.9174%" y="143.50"></text></g><g><title>named_region_map (270,193 samples, 0.13%)</title><rect x="75.0944%" y="117" width="0.1258%" height="15" fill="rgb(222,74,54)"/><text x="75.3444%" y="127.50"></text></g><g><title>resolve_lifetimes (243,383 samples, 0.11%)</title><rect x="75.1069%" y="101" width="0.1134%" height="15" fill="rgb(216,99,12)"/><text x="75.3569%" y="111.50"></text></g><g><title>generics_of (515,053 samples, 0.24%)</title><rect x="74.9906%" y="133" width="0.2399%" height="15" fill="rgb(226,22,26)"/><text x="75.2406%" y="143.50"></text></g><g><title>explicit_predicates_of (375,235 samples, 0.17%)</title><rect x="75.3663%" y="101" width="0.1748%" height="15" fill="rgb(217,163,10)"/><text x="75.6163%" y="111.50"></text></g><g><title>predicates_of (1,219,786 samples, 0.57%)</title><rect x="75.2668%" y="133" width="0.5681%" height="15" fill="rgb(213,25,53)"/><text x="75.5168%" y="143.50"></text></g><g><title>predicates_defined_on (1,141,325 samples, 0.53%)</title><rect x="75.3033%" y="117" width="0.5316%" height="15" fill="rgb(252,105,26)"/><text x="75.5533%" y="127.50"></text></g><g><title>inferred_outlives_of (630,797 samples, 0.29%)</title><rect x="75.5411%" y="101" width="0.2938%" height="15" fill="rgb(220,39,43)"/><text x="75.7911%" y="111.50"></text></g><g><title>inferred_outlives_crate (600,866 samples, 0.28%)</title><rect x="75.5550%" y="85" width="0.2798%" height="15" fill="rgb(229,68,48)"/><text x="75.8050%" y="95.50"></text></g><g><title>type_of (311,364 samples, 0.15%)</title><rect x="75.6899%" y="69" width="0.1450%" height="15" fill="rgb(252,8,32)"/><text x="75.9399%" y="79.50"></text></g><g><title>type_collecting (3,089,334 samples, 1.44%)</title><rect x="74.4666%" y="165" width="1.4388%" height="15" fill="rgb(223,20,43)"/><text x="74.7166%" y="175.50"></text></g><g><title>collect_mod_item_types (3,074,024 samples, 1.43%)</title><rect x="74.4737%" y="149" width="1.4317%" height="15" fill="rgb(229,81,49)"/><text x="74.7237%" y="159.50"></text></g><g><title>evaluate_obligation (1,170,222 samples, 0.55%)</title><rect x="77.4160%" y="133" width="0.5450%" height="15" fill="rgb(236,28,36)"/><text x="77.6660%" y="143.50"></text></g><g><title>implied_outlives_bounds (415,717 samples, 0.19%)</title><rect x="77.9699%" y="133" width="0.1936%" height="15" fill="rgb(249,185,26)"/><text x="78.2199%" y="143.50"></text></g><g><title>object_safety_violations (216,802 samples, 0.10%)</title><rect x="78.1635%" y="133" width="0.1010%" height="15" fill="rgb(249,174,33)"/><text x="78.4135%" y="143.50"></text></g><g><title>param_env (400,504 samples, 0.19%)</title><rect x="78.2650%" y="133" width="0.1865%" height="15" fill="rgb(233,201,37)"/><text x="78.5150%" y="143.50"></text></g><g><title>region_scope_tree (717,265 samples, 0.33%)</title><rect x="78.4775%" y="133" width="0.3341%" height="15" fill="rgb(221,78,26)"/><text x="78.7275%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,960,066 samples, 2.78%)</title><rect x="76.0708%" y="149" width="2.7759%" height="15" fill="rgb(250,127,30)"/><text x="76.3208%" y="159.50">ch..</text></g><g><title>adt_def (444,916 samples, 0.21%)</title><rect x="80.2201%" y="101" width="0.2072%" height="15" fill="rgb(230,49,44)"/><text x="80.4701%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (438,666 samples, 0.20%)</title><rect x="80.2230%" y="85" width="0.2043%" height="15" fill="rgb(229,67,23)"/><text x="80.4730%" y="95.50"></text></g><g><title>item_attrs (365,104 samples, 0.17%)</title><rect x="80.2572%" y="69" width="0.1700%" height="15" fill="rgb(249,83,47)"/><text x="80.5072%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (358,624 samples, 0.17%)</title><rect x="80.2603%" y="53" width="0.1670%" height="15" fill="rgb(215,43,3)"/><text x="80.5103%" y="63.50"></text></g><g><title>adt_def (220,961 samples, 0.10%)</title><rect x="80.4326%" y="85" width="0.1029%" height="15" fill="rgb(238,154,13)"/><text x="80.6826%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (218,761 samples, 0.10%)</title><rect x="80.4336%" y="69" width="0.1019%" height="15" fill="rgb(219,56,2)"/><text x="80.6836%" y="79.50"></text></g><g><title>adt_sized_constraint (309,872 samples, 0.14%)</title><rect x="80.4273%" y="101" width="0.1443%" height="15" fill="rgb(233,0,4)"/><text x="80.6773%" y="111.50"></text></g><g><title>adt_sized_constraint (821,218 samples, 0.38%)</title><rect x="80.2032%" y="117" width="0.3825%" height="15" fill="rgb(235,30,7)"/><text x="80.4532%" y="127.50"></text></g><g><title>evaluate_obligation (1,898,083 samples, 0.88%)</title><rect x="79.8030%" y="133" width="0.8840%" height="15" fill="rgb(250,79,13)"/><text x="80.0530%" y="143.50"></text></g><g><title>param_env (432,335 samples, 0.20%)</title><rect x="80.7675%" y="133" width="0.2014%" height="15" fill="rgb(211,146,34)"/><text x="81.0175%" y="143.50"></text></g><g><title>analysis (173,697,281 samples, 80.90%)</title><rect x="0.3111%" y="197" width="80.8984%" height="15" fill="rgb(228,22,38)"/><text x="0.5611%" y="207.50">analysis</text></g><g><title>type_check_crate (103,710,424 samples, 48.30%)</title><rect x="32.9071%" y="181" width="48.3025%" height="15" fill="rgb(235,168,5)"/><text x="33.1571%" y="191.50">type_check_crate</text></g><g><title>wf_checking (11,379,776 samples, 5.30%)</title><rect x="75.9095%" y="165" width="5.3001%" height="15" fill="rgb(221,155,16)"/><text x="76.1595%" y="175.50">wf_che..</text></g><g><title>check_item_well_formed (5,073,297 samples, 2.36%)</title><rect x="78.8467%" y="149" width="2.3629%" height="15" fill="rgb(215,215,53)"/><text x="79.0967%" y="159.50">ch..</text></g><g><title>codegen_crate (510,585 samples, 0.24%)</title><rect x="81.2130%" y="197" width="0.2378%" height="15" fill="rgb(223,4,10)"/><text x="81.4630%" y="207.50"></text></g><g><title>metadata_load_macro (468,714 samples, 0.22%)</title><rect x="89.0987%" y="149" width="0.2183%" height="15" fill="rgb(234,103,6)"/><text x="89.3487%" y="159.50"></text></g><g><title>metadata_register_crate (2,171,104 samples, 1.01%)</title><rect x="89.3170%" y="149" width="1.0112%" height="15" fill="rgb(227,97,0)"/><text x="89.5670%" y="159.50"></text></g><g><title>metadata_register_crate (880,121 samples, 0.41%)</title><rect x="89.9182%" y="133" width="0.4099%" height="15" fill="rgb(234,150,53)"/><text x="90.1682%" y="143.50"></text></g><g><title>macro_expand_crate (18,675,897 samples, 8.70%)</title><rect x="81.7014%" y="181" width="8.6982%" height="15" fill="rgb(228,201,54)"/><text x="81.9514%" y="191.50">macro_expand..</text></g><g><title>expand_crate (18,659,267 samples, 8.69%)</title><rect x="81.7092%" y="165" width="8.6904%" height="15" fill="rgb(222,22,37)"/><text x="81.9592%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (2,961,843 samples, 1.38%)</title><rect x="90.6066%" y="165" width="1.3795%" height="15" fill="rgb(237,53,32)"/><text x="90.8566%" y="175.50"></text></g><g><title>configure_and_expand (22,798,353 samples, 10.62%)</title><rect x="81.4508%" y="197" width="10.6182%" height="15" fill="rgb(233,25,53)"/><text x="81.7008%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (3,434,438 samples, 1.60%)</title><rect x="90.4694%" y="181" width="1.5996%" height="15" fill="rgb(210,40,34)"/><text x="90.7194%" y="191.50"></text></g><g><title>drop_ast (310,394 samples, 0.14%)</title><rect x="92.0690%" y="197" width="0.1446%" height="15" fill="rgb(241,220,44)"/><text x="92.3190%" y="207.50"></text></g><g><title>early_lint_checks (572,866 samples, 0.27%)</title><rect x="92.2248%" y="197" width="0.2668%" height="15" fill="rgb(235,28,35)"/><text x="92.4748%" y="207.50"></text></g><g><title>free_global_ctxt (5,425,580 samples, 2.53%)</title><rect x="92.4916%" y="197" width="2.5269%" height="15" fill="rgb(210,56,17)"/><text x="92.7416%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,721,239 samples, 0.80%)</title><rect x="95.0185%" y="197" width="0.8017%" height="15" fill="rgb(224,130,29)"/><text x="95.2685%" y="207.50"></text></g><g><title>hir_lowering (4,795,233 samples, 2.23%)</title><rect x="95.8202%" y="197" width="2.2334%" height="15" fill="rgb(235,212,8)"/><text x="96.0702%" y="207.50">h..</text></g><g><title>parse_crate (1,912,192 samples, 0.89%)</title><rect x="98.0866%" y="197" width="0.8906%" height="15" fill="rgb(223,33,50)"/><text x="98.3366%" y="207.50"></text></g><g><title>prepare_outputs (218,213 samples, 0.10%)</title><rect x="98.9807%" y="197" width="0.1016%" height="15" fill="rgb(219,149,13)"/><text x="99.2307%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,467,407 samples, 0.68%)</title><rect x="99.0824%" y="197" width="0.6834%" height="15" fill="rgb(250,156,29)"/><text x="99.3324%" y="207.50"></text></g><g><title>all (214,710,297 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,193,19)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (214,710,297 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,135,14)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (390,825 samples, 0.18%)</title><rect x="99.8180%" y="197" width="0.1820%" height="15" fill="rgb(241,47,5)"/><text x="100.0680%" y="207.50"></text></g></svg></svg>