<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>dropck_outlives (644,818 samples, 0.19%)</title><rect x="16.6774%" y="165" width="0.1882%" height="15" fill="rgb(227,0,7)"/><text x="16.9274%" y="175.50"></text></g><g><title>implied_outlives_bounds (719,820 samples, 0.21%)</title><rect x="16.8754%" y="165" width="0.2101%" height="15" fill="rgb(217,0,24)"/><text x="17.1254%" y="175.50"></text></g><g><title>is_sized_raw (516,753 samples, 0.15%)</title><rect x="17.1167%" y="165" width="0.1509%" height="15" fill="rgb(221,193,54)"/><text x="17.3667%" y="175.50"></text></g><g><title>evaluate_obligation (352,443 samples, 0.10%)</title><rect x="17.1647%" y="149" width="0.1029%" height="15" fill="rgb(248,212,6)"/><text x="17.4147%" y="159.50"></text></g><g><title>param_env (876,191 samples, 0.26%)</title><rect x="18.4203%" y="133" width="0.2558%" height="15" fill="rgb(208,68,35)"/><text x="18.6703%" y="143.50"></text></g><g><title>codegen_fn_attrs (492,546 samples, 0.14%)</title><rect x="19.0205%" y="117" width="0.1438%" height="15" fill="rgb(232,128,0)"/><text x="19.2705%" y="127.50"></text></g><g><title>needs_drop_raw (3,136,800 samples, 0.92%)</title><rect x="21.2325%" y="101" width="0.9157%" height="15" fill="rgb(207,160,47)"/><text x="21.4825%" y="111.50"></text></g><g><title>is_copy_raw (2,605,587 samples, 0.76%)</title><rect x="21.3875%" y="85" width="0.7606%" height="15" fill="rgb(228,23,34)"/><text x="21.6375%" y="95.50"></text></g><g><title>evaluate_obligation (2,186,851 samples, 0.64%)</title><rect x="21.5098%" y="69" width="0.6384%" height="15" fill="rgb(218,30,26)"/><text x="21.7598%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (532,605 samples, 0.16%)</title><rect x="22.2892%" y="85" width="0.1555%" height="15" fill="rgb(220,122,19)"/><text x="22.5392%" y="95.50"></text></g><g><title>resolve_instance (1,373,185 samples, 0.40%)</title><rect x="22.1482%" y="101" width="0.4009%" height="15" fill="rgb(250,228,42)"/><text x="22.3982%" y="111.50"></text></g><g><title>thir_body (2,666,112 samples, 0.78%)</title><rect x="22.5831%" y="101" width="0.7783%" height="15" fill="rgb(240,193,28)"/><text x="22.8331%" y="111.50"></text></g><g><title>mir_const (19,045,305 samples, 5.56%)</title><rect x="17.8449%" y="149" width="5.5598%" height="15" fill="rgb(216,20,37)"/><text x="18.0949%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (16,197,968 samples, 4.73%)</title><rect x="18.6761%" y="133" width="4.7286%" height="15" fill="rgb(206,188,39)"/><text x="18.9261%" y="143.50">unsafe..</text></g><g><title>mir_built (14,525,732 samples, 4.24%)</title><rect x="19.1643%" y="117" width="4.2404%" height="15" fill="rgb(217,207,13)"/><text x="19.4143%" y="127.50">mir_b..</text></g><g><title>mir_promoted (21,116,593 samples, 6.16%)</title><rect x="17.2676%" y="165" width="6.1644%" height="15" fill="rgb(231,73,38)"/><text x="17.5176%" y="175.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (520,236 samples, 0.15%)</title><rect x="23.4320%" y="165" width="0.1519%" height="15" fill="rgb(225,20,46)"/><text x="23.6820%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (4,581,106 samples, 1.34%)</title><rect x="23.5839%" y="165" width="1.3373%" height="15" fill="rgb(210,31,41)"/><text x="23.8339%" y="175.50"></text></g><g><title>normalize_projection_ty (1,295,745 samples, 0.38%)</title><rect x="24.5429%" y="149" width="0.3783%" height="15" fill="rgb(221,200,47)"/><text x="24.7929%" y="159.50"></text></g><g><title>type_op_normalize_predicate (3,549,051 samples, 1.04%)</title><rect x="24.9212%" y="165" width="1.0360%" height="15" fill="rgb(226,26,5)"/><text x="25.1712%" y="175.50"></text></g><g><title>type_op_normalize_ty (2,065,912 samples, 0.60%)</title><rect x="25.9572%" y="165" width="0.6031%" height="15" fill="rgb(249,33,26)"/><text x="26.2072%" y="175.50"></text></g><g><title>type_op_prove_predicate (29,161,877 samples, 8.51%)</title><rect x="26.5603%" y="165" width="8.5130%" height="15" fill="rgb(235,183,28)"/><text x="26.8103%" y="175.50">type_op_prov..</text></g><g><title>evaluate_obligation (439,012 samples, 0.13%)</title><rect x="34.9452%" y="149" width="0.1282%" height="15" fill="rgb(221,5,38)"/><text x="35.1952%" y="159.50"></text></g><g><title>MIR_borrow_checking (118,763,881 samples, 34.67%)</title><rect x="0.4069%" y="197" width="34.6699%" height="15" fill="rgb(247,18,42)"/><text x="0.6569%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (118,184,338 samples, 34.50%)</title><rect x="0.5760%" y="181" width="34.5007%" height="15" fill="rgb(241,131,45)"/><text x="0.8260%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (594,506 samples, 0.17%)</title><rect x="35.3269%" y="165" width="0.1735%" height="15" fill="rgb(249,31,29)"/><text x="35.5769%" y="175.50"></text></g><g><title>check_mod_attrs (1,019,020 samples, 0.30%)</title><rect x="35.2030%" y="181" width="0.2975%" height="15" fill="rgb(225,111,53)"/><text x="35.4530%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (608,146 samples, 0.18%)</title><rect x="35.6082%" y="181" width="0.1775%" height="15" fill="rgb(238,160,17)"/><text x="35.8582%" y="191.50"></text></g><g><title>misc_checking_1 (2,110,854 samples, 0.62%)</title><rect x="35.1954%" y="197" width="0.6162%" height="15" fill="rgb(214,148,48)"/><text x="35.4454%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,006,181 samples, 0.29%)</title><rect x="35.8121%" y="181" width="0.2937%" height="15" fill="rgb(232,36,49)"/><text x="36.0621%" y="191.50"></text></g><g><title>check_mod_liveness (800,079 samples, 0.23%)</title><rect x="35.8722%" y="165" width="0.2336%" height="15" fill="rgb(209,103,24)"/><text x="36.1222%" y="175.50"></text></g><g><title>misc_checking_2 (3,042,193 samples, 0.89%)</title><rect x="35.8116%" y="197" width="0.8881%" height="15" fill="rgb(229,88,8)"/><text x="36.0616%" y="207.50"></text></g><g><title>match_checking (2,034,292 samples, 0.59%)</title><rect x="36.1058%" y="181" width="0.5939%" height="15" fill="rgb(213,181,19)"/><text x="36.3558%" y="191.50"></text></g><g><title>check_match (1,953,661 samples, 0.57%)</title><rect x="36.1293%" y="165" width="0.5703%" height="15" fill="rgb(254,191,54)"/><text x="36.3793%" y="175.50"></text></g><g><title>check_private_in_public (388,285 samples, 0.11%)</title><rect x="36.7029%" y="181" width="0.1133%" height="15" fill="rgb(241,83,37)"/><text x="36.9529%" y="191.50"></text></g><g><title>death_checking (789,329 samples, 0.23%)</title><rect x="36.8163%" y="181" width="0.2304%" height="15" fill="rgb(233,36,39)"/><text x="37.0663%" y="191.50"></text></g><g><title>param_env (489,126 samples, 0.14%)</title><rect x="37.3744%" y="149" width="0.1428%" height="15" fill="rgb(226,3,54)"/><text x="37.6244%" y="159.50"></text></g><g><title>crate_lints (2,807,081 samples, 0.82%)</title><rect x="37.0472%" y="165" width="0.8195%" height="15" fill="rgb(245,192,40)"/><text x="37.2972%" y="175.50"></text></g><g><title>type_of (1,147,883 samples, 0.34%)</title><rect x="37.5316%" y="149" width="0.3351%" height="15" fill="rgb(238,167,29)"/><text x="37.7816%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (911,170 samples, 0.27%)</title><rect x="37.6007%" y="133" width="0.2660%" height="15" fill="rgb(232,182,51)"/><text x="37.8507%" y="143.50"></text></g><g><title>lint_checking (4,373,528 samples, 1.28%)</title><rect x="37.0467%" y="181" width="1.2767%" height="15" fill="rgb(231,60,39)"/><text x="37.2967%" y="191.50"></text></g><g><title>module_lints (1,564,757 samples, 0.46%)</title><rect x="37.8666%" y="165" width="0.4568%" height="15" fill="rgb(208,69,12)"/><text x="38.1166%" y="175.50"></text></g><g><title>lint_mod (1,557,657 samples, 0.45%)</title><rect x="37.8687%" y="149" width="0.4547%" height="15" fill="rgb(235,93,37)"/><text x="38.1187%" y="159.50"></text></g><g><title>privacy_access_levels (524,246 samples, 0.15%)</title><rect x="38.3234%" y="181" width="0.1530%" height="15" fill="rgb(213,116,39)"/><text x="38.5734%" y="191.50"></text></g><g><title>privacy_checking_modules (4,166,706 samples, 1.22%)</title><rect x="38.4765%" y="181" width="1.2164%" height="15" fill="rgb(222,207,29)"/><text x="38.7265%" y="191.50"></text></g><g><title>check_mod_privacy (4,162,166 samples, 1.22%)</title><rect x="38.4778%" y="165" width="1.2150%" height="15" fill="rgb(206,96,30)"/><text x="38.7278%" y="175.50"></text></g><g><title>misc_checking_3 (10,268,994 samples, 3.00%)</title><rect x="36.6997%" y="197" width="2.9978%" height="15" fill="rgb(218,138,4)"/><text x="36.9497%" y="207.50">mis..</text></g><g><title>adt_destructor (486,596 samples, 0.14%)</title><rect x="39.7664%" y="149" width="0.1420%" height="15" fill="rgb(250,191,14)"/><text x="40.0164%" y="159.50"></text></g><g><title>coherent_trait (477,646 samples, 0.14%)</title><rect x="39.7690%" y="133" width="0.1394%" height="15" fill="rgb(239,60,40)"/><text x="40.0190%" y="143.50"></text></g><g><title>specialization_graph_of (476,066 samples, 0.14%)</title><rect x="39.7694%" y="117" width="0.1390%" height="15" fill="rgb(206,27,48)"/><text x="40.0194%" y="127.50"></text></g><g><title>impl_parent (2,976,089 samples, 0.87%)</title><rect x="41.5202%" y="133" width="0.8688%" height="15" fill="rgb(225,35,8)"/><text x="41.7702%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,698,694 samples, 0.50%)</title><rect x="41.8931%" y="117" width="0.4959%" height="15" fill="rgb(250,213,24)"/><text x="42.1431%" y="127.50"></text></g><g><title>impl_trait_ref (6,177,633 samples, 1.80%)</title><rect x="42.3890%" y="133" width="1.8034%" height="15" fill="rgb(247,123,22)"/><text x="42.6390%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,880,201 samples, 1.42%)</title><rect x="42.7678%" y="117" width="1.4246%" height="15" fill="rgb(231,138,38)"/><text x="43.0178%" y="127.50"></text></g><g><title>trait_impls_of (1,065,562 samples, 0.31%)</title><rect x="44.2098%" y="133" width="0.3111%" height="15" fill="rgb(231,145,46)"/><text x="44.4598%" y="143.50"></text></g><g><title>coherent_trait (16,350,121 samples, 4.77%)</title><rect x="39.7483%" y="165" width="4.7730%" height="15" fill="rgb(251,118,11)"/><text x="39.9983%" y="175.50">cohere..</text></g><g><title>specialization_graph_of (15,584,733 samples, 4.55%)</title><rect x="39.9718%" y="149" width="4.5495%" height="15" fill="rgb(217,147,25)"/><text x="40.2218%" y="159.50">speci..</text></g><g><title>coherence_checking (16,470,872 samples, 4.81%)</title><rect x="39.7405%" y="181" width="4.8082%" height="15" fill="rgb(247,81,37)"/><text x="39.9905%" y="191.50">cohere..</text></g><g><title>associated_items (360,883 samples, 0.11%)</title><rect x="55.2780%" y="133" width="0.1053%" height="15" fill="rgb(209,12,38)"/><text x="55.5280%" y="143.50"></text></g><g><title>dropck_outlives (517,327 samples, 0.15%)</title><rect x="55.4035%" y="133" width="0.1510%" height="15" fill="rgb(227,1,9)"/><text x="55.6535%" y="143.50"></text></g><g><title>predicates_of (406,203 samples, 0.12%)</title><rect x="56.5236%" y="117" width="0.1186%" height="15" fill="rgb(248,47,43)"/><text x="56.7736%" y="127.50"></text></g><g><title>trait_impls_of (618,707 samples, 0.18%)</title><rect x="56.7437%" y="117" width="0.1806%" height="15" fill="rgb(221,10,30)"/><text x="56.9937%" y="127.50"></text></g><g><title>evaluate_obligation (4,697,749 samples, 1.37%)</title><rect x="55.5546%" y="133" width="1.3714%" height="15" fill="rgb(210,229,1)"/><text x="55.8046%" y="143.50"></text></g><g><title>predicates_of (381,324 samples, 0.11%)</title><rect x="57.3435%" y="133" width="0.1113%" height="15" fill="rgb(222,148,37)"/><text x="57.5935%" y="143.50"></text></g><g><title>associated_item (392,424 samples, 0.11%)</title><rect x="73.3746%" y="101" width="0.1146%" height="15" fill="rgb(234,67,33)"/><text x="73.6246%" y="111.50"></text></g><g><title>associated_items (537,628 samples, 0.16%)</title><rect x="73.3372%" y="117" width="0.1569%" height="15" fill="rgb(247,98,35)"/><text x="73.5872%" y="127.50"></text></g><g><title>dropck_outlives (1,240,343 samples, 0.36%)</title><rect x="73.5125%" y="117" width="0.3621%" height="15" fill="rgb(247,138,52)"/><text x="73.7625%" y="127.50"></text></g><g><title>evaluate_obligation (3,188,886 samples, 0.93%)</title><rect x="73.8746%" y="117" width="0.9309%" height="15" fill="rgb(213,79,30)"/><text x="74.1246%" y="127.50"></text></g><g><title>is_copy_raw (357,593 samples, 0.10%)</title><rect x="74.9965%" y="117" width="0.1044%" height="15" fill="rgb(246,177,23)"/><text x="75.2465%" y="127.50"></text></g><g><title>method_autoderef_steps (371,095 samples, 0.11%)</title><rect x="75.2211%" y="117" width="0.1083%" height="15" fill="rgb(230,62,27)"/><text x="75.4711%" y="127.50"></text></g><g><title>predicates_of (524,024 samples, 0.15%)</title><rect x="75.3370%" y="117" width="0.1530%" height="15" fill="rgb(216,154,8)"/><text x="75.5870%" y="127.50"></text></g><g><title>predicates_defined_on (387,202 samples, 0.11%)</title><rect x="75.3769%" y="101" width="0.1130%" height="15" fill="rgb(244,35,45)"/><text x="75.6269%" y="111.50"></text></g><g><title>typeck (61,902,515 samples, 18.07%)</title><rect x="57.5059%" y="133" width="18.0707%" height="15" fill="rgb(251,115,12)"/><text x="57.7559%" y="143.50">typeck</text></g><g><title>item_bodies_checking (106,312,584 samples, 31.04%)</title><rect x="44.5626%" y="181" width="31.0350%" height="15" fill="rgb(240,54,50)"/><text x="44.8126%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (106,308,274 samples, 31.03%)</title><rect x="44.5639%" y="165" width="31.0338%" height="15" fill="rgb(233,84,52)"/><text x="44.8139%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (106,134,072 samples, 30.98%)</title><rect x="44.6147%" y="149" width="30.9829%" height="15" fill="rgb(207,117,47)"/><text x="44.8647%" y="159.50">typeck</text></g><g><title>mir_borrowck (403,735 samples, 0.12%)</title><rect x="76.8338%" y="101" width="0.1179%" height="15" fill="rgb(249,43,39)"/><text x="77.0838%" y="111.50"></text></g><g><title>mir_promoted (380,655 samples, 0.11%)</title><rect x="76.9516%" y="101" width="0.1111%" height="15" fill="rgb(209,38,44)"/><text x="77.2016%" y="111.50"></text></g><g><title>mir_borrowck (3,287,946 samples, 0.96%)</title><rect x="76.3425%" y="117" width="0.9598%" height="15" fill="rgb(236,212,23)"/><text x="76.5925%" y="127.50"></text></g><g><title>type_op_prove_predicate (521,374 samples, 0.15%)</title><rect x="77.1501%" y="101" width="0.1522%" height="15" fill="rgb(242,79,21)"/><text x="77.4001%" y="111.50"></text></g><g><title>associated_items (466,256 samples, 0.14%)</title><rect x="79.2448%" y="37" width="0.1361%" height="15" fill="rgb(211,96,35)"/><text x="79.4948%" y="47.50"></text></g><g><title>evaluate_obligation (1,660,488 samples, 0.48%)</title><rect x="79.4437%" y="37" width="0.4847%" height="15" fill="rgb(253,215,40)"/><text x="79.6937%" y="47.50"></text></g><g><title>mir_built (9,839,560 samples, 2.87%)</title><rect x="77.3675%" y="69" width="2.8724%" height="15" fill="rgb(211,81,21)"/><text x="77.6175%" y="79.50">mi..</text></g><g><title>typeck (9,559,547 samples, 2.79%)</title><rect x="77.4492%" y="53" width="2.7906%" height="15" fill="rgb(208,190,38)"/><text x="77.6992%" y="63.50">ty..</text></g><g><title>mir_built (771,748 samples, 0.23%)</title><rect x="80.3007%" y="53" width="0.2253%" height="15" fill="rgb(235,213,38)"/><text x="80.5507%" y="63.50"></text></g><g><title>codegen_fn_attrs (344,473 samples, 0.10%)</title><rect x="80.5300%" y="37" width="0.1006%" height="15" fill="rgb(237,122,38)"/><text x="80.7800%" y="47.50"></text></g><g><title>mir_const (11,396,477 samples, 3.33%)</title><rect x="77.3267%" y="101" width="3.3269%" height="15" fill="rgb(244,218,35)"/><text x="77.5767%" y="111.50">mir..</text></g><g><title>unsafety_check_result (11,291,996 samples, 3.30%)</title><rect x="77.3572%" y="85" width="3.2964%" height="15" fill="rgb(240,68,47)"/><text x="77.6072%" y="95.50">uns..</text></g><g><title>unsafety_check_result (1,417,046 samples, 0.41%)</title><rect x="80.2399%" y="69" width="0.4137%" height="15" fill="rgb(210,16,53)"/><text x="80.4899%" y="79.50"></text></g><g><title>unsafety_check_result (436,305 samples, 0.13%)</title><rect x="80.5262%" y="53" width="0.1274%" height="15" fill="rgb(235,124,12)"/><text x="80.7762%" y="63.50"></text></g><g><title>mir_promoted (11,489,488 samples, 3.35%)</title><rect x="77.3023%" y="117" width="3.3540%" height="15" fill="rgb(224,169,11)"/><text x="77.5523%" y="127.50">mir..</text></g><g><title>item_types_checking (17,477,464 samples, 5.10%)</title><rect x="75.5977%" y="181" width="5.1021%" height="15" fill="rgb(250,166,2)"/><text x="75.8477%" y="191.50">item_t..</text></g><g><title>check_mod_item_types (17,468,794 samples, 5.10%)</title><rect x="75.6002%" y="165" width="5.0995%" height="15" fill="rgb(242,216,29)"/><text x="75.8502%" y="175.50">check_..</text></g><g><title>type_of (15,849,146 samples, 4.63%)</title><rect x="76.0730%" y="149" width="4.6267%" height="15" fill="rgb(230,116,27)"/><text x="76.3230%" y="159.50">type_..</text></g><g><title>mir_borrowck (15,824,706 samples, 4.62%)</title><rect x="76.0801%" y="133" width="4.6196%" height="15" fill="rgb(228,99,48)"/><text x="76.3301%" y="143.50">mir_b..</text></g><g><title>fn_sig (464,223 samples, 0.14%)</title><rect x="80.8404%" y="149" width="0.1355%" height="15" fill="rgb(253,11,6)"/><text x="81.0904%" y="159.50"></text></g><g><title>named_region_map (369,716 samples, 0.11%)</title><rect x="81.1255%" y="133" width="0.1079%" height="15" fill="rgb(247,143,39)"/><text x="81.3755%" y="143.50"></text></g><g><title>generics_of (904,361 samples, 0.26%)</title><rect x="80.9759%" y="149" width="0.2640%" height="15" fill="rgb(236,97,10)"/><text x="81.2259%" y="159.50"></text></g><g><title>late_bound_vars_map (377,493 samples, 0.11%)</title><rect x="81.4261%" y="101" width="0.1102%" height="15" fill="rgb(233,208,19)"/><text x="81.6761%" y="111.50"></text></g><g><title>resolve_lifetimes (373,673 samples, 0.11%)</title><rect x="81.4273%" y="85" width="0.1091%" height="15" fill="rgb(216,164,2)"/><text x="81.6773%" y="95.50"></text></g><g><title>explicit_predicates_of (709,066 samples, 0.21%)</title><rect x="81.3375%" y="117" width="0.2070%" height="15" fill="rgb(220,129,5)"/><text x="81.5875%" y="127.50"></text></g><g><title>predicates_of (1,334,545 samples, 0.39%)</title><rect x="81.2771%" y="149" width="0.3896%" height="15" fill="rgb(242,17,10)"/><text x="81.5271%" y="159.50"></text></g><g><title>predicates_defined_on (1,258,704 samples, 0.37%)</title><rect x="81.2992%" y="133" width="0.3674%" height="15" fill="rgb(242,107,0)"/><text x="81.5492%" y="143.50"></text></g><g><title>inferred_outlives_of (418,495 samples, 0.12%)</title><rect x="81.5445%" y="117" width="0.1222%" height="15" fill="rgb(251,28,31)"/><text x="81.7945%" y="127.50"></text></g><g><title>inferred_outlives_crate (385,384 samples, 0.11%)</title><rect x="81.5542%" y="101" width="0.1125%" height="15" fill="rgb(233,223,10)"/><text x="81.8042%" y="111.50"></text></g><g><title>type_collecting (3,493,398 samples, 1.02%)</title><rect x="80.7014%" y="181" width="1.0198%" height="15" fill="rgb(215,21,27)"/><text x="80.9514%" y="191.50"></text></g><g><title>collect_mod_item_types (3,477,398 samples, 1.02%)</title><rect x="80.7061%" y="165" width="1.0151%" height="15" fill="rgb(232,23,21)"/><text x="80.9561%" y="175.50"></text></g><g><title>check_impl_item_well_formed (3,571,552 samples, 1.04%)</title><rect x="81.8286%" y="165" width="1.0426%" height="15" fill="rgb(244,5,23)"/><text x="82.0786%" y="175.50"></text></g><g><title>region_scope_tree (620,906 samples, 0.18%)</title><rect x="82.6900%" y="149" width="0.1813%" height="15" fill="rgb(226,81,46)"/><text x="82.9400%" y="159.50"></text></g><g><title>evaluate_obligation (429,347 samples, 0.13%)</title><rect x="83.7616%" y="149" width="0.1253%" height="15" fill="rgb(247,70,30)"/><text x="84.0116%" y="159.50"></text></g><g><title>param_env (419,347 samples, 0.12%)</title><rect x="83.9825%" y="149" width="0.1224%" height="15" fill="rgb(212,68,19)"/><text x="84.2325%" y="159.50"></text></g><g><title>region_scope_tree (409,111 samples, 0.12%)</title><rect x="84.1488%" y="149" width="0.1194%" height="15" fill="rgb(240,187,13)"/><text x="84.3988%" y="159.50"></text></g><g><title>check_item_well_formed (4,957,163 samples, 1.45%)</title><rect x="82.8713%" y="165" width="1.4471%" height="15" fill="rgb(223,113,26)"/><text x="83.1213%" y="175.50"></text></g><g><title>analysis (288,063,532 samples, 84.09%)</title><rect x="0.2410%" y="213" width="84.0923%" height="15" fill="rgb(206,192,2)"/><text x="0.4910%" y="223.50">analysis</text></g><g><title>type_check_crate (152,903,119 samples, 44.64%)</title><rect x="39.6974%" y="197" width="44.6359%" height="15" fill="rgb(241,108,4)"/><text x="39.9474%" y="207.50">type_check_crate</text></g><g><title>wf_checking (8,932,849 samples, 2.61%)</title><rect x="81.7256%" y="181" width="2.6077%" height="15" fill="rgb(247,173,49)"/><text x="81.9756%" y="191.50">wf..</text></g><g><title>codegen_crate (605,786 samples, 0.18%)</title><rect x="84.3371%" y="213" width="0.1768%" height="15" fill="rgb(224,114,35)"/><text x="84.5871%" y="223.50"></text></g><g><title>metadata_register_crate (2,802,221 samples, 0.82%)</title><rect x="92.5697%" y="165" width="0.8180%" height="15" fill="rgb(245,159,27)"/><text x="92.8197%" y="175.50"></text></g><g><title>metadata_register_crate (982,350 samples, 0.29%)</title><rect x="93.1010%" y="149" width="0.2868%" height="15" fill="rgb(245,172,44)"/><text x="93.3510%" y="159.50"></text></g><g><title>macro_expand_crate (30,236,704 samples, 8.83%)</title><rect x="84.7306%" y="197" width="8.8268%" height="15" fill="rgb(236,23,11)"/><text x="84.9806%" y="207.50">macro_expand..</text></g><g><title>expand_crate (30,221,044 samples, 8.82%)</title><rect x="84.7351%" y="181" width="8.8222%" height="15" fill="rgb(205,117,38)"/><text x="84.9851%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (580,906 samples, 0.17%)</title><rect x="93.3877%" y="165" width="0.1696%" height="15" fill="rgb(237,72,25)"/><text x="93.6377%" y="175.50"></text></g><g><title>late_resolve_crate (3,780,221 samples, 1.10%)</title><rect x="93.7074%" y="181" width="1.1035%" height="15" fill="rgb(244,70,9)"/><text x="93.9574%" y="191.50"></text></g><g><title>configure_and_expand (35,481,272 samples, 10.36%)</title><rect x="84.5140%" y="213" width="10.3578%" height="15" fill="rgb(217,125,39)"/><text x="84.7640%" y="223.50">configure_and_e..</text></g><g><title>resolve_crate (4,295,318 samples, 1.25%)</title><rect x="93.6178%" y="197" width="1.2539%" height="15" fill="rgb(235,36,10)"/><text x="93.8678%" y="207.50"></text></g><g><title>drop_ast (382,734 samples, 0.11%)</title><rect x="94.8717%" y="213" width="0.1117%" height="15" fill="rgb(251,123,47)"/><text x="95.1217%" y="223.50"></text></g><g><title>early_lint_checks (751,528 samples, 0.22%)</title><rect x="94.9905%" y="213" width="0.2194%" height="15" fill="rgb(221,13,13)"/><text x="95.2405%" y="223.50"></text></g><g><title>free_global_ctxt (4,955,115 samples, 1.45%)</title><rect x="95.2099%" y="213" width="1.4465%" height="15" fill="rgb(238,131,9)"/><text x="95.4599%" y="223.50"></text></g><g><title>generate_crate_metadata (1,912,271 samples, 0.56%)</title><rect x="96.6564%" y="213" width="0.5582%" height="15" fill="rgb(211,50,8)"/><text x="96.9064%" y="223.50"></text></g><g><title>hir_lowering (5,724,463 samples, 1.67%)</title><rect x="97.2147%" y="213" width="1.6711%" height="15" fill="rgb(245,182,24)"/><text x="97.4647%" y="223.50"></text></g><g><title>parse_crate (1,776,090 samples, 0.52%)</title><rect x="98.9053%" y="213" width="0.5185%" height="15" fill="rgb(242,14,37)"/><text x="99.1553%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,216,444 samples, 0.36%)</title><rect x="99.4922%" y="213" width="0.3551%" height="15" fill="rgb(246,228,12)"/><text x="99.7422%" y="223.50"></text></g><g><title>all (342,556,554 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (342,556,554 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (400,775 samples, 0.12%)</title><rect x="99.8830%" y="213" width="0.1170%" height="15" fill="rgb(230,59,30)"/><text x="100.1330%" y="223.50"></text></g></svg></svg>