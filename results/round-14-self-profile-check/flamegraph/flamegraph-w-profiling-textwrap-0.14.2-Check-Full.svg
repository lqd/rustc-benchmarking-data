<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (256,873 samples, 0.12%)</title><rect x="11.9345%" y="197" width="0.1191%" height="15" fill="rgb(227,0,7)"/><text x="12.1845%" y="207.50"></text></g><g><title>param_env (574,419 samples, 0.27%)</title><rect x="13.3452%" y="165" width="0.2663%" height="15" fill="rgb(217,0,24)"/><text x="13.5952%" y="175.50"></text></g><g><title>item_attrs (621,022 samples, 0.29%)</title><rect x="14.0324%" y="133" width="0.2879%" height="15" fill="rgb(221,193,54)"/><text x="14.2824%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (602,781 samples, 0.28%)</title><rect x="14.0408%" y="117" width="0.2794%" height="15" fill="rgb(248,212,6)"/><text x="14.2908%" y="127.50"></text></g><g><title>codegen_fn_attrs (795,854 samples, 0.37%)</title><rect x="13.9631%" y="149" width="0.3690%" height="15" fill="rgb(208,68,35)"/><text x="14.2131%" y="159.50"></text></g><g><title>is_copy_raw (256,392 samples, 0.12%)</title><rect x="16.5825%" y="133" width="0.1189%" height="15" fill="rgb(232,128,0)"/><text x="16.8325%" y="143.50"></text></g><g><title>adt_drop_tys (452,635 samples, 0.21%)</title><rect x="16.8189%" y="117" width="0.2098%" height="15" fill="rgb(207,160,47)"/><text x="17.0689%" y="127.50"></text></g><g><title>is_copy_raw (1,338,524 samples, 0.62%)</title><rect x="17.0287%" y="117" width="0.6205%" height="15" fill="rgb(228,23,34)"/><text x="17.2787%" y="127.50"></text></g><g><title>evaluate_obligation (971,353 samples, 0.45%)</title><rect x="17.1990%" y="101" width="0.4503%" height="15" fill="rgb(218,30,26)"/><text x="17.4490%" y="111.50"></text></g><g><title>needs_drop_raw (2,072,214 samples, 0.96%)</title><rect x="16.7029%" y="133" width="0.9607%" height="15" fill="rgb(220,122,19)"/><text x="16.9529%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,200,250 samples, 0.56%)</title><rect x="17.8521%" y="117" width="0.5564%" height="15" fill="rgb(250,228,42)"/><text x="18.1021%" y="127.50"></text></g><g><title>evaluate_obligation (256,412 samples, 0.12%)</title><rect x="18.2897%" y="101" width="0.1189%" height="15" fill="rgb(240,193,28)"/><text x="18.5397%" y="111.50"></text></g><g><title>impl_parent (268,882 samples, 0.12%)</title><rect x="18.7658%" y="101" width="0.1247%" height="15" fill="rgb(216,20,37)"/><text x="19.0158%" y="111.50"></text></g><g><title>specialization_graph_of (1,453,426 samples, 0.67%)</title><rect x="18.4794%" y="117" width="0.6738%" height="15" fill="rgb(206,188,39)"/><text x="18.7294%" y="127.50"></text></g><g><title>impl_trait_ref (566,886 samples, 0.26%)</title><rect x="18.8904%" y="101" width="0.2628%" height="15" fill="rgb(217,207,13)"/><text x="19.1404%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (489,206 samples, 0.23%)</title><rect x="18.9264%" y="85" width="0.2268%" height="15" fill="rgb(231,73,38)"/><text x="19.1764%" y="95.50"></text></g><g><title>resolve_instance (3,351,586 samples, 1.55%)</title><rect x="17.6636%" y="133" width="1.5538%" height="15" fill="rgb(225,20,46)"/><text x="17.9136%" y="143.50"></text></g><g><title>thir_body (1,720,013 samples, 0.80%)</title><rect x="19.2395%" y="133" width="0.7974%" height="15" fill="rgb(210,31,41)"/><text x="19.4895%" y="143.50"></text></g><g><title>mir_const (15,715,508 samples, 7.29%)</title><rect x="12.7698%" y="181" width="7.2856%" height="15" fill="rgb(221,200,47)"/><text x="13.0198%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (13,899,857 samples, 6.44%)</title><rect x="13.6115%" y="165" width="6.4439%" height="15" fill="rgb(226,26,5)"/><text x="13.8615%" y="175.50">unsafety..</text></g><g><title>mir_built (12,345,545 samples, 5.72%)</title><rect x="14.3321%" y="149" width="5.7233%" height="15" fill="rgb(249,33,26)"/><text x="14.5821%" y="159.50">mir_bui..</text></g><g><title>is_freeze_raw (360,323 samples, 0.17%)</title><rect x="20.1787%" y="165" width="0.1670%" height="15" fill="rgb(235,183,28)"/><text x="20.4287%" y="175.50"></text></g><g><title>evaluate_obligation (354,133 samples, 0.16%)</title><rect x="20.1815%" y="149" width="0.1642%" height="15" fill="rgb(221,5,38)"/><text x="20.4315%" y="159.50"></text></g><g><title>mir_const (299,052 samples, 0.14%)</title><rect x="20.3475%" y="165" width="0.1386%" height="15" fill="rgb(247,18,42)"/><text x="20.5975%" y="175.50"></text></g><g><title>unsafety_check_result (232,532 samples, 0.11%)</title><rect x="20.3783%" y="149" width="0.1078%" height="15" fill="rgb(241,131,45)"/><text x="20.6283%" y="159.50"></text></g><g><title>mir_const_qualif (968,682 samples, 0.45%)</title><rect x="20.0554%" y="181" width="0.4491%" height="15" fill="rgb(249,31,29)"/><text x="20.3054%" y="191.50"></text></g><g><title>mir_promoted (17,938,362 samples, 8.32%)</title><rect x="12.1885%" y="197" width="8.3161%" height="15" fill="rgb(225,111,53)"/><text x="12.4385%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,560,759 samples, 0.72%)</title><rect x="20.5046%" y="197" width="0.7236%" height="15" fill="rgb(238,160,17)"/><text x="20.7546%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (2,567,679 samples, 1.19%)</title><rect x="21.2282%" y="197" width="1.1904%" height="15" fill="rgb(214,148,48)"/><text x="21.4782%" y="207.50"></text></g><g><title>normalize_projection_ty (1,721,949 samples, 0.80%)</title><rect x="21.6202%" y="181" width="0.7983%" height="15" fill="rgb(232,36,49)"/><text x="21.8702%" y="191.50"></text></g><g><title>type_op_normalize_predicate (329,447 samples, 0.15%)</title><rect x="22.4185%" y="197" width="0.1527%" height="15" fill="rgb(209,103,24)"/><text x="22.6685%" y="207.50"></text></g><g><title>type_op_prove_predicate (6,945,444 samples, 3.22%)</title><rect x="22.6091%" y="197" width="3.2199%" height="15" fill="rgb(229,88,8)"/><text x="22.8591%" y="207.50">typ..</text></g><g><title>evaluate_obligation (251,312 samples, 0.12%)</title><rect x="25.7125%" y="181" width="0.1165%" height="15" fill="rgb(213,181,19)"/><text x="25.9625%" y="191.50"></text></g><g><title>MIR_borrow_checking (54,792,240 samples, 25.40%)</title><rect x="0.4364%" y="229" width="25.4013%" height="15" fill="rgb(254,191,54)"/><text x="0.6864%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,619,908 samples, 25.32%)</title><rect x="0.5163%" y="213" width="25.3214%" height="15" fill="rgb(241,83,37)"/><text x="0.7663%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (289,203 samples, 0.13%)</title><rect x="25.8377%" y="229" width="0.1341%" height="15" fill="rgb(233,36,39)"/><text x="26.0877%" y="239.50"></text></g><g><title>hir_module_items (243,875 samples, 0.11%)</title><rect x="25.9718%" y="229" width="0.1131%" height="15" fill="rgb(226,3,54)"/><text x="26.2218%" y="239.50"></text></g><g><title>should_inherit_track_caller (239,471 samples, 0.11%)</title><rect x="26.3624%" y="181" width="0.1110%" height="15" fill="rgb(245,192,40)"/><text x="26.6124%" y="191.50"></text></g><g><title>codegen_fn_attrs (443,683 samples, 0.21%)</title><rect x="26.2735%" y="197" width="0.2057%" height="15" fill="rgb(238,167,29)"/><text x="26.5235%" y="207.50"></text></g><g><title>check_mod_attrs (820,931 samples, 0.38%)</title><rect x="26.0987%" y="213" width="0.3806%" height="15" fill="rgb(232,182,51)"/><text x="26.3487%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (448,045 samples, 0.21%)</title><rect x="26.6189%" y="213" width="0.2077%" height="15" fill="rgb(231,60,39)"/><text x="26.8689%" y="223.50"></text></g><g><title>misc_checking_1 (1,666,389 samples, 0.77%)</title><rect x="26.0854%" y="229" width="0.7725%" height="15" fill="rgb(208,69,12)"/><text x="26.3354%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (991,271 samples, 0.46%)</title><rect x="26.8588%" y="213" width="0.4595%" height="15" fill="rgb(235,93,37)"/><text x="27.1088%" y="223.50"></text></g><g><title>check_mod_liveness (827,560 samples, 0.38%)</title><rect x="26.9347%" y="197" width="0.3837%" height="15" fill="rgb(213,116,39)"/><text x="27.1847%" y="207.50"></text></g><g><title>eval_to_const_value_raw (424,895 samples, 0.20%)</title><rect x="27.6824%" y="181" width="0.1970%" height="15" fill="rgb(222,207,29)"/><text x="27.9324%" y="191.50"></text></g><g><title>eval_to_const_value_raw (422,485 samples, 0.20%)</title><rect x="27.6835%" y="165" width="0.1959%" height="15" fill="rgb(206,96,30)"/><text x="27.9335%" y="175.50"></text></g><g><title>eval_to_allocation_raw (417,235 samples, 0.19%)</title><rect x="27.6860%" y="149" width="0.1934%" height="15" fill="rgb(218,138,4)"/><text x="27.9360%" y="159.50"></text></g><g><title>mir_for_ctfe (278,443 samples, 0.13%)</title><rect x="27.7503%" y="133" width="0.1291%" height="15" fill="rgb(250,191,14)"/><text x="28.0003%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (239,243 samples, 0.11%)</title><rect x="27.7685%" y="117" width="0.1109%" height="15" fill="rgb(239,60,40)"/><text x="28.0185%" y="127.50"></text></g><g><title>misc_checking_2 (2,375,926 samples, 1.10%)</title><rect x="26.8579%" y="229" width="1.1015%" height="15" fill="rgb(206,27,48)"/><text x="27.1079%" y="239.50"></text></g><g><title>match_checking (1,382,765 samples, 0.64%)</title><rect x="27.3183%" y="213" width="0.6410%" height="15" fill="rgb(225,35,8)"/><text x="27.5683%" y="223.50"></text></g><g><title>check_match (1,336,525 samples, 0.62%)</title><rect x="27.3398%" y="197" width="0.6196%" height="15" fill="rgb(250,213,24)"/><text x="27.5898%" y="207.50"></text></g><g><title>check_private_in_public (279,613 samples, 0.13%)</title><rect x="27.9639%" y="213" width="0.1296%" height="15" fill="rgb(247,123,22)"/><text x="28.2139%" y="223.50"></text></g><g><title>death_checking (643,438 samples, 0.30%)</title><rect x="28.0935%" y="213" width="0.2983%" height="15" fill="rgb(231,138,38)"/><text x="28.3435%" y="223.50"></text></g><g><title>eval_to_const_value_raw (275,042 samples, 0.13%)</title><rect x="28.9383%" y="181" width="0.1275%" height="15" fill="rgb(231,145,46)"/><text x="29.1883%" y="191.50"></text></g><g><title>eval_to_const_value_raw (269,672 samples, 0.13%)</title><rect x="28.9408%" y="165" width="0.1250%" height="15" fill="rgb(251,118,11)"/><text x="29.1908%" y="175.50"></text></g><g><title>eval_to_allocation_raw (257,272 samples, 0.12%)</title><rect x="28.9465%" y="149" width="0.1193%" height="15" fill="rgb(217,147,25)"/><text x="29.1965%" y="159.50"></text></g><g><title>param_env (232,434 samples, 0.11%)</title><rect x="29.0658%" y="181" width="0.1078%" height="15" fill="rgb(247,81,37)"/><text x="29.3158%" y="191.50"></text></g><g><title>crate_lints (2,912,283 samples, 1.35%)</title><rect x="28.3925%" y="197" width="1.3501%" height="15" fill="rgb(209,12,38)"/><text x="28.6425%" y="207.50"></text></g><g><title>type_of (1,099,444 samples, 0.51%)</title><rect x="29.2329%" y="181" width="0.5097%" height="15" fill="rgb(227,1,9)"/><text x="29.4829%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (870,271 samples, 0.40%)</title><rect x="29.3391%" y="165" width="0.4035%" height="15" fill="rgb(248,47,43)"/><text x="29.5891%" y="175.50"></text></g><g><title>lint_checking (3,663,751 samples, 1.70%)</title><rect x="28.3918%" y="213" width="1.6985%" height="15" fill="rgb(221,10,30)"/><text x="28.6418%" y="223.50"></text></g><g><title>module_lints (749,968 samples, 0.35%)</title><rect x="29.7426%" y="197" width="0.3477%" height="15" fill="rgb(210,229,1)"/><text x="29.9926%" y="207.50"></text></g><g><title>lint_mod (743,108 samples, 0.34%)</title><rect x="29.7458%" y="181" width="0.3445%" height="15" fill="rgb(222,148,37)"/><text x="29.9958%" y="191.50"></text></g><g><title>privacy_access_levels (473,525 samples, 0.22%)</title><rect x="30.0903%" y="213" width="0.2195%" height="15" fill="rgb(234,67,33)"/><text x="30.3403%" y="223.50"></text></g><g><title>privacy_checking_modules (1,682,008 samples, 0.78%)</title><rect x="30.3098%" y="213" width="0.7798%" height="15" fill="rgb(247,98,35)"/><text x="30.5598%" y="223.50"></text></g><g><title>check_mod_privacy (1,676,388 samples, 0.78%)</title><rect x="30.3124%" y="197" width="0.7772%" height="15" fill="rgb(247,138,52)"/><text x="30.5624%" y="207.50"></text></g><g><title>misc_checking_3 (6,782,615 samples, 3.14%)</title><rect x="27.9594%" y="229" width="3.1444%" height="15" fill="rgb(213,79,30)"/><text x="28.2094%" y="239.50">mis..</text></g><g><title>adt_destructor (295,823 samples, 0.14%)</title><rect x="31.1780%" y="181" width="0.1371%" height="15" fill="rgb(246,177,23)"/><text x="31.4280%" y="191.50"></text></g><g><title>coherent_trait (290,853 samples, 0.13%)</title><rect x="31.1803%" y="165" width="0.1348%" height="15" fill="rgb(230,62,27)"/><text x="31.4303%" y="175.50"></text></g><g><title>specialization_graph_of (289,813 samples, 0.13%)</title><rect x="31.1808%" y="149" width="0.1344%" height="15" fill="rgb(216,154,8)"/><text x="31.4308%" y="159.50"></text></g><g><title>impl_parent (2,504,014 samples, 1.16%)</title><rect x="33.3414%" y="165" width="1.1608%" height="15" fill="rgb(244,35,45)"/><text x="33.5914%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,474,003 samples, 0.68%)</title><rect x="33.8189%" y="149" width="0.6833%" height="15" fill="rgb(251,115,12)"/><text x="34.0689%" y="159.50"></text></g><g><title>impl_trait_ref (5,730,924 samples, 2.66%)</title><rect x="34.5022%" y="165" width="2.6568%" height="15" fill="rgb(240,54,50)"/><text x="34.7522%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,535,981 samples, 2.10%)</title><rect x="35.0562%" y="149" width="2.1028%" height="15" fill="rgb(233,84,52)"/><text x="35.3062%" y="159.50">m..</text></g><g><title>trait_impls_of (816,721 samples, 0.38%)</title><rect x="37.1968%" y="165" width="0.3786%" height="15" fill="rgb(207,117,47)"/><text x="37.4468%" y="175.50"></text></g><g><title>implementations_of_trait (246,493 samples, 0.11%)</title><rect x="37.4612%" y="149" width="0.1143%" height="15" fill="rgb(249,43,39)"/><text x="37.7112%" y="159.50"></text></g><g><title>coherent_trait (13,864,414 samples, 6.43%)</title><rect x="31.1532%" y="197" width="6.4274%" height="15" fill="rgb(209,38,44)"/><text x="31.4032%" y="207.50">coherent..</text></g><g><title>specialization_graph_of (13,342,779 samples, 6.19%)</title><rect x="31.3950%" y="181" width="6.1856%" height="15" fill="rgb(236,212,23)"/><text x="31.6450%" y="191.50">speciali..</text></g><g><title>coherence_checking (13,956,915 samples, 6.47%)</title><rect x="31.1434%" y="213" width="6.4703%" height="15" fill="rgb(242,79,21)"/><text x="31.3934%" y="223.50">coherenc..</text></g><g><title>associated_items (245,833 samples, 0.11%)</title><rect x="48.9040%" y="165" width="0.1140%" height="15" fill="rgb(211,96,35)"/><text x="49.1540%" y="175.50"></text></g><g><title>dropck_outlives (646,559 samples, 0.30%)</title><rect x="49.0417%" y="165" width="0.2997%" height="15" fill="rgb(253,215,40)"/><text x="49.2917%" y="175.50"></text></g><g><title>evaluate_obligation (2,614,750 samples, 1.21%)</title><rect x="49.3415%" y="165" width="1.2122%" height="15" fill="rgb(211,81,21)"/><text x="49.5915%" y="175.50"></text></g><g><title>evaluate_obligation (350,364 samples, 0.16%)</title><rect x="50.9520%" y="149" width="0.1624%" height="15" fill="rgb(208,190,38)"/><text x="51.2020%" y="159.50"></text></g><g><title>method_autoderef_steps (745,264 samples, 0.35%)</title><rect x="50.7792%" y="165" width="0.3455%" height="15" fill="rgb(235,213,38)"/><text x="51.0292%" y="175.50"></text></g><g><title>predicates_of (250,804 samples, 0.12%)</title><rect x="51.1707%" y="165" width="0.1163%" height="15" fill="rgb(237,122,38)"/><text x="51.4207%" y="175.50"></text></g><g><title>associated_item (266,344 samples, 0.12%)</title><rect x="61.7289%" y="133" width="0.1235%" height="15" fill="rgb(244,218,35)"/><text x="61.9789%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (219,074 samples, 0.10%)</title><rect x="61.7508%" y="117" width="0.1016%" height="15" fill="rgb(240,68,47)"/><text x="62.0008%" y="127.50"></text></g><g><title>associated_items (403,655 samples, 0.19%)</title><rect x="61.6763%" y="149" width="0.1871%" height="15" fill="rgb(210,16,53)"/><text x="61.9263%" y="159.50"></text></g><g><title>dropck_outlives (379,933 samples, 0.18%)</title><rect x="61.8922%" y="149" width="0.1761%" height="15" fill="rgb(235,124,12)"/><text x="62.1422%" y="159.50"></text></g><g><title>specializes (359,183 samples, 0.17%)</title><rect x="63.6615%" y="133" width="0.1665%" height="15" fill="rgb(224,169,11)"/><text x="63.9115%" y="143.50"></text></g><g><title>evaluate_obligation (3,995,903 samples, 1.85%)</title><rect x="62.0684%" y="149" width="1.8525%" height="15" fill="rgb(250,166,2)"/><text x="62.3184%" y="159.50">e..</text></g><g><title>generics_of (1,141,703 samples, 0.53%)</title><rect x="64.0184%" y="149" width="0.5293%" height="15" fill="rgb(242,216,29)"/><text x="64.2684%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (683,577 samples, 0.32%)</title><rect x="64.2308%" y="133" width="0.3169%" height="15" fill="rgb(230,116,27)"/><text x="64.4808%" y="143.50"></text></g><g><title>impl_trait_ref (286,803 samples, 0.13%)</title><rect x="64.6179%" y="149" width="0.1330%" height="15" fill="rgb(228,99,48)"/><text x="64.8679%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (228,001 samples, 0.11%)</title><rect x="64.6452%" y="133" width="0.1057%" height="15" fill="rgb(253,11,6)"/><text x="64.8952%" y="143.50"></text></g><g><title>method_autoderef_steps (942,903 samples, 0.44%)</title><rect x="64.9172%" y="149" width="0.4371%" height="15" fill="rgb(247,143,39)"/><text x="65.1672%" y="159.50"></text></g><g><title>evaluate_obligation (416,275 samples, 0.19%)</title><rect x="65.1614%" y="133" width="0.1930%" height="15" fill="rgb(236,97,10)"/><text x="65.4114%" y="143.50"></text></g><g><title>predicates_of (342,114 samples, 0.16%)</title><rect x="65.3653%" y="149" width="0.1586%" height="15" fill="rgb(233,208,19)"/><text x="65.6153%" y="159.50"></text></g><g><title>predicates_defined_on (238,882 samples, 0.11%)</title><rect x="65.4132%" y="133" width="0.1107%" height="15" fill="rgb(216,164,2)"/><text x="65.6632%" y="143.50"></text></g><g><title>typeck (30,953,584 samples, 14.35%)</title><rect x="51.3203%" y="165" width="14.3499%" height="15" fill="rgb(220,129,5)"/><text x="51.5703%" y="175.50">typeck</text></g><g><title>item_bodies_checking (60,519,894 samples, 28.06%)</title><rect x="37.6337%" y="213" width="28.0566%" height="15" fill="rgb(242,17,10)"/><text x="37.8837%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (60,515,514 samples, 28.05%)</title><rect x="37.6357%" y="197" width="28.0546%" height="15" fill="rgb(242,107,0)"/><text x="37.8857%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (60,411,293 samples, 28.01%)</title><rect x="37.6841%" y="181" width="28.0063%" height="15" fill="rgb(251,28,31)"/><text x="37.9341%" y="191.50">typeck</text></g><g><title>mir_borrowck (1,454,927 samples, 0.67%)</title><rect x="67.5371%" y="133" width="0.6745%" height="15" fill="rgb(233,223,10)"/><text x="67.7871%" y="143.50"></text></g><g><title>mir_borrowck (3,555,680 samples, 1.65%)</title><rect x="67.0136%" y="149" width="1.6484%" height="15" fill="rgb(215,21,27)"/><text x="67.2636%" y="159.50"></text></g><g><title>type_op_prove_predicate (539,674 samples, 0.25%)</title><rect x="68.4118%" y="133" width="0.2502%" height="15" fill="rgb(232,23,21)"/><text x="68.6618%" y="143.50"></text></g><g><title>associated_item (246,675 samples, 0.11%)</title><rect x="72.4712%" y="53" width="0.1144%" height="15" fill="rgb(244,5,23)"/><text x="72.7212%" y="63.50"></text></g><g><title>associated_items (353,965 samples, 0.16%)</title><rect x="72.4283%" y="69" width="0.1641%" height="15" fill="rgb(226,81,46)"/><text x="72.6783%" y="79.50"></text></g><g><title>adt_dtorck_constraint (243,822 samples, 0.11%)</title><rect x="72.6639%" y="53" width="0.1130%" height="15" fill="rgb(247,70,30)"/><text x="72.9139%" y="63.50"></text></g><g><title>dropck_outlives (473,034 samples, 0.22%)</title><rect x="72.6046%" y="69" width="0.2193%" height="15" fill="rgb(212,68,19)"/><text x="72.8546%" y="79.50"></text></g><g><title>generics_of (705,360 samples, 0.33%)</title><rect x="73.6665%" y="53" width="0.3270%" height="15" fill="rgb(240,187,13)"/><text x="73.9165%" y="63.50"></text></g><g><title>metadata_decode_entry_generics_of (597,829 samples, 0.28%)</title><rect x="73.7164%" y="37" width="0.2771%" height="15" fill="rgb(223,113,26)"/><text x="73.9664%" y="47.50"></text></g><g><title>impl_trait_ref (570,994 samples, 0.26%)</title><rect x="74.0054%" y="53" width="0.2647%" height="15" fill="rgb(206,192,2)"/><text x="74.2554%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (464,394 samples, 0.22%)</title><rect x="74.0548%" y="37" width="0.2153%" height="15" fill="rgb(241,108,4)"/><text x="74.3048%" y="47.50"></text></g><g><title>specializes (291,592 samples, 0.14%)</title><rect x="74.3690%" y="53" width="0.1352%" height="15" fill="rgb(247,173,49)"/><text x="74.6190%" y="63.50"></text></g><g><title>trait_impls_of (255,465 samples, 0.12%)</title><rect x="74.5120%" y="53" width="0.1184%" height="15" fill="rgb(224,114,35)"/><text x="74.7620%" y="63.50"></text></g><g><title>evaluate_obligation (3,911,831 samples, 1.81%)</title><rect x="72.8239%" y="69" width="1.8135%" height="15" fill="rgb(245,159,27)"/><text x="73.0739%" y="79.50">e..</text></g><g><title>generics_of (604,929 samples, 0.28%)</title><rect x="74.6730%" y="69" width="0.2804%" height="15" fill="rgb(245,172,44)"/><text x="74.9230%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (467,399 samples, 0.22%)</title><rect x="74.7367%" y="53" width="0.2167%" height="15" fill="rgb(236,23,11)"/><text x="74.9867%" y="63.50"></text></g><g><title>mir_built (14,445,021 samples, 6.70%)</title><rect x="68.7933%" y="101" width="6.6966%" height="15" fill="rgb(205,117,38)"/><text x="69.0433%" y="111.50">mir_built</text></g><g><title>typeck (13,928,395 samples, 6.46%)</title><rect x="69.0328%" y="85" width="6.4571%" height="15" fill="rgb(237,72,25)"/><text x="69.2828%" y="95.50">typeck</text></g><g><title>mir_built (455,575 samples, 0.21%)</title><rect x="75.5245%" y="85" width="0.2112%" height="15" fill="rgb(244,70,9)"/><text x="75.7745%" y="95.50"></text></g><g><title>mir_built (314,914 samples, 0.15%)</title><rect x="75.7780%" y="69" width="0.1460%" height="15" fill="rgb(217,125,39)"/><text x="76.0280%" y="79.50"></text></g><g><title>mir_const (15,597,024 samples, 7.23%)</title><rect x="68.6935%" y="133" width="7.2307%" height="15" fill="rgb(235,36,10)"/><text x="68.9435%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (15,471,152 samples, 7.17%)</title><rect x="68.7519%" y="117" width="7.1723%" height="15" fill="rgb(251,123,47)"/><text x="69.0019%" y="127.50">unsafety_c..</text></g><g><title>unsafety_check_result (936,680 samples, 0.43%)</title><rect x="75.4899%" y="101" width="0.4342%" height="15" fill="rgb(221,13,13)"/><text x="75.7399%" y="111.50"></text></g><g><title>unsafety_check_result (406,045 samples, 0.19%)</title><rect x="75.7359%" y="85" width="0.1882%" height="15" fill="rgb(238,131,9)"/><text x="75.9859%" y="95.50"></text></g><g><title>mir_promoted (15,671,715 samples, 7.27%)</title><rect x="68.6620%" y="149" width="7.2653%" height="15" fill="rgb(211,50,8)"/><text x="68.9120%" y="159.50">mir_promot..</text></g><g><title>type_of (21,234,336 samples, 9.84%)</title><rect x="66.4000%" y="181" width="9.8441%" height="15" fill="rgb(245,182,24)"/><text x="66.6500%" y="191.50">type_of</text></g><g><title>mir_borrowck (21,219,776 samples, 9.84%)</title><rect x="66.4068%" y="165" width="9.8373%" height="15" fill="rgb(242,14,37)"/><text x="66.6568%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (512,244 samples, 0.24%)</title><rect x="76.0067%" y="149" width="0.2375%" height="15" fill="rgb(246,228,12)"/><text x="76.2567%" y="159.50"></text></g><g><title>evaluate_obligation (1,112,212 samples, 0.52%)</title><rect x="76.4888%" y="165" width="0.5156%" height="15" fill="rgb(213,55,15)"/><text x="76.7388%" y="175.50"></text></g><g><title>item_types_checking (24,514,293 samples, 11.36%)</title><rect x="65.6903%" y="213" width="11.3647%" height="15" fill="rgb(209,9,3)"/><text x="65.9403%" y="223.50">item_types_checki..</text></g><g><title>check_mod_item_types (24,502,753 samples, 11.36%)</title><rect x="65.6957%" y="197" width="11.3593%" height="15" fill="rgb(230,59,30)"/><text x="65.9457%" y="207.50">check_mod_item_ty..</text></g><g><title>typeck (1,749,068 samples, 0.81%)</title><rect x="76.2441%" y="181" width="0.8109%" height="15" fill="rgb(209,121,21)"/><text x="76.4941%" y="191.50"></text></g><g><title>fn_sig (502,506 samples, 0.23%)</title><rect x="77.2447%" y="181" width="0.2330%" height="15" fill="rgb(220,109,13)"/><text x="77.4947%" y="191.50"></text></g><g><title>lint_levels (239,542 samples, 0.11%)</title><rect x="77.8108%" y="133" width="0.1111%" height="15" fill="rgb(232,18,1)"/><text x="78.0608%" y="143.50"></text></g><g><title>is_late_bound_map (775,176 samples, 0.36%)</title><rect x="77.5627%" y="165" width="0.3594%" height="15" fill="rgb(215,41,42)"/><text x="77.8127%" y="175.50"></text></g><g><title>resolve_lifetimes (739,136 samples, 0.34%)</title><rect x="77.5794%" y="149" width="0.3427%" height="15" fill="rgb(224,123,36)"/><text x="77.8294%" y="159.50"></text></g><g><title>named_region_map (221,087 samples, 0.10%)</title><rect x="77.9221%" y="165" width="0.1025%" height="15" fill="rgb(240,125,3)"/><text x="78.1721%" y="175.50"></text></g><g><title>generics_of (1,201,074 samples, 0.56%)</title><rect x="77.4776%" y="181" width="0.5568%" height="15" fill="rgb(205,98,50)"/><text x="77.7276%" y="191.50"></text></g><g><title>explicit_predicates_of (319,015 samples, 0.15%)</title><rect x="78.1445%" y="149" width="0.1479%" height="15" fill="rgb(205,185,37)"/><text x="78.3945%" y="159.50"></text></g><g><title>predicates_of (684,283 samples, 0.32%)</title><rect x="78.0602%" y="181" width="0.3172%" height="15" fill="rgb(238,207,15)"/><text x="78.3102%" y="191.50"></text></g><g><title>predicates_defined_on (612,472 samples, 0.28%)</title><rect x="78.0935%" y="165" width="0.2839%" height="15" fill="rgb(213,199,42)"/><text x="78.3435%" y="175.50"></text></g><g><title>type_collecting (3,465,108 samples, 1.61%)</title><rect x="77.0562%" y="213" width="1.6064%" height="15" fill="rgb(235,201,11)"/><text x="77.3062%" y="223.50"></text></g><g><title>collect_mod_item_types (3,452,868 samples, 1.60%)</title><rect x="77.0618%" y="197" width="1.6007%" height="15" fill="rgb(207,46,11)"/><text x="77.3118%" y="207.50"></text></g><g><title>type_of (608,665 samples, 0.28%)</title><rect x="78.3804%" y="181" width="0.2822%" height="15" fill="rgb(241,35,35)"/><text x="78.6304%" y="191.50"></text></g><g><title>evaluate_obligation (347,965 samples, 0.16%)</title><rect x="79.6300%" y="181" width="0.1613%" height="15" fill="rgb(243,32,47)"/><text x="79.8800%" y="191.50"></text></g><g><title>implied_outlives_bounds (231,231 samples, 0.11%)</title><rect x="79.7929%" y="181" width="0.1072%" height="15" fill="rgb(247,202,23)"/><text x="80.0429%" y="191.50"></text></g><g><title>param_env (260,805 samples, 0.12%)</title><rect x="79.9001%" y="181" width="0.1209%" height="15" fill="rgb(219,102,11)"/><text x="80.1501%" y="191.50"></text></g><g><title>check_impl_item_well_formed (2,990,106 samples, 1.39%)</title><rect x="78.7989%" y="197" width="1.3862%" height="15" fill="rgb(243,110,44)"/><text x="79.0489%" y="207.50"></text></g><g><title>region_scope_tree (339,226 samples, 0.16%)</title><rect x="80.0278%" y="181" width="0.1573%" height="15" fill="rgb(222,74,54)"/><text x="80.2778%" y="191.50"></text></g><g><title>evaluate_obligation (874,415 samples, 0.41%)</title><rect x="81.5395%" y="181" width="0.4054%" height="15" fill="rgb(216,99,12)"/><text x="81.7895%" y="191.50"></text></g><g><title>implied_outlives_bounds (255,622 samples, 0.12%)</title><rect x="81.9685%" y="181" width="0.1185%" height="15" fill="rgb(226,22,26)"/><text x="82.2185%" y="191.50"></text></g><g><title>param_env (453,224 samples, 0.21%)</title><rect x="82.0873%" y="181" width="0.2101%" height="15" fill="rgb(217,163,10)"/><text x="82.3373%" y="191.50"></text></g><g><title>region_scope_tree (403,235 samples, 0.19%)</title><rect x="82.3462%" y="181" width="0.1869%" height="15" fill="rgb(213,25,53)"/><text x="82.5962%" y="191.50"></text></g><g><title>check_item_well_formed (5,226,665 samples, 2.42%)</title><rect x="80.1851%" y="197" width="2.4230%" height="15" fill="rgb(252,105,26)"/><text x="80.4351%" y="207.50">ch..</text></g><g><title>evaluate_obligation (239,232 samples, 0.11%)</title><rect x="82.8082%" y="181" width="0.1109%" height="15" fill="rgb(220,39,43)"/><text x="83.0582%" y="191.50"></text></g><g><title>layout_of (239,742 samples, 0.11%)</title><rect x="83.2457%" y="165" width="0.1111%" height="15" fill="rgb(229,68,48)"/><text x="83.4957%" y="175.50"></text></g><g><title>predicates_of (289,892 samples, 0.13%)</title><rect x="83.3730%" y="165" width="0.1344%" height="15" fill="rgb(252,8,32)"/><text x="83.6230%" y="175.50"></text></g><g><title>predicates_defined_on (220,722 samples, 0.10%)</title><rect x="83.4051%" y="149" width="0.1023%" height="15" fill="rgb(223,20,43)"/><text x="83.6551%" y="159.50"></text></g><g><title>object_safety_violations (1,196,665 samples, 0.55%)</title><rect x="82.9645%" y="181" width="0.5548%" height="15" fill="rgb(229,81,49)"/><text x="83.2145%" y="191.50"></text></g><g><title>analysis (179,697,259 samples, 83.31%)</title><rect x="0.2413%" y="245" width="83.3064%" height="15" fill="rgb(236,28,36)"/><text x="0.4913%" y="255.50">analysis</text></g><g><title>type_check_crate (113,125,079 samples, 52.44%)</title><rect x="31.1037%" y="229" width="52.4440%" height="15" fill="rgb(249,185,26)"/><text x="31.3537%" y="239.50">type_check_crate</text></g><g><title>wf_checking (10,528,637 samples, 4.88%)</title><rect x="78.6667%" y="213" width="4.8810%" height="15" fill="rgb(249,174,33)"/><text x="78.9167%" y="223.50">wf_che..</text></g><g><title>check_trait_item_well_formed (2,026,872 samples, 0.94%)</title><rect x="82.6081%" y="197" width="0.9396%" height="15" fill="rgb(233,201,37)"/><text x="82.8581%" y="207.50"></text></g><g><title>codegen_crate (415,804 samples, 0.19%)</title><rect x="83.5509%" y="245" width="0.1928%" height="15" fill="rgb(221,78,26)"/><text x="83.8009%" y="255.50"></text></g><g><title>metadata_register_crate (1,279,384 samples, 0.59%)</title><rect x="89.2254%" y="197" width="0.5931%" height="15" fill="rgb(250,127,30)"/><text x="89.4754%" y="207.50"></text></g><g><title>metadata_register_crate (479,184 samples, 0.22%)</title><rect x="89.5964%" y="181" width="0.2221%" height="15" fill="rgb(230,49,44)"/><text x="89.8464%" y="191.50"></text></g><g><title>macro_expand_crate (12,862,803 samples, 5.96%)</title><rect x="83.9719%" y="229" width="5.9631%" height="15" fill="rgb(229,67,23)"/><text x="84.2219%" y="239.50">macro_ex..</text></g><g><title>expand_crate (12,853,163 samples, 5.96%)</title><rect x="83.9764%" y="213" width="5.9586%" height="15" fill="rgb(249,83,47)"/><text x="84.2264%" y="223.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (251,301 samples, 0.12%)</title><rect x="89.8185%" y="197" width="0.1165%" height="15" fill="rgb(215,43,3)"/><text x="90.0685%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (260,213 samples, 0.12%)</title><rect x="89.9367%" y="229" width="0.1206%" height="15" fill="rgb(238,154,13)"/><text x="90.1867%" y="239.50"></text></g><g><title>late_resolve_crate (2,820,072 samples, 1.31%)</title><rect x="90.1638%" y="213" width="1.3074%" height="15" fill="rgb(219,56,2)"/><text x="90.4138%" y="223.50"></text></g><g><title>configure_and_expand (16,858,928 samples, 7.82%)</title><rect x="83.7436%" y="245" width="7.8157%" height="15" fill="rgb(233,0,4)"/><text x="83.9936%" y="255.50">configure_a..</text></g><g><title>resolve_crate (3,239,786 samples, 1.50%)</title><rect x="90.0574%" y="229" width="1.5019%" height="15" fill="rgb(235,30,7)"/><text x="90.3074%" y="239.50"></text></g><g><title>drop_ast (435,745 samples, 0.20%)</title><rect x="91.5593%" y="245" width="0.2020%" height="15" fill="rgb(250,79,13)"/><text x="91.8093%" y="255.50"></text></g><g><title>early_lint_checks (699,018 samples, 0.32%)</title><rect x="91.7701%" y="245" width="0.3241%" height="15" fill="rgb(211,146,34)"/><text x="92.0201%" y="255.50"></text></g><g><title>free_global_ctxt (4,813,194 samples, 2.23%)</title><rect x="92.0942%" y="245" width="2.2314%" height="15" fill="rgb(228,22,38)"/><text x="92.3442%" y="255.50">f..</text></g><g><title>generate_crate_metadata (1,615,318 samples, 0.75%)</title><rect x="94.3255%" y="245" width="0.7489%" height="15" fill="rgb(235,168,5)"/><text x="94.5755%" y="255.50"></text></g><g><title>hir_lowering (4,236,986 samples, 1.96%)</title><rect x="95.0744%" y="245" width="1.9642%" height="15" fill="rgb(221,155,16)"/><text x="95.3244%" y="255.50">h..</text></g><g><title>parse_crate (4,396,459 samples, 2.04%)</title><rect x="97.0639%" y="245" width="2.0382%" height="15" fill="rgb(215,215,53)"/><text x="97.3139%" y="255.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,273,765 samples, 0.59%)</title><rect x="99.1817%" y="245" width="0.5905%" height="15" fill="rgb(223,4,10)"/><text x="99.4317%" y="255.50"></text></g><g><title>all (215,706,411 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (215,706,411 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (401,835 samples, 0.19%)</title><rect x="99.8137%" y="245" width="0.1863%" height="15" fill="rgb(234,150,53)"/><text x="100.0637%" y="255.50"></text></g></svg></svg>