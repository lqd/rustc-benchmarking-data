<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (245,063 samples, 0.18%)</title><rect x="9.6957%" y="165" width="0.1831%" height="15" fill="rgb(227,0,7)"/><text x="9.9457%" y="175.50"></text></g><g><title>item_attrs (285,695 samples, 0.21%)</title><rect x="10.2226%" y="133" width="0.2135%" height="15" fill="rgb(217,0,24)"/><text x="10.4726%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (276,515 samples, 0.21%)</title><rect x="10.2295%" y="117" width="0.2066%" height="15" fill="rgb(221,193,54)"/><text x="10.4795%" y="127.50"></text></g><g><title>codegen_fn_attrs (395,896 samples, 0.30%)</title><rect x="10.1557%" y="149" width="0.2958%" height="15" fill="rgb(248,212,6)"/><text x="10.4057%" y="159.50"></text></g><g><title>adt_drop_tys (134,590 samples, 0.10%)</title><rect x="12.4061%" y="117" width="0.1006%" height="15" fill="rgb(208,68,35)"/><text x="12.6561%" y="127.50"></text></g><g><title>needs_drop_raw (824,786 samples, 0.62%)</title><rect x="12.3510%" y="133" width="0.6163%" height="15" fill="rgb(232,128,0)"/><text x="12.6010%" y="143.50"></text></g><g><title>is_copy_raw (616,436 samples, 0.46%)</title><rect x="12.5067%" y="117" width="0.4606%" height="15" fill="rgb(207,160,47)"/><text x="12.7567%" y="127.50"></text></g><g><title>evaluate_obligation (524,025 samples, 0.39%)</title><rect x="12.5757%" y="101" width="0.3915%" height="15" fill="rgb(228,23,34)"/><text x="12.8257%" y="111.50"></text></g><g><title>impl_parent (152,152 samples, 0.11%)</title><rect x="13.2874%" y="101" width="0.1137%" height="15" fill="rgb(218,30,26)"/><text x="13.5374%" y="111.50"></text></g><g><title>specialization_graph_of (608,037 samples, 0.45%)</title><rect x="13.1144%" y="117" width="0.4543%" height="15" fill="rgb(220,122,19)"/><text x="13.3644%" y="127.50"></text></g><g><title>impl_trait_ref (224,413 samples, 0.17%)</title><rect x="13.4011%" y="101" width="0.1677%" height="15" fill="rgb(250,228,42)"/><text x="13.6511%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (169,632 samples, 0.13%)</title><rect x="13.4420%" y="85" width="0.1267%" height="15" fill="rgb(240,193,28)"/><text x="13.6920%" y="95.50"></text></g><g><title>resolve_instance (878,891 samples, 0.66%)</title><rect x="12.9672%" y="133" width="0.6567%" height="15" fill="rgb(216,20,37)"/><text x="13.2172%" y="143.50"></text></g><g><title>thir_body (1,060,314 samples, 0.79%)</title><rect x="13.6334%" y="133" width="0.7922%" height="15" fill="rgb(206,188,39)"/><text x="13.8834%" y="143.50"></text></g><g><title>mir_const (6,980,146 samples, 5.22%)</title><rect x="9.2219%" y="181" width="5.2153%" height="15" fill="rgb(217,207,13)"/><text x="9.4719%" y="191.50">mir_co..</text></g><g><title>unsafety_check_result (6,100,845 samples, 4.56%)</title><rect x="9.8788%" y="165" width="4.5583%" height="15" fill="rgb(231,73,38)"/><text x="10.1288%" y="175.50">unsaf..</text></g><g><title>mir_built (5,334,357 samples, 3.99%)</title><rect x="10.4515%" y="149" width="3.9857%" height="15" fill="rgb(225,20,46)"/><text x="10.7015%" y="159.50">mir_..</text></g><g><title>mir_const_qualif (282,473 samples, 0.21%)</title><rect x="14.4372%" y="181" width="0.2111%" height="15" fill="rgb(210,31,41)"/><text x="14.6872%" y="191.50"></text></g><g><title>mir_promoted (8,032,069 samples, 6.00%)</title><rect x="8.6477%" y="197" width="6.0013%" height="15" fill="rgb(221,200,47)"/><text x="8.8977%" y="207.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (346,403 samples, 0.26%)</title><rect x="14.6494%" y="197" width="0.2588%" height="15" fill="rgb(226,26,5)"/><text x="14.8994%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (158,051 samples, 0.12%)</title><rect x="14.9083%" y="197" width="0.1181%" height="15" fill="rgb(249,33,26)"/><text x="15.1583%" y="207.50"></text></g><g><title>type_op_normalize_predicate (140,021 samples, 0.10%)</title><rect x="15.0264%" y="197" width="0.1046%" height="15" fill="rgb(235,183,28)"/><text x="15.2764%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,434,902 samples, 1.07%)</title><rect x="15.1338%" y="197" width="1.0721%" height="15" fill="rgb(221,5,38)"/><text x="15.3838%" y="207.50"></text></g><g><title>evaluate_obligation (164,430 samples, 0.12%)</title><rect x="16.0830%" y="181" width="0.1229%" height="15" fill="rgb(247,18,42)"/><text x="16.3330%" y="191.50"></text></g><g><title>MIR_borrow_checking (20,649,441 samples, 15.43%)</title><rect x="0.7816%" y="229" width="15.4286%" height="15" fill="rgb(241,131,45)"/><text x="1.0316%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (20,575,039 samples, 15.37%)</title><rect x="0.8372%" y="213" width="15.3730%" height="15" fill="rgb(249,31,29)"/><text x="1.0872%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (152,032 samples, 0.11%)</title><rect x="16.2102%" y="229" width="0.1136%" height="15" fill="rgb(225,111,53)"/><text x="16.4602%" y="239.50"></text></g><g><title>hir_module_items (151,392 samples, 0.11%)</title><rect x="16.3238%" y="229" width="0.1131%" height="15" fill="rgb(238,160,17)"/><text x="16.5738%" y="239.50"></text></g><g><title>should_inherit_track_caller (155,691 samples, 0.12%)</title><rect x="16.7001%" y="181" width="0.1163%" height="15" fill="rgb(214,148,48)"/><text x="16.9501%" y="191.50"></text></g><g><title>codegen_fn_attrs (289,534 samples, 0.22%)</title><rect x="16.6112%" y="197" width="0.2163%" height="15" fill="rgb(232,36,49)"/><text x="16.8612%" y="207.50"></text></g><g><title>check_mod_attrs (503,946 samples, 0.38%)</title><rect x="16.4512%" y="213" width="0.3765%" height="15" fill="rgb(209,103,24)"/><text x="16.7012%" y="223.50"></text></g><g><title>lint_levels (154,872 samples, 0.12%)</title><rect x="17.0493%" y="197" width="0.1157%" height="15" fill="rgb(229,88,8)"/><text x="17.2993%" y="207.50"></text></g><g><title>lookup_deprecation_entry (134,531 samples, 0.10%)</title><rect x="17.1650%" y="197" width="0.1005%" height="15" fill="rgb(213,181,19)"/><text x="17.4150%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (536,745 samples, 0.40%)</title><rect x="16.9338%" y="213" width="0.4010%" height="15" fill="rgb(254,191,54)"/><text x="17.1838%" y="223.50"></text></g><g><title>misc_checking_1 (1,237,544 samples, 0.92%)</title><rect x="16.4375%" y="229" width="0.9247%" height="15" fill="rgb(241,83,37)"/><text x="16.6875%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (407,944 samples, 0.30%)</title><rect x="17.3632%" y="213" width="0.3048%" height="15" fill="rgb(233,36,39)"/><text x="17.6132%" y="223.50"></text></g><g><title>check_mod_liveness (316,363 samples, 0.24%)</title><rect x="17.4317%" y="197" width="0.2364%" height="15" fill="rgb(226,3,54)"/><text x="17.6817%" y="207.50"></text></g><g><title>misc_checking_2 (956,940 samples, 0.71%)</title><rect x="17.3621%" y="229" width="0.7150%" height="15" fill="rgb(245,192,40)"/><text x="17.6121%" y="239.50"></text></g><g><title>match_checking (547,496 samples, 0.41%)</title><rect x="17.6680%" y="213" width="0.4091%" height="15" fill="rgb(238,167,29)"/><text x="17.9180%" y="223.50"></text></g><g><title>check_match (527,026 samples, 0.39%)</title><rect x="17.6833%" y="197" width="0.3938%" height="15" fill="rgb(232,182,51)"/><text x="17.9333%" y="207.50"></text></g><g><title>check_private_in_public (150,931 samples, 0.11%)</title><rect x="18.0845%" y="213" width="0.1128%" height="15" fill="rgb(231,60,39)"/><text x="18.3345%" y="223.50"></text></g><g><title>death_checking (353,804 samples, 0.26%)</title><rect x="18.1972%" y="213" width="0.2644%" height="15" fill="rgb(208,69,12)"/><text x="18.4472%" y="223.50"></text></g><g><title>eval_to_const_value_raw (216,642 samples, 0.16%)</title><rect x="18.9847%" y="181" width="0.1619%" height="15" fill="rgb(235,93,37)"/><text x="19.2347%" y="191.50"></text></g><g><title>eval_to_const_value_raw (214,382 samples, 0.16%)</title><rect x="18.9864%" y="165" width="0.1602%" height="15" fill="rgb(213,116,39)"/><text x="19.2364%" y="175.50"></text></g><g><title>eval_to_allocation_raw (208,642 samples, 0.16%)</title><rect x="18.9907%" y="149" width="0.1559%" height="15" fill="rgb(222,207,29)"/><text x="19.2407%" y="159.50"></text></g><g><title>crate_lints (2,136,224 samples, 1.60%)</title><rect x="18.4629%" y="197" width="1.5961%" height="15" fill="rgb(206,96,30)"/><text x="18.7129%" y="207.50"></text></g><g><title>type_of (1,081,121 samples, 0.81%)</title><rect x="19.2512%" y="181" width="0.8078%" height="15" fill="rgb(218,138,4)"/><text x="19.5012%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (846,928 samples, 0.63%)</title><rect x="19.4262%" y="165" width="0.6328%" height="15" fill="rgb(250,191,14)"/><text x="19.6762%" y="175.50"></text></g><g><title>lint_checking (2,540,939 samples, 1.90%)</title><rect x="18.4616%" y="213" width="1.8985%" height="15" fill="rgb(239,60,40)"/><text x="18.7116%" y="223.50">l..</text></g><g><title>module_lints (403,025 samples, 0.30%)</title><rect x="20.0590%" y="197" width="0.3011%" height="15" fill="rgb(206,27,48)"/><text x="20.3090%" y="207.50"></text></g><g><title>lint_mod (399,565 samples, 0.30%)</title><rect x="20.0616%" y="181" width="0.2985%" height="15" fill="rgb(225,35,8)"/><text x="20.3116%" y="191.50"></text></g><g><title>privacy_access_levels (167,271 samples, 0.12%)</title><rect x="20.3601%" y="213" width="0.1250%" height="15" fill="rgb(250,213,24)"/><text x="20.6101%" y="223.50"></text></g><g><title>privacy_checking_modules (703,808 samples, 0.53%)</title><rect x="20.4851%" y="213" width="0.5259%" height="15" fill="rgb(247,123,22)"/><text x="20.7351%" y="223.50"></text></g><g><title>check_mod_privacy (701,478 samples, 0.52%)</title><rect x="20.4868%" y="197" width="0.5241%" height="15" fill="rgb(231,138,38)"/><text x="20.7368%" y="207.50"></text></g><g><title>misc_checking_3 (3,945,814 samples, 2.95%)</title><rect x="18.0771%" y="229" width="2.9482%" height="15" fill="rgb(231,145,46)"/><text x="18.3271%" y="239.50">mi..</text></g><g><title>impl_trait_ref (199,343 samples, 0.15%)</title><rect x="21.1953%" y="133" width="0.1489%" height="15" fill="rgb(251,118,11)"/><text x="21.4453%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (180,912 samples, 0.14%)</title><rect x="21.2091%" y="117" width="0.1352%" height="15" fill="rgb(217,147,25)"/><text x="21.4591%" y="127.50"></text></g><g><title>adt_destructor (354,144 samples, 0.26%)</title><rect x="21.0989%" y="181" width="0.2646%" height="15" fill="rgb(247,81,37)"/><text x="21.3489%" y="191.50"></text></g><g><title>coherent_trait (346,964 samples, 0.26%)</title><rect x="21.1043%" y="165" width="0.2592%" height="15" fill="rgb(209,12,38)"/><text x="21.3543%" y="175.50"></text></g><g><title>specialization_graph_of (345,194 samples, 0.26%)</title><rect x="21.1056%" y="149" width="0.2579%" height="15" fill="rgb(227,1,9)"/><text x="21.3556%" y="159.50"></text></g><g><title>is_copy_raw (136,052 samples, 0.10%)</title><rect x="21.3635%" y="181" width="0.1017%" height="15" fill="rgb(248,47,43)"/><text x="21.6135%" y="191.50"></text></g><g><title>impl_parent (2,353,204 samples, 1.76%)</title><rect x="24.4448%" y="165" width="1.7582%" height="15" fill="rgb(221,10,30)"/><text x="24.6948%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,387,799 samples, 1.04%)</title><rect x="25.1661%" y="149" width="1.0369%" height="15" fill="rgb(210,229,1)"/><text x="25.4161%" y="159.50"></text></g><g><title>impl_trait_ref (5,146,031 samples, 3.84%)</title><rect x="26.2031%" y="165" width="3.8449%" height="15" fill="rgb(222,148,37)"/><text x="26.4531%" y="175.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,943,839 samples, 2.95%)</title><rect x="27.1013%" y="149" width="2.9467%" height="15" fill="rgb(234,67,33)"/><text x="27.3513%" y="159.50">me..</text></g><g><title>coherent_trait (12,856,835 samples, 9.61%)</title><rect x="21.0742%" y="197" width="9.6062%" height="15" fill="rgb(247,98,35)"/><text x="21.3242%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (12,231,198 samples, 9.14%)</title><rect x="21.5416%" y="181" width="9.1387%" height="15" fill="rgb(247,138,52)"/><text x="21.7916%" y="191.50">specializatio..</text></g><g><title>trait_impls_of (844,201 samples, 0.63%)</title><rect x="30.0496%" y="165" width="0.6308%" height="15" fill="rgb(213,79,30)"/><text x="30.2996%" y="175.50"></text></g><g><title>implementations_of_trait (195,813 samples, 0.15%)</title><rect x="30.5341%" y="149" width="0.1463%" height="15" fill="rgb(246,177,23)"/><text x="30.7841%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (161,693 samples, 0.12%)</title><rect x="30.5596%" y="133" width="0.1208%" height="15" fill="rgb(230,62,27)"/><text x="30.8096%" y="143.50"></text></g><g><title>coherence_checking (12,916,785 samples, 9.65%)</title><rect x="21.0610%" y="213" width="9.6510%" height="15" fill="rgb(216,154,8)"/><text x="21.3110%" y="223.50">coherence_chec..</text></g><g><title>associated_item (589,837 samples, 0.44%)</title><rect x="40.8266%" y="149" width="0.4407%" height="15" fill="rgb(244,35,45)"/><text x="41.0766%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (479,065 samples, 0.36%)</title><rect x="40.9093%" y="133" width="0.3579%" height="15" fill="rgb(251,115,12)"/><text x="41.1593%" y="143.50"></text></g><g><title>associated_items (816,519 samples, 0.61%)</title><rect x="40.6866%" y="165" width="0.6101%" height="15" fill="rgb(240,54,50)"/><text x="40.9366%" y="175.50"></text></g><g><title>dropck_outlives (375,986 samples, 0.28%)</title><rect x="41.3236%" y="165" width="0.2809%" height="15" fill="rgb(233,84,52)"/><text x="41.5736%" y="175.50"></text></g><g><title>adt_dtorck_constraint (280,064 samples, 0.21%)</title><rect x="41.3953%" y="149" width="0.2093%" height="15" fill="rgb(207,117,47)"/><text x="41.6453%" y="159.50"></text></g><g><title>eval_to_const_value_raw (223,972 samples, 0.17%)</title><rect x="41.6045%" y="165" width="0.1673%" height="15" fill="rgb(249,43,39)"/><text x="41.8545%" y="175.50"></text></g><g><title>eval_to_const_value_raw (211,102 samples, 0.16%)</title><rect x="41.6141%" y="149" width="0.1577%" height="15" fill="rgb(209,38,44)"/><text x="41.8641%" y="159.50"></text></g><g><title>eval_to_allocation_raw (205,832 samples, 0.15%)</title><rect x="41.6181%" y="133" width="0.1538%" height="15" fill="rgb(236,212,23)"/><text x="41.8681%" y="143.50"></text></g><g><title>adt_def (158,722 samples, 0.12%)</title><rect x="42.4766%" y="133" width="0.1186%" height="15" fill="rgb(242,79,21)"/><text x="42.7266%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (156,382 samples, 0.12%)</title><rect x="42.4784%" y="117" width="0.1168%" height="15" fill="rgb(211,96,35)"/><text x="42.7284%" y="127.50"></text></g><g><title>adt_sized_constraint (171,502 samples, 0.13%)</title><rect x="42.4688%" y="149" width="0.1281%" height="15" fill="rgb(253,215,40)"/><text x="42.7188%" y="159.50"></text></g><g><title>impl_trait_ref (164,263 samples, 0.12%)</title><rect x="42.6868%" y="149" width="0.1227%" height="15" fill="rgb(211,81,21)"/><text x="42.9368%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (139,953 samples, 0.10%)</title><rect x="42.7050%" y="133" width="0.1046%" height="15" fill="rgb(208,190,38)"/><text x="42.9550%" y="143.50"></text></g><g><title>trait_impls_of (197,132 samples, 0.15%)</title><rect x="42.9140%" y="149" width="0.1473%" height="15" fill="rgb(235,213,38)"/><text x="43.1640%" y="159.50"></text></g><g><title>evaluate_obligation (1,728,628 samples, 1.29%)</title><rect x="41.7719%" y="165" width="1.2916%" height="15" fill="rgb(237,122,38)"/><text x="42.0219%" y="175.50"></text></g><g><title>method_autoderef_steps (148,561 samples, 0.11%)</title><rect x="43.4331%" y="165" width="0.1110%" height="15" fill="rgb(244,218,35)"/><text x="43.6831%" y="175.50"></text></g><g><title>predicates_of (270,695 samples, 0.20%)</title><rect x="43.6839%" y="165" width="0.2023%" height="15" fill="rgb(240,68,47)"/><text x="43.9339%" y="175.50"></text></g><g><title>predicates_defined_on (185,522 samples, 0.14%)</title><rect x="43.7475%" y="149" width="0.1386%" height="15" fill="rgb(210,16,53)"/><text x="43.9975%" y="159.50"></text></g><g><title>associated_item (179,382 samples, 0.13%)</title><rect x="49.4226%" y="133" width="0.1340%" height="15" fill="rgb(235,124,12)"/><text x="49.6726%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (154,682 samples, 0.12%)</title><rect x="49.4411%" y="117" width="0.1156%" height="15" fill="rgb(224,169,11)"/><text x="49.6911%" y="127.50"></text></g><g><title>associated_items (248,904 samples, 0.19%)</title><rect x="49.3807%" y="149" width="0.1860%" height="15" fill="rgb(250,166,2)"/><text x="49.6307%" y="159.50"></text></g><g><title>specializes (140,480 samples, 0.10%)</title><rect x="50.4789%" y="133" width="0.1050%" height="15" fill="rgb(242,216,29)"/><text x="50.7289%" y="143.50"></text></g><g><title>trait_impls_of (324,893 samples, 0.24%)</title><rect x="50.5917%" y="133" width="0.2427%" height="15" fill="rgb(230,116,27)"/><text x="50.8417%" y="143.50"></text></g><g><title>evaluate_obligation (1,515,066 samples, 1.13%)</title><rect x="49.7036%" y="149" width="1.1320%" height="15" fill="rgb(228,99,48)"/><text x="49.9536%" y="159.50"></text></g><g><title>is_copy_raw (160,812 samples, 0.12%)</title><rect x="51.0390%" y="149" width="0.1202%" height="15" fill="rgb(253,11,6)"/><text x="51.2890%" y="159.50"></text></g><g><title>evaluate_obligation (135,411 samples, 0.10%)</title><rect x="51.0580%" y="133" width="0.1012%" height="15" fill="rgb(247,143,39)"/><text x="51.3080%" y="143.50"></text></g><g><title>method_autoderef_steps (195,321 samples, 0.15%)</title><rect x="51.2092%" y="149" width="0.1459%" height="15" fill="rgb(236,97,10)"/><text x="51.4592%" y="159.50"></text></g><g><title>predicates_of (270,513 samples, 0.20%)</title><rect x="51.3665%" y="149" width="0.2021%" height="15" fill="rgb(233,208,19)"/><text x="51.6165%" y="159.50"></text></g><g><title>predicates_defined_on (176,662 samples, 0.13%)</title><rect x="51.4366%" y="133" width="0.1320%" height="15" fill="rgb(216,164,2)"/><text x="51.6866%" y="143.50"></text></g><g><title>typeck (10,288,615 samples, 7.69%)</title><rect x="43.9585%" y="165" width="7.6873%" height="15" fill="rgb(220,129,5)"/><text x="44.2085%" y="175.50">typeck</text></g><g><title>item_bodies_checking (28,049,934 samples, 20.96%)</title><rect x="30.7276%" y="213" width="20.9580%" height="15" fill="rgb(242,17,10)"/><text x="30.9776%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,046,314 samples, 20.96%)</title><rect x="30.7303%" y="197" width="20.9553%" height="15" fill="rgb(242,107,0)"/><text x="30.9803%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (27,997,994 samples, 20.92%)</title><rect x="30.7664%" y="181" width="20.9192%" height="15" fill="rgb(251,28,31)"/><text x="31.0164%" y="191.50">typeck</text></g><g><title>mir_borrowck (232,533 samples, 0.17%)</title><rect x="52.5315%" y="149" width="0.1737%" height="15" fill="rgb(233,223,10)"/><text x="52.7815%" y="159.50"></text></g><g><title>impl_parent (174,642 samples, 0.13%)</title><rect x="53.2808%" y="53" width="0.1305%" height="15" fill="rgb(215,21,27)"/><text x="53.5308%" y="63.50"></text></g><g><title>specialization_graph_of (795,110 samples, 0.59%)</title><rect x="53.0987%" y="69" width="0.5941%" height="15" fill="rgb(232,23,21)"/><text x="53.3487%" y="79.50"></text></g><g><title>impl_trait_ref (376,855 samples, 0.28%)</title><rect x="53.4113%" y="53" width="0.2816%" height="15" fill="rgb(244,5,23)"/><text x="53.6613%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (323,355 samples, 0.24%)</title><rect x="53.4512%" y="37" width="0.2416%" height="15" fill="rgb(226,81,46)"/><text x="53.7012%" y="47.50"></text></g><g><title>resolve_instance (867,340 samples, 0.65%)</title><rect x="53.0482%" y="85" width="0.6480%" height="15" fill="rgb(247,70,30)"/><text x="53.2982%" y="95.50"></text></g><g><title>associated_item (138,881 samples, 0.10%)</title><rect x="54.5616%" y="53" width="0.1038%" height="15" fill="rgb(212,68,19)"/><text x="54.8116%" y="63.50"></text></g><g><title>associated_items (184,352 samples, 0.14%)</title><rect x="54.5318%" y="69" width="0.1377%" height="15" fill="rgb(240,187,13)"/><text x="54.7818%" y="79.50"></text></g><g><title>trait_impls_of (151,231 samples, 0.11%)</title><rect x="54.9955%" y="53" width="0.1130%" height="15" fill="rgb(223,113,26)"/><text x="55.2455%" y="63.50"></text></g><g><title>evaluate_obligation (511,036 samples, 0.38%)</title><rect x="54.7301%" y="69" width="0.3818%" height="15" fill="rgb(206,192,2)"/><text x="54.9801%" y="79.50"></text></g><g><title>mir_built (3,335,088 samples, 2.49%)</title><rect x="52.8938%" y="101" width="2.4919%" height="15" fill="rgb(241,108,4)"/><text x="53.1438%" y="111.50">mi..</text></g><g><title>typeck (2,216,995 samples, 1.66%)</title><rect x="53.7292%" y="85" width="1.6565%" height="15" fill="rgb(247,173,49)"/><text x="53.9792%" y="95.50"></text></g><g><title>mir_const (3,631,961 samples, 2.71%)</title><rect x="52.7656%" y="133" width="2.7137%" height="15" fill="rgb(224,114,35)"/><text x="53.0156%" y="143.50">mi..</text></g><g><title>unsafety_check_result (3,525,610 samples, 2.63%)</title><rect x="52.8451%" y="117" width="2.6342%" height="15" fill="rgb(245,159,27)"/><text x="53.0951%" y="127.50">un..</text></g><g><title>mir_promoted (3,717,482 samples, 2.78%)</title><rect x="52.7052%" y="149" width="2.7776%" height="15" fill="rgb(245,172,44)"/><text x="52.9552%" y="159.50">mi..</text></g><g><title>type_of (4,812,595 samples, 3.60%)</title><rect x="52.0593%" y="181" width="3.5958%" height="15" fill="rgb(236,23,11)"/><text x="52.3093%" y="191.50">type..</text></g><g><title>mir_borrowck (4,798,964 samples, 3.59%)</title><rect x="52.0695%" y="165" width="3.5856%" height="15" fill="rgb(205,117,38)"/><text x="52.3195%" y="175.50">mir_..</text></g><g><title>item_types_checking (5,542,112 samples, 4.14%)</title><rect x="51.6856%" y="213" width="4.1409%" height="15" fill="rgb(237,72,25)"/><text x="51.9356%" y="223.50">item_..</text></g><g><title>check_mod_item_types (5,537,992 samples, 4.14%)</title><rect x="51.6886%" y="197" width="4.1378%" height="15" fill="rgb(244,70,9)"/><text x="51.9386%" y="207.50">check..</text></g><g><title>typeck (229,242 samples, 0.17%)</title><rect x="55.6552%" y="181" width="0.1713%" height="15" fill="rgb(217,125,39)"/><text x="55.9052%" y="191.50"></text></g><g><title>late_bound_vars_map (211,872 samples, 0.16%)</title><rect x="56.0318%" y="165" width="0.1583%" height="15" fill="rgb(235,36,10)"/><text x="56.2818%" y="175.50"></text></g><g><title>resolve_lifetimes (204,062 samples, 0.15%)</title><rect x="56.0376%" y="149" width="0.1525%" height="15" fill="rgb(251,123,47)"/><text x="56.2876%" y="159.50"></text></g><g><title>fn_sig (351,623 samples, 0.26%)</title><rect x="55.9545%" y="181" width="0.2627%" height="15" fill="rgb(221,13,13)"/><text x="56.2045%" y="191.50"></text></g><g><title>generics_of (222,713 samples, 0.17%)</title><rect x="56.2172%" y="181" width="0.1664%" height="15" fill="rgb(238,131,9)"/><text x="56.4672%" y="191.50"></text></g><g><title>predicates_of (366,557 samples, 0.27%)</title><rect x="56.4163%" y="181" width="0.2739%" height="15" fill="rgb(211,50,8)"/><text x="56.6663%" y="191.50"></text></g><g><title>predicates_defined_on (340,216 samples, 0.25%)</title><rect x="56.4360%" y="165" width="0.2542%" height="15" fill="rgb(245,182,24)"/><text x="56.6860%" y="175.50"></text></g><g><title>inferred_outlives_of (220,703 samples, 0.16%)</title><rect x="56.5253%" y="149" width="0.1649%" height="15" fill="rgb(242,14,37)"/><text x="56.7753%" y="159.50"></text></g><g><title>inferred_outlives_crate (205,312 samples, 0.15%)</title><rect x="56.5368%" y="133" width="0.1534%" height="15" fill="rgb(246,228,12)"/><text x="56.7868%" y="143.50"></text></g><g><title>type_collecting (1,255,424 samples, 0.94%)</title><rect x="55.8279%" y="213" width="0.9380%" height="15" fill="rgb(213,55,15)"/><text x="56.0779%" y="223.50"></text></g><g><title>collect_mod_item_types (1,244,284 samples, 0.93%)</title><rect x="55.8362%" y="197" width="0.9297%" height="15" fill="rgb(209,9,3)"/><text x="56.0862%" y="207.50"></text></g><g><title>evaluate_obligation (387,596 samples, 0.29%)</title><rect x="57.5435%" y="181" width="0.2896%" height="15" fill="rgb(230,59,30)"/><text x="57.7935%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,939,323 samples, 1.45%)</title><rect x="56.8594%" y="197" width="1.4490%" height="15" fill="rgb(209,121,21)"/><text x="57.1094%" y="207.50"></text></g><g><title>region_scope_tree (354,674 samples, 0.27%)</title><rect x="58.0434%" y="181" width="0.2650%" height="15" fill="rgb(220,109,13)"/><text x="58.2934%" y="191.50"></text></g><g><title>adt_sized_constraint (178,432 samples, 0.13%)</title><rect x="58.7526%" y="165" width="0.1333%" height="15" fill="rgb(232,18,1)"/><text x="59.0026%" y="175.50"></text></g><g><title>evaluate_obligation (308,914 samples, 0.23%)</title><rect x="58.6561%" y="181" width="0.2308%" height="15" fill="rgb(215,41,42)"/><text x="58.9061%" y="191.50"></text></g><g><title>check_item_well_formed (1,072,011 samples, 0.80%)</title><rect x="58.3084%" y="197" width="0.8010%" height="15" fill="rgb(224,123,36)"/><text x="58.5584%" y="207.50"></text></g><g><title>analysis (78,388,838 samples, 58.57%)</title><rect x="0.5888%" y="245" width="58.5695%" height="15" fill="rgb(240,125,3)"/><text x="0.8388%" y="255.50">analysis</text></g><g><title>type_check_crate (51,036,911 samples, 38.13%)</title><rect x="21.0253%" y="229" width="38.1331%" height="15" fill="rgb(205,98,50)"/><text x="21.2753%" y="239.50">type_check_crate</text></g><g><title>wf_checking (3,198,306 samples, 2.39%)</title><rect x="56.7687%" y="213" width="2.3897%" height="15" fill="rgb(205,185,37)"/><text x="57.0187%" y="223.50">wf..</text></g><g><title>codegen_crate (565,056 samples, 0.42%)</title><rect x="59.1676%" y="245" width="0.4222%" height="15" fill="rgb(238,207,15)"/><text x="59.4176%" y="255.50"></text></g><g><title>AST_validation (214,623 samples, 0.16%)</title><rect x="59.7748%" y="229" width="0.1604%" height="15" fill="rgb(213,199,42)"/><text x="60.0248%" y="239.50"></text></g><g><title>metadata_load_macro (628,658 samples, 0.47%)</title><rect x="80.5427%" y="197" width="0.4697%" height="15" fill="rgb(235,201,11)"/><text x="80.7927%" y="207.50"></text></g><g><title>metadata_register_crate (2,722,200 samples, 2.03%)</title><rect x="81.0124%" y="197" width="2.0339%" height="15" fill="rgb(207,46,11)"/><text x="81.2624%" y="207.50">m..</text></g><g><title>metadata_register_crate (979,680 samples, 0.73%)</title><rect x="82.3144%" y="181" width="0.7320%" height="15" fill="rgb(241,35,35)"/><text x="82.5644%" y="191.50"></text></g><g><title>macro_expand_crate (30,878,445 samples, 23.07%)</title><rect x="60.0820%" y="229" width="23.0713%" height="15" fill="rgb(243,32,47)"/><text x="60.3320%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (30,861,055 samples, 23.06%)</title><rect x="60.0950%" y="213" width="23.0583%" height="15" fill="rgb(247,202,23)"/><text x="60.3450%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (143,231 samples, 0.11%)</title><rect x="83.0463%" y="197" width="0.1070%" height="15" fill="rgb(219,102,11)"/><text x="83.2963%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (163,172 samples, 0.12%)</title><rect x="83.1577%" y="229" width="0.1219%" height="15" fill="rgb(243,110,44)"/><text x="83.4077%" y="239.50"></text></g><g><title>finalize_macro_resolutions (432,655 samples, 0.32%)</title><rect x="83.3609%" y="213" width="0.3233%" height="15" fill="rgb(222,74,54)"/><text x="83.6109%" y="223.50"></text></g><g><title>late_resolve_crate (10,734,241 samples, 8.02%)</title><rect x="83.6842%" y="213" width="8.0203%" height="15" fill="rgb(216,99,12)"/><text x="83.9342%" y="223.50">late_resolv..</text></g><g><title>configure_and_expand (43,151,152 samples, 32.24%)</title><rect x="59.5898%" y="245" width="32.2411%" height="15" fill="rgb(226,22,26)"/><text x="59.8398%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (11,444,858 samples, 8.55%)</title><rect x="83.2797%" y="229" width="8.5512%" height="15" fill="rgb(217,163,10)"/><text x="83.5297%" y="239.50">resolve_crate</text></g><g><title>drop_ast (145,162 samples, 0.11%)</title><rect x="91.8309%" y="245" width="0.1085%" height="15" fill="rgb(213,25,53)"/><text x="92.0809%" y="255.50"></text></g><g><title>early_lint_checks (306,933 samples, 0.23%)</title><rect x="91.9531%" y="245" width="0.2293%" height="15" fill="rgb(252,105,26)"/><text x="92.2031%" y="255.50"></text></g><g><title>free_global_ctxt (3,731,582 samples, 2.79%)</title><rect x="92.1825%" y="245" width="2.7881%" height="15" fill="rgb(220,39,43)"/><text x="92.4325%" y="255.50">fr..</text></g><g><title>generate_crate_metadata (778,269 samples, 0.58%)</title><rect x="94.9706%" y="245" width="0.5815%" height="15" fill="rgb(229,68,48)"/><text x="95.2206%" y="255.50"></text></g><g><title>hir_lowering (2,233,135 samples, 1.67%)</title><rect x="95.5521%" y="245" width="1.6685%" height="15" fill="rgb(252,8,32)"/><text x="95.8021%" y="255.50"></text></g><g><title>parse_crate (2,164,634 samples, 1.62%)</title><rect x="97.2574%" y="245" width="1.6173%" height="15" fill="rgb(223,20,43)"/><text x="97.5074%" y="255.50"></text></g><g><title>prepare_outputs (254,292 samples, 0.19%)</title><rect x="98.8822%" y="245" width="0.1900%" height="15" fill="rgb(229,81,49)"/><text x="99.1322%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (803,989 samples, 0.60%)</title><rect x="99.0722%" y="245" width="0.6007%" height="15" fill="rgb(236,28,36)"/><text x="99.3222%" y="255.50"></text></g><g><title>all (133,839,008 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (133,839,008 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (350,064 samples, 0.26%)</title><rect x="99.7384%" y="245" width="0.2616%" height="15" fill="rgb(233,201,37)"/><text x="99.9884%" y="255.50"></text></g></svg></svg>