<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (9,112,650 samples, 0.41%)</title><rect x="13.9253%" y="149" width="0.4073%" height="15" fill="rgb(227,0,7)"/><text x="14.1753%" y="159.50"></text></g><g><title>is_sized_raw (2,310,349 samples, 0.10%)</title><rect x="14.4077%" y="149" width="0.1033%" height="15" fill="rgb(217,0,24)"/><text x="14.6577%" y="159.50"></text></g><g><title>codegen_fn_attrs (2,254,218 samples, 0.10%)</title><rect x="16.5000%" y="101" width="0.1008%" height="15" fill="rgb(221,193,54)"/><text x="16.7500%" y="111.50"></text></g><g><title>is_copy_raw (2,682,303 samples, 0.12%)</title><rect x="19.4165%" y="85" width="0.1199%" height="15" fill="rgb(248,212,6)"/><text x="19.6665%" y="95.50"></text></g><g><title>is_copy_raw (20,464,132 samples, 0.91%)</title><rect x="19.7332%" y="69" width="0.9146%" height="15" fill="rgb(208,68,35)"/><text x="19.9832%" y="79.50"></text></g><g><title>evaluate_obligation (15,355,328 samples, 0.69%)</title><rect x="19.9616%" y="53" width="0.6863%" height="15" fill="rgb(232,128,0)"/><text x="20.2116%" y="63.50"></text></g><g><title>needs_drop_raw (25,666,333 samples, 1.15%)</title><rect x="19.5369%" y="85" width="1.1471%" height="15" fill="rgb(207,160,47)"/><text x="19.7869%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (15,012,926 samples, 0.67%)</title><rect x="20.9355%" y="69" width="0.6710%" height="15" fill="rgb(228,23,34)"/><text x="21.1855%" y="79.50"></text></g><g><title>resolve_instance (22,790,517 samples, 1.02%)</title><rect x="20.6856%" y="85" width="1.0186%" height="15" fill="rgb(218,30,26)"/><text x="20.9356%" y="95.50"></text></g><g><title>thir_body (22,790,381 samples, 1.02%)</title><rect x="21.7352%" y="85" width="1.0186%" height="15" fill="rgb(220,122,19)"/><text x="21.9852%" y="95.50"></text></g><g><title>mir_const (170,676,361 samples, 7.63%)</title><rect x="15.1984%" y="133" width="7.6283%" height="15" fill="rgb(250,228,42)"/><text x="15.4484%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (152,285,800 samples, 6.81%)</title><rect x="16.0203%" y="117" width="6.8063%" height="15" fill="rgb(240,193,28)"/><text x="16.2703%" y="127.50">unsafety_..</text></g><g><title>mir_built (139,299,095 samples, 6.23%)</title><rect x="16.6007%" y="101" width="6.2259%" height="15" fill="rgb(216,20,37)"/><text x="16.8507%" y="111.50">mir_built</text></g><g><title>mir_promoted (187,901,468 samples, 8.40%)</title><rect x="14.5110%" y="149" width="8.3982%" height="15" fill="rgb(206,188,39)"/><text x="14.7610%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (8,913,819 samples, 0.40%)</title><rect x="22.9094%" y="149" width="0.3984%" height="15" fill="rgb(217,207,13)"/><text x="23.1594%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (20,297,316 samples, 0.91%)</title><rect x="23.3078%" y="149" width="0.9072%" height="15" fill="rgb(231,73,38)"/><text x="23.5578%" y="159.50"></text></g><g><title>normalize_projection_ty (12,172,190 samples, 0.54%)</title><rect x="23.6709%" y="133" width="0.5440%" height="15" fill="rgb(225,20,46)"/><text x="23.9209%" y="143.50"></text></g><g><title>type_op_normalize_predicate (7,308,165 samples, 0.33%)</title><rect x="24.2150%" y="149" width="0.3266%" height="15" fill="rgb(210,31,41)"/><text x="24.4650%" y="159.50"></text></g><g><title>normalize_projection_ty (2,770,419 samples, 0.12%)</title><rect x="24.4178%" y="133" width="0.1238%" height="15" fill="rgb(221,200,47)"/><text x="24.6678%" y="143.50"></text></g><g><title>type_op_normalize_ty (14,664,691 samples, 0.66%)</title><rect x="24.5416%" y="149" width="0.6554%" height="15" fill="rgb(226,26,5)"/><text x="24.7916%" y="159.50"></text></g><g><title>normalize_projection_ty (8,671,857 samples, 0.39%)</title><rect x="24.8095%" y="133" width="0.3876%" height="15" fill="rgb(249,33,26)"/><text x="25.0595%" y="143.50"></text></g><g><title>type_op_prove_predicate (90,436,739 samples, 4.04%)</title><rect x="25.1970%" y="149" width="4.0420%" height="15" fill="rgb(235,183,28)"/><text x="25.4470%" y="159.50">type..</text></g><g><title>MIR_borrow_checking (648,084,147 samples, 28.97%)</title><rect x="0.2748%" y="181" width="28.9658%" height="15" fill="rgb(221,5,38)"/><text x="0.5248%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (645,098,951 samples, 28.83%)</title><rect x="0.4082%" y="165" width="28.8323%" height="15" fill="rgb(247,18,42)"/><text x="0.6582%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (3,794,880 samples, 0.17%)</title><rect x="29.3056%" y="181" width="0.1696%" height="15" fill="rgb(241,131,45)"/><text x="29.5556%" y="191.50"></text></g><g><title>codegen_fn_attrs (4,602,296 samples, 0.21%)</title><rect x="29.6663%" y="149" width="0.2057%" height="15" fill="rgb(249,31,29)"/><text x="29.9163%" y="159.50"></text></g><g><title>check_mod_attrs (8,762,491 samples, 0.39%)</title><rect x="29.4804%" y="165" width="0.3916%" height="15" fill="rgb(225,111,53)"/><text x="29.7304%" y="175.50"></text></g><g><title>check_mod_const_bodies (2,544,506 samples, 0.11%)</title><rect x="29.8720%" y="165" width="0.1137%" height="15" fill="rgb(238,160,17)"/><text x="30.1220%" y="175.50"></text></g><g><title>lint_levels (3,721,992 samples, 0.17%)</title><rect x="30.2132%" y="149" width="0.1664%" height="15" fill="rgb(214,148,48)"/><text x="30.4632%" y="159.50"></text></g><g><title>lookup_deprecation_entry (3,208,266 samples, 0.14%)</title><rect x="30.3795%" y="149" width="0.1434%" height="15" fill="rgb(232,36,49)"/><text x="30.6295%" y="159.50"></text></g><g><title>stability_index (2,921,623 samples, 0.13%)</title><rect x="30.3924%" y="133" width="0.1306%" height="15" fill="rgb(209,103,24)"/><text x="30.6424%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (9,942,144 samples, 0.44%)</title><rect x="30.0908%" y="165" width="0.4444%" height="15" fill="rgb(229,88,8)"/><text x="30.3408%" y="175.50"></text></g><g><title>misc_checking_1 (24,469,384 samples, 1.09%)</title><rect x="29.4753%" y="181" width="1.0936%" height="15" fill="rgb(213,181,19)"/><text x="29.7253%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (11,193,955 samples, 0.50%)</title><rect x="30.5691%" y="165" width="0.5003%" height="15" fill="rgb(254,191,54)"/><text x="30.8191%" y="175.50"></text></g><g><title>check_mod_liveness (9,368,603 samples, 0.42%)</title><rect x="30.6506%" y="149" width="0.4187%" height="15" fill="rgb(241,83,37)"/><text x="30.9006%" y="159.50"></text></g><g><title>misc_checking_2 (24,381,872 samples, 1.09%)</title><rect x="30.5689%" y="181" width="1.0897%" height="15" fill="rgb(233,36,39)"/><text x="30.8189%" y="191.50"></text></g><g><title>match_checking (13,184,467 samples, 0.59%)</title><rect x="31.0694%" y="165" width="0.5893%" height="15" fill="rgb(226,3,54)"/><text x="31.3194%" y="175.50"></text></g><g><title>check_match (12,252,463 samples, 0.55%)</title><rect x="31.1110%" y="149" width="0.5476%" height="15" fill="rgb(245,192,40)"/><text x="31.3610%" y="159.50"></text></g><g><title>check_private_in_public (6,952,918 samples, 0.31%)</title><rect x="31.6597%" y="165" width="0.3108%" height="15" fill="rgb(238,167,29)"/><text x="31.9097%" y="175.50"></text></g><g><title>death_checking (10,042,143 samples, 0.45%)</title><rect x="31.9704%" y="165" width="0.4488%" height="15" fill="rgb(232,182,51)"/><text x="32.2204%" y="175.50"></text></g><g><title>param_env (4,153,085 samples, 0.19%)</title><rect x="32.8556%" y="133" width="0.1856%" height="15" fill="rgb(231,60,39)"/><text x="33.1056%" y="143.50"></text></g><g><title>crate_lints (15,426,132 samples, 0.69%)</title><rect x="32.4195%" y="149" width="0.6895%" height="15" fill="rgb(208,69,12)"/><text x="32.6695%" y="159.50"></text></g><g><title>lint_checking (26,333,804 samples, 1.18%)</title><rect x="32.4193%" y="165" width="1.1770%" height="15" fill="rgb(235,93,37)"/><text x="32.6693%" y="175.50"></text></g><g><title>module_lints (10,903,562 samples, 0.49%)</title><rect x="33.1089%" y="149" width="0.4873%" height="15" fill="rgb(213,116,39)"/><text x="33.3589%" y="159.50"></text></g><g><title>lint_mod (10,867,552 samples, 0.49%)</title><rect x="33.1105%" y="133" width="0.4857%" height="15" fill="rgb(222,207,29)"/><text x="33.3605%" y="143.50"></text></g><g><title>privacy_access_levels (13,149,407 samples, 0.59%)</title><rect x="33.5962%" y="165" width="0.5877%" height="15" fill="rgb(206,96,30)"/><text x="33.8462%" y="175.50"></text></g><g><title>privacy_checking_modules (25,742,998 samples, 1.15%)</title><rect x="34.1840%" y="165" width="1.1506%" height="15" fill="rgb(218,138,4)"/><text x="34.4340%" y="175.50"></text></g><g><title>check_mod_privacy (25,704,098 samples, 1.15%)</title><rect x="34.1857%" y="149" width="1.1488%" height="15" fill="rgb(250,191,14)"/><text x="34.4357%" y="159.50"></text></g><g><title>misc_checking_3 (82,478,463 samples, 3.69%)</title><rect x="31.6586%" y="181" width="3.6863%" height="15" fill="rgb(239,60,40)"/><text x="31.9086%" y="191.50">misc..</text></g><g><title>impl_parent (3,568,048 samples, 0.16%)</title><rect x="35.8920%" y="117" width="0.1595%" height="15" fill="rgb(206,27,48)"/><text x="36.1420%" y="127.50"></text></g><g><title>impl_trait_ref (7,169,014 samples, 0.32%)</title><rect x="36.0515%" y="117" width="0.3204%" height="15" fill="rgb(225,35,8)"/><text x="36.3015%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,581,103 samples, 0.25%)</title><rect x="36.1225%" y="101" width="0.2494%" height="15" fill="rgb(250,213,24)"/><text x="36.3725%" y="111.50"></text></g><g><title>coherent_trait (22,710,695 samples, 1.02%)</title><rect x="35.4274%" y="149" width="1.0150%" height="15" fill="rgb(247,123,22)"/><text x="35.6774%" y="159.50"></text></g><g><title>specialization_graph_of (21,459,112 samples, 0.96%)</title><rect x="35.4834%" y="133" width="0.9591%" height="15" fill="rgb(231,138,38)"/><text x="35.7334%" y="143.50"></text></g><g><title>coherence_checking (23,641,635 samples, 1.06%)</title><rect x="35.4250%" y="165" width="1.0566%" height="15" fill="rgb(231,145,46)"/><text x="35.6750%" y="175.50"></text></g><g><title>associated_items (3,020,379 samples, 0.13%)</title><rect x="58.4319%" y="117" width="0.1350%" height="15" fill="rgb(251,118,11)"/><text x="58.6819%" y="127.50"></text></g><g><title>dropck_outlives (9,115,379 samples, 0.41%)</title><rect x="58.5912%" y="117" width="0.4074%" height="15" fill="rgb(217,147,25)"/><text x="58.8412%" y="127.50"></text></g><g><title>evaluate_obligation (32,372,506 samples, 1.45%)</title><rect x="58.9987%" y="117" width="1.4469%" height="15" fill="rgb(247,81,37)"/><text x="59.2487%" y="127.50"></text></g><g><title>evaluate_obligation (4,956,324 samples, 0.22%)</title><rect x="60.8650%" y="101" width="0.2215%" height="15" fill="rgb(209,12,38)"/><text x="61.1150%" y="111.50"></text></g><g><title>method_autoderef_steps (10,244,828 samples, 0.46%)</title><rect x="60.6290%" y="117" width="0.4579%" height="15" fill="rgb(227,1,9)"/><text x="60.8790%" y="127.50"></text></g><g><title>evaluate_obligation (15,359,615 samples, 0.69%)</title><rect x="66.7162%" y="101" width="0.6865%" height="15" fill="rgb(248,47,43)"/><text x="66.9662%" y="111.50"></text></g><g><title>is_copy_raw (2,448,237 samples, 0.11%)</title><rect x="67.4856%" y="101" width="0.1094%" height="15" fill="rgb(221,10,30)"/><text x="67.7356%" y="111.50"></text></g><g><title>method_autoderef_steps (5,493,135 samples, 0.25%)</title><rect x="67.6025%" y="101" width="0.2455%" height="15" fill="rgb(210,229,1)"/><text x="67.8525%" y="111.50"></text></g><g><title>evaluate_obligation (2,595,919 samples, 0.12%)</title><rect x="67.7320%" y="85" width="0.1160%" height="15" fill="rgb(222,148,37)"/><text x="67.9820%" y="95.50"></text></g><g><title>typeck (148,215,393 samples, 6.62%)</title><rect x="61.2649%" y="117" width="6.6244%" height="15" fill="rgb(234,67,33)"/><text x="61.5149%" y="127.50">typeck</text></g><g><title>item_bodies_checking (702,173,701 samples, 31.38%)</title><rect x="36.5317%" y="165" width="31.3833%" height="15" fill="rgb(247,98,35)"/><text x="36.7817%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (702,169,551 samples, 31.38%)</title><rect x="36.5319%" y="149" width="31.3831%" height="15" fill="rgb(247,138,52)"/><text x="36.7819%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (698,805,710 samples, 31.23%)</title><rect x="36.6822%" y="133" width="31.2327%" height="15" fill="rgb(213,79,30)"/><text x="36.9322%" y="143.50">typeck</text></g><g><title>mir_borrowck (4,437,510 samples, 0.20%)</title><rect x="70.7759%" y="101" width="0.1983%" height="15" fill="rgb(246,177,23)"/><text x="71.0259%" y="111.50"></text></g><g><title>mir_built (14,105,350 samples, 0.63%)</title><rect x="71.0218%" y="53" width="0.6304%" height="15" fill="rgb(230,62,27)"/><text x="71.2718%" y="63.50"></text></g><g><title>typeck (12,885,996 samples, 0.58%)</title><rect x="71.0763%" y="37" width="0.5759%" height="15" fill="rgb(216,154,8)"/><text x="71.3263%" y="47.50"></text></g><g><title>mir_const (16,237,713 samples, 0.73%)</title><rect x="70.9782%" y="85" width="0.7257%" height="15" fill="rgb(244,35,45)"/><text x="71.2282%" y="95.50"></text></g><g><title>unsafety_check_result (15,402,695 samples, 0.69%)</title><rect x="71.0155%" y="69" width="0.6884%" height="15" fill="rgb(251,115,12)"/><text x="71.2655%" y="79.50"></text></g><g><title>mir_promoted (16,333,224 samples, 0.73%)</title><rect x="70.9742%" y="101" width="0.7300%" height="15" fill="rgb(240,54,50)"/><text x="71.2242%" y="111.50"></text></g><g><title>type_of (25,047,713 samples, 1.12%)</title><rect x="70.6553%" y="133" width="1.1195%" height="15" fill="rgb(233,84,52)"/><text x="70.9053%" y="143.50"></text></g><g><title>mir_borrowck (24,943,271 samples, 1.11%)</title><rect x="70.6600%" y="117" width="1.1148%" height="15" fill="rgb(207,117,47)"/><text x="70.9100%" y="127.50"></text></g><g><title>item_types_checking (86,773,582 samples, 3.88%)</title><rect x="67.9150%" y="165" width="3.8783%" height="15" fill="rgb(249,43,39)"/><text x="68.1650%" y="175.50">item..</text></g><g><title>check_mod_item_types (86,732,072 samples, 3.88%)</title><rect x="67.9168%" y="149" width="3.8764%" height="15" fill="rgb(209,38,44)"/><text x="68.1668%" y="159.50">chec..</text></g><g><title>eval_to_const_value_raw (2,606,259 samples, 0.12%)</title><rect x="72.0633%" y="133" width="0.1165%" height="15" fill="rgb(236,212,23)"/><text x="72.3133%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,589,519 samples, 0.12%)</title><rect x="72.0640%" y="117" width="0.1157%" height="15" fill="rgb(242,79,21)"/><text x="72.3140%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,581,109 samples, 0.12%)</title><rect x="72.0644%" y="101" width="0.1154%" height="15" fill="rgb(211,96,35)"/><text x="72.3144%" y="111.50"></text></g><g><title>fn_sig (6,344,538 samples, 0.28%)</title><rect x="72.1798%" y="133" width="0.2836%" height="15" fill="rgb(253,215,40)"/><text x="72.4298%" y="143.50"></text></g><g><title>is_late_bound_map (4,539,195 samples, 0.20%)</title><rect x="72.5810%" y="117" width="0.2029%" height="15" fill="rgb(211,81,21)"/><text x="72.8310%" y="127.50"></text></g><g><title>resolve_lifetimes (4,220,073 samples, 0.19%)</title><rect x="72.5952%" y="101" width="0.1886%" height="15" fill="rgb(208,190,38)"/><text x="72.8452%" y="111.50"></text></g><g><title>generics_of (8,734,239 samples, 0.39%)</title><rect x="72.4633%" y="133" width="0.3904%" height="15" fill="rgb(235,213,38)"/><text x="72.7133%" y="143.50"></text></g><g><title>late_bound_vars_map (5,048,685 samples, 0.23%)</title><rect x="73.3408%" y="85" width="0.2256%" height="15" fill="rgb(237,122,38)"/><text x="73.5908%" y="95.50"></text></g><g><title>resolve_lifetimes (4,735,142 samples, 0.21%)</title><rect x="73.3548%" y="69" width="0.2116%" height="15" fill="rgb(244,218,35)"/><text x="73.6048%" y="79.50"></text></g><g><title>explicit_predicates_of (12,620,191 samples, 0.56%)</title><rect x="73.0481%" y="101" width="0.5641%" height="15" fill="rgb(240,68,47)"/><text x="73.2981%" y="111.50"></text></g><g><title>predicates_of (20,283,091 samples, 0.91%)</title><rect x="72.9035%" y="133" width="0.9065%" height="15" fill="rgb(210,16,53)"/><text x="73.1535%" y="143.50"></text></g><g><title>predicates_defined_on (18,878,793 samples, 0.84%)</title><rect x="72.9662%" y="117" width="0.8438%" height="15" fill="rgb(235,124,12)"/><text x="73.2162%" y="127.50"></text></g><g><title>inferred_outlives_of (4,427,672 samples, 0.20%)</title><rect x="73.6121%" y="101" width="0.1979%" height="15" fill="rgb(224,169,11)"/><text x="73.8621%" y="111.50"></text></g><g><title>inferred_outlives_crate (4,043,535 samples, 0.18%)</title><rect x="73.6293%" y="85" width="0.1807%" height="15" fill="rgb(250,166,2)"/><text x="73.8793%" y="95.50"></text></g><g><title>type_of (2,367,904 samples, 0.11%)</title><rect x="73.7042%" y="69" width="0.1058%" height="15" fill="rgb(242,216,29)"/><text x="73.9542%" y="79.50"></text></g><g><title>type_collecting (49,055,089 samples, 2.19%)</title><rect x="71.7949%" y="165" width="2.1925%" height="15" fill="rgb(230,116,27)"/><text x="72.0449%" y="175.50">t..</text></g><g><title>collect_mod_item_types (49,005,448 samples, 2.19%)</title><rect x="71.7971%" y="149" width="2.1903%" height="15" fill="rgb(228,99,48)"/><text x="72.0471%" y="159.50">c..</text></g><g><title>type_of (3,684,244 samples, 0.16%)</title><rect x="73.8227%" y="133" width="0.1647%" height="15" fill="rgb(253,11,6)"/><text x="74.0727%" y="143.50"></text></g><g><title>evaluate_obligation (10,342,530 samples, 0.46%)</title><rect x="77.6152%" y="133" width="0.4623%" height="15" fill="rgb(247,143,39)"/><text x="77.8652%" y="143.50"></text></g><g><title>implied_outlives_bounds (8,748,707 samples, 0.39%)</title><rect x="78.0967%" y="133" width="0.3910%" height="15" fill="rgb(236,97,10)"/><text x="78.3467%" y="143.50"></text></g><g><title>param_env (16,563,499 samples, 0.74%)</title><rect x="78.4878%" y="133" width="0.7403%" height="15" fill="rgb(233,208,19)"/><text x="78.7378%" y="143.50"></text></g><g><title>region_scope_tree (7,437,000 samples, 0.33%)</title><rect x="79.2298%" y="133" width="0.3324%" height="15" fill="rgb(216,164,2)"/><text x="79.4798%" y="143.50"></text></g><g><title>check_impl_item_well_formed (118,912,358 samples, 5.31%)</title><rect x="74.2495%" y="149" width="5.3147%" height="15" fill="rgb(220,129,5)"/><text x="74.4995%" y="159.50">check_i..</text></g><g><title>evaluate_obligation (3,713,481 samples, 0.17%)</title><rect x="82.7537%" y="133" width="0.1660%" height="15" fill="rgb(242,17,10)"/><text x="83.0037%" y="143.50"></text></g><g><title>implied_outlives_bounds (4,232,312 samples, 0.19%)</title><rect x="82.9450%" y="133" width="0.1892%" height="15" fill="rgb(242,107,0)"/><text x="83.1950%" y="143.50"></text></g><g><title>param_env (11,126,452 samples, 0.50%)</title><rect x="83.1505%" y="133" width="0.4973%" height="15" fill="rgb(251,28,31)"/><text x="83.4005%" y="143.50"></text></g><g><title>check_item_well_formed (95,607,412 samples, 4.27%)</title><rect x="79.5642%" y="149" width="4.2731%" height="15" fill="rgb(233,223,10)"/><text x="79.8142%" y="159.50">check..</text></g><g><title>analysis (1,879,895,237 samples, 84.02%)</title><rect x="0.0638%" y="197" width="84.0209%" height="15" fill="rgb(215,21,27)"/><text x="0.3138%" y="207.50">analysis</text></g><g><title>type_check_crate (1,090,508,950 samples, 48.74%)</title><rect x="35.3450%" y="181" width="48.7397%" height="15" fill="rgb(232,23,21)"/><text x="35.5950%" y="191.50">type_check_crate</text></g><g><title>wf_checking (225,735,697 samples, 10.09%)</title><rect x="73.9955%" y="165" width="10.0891%" height="15" fill="rgb(244,5,23)"/><text x="74.2455%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (5,533,665 samples, 0.25%)</title><rect x="83.8374%" y="149" width="0.2473%" height="15" fill="rgb(226,81,46)"/><text x="84.0874%" y="159.50"></text></g><g><title>AST_validation (3,340,647 samples, 0.15%)</title><rect x="84.1212%" y="181" width="0.1493%" height="15" fill="rgb(247,70,30)"/><text x="84.3712%" y="191.50"></text></g><g><title>complete_gated_feature_checking (2,563,708 samples, 0.11%)</title><rect x="84.2705%" y="181" width="0.1146%" height="15" fill="rgb(212,68,19)"/><text x="84.5205%" y="191.50"></text></g><g><title>macro_expand_crate (182,333,401 samples, 8.15%)</title><rect x="84.3891%" y="181" width="8.1493%" height="15" fill="rgb(240,187,13)"/><text x="84.6391%" y="191.50">macro_expan..</text></g><g><title>expand_crate (182,314,891 samples, 8.15%)</title><rect x="84.3899%" y="165" width="8.1485%" height="15" fill="rgb(223,113,26)"/><text x="84.6399%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (3,958,624 samples, 0.18%)</title><rect x="92.3615%" y="149" width="0.1769%" height="15" fill="rgb(206,192,2)"/><text x="92.6115%" y="159.50"></text></g><g><title>late_resolve_crate (27,526,889 samples, 1.23%)</title><rect x="92.6641%" y="165" width="1.2303%" height="15" fill="rgb(241,108,4)"/><text x="92.9141%" y="175.50"></text></g><g><title>resolve_check_unused (2,287,545 samples, 0.10%)</title><rect x="93.9086%" y="165" width="0.1022%" height="15" fill="rgb(247,173,49)"/><text x="94.1586%" y="175.50"></text></g><g><title>configure_and_expand (223,517,673 samples, 9.99%)</title><rect x="84.1105%" y="197" width="9.9900%" height="15" fill="rgb(224,114,35)"/><text x="84.3605%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (34,824,991 samples, 1.56%)</title><rect x="92.5440%" y="181" width="1.5565%" height="15" fill="rgb(245,159,27)"/><text x="92.7940%" y="191.50"></text></g><g><title>drop_ast (7,041,639 samples, 0.31%)</title><rect x="94.1005%" y="197" width="0.3147%" height="15" fill="rgb(245,172,44)"/><text x="94.3505%" y="207.50"></text></g><g><title>early_lint_checks (7,906,918 samples, 0.35%)</title><rect x="94.4162%" y="197" width="0.3534%" height="15" fill="rgb(236,23,11)"/><text x="94.6662%" y="207.50"></text></g><g><title>free_global_ctxt (15,917,348 samples, 0.71%)</title><rect x="94.7696%" y="197" width="0.7114%" height="15" fill="rgb(205,117,38)"/><text x="95.0196%" y="207.50"></text></g><g><title>generate_crate_metadata (26,704,139 samples, 1.19%)</title><rect x="95.4810%" y="197" width="1.1935%" height="15" fill="rgb(237,72,25)"/><text x="95.7310%" y="207.50"></text></g><g><title>hir_lowering (65,330,232 samples, 2.92%)</title><rect x="96.6745%" y="197" width="2.9199%" height="15" fill="rgb(244,70,9)"/><text x="96.9245%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (5,117,767 samples, 0.23%)</title><rect x="99.6886%" y="197" width="0.2287%" height="15" fill="rgb(217,125,39)"/><text x="99.9386%" y="207.50"></text></g><g><title>all (2,237,414,120 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,237,414,120 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>