<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (235,513 samples, 0.17%)</title><rect x="12.0136%" y="133" width="0.1720%" height="15" fill="rgb(227,0,7)"/><text x="12.2636%" y="143.50"></text></g><g><title>param_env (230,294 samples, 0.17%)</title><rect x="13.5841%" y="101" width="0.1682%" height="15" fill="rgb(217,0,24)"/><text x="13.8341%" y="111.50"></text></g><g><title>item_attrs (189,112 samples, 0.14%)</title><rect x="14.1498%" y="69" width="0.1381%" height="15" fill="rgb(221,193,54)"/><text x="14.3998%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (182,941 samples, 0.13%)</title><rect x="14.1543%" y="53" width="0.1336%" height="15" fill="rgb(248,212,6)"/><text x="14.4043%" y="63.50"></text></g><g><title>codegen_fn_attrs (239,523 samples, 0.17%)</title><rect x="14.1172%" y="85" width="0.1749%" height="15" fill="rgb(208,68,35)"/><text x="14.3672%" y="95.50"></text></g><g><title>adt_drop_tys (255,651 samples, 0.19%)</title><rect x="16.1561%" y="53" width="0.1867%" height="15" fill="rgb(232,128,0)"/><text x="16.4061%" y="63.50"></text></g><g><title>needs_drop_raw (1,209,713 samples, 0.88%)</title><rect x="16.0614%" y="69" width="0.8835%" height="15" fill="rgb(207,160,47)"/><text x="16.3114%" y="79.50"></text></g><g><title>is_copy_raw (824,451 samples, 0.60%)</title><rect x="16.3428%" y="53" width="0.6021%" height="15" fill="rgb(228,23,34)"/><text x="16.5928%" y="63.50"></text></g><g><title>evaluate_obligation (643,967 samples, 0.47%)</title><rect x="16.4746%" y="37" width="0.4703%" height="15" fill="rgb(218,30,26)"/><text x="16.7246%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (455,213 samples, 0.33%)</title><rect x="17.2016%" y="53" width="0.3325%" height="15" fill="rgb(220,122,19)"/><text x="17.4516%" y="63.50"></text></g><g><title>resolve_instance (900,130 samples, 0.66%)</title><rect x="16.9449%" y="69" width="0.6574%" height="15" fill="rgb(250,228,42)"/><text x="17.1949%" y="79.50"></text></g><g><title>thir_body (767,857 samples, 0.56%)</title><rect x="17.6376%" y="69" width="0.5608%" height="15" fill="rgb(240,193,28)"/><text x="17.8876%" y="79.50"></text></g><g><title>mir_const (7,306,616 samples, 5.34%)</title><rect x="12.8913%" y="117" width="5.3365%" height="15" fill="rgb(216,20,37)"/><text x="13.1413%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (6,127,646 samples, 4.48%)</title><rect x="13.7523%" y="101" width="4.4754%" height="15" fill="rgb(206,188,39)"/><text x="14.0023%" y="111.50">unsaf..</text></g><g><title>mir_built (5,388,600 samples, 3.94%)</title><rect x="14.2921%" y="85" width="3.9356%" height="15" fill="rgb(217,207,13)"/><text x="14.5421%" y="95.50">mir_..</text></g><g><title>mir_promoted (8,799,321 samples, 6.43%)</title><rect x="12.2473%" y="133" width="6.4267%" height="15" fill="rgb(231,73,38)"/><text x="12.4973%" y="143.50">mir_prom..</text></g><g><title>mir_const_qualif (610,998 samples, 0.45%)</title><rect x="18.2277%" y="117" width="0.4463%" height="15" fill="rgb(225,20,46)"/><text x="18.4777%" y="127.50"></text></g><g><title>mir_const (344,253 samples, 0.25%)</title><rect x="18.4226%" y="101" width="0.2514%" height="15" fill="rgb(210,31,41)"/><text x="18.6726%" y="111.50"></text></g><g><title>unsafety_check_result (276,842 samples, 0.20%)</title><rect x="18.4718%" y="85" width="0.2022%" height="15" fill="rgb(221,200,47)"/><text x="18.7218%" y="95.50"></text></g><g><title>mir_built (232,792 samples, 0.17%)</title><rect x="18.5040%" y="69" width="0.1700%" height="15" fill="rgb(226,26,5)"/><text x="18.7540%" y="79.50"></text></g><g><title>type_op_ascribe_user_type (195,581 samples, 0.14%)</title><rect x="18.6740%" y="133" width="0.1428%" height="15" fill="rgb(249,33,26)"/><text x="18.9240%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (220,952 samples, 0.16%)</title><rect x="18.8168%" y="133" width="0.1614%" height="15" fill="rgb(235,183,28)"/><text x="19.0668%" y="143.50"></text></g><g><title>type_op_normalize_predicate (297,924 samples, 0.22%)</title><rect x="18.9782%" y="133" width="0.2176%" height="15" fill="rgb(221,5,38)"/><text x="19.2282%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,561,518 samples, 3.33%)</title><rect x="19.1958%" y="133" width="3.3316%" height="15" fill="rgb(247,18,42)"/><text x="19.4458%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (29,839,134 samples, 21.79%)</title><rect x="0.7370%" y="165" width="21.7934%" height="15" fill="rgb(241,131,45)"/><text x="0.9870%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (29,626,404 samples, 21.64%)</title><rect x="0.8924%" y="149" width="21.6381%" height="15" fill="rgb(249,31,29)"/><text x="1.1424%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (290,313 samples, 0.21%)</title><rect x="22.5304%" y="165" width="0.2120%" height="15" fill="rgb(225,111,53)"/><text x="22.7804%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (218,832 samples, 0.16%)</title><rect x="22.5826%" y="149" width="0.1598%" height="15" fill="rgb(238,160,17)"/><text x="22.8326%" y="159.50"></text></g><g><title>hir_module_items (196,882 samples, 0.14%)</title><rect x="22.7425%" y="165" width="0.1438%" height="15" fill="rgb(214,148,48)"/><text x="22.9925%" y="175.50"></text></g><g><title>codegen_fn_attrs (224,413 samples, 0.16%)</title><rect x="23.2110%" y="101" width="0.1639%" height="15" fill="rgb(232,36,49)"/><text x="23.4610%" y="111.50"></text></g><g><title>codegen_fn_attrs (424,475 samples, 0.31%)</title><rect x="23.0725%" y="133" width="0.3100%" height="15" fill="rgb(209,103,24)"/><text x="23.3225%" y="143.50"></text></g><g><title>should_inherit_track_caller (359,953 samples, 0.26%)</title><rect x="23.1196%" y="117" width="0.2629%" height="15" fill="rgb(229,88,8)"/><text x="23.3696%" y="127.50"></text></g><g><title>check_mod_attrs (653,389 samples, 0.48%)</title><rect x="22.9053%" y="149" width="0.4772%" height="15" fill="rgb(213,181,19)"/><text x="23.1553%" y="159.50"></text></g><g><title>lookup_deprecation_entry (189,882 samples, 0.14%)</title><rect x="23.6769%" y="133" width="0.1387%" height="15" fill="rgb(254,191,54)"/><text x="23.9269%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (433,104 samples, 0.32%)</title><rect x="23.5377%" y="149" width="0.3163%" height="15" fill="rgb(241,83,37)"/><text x="23.7877%" y="159.50"></text></g><g><title>misc_checking_1 (1,386,785 samples, 1.01%)</title><rect x="22.8866%" y="165" width="1.0129%" height="15" fill="rgb(233,36,39)"/><text x="23.1366%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (434,745 samples, 0.32%)</title><rect x="23.9006%" y="149" width="0.3175%" height="15" fill="rgb(226,3,54)"/><text x="24.1506%" y="159.50"></text></g><g><title>check_mod_liveness (359,945 samples, 0.26%)</title><rect x="23.9553%" y="133" width="0.2629%" height="15" fill="rgb(245,192,40)"/><text x="24.2053%" y="143.50"></text></g><g><title>misc_checking_2 (962,781 samples, 0.70%)</title><rect x="23.8994%" y="165" width="0.7032%" height="15" fill="rgb(238,167,29)"/><text x="24.1494%" y="175.50"></text></g><g><title>match_checking (526,416 samples, 0.38%)</title><rect x="24.2181%" y="149" width="0.3845%" height="15" fill="rgb(232,182,51)"/><text x="24.4681%" y="159.50"></text></g><g><title>check_match (474,895 samples, 0.35%)</title><rect x="24.2558%" y="133" width="0.3468%" height="15" fill="rgb(231,60,39)"/><text x="24.5058%" y="143.50"></text></g><g><title>param_env (161,080 samples, 0.12%)</title><rect x="24.4850%" y="117" width="0.1176%" height="15" fill="rgb(208,69,12)"/><text x="24.7350%" y="127.50"></text></g><g><title>check_private_in_public (263,673 samples, 0.19%)</title><rect x="24.6097%" y="149" width="0.1926%" height="15" fill="rgb(235,93,37)"/><text x="24.8597%" y="159.50"></text></g><g><title>death_checking (384,705 samples, 0.28%)</title><rect x="24.8023%" y="149" width="0.2810%" height="15" fill="rgb(213,116,39)"/><text x="25.0523%" y="159.50"></text></g><g><title>param_env (239,163 samples, 0.17%)</title><rect x="25.6059%" y="117" width="0.1747%" height="15" fill="rgb(222,207,29)"/><text x="25.8559%" y="127.50"></text></g><g><title>crate_lints (2,043,583 samples, 1.49%)</title><rect x="25.0843%" y="133" width="1.4926%" height="15" fill="rgb(206,96,30)"/><text x="25.3343%" y="143.50"></text></g><g><title>type_of (1,087,872 samples, 0.79%)</title><rect x="25.7823%" y="117" width="0.7945%" height="15" fill="rgb(218,138,4)"/><text x="26.0323%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (854,849 samples, 0.62%)</title><rect x="25.9525%" y="101" width="0.6244%" height="15" fill="rgb(250,191,14)"/><text x="26.2025%" y="111.50"></text></g><g><title>lint_checking (2,367,096 samples, 1.73%)</title><rect x="25.0833%" y="149" width="1.7288%" height="15" fill="rgb(239,60,40)"/><text x="25.3333%" y="159.50"></text></g><g><title>module_lints (322,153 samples, 0.24%)</title><rect x="26.5768%" y="133" width="0.2353%" height="15" fill="rgb(206,27,48)"/><text x="26.8268%" y="143.50"></text></g><g><title>lint_mod (316,703 samples, 0.23%)</title><rect x="26.5808%" y="117" width="0.2313%" height="15" fill="rgb(225,35,8)"/><text x="26.8308%" y="127.50"></text></g><g><title>privacy_access_levels (342,553 samples, 0.25%)</title><rect x="26.8121%" y="149" width="0.2502%" height="15" fill="rgb(250,213,24)"/><text x="27.0621%" y="159.50"></text></g><g><title>privacy_checking_modules (905,621 samples, 0.66%)</title><rect x="27.0623%" y="149" width="0.6614%" height="15" fill="rgb(247,123,22)"/><text x="27.3123%" y="159.50"></text></g><g><title>check_mod_privacy (901,731 samples, 0.66%)</title><rect x="27.0651%" y="133" width="0.6586%" height="15" fill="rgb(231,138,38)"/><text x="27.3151%" y="143.50"></text></g><g><title>misc_checking_3 (4,288,618 samples, 3.13%)</title><rect x="24.6026%" y="165" width="3.1323%" height="15" fill="rgb(231,145,46)"/><text x="24.8526%" y="175.50">mis..</text></g><g><title>impl_parent (1,874,259 samples, 1.37%)</title><rect x="30.0789%" y="101" width="1.3689%" height="15" fill="rgb(251,118,11)"/><text x="30.3289%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,055,687 samples, 0.77%)</title><rect x="30.6767%" y="85" width="0.7710%" height="15" fill="rgb(217,147,25)"/><text x="30.9267%" y="95.50"></text></g><g><title>impl_trait_ref (4,511,429 samples, 3.29%)</title><rect x="31.4477%" y="101" width="3.2950%" height="15" fill="rgb(247,81,37)"/><text x="31.6977%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,905,353 samples, 2.85%)</title><rect x="31.8904%" y="85" width="2.8523%" height="15" fill="rgb(209,12,38)"/><text x="32.1404%" y="95.50">me..</text></g><g><title>predicates_of (179,492 samples, 0.13%)</title><rect x="34.8173%" y="101" width="0.1311%" height="15" fill="rgb(227,1,9)"/><text x="35.0673%" y="111.50"></text></g><g><title>predicates_defined_on (157,632 samples, 0.12%)</title><rect x="34.8333%" y="85" width="0.1151%" height="15" fill="rgb(248,47,43)"/><text x="35.0833%" y="95.50"></text></g><g><title>trait_impls_of (561,948 samples, 0.41%)</title><rect x="34.9499%" y="101" width="0.4104%" height="15" fill="rgb(221,10,30)"/><text x="35.1999%" y="111.50"></text></g><g><title>implementations_of_trait (154,482 samples, 0.11%)</title><rect x="35.2475%" y="85" width="0.1128%" height="15" fill="rgb(210,229,1)"/><text x="35.4975%" y="95.50"></text></g><g><title>coherent_trait (10,344,316 samples, 7.56%)</title><rect x="27.8183%" y="133" width="7.5551%" height="15" fill="rgb(222,148,37)"/><text x="28.0683%" y="143.50">coherent_t..</text></g><g><title>specialization_graph_of (10,325,386 samples, 7.54%)</title><rect x="27.8321%" y="117" width="7.5413%" height="15" fill="rgb(234,67,33)"/><text x="28.0821%" y="127.50">specializa..</text></g><g><title>coherence_checking (10,461,057 samples, 7.64%)</title><rect x="27.8016%" y="149" width="7.6404%" height="15" fill="rgb(247,98,35)"/><text x="28.0516%" y="159.50">coherence_..</text></g><g><title>associated_item (261,980 samples, 0.19%)</title><rect x="46.2234%" y="85" width="0.1913%" height="15" fill="rgb(247,138,52)"/><text x="46.4734%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (221,090 samples, 0.16%)</title><rect x="46.2533%" y="69" width="0.1615%" height="15" fill="rgb(213,79,30)"/><text x="46.5033%" y="79.50"></text></g><g><title>associated_items (342,861 samples, 0.25%)</title><rect x="46.1753%" y="101" width="0.2504%" height="15" fill="rgb(246,177,23)"/><text x="46.4253%" y="111.50"></text></g><g><title>def_ident_span (249,712 samples, 0.18%)</title><rect x="46.4257%" y="101" width="0.1824%" height="15" fill="rgb(230,62,27)"/><text x="46.6757%" y="111.50"></text></g><g><title>dropck_outlives (500,425 samples, 0.37%)</title><rect x="46.6123%" y="101" width="0.3655%" height="15" fill="rgb(216,154,8)"/><text x="46.8623%" y="111.50"></text></g><g><title>adt_dtorck_constraint (198,932 samples, 0.15%)</title><rect x="46.8325%" y="85" width="0.1453%" height="15" fill="rgb(244,35,45)"/><text x="47.0825%" y="95.50"></text></g><g><title>evaluate_obligation (1,065,694 samples, 0.78%)</title><rect x="46.9778%" y="101" width="0.7783%" height="15" fill="rgb(251,115,12)"/><text x="47.2278%" y="111.50"></text></g><g><title>method_autoderef_steps (703,819 samples, 0.51%)</title><rect x="47.9336%" y="101" width="0.5140%" height="15" fill="rgb(240,54,50)"/><text x="48.1836%" y="111.50"></text></g><g><title>evaluate_obligation (334,476 samples, 0.24%)</title><rect x="48.2034%" y="85" width="0.2443%" height="15" fill="rgb(233,84,52)"/><text x="48.4534%" y="95.50"></text></g><g><title>explicit_predicates_of (161,473 samples, 0.12%)</title><rect x="48.5413%" y="69" width="0.1179%" height="15" fill="rgb(207,117,47)"/><text x="48.7913%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (150,773 samples, 0.11%)</title><rect x="48.5491%" y="53" width="0.1101%" height="15" fill="rgb(249,43,39)"/><text x="48.7991%" y="63.50"></text></g><g><title>predicates_of (251,195 samples, 0.18%)</title><rect x="48.4898%" y="101" width="0.1835%" height="15" fill="rgb(209,38,44)"/><text x="48.7398%" y="111.50"></text></g><g><title>predicates_defined_on (212,085 samples, 0.15%)</title><rect x="48.5184%" y="85" width="0.1549%" height="15" fill="rgb(236,212,23)"/><text x="48.7684%" y="95.50"></text></g><g><title>evaluate_obligation (697,088 samples, 0.51%)</title><rect x="55.2564%" y="85" width="0.5091%" height="15" fill="rgb(242,79,21)"/><text x="55.5064%" y="95.50"></text></g><g><title>trait_impls_of (187,833 samples, 0.14%)</title><rect x="55.6283%" y="69" width="0.1372%" height="15" fill="rgb(211,96,35)"/><text x="55.8783%" y="79.50"></text></g><g><title>method_autoderef_steps (173,362 samples, 0.13%)</title><rect x="55.9362%" y="85" width="0.1266%" height="15" fill="rgb(253,215,40)"/><text x="56.1862%" y="95.50"></text></g><g><title>typeck (10,203,547 samples, 7.45%)</title><rect x="48.7076%" y="101" width="7.4523%" height="15" fill="rgb(211,81,21)"/><text x="48.9576%" y="111.50">typeck</text></g><g><title>item_bodies_checking (28,340,218 samples, 20.70%)</title><rect x="35.4871%" y="149" width="20.6987%" height="15" fill="rgb(208,190,38)"/><text x="35.7371%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,336,818 samples, 20.70%)</title><rect x="35.4896%" y="133" width="20.6962%" height="15" fill="rgb(235,213,38)"/><text x="35.7396%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (28,203,476 samples, 20.60%)</title><rect x="35.5870%" y="117" width="20.5988%" height="15" fill="rgb(237,122,38)"/><text x="35.8370%" y="127.50">typeck</text></g><g><title>impl_trait_ref (168,093 samples, 0.12%)</title><rect x="58.4545%" y="69" width="0.1228%" height="15" fill="rgb(244,218,35)"/><text x="58.7045%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (149,393 samples, 0.11%)</title><rect x="58.4681%" y="53" width="0.1091%" height="15" fill="rgb(240,68,47)"/><text x="58.7181%" y="63.50"></text></g><g><title>adt_destructor (340,414 samples, 0.25%)</title><rect x="58.3529%" y="117" width="0.2486%" height="15" fill="rgb(210,16,53)"/><text x="58.6029%" y="127.50"></text></g><g><title>coherent_trait (330,474 samples, 0.24%)</title><rect x="58.3601%" y="101" width="0.2414%" height="15" fill="rgb(235,124,12)"/><text x="58.6101%" y="111.50"></text></g><g><title>specialization_graph_of (328,494 samples, 0.24%)</title><rect x="58.3616%" y="85" width="0.2399%" height="15" fill="rgb(224,169,11)"/><text x="58.6116%" y="95.50"></text></g><g><title>item_types_checking (3,543,299 samples, 2.59%)</title><rect x="56.1858%" y="149" width="2.5879%" height="15" fill="rgb(250,166,2)"/><text x="56.4358%" y="159.50">it..</text></g><g><title>check_mod_item_types (3,537,429 samples, 2.58%)</title><rect x="56.1901%" y="133" width="2.5836%" height="15" fill="rgb(242,216,29)"/><text x="56.4401%" y="143.50">ch..</text></g><g><title>fn_sig (273,080 samples, 0.20%)</title><rect x="59.0594%" y="117" width="0.1994%" height="15" fill="rgb(230,116,27)"/><text x="59.3094%" y="127.50"></text></g><g><title>is_late_bound_map (598,127 samples, 0.44%)</title><rect x="59.4267%" y="101" width="0.4369%" height="15" fill="rgb(228,99,48)"/><text x="59.6767%" y="111.50"></text></g><g><title>resolve_lifetimes (544,397 samples, 0.40%)</title><rect x="59.4660%" y="85" width="0.3976%" height="15" fill="rgb(253,11,6)"/><text x="59.7160%" y="95.50"></text></g><g><title>named_region_map (164,182 samples, 0.12%)</title><rect x="59.8636%" y="101" width="0.1199%" height="15" fill="rgb(247,143,39)"/><text x="60.1136%" y="111.50"></text></g><g><title>resolve_lifetimes (142,452 samples, 0.10%)</title><rect x="59.8794%" y="85" width="0.1040%" height="15" fill="rgb(236,97,10)"/><text x="60.1294%" y="95.50"></text></g><g><title>generics_of (1,017,960 samples, 0.74%)</title><rect x="59.2589%" y="117" width="0.7435%" height="15" fill="rgb(233,208,19)"/><text x="59.5089%" y="127.50"></text></g><g><title>explicit_predicates_of (482,986 samples, 0.35%)</title><rect x="60.1954%" y="85" width="0.3528%" height="15" fill="rgb(216,164,2)"/><text x="60.4454%" y="95.50"></text></g><g><title>predicates_of (1,021,983 samples, 0.75%)</title><rect x="60.0499%" y="117" width="0.7464%" height="15" fill="rgb(220,129,5)"/><text x="60.2999%" y="127.50"></text></g><g><title>predicates_defined_on (950,062 samples, 0.69%)</title><rect x="60.1024%" y="101" width="0.6939%" height="15" fill="rgb(242,17,10)"/><text x="60.3524%" y="111.50"></text></g><g><title>inferred_outlives_of (339,814 samples, 0.25%)</title><rect x="60.5481%" y="85" width="0.2482%" height="15" fill="rgb(242,107,0)"/><text x="60.7981%" y="95.50"></text></g><g><title>inferred_outlives_crate (310,414 samples, 0.23%)</title><rect x="60.5696%" y="69" width="0.2267%" height="15" fill="rgb(251,28,31)"/><text x="60.8196%" y="79.50"></text></g><g><title>type_of (148,220 samples, 0.11%)</title><rect x="60.6881%" y="53" width="0.1083%" height="15" fill="rgb(233,223,10)"/><text x="60.9381%" y="63.50"></text></g><g><title>type_collecting (3,022,934 samples, 2.21%)</title><rect x="58.7757%" y="149" width="2.2078%" height="15" fill="rgb(215,21,27)"/><text x="59.0257%" y="159.50">t..</text></g><g><title>collect_mod_item_types (3,005,433 samples, 2.20%)</title><rect x="58.7885%" y="133" width="2.1951%" height="15" fill="rgb(232,23,21)"/><text x="59.0385%" y="143.50">c..</text></g><g><title>type_of (256,392 samples, 0.19%)</title><rect x="60.7963%" y="117" width="0.1873%" height="15" fill="rgb(244,5,23)"/><text x="61.0463%" y="127.50"></text></g><g><title>evaluate_obligation (864,907 samples, 0.63%)</title><rect x="64.6701%" y="117" width="0.6317%" height="15" fill="rgb(226,81,46)"/><text x="64.9201%" y="127.50"></text></g><g><title>implied_outlives_bounds (600,067 samples, 0.44%)</title><rect x="65.3018%" y="117" width="0.4383%" height="15" fill="rgb(247,70,30)"/><text x="65.5518%" y="127.50"></text></g><g><title>param_env (680,144 samples, 0.50%)</title><rect x="65.7401%" y="117" width="0.4968%" height="15" fill="rgb(212,68,19)"/><text x="65.9901%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,286,501 samples, 5.32%)</title><rect x="61.2250%" y="133" width="5.3218%" height="15" fill="rgb(240,187,13)"/><text x="61.4750%" y="143.50">check_i..</text></g><g><title>region_scope_tree (372,404 samples, 0.27%)</title><rect x="66.2748%" y="117" width="0.2720%" height="15" fill="rgb(223,113,26)"/><text x="66.5248%" y="127.50"></text></g><g><title>implied_outlives_bounds (219,522 samples, 0.16%)</title><rect x="69.3832%" y="117" width="0.1603%" height="15" fill="rgb(206,192,2)"/><text x="69.6332%" y="127.50"></text></g><g><title>param_env (538,258 samples, 0.39%)</title><rect x="69.5443%" y="117" width="0.3931%" height="15" fill="rgb(241,108,4)"/><text x="69.7943%" y="127.50"></text></g><g><title>trait_impls_of (204,422 samples, 0.15%)</title><rect x="70.0282%" y="117" width="0.1493%" height="15" fill="rgb(247,173,49)"/><text x="70.2782%" y="127.50"></text></g><g><title>analysis (95,508,810 samples, 69.76%)</title><rect x="0.5265%" y="181" width="69.7562%" height="15" fill="rgb(224,114,35)"/><text x="0.7765%" y="191.50">analysis</text></g><g><title>type_check_crate (58,255,682 samples, 42.55%)</title><rect x="27.7349%" y="165" width="42.5478%" height="15" fill="rgb(245,159,27)"/><text x="27.9849%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,724,832 samples, 9.29%)</title><rect x="60.9890%" y="149" width="9.2938%" height="15" fill="rgb(245,172,44)"/><text x="61.2390%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (5,115,100 samples, 3.74%)</title><rect x="66.5468%" y="133" width="3.7359%" height="15" fill="rgb(236,23,11)"/><text x="66.7968%" y="143.50">chec..</text></g><g><title>variances_of (144,052 samples, 0.11%)</title><rect x="70.1775%" y="117" width="0.1052%" height="15" fill="rgb(205,117,38)"/><text x="70.4275%" y="127.50"></text></g><g><title>crate_variances (138,192 samples, 0.10%)</title><rect x="70.1818%" y="101" width="0.1009%" height="15" fill="rgb(237,72,25)"/><text x="70.4318%" y="111.50"></text></g><g><title>codegen_crate (548,616 samples, 0.40%)</title><rect x="70.2912%" y="181" width="0.4007%" height="15" fill="rgb(244,70,9)"/><text x="70.5412%" y="191.50"></text></g><g><title>AST_validation (358,674 samples, 0.26%)</title><rect x="70.8467%" y="165" width="0.2620%" height="15" fill="rgb(217,125,39)"/><text x="71.0967%" y="175.50"></text></g><g><title>complete_gated_feature_checking (152,832 samples, 0.11%)</title><rect x="71.1087%" y="165" width="0.1116%" height="15" fill="rgb(235,36,10)"/><text x="71.3587%" y="175.50"></text></g><g><title>metadata_register_crate (2,766,332 samples, 2.02%)</title><rect x="85.4990%" y="133" width="2.0204%" height="15" fill="rgb(251,123,47)"/><text x="85.7490%" y="143.50">m..</text></g><g><title>metadata_register_crate (962,843 samples, 0.70%)</title><rect x="86.8162%" y="117" width="0.7032%" height="15" fill="rgb(221,13,13)"/><text x="87.0662%" y="127.50"></text></g><g><title>macro_expand_crate (22,641,264 samples, 16.54%)</title><rect x="71.2862%" y="165" width="16.5364%" height="15" fill="rgb(238,131,9)"/><text x="71.5362%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (22,623,784 samples, 16.52%)</title><rect x="71.2989%" y="149" width="16.5236%" height="15" fill="rgb(211,50,8)"/><text x="71.5489%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (414,995 samples, 0.30%)</title><rect x="87.5194%" y="133" width="0.3031%" height="15" fill="rgb(245,182,24)"/><text x="87.7694%" y="143.50"></text></g><g><title>finalize_imports (401,275 samples, 0.29%)</title><rect x="87.8947%" y="149" width="0.2931%" height="15" fill="rgb(242,14,37)"/><text x="88.1447%" y="159.50"></text></g><g><title>late_resolve_crate (3,375,968 samples, 2.47%)</title><rect x="88.2303%" y="149" width="2.4657%" height="15" fill="rgb(246,228,12)"/><text x="88.4803%" y="159.50">la..</text></g><g><title>configure_and_expand (27,634,110 samples, 20.18%)</title><rect x="70.6919%" y="181" width="20.1830%" height="15" fill="rgb(213,55,15)"/><text x="70.9419%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,091,086 samples, 2.99%)</title><rect x="87.8869%" y="165" width="2.9880%" height="15" fill="rgb(209,9,3)"/><text x="88.1369%" y="175.50">res..</text></g><g><title>drop_ast (183,562 samples, 0.13%)</title><rect x="90.8749%" y="181" width="0.1341%" height="15" fill="rgb(230,59,30)"/><text x="91.1249%" y="191.50"></text></g><g><title>early_lint_checks (275,453 samples, 0.20%)</title><rect x="91.0203%" y="181" width="0.2012%" height="15" fill="rgb(209,121,21)"/><text x="91.2703%" y="191.50"></text></g><g><title>free_global_ctxt (3,262,266 samples, 2.38%)</title><rect x="91.2214%" y="181" width="2.3826%" height="15" fill="rgb(220,109,13)"/><text x="91.4714%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,795,840 samples, 1.31%)</title><rect x="93.6041%" y="181" width="1.3116%" height="15" fill="rgb(232,18,1)"/><text x="93.8541%" y="191.50"></text></g><g><title>hir_lowering (4,783,283 samples, 3.49%)</title><rect x="94.9157%" y="181" width="3.4935%" height="15" fill="rgb(215,41,42)"/><text x="95.1657%" y="191.50">hir..</text></g><g><title>parse_crate (586,736 samples, 0.43%)</title><rect x="98.4515%" y="181" width="0.4285%" height="15" fill="rgb(224,123,36)"/><text x="98.7015%" y="191.50"></text></g><g><title>prepare_outputs (313,983 samples, 0.23%)</title><rect x="98.8874%" y="181" width="0.2293%" height="15" fill="rgb(240,125,3)"/><text x="99.1374%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (746,088 samples, 0.54%)</title><rect x="99.1167%" y="181" width="0.5449%" height="15" fill="rgb(205,98,50)"/><text x="99.3667%" y="191.50"></text></g><g><title>all (136,918,083 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (136,918,083 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (358,724 samples, 0.26%)</title><rect x="99.7380%" y="181" width="0.2620%" height="15" fill="rgb(213,199,42)"/><text x="99.9880%" y="191.50"></text></g></svg></svg>