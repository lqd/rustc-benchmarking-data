<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (307,885 samples, 0.12%)</title><rect x="14.5438%" y="149" width="0.1164%" height="15" fill="rgb(227,0,7)"/><text x="14.7938%" y="159.50"></text></g><g><title>param_env (574,805 samples, 0.22%)</title><rect x="16.2064%" y="117" width="0.2173%" height="15" fill="rgb(217,0,24)"/><text x="16.4564%" y="127.50"></text></g><g><title>item_attrs (585,535 samples, 0.22%)</title><rect x="16.9419%" y="85" width="0.2214%" height="15" fill="rgb(221,193,54)"/><text x="17.1919%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (568,875 samples, 0.22%)</title><rect x="16.9482%" y="69" width="0.2151%" height="15" fill="rgb(248,212,6)"/><text x="17.1982%" y="79.50"></text></g><g><title>codegen_fn_attrs (785,835 samples, 0.30%)</title><rect x="16.8795%" y="101" width="0.2971%" height="15" fill="rgb(208,68,35)"/><text x="17.1295%" y="111.50"></text></g><g><title>adt_drop_tys (545,026 samples, 0.21%)</title><rect x="20.4234%" y="69" width="0.2061%" height="15" fill="rgb(232,128,0)"/><text x="20.6734%" y="79.50"></text></g><g><title>is_copy_raw (937,862 samples, 0.35%)</title><rect x="20.6294%" y="69" width="0.3546%" height="15" fill="rgb(207,160,47)"/><text x="20.8794%" y="79.50"></text></g><g><title>evaluate_obligation (715,830 samples, 0.27%)</title><rect x="20.7134%" y="53" width="0.2706%" height="15" fill="rgb(228,23,34)"/><text x="20.9634%" y="63.50"></text></g><g><title>needs_drop_raw (1,774,310 samples, 0.67%)</title><rect x="20.3313%" y="85" width="0.6708%" height="15" fill="rgb(218,30,26)"/><text x="20.5813%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (648,138 samples, 0.25%)</title><rect x="21.1346%" y="69" width="0.2450%" height="15" fill="rgb(220,122,19)"/><text x="21.3846%" y="79.50"></text></g><g><title>specialization_graph_of (282,974 samples, 0.11%)</title><rect x="21.4179%" y="69" width="0.1070%" height="15" fill="rgb(250,228,42)"/><text x="21.6679%" y="79.50"></text></g><g><title>resolve_instance (1,492,527 samples, 0.56%)</title><rect x="21.0021%" y="85" width="0.5643%" height="15" fill="rgb(240,193,28)"/><text x="21.2521%" y="95.50"></text></g><g><title>thir_body (3,177,753 samples, 1.20%)</title><rect x="21.5969%" y="85" width="1.2014%" height="15" fill="rgb(216,20,37)"/><text x="21.8469%" y="95.50"></text></g><g><title>mir_const (19,488,828 samples, 7.37%)</title><rect x="15.4457%" y="133" width="7.3680%" height="15" fill="rgb(206,188,39)"/><text x="15.6957%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,901,829 samples, 6.39%)</title><rect x="16.4237%" y="117" width="6.3899%" height="15" fill="rgb(217,207,13)"/><text x="16.6737%" y="127.50">unsafety..</text></g><g><title>mir_built (14,906,683 samples, 5.64%)</title><rect x="17.1780%" y="101" width="5.6357%" height="15" fill="rgb(231,73,38)"/><text x="17.4280%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (21,664,230 samples, 8.19%)</title><rect x="14.6975%" y="149" width="8.1904%" height="15" fill="rgb(225,20,46)"/><text x="14.9475%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,164,015 samples, 0.44%)</title><rect x="22.8909%" y="149" width="0.4401%" height="15" fill="rgb(210,31,41)"/><text x="23.1409%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,573,977 samples, 0.60%)</title><rect x="23.3310%" y="149" width="0.5951%" height="15" fill="rgb(221,200,47)"/><text x="23.5810%" y="159.50"></text></g><g><title>normalize_projection_ty (1,049,989 samples, 0.40%)</title><rect x="23.5291%" y="133" width="0.3970%" height="15" fill="rgb(226,26,5)"/><text x="23.7791%" y="143.50"></text></g><g><title>type_op_normalize_predicate (682,059 samples, 0.26%)</title><rect x="23.9260%" y="149" width="0.2579%" height="15" fill="rgb(249,33,26)"/><text x="24.1760%" y="159.50"></text></g><g><title>normalize_projection_ty (361,544 samples, 0.14%)</title><rect x="24.0472%" y="133" width="0.1367%" height="15" fill="rgb(235,183,28)"/><text x="24.2972%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,801,279 samples, 2.19%)</title><rect x="24.1984%" y="149" width="2.1932%" height="15" fill="rgb(221,5,38)"/><text x="24.4484%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (68,441,357 samples, 25.88%)</title><rect x="0.5243%" y="181" width="25.8751%" height="15" fill="rgb(247,18,42)"/><text x="0.7743%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (68,222,096 samples, 25.79%)</title><rect x="0.6072%" y="165" width="25.7922%" height="15" fill="rgb(241,131,45)"/><text x="0.8572%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (326,573 samples, 0.12%)</title><rect x="26.4642%" y="181" width="0.1235%" height="15" fill="rgb(249,31,29)"/><text x="26.7142%" y="191.50"></text></g><g><title>codegen_fn_attrs (423,932 samples, 0.16%)</title><rect x="26.8010%" y="149" width="0.1603%" height="15" fill="rgb(225,111,53)"/><text x="27.0510%" y="159.50"></text></g><g><title>check_mod_attrs (952,589 samples, 0.36%)</title><rect x="26.6012%" y="165" width="0.3601%" height="15" fill="rgb(238,160,17)"/><text x="26.8512%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (629,017 samples, 0.24%)</title><rect x="27.1034%" y="165" width="0.2378%" height="15" fill="rgb(214,148,48)"/><text x="27.3534%" y="175.50"></text></g><g><title>misc_checking_1 (2,059,983 samples, 0.78%)</title><rect x="26.5878%" y="181" width="0.7788%" height="15" fill="rgb(232,36,49)"/><text x="26.8378%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,081,362 samples, 0.41%)</title><rect x="27.3672%" y="165" width="0.4088%" height="15" fill="rgb(209,103,24)"/><text x="27.6172%" y="175.50"></text></g><g><title>check_mod_liveness (845,530 samples, 0.32%)</title><rect x="27.4563%" y="149" width="0.3197%" height="15" fill="rgb(229,88,8)"/><text x="27.7063%" y="159.50"></text></g><g><title>misc_checking_2 (3,067,803 samples, 1.16%)</title><rect x="27.3666%" y="181" width="1.1598%" height="15" fill="rgb(213,181,19)"/><text x="27.6166%" y="191.50"></text></g><g><title>match_checking (1,984,961 samples, 0.75%)</title><rect x="27.7760%" y="165" width="0.7504%" height="15" fill="rgb(254,191,54)"/><text x="28.0260%" y="175.50"></text></g><g><title>check_match (1,923,149 samples, 0.73%)</title><rect x="27.7994%" y="149" width="0.7271%" height="15" fill="rgb(241,83,37)"/><text x="28.0494%" y="159.50"></text></g><g><title>check_private_in_public (383,534 samples, 0.14%)</title><rect x="28.5306%" y="165" width="0.1450%" height="15" fill="rgb(233,36,39)"/><text x="28.7806%" y="175.50"></text></g><g><title>death_checking (819,769 samples, 0.31%)</title><rect x="28.6756%" y="165" width="0.3099%" height="15" fill="rgb(226,3,54)"/><text x="28.9256%" y="175.50"></text></g><g><title>crate_lints (2,761,940 samples, 1.04%)</title><rect x="28.9861%" y="149" width="1.0442%" height="15" fill="rgb(245,192,40)"/><text x="29.2361%" y="159.50"></text></g><g><title>type_of (1,137,232 samples, 0.43%)</title><rect x="29.6004%" y="133" width="0.4299%" height="15" fill="rgb(238,167,29)"/><text x="29.8504%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (905,569 samples, 0.34%)</title><rect x="29.6880%" y="117" width="0.3424%" height="15" fill="rgb(232,182,51)"/><text x="29.9380%" y="127.50"></text></g><g><title>lint_checking (4,219,147 samples, 1.60%)</title><rect x="28.9855%" y="165" width="1.5951%" height="15" fill="rgb(231,60,39)"/><text x="29.2355%" y="175.50"></text></g><g><title>module_lints (1,455,597 samples, 0.55%)</title><rect x="30.0303%" y="149" width="0.5503%" height="15" fill="rgb(208,69,12)"/><text x="30.2803%" y="159.50"></text></g><g><title>lint_mod (1,447,436 samples, 0.55%)</title><rect x="30.0334%" y="133" width="0.5472%" height="15" fill="rgb(235,93,37)"/><text x="30.2834%" y="143.50"></text></g><g><title>privacy_access_levels (557,667 samples, 0.21%)</title><rect x="30.5806%" y="165" width="0.2108%" height="15" fill="rgb(213,116,39)"/><text x="30.8306%" y="175.50"></text></g><g><title>privacy_checking_modules (2,223,225 samples, 0.84%)</title><rect x="30.7915%" y="165" width="0.8405%" height="15" fill="rgb(222,207,29)"/><text x="31.0415%" y="175.50"></text></g><g><title>check_mod_privacy (2,216,105 samples, 0.84%)</title><rect x="30.7941%" y="149" width="0.8378%" height="15" fill="rgb(206,96,30)"/><text x="31.0441%" y="159.50"></text></g><g><title>misc_checking_3 (8,234,392 samples, 3.11%)</title><rect x="28.5264%" y="181" width="3.1131%" height="15" fill="rgb(218,138,4)"/><text x="28.7764%" y="191.50">mis..</text></g><g><title>adt_destructor (401,875 samples, 0.15%)</title><rect x="31.8035%" y="133" width="0.1519%" height="15" fill="rgb(250,191,14)"/><text x="32.0535%" y="143.50"></text></g><g><title>coherent_trait (397,995 samples, 0.15%)</title><rect x="31.8050%" y="117" width="0.1505%" height="15" fill="rgb(239,60,40)"/><text x="32.0550%" y="127.50"></text></g><g><title>specialization_graph_of (396,635 samples, 0.15%)</title><rect x="31.8055%" y="101" width="0.1500%" height="15" fill="rgb(206,27,48)"/><text x="32.0555%" y="111.50"></text></g><g><title>impl_parent (2,648,824 samples, 1.00%)</title><rect x="33.4972%" y="117" width="1.0014%" height="15" fill="rgb(225,35,8)"/><text x="33.7472%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,486,137 samples, 0.56%)</title><rect x="33.9368%" y="101" width="0.5619%" height="15" fill="rgb(250,213,24)"/><text x="34.1868%" y="111.50"></text></g><g><title>impl_trait_ref (5,591,996 samples, 2.11%)</title><rect x="34.4987%" y="117" width="2.1141%" height="15" fill="rgb(247,123,22)"/><text x="34.7487%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,624,589 samples, 1.75%)</title><rect x="34.8644%" y="101" width="1.7484%" height="15" fill="rgb(231,138,38)"/><text x="35.1144%" y="111.50"></text></g><g><title>trait_impls_of (796,929 samples, 0.30%)</title><rect x="36.6229%" y="117" width="0.3013%" height="15" fill="rgb(231,145,46)"/><text x="36.8729%" y="127.50"></text></g><g><title>coherent_trait (13,593,601 samples, 5.14%)</title><rect x="31.7853%" y="149" width="5.1392%" height="15" fill="rgb(251,118,11)"/><text x="32.0353%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (12,983,944 samples, 4.91%)</title><rect x="32.0158%" y="133" width="4.9087%" height="15" fill="rgb(217,147,25)"/><text x="32.2658%" y="143.50">specia..</text></g><g><title>coherence_checking (13,690,382 samples, 5.18%)</title><rect x="31.7779%" y="165" width="5.1758%" height="15" fill="rgb(247,81,37)"/><text x="32.0279%" y="175.50">cohere..</text></g><g><title>associated_items (355,943 samples, 0.13%)</title><rect x="51.8829%" y="117" width="0.1346%" height="15" fill="rgb(209,12,38)"/><text x="52.1329%" y="127.50"></text></g><g><title>adt_dtorck_constraint (409,406 samples, 0.15%)</title><rect x="52.1574%" y="101" width="0.1548%" height="15" fill="rgb(227,1,9)"/><text x="52.4074%" y="111.50"></text></g><g><title>dropck_outlives (799,891 samples, 0.30%)</title><rect x="52.0448%" y="117" width="0.3024%" height="15" fill="rgb(248,47,43)"/><text x="52.2948%" y="127.50"></text></g><g><title>adt_def (396,074 samples, 0.15%)</title><rect x="52.9365%" y="85" width="0.1497%" height="15" fill="rgb(221,10,30)"/><text x="53.1865%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (395,094 samples, 0.15%)</title><rect x="52.9369%" y="69" width="0.1494%" height="15" fill="rgb(210,229,1)"/><text x="53.1869%" y="79.50"></text></g><g><title>item_attrs (383,924 samples, 0.15%)</title><rect x="52.9411%" y="53" width="0.1451%" height="15" fill="rgb(222,148,37)"/><text x="53.1911%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (382,564 samples, 0.14%)</title><rect x="52.9416%" y="37" width="0.1446%" height="15" fill="rgb(234,67,33)"/><text x="53.1916%" y="47.50"></text></g><g><title>adt_sized_constraint (404,864 samples, 0.15%)</title><rect x="52.9337%" y="101" width="0.1531%" height="15" fill="rgb(247,98,35)"/><text x="53.1837%" y="111.50"></text></g><g><title>evaluate_obligation (2,871,154 samples, 1.09%)</title><rect x="52.3481%" y="117" width="1.0855%" height="15" fill="rgb(247,138,52)"/><text x="52.5981%" y="127.50"></text></g><g><title>trait_impls_of (308,565 samples, 0.12%)</title><rect x="53.3169%" y="101" width="0.1167%" height="15" fill="rgb(213,79,30)"/><text x="53.5669%" y="111.50"></text></g><g><title>method_autoderef_steps (436,884 samples, 0.17%)</title><rect x="53.7507%" y="117" width="0.1652%" height="15" fill="rgb(246,177,23)"/><text x="54.0007%" y="127.50"></text></g><g><title>predicates_of (412,079 samples, 0.16%)</title><rect x="53.9749%" y="117" width="0.1558%" height="15" fill="rgb(230,62,27)"/><text x="54.2249%" y="127.50"></text></g><g><title>predicates_defined_on (285,164 samples, 0.11%)</title><rect x="54.0229%" y="101" width="0.1078%" height="15" fill="rgb(216,154,8)"/><text x="54.2729%" y="111.50"></text></g><g><title>associated_item (335,353 samples, 0.13%)</title><rect x="65.9813%" y="85" width="0.1268%" height="15" fill="rgb(244,35,45)"/><text x="66.2313%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (271,293 samples, 0.10%)</title><rect x="66.0055%" y="69" width="0.1026%" height="15" fill="rgb(251,115,12)"/><text x="66.2555%" y="79.50"></text></g><g><title>associated_items (494,694 samples, 0.19%)</title><rect x="65.9347%" y="101" width="0.1870%" height="15" fill="rgb(240,54,50)"/><text x="66.1847%" y="111.50"></text></g><g><title>dropck_outlives (354,045 samples, 0.13%)</title><rect x="66.1525%" y="101" width="0.1339%" height="15" fill="rgb(233,84,52)"/><text x="66.4025%" y="111.50"></text></g><g><title>generics_of (785,925 samples, 0.30%)</title><rect x="67.5070%" y="85" width="0.2971%" height="15" fill="rgb(207,117,47)"/><text x="67.7570%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (650,285 samples, 0.25%)</title><rect x="67.5583%" y="69" width="0.2458%" height="15" fill="rgb(249,43,39)"/><text x="67.8083%" y="79.50"></text></g><g><title>impl_trait_ref (700,066 samples, 0.26%)</title><rect x="67.8234%" y="85" width="0.2647%" height="15" fill="rgb(209,38,44)"/><text x="68.0734%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (571,196 samples, 0.22%)</title><rect x="67.8721%" y="69" width="0.2159%" height="15" fill="rgb(236,212,23)"/><text x="68.1221%" y="79.50"></text></g><g><title>predicates_of (318,714 samples, 0.12%)</title><rect x="68.0950%" y="85" width="0.1205%" height="15" fill="rgb(242,79,21)"/><text x="68.3450%" y="95.50"></text></g><g><title>specializes (472,804 samples, 0.18%)</title><rect x="68.2155%" y="85" width="0.1787%" height="15" fill="rgb(211,96,35)"/><text x="68.4655%" y="95.50"></text></g><g><title>param_env (283,033 samples, 0.11%)</title><rect x="68.2872%" y="69" width="0.1070%" height="15" fill="rgb(253,215,40)"/><text x="68.5372%" y="79.50"></text></g><g><title>trait_impls_of (502,406 samples, 0.19%)</title><rect x="68.4003%" y="85" width="0.1899%" height="15" fill="rgb(211,81,21)"/><text x="68.6503%" y="95.50"></text></g><g><title>implementations_of_trait (340,525 samples, 0.13%)</title><rect x="68.4615%" y="69" width="0.1287%" height="15" fill="rgb(208,190,38)"/><text x="68.7115%" y="79.50"></text></g><g><title>evaluate_obligation (6,110,267 samples, 2.31%)</title><rect x="66.2864%" y="101" width="2.3101%" height="15" fill="rgb(235,213,38)"/><text x="66.5364%" y="111.50">e..</text></g><g><title>generics_of (678,319 samples, 0.26%)</title><rect x="68.6680%" y="101" width="0.2564%" height="15" fill="rgb(237,122,38)"/><text x="68.9180%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (528,785 samples, 0.20%)</title><rect x="68.7245%" y="85" width="0.1999%" height="15" fill="rgb(244,218,35)"/><text x="68.9745%" y="95.50"></text></g><g><title>is_copy_raw (441,777 samples, 0.17%)</title><rect x="69.0218%" y="101" width="0.1670%" height="15" fill="rgb(240,68,47)"/><text x="69.2718%" y="111.50"></text></g><g><title>evaluate_obligation (346,913 samples, 0.13%)</title><rect x="69.0577%" y="85" width="0.1312%" height="15" fill="rgb(210,16,53)"/><text x="69.3077%" y="95.50"></text></g><g><title>method_autoderef_steps (633,608 samples, 0.24%)</title><rect x="69.2591%" y="101" width="0.2395%" height="15" fill="rgb(235,124,12)"/><text x="69.5091%" y="111.50"></text></g><g><title>evaluate_obligation (308,096 samples, 0.12%)</title><rect x="69.3822%" y="85" width="0.1165%" height="15" fill="rgb(224,169,11)"/><text x="69.6322%" y="95.50"></text></g><g><title>predicates_of (364,974 samples, 0.14%)</title><rect x="69.5121%" y="101" width="0.1380%" height="15" fill="rgb(250,166,2)"/><text x="69.7621%" y="111.50"></text></g><g><title>predicates_defined_on (267,673 samples, 0.10%)</title><rect x="69.5489%" y="85" width="0.1012%" height="15" fill="rgb(242,216,29)"/><text x="69.7989%" y="95.50"></text></g><g><title>typeck (41,282,967 samples, 15.61%)</title><rect x="54.1761%" y="117" width="15.6075%" height="15" fill="rgb(230,116,27)"/><text x="54.4261%" y="127.50">typeck</text></g><g><title>item_bodies_checking (86,853,480 samples, 32.84%)</title><rect x="36.9732%" y="165" width="32.8360%" height="15" fill="rgb(228,99,48)"/><text x="37.2232%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (86,849,510 samples, 32.83%)</title><rect x="36.9747%" y="149" width="32.8345%" height="15" fill="rgb(253,11,6)"/><text x="37.2247%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (86,698,349 samples, 32.78%)</title><rect x="37.0319%" y="133" width="32.7774%" height="15" fill="rgb(247,143,39)"/><text x="37.2819%" y="143.50">typeck</text></g><g><title>item_types_checking (1,693,369 samples, 0.64%)</title><rect x="69.8092%" y="165" width="0.6402%" height="15" fill="rgb(236,97,10)"/><text x="70.0592%" y="175.50"></text></g><g><title>check_mod_item_types (1,685,729 samples, 0.64%)</title><rect x="69.8121%" y="149" width="0.6373%" height="15" fill="rgb(233,208,19)"/><text x="70.0621%" y="159.50"></text></g><g><title>mir_borrowck (463,195 samples, 0.18%)</title><rect x="70.8970%" y="53" width="0.1751%" height="15" fill="rgb(216,164,2)"/><text x="71.1470%" y="63.50"></text></g><g><title>mir_for_ctfe (637,478 samples, 0.24%)</title><rect x="70.8316%" y="85" width="0.2410%" height="15" fill="rgb(220,129,5)"/><text x="71.0816%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (577,507 samples, 0.22%)</title><rect x="70.8543%" y="69" width="0.2183%" height="15" fill="rgb(242,17,10)"/><text x="71.1043%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,392,835 samples, 0.53%)</title><rect x="70.6641%" y="133" width="0.5266%" height="15" fill="rgb(242,107,0)"/><text x="70.9141%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,376,885 samples, 0.52%)</title><rect x="70.6701%" y="117" width="0.5205%" height="15" fill="rgb(251,28,31)"/><text x="70.9201%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,367,765 samples, 0.52%)</title><rect x="70.6736%" y="101" width="0.5171%" height="15" fill="rgb(233,223,10)"/><text x="70.9236%" y="111.50"></text></g><g><title>typeck (311,304 samples, 0.12%)</title><rect x="71.0730%" y="85" width="0.1177%" height="15" fill="rgb(215,21,27)"/><text x="71.3230%" y="95.50"></text></g><g><title>fn_sig (884,470 samples, 0.33%)</title><rect x="71.1907%" y="133" width="0.3344%" height="15" fill="rgb(232,23,21)"/><text x="71.4407%" y="143.50"></text></g><g><title>lint_levels (446,185 samples, 0.17%)</title><rect x="71.7916%" y="85" width="0.1687%" height="15" fill="rgb(244,5,23)"/><text x="72.0416%" y="95.50"></text></g><g><title>is_late_bound_map (929,889 samples, 0.35%)</title><rect x="71.6094%" y="117" width="0.3516%" height="15" fill="rgb(226,81,46)"/><text x="71.8594%" y="127.50"></text></g><g><title>resolve_lifetimes (899,819 samples, 0.34%)</title><rect x="71.6208%" y="101" width="0.3402%" height="15" fill="rgb(247,70,30)"/><text x="71.8708%" y="111.50"></text></g><g><title>named_region_map (409,085 samples, 0.15%)</title><rect x="71.9610%" y="117" width="0.1547%" height="15" fill="rgb(212,68,19)"/><text x="72.2110%" y="127.50"></text></g><g><title>resolve_lifetimes (368,845 samples, 0.14%)</title><rect x="71.9762%" y="101" width="0.1394%" height="15" fill="rgb(240,187,13)"/><text x="72.2262%" y="111.50"></text></g><g><title>generics_of (1,582,847 samples, 0.60%)</title><rect x="71.5251%" y="133" width="0.5984%" height="15" fill="rgb(223,113,26)"/><text x="71.7751%" y="143.50"></text></g><g><title>predicates_of (772,388 samples, 0.29%)</title><rect x="72.1932%" y="133" width="0.2920%" height="15" fill="rgb(206,192,2)"/><text x="72.4432%" y="143.50"></text></g><g><title>predicates_defined_on (664,555 samples, 0.25%)</title><rect x="72.2340%" y="117" width="0.2512%" height="15" fill="rgb(241,108,4)"/><text x="72.4840%" y="127.50"></text></g><g><title>inferred_outlives_of (323,223 samples, 0.12%)</title><rect x="72.3630%" y="101" width="0.1222%" height="15" fill="rgb(247,173,49)"/><text x="72.6130%" y="111.50"></text></g><g><title>inferred_outlives_crate (283,643 samples, 0.11%)</title><rect x="72.3780%" y="85" width="0.1072%" height="15" fill="rgb(224,114,35)"/><text x="72.6280%" y="95.50"></text></g><g><title>type_collecting (5,547,060 samples, 2.10%)</title><rect x="70.4505%" y="165" width="2.0971%" height="15" fill="rgb(245,159,27)"/><text x="70.7005%" y="175.50">t..</text></g><g><title>collect_mod_item_types (5,529,250 samples, 2.09%)</title><rect x="70.4573%" y="149" width="2.0904%" height="15" fill="rgb(245,172,44)"/><text x="70.7073%" y="159.50">c..</text></g><g><title>evaluate_obligation (494,512 samples, 0.19%)</title><rect x="73.5934%" y="133" width="0.1870%" height="15" fill="rgb(236,23,11)"/><text x="73.8434%" y="143.50"></text></g><g><title>param_env (300,815 samples, 0.11%)</title><rect x="73.8561%" y="133" width="0.1137%" height="15" fill="rgb(205,117,38)"/><text x="74.1061%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,368,126 samples, 1.65%)</title><rect x="72.6860%" y="149" width="1.6514%" height="15" fill="rgb(237,72,25)"/><text x="72.9360%" y="159.50"></text></g><g><title>region_scope_tree (955,542 samples, 0.36%)</title><rect x="73.9762%" y="133" width="0.3613%" height="15" fill="rgb(244,70,9)"/><text x="74.2262%" y="143.50"></text></g><g><title>evaluate_obligation (433,365 samples, 0.16%)</title><rect x="75.1977%" y="133" width="0.1638%" height="15" fill="rgb(217,125,39)"/><text x="75.4477%" y="143.50"></text></g><g><title>param_env (380,966 samples, 0.14%)</title><rect x="75.4819%" y="133" width="0.1440%" height="15" fill="rgb(235,36,10)"/><text x="75.7319%" y="143.50"></text></g><g><title>region_scope_tree (278,094 samples, 0.11%)</title><rect x="75.6469%" y="133" width="0.1051%" height="15" fill="rgb(251,123,47)"/><text x="75.8969%" y="143.50"></text></g><g><title>check_item_well_formed (3,880,536 samples, 1.47%)</title><rect x="74.3374%" y="149" width="1.4671%" height="15" fill="rgb(221,13,13)"/><text x="74.5874%" y="159.50"></text></g><g><title>analysis (200,257,825 samples, 75.71%)</title><rect x="0.2761%" y="197" width="75.7099%" height="15" fill="rgb(238,131,9)"/><text x="0.5261%" y="207.50">analysis</text></g><g><title>type_check_crate (117,299,327 samples, 44.35%)</title><rect x="31.6395%" y="181" width="44.3464%" height="15" fill="rgb(211,50,8)"/><text x="31.8895%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,083,880 samples, 3.43%)</title><rect x="72.5517%" y="165" width="3.4343%" height="15" fill="rgb(245,182,24)"/><text x="72.8017%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (479,965 samples, 0.18%)</title><rect x="75.8045%" y="149" width="0.1815%" height="15" fill="rgb(242,14,37)"/><text x="76.0545%" y="159.50"></text></g><g><title>codegen_crate (351,514 samples, 0.13%)</title><rect x="75.9890%" y="197" width="0.1329%" height="15" fill="rgb(246,228,12)"/><text x="76.2390%" y="207.50"></text></g><g><title>AST_validation (398,345 samples, 0.15%)</title><rect x="76.1980%" y="181" width="0.1506%" height="15" fill="rgb(213,55,15)"/><text x="76.4480%" y="191.50"></text></g><g><title>complete_gated_feature_checking (267,363 samples, 0.10%)</title><rect x="76.3486%" y="181" width="0.1011%" height="15" fill="rgb(209,9,3)"/><text x="76.5986%" y="191.50"></text></g><g><title>metadata_load_macro (398,905 samples, 0.15%)</title><rect x="88.3025%" y="149" width="0.1508%" height="15" fill="rgb(230,59,30)"/><text x="88.5525%" y="159.50"></text></g><g><title>metadata_register_crate (2,294,376 samples, 0.87%)</title><rect x="88.4533%" y="149" width="0.8674%" height="15" fill="rgb(209,121,21)"/><text x="88.7033%" y="159.50"></text></g><g><title>metadata_register_crate (854,100 samples, 0.32%)</title><rect x="88.9978%" y="133" width="0.3229%" height="15" fill="rgb(220,109,13)"/><text x="89.2478%" y="143.50"></text></g><g><title>macro_expand_crate (34,560,872 samples, 13.07%)</title><rect x="76.4802%" y="181" width="13.0662%" height="15" fill="rgb(232,18,1)"/><text x="76.7302%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (34,546,262 samples, 13.06%)</title><rect x="76.4857%" y="165" width="13.0606%" height="15" fill="rgb(215,41,42)"/><text x="76.7357%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (596,828 samples, 0.23%)</title><rect x="89.3207%" y="149" width="0.2256%" height="15" fill="rgb(224,123,36)"/><text x="89.5707%" y="159.50"></text></g><g><title>finalize_macro_resolutions (408,104 samples, 0.15%)</title><rect x="89.6219%" y="165" width="0.1543%" height="15" fill="rgb(240,125,3)"/><text x="89.8719%" y="175.50"></text></g><g><title>late_resolve_crate (7,551,723 samples, 2.86%)</title><rect x="89.7762%" y="165" width="2.8550%" height="15" fill="rgb(205,98,50)"/><text x="90.0262%" y="175.50">la..</text></g><g><title>configure_and_expand (44,184,508 samples, 16.70%)</title><rect x="76.1219%" y="197" width="16.7045%" height="15" fill="rgb(205,185,37)"/><text x="76.3719%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (8,586,224 samples, 3.25%)</title><rect x="89.5803%" y="181" width="3.2461%" height="15" fill="rgb(238,207,15)"/><text x="89.8303%" y="191.50">res..</text></g><g><title>drop_ast (365,454 samples, 0.14%)</title><rect x="92.8264%" y="197" width="0.1382%" height="15" fill="rgb(213,199,42)"/><text x="93.0764%" y="207.50"></text></g><g><title>early_lint_checks (820,530 samples, 0.31%)</title><rect x="92.9708%" y="197" width="0.3102%" height="15" fill="rgb(235,201,11)"/><text x="93.2208%" y="207.50"></text></g><g><title>free_global_ctxt (4,782,093 samples, 1.81%)</title><rect x="93.2810%" y="197" width="1.8079%" height="15" fill="rgb(207,46,11)"/><text x="93.5310%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,045,802 samples, 0.77%)</title><rect x="95.0889%" y="197" width="0.7734%" height="15" fill="rgb(241,35,35)"/><text x="95.3389%" y="207.50"></text></g><g><title>hir_lowering (8,728,446 samples, 3.30%)</title><rect x="95.8623%" y="197" width="3.2999%" height="15" fill="rgb(243,32,47)"/><text x="96.1123%" y="207.50">hir..</text></g><g><title>prepare_outputs (284,043 samples, 0.11%)</title><rect x="99.2710%" y="197" width="0.1074%" height="15" fill="rgb(247,202,23)"/><text x="99.5210%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,175,823 samples, 0.44%)</title><rect x="99.3784%" y="197" width="0.4445%" height="15" fill="rgb(219,102,11)"/><text x="99.6284%" y="207.50"></text></g><g><title>all (264,506,875 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (264,506,875 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (376,194 samples, 0.14%)</title><rect x="99.8578%" y="197" width="0.1422%" height="15" fill="rgb(216,99,12)"/><text x="100.1078%" y="207.50"></text></g></svg></svg>