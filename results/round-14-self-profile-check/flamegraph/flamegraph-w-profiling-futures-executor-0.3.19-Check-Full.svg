<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (146,443 samples, 0.14%)</title><rect x="9.2956%" y="165" width="0.1398%" height="15" fill="rgb(227,0,7)"/><text x="9.5456%" y="175.50"></text></g><g><title>param_env (248,743 samples, 0.24%)</title><rect x="10.6348%" y="133" width="0.2375%" height="15" fill="rgb(217,0,24)"/><text x="10.8848%" y="143.50"></text></g><g><title>item_attrs (203,571 samples, 0.19%)</title><rect x="11.2677%" y="101" width="0.1944%" height="15" fill="rgb(221,193,54)"/><text x="11.5177%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (195,931 samples, 0.19%)</title><rect x="11.2750%" y="85" width="0.1871%" height="15" fill="rgb(248,212,6)"/><text x="11.5250%" y="95.50"></text></g><g><title>codegen_fn_attrs (308,642 samples, 0.29%)</title><rect x="11.1820%" y="117" width="0.2947%" height="15" fill="rgb(208,68,35)"/><text x="11.4320%" y="127.50"></text></g><g><title>is_copy_raw (116,932 samples, 0.11%)</title><rect x="13.2033%" y="69" width="0.1117%" height="15" fill="rgb(232,128,0)"/><text x="13.4533%" y="79.50"></text></g><g><title>adt_drop_tys (250,013 samples, 0.24%)</title><rect x="13.1725%" y="85" width="0.2387%" height="15" fill="rgb(207,160,47)"/><text x="13.4225%" y="95.50"></text></g><g><title>needs_drop_raw (845,490 samples, 0.81%)</title><rect x="13.0659%" y="101" width="0.8073%" height="15" fill="rgb(228,23,34)"/><text x="13.3159%" y="111.50"></text></g><g><title>is_copy_raw (480,167 samples, 0.46%)</title><rect x="13.4147%" y="85" width="0.4585%" height="15" fill="rgb(218,30,26)"/><text x="13.6647%" y="95.50"></text></g><g><title>evaluate_obligation (366,925 samples, 0.35%)</title><rect x="13.5228%" y="69" width="0.3504%" height="15" fill="rgb(220,122,19)"/><text x="13.7728%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (175,392 samples, 0.17%)</title><rect x="14.0272%" y="85" width="0.1675%" height="15" fill="rgb(250,228,42)"/><text x="14.2772%" y="95.50"></text></g><g><title>specialization_graph_of (292,133 samples, 0.28%)</title><rect x="14.2316%" y="85" width="0.2789%" height="15" fill="rgb(240,193,28)"/><text x="14.4816%" y="95.50"></text></g><g><title>resolve_instance (752,533 samples, 0.72%)</title><rect x="13.8732%" y="101" width="0.7186%" height="15" fill="rgb(216,20,37)"/><text x="14.1232%" y="111.50"></text></g><g><title>thir_body (566,783 samples, 0.54%)</title><rect x="14.6198%" y="101" width="0.5412%" height="15" fill="rgb(206,188,39)"/><text x="14.8698%" y="111.50"></text></g><g><title>mir_const (5,356,998 samples, 5.12%)</title><rect x="10.0723%" y="149" width="5.1151%" height="15" fill="rgb(217,207,13)"/><text x="10.3223%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (4,519,172 samples, 4.32%)</title><rect x="10.8723%" y="133" width="4.3151%" height="15" fill="rgb(231,73,38)"/><text x="11.1223%" y="143.50">unsaf..</text></g><g><title>mir_built (3,886,254 samples, 3.71%)</title><rect x="11.4767%" y="117" width="3.7108%" height="15" fill="rgb(225,20,46)"/><text x="11.7267%" y="127.50">mir_..</text></g><g><title>has_structural_eq_impls (217,053 samples, 0.21%)</title><rect x="15.4084%" y="133" width="0.2073%" height="15" fill="rgb(210,31,41)"/><text x="15.6584%" y="143.50"></text></g><g><title>evaluate_obligation (180,553 samples, 0.17%)</title><rect x="15.4432%" y="117" width="0.1724%" height="15" fill="rgb(221,200,47)"/><text x="15.6932%" y="127.50"></text></g><g><title>trait_impls_of (138,652 samples, 0.13%)</title><rect x="15.4833%" y="101" width="0.1324%" height="15" fill="rgb(226,26,5)"/><text x="15.7333%" y="111.50"></text></g><g><title>mir_const (109,620 samples, 0.10%)</title><rect x="15.7094%" y="133" width="0.1047%" height="15" fill="rgb(249,33,26)"/><text x="15.9594%" y="143.50"></text></g><g><title>mir_const_qualif (743,207 samples, 0.71%)</title><rect x="15.1874%" y="149" width="0.7096%" height="15" fill="rgb(235,183,28)"/><text x="15.4374%" y="159.50"></text></g><g><title>mir_promoted (6,676,945 samples, 6.38%)</title><rect x="9.5221%" y="165" width="6.3755%" height="15" fill="rgb(221,5,38)"/><text x="9.7721%" y="175.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (395,986 samples, 0.38%)</title><rect x="15.8975%" y="165" width="0.3781%" height="15" fill="rgb(247,18,42)"/><text x="16.1475%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (485,874 samples, 0.46%)</title><rect x="16.2756%" y="165" width="0.4639%" height="15" fill="rgb(241,131,45)"/><text x="16.5256%" y="175.50"></text></g><g><title>normalize_projection_ty (269,683 samples, 0.26%)</title><rect x="16.4820%" y="149" width="0.2575%" height="15" fill="rgb(249,31,29)"/><text x="16.7320%" y="159.50"></text></g><g><title>type_op_normalize_ty (107,751 samples, 0.10%)</title><rect x="16.7892%" y="165" width="0.1029%" height="15" fill="rgb(225,111,53)"/><text x="17.0392%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,167,718 samples, 2.07%)</title><rect x="16.8921%" y="165" width="2.0698%" height="15" fill="rgb(238,160,17)"/><text x="17.1421%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (18,698,609 samples, 17.85%)</title><rect x="1.1152%" y="197" width="17.8543%" height="15" fill="rgb(214,148,48)"/><text x="1.3652%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,611,527 samples, 17.77%)</title><rect x="1.1984%" y="181" width="17.7711%" height="15" fill="rgb(232,36,49)"/><text x="1.4484%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (300,103 samples, 0.29%)</title><rect x="18.9695%" y="197" width="0.2866%" height="15" fill="rgb(209,103,24)"/><text x="19.2195%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (131,851 samples, 0.13%)</title><rect x="19.1302%" y="181" width="0.1259%" height="15" fill="rgb(229,88,8)"/><text x="19.3802%" y="191.50"></text></g><g><title>hir_module_items (238,173 samples, 0.23%)</title><rect x="19.2561%" y="197" width="0.2274%" height="15" fill="rgb(213,181,19)"/><text x="19.5061%" y="207.50"></text></g><g><title>codegen_fn_attrs (127,732 samples, 0.12%)</title><rect x="19.8114%" y="133" width="0.1220%" height="15" fill="rgb(254,191,54)"/><text x="20.0614%" y="143.50"></text></g><g><title>should_inherit_track_caller (199,272 samples, 0.19%)</title><rect x="19.7478%" y="149" width="0.1903%" height="15" fill="rgb(241,83,37)"/><text x="19.9978%" y="159.50"></text></g><g><title>codegen_fn_attrs (319,303 samples, 0.30%)</title><rect x="19.6446%" y="165" width="0.3049%" height="15" fill="rgb(233,36,39)"/><text x="19.8946%" y="175.50"></text></g><g><title>check_mod_attrs (465,106 samples, 0.44%)</title><rect x="19.5055%" y="181" width="0.4441%" height="15" fill="rgb(226,3,54)"/><text x="19.7555%" y="191.50"></text></g><g><title>lookup_deprecation_entry (119,771 samples, 0.11%)</title><rect x="20.2086%" y="165" width="0.1144%" height="15" fill="rgb(245,192,40)"/><text x="20.4586%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (365,883 samples, 0.35%)</title><rect x="20.0642%" y="181" width="0.3494%" height="15" fill="rgb(238,167,29)"/><text x="20.3142%" y="191.50"></text></g><g><title>misc_checking_1 (1,051,752 samples, 1.00%)</title><rect x="19.4840%" y="197" width="1.0043%" height="15" fill="rgb(232,182,51)"/><text x="19.7340%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (337,763 samples, 0.32%)</title><rect x="20.4901%" y="181" width="0.3225%" height="15" fill="rgb(231,60,39)"/><text x="20.7401%" y="191.50"></text></g><g><title>check_mod_liveness (280,732 samples, 0.27%)</title><rect x="20.5446%" y="165" width="0.2681%" height="15" fill="rgb(208,69,12)"/><text x="20.7946%" y="175.50"></text></g><g><title>misc_checking_2 (710,438 samples, 0.68%)</title><rect x="20.4882%" y="197" width="0.6784%" height="15" fill="rgb(235,93,37)"/><text x="20.7382%" y="207.50"></text></g><g><title>match_checking (370,665 samples, 0.35%)</title><rect x="20.8126%" y="181" width="0.3539%" height="15" fill="rgb(213,116,39)"/><text x="21.0626%" y="191.50"></text></g><g><title>check_match (348,215 samples, 0.33%)</title><rect x="20.8341%" y="165" width="0.3325%" height="15" fill="rgb(222,207,29)"/><text x="21.0841%" y="175.50"></text></g><g><title>check_private_in_public (134,782 samples, 0.13%)</title><rect x="21.1760%" y="181" width="0.1287%" height="15" fill="rgb(206,96,30)"/><text x="21.4260%" y="191.50"></text></g><g><title>death_checking (310,793 samples, 0.30%)</title><rect x="21.3046%" y="181" width="0.2968%" height="15" fill="rgb(218,138,4)"/><text x="21.5546%" y="191.50"></text></g><g><title>layout_of (133,101 samples, 0.13%)</title><rect x="22.5355%" y="101" width="0.1271%" height="15" fill="rgb(250,191,14)"/><text x="22.7855%" y="111.50"></text></g><g><title>fn_abi_of_instance (222,822 samples, 0.21%)</title><rect x="22.4858%" y="117" width="0.2128%" height="15" fill="rgb(239,60,40)"/><text x="22.7358%" y="127.50"></text></g><g><title>eval_to_allocation_raw (435,415 samples, 0.42%)</title><rect x="22.3651%" y="149" width="0.4158%" height="15" fill="rgb(206,27,48)"/><text x="22.6151%" y="159.50"></text></g><g><title>eval_to_allocation_raw (433,765 samples, 0.41%)</title><rect x="22.3667%" y="133" width="0.4142%" height="15" fill="rgb(225,35,8)"/><text x="22.6167%" y="143.50"></text></g><g><title>eval_to_const_value_raw (290,713 samples, 0.28%)</title><rect x="22.7809%" y="149" width="0.2776%" height="15" fill="rgb(250,213,24)"/><text x="23.0309%" y="159.50"></text></g><g><title>eval_to_const_value_raw (287,473 samples, 0.27%)</title><rect x="22.7839%" y="133" width="0.2745%" height="15" fill="rgb(247,123,22)"/><text x="23.0339%" y="143.50"></text></g><g><title>eval_to_allocation_raw (280,343 samples, 0.27%)</title><rect x="22.7908%" y="117" width="0.2677%" height="15" fill="rgb(231,138,38)"/><text x="23.0408%" y="127.50"></text></g><g><title>param_env (272,822 samples, 0.26%)</title><rect x="23.0584%" y="149" width="0.2605%" height="15" fill="rgb(231,145,46)"/><text x="23.3084%" y="159.50"></text></g><g><title>predicates_of (118,890 samples, 0.11%)</title><rect x="23.2054%" y="133" width="0.1135%" height="15" fill="rgb(251,118,11)"/><text x="23.4554%" y="143.50"></text></g><g><title>crate_lints (3,014,463 samples, 2.88%)</title><rect x="21.6033%" y="165" width="2.8783%" height="15" fill="rgb(217,147,25)"/><text x="21.8533%" y="175.50">cr..</text></g><g><title>type_of (1,209,763 samples, 1.16%)</title><rect x="23.3265%" y="149" width="1.1551%" height="15" fill="rgb(247,81,37)"/><text x="23.5765%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (945,121 samples, 0.90%)</title><rect x="23.5792%" y="133" width="0.9024%" height="15" fill="rgb(209,12,38)"/><text x="23.8292%" y="143.50"></text></g><g><title>lint_checking (3,277,096 samples, 3.13%)</title><rect x="21.6014%" y="181" width="3.1291%" height="15" fill="rgb(227,1,9)"/><text x="21.8514%" y="191.50">lin..</text></g><g><title>module_lints (260,703 samples, 0.25%)</title><rect x="24.4816%" y="165" width="0.2489%" height="15" fill="rgb(248,47,43)"/><text x="24.7316%" y="175.50"></text></g><g><title>lint_mod (255,563 samples, 0.24%)</title><rect x="24.4865%" y="149" width="0.2440%" height="15" fill="rgb(221,10,30)"/><text x="24.7365%" y="159.50"></text></g><g><title>privacy_access_levels (149,892 samples, 0.14%)</title><rect x="24.7305%" y="181" width="0.1431%" height="15" fill="rgb(210,229,1)"/><text x="24.9805%" y="191.50"></text></g><g><title>privacy_checking_modules (555,846 samples, 0.53%)</title><rect x="24.8737%" y="181" width="0.5307%" height="15" fill="rgb(222,148,37)"/><text x="25.1237%" y="191.50"></text></g><g><title>check_mod_privacy (553,246 samples, 0.53%)</title><rect x="24.8761%" y="165" width="0.5283%" height="15" fill="rgb(234,67,33)"/><text x="25.1261%" y="175.50"></text></g><g><title>misc_checking_3 (4,457,269 samples, 4.26%)</title><rect x="21.1666%" y="197" width="4.2560%" height="15" fill="rgb(247,98,35)"/><text x="21.4166%" y="207.50">misc_..</text></g><g><title>impl_parent (1,833,306 samples, 1.75%)</title><rect x="28.2377%" y="133" width="1.7505%" height="15" fill="rgb(247,138,52)"/><text x="28.4877%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,163,397 samples, 1.11%)</title><rect x="28.8773%" y="117" width="1.1109%" height="15" fill="rgb(213,79,30)"/><text x="29.1273%" y="127.50"></text></g><g><title>impl_trait_ref (4,822,178 samples, 4.60%)</title><rect x="29.9882%" y="133" width="4.6044%" height="15" fill="rgb(246,177,23)"/><text x="30.2382%" y="143.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,151,664 samples, 3.96%)</title><rect x="30.6284%" y="117" width="3.9642%" height="15" fill="rgb(230,62,27)"/><text x="30.8784%" y="127.50">meta..</text></g><g><title>coherent_trait (10,194,024 samples, 9.73%)</title><rect x="25.4952%" y="165" width="9.7337%" height="15" fill="rgb(216,154,8)"/><text x="25.7452%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (10,175,573 samples, 9.72%)</title><rect x="25.5128%" y="149" width="9.7161%" height="15" fill="rgb(244,35,45)"/><text x="25.7628%" y="159.50">specialization..</text></g><g><title>trait_impls_of (664,076 samples, 0.63%)</title><rect x="34.5948%" y="133" width="0.6341%" height="15" fill="rgb(251,115,12)"/><text x="34.8448%" y="143.50"></text></g><g><title>implementations_of_trait (201,792 samples, 0.19%)</title><rect x="35.0362%" y="117" width="0.1927%" height="15" fill="rgb(240,54,50)"/><text x="35.2862%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (142,552 samples, 0.14%)</title><rect x="35.0928%" y="101" width="0.1361%" height="15" fill="rgb(233,84,52)"/><text x="35.3428%" y="111.50"></text></g><g><title>coherence_checking (10,258,734 samples, 9.80%)</title><rect x="25.4752%" y="181" width="9.7955%" height="15" fill="rgb(207,117,47)"/><text x="25.7252%" y="191.50">coherence_chec..</text></g><g><title>associated_item (216,345 samples, 0.21%)</title><rect x="42.5733%" y="117" width="0.2066%" height="15" fill="rgb(249,43,39)"/><text x="42.8233%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (168,743 samples, 0.16%)</title><rect x="42.6188%" y="101" width="0.1611%" height="15" fill="rgb(209,38,44)"/><text x="42.8688%" y="111.50"></text></g><g><title>associated_items (336,425 samples, 0.32%)</title><rect x="42.4791%" y="133" width="0.3212%" height="15" fill="rgb(236,212,23)"/><text x="42.7291%" y="143.50"></text></g><g><title>adt_def (431,946 samples, 0.41%)</title><rect x="43.1870%" y="85" width="0.4124%" height="15" fill="rgb(242,79,21)"/><text x="43.4370%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (430,766 samples, 0.41%)</title><rect x="43.1881%" y="69" width="0.4113%" height="15" fill="rgb(211,96,35)"/><text x="43.4381%" y="79.50"></text></g><g><title>item_attrs (407,185 samples, 0.39%)</title><rect x="43.2106%" y="53" width="0.3888%" height="15" fill="rgb(253,215,40)"/><text x="43.4606%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (405,725 samples, 0.39%)</title><rect x="43.2120%" y="37" width="0.3874%" height="15" fill="rgb(211,81,21)"/><text x="43.4620%" y="47.50"></text></g><g><title>adt_dtorck_constraint (543,097 samples, 0.52%)</title><rect x="43.1522%" y="101" width="0.5186%" height="15" fill="rgb(208,190,38)"/><text x="43.4022%" y="111.50"></text></g><g><title>adt_dtorck_constraint (760,671 samples, 0.73%)</title><rect x="43.0096%" y="117" width="0.7263%" height="15" fill="rgb(235,213,38)"/><text x="43.2596%" y="127.50"></text></g><g><title>dropck_outlives (943,275 samples, 0.90%)</title><rect x="42.8400%" y="133" width="0.9007%" height="15" fill="rgb(237,122,38)"/><text x="43.0900%" y="143.50"></text></g><g><title>adt_def (107,931 samples, 0.10%)</title><rect x="44.2231%" y="101" width="0.1031%" height="15" fill="rgb(244,218,35)"/><text x="44.4731%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (106,701 samples, 0.10%)</title><rect x="44.2242%" y="85" width="0.1019%" height="15" fill="rgb(240,68,47)"/><text x="44.4742%" y="95.50"></text></g><g><title>adt_sized_constraint (119,081 samples, 0.11%)</title><rect x="44.2161%" y="117" width="0.1137%" height="15" fill="rgb(210,16,53)"/><text x="44.4661%" y="127.50"></text></g><g><title>evaluate_obligation (878,337 samples, 0.84%)</title><rect x="43.7407%" y="133" width="0.8387%" height="15" fill="rgb(235,124,12)"/><text x="43.9907%" y="143.50"></text></g><g><title>item_attrs (106,822 samples, 0.10%)</title><rect x="44.8807%" y="133" width="0.1020%" height="15" fill="rgb(224,169,11)"/><text x="45.1307%" y="143.50"></text></g><g><title>method_autoderef_steps (209,532 samples, 0.20%)</title><rect x="45.0314%" y="133" width="0.2001%" height="15" fill="rgb(250,166,2)"/><text x="45.2814%" y="143.50"></text></g><g><title>object_safety_violations (137,551 samples, 0.13%)</title><rect x="45.2314%" y="133" width="0.1313%" height="15" fill="rgb(242,216,29)"/><text x="45.4814%" y="143.50"></text></g><g><title>predicates_of (256,565 samples, 0.24%)</title><rect x="45.3928%" y="133" width="0.2450%" height="15" fill="rgb(230,116,27)"/><text x="45.6428%" y="143.50"></text></g><g><title>predicates_defined_on (180,193 samples, 0.17%)</title><rect x="45.4657%" y="117" width="0.1721%" height="15" fill="rgb(228,99,48)"/><text x="45.7157%" y="127.50"></text></g><g><title>associated_item (233,113 samples, 0.22%)</title><rect x="51.4136%" y="101" width="0.2226%" height="15" fill="rgb(253,11,6)"/><text x="51.6636%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (182,252 samples, 0.17%)</title><rect x="51.4622%" y="85" width="0.1740%" height="15" fill="rgb(247,143,39)"/><text x="51.7122%" y="95.50"></text></g><g><title>associated_items (566,537 samples, 0.54%)</title><rect x="51.1133%" y="117" width="0.5410%" height="15" fill="rgb(236,97,10)"/><text x="51.3633%" y="127.50"></text></g><g><title>dropck_outlives (152,620 samples, 0.15%)</title><rect x="51.6759%" y="117" width="0.1457%" height="15" fill="rgb(233,208,19)"/><text x="51.9259%" y="127.50"></text></g><g><title>evaluate_obligation (565,317 samples, 0.54%)</title><rect x="51.8216%" y="117" width="0.5398%" height="15" fill="rgb(216,164,2)"/><text x="52.0716%" y="127.50"></text></g><g><title>is_copy_raw (707,886 samples, 0.68%)</title><rect x="52.5590%" y="117" width="0.6759%" height="15" fill="rgb(220,129,5)"/><text x="52.8090%" y="127.50"></text></g><g><title>evaluate_obligation (522,545 samples, 0.50%)</title><rect x="52.7360%" y="101" width="0.4989%" height="15" fill="rgb(242,17,10)"/><text x="52.9860%" y="111.50"></text></g><g><title>trait_impls_of (148,742 samples, 0.14%)</title><rect x="53.0929%" y="85" width="0.1420%" height="15" fill="rgb(242,107,0)"/><text x="53.3429%" y="95.50"></text></g><g><title>evaluate_obligation (163,441 samples, 0.16%)</title><rect x="53.4679%" y="101" width="0.1561%" height="15" fill="rgb(251,28,31)"/><text x="53.7179%" y="111.50"></text></g><g><title>method_autoderef_steps (332,854 samples, 0.32%)</title><rect x="53.3375%" y="117" width="0.3178%" height="15" fill="rgb(233,223,10)"/><text x="53.5875%" y="127.50"></text></g><g><title>predicates_of (146,253 samples, 0.14%)</title><rect x="53.6659%" y="117" width="0.1396%" height="15" fill="rgb(215,21,27)"/><text x="53.9159%" y="127.50"></text></g><g><title>typeck (8,497,864 samples, 8.11%)</title><rect x="45.7745%" y="133" width="8.1141%" height="15" fill="rgb(232,23,21)"/><text x="46.0245%" y="143.50">typeck</text></g><g><title>item_bodies_checking (19,515,508 samples, 18.63%)</title><rect x="35.2945%" y="181" width="18.6343%" height="15" fill="rgb(244,5,23)"/><text x="35.5445%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,512,008 samples, 18.63%)</title><rect x="35.2979%" y="165" width="18.6310%" height="15" fill="rgb(226,81,46)"/><text x="35.5479%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (19,461,076 samples, 18.58%)</title><rect x="35.3465%" y="149" width="18.5823%" height="15" fill="rgb(247,70,30)"/><text x="35.5965%" y="159.50">typeck</text></g><g><title>layout_of (112,721 samples, 0.11%)</title><rect x="54.7086%" y="101" width="0.1076%" height="15" fill="rgb(212,68,19)"/><text x="54.9586%" y="111.50"></text></g><g><title>layout_of (134,581 samples, 0.13%)</title><rect x="54.6897%" y="117" width="0.1285%" height="15" fill="rgb(240,187,13)"/><text x="54.9397%" y="127.50"></text></g><g><title>layout_of (192,062 samples, 0.18%)</title><rect x="54.6478%" y="133" width="0.1834%" height="15" fill="rgb(223,113,26)"/><text x="54.8978%" y="143.50"></text></g><g><title>layout_of (215,672 samples, 0.21%)</title><rect x="54.6292%" y="149" width="0.2059%" height="15" fill="rgb(206,192,2)"/><text x="54.8792%" y="159.50"></text></g><g><title>adt_dtorck_constraint (144,712 samples, 0.14%)</title><rect x="55.5575%" y="101" width="0.1382%" height="15" fill="rgb(241,108,4)"/><text x="55.8075%" y="111.50"></text></g><g><title>dropck_outlives (282,442 samples, 0.27%)</title><rect x="55.4446%" y="133" width="0.2697%" height="15" fill="rgb(247,173,49)"/><text x="55.6946%" y="143.50"></text></g><g><title>adt_dtorck_constraint (241,022 samples, 0.23%)</title><rect x="55.4841%" y="117" width="0.2301%" height="15" fill="rgb(224,114,35)"/><text x="55.7341%" y="127.50"></text></g><g><title>item_types_checking (1,990,782 samples, 1.90%)</title><rect x="53.9288%" y="181" width="1.9009%" height="15" fill="rgb(245,159,27)"/><text x="54.1788%" y="191.50">i..</text></g><g><title>check_mod_item_types (1,986,832 samples, 1.90%)</title><rect x="53.9326%" y="165" width="1.8971%" height="15" fill="rgb(245,172,44)"/><text x="54.1826%" y="175.50">c..</text></g><g><title>typeck (1,002,432 samples, 0.96%)</title><rect x="54.8725%" y="149" width="0.9572%" height="15" fill="rgb(236,23,11)"/><text x="55.1225%" y="159.50"></text></g><g><title>fn_sig (367,065 samples, 0.35%)</title><rect x="56.0128%" y="149" width="0.3505%" height="15" fill="rgb(205,117,38)"/><text x="56.2628%" y="159.50"></text></g><g><title>generics_of (186,910 samples, 0.18%)</title><rect x="56.3633%" y="149" width="0.1785%" height="15" fill="rgb(237,72,25)"/><text x="56.6133%" y="159.50"></text></g><g><title>late_bound_vars_map (146,691 samples, 0.14%)</title><rect x="56.8820%" y="101" width="0.1401%" height="15" fill="rgb(244,70,9)"/><text x="57.1320%" y="111.50"></text></g><g><title>resolve_lifetimes (141,351 samples, 0.13%)</title><rect x="56.8871%" y="85" width="0.1350%" height="15" fill="rgb(217,125,39)"/><text x="57.1371%" y="95.50"></text></g><g><title>explicit_predicates_of (443,242 samples, 0.42%)</title><rect x="56.6591%" y="117" width="0.4232%" height="15" fill="rgb(235,36,10)"/><text x="56.9091%" y="127.50"></text></g><g><title>predicates_of (786,667 samples, 0.75%)</title><rect x="56.5828%" y="149" width="0.7511%" height="15" fill="rgb(251,123,47)"/><text x="56.8328%" y="159.50"></text></g><g><title>predicates_defined_on (758,326 samples, 0.72%)</title><rect x="56.6098%" y="133" width="0.7241%" height="15" fill="rgb(221,13,13)"/><text x="56.8598%" y="143.50"></text></g><g><title>inferred_outlives_of (263,433 samples, 0.25%)</title><rect x="57.0824%" y="117" width="0.2515%" height="15" fill="rgb(238,131,9)"/><text x="57.3324%" y="127.50"></text></g><g><title>inferred_outlives_crate (247,723 samples, 0.24%)</title><rect x="57.0974%" y="101" width="0.2365%" height="15" fill="rgb(211,50,8)"/><text x="57.3474%" y="111.50"></text></g><g><title>type_of (149,452 samples, 0.14%)</title><rect x="57.1912%" y="85" width="0.1427%" height="15" fill="rgb(245,182,24)"/><text x="57.4412%" y="95.50"></text></g><g><title>type_collecting (1,695,198 samples, 1.62%)</title><rect x="55.8326%" y="181" width="1.6187%" height="15" fill="rgb(242,14,37)"/><text x="56.0826%" y="191.50"></text></g><g><title>collect_mod_item_types (1,682,008 samples, 1.61%)</title><rect x="55.8452%" y="165" width="1.6061%" height="15" fill="rgb(246,228,12)"/><text x="56.0952%" y="175.50"></text></g><g><title>type_of (122,911 samples, 0.12%)</title><rect x="57.3339%" y="149" width="0.1174%" height="15" fill="rgb(213,55,15)"/><text x="57.5839%" y="159.50"></text></g><g><title>evaluate_obligation (314,942 samples, 0.30%)</title><rect x="58.5353%" y="149" width="0.3007%" height="15" fill="rgb(209,9,3)"/><text x="58.7853%" y="159.50"></text></g><g><title>implied_outlives_bounds (165,603 samples, 0.16%)</title><rect x="58.8446%" y="149" width="0.1581%" height="15" fill="rgb(230,59,30)"/><text x="59.0946%" y="159.50"></text></g><g><title>param_env (133,290 samples, 0.13%)</title><rect x="59.0095%" y="149" width="0.1273%" height="15" fill="rgb(209,121,21)"/><text x="59.2595%" y="159.50"></text></g><g><title>region_scope_tree (166,702 samples, 0.16%)</title><rect x="59.2062%" y="149" width="0.1592%" height="15" fill="rgb(220,109,13)"/><text x="59.4562%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,913,235 samples, 1.83%)</title><rect x="57.5716%" y="165" width="1.8268%" height="15" fill="rgb(232,18,1)"/><text x="57.8216%" y="175.50">c..</text></g><g><title>adt_sized_constraint (218,013 samples, 0.21%)</title><rect x="60.7218%" y="117" width="0.2082%" height="15" fill="rgb(215,41,42)"/><text x="60.9718%" y="127.50"></text></g><g><title>adt_sized_constraint (343,443 samples, 0.33%)</title><rect x="60.6151%" y="133" width="0.3279%" height="15" fill="rgb(224,123,36)"/><text x="60.8651%" y="143.50"></text></g><g><title>evaluate_obligation (918,339 samples, 0.88%)</title><rect x="60.2149%" y="149" width="0.8769%" height="15" fill="rgb(240,125,3)"/><text x="60.4649%" y="159.50"></text></g><g><title>param_env (248,733 samples, 0.24%)</title><rect x="61.1833%" y="149" width="0.2375%" height="15" fill="rgb(205,98,50)"/><text x="61.4333%" y="159.50"></text></g><g><title>analysis (63,792,260 samples, 60.91%)</title><rect x="0.8272%" y="213" width="60.9118%" height="15" fill="rgb(205,185,37)"/><text x="1.0772%" y="223.50">analysis</text></g><g><title>type_check_crate (38,033,773 samples, 36.32%)</title><rect x="25.4226%" y="197" width="36.3164%" height="15" fill="rgb(238,207,15)"/><text x="25.6726%" y="207.50">type_check_crate</text></g><g><title>wf_checking (4,486,050 samples, 4.28%)</title><rect x="57.4555%" y="181" width="4.2835%" height="15" fill="rgb(213,199,42)"/><text x="57.7055%" y="191.50">wf_ch..</text></g><g><title>check_item_well_formed (2,451,234 samples, 2.34%)</title><rect x="59.3984%" y="165" width="2.3405%" height="15" fill="rgb(235,201,11)"/><text x="59.6484%" y="175.50">c..</text></g><g><title>codegen_crate (562,376 samples, 0.54%)</title><rect x="61.7497%" y="213" width="0.5370%" height="15" fill="rgb(207,46,11)"/><text x="61.9997%" y="223.50"></text></g><g><title>AST_validation (286,893 samples, 0.27%)</title><rect x="62.5012%" y="197" width="0.2739%" height="15" fill="rgb(241,35,35)"/><text x="62.7512%" y="207.50"></text></g><g><title>complete_gated_feature_checking (106,552 samples, 0.10%)</title><rect x="62.7751%" y="197" width="0.1017%" height="15" fill="rgb(243,32,47)"/><text x="63.0251%" y="207.50"></text></g><g><title>metadata_load_macro (517,516 samples, 0.49%)</title><rect x="83.8973%" y="165" width="0.4941%" height="15" fill="rgb(247,202,23)"/><text x="84.1473%" y="175.50"></text></g><g><title>metadata_register_crate (3,068,225 samples, 2.93%)</title><rect x="84.3914%" y="165" width="2.9297%" height="15" fill="rgb(219,102,11)"/><text x="84.6414%" y="175.50">me..</text></g><g><title>metadata_register_crate (1,041,344 samples, 0.99%)</title><rect x="86.3268%" y="149" width="0.9943%" height="15" fill="rgb(243,110,44)"/><text x="86.5768%" y="159.50"></text></g><g><title>macro_expand_crate (25,688,766 samples, 24.53%)</title><rect x="62.9634%" y="197" width="24.5288%" height="15" fill="rgb(222,74,54)"/><text x="63.2134%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (25,671,696 samples, 24.51%)</title><rect x="62.9797%" y="181" width="24.5125%" height="15" fill="rgb(216,99,12)"/><text x="63.2297%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (179,191 samples, 0.17%)</title><rect x="87.3211%" y="165" width="0.1711%" height="15" fill="rgb(226,22,26)"/><text x="87.5711%" y="175.50"></text></g><g><title>finalize_imports (158,372 samples, 0.15%)</title><rect x="87.5948%" y="181" width="0.1512%" height="15" fill="rgb(217,163,10)"/><text x="87.8448%" y="191.50"></text></g><g><title>finalize_macro_resolutions (134,092 samples, 0.13%)</title><rect x="87.7461%" y="181" width="0.1280%" height="15" fill="rgb(213,25,53)"/><text x="87.9961%" y="191.50"></text></g><g><title>late_resolve_crate (2,400,127 samples, 2.29%)</title><rect x="87.8741%" y="181" width="2.2918%" height="15" fill="rgb(252,105,26)"/><text x="88.1241%" y="191.50">l..</text></g><g><title>configure_and_expand (29,350,697 samples, 28.03%)</title><rect x="62.2867%" y="213" width="28.0254%" height="15" fill="rgb(220,39,43)"/><text x="62.5367%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,855,982 samples, 2.73%)</title><rect x="87.5851%" y="197" width="2.7270%" height="15" fill="rgb(229,68,48)"/><text x="87.8351%" y="207.50">re..</text></g><g><title>drop_ast (190,722 samples, 0.18%)</title><rect x="90.3121%" y="213" width="0.1821%" height="15" fill="rgb(252,8,32)"/><text x="90.5621%" y="223.50"></text></g><g><title>early_lint_checks (390,805 samples, 0.37%)</title><rect x="90.5103%" y="213" width="0.3732%" height="15" fill="rgb(223,20,43)"/><text x="90.7603%" y="223.50"></text></g><g><title>free_global_ctxt (3,533,970 samples, 3.37%)</title><rect x="90.8834%" y="213" width="3.3744%" height="15" fill="rgb(229,81,49)"/><text x="91.1334%" y="223.50">fre..</text></g><g><title>generate_crate_metadata (896,360 samples, 0.86%)</title><rect x="94.2578%" y="213" width="0.8559%" height="15" fill="rgb(236,28,36)"/><text x="94.5078%" y="223.50"></text></g><g><title>hir_lowering (3,003,023 samples, 2.87%)</title><rect x="95.1137%" y="213" width="2.8674%" height="15" fill="rgb(249,185,26)"/><text x="95.3637%" y="223.50">hi..</text></g><g><title>parse_crate (508,856 samples, 0.49%)</title><rect x="98.0269%" y="213" width="0.4859%" height="15" fill="rgb(249,174,33)"/><text x="98.2769%" y="223.50"></text></g><g><title>prepare_outputs (324,413 samples, 0.31%)</title><rect x="98.5222%" y="213" width="0.3098%" height="15" fill="rgb(233,201,37)"/><text x="98.7722%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (784,358 samples, 0.75%)</title><rect x="98.8319%" y="213" width="0.7489%" height="15" fill="rgb(221,78,26)"/><text x="99.0819%" y="223.50"></text></g><g><title>setup_global_ctxt (106,531 samples, 0.10%)</title><rect x="99.5919%" y="213" width="0.1017%" height="15" fill="rgb(250,127,30)"/><text x="99.8419%" y="223.50"></text></g><g><title>all (104,728,987 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (104,728,987 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (320,833 samples, 0.31%)</title><rect x="99.6937%" y="213" width="0.3063%" height="15" fill="rgb(249,83,47)"/><text x="99.9437%" y="223.50"></text></g></svg></svg>