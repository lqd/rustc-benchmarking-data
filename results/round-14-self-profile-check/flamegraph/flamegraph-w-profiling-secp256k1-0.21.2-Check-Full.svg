<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (373,553 samples, 0.11%)</title><rect x="12.5643%" y="149" width="0.1125%" height="15" fill="rgb(227,0,7)"/><text x="12.8143%" y="159.50"></text></g><g><title>param_env (628,412 samples, 0.19%)</title><rect x="14.3852%" y="117" width="0.1892%" height="15" fill="rgb(217,0,24)"/><text x="14.6352%" y="127.50"></text></g><g><title>codegen_fn_attrs (499,107 samples, 0.15%)</title><rect x="15.0763%" y="101" width="0.1503%" height="15" fill="rgb(221,193,54)"/><text x="15.3263%" y="111.50"></text></g><g><title>is_copy_raw (624,816 samples, 0.19%)</title><rect x="18.0681%" y="85" width="0.1881%" height="15" fill="rgb(248,212,6)"/><text x="18.3181%" y="95.50"></text></g><g><title>evaluate_obligation (531,364 samples, 0.16%)</title><rect x="18.0962%" y="69" width="0.1600%" height="15" fill="rgb(208,68,35)"/><text x="18.3462%" y="79.50"></text></g><g><title>needs_drop_raw (1,665,290 samples, 0.50%)</title><rect x="18.2564%" y="85" width="0.5014%" height="15" fill="rgb(232,128,0)"/><text x="18.5064%" y="95.50"></text></g><g><title>is_copy_raw (1,270,364 samples, 0.38%)</title><rect x="18.3754%" y="69" width="0.3825%" height="15" fill="rgb(207,160,47)"/><text x="18.6254%" y="79.50"></text></g><g><title>evaluate_obligation (1,037,262 samples, 0.31%)</title><rect x="18.4455%" y="53" width="0.3123%" height="15" fill="rgb(228,23,34)"/><text x="18.6955%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,004,310 samples, 0.30%)</title><rect x="18.9807%" y="69" width="0.3024%" height="15" fill="rgb(218,30,26)"/><text x="19.2307%" y="79.50"></text></g><g><title>specialization_graph_of (1,168,912 samples, 0.35%)</title><rect x="19.3491%" y="69" width="0.3520%" height="15" fill="rgb(220,122,19)"/><text x="19.5991%" y="79.50"></text></g><g><title>impl_trait_ref (458,515 samples, 0.14%)</title><rect x="19.5630%" y="53" width="0.1381%" height="15" fill="rgb(250,228,42)"/><text x="19.8130%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (393,074 samples, 0.12%)</title><rect x="19.5828%" y="37" width="0.1184%" height="15" fill="rgb(240,193,28)"/><text x="19.8328%" y="47.50"></text></g><g><title>resolve_instance (3,313,149 samples, 1.00%)</title><rect x="18.7660%" y="85" width="0.9976%" height="15" fill="rgb(216,20,37)"/><text x="19.0160%" y="95.50"></text></g><g><title>thir_body (3,821,804 samples, 1.15%)</title><rect x="19.7913%" y="85" width="1.1508%" height="15" fill="rgb(206,188,39)"/><text x="20.0413%" y="95.50"></text></g><g><title>mir_const (24,530,957 samples, 7.39%)</title><rect x="13.5719%" y="133" width="7.3863%" height="15" fill="rgb(217,207,13)"/><text x="13.8219%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (21,201,260 samples, 6.38%)</title><rect x="14.5745%" y="117" width="6.3838%" height="15" fill="rgb(231,73,38)"/><text x="14.8245%" y="127.50">unsafety..</text></g><g><title>mir_built (19,035,600 samples, 5.73%)</title><rect x="15.2265%" y="101" width="5.7317%" height="15" fill="rgb(225,20,46)"/><text x="15.4765%" y="111.50">mir_bui..</text></g><g><title>mir_const (1,548,702 samples, 0.47%)</title><rect x="21.2075%" y="117" width="0.4663%" height="15" fill="rgb(210,31,41)"/><text x="21.4575%" y="127.50"></text></g><g><title>unsafety_check_result (1,123,805 samples, 0.34%)</title><rect x="21.3354%" y="101" width="0.3384%" height="15" fill="rgb(221,200,47)"/><text x="21.5854%" y="111.50"></text></g><g><title>mir_built (988,262 samples, 0.30%)</title><rect x="21.3762%" y="85" width="0.2976%" height="15" fill="rgb(226,26,5)"/><text x="21.6262%" y="95.50"></text></g><g><title>mir_const_qualif (2,381,189 samples, 0.72%)</title><rect x="20.9582%" y="133" width="0.7170%" height="15" fill="rgb(249,33,26)"/><text x="21.2082%" y="143.50"></text></g><g><title>mir_promoted (29,872,020 samples, 8.99%)</title><rect x="12.6810%" y="149" width="8.9945%" height="15" fill="rgb(235,183,28)"/><text x="12.9310%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (984,201 samples, 0.30%)</title><rect x="21.6797%" y="149" width="0.2963%" height="15" fill="rgb(221,5,38)"/><text x="21.9297%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,862,671 samples, 0.56%)</title><rect x="21.9761%" y="149" width="0.5609%" height="15" fill="rgb(247,18,42)"/><text x="22.2261%" y="159.50"></text></g><g><title>normalize_projection_ty (1,264,144 samples, 0.38%)</title><rect x="22.1563%" y="133" width="0.3806%" height="15" fill="rgb(241,131,45)"/><text x="22.4063%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,853,852 samples, 1.46%)</title><rect x="22.6214%" y="149" width="1.4615%" height="15" fill="rgb(249,31,29)"/><text x="22.8714%" y="159.50"></text></g><g><title>evaluate_obligation (462,178 samples, 0.14%)</title><rect x="23.9437%" y="133" width="0.1392%" height="15" fill="rgb(225,111,53)"/><text x="24.1937%" y="143.50"></text></g><g><title>MIR_borrow_checking (78,090,461 samples, 23.51%)</title><rect x="0.5740%" y="181" width="23.5133%" height="15" fill="rgb(238,160,17)"/><text x="0.8240%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (77,515,300 samples, 23.34%)</title><rect x="0.7472%" y="165" width="23.3401%" height="15" fill="rgb(214,148,48)"/><text x="0.9972%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,019,811 samples, 0.31%)</title><rect x="24.0873%" y="181" width="0.3071%" height="15" fill="rgb(232,36,49)"/><text x="24.3373%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (737,398 samples, 0.22%)</title><rect x="24.1723%" y="165" width="0.2220%" height="15" fill="rgb(209,103,24)"/><text x="24.4223%" y="175.50"></text></g><g><title>hir_module_items (670,628 samples, 0.20%)</title><rect x="24.3943%" y="181" width="0.2019%" height="15" fill="rgb(229,88,8)"/><text x="24.6443%" y="191.50"></text></g><g><title>should_inherit_track_caller (549,435 samples, 0.17%)</title><rect x="24.9395%" y="133" width="0.1654%" height="15" fill="rgb(213,181,19)"/><text x="25.1895%" y="143.50"></text></g><g><title>codegen_fn_attrs (961,239 samples, 0.29%)</title><rect x="24.8191%" y="149" width="0.2894%" height="15" fill="rgb(254,191,54)"/><text x="25.0691%" y="159.50"></text></g><g><title>check_mod_attrs (1,662,309 samples, 0.50%)</title><rect x="24.6081%" y="165" width="0.5005%" height="15" fill="rgb(241,83,37)"/><text x="24.8581%" y="175.50"></text></g><g><title>check_mod_const_bodies (426,664 samples, 0.13%)</title><rect x="25.1086%" y="165" width="0.1285%" height="15" fill="rgb(233,36,39)"/><text x="25.3586%" y="175.50"></text></g><g><title>lint_levels (425,085 samples, 0.13%)</title><rect x="25.4516%" y="149" width="0.1280%" height="15" fill="rgb(226,3,54)"/><text x="25.7016%" y="159.50"></text></g><g><title>lookup_deprecation_entry (359,253 samples, 0.11%)</title><rect x="25.5796%" y="149" width="0.1082%" height="15" fill="rgb(245,192,40)"/><text x="25.8296%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,399,546 samples, 0.42%)</title><rect x="25.3125%" y="165" width="0.4214%" height="15" fill="rgb(238,167,29)"/><text x="25.5625%" y="175.50"></text></g><g><title>misc_checking_1 (3,914,624 samples, 1.18%)</title><rect x="24.5965%" y="181" width="1.1787%" height="15" fill="rgb(232,182,51)"/><text x="24.8465%" y="191.50"></text></g><g><title>check_mod_intrinsics (348,733 samples, 0.11%)</title><rect x="25.7802%" y="149" width="0.1050%" height="15" fill="rgb(231,60,39)"/><text x="26.0302%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (1,523,607 samples, 0.46%)</title><rect x="25.7758%" y="165" width="0.4588%" height="15" fill="rgb(208,69,12)"/><text x="26.0258%" y="175.50"></text></g><g><title>check_mod_liveness (1,160,083 samples, 0.35%)</title><rect x="25.8852%" y="149" width="0.3493%" height="15" fill="rgb(235,93,37)"/><text x="26.1352%" y="159.50"></text></g><g><title>misc_checking_2 (3,197,876 samples, 0.96%)</title><rect x="25.7752%" y="181" width="0.9629%" height="15" fill="rgb(213,116,39)"/><text x="26.0252%" y="191.50"></text></g><g><title>match_checking (1,672,469 samples, 0.50%)</title><rect x="26.2345%" y="165" width="0.5036%" height="15" fill="rgb(222,207,29)"/><text x="26.4845%" y="175.50"></text></g><g><title>check_match (1,518,467 samples, 0.46%)</title><rect x="26.2809%" y="149" width="0.4572%" height="15" fill="rgb(206,96,30)"/><text x="26.5309%" y="159.50"></text></g><g><title>check_private_in_public (746,959 samples, 0.22%)</title><rect x="26.7411%" y="165" width="0.2249%" height="15" fill="rgb(218,138,4)"/><text x="26.9911%" y="175.50"></text></g><g><title>death_checking (1,431,756 samples, 0.43%)</title><rect x="26.9661%" y="165" width="0.4311%" height="15" fill="rgb(250,191,14)"/><text x="27.2161%" y="175.50"></text></g><g><title>eval_to_const_value_raw (620,027 samples, 0.19%)</title><rect x="27.8593%" y="133" width="0.1867%" height="15" fill="rgb(239,60,40)"/><text x="28.1093%" y="143.50"></text></g><g><title>eval_to_const_value_raw (611,757 samples, 0.18%)</title><rect x="27.8618%" y="117" width="0.1842%" height="15" fill="rgb(206,27,48)"/><text x="28.1118%" y="127.50"></text></g><g><title>eval_to_allocation_raw (596,657 samples, 0.18%)</title><rect x="27.8663%" y="101" width="0.1797%" height="15" fill="rgb(225,35,8)"/><text x="28.1163%" y="111.50"></text></g><g><title>param_env (661,328 samples, 0.20%)</title><rect x="28.0460%" y="133" width="0.1991%" height="15" fill="rgb(250,213,24)"/><text x="28.2960%" y="143.50"></text></g><g><title>crate_lints (4,079,916 samples, 1.23%)</title><rect x="27.3979%" y="149" width="1.2285%" height="15" fill="rgb(247,123,22)"/><text x="27.6479%" y="159.50"></text></g><g><title>type_of (1,136,042 samples, 0.34%)</title><rect x="28.2843%" y="133" width="0.3421%" height="15" fill="rgb(231,138,38)"/><text x="28.5343%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (904,928 samples, 0.27%)</title><rect x="28.3539%" y="117" width="0.2725%" height="15" fill="rgb(231,145,46)"/><text x="28.6039%" y="127.50"></text></g><g><title>lint_checking (5,481,231 samples, 1.65%)</title><rect x="27.3972%" y="165" width="1.6504%" height="15" fill="rgb(251,118,11)"/><text x="27.6472%" y="175.50"></text></g><g><title>module_lints (1,399,015 samples, 0.42%)</title><rect x="28.6263%" y="149" width="0.4212%" height="15" fill="rgb(217,147,25)"/><text x="28.8763%" y="159.50"></text></g><g><title>lint_mod (1,387,145 samples, 0.42%)</title><rect x="28.6299%" y="133" width="0.4177%" height="15" fill="rgb(247,81,37)"/><text x="28.8799%" y="143.50"></text></g><g><title>privacy_access_levels (1,449,556 samples, 0.44%)</title><rect x="29.0476%" y="165" width="0.4365%" height="15" fill="rgb(209,12,38)"/><text x="29.2976%" y="175.50"></text></g><g><title>privacy_checking_modules (2,722,160 samples, 0.82%)</title><rect x="29.4840%" y="165" width="0.8196%" height="15" fill="rgb(227,1,9)"/><text x="29.7340%" y="175.50"></text></g><g><title>check_mod_privacy (2,713,390 samples, 0.82%)</title><rect x="29.4867%" y="149" width="0.8170%" height="15" fill="rgb(248,47,43)"/><text x="29.7367%" y="159.50"></text></g><g><title>misc_checking_3 (11,877,842 samples, 3.58%)</title><rect x="26.7381%" y="181" width="3.5765%" height="15" fill="rgb(221,10,30)"/><text x="26.9881%" y="191.50">misc..</text></g><g><title>mir_borrowck (538,937 samples, 0.16%)</title><rect x="30.7647%" y="53" width="0.1623%" height="15" fill="rgb(210,229,1)"/><text x="31.0147%" y="63.50"></text></g><g><title>mir_for_ctfe (728,528 samples, 0.22%)</title><rect x="30.7081%" y="85" width="0.2194%" height="15" fill="rgb(222,148,37)"/><text x="30.9581%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (676,048 samples, 0.20%)</title><rect x="30.7239%" y="69" width="0.2036%" height="15" fill="rgb(234,67,33)"/><text x="30.9739%" y="79.50"></text></g><g><title>eval_to_const_value_raw (471,796 samples, 0.14%)</title><rect x="30.9331%" y="69" width="0.1421%" height="15" fill="rgb(247,98,35)"/><text x="31.1831%" y="79.50"></text></g><g><title>eval_to_const_value_raw (468,536 samples, 0.14%)</title><rect x="30.9341%" y="53" width="0.1411%" height="15" fill="rgb(247,138,52)"/><text x="31.1841%" y="63.50"></text></g><g><title>eval_to_allocation_raw (460,666 samples, 0.14%)</title><rect x="30.9365%" y="37" width="0.1387%" height="15" fill="rgb(213,79,30)"/><text x="31.1865%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (497,857 samples, 0.15%)</title><rect x="30.9277%" y="85" width="0.1499%" height="15" fill="rgb(246,177,23)"/><text x="31.1777%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,065,163 samples, 0.62%)</title><rect x="30.5378%" y="133" width="0.6218%" height="15" fill="rgb(230,62,27)"/><text x="30.7878%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,049,723 samples, 0.62%)</title><rect x="30.5425%" y="117" width="0.6172%" height="15" fill="rgb(216,154,8)"/><text x="30.7925%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,044,982 samples, 0.62%)</title><rect x="30.5439%" y="101" width="0.6157%" height="15" fill="rgb(244,35,45)"/><text x="30.7939%" y="111.50"></text></g><g><title>impl_parent (3,123,006 samples, 0.94%)</title><rect x="32.8679%" y="117" width="0.9403%" height="15" fill="rgb(251,115,12)"/><text x="33.1179%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,845,640 samples, 0.56%)</title><rect x="33.2525%" y="101" width="0.5557%" height="15" fill="rgb(240,54,50)"/><text x="33.5025%" y="111.50"></text></g><g><title>impl_trait_ref (6,131,463 samples, 1.85%)</title><rect x="33.8082%" y="117" width="1.8462%" height="15" fill="rgb(233,84,52)"/><text x="34.0582%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,859,341 samples, 1.46%)</title><rect x="34.1912%" y="101" width="1.4632%" height="15" fill="rgb(207,117,47)"/><text x="34.4412%" y="111.50"></text></g><g><title>item_attrs (372,524 samples, 0.11%)</title><rect x="35.6544%" y="117" width="0.1122%" height="15" fill="rgb(249,43,39)"/><text x="35.9044%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (370,934 samples, 0.11%)</title><rect x="35.6549%" y="101" width="0.1117%" height="15" fill="rgb(209,38,44)"/><text x="35.9049%" y="111.50"></text></g><g><title>trait_impls_of (1,176,694 samples, 0.35%)</title><rect x="35.7717%" y="117" width="0.3543%" height="15" fill="rgb(236,212,23)"/><text x="36.0217%" y="127.50"></text></g><g><title>implementations_of_trait (363,564 samples, 0.11%)</title><rect x="36.0165%" y="101" width="0.1095%" height="15" fill="rgb(242,79,21)"/><text x="36.2665%" y="111.50"></text></g><g><title>coherent_trait (18,993,412 samples, 5.72%)</title><rect x="30.4075%" y="149" width="5.7190%" height="15" fill="rgb(211,96,35)"/><text x="30.6575%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (16,229,141 samples, 4.89%)</title><rect x="31.2398%" y="133" width="4.8866%" height="15" fill="rgb(253,215,40)"/><text x="31.4898%" y="143.50">specia..</text></g><g><title>coherence_checking (19,238,155 samples, 5.79%)</title><rect x="30.3991%" y="165" width="5.7927%" height="15" fill="rgb(211,81,21)"/><text x="30.6491%" y="175.50">coheren..</text></g><g><title>associated_item (897,737 samples, 0.27%)</title><rect x="58.1609%" y="101" width="0.2703%" height="15" fill="rgb(208,190,38)"/><text x="58.4109%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (728,704 samples, 0.22%)</title><rect x="58.2118%" y="85" width="0.2194%" height="15" fill="rgb(235,213,38)"/><text x="58.4618%" y="95.50"></text></g><g><title>associated_items (1,266,776 samples, 0.38%)</title><rect x="58.0671%" y="117" width="0.3814%" height="15" fill="rgb(237,122,38)"/><text x="58.3171%" y="127.50"></text></g><g><title>dropck_outlives (734,279 samples, 0.22%)</title><rect x="58.4852%" y="117" width="0.2211%" height="15" fill="rgb(244,218,35)"/><text x="58.7352%" y="127.50"></text></g><g><title>mir_const_qualif (411,956 samples, 0.12%)</title><rect x="58.8032%" y="85" width="0.1240%" height="15" fill="rgb(240,68,47)"/><text x="59.0532%" y="95.50"></text></g><g><title>mir_const (337,385 samples, 0.10%)</title><rect x="58.8257%" y="69" width="0.1016%" height="15" fill="rgb(210,16,53)"/><text x="59.0757%" y="79.50"></text></g><g><title>mir_borrowck (918,581 samples, 0.28%)</title><rect x="59.0661%" y="53" width="0.2766%" height="15" fill="rgb(235,124,12)"/><text x="59.3161%" y="63.50"></text></g><g><title>mir_for_ctfe (1,387,434 samples, 0.42%)</title><rect x="58.9273%" y="85" width="0.4178%" height="15" fill="rgb(224,169,11)"/><text x="59.1773%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,269,114 samples, 0.38%)</title><rect x="58.9629%" y="69" width="0.3821%" height="15" fill="rgb(250,166,2)"/><text x="59.2129%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,134,582 samples, 0.64%)</title><rect x="58.7063%" y="117" width="0.6427%" height="15" fill="rgb(242,216,29)"/><text x="58.9563%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,093,201 samples, 0.63%)</title><rect x="58.7187%" y="101" width="0.6303%" height="15" fill="rgb(230,116,27)"/><text x="58.9687%" y="111.50"></text></g><g><title>generics_of (1,486,965 samples, 0.45%)</title><rect x="62.0349%" y="101" width="0.4477%" height="15" fill="rgb(228,99,48)"/><text x="62.2849%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,155,183 samples, 0.35%)</title><rect x="62.1348%" y="85" width="0.3478%" height="15" fill="rgb(253,11,6)"/><text x="62.3848%" y="95.50"></text></g><g><title>impl_trait_ref (852,679 samples, 0.26%)</title><rect x="62.5656%" y="101" width="0.2567%" height="15" fill="rgb(247,143,39)"/><text x="62.8156%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (656,658 samples, 0.20%)</title><rect x="62.6246%" y="85" width="0.1977%" height="15" fill="rgb(236,97,10)"/><text x="62.8746%" y="95.50"></text></g><g><title>predicates_of (1,262,465 samples, 0.38%)</title><rect x="62.8452%" y="101" width="0.3801%" height="15" fill="rgb(233,208,19)"/><text x="63.0952%" y="111.50"></text></g><g><title>predicates_defined_on (712,579 samples, 0.21%)</title><rect x="63.0108%" y="85" width="0.2146%" height="15" fill="rgb(216,164,2)"/><text x="63.2608%" y="95.50"></text></g><g><title>specializes (2,976,428 samples, 0.90%)</title><rect x="63.2254%" y="101" width="0.8962%" height="15" fill="rgb(220,129,5)"/><text x="63.4754%" y="111.50"></text></g><g><title>param_env (1,750,467 samples, 0.53%)</title><rect x="63.5945%" y="85" width="0.5271%" height="15" fill="rgb(242,17,10)"/><text x="63.8445%" y="95.50"></text></g><g><title>def_span (771,006 samples, 0.23%)</title><rect x="63.8894%" y="69" width="0.2322%" height="15" fill="rgb(242,107,0)"/><text x="64.1394%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (681,406 samples, 0.21%)</title><rect x="63.9164%" y="53" width="0.2052%" height="15" fill="rgb(251,28,31)"/><text x="64.1664%" y="63.50"></text></g><g><title>trait_impls_of (903,440 samples, 0.27%)</title><rect x="64.1283%" y="101" width="0.2720%" height="15" fill="rgb(233,223,10)"/><text x="64.3783%" y="111.50"></text></g><g><title>implementations_of_trait (516,832 samples, 0.16%)</title><rect x="64.2447%" y="85" width="0.1556%" height="15" fill="rgb(215,21,27)"/><text x="64.4947%" y="95.50"></text></g><g><title>evaluate_obligation (16,811,697 samples, 5.06%)</title><rect x="59.3490%" y="117" width="5.0620%" height="15" fill="rgb(232,23,21)"/><text x="59.5990%" y="127.50">evalua..</text></g><g><title>item_attrs (512,726 samples, 0.15%)</title><rect x="64.7521%" y="117" width="0.1544%" height="15" fill="rgb(244,5,23)"/><text x="65.0021%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (487,896 samples, 0.15%)</title><rect x="64.7595%" y="101" width="0.1469%" height="15" fill="rgb(226,81,46)"/><text x="65.0095%" y="111.50"></text></g><g><title>method_autoderef_steps (812,696 samples, 0.24%)</title><rect x="64.9404%" y="117" width="0.2447%" height="15" fill="rgb(247,70,30)"/><text x="65.1904%" y="127.50"></text></g><g><title>param_env (710,618 samples, 0.21%)</title><rect x="65.2576%" y="117" width="0.2140%" height="15" fill="rgb(212,68,19)"/><text x="65.5076%" y="127.50"></text></g><g><title>predicates_of (896,003 samples, 0.27%)</title><rect x="65.4939%" y="117" width="0.2698%" height="15" fill="rgb(240,187,13)"/><text x="65.7439%" y="127.50"></text></g><g><title>predicates_defined_on (576,558 samples, 0.17%)</title><rect x="65.5901%" y="101" width="0.1736%" height="15" fill="rgb(223,113,26)"/><text x="65.8401%" y="111.50"></text></g><g><title>impl_trait_ref (708,179 samples, 0.21%)</title><rect x="66.3111%" y="85" width="0.2132%" height="15" fill="rgb(206,192,2)"/><text x="66.5611%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (661,029 samples, 0.20%)</title><rect x="66.3253%" y="69" width="0.1990%" height="15" fill="rgb(241,108,4)"/><text x="66.5753%" y="79.50"></text></g><g><title>evaluate_obligation (1,664,398 samples, 0.50%)</title><rect x="66.1035%" y="101" width="0.5012%" height="15" fill="rgb(247,173,49)"/><text x="66.3535%" y="111.50"></text></g><g><title>typeck (2,219,925 samples, 0.67%)</title><rect x="65.9634%" y="117" width="0.6684%" height="15" fill="rgb(224,114,35)"/><text x="66.2134%" y="127.50"></text></g><g><title>item_bodies_checking (101,124,069 samples, 30.45%)</title><rect x="36.2301%" y="165" width="30.4487%" height="15" fill="rgb(245,159,27)"/><text x="36.4801%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (101,120,309 samples, 30.45%)</title><rect x="36.2312%" y="149" width="30.4476%" height="15" fill="rgb(245,172,44)"/><text x="36.4812%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (100,694,655 samples, 30.32%)</title><rect x="36.3594%" y="133" width="30.3194%" height="15" fill="rgb(236,23,11)"/><text x="36.6094%" y="143.50">typeck</text></g><g><title>item_types_checking (4,015,445 samples, 1.21%)</title><rect x="66.6789%" y="165" width="1.2091%" height="15" fill="rgb(205,117,38)"/><text x="66.9289%" y="175.50"></text></g><g><title>check_mod_item_types (4,004,234 samples, 1.21%)</title><rect x="66.6822%" y="149" width="1.2057%" height="15" fill="rgb(237,72,25)"/><text x="66.9322%" y="159.50"></text></g><g><title>typeck (489,225 samples, 0.15%)</title><rect x="67.7406%" y="133" width="0.1473%" height="15" fill="rgb(244,70,9)"/><text x="67.9906%" y="143.50"></text></g><g><title>fn_sig (976,113 samples, 0.29%)</title><rect x="68.2505%" y="133" width="0.2939%" height="15" fill="rgb(217,125,39)"/><text x="68.5005%" y="143.50"></text></g><g><title>named_region_map (976,992 samples, 0.29%)</title><rect x="68.7070%" y="117" width="0.2942%" height="15" fill="rgb(235,36,10)"/><text x="68.9570%" y="127.50"></text></g><g><title>resolve_lifetimes (895,571 samples, 0.27%)</title><rect x="68.7315%" y="101" width="0.2697%" height="15" fill="rgb(251,123,47)"/><text x="68.9815%" y="111.50"></text></g><g><title>generics_of (1,572,617 samples, 0.47%)</title><rect x="68.5444%" y="133" width="0.4735%" height="15" fill="rgb(221,13,13)"/><text x="68.7944%" y="143.50"></text></g><g><title>explicit_predicates_of (682,455 samples, 0.21%)</title><rect x="69.2495%" y="101" width="0.2055%" height="15" fill="rgb(238,131,9)"/><text x="69.4995%" y="111.50"></text></g><g><title>predicates_of (1,587,138 samples, 0.48%)</title><rect x="69.0849%" y="133" width="0.4779%" height="15" fill="rgb(211,50,8)"/><text x="69.3349%" y="143.50"></text></g><g><title>predicates_defined_on (1,373,616 samples, 0.41%)</title><rect x="69.1492%" y="117" width="0.4136%" height="15" fill="rgb(245,182,24)"/><text x="69.3992%" y="127.50"></text></g><g><title>inferred_outlives_of (358,074 samples, 0.11%)</title><rect x="69.4550%" y="101" width="0.1078%" height="15" fill="rgb(242,14,37)"/><text x="69.7050%" y="111.50"></text></g><g><title>type_collecting (5,969,126 samples, 1.80%)</title><rect x="67.8902%" y="165" width="1.7973%" height="15" fill="rgb(246,228,12)"/><text x="68.1402%" y="175.50">t..</text></g><g><title>collect_mod_item_types (5,953,666 samples, 1.79%)</title><rect x="67.8949%" y="149" width="1.7927%" height="15" fill="rgb(213,55,15)"/><text x="68.1449%" y="159.50">c..</text></g><g><title>type_of (370,712 samples, 0.11%)</title><rect x="69.5759%" y="133" width="0.1116%" height="15" fill="rgb(209,9,3)"/><text x="69.8259%" y="143.50"></text></g><g><title>mir_borrowck (431,245 samples, 0.13%)</title><rect x="72.2628%" y="53" width="0.1298%" height="15" fill="rgb(230,59,30)"/><text x="72.5128%" y="63.50"></text></g><g><title>mir_for_ctfe (650,538 samples, 0.20%)</title><rect x="72.1976%" y="85" width="0.1959%" height="15" fill="rgb(209,121,21)"/><text x="72.4476%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (598,117 samples, 0.18%)</title><rect x="72.2134%" y="69" width="0.1801%" height="15" fill="rgb(220,109,13)"/><text x="72.4634%" y="79.50"></text></g><g><title>eval_to_const_value_raw (440,765 samples, 0.13%)</title><rect x="72.3991%" y="69" width="0.1327%" height="15" fill="rgb(232,18,1)"/><text x="72.6491%" y="79.50"></text></g><g><title>eval_to_const_value_raw (438,515 samples, 0.13%)</title><rect x="72.3997%" y="53" width="0.1320%" height="15" fill="rgb(215,41,42)"/><text x="72.6497%" y="63.50"></text></g><g><title>eval_to_allocation_raw (433,125 samples, 0.13%)</title><rect x="72.4014%" y="37" width="0.1304%" height="15" fill="rgb(224,123,36)"/><text x="72.6514%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (465,765 samples, 0.14%)</title><rect x="72.3940%" y="85" width="0.1402%" height="15" fill="rgb(240,125,3)"/><text x="72.6440%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,698,220 samples, 0.51%)</title><rect x="72.1009%" y="133" width="0.5113%" height="15" fill="rgb(205,98,50)"/><text x="72.3509%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,689,520 samples, 0.51%)</title><rect x="72.1035%" y="117" width="0.5087%" height="15" fill="rgb(205,185,37)"/><text x="72.3535%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,675,120 samples, 0.50%)</title><rect x="72.1078%" y="101" width="0.5044%" height="15" fill="rgb(238,207,15)"/><text x="72.3578%" y="111.50"></text></g><g><title>evaluate_obligation (1,088,100 samples, 0.33%)</title><rect x="72.6122%" y="133" width="0.3276%" height="15" fill="rgb(213,199,42)"/><text x="72.8622%" y="143.50"></text></g><g><title>implied_outlives_bounds (565,018 samples, 0.17%)</title><rect x="72.9461%" y="133" width="0.1701%" height="15" fill="rgb(235,201,11)"/><text x="73.1961%" y="143.50"></text></g><g><title>param_env (1,148,459 samples, 0.35%)</title><rect x="73.1162%" y="133" width="0.3458%" height="15" fill="rgb(207,46,11)"/><text x="73.3662%" y="143.50"></text></g><g><title>region_scope_tree (1,375,034 samples, 0.41%)</title><rect x="73.4842%" y="133" width="0.4140%" height="15" fill="rgb(241,35,35)"/><text x="73.7342%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,261,095 samples, 3.99%)</title><rect x="69.9254%" y="149" width="3.9930%" height="15" fill="rgb(243,32,47)"/><text x="70.1754%" y="159.50">chec..</text></g><g><title>mir_for_ctfe (371,295 samples, 0.11%)</title><rect x="75.1704%" y="85" width="0.1118%" height="15" fill="rgb(247,202,23)"/><text x="75.4204%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (340,215 samples, 0.10%)</title><rect x="75.1797%" y="69" width="0.1024%" height="15" fill="rgb(219,102,11)"/><text x="75.4297%" y="79.50"></text></g><g><title>eval_to_const_value_raw (710,088 samples, 0.21%)</title><rect x="75.1137%" y="133" width="0.2138%" height="15" fill="rgb(243,110,44)"/><text x="75.3637%" y="143.50"></text></g><g><title>eval_to_const_value_raw (706,668 samples, 0.21%)</title><rect x="75.1147%" y="117" width="0.2128%" height="15" fill="rgb(222,74,54)"/><text x="75.3647%" y="127.50"></text></g><g><title>eval_to_allocation_raw (697,918 samples, 0.21%)</title><rect x="75.1173%" y="101" width="0.2101%" height="15" fill="rgb(216,99,12)"/><text x="75.3673%" y="111.50"></text></g><g><title>evaluate_obligation (1,399,619 samples, 0.42%)</title><rect x="75.3275%" y="133" width="0.4214%" height="15" fill="rgb(226,22,26)"/><text x="75.5775%" y="143.50"></text></g><g><title>param_env (905,240 samples, 0.27%)</title><rect x="75.8224%" y="133" width="0.2726%" height="15" fill="rgb(217,163,10)"/><text x="76.0724%" y="143.50"></text></g><g><title>check_item_well_formed (7,737,640 samples, 2.33%)</title><rect x="73.9184%" y="149" width="2.3298%" height="15" fill="rgb(213,25,53)"/><text x="74.1684%" y="159.50">c..</text></g><g><title>analysis (252,251,444 samples, 75.95%)</title><rect x="0.3223%" y="197" width="75.9536%" height="15" fill="rgb(252,105,26)"/><text x="0.5723%" y="207.50">analysis</text></g><g><title>type_check_crate (152,643,252 samples, 45.96%)</title><rect x="30.3146%" y="181" width="45.9613%" height="15" fill="rgb(220,39,43)"/><text x="30.5646%" y="191.50">type_check_crate</text></g><g><title>wf_checking (21,840,413 samples, 6.58%)</title><rect x="69.6997%" y="165" width="6.5762%" height="15" fill="rgb(229,68,48)"/><text x="69.9497%" y="175.50">wf_checki..</text></g><g><title>codegen_crate (571,336 samples, 0.17%)</title><rect x="76.2789%" y="197" width="0.1720%" height="15" fill="rgb(252,8,32)"/><text x="76.5289%" y="207.50"></text></g><g><title>AST_validation (351,954 samples, 0.11%)</title><rect x="76.5060%" y="181" width="0.1060%" height="15" fill="rgb(223,20,43)"/><text x="76.7560%" y="191.50"></text></g><g><title>metadata_register_crate (1,263,605 samples, 0.38%)</title><rect x="87.4335%" y="149" width="0.3805%" height="15" fill="rgb(229,81,49)"/><text x="87.6835%" y="159.50"></text></g><g><title>metadata_register_crate (464,735 samples, 0.14%)</title><rect x="87.6741%" y="133" width="0.1399%" height="15" fill="rgb(236,28,36)"/><text x="87.9241%" y="143.50"></text></g><g><title>macro_expand_crate (37,886,313 samples, 11.41%)</title><rect x="76.6880%" y="181" width="11.4077%" height="15" fill="rgb(249,185,26)"/><text x="76.9380%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (37,873,793 samples, 11.40%)</title><rect x="76.6918%" y="165" width="11.4039%" height="15" fill="rgb(249,174,33)"/><text x="76.9418%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (935,609 samples, 0.28%)</title><rect x="87.8140%" y="149" width="0.2817%" height="15" fill="rgb(233,201,37)"/><text x="88.0640%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (465,905 samples, 0.14%)</title><rect x="88.0970%" y="181" width="0.1403%" height="15" fill="rgb(221,78,26)"/><text x="88.3470%" y="191.50"></text></g><g><title>late_resolve_crate (5,198,209 samples, 1.57%)</title><rect x="88.3572%" y="165" width="1.5652%" height="15" fill="rgb(250,127,30)"/><text x="88.6072%" y="175.50"></text></g><g><title>configure_and_expand (45,060,753 samples, 13.57%)</title><rect x="76.4509%" y="197" width="13.5679%" height="15" fill="rgb(230,49,44)"/><text x="76.7009%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,916,726 samples, 1.78%)</title><rect x="88.2373%" y="181" width="1.7815%" height="15" fill="rgb(229,67,23)"/><text x="88.4873%" y="191.50">r..</text></g><g><title>drop_ast (762,429 samples, 0.23%)</title><rect x="90.0189%" y="197" width="0.2296%" height="15" fill="rgb(249,83,47)"/><text x="90.2689%" y="207.50"></text></g><g><title>early_lint_checks (1,169,753 samples, 0.35%)</title><rect x="90.2543%" y="197" width="0.3522%" height="15" fill="rgb(215,43,3)"/><text x="90.5043%" y="207.50"></text></g><g><title>free_global_ctxt (5,573,083 samples, 1.68%)</title><rect x="90.6065%" y="197" width="1.6781%" height="15" fill="rgb(238,154,13)"/><text x="90.8565%" y="207.50"></text></g><g><title>mir_for_ctfe (663,040 samples, 0.20%)</title><rect x="93.4447%" y="181" width="0.1996%" height="15" fill="rgb(219,56,2)"/><text x="93.6947%" y="191.50"></text></g><g><title>generate_crate_metadata (4,703,973 samples, 1.42%)</title><rect x="92.2846%" y="197" width="1.4164%" height="15" fill="rgb(233,0,4)"/><text x="92.5346%" y="207.50"></text></g><g><title>hir_lowering (10,054,081 samples, 3.03%)</title><rect x="93.7010%" y="197" width="3.0273%" height="15" fill="rgb(235,30,7)"/><text x="93.9510%" y="207.50">hir..</text></g><g><title>parse_crate (8,333,673 samples, 2.51%)</title><rect x="96.7541%" y="197" width="2.5093%" height="15" fill="rgb(250,79,13)"/><text x="97.0041%" y="207.50">pa..</text></g><g><title>self_profile_alloc_query_strings (1,691,549 samples, 0.51%)</title><rect x="99.3268%" y="197" width="0.5093%" height="15" fill="rgb(211,146,34)"/><text x="99.5768%" y="207.50"></text></g><g><title>all (332,112,516 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (332,112,516 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (429,965 samples, 0.13%)</title><rect x="99.8705%" y="197" width="0.1295%" height="15" fill="rgb(221,155,16)"/><text x="100.1205%" y="207.50"></text></g></svg></svg>