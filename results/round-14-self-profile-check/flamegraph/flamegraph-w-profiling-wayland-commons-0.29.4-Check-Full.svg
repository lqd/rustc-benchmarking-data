<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (323,205 samples, 0.11%)</title><rect x="12.2256%" y="197" width="0.1085%" height="15" fill="rgb(227,0,7)"/><text x="12.4756%" y="207.50"></text></g><g><title>param_env (753,436 samples, 0.25%)</title><rect x="13.8105%" y="165" width="0.2528%" height="15" fill="rgb(217,0,24)"/><text x="14.0605%" y="175.50"></text></g><g><title>item_attrs (610,419 samples, 0.20%)</title><rect x="14.5670%" y="133" width="0.2048%" height="15" fill="rgb(221,193,54)"/><text x="14.8170%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (589,168 samples, 0.20%)</title><rect x="14.5742%" y="117" width="0.1977%" height="15" fill="rgb(248,212,6)"/><text x="14.8242%" y="127.50"></text></g><g><title>codegen_fn_attrs (887,393 samples, 0.30%)</title><rect x="14.4884%" y="149" width="0.2978%" height="15" fill="rgb(208,68,35)"/><text x="14.7384%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,383,252 samples, 0.46%)</title><rect x="18.0206%" y="69" width="0.4642%" height="15" fill="rgb(232,128,0)"/><text x="18.2706%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,254,562 samples, 0.42%)</title><rect x="18.0638%" y="53" width="0.4210%" height="15" fill="rgb(207,160,47)"/><text x="18.3138%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,114,060 samples, 0.37%)</title><rect x="18.1109%" y="37" width="0.3738%" height="15" fill="rgb(228,23,34)"/><text x="18.3609%" y="47.50"></text></g><g><title>eval_to_const_value_raw (3,277,617 samples, 1.10%)</title><rect x="17.4836%" y="133" width="1.0999%" height="15" fill="rgb(218,30,26)"/><text x="17.7336%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,209,876 samples, 1.08%)</title><rect x="17.5063%" y="117" width="1.0771%" height="15" fill="rgb(220,122,19)"/><text x="17.7563%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,103,326 samples, 1.04%)</title><rect x="17.5420%" y="101" width="1.0414%" height="15" fill="rgb(250,228,42)"/><text x="17.7920%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,991,700 samples, 0.67%)</title><rect x="17.9151%" y="85" width="0.6683%" height="15" fill="rgb(240,193,28)"/><text x="18.1651%" y="95.50"></text></g><g><title>adt_drop_tys (600,907 samples, 0.20%)</title><rect x="18.8315%" y="117" width="0.2016%" height="15" fill="rgb(216,20,37)"/><text x="19.0815%" y="127.50"></text></g><g><title>is_copy_raw (2,360,648 samples, 0.79%)</title><rect x="19.0332%" y="117" width="0.7922%" height="15" fill="rgb(206,188,39)"/><text x="19.2832%" y="127.50"></text></g><g><title>evaluate_obligation (1,935,874 samples, 0.65%)</title><rect x="19.1758%" y="101" width="0.6496%" height="15" fill="rgb(217,207,13)"/><text x="19.4258%" y="111.50"></text></g><g><title>needs_drop_raw (3,336,091 samples, 1.12%)</title><rect x="18.7072%" y="133" width="1.1195%" height="15" fill="rgb(231,73,38)"/><text x="18.9572%" y="143.50"></text></g><g><title>param_env (983,301 samples, 0.33%)</title><rect x="19.8267%" y="133" width="0.3300%" height="15" fill="rgb(225,20,46)"/><text x="20.0767%" y="143.50"></text></g><g><title>predicates_of (368,657 samples, 0.12%)</title><rect x="20.0329%" y="117" width="0.1237%" height="15" fill="rgb(210,31,41)"/><text x="20.2829%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (810,926 samples, 0.27%)</title><rect x="20.3355%" y="117" width="0.2721%" height="15" fill="rgb(221,200,47)"/><text x="20.5855%" y="127.50"></text></g><g><title>impl_parent (369,005 samples, 0.12%)</title><rect x="20.9820%" y="101" width="0.1238%" height="15" fill="rgb(226,26,5)"/><text x="21.2320%" y="111.50"></text></g><g><title>specialization_graph_of (2,474,090 samples, 0.83%)</title><rect x="20.6667%" y="117" width="0.8302%" height="15" fill="rgb(249,33,26)"/><text x="20.9167%" y="127.50"></text></g><g><title>impl_trait_ref (1,165,555 samples, 0.39%)</title><rect x="21.1058%" y="101" width="0.3911%" height="15" fill="rgb(235,183,28)"/><text x="21.3558%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,034,682 samples, 0.35%)</title><rect x="21.1497%" y="85" width="0.3472%" height="15" fill="rgb(221,5,38)"/><text x="21.3997%" y="95.50"></text></g><g><title>resolve_instance (4,310,504 samples, 1.45%)</title><rect x="20.1566%" y="133" width="1.4465%" height="15" fill="rgb(247,18,42)"/><text x="20.4066%" y="143.50"></text></g><g><title>thir_body (3,022,468 samples, 1.01%)</title><rect x="21.6275%" y="133" width="1.0142%" height="15" fill="rgb(241,131,45)"/><text x="21.8775%" y="143.50"></text></g><g><title>mir_const (28,415,365 samples, 9.54%)</title><rect x="13.1199%" y="181" width="9.5353%" height="15" fill="rgb(249,31,29)"/><text x="13.3699%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (25,604,015 samples, 8.59%)</title><rect x="14.0633%" y="165" width="8.5919%" height="15" fill="rgb(225,111,53)"/><text x="14.3133%" y="175.50">unsafety_che..</text></g><g><title>mir_built (23,449,908 samples, 7.87%)</title><rect x="14.7862%" y="149" width="7.8690%" height="15" fill="rgb(238,160,17)"/><text x="15.0362%" y="159.50">mir_built</text></g><g><title>mir_const_qualif (767,092 samples, 0.26%)</title><rect x="22.6552%" y="181" width="0.2574%" height="15" fill="rgb(214,148,48)"/><text x="22.9052%" y="191.50"></text></g><g><title>mir_promoted (31,242,722 samples, 10.48%)</title><rect x="12.4287%" y="197" width="10.4840%" height="15" fill="rgb(232,36,49)"/><text x="12.6787%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,808,462 samples, 0.61%)</title><rect x="22.9129%" y="197" width="0.6069%" height="15" fill="rgb(209,103,24)"/><text x="23.1629%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,746,008 samples, 0.59%)</title><rect x="23.5197%" y="197" width="0.5859%" height="15" fill="rgb(229,88,8)"/><text x="23.7697%" y="207.50"></text></g><g><title>normalize_projection_ty (1,178,754 samples, 0.40%)</title><rect x="23.7101%" y="181" width="0.3956%" height="15" fill="rgb(213,181,19)"/><text x="23.9601%" y="191.50"></text></g><g><title>type_op_normalize_predicate (373,617 samples, 0.13%)</title><rect x="24.1056%" y="197" width="0.1254%" height="15" fill="rgb(254,191,54)"/><text x="24.3556%" y="207.50"></text></g><g><title>type_op_prove_predicate (7,601,113 samples, 2.55%)</title><rect x="24.2403%" y="197" width="2.5507%" height="15" fill="rgb(241,83,37)"/><text x="24.4903%" y="207.50">ty..</text></g><g><title>MIR_borrow_checking (78,360,193 samples, 26.30%)</title><rect x="0.5017%" y="229" width="26.2951%" height="15" fill="rgb(233,36,39)"/><text x="0.7517%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (78,065,348 samples, 26.20%)</title><rect x="0.6007%" y="213" width="26.1961%" height="15" fill="rgb(226,3,54)"/><text x="0.8507%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (400,785 samples, 0.13%)</title><rect x="26.8782%" y="229" width="0.1345%" height="15" fill="rgb(245,192,40)"/><text x="27.1282%" y="239.50"></text></g><g><title>should_inherit_track_caller (364,324 samples, 0.12%)</title><rect x="27.2878%" y="181" width="0.1223%" height="15" fill="rgb(238,167,29)"/><text x="27.5378%" y="191.50"></text></g><g><title>codegen_fn_attrs (646,789 samples, 0.22%)</title><rect x="27.1984%" y="197" width="0.2170%" height="15" fill="rgb(232,182,51)"/><text x="27.4484%" y="207.50"></text></g><g><title>check_mod_attrs (1,168,443 samples, 0.39%)</title><rect x="27.0235%" y="213" width="0.3921%" height="15" fill="rgb(231,60,39)"/><text x="27.2735%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (804,709 samples, 0.27%)</title><rect x="27.5697%" y="213" width="0.2700%" height="15" fill="rgb(208,69,12)"/><text x="27.8197%" y="223.50"></text></g><g><title>misc_checking_1 (2,540,308 samples, 0.85%)</title><rect x="27.0129%" y="229" width="0.8524%" height="15" fill="rgb(235,93,37)"/><text x="27.2629%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,247,334 samples, 0.42%)</title><rect x="27.8659%" y="213" width="0.4186%" height="15" fill="rgb(213,116,39)"/><text x="28.1159%" y="223.50"></text></g><g><title>check_mod_liveness (994,870 samples, 0.33%)</title><rect x="27.9506%" y="197" width="0.3338%" height="15" fill="rgb(222,207,29)"/><text x="28.2006%" y="207.50"></text></g><g><title>misc_checking_2 (3,196,966 samples, 1.07%)</title><rect x="27.8653%" y="229" width="1.0728%" height="15" fill="rgb(206,96,30)"/><text x="28.1153%" y="239.50"></text></g><g><title>match_checking (1,947,952 samples, 0.65%)</title><rect x="28.2844%" y="213" width="0.6537%" height="15" fill="rgb(218,138,4)"/><text x="28.5344%" y="223.50"></text></g><g><title>check_match (1,875,591 samples, 0.63%)</title><rect x="28.3087%" y="197" width="0.6294%" height="15" fill="rgb(250,191,14)"/><text x="28.5587%" y="207.50"></text></g><g><title>check_private_in_public (513,366 samples, 0.17%)</title><rect x="28.9417%" y="213" width="0.1723%" height="15" fill="rgb(239,60,40)"/><text x="29.1917%" y="223.50"></text></g><g><title>death_checking (926,231 samples, 0.31%)</title><rect x="29.1140%" y="213" width="0.3108%" height="15" fill="rgb(206,27,48)"/><text x="29.3640%" y="223.50"></text></g><g><title>param_env (377,674 samples, 0.13%)</title><rect x="29.9031%" y="181" width="0.1267%" height="15" fill="rgb(225,35,8)"/><text x="30.1531%" y="191.50"></text></g><g><title>crate_lints (3,462,499 samples, 1.16%)</title><rect x="29.4253%" y="197" width="1.1619%" height="15" fill="rgb(250,213,24)"/><text x="29.6753%" y="207.50"></text></g><g><title>type_of (1,641,679 samples, 0.55%)</title><rect x="30.0363%" y="181" width="0.5509%" height="15" fill="rgb(247,123,22)"/><text x="30.2863%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,110,032 samples, 0.37%)</title><rect x="30.2147%" y="165" width="0.3725%" height="15" fill="rgb(231,138,38)"/><text x="30.4647%" y="175.50"></text></g><g><title>lint_checking (4,988,466 samples, 1.67%)</title><rect x="29.4248%" y="213" width="1.6740%" height="15" fill="rgb(231,145,46)"/><text x="29.6748%" y="223.50"></text></g><g><title>module_lints (1,524,387 samples, 0.51%)</title><rect x="30.5872%" y="197" width="0.5115%" height="15" fill="rgb(251,118,11)"/><text x="30.8372%" y="207.50"></text></g><g><title>lint_mod (1,515,057 samples, 0.51%)</title><rect x="30.5904%" y="181" width="0.5084%" height="15" fill="rgb(217,147,25)"/><text x="30.8404%" y="191.50"></text></g><g><title>privacy_access_levels (914,280 samples, 0.31%)</title><rect x="31.0988%" y="213" width="0.3068%" height="15" fill="rgb(247,81,37)"/><text x="31.3488%" y="223.50"></text></g><g><title>privacy_checking_modules (2,463,868 samples, 0.83%)</title><rect x="31.4056%" y="213" width="0.8268%" height="15" fill="rgb(209,12,38)"/><text x="31.6556%" y="223.50"></text></g><g><title>check_mod_privacy (2,456,948 samples, 0.82%)</title><rect x="31.4079%" y="197" width="0.8245%" height="15" fill="rgb(227,1,9)"/><text x="31.6579%" y="207.50"></text></g><g><title>misc_checking_3 (9,845,711 samples, 3.30%)</title><rect x="28.9381%" y="229" width="3.3039%" height="15" fill="rgb(248,47,43)"/><text x="29.1881%" y="239.50">mis..</text></g><g><title>adt_destructor (327,454 samples, 0.11%)</title><rect x="32.3178%" y="181" width="0.1099%" height="15" fill="rgb(221,10,30)"/><text x="32.5678%" y="191.50"></text></g><g><title>coherent_trait (324,654 samples, 0.11%)</title><rect x="32.3188%" y="165" width="0.1089%" height="15" fill="rgb(210,229,1)"/><text x="32.5688%" y="175.50"></text></g><g><title>specialization_graph_of (322,104 samples, 0.11%)</title><rect x="32.3196%" y="149" width="0.1081%" height="15" fill="rgb(222,148,37)"/><text x="32.5696%" y="159.50"></text></g><g><title>impl_parent (3,222,935 samples, 1.08%)</title><rect x="34.3194%" y="165" width="1.0815%" height="15" fill="rgb(234,67,33)"/><text x="34.5694%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,941,292 samples, 0.65%)</title><rect x="34.7494%" y="149" width="0.6514%" height="15" fill="rgb(247,98,35)"/><text x="34.9994%" y="159.50"></text></g><g><title>impl_trait_ref (7,035,586 samples, 2.36%)</title><rect x="35.4012%" y="165" width="2.3609%" height="15" fill="rgb(247,138,52)"/><text x="35.6512%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,375,568 samples, 1.80%)</title><rect x="35.9582%" y="149" width="1.8039%" height="15" fill="rgb(213,79,30)"/><text x="36.2082%" y="159.50">m..</text></g><g><title>trait_impls_of (1,108,934 samples, 0.37%)</title><rect x="37.8670%" y="165" width="0.3721%" height="15" fill="rgb(246,177,23)"/><text x="38.1170%" y="175.50"></text></g><g><title>implementations_of_trait (319,513 samples, 0.11%)</title><rect x="38.1319%" y="149" width="0.1072%" height="15" fill="rgb(230,62,27)"/><text x="38.3819%" y="159.50"></text></g><g><title>coherent_trait (17,725,080 samples, 5.95%)</title><rect x="32.2988%" y="197" width="5.9479%" height="15" fill="rgb(216,154,8)"/><text x="32.5488%" y="207.50">coherent..</text></g><g><title>specialization_graph_of (17,079,613 samples, 5.73%)</title><rect x="32.5154%" y="181" width="5.7314%" height="15" fill="rgb(244,35,45)"/><text x="32.7654%" y="191.50">special..</text></g><g><title>coherence_checking (17,847,111 samples, 5.99%)</title><rect x="32.2891%" y="213" width="5.9889%" height="15" fill="rgb(251,115,12)"/><text x="32.5391%" y="223.50">coherenc..</text></g><g><title>associated_item (819,990 samples, 0.28%)</title><rect x="59.7704%" y="149" width="0.2752%" height="15" fill="rgb(240,54,50)"/><text x="60.0204%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (658,389 samples, 0.22%)</title><rect x="59.8246%" y="133" width="0.2209%" height="15" fill="rgb(233,84,52)"/><text x="60.0746%" y="143.50"></text></g><g><title>associated_items (1,221,964 samples, 0.41%)</title><rect x="59.6561%" y="165" width="0.4101%" height="15" fill="rgb(207,117,47)"/><text x="59.9061%" y="175.50"></text></g><g><title>adt_dtorck_constraint (585,898 samples, 0.20%)</title><rect x="60.3709%" y="149" width="0.1966%" height="15" fill="rgb(249,43,39)"/><text x="60.6209%" y="159.50"></text></g><g><title>dropck_outlives (1,312,505 samples, 0.44%)</title><rect x="60.1286%" y="165" width="0.4404%" height="15" fill="rgb(209,38,44)"/><text x="60.3786%" y="175.50"></text></g><g><title>generics_of (524,366 samples, 0.18%)</title><rect x="62.3464%" y="149" width="0.1760%" height="15" fill="rgb(236,212,23)"/><text x="62.5964%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (386,784 samples, 0.13%)</title><rect x="62.3926%" y="133" width="0.1298%" height="15" fill="rgb(242,79,21)"/><text x="62.6426%" y="143.50"></text></g><g><title>impl_trait_ref (614,677 samples, 0.21%)</title><rect x="62.5739%" y="149" width="0.2063%" height="15" fill="rgb(211,96,35)"/><text x="62.8239%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (507,495 samples, 0.17%)</title><rect x="62.6099%" y="133" width="0.1703%" height="15" fill="rgb(253,215,40)"/><text x="62.8599%" y="143.50"></text></g><g><title>predicates_of (641,925 samples, 0.22%)</title><rect x="62.7958%" y="149" width="0.2154%" height="15" fill="rgb(211,81,21)"/><text x="63.0458%" y="159.50"></text></g><g><title>predicates_defined_on (369,144 samples, 0.12%)</title><rect x="62.8873%" y="133" width="0.1239%" height="15" fill="rgb(208,190,38)"/><text x="63.1373%" y="143.50"></text></g><g><title>specializes (876,641 samples, 0.29%)</title><rect x="63.0112%" y="149" width="0.2942%" height="15" fill="rgb(235,213,38)"/><text x="63.2612%" y="159.50"></text></g><g><title>param_env (530,647 samples, 0.18%)</title><rect x="63.1273%" y="133" width="0.1781%" height="15" fill="rgb(237,122,38)"/><text x="63.3773%" y="143.50"></text></g><g><title>trait_impls_of (1,158,371 samples, 0.39%)</title><rect x="63.3142%" y="149" width="0.3887%" height="15" fill="rgb(244,218,35)"/><text x="63.5642%" y="159.50"></text></g><g><title>implementations_of_trait (578,927 samples, 0.19%)</title><rect x="63.5086%" y="133" width="0.1943%" height="15" fill="rgb(240,68,47)"/><text x="63.7586%" y="143.50"></text></g><g><title>evaluate_obligation (9,359,295 samples, 3.14%)</title><rect x="60.5690%" y="165" width="3.1407%" height="15" fill="rgb(210,16,53)"/><text x="60.8190%" y="175.50">eva..</text></g><g><title>fn_sig (307,921 samples, 0.10%)</title><rect x="63.7317%" y="165" width="0.1033%" height="15" fill="rgb(235,124,12)"/><text x="63.9817%" y="175.50"></text></g><g><title>item_attrs (411,468 samples, 0.14%)</title><rect x="64.0635%" y="165" width="0.1381%" height="15" fill="rgb(224,169,11)"/><text x="64.3135%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (393,798 samples, 0.13%)</title><rect x="64.0694%" y="149" width="0.1321%" height="15" fill="rgb(250,166,2)"/><text x="64.3194%" y="159.50"></text></g><g><title>evaluate_obligation (605,457 samples, 0.20%)</title><rect x="64.4568%" y="149" width="0.2032%" height="15" fill="rgb(242,216,29)"/><text x="64.7068%" y="159.50"></text></g><g><title>method_autoderef_steps (1,218,442 samples, 0.41%)</title><rect x="64.2563%" y="165" width="0.4089%" height="15" fill="rgb(230,116,27)"/><text x="64.5063%" y="175.50"></text></g><g><title>predicates_of (1,054,992 samples, 0.35%)</title><rect x="64.7476%" y="165" width="0.3540%" height="15" fill="rgb(228,99,48)"/><text x="64.9976%" y="175.50"></text></g><g><title>predicates_defined_on (577,605 samples, 0.19%)</title><rect x="64.9078%" y="149" width="0.1938%" height="15" fill="rgb(253,11,6)"/><text x="65.1578%" y="159.50"></text></g><g><title>adt_dtorck_constraint (443,507 samples, 0.15%)</title><rect x="68.1967%" y="133" width="0.1488%" height="15" fill="rgb(247,143,39)"/><text x="68.4467%" y="143.50"></text></g><g><title>dropck_outlives (650,837 samples, 0.22%)</title><rect x="68.1354%" y="149" width="0.2184%" height="15" fill="rgb(236,97,10)"/><text x="68.3854%" y="159.50"></text></g><g><title>eval_to_const_value_raw (490,105 samples, 0.16%)</title><rect x="68.3538%" y="149" width="0.1645%" height="15" fill="rgb(233,208,19)"/><text x="68.6038%" y="159.50"></text></g><g><title>eval_to_const_value_raw (488,355 samples, 0.16%)</title><rect x="68.3544%" y="133" width="0.1639%" height="15" fill="rgb(216,164,2)"/><text x="68.6044%" y="143.50"></text></g><g><title>eval_to_allocation_raw (485,385 samples, 0.16%)</title><rect x="68.3554%" y="117" width="0.1629%" height="15" fill="rgb(220,129,5)"/><text x="68.6054%" y="127.50"></text></g><g><title>specializes (340,954 samples, 0.11%)</title><rect x="69.2397%" y="133" width="0.1144%" height="15" fill="rgb(242,17,10)"/><text x="69.4897%" y="143.50"></text></g><g><title>evaluate_obligation (2,662,095 samples, 0.89%)</title><rect x="68.5182%" y="149" width="0.8933%" height="15" fill="rgb(242,107,0)"/><text x="68.7682%" y="159.50"></text></g><g><title>is_copy_raw (310,323 samples, 0.10%)</title><rect x="69.5437%" y="149" width="0.1041%" height="15" fill="rgb(251,28,31)"/><text x="69.7937%" y="159.50"></text></g><g><title>typeck (14,117,491 samples, 4.74%)</title><rect x="65.1831%" y="165" width="4.7374%" height="15" fill="rgb(233,223,10)"/><text x="65.4331%" y="175.50">typeck</text></g><g><title>item_bodies_checking (94,375,833 samples, 31.67%)</title><rect x="38.2972%" y="213" width="31.6694%" height="15" fill="rgb(215,21,27)"/><text x="38.5472%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (94,372,093 samples, 31.67%)</title><rect x="38.2984%" y="197" width="31.6681%" height="15" fill="rgb(232,23,21)"/><text x="38.5484%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (94,169,710 samples, 31.60%)</title><rect x="38.3663%" y="181" width="31.6002%" height="15" fill="rgb(244,5,23)"/><text x="38.6163%" y="191.50">typeck</text></g><g><title>item_types_checking (2,604,109 samples, 0.87%)</title><rect x="69.9666%" y="213" width="0.8739%" height="15" fill="rgb(226,81,46)"/><text x="70.2166%" y="223.50"></text></g><g><title>check_mod_item_types (2,595,328 samples, 0.87%)</title><rect x="69.9695%" y="197" width="0.8709%" height="15" fill="rgb(247,70,30)"/><text x="70.2195%" y="207.50"></text></g><g><title>fn_sig (695,617 samples, 0.23%)</title><rect x="71.0480%" y="181" width="0.2334%" height="15" fill="rgb(212,68,19)"/><text x="71.2980%" y="191.50"></text></g><g><title>named_region_map (410,124 samples, 0.14%)</title><rect x="71.4122%" y="165" width="0.1376%" height="15" fill="rgb(240,187,13)"/><text x="71.6622%" y="175.50"></text></g><g><title>resolve_lifetimes (367,874 samples, 0.12%)</title><rect x="71.4264%" y="149" width="0.1234%" height="15" fill="rgb(223,113,26)"/><text x="71.6764%" y="159.50"></text></g><g><title>generics_of (831,688 samples, 0.28%)</title><rect x="71.2814%" y="181" width="0.2791%" height="15" fill="rgb(206,192,2)"/><text x="71.5314%" y="191.50"></text></g><g><title>late_bound_vars_map (595,897 samples, 0.20%)</title><rect x="71.8290%" y="133" width="0.2000%" height="15" fill="rgb(241,108,4)"/><text x="72.0790%" y="143.50"></text></g><g><title>resolve_lifetimes (583,317 samples, 0.20%)</title><rect x="71.8332%" y="117" width="0.1957%" height="15" fill="rgb(247,173,49)"/><text x="72.0832%" y="127.50"></text></g><g><title>lint_levels (402,865 samples, 0.14%)</title><rect x="71.8937%" y="101" width="0.1352%" height="15" fill="rgb(224,114,35)"/><text x="72.1437%" y="111.50"></text></g><g><title>explicit_predicates_of (1,021,933 samples, 0.34%)</title><rect x="71.7050%" y="149" width="0.3429%" height="15" fill="rgb(245,159,27)"/><text x="71.9550%" y="159.50"></text></g><g><title>predicates_of (2,317,068 samples, 0.78%)</title><rect x="71.6000%" y="181" width="0.7775%" height="15" fill="rgb(245,172,44)"/><text x="71.8500%" y="191.50"></text></g><g><title>predicates_defined_on (2,193,096 samples, 0.74%)</title><rect x="71.6416%" y="165" width="0.7359%" height="15" fill="rgb(236,23,11)"/><text x="71.8916%" y="175.50"></text></g><g><title>inferred_outlives_of (982,351 samples, 0.33%)</title><rect x="72.0479%" y="149" width="0.3296%" height="15" fill="rgb(205,117,38)"/><text x="72.2979%" y="159.50"></text></g><g><title>inferred_outlives_crate (934,271 samples, 0.31%)</title><rect x="72.0641%" y="133" width="0.3135%" height="15" fill="rgb(237,72,25)"/><text x="72.3141%" y="143.50"></text></g><g><title>type_of (627,438 samples, 0.21%)</title><rect x="72.1670%" y="117" width="0.2105%" height="15" fill="rgb(244,70,9)"/><text x="72.4170%" y="127.50"></text></g><g><title>type_collecting (4,930,726 samples, 1.65%)</title><rect x="70.8417%" y="213" width="1.6546%" height="15" fill="rgb(217,125,39)"/><text x="71.0917%" y="223.50"></text></g><g><title>collect_mod_item_types (4,916,826 samples, 1.65%)</title><rect x="70.8463%" y="197" width="1.6499%" height="15" fill="rgb(235,36,10)"/><text x="71.0963%" y="207.50"></text></g><g><title>evaluate_obligation (1,417,350 samples, 0.48%)</title><rect x="74.1662%" y="181" width="0.4756%" height="15" fill="rgb(251,123,47)"/><text x="74.4162%" y="191.50"></text></g><g><title>implied_outlives_bounds (874,709 samples, 0.29%)</title><rect x="74.6425%" y="181" width="0.2935%" height="15" fill="rgb(221,13,13)"/><text x="74.8925%" y="191.50"></text></g><g><title>param_env (715,355 samples, 0.24%)</title><rect x="74.9413%" y="181" width="0.2400%" height="15" fill="rgb(238,131,9)"/><text x="75.1913%" y="191.50"></text></g><g><title>region_scope_tree (1,033,318 samples, 0.35%)</title><rect x="75.1923%" y="181" width="0.3467%" height="15" fill="rgb(211,50,8)"/><text x="75.4423%" y="191.50"></text></g><g><title>check_impl_item_well_formed (8,629,684 samples, 2.90%)</title><rect x="72.6604%" y="197" width="2.8958%" height="15" fill="rgb(245,182,24)"/><text x="72.9104%" y="207.50">ch..</text></g><g><title>mir_borrowck (388,054 samples, 0.13%)</title><rect x="76.7538%" y="101" width="0.1302%" height="15" fill="rgb(242,14,37)"/><text x="77.0038%" y="111.50"></text></g><g><title>mir_for_ctfe (530,846 samples, 0.18%)</title><rect x="76.7061%" y="133" width="0.1781%" height="15" fill="rgb(246,228,12)"/><text x="76.9561%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (488,535 samples, 0.16%)</title><rect x="76.7203%" y="117" width="0.1639%" height="15" fill="rgb(213,55,15)"/><text x="76.9703%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,182,263 samples, 0.40%)</title><rect x="76.5889%" y="181" width="0.3967%" height="15" fill="rgb(209,9,3)"/><text x="76.8389%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,167,133 samples, 0.39%)</title><rect x="76.5940%" y="165" width="0.3917%" height="15" fill="rgb(230,59,30)"/><text x="76.8440%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,164,983 samples, 0.39%)</title><rect x="76.5947%" y="149" width="0.3909%" height="15" fill="rgb(209,121,21)"/><text x="76.8447%" y="159.50"></text></g><g><title>evaluate_obligation (1,088,383 samples, 0.37%)</title><rect x="76.9857%" y="181" width="0.3652%" height="15" fill="rgb(220,109,13)"/><text x="77.2357%" y="191.50"></text></g><g><title>object_safety_violations (389,844 samples, 0.13%)</title><rect x="77.4505%" y="181" width="0.1308%" height="15" fill="rgb(232,18,1)"/><text x="77.7005%" y="191.50"></text></g><g><title>param_env (570,647 samples, 0.19%)</title><rect x="77.5814%" y="181" width="0.1915%" height="15" fill="rgb(215,41,42)"/><text x="77.8314%" y="191.50"></text></g><g><title>check_item_well_formed (7,063,043 samples, 2.37%)</title><rect x="75.5563%" y="197" width="2.3701%" height="15" fill="rgb(224,123,36)"/><text x="75.8063%" y="207.50">ch..</text></g><g><title>analysis (232,052,494 samples, 77.87%)</title><rect x="0.2773%" y="245" width="77.8691%" height="15" fill="rgb(240,125,3)"/><text x="0.5273%" y="255.50">analysis</text></g><g><title>type_check_crate (136,796,681 samples, 45.90%)</title><rect x="32.2420%" y="229" width="45.9044%" height="15" fill="rgb(205,98,50)"/><text x="32.4920%" y="239.50">type_check_crate</text></g><g><title>wf_checking (16,825,410 samples, 5.65%)</title><rect x="72.5004%" y="213" width="5.6460%" height="15" fill="rgb(205,185,37)"/><text x="72.7504%" y="223.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (655,687 samples, 0.22%)</title><rect x="77.9264%" y="197" width="0.2200%" height="15" fill="rgb(238,207,15)"/><text x="78.1764%" y="207.50"></text></g><g><title>codegen_crate (401,055 samples, 0.13%)</title><rect x="78.1506%" y="245" width="0.1346%" height="15" fill="rgb(213,199,42)"/><text x="78.4006%" y="255.50"></text></g><g><title>metadata_register_crate (3,031,954 samples, 1.02%)</title><rect x="89.8547%" y="197" width="1.0174%" height="15" fill="rgb(235,201,11)"/><text x="90.1047%" y="207.50"></text></g><g><title>metadata_register_crate (1,011,782 samples, 0.34%)</title><rect x="90.5326%" y="181" width="0.3395%" height="15" fill="rgb(207,46,11)"/><text x="90.7826%" y="191.50"></text></g><g><title>macro_expand_crate (37,715,704 samples, 12.66%)</title><rect x="78.5157%" y="229" width="12.6561%" height="15" fill="rgb(241,35,35)"/><text x="78.7657%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (37,695,134 samples, 12.65%)</title><rect x="78.5226%" y="213" width="12.6492%" height="15" fill="rgb(243,32,47)"/><text x="78.7726%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (893,131 samples, 0.30%)</title><rect x="90.8721%" y="197" width="0.2997%" height="15" fill="rgb(247,202,23)"/><text x="91.1221%" y="207.50"></text></g><g><title>late_resolve_crate (4,674,553 samples, 1.57%)</title><rect x="91.3270%" y="213" width="1.5686%" height="15" fill="rgb(219,102,11)"/><text x="91.5770%" y="223.50"></text></g><g><title>configure_and_expand (43,802,524 samples, 14.70%)</title><rect x="78.2852%" y="245" width="14.6987%" height="15" fill="rgb(243,110,44)"/><text x="78.5352%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (5,194,189 samples, 1.74%)</title><rect x="91.2408%" y="229" width="1.7430%" height="15" fill="rgb(222,74,54)"/><text x="91.4908%" y="239.50"></text></g><g><title>drop_ast (438,835 samples, 0.15%)</title><rect x="92.9838%" y="245" width="0.1473%" height="15" fill="rgb(216,99,12)"/><text x="93.2338%" y="255.50"></text></g><g><title>early_lint_checks (920,121 samples, 0.31%)</title><rect x="93.1376%" y="245" width="0.3088%" height="15" fill="rgb(226,22,26)"/><text x="93.3876%" y="255.50"></text></g><g><title>free_global_ctxt (5,669,604 samples, 1.90%)</title><rect x="93.4463%" y="245" width="1.9025%" height="15" fill="rgb(217,163,10)"/><text x="93.6963%" y="255.50">f..</text></g><g><title>mir_for_ctfe (310,182 samples, 0.10%)</title><rect x="96.0692%" y="229" width="0.1041%" height="15" fill="rgb(213,25,53)"/><text x="96.3192%" y="239.50"></text></g><g><title>generate_crate_metadata (2,574,329 samples, 0.86%)</title><rect x="95.3488%" y="245" width="0.8639%" height="15" fill="rgb(252,105,26)"/><text x="95.5988%" y="255.50"></text></g><g><title>hir_lowering (6,934,148 samples, 2.33%)</title><rect x="96.2127%" y="245" width="2.3269%" height="15" fill="rgb(220,39,43)"/><text x="96.4627%" y="255.50">h..</text></g><g><title>parse_crate (2,014,632 samples, 0.68%)</title><rect x="98.5645%" y="245" width="0.6760%" height="15" fill="rgb(229,68,48)"/><text x="98.8145%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,563,307 samples, 0.52%)</title><rect x="99.3096%" y="245" width="0.5246%" height="15" fill="rgb(252,8,32)"/><text x="99.5596%" y="255.50"></text></g><g><title>all (298,003,307 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (298,003,307 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (401,274 samples, 0.13%)</title><rect x="99.8653%" y="245" width="0.1347%" height="15" fill="rgb(236,28,36)"/><text x="100.1153%" y="255.50"></text></g></svg></svg>