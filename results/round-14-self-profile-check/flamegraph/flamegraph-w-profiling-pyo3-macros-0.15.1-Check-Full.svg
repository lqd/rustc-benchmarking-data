<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (75,130 samples, 0.14%)</title><rect x="8.5514%" y="197" width="0.1432%" height="15" fill="rgb(227,0,7)"/><text x="8.8014%" y="207.50"></text></g><g><title>adt_drop_tys (102,000 samples, 0.19%)</title><rect x="10.9634%" y="117" width="0.1944%" height="15" fill="rgb(217,0,24)"/><text x="11.2134%" y="127.50"></text></g><g><title>adt_drop_tys (188,151 samples, 0.36%)</title><rect x="10.9434%" y="133" width="0.3586%" height="15" fill="rgb(221,193,54)"/><text x="11.1934%" y="143.50"></text></g><g><title>adt_drop_tys (306,783 samples, 0.58%)</title><rect x="10.8938%" y="149" width="0.5847%" height="15" fill="rgb(248,212,6)"/><text x="11.1438%" y="159.50"></text></g><g><title>param_env (67,470 samples, 0.13%)</title><rect x="11.3499%" y="133" width="0.1286%" height="15" fill="rgb(208,68,35)"/><text x="11.5999%" y="143.50"></text></g><g><title>needs_drop_raw (723,167 samples, 1.38%)</title><rect x="10.8052%" y="165" width="1.3783%" height="15" fill="rgb(232,128,0)"/><text x="11.0552%" y="175.50"></text></g><g><title>is_copy_raw (369,884 samples, 0.70%)</title><rect x="11.4785%" y="149" width="0.7049%" height="15" fill="rgb(207,160,47)"/><text x="11.7285%" y="159.50"></text></g><g><title>evaluate_obligation (306,272 samples, 0.58%)</title><rect x="11.5997%" y="133" width="0.5837%" height="15" fill="rgb(228,23,34)"/><text x="11.8497%" y="143.50"></text></g><g><title>thir_body (257,102 samples, 0.49%)</title><rect x="12.2254%" y="165" width="0.4900%" height="15" fill="rgb(218,30,26)"/><text x="12.4754%" y="175.50"></text></g><g><title>mir_const (2,493,357 samples, 4.75%)</title><rect x="7.9766%" y="213" width="4.7520%" height="15" fill="rgb(220,122,19)"/><text x="8.2266%" y="223.50">mir_co..</text></g><g><title>unsafety_check_result (2,116,615 samples, 4.03%)</title><rect x="8.6946%" y="197" width="4.0340%" height="15" fill="rgb(250,228,42)"/><text x="8.9446%" y="207.50">unsa..</text></g><g><title>mir_built (1,920,302 samples, 3.66%)</title><rect x="9.0688%" y="181" width="3.6598%" height="15" fill="rgb(240,193,28)"/><text x="9.3188%" y="191.50">mir_..</text></g><g><title>has_structural_eq_impls (149,192 samples, 0.28%)</title><rect x="12.8949%" y="197" width="0.2843%" height="15" fill="rgb(216,20,37)"/><text x="13.1449%" y="207.50"></text></g><g><title>evaluate_obligation (139,431 samples, 0.27%)</title><rect x="12.9135%" y="181" width="0.2657%" height="15" fill="rgb(206,188,39)"/><text x="13.1635%" y="191.50"></text></g><g><title>trait_impls_of (127,051 samples, 0.24%)</title><rect x="12.9371%" y="165" width="0.2421%" height="15" fill="rgb(217,207,13)"/><text x="13.1871%" y="175.50"></text></g><g><title>is_freeze_raw (124,122 samples, 0.24%)</title><rect x="13.1821%" y="197" width="0.2366%" height="15" fill="rgb(231,73,38)"/><text x="13.4321%" y="207.50"></text></g><g><title>evaluate_obligation (121,062 samples, 0.23%)</title><rect x="13.1879%" y="181" width="0.2307%" height="15" fill="rgb(225,20,46)"/><text x="13.4379%" y="191.50"></text></g><g><title>mir_const (131,861 samples, 0.25%)</title><rect x="13.4215%" y="197" width="0.2513%" height="15" fill="rgb(210,31,41)"/><text x="13.6715%" y="207.50"></text></g><g><title>unsafety_check_result (115,771 samples, 0.22%)</title><rect x="13.4521%" y="181" width="0.2206%" height="15" fill="rgb(221,200,47)"/><text x="13.7021%" y="191.50"></text></g><g><title>mir_built (104,181 samples, 0.20%)</title><rect x="13.4742%" y="165" width="0.1986%" height="15" fill="rgb(226,26,5)"/><text x="13.7242%" y="175.50"></text></g><g><title>mir_promoted (3,306,746 samples, 6.30%)</title><rect x="7.3747%" y="229" width="6.3022%" height="15" fill="rgb(249,33,26)"/><text x="7.6247%" y="239.50">mir_prom..</text></g><g><title>mir_const_qualif (497,575 samples, 0.95%)</title><rect x="12.7286%" y="213" width="0.9483%" height="15" fill="rgb(235,183,28)"/><text x="12.9786%" y="223.50"></text></g><g><title>MIR_borrow_checking (7,037,348 samples, 13.41%)</title><rect x="1.2544%" y="261" width="13.4122%" height="15" fill="rgb(221,5,38)"/><text x="1.5044%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,011,088 samples, 13.36%)</title><rect x="1.3045%" y="245" width="13.3622%" height="15" fill="rgb(247,18,42)"/><text x="1.5545%" y="255.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (440,436 samples, 0.84%)</title><rect x="13.8272%" y="229" width="0.8394%" height="15" fill="rgb(241,131,45)"/><text x="14.0772%" y="239.50"></text></g><g><title>evaluate_obligation (119,343 samples, 0.23%)</title><rect x="14.4392%" y="213" width="0.2275%" height="15" fill="rgb(249,31,29)"/><text x="14.6892%" y="223.50"></text></g><g><title>MIR_effect_checking (126,312 samples, 0.24%)</title><rect x="14.6666%" y="261" width="0.2407%" height="15" fill="rgb(225,111,53)"/><text x="14.9166%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (106,671 samples, 0.20%)</title><rect x="14.7041%" y="245" width="0.2033%" height="15" fill="rgb(238,160,17)"/><text x="14.9541%" y="255.50"></text></g><g><title>hir_module_items (85,031 samples, 0.16%)</title><rect x="14.9074%" y="261" width="0.1621%" height="15" fill="rgb(214,148,48)"/><text x="15.1574%" y="271.50"></text></g><g><title>get_lang_items (77,791 samples, 0.15%)</title><rect x="15.3340%" y="213" width="0.1483%" height="15" fill="rgb(232,36,49)"/><text x="15.5840%" y="223.50"></text></g><g><title>codegen_fn_attrs (159,911 samples, 0.30%)</title><rect x="15.2406%" y="229" width="0.3048%" height="15" fill="rgb(209,103,24)"/><text x="15.4906%" y="239.50"></text></g><g><title>check_mod_attrs (232,663 samples, 0.44%)</title><rect x="15.1022%" y="245" width="0.4434%" height="15" fill="rgb(229,88,8)"/><text x="15.3522%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (133,551 samples, 0.25%)</title><rect x="15.6442%" y="245" width="0.2545%" height="15" fill="rgb(213,181,19)"/><text x="15.8942%" y="255.50"></text></g><g><title>misc_checking_1 (464,055 samples, 0.88%)</title><rect x="15.0702%" y="261" width="0.8844%" height="15" fill="rgb(254,191,54)"/><text x="15.3202%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (304,194 samples, 0.58%)</title><rect x="15.9572%" y="245" width="0.5798%" height="15" fill="rgb(241,83,37)"/><text x="16.2072%" y="255.50"></text></g><g><title>check_mod_liveness (272,973 samples, 0.52%)</title><rect x="16.0167%" y="229" width="0.5202%" height="15" fill="rgb(233,36,39)"/><text x="16.2667%" y="239.50"></text></g><g><title>type_uninhabited_from (159,992 samples, 0.30%)</title><rect x="16.2320%" y="213" width="0.3049%" height="15" fill="rgb(226,3,54)"/><text x="16.4820%" y="223.50"></text></g><g><title>type_uninhabited_from (132,832 samples, 0.25%)</title><rect x="16.2838%" y="197" width="0.2532%" height="15" fill="rgb(245,192,40)"/><text x="16.5338%" y="207.50"></text></g><g><title>type_uninhabited_from (121,342 samples, 0.23%)</title><rect x="16.3057%" y="181" width="0.2313%" height="15" fill="rgb(238,167,29)"/><text x="16.5557%" y="191.50"></text></g><g><title>type_uninhabited_from (103,611 samples, 0.20%)</title><rect x="16.3395%" y="165" width="0.1975%" height="15" fill="rgb(232,182,51)"/><text x="16.5895%" y="175.50"></text></g><g><title>type_uninhabited_from (78,861 samples, 0.15%)</title><rect x="16.3866%" y="149" width="0.1503%" height="15" fill="rgb(231,60,39)"/><text x="16.6366%" y="159.50"></text></g><g><title>type_uninhabited_from (56,541 samples, 0.11%)</title><rect x="16.4292%" y="133" width="0.1078%" height="15" fill="rgb(208,69,12)"/><text x="16.6792%" y="143.50"></text></g><g><title>misc_checking_2 (549,527 samples, 1.05%)</title><rect x="15.9546%" y="261" width="1.0473%" height="15" fill="rgb(235,93,37)"/><text x="16.2046%" y="271.50"></text></g><g><title>match_checking (243,973 samples, 0.46%)</title><rect x="16.5369%" y="245" width="0.4650%" height="15" fill="rgb(213,116,39)"/><text x="16.7869%" y="255.50"></text></g><g><title>check_match (235,282 samples, 0.45%)</title><rect x="16.5535%" y="229" width="0.4484%" height="15" fill="rgb(222,207,29)"/><text x="16.8035%" y="239.50"></text></g><g><title>death_checking (84,521 samples, 0.16%)</title><rect x="17.0999%" y="245" width="0.1611%" height="15" fill="rgb(206,96,30)"/><text x="17.3499%" y="255.50"></text></g><g><title>layout_of (77,061 samples, 0.15%)</title><rect x="18.2094%" y="101" width="0.1469%" height="15" fill="rgb(218,138,4)"/><text x="18.4594%" y="111.50"></text></g><g><title>fn_abi_of_instance (169,732 samples, 0.32%)</title><rect x="18.1078%" y="117" width="0.3235%" height="15" fill="rgb(250,191,14)"/><text x="18.3578%" y="127.50"></text></g><g><title>mir_for_ctfe (55,720 samples, 0.11%)</title><rect x="18.5356%" y="117" width="0.1062%" height="15" fill="rgb(239,60,40)"/><text x="18.7856%" y="127.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (54,170 samples, 0.10%)</title><rect x="18.5386%" y="101" width="0.1032%" height="15" fill="rgb(206,27,48)"/><text x="18.7886%" y="111.50"></text></g><g><title>eval_to_const_value_raw (627,047 samples, 1.20%)</title><rect x="17.5999%" y="165" width="1.1951%" height="15" fill="rgb(225,35,8)"/><text x="17.8499%" y="175.50"></text></g><g><title>eval_to_const_value_raw (626,397 samples, 1.19%)</title><rect x="17.6011%" y="149" width="1.1938%" height="15" fill="rgb(250,213,24)"/><text x="17.8511%" y="159.50"></text></g><g><title>eval_to_allocation_raw (624,507 samples, 1.19%)</title><rect x="17.6047%" y="133" width="1.1902%" height="15" fill="rgb(247,123,22)"/><text x="17.8547%" y="143.50"></text></g><g><title>eval_to_allocation_raw (688,437 samples, 1.31%)</title><rect x="17.4855%" y="213" width="1.3121%" height="15" fill="rgb(231,138,38)"/><text x="17.7355%" y="223.50"></text></g><g><title>eval_to_allocation_raw (687,747 samples, 1.31%)</title><rect x="17.4868%" y="197" width="1.3108%" height="15" fill="rgb(231,145,46)"/><text x="17.7368%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (635,447 samples, 1.21%)</title><rect x="17.5865%" y="181" width="1.2111%" height="15" fill="rgb(251,118,11)"/><text x="17.8365%" y="191.50"></text></g><g><title>eval_to_const_value_raw (100,841 samples, 0.19%)</title><rect x="18.7976%" y="213" width="0.1922%" height="15" fill="rgb(217,147,25)"/><text x="19.0476%" y="223.50"></text></g><g><title>eval_to_const_value_raw (98,501 samples, 0.19%)</title><rect x="18.8020%" y="197" width="0.1877%" height="15" fill="rgb(247,81,37)"/><text x="19.0520%" y="207.50"></text></g><g><title>eval_to_allocation_raw (92,671 samples, 0.18%)</title><rect x="18.8132%" y="181" width="0.1766%" height="15" fill="rgb(209,12,38)"/><text x="19.0632%" y="191.50"></text></g><g><title>explicit_predicates_of (289,484 samples, 0.55%)</title><rect x="19.1499%" y="165" width="0.5517%" height="15" fill="rgb(227,1,9)"/><text x="19.3999%" y="175.50"></text></g><g><title>param_env (376,405 samples, 0.72%)</title><rect x="18.9898%" y="213" width="0.7174%" height="15" fill="rgb(248,47,43)"/><text x="19.2398%" y="223.50"></text></g><g><title>predicates_of (312,434 samples, 0.60%)</title><rect x="19.1117%" y="197" width="0.5955%" height="15" fill="rgb(221,10,30)"/><text x="19.3617%" y="207.50"></text></g><g><title>predicates_defined_on (304,314 samples, 0.58%)</title><rect x="19.1272%" y="181" width="0.5800%" height="15" fill="rgb(210,229,1)"/><text x="19.3772%" y="191.50"></text></g><g><title>crate_lints (1,286,094 samples, 2.45%)</title><rect x="17.2639%" y="229" width="2.4511%" height="15" fill="rgb(222,148,37)"/><text x="17.5139%" y="239.50">cr..</text></g><g><title>lint_checking (1,392,456 samples, 2.65%)</title><rect x="17.2610%" y="245" width="2.6538%" height="15" fill="rgb(234,67,33)"/><text x="17.5110%" y="255.50">li..</text></g><g><title>module_lints (104,852 samples, 0.20%)</title><rect x="19.7150%" y="229" width="0.1998%" height="15" fill="rgb(247,98,35)"/><text x="19.9650%" y="239.50"></text></g><g><title>lint_mod (102,762 samples, 0.20%)</title><rect x="19.7190%" y="213" width="0.1959%" height="15" fill="rgb(247,138,52)"/><text x="19.9690%" y="223.50"></text></g><g><title>privacy_checking_modules (192,922 samples, 0.37%)</title><rect x="20.0030%" y="245" width="0.3677%" height="15" fill="rgb(213,79,30)"/><text x="20.2530%" y="255.50"></text></g><g><title>check_mod_privacy (191,432 samples, 0.36%)</title><rect x="20.0058%" y="229" width="0.3648%" height="15" fill="rgb(246,177,23)"/><text x="20.2558%" y="239.50"></text></g><g><title>misc_checking_3 (1,782,110 samples, 3.40%)</title><rect x="17.0019%" y="261" width="3.3965%" height="15" fill="rgb(230,62,27)"/><text x="17.2519%" y="271.50">mis..</text></g><g><title>adt_def (225,781 samples, 0.43%)</title><rect x="24.6399%" y="165" width="0.4303%" height="15" fill="rgb(216,154,8)"/><text x="24.8899%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (216,971 samples, 0.41%)</title><rect x="24.6567%" y="149" width="0.4135%" height="15" fill="rgb(244,35,45)"/><text x="24.9067%" y="159.50"></text></g><g><title>item_attrs (122,650 samples, 0.23%)</title><rect x="24.8365%" y="133" width="0.2338%" height="15" fill="rgb(251,115,12)"/><text x="25.0865%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (113,760 samples, 0.22%)</title><rect x="24.8534%" y="117" width="0.2168%" height="15" fill="rgb(240,54,50)"/><text x="25.1034%" y="127.50"></text></g><g><title>adt_def (297,252 samples, 0.57%)</title><rect x="25.6359%" y="149" width="0.5665%" height="15" fill="rgb(233,84,52)"/><text x="25.8859%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (288,642 samples, 0.55%)</title><rect x="25.6523%" y="133" width="0.5501%" height="15" fill="rgb(207,117,47)"/><text x="25.9023%" y="143.50"></text></g><g><title>item_attrs (167,282 samples, 0.32%)</title><rect x="25.8836%" y="117" width="0.3188%" height="15" fill="rgb(249,43,39)"/><text x="26.1336%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (156,542 samples, 0.30%)</title><rect x="25.9041%" y="101" width="0.2983%" height="15" fill="rgb(209,38,44)"/><text x="26.1541%" y="111.50"></text></g><g><title>adt_def (578,554 samples, 1.10%)</title><rect x="26.9886%" y="133" width="1.1026%" height="15" fill="rgb(236,212,23)"/><text x="27.2386%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (558,564 samples, 1.06%)</title><rect x="27.0267%" y="117" width="1.0645%" height="15" fill="rgb(242,79,21)"/><text x="27.2767%" y="127.50"></text></g><g><title>item_attrs (377,203 samples, 0.72%)</title><rect x="27.3724%" y="101" width="0.7189%" height="15" fill="rgb(211,96,35)"/><text x="27.6224%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (358,723 samples, 0.68%)</title><rect x="27.4076%" y="85" width="0.6837%" height="15" fill="rgb(253,215,40)"/><text x="27.6576%" y="95.50"></text></g><g><title>adt_destructor (87,534 samples, 0.17%)</title><rect x="28.0913%" y="133" width="0.1668%" height="15" fill="rgb(211,81,21)"/><text x="28.3413%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (70,103 samples, 0.13%)</title><rect x="28.1245%" y="117" width="0.1336%" height="15" fill="rgb(208,190,38)"/><text x="28.3745%" y="127.50"></text></g><g><title>adt_def (348,315 samples, 0.66%)</title><rect x="28.5879%" y="117" width="0.6638%" height="15" fill="rgb(235,213,38)"/><text x="28.8379%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (335,585 samples, 0.64%)</title><rect x="28.6122%" y="101" width="0.6396%" height="15" fill="rgb(237,122,38)"/><text x="28.8622%" y="111.50"></text></g><g><title>item_attrs (182,633 samples, 0.35%)</title><rect x="28.9037%" y="85" width="0.3481%" height="15" fill="rgb(244,218,35)"/><text x="29.1537%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (169,882 samples, 0.32%)</title><rect x="28.9280%" y="69" width="0.3238%" height="15" fill="rgb(240,68,47)"/><text x="29.1780%" y="79.50"></text></g><g><title>adt_destructor (73,051 samples, 0.14%)</title><rect x="29.2517%" y="117" width="0.1392%" height="15" fill="rgb(210,16,53)"/><text x="29.5017%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (60,401 samples, 0.12%)</title><rect x="29.2759%" y="101" width="0.1151%" height="15" fill="rgb(235,124,12)"/><text x="29.5259%" y="111.50"></text></g><g><title>adt_def (228,313 samples, 0.44%)</title><rect x="29.5755%" y="101" width="0.4351%" height="15" fill="rgb(224,169,11)"/><text x="29.8255%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (216,363 samples, 0.41%)</title><rect x="29.5983%" y="85" width="0.4124%" height="15" fill="rgb(250,166,2)"/><text x="29.8483%" y="95.50"></text></g><g><title>item_attrs (120,163 samples, 0.23%)</title><rect x="29.7816%" y="69" width="0.2290%" height="15" fill="rgb(242,216,29)"/><text x="30.0316%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (108,233 samples, 0.21%)</title><rect x="29.8044%" y="53" width="0.2063%" height="15" fill="rgb(230,116,27)"/><text x="30.0544%" y="63.50"></text></g><g><title>adt_def (106,010 samples, 0.20%)</title><rect x="30.1432%" y="85" width="0.2020%" height="15" fill="rgb(228,99,48)"/><text x="30.3932%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (103,650 samples, 0.20%)</title><rect x="30.1477%" y="69" width="0.1975%" height="15" fill="rgb(253,11,6)"/><text x="30.3977%" y="79.50"></text></g><g><title>item_attrs (74,880 samples, 0.14%)</title><rect x="30.2026%" y="53" width="0.1427%" height="15" fill="rgb(247,143,39)"/><text x="30.4526%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (72,460 samples, 0.14%)</title><rect x="30.2072%" y="37" width="0.1381%" height="15" fill="rgb(236,97,10)"/><text x="30.4572%" y="47.50"></text></g><g><title>adt_dtorck_constraint (92,260 samples, 0.18%)</title><rect x="30.3664%" y="85" width="0.1758%" height="15" fill="rgb(233,208,19)"/><text x="30.6164%" y="95.50"></text></g><g><title>adt_dtorck_constraint (254,151 samples, 0.48%)</title><rect x="30.0954%" y="101" width="0.4844%" height="15" fill="rgb(216,164,2)"/><text x="30.3454%" y="111.50"></text></g><g><title>adt_dtorck_constraint (682,748 samples, 1.30%)</title><rect x="29.3910%" y="117" width="1.3012%" height="15" fill="rgb(220,129,5)"/><text x="29.6410%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,429,337 samples, 2.72%)</title><rect x="28.2581%" y="133" width="2.7241%" height="15" fill="rgb(242,17,10)"/><text x="28.5081%" y="143.50">ad..</text></g><g><title>type_of (112,931 samples, 0.22%)</title><rect x="30.7670%" y="117" width="0.2152%" height="15" fill="rgb(242,107,0)"/><text x="31.0170%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (83,001 samples, 0.16%)</title><rect x="30.8240%" y="101" width="0.1582%" height="15" fill="rgb(251,28,31)"/><text x="31.0740%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,915,994 samples, 5.56%)</title><rect x="26.2871%" y="149" width="5.5575%" height="15" fill="rgb(233,223,10)"/><text x="26.5371%" y="159.50">adt_dto..</text></g><g><title>type_of (417,956 samples, 0.80%)</title><rect x="31.0480%" y="133" width="0.7966%" height="15" fill="rgb(215,21,27)"/><text x="31.2980%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (351,995 samples, 0.67%)</title><rect x="31.1738%" y="117" width="0.6709%" height="15" fill="rgb(232,23,21)"/><text x="31.4238%" y="127.50"></text></g><g><title>adt_dtorck_constraint (3,685,563 samples, 7.02%)</title><rect x="25.1631%" y="165" width="7.0242%" height="15" fill="rgb(244,5,23)"/><text x="25.4131%" y="175.50">adt_dtorc..</text></g><g><title>type_of (155,692 samples, 0.30%)</title><rect x="31.8906%" y="149" width="0.2967%" height="15" fill="rgb(226,81,46)"/><text x="32.1406%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (113,442 samples, 0.22%)</title><rect x="31.9711%" y="133" width="0.2162%" height="15" fill="rgb(247,70,30)"/><text x="32.2211%" y="143.50"></text></g><g><title>dropck_outlives (4,468,560 samples, 8.52%)</title><rect x="23.9250%" y="197" width="8.5165%" height="15" fill="rgb(212,68,19)"/><text x="24.1750%" y="207.50">dropck_outli..</text></g><g><title>adt_dtorck_constraint (4,276,189 samples, 8.15%)</title><rect x="24.2916%" y="181" width="8.1498%" height="15" fill="rgb(240,187,13)"/><text x="24.5416%" y="191.50">adt_dtorck_..</text></g><g><title>type_of (109,912 samples, 0.21%)</title><rect x="32.2320%" y="165" width="0.2095%" height="15" fill="rgb(223,113,26)"/><text x="32.4820%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (85,900 samples, 0.16%)</title><rect x="32.2778%" y="149" width="0.1637%" height="15" fill="rgb(206,192,2)"/><text x="32.5278%" y="159.50"></text></g><g><title>adt_def (157,322 samples, 0.30%)</title><rect x="32.9550%" y="165" width="0.2998%" height="15" fill="rgb(241,108,4)"/><text x="33.2050%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (154,242 samples, 0.29%)</title><rect x="32.9608%" y="149" width="0.2940%" height="15" fill="rgb(247,173,49)"/><text x="33.2108%" y="159.50"></text></g><g><title>item_attrs (108,662 samples, 0.21%)</title><rect x="33.0477%" y="133" width="0.2071%" height="15" fill="rgb(224,114,35)"/><text x="33.2977%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (105,232 samples, 0.20%)</title><rect x="33.0542%" y="117" width="0.2006%" height="15" fill="rgb(245,159,27)"/><text x="33.3042%" y="127.50"></text></g><g><title>adt_def (84,221 samples, 0.16%)</title><rect x="33.2639%" y="149" width="0.1605%" height="15" fill="rgb(245,172,44)"/><text x="33.5139%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (83,401 samples, 0.16%)</title><rect x="33.2654%" y="133" width="0.1590%" height="15" fill="rgb(236,23,11)"/><text x="33.5154%" y="143.50"></text></g><g><title>item_attrs (73,511 samples, 0.14%)</title><rect x="33.2843%" y="117" width="0.1401%" height="15" fill="rgb(205,117,38)"/><text x="33.5343%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (72,621 samples, 0.14%)</title><rect x="33.2860%" y="101" width="0.1384%" height="15" fill="rgb(237,72,25)"/><text x="33.5360%" y="111.50"></text></g><g><title>adt_sized_constraint (107,021 samples, 0.20%)</title><rect x="33.2548%" y="165" width="0.2040%" height="15" fill="rgb(244,70,9)"/><text x="33.5048%" y="175.50"></text></g><g><title>adt_sized_constraint (293,113 samples, 0.56%)</title><rect x="32.9221%" y="181" width="0.5586%" height="15" fill="rgb(217,125,39)"/><text x="33.1721%" y="191.50"></text></g><g><title>specializes (54,310 samples, 0.10%)</title><rect x="33.6640%" y="181" width="0.1035%" height="15" fill="rgb(235,36,10)"/><text x="33.9140%" y="191.50"></text></g><g><title>evaluate_obligation (940,859 samples, 1.79%)</title><rect x="32.4415%" y="197" width="1.7931%" height="15" fill="rgb(251,123,47)"/><text x="32.6915%" y="207.50">e..</text></g><g><title>trait_impls_of (243,182 samples, 0.46%)</title><rect x="33.7712%" y="181" width="0.4635%" height="15" fill="rgb(221,13,13)"/><text x="34.0212%" y="191.50"></text></g><g><title>implementations_of_trait (86,090 samples, 0.16%)</title><rect x="34.0705%" y="165" width="0.1641%" height="15" fill="rgb(238,131,9)"/><text x="34.3205%" y="175.50"></text></g><g><title>fn_sig (59,310 samples, 0.11%)</title><rect x="34.2571%" y="197" width="0.1130%" height="15" fill="rgb(211,50,8)"/><text x="34.5071%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (54,300 samples, 0.10%)</title><rect x="34.2667%" y="181" width="0.1035%" height="15" fill="rgb(245,182,24)"/><text x="34.5167%" y="191.50"></text></g><g><title>method_autoderef_steps (55,652 samples, 0.11%)</title><rect x="34.5853%" y="197" width="0.1061%" height="15" fill="rgb(242,14,37)"/><text x="34.8353%" y="207.50"></text></g><g><title>predicates_of (153,091 samples, 0.29%)</title><rect x="34.7015%" y="197" width="0.2918%" height="15" fill="rgb(246,228,12)"/><text x="34.9515%" y="207.50"></text></g><g><title>predicates_defined_on (107,691 samples, 0.21%)</title><rect x="34.7881%" y="181" width="0.2052%" height="15" fill="rgb(213,55,15)"/><text x="35.0381%" y="191.50"></text></g><g><title>type_of (64,991 samples, 0.12%)</title><rect x="34.9952%" y="197" width="0.1239%" height="15" fill="rgb(209,9,3)"/><text x="35.2452%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (56,220 samples, 0.11%)</title><rect x="35.0119%" y="181" width="0.1071%" height="15" fill="rgb(230,59,30)"/><text x="35.2619%" y="191.50"></text></g><g><title>dropck_outlives (757,409 samples, 1.44%)</title><rect x="41.4930%" y="181" width="1.4435%" height="15" fill="rgb(209,121,21)"/><text x="41.7430%" y="191.50"></text></g><g><title>adt_dtorck_constraint (133,191 samples, 0.25%)</title><rect x="42.6826%" y="165" width="0.2538%" height="15" fill="rgb(220,109,13)"/><text x="42.9326%" y="175.50"></text></g><g><title>adt_sized_constraint (66,361 samples, 0.13%)</title><rect x="43.2875%" y="165" width="0.1265%" height="15" fill="rgb(232,18,1)"/><text x="43.5375%" y="175.50"></text></g><g><title>evaluate_obligation (323,913 samples, 0.62%)</title><rect x="42.9365%" y="181" width="0.6173%" height="15" fill="rgb(215,41,42)"/><text x="43.1865%" y="191.50"></text></g><g><title>is_copy_raw (193,722 samples, 0.37%)</title><rect x="43.6751%" y="181" width="0.3692%" height="15" fill="rgb(224,123,36)"/><text x="43.9251%" y="191.50"></text></g><g><title>evaluate_obligation (188,512 samples, 0.36%)</title><rect x="43.6850%" y="165" width="0.3593%" height="15" fill="rgb(240,125,3)"/><text x="43.9350%" y="175.50"></text></g><g><title>trait_impls_of (173,602 samples, 0.33%)</title><rect x="43.7135%" y="149" width="0.3309%" height="15" fill="rgb(205,98,50)"/><text x="43.9635%" y="159.50"></text></g><g><title>lint_levels (63,440 samples, 0.12%)</title><rect x="44.0552%" y="181" width="0.1209%" height="15" fill="rgb(205,185,37)"/><text x="44.3052%" y="191.50"></text></g><g><title>predicates_of (61,982 samples, 0.12%)</title><rect x="44.2131%" y="181" width="0.1181%" height="15" fill="rgb(238,207,15)"/><text x="44.4631%" y="191.50"></text></g><g><title>typeck (4,880,024 samples, 9.30%)</title><rect x="35.1191%" y="197" width="9.3007%" height="15" fill="rgb(213,199,42)"/><text x="35.3691%" y="207.50">typeck</text></g><g><title>item_bodies_checking (12,560,441 samples, 23.94%)</title><rect x="20.5144%" y="245" width="23.9385%" height="15" fill="rgb(235,201,11)"/><text x="20.7644%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,558,121 samples, 23.93%)</title><rect x="20.5188%" y="229" width="23.9341%" height="15" fill="rgb(207,46,11)"/><text x="20.7688%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (12,545,870 samples, 23.91%)</title><rect x="20.5422%" y="213" width="23.9107%" height="15" fill="rgb(241,35,35)"/><text x="20.7922%" y="223.50">typeck</text></g><g><title>impl_parent (117,712 samples, 0.22%)</title><rect x="45.9716%" y="85" width="0.2243%" height="15" fill="rgb(243,32,47)"/><text x="46.2216%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (94,181 samples, 0.18%)</title><rect x="46.0164%" y="69" width="0.1795%" height="15" fill="rgb(247,202,23)"/><text x="46.2664%" y="79.50"></text></g><g><title>impl_trait_ref (373,834 samples, 0.71%)</title><rect x="46.1959%" y="85" width="0.7125%" height="15" fill="rgb(219,102,11)"/><text x="46.4459%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (351,894 samples, 0.67%)</title><rect x="46.2377%" y="69" width="0.6707%" height="15" fill="rgb(243,110,44)"/><text x="46.4877%" y="79.50"></text></g><g><title>coherent_trait (648,397 samples, 1.24%)</title><rect x="45.7567%" y="117" width="1.2358%" height="15" fill="rgb(222,74,54)"/><text x="46.0067%" y="127.50"></text></g><g><title>specialization_graph_of (644,627 samples, 1.23%)</title><rect x="45.7639%" y="101" width="1.2286%" height="15" fill="rgb(216,99,12)"/><text x="46.0139%" y="111.50"></text></g><g><title>adt_destructor (655,237 samples, 1.25%)</title><rect x="45.7468%" y="149" width="1.2488%" height="15" fill="rgb(226,22,26)"/><text x="45.9968%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_destructor (654,747 samples, 1.25%)</title><rect x="45.7477%" y="133" width="1.2479%" height="15" fill="rgb(217,163,10)"/><text x="45.9977%" y="143.50"></text></g><g><title>adt_dtorck_constraint (660,677 samples, 1.26%)</title><rect x="45.7371%" y="165" width="1.2592%" height="15" fill="rgb(213,25,53)"/><text x="45.9871%" y="175.50"></text></g><g><title>dropck_outlives (691,867 samples, 1.32%)</title><rect x="45.6801%" y="197" width="1.3186%" height="15" fill="rgb(252,105,26)"/><text x="45.9301%" y="207.50"></text></g><g><title>adt_dtorck_constraint (676,257 samples, 1.29%)</title><rect x="45.7099%" y="181" width="1.2889%" height="15" fill="rgb(220,39,43)"/><text x="45.9599%" y="191.50"></text></g><g><title>adt_def (67,161 samples, 0.13%)</title><rect x="47.0611%" y="133" width="0.1280%" height="15" fill="rgb(229,68,48)"/><text x="47.3111%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (66,951 samples, 0.13%)</title><rect x="47.0615%" y="117" width="0.1276%" height="15" fill="rgb(252,8,32)"/><text x="47.3115%" y="127.50"></text></g><g><title>adt_sized_constraint (72,911 samples, 0.14%)</title><rect x="47.0584%" y="149" width="0.1390%" height="15" fill="rgb(223,20,43)"/><text x="47.3084%" y="159.50"></text></g><g><title>adt_sized_constraint (79,261 samples, 0.15%)</title><rect x="47.0490%" y="165" width="0.1511%" height="15" fill="rgb(229,81,49)"/><text x="47.2990%" y="175.50"></text></g><g><title>evaluate_obligation (107,621 samples, 0.21%)</title><rect x="46.9987%" y="197" width="0.2051%" height="15" fill="rgb(236,28,36)"/><text x="47.2487%" y="207.50"></text></g><g><title>adt_sized_constraint (92,341 samples, 0.18%)</title><rect x="47.0279%" y="181" width="0.1760%" height="15" fill="rgb(249,185,26)"/><text x="47.2779%" y="191.50"></text></g><g><title>item_types_checking (1,551,447 samples, 2.96%)</title><rect x="44.4529%" y="245" width="2.9568%" height="15" fill="rgb(249,174,33)"/><text x="44.7029%" y="255.50">ite..</text></g><g><title>check_mod_item_types (1,549,787 samples, 2.95%)</title><rect x="44.4560%" y="229" width="2.9537%" height="15" fill="rgb(233,201,37)"/><text x="44.7060%" y="239.50">che..</text></g><g><title>typeck (1,515,047 samples, 2.89%)</title><rect x="44.5222%" y="213" width="2.8875%" height="15" fill="rgb(221,78,26)"/><text x="44.7722%" y="223.50">ty..</text></g><g><title>late_bound_vars_map (67,861 samples, 0.13%)</title><rect x="47.6357%" y="197" width="0.1293%" height="15" fill="rgb(250,127,30)"/><text x="47.8857%" y="207.50"></text></g><g><title>resolve_lifetimes (60,911 samples, 0.12%)</title><rect x="47.6490%" y="181" width="0.1161%" height="15" fill="rgb(230,49,44)"/><text x="47.8990%" y="191.50"></text></g><g><title>fn_sig (136,552 samples, 0.26%)</title><rect x="47.5274%" y="213" width="0.2602%" height="15" fill="rgb(229,67,23)"/><text x="47.7774%" y="223.50"></text></g><g><title>type_collecting (314,763 samples, 0.60%)</title><rect x="47.4128%" y="245" width="0.5999%" height="15" fill="rgb(249,83,47)"/><text x="47.6628%" y="255.50"></text></g><g><title>collect_mod_item_types (308,093 samples, 0.59%)</title><rect x="47.4255%" y="229" width="0.5872%" height="15" fill="rgb(215,43,3)"/><text x="47.6755%" y="239.50"></text></g><g><title>evaluate_obligation (253,643 samples, 0.48%)</title><rect x="48.6694%" y="213" width="0.4834%" height="15" fill="rgb(238,154,13)"/><text x="48.9194%" y="223.50"></text></g><g><title>implied_outlives_bounds (55,071 samples, 0.10%)</title><rect x="49.1528%" y="213" width="0.1050%" height="15" fill="rgb(219,56,2)"/><text x="49.4028%" y="223.50"></text></g><g><title>param_env (147,721 samples, 0.28%)</title><rect x="49.2583%" y="213" width="0.2815%" height="15" fill="rgb(233,0,4)"/><text x="49.5083%" y="223.50"></text></g><g><title>region_scope_tree (90,101 samples, 0.17%)</title><rect x="49.5577%" y="213" width="0.1717%" height="15" fill="rgb(235,30,7)"/><text x="49.8077%" y="223.50"></text></g><g><title>analysis (25,562,887 samples, 48.72%)</title><rect x="1.0107%" y="277" width="48.7194%" height="15" fill="rgb(250,79,13)"/><text x="1.2607%" y="287.50">analysis</text></g><g><title>type_check_crate (15,390,252 samples, 29.33%)</title><rect x="20.3984%" y="261" width="29.3317%" height="15" fill="rgb(211,146,34)"/><text x="20.6484%" y="271.50">type_check_crate</text></g><g><title>wf_checking (899,800 samples, 1.71%)</title><rect x="48.0152%" y="245" width="1.7149%" height="15" fill="rgb(228,22,38)"/><text x="48.2652%" y="255.50"></text></g><g><title>check_item_well_formed (866,750 samples, 1.65%)</title><rect x="48.0782%" y="229" width="1.6519%" height="15" fill="rgb(235,168,5)"/><text x="48.3282%" y="239.50"></text></g><g><title>codegen_crate (425,265 samples, 0.81%)</title><rect x="49.7500%" y="277" width="0.8105%" height="15" fill="rgb(221,155,16)"/><text x="50.0000%" y="287.50"></text></g><g><title>AST_validation (65,041 samples, 0.12%)</title><rect x="50.9310%" y="261" width="0.1240%" height="15" fill="rgb(215,215,53)"/><text x="51.1810%" y="271.50"></text></g><g><title>crate_injection (66,681 samples, 0.13%)</title><rect x="51.1015%" y="261" width="0.1271%" height="15" fill="rgb(223,4,10)"/><text x="51.3515%" y="271.50"></text></g><g><title>metadata_load_macro (383,517 samples, 0.73%)</title><rect x="79.5053%" y="229" width="0.7309%" height="15" fill="rgb(234,103,6)"/><text x="79.7553%" y="239.50"></text></g><g><title>macro_expand_crate (18,108,572 samples, 34.51%)</title><rect x="51.2286%" y="261" width="34.5125%" height="15" fill="rgb(227,97,0)"/><text x="51.4786%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (18,092,332 samples, 34.48%)</title><rect x="51.2595%" y="245" width="34.4815%" height="15" fill="rgb(234,150,53)"/><text x="51.5095%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,888,351 samples, 5.50%)</title><rect x="80.2362%" y="229" width="5.5048%" height="15" fill="rgb(228,201,54)"/><text x="80.4862%" y="239.50">metadat..</text></g><g><title>metadata_register_crate (1,085,351 samples, 2.07%)</title><rect x="83.6725%" y="213" width="2.0685%" height="15" fill="rgb(222,22,37)"/><text x="83.9225%" y="223.50">m..</text></g><g><title>metadata_register_crate (94,102 samples, 0.18%)</title><rect x="85.5617%" y="197" width="0.1793%" height="15" fill="rgb(237,53,32)"/><text x="85.8117%" y="207.50"></text></g><g><title>maybe_create_a_macro_crate (212,022 samples, 0.40%)</title><rect x="85.7429%" y="261" width="0.4041%" height="15" fill="rgb(233,25,53)"/><text x="85.9929%" y="271.50"></text></g><g><title>pre_AST_expansion_lint_checks (122,792 samples, 0.23%)</title><rect x="86.1470%" y="261" width="0.2340%" height="15" fill="rgb(210,40,34)"/><text x="86.3970%" y="271.50"></text></g><g><title>finalize_imports (189,492 samples, 0.36%)</title><rect x="86.3893%" y="245" width="0.3611%" height="15" fill="rgb(241,220,44)"/><text x="86.6393%" y="255.50"></text></g><g><title>late_resolve_crate (905,960 samples, 1.73%)</title><rect x="86.8302%" y="245" width="1.7266%" height="15" fill="rgb(235,28,35)"/><text x="87.0802%" y="255.50"></text></g><g><title>configure_and_expand (19,981,183 samples, 38.08%)</title><rect x="50.5605%" y="277" width="38.0814%" height="15" fill="rgb(210,56,17)"/><text x="50.8105%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (1,186,293 samples, 2.26%)</title><rect x="86.3810%" y="261" width="2.2609%" height="15" fill="rgb(224,130,29)"/><text x="86.6310%" y="271.50">r..</text></g><g><title>early_lint_checks (137,542 samples, 0.26%)</title><rect x="88.7734%" y="277" width="0.2621%" height="15" fill="rgb(235,212,8)"/><text x="89.0234%" y="287.50"></text></g><g><title>free_global_ctxt (2,343,336 samples, 4.47%)</title><rect x="89.0356%" y="277" width="4.4661%" height="15" fill="rgb(223,33,50)"/><text x="89.2856%" y="287.50">free_..</text></g><g><title>crate_hash (78,291 samples, 0.15%)</title><rect x="93.7100%" y="261" width="0.1492%" height="15" fill="rgb(219,149,13)"/><text x="93.9600%" y="271.50"></text></g><g><title>generate_crate_metadata (191,622 samples, 0.37%)</title><rect x="93.5016%" y="277" width="0.3652%" height="15" fill="rgb(250,156,29)"/><text x="93.7516%" y="287.50"></text></g><g><title>hir_lowering (731,318 samples, 1.39%)</title><rect x="93.8668%" y="277" width="1.3938%" height="15" fill="rgb(216,193,19)"/><text x="94.1168%" y="287.50"></text></g><g><title>parse_crate (1,443,846 samples, 2.75%)</title><rect x="95.3494%" y="277" width="2.7518%" height="15" fill="rgb(216,135,14)"/><text x="95.5994%" y="287.50">pa..</text></g><g><title>prepare_outputs (171,062 samples, 0.33%)</title><rect x="98.1159%" y="277" width="0.3260%" height="15" fill="rgb(241,47,5)"/><text x="98.3659%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (443,455 samples, 0.85%)</title><rect x="98.4419%" y="277" width="0.8452%" height="15" fill="rgb(233,42,35)"/><text x="98.6919%" y="287.50"></text></g><g><title>setup_global_ctxt (80,781 samples, 0.15%)</title><rect x="99.3072%" y="277" width="0.1540%" height="15" fill="rgb(231,13,6)"/><text x="99.5572%" y="287.50"></text></g><g><title>all (52,469,667 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(207,181,40)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (52,469,667 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(254,173,49)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (282,743 samples, 0.54%)</title><rect x="99.4611%" y="277" width="0.5389%" height="15" fill="rgb(221,1,38)"/><text x="99.7111%" y="287.50"></text></g></svg></svg>