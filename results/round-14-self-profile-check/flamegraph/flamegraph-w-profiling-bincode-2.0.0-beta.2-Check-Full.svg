<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,507,707 samples, 0.25%)</title><rect x="15.6403%" y="101" width="0.2535%" height="15" fill="rgb(227,0,7)"/><text x="15.8903%" y="111.50"></text></g><g><title>item_attrs (1,450,015 samples, 0.24%)</title><rect x="16.4864%" y="69" width="0.2438%" height="15" fill="rgb(217,0,24)"/><text x="16.7364%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,398,113 samples, 0.24%)</title><rect x="16.4952%" y="53" width="0.2350%" height="15" fill="rgb(221,193,54)"/><text x="16.7452%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,070,330 samples, 0.35%)</title><rect x="16.3979%" y="85" width="0.3480%" height="15" fill="rgb(248,212,6)"/><text x="16.6479%" y="95.50"></text></g><g><title>is_copy_raw (1,148,425 samples, 0.19%)</title><rect x="20.0672%" y="69" width="0.1931%" height="15" fill="rgb(208,68,35)"/><text x="20.3172%" y="79.50"></text></g><g><title>evaluate_obligation (843,690 samples, 0.14%)</title><rect x="20.1185%" y="53" width="0.1418%" height="15" fill="rgb(232,128,0)"/><text x="20.3685%" y="63.50"></text></g><g><title>adt_drop_tys (979,289 samples, 0.16%)</title><rect x="20.4539%" y="53" width="0.1646%" height="15" fill="rgb(207,160,47)"/><text x="20.7039%" y="63.50"></text></g><g><title>needs_drop_raw (10,227,364 samples, 1.72%)</title><rect x="20.2603%" y="69" width="1.7193%" height="15" fill="rgb(228,23,34)"/><text x="20.5103%" y="79.50"></text></g><g><title>is_copy_raw (8,096,529 samples, 1.36%)</title><rect x="20.6185%" y="53" width="1.3611%" height="15" fill="rgb(218,30,26)"/><text x="20.8685%" y="63.50"></text></g><g><title>evaluate_obligation (6,901,935 samples, 1.16%)</title><rect x="20.8193%" y="37" width="1.1603%" height="15" fill="rgb(220,122,19)"/><text x="21.0693%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (2,062,276 samples, 0.35%)</title><rect x="22.1943%" y="53" width="0.3467%" height="15" fill="rgb(250,228,42)"/><text x="22.4443%" y="63.50"></text></g><g><title>resolve_instance (4,137,918 samples, 0.70%)</title><rect x="21.9799%" y="69" width="0.6956%" height="15" fill="rgb(240,193,28)"/><text x="22.2299%" y="79.50"></text></g><g><title>thir_body (7,357,146 samples, 1.24%)</title><rect x="22.6967%" y="69" width="1.2368%" height="15" fill="rgb(216,20,37)"/><text x="22.9467%" y="79.50"></text></g><g><title>mir_const (54,903,625 samples, 9.23%)</title><rect x="14.7202%" y="117" width="9.2299%" height="15" fill="rgb(206,188,39)"/><text x="14.9702%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (47,922,445 samples, 8.06%)</title><rect x="15.8938%" y="101" width="8.0563%" height="15" fill="rgb(217,207,13)"/><text x="16.1438%" y="111.50">unsafety_ch..</text></g><g><title>mir_built (42,853,613 samples, 7.20%)</title><rect x="16.7459%" y="85" width="7.2042%" height="15" fill="rgb(231,73,38)"/><text x="16.9959%" y="95.50">mir_built</text></g><g><title>mir_const (1,816,701 samples, 0.31%)</title><rect x="24.1428%" y="101" width="0.3054%" height="15" fill="rgb(225,20,46)"/><text x="24.3928%" y="111.50"></text></g><g><title>unsafety_check_result (1,363,009 samples, 0.23%)</title><rect x="24.2191%" y="85" width="0.2291%" height="15" fill="rgb(210,31,41)"/><text x="24.4691%" y="95.50"></text></g><g><title>mir_built (1,203,226 samples, 0.20%)</title><rect x="24.2459%" y="69" width="0.2023%" height="15" fill="rgb(221,200,47)"/><text x="24.4959%" y="79.50"></text></g><g><title>mir_const_qualif (3,360,706 samples, 0.56%)</title><rect x="23.9501%" y="117" width="0.5650%" height="15" fill="rgb(226,26,5)"/><text x="24.2001%" y="127.50"></text></g><g><title>mir_promoted (63,995,955 samples, 10.76%)</title><rect x="13.7569%" y="133" width="10.7584%" height="15" fill="rgb(249,33,26)"/><text x="14.0069%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (4,216,098 samples, 0.71%)</title><rect x="24.5176%" y="133" width="0.7088%" height="15" fill="rgb(235,183,28)"/><text x="24.7676%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,352,468 samples, 0.73%)</title><rect x="25.2264%" y="133" width="0.7317%" height="15" fill="rgb(221,5,38)"/><text x="25.4764%" y="143.50"></text></g><g><title>normalize_projection_ty (2,744,847 samples, 0.46%)</title><rect x="25.4967%" y="117" width="0.4614%" height="15" fill="rgb(247,18,42)"/><text x="25.7467%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,576,278 samples, 0.43%)</title><rect x="25.9581%" y="133" width="0.4331%" height="15" fill="rgb(241,131,45)"/><text x="26.2081%" y="143.50"></text></g><g><title>normalize_projection_ty (1,886,790 samples, 0.32%)</title><rect x="26.0740%" y="117" width="0.3172%" height="15" fill="rgb(249,31,29)"/><text x="26.3240%" y="127.50"></text></g><g><title>type_op_prove_predicate (13,343,469 samples, 2.24%)</title><rect x="26.4773%" y="133" width="2.2432%" height="15" fill="rgb(225,111,53)"/><text x="26.7273%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (168,356,170 samples, 28.30%)</title><rect x="0.4209%" y="165" width="28.3026%" height="15" fill="rgb(238,160,17)"/><text x="0.6709%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (167,575,964 samples, 28.17%)</title><rect x="0.5521%" y="149" width="28.1714%" height="15" fill="rgb(214,148,48)"/><text x="0.8021%" y="159.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (941,471 samples, 0.16%)</title><rect x="28.7799%" y="149" width="0.1583%" height="15" fill="rgb(232,36,49)"/><text x="29.0299%" y="159.50"></text></g><g><title>MIR_effect_checking (1,279,754 samples, 0.22%)</title><rect x="28.7235%" y="165" width="0.2151%" height="15" fill="rgb(209,103,24)"/><text x="28.9735%" y="175.50"></text></g><g><title>hir_module_items (1,117,605 samples, 0.19%)</title><rect x="28.9386%" y="165" width="0.1879%" height="15" fill="rgb(229,88,8)"/><text x="29.1886%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,006,552 samples, 0.17%)</title><rect x="29.3672%" y="133" width="0.1692%" height="15" fill="rgb(213,181,19)"/><text x="29.6172%" y="143.50"></text></g><g><title>check_mod_attrs (2,369,935 samples, 0.40%)</title><rect x="29.1381%" y="149" width="0.3984%" height="15" fill="rgb(254,191,54)"/><text x="29.3881%" y="159.50"></text></g><g><title>check_mod_const_bodies (598,108 samples, 0.10%)</title><rect x="29.5365%" y="149" width="0.1005%" height="15" fill="rgb(241,83,37)"/><text x="29.7865%" y="159.50"></text></g><g><title>lint_levels (1,344,075 samples, 0.23%)</title><rect x="29.8310%" y="133" width="0.2260%" height="15" fill="rgb(233,36,39)"/><text x="30.0810%" y="143.50"></text></g><g><title>lookup_deprecation_entry (613,237 samples, 0.10%)</title><rect x="30.0569%" y="133" width="0.1031%" height="15" fill="rgb(226,3,54)"/><text x="30.3069%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,959,872 samples, 0.50%)</title><rect x="29.7028%" y="149" width="0.4976%" height="15" fill="rgb(245,192,40)"/><text x="29.9528%" y="159.50"></text></g><g><title>misc_checking_1 (6,615,192 samples, 1.11%)</title><rect x="29.1266%" y="165" width="1.1121%" height="15" fill="rgb(238,167,29)"/><text x="29.3766%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,173,965 samples, 0.53%)</title><rect x="30.2391%" y="149" width="0.5336%" height="15" fill="rgb(232,182,51)"/><text x="30.4891%" y="159.50"></text></g><g><title>check_mod_liveness (2,645,679 samples, 0.44%)</title><rect x="30.3279%" y="133" width="0.4448%" height="15" fill="rgb(231,60,39)"/><text x="30.5779%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,098,071 samples, 0.18%)</title><rect x="31.4552%" y="117" width="0.1846%" height="15" fill="rgb(208,69,12)"/><text x="31.7052%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,092,471 samples, 0.18%)</title><rect x="31.4561%" y="101" width="0.1837%" height="15" fill="rgb(235,93,37)"/><text x="31.7061%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,081,061 samples, 0.18%)</title><rect x="31.4581%" y="85" width="0.1817%" height="15" fill="rgb(213,116,39)"/><text x="31.7081%" y="95.50"></text></g><g><title>mir_for_ctfe (724,698 samples, 0.12%)</title><rect x="31.5180%" y="69" width="0.1218%" height="15" fill="rgb(222,207,29)"/><text x="31.7680%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (669,448 samples, 0.11%)</title><rect x="31.5273%" y="53" width="0.1125%" height="15" fill="rgb(206,96,30)"/><text x="31.7773%" y="63.50"></text></g><g><title>misc_checking_2 (8,770,208 samples, 1.47%)</title><rect x="30.2387%" y="165" width="1.4744%" height="15" fill="rgb(218,138,4)"/><text x="30.4887%" y="175.50"></text></g><g><title>match_checking (5,593,643 samples, 0.94%)</title><rect x="30.7727%" y="149" width="0.9404%" height="15" fill="rgb(250,191,14)"/><text x="31.0227%" y="159.50"></text></g><g><title>check_match (5,404,162 samples, 0.91%)</title><rect x="30.8046%" y="133" width="0.9085%" height="15" fill="rgb(239,60,40)"/><text x="31.0546%" y="143.50"></text></g><g><title>check_private_in_public (1,172,333 samples, 0.20%)</title><rect x="31.7152%" y="149" width="0.1971%" height="15" fill="rgb(206,27,48)"/><text x="31.9652%" y="159.50"></text></g><g><title>death_checking (2,353,707 samples, 0.40%)</title><rect x="31.9123%" y="149" width="0.3957%" height="15" fill="rgb(225,35,8)"/><text x="32.1623%" y="159.50"></text></g><g><title>param_env (1,689,734 samples, 0.28%)</title><rect x="32.8045%" y="117" width="0.2841%" height="15" fill="rgb(250,213,24)"/><text x="33.0545%" y="127.50"></text></g><g><title>predicates_of (851,496 samples, 0.14%)</title><rect x="32.9454%" y="101" width="0.1431%" height="15" fill="rgb(247,123,22)"/><text x="33.1954%" y="111.50"></text></g><g><title>predicates_defined_on (677,676 samples, 0.11%)</title><rect x="32.9747%" y="85" width="0.1139%" height="15" fill="rgb(231,138,38)"/><text x="33.2247%" y="95.50"></text></g><g><title>crate_lints (5,876,695 samples, 0.99%)</title><rect x="32.3084%" y="133" width="0.9879%" height="15" fill="rgb(231,145,46)"/><text x="32.5584%" y="143.50"></text></g><g><title>type_of (1,188,175 samples, 0.20%)</title><rect x="33.0966%" y="117" width="0.1997%" height="15" fill="rgb(251,118,11)"/><text x="33.3466%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (952,172 samples, 0.16%)</title><rect x="33.1362%" y="101" width="0.1601%" height="15" fill="rgb(217,147,25)"/><text x="33.3862%" y="111.50"></text></g><g><title>lint_checking (9,385,954 samples, 1.58%)</title><rect x="32.3079%" y="149" width="1.5779%" height="15" fill="rgb(247,81,37)"/><text x="32.5579%" y="159.50"></text></g><g><title>module_lints (3,506,699 samples, 0.59%)</title><rect x="33.2963%" y="133" width="0.5895%" height="15" fill="rgb(209,12,38)"/><text x="33.5463%" y="143.50"></text></g><g><title>lint_mod (3,482,899 samples, 0.59%)</title><rect x="33.3003%" y="117" width="0.5855%" height="15" fill="rgb(227,1,9)"/><text x="33.5503%" y="127.50"></text></g><g><title>privacy_access_levels (2,242,895 samples, 0.38%)</title><rect x="33.8858%" y="149" width="0.3771%" height="15" fill="rgb(248,47,43)"/><text x="34.1358%" y="159.50"></text></g><g><title>privacy_checking_modules (5,691,543 samples, 0.96%)</title><rect x="34.2629%" y="149" width="0.9568%" height="15" fill="rgb(221,10,30)"/><text x="34.5129%" y="159.50"></text></g><g><title>check_mod_privacy (5,672,573 samples, 0.95%)</title><rect x="34.2661%" y="133" width="0.9536%" height="15" fill="rgb(210,229,1)"/><text x="34.5161%" y="143.50"></text></g><g><title>misc_checking_3 (20,917,102 samples, 3.52%)</title><rect x="31.7131%" y="165" width="3.5164%" height="15" fill="rgb(222,148,37)"/><text x="31.9631%" y="175.50">mis..</text></g><g><title>impl_parent (2,349,633 samples, 0.39%)</title><rect x="36.1345%" y="101" width="0.3950%" height="15" fill="rgb(234,67,33)"/><text x="36.3845%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,363,631 samples, 0.23%)</title><rect x="36.3003%" y="85" width="0.2292%" height="15" fill="rgb(247,98,35)"/><text x="36.5503%" y="95.50"></text></g><g><title>impl_trait_ref (4,899,744 samples, 0.82%)</title><rect x="36.5296%" y="101" width="0.8237%" height="15" fill="rgb(247,138,52)"/><text x="36.7796%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,740,498 samples, 0.63%)</title><rect x="36.7245%" y="85" width="0.6288%" height="15" fill="rgb(213,79,30)"/><text x="36.9745%" y="95.50"></text></g><g><title>coherent_trait (13,006,594 samples, 2.19%)</title><rect x="35.3024%" y="133" width="2.1866%" height="15" fill="rgb(246,177,23)"/><text x="35.5524%" y="143.50">c..</text></g><g><title>specialization_graph_of (12,432,117 samples, 2.09%)</title><rect x="35.3990%" y="117" width="2.0900%" height="15" fill="rgb(230,62,27)"/><text x="35.6490%" y="127.50">s..</text></g><g><title>trait_impls_of (785,946 samples, 0.13%)</title><rect x="37.3569%" y="101" width="0.1321%" height="15" fill="rgb(216,154,8)"/><text x="37.6069%" y="111.50"></text></g><g><title>coherence_checking (13,265,426 samples, 2.23%)</title><rect x="35.2977%" y="149" width="2.2301%" height="15" fill="rgb(244,35,45)"/><text x="35.5477%" y="159.50">c..</text></g><g><title>associated_item (2,541,604 samples, 0.43%)</title><rect x="64.4988%" y="85" width="0.4273%" height="15" fill="rgb(251,115,12)"/><text x="64.7488%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (2,017,486 samples, 0.34%)</title><rect x="64.5869%" y="69" width="0.3392%" height="15" fill="rgb(240,54,50)"/><text x="64.8369%" y="79.50"></text></g><g><title>associated_items (3,622,075 samples, 0.61%)</title><rect x="64.3415%" y="101" width="0.6089%" height="15" fill="rgb(233,84,52)"/><text x="64.5915%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,073,658 samples, 0.18%)</title><rect x="65.3209%" y="85" width="0.1805%" height="15" fill="rgb(207,117,47)"/><text x="65.5709%" y="95.50"></text></g><g><title>dropck_outlives (2,972,711 samples, 0.50%)</title><rect x="65.0028%" y="101" width="0.4997%" height="15" fill="rgb(249,43,39)"/><text x="65.2528%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,335,843 samples, 0.22%)</title><rect x="65.5029%" y="101" width="0.2246%" height="15" fill="rgb(209,38,44)"/><text x="65.7529%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,280,822 samples, 0.22%)</title><rect x="65.5122%" y="85" width="0.2153%" height="15" fill="rgb(236,212,23)"/><text x="65.7622%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,207,112 samples, 0.20%)</title><rect x="65.5246%" y="69" width="0.2029%" height="15" fill="rgb(242,79,21)"/><text x="65.7746%" y="79.50"></text></g><g><title>predicates_of (616,930 samples, 0.10%)</title><rect x="67.5846%" y="85" width="0.1037%" height="15" fill="rgb(211,96,35)"/><text x="67.8346%" y="95.50"></text></g><g><title>specializes (873,060 samples, 0.15%)</title><rect x="67.6883%" y="85" width="0.1468%" height="15" fill="rgb(253,215,40)"/><text x="67.9383%" y="95.50"></text></g><g><title>trait_impls_of (699,196 samples, 0.12%)</title><rect x="67.8390%" y="85" width="0.1175%" height="15" fill="rgb(211,81,21)"/><text x="68.0890%" y="95.50"></text></g><g><title>evaluate_obligation (13,268,786 samples, 2.23%)</title><rect x="65.7275%" y="101" width="2.2306%" height="15" fill="rgb(208,190,38)"/><text x="65.9775%" y="111.50">e..</text></g><g><title>item_attrs (1,013,582 samples, 0.17%)</title><rect x="68.2465%" y="101" width="0.1704%" height="15" fill="rgb(235,213,38)"/><text x="68.4965%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (974,531 samples, 0.16%)</title><rect x="68.2530%" y="85" width="0.1638%" height="15" fill="rgb(237,122,38)"/><text x="68.5030%" y="95.50"></text></g><g><title>evaluate_obligation (1,239,599 samples, 0.21%)</title><rect x="68.6939%" y="85" width="0.2084%" height="15" fill="rgb(244,218,35)"/><text x="68.9439%" y="95.50"></text></g><g><title>method_autoderef_steps (2,567,263 samples, 0.43%)</title><rect x="68.4776%" y="101" width="0.4316%" height="15" fill="rgb(240,68,47)"/><text x="68.7276%" y="111.50"></text></g><g><title>opt_const_param_of (1,392,026 samples, 0.23%)</title><rect x="68.9359%" y="101" width="0.2340%" height="15" fill="rgb(210,16,53)"/><text x="69.1859%" y="111.50"></text></g><g><title>typeck (1,306,195 samples, 0.22%)</title><rect x="68.9503%" y="85" width="0.2196%" height="15" fill="rgb(235,124,12)"/><text x="69.2003%" y="95.50"></text></g><g><title>param_env (669,930 samples, 0.11%)</title><rect x="69.1904%" y="101" width="0.1126%" height="15" fill="rgb(224,169,11)"/><text x="69.4404%" y="111.50"></text></g><g><title>predicates_of (1,374,101 samples, 0.23%)</title><rect x="69.3236%" y="101" width="0.2310%" height="15" fill="rgb(250,166,2)"/><text x="69.5736%" y="111.50"></text></g><g><title>predicates_defined_on (939,506 samples, 0.16%)</title><rect x="69.3967%" y="85" width="0.1579%" height="15" fill="rgb(242,216,29)"/><text x="69.6467%" y="95.50"></text></g><g><title>evaluate_obligation (1,499,616 samples, 0.25%)</title><rect x="71.6453%" y="85" width="0.2521%" height="15" fill="rgb(230,116,27)"/><text x="71.8953%" y="95.50"></text></g><g><title>typeck (14,760,743 samples, 2.48%)</title><rect x="69.6624%" y="101" width="2.4814%" height="15" fill="rgb(228,99,48)"/><text x="69.9124%" y="111.50">ty..</text></g><g><title>item_bodies_checking (206,281,930 samples, 34.68%)</title><rect x="37.5577%" y="149" width="34.6783%" height="15" fill="rgb(253,11,6)"/><text x="37.8077%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (206,277,979 samples, 34.68%)</title><rect x="37.5583%" y="133" width="34.6777%" height="15" fill="rgb(247,143,39)"/><text x="37.8083%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (205,733,804 samples, 34.59%)</title><rect x="37.6498%" y="117" width="34.5862%" height="15" fill="rgb(236,97,10)"/><text x="37.8998%" y="127.50">typeck</text></g><g><title>item_types_checking (7,645,584 samples, 1.29%)</title><rect x="72.2360%" y="149" width="1.2853%" height="15" fill="rgb(233,208,19)"/><text x="72.4860%" y="159.50"></text></g><g><title>check_mod_item_types (7,623,594 samples, 1.28%)</title><rect x="72.2397%" y="133" width="1.2816%" height="15" fill="rgb(216,164,2)"/><text x="72.4897%" y="143.50"></text></g><g><title>fn_sig (1,226,059 samples, 0.21%)</title><rect x="73.7687%" y="117" width="0.2061%" height="15" fill="rgb(220,129,5)"/><text x="74.0187%" y="127.50"></text></g><g><title>named_region_map (1,457,666 samples, 0.25%)</title><rect x="74.1968%" y="101" width="0.2451%" height="15" fill="rgb(242,17,10)"/><text x="74.4468%" y="111.50"></text></g><g><title>resolve_lifetimes (1,320,312 samples, 0.22%)</title><rect x="74.2199%" y="85" width="0.2220%" height="15" fill="rgb(242,107,0)"/><text x="74.4699%" y="95.50"></text></g><g><title>generics_of (2,839,090 samples, 0.48%)</title><rect x="73.9749%" y="117" width="0.4773%" height="15" fill="rgb(251,28,31)"/><text x="74.2249%" y="127.50"></text></g><g><title>late_bound_vars_map (789,249 samples, 0.13%)</title><rect x="74.8482%" y="69" width="0.1327%" height="15" fill="rgb(233,223,10)"/><text x="75.0982%" y="79.50"></text></g><g><title>resolve_lifetimes (696,588 samples, 0.12%)</title><rect x="74.8638%" y="53" width="0.1171%" height="15" fill="rgb(215,21,27)"/><text x="75.1138%" y="63.50"></text></g><g><title>explicit_predicates_of (2,129,079 samples, 0.36%)</title><rect x="74.6345%" y="85" width="0.3579%" height="15" fill="rgb(232,23,21)"/><text x="74.8845%" y="95.50"></text></g><g><title>predicates_of (3,431,912 samples, 0.58%)</title><rect x="74.5091%" y="117" width="0.5769%" height="15" fill="rgb(244,5,23)"/><text x="74.7591%" y="127.50"></text></g><g><title>predicates_defined_on (3,146,289 samples, 0.53%)</title><rect x="74.5571%" y="101" width="0.5289%" height="15" fill="rgb(226,81,46)"/><text x="74.8071%" y="111.50"></text></g><g><title>type_collecting (10,165,263 samples, 1.71%)</title><rect x="73.5240%" y="149" width="1.7089%" height="15" fill="rgb(247,70,30)"/><text x="73.7740%" y="159.50"></text></g><g><title>collect_mod_item_types (10,135,852 samples, 1.70%)</title><rect x="73.5289%" y="133" width="1.7040%" height="15" fill="rgb(212,68,19)"/><text x="73.7789%" y="143.50"></text></g><g><title>type_of (784,429 samples, 0.13%)</title><rect x="75.1010%" y="117" width="0.1319%" height="15" fill="rgb(240,187,13)"/><text x="75.3510%" y="127.50"></text></g><g><title>adt_sized_constraint (615,447 samples, 0.10%)</title><rect x="78.1279%" y="101" width="0.1035%" height="15" fill="rgb(223,113,26)"/><text x="78.3779%" y="111.50"></text></g><g><title>evaluate_obligation (3,376,010 samples, 0.57%)</title><rect x="77.6730%" y="117" width="0.5675%" height="15" fill="rgb(206,192,2)"/><text x="77.9230%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,965,785 samples, 0.33%)</title><rect x="78.2445%" y="117" width="0.3305%" height="15" fill="rgb(241,108,4)"/><text x="78.4945%" y="127.50"></text></g><g><title>param_env (1,999,094 samples, 0.34%)</title><rect x="78.5749%" y="117" width="0.3361%" height="15" fill="rgb(247,173,49)"/><text x="78.8249%" y="127.50"></text></g><g><title>check_impl_item_well_formed (22,628,686 samples, 3.80%)</title><rect x="75.4643%" y="133" width="3.8041%" height="15" fill="rgb(224,114,35)"/><text x="75.7143%" y="143.50">chec..</text></g><g><title>region_scope_tree (2,106,332 samples, 0.35%)</title><rect x="78.9144%" y="117" width="0.3541%" height="15" fill="rgb(245,159,27)"/><text x="79.1644%" y="127.50"></text></g><g><title>adt_sized_constraint (749,118 samples, 0.13%)</title><rect x="81.4971%" y="117" width="0.1259%" height="15" fill="rgb(245,172,44)"/><text x="81.7471%" y="127.50"></text></g><g><title>adt_sized_constraint (791,990 samples, 0.13%)</title><rect x="82.0180%" y="101" width="0.1331%" height="15" fill="rgb(236,23,11)"/><text x="82.2680%" y="111.50"></text></g><g><title>evaluate_obligation (3,146,753 samples, 0.53%)</title><rect x="81.6232%" y="117" width="0.5290%" height="15" fill="rgb(205,117,38)"/><text x="81.8732%" y="127.50"></text></g><g><title>implied_outlives_bounds (820,489 samples, 0.14%)</title><rect x="82.1714%" y="117" width="0.1379%" height="15" fill="rgb(237,72,25)"/><text x="82.4214%" y="127.50"></text></g><g><title>param_env (2,086,933 samples, 0.35%)</title><rect x="82.3122%" y="117" width="0.3508%" height="15" fill="rgb(244,70,9)"/><text x="82.5622%" y="127.50"></text></g><g><title>region_scope_tree (716,112 samples, 0.12%)</title><rect x="82.7079%" y="117" width="0.1204%" height="15" fill="rgb(217,125,39)"/><text x="82.9579%" y="127.50"></text></g><g><title>check_item_well_formed (21,778,026 samples, 3.66%)</title><rect x="79.2685%" y="133" width="3.6611%" height="15" fill="rgb(235,36,10)"/><text x="79.5185%" y="143.50">chec..</text></g><g><title>analysis (494,083,401 samples, 83.06%)</title><rect x="0.1817%" y="181" width="83.0610%" height="15" fill="rgb(251,123,47)"/><text x="0.4317%" y="191.50">analysis</text></g><g><title>type_check_crate (285,604,176 samples, 48.01%)</title><rect x="35.2295%" y="165" width="48.0133%" height="15" fill="rgb(221,13,13)"/><text x="35.4795%" y="175.50">type_check_crate</text></g><g><title>wf_checking (47,611,507 samples, 8.00%)</title><rect x="75.2387%" y="149" width="8.0040%" height="15" fill="rgb(238,131,9)"/><text x="75.4887%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,862,749 samples, 0.31%)</title><rect x="82.9296%" y="133" width="0.3131%" height="15" fill="rgb(211,50,8)"/><text x="83.1796%" y="143.50"></text></g><g><title>metadata_register_crate (1,814,930 samples, 0.31%)</title><rect x="91.3984%" y="133" width="0.3051%" height="15" fill="rgb(245,182,24)"/><text x="91.6484%" y="143.50"></text></g><g><title>macro_expand_crate (50,325,456 samples, 8.46%)</title><rect x="83.5178%" y="165" width="8.4603%" height="15" fill="rgb(242,14,37)"/><text x="83.7678%" y="175.50">macro_expand..</text></g><g><title>expand_crate (50,311,966 samples, 8.46%)</title><rect x="83.5201%" y="149" width="8.4580%" height="15" fill="rgb(246,228,12)"/><text x="83.7701%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,633,248 samples, 0.27%)</title><rect x="91.7035%" y="133" width="0.2746%" height="15" fill="rgb(213,55,15)"/><text x="91.9535%" y="143.50"></text></g><g><title>late_resolve_crate (7,566,044 samples, 1.27%)</title><rect x="92.0764%" y="149" width="1.2719%" height="15" fill="rgb(209,9,3)"/><text x="92.3264%" y="159.50"></text></g><g><title>configure_and_expand (60,099,465 samples, 10.10%)</title><rect x="83.3387%" y="181" width="10.1034%" height="15" fill="rgb(230,59,30)"/><text x="83.5887%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (8,599,945 samples, 1.45%)</title><rect x="91.9963%" y="165" width="1.4457%" height="15" fill="rgb(209,121,21)"/><text x="92.2463%" y="175.50"></text></g><g><title>drop_ast (892,400 samples, 0.15%)</title><rect x="93.4421%" y="181" width="0.1500%" height="15" fill="rgb(220,109,13)"/><text x="93.6921%" y="191.50"></text></g><g><title>early_lint_checks (1,838,650 samples, 0.31%)</title><rect x="93.5954%" y="181" width="0.3091%" height="15" fill="rgb(232,18,1)"/><text x="93.8454%" y="191.50"></text></g><g><title>free_global_ctxt (7,292,931 samples, 1.23%)</title><rect x="93.9045%" y="181" width="1.2260%" height="15" fill="rgb(215,41,42)"/><text x="94.1545%" y="191.50"></text></g><g><title>generate_crate_metadata (7,142,469 samples, 1.20%)</title><rect x="95.1306%" y="181" width="1.2007%" height="15" fill="rgb(224,123,36)"/><text x="95.3806%" y="191.50"></text></g><g><title>hir_lowering (17,538,563 samples, 2.95%)</title><rect x="96.3313%" y="181" width="2.9484%" height="15" fill="rgb(240,125,3)"/><text x="96.5813%" y="191.50">hi..</text></g><g><title>parse_crate (1,133,583 samples, 0.19%)</title><rect x="99.2964%" y="181" width="0.1906%" height="15" fill="rgb(205,98,50)"/><text x="99.5464%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,094,173 samples, 0.35%)</title><rect x="99.5275%" y="181" width="0.3521%" height="15" fill="rgb(205,185,37)"/><text x="99.7775%" y="191.50"></text></g><g><title>all (594,844,075 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (594,844,075 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (620,557 samples, 0.10%)</title><rect x="99.8957%" y="181" width="0.1043%" height="15" fill="rgb(235,201,11)"/><text x="100.1457%" y="191.50"></text></g></svg></svg>