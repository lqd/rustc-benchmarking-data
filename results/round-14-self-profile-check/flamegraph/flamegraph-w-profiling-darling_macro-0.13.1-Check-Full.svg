<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (67,711 samples, 0.14%)</title><rect x="6.3015%" y="181" width="0.1385%" height="15" fill="rgb(227,0,7)"/><text x="6.5515%" y="191.50"></text></g><g><title>adt_drop_tys (53,930 samples, 0.11%)</title><rect x="7.5938%" y="117" width="0.1103%" height="15" fill="rgb(217,0,24)"/><text x="7.8438%" y="127.50"></text></g><g><title>adt_drop_tys (132,420 samples, 0.27%)</title><rect x="7.5721%" y="133" width="0.2709%" height="15" fill="rgb(221,193,54)"/><text x="7.8221%" y="143.50"></text></g><g><title>param_env (53,210 samples, 0.11%)</title><rect x="7.7342%" y="117" width="0.1089%" height="15" fill="rgb(248,212,6)"/><text x="7.9842%" y="127.50"></text></g><g><title>needs_drop_raw (377,404 samples, 0.77%)</title><rect x="7.5469%" y="149" width="0.7722%" height="15" fill="rgb(208,68,35)"/><text x="7.7969%" y="159.50"></text></g><g><title>is_copy_raw (232,684 samples, 0.48%)</title><rect x="7.8430%" y="133" width="0.4761%" height="15" fill="rgb(232,128,0)"/><text x="8.0930%" y="143.50"></text></g><g><title>evaluate_obligation (220,653 samples, 0.45%)</title><rect x="7.8677%" y="117" width="0.4515%" height="15" fill="rgb(207,160,47)"/><text x="8.1177%" y="127.50"></text></g><g><title>trait_impls_of (161,702 samples, 0.33%)</title><rect x="7.9883%" y="101" width="0.3309%" height="15" fill="rgb(228,23,34)"/><text x="8.2383%" y="111.50"></text></g><g><title>resolve_instance (111,381 samples, 0.23%)</title><rect x="8.3191%" y="149" width="0.2279%" height="15" fill="rgb(218,30,26)"/><text x="8.5691%" y="159.50"></text></g><g><title>thir_body (144,321 samples, 0.30%)</title><rect x="8.5555%" y="149" width="0.2953%" height="15" fill="rgb(220,122,19)"/><text x="8.8055%" y="159.50"></text></g><g><title>mir_const (1,436,126 samples, 2.94%)</title><rect x="5.9174%" y="197" width="2.9385%" height="15" fill="rgb(250,228,42)"/><text x="6.1674%" y="207.50">mi..</text></g><g><title>unsafety_check_result (1,180,703 samples, 2.42%)</title><rect x="6.4401%" y="181" width="2.4158%" height="15" fill="rgb(240,193,28)"/><text x="6.6901%" y="191.50">un..</text></g><g><title>mir_built (1,050,390 samples, 2.15%)</title><rect x="6.7067%" y="165" width="2.1492%" height="15" fill="rgb(216,20,37)"/><text x="6.9567%" y="175.50">m..</text></g><g><title>has_structural_eq_impls (160,812 samples, 0.33%)</title><rect x="9.0215%" y="181" width="0.3290%" height="15" fill="rgb(206,188,39)"/><text x="9.2715%" y="191.50"></text></g><g><title>evaluate_obligation (151,082 samples, 0.31%)</title><rect x="9.0414%" y="165" width="0.3091%" height="15" fill="rgb(217,207,13)"/><text x="9.2914%" y="175.50"></text></g><g><title>trait_impls_of (138,862 samples, 0.28%)</title><rect x="9.0664%" y="149" width="0.2841%" height="15" fill="rgb(231,73,38)"/><text x="9.3164%" y="159.50"></text></g><g><title>is_freeze_raw (101,191 samples, 0.21%)</title><rect x="9.3537%" y="181" width="0.2070%" height="15" fill="rgb(225,20,46)"/><text x="9.6037%" y="191.50"></text></g><g><title>evaluate_obligation (98,181 samples, 0.20%)</title><rect x="9.3599%" y="165" width="0.2009%" height="15" fill="rgb(210,31,41)"/><text x="9.6099%" y="175.50"></text></g><g><title>thir_body (49,010 samples, 0.10%)</title><rect x="9.8129%" y="133" width="0.1003%" height="15" fill="rgb(221,200,47)"/><text x="10.0629%" y="143.50"></text></g><g><title>mir_const (171,692 samples, 0.35%)</title><rect x="9.5628%" y="181" width="0.3513%" height="15" fill="rgb(226,26,5)"/><text x="9.8128%" y="191.50"></text></g><g><title>unsafety_check_result (148,381 samples, 0.30%)</title><rect x="9.6105%" y="165" width="0.3036%" height="15" fill="rgb(249,33,26)"/><text x="9.8605%" y="175.50"></text></g><g><title>mir_built (136,761 samples, 0.28%)</title><rect x="9.6342%" y="149" width="0.2798%" height="15" fill="rgb(235,183,28)"/><text x="9.8842%" y="159.50"></text></g><g><title>mir_promoted (2,185,685 samples, 4.47%)</title><rect x="5.4443%" y="213" width="4.4721%" height="15" fill="rgb(221,5,38)"/><text x="5.6943%" y="223.50">mir_p..</text></g><g><title>mir_const_qualif (518,335 samples, 1.06%)</title><rect x="8.8559%" y="197" width="1.0606%" height="15" fill="rgb(247,18,42)"/><text x="9.1059%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (60,591 samples, 0.12%)</title><rect x="9.9165%" y="213" width="0.1240%" height="15" fill="rgb(241,131,45)"/><text x="10.1665%" y="223.50"></text></g><g><title>type_op_prove_predicate (120,382 samples, 0.25%)</title><rect x="10.0404%" y="213" width="0.2463%" height="15" fill="rgb(249,31,29)"/><text x="10.2904%" y="223.50"></text></g><g><title>MIR_borrow_checking (4,183,167 samples, 8.56%)</title><rect x="1.7302%" y="245" width="8.5592%" height="15" fill="rgb(225,111,53)"/><text x="1.9802%" y="255.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (4,163,157 samples, 8.52%)</title><rect x="1.7711%" y="229" width="8.5182%" height="15" fill="rgb(238,160,17)"/><text x="2.0211%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (123,451 samples, 0.25%)</title><rect x="10.2893%" y="245" width="0.2526%" height="15" fill="rgb(214,148,48)"/><text x="10.5393%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (106,511 samples, 0.22%)</title><rect x="10.3240%" y="229" width="0.2179%" height="15" fill="rgb(232,36,49)"/><text x="10.5740%" y="239.50"></text></g><g><title>hir_module_items (135,442 samples, 0.28%)</title><rect x="10.5419%" y="245" width="0.2771%" height="15" fill="rgb(209,103,24)"/><text x="10.7919%" y="255.50"></text></g><g><title>get_lang_items (138,281 samples, 0.28%)</title><rect x="11.2435%" y="197" width="0.2829%" height="15" fill="rgb(229,88,8)"/><text x="11.4935%" y="207.50"></text></g><g><title>codegen_fn_attrs (263,694 samples, 0.54%)</title><rect x="11.0858%" y="213" width="0.5395%" height="15" fill="rgb(213,181,19)"/><text x="11.3358%" y="223.50"></text></g><g><title>check_mod_attrs (366,884 samples, 0.75%)</title><rect x="10.8751%" y="229" width="0.7507%" height="15" fill="rgb(254,191,54)"/><text x="11.1251%" y="239.50"></text></g><g><title>check_mod_const_bodies (56,731 samples, 0.12%)</title><rect x="11.6258%" y="229" width="0.1161%" height="15" fill="rgb(241,83,37)"/><text x="11.8758%" y="239.50"></text></g><g><title>lookup_deprecation_entry (65,380 samples, 0.13%)</title><rect x="11.9614%" y="213" width="0.1338%" height="15" fill="rgb(233,36,39)"/><text x="12.2114%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (205,912 samples, 0.42%)</title><rect x="11.7905%" y="229" width="0.4213%" height="15" fill="rgb(226,3,54)"/><text x="12.0405%" y="239.50"></text></g><g><title>misc_checking_1 (721,518 samples, 1.48%)</title><rect x="10.8196%" y="245" width="1.4763%" height="15" fill="rgb(245,192,40)"/><text x="11.0696%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (190,962 samples, 0.39%)</title><rect x="12.2984%" y="229" width="0.3907%" height="15" fill="rgb(238,167,29)"/><text x="12.5484%" y="239.50"></text></g><g><title>check_mod_liveness (172,821 samples, 0.35%)</title><rect x="12.3355%" y="213" width="0.3536%" height="15" fill="rgb(232,182,51)"/><text x="12.5855%" y="223.50"></text></g><g><title>type_uninhabited_from (108,551 samples, 0.22%)</title><rect x="12.4670%" y="197" width="0.2221%" height="15" fill="rgb(231,60,39)"/><text x="12.7170%" y="207.50"></text></g><g><title>type_uninhabited_from (95,381 samples, 0.20%)</title><rect x="12.4940%" y="181" width="0.1952%" height="15" fill="rgb(208,69,12)"/><text x="12.7440%" y="191.50"></text></g><g><title>type_uninhabited_from (86,401 samples, 0.18%)</title><rect x="12.5123%" y="165" width="0.1768%" height="15" fill="rgb(235,93,37)"/><text x="12.7623%" y="175.50"></text></g><g><title>type_uninhabited_from (76,631 samples, 0.16%)</title><rect x="12.5323%" y="149" width="0.1568%" height="15" fill="rgb(213,116,39)"/><text x="12.7823%" y="159.50"></text></g><g><title>type_uninhabited_from (66,011 samples, 0.14%)</title><rect x="12.5541%" y="133" width="0.1351%" height="15" fill="rgb(222,207,29)"/><text x="12.8041%" y="143.50"></text></g><g><title>misc_checking_2 (301,364 samples, 0.62%)</title><rect x="12.2959%" y="245" width="0.6166%" height="15" fill="rgb(206,96,30)"/><text x="12.5459%" y="255.50"></text></g><g><title>match_checking (109,192 samples, 0.22%)</title><rect x="12.6891%" y="229" width="0.2234%" height="15" fill="rgb(218,138,4)"/><text x="12.9391%" y="239.50"></text></g><g><title>check_match (103,952 samples, 0.21%)</title><rect x="12.6998%" y="213" width="0.2127%" height="15" fill="rgb(250,191,14)"/><text x="12.9498%" y="223.50"></text></g><g><title>death_checking (52,650 samples, 0.11%)</title><rect x="12.9813%" y="229" width="0.1077%" height="15" fill="rgb(239,60,40)"/><text x="13.2313%" y="239.50"></text></g><g><title>layout_of (67,560 samples, 0.14%)</title><rect x="14.1171%" y="85" width="0.1382%" height="15" fill="rgb(206,27,48)"/><text x="14.3671%" y="95.50"></text></g><g><title>layout_of (50,550 samples, 0.10%)</title><rect x="14.1519%" y="69" width="0.1034%" height="15" fill="rgb(225,35,8)"/><text x="14.4019%" y="79.50"></text></g><g><title>fn_abi_of_instance (117,421 samples, 0.24%)</title><rect x="14.0582%" y="101" width="0.2403%" height="15" fill="rgb(250,213,24)"/><text x="14.3082%" y="111.50"></text></g><g><title>promoted_mir (55,011 samples, 0.11%)</title><rect x="14.4916%" y="101" width="0.1126%" height="15" fill="rgb(247,123,22)"/><text x="14.7416%" y="111.50"></text></g><g><title>eval_to_const_value_raw (599,667 samples, 1.23%)</title><rect x="13.4173%" y="149" width="1.2270%" height="15" fill="rgb(231,138,38)"/><text x="13.6673%" y="159.50"></text></g><g><title>eval_to_const_value_raw (598,987 samples, 1.23%)</title><rect x="13.4187%" y="133" width="1.2256%" height="15" fill="rgb(231,145,46)"/><text x="13.6687%" y="143.50"></text></g><g><title>eval_to_allocation_raw (597,197 samples, 1.22%)</title><rect x="13.4224%" y="117" width="1.2219%" height="15" fill="rgb(251,118,11)"/><text x="13.6724%" y="127.50"></text></g><g><title>eval_to_allocation_raw (678,168 samples, 1.39%)</title><rect x="13.2594%" y="197" width="1.3876%" height="15" fill="rgb(217,147,25)"/><text x="13.5094%" y="207.50"></text></g><g><title>eval_to_allocation_raw (677,528 samples, 1.39%)</title><rect x="13.2607%" y="181" width="1.3863%" height="15" fill="rgb(247,81,37)"/><text x="13.5107%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (609,057 samples, 1.25%)</title><rect x="13.4008%" y="165" width="1.2462%" height="15" fill="rgb(209,12,38)"/><text x="13.6508%" y="175.50"></text></g><g><title>eval_to_const_value_raw (100,821 samples, 0.21%)</title><rect x="14.6470%" y="197" width="0.2063%" height="15" fill="rgb(227,1,9)"/><text x="14.8970%" y="207.50"></text></g><g><title>eval_to_const_value_raw (94,211 samples, 0.19%)</title><rect x="14.6605%" y="181" width="0.1928%" height="15" fill="rgb(248,47,43)"/><text x="14.9105%" y="191.50"></text></g><g><title>eval_to_allocation_raw (87,951 samples, 0.18%)</title><rect x="14.6733%" y="165" width="0.1800%" height="15" fill="rgb(221,10,30)"/><text x="14.9233%" y="175.50"></text></g><g><title>param_env (61,430 samples, 0.13%)</title><rect x="14.8533%" y="197" width="0.1257%" height="15" fill="rgb(210,229,1)"/><text x="15.1033%" y="207.50"></text></g><g><title>crate_lints (923,191 samples, 1.89%)</title><rect x="13.0925%" y="213" width="1.8889%" height="15" fill="rgb(222,148,37)"/><text x="13.3425%" y="223.50">c..</text></g><g><title>lint_checking (982,151 samples, 2.01%)</title><rect x="13.0890%" y="229" width="2.0096%" height="15" fill="rgb(234,67,33)"/><text x="13.3390%" y="239.50">l..</text></g><g><title>module_lints (57,240 samples, 0.12%)</title><rect x="14.9815%" y="213" width="0.1171%" height="15" fill="rgb(247,98,35)"/><text x="15.2315%" y="223.50"></text></g><g><title>lint_mod (55,300 samples, 0.11%)</title><rect x="14.9854%" y="197" width="0.1131%" height="15" fill="rgb(247,138,52)"/><text x="15.2354%" y="207.50"></text></g><g><title>privacy_checking_modules (90,791 samples, 0.19%)</title><rect x="15.1760%" y="229" width="0.1858%" height="15" fill="rgb(213,79,30)"/><text x="15.4260%" y="239.50"></text></g><g><title>check_mod_privacy (89,401 samples, 0.18%)</title><rect x="15.1789%" y="213" width="0.1829%" height="15" fill="rgb(246,177,23)"/><text x="15.4289%" y="223.50"></text></g><g><title>misc_checking_3 (1,204,313 samples, 2.46%)</title><rect x="12.9125%" y="245" width="2.4641%" height="15" fill="rgb(230,62,27)"/><text x="13.1625%" y="255.50">mi..</text></g><g><title>associated_item (54,191 samples, 0.11%)</title><rect x="20.3030%" y="165" width="0.1109%" height="15" fill="rgb(216,154,8)"/><text x="20.5530%" y="175.50"></text></g><g><title>associated_items (84,071 samples, 0.17%)</title><rect x="20.2553%" y="181" width="0.1720%" height="15" fill="rgb(244,35,45)"/><text x="20.5053%" y="191.50"></text></g><g><title>adt_def (598,679 samples, 1.22%)</title><rect x="21.3365%" y="149" width="1.2250%" height="15" fill="rgb(251,115,12)"/><text x="21.5865%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (587,839 samples, 1.20%)</title><rect x="21.3587%" y="133" width="1.2028%" height="15" fill="rgb(240,54,50)"/><text x="21.6087%" y="143.50"></text></g><g><title>item_attrs (435,286 samples, 0.89%)</title><rect x="21.6709%" y="117" width="0.8906%" height="15" fill="rgb(233,84,52)"/><text x="21.9209%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (425,135 samples, 0.87%)</title><rect x="21.6916%" y="101" width="0.8699%" height="15" fill="rgb(207,117,47)"/><text x="21.9416%" y="111.50"></text></g><g><title>adt_destructor (49,690 samples, 0.10%)</title><rect x="22.5615%" y="149" width="0.1017%" height="15" fill="rgb(249,43,39)"/><text x="22.8115%" y="159.50"></text></g><g><title>adt_def (570,794 samples, 1.17%)</title><rect x="23.4262%" y="133" width="1.1679%" height="15" fill="rgb(209,38,44)"/><text x="23.6762%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (552,844 samples, 1.13%)</title><rect x="23.4629%" y="117" width="1.1312%" height="15" fill="rgb(236,212,23)"/><text x="23.7129%" y="127.50"></text></g><g><title>item_attrs (361,503 samples, 0.74%)</title><rect x="23.8544%" y="101" width="0.7397%" height="15" fill="rgb(242,79,21)"/><text x="24.1044%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (339,533 samples, 0.69%)</title><rect x="23.8994%" y="85" width="0.6947%" height="15" fill="rgb(211,96,35)"/><text x="24.1494%" y="95.50"></text></g><g><title>adt_destructor (90,770 samples, 0.19%)</title><rect x="24.5941%" y="133" width="0.1857%" height="15" fill="rgb(253,215,40)"/><text x="24.8441%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (73,090 samples, 0.15%)</title><rect x="24.6303%" y="117" width="0.1495%" height="15" fill="rgb(211,81,21)"/><text x="24.8803%" y="127.50"></text></g><g><title>adt_def (498,006 samples, 1.02%)</title><rect x="25.3540%" y="117" width="1.0190%" height="15" fill="rgb(208,190,38)"/><text x="25.6040%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (481,776 samples, 0.99%)</title><rect x="25.3872%" y="101" width="0.9858%" height="15" fill="rgb(235,213,38)"/><text x="25.6372%" y="111.50"></text></g><g><title>item_attrs (283,182 samples, 0.58%)</title><rect x="25.7936%" y="85" width="0.5794%" height="15" fill="rgb(237,122,38)"/><text x="26.0436%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (264,352 samples, 0.54%)</title><rect x="25.8321%" y="69" width="0.5409%" height="15" fill="rgb(244,218,35)"/><text x="26.0821%" y="79.50"></text></g><g><title>adt_destructor (104,681 samples, 0.21%)</title><rect x="26.3730%" y="117" width="0.2142%" height="15" fill="rgb(240,68,47)"/><text x="26.6230%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (88,371 samples, 0.18%)</title><rect x="26.4064%" y="101" width="0.1808%" height="15" fill="rgb(210,16,53)"/><text x="26.6564%" y="111.50"></text></g><g><title>type_of (55,000 samples, 0.11%)</title><rect x="26.4747%" y="85" width="0.1125%" height="15" fill="rgb(235,124,12)"/><text x="26.7247%" y="95.50"></text></g><g><title>adt_def (403,989 samples, 0.83%)</title><rect x="26.9577%" y="101" width="0.8266%" height="15" fill="rgb(224,169,11)"/><text x="27.2077%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (388,509 samples, 0.79%)</title><rect x="26.9893%" y="85" width="0.7949%" height="15" fill="rgb(250,166,2)"/><text x="27.2393%" y="95.50"></text></g><g><title>item_attrs (198,944 samples, 0.41%)</title><rect x="27.3772%" y="69" width="0.4071%" height="15" fill="rgb(242,216,29)"/><text x="27.6272%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (183,594 samples, 0.38%)</title><rect x="27.4086%" y="53" width="0.3757%" height="15" fill="rgb(230,116,27)"/><text x="27.6586%" y="63.50"></text></g><g><title>adt_destructor (75,750 samples, 0.15%)</title><rect x="27.7843%" y="101" width="0.1550%" height="15" fill="rgb(228,99,48)"/><text x="28.0343%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_destructor (59,320 samples, 0.12%)</title><rect x="27.8179%" y="85" width="0.1214%" height="15" fill="rgb(253,11,6)"/><text x="28.0679%" y="95.50"></text></g><g><title>adt_def (150,791 samples, 0.31%)</title><rect x="28.0309%" y="85" width="0.3085%" height="15" fill="rgb(247,143,39)"/><text x="28.2809%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (147,021 samples, 0.30%)</title><rect x="28.0386%" y="69" width="0.3008%" height="15" fill="rgb(236,97,10)"/><text x="28.2886%" y="79.50"></text></g><g><title>item_attrs (108,051 samples, 0.22%)</title><rect x="28.1184%" y="53" width="0.2211%" height="15" fill="rgb(233,208,19)"/><text x="28.3684%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (104,251 samples, 0.21%)</title><rect x="28.1261%" y="37" width="0.2133%" height="15" fill="rgb(216,164,2)"/><text x="28.3761%" y="47.50"></text></g><g><title>adt_def (62,881 samples, 0.13%)</title><rect x="28.4256%" y="69" width="0.1287%" height="15" fill="rgb(220,129,5)"/><text x="28.6756%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (61,151 samples, 0.13%)</title><rect x="28.4292%" y="53" width="0.1251%" height="15" fill="rgb(242,17,10)"/><text x="28.6792%" y="63.50"></text></g><g><title>adt_dtorck_constraint (109,561 samples, 0.22%)</title><rect x="28.3878%" y="85" width="0.2242%" height="15" fill="rgb(242,107,0)"/><text x="28.6378%" y="95.50"></text></g><g><title>adt_dtorck_constraint (365,704 samples, 0.75%)</title><rect x="27.9393%" y="101" width="0.7483%" height="15" fill="rgb(251,28,31)"/><text x="28.1893%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,158,704 samples, 2.37%)</title><rect x="26.5872%" y="117" width="2.3708%" height="15" fill="rgb(233,223,10)"/><text x="26.8372%" y="127.50">ad..</text></g><g><title>type_of (80,881 samples, 0.17%)</title><rect x="28.7925%" y="101" width="0.1655%" height="15" fill="rgb(215,21,27)"/><text x="29.0425%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (54,141 samples, 0.11%)</title><rect x="28.8472%" y="85" width="0.1108%" height="15" fill="rgb(232,23,21)"/><text x="29.0972%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,290,567 samples, 4.69%)</title><rect x="24.7798%" y="133" width="4.6867%" height="15" fill="rgb(244,5,23)"/><text x="25.0298%" y="143.50">adt_d..</text></g><g><title>type_of (199,862 samples, 0.41%)</title><rect x="29.0576%" y="117" width="0.4089%" height="15" fill="rgb(226,81,46)"/><text x="29.3076%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (147,952 samples, 0.30%)</title><rect x="29.1638%" y="101" width="0.3027%" height="15" fill="rgb(247,70,30)"/><text x="29.4138%" y="111.50"></text></g><g><title>adt_dtorck_constraint (3,587,608 samples, 7.34%)</title><rect x="22.6632%" y="149" width="7.3406%" height="15" fill="rgb(212,68,19)"/><text x="22.9132%" y="159.50">adt_dtorck..</text></g><g><title>type_of (218,714 samples, 0.45%)</title><rect x="29.5563%" y="133" width="0.4475%" height="15" fill="rgb(240,187,13)"/><text x="29.8063%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (148,471 samples, 0.30%)</title><rect x="29.7000%" y="117" width="0.3038%" height="15" fill="rgb(223,113,26)"/><text x="29.9500%" y="127.50"></text></g><g><title>dropck_outlives (4,873,614 samples, 9.97%)</title><rect x="20.4427%" y="181" width="9.9719%" height="15" fill="rgb(206,192,2)"/><text x="20.6927%" y="191.50">dropck_outlives</text></g><g><title>adt_dtorck_constraint (4,693,670 samples, 9.60%)</title><rect x="20.8109%" y="165" width="9.6037%" height="15" fill="rgb(241,108,4)"/><text x="21.0609%" y="175.50">adt_dtorck_con..</text></g><g><title>type_of (173,091 samples, 0.35%)</title><rect x="30.0604%" y="149" width="0.3542%" height="15" fill="rgb(247,173,49)"/><text x="30.3104%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (137,461 samples, 0.28%)</title><rect x="30.1333%" y="133" width="0.2813%" height="15" fill="rgb(224,114,35)"/><text x="30.3833%" y="143.50"></text></g><g><title>adt_def (105,281 samples, 0.22%)</title><rect x="31.0846%" y="149" width="0.2154%" height="15" fill="rgb(245,159,27)"/><text x="31.3346%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (102,991 samples, 0.21%)</title><rect x="31.0893%" y="133" width="0.2107%" height="15" fill="rgb(245,172,44)"/><text x="31.3393%" y="143.50"></text></g><g><title>item_attrs (62,270 samples, 0.13%)</title><rect x="31.1726%" y="117" width="0.1274%" height="15" fill="rgb(236,23,11)"/><text x="31.4226%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (59,790 samples, 0.12%)</title><rect x="31.1777%" y="101" width="0.1223%" height="15" fill="rgb(205,117,38)"/><text x="31.4277%" y="111.50"></text></g><g><title>adt_def (207,894 samples, 0.43%)</title><rect x="31.3138%" y="133" width="0.4254%" height="15" fill="rgb(237,72,25)"/><text x="31.5638%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (206,614 samples, 0.42%)</title><rect x="31.3164%" y="117" width="0.4228%" height="15" fill="rgb(244,70,9)"/><text x="31.5664%" y="127.50"></text></g><g><title>item_attrs (191,014 samples, 0.39%)</title><rect x="31.3484%" y="101" width="0.3908%" height="15" fill="rgb(217,125,39)"/><text x="31.5984%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (189,594 samples, 0.39%)</title><rect x="31.3513%" y="85" width="0.3879%" height="15" fill="rgb(235,36,10)"/><text x="31.6013%" y="95.50"></text></g><g><title>adt_def (50,790 samples, 0.10%)</title><rect x="31.8384%" y="101" width="0.1039%" height="15" fill="rgb(251,123,47)"/><text x="32.0884%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (49,590 samples, 0.10%)</title><rect x="31.8409%" y="85" width="0.1015%" height="15" fill="rgb(221,13,13)"/><text x="32.0909%" y="95.50"></text></g><g><title>adt_sized_constraint (72,480 samples, 0.15%)</title><rect x="31.8257%" y="117" width="0.1483%" height="15" fill="rgb(238,131,9)"/><text x="32.0757%" y="127.50"></text></g><g><title>adt_sized_constraint (125,421 samples, 0.26%)</title><rect x="31.7392%" y="133" width="0.2566%" height="15" fill="rgb(211,50,8)"/><text x="31.9892%" y="143.50"></text></g><g><title>adt_sized_constraint (353,755 samples, 0.72%)</title><rect x="31.3000%" y="149" width="0.7238%" height="15" fill="rgb(245,182,24)"/><text x="31.5500%" y="159.50"></text></g><g><title>adt_sized_constraint (487,366 samples, 1.00%)</title><rect x="31.0547%" y="165" width="0.9972%" height="15" fill="rgb(242,14,37)"/><text x="31.3047%" y="175.50"></text></g><g><title>predicates_of (64,472 samples, 0.13%)</title><rect x="32.1913%" y="165" width="0.1319%" height="15" fill="rgb(246,228,12)"/><text x="32.4413%" y="175.50"></text></g><g><title>specializes (93,561 samples, 0.19%)</title><rect x="32.3232%" y="165" width="0.1914%" height="15" fill="rgb(213,55,15)"/><text x="32.5732%" y="175.50"></text></g><g><title>param_env (55,761 samples, 0.11%)</title><rect x="32.4006%" y="149" width="0.1141%" height="15" fill="rgb(209,9,3)"/><text x="32.6506%" y="159.50"></text></g><g><title>evaluate_obligation (1,404,166 samples, 2.87%)</title><rect x="30.4146%" y="181" width="2.8731%" height="15" fill="rgb(230,59,30)"/><text x="30.6646%" y="191.50">ev..</text></g><g><title>trait_impls_of (367,613 samples, 0.75%)</title><rect x="32.5355%" y="165" width="0.7522%" height="15" fill="rgb(209,121,21)"/><text x="32.7855%" y="175.50"></text></g><g><title>implementations_of_trait (142,470 samples, 0.29%)</title><rect x="32.9962%" y="149" width="0.2915%" height="15" fill="rgb(220,109,13)"/><text x="33.2462%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (97,430 samples, 0.20%)</title><rect x="33.0883%" y="133" width="0.1994%" height="15" fill="rgb(232,18,1)"/><text x="33.3383%" y="143.50"></text></g><g><title>fn_sig (62,000 samples, 0.13%)</title><rect x="33.2979%" y="181" width="0.1269%" height="15" fill="rgb(215,41,42)"/><text x="33.5479%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (51,810 samples, 0.11%)</title><rect x="33.3187%" y="165" width="0.1060%" height="15" fill="rgb(224,123,36)"/><text x="33.5687%" y="175.50"></text></g><g><title>generics_of (50,311 samples, 0.10%)</title><rect x="33.4247%" y="181" width="0.1029%" height="15" fill="rgb(240,125,3)"/><text x="33.6747%" y="191.50"></text></g><g><title>method_autoderef_steps (88,681 samples, 0.18%)</title><rect x="33.6889%" y="181" width="0.1815%" height="15" fill="rgb(205,98,50)"/><text x="33.9389%" y="191.50"></text></g><g><title>evaluate_obligation (69,840 samples, 0.14%)</title><rect x="33.7275%" y="165" width="0.1429%" height="15" fill="rgb(205,185,37)"/><text x="33.9775%" y="175.50"></text></g><g><title>explicit_predicates_of (115,233 samples, 0.24%)</title><rect x="34.0559%" y="149" width="0.2358%" height="15" fill="rgb(238,207,15)"/><text x="34.3059%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (105,282 samples, 0.22%)</title><rect x="34.0762%" y="133" width="0.2154%" height="15" fill="rgb(213,199,42)"/><text x="34.3262%" y="143.50"></text></g><g><title>predicates_of (224,914 samples, 0.46%)</title><rect x="33.8891%" y="181" width="0.4602%" height="15" fill="rgb(235,201,11)"/><text x="34.1391%" y="191.50"></text></g><g><title>predicates_defined_on (170,844 samples, 0.35%)</title><rect x="33.9997%" y="165" width="0.3496%" height="15" fill="rgb(207,46,11)"/><text x="34.2497%" y="175.50"></text></g><g><title>type_of (61,620 samples, 0.13%)</title><rect x="34.3527%" y="181" width="0.1261%" height="15" fill="rgb(241,35,35)"/><text x="34.6027%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (53,210 samples, 0.11%)</title><rect x="34.3699%" y="165" width="0.1089%" height="15" fill="rgb(243,32,47)"/><text x="34.6199%" y="175.50"></text></g><g><title>item_bodies_checking (9,275,383 samples, 18.98%)</title><rect x="15.5503%" y="229" width="18.9784%" height="15" fill="rgb(247,202,23)"/><text x="15.8003%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,272,733 samples, 18.97%)</title><rect x="15.5558%" y="213" width="18.9730%" height="15" fill="rgb(219,102,11)"/><text x="15.8058%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (9,261,083 samples, 18.95%)</title><rect x="15.5796%" y="197" width="18.9491%" height="15" fill="rgb(243,110,44)"/><text x="15.8296%" y="207.50">typeck</text></g><g><title>layout_of (49,561 samples, 0.10%)</title><rect x="34.5598%" y="197" width="0.1014%" height="15" fill="rgb(222,74,54)"/><text x="34.8098%" y="207.50"></text></g><g><title>impl_parent (138,141 samples, 0.28%)</title><rect x="38.9261%" y="69" width="0.2827%" height="15" fill="rgb(216,99,12)"/><text x="39.1761%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (97,150 samples, 0.20%)</title><rect x="39.0100%" y="53" width="0.1988%" height="15" fill="rgb(226,22,26)"/><text x="39.2600%" y="63.50"></text></g><g><title>impl_trait_ref (568,044 samples, 1.16%)</title><rect x="39.2088%" y="69" width="1.1623%" height="15" fill="rgb(217,163,10)"/><text x="39.4588%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (527,563 samples, 1.08%)</title><rect x="39.2916%" y="53" width="1.0794%" height="15" fill="rgb(213,25,53)"/><text x="39.5416%" y="63.50"></text></g><g><title>coherent_trait (958,380 samples, 1.96%)</title><rect x="38.5434%" y="101" width="1.9609%" height="15" fill="rgb(252,105,26)"/><text x="38.7934%" y="111.50">c..</text></g><g><title>specialization_graph_of (953,070 samples, 1.95%)</title><rect x="38.5543%" y="85" width="1.9501%" height="15" fill="rgb(220,39,43)"/><text x="38.8043%" y="95.50">s..</text></g><g><title>trait_impls_of (65,150 samples, 0.13%)</title><rect x="40.3710%" y="69" width="0.1333%" height="15" fill="rgb(229,68,48)"/><text x="40.6210%" y="79.50"></text></g><g><title>adt_destructor (969,780 samples, 1.98%)</title><rect x="38.5255%" y="133" width="1.9843%" height="15" fill="rgb(252,8,32)"/><text x="38.7755%" y="143.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (968,750 samples, 1.98%)</title><rect x="38.5276%" y="117" width="1.9822%" height="15" fill="rgb(223,20,43)"/><text x="38.7776%" y="127.50">m..</text></g><g><title>adt_dtorck_constraint (977,750 samples, 2.00%)</title><rect x="38.5106%" y="149" width="2.0006%" height="15" fill="rgb(229,81,49)"/><text x="38.7606%" y="159.50">a..</text></g><g><title>dropck_outlives (1,027,472 samples, 2.10%)</title><rect x="38.4133%" y="181" width="2.1023%" height="15" fill="rgb(236,28,36)"/><text x="38.6633%" y="191.50">d..</text></g><g><title>adt_dtorck_constraint (996,751 samples, 2.04%)</title><rect x="38.4761%" y="165" width="2.0395%" height="15" fill="rgb(249,185,26)"/><text x="38.7261%" y="175.50">a..</text></g><g><title>adt_def (110,471 samples, 0.23%)</title><rect x="40.7141%" y="117" width="0.2260%" height="15" fill="rgb(249,174,33)"/><text x="40.9641%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (110,001 samples, 0.23%)</title><rect x="40.7151%" y="101" width="0.2251%" height="15" fill="rgb(233,201,37)"/><text x="40.9651%" y="111.50"></text></g><g><title>adt_sized_constraint (118,871 samples, 0.24%)</title><rect x="40.7105%" y="133" width="0.2432%" height="15" fill="rgb(221,78,26)"/><text x="40.9605%" y="143.50"></text></g><g><title>adt_sized_constraint (133,151 samples, 0.27%)</title><rect x="40.6878%" y="149" width="0.2724%" height="15" fill="rgb(250,127,30)"/><text x="40.9378%" y="159.50"></text></g><g><title>evaluate_obligation (222,403 samples, 0.46%)</title><rect x="40.5156%" y="181" width="0.4551%" height="15" fill="rgb(230,49,44)"/><text x="40.7656%" y="191.50"></text></g><g><title>adt_sized_constraint (164,732 samples, 0.34%)</title><rect x="40.6336%" y="165" width="0.3371%" height="15" fill="rgb(229,67,23)"/><text x="40.8836%" y="175.50"></text></g><g><title>impl_trait_ref (49,611 samples, 0.10%)</title><rect x="41.0091%" y="181" width="0.1015%" height="15" fill="rgb(249,83,47)"/><text x="41.2591%" y="191.50"></text></g><g><title>trait_impls_of (52,920 samples, 0.11%)</title><rect x="41.2808%" y="181" width="0.1083%" height="15" fill="rgb(215,43,3)"/><text x="41.5308%" y="191.50"></text></g><g><title>item_types_checking (3,363,857 samples, 6.88%)</title><rect x="34.5287%" y="229" width="6.8828%" height="15" fill="rgb(238,154,13)"/><text x="34.7787%" y="239.50">item_type..</text></g><g><title>check_mod_item_types (3,360,207 samples, 6.88%)</title><rect x="34.5362%" y="213" width="6.8753%" height="15" fill="rgb(219,56,2)"/><text x="34.7862%" y="223.50">check_mod..</text></g><g><title>typeck (3,299,106 samples, 6.75%)</title><rect x="34.6612%" y="197" width="6.7503%" height="15" fill="rgb(233,0,4)"/><text x="34.9112%" y="207.50">typeck</text></g><g><title>late_bound_vars_map (88,751 samples, 0.18%)</title><rect x="41.8554%" y="181" width="0.1816%" height="15" fill="rgb(235,30,7)"/><text x="42.1054%" y="191.50"></text></g><g><title>resolve_lifetimes (71,191 samples, 0.15%)</title><rect x="41.8914%" y="165" width="0.1457%" height="15" fill="rgb(250,79,13)"/><text x="42.1414%" y="175.50"></text></g><g><title>fn_sig (187,982 samples, 0.38%)</title><rect x="41.6761%" y="197" width="0.3846%" height="15" fill="rgb(211,146,34)"/><text x="41.9261%" y="207.50"></text></g><g><title>predicates_of (71,211 samples, 0.15%)</title><rect x="42.1567%" y="197" width="0.1457%" height="15" fill="rgb(228,22,38)"/><text x="42.4067%" y="207.50"></text></g><g><title>predicates_defined_on (61,011 samples, 0.12%)</title><rect x="42.1776%" y="181" width="0.1248%" height="15" fill="rgb(235,168,5)"/><text x="42.4276%" y="191.50"></text></g><g><title>type_collecting (448,855 samples, 0.92%)</title><rect x="41.4930%" y="229" width="0.9184%" height="15" fill="rgb(221,155,16)"/><text x="41.7430%" y="239.50"></text></g><g><title>collect_mod_item_types (437,535 samples, 0.90%)</title><rect x="41.5162%" y="213" width="0.8952%" height="15" fill="rgb(215,215,53)"/><text x="41.7662%" y="223.50"></text></g><g><title>type_of (53,261 samples, 0.11%)</title><rect x="42.3024%" y="197" width="0.1090%" height="15" fill="rgb(223,4,10)"/><text x="42.5524%" y="207.50"></text></g><g><title>adt_sized_constraint (71,261 samples, 0.15%)</title><rect x="44.1578%" y="181" width="0.1458%" height="15" fill="rgb(234,103,6)"/><text x="44.4078%" y="191.50"></text></g><g><title>trait_impls_of (94,251 samples, 0.19%)</title><rect x="44.3935%" y="181" width="0.1928%" height="15" fill="rgb(227,97,0)"/><text x="44.6435%" y="191.50"></text></g><g><title>evaluate_obligation (535,565 samples, 1.10%)</title><rect x="43.6220%" y="197" width="1.0958%" height="15" fill="rgb(234,150,53)"/><text x="43.8720%" y="207.50"></text></g><g><title>type_of (64,220 samples, 0.13%)</title><rect x="44.5864%" y="181" width="0.1314%" height="15" fill="rgb(228,201,54)"/><text x="44.8364%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (58,650 samples, 0.12%)</title><rect x="44.5978%" y="165" width="0.1200%" height="15" fill="rgb(222,22,37)"/><text x="44.8478%" y="175.50"></text></g><g><title>implied_outlives_bounds (89,231 samples, 0.18%)</title><rect x="44.7178%" y="197" width="0.1826%" height="15" fill="rgb(237,53,32)"/><text x="44.9678%" y="207.50"></text></g><g><title>param_env (259,933 samples, 0.53%)</title><rect x="44.9014%" y="197" width="0.5318%" height="15" fill="rgb(233,25,53)"/><text x="45.1514%" y="207.50"></text></g><g><title>region_scope_tree (110,262 samples, 0.23%)</title><rect x="45.4639%" y="197" width="0.2256%" height="15" fill="rgb(210,40,34)"/><text x="45.7139%" y="207.50"></text></g><g><title>analysis (21,657,801 samples, 44.31%)</title><rect x="1.3774%" y="261" width="44.3141%" height="15" fill="rgb(241,220,44)"/><text x="1.6274%" y="271.50">analysis</text></g><g><title>type_check_crate (14,815,865 samples, 30.31%)</title><rect x="15.3767%" y="245" width="30.3148%" height="15" fill="rgb(235,28,35)"/><text x="15.6267%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,602,098 samples, 3.28%)</title><rect x="42.4134%" y="229" width="3.2781%" height="15" fill="rgb(210,56,17)"/><text x="42.6634%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (1,551,328 samples, 3.17%)</title><rect x="42.5173%" y="213" width="3.1742%" height="15" fill="rgb(224,130,29)"/><text x="42.7673%" y="223.50">che..</text></g><g><title>codegen_crate (620,807 samples, 1.27%)</title><rect x="45.7126%" y="261" width="1.2702%" height="15" fill="rgb(235,212,8)"/><text x="45.9626%" y="271.50"></text></g><g><title>AST_validation (154,372 samples, 0.32%)</title><rect x="47.4323%" y="245" width="0.3159%" height="15" fill="rgb(223,33,50)"/><text x="47.6823%" y="255.50"></text></g><g><title>crate_injection (77,550 samples, 0.16%)</title><rect x="47.7908%" y="245" width="0.1587%" height="15" fill="rgb(219,149,13)"/><text x="48.0408%" y="255.50"></text></g><g><title>metadata_load_macro (139,201 samples, 0.28%)</title><rect x="76.1742%" y="213" width="0.2848%" height="15" fill="rgb(250,156,29)"/><text x="76.4242%" y="223.50"></text></g><g><title>macro_expand_crate (17,303,503 samples, 35.40%)</title><rect x="47.9494%" y="245" width="35.4047%" height="15" fill="rgb(216,193,19)"/><text x="48.1994%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (17,274,652 samples, 35.35%)</title><rect x="48.0085%" y="229" width="35.3457%" height="15" fill="rgb(216,135,14)"/><text x="48.2585%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (3,369,897 samples, 6.90%)</title><rect x="76.4590%" y="213" width="6.8952%" height="15" fill="rgb(241,47,5)"/><text x="76.7090%" y="223.50">metadata_..</text></g><g><title>metadata_register_crate (1,258,134 samples, 2.57%)</title><rect x="80.7799%" y="197" width="2.5743%" height="15" fill="rgb(233,42,35)"/><text x="81.0299%" y="207.50">me..</text></g><g><title>metadata_register_crate (184,992 samples, 0.38%)</title><rect x="82.9756%" y="181" width="0.3785%" height="15" fill="rgb(231,13,6)"/><text x="83.2256%" y="191.50"></text></g><g><title>maybe_create_a_macro_crate (479,976 samples, 0.98%)</title><rect x="83.3573%" y="245" width="0.9821%" height="15" fill="rgb(207,181,40)"/><text x="83.6073%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (80,431 samples, 0.16%)</title><rect x="84.3394%" y="245" width="0.1646%" height="15" fill="rgb(254,173,49)"/><text x="84.5894%" y="255.50"></text></g><g><title>finalize_imports (335,423 samples, 0.69%)</title><rect x="84.5254%" y="229" width="0.6863%" height="15" fill="rgb(221,1,38)"/><text x="84.7754%" y="239.50"></text></g><g><title>late_resolve_crate (1,378,285 samples, 2.82%)</title><rect x="85.2746%" y="229" width="2.8201%" height="15" fill="rgb(206,124,46)"/><text x="85.5246%" y="239.50">la..</text></g><g><title>configure_and_expand (20,171,845 samples, 41.27%)</title><rect x="46.9828%" y="261" width="41.2736%" height="15" fill="rgb(249,21,11)"/><text x="47.2328%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,833,980 samples, 3.75%)</title><rect x="84.5040%" y="245" width="3.7525%" height="15" fill="rgb(222,201,40)"/><text x="84.7540%" y="255.50">reso..</text></g><g><title>drop_ast (66,471 samples, 0.14%)</title><rect x="88.2565%" y="261" width="0.1360%" height="15" fill="rgb(235,61,29)"/><text x="88.5065%" y="271.50"></text></g><g><title>early_lint_checks (151,031 samples, 0.31%)</title><rect x="88.4287%" y="261" width="0.3090%" height="15" fill="rgb(219,207,3)"/><text x="88.6787%" y="271.50"></text></g><g><title>free_global_ctxt (2,344,356 samples, 4.80%)</title><rect x="88.7377%" y="261" width="4.7968%" height="15" fill="rgb(222,56,46)"/><text x="88.9877%" y="271.50">free_g..</text></g><g><title>crate_hash (77,851 samples, 0.16%)</title><rect x="93.7183%" y="245" width="0.1593%" height="15" fill="rgb(239,76,54)"/><text x="93.9683%" y="255.50"></text></g><g><title>generate_crate_metadata (171,601 samples, 0.35%)</title><rect x="93.5345%" y="261" width="0.3511%" height="15" fill="rgb(231,124,27)"/><text x="93.7845%" y="271.50"></text></g><g><title>hir_lowering (925,921 samples, 1.89%)</title><rect x="93.8856%" y="261" width="1.8945%" height="15" fill="rgb(249,195,6)"/><text x="94.1356%" y="271.50">h..</text></g><g><title>parse_crate (794,579 samples, 1.63%)</title><rect x="95.8712%" y="261" width="1.6258%" height="15" fill="rgb(237,174,47)"/><text x="96.1212%" y="271.50"></text></g><g><title>prepare_outputs (317,593 samples, 0.65%)</title><rect x="97.5166%" y="261" width="0.6498%" height="15" fill="rgb(206,201,31)"/><text x="97.7666%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (412,475 samples, 0.84%)</title><rect x="98.1664%" y="261" width="0.8440%" height="15" fill="rgb(231,57,52)"/><text x="98.4164%" y="271.50"></text></g><g><title>setup_global_ctxt (157,492 samples, 0.32%)</title><rect x="99.0319%" y="261" width="0.3222%" height="15" fill="rgb(248,177,22)"/><text x="99.2819%" y="271.50"></text></g><g><title>all (48,873,435 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,211,37)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (48,873,435 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,128,51)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (315,664 samples, 0.65%)</title><rect x="99.3541%" y="261" width="0.6459%" height="15" fill="rgb(227,165,31)"/><text x="99.6041%" y="271.50"></text></g></svg></svg>