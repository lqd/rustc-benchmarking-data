<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (511,605 samples, 0.23%)</title><rect x="14.4875%" y="101" width="0.2313%" height="15" fill="rgb(227,0,7)"/><text x="14.7375%" y="111.50"></text></g><g><title>item_attrs (656,446 samples, 0.30%)</title><rect x="15.2560%" y="69" width="0.2968%" height="15" fill="rgb(217,0,24)"/><text x="15.5060%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (642,526 samples, 0.29%)</title><rect x="15.2623%" y="53" width="0.2905%" height="15" fill="rgb(221,193,54)"/><text x="15.5123%" y="63.50"></text></g><g><title>codegen_fn_attrs (809,187 samples, 0.37%)</title><rect x="15.1981%" y="85" width="0.3658%" height="15" fill="rgb(248,212,6)"/><text x="15.4481%" y="95.50"></text></g><g><title>is_copy_raw (317,651 samples, 0.14%)</title><rect x="18.9404%" y="69" width="0.1436%" height="15" fill="rgb(208,68,35)"/><text x="19.1904%" y="79.50"></text></g><g><title>evaluate_obligation (239,291 samples, 0.11%)</title><rect x="18.9758%" y="53" width="0.1082%" height="15" fill="rgb(232,128,0)"/><text x="19.2258%" y="63.50"></text></g><g><title>needs_drop_raw (1,984,543 samples, 0.90%)</title><rect x="19.0845%" y="69" width="0.8972%" height="15" fill="rgb(207,160,47)"/><text x="19.3345%" y="79.50"></text></g><g><title>is_copy_raw (1,659,740 samples, 0.75%)</title><rect x="19.2314%" y="53" width="0.7504%" height="15" fill="rgb(228,23,34)"/><text x="19.4814%" y="63.50"></text></g><g><title>evaluate_obligation (1,459,270 samples, 0.66%)</title><rect x="19.3220%" y="37" width="0.6598%" height="15" fill="rgb(218,30,26)"/><text x="19.5720%" y="47.50"></text></g><g><title>resolve_instance (678,998 samples, 0.31%)</title><rect x="19.9818%" y="69" width="0.3070%" height="15" fill="rgb(220,122,19)"/><text x="20.2318%" y="79.50"></text></g><g><title>thir_body (2,729,743 samples, 1.23%)</title><rect x="20.3125%" y="69" width="1.2342%" height="15" fill="rgb(250,228,42)"/><text x="20.5625%" y="79.50"></text></g><g><title>mir_const (17,746,582 samples, 8.02%)</title><rect x="13.5355%" y="117" width="8.0236%" height="15" fill="rgb(240,193,28)"/><text x="13.7855%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (15,129,501 samples, 6.84%)</title><rect x="14.7188%" y="101" width="6.8403%" height="15" fill="rgb(216,20,37)"/><text x="14.9688%" y="111.50">unsafety_..</text></g><g><title>mir_built (13,260,013 samples, 6.00%)</title><rect x="15.5640%" y="85" width="5.9951%" height="15" fill="rgb(206,188,39)"/><text x="15.8140%" y="95.50">mir_built</text></g><g><title>mir_promoted (20,094,330 samples, 9.09%)</title><rect x="12.6277%" y="133" width="9.0850%" height="15" fill="rgb(217,207,13)"/><text x="12.8777%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (339,683 samples, 0.15%)</title><rect x="21.5591%" y="117" width="0.1536%" height="15" fill="rgb(231,73,38)"/><text x="21.8091%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (675,398 samples, 0.31%)</title><rect x="21.7134%" y="133" width="0.3054%" height="15" fill="rgb(225,20,46)"/><text x="21.9634%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (558,139 samples, 0.25%)</title><rect x="22.0187%" y="133" width="0.2523%" height="15" fill="rgb(210,31,41)"/><text x="22.2687%" y="143.50"></text></g><g><title>normalize_projection_ty (413,936 samples, 0.19%)</title><rect x="22.0839%" y="117" width="0.1871%" height="15" fill="rgb(221,200,47)"/><text x="22.3339%" y="127.50"></text></g><g><title>type_op_normalize_predicate (421,804 samples, 0.19%)</title><rect x="22.2711%" y="133" width="0.1907%" height="15" fill="rgb(226,26,5)"/><text x="22.5211%" y="143.50"></text></g><g><title>normalize_projection_ty (316,942 samples, 0.14%)</title><rect x="22.3185%" y="117" width="0.1433%" height="15" fill="rgb(249,33,26)"/><text x="22.5685%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,394,923 samples, 1.08%)</title><rect x="22.4618%" y="133" width="1.0828%" height="15" fill="rgb(235,183,28)"/><text x="22.7118%" y="143.50"></text></g><g><title>evaluate_obligation (221,445 samples, 0.10%)</title><rect x="23.4445%" y="117" width="0.1001%" height="15" fill="rgb(221,5,38)"/><text x="23.6945%" y="127.50"></text></g><g><title>MIR_borrow_checking (50,623,976 samples, 22.89%)</title><rect x="0.6602%" y="165" width="22.8880%" height="15" fill="rgb(247,18,42)"/><text x="0.9102%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (50,381,366 samples, 22.78%)</title><rect x="0.7699%" y="149" width="22.7783%" height="15" fill="rgb(241,131,45)"/><text x="1.0199%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (302,943 samples, 0.14%)</title><rect x="23.5482%" y="165" width="0.1370%" height="15" fill="rgb(249,31,29)"/><text x="23.7982%" y="175.50"></text></g><g><title>hir_module_items (356,884 samples, 0.16%)</title><rect x="23.6852%" y="165" width="0.1614%" height="15" fill="rgb(225,111,53)"/><text x="23.9352%" y="175.50"></text></g><g><title>codegen_fn_attrs (407,965 samples, 0.18%)</title><rect x="24.1285%" y="133" width="0.1844%" height="15" fill="rgb(238,160,17)"/><text x="24.3785%" y="143.50"></text></g><g><title>check_mod_attrs (983,999 samples, 0.44%)</title><rect x="23.8681%" y="149" width="0.4449%" height="15" fill="rgb(214,148,48)"/><text x="24.1181%" y="159.50"></text></g><g><title>check_mod_const_bodies (233,601 samples, 0.11%)</title><rect x="24.3130%" y="149" width="0.1056%" height="15" fill="rgb(232,36,49)"/><text x="24.5630%" y="159.50"></text></g><g><title>lint_levels (548,136 samples, 0.25%)</title><rect x="24.6189%" y="133" width="0.2478%" height="15" fill="rgb(209,103,24)"/><text x="24.8689%" y="143.50"></text></g><g><title>lookup_deprecation_entry (255,853 samples, 0.12%)</title><rect x="24.8667%" y="133" width="0.1157%" height="15" fill="rgb(229,88,8)"/><text x="25.1167%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,189,635 samples, 0.54%)</title><rect x="24.4839%" y="149" width="0.5379%" height="15" fill="rgb(213,181,19)"/><text x="24.7339%" y="159.50"></text></g><g><title>misc_checking_1 (2,710,861 samples, 1.23%)</title><rect x="23.8468%" y="165" width="1.2256%" height="15" fill="rgb(254,191,54)"/><text x="24.0968%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,008,731 samples, 0.46%)</title><rect x="25.0733%" y="149" width="0.4561%" height="15" fill="rgb(241,83,37)"/><text x="25.3233%" y="159.50"></text></g><g><title>check_mod_liveness (798,630 samples, 0.36%)</title><rect x="25.1683%" y="133" width="0.3611%" height="15" fill="rgb(233,36,39)"/><text x="25.4183%" y="143.50"></text></g><g><title>misc_checking_2 (3,408,148 samples, 1.54%)</title><rect x="25.0725%" y="165" width="1.5409%" height="15" fill="rgb(226,3,54)"/><text x="25.3225%" y="175.50"></text></g><g><title>match_checking (2,397,447 samples, 1.08%)</title><rect x="25.5294%" y="149" width="1.0839%" height="15" fill="rgb(245,192,40)"/><text x="25.7794%" y="159.50"></text></g><g><title>check_match (2,333,877 samples, 1.06%)</title><rect x="25.5582%" y="133" width="1.0552%" height="15" fill="rgb(238,167,29)"/><text x="25.8082%" y="143.50"></text></g><g><title>check_private_in_public (384,185 samples, 0.17%)</title><rect x="26.6183%" y="149" width="0.1737%" height="15" fill="rgb(232,182,51)"/><text x="26.8683%" y="159.50"></text></g><g><title>death_checking (920,940 samples, 0.42%)</title><rect x="26.7920%" y="149" width="0.4164%" height="15" fill="rgb(231,60,39)"/><text x="27.0420%" y="159.50"></text></g><g><title>eval_to_const_value_raw (221,823 samples, 0.10%)</title><rect x="27.8081%" y="117" width="0.1003%" height="15" fill="rgb(208,69,12)"/><text x="28.0581%" y="127.50"></text></g><g><title>explicit_predicates_of (240,322 samples, 0.11%)</title><rect x="28.2179%" y="69" width="0.1087%" height="15" fill="rgb(235,93,37)"/><text x="28.4679%" y="79.50"></text></g><g><title>param_env (943,125 samples, 0.43%)</title><rect x="27.9084%" y="117" width="0.4264%" height="15" fill="rgb(213,116,39)"/><text x="28.1584%" y="127.50"></text></g><g><title>predicates_of (436,074 samples, 0.20%)</title><rect x="28.1376%" y="101" width="0.1972%" height="15" fill="rgb(222,207,29)"/><text x="28.3876%" y="111.50"></text></g><g><title>predicates_defined_on (361,014 samples, 0.16%)</title><rect x="28.1715%" y="85" width="0.1632%" height="15" fill="rgb(206,96,30)"/><text x="28.4215%" y="95.50"></text></g><g><title>crate_lints (3,854,463 samples, 1.74%)</title><rect x="27.2093%" y="133" width="1.7427%" height="15" fill="rgb(218,138,4)"/><text x="27.4593%" y="143.50"></text></g><g><title>type_of (1,357,125 samples, 0.61%)</title><rect x="28.3384%" y="117" width="0.6136%" height="15" fill="rgb(250,191,14)"/><text x="28.5884%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (896,959 samples, 0.41%)</title><rect x="28.5465%" y="101" width="0.4055%" height="15" fill="rgb(239,60,40)"/><text x="28.7965%" y="111.50"></text></g><g><title>lint_checking (5,206,579 samples, 2.35%)</title><rect x="27.2084%" y="149" width="2.3540%" height="15" fill="rgb(206,27,48)"/><text x="27.4584%" y="159.50">l..</text></g><g><title>module_lints (1,350,016 samples, 0.61%)</title><rect x="28.9520%" y="133" width="0.6104%" height="15" fill="rgb(225,35,8)"/><text x="29.2020%" y="143.50"></text></g><g><title>lint_mod (1,335,506 samples, 0.60%)</title><rect x="28.9586%" y="117" width="0.6038%" height="15" fill="rgb(250,213,24)"/><text x="29.2086%" y="127.50"></text></g><g><title>layout_of (237,343 samples, 0.11%)</title><rect x="29.4551%" y="101" width="0.1073%" height="15" fill="rgb(247,123,22)"/><text x="29.7051%" y="111.50"></text></g><g><title>privacy_access_levels (545,186 samples, 0.25%)</title><rect x="29.5624%" y="149" width="0.2465%" height="15" fill="rgb(231,138,38)"/><text x="29.8124%" y="159.50"></text></g><g><title>privacy_checking_modules (1,927,351 samples, 0.87%)</title><rect x="29.8089%" y="149" width="0.8714%" height="15" fill="rgb(231,145,46)"/><text x="30.0589%" y="159.50"></text></g><g><title>check_mod_privacy (1,917,621 samples, 0.87%)</title><rect x="29.8133%" y="133" width="0.8670%" height="15" fill="rgb(251,118,11)"/><text x="30.0633%" y="143.50"></text></g><g><title>misc_checking_3 (9,021,561 samples, 4.08%)</title><rect x="26.6133%" y="165" width="4.0788%" height="15" fill="rgb(217,147,25)"/><text x="26.8633%" y="175.50">misc..</text></g><g><title>adt_destructor (319,234 samples, 0.14%)</title><rect x="30.7870%" y="117" width="0.1443%" height="15" fill="rgb(247,81,37)"/><text x="31.0370%" y="127.50"></text></g><g><title>coherent_trait (312,143 samples, 0.14%)</title><rect x="30.7902%" y="101" width="0.1411%" height="15" fill="rgb(209,12,38)"/><text x="31.0402%" y="111.50"></text></g><g><title>specialization_graph_of (310,623 samples, 0.14%)</title><rect x="30.7909%" y="85" width="0.1404%" height="15" fill="rgb(227,1,9)"/><text x="31.0409%" y="95.50"></text></g><g><title>impl_parent (2,336,466 samples, 1.06%)</title><rect x="32.5771%" y="101" width="1.0564%" height="15" fill="rgb(248,47,43)"/><text x="32.8271%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,277,607 samples, 0.58%)</title><rect x="33.0558%" y="85" width="0.5776%" height="15" fill="rgb(221,10,30)"/><text x="33.3058%" y="95.50"></text></g><g><title>impl_trait_ref (5,167,255 samples, 2.34%)</title><rect x="33.6335%" y="101" width="2.3362%" height="15" fill="rgb(210,229,1)"/><text x="33.8835%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,060,541 samples, 1.84%)</title><rect x="34.1338%" y="85" width="1.8358%" height="15" fill="rgb(222,148,37)"/><text x="34.3838%" y="95.50">m..</text></g><g><title>trait_impls_of (730,816 samples, 0.33%)</title><rect x="35.9989%" y="101" width="0.3304%" height="15" fill="rgb(234,67,33)"/><text x="36.2489%" y="111.50"></text></g><g><title>coherent_trait (12,293,596 samples, 5.56%)</title><rect x="30.7718%" y="133" width="5.5582%" height="15" fill="rgb(247,98,35)"/><text x="31.0218%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (11,820,069 samples, 5.34%)</title><rect x="30.9858%" y="117" width="5.3441%" height="15" fill="rgb(247,138,52)"/><text x="31.2358%" y="127.50">special..</text></g><g><title>coherence_checking (12,386,899 samples, 5.60%)</title><rect x="30.7627%" y="149" width="5.6003%" height="15" fill="rgb(213,79,30)"/><text x="31.0127%" y="159.50">coheren..</text></g><g><title>associated_item (367,374 samples, 0.17%)</title><rect x="61.6910%" y="85" width="0.1661%" height="15" fill="rgb(246,177,23)"/><text x="61.9410%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (292,834 samples, 0.13%)</title><rect x="61.7247%" y="69" width="0.1324%" height="15" fill="rgb(230,62,27)"/><text x="61.9747%" y="79.50"></text></g><g><title>associated_items (538,554 samples, 0.24%)</title><rect x="61.6255%" y="101" width="0.2435%" height="15" fill="rgb(216,154,8)"/><text x="61.8755%" y="111.50"></text></g><g><title>dropck_outlives (725,678 samples, 0.33%)</title><rect x="61.9115%" y="101" width="0.3281%" height="15" fill="rgb(244,35,45)"/><text x="62.1615%" y="111.50"></text></g><g><title>adt_dtorck_constraint (261,625 samples, 0.12%)</title><rect x="62.1213%" y="85" width="0.1183%" height="15" fill="rgb(251,115,12)"/><text x="62.3713%" y="95.50"></text></g><g><title>generics_of (992,651 samples, 0.45%)</title><rect x="63.8886%" y="85" width="0.4488%" height="15" fill="rgb(240,54,50)"/><text x="64.1386%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (638,346 samples, 0.29%)</title><rect x="64.0488%" y="69" width="0.2886%" height="15" fill="rgb(233,84,52)"/><text x="64.2988%" y="79.50"></text></g><g><title>impl_trait_ref (646,065 samples, 0.29%)</title><rect x="64.3678%" y="85" width="0.2921%" height="15" fill="rgb(207,117,47)"/><text x="64.6178%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (518,354 samples, 0.23%)</title><rect x="64.4256%" y="69" width="0.2344%" height="15" fill="rgb(249,43,39)"/><text x="64.6756%" y="79.50"></text></g><g><title>predicates_of (302,591 samples, 0.14%)</title><rect x="64.6711%" y="85" width="0.1368%" height="15" fill="rgb(209,38,44)"/><text x="64.9211%" y="95.50"></text></g><g><title>specializes (391,693 samples, 0.18%)</title><rect x="64.8079%" y="85" width="0.1771%" height="15" fill="rgb(236,212,23)"/><text x="65.0579%" y="95.50"></text></g><g><title>param_env (232,213 samples, 0.10%)</title><rect x="64.8800%" y="69" width="0.1050%" height="15" fill="rgb(242,79,21)"/><text x="65.1300%" y="79.50"></text></g><g><title>trait_impls_of (367,777 samples, 0.17%)</title><rect x="64.9918%" y="85" width="0.1663%" height="15" fill="rgb(211,96,35)"/><text x="65.2418%" y="95.50"></text></g><g><title>evaluate_obligation (6,473,781 samples, 2.93%)</title><rect x="62.2396%" y="101" width="2.9269%" height="15" fill="rgb(253,215,40)"/><text x="62.4896%" y="111.50">ev..</text></g><g><title>generics_of (763,318 samples, 0.35%)</title><rect x="65.2690%" y="101" width="0.3451%" height="15" fill="rgb(211,81,21)"/><text x="65.5190%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (600,746 samples, 0.27%)</title><rect x="65.3425%" y="85" width="0.2716%" height="15" fill="rgb(208,190,38)"/><text x="65.5925%" y="95.50"></text></g><g><title>method_autoderef_steps (268,665 samples, 0.12%)</title><rect x="65.8128%" y="101" width="0.1215%" height="15" fill="rgb(235,213,38)"/><text x="66.0628%" y="111.50"></text></g><g><title>predicates_of (464,794 samples, 0.21%)</title><rect x="66.0229%" y="101" width="0.2101%" height="15" fill="rgb(237,122,38)"/><text x="66.2729%" y="111.50"></text></g><g><title>predicates_defined_on (308,702 samples, 0.14%)</title><rect x="66.0935%" y="85" width="0.1396%" height="15" fill="rgb(244,218,35)"/><text x="66.3435%" y="95.50"></text></g><g><title>typeck (3,027,744 samples, 1.37%)</title><rect x="66.3222%" y="101" width="1.3689%" height="15" fill="rgb(240,68,47)"/><text x="66.5722%" y="111.50"></text></g><g><title>item_bodies_checking (69,340,995 samples, 31.35%)</title><rect x="36.3803%" y="149" width="31.3503%" height="15" fill="rgb(210,16,53)"/><text x="36.6303%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (69,337,645 samples, 31.35%)</title><rect x="36.3818%" y="133" width="31.3488%" height="15" fill="rgb(235,124,12)"/><text x="36.6318%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (69,168,075 samples, 31.27%)</title><rect x="36.4585%" y="117" width="31.2722%" height="15" fill="rgb(224,169,11)"/><text x="36.7085%" y="127.50">typeck</text></g><g><title>item_types_checking (897,380 samples, 0.41%)</title><rect x="67.7306%" y="149" width="0.4057%" height="15" fill="rgb(250,166,2)"/><text x="67.9806%" y="159.50"></text></g><g><title>check_mod_item_types (887,540 samples, 0.40%)</title><rect x="67.7351%" y="133" width="0.4013%" height="15" fill="rgb(242,216,29)"/><text x="67.9851%" y="143.50"></text></g><g><title>fn_sig (698,988 samples, 0.32%)</title><rect x="68.3760%" y="117" width="0.3160%" height="15" fill="rgb(230,116,27)"/><text x="68.6260%" y="127.50"></text></g><g><title>named_region_map (673,638 samples, 0.30%)</title><rect x="68.8165%" y="101" width="0.3046%" height="15" fill="rgb(228,99,48)"/><text x="69.0665%" y="111.50"></text></g><g><title>resolve_lifetimes (627,048 samples, 0.28%)</title><rect x="68.8375%" y="85" width="0.2835%" height="15" fill="rgb(253,11,6)"/><text x="69.0875%" y="95.50"></text></g><g><title>generics_of (971,929 samples, 0.44%)</title><rect x="68.6920%" y="117" width="0.4394%" height="15" fill="rgb(247,143,39)"/><text x="68.9420%" y="127.50"></text></g><g><title>explicit_predicates_of (321,234 samples, 0.15%)</title><rect x="69.2754%" y="85" width="0.1452%" height="15" fill="rgb(236,97,10)"/><text x="69.5254%" y="95.50"></text></g><g><title>predicates_of (769,721 samples, 0.35%)</title><rect x="69.1632%" y="117" width="0.3480%" height="15" fill="rgb(233,208,19)"/><text x="69.4132%" y="127.50"></text></g><g><title>predicates_defined_on (668,271 samples, 0.30%)</title><rect x="69.2091%" y="101" width="0.3021%" height="15" fill="rgb(216,164,2)"/><text x="69.4591%" y="111.50"></text></g><g><title>type_collecting (3,201,666 samples, 1.45%)</title><rect x="68.1403%" y="149" width="1.4475%" height="15" fill="rgb(220,129,5)"/><text x="68.3903%" y="159.50"></text></g><g><title>collect_mod_item_types (3,181,306 samples, 1.44%)</title><rect x="68.1495%" y="133" width="1.4383%" height="15" fill="rgb(242,17,10)"/><text x="68.3995%" y="143.50"></text></g><g><title>object_safety_violations (429,115 samples, 0.19%)</title><rect x="70.2640%" y="117" width="0.1940%" height="15" fill="rgb(242,107,0)"/><text x="70.5140%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,012,072 samples, 0.91%)</title><rect x="69.7582%" y="133" width="0.9097%" height="15" fill="rgb(251,28,31)"/><text x="70.0082%" y="143.50"></text></g><g><title>region_scope_tree (329,672 samples, 0.15%)</title><rect x="70.5189%" y="117" width="0.1491%" height="15" fill="rgb(233,223,10)"/><text x="70.7689%" y="127.50"></text></g><g><title>evaluate_obligation (578,679 samples, 0.26%)</title><rect x="72.1019%" y="117" width="0.2616%" height="15" fill="rgb(215,21,27)"/><text x="72.3519%" y="127.50"></text></g><g><title>implied_outlives_bounds (270,034 samples, 0.12%)</title><rect x="72.3704%" y="117" width="0.1221%" height="15" fill="rgb(232,23,21)"/><text x="72.6204%" y="127.50"></text></g><g><title>param_env (601,492 samples, 0.27%)</title><rect x="72.4925%" y="117" width="0.2719%" height="15" fill="rgb(244,5,23)"/><text x="72.7425%" y="127.50"></text></g><g><title>region_scope_tree (693,191 samples, 0.31%)</title><rect x="72.7944%" y="117" width="0.3134%" height="15" fill="rgb(226,81,46)"/><text x="73.0444%" y="127.50"></text></g><g><title>analysis (161,029,709 samples, 72.80%)</title><rect x="0.3857%" y="181" width="72.8045%" height="15" fill="rgb(247,70,30)"/><text x="0.6357%" y="191.50">analysis</text></g><g><title>type_check_crate (93,997,550 samples, 42.50%)</title><rect x="30.6922%" y="165" width="42.4980%" height="15" fill="rgb(212,68,19)"/><text x="30.9422%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,955,908 samples, 3.60%)</title><rect x="69.5932%" y="149" width="3.5970%" height="15" fill="rgb(240,187,13)"/><text x="69.8432%" y="159.50">wf_c..</text></g><g><title>check_item_well_formed (5,578,773 samples, 2.52%)</title><rect x="70.6679%" y="133" width="2.5223%" height="15" fill="rgb(223,113,26)"/><text x="70.9179%" y="143.50">ch..</text></g><g><title>codegen_crate (438,015 samples, 0.20%)</title><rect x="73.1936%" y="181" width="0.1980%" height="15" fill="rgb(206,192,2)"/><text x="73.4436%" y="191.50"></text></g><g><title>AST_validation (336,494 samples, 0.15%)</title><rect x="73.4756%" y="165" width="0.1521%" height="15" fill="rgb(241,108,4)"/><text x="73.7256%" y="175.50"></text></g><g><title>metadata_register_crate (2,144,534 samples, 0.97%)</title><rect x="85.5539%" y="133" width="0.9696%" height="15" fill="rgb(247,173,49)"/><text x="85.8039%" y="143.50"></text></g><g><title>metadata_register_crate (765,619 samples, 0.35%)</title><rect x="86.1774%" y="117" width="0.3462%" height="15" fill="rgb(224,114,35)"/><text x="86.4274%" y="127.50"></text></g><g><title>macro_expand_crate (28,878,622 samples, 13.06%)</title><rect x="73.7473%" y="165" width="13.0566%" height="15" fill="rgb(245,159,27)"/><text x="73.9973%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (28,856,232 samples, 13.05%)</title><rect x="73.7574%" y="149" width="13.0464%" height="15" fill="rgb(245,172,44)"/><text x="74.0074%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (620,116 samples, 0.28%)</title><rect x="86.5235%" y="133" width="0.2804%" height="15" fill="rgb(236,23,11)"/><text x="86.7735%" y="143.50"></text></g><g><title>finalize_imports (315,474 samples, 0.14%)</title><rect x="86.8289%" y="149" width="0.1426%" height="15" fill="rgb(205,117,38)"/><text x="87.0789%" y="159.50"></text></g><g><title>finalize_macro_resolutions (261,603 samples, 0.12%)</title><rect x="86.9715%" y="149" width="0.1183%" height="15" fill="rgb(237,72,25)"/><text x="87.2215%" y="159.50"></text></g><g><title>late_resolve_crate (5,275,649 samples, 2.39%)</title><rect x="87.0898%" y="149" width="2.3852%" height="15" fill="rgb(244,70,9)"/><text x="87.3398%" y="159.50">la..</text></g><g><title>configure_and_expand (35,974,492 samples, 16.26%)</title><rect x="73.3917%" y="181" width="16.2647%" height="15" fill="rgb(217,125,39)"/><text x="73.6417%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (6,262,220 samples, 2.83%)</title><rect x="86.8251%" y="165" width="2.8313%" height="15" fill="rgb(235,36,10)"/><text x="87.0751%" y="175.50">re..</text></g><g><title>drop_ast (556,487 samples, 0.25%)</title><rect x="89.6564%" y="181" width="0.2516%" height="15" fill="rgb(251,123,47)"/><text x="89.9064%" y="191.50"></text></g><g><title>early_lint_checks (1,279,364 samples, 0.58%)</title><rect x="89.9160%" y="181" width="0.5784%" height="15" fill="rgb(221,13,13)"/><text x="90.1660%" y="191.50"></text></g><g><title>free_global_ctxt (4,529,151 samples, 2.05%)</title><rect x="90.4945%" y="181" width="2.0477%" height="15" fill="rgb(238,131,9)"/><text x="90.7445%" y="191.50">f..</text></g><g><title>generate_crate_metadata (2,355,757 samples, 1.07%)</title><rect x="92.5422%" y="181" width="1.0651%" height="15" fill="rgb(211,50,8)"/><text x="92.7922%" y="191.50"></text></g><g><title>hir_lowering (11,731,791 samples, 5.30%)</title><rect x="93.6073%" y="181" width="5.3042%" height="15" fill="rgb(245,182,24)"/><text x="93.8573%" y="191.50">hir_lo..</text></g><g><title>parse_crate (428,255 samples, 0.19%)</title><rect x="98.9379%" y="181" width="0.1936%" height="15" fill="rgb(242,14,37)"/><text x="99.1879%" y="191.50"></text></g><g><title>prepare_outputs (300,573 samples, 0.14%)</title><rect x="99.1349%" y="181" width="0.1359%" height="15" fill="rgb(246,228,12)"/><text x="99.3849%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,108,783 samples, 0.50%)</title><rect x="99.2708%" y="181" width="0.5013%" height="15" fill="rgb(213,55,15)"/><text x="99.5208%" y="191.50"></text></g><g><title>all (221,180,982 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (221,180,982 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (409,434 samples, 0.19%)</title><rect x="99.8149%" y="181" width="0.1851%" height="15" fill="rgb(209,121,21)"/><text x="100.0649%" y="191.50"></text></g></svg></svg>