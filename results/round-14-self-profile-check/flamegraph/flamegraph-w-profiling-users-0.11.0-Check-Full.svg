<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (572,946 samples, 0.29%)</title><rect x="13.7878%" y="165" width="0.2920%" height="15" fill="rgb(227,0,7)"/><text x="14.0378%" y="175.50"></text></g><g><title>item_attrs (408,855 samples, 0.21%)</title><rect x="14.6151%" y="133" width="0.2084%" height="15" fill="rgb(217,0,24)"/><text x="14.8651%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (395,375 samples, 0.20%)</title><rect x="14.6220%" y="117" width="0.2015%" height="15" fill="rgb(221,193,54)"/><text x="14.8720%" y="127.50"></text></g><g><title>codegen_fn_attrs (575,056 samples, 0.29%)</title><rect x="14.5448%" y="149" width="0.2931%" height="15" fill="rgb(248,212,6)"/><text x="14.7948%" y="159.50"></text></g><g><title>adt_drop_tys (322,743 samples, 0.16%)</title><rect x="17.5539%" y="101" width="0.1645%" height="15" fill="rgb(208,68,35)"/><text x="17.8039%" y="111.50"></text></g><g><title>adt_drop_tys (679,230 samples, 0.35%)</title><rect x="17.5258%" y="117" width="0.3462%" height="15" fill="rgb(232,128,0)"/><text x="17.7758%" y="127.50"></text></g><g><title>is_copy_raw (1,070,735 samples, 0.55%)</title><rect x="17.8720%" y="117" width="0.5458%" height="15" fill="rgb(207,160,47)"/><text x="18.1220%" y="127.50"></text></g><g><title>evaluate_obligation (848,683 samples, 0.43%)</title><rect x="17.9852%" y="101" width="0.4326%" height="15" fill="rgb(228,23,34)"/><text x="18.2352%" y="111.50"></text></g><g><title>needs_drop_raw (1,949,968 samples, 0.99%)</title><rect x="17.4253%" y="133" width="0.9940%" height="15" fill="rgb(218,30,26)"/><text x="17.6753%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (494,972 samples, 0.25%)</title><rect x="18.6297%" y="117" width="0.2523%" height="15" fill="rgb(220,122,19)"/><text x="18.8797%" y="127.50"></text></g><g><title>impl_parent (244,564 samples, 0.12%)</title><rect x="19.1778%" y="101" width="0.1247%" height="15" fill="rgb(250,228,42)"/><text x="19.4278%" y="111.50"></text></g><g><title>specialization_graph_of (1,228,132 samples, 0.63%)</title><rect x="18.9297%" y="117" width="0.6260%" height="15" fill="rgb(240,193,28)"/><text x="19.1797%" y="127.50"></text></g><g><title>impl_trait_ref (496,753 samples, 0.25%)</title><rect x="19.3025%" y="101" width="0.2532%" height="15" fill="rgb(216,20,37)"/><text x="19.5525%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (394,553 samples, 0.20%)</title><rect x="19.3546%" y="85" width="0.2011%" height="15" fill="rgb(206,188,39)"/><text x="19.6046%" y="95.50"></text></g><g><title>resolve_instance (2,374,144 samples, 1.21%)</title><rect x="18.4192%" y="133" width="1.2102%" height="15" fill="rgb(217,207,13)"/><text x="18.6692%" y="143.50"></text></g><g><title>thir_body (2,051,373 samples, 1.05%)</title><rect x="19.6565%" y="133" width="1.0456%" height="15" fill="rgb(231,73,38)"/><text x="19.9065%" y="143.50"></text></g><g><title>mir_const (15,053,554 samples, 7.67%)</title><rect x="13.0464%" y="181" width="7.6732%" height="15" fill="rgb(225,20,46)"/><text x="13.2964%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (13,026,142 samples, 6.64%)</title><rect x="14.0798%" y="165" width="6.6398%" height="15" fill="rgb(210,31,41)"/><text x="14.3298%" y="175.50">unsafety_..</text></g><g><title>mir_built (11,538,799 samples, 5.88%)</title><rect x="14.8379%" y="149" width="5.8817%" height="15" fill="rgb(221,200,47)"/><text x="15.0879%" y="159.50">mir_bui..</text></g><g><title>mir_promoted (16,666,057 samples, 8.50%)</title><rect x="12.2573%" y="197" width="8.4952%" height="15" fill="rgb(226,26,5)"/><text x="12.5073%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,032,813 samples, 0.53%)</title><rect x="20.7525%" y="197" width="0.5265%" height="15" fill="rgb(249,33,26)"/><text x="21.0025%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (688,606 samples, 0.35%)</title><rect x="21.2790%" y="197" width="0.3510%" height="15" fill="rgb(235,183,28)"/><text x="21.5290%" y="207.50"></text></g><g><title>normalize_projection_ty (403,804 samples, 0.21%)</title><rect x="21.4242%" y="181" width="0.2058%" height="15" fill="rgb(221,5,38)"/><text x="21.6742%" y="191.50"></text></g><g><title>type_op_normalize_predicate (259,844 samples, 0.13%)</title><rect x="21.6300%" y="197" width="0.1325%" height="15" fill="rgb(247,18,42)"/><text x="21.8800%" y="207.50"></text></g><g><title>type_op_prove_predicate (3,707,187 samples, 1.89%)</title><rect x="21.7643%" y="197" width="1.8897%" height="15" fill="rgb(241,131,45)"/><text x="22.0143%" y="207.50">t..</text></g><g><title>evaluate_obligation (246,462 samples, 0.13%)</title><rect x="23.5284%" y="181" width="0.1256%" height="15" fill="rgb(249,31,29)"/><text x="23.7784%" y="191.50"></text></g><g><title>MIR_borrow_checking (45,267,940 samples, 23.07%)</title><rect x="0.5844%" y="229" width="23.0744%" height="15" fill="rgb(225,111,53)"/><text x="0.8344%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (45,057,468 samples, 22.97%)</title><rect x="0.6917%" y="213" width="22.9671%" height="15" fill="rgb(238,160,17)"/><text x="0.9417%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (247,753 samples, 0.13%)</title><rect x="23.6958%" y="229" width="0.1263%" height="15" fill="rgb(214,148,48)"/><text x="23.9458%" y="239.50"></text></g><g><title>should_inherit_track_caller (214,454 samples, 0.11%)</title><rect x="24.0709%" y="181" width="0.1093%" height="15" fill="rgb(232,36,49)"/><text x="24.3209%" y="191.50"></text></g><g><title>codegen_fn_attrs (364,127 samples, 0.19%)</title><rect x="24.0026%" y="197" width="0.1856%" height="15" fill="rgb(209,103,24)"/><text x="24.2526%" y="207.50"></text></g><g><title>check_mod_attrs (692,689 samples, 0.35%)</title><rect x="23.8352%" y="213" width="0.3531%" height="15" fill="rgb(229,88,8)"/><text x="24.0852%" y="223.50"></text></g><g><title>lookup_deprecation_entry (209,092 samples, 0.11%)</title><rect x="24.4458%" y="197" width="0.1066%" height="15" fill="rgb(213,181,19)"/><text x="24.6958%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (527,456 samples, 0.27%)</title><rect x="24.3284%" y="213" width="0.2689%" height="15" fill="rgb(254,191,54)"/><text x="24.5784%" y="223.50"></text></g><g><title>misc_checking_1 (1,605,818 samples, 0.82%)</title><rect x="23.8224%" y="229" width="0.8185%" height="15" fill="rgb(241,83,37)"/><text x="24.0724%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (840,290 samples, 0.43%)</title><rect x="24.6417%" y="213" width="0.4283%" height="15" fill="rgb(233,36,39)"/><text x="24.8917%" y="223.50"></text></g><g><title>check_mod_liveness (691,467 samples, 0.35%)</title><rect x="24.7175%" y="197" width="0.3525%" height="15" fill="rgb(226,3,54)"/><text x="24.9675%" y="207.50"></text></g><g><title>misc_checking_2 (1,662,069 samples, 0.85%)</title><rect x="24.6409%" y="229" width="0.8472%" height="15" fill="rgb(245,192,40)"/><text x="24.8909%" y="239.50"></text></g><g><title>match_checking (820,399 samples, 0.42%)</title><rect x="25.0700%" y="213" width="0.4182%" height="15" fill="rgb(238,167,29)"/><text x="25.3200%" y="223.50"></text></g><g><title>check_match (771,979 samples, 0.39%)</title><rect x="25.0947%" y="197" width="0.3935%" height="15" fill="rgb(232,182,51)"/><text x="25.3447%" y="207.50"></text></g><g><title>check_private_in_public (286,133 samples, 0.15%)</title><rect x="25.4922%" y="213" width="0.1459%" height="15" fill="rgb(231,60,39)"/><text x="25.7422%" y="223.50"></text></g><g><title>death_checking (652,498 samples, 0.33%)</title><rect x="25.6380%" y="213" width="0.3326%" height="15" fill="rgb(208,69,12)"/><text x="25.8880%" y="223.50"></text></g><g><title>param_env (582,397 samples, 0.30%)</title><rect x="26.4894%" y="181" width="0.2969%" height="15" fill="rgb(235,93,37)"/><text x="26.7394%" y="191.50"></text></g><g><title>predicates_of (255,444 samples, 0.13%)</title><rect x="26.6561%" y="165" width="0.1302%" height="15" fill="rgb(213,116,39)"/><text x="26.9061%" y="175.50"></text></g><g><title>predicates_defined_on (205,874 samples, 0.10%)</title><rect x="26.6814%" y="149" width="0.1049%" height="15" fill="rgb(222,207,29)"/><text x="26.9314%" y="159.50"></text></g><g><title>crate_lints (3,012,154 samples, 1.54%)</title><rect x="25.9713%" y="197" width="1.5354%" height="15" fill="rgb(206,96,30)"/><text x="26.2213%" y="207.50"></text></g><g><title>type_of (1,360,546 samples, 0.69%)</title><rect x="26.8132%" y="181" width="0.6935%" height="15" fill="rgb(218,138,4)"/><text x="27.0632%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (879,879 samples, 0.45%)</title><rect x="27.0582%" y="165" width="0.4485%" height="15" fill="rgb(250,191,14)"/><text x="27.3082%" y="175.50"></text></g><g><title>lint_checking (3,747,372 samples, 1.91%)</title><rect x="25.9706%" y="213" width="1.9101%" height="15" fill="rgb(239,60,40)"/><text x="26.2206%" y="223.50">l..</text></g><g><title>module_lints (733,838 samples, 0.37%)</title><rect x="27.5067%" y="197" width="0.3741%" height="15" fill="rgb(206,27,48)"/><text x="27.7567%" y="207.50"></text></g><g><title>lint_mod (726,128 samples, 0.37%)</title><rect x="27.5106%" y="181" width="0.3701%" height="15" fill="rgb(225,35,8)"/><text x="27.7606%" y="191.50"></text></g><g><title>privacy_access_levels (513,516 samples, 0.26%)</title><rect x="27.8808%" y="213" width="0.2618%" height="15" fill="rgb(250,213,24)"/><text x="28.1308%" y="223.50"></text></g><g><title>privacy_checking_modules (1,367,756 samples, 0.70%)</title><rect x="28.1425%" y="213" width="0.6972%" height="15" fill="rgb(247,123,22)"/><text x="28.3925%" y="223.50"></text></g><g><title>check_mod_privacy (1,363,016 samples, 0.69%)</title><rect x="28.1449%" y="197" width="0.6948%" height="15" fill="rgb(231,138,38)"/><text x="28.3949%" y="207.50"></text></g><g><title>misc_checking_3 (6,593,155 samples, 3.36%)</title><rect x="25.4882%" y="229" width="3.3607%" height="15" fill="rgb(231,145,46)"/><text x="25.7382%" y="239.50">mis..</text></g><g><title>impl_parent (1,642,086 samples, 0.84%)</title><rect x="30.0516%" y="165" width="0.8370%" height="15" fill="rgb(251,118,11)"/><text x="30.3016%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,049,690 samples, 0.54%)</title><rect x="30.3535%" y="149" width="0.5351%" height="15" fill="rgb(217,147,25)"/><text x="30.6035%" y="159.50"></text></g><g><title>impl_trait_ref (4,617,149 samples, 2.35%)</title><rect x="30.8886%" y="165" width="2.3535%" height="15" fill="rgb(247,81,37)"/><text x="31.1386%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,774,517 samples, 1.92%)</title><rect x="31.3181%" y="149" width="1.9240%" height="15" fill="rgb(209,12,38)"/><text x="31.5681%" y="159.50">m..</text></g><g><title>coherent_trait (8,973,291 samples, 4.57%)</title><rect x="28.9147%" y="197" width="4.5740%" height="15" fill="rgb(227,1,9)"/><text x="29.1647%" y="207.50">coher..</text></g><g><title>specialization_graph_of (8,959,071 samples, 4.57%)</title><rect x="28.9220%" y="181" width="4.5667%" height="15" fill="rgb(248,47,43)"/><text x="29.1720%" y="191.50">speci..</text></g><g><title>trait_impls_of (482,275 samples, 0.25%)</title><rect x="33.2428%" y="165" width="0.2458%" height="15" fill="rgb(221,10,30)"/><text x="33.4928%" y="175.50"></text></g><g><title>coherence_checking (9,054,392 samples, 4.62%)</title><rect x="28.9055%" y="213" width="4.6153%" height="15" fill="rgb(210,229,1)"/><text x="29.1555%" y="223.50">coher..</text></g><g><title>associated_item (741,791 samples, 0.38%)</title><rect x="49.8342%" y="149" width="0.3781%" height="15" fill="rgb(222,148,37)"/><text x="50.0842%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (593,578 samples, 0.30%)</title><rect x="49.9098%" y="133" width="0.3026%" height="15" fill="rgb(234,67,33)"/><text x="50.1598%" y="143.50"></text></g><g><title>associated_items (1,075,854 samples, 0.55%)</title><rect x="49.6941%" y="165" width="0.5484%" height="15" fill="rgb(247,98,35)"/><text x="49.9441%" y="175.50"></text></g><g><title>adt_dtorck_constraint (241,332 samples, 0.12%)</title><rect x="50.5405%" y="133" width="0.1230%" height="15" fill="rgb(247,138,52)"/><text x="50.7905%" y="143.50"></text></g><g><title>adt_dtorck_constraint (420,756 samples, 0.21%)</title><rect x="50.4641%" y="149" width="0.2145%" height="15" fill="rgb(213,79,30)"/><text x="50.7141%" y="159.50"></text></g><g><title>dropck_outlives (769,960 samples, 0.39%)</title><rect x="50.2913%" y="165" width="0.3925%" height="15" fill="rgb(246,177,23)"/><text x="50.5413%" y="175.50"></text></g><g><title>predicates_of (243,065 samples, 0.12%)</title><rect x="51.8911%" y="149" width="0.1239%" height="15" fill="rgb(230,62,27)"/><text x="52.1411%" y="159.50"></text></g><g><title>trait_impls_of (352,703 samples, 0.18%)</title><rect x="52.1034%" y="149" width="0.1798%" height="15" fill="rgb(216,154,8)"/><text x="52.3534%" y="159.50"></text></g><g><title>evaluate_obligation (3,140,409 samples, 1.60%)</title><rect x="50.6838%" y="165" width="1.6008%" height="15" fill="rgb(244,35,45)"/><text x="50.9338%" y="175.50"></text></g><g><title>generics_of (1,282,216 samples, 0.65%)</title><rect x="52.3985%" y="165" width="0.6536%" height="15" fill="rgb(251,115,12)"/><text x="52.6485%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (982,043 samples, 0.50%)</title><rect x="52.5515%" y="149" width="0.5006%" height="15" fill="rgb(240,54,50)"/><text x="52.8015%" y="159.50"></text></g><g><title>item_attrs (230,102 samples, 0.12%)</title><rect x="53.1694%" y="165" width="0.1173%" height="15" fill="rgb(233,84,52)"/><text x="53.4194%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (216,972 samples, 0.11%)</title><rect x="53.1761%" y="149" width="0.1106%" height="15" fill="rgb(207,117,47)"/><text x="53.4261%" y="159.50"></text></g><g><title>evaluate_obligation (447,652 samples, 0.23%)</title><rect x="53.5326%" y="149" width="0.2282%" height="15" fill="rgb(249,43,39)"/><text x="53.7826%" y="159.50"></text></g><g><title>method_autoderef_steps (871,080 samples, 0.44%)</title><rect x="53.3323%" y="165" width="0.4440%" height="15" fill="rgb(209,38,44)"/><text x="53.5823%" y="175.50"></text></g><g><title>explicit_predicates_of (199,202 samples, 0.10%)</title><rect x="54.0667%" y="133" width="0.1015%" height="15" fill="rgb(236,212,23)"/><text x="54.3167%" y="143.50"></text></g><g><title>predicates_of (884,926 samples, 0.45%)</title><rect x="53.8826%" y="165" width="0.4511%" height="15" fill="rgb(242,79,21)"/><text x="54.1326%" y="175.50"></text></g><g><title>predicates_defined_on (683,675 samples, 0.35%)</title><rect x="53.9851%" y="149" width="0.3485%" height="15" fill="rgb(211,96,35)"/><text x="54.2351%" y="159.50"></text></g><g><title>inferred_outlives_of (324,552 samples, 0.17%)</title><rect x="54.1682%" y="133" width="0.1654%" height="15" fill="rgb(253,215,40)"/><text x="54.4182%" y="143.50"></text></g><g><title>dropck_outlives (225,914 samples, 0.12%)</title><rect x="61.0858%" y="149" width="0.1152%" height="15" fill="rgb(211,81,21)"/><text x="61.3358%" y="159.50"></text></g><g><title>impl_trait_ref (307,253 samples, 0.16%)</title><rect x="61.8642%" y="133" width="0.1566%" height="15" fill="rgb(208,190,38)"/><text x="62.1142%" y="143.50"></text></g><g><title>evaluate_obligation (1,878,366 samples, 0.96%)</title><rect x="61.2010%" y="149" width="0.9575%" height="15" fill="rgb(235,213,38)"/><text x="61.4510%" y="159.50"></text></g><g><title>is_copy_raw (312,593 samples, 0.16%)</title><rect x="62.2618%" y="149" width="0.1593%" height="15" fill="rgb(237,122,38)"/><text x="62.5118%" y="159.50"></text></g><g><title>evaluate_obligation (268,923 samples, 0.14%)</title><rect x="62.2840%" y="133" width="0.1371%" height="15" fill="rgb(244,218,35)"/><text x="62.5340%" y="143.50"></text></g><g><title>method_autoderef_steps (537,038 samples, 0.27%)</title><rect x="62.4441%" y="149" width="0.2737%" height="15" fill="rgb(240,68,47)"/><text x="62.6941%" y="159.50"></text></g><g><title>evaluate_obligation (249,776 samples, 0.13%)</title><rect x="62.5906%" y="133" width="0.1273%" height="15" fill="rgb(210,16,53)"/><text x="62.8406%" y="143.50"></text></g><g><title>typeck (16,458,945 samples, 8.39%)</title><rect x="54.4799%" y="165" width="8.3896%" height="15" fill="rgb(235,124,12)"/><text x="54.7299%" y="175.50">typeck</text></g><g><title>item_bodies_checking (57,625,930 samples, 29.37%)</title><rect x="33.5406%" y="213" width="29.3737%" height="15" fill="rgb(224,169,11)"/><text x="33.7906%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,623,079 samples, 29.37%)</title><rect x="33.5420%" y="197" width="29.3722%" height="15" fill="rgb(250,166,2)"/><text x="33.7920%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (57,496,858 samples, 29.31%)</title><rect x="33.6064%" y="181" width="29.3079%" height="15" fill="rgb(242,216,29)"/><text x="33.8564%" y="191.50">typeck</text></g><g><title>needs_drop_raw (239,513 samples, 0.12%)</title><rect x="63.9729%" y="85" width="0.1221%" height="15" fill="rgb(230,116,27)"/><text x="64.2229%" y="95.50"></text></g><g><title>is_copy_raw (235,123 samples, 0.12%)</title><rect x="63.9751%" y="69" width="0.1198%" height="15" fill="rgb(228,99,48)"/><text x="64.2251%" y="79.50"></text></g><g><title>evaluate_obligation (227,563 samples, 0.12%)</title><rect x="63.9790%" y="53" width="0.1160%" height="15" fill="rgb(253,11,6)"/><text x="64.2290%" y="63.50"></text></g><g><title>specialization_graph_of (667,317 samples, 0.34%)</title><rect x="64.1123%" y="69" width="0.3402%" height="15" fill="rgb(247,143,39)"/><text x="64.3623%" y="79.50"></text></g><g><title>impl_trait_ref (321,294 samples, 0.16%)</title><rect x="64.2886%" y="53" width="0.1638%" height="15" fill="rgb(236,97,10)"/><text x="64.5386%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (266,343 samples, 0.14%)</title><rect x="64.3167%" y="37" width="0.1358%" height="15" fill="rgb(233,208,19)"/><text x="64.5667%" y="47.50"></text></g><g><title>resolve_instance (706,698 samples, 0.36%)</title><rect x="64.0950%" y="85" width="0.3602%" height="15" fill="rgb(216,164,2)"/><text x="64.3450%" y="95.50"></text></g><g><title>evaluate_obligation (205,524 samples, 0.10%)</title><rect x="64.8867%" y="69" width="0.1048%" height="15" fill="rgb(220,129,5)"/><text x="65.1367%" y="79.50"></text></g><g><title>mir_const (2,576,069 samples, 1.31%)</title><rect x="63.8397%" y="133" width="1.3131%" height="15" fill="rgb(242,17,10)"/><text x="64.0897%" y="143.50"></text></g><g><title>unsafety_check_result (2,490,798 samples, 1.27%)</title><rect x="63.8832%" y="117" width="1.2696%" height="15" fill="rgb(242,107,0)"/><text x="64.1332%" y="127.50"></text></g><g><title>mir_built (2,433,498 samples, 1.24%)</title><rect x="63.9124%" y="101" width="1.2404%" height="15" fill="rgb(251,28,31)"/><text x="64.1624%" y="111.50"></text></g><g><title>typeck (1,314,024 samples, 0.67%)</title><rect x="64.4830%" y="85" width="0.6698%" height="15" fill="rgb(233,223,10)"/><text x="64.7330%" y="95.50"></text></g><g><title>mir_promoted (2,667,860 samples, 1.36%)</title><rect x="63.7962%" y="149" width="1.3599%" height="15" fill="rgb(215,21,27)"/><text x="64.0462%" y="159.50"></text></g><g><title>item_types_checking (4,559,171 samples, 2.32%)</title><rect x="62.9142%" y="213" width="2.3239%" height="15" fill="rgb(232,23,21)"/><text x="63.1642%" y="223.50">i..</text></g><g><title>check_mod_item_types (4,551,391 samples, 2.32%)</title><rect x="62.9182%" y="197" width="2.3200%" height="15" fill="rgb(244,5,23)"/><text x="63.1682%" y="207.50">c..</text></g><g><title>type_of (3,465,950 samples, 1.77%)</title><rect x="63.4715%" y="181" width="1.7667%" height="15" fill="rgb(226,81,46)"/><text x="63.7215%" y="191.50"></text></g><g><title>mir_borrowck (3,439,999 samples, 1.75%)</title><rect x="63.4847%" y="165" width="1.7535%" height="15" fill="rgb(247,70,30)"/><text x="63.7347%" y="175.50"></text></g><g><title>late_bound_vars_map (243,251 samples, 0.12%)</title><rect x="65.5514%" y="165" width="0.1240%" height="15" fill="rgb(212,68,19)"/><text x="65.8014%" y="175.50"></text></g><g><title>resolve_lifetimes (215,861 samples, 0.11%)</title><rect x="65.5654%" y="149" width="0.1100%" height="15" fill="rgb(240,187,13)"/><text x="65.8154%" y="159.50"></text></g><g><title>fn_sig (529,297 samples, 0.27%)</title><rect x="65.4214%" y="181" width="0.2698%" height="15" fill="rgb(223,113,26)"/><text x="65.6714%" y="191.50"></text></g><g><title>is_late_bound_map (255,603 samples, 0.13%)</title><rect x="65.7642%" y="165" width="0.1303%" height="15" fill="rgb(206,192,2)"/><text x="66.0142%" y="175.50"></text></g><g><title>resolve_lifetimes (249,753 samples, 0.13%)</title><rect x="65.7672%" y="149" width="0.1273%" height="15" fill="rgb(241,108,4)"/><text x="66.0172%" y="159.50"></text></g><g><title>lint_levels (215,332 samples, 0.11%)</title><rect x="65.7847%" y="133" width="0.1098%" height="15" fill="rgb(247,173,49)"/><text x="66.0347%" y="143.50"></text></g><g><title>named_region_map (372,146 samples, 0.19%)</title><rect x="65.8945%" y="165" width="0.1897%" height="15" fill="rgb(224,114,35)"/><text x="66.1445%" y="175.50"></text></g><g><title>resolve_lifetimes (340,806 samples, 0.17%)</title><rect x="65.9105%" y="149" width="0.1737%" height="15" fill="rgb(245,159,27)"/><text x="66.1605%" y="159.50"></text></g><g><title>generics_of (788,479 samples, 0.40%)</title><rect x="65.6912%" y="181" width="0.4019%" height="15" fill="rgb(245,172,44)"/><text x="65.9412%" y="191.50"></text></g><g><title>predicates_of (618,077 samples, 0.32%)</title><rect x="66.1096%" y="181" width="0.3151%" height="15" fill="rgb(236,23,11)"/><text x="66.3596%" y="191.50"></text></g><g><title>predicates_defined_on (557,736 samples, 0.28%)</title><rect x="66.1404%" y="165" width="0.2843%" height="15" fill="rgb(205,117,38)"/><text x="66.3904%" y="175.50"></text></g><g><title>inferred_outlives_of (304,814 samples, 0.16%)</title><rect x="66.2693%" y="149" width="0.1554%" height="15" fill="rgb(237,72,25)"/><text x="66.5193%" y="159.50"></text></g><g><title>inferred_outlives_crate (281,533 samples, 0.14%)</title><rect x="66.2812%" y="133" width="0.1435%" height="15" fill="rgb(244,70,9)"/><text x="66.5312%" y="143.50"></text></g><g><title>type_collecting (2,427,808 samples, 1.24%)</title><rect x="65.2409%" y="213" width="1.2375%" height="15" fill="rgb(217,125,39)"/><text x="65.4909%" y="223.50"></text></g><g><title>collect_mod_item_types (2,415,218 samples, 1.23%)</title><rect x="65.2474%" y="197" width="1.2311%" height="15" fill="rgb(235,36,10)"/><text x="65.4974%" y="207.50"></text></g><g><title>adt_sized_constraint (213,704 samples, 0.11%)</title><rect x="67.5210%" y="165" width="0.1089%" height="15" fill="rgb(251,123,47)"/><text x="67.7710%" y="175.50"></text></g><g><title>evaluate_obligation (533,168 samples, 0.27%)</title><rect x="67.3878%" y="181" width="0.2718%" height="15" fill="rgb(221,13,13)"/><text x="67.6378%" y="191.50"></text></g><g><title>param_env (259,513 samples, 0.13%)</title><rect x="67.7346%" y="181" width="0.1323%" height="15" fill="rgb(238,131,9)"/><text x="67.9846%" y="191.50"></text></g><g><title>region_scope_tree (332,682 samples, 0.17%)</title><rect x="67.8754%" y="181" width="0.1696%" height="15" fill="rgb(211,50,8)"/><text x="68.1254%" y="191.50"></text></g><g><title>check_impl_item_well_formed (2,826,385 samples, 1.44%)</title><rect x="66.6148%" y="197" width="1.4407%" height="15" fill="rgb(245,182,24)"/><text x="66.8648%" y="207.50"></text></g><g><title>adt_sized_constraint (275,683 samples, 0.14%)</title><rect x="68.7600%" y="149" width="0.1405%" height="15" fill="rgb(242,14,37)"/><text x="69.0100%" y="159.50"></text></g><g><title>evaluate_obligation (637,116 samples, 0.32%)</title><rect x="68.5778%" y="181" width="0.3248%" height="15" fill="rgb(246,228,12)"/><text x="68.8278%" y="191.50"></text></g><g><title>adt_sized_constraint (382,484 samples, 0.19%)</title><rect x="68.7076%" y="165" width="0.1950%" height="15" fill="rgb(213,55,15)"/><text x="68.9576%" y="175.50"></text></g><g><title>param_env (306,665 samples, 0.16%)</title><rect x="68.9665%" y="181" width="0.1563%" height="15" fill="rgb(209,9,3)"/><text x="69.2165%" y="191.50"></text></g><g><title>region_scope_tree (284,971 samples, 0.15%)</title><rect x="69.1510%" y="181" width="0.1453%" height="15" fill="rgb(230,59,30)"/><text x="69.4010%" y="191.50"></text></g><g><title>check_item_well_formed (2,571,416 samples, 1.31%)</title><rect x="68.0554%" y="197" width="1.3107%" height="15" fill="rgb(209,121,21)"/><text x="68.3054%" y="207.50"></text></g><g><title>analysis (136,272,678 samples, 69.46%)</title><rect x="0.3833%" y="245" width="69.4623%" height="15" fill="rgb(220,109,13)"/><text x="0.6333%" y="255.50">analysis</text></g><g><title>type_check_crate (80,428,278 samples, 41.00%)</title><rect x="28.8489%" y="229" width="40.9967%" height="15" fill="rgb(232,18,1)"/><text x="29.0989%" y="239.50">type_check_crate</text></g><g><title>wf_checking (6,598,195 samples, 3.36%)</title><rect x="66.4823%" y="213" width="3.3633%" height="15" fill="rgb(215,41,42)"/><text x="66.7323%" y="223.50">wf_..</text></g><g><title>check_trait_item_well_formed (940,511 samples, 0.48%)</title><rect x="69.3662%" y="197" width="0.4794%" height="15" fill="rgb(224,123,36)"/><text x="69.6162%" y="207.50"></text></g><g><title>codegen_crate (375,494 samples, 0.19%)</title><rect x="69.8503%" y="245" width="0.1914%" height="15" fill="rgb(240,125,3)"/><text x="70.1003%" y="255.50"></text></g><g><title>AST_validation (212,143 samples, 0.11%)</title><rect x="70.1496%" y="229" width="0.1081%" height="15" fill="rgb(205,98,50)"/><text x="70.3996%" y="239.50"></text></g><g><title>metadata_load_macro (263,282 samples, 0.13%)</title><rect x="89.9269%" y="197" width="0.1342%" height="15" fill="rgb(205,185,37)"/><text x="90.1769%" y="207.50"></text></g><g><title>metadata_register_crate (2,845,311 samples, 1.45%)</title><rect x="90.0611%" y="197" width="1.4503%" height="15" fill="rgb(238,207,15)"/><text x="90.3111%" y="207.50"></text></g><g><title>metadata_register_crate (978,340 samples, 0.50%)</title><rect x="91.0127%" y="181" width="0.4987%" height="15" fill="rgb(213,199,42)"/><text x="91.2627%" y="191.50"></text></g><g><title>macro_expand_crate (42,198,806 samples, 21.51%)</title><rect x="70.3449%" y="229" width="21.5100%" height="15" fill="rgb(235,201,11)"/><text x="70.5949%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (42,186,405 samples, 21.50%)</title><rect x="70.3512%" y="213" width="21.5037%" height="15" fill="rgb(207,46,11)"/><text x="70.6012%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (673,718 samples, 0.34%)</title><rect x="91.5114%" y="197" width="0.3434%" height="15" fill="rgb(241,35,35)"/><text x="91.7614%" y="207.50"></text></g><g><title>late_resolve_crate (2,317,016 samples, 1.18%)</title><rect x="92.0593%" y="213" width="1.1811%" height="15" fill="rgb(243,32,47)"/><text x="92.3093%" y="223.50"></text></g><g><title>configure_and_expand (45,705,385 samples, 23.30%)</title><rect x="70.0417%" y="245" width="23.2974%" height="15" fill="rgb(247,202,23)"/><text x="70.2917%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,791,211 samples, 1.42%)</title><rect x="91.9163%" y="229" width="1.4228%" height="15" fill="rgb(219,102,11)"/><text x="92.1663%" y="239.50"></text></g><g><title>drop_ast (257,013 samples, 0.13%)</title><rect x="93.3391%" y="245" width="0.1310%" height="15" fill="rgb(243,110,44)"/><text x="93.5891%" y="255.50"></text></g><g><title>early_lint_checks (591,496 samples, 0.30%)</title><rect x="93.4773%" y="245" width="0.3015%" height="15" fill="rgb(222,74,54)"/><text x="93.7273%" y="255.50"></text></g><g><title>free_global_ctxt (4,283,079 samples, 2.18%)</title><rect x="93.7788%" y="245" width="2.1832%" height="15" fill="rgb(216,99,12)"/><text x="94.0288%" y="255.50">f..</text></g><g><title>generate_crate_metadata (1,330,455 samples, 0.68%)</title><rect x="95.9621%" y="245" width="0.6782%" height="15" fill="rgb(226,22,26)"/><text x="96.2121%" y="255.50"></text></g><g><title>hir_lowering (4,227,258 samples, 2.15%)</title><rect x="96.6402%" y="245" width="2.1548%" height="15" fill="rgb(217,163,10)"/><text x="96.8902%" y="255.50">h..</text></g><g><title>parse_crate (597,157 samples, 0.30%)</title><rect x="98.8193%" y="245" width="0.3044%" height="15" fill="rgb(213,25,53)"/><text x="99.0693%" y="255.50"></text></g><g><title>prepare_outputs (202,623 samples, 0.10%)</title><rect x="99.1281%" y="245" width="0.1033%" height="15" fill="rgb(252,105,26)"/><text x="99.3781%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,038,532 samples, 0.53%)</title><rect x="99.2314%" y="245" width="0.5294%" height="15" fill="rgb(220,39,43)"/><text x="99.4814%" y="255.50"></text></g><g><title>all (196,182,324 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (196,182,324 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (382,624 samples, 0.20%)</title><rect x="99.8050%" y="245" width="0.1950%" height="15" fill="rgb(223,20,43)"/><text x="100.0550%" y="255.50"></text></g></svg></svg>