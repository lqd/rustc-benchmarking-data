<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_const (5,524,404 samples, 0.53%)</title><rect x="10.6840%" y="117" width="0.5253%" height="15" fill="rgb(227,0,7)"/><text x="10.9340%" y="127.50"></text></g><g><title>unsafety_check_result (4,881,756 samples, 0.46%)</title><rect x="10.7451%" y="101" width="0.4642%" height="15" fill="rgb(217,0,24)"/><text x="10.9951%" y="111.50"></text></g><g><title>mir_built (4,401,780 samples, 0.42%)</title><rect x="10.7907%" y="85" width="0.4185%" height="15" fill="rgb(221,193,54)"/><text x="11.0407%" y="95.50"></text></g><g><title>thir_body (9,172,804 samples, 0.87%)</title><rect x="13.7049%" y="53" width="0.8722%" height="15" fill="rgb(248,212,6)"/><text x="13.9549%" y="63.50"></text></g><g><title>mir_const (33,069,161 samples, 3.14%)</title><rect x="11.4330%" y="101" width="3.1444%" height="15" fill="rgb(208,68,35)"/><text x="11.6830%" y="111.50">mir..</text></g><g><title>unsafety_check_result (29,234,459 samples, 2.78%)</title><rect x="11.7977%" y="85" width="2.7798%" height="15" fill="rgb(232,128,0)"/><text x="12.0477%" y="95.50">un..</text></g><g><title>mir_built (26,664,369 samples, 2.54%)</title><rect x="12.0420%" y="69" width="2.5354%" height="15" fill="rgb(207,160,47)"/><text x="12.2920%" y="79.50">mi..</text></g><g><title>mir_promoted (45,857,330 samples, 4.36%)</title><rect x="10.2171%" y="133" width="4.3604%" height="15" fill="rgb(228,23,34)"/><text x="10.4671%" y="143.50">mir_p..</text></g><g><title>mir_const_qualif (35,422,511 samples, 3.37%)</title><rect x="11.2093%" y="117" width="3.3682%" height="15" fill="rgb(218,30,26)"/><text x="11.4593%" y="127.50">mir..</text></g><g><title>type_op_prove_predicate (1,157,951 samples, 0.11%)</title><rect x="14.6674%" y="133" width="0.1101%" height="15" fill="rgb(220,122,19)"/><text x="14.9174%" y="143.50"></text></g><g><title>MIR_borrow_checking (152,875,864 samples, 14.54%)</title><rect x="0.2428%" y="165" width="14.5363%" height="15" fill="rgb(250,228,42)"/><text x="0.4928%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (152,764,822 samples, 14.53%)</title><rect x="0.2534%" y="149" width="14.5257%" height="15" fill="rgb(240,193,28)"/><text x="0.5034%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (57,651,880 samples, 5.48%)</title><rect x="14.7791%" y="165" width="5.4819%" height="15" fill="rgb(216,20,37)"/><text x="15.0291%" y="175.50">MIR_eff..</text></g><g><title>mir_drops_elaborated_and_const_checked (57,551,299 samples, 5.47%)</title><rect x="14.7886%" y="149" width="5.4723%" height="15" fill="rgb(206,188,39)"/><text x="15.0386%" y="159.50">mir_dro..</text></g><g><title>check_mod_attrs (1,699,000 samples, 0.16%)</title><rect x="20.3350%" y="149" width="0.1616%" height="15" fill="rgb(217,207,13)"/><text x="20.5850%" y="159.50"></text></g><g><title>misc_checking_1 (3,177,746 samples, 0.30%)</title><rect x="20.3329%" y="165" width="0.3022%" height="15" fill="rgb(231,73,38)"/><text x="20.5829%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,981,943 samples, 0.19%)</title><rect x="20.6352%" y="149" width="0.1885%" height="15" fill="rgb(225,20,46)"/><text x="20.8852%" y="159.50"></text></g><g><title>check_mod_liveness (1,421,696 samples, 0.14%)</title><rect x="20.6885%" y="133" width="0.1352%" height="15" fill="rgb(210,31,41)"/><text x="20.9385%" y="143.50"></text></g><g><title>misc_checking_2 (3,255,907 samples, 0.31%)</title><rect x="20.6350%" y="165" width="0.3096%" height="15" fill="rgb(221,200,47)"/><text x="20.8850%" y="175.50"></text></g><g><title>match_checking (1,272,054 samples, 0.12%)</title><rect x="20.8237%" y="149" width="0.1210%" height="15" fill="rgb(226,26,5)"/><text x="21.0737%" y="159.50"></text></g><g><title>check_match (1,234,653 samples, 0.12%)</title><rect x="20.8272%" y="133" width="0.1174%" height="15" fill="rgb(249,33,26)"/><text x="21.0772%" y="143.50"></text></g><g><title>death_checking (1,218,394 samples, 0.12%)</title><rect x="20.9784%" y="149" width="0.1159%" height="15" fill="rgb(235,183,28)"/><text x="21.2284%" y="159.50"></text></g><g><title>mir_for_ctfe (3,599,441 samples, 0.34%)</title><rect x="23.4656%" y="85" width="0.3423%" height="15" fill="rgb(221,5,38)"/><text x="23.7156%" y="95.50"></text></g><g><title>eval_to_allocation_raw (25,132,624 samples, 2.39%)</title><rect x="21.4245%" y="117" width="2.3897%" height="15" fill="rgb(247,18,42)"/><text x="21.6745%" y="127.50">ev..</text></g><g><title>eval_to_allocation_raw (25,123,544 samples, 2.39%)</title><rect x="21.4254%" y="101" width="2.3889%" height="15" fill="rgb(241,131,45)"/><text x="21.6754%" y="111.50">ev..</text></g><g><title>crate_lints (29,282,341 samples, 2.78%)</title><rect x="21.0947%" y="133" width="2.7843%" height="15" fill="rgb(249,31,29)"/><text x="21.3447%" y="143.50">cr..</text></g><g><title>lint_checking (33,746,861 samples, 3.21%)</title><rect x="21.0943%" y="149" width="3.2088%" height="15" fill="rgb(225,111,53)"/><text x="21.3443%" y="159.50">lin..</text></g><g><title>module_lints (4,459,910 samples, 0.42%)</title><rect x="23.8790%" y="133" width="0.4241%" height="15" fill="rgb(238,160,17)"/><text x="24.1290%" y="143.50"></text></g><g><title>lint_mod (4,450,450 samples, 0.42%)</title><rect x="23.8799%" y="117" width="0.4232%" height="15" fill="rgb(214,148,48)"/><text x="24.1299%" y="127.50"></text></g><g><title>privacy_access_levels (1,288,235 samples, 0.12%)</title><rect x="24.3031%" y="149" width="0.1225%" height="15" fill="rgb(232,36,49)"/><text x="24.5531%" y="159.50"></text></g><g><title>privacy_checking_modules (3,634,971 samples, 0.35%)</title><rect x="24.4256%" y="149" width="0.3456%" height="15" fill="rgb(209,103,24)"/><text x="24.6756%" y="159.50"></text></g><g><title>check_mod_privacy (3,630,421 samples, 0.35%)</title><rect x="24.4260%" y="133" width="0.3452%" height="15" fill="rgb(229,88,8)"/><text x="24.6760%" y="143.50"></text></g><g><title>misc_checking_3 (40,272,184 samples, 3.83%)</title><rect x="20.9446%" y="165" width="3.8293%" height="15" fill="rgb(213,181,19)"/><text x="21.1946%" y="175.50">misc..</text></g><g><title>impl_trait_ref (1,387,762 samples, 0.13%)</title><rect x="24.9424%" y="101" width="0.1320%" height="15" fill="rgb(254,191,54)"/><text x="25.1924%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,168,519 samples, 0.11%)</title><rect x="24.9632%" y="85" width="0.1111%" height="15" fill="rgb(241,83,37)"/><text x="25.2132%" y="95.50"></text></g><g><title>coherent_trait (3,360,479 samples, 0.32%)</title><rect x="24.7836%" y="133" width="0.3195%" height="15" fill="rgb(233,36,39)"/><text x="25.0336%" y="143.50"></text></g><g><title>specialization_graph_of (3,272,218 samples, 0.31%)</title><rect x="24.7920%" y="117" width="0.3111%" height="15" fill="rgb(226,3,54)"/><text x="25.0420%" y="127.50"></text></g><g><title>coherence_checking (3,409,079 samples, 0.32%)</title><rect x="24.7821%" y="149" width="0.3242%" height="15" fill="rgb(245,192,40)"/><text x="25.0321%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,428,866 samples, 0.14%)</title><rect x="70.9844%" y="85" width="0.1359%" height="15" fill="rgb(238,167,29)"/><text x="71.2344%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,408,476 samples, 0.13%)</title><rect x="70.9864%" y="69" width="0.1339%" height="15" fill="rgb(232,182,51)"/><text x="71.2364%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,374,306 samples, 0.13%)</title><rect x="70.9896%" y="53" width="0.1307%" height="15" fill="rgb(231,60,39)"/><text x="71.2396%" y="63.50"></text></g><g><title>evaluate_obligation (6,024,654 samples, 0.57%)</title><rect x="70.7206%" y="101" width="0.5729%" height="15" fill="rgb(208,69,12)"/><text x="70.9706%" y="111.50"></text></g><g><title>item_bodies_checking (487,209,385 samples, 46.33%)</title><rect x="25.1086%" y="149" width="46.3265%" height="15" fill="rgb(235,93,37)"/><text x="25.3586%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (487,205,505 samples, 46.33%)</title><rect x="25.1089%" y="133" width="46.3262%" height="15" fill="rgb(213,116,39)"/><text x="25.3589%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (487,130,824 samples, 46.32%)</title><rect x="25.1160%" y="117" width="46.3191%" height="15" fill="rgb(222,207,29)"/><text x="25.3660%" y="127.50">typeck</text></g><g><title>mir_borrowck (1,762,761 samples, 0.17%)</title><rect x="71.7923%" y="37" width="0.1676%" height="15" fill="rgb(206,96,30)"/><text x="72.0423%" y="47.50"></text></g><g><title>mir_for_ctfe (2,684,021 samples, 0.26%)</title><rect x="71.7058%" y="69" width="0.2552%" height="15" fill="rgb(218,138,4)"/><text x="71.9558%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,454,088 samples, 0.23%)</title><rect x="71.7276%" y="53" width="0.2333%" height="15" fill="rgb(250,191,14)"/><text x="71.9776%" y="63.50"></text></g><g><title>eval_to_const_value_raw (5,256,309 samples, 0.50%)</title><rect x="71.5648%" y="117" width="0.4998%" height="15" fill="rgb(239,60,40)"/><text x="71.8148%" y="127.50"></text></g><g><title>eval_to_const_value_raw (5,215,158 samples, 0.50%)</title><rect x="71.5687%" y="101" width="0.4959%" height="15" fill="rgb(206,27,48)"/><text x="71.8187%" y="111.50"></text></g><g><title>eval_to_allocation_raw (5,150,718 samples, 0.49%)</title><rect x="71.5749%" y="85" width="0.4898%" height="15" fill="rgb(225,35,8)"/><text x="71.8249%" y="95.50"></text></g><g><title>typeck (1,083,399 samples, 0.10%)</title><rect x="71.9616%" y="69" width="0.1030%" height="15" fill="rgb(250,213,24)"/><text x="72.2116%" y="79.50"></text></g><g><title>fn_sig (1,132,760 samples, 0.11%)</title><rect x="72.0646%" y="117" width="0.1077%" height="15" fill="rgb(247,123,22)"/><text x="72.3146%" y="127.50"></text></g><g><title>is_late_bound_map (1,064,413 samples, 0.10%)</title><rect x="72.1829%" y="101" width="0.1012%" height="15" fill="rgb(231,138,38)"/><text x="72.4329%" y="111.50"></text></g><g><title>resolve_lifetimes (1,055,793 samples, 0.10%)</title><rect x="72.1837%" y="85" width="0.1004%" height="15" fill="rgb(231,145,46)"/><text x="72.4337%" y="95.50"></text></g><g><title>generics_of (1,299,367 samples, 0.12%)</title><rect x="72.1723%" y="117" width="0.1236%" height="15" fill="rgb(251,118,11)"/><text x="72.4223%" y="127.50"></text></g><g><title>type_collecting (9,467,327 samples, 0.90%)</title><rect x="71.5054%" y="149" width="0.9002%" height="15" fill="rgb(217,147,25)"/><text x="71.7554%" y="159.50"></text></g><g><title>collect_mod_item_types (9,456,857 samples, 0.90%)</title><rect x="71.5064%" y="133" width="0.8992%" height="15" fill="rgb(247,81,37)"/><text x="71.7564%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,710,579 samples, 0.16%)</title><rect x="72.4468%" y="133" width="0.1627%" height="15" fill="rgb(209,12,38)"/><text x="72.6968%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,698,508 samples, 0.16%)</title><rect x="72.6775%" y="117" width="0.1615%" height="15" fill="rgb(227,1,9)"/><text x="72.9275%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,694,348 samples, 0.16%)</title><rect x="72.6779%" y="101" width="0.1611%" height="15" fill="rgb(248,47,43)"/><text x="72.9279%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,688,518 samples, 0.16%)</title><rect x="72.6784%" y="85" width="0.1606%" height="15" fill="rgb(221,10,30)"/><text x="72.9284%" y="95.50"></text></g><g><title>region_scope_tree (2,129,613 samples, 0.20%)</title><rect x="72.9193%" y="117" width="0.2025%" height="15" fill="rgb(210,229,1)"/><text x="73.1693%" y="127.50"></text></g><g><title>check_item_well_formed (5,494,431 samples, 0.52%)</title><rect x="72.6095%" y="133" width="0.5224%" height="15" fill="rgb(222,148,37)"/><text x="72.8595%" y="143.50"></text></g><g><title>analysis (768,862,991 samples, 73.11%)</title><rect x="0.0607%" y="181" width="73.1077%" height="15" fill="rgb(234,67,33)"/><text x="0.3107%" y="191.50">analysis</text></g><g><title>type_check_crate (508,957,540 samples, 48.39%)</title><rect x="24.7739%" y="165" width="48.3945%" height="15" fill="rgb(247,98,35)"/><text x="25.0239%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,012,960 samples, 0.76%)</title><rect x="72.4065%" y="149" width="0.7619%" height="15" fill="rgb(247,138,52)"/><text x="72.6565%" y="159.50"></text></g><g><title>macro_expand_crate (222,373,858 samples, 21.14%)</title><rect x="73.2998%" y="165" width="21.1445%" height="15" fill="rgb(213,79,30)"/><text x="73.5498%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (222,360,408 samples, 21.14%)</title><rect x="73.3011%" y="149" width="21.1432%" height="15" fill="rgb(246,177,23)"/><text x="73.5511%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (10,231,625 samples, 0.97%)</title><rect x="94.4879%" y="149" width="0.9729%" height="15" fill="rgb(230,62,27)"/><text x="94.7379%" y="159.50"></text></g><g><title>configure_and_expand (235,000,020 samples, 22.35%)</title><rect x="73.2044%" y="181" width="22.3451%" height="15" fill="rgb(216,154,8)"/><text x="73.4544%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (11,380,308 samples, 1.08%)</title><rect x="94.4674%" y="165" width="1.0821%" height="15" fill="rgb(244,35,45)"/><text x="94.7174%" y="175.50"></text></g><g><title>drop_ast (1,342,005 samples, 0.13%)</title><rect x="95.5495%" y="181" width="0.1276%" height="15" fill="rgb(251,115,12)"/><text x="95.7995%" y="191.50"></text></g><g><title>early_lint_checks (3,164,676 samples, 0.30%)</title><rect x="95.6793%" y="181" width="0.3009%" height="15" fill="rgb(240,54,50)"/><text x="95.9293%" y="191.50"></text></g><g><title>free_global_ctxt (9,406,617 samples, 0.89%)</title><rect x="95.9802%" y="181" width="0.8944%" height="15" fill="rgb(233,84,52)"/><text x="96.2302%" y="191.50"></text></g><g><title>generate_crate_metadata (10,587,480 samples, 1.01%)</title><rect x="96.8747%" y="181" width="1.0067%" height="15" fill="rgb(207,117,47)"/><text x="97.1247%" y="191.50"></text></g><g><title>hir_lowering (16,351,445 samples, 1.55%)</title><rect x="97.8814%" y="181" width="1.5548%" height="15" fill="rgb(249,43,39)"/><text x="98.1314%" y="191.50"></text></g><g><title>parse_crate (3,602,361 samples, 0.34%)</title><rect x="99.4423%" y="181" width="0.3425%" height="15" fill="rgb(209,38,44)"/><text x="99.6923%" y="191.50"></text></g><g><title>all (1,051,685,101 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,051,685,101 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,210,794 samples, 0.12%)</title><rect x="99.8849%" y="181" width="0.1151%" height="15" fill="rgb(211,96,35)"/><text x="100.1349%" y="191.50"></text></g></svg></svg>