<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (9,288,335 samples, 0.54%)</title><rect x="23.6391%" y="85" width="0.5377%" height="15" fill="rgb(227,0,7)"/><text x="23.8891%" y="95.50"></text></g><g><title>is_copy_raw (7,109,591 samples, 0.41%)</title><rect x="23.7652%" y="69" width="0.4116%" height="15" fill="rgb(217,0,24)"/><text x="24.0152%" y="79.50"></text></g><g><title>evaluate_obligation (5,767,548 samples, 0.33%)</title><rect x="23.8429%" y="53" width="0.3339%" height="15" fill="rgb(221,193,54)"/><text x="24.0929%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (2,120,544 samples, 0.12%)</title><rect x="24.2848%" y="69" width="0.1228%" height="15" fill="rgb(248,212,6)"/><text x="24.5348%" y="79.50"></text></g><g><title>resolve_instance (4,963,509 samples, 0.29%)</title><rect x="24.1783%" y="85" width="0.2873%" height="15" fill="rgb(208,68,35)"/><text x="24.4283%" y="95.50"></text></g><g><title>thir_body (27,058,950 samples, 1.57%)</title><rect x="24.4856%" y="85" width="1.5664%" height="15" fill="rgb(232,128,0)"/><text x="24.7356%" y="95.50"></text></g><g><title>mir_const (134,366,802 samples, 7.78%)</title><rect x="18.2899%" y="133" width="7.7784%" height="15" fill="rgb(207,160,47)"/><text x="18.5399%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (117,847,165 samples, 6.82%)</title><rect x="19.2462%" y="117" width="6.8221%" height="15" fill="rgb(228,23,34)"/><text x="19.4962%" y="127.50">unsafety_..</text></g><g><title>mir_built (107,278,322 samples, 6.21%)</title><rect x="19.8580%" y="101" width="6.2102%" height="15" fill="rgb(218,30,26)"/><text x="20.1080%" y="111.50">mir_built</text></g><g><title>mir_promoted (150,474,960 samples, 8.71%)</title><rect x="17.4307%" y="149" width="8.7109%" height="15" fill="rgb(220,122,19)"/><text x="17.6807%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,922,495 samples, 0.23%)</title><rect x="26.1422%" y="149" width="0.2271%" height="15" fill="rgb(250,228,42)"/><text x="26.3922%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (5,673,033 samples, 0.33%)</title><rect x="26.3692%" y="149" width="0.3284%" height="15" fill="rgb(240,193,28)"/><text x="26.6192%" y="159.50"></text></g><g><title>normalize_projection_ty (3,719,496 samples, 0.22%)</title><rect x="26.4823%" y="133" width="0.2153%" height="15" fill="rgb(216,20,37)"/><text x="26.7323%" y="143.50"></text></g><g><title>type_op_normalize_predicate (3,032,928 samples, 0.18%)</title><rect x="26.6976%" y="149" width="0.1756%" height="15" fill="rgb(206,188,39)"/><text x="26.9476%" y="159.50"></text></g><g><title>type_op_normalize_ty (1,951,696 samples, 0.11%)</title><rect x="26.8732%" y="149" width="0.1130%" height="15" fill="rgb(217,207,13)"/><text x="27.1232%" y="159.50"></text></g><g><title>type_op_prove_predicate (19,804,576 samples, 1.15%)</title><rect x="26.9862%" y="149" width="1.1465%" height="15" fill="rgb(231,73,38)"/><text x="27.2362%" y="159.50"></text></g><g><title>MIR_borrow_checking (479,861,958 samples, 27.78%)</title><rect x="0.3596%" y="181" width="27.7788%" height="15" fill="rgb(225,20,46)"/><text x="0.6096%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (478,189,973 samples, 27.68%)</title><rect x="0.4564%" y="165" width="27.6820%" height="15" fill="rgb(210,31,41)"/><text x="0.7064%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (2,914,122 samples, 0.17%)</title><rect x="28.1971%" y="181" width="0.1687%" height="15" fill="rgb(221,200,47)"/><text x="28.4471%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,486,000 samples, 0.14%)</title><rect x="28.6557%" y="149" width="0.1439%" height="15" fill="rgb(226,26,5)"/><text x="28.9057%" y="159.50"></text></g><g><title>check_mod_attrs (7,399,855 samples, 0.43%)</title><rect x="28.3712%" y="165" width="0.4284%" height="15" fill="rgb(249,33,26)"/><text x="28.6212%" y="175.50"></text></g><g><title>check_mod_loops (1,909,855 samples, 0.11%)</title><rect x="28.8954%" y="165" width="0.1106%" height="15" fill="rgb(235,183,28)"/><text x="29.1454%" y="175.50"></text></g><g><title>lint_levels (6,154,630 samples, 0.36%)</title><rect x="29.1197%" y="149" width="0.3563%" height="15" fill="rgb(221,5,38)"/><text x="29.3697%" y="159.50"></text></g><g><title>lookup_deprecation_entry (2,644,719 samples, 0.15%)</title><rect x="29.4760%" y="149" width="0.1531%" height="15" fill="rgb(247,18,42)"/><text x="29.7260%" y="159.50"></text></g><g><title>stability_index (2,473,858 samples, 0.14%)</title><rect x="29.4859%" y="133" width="0.1432%" height="15" fill="rgb(241,131,45)"/><text x="29.7359%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (10,793,352 samples, 0.62%)</title><rect x="29.0151%" y="165" width="0.6248%" height="15" fill="rgb(249,31,29)"/><text x="29.2651%" y="175.50"></text></g><g><title>misc_checking_1 (22,396,232 samples, 1.30%)</title><rect x="28.3658%" y="181" width="1.2965%" height="15" fill="rgb(225,111,53)"/><text x="28.6158%" y="191.50"></text></g><g><title>check_mod_intrinsics (2,123,023 samples, 0.12%)</title><rect x="29.6649%" y="149" width="0.1229%" height="15" fill="rgb(238,160,17)"/><text x="29.9149%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (10,740,301 samples, 0.62%)</title><rect x="29.6625%" y="165" width="0.6217%" height="15" fill="rgb(214,148,48)"/><text x="29.9125%" y="175.50"></text></g><g><title>check_mod_liveness (8,574,708 samples, 0.50%)</title><rect x="29.7878%" y="149" width="0.4964%" height="15" fill="rgb(232,36,49)"/><text x="30.0378%" y="159.50"></text></g><g><title>misc_checking_2 (56,186,643 samples, 3.25%)</title><rect x="29.6623%" y="181" width="3.2526%" height="15" fill="rgb(209,103,24)"/><text x="29.9123%" y="191.50">mis..</text></g><g><title>match_checking (45,442,892 samples, 2.63%)</title><rect x="30.2842%" y="165" width="2.6306%" height="15" fill="rgb(229,88,8)"/><text x="30.5342%" y="175.50">ma..</text></g><g><title>check_match (44,645,225 samples, 2.58%)</title><rect x="30.3304%" y="149" width="2.5845%" height="15" fill="rgb(213,181,19)"/><text x="30.5804%" y="159.50">ch..</text></g><g><title>check_private_in_public (4,684,684 samples, 0.27%)</title><rect x="32.9162%" y="165" width="0.2712%" height="15" fill="rgb(254,191,54)"/><text x="33.1662%" y="175.50"></text></g><g><title>death_checking (7,376,913 samples, 0.43%)</title><rect x="33.1874%" y="165" width="0.4270%" height="15" fill="rgb(241,83,37)"/><text x="33.4374%" y="175.50"></text></g><g><title>param_env (2,103,600 samples, 0.12%)</title><rect x="34.2451%" y="133" width="0.1218%" height="15" fill="rgb(233,36,39)"/><text x="34.4951%" y="143.50"></text></g><g><title>crate_lints (14,714,395 samples, 0.85%)</title><rect x="33.6146%" y="149" width="0.8518%" height="15" fill="rgb(226,3,54)"/><text x="33.8646%" y="159.50"></text></g><g><title>lint_checking (28,148,807 samples, 1.63%)</title><rect x="33.6144%" y="165" width="1.6295%" height="15" fill="rgb(245,192,40)"/><text x="33.8644%" y="175.50"></text></g><g><title>module_lints (13,430,472 samples, 0.78%)</title><rect x="34.4664%" y="149" width="0.7775%" height="15" fill="rgb(238,167,29)"/><text x="34.7164%" y="159.50"></text></g><g><title>lint_mod (13,401,182 samples, 0.78%)</title><rect x="34.4681%" y="133" width="0.7758%" height="15" fill="rgb(232,182,51)"/><text x="34.7181%" y="143.50"></text></g><g><title>privacy_access_levels (8,808,208 samples, 0.51%)</title><rect x="35.2439%" y="165" width="0.5099%" height="15" fill="rgb(231,60,39)"/><text x="35.4939%" y="175.50"></text></g><g><title>privacy_checking_modules (21,217,730 samples, 1.23%)</title><rect x="35.7538%" y="165" width="1.2283%" height="15" fill="rgb(208,69,12)"/><text x="36.0038%" y="175.50"></text></g><g><title>check_mod_privacy (21,189,880 samples, 1.23%)</title><rect x="35.7554%" y="149" width="1.2267%" height="15" fill="rgb(235,93,37)"/><text x="36.0054%" y="159.50"></text></g><g><title>misc_checking_3 (70,428,304 samples, 4.08%)</title><rect x="32.9149%" y="181" width="4.0770%" height="15" fill="rgb(213,116,39)"/><text x="33.1649%" y="191.50">misc..</text></g><g><title>impl_parent (3,305,721 samples, 0.19%)</title><rect x="37.4511%" y="117" width="0.1914%" height="15" fill="rgb(222,207,29)"/><text x="37.7011%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,808,086 samples, 0.10%)</title><rect x="37.5378%" y="101" width="0.1047%" height="15" fill="rgb(206,96,30)"/><text x="37.7878%" y="111.50"></text></g><g><title>impl_trait_ref (6,287,890 samples, 0.36%)</title><rect x="37.6425%" y="117" width="0.3640%" height="15" fill="rgb(218,138,4)"/><text x="37.8925%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,998,596 samples, 0.29%)</title><rect x="37.7171%" y="101" width="0.2894%" height="15" fill="rgb(250,191,14)"/><text x="37.9671%" y="111.50"></text></g><g><title>coherent_trait (17,087,262 samples, 0.99%)</title><rect x="37.0838%" y="149" width="0.9892%" height="15" fill="rgb(239,60,40)"/><text x="37.3338%" y="159.50"></text></g><g><title>specialization_graph_of (15,821,106 samples, 0.92%)</title><rect x="37.1571%" y="133" width="0.9159%" height="15" fill="rgb(206,27,48)"/><text x="37.4071%" y="143.50"></text></g><g><title>coherence_checking (17,542,637 samples, 1.02%)</title><rect x="37.0821%" y="165" width="1.0155%" height="15" fill="rgb(225,35,8)"/><text x="37.3321%" y="175.50"></text></g><g><title>dropck_outlives (3,178,675 samples, 0.18%)</title><rect x="63.5639%" y="117" width="0.1840%" height="15" fill="rgb(250,213,24)"/><text x="63.8139%" y="127.50"></text></g><g><title>impl_trait_ref (1,728,555 samples, 0.10%)</title><rect x="64.4674%" y="101" width="0.1001%" height="15" fill="rgb(247,123,22)"/><text x="64.7174%" y="111.50"></text></g><g><title>specializes (2,508,595 samples, 0.15%)</title><rect x="64.6640%" y="101" width="0.1452%" height="15" fill="rgb(231,138,38)"/><text x="64.9140%" y="111.50"></text></g><g><title>evaluate_obligation (18,562,945 samples, 1.07%)</title><rect x="63.7700%" y="117" width="1.0746%" height="15" fill="rgb(231,145,46)"/><text x="64.0200%" y="127.50"></text></g><g><title>generics_of (1,811,379 samples, 0.10%)</title><rect x="64.8703%" y="117" width="0.1049%" height="15" fill="rgb(251,118,11)"/><text x="65.1203%" y="127.50"></text></g><g><title>method_autoderef_steps (1,813,705 samples, 0.10%)</title><rect x="65.0388%" y="117" width="0.1050%" height="15" fill="rgb(217,147,25)"/><text x="65.2888%" y="127.50"></text></g><g><title>evaluate_obligation (2,849,835 samples, 0.16%)</title><rect x="80.2910%" y="101" width="0.1650%" height="15" fill="rgb(247,81,37)"/><text x="80.5410%" y="111.50"></text></g><g><title>typeck (265,125,047 samples, 15.35%)</title><rect x="65.2654%" y="117" width="15.3479%" height="15" fill="rgb(209,12,38)"/><text x="65.5154%" y="127.50">typeck</text></g><g><title>item_bodies_checking (734,344,687 samples, 42.51%)</title><rect x="38.1232%" y="165" width="42.5106%" height="15" fill="rgb(227,1,9)"/><text x="38.3732%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (734,340,266 samples, 42.51%)</title><rect x="38.1235%" y="149" width="42.5103%" height="15" fill="rgb(248,47,43)"/><text x="38.3735%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (733,090,814 samples, 42.44%)</title><rect x="38.1958%" y="133" width="42.4380%" height="15" fill="rgb(221,10,30)"/><text x="38.4458%" y="143.50">typeck</text></g><g><title>mir_borrowck (1,796,940 samples, 0.10%)</title><rect x="81.5869%" y="101" width="0.1040%" height="15" fill="rgb(210,229,1)"/><text x="81.8369%" y="111.50"></text></g><g><title>mir_built (10,336,816 samples, 0.60%)</title><rect x="81.7208%" y="53" width="0.5984%" height="15" fill="rgb(222,148,37)"/><text x="81.9708%" y="63.50"></text></g><g><title>typeck (9,127,892 samples, 0.53%)</title><rect x="81.7908%" y="37" width="0.5284%" height="15" fill="rgb(234,67,33)"/><text x="82.0408%" y="47.50"></text></g><g><title>mir_const (11,444,308 samples, 0.66%)</title><rect x="81.7003%" y="85" width="0.6625%" height="15" fill="rgb(247,98,35)"/><text x="81.9503%" y="95.50"></text></g><g><title>unsafety_check_result (11,193,116 samples, 0.65%)</title><rect x="81.7148%" y="69" width="0.6480%" height="15" fill="rgb(247,138,52)"/><text x="81.9648%" y="79.50"></text></g><g><title>mir_promoted (11,618,670 samples, 0.67%)</title><rect x="81.6909%" y="101" width="0.6726%" height="15" fill="rgb(213,79,30)"/><text x="81.9409%" y="111.50"></text></g><g><title>type_of (17,322,764 samples, 1.00%)</title><rect x="81.4264%" y="133" width="1.0028%" height="15" fill="rgb(246,177,23)"/><text x="81.6764%" y="143.50"></text></g><g><title>mir_borrowck (17,285,944 samples, 1.00%)</title><rect x="81.4286%" y="117" width="1.0007%" height="15" fill="rgb(230,62,27)"/><text x="81.6786%" y="127.50"></text></g><g><title>specializes (2,086,910 samples, 0.12%)</title><rect x="82.8314%" y="101" width="0.1208%" height="15" fill="rgb(216,154,8)"/><text x="83.0814%" y="111.50"></text></g><g><title>evaluate_obligation (7,550,237 samples, 0.44%)</title><rect x="82.5221%" y="117" width="0.4371%" height="15" fill="rgb(244,35,45)"/><text x="82.7721%" y="127.50"></text></g><g><title>item_types_checking (40,500,576 samples, 2.34%)</title><rect x="80.6338%" y="165" width="2.3445%" height="15" fill="rgb(251,115,12)"/><text x="80.8838%" y="175.50">i..</text></g><g><title>check_mod_item_types (40,462,976 samples, 2.34%)</title><rect x="80.6360%" y="149" width="2.3424%" height="15" fill="rgb(240,54,50)"/><text x="80.8860%" y="159.50">c..</text></g><g><title>typeck (9,485,167 samples, 0.55%)</title><rect x="82.4292%" y="133" width="0.5491%" height="15" fill="rgb(233,84,52)"/><text x="82.6792%" y="143.50"></text></g><g><title>fn_sig (2,842,916 samples, 0.16%)</title><rect x="83.2021%" y="133" width="0.1646%" height="15" fill="rgb(207,117,47)"/><text x="83.4521%" y="143.50"></text></g><g><title>is_late_bound_map (4,000,347 samples, 0.23%)</title><rect x="83.4483%" y="117" width="0.2316%" height="15" fill="rgb(249,43,39)"/><text x="83.6983%" y="127.50"></text></g><g><title>resolve_lifetimes (3,772,685 samples, 0.22%)</title><rect x="83.4614%" y="101" width="0.2184%" height="15" fill="rgb(209,38,44)"/><text x="83.7114%" y="111.50"></text></g><g><title>named_region_map (1,816,410 samples, 0.11%)</title><rect x="83.6798%" y="117" width="0.1052%" height="15" fill="rgb(236,212,23)"/><text x="83.9298%" y="127.50"></text></g><g><title>generics_of (7,353,262 samples, 0.43%)</title><rect x="83.3667%" y="133" width="0.4257%" height="15" fill="rgb(242,79,21)"/><text x="83.6167%" y="143.50"></text></g><g><title>explicit_predicates_of (1,950,425 samples, 0.11%)</title><rect x="83.9352%" y="101" width="0.1129%" height="15" fill="rgb(211,96,35)"/><text x="84.1852%" y="111.50"></text></g><g><title>predicates_of (6,358,019 samples, 0.37%)</title><rect x="83.8148%" y="133" width="0.3681%" height="15" fill="rgb(253,215,40)"/><text x="84.0648%" y="143.50"></text></g><g><title>predicates_defined_on (5,573,329 samples, 0.32%)</title><rect x="83.8602%" y="117" width="0.3226%" height="15" fill="rgb(211,81,21)"/><text x="84.1102%" y="127.50"></text></g><g><title>inferred_outlives_of (2,328,033 samples, 0.13%)</title><rect x="84.0481%" y="101" width="0.1348%" height="15" fill="rgb(208,190,38)"/><text x="84.2981%" y="111.50"></text></g><g><title>inferred_outlives_crate (2,062,283 samples, 0.12%)</title><rect x="84.0635%" y="85" width="0.1194%" height="15" fill="rgb(235,213,38)"/><text x="84.3135%" y="95.50"></text></g><g><title>type_collecting (22,060,139 samples, 1.28%)</title><rect x="82.9795%" y="165" width="1.2770%" height="15" fill="rgb(237,122,38)"/><text x="83.2295%" y="175.50"></text></g><g><title>collect_mod_item_types (22,009,528 samples, 1.27%)</title><rect x="82.9824%" y="149" width="1.2741%" height="15" fill="rgb(244,218,35)"/><text x="83.2324%" y="159.50"></text></g><g><title>evaluate_obligation (4,068,270 samples, 0.24%)</title><rect x="85.7726%" y="133" width="0.2355%" height="15" fill="rgb(240,68,47)"/><text x="86.0226%" y="143.50"></text></g><g><title>implied_outlives_bounds (2,318,506 samples, 0.13%)</title><rect x="86.0185%" y="133" width="0.1342%" height="15" fill="rgb(210,16,53)"/><text x="86.2685%" y="143.50"></text></g><g><title>param_env (3,279,144 samples, 0.19%)</title><rect x="86.1539%" y="133" width="0.1898%" height="15" fill="rgb(235,124,12)"/><text x="86.4039%" y="143.50"></text></g><g><title>region_scope_tree (8,708,787 samples, 0.50%)</title><rect x="86.3466%" y="133" width="0.5041%" height="15" fill="rgb(224,169,11)"/><text x="86.5966%" y="143.50"></text></g><g><title>check_impl_item_well_formed (42,122,531 samples, 2.44%)</title><rect x="84.4183%" y="149" width="2.4384%" height="15" fill="rgb(250,166,2)"/><text x="84.6683%" y="159.50">ch..</text></g><g><title>param_env (1,981,151 samples, 0.11%)</title><rect x="87.6569%" y="133" width="0.1147%" height="15" fill="rgb(242,216,29)"/><text x="87.9069%" y="143.50"></text></g><g><title>check_item_well_formed (17,125,226 samples, 0.99%)</title><rect x="86.8568%" y="149" width="0.9914%" height="15" fill="rgb(230,116,27)"/><text x="87.1068%" y="159.50"></text></g><g><title>analysis (1,517,535,313 samples, 87.85%)</title><rect x="0.0721%" y="197" width="87.8488%" height="15" fill="rgb(228,99,48)"/><text x="0.3221%" y="207.50">analysis</text></g><g><title>type_check_crate (879,768,255 samples, 50.93%)</title><rect x="36.9919%" y="181" width="50.9290%" height="15" fill="rgb(253,11,6)"/><text x="37.2419%" y="191.50">type_check_crate</text></g><g><title>wf_checking (63,145,412 samples, 3.66%)</title><rect x="84.2655%" y="165" width="3.6554%" height="15" fill="rgb(247,143,39)"/><text x="84.5155%" y="175.50">wf_c..</text></g><g><title>AST_validation (1,933,932 samples, 0.11%)</title><rect x="87.9519%" y="181" width="0.1120%" height="15" fill="rgb(236,97,10)"/><text x="88.2019%" y="191.50"></text></g><g><title>macro_expand_crate (76,924,817 samples, 4.45%)</title><rect x="88.1653%" y="181" width="4.4531%" height="15" fill="rgb(233,208,19)"/><text x="88.4153%" y="191.50">macro..</text></g><g><title>expand_crate (76,897,377 samples, 4.45%)</title><rect x="88.1669%" y="165" width="4.4515%" height="15" fill="rgb(216,164,2)"/><text x="88.4169%" y="175.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (2,013,018 samples, 0.12%)</title><rect x="92.5019%" y="149" width="0.1165%" height="15" fill="rgb(220,129,5)"/><text x="92.7519%" y="159.50"></text></g><g><title>late_resolve_crate (23,355,572 samples, 1.35%)</title><rect x="92.6892%" y="165" width="1.3520%" height="15" fill="rgb(242,17,10)"/><text x="92.9392%" y="175.50"></text></g><g><title>resolve_check_unused (1,761,090 samples, 0.10%)</title><rect x="94.0546%" y="165" width="0.1019%" height="15" fill="rgb(242,107,0)"/><text x="94.3046%" y="175.50"></text></g><g><title>configure_and_expand (108,692,755 samples, 6.29%)</title><rect x="87.9438%" y="197" width="6.2921%" height="15" fill="rgb(251,28,31)"/><text x="88.1938%" y="207.50">configur..</text></g><g><title>resolve_crate (27,902,524 samples, 1.62%)</title><rect x="92.6207%" y="181" width="1.6153%" height="15" fill="rgb(233,223,10)"/><text x="92.8707%" y="191.50"></text></g><g><title>drop_ast (4,668,992 samples, 0.27%)</title><rect x="94.2359%" y="197" width="0.2703%" height="15" fill="rgb(215,21,27)"/><text x="94.4859%" y="207.50"></text></g><g><title>early_lint_checks (7,031,599 samples, 0.41%)</title><rect x="94.5075%" y="197" width="0.4071%" height="15" fill="rgb(232,23,21)"/><text x="94.7575%" y="207.50"></text></g><g><title>free_global_ctxt (13,220,489 samples, 0.77%)</title><rect x="94.9145%" y="197" width="0.7653%" height="15" fill="rgb(244,5,23)"/><text x="95.1645%" y="207.50"></text></g><g><title>generate_crate_metadata (15,795,018 samples, 0.91%)</title><rect x="95.6799%" y="197" width="0.9144%" height="15" fill="rgb(226,81,46)"/><text x="95.9299%" y="207.50"></text></g><g><title>hir_lowering (53,505,203 samples, 3.10%)</title><rect x="96.5942%" y="197" width="3.0974%" height="15" fill="rgb(247,70,30)"/><text x="96.8442%" y="207.50">hir..</text></g><g><title>self_profile_alloc_query_strings (3,447,978 samples, 0.20%)</title><rect x="99.7247%" y="197" width="0.1996%" height="15" fill="rgb(212,68,19)"/><text x="99.9747%" y="207.50"></text></g><g><title>all (1,727,440,318 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,727,440,318 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>