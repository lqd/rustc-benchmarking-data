<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (68,252 samples, 0.11%)</title><rect x="4.7688%" y="165" width="0.1120%" height="15" fill="rgb(227,0,7)"/><text x="5.0188%" y="175.50"></text></g><g><title>is_copy_raw (68,801 samples, 0.11%)</title><rect x="5.5750%" y="117" width="0.1129%" height="15" fill="rgb(217,0,24)"/><text x="5.8250%" y="127.50"></text></g><g><title>evaluate_obligation (62,921 samples, 0.10%)</title><rect x="5.5846%" y="101" width="0.1032%" height="15" fill="rgb(221,193,54)"/><text x="5.8346%" y="111.50"></text></g><g><title>adt_drop_tys (162,241 samples, 0.27%)</title><rect x="5.4579%" y="133" width="0.2662%" height="15" fill="rgb(248,212,6)"/><text x="5.7079%" y="143.50"></text></g><g><title>is_copy_raw (262,365 samples, 0.43%)</title><rect x="5.7241%" y="133" width="0.4304%" height="15" fill="rgb(208,68,35)"/><text x="5.9741%" y="143.50"></text></g><g><title>evaluate_obligation (246,265 samples, 0.40%)</title><rect x="5.7505%" y="117" width="0.4040%" height="15" fill="rgb(232,128,0)"/><text x="6.0005%" y="127.50"></text></g><g><title>trait_impls_of (166,242 samples, 0.27%)</title><rect x="5.8817%" y="101" width="0.2727%" height="15" fill="rgb(207,160,47)"/><text x="6.1317%" y="111.50"></text></g><g><title>needs_drop_raw (452,216 samples, 0.74%)</title><rect x="5.4249%" y="149" width="0.7419%" height="15" fill="rgb(228,23,34)"/><text x="5.6749%" y="159.50"></text></g><g><title>specialization_graph_of (88,641 samples, 0.15%)</title><rect x="6.2991%" y="133" width="0.1454%" height="15" fill="rgb(218,30,26)"/><text x="6.5491%" y="143.50"></text></g><g><title>resolve_instance (188,852 samples, 0.31%)</title><rect x="6.1668%" y="149" width="0.3098%" height="15" fill="rgb(220,122,19)"/><text x="6.4168%" y="159.50"></text></g><g><title>thir_body (133,131 samples, 0.22%)</title><rect x="6.4806%" y="149" width="0.2184%" height="15" fill="rgb(250,228,42)"/><text x="6.7306%" y="159.50"></text></g><g><title>mir_const (1,476,535 samples, 2.42%)</title><rect x="4.2848%" y="197" width="2.4222%" height="15" fill="rgb(240,193,28)"/><text x="4.5348%" y="207.50">mi..</text></g><g><title>unsafety_check_result (1,265,764 samples, 2.08%)</title><rect x="4.6305%" y="181" width="2.0765%" height="15" fill="rgb(216,20,37)"/><text x="4.8805%" y="191.50">u..</text></g><g><title>mir_built (1,113,200 samples, 1.83%)</title><rect x="4.8808%" y="165" width="1.8262%" height="15" fill="rgb(206,188,39)"/><text x="5.1308%" y="175.50">m..</text></g><g><title>mir_promoted (1,601,256 samples, 2.63%)</title><rect x="4.0909%" y="213" width="2.6268%" height="15" fill="rgb(217,207,13)"/><text x="4.3409%" y="223.50">mi..</text></g><g><title>type_op_ascribe_user_type (77,012 samples, 0.13%)</title><rect x="6.7178%" y="213" width="0.1263%" height="15" fill="rgb(231,73,38)"/><text x="6.9678%" y="223.50"></text></g><g><title>type_op_prove_predicate (203,180 samples, 0.33%)</title><rect x="6.9401%" y="213" width="0.3333%" height="15" fill="rgb(225,20,46)"/><text x="7.1901%" y="223.50"></text></g><g><title>MIR_borrow_checking (3,502,879 samples, 5.75%)</title><rect x="1.5322%" y="245" width="5.7464%" height="15" fill="rgb(210,31,41)"/><text x="1.7822%" y="255.50">MIR_bor..</text></g><g><title>mir_borrowck (3,494,279 samples, 5.73%)</title><rect x="1.5463%" y="229" width="5.7323%" height="15" fill="rgb(221,200,47)"/><text x="1.7963%" y="239.50">mir_bor..</text></g><g><title>hir_module_items (107,921 samples, 0.18%)</title><rect x="7.2857%" y="245" width="0.1770%" height="15" fill="rgb(226,26,5)"/><text x="7.5357%" y="255.50"></text></g><g><title>get_lang_items (63,710 samples, 0.10%)</title><rect x="7.7336%" y="197" width="0.1045%" height="15" fill="rgb(249,33,26)"/><text x="7.9836%" y="207.50"></text></g><g><title>codegen_fn_attrs (80,701 samples, 0.13%)</title><rect x="7.9260%" y="181" width="0.1324%" height="15" fill="rgb(235,183,28)"/><text x="8.1760%" y="191.50"></text></g><g><title>should_inherit_track_caller (137,011 samples, 0.22%)</title><rect x="7.8381%" y="197" width="0.2248%" height="15" fill="rgb(221,5,38)"/><text x="8.0881%" y="207.50"></text></g><g><title>codegen_fn_attrs (297,103 samples, 0.49%)</title><rect x="7.6417%" y="213" width="0.4874%" height="15" fill="rgb(247,18,42)"/><text x="7.8917%" y="223.50"></text></g><g><title>check_mod_attrs (387,064 samples, 0.63%)</title><rect x="7.4946%" y="229" width="0.6350%" height="15" fill="rgb(241,131,45)"/><text x="7.7446%" y="239.50"></text></g><g><title>lookup_deprecation_entry (93,172 samples, 0.15%)</title><rect x="8.3964%" y="213" width="0.1528%" height="15" fill="rgb(249,31,29)"/><text x="8.6464%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (252,742 samples, 0.41%)</title><rect x="8.2481%" y="229" width="0.4146%" height="15" fill="rgb(225,111,53)"/><text x="8.4981%" y="239.50"></text></g><g><title>misc_checking_1 (789,299 samples, 1.29%)</title><rect x="7.4633%" y="245" width="1.2948%" height="15" fill="rgb(238,160,17)"/><text x="7.7133%" y="255.50"></text></g><g><title>misc_checking_2 (138,072 samples, 0.23%)</title><rect x="8.7581%" y="245" width="0.2265%" height="15" fill="rgb(214,148,48)"/><text x="9.0081%" y="255.50"></text></g><g><title>match_checking (76,301 samples, 0.13%)</title><rect x="8.8594%" y="229" width="0.1252%" height="15" fill="rgb(232,36,49)"/><text x="9.1094%" y="239.50"></text></g><g><title>check_match (72,691 samples, 0.12%)</title><rect x="8.8654%" y="213" width="0.1192%" height="15" fill="rgb(209,103,24)"/><text x="9.1154%" y="223.50"></text></g><g><title>codegen_fn_attrs (262,343 samples, 0.43%)</title><rect x="9.1270%" y="213" width="0.4304%" height="15" fill="rgb(229,88,8)"/><text x="9.3770%" y="223.50"></text></g><g><title>should_inherit_track_caller (254,613 samples, 0.42%)</title><rect x="9.1397%" y="197" width="0.4177%" height="15" fill="rgb(213,181,19)"/><text x="9.3897%" y="207.50"></text></g><g><title>death_checking (347,683 samples, 0.57%)</title><rect x="9.0494%" y="229" width="0.5704%" height="15" fill="rgb(254,191,54)"/><text x="9.2994%" y="239.50"></text></g><g><title>crate_lints (1,469,397 samples, 2.41%)</title><rect x="9.6219%" y="213" width="2.4105%" height="15" fill="rgb(241,83,37)"/><text x="9.8719%" y="223.50">cr..</text></g><g><title>type_of (1,016,402 samples, 1.67%)</title><rect x="10.3650%" y="197" width="1.6674%" height="15" fill="rgb(233,36,39)"/><text x="10.6150%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (772,400 samples, 1.27%)</title><rect x="10.7653%" y="181" width="1.2671%" height="15" fill="rgb(226,3,54)"/><text x="11.0153%" y="191.50"></text></g><g><title>lint_checking (1,543,328 samples, 2.53%)</title><rect x="9.6198%" y="229" width="2.5318%" height="15" fill="rgb(245,192,40)"/><text x="9.8698%" y="239.50">li..</text></g><g><title>module_lints (72,631 samples, 0.12%)</title><rect x="12.0324%" y="213" width="0.1191%" height="15" fill="rgb(238,167,29)"/><text x="12.2824%" y="223.50"></text></g><g><title>lint_mod (70,441 samples, 0.12%)</title><rect x="12.0360%" y="197" width="0.1156%" height="15" fill="rgb(232,182,51)"/><text x="12.2860%" y="207.50"></text></g><g><title>privacy_checking_modules (94,011 samples, 0.15%)</title><rect x="12.2241%" y="229" width="0.1542%" height="15" fill="rgb(231,60,39)"/><text x="12.4741%" y="239.50"></text></g><g><title>check_mod_privacy (92,791 samples, 0.15%)</title><rect x="12.2261%" y="213" width="0.1522%" height="15" fill="rgb(208,69,12)"/><text x="12.4761%" y="223.50"></text></g><g><title>misc_checking_3 (2,074,283 samples, 3.40%)</title><rect x="8.9846%" y="245" width="3.4028%" height="15" fill="rgb(235,93,37)"/><text x="9.2346%" y="255.50">mis..</text></g><g><title>impl_parent (2,070,780 samples, 3.40%)</title><rect x="17.9781%" y="181" width="3.3971%" height="15" fill="rgb(213,116,39)"/><text x="18.2281%" y="191.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,175,240 samples, 1.93%)</title><rect x="19.4472%" y="165" width="1.9280%" height="15" fill="rgb(222,207,29)"/><text x="19.6972%" y="175.50">m..</text></g><g><title>impl_trait_ref (6,535,414 samples, 10.72%)</title><rect x="21.3752%" y="181" width="10.7212%" height="15" fill="rgb(206,96,30)"/><text x="21.6252%" y="191.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,715,382 samples, 9.38%)</title><rect x="22.7204%" y="165" width="9.3760%" height="15" fill="rgb(218,138,4)"/><text x="22.9704%" y="175.50">metadata_deco..</text></g><g><title>trait_impls_of (530,625 samples, 0.87%)</title><rect x="32.1626%" y="181" width="0.8705%" height="15" fill="rgb(250,191,14)"/><text x="32.4126%" y="191.50"></text></g><g><title>implementations_of_trait (133,141 samples, 0.22%)</title><rect x="32.8147%" y="165" width="0.2184%" height="15" fill="rgb(239,60,40)"/><text x="33.0647%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (112,111 samples, 0.18%)</title><rect x="32.8492%" y="149" width="0.1839%" height="15" fill="rgb(206,27,48)"/><text x="33.0992%" y="159.50"></text></g><g><title>coherent_trait (12,532,389 samples, 20.56%)</title><rect x="12.4763%" y="213" width="20.5591%" height="15" fill="rgb(225,35,8)"/><text x="12.7263%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (12,520,609 samples, 20.54%)</title><rect x="12.4956%" y="197" width="20.5398%" height="15" fill="rgb(250,213,24)"/><text x="12.7456%" y="207.50">specialization_graph_of</text></g><g><title>coherence_checking (12,625,920 samples, 20.71%)</title><rect x="12.4336%" y="229" width="20.7126%" height="15" fill="rgb(247,123,22)"/><text x="12.6836%" y="239.50">coherence_checking</text></g><g><title>associated_item (377,154 samples, 0.62%)</title><rect x="40.9554%" y="165" width="0.6187%" height="15" fill="rgb(231,138,38)"/><text x="41.2054%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (283,523 samples, 0.47%)</title><rect x="41.1090%" y="149" width="0.4651%" height="15" fill="rgb(231,145,46)"/><text x="41.3590%" y="159.50"></text></g><g><title>associated_items (531,086 samples, 0.87%)</title><rect x="40.7287%" y="181" width="0.8712%" height="15" fill="rgb(251,118,11)"/><text x="40.9787%" y="191.50"></text></g><g><title>adt_def (76,030 samples, 0.12%)</title><rect x="42.1230%" y="85" width="0.1247%" height="15" fill="rgb(217,147,25)"/><text x="42.3730%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (75,620 samples, 0.12%)</title><rect x="42.1236%" y="69" width="0.1241%" height="15" fill="rgb(247,81,37)"/><text x="42.3736%" y="79.50"></text></g><g><title>item_attrs (72,760 samples, 0.12%)</title><rect x="42.1283%" y="53" width="0.1194%" height="15" fill="rgb(209,12,38)"/><text x="42.3783%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (72,260 samples, 0.12%)</title><rect x="42.1291%" y="37" width="0.1185%" height="15" fill="rgb(227,1,9)"/><text x="42.3791%" y="47.50"></text></g><g><title>adt_dtorck_constraint (83,460 samples, 0.14%)</title><rect x="42.1158%" y="101" width="0.1369%" height="15" fill="rgb(248,47,43)"/><text x="42.3658%" y="111.50"></text></g><g><title>adt_dtorck_constraint (151,292 samples, 0.25%)</title><rect x="42.0149%" y="117" width="0.2482%" height="15" fill="rgb(221,10,30)"/><text x="42.2649%" y="127.50"></text></g><g><title>adt_dtorck_constraint (200,583 samples, 0.33%)</title><rect x="41.9682%" y="133" width="0.3291%" height="15" fill="rgb(210,229,1)"/><text x="42.2182%" y="143.50"></text></g><g><title>adt_dtorck_constraint (214,083 samples, 0.35%)</title><rect x="41.9502%" y="149" width="0.3512%" height="15" fill="rgb(222,148,37)"/><text x="42.2002%" y="159.50"></text></g><g><title>adt_dtorck_constraint (343,204 samples, 0.56%)</title><rect x="41.7672%" y="165" width="0.5630%" height="15" fill="rgb(234,67,33)"/><text x="42.0172%" y="175.50"></text></g><g><title>dropck_outlives (428,775 samples, 0.70%)</title><rect x="41.6442%" y="181" width="0.7034%" height="15" fill="rgb(247,98,35)"/><text x="41.8942%" y="191.50"></text></g><g><title>adt_def (61,360 samples, 0.10%)</title><rect x="42.8869%" y="149" width="0.1007%" height="15" fill="rgb(247,138,52)"/><text x="43.1369%" y="159.50"></text></g><g><title>adt_sized_constraint (78,011 samples, 0.13%)</title><rect x="42.8740%" y="165" width="0.1280%" height="15" fill="rgb(213,79,30)"/><text x="43.1240%" y="175.50"></text></g><g><title>predicates_of (88,331 samples, 0.14%)</title><rect x="43.1030%" y="165" width="0.1449%" height="15" fill="rgb(246,177,23)"/><text x="43.3530%" y="175.50"></text></g><g><title>trait_impls_of (280,463 samples, 0.46%)</title><rect x="43.2536%" y="165" width="0.4601%" height="15" fill="rgb(230,62,27)"/><text x="43.5036%" y="175.50"></text></g><g><title>implementations_of_trait (97,681 samples, 0.16%)</title><rect x="43.5534%" y="149" width="0.1602%" height="15" fill="rgb(216,154,8)"/><text x="43.8034%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (66,871 samples, 0.11%)</title><rect x="43.6040%" y="133" width="0.1097%" height="15" fill="rgb(244,35,45)"/><text x="43.8540%" y="143.50"></text></g><g><title>evaluate_obligation (838,129 samples, 1.37%)</title><rect x="42.3476%" y="181" width="1.3749%" height="15" fill="rgb(251,115,12)"/><text x="42.5976%" y="191.50"></text></g><g><title>fn_sig (70,871 samples, 0.12%)</title><rect x="43.7496%" y="181" width="0.1163%" height="15" fill="rgb(240,54,50)"/><text x="43.9996%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (63,031 samples, 0.10%)</title><rect x="43.7625%" y="165" width="0.1034%" height="15" fill="rgb(233,84,52)"/><text x="44.0125%" y="175.50"></text></g><g><title>generics_of (70,951 samples, 0.12%)</title><rect x="43.8659%" y="181" width="0.1164%" height="15" fill="rgb(207,117,47)"/><text x="44.1159%" y="191.50"></text></g><g><title>item_attrs (120,020 samples, 0.20%)</title><rect x="44.1359%" y="181" width="0.1969%" height="15" fill="rgb(249,43,39)"/><text x="44.3859%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (114,380 samples, 0.19%)</title><rect x="44.1451%" y="165" width="0.1876%" height="15" fill="rgb(209,38,44)"/><text x="44.3951%" y="175.50"></text></g><g><title>evaluate_obligation (231,282 samples, 0.38%)</title><rect x="44.5101%" y="165" width="0.3794%" height="15" fill="rgb(236,212,23)"/><text x="44.7601%" y="175.50"></text></g><g><title>method_autoderef_steps (328,844 samples, 0.54%)</title><rect x="44.3782%" y="181" width="0.5395%" height="15" fill="rgb(242,79,21)"/><text x="44.6282%" y="191.50"></text></g><g><title>evaluate_obligation (64,351 samples, 0.11%)</title><rect x="44.9729%" y="165" width="0.1056%" height="15" fill="rgb(211,96,35)"/><text x="45.2229%" y="175.50"></text></g><g><title>object_safety_violations (140,432 samples, 0.23%)</title><rect x="44.9177%" y="181" width="0.2304%" height="15" fill="rgb(253,215,40)"/><text x="45.1677%" y="191.50"></text></g><g><title>explicit_predicates_of (114,952 samples, 0.19%)</title><rect x="45.3616%" y="149" width="0.1886%" height="15" fill="rgb(211,81,21)"/><text x="45.6116%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (96,942 samples, 0.16%)</title><rect x="45.3911%" y="133" width="0.1590%" height="15" fill="rgb(208,190,38)"/><text x="45.6411%" y="143.50"></text></g><g><title>predicates_of (240,284 samples, 0.39%)</title><rect x="45.1959%" y="181" width="0.3942%" height="15" fill="rgb(235,213,38)"/><text x="45.4459%" y="191.50"></text></g><g><title>predicates_defined_on (182,012 samples, 0.30%)</title><rect x="45.2915%" y="165" width="0.2986%" height="15" fill="rgb(237,122,38)"/><text x="45.5415%" y="175.50"></text></g><g><title>type_of (191,122 samples, 0.31%)</title><rect x="45.6714%" y="181" width="0.3135%" height="15" fill="rgb(244,218,35)"/><text x="45.9214%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (173,462 samples, 0.28%)</title><rect x="45.7004%" y="165" width="0.2846%" height="15" fill="rgb(240,68,47)"/><text x="45.9504%" y="175.50"></text></g><g><title>item_bodies_checking (7,862,208 samples, 12.90%)</title><rect x="33.1811%" y="229" width="12.8978%" height="15" fill="rgb(210,16,53)"/><text x="33.4311%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (7,859,718 samples, 12.89%)</title><rect x="33.1852%" y="213" width="12.8937%" height="15" fill="rgb(235,124,12)"/><text x="33.4352%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (7,847,918 samples, 12.87%)</title><rect x="33.2046%" y="197" width="12.8744%" height="15" fill="rgb(224,169,11)"/><text x="33.4546%" y="207.50">typeck</text></g><g><title>impl_parent (113,161 samples, 0.19%)</title><rect x="47.1481%" y="149" width="0.1856%" height="15" fill="rgb(250,166,2)"/><text x="47.3981%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (62,400 samples, 0.10%)</title><rect x="47.2313%" y="133" width="0.1024%" height="15" fill="rgb(242,216,29)"/><text x="47.4813%" y="143.50"></text></g><g><title>impl_trait_ref (311,316 samples, 0.51%)</title><rect x="47.3337%" y="149" width="0.5107%" height="15" fill="rgb(230,116,27)"/><text x="47.5837%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (264,946 samples, 0.43%)</title><rect x="47.4098%" y="133" width="0.4346%" height="15" fill="rgb(228,99,48)"/><text x="47.6598%" y="143.50"></text></g><g><title>adt_destructor (939,380 samples, 1.54%)</title><rect x="46.4019%" y="197" width="1.5410%" height="15" fill="rgb(253,11,6)"/><text x="46.6519%" y="207.50"></text></g><g><title>coherent_trait (934,070 samples, 1.53%)</title><rect x="46.4106%" y="181" width="1.5323%" height="15" fill="rgb(247,143,39)"/><text x="46.6606%" y="191.50"></text></g><g><title>specialization_graph_of (930,440 samples, 1.53%)</title><rect x="46.4166%" y="165" width="1.5264%" height="15" fill="rgb(236,97,10)"/><text x="46.6666%" y="175.50"></text></g><g><title>item_types_checking (1,211,913 samples, 1.99%)</title><rect x="46.0789%" y="229" width="1.9881%" height="15" fill="rgb(233,208,19)"/><text x="46.3289%" y="239.50">i..</text></g><g><title>check_mod_item_types (1,207,863 samples, 1.98%)</title><rect x="46.0856%" y="213" width="1.9815%" height="15" fill="rgb(216,164,2)"/><text x="46.3356%" y="223.50">c..</text></g><g><title>fn_sig (193,084 samples, 0.32%)</title><rect x="48.2611%" y="197" width="0.3168%" height="15" fill="rgb(220,129,5)"/><text x="48.5111%" y="207.50"></text></g><g><title>named_region_map (159,591 samples, 0.26%)</title><rect x="48.6428%" y="181" width="0.2618%" height="15" fill="rgb(242,17,10)"/><text x="48.8928%" y="191.50"></text></g><g><title>resolve_lifetimes (146,631 samples, 0.24%)</title><rect x="48.6641%" y="165" width="0.2405%" height="15" fill="rgb(242,107,0)"/><text x="48.9141%" y="175.50"></text></g><g><title>generics_of (208,644 samples, 0.34%)</title><rect x="48.5779%" y="197" width="0.3423%" height="15" fill="rgb(251,28,31)"/><text x="48.8279%" y="207.50"></text></g><g><title>predicates_of (236,012 samples, 0.39%)</title><rect x="48.9789%" y="197" width="0.3872%" height="15" fill="rgb(233,223,10)"/><text x="49.2289%" y="207.50"></text></g><g><title>predicates_defined_on (219,332 samples, 0.36%)</title><rect x="49.0062%" y="181" width="0.3598%" height="15" fill="rgb(215,21,27)"/><text x="49.2562%" y="191.50"></text></g><g><title>inferred_outlives_of (134,791 samples, 0.22%)</title><rect x="49.1449%" y="165" width="0.2211%" height="15" fill="rgb(232,23,21)"/><text x="49.3949%" y="175.50"></text></g><g><title>inferred_outlives_crate (120,041 samples, 0.20%)</title><rect x="49.1691%" y="149" width="0.1969%" height="15" fill="rgb(244,5,23)"/><text x="49.4191%" y="159.50"></text></g><g><title>type_of (69,161 samples, 0.11%)</title><rect x="49.2526%" y="133" width="0.1135%" height="15" fill="rgb(226,81,46)"/><text x="49.5026%" y="143.50"></text></g><g><title>type_collecting (873,700 samples, 1.43%)</title><rect x="48.0683%" y="229" width="1.4333%" height="15" fill="rgb(247,70,30)"/><text x="48.3183%" y="239.50"></text></g><g><title>collect_mod_item_types (863,440 samples, 1.42%)</title><rect x="48.0851%" y="213" width="1.4165%" height="15" fill="rgb(212,68,19)"/><text x="48.3351%" y="223.50"></text></g><g><title>type_of (82,600 samples, 0.14%)</title><rect x="49.3660%" y="197" width="0.1355%" height="15" fill="rgb(240,187,13)"/><text x="49.6160%" y="207.50"></text></g><g><title>adt_def (64,790 samples, 0.11%)</title><rect x="50.2028%" y="165" width="0.1063%" height="15" fill="rgb(223,113,26)"/><text x="50.4528%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (61,720 samples, 0.10%)</title><rect x="50.2078%" y="149" width="0.1013%" height="15" fill="rgb(206,192,2)"/><text x="50.4578%" y="159.50"></text></g><g><title>adt_def (69,821 samples, 0.11%)</title><rect x="50.3533%" y="133" width="0.1145%" height="15" fill="rgb(241,108,4)"/><text x="50.6033%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (68,701 samples, 0.11%)</title><rect x="50.3551%" y="117" width="0.1127%" height="15" fill="rgb(247,173,49)"/><text x="50.6051%" y="127.50"></text></g><g><title>adt_sized_constraint (98,031 samples, 0.16%)</title><rect x="50.3375%" y="149" width="0.1608%" height="15" fill="rgb(224,114,35)"/><text x="50.5875%" y="159.50"></text></g><g><title>adt_sized_constraint (126,631 samples, 0.21%)</title><rect x="50.3091%" y="165" width="0.2077%" height="15" fill="rgb(245,159,27)"/><text x="50.5591%" y="175.50"></text></g><g><title>adt_sized_constraint (203,732 samples, 0.33%)</title><rect x="50.1854%" y="181" width="0.3342%" height="15" fill="rgb(245,172,44)"/><text x="50.4354%" y="191.50"></text></g><g><title>evaluate_obligation (396,763 samples, 0.65%)</title><rect x="49.9892%" y="197" width="0.6509%" height="15" fill="rgb(236,23,11)"/><text x="50.2392%" y="207.50"></text></g><g><title>implied_outlives_bounds (66,272 samples, 0.11%)</title><rect x="50.6401%" y="197" width="0.1087%" height="15" fill="rgb(205,117,38)"/><text x="50.8901%" y="207.50"></text></g><g><title>check_impl_item_well_formed (885,011 samples, 1.45%)</title><rect x="49.5795%" y="213" width="1.4518%" height="15" fill="rgb(237,72,25)"/><text x="49.8295%" y="223.50"></text></g><g><title>region_scope_tree (85,450 samples, 0.14%)</title><rect x="50.8912%" y="197" width="0.1402%" height="15" fill="rgb(244,70,9)"/><text x="51.1412%" y="207.50"></text></g><g><title>adt_def (168,542 samples, 0.28%)</title><rect x="51.8544%" y="165" width="0.2765%" height="15" fill="rgb(217,125,39)"/><text x="52.1044%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (166,382 samples, 0.27%)</title><rect x="51.8579%" y="149" width="0.2729%" height="15" fill="rgb(235,36,10)"/><text x="52.1079%" y="159.50"></text></g><g><title>item_attrs (142,411 samples, 0.23%)</title><rect x="51.8973%" y="133" width="0.2336%" height="15" fill="rgb(251,123,47)"/><text x="52.1473%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (140,531 samples, 0.23%)</title><rect x="51.9003%" y="117" width="0.2305%" height="15" fill="rgb(221,13,13)"/><text x="52.1503%" y="127.50"></text></g><g><title>adt_def (117,601 samples, 0.19%)</title><rect x="52.1355%" y="149" width="0.1929%" height="15" fill="rgb(238,131,9)"/><text x="52.3855%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (116,991 samples, 0.19%)</title><rect x="52.1365%" y="133" width="0.1919%" height="15" fill="rgb(211,50,8)"/><text x="52.3865%" y="143.50"></text></g><g><title>item_attrs (110,001 samples, 0.18%)</title><rect x="52.1480%" y="117" width="0.1805%" height="15" fill="rgb(245,182,24)"/><text x="52.3980%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (109,271 samples, 0.18%)</title><rect x="52.1492%" y="101" width="0.1793%" height="15" fill="rgb(242,14,37)"/><text x="52.3992%" y="111.50"></text></g><g><title>adt_sized_constraint (122,312 samples, 0.20%)</title><rect x="52.1309%" y="165" width="0.2007%" height="15" fill="rgb(246,228,12)"/><text x="52.3809%" y="175.50"></text></g><g><title>evaluate_obligation (399,904 samples, 0.66%)</title><rect x="51.6854%" y="197" width="0.6560%" height="15" fill="rgb(213,55,15)"/><text x="51.9354%" y="207.50"></text></g><g><title>adt_sized_constraint (305,154 samples, 0.50%)</title><rect x="51.8408%" y="181" width="0.5006%" height="15" fill="rgb(209,9,3)"/><text x="52.0908%" y="191.50"></text></g><g><title>implied_outlives_bounds (125,812 samples, 0.21%)</title><rect x="52.3468%" y="197" width="0.2064%" height="15" fill="rgb(230,59,30)"/><text x="52.5968%" y="207.50"></text></g><g><title>param_env (108,850 samples, 0.18%)</title><rect x="52.5532%" y="197" width="0.1786%" height="15" fill="rgb(209,121,21)"/><text x="52.8032%" y="207.50"></text></g><g><title>analysis (31,477,860 samples, 51.64%)</title><rect x="1.2604%" y="261" width="51.6388%" height="15" fill="rgb(220,109,13)"/><text x="1.5104%" y="271.50">analysis</text></g><g><title>type_check_crate (24,695,074 samples, 40.51%)</title><rect x="12.3874%" y="245" width="40.5118%" height="15" fill="rgb(232,18,1)"/><text x="12.6374%" y="255.50">type_check_crate</text></g><g><title>wf_checking (2,070,513 samples, 3.40%)</title><rect x="49.5026%" y="229" width="3.3966%" height="15" fill="rgb(215,41,42)"/><text x="49.7526%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (1,138,582 samples, 1.87%)</title><rect x="51.0314%" y="213" width="1.8678%" height="15" fill="rgb(224,123,36)"/><text x="51.2814%" y="223.50">c..</text></g><g><title>codegen_crate (340,834 samples, 0.56%)</title><rect x="52.9167%" y="261" width="0.5591%" height="15" fill="rgb(240,125,3)"/><text x="53.1667%" y="271.50"></text></g><g><title>crate_injection (94,271 samples, 0.15%)</title><rect x="53.9408%" y="245" width="0.1546%" height="15" fill="rgb(205,98,50)"/><text x="54.1908%" y="255.50"></text></g><g><title>metadata_load_macro (76,583 samples, 0.13%)</title><rect x="82.7599%" y="213" width="0.1256%" height="15" fill="rgb(205,185,37)"/><text x="83.0099%" y="223.50"></text></g><g><title>macro_expand_crate (20,258,125 samples, 33.23%)</title><rect x="54.0955%" y="245" width="33.2331%" height="15" fill="rgb(238,207,15)"/><text x="54.3455%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (20,234,605 samples, 33.19%)</title><rect x="54.1341%" y="229" width="33.1945%" height="15" fill="rgb(213,199,42)"/><text x="54.3841%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (2,708,360 samples, 4.44%)</title><rect x="82.8855%" y="213" width="4.4430%" height="15" fill="rgb(235,201,11)"/><text x="83.1355%" y="223.50">metad..</text></g><g><title>metadata_register_crate (955,872 samples, 1.57%)</title><rect x="85.7605%" y="197" width="1.5681%" height="15" fill="rgb(207,46,11)"/><text x="86.0105%" y="207.50"></text></g><g><title>metadata_register_crate (80,950 samples, 0.13%)</title><rect x="87.1957%" y="181" width="0.1328%" height="15" fill="rgb(241,35,35)"/><text x="87.4457%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (80,051 samples, 0.13%)</title><rect x="87.3368%" y="245" width="0.1313%" height="15" fill="rgb(243,32,47)"/><text x="87.5868%" y="255.50"></text></g><g><title>late_resolve_crate (1,483,887 samples, 2.43%)</title><rect x="87.6003%" y="229" width="2.4343%" height="15" fill="rgb(247,202,23)"/><text x="87.8503%" y="239.50">la..</text></g><g><title>configure_and_expand (22,339,049 samples, 36.65%)</title><rect x="53.4758%" y="261" width="36.6468%" height="15" fill="rgb(219,102,11)"/><text x="53.7258%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,618,118 samples, 2.65%)</title><rect x="87.4681%" y="245" width="2.6545%" height="15" fill="rgb(243,110,44)"/><text x="87.7181%" y="255.50">re..</text></g><g><title>early_lint_checks (156,952 samples, 0.26%)</title><rect x="90.2350%" y="261" width="0.2575%" height="15" fill="rgb(222,74,54)"/><text x="90.4850%" y="271.50"></text></g><g><title>free_global_ctxt (2,419,917 samples, 3.97%)</title><rect x="90.4925%" y="261" width="3.9698%" height="15" fill="rgb(216,99,12)"/><text x="90.7425%" y="271.50">free..</text></g><g><title>generate_crate_metadata (300,203 samples, 0.49%)</title><rect x="94.4623%" y="261" width="0.4925%" height="15" fill="rgb(226,22,26)"/><text x="94.7123%" y="271.50"></text></g><g><title>hir_lowering (911,650 samples, 1.50%)</title><rect x="94.9548%" y="261" width="1.4955%" height="15" fill="rgb(217,163,10)"/><text x="95.2048%" y="271.50"></text></g><g><title>parse_crate (929,791 samples, 1.53%)</title><rect x="96.5198%" y="261" width="1.5253%" height="15" fill="rgb(213,25,53)"/><text x="96.7698%" y="271.50"></text></g><g><title>prepare_outputs (355,524 samples, 0.58%)</title><rect x="98.0604%" y="261" width="0.5832%" height="15" fill="rgb(252,105,26)"/><text x="98.3104%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (407,785 samples, 0.67%)</title><rect x="98.6436%" y="261" width="0.6690%" height="15" fill="rgb(220,39,43)"/><text x="98.8936%" y="271.50"></text></g><g><title>setup_global_ctxt (122,812 samples, 0.20%)</title><rect x="99.3287%" y="261" width="0.2015%" height="15" fill="rgb(229,68,48)"/><text x="99.5787%" y="271.50"></text></g><g><title>all (60,957,757 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (60,957,757 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (286,423 samples, 0.47%)</title><rect x="99.5301%" y="261" width="0.4699%" height="15" fill="rgb(229,81,49)"/><text x="99.7801%" y="271.50"></text></g></svg></svg>