<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (670,792 samples, 0.15%)</title><rect x="11.7559%" y="133" width="0.1485%" height="15" fill="rgb(227,0,7)"/><text x="12.0059%" y="143.50"></text></g><g><title>codegen_fn_attrs (605,816 samples, 0.13%)</title><rect x="13.7464%" y="85" width="0.1341%" height="15" fill="rgb(217,0,24)"/><text x="13.9964%" y="95.50"></text></g><g><title>is_copy_raw (3,977,989 samples, 0.88%)</title><rect x="16.7455%" y="53" width="0.8808%" height="15" fill="rgb(221,193,54)"/><text x="16.9955%" y="63.50"></text></g><g><title>evaluate_obligation (3,227,560 samples, 0.71%)</title><rect x="16.9116%" y="37" width="0.7146%" height="15" fill="rgb(248,212,6)"/><text x="17.1616%" y="47.50"></text></g><g><title>needs_drop_raw (4,893,326 samples, 1.08%)</title><rect x="16.5435%" y="69" width="1.0834%" height="15" fill="rgb(208,68,35)"/><text x="16.7935%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,341,191 samples, 0.30%)</title><rect x="17.7446%" y="53" width="0.2970%" height="15" fill="rgb(232,128,0)"/><text x="17.9946%" y="63.50"></text></g><g><title>specialization_graph_of (1,003,192 samples, 0.22%)</title><rect x="18.1510%" y="53" width="0.2221%" height="15" fill="rgb(207,160,47)"/><text x="18.4010%" y="63.50"></text></g><g><title>impl_trait_ref (473,377 samples, 0.10%)</title><rect x="18.2683%" y="37" width="0.1048%" height="15" fill="rgb(228,23,34)"/><text x="18.5183%" y="47.50"></text></g><g><title>resolve_instance (3,504,817 samples, 0.78%)</title><rect x="17.6269%" y="69" width="0.7760%" height="15" fill="rgb(218,30,26)"/><text x="17.8769%" y="79.50"></text></g><g><title>thir_body (4,086,635 samples, 0.90%)</title><rect x="18.4188%" y="69" width="0.9048%" height="15" fill="rgb(220,122,19)"/><text x="18.6688%" y="79.50"></text></g><g><title>mir_const (30,385,973 samples, 6.73%)</title><rect x="12.6595%" y="117" width="6.7278%" height="15" fill="rgb(250,228,42)"/><text x="12.9095%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (27,084,032 samples, 6.00%)</title><rect x="13.3906%" y="101" width="5.9967%" height="15" fill="rgb(240,193,28)"/><text x="13.6406%" y="111.50">unsafety..</text></g><g><title>mir_built (24,871,062 samples, 5.51%)</title><rect x="13.8806%" y="85" width="5.5067%" height="15" fill="rgb(216,20,37)"/><text x="14.1306%" y="95.50">mir_bui..</text></g><g><title>mir_const_qualif (518,134 samples, 0.11%)</title><rect x="19.3873%" y="117" width="0.1147%" height="15" fill="rgb(206,188,39)"/><text x="19.6373%" y="127.50"></text></g><g><title>mir_promoted (33,915,966 samples, 7.51%)</title><rect x="11.9929%" y="133" width="7.5093%" height="15" fill="rgb(217,207,13)"/><text x="12.2429%" y="143.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (2,333,698 samples, 0.52%)</title><rect x="19.5039%" y="133" width="0.5167%" height="15" fill="rgb(231,73,38)"/><text x="19.7539%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,866,451 samples, 0.41%)</title><rect x="20.0206%" y="133" width="0.4133%" height="15" fill="rgb(225,20,46)"/><text x="20.2706%" y="143.50"></text></g><g><title>normalize_projection_ty (927,380 samples, 0.21%)</title><rect x="20.2285%" y="117" width="0.2053%" height="15" fill="rgb(210,31,41)"/><text x="20.4785%" y="127.50"></text></g><g><title>type_op_normalize_predicate (998,051 samples, 0.22%)</title><rect x="20.4338%" y="133" width="0.2210%" height="15" fill="rgb(221,200,47)"/><text x="20.6838%" y="143.50"></text></g><g><title>normalize_projection_ty (549,345 samples, 0.12%)</title><rect x="20.5332%" y="117" width="0.1216%" height="15" fill="rgb(226,26,5)"/><text x="20.7832%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,016,759 samples, 0.23%)</title><rect x="20.6548%" y="133" width="0.2251%" height="15" fill="rgb(249,33,26)"/><text x="20.9048%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,927,367 samples, 1.76%)</title><rect x="20.8799%" y="133" width="1.7552%" height="15" fill="rgb(235,183,28)"/><text x="21.1299%" y="143.50"></text></g><g><title>MIR_borrow_checking (99,937,116 samples, 22.13%)</title><rect x="0.5120%" y="165" width="22.1271%" height="15" fill="rgb(221,5,38)"/><text x="0.7620%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (99,592,915 samples, 22.05%)</title><rect x="0.5882%" y="149" width="22.0508%" height="15" fill="rgb(247,18,42)"/><text x="0.8382%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (565,126 samples, 0.13%)</title><rect x="22.7124%" y="165" width="0.1251%" height="15" fill="rgb(241,131,45)"/><text x="22.9624%" y="175.50"></text></g><g><title>codegen_fn_attrs (654,205 samples, 0.14%)</title><rect x="23.0036%" y="133" width="0.1448%" height="15" fill="rgb(249,31,29)"/><text x="23.2536%" y="143.50"></text></g><g><title>check_mod_attrs (1,385,586 samples, 0.31%)</title><rect x="22.8417%" y="149" width="0.3068%" height="15" fill="rgb(225,111,53)"/><text x="23.0917%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (839,390 samples, 0.19%)</title><rect x="23.2696%" y="149" width="0.1858%" height="15" fill="rgb(238,160,17)"/><text x="23.5196%" y="159.50"></text></g><g><title>misc_checking_1 (2,896,252 samples, 0.64%)</title><rect x="22.8377%" y="165" width="0.6413%" height="15" fill="rgb(214,148,48)"/><text x="23.0877%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,466,366 samples, 0.32%)</title><rect x="23.4794%" y="149" width="0.3247%" height="15" fill="rgb(232,36,49)"/><text x="23.7294%" y="159.50"></text></g><g><title>check_mod_liveness (1,155,333 samples, 0.26%)</title><rect x="23.5483%" y="133" width="0.2558%" height="15" fill="rgb(209,103,24)"/><text x="23.7983%" y="143.50"></text></g><g><title>misc_checking_2 (4,936,025 samples, 1.09%)</title><rect x="23.4789%" y="165" width="1.0929%" height="15" fill="rgb(229,88,8)"/><text x="23.7289%" y="175.50"></text></g><g><title>match_checking (3,467,379 samples, 0.77%)</title><rect x="23.8041%" y="149" width="0.7677%" height="15" fill="rgb(213,181,19)"/><text x="24.0541%" y="159.50"></text></g><g><title>check_match (3,364,718 samples, 0.74%)</title><rect x="23.8268%" y="133" width="0.7450%" height="15" fill="rgb(254,191,54)"/><text x="24.0768%" y="143.50"></text></g><g><title>check_private_in_public (586,767 samples, 0.13%)</title><rect x="24.5743%" y="149" width="0.1299%" height="15" fill="rgb(241,83,37)"/><text x="24.8243%" y="159.50"></text></g><g><title>death_checking (1,122,692 samples, 0.25%)</title><rect x="24.7042%" y="149" width="0.2486%" height="15" fill="rgb(233,36,39)"/><text x="24.9542%" y="159.50"></text></g><g><title>eval_to_const_value_raw (869,160 samples, 0.19%)</title><rect x="25.3294%" y="117" width="0.1924%" height="15" fill="rgb(226,3,54)"/><text x="25.5794%" y="127.50"></text></g><g><title>eval_to_const_value_raw (859,120 samples, 0.19%)</title><rect x="25.3316%" y="101" width="0.1902%" height="15" fill="rgb(245,192,40)"/><text x="25.5816%" y="111.50"></text></g><g><title>eval_to_allocation_raw (842,250 samples, 0.19%)</title><rect x="25.3353%" y="85" width="0.1865%" height="15" fill="rgb(238,167,29)"/><text x="25.5853%" y="95.50"></text></g><g><title>crate_lints (4,128,356 samples, 0.91%)</title><rect x="24.9532%" y="133" width="0.9141%" height="15" fill="rgb(232,182,51)"/><text x="25.2032%" y="143.50"></text></g><g><title>type_of (1,201,161 samples, 0.27%)</title><rect x="25.6013%" y="117" width="0.2659%" height="15" fill="rgb(231,60,39)"/><text x="25.8513%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (955,838 samples, 0.21%)</title><rect x="25.6557%" y="101" width="0.2116%" height="15" fill="rgb(208,69,12)"/><text x="25.9057%" y="111.50"></text></g><g><title>lint_checking (5,931,056 samples, 1.31%)</title><rect x="24.9528%" y="149" width="1.3132%" height="15" fill="rgb(235,93,37)"/><text x="25.2028%" y="159.50"></text></g><g><title>module_lints (1,800,670 samples, 0.40%)</title><rect x="25.8673%" y="133" width="0.3987%" height="15" fill="rgb(213,116,39)"/><text x="26.1173%" y="143.50"></text></g><g><title>lint_mod (1,794,880 samples, 0.40%)</title><rect x="25.8686%" y="117" width="0.3974%" height="15" fill="rgb(222,207,29)"/><text x="26.1186%" y="127.50"></text></g><g><title>privacy_access_levels (812,619 samples, 0.18%)</title><rect x="26.2660%" y="149" width="0.1799%" height="15" fill="rgb(206,96,30)"/><text x="26.5160%" y="159.50"></text></g><g><title>privacy_checking_modules (3,386,068 samples, 0.75%)</title><rect x="26.4459%" y="149" width="0.7497%" height="15" fill="rgb(218,138,4)"/><text x="26.6959%" y="159.50"></text></g><g><title>check_mod_privacy (3,382,898 samples, 0.75%)</title><rect x="26.4466%" y="133" width="0.7490%" height="15" fill="rgb(250,191,14)"/><text x="26.6966%" y="143.50"></text></g><g><title>misc_checking_3 (11,877,293 samples, 2.63%)</title><rect x="24.5718%" y="165" width="2.6297%" height="15" fill="rgb(239,60,40)"/><text x="24.8218%" y="175.50">mi..</text></g><g><title>impl_parent (2,794,971 samples, 0.62%)</title><rect x="28.3950%" y="101" width="0.6188%" height="15" fill="rgb(206,27,48)"/><text x="28.6450%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,655,687 samples, 0.37%)</title><rect x="28.6472%" y="85" width="0.3666%" height="15" fill="rgb(225,35,8)"/><text x="28.8972%" y="95.50"></text></g><g><title>impl_trait_ref (5,925,122 samples, 1.31%)</title><rect x="29.0138%" y="101" width="1.3119%" height="15" fill="rgb(250,213,24)"/><text x="29.2638%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,555,434 samples, 1.01%)</title><rect x="29.3171%" y="85" width="1.0086%" height="15" fill="rgb(247,123,22)"/><text x="29.5671%" y="95.50"></text></g><g><title>coherent_trait (14,891,257 samples, 3.30%)</title><rect x="27.2382%" y="133" width="3.2971%" height="15" fill="rgb(231,138,38)"/><text x="27.4882%" y="143.50">coh..</text></g><g><title>specialization_graph_of (14,269,980 samples, 3.16%)</title><rect x="27.3758%" y="117" width="3.1595%" height="15" fill="rgb(231,145,46)"/><text x="27.6258%" y="127.50">spe..</text></g><g><title>trait_impls_of (943,342 samples, 0.21%)</title><rect x="30.3265%" y="101" width="0.2089%" height="15" fill="rgb(251,118,11)"/><text x="30.5765%" y="111.50"></text></g><g><title>coherence_checking (15,025,708 samples, 3.33%)</title><rect x="27.2334%" y="149" width="3.3268%" height="15" fill="rgb(217,147,25)"/><text x="27.4834%" y="159.50">coh..</text></g><g><title>associated_item (624,318 samples, 0.14%)</title><rect x="48.4135%" y="85" width="0.1382%" height="15" fill="rgb(247,81,37)"/><text x="48.6635%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (566,646 samples, 0.13%)</title><rect x="48.4263%" y="69" width="0.1255%" height="15" fill="rgb(209,12,38)"/><text x="48.6763%" y="79.50"></text></g><g><title>associated_items (728,019 samples, 0.16%)</title><rect x="48.3936%" y="101" width="0.1612%" height="15" fill="rgb(227,1,9)"/><text x="48.6436%" y="111.50"></text></g><g><title>dropck_outlives (1,788,590 samples, 0.40%)</title><rect x="48.5693%" y="101" width="0.3960%" height="15" fill="rgb(248,47,43)"/><text x="48.8193%" y="111.50"></text></g><g><title>evaluate_obligation (4,344,145 samples, 0.96%)</title><rect x="48.9653%" y="101" width="0.9618%" height="15" fill="rgb(221,10,30)"/><text x="49.2153%" y="111.50"></text></g><g><title>associated_items (794,738 samples, 0.18%)</title><rect x="53.9321%" y="85" width="0.1760%" height="15" fill="rgb(210,229,1)"/><text x="54.1821%" y="95.50"></text></g><g><title>evaluate_obligation (3,401,917 samples, 0.75%)</title><rect x="54.1990%" y="85" width="0.7532%" height="15" fill="rgb(222,148,37)"/><text x="54.4490%" y="95.50"></text></g><g><title>method_autoderef_steps (708,920 samples, 0.16%)</title><rect x="55.2108%" y="85" width="0.1570%" height="15" fill="rgb(234,67,33)"/><text x="55.4608%" y="95.50"></text></g><g><title>predicates_of (515,145 samples, 0.11%)</title><rect x="55.3746%" y="85" width="0.1141%" height="15" fill="rgb(247,98,35)"/><text x="55.6246%" y="95.50"></text></g><g><title>typeck (23,506,862 samples, 5.20%)</title><rect x="50.3501%" y="101" width="5.2046%" height="15" fill="rgb(247,138,52)"/><text x="50.6001%" y="111.50">typeck</text></g><g><title>item_bodies_checking (112,916,570 samples, 25.00%)</title><rect x="30.5755%" y="149" width="25.0008%" height="15" fill="rgb(213,79,30)"/><text x="30.8255%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (112,912,320 samples, 25.00%)</title><rect x="30.5764%" y="133" width="24.9999%" height="15" fill="rgb(246,177,23)"/><text x="30.8264%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (112,679,789 samples, 24.95%)</title><rect x="30.6279%" y="117" width="24.9484%" height="15" fill="rgb(230,62,27)"/><text x="30.8779%" y="127.50">typeck</text></g><g><title>item_types_checking (5,008,336 samples, 1.11%)</title><rect x="55.5763%" y="149" width="1.1089%" height="15" fill="rgb(216,154,8)"/><text x="55.8263%" y="159.50"></text></g><g><title>check_mod_item_types (5,003,916 samples, 1.11%)</title><rect x="55.5773%" y="133" width="1.1079%" height="15" fill="rgb(244,35,45)"/><text x="55.8273%" y="143.50"></text></g><g><title>typeck (690,558 samples, 0.15%)</title><rect x="56.5323%" y="117" width="0.1529%" height="15" fill="rgb(251,115,12)"/><text x="56.7823%" y="127.50"></text></g><g><title>fn_sig (991,392 samples, 0.22%)</title><rect x="56.8680%" y="117" width="0.2195%" height="15" fill="rgb(240,54,50)"/><text x="57.1180%" y="127.50"></text></g><g><title>is_late_bound_map (532,686 samples, 0.12%)</title><rect x="57.1561%" y="101" width="0.1179%" height="15" fill="rgb(233,84,52)"/><text x="57.4061%" y="111.50"></text></g><g><title>resolve_lifetimes (502,126 samples, 0.11%)</title><rect x="57.1629%" y="85" width="0.1112%" height="15" fill="rgb(207,117,47)"/><text x="57.4129%" y="95.50"></text></g><g><title>named_region_map (1,257,886 samples, 0.28%)</title><rect x="57.2741%" y="101" width="0.2785%" height="15" fill="rgb(249,43,39)"/><text x="57.5241%" y="111.50"></text></g><g><title>resolve_lifetimes (1,203,364 samples, 0.27%)</title><rect x="57.2861%" y="85" width="0.2664%" height="15" fill="rgb(209,38,44)"/><text x="57.5361%" y="95.50"></text></g><g><title>lint_levels (550,686 samples, 0.12%)</title><rect x="57.4307%" y="69" width="0.1219%" height="15" fill="rgb(236,212,23)"/><text x="57.6807%" y="79.50"></text></g><g><title>generics_of (2,137,714 samples, 0.47%)</title><rect x="57.0875%" y="117" width="0.4733%" height="15" fill="rgb(242,79,21)"/><text x="57.3375%" y="127.50"></text></g><g><title>predicates_of (1,452,267 samples, 0.32%)</title><rect x="57.5898%" y="117" width="0.3215%" height="15" fill="rgb(211,96,35)"/><text x="57.8398%" y="127.50"></text></g><g><title>predicates_defined_on (1,294,476 samples, 0.29%)</title><rect x="57.6247%" y="101" width="0.2866%" height="15" fill="rgb(253,215,40)"/><text x="57.8747%" y="111.50"></text></g><g><title>inferred_outlives_of (569,855 samples, 0.13%)</title><rect x="57.7851%" y="85" width="0.1262%" height="15" fill="rgb(211,81,21)"/><text x="58.0351%" y="95.50"></text></g><g><title>inferred_outlives_crate (507,975 samples, 0.11%)</title><rect x="57.7988%" y="69" width="0.1125%" height="15" fill="rgb(208,190,38)"/><text x="58.0488%" y="79.50"></text></g><g><title>type_collecting (5,752,394 samples, 1.27%)</title><rect x="56.6856%" y="149" width="1.2736%" height="15" fill="rgb(235,213,38)"/><text x="56.9356%" y="159.50"></text></g><g><title>collect_mod_item_types (5,743,684 samples, 1.27%)</title><rect x="56.6875%" y="133" width="1.2717%" height="15" fill="rgb(237,122,38)"/><text x="56.9375%" y="143.50"></text></g><g><title>evaluate_obligation (1,151,081 samples, 0.25%)</title><rect x="59.3362%" y="117" width="0.2549%" height="15" fill="rgb(244,218,35)"/><text x="59.5862%" y="127.50"></text></g><g><title>implied_outlives_bounds (754,399 samples, 0.17%)</title><rect x="59.6002%" y="117" width="0.1670%" height="15" fill="rgb(240,68,47)"/><text x="59.8502%" y="127.50"></text></g><g><title>param_env (774,387 samples, 0.17%)</title><rect x="59.7798%" y="117" width="0.1715%" height="15" fill="rgb(210,16,53)"/><text x="60.0298%" y="127.50"></text></g><g><title>region_scope_tree (1,457,901 samples, 0.32%)</title><rect x="59.9650%" y="117" width="0.3228%" height="15" fill="rgb(235,124,12)"/><text x="60.2150%" y="127.50"></text></g><g><title>check_impl_item_well_formed (10,059,683 samples, 2.23%)</title><rect x="58.0903%" y="133" width="2.2273%" height="15" fill="rgb(224,169,11)"/><text x="58.3403%" y="143.50">c..</text></g><g><title>evaluate_obligation (1,150,300 samples, 0.25%)</title><rect x="60.9937%" y="117" width="0.2547%" height="15" fill="rgb(250,166,2)"/><text x="61.2437%" y="127.50"></text></g><g><title>param_env (668,740 samples, 0.15%)</title><rect x="61.2996%" y="117" width="0.1481%" height="15" fill="rgb(242,216,29)"/><text x="61.5496%" y="127.50"></text></g><g><title>analysis (276,655,568 samples, 61.25%)</title><rect x="0.2945%" y="181" width="61.2542%" height="15" fill="rgb(230,116,27)"/><text x="0.5445%" y="191.50">analysis</text></g><g><title>type_check_crate (155,129,461 samples, 34.35%)</title><rect x="27.2015%" y="165" width="34.3472%" height="15" fill="rgb(228,99,48)"/><text x="27.4515%" y="175.50">type_check_crate</text></g><g><title>wf_checking (16,199,181 samples, 3.59%)</title><rect x="57.9621%" y="149" width="3.5867%" height="15" fill="rgb(253,11,6)"/><text x="58.2121%" y="159.50">wf_c..</text></g><g><title>check_item_well_formed (5,560,240 samples, 1.23%)</title><rect x="60.3176%" y="133" width="1.2311%" height="15" fill="rgb(247,143,39)"/><text x="60.5676%" y="143.50"></text></g><g><title>metadata_load_macro (2,009,590 samples, 0.44%)</title><rect x="88.8508%" y="133" width="0.4449%" height="15" fill="rgb(236,97,10)"/><text x="89.1008%" y="143.50"></text></g><g><title>metadata_register_crate (9,637,987 samples, 2.13%)</title><rect x="89.2957%" y="133" width="2.1339%" height="15" fill="rgb(233,208,19)"/><text x="89.5457%" y="143.50">m..</text></g><g><title>metadata_register_crate (6,811,297 samples, 1.51%)</title><rect x="89.9216%" y="117" width="1.5081%" height="15" fill="rgb(216,164,2)"/><text x="90.1716%" y="127.50"></text></g><g><title>macro_expand_crate (133,789,483 samples, 29.62%)</title><rect x="61.8423%" y="165" width="29.6223%" height="15" fill="rgb(220,129,5)"/><text x="62.0923%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (133,767,013 samples, 29.62%)</title><rect x="61.8473%" y="149" width="29.6173%" height="15" fill="rgb(242,17,10)"/><text x="62.0973%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (7,896,188 samples, 1.75%)</title><rect x="91.6247%" y="149" width="1.7483%" height="15" fill="rgb(242,107,0)"/><text x="91.8747%" y="159.50"></text></g><g><title>configure_and_expand (143,705,163 samples, 31.82%)</title><rect x="61.6395%" y="181" width="31.8177%" height="15" fill="rgb(251,28,31)"/><text x="61.8895%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (8,771,417 samples, 1.94%)</title><rect x="91.5151%" y="165" width="1.9421%" height="15" fill="rgb(233,223,10)"/><text x="91.7651%" y="175.50">r..</text></g><g><title>drop_ast (648,088 samples, 0.14%)</title><rect x="93.4572%" y="181" width="0.1435%" height="15" fill="rgb(215,21,27)"/><text x="93.7072%" y="191.50"></text></g><g><title>early_lint_checks (1,704,339 samples, 0.38%)</title><rect x="93.6051%" y="181" width="0.3774%" height="15" fill="rgb(232,23,21)"/><text x="93.8551%" y="191.50"></text></g><g><title>free_global_ctxt (5,278,368 samples, 1.17%)</title><rect x="93.9825%" y="181" width="1.1687%" height="15" fill="rgb(244,5,23)"/><text x="94.2325%" y="191.50"></text></g><g><title>generate_crate_metadata (6,435,202 samples, 1.42%)</title><rect x="95.1512%" y="181" width="1.4248%" height="15" fill="rgb(226,81,46)"/><text x="95.4012%" y="191.50"></text></g><g><title>hir_lowering (10,492,157 samples, 2.32%)</title><rect x="96.5760%" y="181" width="2.3231%" height="15" fill="rgb(247,70,30)"/><text x="96.8260%" y="191.50">h..</text></g><g><title>parse_crate (2,723,401 samples, 0.60%)</title><rect x="98.9240%" y="181" width="0.6030%" height="15" fill="rgb(212,68,19)"/><text x="99.1740%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,230,063 samples, 0.27%)</title><rect x="99.5702%" y="181" width="0.2723%" height="15" fill="rgb(240,187,13)"/><text x="99.8202%" y="191.50"></text></g><g><title>all (451,651,321 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (451,651,321 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (610,667 samples, 0.14%)</title><rect x="99.8648%" y="181" width="0.1352%" height="15" fill="rgb(241,108,4)"/><text x="100.1148%" y="191.50"></text></g></svg></svg>