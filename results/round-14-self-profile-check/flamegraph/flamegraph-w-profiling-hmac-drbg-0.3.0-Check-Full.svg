<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (153,702 samples, 0.23%)</title><rect x="6.9754%" y="149" width="0.2321%" height="15" fill="rgb(227,0,7)"/><text x="7.2254%" y="159.50"></text></g><g><title>is_sized_raw (66,633 samples, 0.10%)</title><rect x="7.2199%" y="149" width="0.1006%" height="15" fill="rgb(217,0,24)"/><text x="7.4699%" y="159.50"></text></g><g><title>param_env (118,521 samples, 0.18%)</title><rect x="8.0990%" y="117" width="0.1790%" height="15" fill="rgb(221,193,54)"/><text x="8.3490%" y="127.50"></text></g><g><title>codegen_fn_attrs (103,122 samples, 0.16%)</title><rect x="8.4784%" y="101" width="0.1557%" height="15" fill="rgb(248,212,6)"/><text x="8.7284%" y="111.50"></text></g><g><title>is_copy_raw (107,191 samples, 0.16%)</title><rect x="10.0089%" y="53" width="0.1619%" height="15" fill="rgb(208,68,35)"/><text x="10.2589%" y="63.50"></text></g><g><title>evaluate_obligation (91,671 samples, 0.14%)</title><rect x="10.0323%" y="37" width="0.1384%" height="15" fill="rgb(232,128,0)"/><text x="10.2823%" y="47.50"></text></g><g><title>adt_drop_tys (224,392 samples, 0.34%)</title><rect x="9.9810%" y="69" width="0.3388%" height="15" fill="rgb(207,160,47)"/><text x="10.2310%" y="79.50"></text></g><g><title>is_copy_raw (546,066 samples, 0.82%)</title><rect x="10.3199%" y="69" width="0.8246%" height="15" fill="rgb(228,23,34)"/><text x="10.5699%" y="79.50"></text></g><g><title>evaluate_obligation (483,856 samples, 0.73%)</title><rect x="10.4138%" y="53" width="0.7307%" height="15" fill="rgb(218,30,26)"/><text x="10.6638%" y="63.50"></text></g><g><title>trait_impls_of (127,852 samples, 0.19%)</title><rect x="10.9514%" y="37" width="0.1931%" height="15" fill="rgb(220,122,19)"/><text x="11.2014%" y="47.50"></text></g><g><title>needs_drop_raw (889,559 samples, 1.34%)</title><rect x="9.9116%" y="85" width="1.3433%" height="15" fill="rgb(250,228,42)"/><text x="10.1616%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (73,111 samples, 0.11%)</title><rect x="11.1445%" y="69" width="0.1104%" height="15" fill="rgb(240,193,28)"/><text x="11.3945%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (297,934 samples, 0.45%)</title><rect x="11.3877%" y="69" width="0.4499%" height="15" fill="rgb(216,20,37)"/><text x="11.6377%" y="79.50"></text></g><g><title>impl_parent (349,607 samples, 0.53%)</title><rect x="12.9019%" y="53" width="0.5279%" height="15" fill="rgb(206,188,39)"/><text x="13.1519%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (238,075 samples, 0.36%)</title><rect x="13.0703%" y="37" width="0.3595%" height="15" fill="rgb(217,207,13)"/><text x="13.3203%" y="47.50"></text></g><g><title>specialization_graph_of (1,935,929 samples, 2.92%)</title><rect x="11.8745%" y="69" width="2.9234%" height="15" fill="rgb(231,73,38)"/><text x="12.1245%" y="79.50">sp..</text></g><g><title>impl_trait_ref (905,958 samples, 1.37%)</title><rect x="13.4299%" y="53" width="1.3681%" height="15" fill="rgb(225,20,46)"/><text x="13.6799%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (798,538 samples, 1.21%)</title><rect x="13.5921%" y="37" width="1.2058%" height="15" fill="rgb(210,31,41)"/><text x="13.8421%" y="47.50"></text></g><g><title>resolve_instance (2,389,006 samples, 3.61%)</title><rect x="11.2549%" y="85" width="3.6076%" height="15" fill="rgb(221,200,47)"/><text x="11.5049%" y="95.50">reso..</text></g><g><title>thir_body (271,342 samples, 0.41%)</title><rect x="14.8693%" y="85" width="0.4097%" height="15" fill="rgb(226,26,5)"/><text x="15.1193%" y="95.50"></text></g><g><title>mir_const (5,028,875 samples, 7.59%)</title><rect x="7.7216%" y="133" width="7.5939%" height="15" fill="rgb(249,33,26)"/><text x="7.9716%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (4,660,441 samples, 7.04%)</title><rect x="8.2780%" y="117" width="7.0376%" height="15" fill="rgb(235,183,28)"/><text x="8.5280%" y="127.50">unsafety_..</text></g><g><title>mir_built (4,424,588 samples, 6.68%)</title><rect x="8.6341%" y="101" width="6.6814%" height="15" fill="rgb(221,5,38)"/><text x="8.8841%" y="111.50">mir_built</text></g><g><title>mir_promoted (5,304,229 samples, 8.01%)</title><rect x="7.3205%" y="149" width="8.0097%" height="15" fill="rgb(247,18,42)"/><text x="7.5705%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (166,640 samples, 0.25%)</title><rect x="15.3303%" y="149" width="0.2516%" height="15" fill="rgb(241,131,45)"/><text x="15.5803%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (188,770 samples, 0.29%)</title><rect x="15.5819%" y="149" width="0.2851%" height="15" fill="rgb(249,31,29)"/><text x="15.8319%" y="159.50"></text></g><g><title>normalize_projection_ty (101,230 samples, 0.15%)</title><rect x="15.7141%" y="133" width="0.1529%" height="15" fill="rgb(225,111,53)"/><text x="15.9641%" y="143.50"></text></g><g><title>MIR_borrow_checking (10,571,048 samples, 15.96%)</title><rect x="1.3383%" y="181" width="15.9630%" height="15" fill="rgb(238,160,17)"/><text x="1.5883%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,555,028 samples, 15.94%)</title><rect x="1.3625%" y="165" width="15.9388%" height="15" fill="rgb(214,148,48)"/><text x="1.6125%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (882,764 samples, 1.33%)</title><rect x="15.9683%" y="149" width="1.3330%" height="15" fill="rgb(232,36,49)"/><text x="16.2183%" y="159.50"></text></g><g><title>hir_module_items (147,382 samples, 0.22%)</title><rect x="17.3091%" y="181" width="0.2226%" height="15" fill="rgb(209,103,24)"/><text x="17.5591%" y="191.50"></text></g><g><title>get_lang_items (98,731 samples, 0.15%)</title><rect x="17.8691%" y="133" width="0.1491%" height="15" fill="rgb(229,88,8)"/><text x="18.1191%" y="143.50"></text></g><g><title>codegen_fn_attrs (259,383 samples, 0.39%)</title><rect x="17.7697%" y="149" width="0.3917%" height="15" fill="rgb(213,181,19)"/><text x="18.0197%" y="159.50"></text></g><g><title>check_mod_attrs (388,604 samples, 0.59%)</title><rect x="17.5751%" y="165" width="0.5868%" height="15" fill="rgb(254,191,54)"/><text x="17.8251%" y="175.50"></text></g><g><title>lookup_deprecation_entry (91,451 samples, 0.14%)</title><rect x="18.4535%" y="149" width="0.1381%" height="15" fill="rgb(241,83,37)"/><text x="18.7035%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (223,513 samples, 0.34%)</title><rect x="18.3227%" y="165" width="0.3375%" height="15" fill="rgb(233,36,39)"/><text x="18.5727%" y="175.50"></text></g><g><title>misc_checking_1 (787,019 samples, 1.19%)</title><rect x="17.5324%" y="181" width="1.1885%" height="15" fill="rgb(226,3,54)"/><text x="17.7824%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (156,512 samples, 0.24%)</title><rect x="18.7230%" y="165" width="0.2363%" height="15" fill="rgb(245,192,40)"/><text x="18.9730%" y="175.50"></text></g><g><title>check_mod_liveness (127,972 samples, 0.19%)</title><rect x="18.7661%" y="149" width="0.1932%" height="15" fill="rgb(238,167,29)"/><text x="19.0161%" y="159.50"></text></g><g><title>misc_checking_2 (315,113 samples, 0.48%)</title><rect x="18.7209%" y="181" width="0.4758%" height="15" fill="rgb(232,182,51)"/><text x="18.9709%" y="191.50"></text></g><g><title>match_checking (157,191 samples, 0.24%)</title><rect x="18.9593%" y="165" width="0.2374%" height="15" fill="rgb(231,60,39)"/><text x="19.2093%" y="175.50"></text></g><g><title>check_match (152,201 samples, 0.23%)</title><rect x="18.9669%" y="149" width="0.2298%" height="15" fill="rgb(208,69,12)"/><text x="19.2169%" y="159.50"></text></g><g><title>death_checking (125,802 samples, 0.19%)</title><rect x="19.2971%" y="165" width="0.1900%" height="15" fill="rgb(235,93,37)"/><text x="19.5471%" y="175.50"></text></g><g><title>param_env (76,621 samples, 0.12%)</title><rect x="20.1613%" y="133" width="0.1157%" height="15" fill="rgb(213,116,39)"/><text x="20.4113%" y="143.50"></text></g><g><title>crate_lints (2,367,136 samples, 3.57%)</title><rect x="19.4895%" y="149" width="3.5745%" height="15" fill="rgb(222,207,29)"/><text x="19.7395%" y="159.50">crat..</text></g><g><title>type_of (1,844,150 samples, 2.78%)</title><rect x="20.2793%" y="133" width="2.7848%" height="15" fill="rgb(206,96,30)"/><text x="20.5293%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (1,604,120 samples, 2.42%)</title><rect x="20.6417%" y="117" width="2.4223%" height="15" fill="rgb(218,138,4)"/><text x="20.8917%" y="127.50">me..</text></g><g><title>lint_checking (2,465,247 samples, 3.72%)</title><rect x="19.4871%" y="165" width="3.7227%" height="15" fill="rgb(250,191,14)"/><text x="19.7371%" y="175.50">lint..</text></g><g><title>module_lints (96,491 samples, 0.15%)</title><rect x="23.0641%" y="149" width="0.1457%" height="15" fill="rgb(239,60,40)"/><text x="23.3141%" y="159.50"></text></g><g><title>lint_mod (93,731 samples, 0.14%)</title><rect x="23.0682%" y="133" width="0.1415%" height="15" fill="rgb(206,27,48)"/><text x="23.3182%" y="143.50"></text></g><g><title>privacy_access_levels (77,351 samples, 0.12%)</title><rect x="23.2098%" y="165" width="0.1168%" height="15" fill="rgb(225,35,8)"/><text x="23.4598%" y="175.50"></text></g><g><title>privacy_checking_modules (215,123 samples, 0.32%)</title><rect x="23.3266%" y="165" width="0.3249%" height="15" fill="rgb(250,213,24)"/><text x="23.5766%" y="175.50"></text></g><g><title>check_mod_privacy (213,752 samples, 0.32%)</title><rect x="23.3286%" y="149" width="0.3228%" height="15" fill="rgb(247,123,22)"/><text x="23.5786%" y="159.50"></text></g><g><title>misc_checking_3 (2,957,553 samples, 4.47%)</title><rect x="19.1967%" y="181" width="4.4661%" height="15" fill="rgb(231,138,38)"/><text x="19.4467%" y="191.50">misc_..</text></g><g><title>adt_sized_constraint (115,510 samples, 0.17%)</title><rect x="38.6059%" y="117" width="0.1744%" height="15" fill="rgb(231,145,46)"/><text x="38.8559%" y="127.50"></text></g><g><title>associated_item (324,505 samples, 0.49%)</title><rect x="39.0406%" y="101" width="0.4900%" height="15" fill="rgb(251,118,11)"/><text x="39.2906%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (247,712 samples, 0.37%)</title><rect x="39.1565%" y="85" width="0.3741%" height="15" fill="rgb(217,147,25)"/><text x="39.4065%" y="95.50"></text></g><g><title>associated_items (516,507 samples, 0.78%)</title><rect x="38.8012%" y="117" width="0.7800%" height="15" fill="rgb(247,81,37)"/><text x="39.0512%" y="127.50"></text></g><g><title>adt_dtorck_constraint (98,553 samples, 0.15%)</title><rect x="39.8607%" y="101" width="0.1488%" height="15" fill="rgb(209,12,38)"/><text x="40.1107%" y="111.50"></text></g><g><title>dropck_outlives (431,326 samples, 0.65%)</title><rect x="39.6586%" y="117" width="0.6513%" height="15" fill="rgb(227,1,9)"/><text x="39.9086%" y="127.50"></text></g><g><title>normalize_projection_ty (198,902 samples, 0.30%)</title><rect x="40.0096%" y="101" width="0.3004%" height="15" fill="rgb(248,47,43)"/><text x="40.2596%" y="111.50"></text></g><g><title>generics_of (537,383 samples, 0.81%)</title><rect x="42.5563%" y="101" width="0.8115%" height="15" fill="rgb(221,10,30)"/><text x="42.8063%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (470,182 samples, 0.71%)</title><rect x="42.6577%" y="85" width="0.7100%" height="15" fill="rgb(210,229,1)"/><text x="42.9077%" y="95.50"></text></g><g><title>impl_trait_ref (780,851 samples, 1.18%)</title><rect x="43.4269%" y="101" width="1.1791%" height="15" fill="rgb(222,148,37)"/><text x="43.6769%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (711,711 samples, 1.07%)</title><rect x="43.5313%" y="85" width="1.0747%" height="15" fill="rgb(234,67,33)"/><text x="43.7813%" y="95.50"></text></g><g><title>predicates_of (162,062 samples, 0.24%)</title><rect x="44.6284%" y="101" width="0.2447%" height="15" fill="rgb(247,98,35)"/><text x="44.8784%" y="111.50"></text></g><g><title>predicates_defined_on (109,581 samples, 0.17%)</title><rect x="44.7076%" y="85" width="0.1655%" height="15" fill="rgb(247,138,52)"/><text x="44.9576%" y="95.50"></text></g><g><title>specializes (225,302 samples, 0.34%)</title><rect x="44.8731%" y="101" width="0.3402%" height="15" fill="rgb(213,79,30)"/><text x="45.1231%" y="111.50"></text></g><g><title>param_env (180,761 samples, 0.27%)</title><rect x="44.9404%" y="85" width="0.2730%" height="15" fill="rgb(246,177,23)"/><text x="45.1904%" y="95.50"></text></g><g><title>def_span (129,531 samples, 0.20%)</title><rect x="45.0177%" y="69" width="0.1956%" height="15" fill="rgb(230,62,27)"/><text x="45.2677%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (125,771 samples, 0.19%)</title><rect x="45.0234%" y="53" width="0.1899%" height="15" fill="rgb(216,154,8)"/><text x="45.2734%" y="63.50"></text></g><g><title>trait_impls_of (724,538 samples, 1.09%)</title><rect x="45.2300%" y="101" width="1.0941%" height="15" fill="rgb(244,35,45)"/><text x="45.4800%" y="111.50"></text></g><g><title>implementations_of_trait (251,093 samples, 0.38%)</title><rect x="45.9449%" y="85" width="0.3792%" height="15" fill="rgb(251,115,12)"/><text x="46.1949%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (155,080 samples, 0.23%)</title><rect x="46.0899%" y="69" width="0.2342%" height="15" fill="rgb(240,54,50)"/><text x="46.3399%" y="79.50"></text></g><g><title>evaluate_obligation (3,991,307 samples, 6.03%)</title><rect x="40.3099%" y="117" width="6.0271%" height="15" fill="rgb(233,84,52)"/><text x="40.5599%" y="127.50">evaluate..</text></g><g><title>fn_sig (98,631 samples, 0.15%)</title><rect x="46.3811%" y="117" width="0.1489%" height="15" fill="rgb(207,117,47)"/><text x="46.6311%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (88,061 samples, 0.13%)</title><rect x="46.3971%" y="101" width="0.1330%" height="15" fill="rgb(249,43,39)"/><text x="46.6471%" y="111.50"></text></g><g><title>generics_of (704,034 samples, 1.06%)</title><rect x="46.5301%" y="117" width="1.0631%" height="15" fill="rgb(209,38,44)"/><text x="46.7801%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (557,910 samples, 0.84%)</title><rect x="46.7507%" y="101" width="0.8425%" height="15" fill="rgb(236,212,23)"/><text x="47.0007%" y="111.50"></text></g><g><title>impl_item_implementor_ids (90,283 samples, 0.14%)</title><rect x="47.5932%" y="117" width="0.1363%" height="15" fill="rgb(242,79,21)"/><text x="47.8432%" y="127.50"></text></g><g><title>associated_items (77,913 samples, 0.12%)</title><rect x="47.6119%" y="101" width="0.1177%" height="15" fill="rgb(211,96,35)"/><text x="47.8619%" y="111.50"></text></g><g><title>impl_trait_ref (1,227,901 samples, 1.85%)</title><rect x="47.7452%" y="117" width="1.8542%" height="15" fill="rgb(253,215,40)"/><text x="47.9952%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,083,661 samples, 1.64%)</title><rect x="47.9631%" y="101" width="1.6364%" height="15" fill="rgb(211,81,21)"/><text x="48.2131%" y="111.50"></text></g><g><title>item_attrs (67,010 samples, 0.10%)</title><rect x="49.6254%" y="117" width="0.1012%" height="15" fill="rgb(208,190,38)"/><text x="49.8754%" y="127.50"></text></g><g><title>evaluate_obligation (294,232 samples, 0.44%)</title><rect x="50.2661%" y="101" width="0.4443%" height="15" fill="rgb(235,213,38)"/><text x="50.5161%" y="111.50"></text></g><g><title>method_autoderef_steps (625,685 samples, 0.94%)</title><rect x="49.8033%" y="117" width="0.9448%" height="15" fill="rgb(237,122,38)"/><text x="50.0533%" y="127.50"></text></g><g><title>explicit_predicates_of (93,982 samples, 0.14%)</title><rect x="51.0248%" y="85" width="0.1419%" height="15" fill="rgb(244,218,35)"/><text x="51.2748%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (72,802 samples, 0.11%)</title><rect x="51.0568%" y="69" width="0.1099%" height="15" fill="rgb(240,68,47)"/><text x="51.3068%" y="79.50"></text></g><g><title>predicates_of (288,964 samples, 0.44%)</title><rect x="50.7939%" y="117" width="0.4364%" height="15" fill="rgb(210,16,53)"/><text x="51.0439%" y="127.50"></text></g><g><title>predicates_defined_on (196,162 samples, 0.30%)</title><rect x="50.9340%" y="101" width="0.2962%" height="15" fill="rgb(235,124,12)"/><text x="51.1840%" y="111.50"></text></g><g><title>specializes (75,210 samples, 0.11%)</title><rect x="51.2302%" y="117" width="0.1136%" height="15" fill="rgb(224,169,11)"/><text x="51.4802%" y="127.50"></text></g><g><title>trait_impls_of (154,491 samples, 0.23%)</title><rect x="51.3764%" y="117" width="0.2333%" height="15" fill="rgb(250,166,2)"/><text x="51.6264%" y="127.50"></text></g><g><title>type_of (68,462 samples, 0.10%)</title><rect x="51.6097%" y="117" width="0.1034%" height="15" fill="rgb(242,216,29)"/><text x="51.8597%" y="127.50"></text></g><g><title>item_bodies_checking (18,498,836 samples, 27.93%)</title><rect x="23.8077%" y="165" width="27.9345%" height="15" fill="rgb(230,116,27)"/><text x="24.0577%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,495,716 samples, 27.93%)</title><rect x="23.8124%" y="149" width="27.9298%" height="15" fill="rgb(228,99,48)"/><text x="24.0624%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (18,482,496 samples, 27.91%)</title><rect x="23.8324%" y="133" width="27.9098%" height="15" fill="rgb(253,11,6)"/><text x="24.0824%" y="143.50">typeck</text></g><g><title>impl_parent (207,771 samples, 0.31%)</title><rect x="52.1082%" y="85" width="0.3137%" height="15" fill="rgb(247,143,39)"/><text x="52.3582%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (162,851 samples, 0.25%)</title><rect x="52.1760%" y="69" width="0.2459%" height="15" fill="rgb(236,97,10)"/><text x="52.4260%" y="79.50"></text></g><g><title>impl_trait_ref (772,401 samples, 1.17%)</title><rect x="52.4219%" y="85" width="1.1664%" height="15" fill="rgb(233,208,19)"/><text x="52.6719%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (727,940 samples, 1.10%)</title><rect x="52.4891%" y="69" width="1.0992%" height="15" fill="rgb(216,164,2)"/><text x="52.7391%" y="79.50"></text></g><g><title>item_types_checking (1,313,635 samples, 1.98%)</title><rect x="51.7422%" y="165" width="1.9837%" height="15" fill="rgb(220,129,5)"/><text x="51.9922%" y="175.50">i..</text></g><g><title>check_mod_item_types (1,309,895 samples, 1.98%)</title><rect x="51.7479%" y="149" width="1.9780%" height="15" fill="rgb(242,17,10)"/><text x="51.9979%" y="159.50">c..</text></g><g><title>adt_destructor (1,291,145 samples, 1.95%)</title><rect x="51.7762%" y="133" width="1.9497%" height="15" fill="rgb(242,107,0)"/><text x="52.0262%" y="143.50">a..</text></g><g><title>coherent_trait (1,284,665 samples, 1.94%)</title><rect x="51.7860%" y="117" width="1.9399%" height="15" fill="rgb(251,28,31)"/><text x="52.0360%" y="127.50">c..</text></g><g><title>specialization_graph_of (1,278,285 samples, 1.93%)</title><rect x="51.7956%" y="101" width="1.9303%" height="15" fill="rgb(233,223,10)"/><text x="52.0456%" y="111.50">s..</text></g><g><title>trait_impls_of (91,111 samples, 0.14%)</title><rect x="53.5883%" y="85" width="0.1376%" height="15" fill="rgb(215,21,27)"/><text x="53.8383%" y="95.50"></text></g><g><title>fn_sig (108,150 samples, 0.16%)</title><rect x="53.9022%" y="133" width="0.1633%" height="15" fill="rgb(232,23,21)"/><text x="54.1522%" y="143.50"></text></g><g><title>generics_of (86,722 samples, 0.13%)</title><rect x="54.0655%" y="133" width="0.1310%" height="15" fill="rgb(244,5,23)"/><text x="54.3155%" y="143.50"></text></g><g><title>late_bound_vars_map (208,742 samples, 0.32%)</title><rect x="54.6836%" y="85" width="0.3152%" height="15" fill="rgb(226,81,46)"/><text x="54.9336%" y="95.50"></text></g><g><title>resolve_lifetimes (193,822 samples, 0.29%)</title><rect x="54.7061%" y="69" width="0.2927%" height="15" fill="rgb(247,70,30)"/><text x="54.9561%" y="79.50"></text></g><g><title>associated_item (68,741 samples, 0.10%)</title><rect x="55.2995%" y="53" width="0.1038%" height="15" fill="rgb(212,68,19)"/><text x="55.5495%" y="63.50"></text></g><g><title>associated_items (123,292 samples, 0.19%)</title><rect x="55.2347%" y="69" width="0.1862%" height="15" fill="rgb(240,187,13)"/><text x="55.4847%" y="79.50"></text></g><g><title>explicit_predicates_of (823,619 samples, 1.24%)</title><rect x="54.2596%" y="101" width="1.2437%" height="15" fill="rgb(223,113,26)"/><text x="54.5096%" y="111.50"></text></g><g><title>type_param_predicates (315,844 samples, 0.48%)</title><rect x="55.0264%" y="85" width="0.4769%" height="15" fill="rgb(206,192,2)"/><text x="55.2764%" y="95.50"></text></g><g><title>predicates_of (982,691 samples, 1.48%)</title><rect x="54.1974%" y="133" width="1.4839%" height="15" fill="rgb(241,108,4)"/><text x="54.4474%" y="143.50"></text></g><g><title>predicates_defined_on (969,020 samples, 1.46%)</title><rect x="54.2181%" y="117" width="1.4633%" height="15" fill="rgb(247,173,49)"/><text x="54.4681%" y="127.50"></text></g><g><title>inferred_outlives_of (117,921 samples, 0.18%)</title><rect x="55.5033%" y="101" width="0.1781%" height="15" fill="rgb(224,114,35)"/><text x="55.7533%" y="111.50"></text></g><g><title>inferred_outlives_crate (107,681 samples, 0.16%)</title><rect x="55.5188%" y="85" width="0.1626%" height="15" fill="rgb(245,159,27)"/><text x="55.7688%" y="95.50"></text></g><g><title>type_collecting (1,371,855 samples, 2.07%)</title><rect x="53.7281%" y="165" width="2.0716%" height="15" fill="rgb(245,172,44)"/><text x="53.9781%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,361,025 samples, 2.06%)</title><rect x="53.7444%" y="149" width="2.0552%" height="15" fill="rgb(236,23,11)"/><text x="53.9944%" y="159.50">c..</text></g><g><title>type_of (78,330 samples, 0.12%)</title><rect x="55.6814%" y="133" width="0.1183%" height="15" fill="rgb(205,117,38)"/><text x="55.9314%" y="143.50"></text></g><g><title>evaluate_obligation (271,192 samples, 0.41%)</title><rect x="58.4549%" y="133" width="0.4095%" height="15" fill="rgb(237,72,25)"/><text x="58.7049%" y="143.50"></text></g><g><title>implied_outlives_bounds (505,496 samples, 0.76%)</title><rect x="58.8645%" y="133" width="0.7633%" height="15" fill="rgb(244,70,9)"/><text x="59.1145%" y="143.50"></text></g><g><title>param_env (531,874 samples, 0.80%)</title><rect x="59.6278%" y="133" width="0.8032%" height="15" fill="rgb(217,125,39)"/><text x="59.8778%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,266,315 samples, 4.93%)</title><rect x="55.9193%" y="149" width="4.9324%" height="15" fill="rgb(235,36,10)"/><text x="56.1693%" y="159.50">check_..</text></g><g><title>region_scope_tree (226,224 samples, 0.34%)</title><rect x="60.5101%" y="133" width="0.3416%" height="15" fill="rgb(251,123,47)"/><text x="60.7601%" y="143.50"></text></g><g><title>evaluate_obligation (68,991 samples, 0.10%)</title><rect x="62.1371%" y="133" width="0.1042%" height="15" fill="rgb(221,13,13)"/><text x="62.3871%" y="143.50"></text></g><g><title>implied_outlives_bounds (154,562 samples, 0.23%)</title><rect x="62.2429%" y="133" width="0.2334%" height="15" fill="rgb(238,131,9)"/><text x="62.4929%" y="143.50"></text></g><g><title>param_env (840,220 samples, 1.27%)</title><rect x="62.5720%" y="133" width="1.2688%" height="15" fill="rgb(211,50,8)"/><text x="62.8220%" y="143.50"></text></g><g><title>trait_impls_of (108,701 samples, 0.16%)</title><rect x="63.6767%" y="117" width="0.1641%" height="15" fill="rgb(245,182,24)"/><text x="63.9267%" y="127.50"></text></g><g><title>predicates_of (93,961 samples, 0.14%)</title><rect x="63.8408%" y="133" width="0.1419%" height="15" fill="rgb(242,14,37)"/><text x="64.0908%" y="143.50"></text></g><g><title>trait_impls_of (698,197 samples, 1.05%)</title><rect x="63.9911%" y="133" width="1.0543%" height="15" fill="rgb(246,228,12)"/><text x="64.2411%" y="143.50"></text></g><g><title>implementations_of_trait (208,792 samples, 0.32%)</title><rect x="64.7302%" y="117" width="0.3153%" height="15" fill="rgb(213,55,15)"/><text x="64.9802%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (133,982 samples, 0.20%)</title><rect x="64.8431%" y="101" width="0.2023%" height="15" fill="rgb(209,9,3)"/><text x="65.0931%" y="111.50"></text></g><g><title>analysis (42,472,803 samples, 64.14%)</title><rect x="0.9995%" y="197" width="64.1368%" height="15" fill="rgb(230,59,30)"/><text x="1.2495%" y="207.50">analysis</text></g><g><title>type_check_crate (27,464,656 samples, 41.47%)</title><rect x="23.6628%" y="181" width="41.4735%" height="15" fill="rgb(209,121,21)"/><text x="23.9128%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,181,868 samples, 9.34%)</title><rect x="55.8012%" y="165" width="9.3350%" height="15" fill="rgb(220,109,13)"/><text x="56.0512%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (2,837,372 samples, 4.28%)</title><rect x="60.8517%" y="149" width="4.2846%" height="15" fill="rgb(232,18,1)"/><text x="61.1017%" y="159.50">check..</text></g><g><title>native_libraries (97,841 samples, 0.15%)</title><rect x="65.9336%" y="181" width="0.1477%" height="15" fill="rgb(215,41,42)"/><text x="66.1836%" y="191.50"></text></g><g><title>metadata_decode_entry_native_libraries (92,021 samples, 0.14%)</title><rect x="65.9424%" y="165" width="0.1390%" height="15" fill="rgb(224,123,36)"/><text x="66.1924%" y="175.50"></text></g><g><title>codegen_crate (639,177 samples, 0.97%)</title><rect x="65.1535%" y="197" width="0.9652%" height="15" fill="rgb(240,125,3)"/><text x="65.4035%" y="207.50"></text></g><g><title>AST_validation (74,971 samples, 0.11%)</title><rect x="66.4654%" y="181" width="0.1132%" height="15" fill="rgb(205,98,50)"/><text x="66.7154%" y="191.50"></text></g><g><title>crate_injection (76,311 samples, 0.12%)</title><rect x="66.6297%" y="181" width="0.1152%" height="15" fill="rgb(205,185,37)"/><text x="66.8797%" y="191.50"></text></g><g><title>macro_expand_crate (12,495,549 samples, 18.87%)</title><rect x="66.7450%" y="181" width="18.8691%" height="15" fill="rgb(238,207,15)"/><text x="66.9950%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,471,149 samples, 18.83%)</title><rect x="66.7818%" y="165" width="18.8323%" height="15" fill="rgb(213,199,42)"/><text x="67.0318%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,881,062 samples, 4.35%)</title><rect x="81.2635%" y="149" width="4.3506%" height="15" fill="rgb(235,201,11)"/><text x="81.5135%" y="159.50">metad..</text></g><g><title>metadata_register_crate (2,072,034 samples, 3.13%)</title><rect x="82.4852%" y="133" width="3.1289%" height="15" fill="rgb(207,46,11)"/><text x="82.7352%" y="143.50">met..</text></g><g><title>metadata_register_crate (820,138 samples, 1.24%)</title><rect x="84.3756%" y="117" width="1.2385%" height="15" fill="rgb(241,35,35)"/><text x="84.6256%" y="127.50"></text></g><g><title>metadata_register_crate (67,320 samples, 0.10%)</title><rect x="85.5124%" y="101" width="0.1017%" height="15" fill="rgb(243,32,47)"/><text x="85.7624%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (123,122 samples, 0.19%)</title><rect x="85.6206%" y="181" width="0.1859%" height="15" fill="rgb(247,202,23)"/><text x="85.8706%" y="191.50"></text></g><g><title>finalize_imports (299,083 samples, 0.45%)</title><rect x="85.8197%" y="165" width="0.4516%" height="15" fill="rgb(219,102,11)"/><text x="86.0697%" y="175.50"></text></g><g><title>late_resolve_crate (848,109 samples, 1.28%)</title><rect x="86.2824%" y="165" width="1.2807%" height="15" fill="rgb(243,110,44)"/><text x="86.5324%" y="175.50"></text></g><g><title>configure_and_expand (14,270,169 samples, 21.55%)</title><rect x="66.1187%" y="197" width="21.5489%" height="15" fill="rgb(222,74,54)"/><text x="66.3687%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,232,484 samples, 1.86%)</title><rect x="85.8065%" y="181" width="1.8611%" height="15" fill="rgb(216,99,12)"/><text x="86.0565%" y="191.50">r..</text></g><g><title>drop_ast (97,901 samples, 0.15%)</title><rect x="87.6677%" y="197" width="0.1478%" height="15" fill="rgb(226,22,26)"/><text x="87.9177%" y="207.50"></text></g><g><title>early_lint_checks (180,932 samples, 0.27%)</title><rect x="87.8414%" y="197" width="0.2732%" height="15" fill="rgb(217,163,10)"/><text x="88.0914%" y="207.50"></text></g><g><title>free_global_ctxt (2,998,643 samples, 4.53%)</title><rect x="88.1146%" y="197" width="4.5282%" height="15" fill="rgb(213,25,53)"/><text x="88.3646%" y="207.50">free_..</text></g><g><title>crate_hash (69,662 samples, 0.11%)</title><rect x="92.9820%" y="181" width="0.1052%" height="15" fill="rgb(252,105,26)"/><text x="93.2320%" y="191.50"></text></g><g><title>generate_crate_metadata (370,214 samples, 0.56%)</title><rect x="92.6428%" y="197" width="0.5590%" height="15" fill="rgb(220,39,43)"/><text x="92.8928%" y="207.50"></text></g><g><title>hir_lowering (1,374,166 samples, 2.08%)</title><rect x="93.2018%" y="197" width="2.0751%" height="15" fill="rgb(229,68,48)"/><text x="93.4518%" y="207.50">h..</text></g><g><title>parse_crate (1,776,150 samples, 2.68%)</title><rect x="95.3481%" y="197" width="2.6821%" height="15" fill="rgb(252,8,32)"/><text x="95.5981%" y="207.50">pa..</text></g><g><title>prepare_outputs (326,454 samples, 0.49%)</title><rect x="98.0440%" y="197" width="0.4930%" height="15" fill="rgb(223,20,43)"/><text x="98.2940%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (538,776 samples, 0.81%)</title><rect x="98.5370%" y="197" width="0.8136%" height="15" fill="rgb(229,81,49)"/><text x="98.7870%" y="207.50"></text></g><g><title>setup_global_ctxt (138,541 samples, 0.21%)</title><rect x="99.3666%" y="197" width="0.2092%" height="15" fill="rgb(236,28,36)"/><text x="99.6166%" y="207.50"></text></g><g><title>all (66,222,197 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (66,222,197 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (280,903 samples, 0.42%)</title><rect x="99.5758%" y="197" width="0.4242%" height="15" fill="rgb(233,201,37)"/><text x="99.8258%" y="207.50"></text></g></svg></svg>