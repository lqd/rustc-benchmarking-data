<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (287,732 samples, 0.19%)</title><rect x="11.3020%" y="149" width="0.1932%" height="15" fill="rgb(227,0,7)"/><text x="11.5520%" y="159.50"></text></g><g><title>item_attrs (265,573 samples, 0.18%)</title><rect x="11.9288%" y="117" width="0.1783%" height="15" fill="rgb(217,0,24)"/><text x="12.1788%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (257,483 samples, 0.17%)</title><rect x="11.9342%" y="101" width="0.1729%" height="15" fill="rgb(221,193,54)"/><text x="12.1842%" y="111.50"></text></g><g><title>codegen_fn_attrs (397,164 samples, 0.27%)</title><rect x="11.8493%" y="133" width="0.2667%" height="15" fill="rgb(248,212,6)"/><text x="12.0993%" y="143.50"></text></g><g><title>is_copy_raw (163,651 samples, 0.11%)</title><rect x="14.6860%" y="117" width="0.1099%" height="15" fill="rgb(208,68,35)"/><text x="14.9360%" y="127.50"></text></g><g><title>adt_drop_tys (177,611 samples, 0.12%)</title><rect x="14.8368%" y="101" width="0.1193%" height="15" fill="rgb(232,128,0)"/><text x="15.0868%" y="111.50"></text></g><g><title>needs_drop_raw (642,678 samples, 0.43%)</title><rect x="14.7959%" y="117" width="0.4315%" height="15" fill="rgb(207,160,47)"/><text x="15.0459%" y="127.50"></text></g><g><title>is_copy_raw (404,025 samples, 0.27%)</title><rect x="14.9561%" y="101" width="0.2713%" height="15" fill="rgb(228,23,34)"/><text x="15.2061%" y="111.50"></text></g><g><title>evaluate_obligation (328,754 samples, 0.22%)</title><rect x="15.0066%" y="85" width="0.2207%" height="15" fill="rgb(218,30,26)"/><text x="15.2566%" y="95.50"></text></g><g><title>impl_parent (481,736 samples, 0.32%)</title><rect x="15.7974%" y="85" width="0.3235%" height="15" fill="rgb(220,122,19)"/><text x="16.0474%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (320,325 samples, 0.22%)</title><rect x="15.9057%" y="69" width="0.2151%" height="15" fill="rgb(250,228,42)"/><text x="16.1557%" y="79.50"></text></g><g><title>specialization_graph_of (1,451,517 samples, 0.97%)</title><rect x="15.4221%" y="101" width="0.9746%" height="15" fill="rgb(240,193,28)"/><text x="15.6721%" y="111.50"></text></g><g><title>impl_trait_ref (410,934 samples, 0.28%)</title><rect x="16.1208%" y="85" width="0.2759%" height="15" fill="rgb(216,20,37)"/><text x="16.3708%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (353,152 samples, 0.24%)</title><rect x="16.1596%" y="69" width="0.2371%" height="15" fill="rgb(206,188,39)"/><text x="16.4096%" y="79.50"></text></g><g><title>resolve_instance (1,823,348 samples, 1.22%)</title><rect x="15.2274%" y="117" width="1.2243%" height="15" fill="rgb(217,207,13)"/><text x="15.4774%" y="127.50"></text></g><g><title>thir_body (1,534,233 samples, 1.03%)</title><rect x="16.4643%" y="117" width="1.0302%" height="15" fill="rgb(231,73,38)"/><text x="16.7143%" y="127.50"></text></g><g><title>mir_const (10,219,770 samples, 6.86%)</title><rect x="10.6467%" y="165" width="6.8621%" height="15" fill="rgb(225,20,46)"/><text x="10.8967%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (8,956,062 samples, 6.01%)</title><rect x="11.4952%" y="149" width="6.0136%" height="15" fill="rgb(210,31,41)"/><text x="11.7452%" y="159.50">unsafety..</text></g><g><title>mir_built (8,031,573 samples, 5.39%)</title><rect x="12.1159%" y="133" width="5.3928%" height="15" fill="rgb(221,200,47)"/><text x="12.3659%" y="143.50">mir_bui..</text></g><g><title>mir_promoted (11,114,007 samples, 7.46%)</title><rect x="10.0657%" y="181" width="7.4625%" height="15" fill="rgb(226,26,5)"/><text x="10.3157%" y="191.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (185,032 samples, 0.12%)</title><rect x="17.5282%" y="181" width="0.1242%" height="15" fill="rgb(249,33,26)"/><text x="17.7782%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (450,495 samples, 0.30%)</title><rect x="17.6524%" y="181" width="0.3025%" height="15" fill="rgb(235,183,28)"/><text x="17.9024%" y="191.50"></text></g><g><title>normalize_projection_ty (315,964 samples, 0.21%)</title><rect x="17.7428%" y="165" width="0.2122%" height="15" fill="rgb(221,5,38)"/><text x="17.9928%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,175,515 samples, 0.79%)</title><rect x="18.0063%" y="181" width="0.7893%" height="15" fill="rgb(247,18,42)"/><text x="18.2563%" y="191.50"></text></g><g><title>MIR_borrow_checking (26,482,814 samples, 17.78%)</title><rect x="1.0170%" y="213" width="17.7820%" height="15" fill="rgb(241,131,45)"/><text x="1.2670%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,397,483 samples, 17.72%)</title><rect x="1.0743%" y="197" width="17.7247%" height="15" fill="rgb(249,31,29)"/><text x="1.3243%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (217,243 samples, 0.15%)</title><rect x="18.8607%" y="213" width="0.1459%" height="15" fill="rgb(225,111,53)"/><text x="19.1107%" y="223.50"></text></g><g><title>late_bound_vars_map (226,891 samples, 0.15%)</title><rect x="19.6595%" y="149" width="0.1523%" height="15" fill="rgb(238,160,17)"/><text x="19.9095%" y="159.50"></text></g><g><title>resolve_lifetimes (201,221 samples, 0.14%)</title><rect x="19.6768%" y="133" width="0.1351%" height="15" fill="rgb(214,148,48)"/><text x="19.9268%" y="143.50"></text></g><g><title>fn_sig (473,504 samples, 0.32%)</title><rect x="19.5284%" y="165" width="0.3179%" height="15" fill="rgb(232,36,49)"/><text x="19.7784%" y="175.50"></text></g><g><title>should_inherit_track_caller (215,533 samples, 0.14%)</title><rect x="19.9213%" y="165" width="0.1447%" height="15" fill="rgb(209,103,24)"/><text x="20.1713%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,015,062 samples, 0.68%)</title><rect x="19.4040%" y="181" width="0.6816%" height="15" fill="rgb(229,88,8)"/><text x="19.6540%" y="191.50"></text></g><g><title>check_mod_attrs (1,576,388 samples, 1.06%)</title><rect x="19.0273%" y="197" width="1.0585%" height="15" fill="rgb(213,181,19)"/><text x="19.2773%" y="207.50"></text></g><g><title>check_mod_const_bodies (221,372 samples, 0.15%)</title><rect x="20.0857%" y="197" width="0.1486%" height="15" fill="rgb(254,191,54)"/><text x="20.3357%" y="207.50"></text></g><g><title>check_mod_loops (170,052 samples, 0.11%)</title><rect x="20.2344%" y="197" width="0.1142%" height="15" fill="rgb(241,83,37)"/><text x="20.4844%" y="207.50"></text></g><g><title>lint_levels (331,724 samples, 0.22%)</title><rect x="20.5689%" y="181" width="0.2227%" height="15" fill="rgb(233,36,39)"/><text x="20.8189%" y="191.50"></text></g><g><title>lookup_deprecation_entry (238,792 samples, 0.16%)</title><rect x="20.7916%" y="181" width="0.1603%" height="15" fill="rgb(226,3,54)"/><text x="21.0416%" y="191.50"></text></g><g><title>stability_index (161,312 samples, 0.11%)</title><rect x="20.8436%" y="165" width="0.1083%" height="15" fill="rgb(245,192,40)"/><text x="21.0936%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,006,391 samples, 0.68%)</title><rect x="20.3612%" y="197" width="0.6757%" height="15" fill="rgb(238,167,29)"/><text x="20.6112%" y="207.50"></text></g><g><title>misc_checking_1 (3,083,834 samples, 2.07%)</title><rect x="19.0069%" y="213" width="2.0706%" height="15" fill="rgb(232,182,51)"/><text x="19.2569%" y="223.50">m..</text></g><g><title>liveness_and_intrinsic_checking (575,067 samples, 0.39%)</title><rect x="21.0786%" y="197" width="0.3861%" height="15" fill="rgb(231,60,39)"/><text x="21.3286%" y="207.50"></text></g><g><title>check_mod_liveness (452,395 samples, 0.30%)</title><rect x="21.1610%" y="181" width="0.3038%" height="15" fill="rgb(208,69,12)"/><text x="21.4110%" y="191.50"></text></g><g><title>misc_checking_2 (1,170,183 samples, 0.79%)</title><rect x="21.0775%" y="213" width="0.7857%" height="15" fill="rgb(235,93,37)"/><text x="21.3275%" y="223.50"></text></g><g><title>match_checking (593,506 samples, 0.40%)</title><rect x="21.4647%" y="197" width="0.3985%" height="15" fill="rgb(213,116,39)"/><text x="21.7147%" y="207.50"></text></g><g><title>check_match (570,665 samples, 0.38%)</title><rect x="21.4801%" y="181" width="0.3832%" height="15" fill="rgb(222,207,29)"/><text x="21.7301%" y="191.50"></text></g><g><title>check_private_in_public (151,652 samples, 0.10%)</title><rect x="21.8704%" y="197" width="0.1018%" height="15" fill="rgb(206,96,30)"/><text x="22.1204%" y="207.50"></text></g><g><title>death_checking (1,354,095 samples, 0.91%)</title><rect x="21.9723%" y="197" width="0.9092%" height="15" fill="rgb(218,138,4)"/><text x="22.2223%" y="207.50"></text></g><g><title>crate_lints (2,323,356 samples, 1.56%)</title><rect x="22.8825%" y="181" width="1.5600%" height="15" fill="rgb(250,191,14)"/><text x="23.1325%" y="191.50"></text></g><g><title>type_of (1,182,282 samples, 0.79%)</title><rect x="23.6487%" y="165" width="0.7938%" height="15" fill="rgb(239,60,40)"/><text x="23.8987%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (930,757 samples, 0.62%)</title><rect x="23.8176%" y="149" width="0.6250%" height="15" fill="rgb(206,27,48)"/><text x="24.0676%" y="159.50"></text></g><g><title>lint_checking (2,912,233 samples, 1.96%)</title><rect x="22.8815%" y="197" width="1.9554%" height="15" fill="rgb(225,35,8)"/><text x="23.1315%" y="207.50">l..</text></g><g><title>module_lints (587,357 samples, 0.39%)</title><rect x="24.4425%" y="181" width="0.3944%" height="15" fill="rgb(250,213,24)"/><text x="24.6925%" y="191.50"></text></g><g><title>lint_mod (583,467 samples, 0.39%)</title><rect x="24.4451%" y="165" width="0.3918%" height="15" fill="rgb(247,123,22)"/><text x="24.6951%" y="175.50"></text></g><g><title>privacy_access_levels (198,952 samples, 0.13%)</title><rect x="24.8369%" y="197" width="0.1336%" height="15" fill="rgb(231,138,38)"/><text x="25.0869%" y="207.50"></text></g><g><title>privacy_checking_modules (747,668 samples, 0.50%)</title><rect x="24.9705%" y="197" width="0.5020%" height="15" fill="rgb(231,145,46)"/><text x="25.2205%" y="207.50"></text></g><g><title>check_mod_privacy (745,118 samples, 0.50%)</title><rect x="24.9722%" y="181" width="0.5003%" height="15" fill="rgb(251,118,11)"/><text x="25.2222%" y="191.50"></text></g><g><title>misc_checking_3 (5,389,150 samples, 3.62%)</title><rect x="21.8633%" y="213" width="3.6186%" height="15" fill="rgb(217,147,25)"/><text x="22.1133%" y="223.50">misc..</text></g><g><title>impl_parent (2,623,683 samples, 1.76%)</title><rect x="28.0676%" y="149" width="1.7617%" height="15" fill="rgb(247,81,37)"/><text x="28.3176%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,261,031 samples, 0.85%)</title><rect x="28.9826%" y="133" width="0.8467%" height="15" fill="rgb(209,12,38)"/><text x="29.2326%" y="143.50"></text></g><g><title>impl_trait_ref (6,670,367 samples, 4.48%)</title><rect x="29.8293%" y="149" width="4.4788%" height="15" fill="rgb(227,1,9)"/><text x="30.0793%" y="159.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,662,749 samples, 3.80%)</title><rect x="30.5059%" y="133" width="3.8023%" height="15" fill="rgb(248,47,43)"/><text x="30.7559%" y="143.50">meta..</text></g><g><title>coherent_trait (13,821,594 samples, 9.28%)</title><rect x="25.5310%" y="181" width="9.2805%" height="15" fill="rgb(221,10,30)"/><text x="25.7810%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (13,809,154 samples, 9.27%)</title><rect x="25.5393%" y="165" width="9.2722%" height="15" fill="rgb(210,229,1)"/><text x="25.7893%" y="175.50">specializatio..</text></g><g><title>trait_impls_of (747,149 samples, 0.50%)</title><rect x="34.3099%" y="149" width="0.5017%" height="15" fill="rgb(222,148,37)"/><text x="34.5599%" y="159.50"></text></g><g><title>implementations_of_trait (169,432 samples, 0.11%)</title><rect x="34.6978%" y="133" width="0.1138%" height="15" fill="rgb(234,67,33)"/><text x="34.9478%" y="143.50"></text></g><g><title>coherence_checking (13,898,244 samples, 9.33%)</title><rect x="25.5197%" y="197" width="9.3320%" height="15" fill="rgb(247,98,35)"/><text x="25.7697%" y="207.50">coherence_che..</text></g><g><title>associated_item (512,574 samples, 0.34%)</title><rect x="53.9369%" y="133" width="0.3442%" height="15" fill="rgb(247,138,52)"/><text x="54.1869%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (414,854 samples, 0.28%)</title><rect x="54.0025%" y="117" width="0.2786%" height="15" fill="rgb(213,79,30)"/><text x="54.2525%" y="127.50"></text></g><g><title>associated_items (674,539 samples, 0.45%)</title><rect x="53.8414%" y="149" width="0.4529%" height="15" fill="rgb(246,177,23)"/><text x="54.0914%" y="159.50"></text></g><g><title>adt_dtorck_constraint (344,574 samples, 0.23%)</title><rect x="54.4084%" y="133" width="0.2314%" height="15" fill="rgb(230,62,27)"/><text x="54.6584%" y="143.50"></text></g><g><title>dropck_outlives (482,064 samples, 0.32%)</title><rect x="54.3295%" y="149" width="0.3237%" height="15" fill="rgb(216,154,8)"/><text x="54.5795%" y="159.50"></text></g><g><title>generics_of (1,517,702 samples, 1.02%)</title><rect x="57.3923%" y="133" width="1.0191%" height="15" fill="rgb(244,35,45)"/><text x="57.6423%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (1,198,467 samples, 0.80%)</title><rect x="57.6067%" y="117" width="0.8047%" height="15" fill="rgb(251,115,12)"/><text x="57.8567%" y="127.50"></text></g><g><title>impl_trait_ref (1,451,310 samples, 0.97%)</title><rect x="58.4748%" y="133" width="0.9745%" height="15" fill="rgb(240,54,50)"/><text x="58.7248%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,145,015 samples, 0.77%)</title><rect x="58.6805%" y="117" width="0.7688%" height="15" fill="rgb(233,84,52)"/><text x="58.9305%" y="127.50"></text></g><g><title>predicates_of (450,326 samples, 0.30%)</title><rect x="59.4737%" y="133" width="0.3024%" height="15" fill="rgb(207,117,47)"/><text x="59.7237%" y="143.50"></text></g><g><title>predicates_defined_on (261,313 samples, 0.18%)</title><rect x="59.6006%" y="117" width="0.1755%" height="15" fill="rgb(249,43,39)"/><text x="59.8506%" y="127.50"></text></g><g><title>specializes (961,283 samples, 0.65%)</title><rect x="59.7761%" y="133" width="0.6455%" height="15" fill="rgb(209,38,44)"/><text x="60.0261%" y="143.50"></text></g><g><title>param_env (586,946 samples, 0.39%)</title><rect x="60.0275%" y="117" width="0.3941%" height="15" fill="rgb(236,212,23)"/><text x="60.2775%" y="127.50"></text></g><g><title>def_span (247,451 samples, 0.17%)</title><rect x="60.2554%" y="101" width="0.1662%" height="15" fill="rgb(242,79,21)"/><text x="60.5054%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (217,381 samples, 0.15%)</title><rect x="60.2756%" y="85" width="0.1460%" height="15" fill="rgb(211,96,35)"/><text x="60.5256%" y="95.50"></text></g><g><title>trait_impls_of (423,864 samples, 0.28%)</title><rect x="60.4326%" y="133" width="0.2846%" height="15" fill="rgb(253,215,40)"/><text x="60.6826%" y="143.50"></text></g><g><title>implementations_of_trait (181,872 samples, 0.12%)</title><rect x="60.5951%" y="117" width="0.1221%" height="15" fill="rgb(211,81,21)"/><text x="60.8451%" y="127.50"></text></g><g><title>evaluate_obligation (9,064,859 samples, 6.09%)</title><rect x="54.6532%" y="149" width="6.0866%" height="15" fill="rgb(208,190,38)"/><text x="54.9032%" y="159.50">evaluate..</text></g><g><title>generics_of (189,023 samples, 0.13%)</title><rect x="60.8356%" y="149" width="0.1269%" height="15" fill="rgb(235,213,38)"/><text x="61.0856%" y="159.50"></text></g><g><title>impl_item_implementor_ids (176,782 samples, 0.12%)</title><rect x="60.9625%" y="149" width="0.1187%" height="15" fill="rgb(237,122,38)"/><text x="61.2125%" y="159.50"></text></g><g><title>associated_items (156,052 samples, 0.10%)</title><rect x="60.9765%" y="133" width="0.1048%" height="15" fill="rgb(244,218,35)"/><text x="61.2265%" y="143.50"></text></g><g><title>impl_trait_ref (149,452 samples, 0.10%)</title><rect x="61.0896%" y="149" width="0.1003%" height="15" fill="rgb(240,68,47)"/><text x="61.3396%" y="159.50"></text></g><g><title>item_attrs (184,150 samples, 0.12%)</title><rect x="61.1973%" y="149" width="0.1236%" height="15" fill="rgb(210,16,53)"/><text x="61.4473%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (176,750 samples, 0.12%)</title><rect x="61.2022%" y="133" width="0.1187%" height="15" fill="rgb(235,124,12)"/><text x="61.4522%" y="143.50"></text></g><g><title>associated_item (175,982 samples, 0.12%)</title><rect x="62.1327%" y="101" width="0.1182%" height="15" fill="rgb(224,169,11)"/><text x="62.3827%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (149,292 samples, 0.10%)</title><rect x="62.1506%" y="85" width="0.1002%" height="15" fill="rgb(250,166,2)"/><text x="62.4006%" y="95.50"></text></g><g><title>associated_items (222,013 samples, 0.15%)</title><rect x="62.1080%" y="117" width="0.1491%" height="15" fill="rgb(242,216,29)"/><text x="62.3580%" y="127.50"></text></g><g><title>mir_const_qualif_const_arg (220,292 samples, 0.15%)</title><rect x="62.3796%" y="69" width="0.1479%" height="15" fill="rgb(230,116,27)"/><text x="62.6296%" y="79.50"></text></g><g><title>mir_const (185,392 samples, 0.12%)</title><rect x="62.4030%" y="53" width="0.1245%" height="15" fill="rgb(228,99,48)"/><text x="62.6530%" y="63.50"></text></g><g><title>mir_borrowck_const_arg (473,465 samples, 0.32%)</title><rect x="62.6603%" y="37" width="0.3179%" height="15" fill="rgb(253,11,6)"/><text x="62.9103%" y="47.50"></text></g><g><title>mir_for_ctfe_of_const_arg (672,438 samples, 0.45%)</title><rect x="62.5275%" y="69" width="0.4515%" height="15" fill="rgb(247,143,39)"/><text x="62.7775%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (616,667 samples, 0.41%)</title><rect x="62.5650%" y="53" width="0.4141%" height="15" fill="rgb(236,97,10)"/><text x="62.8150%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,295,075 samples, 0.87%)</title><rect x="62.2654%" y="117" width="0.8696%" height="15" fill="rgb(233,208,19)"/><text x="62.5154%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,278,304 samples, 0.86%)</title><rect x="62.2766%" y="101" width="0.8583%" height="15" fill="rgb(216,164,2)"/><text x="62.5266%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,273,494 samples, 0.86%)</title><rect x="62.2799%" y="85" width="0.8551%" height="15" fill="rgb(220,129,5)"/><text x="62.5299%" y="95.50"></text></g><g><title>opt_const_param_of (2,674,729 samples, 1.80%)</title><rect x="61.5328%" y="149" width="1.7960%" height="15" fill="rgb(242,17,10)"/><text x="61.7828%" y="159.50">o..</text></g><g><title>typeck (2,657,459 samples, 1.78%)</title><rect x="61.5444%" y="133" width="1.7844%" height="15" fill="rgb(242,107,0)"/><text x="61.7944%" y="143.50">t..</text></g><g><title>predicates_of (348,995 samples, 0.23%)</title><rect x="63.3484%" y="149" width="0.2343%" height="15" fill="rgb(251,28,31)"/><text x="63.5984%" y="159.50"></text></g><g><title>predicates_defined_on (240,623 samples, 0.16%)</title><rect x="63.4212%" y="133" width="0.1616%" height="15" fill="rgb(233,223,10)"/><text x="63.6712%" y="143.50"></text></g><g><title>generics_of (592,971 samples, 0.40%)</title><rect x="67.5956%" y="117" width="0.3982%" height="15" fill="rgb(215,21,27)"/><text x="67.8456%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (403,627 samples, 0.27%)</title><rect x="67.7227%" y="101" width="0.2710%" height="15" fill="rgb(232,23,21)"/><text x="67.9727%" y="111.50"></text></g><g><title>impl_trait_ref (882,815 samples, 0.59%)</title><rect x="68.0846%" y="117" width="0.5928%" height="15" fill="rgb(244,5,23)"/><text x="68.3346%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (697,515 samples, 0.47%)</title><rect x="68.2090%" y="101" width="0.4683%" height="15" fill="rgb(226,81,46)"/><text x="68.4590%" y="111.50"></text></g><g><title>predicates_of (701,161 samples, 0.47%)</title><rect x="68.7067%" y="117" width="0.4708%" height="15" fill="rgb(247,70,30)"/><text x="68.9567%" y="127.50"></text></g><g><title>predicates_defined_on (389,729 samples, 0.26%)</title><rect x="68.9158%" y="101" width="0.2617%" height="15" fill="rgb(212,68,19)"/><text x="69.1658%" y="111.50"></text></g><g><title>specializes (2,329,589 samples, 1.56%)</title><rect x="69.1775%" y="117" width="1.5642%" height="15" fill="rgb(240,187,13)"/><text x="69.4275%" y="127.50"></text></g><g><title>param_env (1,235,292 samples, 0.83%)</title><rect x="69.9123%" y="101" width="0.8294%" height="15" fill="rgb(223,113,26)"/><text x="70.1623%" y="111.50"></text></g><g><title>def_span (561,915 samples, 0.38%)</title><rect x="70.3644%" y="85" width="0.3773%" height="15" fill="rgb(206,192,2)"/><text x="70.6144%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (494,985 samples, 0.33%)</title><rect x="70.4093%" y="69" width="0.3324%" height="15" fill="rgb(241,108,4)"/><text x="70.6593%" y="79.50"></text></g><g><title>trait_impls_of (322,062 samples, 0.22%)</title><rect x="70.7464%" y="117" width="0.2162%" height="15" fill="rgb(247,173,49)"/><text x="70.9964%" y="127.50"></text></g><g><title>evaluate_obligation (7,741,878 samples, 5.20%)</title><rect x="65.7760%" y="133" width="5.1983%" height="15" fill="rgb(224,114,35)"/><text x="66.0260%" y="143.50">evalua..</text></g><g><title>typeck (11,124,233 samples, 7.47%)</title><rect x="63.7559%" y="149" width="7.4694%" height="15" fill="rgb(245,159,27)"/><text x="64.0059%" y="159.50">typeck</text></g><g><title>item_bodies_checking (54,198,921 samples, 36.39%)</title><rect x="34.8773%" y="197" width="36.3920%" height="15" fill="rgb(245,172,44)"/><text x="35.1273%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (54,195,261 samples, 36.39%)</title><rect x="34.8797%" y="181" width="36.3896%" height="15" fill="rgb(236,23,11)"/><text x="35.1297%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (54,137,771 samples, 36.35%)</title><rect x="34.9183%" y="165" width="36.3510%" height="15" fill="rgb(205,117,38)"/><text x="35.1683%" y="175.50">typeck</text></g><g><title>adt_destructor (306,443 samples, 0.21%)</title><rect x="71.4578%" y="165" width="0.2058%" height="15" fill="rgb(237,72,25)"/><text x="71.7078%" y="175.50"></text></g><g><title>coherent_trait (300,983 samples, 0.20%)</title><rect x="71.4615%" y="149" width="0.2021%" height="15" fill="rgb(244,70,9)"/><text x="71.7115%" y="159.50"></text></g><g><title>specialization_graph_of (298,883 samples, 0.20%)</title><rect x="71.4629%" y="133" width="0.2007%" height="15" fill="rgb(217,125,39)"/><text x="71.7129%" y="143.50"></text></g><g><title>item_types_checking (652,407 samples, 0.44%)</title><rect x="71.2693%" y="197" width="0.4381%" height="15" fill="rgb(235,36,10)"/><text x="71.5193%" y="207.50"></text></g><g><title>check_mod_item_types (649,457 samples, 0.44%)</title><rect x="71.2713%" y="181" width="0.4361%" height="15" fill="rgb(251,123,47)"/><text x="71.5213%" y="191.50"></text></g><g><title>fn_sig (496,753 samples, 0.33%)</title><rect x="71.9820%" y="165" width="0.3335%" height="15" fill="rgb(221,13,13)"/><text x="72.2320%" y="175.50"></text></g><g><title>named_region_map (369,304 samples, 0.25%)</title><rect x="72.5060%" y="149" width="0.2480%" height="15" fill="rgb(238,131,9)"/><text x="72.7560%" y="159.50"></text></g><g><title>resolve_lifetimes (348,104 samples, 0.23%)</title><rect x="72.5202%" y="133" width="0.2337%" height="15" fill="rgb(211,50,8)"/><text x="72.7702%" y="143.50"></text></g><g><title>generics_of (667,008 samples, 0.45%)</title><rect x="72.3155%" y="165" width="0.4479%" height="15" fill="rgb(245,182,24)"/><text x="72.5655%" y="175.50"></text></g><g><title>explicit_predicates_of (182,653 samples, 0.12%)</title><rect x="72.9727%" y="133" width="0.1226%" height="15" fill="rgb(242,14,37)"/><text x="73.2227%" y="143.50"></text></g><g><title>predicates_of (542,838 samples, 0.36%)</title><rect x="72.8474%" y="165" width="0.3645%" height="15" fill="rgb(246,228,12)"/><text x="73.0974%" y="175.50"></text></g><g><title>predicates_defined_on (470,357 samples, 0.32%)</title><rect x="72.8960%" y="149" width="0.3158%" height="15" fill="rgb(213,55,15)"/><text x="73.1460%" y="159.50"></text></g><g><title>inferred_outlives_of (173,462 samples, 0.12%)</title><rect x="73.0954%" y="133" width="0.1165%" height="15" fill="rgb(209,9,3)"/><text x="73.3454%" y="143.50"></text></g><g><title>inferred_outlives_crate (149,332 samples, 0.10%)</title><rect x="73.1116%" y="117" width="0.1003%" height="15" fill="rgb(230,59,30)"/><text x="73.3616%" y="127.50"></text></g><g><title>type_collecting (2,372,446 samples, 1.59%)</title><rect x="71.7081%" y="197" width="1.5930%" height="15" fill="rgb(209,121,21)"/><text x="71.9581%" y="207.50"></text></g><g><title>collect_mod_item_types (2,360,896 samples, 1.59%)</title><rect x="71.7159%" y="181" width="1.5852%" height="15" fill="rgb(220,109,13)"/><text x="71.9659%" y="191.50"></text></g><g><title>evaluate_obligation (173,901 samples, 0.12%)</title><rect x="73.7867%" y="165" width="0.1168%" height="15" fill="rgb(232,18,1)"/><text x="74.0367%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,153,945 samples, 0.77%)</title><rect x="73.3896%" y="181" width="0.7748%" height="15" fill="rgb(215,41,42)"/><text x="73.6396%" y="191.50"></text></g><g><title>region_scope_tree (234,804 samples, 0.16%)</title><rect x="74.0068%" y="165" width="0.1577%" height="15" fill="rgb(224,123,36)"/><text x="74.2568%" y="175.50"></text></g><g><title>param_env (210,701 samples, 0.14%)</title><rect x="74.9368%" y="165" width="0.1415%" height="15" fill="rgb(240,125,3)"/><text x="75.1868%" y="175.50"></text></g><g><title>region_scope_tree (263,195 samples, 0.18%)</title><rect x="75.1195%" y="165" width="0.1767%" height="15" fill="rgb(205,98,50)"/><text x="75.3695%" y="175.50"></text></g><g><title>check_item_well_formed (1,811,590 samples, 1.22%)</title><rect x="74.1645%" y="181" width="1.2164%" height="15" fill="rgb(205,185,37)"/><text x="74.4145%" y="191.50"></text></g><g><title>analysis (111,521,428 samples, 74.88%)</title><rect x="0.5655%" y="229" width="74.8814%" height="15" fill="rgb(238,207,15)"/><text x="0.8155%" y="239.50">analysis</text></g><g><title>type_check_crate (74,413,316 samples, 49.97%)</title><rect x="25.4818%" y="213" width="49.9650%" height="15" fill="rgb(213,199,42)"/><text x="25.7318%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,190,796 samples, 2.14%)</title><rect x="73.3044%" y="197" width="2.1425%" height="15" fill="rgb(235,201,11)"/><text x="73.5544%" y="207.50">w..</text></g><g><title>codegen_crate (563,646 samples, 0.38%)</title><rect x="75.4516%" y="229" width="0.3785%" height="15" fill="rgb(207,46,11)"/><text x="75.7016%" y="239.50"></text></g><g><title>AST_validation (161,042 samples, 0.11%)</title><rect x="75.9287%" y="213" width="0.1081%" height="15" fill="rgb(241,35,35)"/><text x="76.1787%" y="223.50"></text></g><g><title>metadata_load_macro (548,417 samples, 0.37%)</title><rect x="86.6160%" y="181" width="0.3682%" height="15" fill="rgb(243,32,47)"/><text x="86.8660%" y="191.50"></text></g><g><title>metadata_register_crate (1,265,004 samples, 0.85%)</title><rect x="86.9842%" y="181" width="0.8494%" height="15" fill="rgb(247,202,23)"/><text x="87.2342%" y="191.50"></text></g><g><title>metadata_register_crate (449,467 samples, 0.30%)</title><rect x="87.5318%" y="165" width="0.3018%" height="15" fill="rgb(219,102,11)"/><text x="87.7818%" y="175.50"></text></g><g><title>macro_expand_crate (17,638,336 samples, 11.84%)</title><rect x="76.1301%" y="213" width="11.8433%" height="15" fill="rgb(243,110,44)"/><text x="76.3801%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (17,627,416 samples, 11.84%)</title><rect x="76.1375%" y="197" width="11.8360%" height="15" fill="rgb(222,74,54)"/><text x="76.3875%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (208,293 samples, 0.14%)</title><rect x="87.8336%" y="181" width="0.1399%" height="15" fill="rgb(216,99,12)"/><text x="88.0836%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (232,402 samples, 0.16%)</title><rect x="87.9759%" y="213" width="0.1560%" height="15" fill="rgb(226,22,26)"/><text x="88.2259%" y="223.50"></text></g><g><title>finalize_imports (176,232 samples, 0.12%)</title><rect x="88.1351%" y="197" width="0.1183%" height="15" fill="rgb(217,163,10)"/><text x="88.3851%" y="207.50"></text></g><g><title>late_resolve_crate (2,121,893 samples, 1.42%)</title><rect x="88.2954%" y="197" width="1.4248%" height="15" fill="rgb(213,25,53)"/><text x="88.5454%" y="207.50"></text></g><g><title>configure_and_expand (20,812,401 samples, 13.97%)</title><rect x="75.8301%" y="229" width="13.9745%" height="15" fill="rgb(252,105,26)"/><text x="76.0801%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,491,088 samples, 1.67%)</title><rect x="88.1320%" y="213" width="1.6726%" height="15" fill="rgb(220,39,43)"/><text x="88.3820%" y="223.50"></text></g><g><title>drop_ast (290,643 samples, 0.20%)</title><rect x="89.8046%" y="229" width="0.1952%" height="15" fill="rgb(229,68,48)"/><text x="90.0546%" y="239.50"></text></g><g><title>early_lint_checks (793,939 samples, 0.53%)</title><rect x="90.0098%" y="229" width="0.5331%" height="15" fill="rgb(252,8,32)"/><text x="90.2598%" y="239.50"></text></g><g><title>free_global_ctxt (3,798,683 samples, 2.55%)</title><rect x="90.5429%" y="229" width="2.5506%" height="15" fill="rgb(223,20,43)"/><text x="90.7929%" y="239.50">fr..</text></g><g><title>generate_crate_metadata (1,695,539 samples, 1.14%)</title><rect x="93.0935%" y="229" width="1.1385%" height="15" fill="rgb(229,81,49)"/><text x="93.3435%" y="239.50"></text></g><g><title>hir_lowering (2,782,111 samples, 1.87%)</title><rect x="94.2320%" y="229" width="1.8681%" height="15" fill="rgb(236,28,36)"/><text x="94.4820%" y="239.50">h..</text></g><g><title>parse_crate (4,037,354 samples, 2.71%)</title><rect x="96.1332%" y="229" width="2.7109%" height="15" fill="rgb(249,185,26)"/><text x="96.3832%" y="239.50">pa..</text></g><g><title>prepare_outputs (223,382 samples, 0.15%)</title><rect x="98.8481%" y="229" width="0.1500%" height="15" fill="rgb(249,174,33)"/><text x="99.0981%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,001,381 samples, 0.67%)</title><rect x="98.9980%" y="229" width="0.6724%" height="15" fill="rgb(233,201,37)"/><text x="99.2480%" y="239.50"></text></g><g><title>all (148,930,782 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (148,930,782 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (398,734 samples, 0.27%)</title><rect x="99.7323%" y="229" width="0.2677%" height="15" fill="rgb(230,49,44)"/><text x="99.9823%" y="239.50"></text></g></svg></svg>