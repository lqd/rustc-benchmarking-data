<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (277,312 samples, 0.19%)</title><rect x="8.8117%" y="149" width="0.1853%" height="15" fill="rgb(227,0,7)"/><text x="9.0617%" y="159.50"></text></g><g><title>is_sized_raw (190,150 samples, 0.13%)</title><rect x="9.0461%" y="149" width="0.1271%" height="15" fill="rgb(217,0,24)"/><text x="9.2961%" y="159.50"></text></g><g><title>param_env (345,443 samples, 0.23%)</title><rect x="10.2525%" y="117" width="0.2308%" height="15" fill="rgb(221,193,54)"/><text x="10.5025%" y="127.50"></text></g><g><title>codegen_fn_attrs (182,581 samples, 0.12%)</title><rect x="10.7869%" y="101" width="0.1220%" height="15" fill="rgb(248,212,6)"/><text x="11.0369%" y="111.50"></text></g><g><title>is_copy_raw (159,924 samples, 0.11%)</title><rect x="12.7608%" y="53" width="0.1069%" height="15" fill="rgb(208,68,35)"/><text x="13.0108%" y="63.50"></text></g><g><title>adt_drop_tys (265,234 samples, 0.18%)</title><rect x="12.7464%" y="69" width="0.1772%" height="15" fill="rgb(232,128,0)"/><text x="12.9964%" y="79.50"></text></g><g><title>is_copy_raw (1,302,378 samples, 0.87%)</title><rect x="12.9236%" y="69" width="0.8702%" height="15" fill="rgb(207,160,47)"/><text x="13.1736%" y="79.50"></text></g><g><title>evaluate_obligation (1,073,476 samples, 0.72%)</title><rect x="13.0766%" y="53" width="0.7173%" height="15" fill="rgb(228,23,34)"/><text x="13.3266%" y="63.50"></text></g><g><title>needs_drop_raw (1,807,026 samples, 1.21%)</title><rect x="12.6235%" y="85" width="1.2074%" height="15" fill="rgb(218,30,26)"/><text x="12.8735%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (929,999 samples, 0.62%)</title><rect x="14.0438%" y="69" width="0.6214%" height="15" fill="rgb(220,122,19)"/><text x="14.2938%" y="79.50"></text></g><g><title>resolve_instance (1,463,704 samples, 0.98%)</title><rect x="13.8309%" y="85" width="0.9780%" height="15" fill="rgb(250,228,42)"/><text x="14.0809%" y="95.50"></text></g><g><title>thir_body (820,599 samples, 0.55%)</title><rect x="14.8335%" y="85" width="0.5483%" height="15" fill="rgb(240,193,28)"/><text x="15.0835%" y="95.50"></text></g><g><title>mir_const (8,656,029 samples, 5.78%)</title><rect x="9.6912%" y="133" width="5.7837%" height="15" fill="rgb(216,20,37)"/><text x="9.9412%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (7,470,449 samples, 4.99%)</title><rect x="10.4834%" y="117" width="4.9915%" height="15" fill="rgb(206,188,39)"/><text x="10.7334%" y="127.50">unsafe..</text></g><g><title>mir_built (6,833,641 samples, 4.57%)</title><rect x="10.9088%" y="101" width="4.5660%" height="15" fill="rgb(217,207,13)"/><text x="11.1588%" y="111.50">mir_b..</text></g><g><title>mir_promoted (9,508,755 samples, 6.35%)</title><rect x="9.1732%" y="149" width="6.3535%" height="15" fill="rgb(231,73,38)"/><text x="9.4232%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (364,343 samples, 0.24%)</title><rect x="15.5269%" y="149" width="0.2434%" height="15" fill="rgb(225,20,46)"/><text x="15.7769%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (732,859 samples, 0.49%)</title><rect x="15.7704%" y="149" width="0.4897%" height="15" fill="rgb(210,31,41)"/><text x="16.0204%" y="159.50"></text></g><g><title>normalize_projection_ty (343,263 samples, 0.23%)</title><rect x="16.0307%" y="133" width="0.2294%" height="15" fill="rgb(221,200,47)"/><text x="16.2807%" y="143.50"></text></g><g><title>type_op_normalize_predicate (638,013 samples, 0.43%)</title><rect x="16.2601%" y="149" width="0.4263%" height="15" fill="rgb(226,26,5)"/><text x="16.5101%" y="159.50"></text></g><g><title>normalize_projection_ty (240,554 samples, 0.16%)</title><rect x="16.5256%" y="133" width="0.1607%" height="15" fill="rgb(249,33,26)"/><text x="16.7756%" y="143.50"></text></g><g><title>type_op_normalize_ty (745,331 samples, 0.50%)</title><rect x="16.6864%" y="149" width="0.4980%" height="15" fill="rgb(235,183,28)"/><text x="16.9364%" y="159.50"></text></g><g><title>normalize_projection_ty (319,425 samples, 0.21%)</title><rect x="16.9709%" y="133" width="0.2134%" height="15" fill="rgb(221,5,38)"/><text x="17.2209%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,305,238 samples, 2.88%)</title><rect x="17.1844%" y="149" width="2.8766%" height="15" fill="rgb(247,18,42)"/><text x="17.4344%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (28,345,666 samples, 18.94%)</title><rect x="1.1234%" y="181" width="18.9398%" height="15" fill="rgb(241,131,45)"/><text x="1.3734%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (28,212,995 samples, 18.85%)</title><rect x="1.2121%" y="165" width="18.8511%" height="15" fill="rgb(249,31,29)"/><text x="1.4621%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (500,104 samples, 0.33%)</title><rect x="20.1499%" y="181" width="0.3342%" height="15" fill="rgb(225,111,53)"/><text x="20.3999%" y="191.50"></text></g><g><title>get_lang_items (227,783 samples, 0.15%)</title><rect x="20.9924%" y="133" width="0.1522%" height="15" fill="rgb(238,160,17)"/><text x="21.2424%" y="143.50"></text></g><g><title>associated_item (168,391 samples, 0.11%)</title><rect x="21.2336%" y="117" width="0.1125%" height="15" fill="rgb(214,148,48)"/><text x="21.4836%" y="127.50"></text></g><g><title>codegen_fn_attrs (160,312 samples, 0.11%)</title><rect x="21.3461%" y="117" width="0.1071%" height="15" fill="rgb(232,36,49)"/><text x="21.5961%" y="127.50"></text></g><g><title>should_inherit_track_caller (483,525 samples, 0.32%)</title><rect x="21.1446%" y="133" width="0.3231%" height="15" fill="rgb(209,103,24)"/><text x="21.3946%" y="143.50"></text></g><g><title>codegen_fn_attrs (911,890 samples, 0.61%)</title><rect x="20.8822%" y="149" width="0.6093%" height="15" fill="rgb(229,88,8)"/><text x="21.1322%" y="159.50"></text></g><g><title>check_mod_attrs (1,440,816 samples, 0.96%)</title><rect x="20.5291%" y="165" width="0.9627%" height="15" fill="rgb(213,181,19)"/><text x="20.7791%" y="175.50"></text></g><g><title>check_mod_const_bodies (294,583 samples, 0.20%)</title><rect x="21.4918%" y="165" width="0.1968%" height="15" fill="rgb(254,191,54)"/><text x="21.7418%" y="175.50"></text></g><g><title>lookup_deprecation_entry (320,405 samples, 0.21%)</title><rect x="22.1159%" y="149" width="0.2141%" height="15" fill="rgb(241,83,37)"/><text x="22.3659%" y="159.50"></text></g><g><title>stability_index (238,083 samples, 0.16%)</title><rect x="22.1710%" y="133" width="0.1591%" height="15" fill="rgb(233,36,39)"/><text x="22.4210%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (810,970 samples, 0.54%)</title><rect x="21.8438%" y="165" width="0.5419%" height="15" fill="rgb(226,3,54)"/><text x="22.0938%" y="175.50"></text></g><g><title>looking_for_derive_registrar (180,812 samples, 0.12%)</title><rect x="22.3869%" y="165" width="0.1208%" height="15" fill="rgb(245,192,40)"/><text x="22.6369%" y="175.50"></text></g><g><title>proc_macro_decls_static (159,162 samples, 0.11%)</title><rect x="22.4014%" y="149" width="0.1063%" height="15" fill="rgb(238,167,29)"/><text x="22.6514%" y="159.50"></text></g><g><title>misc_checking_1 (3,031,704 samples, 2.03%)</title><rect x="20.4843%" y="181" width="2.0257%" height="15" fill="rgb(232,182,51)"/><text x="20.7343%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (481,226 samples, 0.32%)</title><rect x="22.5112%" y="165" width="0.3215%" height="15" fill="rgb(231,60,39)"/><text x="22.7612%" y="175.50"></text></g><g><title>check_mod_liveness (383,235 samples, 0.26%)</title><rect x="22.5767%" y="149" width="0.2561%" height="15" fill="rgb(208,69,12)"/><text x="22.8267%" y="159.50"></text></g><g><title>misc_checking_2 (1,068,572 samples, 0.71%)</title><rect x="22.5100%" y="181" width="0.7140%" height="15" fill="rgb(235,93,37)"/><text x="22.7600%" y="191.50"></text></g><g><title>match_checking (585,596 samples, 0.39%)</title><rect x="22.8327%" y="165" width="0.3913%" height="15" fill="rgb(213,116,39)"/><text x="23.0827%" y="175.50"></text></g><g><title>check_match (550,126 samples, 0.37%)</title><rect x="22.8564%" y="149" width="0.3676%" height="15" fill="rgb(222,207,29)"/><text x="23.1064%" y="159.50"></text></g><g><title>check_private_in_public (352,744 samples, 0.24%)</title><rect x="23.2311%" y="165" width="0.2357%" height="15" fill="rgb(206,96,30)"/><text x="23.4811%" y="175.50"></text></g><g><title>codegen_fn_attrs (161,901 samples, 0.11%)</title><rect x="23.7479%" y="149" width="0.1082%" height="15" fill="rgb(218,138,4)"/><text x="23.9979%" y="159.50"></text></g><g><title>death_checking (749,889 samples, 0.50%)</title><rect x="23.4668%" y="165" width="0.5011%" height="15" fill="rgb(250,191,14)"/><text x="23.7168%" y="175.50"></text></g><g><title>explicit_predicates_of (153,522 samples, 0.10%)</title><rect x="24.7063%" y="85" width="0.1026%" height="15" fill="rgb(239,60,40)"/><text x="24.9563%" y="95.50"></text></g><g><title>param_env (743,479 samples, 0.50%)</title><rect x="24.3222%" y="133" width="0.4968%" height="15" fill="rgb(206,27,48)"/><text x="24.5722%" y="143.50"></text></g><g><title>predicates_of (339,075 samples, 0.23%)</title><rect x="24.5924%" y="117" width="0.2266%" height="15" fill="rgb(225,35,8)"/><text x="24.8424%" y="127.50"></text></g><g><title>predicates_defined_on (271,265 samples, 0.18%)</title><rect x="24.6377%" y="101" width="0.1813%" height="15" fill="rgb(250,213,24)"/><text x="24.8877%" y="111.50"></text></g><g><title>crate_lints (1,621,908 samples, 1.08%)</title><rect x="23.9689%" y="149" width="1.0837%" height="15" fill="rgb(247,123,22)"/><text x="24.2189%" y="159.50"></text></g><g><title>type_of (346,023 samples, 0.23%)</title><rect x="24.8214%" y="133" width="0.2312%" height="15" fill="rgb(231,138,38)"/><text x="25.0714%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (264,902 samples, 0.18%)</title><rect x="24.8756%" y="117" width="0.1770%" height="15" fill="rgb(231,145,46)"/><text x="25.1256%" y="127.50"></text></g><g><title>lint_checking (1,979,032 samples, 1.32%)</title><rect x="23.9679%" y="165" width="1.3223%" height="15" fill="rgb(251,118,11)"/><text x="24.2179%" y="175.50"></text></g><g><title>module_lints (355,614 samples, 0.24%)</title><rect x="25.0526%" y="149" width="0.2376%" height="15" fill="rgb(217,147,25)"/><text x="25.3026%" y="159.50"></text></g><g><title>lint_mod (349,384 samples, 0.23%)</title><rect x="25.0568%" y="133" width="0.2334%" height="15" fill="rgb(247,81,37)"/><text x="25.3068%" y="143.50"></text></g><g><title>privacy_access_levels (553,866 samples, 0.37%)</title><rect x="25.2902%" y="165" width="0.3701%" height="15" fill="rgb(209,12,38)"/><text x="25.5402%" y="175.50"></text></g><g><title>privacy_checking_modules (1,697,669 samples, 1.13%)</title><rect x="25.6603%" y="165" width="1.1343%" height="15" fill="rgb(227,1,9)"/><text x="25.9103%" y="175.50"></text></g><g><title>check_mod_privacy (1,691,499 samples, 1.13%)</title><rect x="25.6644%" y="149" width="1.1302%" height="15" fill="rgb(248,47,43)"/><text x="25.9144%" y="159.50"></text></g><g><title>misc_checking_3 (5,368,360 samples, 3.59%)</title><rect x="23.2240%" y="181" width="3.5870%" height="15" fill="rgb(221,10,30)"/><text x="23.4740%" y="191.50">misc..</text></g><g><title>impl_parent (847,920 samples, 0.57%)</title><rect x="28.2501%" y="117" width="0.5666%" height="15" fill="rgb(210,229,1)"/><text x="28.5001%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (493,126 samples, 0.33%)</title><rect x="28.4871%" y="101" width="0.3295%" height="15" fill="rgb(222,148,37)"/><text x="28.7371%" y="111.50"></text></g><g><title>impl_trait_ref (1,568,930 samples, 1.05%)</title><rect x="28.8166%" y="117" width="1.0483%" height="15" fill="rgb(234,67,33)"/><text x="29.0666%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,213,016 samples, 0.81%)</title><rect x="29.0544%" y="101" width="0.8105%" height="15" fill="rgb(247,98,35)"/><text x="29.3044%" y="111.50"></text></g><g><title>trait_impls_of (342,575 samples, 0.23%)</title><rect x="29.8893%" y="117" width="0.2289%" height="15" fill="rgb(247,138,52)"/><text x="30.1393%" y="127.50"></text></g><g><title>coherent_trait (4,806,014 samples, 3.21%)</title><rect x="26.9075%" y="149" width="3.2112%" height="15" fill="rgb(213,79,30)"/><text x="27.1575%" y="159.50">coh..</text></g><g><title>specialization_graph_of (4,683,223 samples, 3.13%)</title><rect x="26.9896%" y="133" width="3.1292%" height="15" fill="rgb(246,177,23)"/><text x="27.2396%" y="143.50">spe..</text></g><g><title>coherence_checking (4,913,825 samples, 3.28%)</title><rect x="26.8892%" y="165" width="3.2833%" height="15" fill="rgb(230,62,27)"/><text x="27.1392%" y="175.50">coh..</text></g><g><title>associated_item (205,201 samples, 0.14%)</title><rect x="42.1406%" y="101" width="0.1371%" height="15" fill="rgb(216,154,8)"/><text x="42.3906%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (163,420 samples, 0.11%)</title><rect x="42.1686%" y="85" width="0.1092%" height="15" fill="rgb(244,35,45)"/><text x="42.4186%" y="95.50"></text></g><g><title>associated_items (301,042 samples, 0.20%)</title><rect x="42.0905%" y="117" width="0.2011%" height="15" fill="rgb(251,115,12)"/><text x="42.3405%" y="127.50"></text></g><g><title>dropck_outlives (733,637 samples, 0.49%)</title><rect x="42.3258%" y="117" width="0.4902%" height="15" fill="rgb(240,54,50)"/><text x="42.5758%" y="127.50"></text></g><g><title>normalize_projection_ty (255,221 samples, 0.17%)</title><rect x="42.6455%" y="101" width="0.1705%" height="15" fill="rgb(233,84,52)"/><text x="42.8955%" y="111.50"></text></g><g><title>evaluate_obligation (2,081,983 samples, 1.39%)</title><rect x="42.8160%" y="117" width="1.3911%" height="15" fill="rgb(207,117,47)"/><text x="43.0660%" y="127.50"></text></g><g><title>evaluate_obligation (328,112 samples, 0.22%)</title><rect x="44.6584%" y="101" width="0.2192%" height="15" fill="rgb(249,43,39)"/><text x="44.9084%" y="111.50"></text></g><g><title>method_autoderef_steps (666,496 samples, 0.45%)</title><rect x="44.4397%" y="117" width="0.4453%" height="15" fill="rgb(209,38,44)"/><text x="44.6897%" y="127.50"></text></g><g><title>predicates_of (213,521 samples, 0.14%)</title><rect x="44.9211%" y="117" width="0.1427%" height="15" fill="rgb(236,212,23)"/><text x="45.1711%" y="127.50"></text></g><g><title>evaluate_obligation (285,002 samples, 0.19%)</title><rect x="47.2932%" y="101" width="0.1904%" height="15" fill="rgb(242,79,21)"/><text x="47.5432%" y="111.50"></text></g><g><title>is_copy_raw (227,581 samples, 0.15%)</title><rect x="47.6103%" y="101" width="0.1521%" height="15" fill="rgb(211,96,35)"/><text x="47.8603%" y="111.50"></text></g><g><title>evaluate_obligation (193,441 samples, 0.13%)</title><rect x="47.6331%" y="85" width="0.1293%" height="15" fill="rgb(253,215,40)"/><text x="47.8831%" y="95.50"></text></g><g><title>typeck (4,310,528 samples, 2.88%)</title><rect x="45.1186%" y="117" width="2.8802%" height="15" fill="rgb(211,81,21)"/><text x="45.3686%" y="127.50">ty..</text></g><g><title>item_bodies_checking (26,675,038 samples, 17.82%)</title><rect x="30.2027%" y="165" width="17.8235%" height="15" fill="rgb(208,190,38)"/><text x="30.4527%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (26,671,968 samples, 17.82%)</title><rect x="30.2048%" y="149" width="17.8215%" height="15" fill="rgb(235,213,38)"/><text x="30.4548%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (26,580,437 samples, 17.76%)</title><rect x="30.2659%" y="133" width="17.7603%" height="15" fill="rgb(237,122,38)"/><text x="30.5159%" y="143.50">typeck</text></g><g><title>item_types_checking (3,053,935 samples, 2.04%)</title><rect x="48.0262%" y="165" width="2.0406%" height="15" fill="rgb(244,218,35)"/><text x="48.2762%" y="175.50">i..</text></g><g><title>check_mod_item_types (3,045,725 samples, 2.04%)</title><rect x="48.0317%" y="149" width="2.0351%" height="15" fill="rgb(240,68,47)"/><text x="48.2817%" y="159.50">c..</text></g><g><title>late_bound_vars_map (159,381 samples, 0.11%)</title><rect x="50.8172%" y="117" width="0.1065%" height="15" fill="rgb(210,16,53)"/><text x="51.0672%" y="127.50"></text></g><g><title>fn_sig (732,605 samples, 0.49%)</title><rect x="50.5106%" y="133" width="0.4895%" height="15" fill="rgb(235,124,12)"/><text x="50.7606%" y="143.50"></text></g><g><title>named_region_map (664,219 samples, 0.44%)</title><rect x="51.1905%" y="117" width="0.4438%" height="15" fill="rgb(224,169,11)"/><text x="51.4405%" y="127.50"></text></g><g><title>resolve_lifetimes (600,758 samples, 0.40%)</title><rect x="51.2329%" y="101" width="0.4014%" height="15" fill="rgb(250,166,2)"/><text x="51.4829%" y="111.50"></text></g><g><title>lint_levels (296,023 samples, 0.20%)</title><rect x="51.4365%" y="85" width="0.1978%" height="15" fill="rgb(242,216,29)"/><text x="51.6865%" y="95.50"></text></g><g><title>generics_of (993,782 samples, 0.66%)</title><rect x="51.0001%" y="133" width="0.6640%" height="15" fill="rgb(230,116,27)"/><text x="51.2501%" y="143.50"></text></g><g><title>item_bounds (166,582 samples, 0.11%)</title><rect x="51.7243%" y="133" width="0.1113%" height="15" fill="rgb(228,99,48)"/><text x="51.9743%" y="143.50"></text></g><g><title>late_bound_vars_map (575,622 samples, 0.38%)</title><rect x="52.7032%" y="85" width="0.3846%" height="15" fill="rgb(253,11,6)"/><text x="52.9532%" y="95.50"></text></g><g><title>resolve_lifetimes (541,472 samples, 0.36%)</title><rect x="52.7260%" y="69" width="0.3618%" height="15" fill="rgb(247,143,39)"/><text x="52.9760%" y="79.50"></text></g><g><title>trait_explicit_predicates_and_bounds (205,502 samples, 0.14%)</title><rect x="53.1107%" y="85" width="0.1373%" height="15" fill="rgb(236,97,10)"/><text x="53.3607%" y="95.50"></text></g><g><title>explicit_predicates_of (2,050,660 samples, 1.37%)</title><rect x="52.0777%" y="101" width="1.3702%" height="15" fill="rgb(233,208,19)"/><text x="52.3277%" y="111.50"></text></g><g><title>type_param_predicates (298,082 samples, 0.20%)</title><rect x="53.2487%" y="85" width="0.1992%" height="15" fill="rgb(216,164,2)"/><text x="53.4987%" y="95.50"></text></g><g><title>predicates_of (3,102,654 samples, 2.07%)</title><rect x="51.8356%" y="133" width="2.0731%" height="15" fill="rgb(220,129,5)"/><text x="52.0856%" y="143.50">p..</text></g><g><title>predicates_defined_on (2,970,213 samples, 1.98%)</title><rect x="51.9241%" y="117" width="1.9846%" height="15" fill="rgb(242,17,10)"/><text x="52.1741%" y="127.50">p..</text></g><g><title>inferred_outlives_of (689,599 samples, 0.46%)</title><rect x="53.4479%" y="101" width="0.4608%" height="15" fill="rgb(242,107,0)"/><text x="53.6979%" y="111.50"></text></g><g><title>inferred_outlives_crate (637,918 samples, 0.43%)</title><rect x="53.4824%" y="85" width="0.4262%" height="15" fill="rgb(251,28,31)"/><text x="53.7324%" y="95.50"></text></g><g><title>type_of (463,074 samples, 0.31%)</title><rect x="53.5993%" y="69" width="0.3094%" height="15" fill="rgb(233,223,10)"/><text x="53.8493%" y="79.50"></text></g><g><title>type_param_predicates (267,052 samples, 0.18%)</title><rect x="53.7302%" y="53" width="0.1784%" height="15" fill="rgb(215,21,27)"/><text x="53.9802%" y="63.50"></text></g><g><title>type_param_predicates (253,632 samples, 0.17%)</title><rect x="53.7392%" y="37" width="0.1695%" height="15" fill="rgb(232,23,21)"/><text x="53.9892%" y="47.50"></text></g><g><title>super_predicates_of (249,273 samples, 0.17%)</title><rect x="53.9087%" y="133" width="0.1666%" height="15" fill="rgb(244,5,23)"/><text x="54.1587%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (229,063 samples, 0.15%)</title><rect x="53.9222%" y="117" width="0.1531%" height="15" fill="rgb(226,81,46)"/><text x="54.1722%" y="127.50"></text></g><g><title>type_collecting (6,230,199 samples, 4.16%)</title><rect x="50.0727%" y="165" width="4.1628%" height="15" fill="rgb(247,70,30)"/><text x="50.3227%" y="175.50">type_..</text></g><g><title>collect_mod_item_types (6,212,889 samples, 4.15%)</title><rect x="50.0843%" y="149" width="4.1513%" height="15" fill="rgb(212,68,19)"/><text x="50.3343%" y="159.50">colle..</text></g><g><title>type_of (223,721 samples, 0.15%)</title><rect x="54.0861%" y="133" width="0.1495%" height="15" fill="rgb(240,187,13)"/><text x="54.3361%" y="143.50"></text></g><g><title>evaluate_obligation (618,527 samples, 0.41%)</title><rect x="57.4153%" y="133" width="0.4133%" height="15" fill="rgb(223,113,26)"/><text x="57.6653%" y="143.50"></text></g><g><title>implied_outlives_bounds (858,356 samples, 0.57%)</title><rect x="57.8408%" y="133" width="0.5735%" height="15" fill="rgb(206,192,2)"/><text x="58.0908%" y="143.50"></text></g><g><title>param_env (923,221 samples, 0.62%)</title><rect x="58.4248%" y="133" width="0.6169%" height="15" fill="rgb(241,108,4)"/><text x="58.6748%" y="143.50"></text></g><g><title>region_scope_tree (302,554 samples, 0.20%)</title><rect x="59.0698%" y="133" width="0.2022%" height="15" fill="rgb(247,173,49)"/><text x="59.3198%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,162,257 samples, 4.79%)</title><rect x="54.4901%" y="149" width="4.7856%" height="15" fill="rgb(224,114,35)"/><text x="54.7401%" y="159.50">check_..</text></g><g><title>evaluate_obligation (957,458 samples, 0.64%)</title><rect x="63.5318%" y="133" width="0.6397%" height="15" fill="rgb(245,159,27)"/><text x="63.7818%" y="143.50"></text></g><g><title>implied_outlives_bounds (645,345 samples, 0.43%)</title><rect x="64.1903%" y="133" width="0.4312%" height="15" fill="rgb(245,172,44)"/><text x="64.4403%" y="143.50"></text></g><g><title>param_env (2,708,012 samples, 1.81%)</title><rect x="64.6349%" y="133" width="1.8094%" height="15" fill="rgb(236,23,11)"/><text x="64.8849%" y="143.50">p..</text></g><g><title>check_item_well_formed (11,016,182 samples, 7.36%)</title><rect x="59.2757%" y="149" width="7.3607%" height="15" fill="rgb(205,117,38)"/><text x="59.5257%" y="159.50">check_item..</text></g><g><title>evaluate_obligation (360,042 samples, 0.24%)</title><rect x="67.9847%" y="133" width="0.2406%" height="15" fill="rgb(237,72,25)"/><text x="68.2347%" y="143.50"></text></g><g><title>implied_outlives_bounds (375,393 samples, 0.25%)</title><rect x="68.2253%" y="133" width="0.2508%" height="15" fill="rgb(244,70,9)"/><text x="68.4753%" y="143.50"></text></g><g><title>param_env (335,006 samples, 0.22%)</title><rect x="68.4767%" y="133" width="0.2238%" height="15" fill="rgb(217,125,39)"/><text x="68.7267%" y="143.50"></text></g><g><title>analysis (101,916,997 samples, 68.10%)</title><rect x="0.6526%" y="197" width="68.0980%" height="15" fill="rgb(235,36,10)"/><text x="0.9026%" y="207.50">analysis</text></g><g><title>type_check_crate (62,767,791 samples, 41.94%)</title><rect x="26.8110%" y="181" width="41.9397%" height="15" fill="rgb(251,123,47)"/><text x="27.0610%" y="191.50">type_check_crate</text></g><g><title>wf_checking (21,718,512 samples, 14.51%)</title><rect x="54.2390%" y="165" width="14.5117%" height="15" fill="rgb(221,13,13)"/><text x="54.4890%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,164,227 samples, 2.11%)</title><rect x="66.6364%" y="149" width="2.1142%" height="15" fill="rgb(238,131,9)"/><text x="66.8864%" y="159.50">c..</text></g><g><title>codegen_crate (322,164 samples, 0.22%)</title><rect x="68.7575%" y="197" width="0.2153%" height="15" fill="rgb(211,50,8)"/><text x="69.0075%" y="207.50"></text></g><g><title>AST_validation (282,563 samples, 0.19%)</title><rect x="69.1001%" y="181" width="0.1888%" height="15" fill="rgb(245,182,24)"/><text x="69.3501%" y="191.50"></text></g><g><title>complete_gated_feature_checking (154,292 samples, 0.10%)</title><rect x="69.2889%" y="181" width="0.1031%" height="15" fill="rgb(242,14,37)"/><text x="69.5389%" y="191.50"></text></g><g><title>metadata_load_macro (188,883 samples, 0.13%)</title><rect x="84.4865%" y="149" width="0.1262%" height="15" fill="rgb(246,228,12)"/><text x="84.7365%" y="159.50"></text></g><g><title>metadata_register_crate (329,443 samples, 0.22%)</title><rect x="84.6127%" y="149" width="0.2201%" height="15" fill="rgb(213,55,15)"/><text x="84.8627%" y="159.50"></text></g><g><title>macro_expand_crate (23,426,432 samples, 15.65%)</title><rect x="69.4426%" y="181" width="15.6529%" height="15" fill="rgb(209,9,3)"/><text x="69.6926%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (23,411,532 samples, 15.64%)</title><rect x="69.4526%" y="165" width="15.6429%" height="15" fill="rgb(230,59,30)"/><text x="69.7026%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (393,053 samples, 0.26%)</title><rect x="84.8329%" y="149" width="0.2626%" height="15" fill="rgb(209,121,21)"/><text x="85.0829%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (170,442 samples, 0.11%)</title><rect x="85.0985%" y="181" width="0.1139%" height="15" fill="rgb(220,109,13)"/><text x="85.3485%" y="191.50"></text></g><g><title>finalize_imports (348,274 samples, 0.23%)</title><rect x="85.2189%" y="165" width="0.2327%" height="15" fill="rgb(232,18,1)"/><text x="85.4689%" y="175.50"></text></g><g><title>finalize_macro_resolutions (228,202 samples, 0.15%)</title><rect x="85.4516%" y="165" width="0.1525%" height="15" fill="rgb(215,41,42)"/><text x="85.7016%" y="175.50"></text></g><g><title>late_resolve_crate (3,507,899 samples, 2.34%)</title><rect x="85.6041%" y="165" width="2.3439%" height="15" fill="rgb(224,123,36)"/><text x="85.8541%" y="175.50">l..</text></g><g><title>configure_and_expand (28,686,390 samples, 19.17%)</title><rect x="68.9728%" y="197" width="19.1674%" height="15" fill="rgb(240,125,3)"/><text x="69.2228%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,381,799 samples, 2.93%)</title><rect x="85.2124%" y="181" width="2.9278%" height="15" fill="rgb(205,98,50)"/><text x="85.4624%" y="191.50">re..</text></g><g><title>drop_ast (469,405 samples, 0.31%)</title><rect x="88.1402%" y="197" width="0.3136%" height="15" fill="rgb(205,185,37)"/><text x="88.3902%" y="207.50"></text></g><g><title>early_lint_checks (776,059 samples, 0.52%)</title><rect x="88.4659%" y="197" width="0.5185%" height="15" fill="rgb(238,207,15)"/><text x="88.7159%" y="207.50"></text></g><g><title>free_global_ctxt (2,206,834 samples, 1.47%)</title><rect x="88.9844%" y="197" width="1.4745%" height="15" fill="rgb(213,199,42)"/><text x="89.2344%" y="207.50"></text></g><g><title>generate_crate_metadata (1,653,908 samples, 1.11%)</title><rect x="90.4590%" y="197" width="1.1051%" height="15" fill="rgb(235,201,11)"/><text x="90.7090%" y="207.50"></text></g><g><title>hir_lowering (8,977,100 samples, 6.00%)</title><rect x="91.5641%" y="197" width="5.9982%" height="15" fill="rgb(207,46,11)"/><text x="91.8141%" y="207.50">hir_lowe..</text></g><g><title>parse_crate (2,053,433 samples, 1.37%)</title><rect x="97.5951%" y="197" width="1.3720%" height="15" fill="rgb(241,35,35)"/><text x="97.8451%" y="207.50"></text></g><g><title>prepare_outputs (269,093 samples, 0.18%)</title><rect x="98.9717%" y="197" width="0.1798%" height="15" fill="rgb(243,32,47)"/><text x="99.2217%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (768,689 samples, 0.51%)</title><rect x="99.1515%" y="197" width="0.5136%" height="15" fill="rgb(247,202,23)"/><text x="99.4015%" y="207.50"></text></g><g><title>all (149,662,160 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (149,662,160 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (368,874 samples, 0.25%)</title><rect x="99.7535%" y="197" width="0.2465%" height="15" fill="rgb(222,74,54)"/><text x="100.0035%" y="207.50"></text></g></svg></svg>