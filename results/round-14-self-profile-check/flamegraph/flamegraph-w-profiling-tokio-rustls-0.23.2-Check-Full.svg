<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (341,335 samples, 0.17%)</title><rect x="11.4880%" y="133" width="0.1691%" height="15" fill="rgb(227,0,7)"/><text x="11.7380%" y="143.50"></text></g><g><title>codegen_fn_attrs (316,043 samples, 0.16%)</title><rect x="12.0093%" y="117" width="0.1565%" height="15" fill="rgb(217,0,24)"/><text x="12.2593%" y="127.50"></text></g><g><title>adt_drop_tys (340,095 samples, 0.17%)</title><rect x="14.4096%" y="85" width="0.1685%" height="15" fill="rgb(221,193,54)"/><text x="14.6596%" y="95.50"></text></g><g><title>is_copy_raw (1,488,386 samples, 0.74%)</title><rect x="14.5780%" y="85" width="0.7372%" height="15" fill="rgb(248,212,6)"/><text x="14.8280%" y="95.50"></text></g><g><title>evaluate_obligation (1,217,871 samples, 0.60%)</title><rect x="14.7120%" y="69" width="0.6032%" height="15" fill="rgb(208,68,35)"/><text x="14.9620%" y="79.50"></text></g><g><title>needs_drop_raw (2,068,534 samples, 1.02%)</title><rect x="14.2915%" y="101" width="1.0246%" height="15" fill="rgb(232,128,0)"/><text x="14.5415%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,044,771 samples, 0.52%)</title><rect x="15.4735%" y="85" width="0.5175%" height="15" fill="rgb(207,160,47)"/><text x="15.7235%" y="95.50"></text></g><g><title>specialization_graph_of (601,498 samples, 0.30%)</title><rect x="16.0258%" y="85" width="0.2979%" height="15" fill="rgb(228,23,34)"/><text x="16.2758%" y="95.50"></text></g><g><title>impl_trait_ref (318,835 samples, 0.16%)</title><rect x="16.1659%" y="69" width="0.1579%" height="15" fill="rgb(218,30,26)"/><text x="16.4159%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (285,655 samples, 0.14%)</title><rect x="16.1823%" y="53" width="0.1415%" height="15" fill="rgb(220,122,19)"/><text x="16.4323%" y="63.50"></text></g><g><title>resolve_instance (2,124,517 samples, 1.05%)</title><rect x="15.3160%" y="101" width="1.0523%" height="15" fill="rgb(250,228,42)"/><text x="15.5660%" y="111.50"></text></g><g><title>thir_body (1,486,037 samples, 0.74%)</title><rect x="16.3893%" y="101" width="0.7360%" height="15" fill="rgb(240,193,28)"/><text x="16.6393%" y="111.50"></text></g><g><title>mir_const (12,673,040 samples, 6.28%)</title><rect x="10.8678%" y="149" width="6.2771%" height="15" fill="rgb(216,20,37)"/><text x="11.1178%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (11,079,538 samples, 5.49%)</title><rect x="11.6571%" y="133" width="5.4878%" height="15" fill="rgb(206,188,39)"/><text x="11.9071%" y="143.50">unsafet..</text></g><g><title>mir_built (10,052,443 samples, 4.98%)</title><rect x="12.1658%" y="117" width="4.9791%" height="15" fill="rgb(217,207,13)"/><text x="12.4158%" y="127.50">mir_bu..</text></g><g><title>mir_promoted (13,976,597 samples, 6.92%)</title><rect x="10.2659%" y="165" width="6.9227%" height="15" fill="rgb(231,73,38)"/><text x="10.5159%" y="175.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (1,434,885 samples, 0.71%)</title><rect x="17.1886%" y="165" width="0.7107%" height="15" fill="rgb(225,20,46)"/><text x="17.4386%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,153,522 samples, 0.57%)</title><rect x="17.8993%" y="165" width="0.5714%" height="15" fill="rgb(210,31,41)"/><text x="18.1493%" y="175.50"></text></g><g><title>normalize_projection_ty (652,007 samples, 0.32%)</title><rect x="18.1477%" y="149" width="0.3229%" height="15" fill="rgb(221,200,47)"/><text x="18.3977%" y="159.50"></text></g><g><title>type_op_normalize_ty (325,516 samples, 0.16%)</title><rect x="18.5186%" y="165" width="0.1612%" height="15" fill="rgb(226,26,5)"/><text x="18.7686%" y="175.50"></text></g><g><title>normalize_projection_ty (210,472 samples, 0.10%)</title><rect x="18.5756%" y="149" width="0.1042%" height="15" fill="rgb(249,33,26)"/><text x="18.8256%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,542,010 samples, 2.25%)</title><rect x="18.6798%" y="165" width="2.2497%" height="15" fill="rgb(235,183,28)"/><text x="18.9298%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (41,195,678 samples, 20.40%)</title><rect x="0.5330%" y="197" width="20.4046%" height="15" fill="rgb(221,5,38)"/><text x="0.7830%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (41,024,645 samples, 20.32%)</title><rect x="0.6177%" y="181" width="20.3199%" height="15" fill="rgb(247,18,42)"/><text x="0.8677%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (241,805 samples, 0.12%)</title><rect x="21.0198%" y="197" width="0.1198%" height="15" fill="rgb(241,131,45)"/><text x="21.2698%" y="207.50"></text></g><g><title>codegen_fn_attrs (330,175 samples, 0.16%)</title><rect x="21.3864%" y="133" width="0.1635%" height="15" fill="rgb(249,31,29)"/><text x="21.6364%" y="143.50"></text></g><g><title>codegen_fn_attrs (531,505 samples, 0.26%)</title><rect x="21.2908%" y="165" width="0.2633%" height="15" fill="rgb(225,111,53)"/><text x="21.5408%" y="175.50"></text></g><g><title>should_inherit_track_caller (471,595 samples, 0.23%)</title><rect x="21.3204%" y="149" width="0.2336%" height="15" fill="rgb(238,160,17)"/><text x="21.5704%" y="159.50"></text></g><g><title>check_mod_attrs (809,940 samples, 0.40%)</title><rect x="21.1530%" y="181" width="0.4012%" height="15" fill="rgb(214,148,48)"/><text x="21.4030%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (494,064 samples, 0.24%)</title><rect x="21.6893%" y="181" width="0.2447%" height="15" fill="rgb(232,36,49)"/><text x="21.9393%" y="191.50"></text></g><g><title>misc_checking_1 (1,671,249 samples, 0.83%)</title><rect x="21.1398%" y="197" width="0.8278%" height="15" fill="rgb(209,103,24)"/><text x="21.3898%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (992,511 samples, 0.49%)</title><rect x="21.9684%" y="181" width="0.4916%" height="15" fill="rgb(229,88,8)"/><text x="22.2184%" y="191.50"></text></g><g><title>check_mod_liveness (863,341 samples, 0.43%)</title><rect x="22.0324%" y="165" width="0.4276%" height="15" fill="rgb(213,181,19)"/><text x="22.2824%" y="175.50"></text></g><g><title>type_uninhabited_from (396,265 samples, 0.20%)</title><rect x="22.2637%" y="149" width="0.1963%" height="15" fill="rgb(254,191,54)"/><text x="22.5137%" y="159.50"></text></g><g><title>type_uninhabited_from (352,883 samples, 0.17%)</title><rect x="22.2852%" y="133" width="0.1748%" height="15" fill="rgb(241,83,37)"/><text x="22.5352%" y="143.50"></text></g><g><title>type_uninhabited_from (329,013 samples, 0.16%)</title><rect x="22.2970%" y="117" width="0.1630%" height="15" fill="rgb(233,36,39)"/><text x="22.5470%" y="127.50"></text></g><g><title>type_uninhabited_from (312,092 samples, 0.15%)</title><rect x="22.3054%" y="101" width="0.1546%" height="15" fill="rgb(226,3,54)"/><text x="22.5554%" y="111.50"></text></g><g><title>type_uninhabited_from (299,412 samples, 0.15%)</title><rect x="22.3117%" y="85" width="0.1483%" height="15" fill="rgb(245,192,40)"/><text x="22.5617%" y="95.50"></text></g><g><title>type_uninhabited_from (273,202 samples, 0.14%)</title><rect x="22.3247%" y="69" width="0.1353%" height="15" fill="rgb(238,167,29)"/><text x="22.5747%" y="79.50"></text></g><g><title>type_uninhabited_from (213,340 samples, 0.11%)</title><rect x="22.3543%" y="53" width="0.1057%" height="15" fill="rgb(232,182,51)"/><text x="22.6043%" y="63.50"></text></g><g><title>misc_checking_2 (1,963,392 samples, 0.97%)</title><rect x="21.9676%" y="197" width="0.9725%" height="15" fill="rgb(231,60,39)"/><text x="22.2176%" y="207.50"></text></g><g><title>match_checking (969,251 samples, 0.48%)</title><rect x="22.4600%" y="181" width="0.4801%" height="15" fill="rgb(208,69,12)"/><text x="22.7100%" y="191.50"></text></g><g><title>check_match (924,031 samples, 0.46%)</title><rect x="22.4824%" y="165" width="0.4577%" height="15" fill="rgb(235,93,37)"/><text x="22.7324%" y="175.50"></text></g><g><title>check_private_in_public (341,094 samples, 0.17%)</title><rect x="22.9453%" y="181" width="0.1689%" height="15" fill="rgb(213,116,39)"/><text x="23.1953%" y="191.50"></text></g><g><title>death_checking (823,349 samples, 0.41%)</title><rect x="23.1142%" y="181" width="0.4078%" height="15" fill="rgb(222,207,29)"/><text x="23.3642%" y="191.50"></text></g><g><title>param_env (456,326 samples, 0.23%)</title><rect x="24.0432%" y="149" width="0.2260%" height="15" fill="rgb(206,96,30)"/><text x="24.2932%" y="159.50"></text></g><g><title>predicates_of (204,191 samples, 0.10%)</title><rect x="24.1681%" y="133" width="0.1011%" height="15" fill="rgb(218,138,4)"/><text x="24.4181%" y="143.50"></text></g><g><title>crate_lints (3,050,523 samples, 1.51%)</title><rect x="23.5228%" y="165" width="1.5110%" height="15" fill="rgb(250,191,14)"/><text x="23.7728%" y="175.50"></text></g><g><title>type_of (1,470,934 samples, 0.73%)</title><rect x="24.3052%" y="149" width="0.7286%" height="15" fill="rgb(239,60,40)"/><text x="24.5552%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,135,060 samples, 0.56%)</title><rect x="24.4715%" y="133" width="0.5622%" height="15" fill="rgb(206,27,48)"/><text x="24.7215%" y="143.50"></text></g><g><title>lint_checking (3,654,940 samples, 1.81%)</title><rect x="23.5220%" y="181" width="1.8103%" height="15" fill="rgb(225,35,8)"/><text x="23.7720%" y="191.50">l..</text></g><g><title>module_lints (602,887 samples, 0.30%)</title><rect x="25.0338%" y="165" width="0.2986%" height="15" fill="rgb(250,213,24)"/><text x="25.2838%" y="175.50"></text></g><g><title>lint_mod (597,047 samples, 0.30%)</title><rect x="25.0366%" y="149" width="0.2957%" height="15" fill="rgb(247,123,22)"/><text x="25.2866%" y="159.50"></text></g><g><title>privacy_access_levels (354,214 samples, 0.18%)</title><rect x="25.3324%" y="181" width="0.1754%" height="15" fill="rgb(231,138,38)"/><text x="25.5824%" y="191.50"></text></g><g><title>privacy_checking_modules (1,409,736 samples, 0.70%)</title><rect x="25.5078%" y="181" width="0.6983%" height="15" fill="rgb(231,145,46)"/><text x="25.7578%" y="191.50"></text></g><g><title>check_mod_privacy (1,404,556 samples, 0.70%)</title><rect x="25.5104%" y="165" width="0.6957%" height="15" fill="rgb(251,118,11)"/><text x="25.7604%" y="175.50"></text></g><g><title>misc_checking_3 (6,608,603 samples, 3.27%)</title><rect x="22.9401%" y="197" width="3.2733%" height="15" fill="rgb(217,147,25)"/><text x="23.1901%" y="207.50">mis..</text></g><g><title>impl_parent (2,100,425 samples, 1.04%)</title><rect x="28.0452%" y="133" width="1.0404%" height="15" fill="rgb(247,81,37)"/><text x="28.2952%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,310,045 samples, 0.65%)</title><rect x="28.4366%" y="117" width="0.6489%" height="15" fill="rgb(209,12,38)"/><text x="28.6866%" y="127.50"></text></g><g><title>impl_trait_ref (5,953,091 samples, 2.95%)</title><rect x="29.0855%" y="133" width="2.9486%" height="15" fill="rgb(227,1,9)"/><text x="29.3355%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,149,424 samples, 2.55%)</title><rect x="29.4836%" y="117" width="2.5506%" height="15" fill="rgb(248,47,43)"/><text x="29.7336%" y="127.50">me..</text></g><g><title>trait_impls_of (729,287 samples, 0.36%)</title><rect x="32.0480%" y="133" width="0.3612%" height="15" fill="rgb(221,10,30)"/><text x="32.2980%" y="143.50"></text></g><g><title>implementations_of_trait (235,683 samples, 0.12%)</title><rect x="32.2925%" y="117" width="0.1167%" height="15" fill="rgb(210,229,1)"/><text x="32.5425%" y="127.50"></text></g><g><title>coherent_trait (12,385,817 samples, 6.13%)</title><rect x="26.2748%" y="165" width="6.1348%" height="15" fill="rgb(222,148,37)"/><text x="26.5248%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (12,367,476 samples, 6.13%)</title><rect x="26.2838%" y="149" width="6.1257%" height="15" fill="rgb(234,67,33)"/><text x="26.5338%" y="159.50">speciali..</text></g><g><title>coherence_checking (12,482,579 samples, 6.18%)</title><rect x="26.2649%" y="181" width="6.1827%" height="15" fill="rgb(247,98,35)"/><text x="26.5149%" y="191.50">coherenc..</text></g><g><title>associated_item (411,194 samples, 0.20%)</title><rect x="48.8456%" y="117" width="0.2037%" height="15" fill="rgb(247,138,52)"/><text x="49.0956%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (322,524 samples, 0.16%)</title><rect x="48.8895%" y="101" width="0.1597%" height="15" fill="rgb(213,79,30)"/><text x="49.1395%" y="111.50"></text></g><g><title>associated_items (629,805 samples, 0.31%)</title><rect x="48.7553%" y="133" width="0.3119%" height="15" fill="rgb(246,177,23)"/><text x="49.0053%" y="143.50"></text></g><g><title>adt_dtorck_constraint (269,423 samples, 0.13%)</title><rect x="49.9791%" y="37" width="0.1334%" height="15" fill="rgb(230,62,27)"/><text x="50.2291%" y="47.50"></text></g><g><title>adt_dtorck_constraint (410,104 samples, 0.20%)</title><rect x="49.9184%" y="53" width="0.2031%" height="15" fill="rgb(216,154,8)"/><text x="50.1684%" y="63.50"></text></g><g><title>adt_dtorck_constraint (575,787 samples, 0.29%)</title><rect x="49.8426%" y="69" width="0.2852%" height="15" fill="rgb(244,35,45)"/><text x="50.0926%" y="79.50"></text></g><g><title>adt_dtorck_constraint (760,309 samples, 0.38%)</title><rect x="49.7562%" y="85" width="0.3766%" height="15" fill="rgb(251,115,12)"/><text x="50.0062%" y="95.50"></text></g><g><title>adt_dtorck_constraint (952,681 samples, 0.47%)</title><rect x="49.6747%" y="101" width="0.4719%" height="15" fill="rgb(240,54,50)"/><text x="49.9247%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,370,454 samples, 0.68%)</title><rect x="49.5001%" y="117" width="0.6788%" height="15" fill="rgb(233,84,52)"/><text x="49.7501%" y="127.50"></text></g><g><title>eval_to_const_value_raw (245,743 samples, 0.12%)</title><rect x="50.1799%" y="117" width="0.1217%" height="15" fill="rgb(207,117,47)"/><text x="50.4299%" y="127.50"></text></g><g><title>eval_to_const_value_raw (228,453 samples, 0.11%)</title><rect x="50.1885%" y="101" width="0.1132%" height="15" fill="rgb(249,43,39)"/><text x="50.4385%" y="111.50"></text></g><g><title>eval_to_allocation_raw (226,253 samples, 0.11%)</title><rect x="50.1896%" y="85" width="0.1121%" height="15" fill="rgb(209,38,44)"/><text x="50.4396%" y="95.50"></text></g><g><title>dropck_outlives (2,482,485 samples, 1.23%)</title><rect x="49.1126%" y="133" width="1.2296%" height="15" fill="rgb(236,212,23)"/><text x="49.3626%" y="143.50"></text></g><g><title>generics_of (1,032,334 samples, 0.51%)</title><rect x="53.4075%" y="117" width="0.5113%" height="15" fill="rgb(242,79,21)"/><text x="53.6575%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (851,720 samples, 0.42%)</title><rect x="53.4970%" y="101" width="0.4219%" height="15" fill="rgb(211,96,35)"/><text x="53.7470%" y="111.50"></text></g><g><title>impl_trait_ref (1,312,715 samples, 0.65%)</title><rect x="53.9349%" y="117" width="0.6502%" height="15" fill="rgb(253,215,40)"/><text x="54.1849%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (918,122 samples, 0.45%)</title><rect x="54.1303%" y="101" width="0.4548%" height="15" fill="rgb(211,81,21)"/><text x="54.3803%" y="111.50"></text></g><g><title>predicates_of (212,602 samples, 0.11%)</title><rect x="54.5929%" y="117" width="0.1053%" height="15" fill="rgb(208,190,38)"/><text x="54.8429%" y="127.50"></text></g><g><title>specializes (271,294 samples, 0.13%)</title><rect x="54.6982%" y="117" width="0.1344%" height="15" fill="rgb(235,213,38)"/><text x="54.9482%" y="127.50"></text></g><g><title>trait_impls_of (562,005 samples, 0.28%)</title><rect x="54.8384%" y="117" width="0.2784%" height="15" fill="rgb(237,122,38)"/><text x="55.0884%" y="127.50"></text></g><g><title>implementations_of_trait (223,202 samples, 0.11%)</title><rect x="55.0062%" y="101" width="0.1106%" height="15" fill="rgb(244,218,35)"/><text x="55.2562%" y="111.50"></text></g><g><title>evaluate_obligation (9,648,447 samples, 4.78%)</title><rect x="50.3422%" y="133" width="4.7790%" height="15" fill="rgb(240,68,47)"/><text x="50.5922%" y="143.50">evalua..</text></g><g><title>evaluate_obligation (491,780 samples, 0.24%)</title><rect x="55.8248%" y="117" width="0.2436%" height="15" fill="rgb(210,16,53)"/><text x="56.0748%" y="127.50"></text></g><g><title>method_autoderef_steps (1,209,239 samples, 0.60%)</title><rect x="55.4766%" y="133" width="0.5989%" height="15" fill="rgb(235,124,12)"/><text x="55.7266%" y="143.50"></text></g><g><title>object_safety_violations (303,523 samples, 0.15%)</title><rect x="56.0756%" y="133" width="0.1503%" height="15" fill="rgb(224,169,11)"/><text x="56.3256%" y="143.50"></text></g><g><title>predicates_of (425,355 samples, 0.21%)</title><rect x="56.2522%" y="133" width="0.2107%" height="15" fill="rgb(250,166,2)"/><text x="56.5022%" y="143.50"></text></g><g><title>predicates_defined_on (293,784 samples, 0.15%)</title><rect x="56.3173%" y="117" width="0.1455%" height="15" fill="rgb(242,216,29)"/><text x="56.5673%" y="127.50"></text></g><g><title>dropck_outlives (260,852 samples, 0.13%)</title><rect x="59.2374%" y="117" width="0.1292%" height="15" fill="rgb(230,116,27)"/><text x="59.4874%" y="127.50"></text></g><g><title>evaluate_obligation (996,121 samples, 0.49%)</title><rect x="59.3666%" y="117" width="0.4934%" height="15" fill="rgb(228,99,48)"/><text x="59.6166%" y="127.50"></text></g><g><title>is_copy_raw (482,686 samples, 0.24%)</title><rect x="59.9404%" y="117" width="0.2391%" height="15" fill="rgb(253,11,6)"/><text x="60.1904%" y="127.50"></text></g><g><title>evaluate_obligation (436,014 samples, 0.22%)</title><rect x="59.9635%" y="101" width="0.2160%" height="15" fill="rgb(247,143,39)"/><text x="60.2135%" y="111.50"></text></g><g><title>method_autoderef_steps (347,316 samples, 0.17%)</title><rect x="60.2056%" y="117" width="0.1720%" height="15" fill="rgb(236,97,10)"/><text x="60.4556%" y="127.50"></text></g><g><title>object_safety_violations (336,063 samples, 0.17%)</title><rect x="60.3776%" y="117" width="0.1665%" height="15" fill="rgb(233,208,19)"/><text x="60.6276%" y="127.50"></text></g><g><title>typeck (8,264,861 samples, 4.09%)</title><rect x="56.5429%" y="133" width="4.0937%" height="15" fill="rgb(216,164,2)"/><text x="56.7929%" y="143.50">type..</text></g><g><title>item_bodies_checking (56,906,203 samples, 28.19%)</title><rect x="32.4733%" y="181" width="28.1862%" height="15" fill="rgb(220,129,5)"/><text x="32.7233%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (56,902,183 samples, 28.18%)</title><rect x="32.4753%" y="165" width="28.1842%" height="15" fill="rgb(242,17,10)"/><text x="32.7253%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (56,787,911 samples, 28.13%)</title><rect x="32.5319%" y="149" width="28.1276%" height="15" fill="rgb(242,107,0)"/><text x="32.7819%" y="159.50">typeck</text></g><g><title>impl_trait_ref (251,551 samples, 0.12%)</title><rect x="61.9138%" y="101" width="0.1246%" height="15" fill="rgb(251,28,31)"/><text x="62.1638%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (213,260 samples, 0.11%)</title><rect x="61.9327%" y="85" width="0.1056%" height="15" fill="rgb(233,223,10)"/><text x="62.1827%" y="95.50"></text></g><g><title>adt_destructor (591,326 samples, 0.29%)</title><rect x="61.7756%" y="149" width="0.2929%" height="15" fill="rgb(215,21,27)"/><text x="62.0256%" y="159.50"></text></g><g><title>coherent_trait (581,406 samples, 0.29%)</title><rect x="61.7805%" y="133" width="0.2880%" height="15" fill="rgb(232,23,21)"/><text x="62.0305%" y="143.50"></text></g><g><title>specialization_graph_of (579,156 samples, 0.29%)</title><rect x="61.7816%" y="117" width="0.2869%" height="15" fill="rgb(244,5,23)"/><text x="62.0316%" y="127.50"></text></g><g><title>item_types_checking (3,151,485 samples, 1.56%)</title><rect x="60.6595%" y="181" width="1.5610%" height="15" fill="rgb(226,81,46)"/><text x="60.9095%" y="191.50"></text></g><g><title>check_mod_item_types (3,144,655 samples, 1.56%)</title><rect x="60.6628%" y="165" width="1.5576%" height="15" fill="rgb(247,70,30)"/><text x="60.9128%" y="175.50"></text></g><g><title>fn_sig (480,464 samples, 0.24%)</title><rect x="62.4156%" y="149" width="0.2380%" height="15" fill="rgb(212,68,19)"/><text x="62.6656%" y="159.50"></text></g><g><title>generics_of (503,796 samples, 0.25%)</title><rect x="62.6535%" y="149" width="0.2495%" height="15" fill="rgb(240,187,13)"/><text x="62.9035%" y="159.50"></text></g><g><title>late_bound_vars_map (504,737 samples, 0.25%)</title><rect x="63.2012%" y="101" width="0.2500%" height="15" fill="rgb(223,113,26)"/><text x="63.4512%" y="111.50"></text></g><g><title>resolve_lifetimes (485,057 samples, 0.24%)</title><rect x="63.2110%" y="85" width="0.2403%" height="15" fill="rgb(206,192,2)"/><text x="63.4610%" y="95.50"></text></g><g><title>explicit_predicates_of (928,422 samples, 0.46%)</title><rect x="63.0279%" y="117" width="0.4599%" height="15" fill="rgb(241,108,4)"/><text x="63.2779%" y="127.50"></text></g><g><title>predicates_of (1,702,129 samples, 0.84%)</title><rect x="62.9325%" y="149" width="0.8431%" height="15" fill="rgb(247,173,49)"/><text x="63.1825%" y="159.50"></text></g><g><title>predicates_defined_on (1,628,349 samples, 0.81%)</title><rect x="62.9691%" y="133" width="0.8065%" height="15" fill="rgb(224,114,35)"/><text x="63.2191%" y="143.50"></text></g><g><title>inferred_outlives_of (581,226 samples, 0.29%)</title><rect x="63.4877%" y="117" width="0.2879%" height="15" fill="rgb(245,159,27)"/><text x="63.7377%" y="127.50"></text></g><g><title>inferred_outlives_crate (553,246 samples, 0.27%)</title><rect x="63.5016%" y="101" width="0.2740%" height="15" fill="rgb(245,172,44)"/><text x="63.7516%" y="111.50"></text></g><g><title>type_of (357,623 samples, 0.18%)</title><rect x="63.5985%" y="85" width="0.1771%" height="15" fill="rgb(236,23,11)"/><text x="63.8485%" y="95.50"></text></g><g><title>type_collecting (3,331,876 samples, 1.65%)</title><rect x="62.2231%" y="181" width="1.6503%" height="15" fill="rgb(205,117,38)"/><text x="62.4731%" y="191.50"></text></g><g><title>collect_mod_item_types (3,320,996 samples, 1.64%)</title><rect x="62.2285%" y="165" width="1.6449%" height="15" fill="rgb(237,72,25)"/><text x="62.4785%" y="175.50"></text></g><g><title>evaluate_obligation (1,345,384 samples, 0.67%)</title><rect x="66.4558%" y="149" width="0.6664%" height="15" fill="rgb(244,70,9)"/><text x="66.7058%" y="159.50"></text></g><g><title>implied_outlives_bounds (565,553 samples, 0.28%)</title><rect x="67.1438%" y="149" width="0.2801%" height="15" fill="rgb(217,125,39)"/><text x="67.3938%" y="159.50"></text></g><g><title>param_env (557,405 samples, 0.28%)</title><rect x="67.4239%" y="149" width="0.2761%" height="15" fill="rgb(235,36,10)"/><text x="67.6739%" y="159.50"></text></g><g><title>region_scope_tree (568,379 samples, 0.28%)</title><rect x="67.7411%" y="149" width="0.2815%" height="15" fill="rgb(251,123,47)"/><text x="67.9911%" y="159.50"></text></g><g><title>check_impl_item_well_formed (8,055,841 samples, 3.99%)</title><rect x="64.0334%" y="165" width="3.9901%" height="15" fill="rgb(221,13,13)"/><text x="64.2834%" y="175.50">chec..</text></g><g><title>evaluate_obligation (298,855 samples, 0.15%)</title><rect x="69.0549%" y="149" width="0.1480%" height="15" fill="rgb(238,131,9)"/><text x="69.3049%" y="159.50"></text></g><g><title>adt_sized_constraint (207,263 samples, 0.10%)</title><rect x="69.1003%" y="133" width="0.1027%" height="15" fill="rgb(211,50,8)"/><text x="69.3503%" y="143.50"></text></g><g><title>param_env (438,923 samples, 0.22%)</title><rect x="69.3003%" y="149" width="0.2174%" height="15" fill="rgb(245,182,24)"/><text x="69.5503%" y="159.50"></text></g><g><title>check_item_well_formed (3,398,149 samples, 1.68%)</title><rect x="68.0236%" y="165" width="1.6831%" height="15" fill="rgb(242,14,37)"/><text x="68.2736%" y="175.50"></text></g><g><title>analysis (140,325,600 samples, 69.50%)</title><rect x="0.3357%" y="213" width="69.5046%" height="15" fill="rgb(246,228,12)"/><text x="0.5857%" y="223.50">analysis</text></g><g><title>type_check_crate (88,080,009 samples, 43.63%)</title><rect x="26.2134%" y="197" width="43.6269%" height="15" fill="rgb(213,55,15)"/><text x="26.4634%" y="207.50">type_check_crate</text></g><g><title>wf_checking (12,039,884 samples, 5.96%)</title><rect x="63.8768%" y="181" width="5.9635%" height="15" fill="rgb(209,9,3)"/><text x="64.1268%" y="191.50">wf_check..</text></g><g><title>check_trait_item_well_formed (269,633 samples, 0.13%)</title><rect x="69.7067%" y="165" width="0.1336%" height="15" fill="rgb(230,59,30)"/><text x="69.9567%" y="175.50"></text></g><g><title>codegen_crate (436,715 samples, 0.22%)</title><rect x="69.8455%" y="213" width="0.2163%" height="15" fill="rgb(209,121,21)"/><text x="70.0955%" y="223.50"></text></g><g><title>AST_validation (304,263 samples, 0.15%)</title><rect x="70.1660%" y="197" width="0.1507%" height="15" fill="rgb(220,109,13)"/><text x="70.4160%" y="207.50"></text></g><g><title>metadata_load_macro (208,401 samples, 0.10%)</title><rect x="82.4598%" y="165" width="0.1032%" height="15" fill="rgb(232,18,1)"/><text x="82.7098%" y="175.50"></text></g><g><title>metadata_register_crate (11,062,493 samples, 5.48%)</title><rect x="82.5630%" y="165" width="5.4794%" height="15" fill="rgb(215,41,42)"/><text x="82.8130%" y="175.50">metadat..</text></g><g><title>metadata_register_crate (8,174,592 samples, 4.05%)</title><rect x="83.9934%" y="149" width="4.0490%" height="15" fill="rgb(224,123,36)"/><text x="84.2434%" y="159.50">meta..</text></g><g><title>metadata_register_crate (298,843 samples, 0.15%)</title><rect x="87.8944%" y="133" width="0.1480%" height="15" fill="rgb(240,125,3)"/><text x="88.1444%" y="143.50"></text></g><g><title>macro_expand_crate (35,988,961 samples, 17.83%)</title><rect x="70.4326%" y="197" width="17.8257%" height="15" fill="rgb(205,98,50)"/><text x="70.6826%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (35,973,721 samples, 17.82%)</title><rect x="70.4402%" y="181" width="17.8181%" height="15" fill="rgb(205,185,37)"/><text x="70.6902%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (435,865 samples, 0.22%)</title><rect x="88.0424%" y="165" width="0.2159%" height="15" fill="rgb(238,207,15)"/><text x="88.2924%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (213,112 samples, 0.11%)</title><rect x="88.2651%" y="197" width="0.1056%" height="15" fill="rgb(213,199,42)"/><text x="88.5151%" y="207.50"></text></g><g><title>finalize_imports (271,713 samples, 0.13%)</title><rect x="88.3752%" y="181" width="0.1346%" height="15" fill="rgb(235,201,11)"/><text x="88.6252%" y="191.50"></text></g><g><title>late_resolve_crate (4,710,442 samples, 2.33%)</title><rect x="88.5641%" y="181" width="2.3331%" height="15" fill="rgb(207,46,11)"/><text x="88.8141%" y="191.50">l..</text></g><g><title>configure_and_expand (42,342,621 samples, 20.97%)</title><rect x="70.0618%" y="213" width="20.9727%" height="15" fill="rgb(241,35,35)"/><text x="70.3118%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (5,378,010 samples, 2.66%)</title><rect x="88.3707%" y="197" width="2.6638%" height="15" fill="rgb(243,32,47)"/><text x="88.6207%" y="207.50">re..</text></g><g><title>drop_ast (276,183 samples, 0.14%)</title><rect x="91.0345%" y="213" width="0.1368%" height="15" fill="rgb(247,202,23)"/><text x="91.2845%" y="223.50"></text></g><g><title>early_lint_checks (456,916 samples, 0.23%)</title><rect x="91.1837%" y="213" width="0.2263%" height="15" fill="rgb(219,102,11)"/><text x="91.4337%" y="223.50"></text></g><g><title>free_global_ctxt (4,446,599 samples, 2.20%)</title><rect x="91.4100%" y="213" width="2.2024%" height="15" fill="rgb(243,110,44)"/><text x="91.6600%" y="223.50">f..</text></g><g><title>generate_crate_metadata (1,663,719 samples, 0.82%)</title><rect x="93.6124%" y="213" width="0.8241%" height="15" fill="rgb(222,74,54)"/><text x="93.8624%" y="223.50"></text></g><g><title>hir_lowering (5,291,009 samples, 2.62%)</title><rect x="94.4365%" y="213" width="2.6207%" height="15" fill="rgb(216,99,12)"/><text x="94.6865%" y="223.50">hi..</text></g><g><title>parse_crate (4,120,176 samples, 2.04%)</title><rect x="97.0858%" y="213" width="2.0408%" height="15" fill="rgb(226,22,26)"/><text x="97.3358%" y="223.50">p..</text></g><g><title>prepare_outputs (296,843 samples, 0.15%)</title><rect x="99.1309%" y="213" width="0.1470%" height="15" fill="rgb(217,163,10)"/><text x="99.3809%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (964,721 samples, 0.48%)</title><rect x="99.2779%" y="213" width="0.4778%" height="15" fill="rgb(213,25,53)"/><text x="99.5279%" y="223.50"></text></g><g><title>all (201,894,005 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (201,894,005 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (378,494 samples, 0.19%)</title><rect x="99.8125%" y="213" width="0.1875%" height="15" fill="rgb(229,68,48)"/><text x="100.0625%" y="223.50"></text></g></svg></svg>