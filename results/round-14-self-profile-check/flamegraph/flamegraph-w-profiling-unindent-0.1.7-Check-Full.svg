<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (371,144 samples, 0.52%)</title><rect x="9.9311%" y="133" width="0.5198%" height="15" fill="rgb(227,0,7)"/><text x="10.1811%" y="143.50"></text></g><g><title>item_attrs (373,314 samples, 0.52%)</title><rect x="11.1948%" y="101" width="0.5228%" height="15" fill="rgb(217,0,24)"/><text x="11.4448%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (360,174 samples, 0.50%)</title><rect x="11.2132%" y="85" width="0.5044%" height="15" fill="rgb(221,193,54)"/><text x="11.4632%" y="95.50"></text></g><g><title>codegen_fn_attrs (487,194 samples, 0.68%)</title><rect x="11.0586%" y="117" width="0.6823%" height="15" fill="rgb(248,212,6)"/><text x="11.3086%" y="127.50"></text></g><g><title>is_copy_raw (111,951 samples, 0.16%)</title><rect x="13.5229%" y="101" width="0.1568%" height="15" fill="rgb(208,68,35)"/><text x="13.7729%" y="111.50"></text></g><g><title>evaluate_obligation (75,551 samples, 0.11%)</title><rect x="13.5739%" y="85" width="0.1058%" height="15" fill="rgb(232,128,0)"/><text x="13.8239%" y="95.50"></text></g><g><title>is_copy_raw (119,791 samples, 0.17%)</title><rect x="13.9605%" y="53" width="0.1678%" height="15" fill="rgb(207,160,47)"/><text x="14.2105%" y="63.50"></text></g><g><title>evaluate_obligation (109,671 samples, 0.15%)</title><rect x="13.9746%" y="37" width="0.1536%" height="15" fill="rgb(228,23,34)"/><text x="14.2246%" y="47.50"></text></g><g><title>adt_drop_tys (160,633 samples, 0.22%)</title><rect x="13.9352%" y="69" width="0.2250%" height="15" fill="rgb(218,30,26)"/><text x="14.1852%" y="79.50"></text></g><g><title>is_copy_raw (286,314 samples, 0.40%)</title><rect x="14.1779%" y="69" width="0.4010%" height="15" fill="rgb(220,122,19)"/><text x="14.4279%" y="79.50"></text></g><g><title>evaluate_obligation (219,933 samples, 0.31%)</title><rect x="14.2709%" y="53" width="0.3080%" height="15" fill="rgb(250,228,42)"/><text x="14.5209%" y="63.50"></text></g><g><title>param_env (162,451 samples, 0.23%)</title><rect x="14.5789%" y="69" width="0.2275%" height="15" fill="rgb(240,193,28)"/><text x="14.8289%" y="79.50"></text></g><g><title>adt_drop_tys (729,778 samples, 1.02%)</title><rect x="13.8300%" y="85" width="1.0220%" height="15" fill="rgb(216,20,37)"/><text x="14.0800%" y="95.50"></text></g><g><title>is_copy_raw (926,329 samples, 1.30%)</title><rect x="14.8806%" y="85" width="1.2972%" height="15" fill="rgb(206,188,39)"/><text x="15.1306%" y="95.50"></text></g><g><title>evaluate_obligation (842,959 samples, 1.18%)</title><rect x="14.9974%" y="69" width="1.1805%" height="15" fill="rgb(217,207,13)"/><text x="15.2474%" y="79.50"></text></g><g><title>trait_impls_of (282,093 samples, 0.40%)</title><rect x="15.7828%" y="53" width="0.3950%" height="15" fill="rgb(231,73,38)"/><text x="16.0328%" y="63.50"></text></g><g><title>needs_drop_raw (1,920,751 samples, 2.69%)</title><rect x="13.6853%" y="101" width="2.6898%" height="15" fill="rgb(225,20,46)"/><text x="13.9353%" y="111.50">ne..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (140,893 samples, 0.20%)</title><rect x="16.1778%" y="85" width="0.1973%" height="15" fill="rgb(210,31,41)"/><text x="16.4278%" y="95.50"></text></g><g><title>normalize_projection_ty (110,272 samples, 0.15%)</title><rect x="16.2207%" y="69" width="0.1544%" height="15" fill="rgb(221,200,47)"/><text x="16.4707%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (708,228 samples, 0.99%)</title><rect x="16.7195%" y="85" width="0.9918%" height="15" fill="rgb(226,26,5)"/><text x="16.9695%" y="95.50"></text></g><g><title>impl_parent (137,250 samples, 0.19%)</title><rect x="18.1272%" y="69" width="0.1922%" height="15" fill="rgb(249,33,26)"/><text x="18.3772%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (88,870 samples, 0.12%)</title><rect x="18.1949%" y="53" width="0.1245%" height="15" fill="rgb(235,183,28)"/><text x="18.4449%" y="63.50"></text></g><g><title>specialization_graph_of (873,360 samples, 1.22%)</title><rect x="17.7273%" y="85" width="1.2231%" height="15" fill="rgb(221,5,38)"/><text x="17.9773%" y="95.50"></text></g><g><title>impl_trait_ref (450,575 samples, 0.63%)</title><rect x="18.3194%" y="69" width="0.6310%" height="15" fill="rgb(247,18,42)"/><text x="18.5694%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (397,303 samples, 0.56%)</title><rect x="18.3940%" y="53" width="0.5564%" height="15" fill="rgb(241,131,45)"/><text x="18.6440%" y="63.50"></text></g><g><title>resolve_instance (1,955,765 samples, 2.74%)</title><rect x="16.3751%" y="101" width="2.7389%" height="15" fill="rgb(249,31,29)"/><text x="16.6251%" y="111.50">re..</text></g><g><title>type_of (75,270 samples, 0.11%)</title><rect x="19.0086%" y="85" width="0.1054%" height="15" fill="rgb(225,111,53)"/><text x="19.2586%" y="95.50"></text></g><g><title>thir_body (438,524 samples, 0.61%)</title><rect x="19.1292%" y="101" width="0.6141%" height="15" fill="rgb(238,160,17)"/><text x="19.3792%" y="111.50"></text></g><g><title>mir_const (7,503,135 samples, 10.51%)</title><rect x="9.2446%" y="149" width="10.5075%" height="15" fill="rgb(214,148,48)"/><text x="9.4946%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (6,641,756 samples, 9.30%)</title><rect x="10.4509%" y="133" width="9.3012%" height="15" fill="rgb(232,36,49)"/><text x="10.7009%" y="143.50">unsafety_chec..</text></g><g><title>mir_built (5,720,595 samples, 8.01%)</title><rect x="11.7409%" y="117" width="8.0112%" height="15" fill="rgb(209,103,24)"/><text x="11.9909%" y="127.50">mir_built</text></g><g><title>mir_promoted (7,969,108 samples, 11.16%)</title><rect x="8.6228%" y="165" width="11.1600%" height="15" fill="rgb(229,88,8)"/><text x="8.8728%" y="175.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (801,509 samples, 1.12%)</title><rect x="19.8702%" y="165" width="1.1224%" height="15" fill="rgb(213,181,19)"/><text x="20.1202%" y="175.50"></text></g><g><title>normalize_projection_ty (483,244 samples, 0.68%)</title><rect x="20.3159%" y="149" width="0.6767%" height="15" fill="rgb(254,191,54)"/><text x="20.5659%" y="159.50"></text></g><g><title>type_op_normalize_predicate (367,024 samples, 0.51%)</title><rect x="20.9926%" y="165" width="0.5140%" height="15" fill="rgb(241,83,37)"/><text x="21.2426%" y="175.50"></text></g><g><title>normalize_projection_ty (195,353 samples, 0.27%)</title><rect x="21.2331%" y="149" width="0.2736%" height="15" fill="rgb(233,36,39)"/><text x="21.4831%" y="159.50"></text></g><g><title>type_op_normalize_ty (288,273 samples, 0.40%)</title><rect x="21.5066%" y="165" width="0.4037%" height="15" fill="rgb(226,3,54)"/><text x="21.7566%" y="175.50"></text></g><g><title>normalize_projection_ty (184,102 samples, 0.26%)</title><rect x="21.6525%" y="149" width="0.2578%" height="15" fill="rgb(245,192,40)"/><text x="21.9025%" y="159.50"></text></g><g><title>MIR_borrow_checking (16,788,887 samples, 23.51%)</title><rect x="0.9861%" y="197" width="23.5113%" height="15" fill="rgb(238,167,29)"/><text x="1.2361%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,744,097 samples, 23.45%)</title><rect x="1.0488%" y="181" width="23.4486%" height="15" fill="rgb(232,182,51)"/><text x="1.2988%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,847,351 samples, 2.59%)</title><rect x="21.9103%" y="165" width="2.5870%" height="15" fill="rgb(231,60,39)"/><text x="22.1603%" y="175.50">ty..</text></g><g><title>hir_module_items (150,472 samples, 0.21%)</title><rect x="24.5142%" y="197" width="0.2107%" height="15" fill="rgb(208,69,12)"/><text x="24.7642%" y="207.50"></text></g><g><title>get_lang_items (97,251 samples, 0.14%)</title><rect x="25.0436%" y="149" width="0.1362%" height="15" fill="rgb(235,93,37)"/><text x="25.2936%" y="159.50"></text></g><g><title>should_inherit_track_caller (133,021 samples, 0.19%)</title><rect x="25.1798%" y="149" width="0.1863%" height="15" fill="rgb(213,116,39)"/><text x="25.4298%" y="159.50"></text></g><g><title>codegen_fn_attrs (339,693 samples, 0.48%)</title><rect x="24.9386%" y="165" width="0.4757%" height="15" fill="rgb(222,207,29)"/><text x="25.1886%" y="175.50"></text></g><g><title>check_mod_attrs (465,365 samples, 0.65%)</title><rect x="24.7629%" y="181" width="0.6517%" height="15" fill="rgb(206,96,30)"/><text x="25.0129%" y="191.50"></text></g><g><title>lookup_deprecation_entry (85,100 samples, 0.12%)</title><rect x="25.6879%" y="165" width="0.1192%" height="15" fill="rgb(218,138,4)"/><text x="25.9379%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (247,792 samples, 0.35%)</title><rect x="25.5539%" y="181" width="0.3470%" height="15" fill="rgb(250,191,14)"/><text x="25.8039%" y="191.50"></text></g><g><title>misc_checking_1 (878,120 samples, 1.23%)</title><rect x="24.7261%" y="197" width="1.2297%" height="15" fill="rgb(239,60,40)"/><text x="24.9761%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (285,083 samples, 0.40%)</title><rect x="25.9600%" y="181" width="0.3992%" height="15" fill="rgb(206,27,48)"/><text x="26.2100%" y="191.50"></text></g><g><title>check_mod_liveness (237,303 samples, 0.33%)</title><rect x="26.0269%" y="165" width="0.3323%" height="15" fill="rgb(225,35,8)"/><text x="26.2769%" y="175.50"></text></g><g><title>type_uninhabited_from (74,522 samples, 0.10%)</title><rect x="26.2549%" y="149" width="0.1044%" height="15" fill="rgb(250,213,24)"/><text x="26.5049%" y="159.50"></text></g><g><title>misc_checking_2 (546,096 samples, 0.76%)</title><rect x="25.9558%" y="197" width="0.7648%" height="15" fill="rgb(247,123,22)"/><text x="26.2058%" y="207.50"></text></g><g><title>match_checking (258,033 samples, 0.36%)</title><rect x="26.3592%" y="181" width="0.3614%" height="15" fill="rgb(231,138,38)"/><text x="26.6092%" y="191.50"></text></g><g><title>check_match (243,683 samples, 0.34%)</title><rect x="26.3793%" y="165" width="0.3413%" height="15" fill="rgb(231,145,46)"/><text x="26.6293%" y="175.50"></text></g><g><title>check_private_in_public (100,211 samples, 0.14%)</title><rect x="26.7425%" y="181" width="0.1403%" height="15" fill="rgb(251,118,11)"/><text x="26.9925%" y="191.50"></text></g><g><title>death_checking (151,501 samples, 0.21%)</title><rect x="26.8828%" y="181" width="0.2122%" height="15" fill="rgb(217,147,25)"/><text x="27.1328%" y="191.50"></text></g><g><title>crate_lints (315,853 samples, 0.44%)</title><rect x="27.0989%" y="165" width="0.4423%" height="15" fill="rgb(247,81,37)"/><text x="27.3489%" y="175.50"></text></g><g><title>lint_checking (484,705 samples, 0.68%)</title><rect x="27.0950%" y="181" width="0.6788%" height="15" fill="rgb(209,12,38)"/><text x="27.3450%" y="191.50"></text></g><g><title>module_lints (166,042 samples, 0.23%)</title><rect x="27.5412%" y="165" width="0.2325%" height="15" fill="rgb(227,1,9)"/><text x="27.7912%" y="175.50"></text></g><g><title>lint_mod (162,222 samples, 0.23%)</title><rect x="27.5466%" y="149" width="0.2272%" height="15" fill="rgb(248,47,43)"/><text x="27.7966%" y="159.50"></text></g><g><title>privacy_access_levels (138,091 samples, 0.19%)</title><rect x="27.7738%" y="181" width="0.1934%" height="15" fill="rgb(221,10,30)"/><text x="28.0238%" y="191.50"></text></g><g><title>privacy_checking_modules (441,965 samples, 0.62%)</title><rect x="27.9672%" y="181" width="0.6189%" height="15" fill="rgb(210,229,1)"/><text x="28.2172%" y="191.50"></text></g><g><title>check_mod_privacy (439,225 samples, 0.62%)</title><rect x="27.9710%" y="165" width="0.6151%" height="15" fill="rgb(222,148,37)"/><text x="28.2210%" y="175.50"></text></g><g><title>misc_checking_3 (1,344,835 samples, 1.88%)</title><rect x="26.7206%" y="197" width="1.8833%" height="15" fill="rgb(234,67,33)"/><text x="26.9706%" y="207.50">m..</text></g><g><title>impl_parent (389,082 samples, 0.54%)</title><rect x="29.5549%" y="133" width="0.5449%" height="15" fill="rgb(247,98,35)"/><text x="29.8049%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (260,261 samples, 0.36%)</title><rect x="29.7353%" y="117" width="0.3645%" height="15" fill="rgb(247,138,52)"/><text x="29.9853%" y="127.50"></text></g><g><title>impl_trait_ref (1,313,849 samples, 1.84%)</title><rect x="30.0998%" y="133" width="1.8399%" height="15" fill="rgb(213,79,30)"/><text x="30.3498%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,173,357 samples, 1.64%)</title><rect x="30.2965%" y="117" width="1.6432%" height="15" fill="rgb(246,177,23)"/><text x="30.5465%" y="127.50"></text></g><g><title>coherent_trait (2,482,638 samples, 3.48%)</title><rect x="28.6937%" y="165" width="3.4767%" height="15" fill="rgb(230,62,27)"/><text x="28.9437%" y="175.50">coh..</text></g><g><title>specialization_graph_of (2,470,938 samples, 3.46%)</title><rect x="28.7101%" y="149" width="3.4603%" height="15" fill="rgb(216,154,8)"/><text x="28.9601%" y="159.50">spe..</text></g><g><title>trait_impls_of (164,732 samples, 0.23%)</title><rect x="31.9397%" y="133" width="0.2307%" height="15" fill="rgb(244,35,45)"/><text x="32.1897%" y="143.50"></text></g><g><title>coherence_checking (2,550,139 samples, 3.57%)</title><rect x="28.6680%" y="181" width="3.5712%" height="15" fill="rgb(251,115,12)"/><text x="28.9180%" y="191.50">cohe..</text></g><g><title>adt_def (98,351 samples, 0.14%)</title><rect x="47.5388%" y="117" width="0.1377%" height="15" fill="rgb(240,54,50)"/><text x="47.7888%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (95,241 samples, 0.13%)</title><rect x="47.5432%" y="101" width="0.1334%" height="15" fill="rgb(233,84,52)"/><text x="47.7932%" y="111.50"></text></g><g><title>adt_sized_constraint (162,971 samples, 0.23%)</title><rect x="47.5070%" y="133" width="0.2282%" height="15" fill="rgb(207,117,47)"/><text x="47.7570%" y="143.50"></text></g><g><title>associated_item (903,311 samples, 1.27%)</title><rect x="48.1962%" y="117" width="1.2650%" height="15" fill="rgb(249,43,39)"/><text x="48.4462%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (711,059 samples, 1.00%)</title><rect x="48.4654%" y="101" width="0.9958%" height="15" fill="rgb(209,38,44)"/><text x="48.7154%" y="111.50"></text></g><g><title>associated_items (1,284,135 samples, 1.80%)</title><rect x="47.7428%" y="133" width="1.7983%" height="15" fill="rgb(236,212,23)"/><text x="47.9928%" y="143.50">a..</text></g><g><title>adt_dtorck_constraint (143,412 samples, 0.20%)</title><rect x="50.5005%" y="69" width="0.2008%" height="15" fill="rgb(242,79,21)"/><text x="50.7505%" y="79.50"></text></g><g><title>adt_dtorck_constraint (211,573 samples, 0.30%)</title><rect x="50.4260%" y="85" width="0.2963%" height="15" fill="rgb(211,96,35)"/><text x="50.6760%" y="95.50"></text></g><g><title>adt_dtorck_constraint (316,035 samples, 0.44%)</title><rect x="50.3025%" y="101" width="0.4426%" height="15" fill="rgb(253,215,40)"/><text x="50.5525%" y="111.50"></text></g><g><title>adt_dtorck_constraint (434,645 samples, 0.61%)</title><rect x="50.1796%" y="117" width="0.6087%" height="15" fill="rgb(211,81,21)"/><text x="50.4296%" y="127.50"></text></g><g><title>dropck_outlives (963,482 samples, 1.35%)</title><rect x="49.6776%" y="133" width="1.3493%" height="15" fill="rgb(208,190,38)"/><text x="49.9276%" y="143.50"></text></g><g><title>normalize_projection_ty (170,351 samples, 0.24%)</title><rect x="50.7883%" y="117" width="0.2386%" height="15" fill="rgb(235,213,38)"/><text x="51.0383%" y="127.50"></text></g><g><title>adt_def (103,380 samples, 0.14%)</title><rect x="52.4940%" y="101" width="0.1448%" height="15" fill="rgb(237,122,38)"/><text x="52.7440%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (100,930 samples, 0.14%)</title><rect x="52.4974%" y="85" width="0.1413%" height="15" fill="rgb(244,218,35)"/><text x="52.7474%" y="95.50"></text></g><g><title>item_attrs (73,390 samples, 0.10%)</title><rect x="52.5360%" y="69" width="0.1028%" height="15" fill="rgb(240,68,47)"/><text x="52.7860%" y="79.50"></text></g><g><title>adt_sized_constraint (75,401 samples, 0.11%)</title><rect x="52.6388%" y="101" width="0.1056%" height="15" fill="rgb(210,16,53)"/><text x="52.8888%" y="111.50"></text></g><g><title>adt_sized_constraint (202,971 samples, 0.28%)</title><rect x="52.4748%" y="117" width="0.2842%" height="15" fill="rgb(235,124,12)"/><text x="52.7248%" y="127.50"></text></g><g><title>predicates_of (172,640 samples, 0.24%)</title><rect x="52.9485%" y="117" width="0.2418%" height="15" fill="rgb(224,169,11)"/><text x="53.1985%" y="127.50"></text></g><g><title>predicates_defined_on (112,330 samples, 0.16%)</title><rect x="53.0330%" y="101" width="0.1573%" height="15" fill="rgb(250,166,2)"/><text x="53.2830%" y="111.50"></text></g><g><title>evaluate_obligation (3,140,214 samples, 4.40%)</title><rect x="51.0268%" y="133" width="4.3976%" height="15" fill="rgb(242,216,29)"/><text x="51.2768%" y="143.50">evalu..</text></g><g><title>trait_impls_of (1,584,560 samples, 2.22%)</title><rect x="53.2054%" y="117" width="2.2190%" height="15" fill="rgb(230,116,27)"/><text x="53.4554%" y="127.50">t..</text></g><g><title>implementations_of_trait (415,474 samples, 0.58%)</title><rect x="54.8426%" y="101" width="0.5818%" height="15" fill="rgb(228,99,48)"/><text x="55.0926%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (321,283 samples, 0.45%)</title><rect x="54.9745%" y="85" width="0.4499%" height="15" fill="rgb(253,11,6)"/><text x="55.2245%" y="95.50"></text></g><g><title>fn_sig (229,582 samples, 0.32%)</title><rect x="55.4837%" y="133" width="0.3215%" height="15" fill="rgb(247,143,39)"/><text x="55.7337%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (205,642 samples, 0.29%)</title><rect x="55.5173%" y="117" width="0.2880%" height="15" fill="rgb(236,97,10)"/><text x="55.7673%" y="127.50"></text></g><g><title>generics_of (136,821 samples, 0.19%)</title><rect x="55.8053%" y="133" width="0.1916%" height="15" fill="rgb(233,208,19)"/><text x="56.0553%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (83,860 samples, 0.12%)</title><rect x="55.8794%" y="117" width="0.1174%" height="15" fill="rgb(216,164,2)"/><text x="56.1294%" y="127.50"></text></g><g><title>associated_item (253,362 samples, 0.35%)</title><rect x="56.1282%" y="101" width="0.3548%" height="15" fill="rgb(220,129,5)"/><text x="56.3782%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (203,162 samples, 0.28%)</title><rect x="56.1985%" y="85" width="0.2845%" height="15" fill="rgb(242,17,10)"/><text x="56.4485%" y="95.50"></text></g><g><title>impl_item_implementor_ids (369,992 samples, 0.52%)</title><rect x="55.9969%" y="133" width="0.5181%" height="15" fill="rgb(242,107,0)"/><text x="56.2469%" y="143.50"></text></g><g><title>associated_items (333,432 samples, 0.47%)</title><rect x="56.0481%" y="117" width="0.4669%" height="15" fill="rgb(251,28,31)"/><text x="56.2981%" y="127.50"></text></g><g><title>item_attrs (108,180 samples, 0.15%)</title><rect x="56.6308%" y="133" width="0.1515%" height="15" fill="rgb(233,223,10)"/><text x="56.8808%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (104,480 samples, 0.15%)</title><rect x="56.6360%" y="117" width="0.1463%" height="15" fill="rgb(215,21,27)"/><text x="56.8860%" y="127.50"></text></g><g><title>evaluate_obligation (384,843 samples, 0.54%)</title><rect x="57.3677%" y="117" width="0.5389%" height="15" fill="rgb(232,23,21)"/><text x="57.6177%" y="127.50"></text></g><g><title>method_autoderef_steps (718,691 samples, 1.01%)</title><rect x="56.9323%" y="133" width="1.0065%" height="15" fill="rgb(244,5,23)"/><text x="57.1823%" y="143.50"></text></g><g><title>explicit_predicates_of (168,603 samples, 0.24%)</title><rect x="58.4426%" y="101" width="0.2361%" height="15" fill="rgb(226,81,46)"/><text x="58.6926%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (123,682 samples, 0.17%)</title><rect x="58.5056%" y="85" width="0.1732%" height="15" fill="rgb(247,70,30)"/><text x="58.7556%" y="95.50"></text></g><g><title>predicates_of (525,378 samples, 0.74%)</title><rect x="58.0243%" y="133" width="0.7357%" height="15" fill="rgb(212,68,19)"/><text x="58.2743%" y="143.50"></text></g><g><title>predicates_defined_on (362,227 samples, 0.51%)</title><rect x="58.2528%" y="117" width="0.5073%" height="15" fill="rgb(240,187,13)"/><text x="58.5028%" y="127.50"></text></g><g><title>type_of (87,892 samples, 0.12%)</title><rect x="58.8737%" y="133" width="0.1231%" height="15" fill="rgb(223,113,26)"/><text x="59.1237%" y="143.50"></text></g><g><title>item_bodies_checking (19,132,053 samples, 26.79%)</title><rect x="32.2831%" y="181" width="26.7927%" height="15" fill="rgb(206,192,2)"/><text x="32.5331%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,127,703 samples, 26.79%)</title><rect x="32.2892%" y="165" width="26.7866%" height="15" fill="rgb(241,108,4)"/><text x="32.5392%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (19,094,822 samples, 26.74%)</title><rect x="32.3353%" y="149" width="26.7406%" height="15" fill="rgb(247,173,49)"/><text x="32.5853%" y="159.50">typeck</text></g><g><title>impl_parent (121,211 samples, 0.17%)</title><rect x="60.5823%" y="101" width="0.1697%" height="15" fill="rgb(224,114,35)"/><text x="60.8323%" y="111.50"></text></g><g><title>impl_trait_ref (426,896 samples, 0.60%)</title><rect x="60.7521%" y="101" width="0.5978%" height="15" fill="rgb(245,159,27)"/><text x="61.0021%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (378,515 samples, 0.53%)</title><rect x="60.8198%" y="85" width="0.5301%" height="15" fill="rgb(245,172,44)"/><text x="61.0698%" y="95.50"></text></g><g><title>adt_destructor (821,489 samples, 1.15%)</title><rect x="60.3097%" y="149" width="1.1504%" height="15" fill="rgb(236,23,11)"/><text x="60.5597%" y="159.50"></text></g><g><title>coherent_trait (815,719 samples, 1.14%)</title><rect x="60.3178%" y="133" width="1.1423%" height="15" fill="rgb(205,117,38)"/><text x="60.5678%" y="143.50"></text></g><g><title>specialization_graph_of (812,109 samples, 1.14%)</title><rect x="60.3229%" y="117" width="1.1373%" height="15" fill="rgb(237,72,25)"/><text x="60.5729%" y="127.50"></text></g><g><title>trait_impls_of (78,731 samples, 0.11%)</title><rect x="61.3499%" y="101" width="0.1103%" height="15" fill="rgb(244,70,9)"/><text x="61.5999%" y="111.50"></text></g><g><title>adt_def (142,452 samples, 0.20%)</title><rect x="61.5040%" y="117" width="0.1995%" height="15" fill="rgb(217,125,39)"/><text x="61.7540%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (141,212 samples, 0.20%)</title><rect x="61.5057%" y="101" width="0.1978%" height="15" fill="rgb(235,36,10)"/><text x="61.7557%" y="111.50"></text></g><g><title>item_attrs (129,422 samples, 0.18%)</title><rect x="61.5222%" y="85" width="0.1812%" height="15" fill="rgb(251,123,47)"/><text x="61.7722%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (128,122 samples, 0.18%)</title><rect x="61.5241%" y="69" width="0.1794%" height="15" fill="rgb(221,13,13)"/><text x="61.7741%" y="79.50"></text></g><g><title>adt_def (118,821 samples, 0.17%)</title><rect x="61.7065%" y="101" width="0.1664%" height="15" fill="rgb(238,131,9)"/><text x="61.9565%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (118,241 samples, 0.17%)</title><rect x="61.7073%" y="85" width="0.1656%" height="15" fill="rgb(211,50,8)"/><text x="61.9573%" y="95.50"></text></g><g><title>item_attrs (112,441 samples, 0.16%)</title><rect x="61.7155%" y="69" width="0.1575%" height="15" fill="rgb(245,182,24)"/><text x="61.9655%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (111,691 samples, 0.16%)</title><rect x="61.7165%" y="53" width="0.1564%" height="15" fill="rgb(242,14,37)"/><text x="61.9665%" y="63.50"></text></g><g><title>adt_sized_constraint (122,311 samples, 0.17%)</title><rect x="61.7035%" y="117" width="0.1713%" height="15" fill="rgb(246,228,12)"/><text x="61.9535%" y="127.50"></text></g><g><title>evaluate_obligation (310,603 samples, 0.43%)</title><rect x="61.4612%" y="149" width="0.4350%" height="15" fill="rgb(213,55,15)"/><text x="61.7112%" y="159.50"></text></g><g><title>adt_sized_constraint (286,473 samples, 0.40%)</title><rect x="61.4950%" y="133" width="0.4012%" height="15" fill="rgb(209,9,3)"/><text x="61.7450%" y="143.50"></text></g><g><title>item_types_checking (2,085,623 samples, 2.92%)</title><rect x="59.0758%" y="181" width="2.9207%" height="15" fill="rgb(230,59,30)"/><text x="59.3258%" y="191.50">it..</text></g><g><title>check_mod_item_types (2,080,863 samples, 2.91%)</title><rect x="59.0825%" y="165" width="2.9141%" height="15" fill="rgb(209,121,21)"/><text x="59.3325%" y="175.50">ch..</text></g><g><title>associated_item (84,250 samples, 0.12%)</title><rect x="62.6955%" y="117" width="0.1180%" height="15" fill="rgb(220,109,13)"/><text x="62.9455%" y="127.50"></text></g><g><title>associated_items (136,931 samples, 0.19%)</title><rect x="62.6256%" y="133" width="0.1918%" height="15" fill="rgb(232,18,1)"/><text x="62.8756%" y="143.50"></text></g><g><title>fn_sig (496,987 samples, 0.70%)</title><rect x="62.2710%" y="149" width="0.6960%" height="15" fill="rgb(215,41,42)"/><text x="62.5210%" y="159.50"></text></g><g><title>is_late_bound_map (191,361 samples, 0.27%)</title><rect x="63.1182%" y="133" width="0.2680%" height="15" fill="rgb(224,123,36)"/><text x="63.3682%" y="143.50"></text></g><g><title>resolve_lifetimes (181,581 samples, 0.25%)</title><rect x="63.1319%" y="117" width="0.2543%" height="15" fill="rgb(240,125,3)"/><text x="63.3819%" y="127.50"></text></g><g><title>lint_levels (72,541 samples, 0.10%)</title><rect x="63.2846%" y="101" width="0.1016%" height="15" fill="rgb(205,98,50)"/><text x="63.5346%" y="111.50"></text></g><g><title>named_region_map (251,380 samples, 0.35%)</title><rect x="63.3862%" y="133" width="0.3520%" height="15" fill="rgb(205,185,37)"/><text x="63.6362%" y="143.50"></text></g><g><title>resolve_lifetimes (221,230 samples, 0.31%)</title><rect x="63.4284%" y="117" width="0.3098%" height="15" fill="rgb(238,207,15)"/><text x="63.6784%" y="127.50"></text></g><g><title>generics_of (565,355 samples, 0.79%)</title><rect x="62.9670%" y="149" width="0.7917%" height="15" fill="rgb(213,199,42)"/><text x="63.2170%" y="159.50"></text></g><g><title>item_bounds (86,471 samples, 0.12%)</title><rect x="63.7925%" y="149" width="0.1211%" height="15" fill="rgb(235,201,11)"/><text x="64.0425%" y="159.50"></text></g><g><title>explicit_predicates_of (119,021 samples, 0.17%)</title><rect x="64.0355%" y="117" width="0.1667%" height="15" fill="rgb(207,46,11)"/><text x="64.2855%" y="127.50"></text></g><g><title>predicates_of (426,313 samples, 0.60%)</title><rect x="63.9136%" y="149" width="0.5970%" height="15" fill="rgb(241,35,35)"/><text x="64.1636%" y="159.50"></text></g><g><title>predicates_defined_on (392,823 samples, 0.55%)</title><rect x="63.9605%" y="133" width="0.5501%" height="15" fill="rgb(243,32,47)"/><text x="64.2105%" y="143.50"></text></g><g><title>inferred_outlives_of (220,262 samples, 0.31%)</title><rect x="64.2022%" y="117" width="0.3085%" height="15" fill="rgb(247,202,23)"/><text x="64.4522%" y="127.50"></text></g><g><title>inferred_outlives_crate (200,202 samples, 0.28%)</title><rect x="64.2303%" y="101" width="0.2804%" height="15" fill="rgb(219,102,11)"/><text x="64.4803%" y="111.50"></text></g><g><title>type_collecting (1,975,352 samples, 2.77%)</title><rect x="61.9989%" y="181" width="2.7663%" height="15" fill="rgb(243,110,44)"/><text x="62.2489%" y="191.50">ty..</text></g><g><title>collect_mod_item_types (1,964,202 samples, 2.75%)</title><rect x="62.0145%" y="165" width="2.7507%" height="15" fill="rgb(222,74,54)"/><text x="62.2645%" y="175.50">co..</text></g><g><title>type_of (147,123 samples, 0.21%)</title><rect x="64.5592%" y="149" width="0.2060%" height="15" fill="rgb(216,99,12)"/><text x="64.8092%" y="159.50"></text></g><g><title>evaluate_obligation (259,495 samples, 0.36%)</title><rect x="66.0170%" y="149" width="0.3634%" height="15" fill="rgb(226,22,26)"/><text x="66.2670%" y="159.50"></text></g><g><title>implied_outlives_bounds (77,340 samples, 0.11%)</title><rect x="66.4249%" y="149" width="0.1083%" height="15" fill="rgb(217,163,10)"/><text x="66.6749%" y="159.50"></text></g><g><title>param_env (104,360 samples, 0.15%)</title><rect x="66.5332%" y="149" width="0.1461%" height="15" fill="rgb(213,25,53)"/><text x="66.7832%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,331,454 samples, 1.86%)</title><rect x="64.9223%" y="165" width="1.8646%" height="15" fill="rgb(252,105,26)"/><text x="65.1723%" y="175.50">c..</text></g><g><title>evaluate_obligation (459,566 samples, 0.64%)</title><rect x="68.3043%" y="149" width="0.6436%" height="15" fill="rgb(220,39,43)"/><text x="68.5543%" y="159.50"></text></g><g><title>trait_impls_of (95,172 samples, 0.13%)</title><rect x="68.8146%" y="133" width="0.1333%" height="15" fill="rgb(229,68,48)"/><text x="69.0646%" y="143.50"></text></g><g><title>implied_outlives_bounds (179,273 samples, 0.25%)</title><rect x="68.9654%" y="149" width="0.2511%" height="15" fill="rgb(252,8,32)"/><text x="69.2154%" y="159.50"></text></g><g><title>param_env (254,273 samples, 0.36%)</title><rect x="69.2165%" y="149" width="0.3561%" height="15" fill="rgb(223,20,43)"/><text x="69.4665%" y="159.50"></text></g><g><title>predicates_of (78,612 samples, 0.11%)</title><rect x="69.5726%" y="149" width="0.1101%" height="15" fill="rgb(229,81,49)"/><text x="69.8226%" y="159.50"></text></g><g><title>region_scope_tree (134,852 samples, 0.19%)</title><rect x="69.6827%" y="149" width="0.1888%" height="15" fill="rgb(236,28,36)"/><text x="69.9327%" y="159.50"></text></g><g><title>check_item_well_formed (2,270,755 samples, 3.18%)</title><rect x="66.7868%" y="165" width="3.1800%" height="15" fill="rgb(249,185,26)"/><text x="67.0368%" y="175.50">che..</text></g><g><title>evaluate_obligation (184,601 samples, 0.26%)</title><rect x="70.3959%" y="149" width="0.2585%" height="15" fill="rgb(249,174,33)"/><text x="70.6459%" y="159.50"></text></g><g><title>analysis (50,045,905 samples, 70.08%)</title><rect x="0.7069%" y="213" width="70.0848%" height="15" fill="rgb(233,201,37)"/><text x="0.9569%" y="223.50">analysis</text></g><g><title>type_check_crate (30,125,334 samples, 42.19%)</title><rect x="28.6039%" y="197" width="42.1878%" height="15" fill="rgb(221,78,26)"/><text x="28.8539%" y="207.50">type_check_crate</text></g><g><title>wf_checking (4,301,237 samples, 6.02%)</title><rect x="64.7682%" y="181" width="6.0235%" height="15" fill="rgb(250,127,30)"/><text x="65.0182%" y="191.50">wf_check..</text></g><g><title>check_trait_item_well_formed (589,017 samples, 0.82%)</title><rect x="69.9668%" y="165" width="0.8249%" height="15" fill="rgb(230,49,44)"/><text x="70.2168%" y="175.50"></text></g><g><title>codegen_crate (647,198 samples, 0.91%)</title><rect x="70.8003%" y="213" width="0.9063%" height="15" fill="rgb(229,67,23)"/><text x="71.0503%" y="223.50"></text></g><g><title>AST_validation (102,411 samples, 0.14%)</title><rect x="71.8905%" y="197" width="0.1434%" height="15" fill="rgb(249,83,47)"/><text x="72.1405%" y="207.50"></text></g><g><title>macro_expand_crate (9,982,881 samples, 13.98%)</title><rect x="72.1631%" y="197" width="13.9801%" height="15" fill="rgb(215,43,3)"/><text x="72.4131%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (9,962,330 samples, 13.95%)</title><rect x="72.1919%" y="181" width="13.9513%" height="15" fill="rgb(238,154,13)"/><text x="72.4419%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (1,349,565 samples, 1.89%)</title><rect x="84.2533%" y="165" width="1.8899%" height="15" fill="rgb(219,56,2)"/><text x="84.5033%" y="175.50">m..</text></g><g><title>metadata_register_crate (488,184 samples, 0.68%)</title><rect x="85.4596%" y="149" width="0.6837%" height="15" fill="rgb(233,0,4)"/><text x="85.7096%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (88,691 samples, 0.12%)</title><rect x="86.1502%" y="197" width="0.1242%" height="15" fill="rgb(235,30,7)"/><text x="86.4002%" y="207.50"></text></g><g><title>finalize_imports (212,642 samples, 0.30%)</title><rect x="86.2869%" y="181" width="0.2978%" height="15" fill="rgb(250,79,13)"/><text x="86.5369%" y="191.50"></text></g><g><title>late_resolve_crate (634,317 samples, 0.89%)</title><rect x="86.5974%" y="181" width="0.8883%" height="15" fill="rgb(211,146,34)"/><text x="86.8474%" y="191.50"></text></g><g><title>configure_and_expand (11,333,436 samples, 15.87%)</title><rect x="71.7067%" y="213" width="15.8714%" height="15" fill="rgb(228,22,38)"/><text x="71.9567%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (930,930 samples, 1.30%)</title><rect x="86.2744%" y="197" width="1.3037%" height="15" fill="rgb(235,168,5)"/><text x="86.5244%" y="207.50"></text></g><g><title>drop_ast (90,541 samples, 0.13%)</title><rect x="87.5781%" y="213" width="0.1268%" height="15" fill="rgb(221,155,16)"/><text x="87.8281%" y="223.50"></text></g><g><title>early_lint_checks (202,522 samples, 0.28%)</title><rect x="87.7394%" y="213" width="0.2836%" height="15" fill="rgb(215,215,53)"/><text x="87.9894%" y="223.50"></text></g><g><title>free_global_ctxt (4,014,314 samples, 5.62%)</title><rect x="88.0230%" y="213" width="5.6217%" height="15" fill="rgb(223,4,10)"/><text x="88.2730%" y="223.50">free_gl..</text></g><g><title>crate_hash (142,801 samples, 0.20%)</title><rect x="94.3941%" y="197" width="0.2000%" height="15" fill="rgb(234,103,6)"/><text x="94.6441%" y="207.50"></text></g><g><title>generate_crate_metadata (823,319 samples, 1.15%)</title><rect x="93.6447%" y="213" width="1.1530%" height="15" fill="rgb(227,97,0)"/><text x="93.8947%" y="223.50"></text></g><g><title>hir_lowering (1,198,374 samples, 1.68%)</title><rect x="94.7976%" y="213" width="1.6782%" height="15" fill="rgb(234,150,53)"/><text x="95.0476%" y="223.50"></text></g><g><title>link (88,711 samples, 0.12%)</title><rect x="96.4759%" y="213" width="0.1242%" height="15" fill="rgb(228,201,54)"/><text x="96.7259%" y="223.50"></text></g><g><title>parse_crate (739,278 samples, 1.04%)</title><rect x="96.6001%" y="213" width="1.0353%" height="15" fill="rgb(222,22,37)"/><text x="96.8501%" y="223.50"></text></g><g><title>prepare_outputs (281,053 samples, 0.39%)</title><rect x="97.6437%" y="213" width="0.3936%" height="15" fill="rgb(237,53,32)"/><text x="97.8937%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (797,928 samples, 1.12%)</title><rect x="98.0372%" y="213" width="1.1174%" height="15" fill="rgb(233,25,53)"/><text x="98.2872%" y="223.50"></text></g><g><title>setup_global_ctxt (137,191 samples, 0.19%)</title><rect x="99.1798%" y="213" width="0.1921%" height="15" fill="rgb(210,40,34)"/><text x="99.4298%" y="223.50"></text></g><g><title>all (71,407,692 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (71,407,692 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,28,35)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (448,475 samples, 0.63%)</title><rect x="99.3720%" y="213" width="0.6280%" height="15" fill="rgb(210,56,17)"/><text x="99.6220%" y="223.50"></text></g></svg></svg>