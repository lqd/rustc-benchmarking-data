<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (154,612 samples, 0.21%)</title><rect x="9.5442%" y="181" width="0.2070%" height="15" fill="rgb(227,0,7)"/><text x="9.7942%" y="191.50"></text></g><g><title>param_env (157,633 samples, 0.21%)</title><rect x="10.9249%" y="149" width="0.2110%" height="15" fill="rgb(217,0,24)"/><text x="11.1749%" y="159.50"></text></g><g><title>item_attrs (169,694 samples, 0.23%)</title><rect x="11.4351%" y="117" width="0.2271%" height="15" fill="rgb(221,193,54)"/><text x="11.6851%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (164,274 samples, 0.22%)</title><rect x="11.4424%" y="101" width="0.2199%" height="15" fill="rgb(248,212,6)"/><text x="11.6924%" y="111.50"></text></g><g><title>codegen_fn_attrs (227,994 samples, 0.31%)</title><rect x="11.3719%" y="133" width="0.3052%" height="15" fill="rgb(208,68,35)"/><text x="11.6219%" y="143.50"></text></g><g><title>adt_drop_tys (78,042 samples, 0.10%)</title><rect x="13.4216%" y="101" width="0.1045%" height="15" fill="rgb(232,128,0)"/><text x="13.6716%" y="111.50"></text></g><g><title>needs_drop_raw (527,277 samples, 0.71%)</title><rect x="13.3688%" y="117" width="0.7058%" height="15" fill="rgb(207,160,47)"/><text x="13.6188%" y="127.50"></text></g><g><title>is_copy_raw (409,755 samples, 0.55%)</title><rect x="13.5261%" y="101" width="0.5485%" height="15" fill="rgb(228,23,34)"/><text x="13.7761%" y="111.50"></text></g><g><title>evaluate_obligation (353,534 samples, 0.47%)</title><rect x="13.6013%" y="85" width="0.4732%" height="15" fill="rgb(218,30,26)"/><text x="13.8513%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (101,632 samples, 0.14%)</title><rect x="14.2009%" y="101" width="0.1360%" height="15" fill="rgb(220,122,19)"/><text x="14.4509%" y="111.50"></text></g><g><title>impl_parent (504,687 samples, 0.68%)</title><rect x="15.1723%" y="85" width="0.6756%" height="15" fill="rgb(250,228,42)"/><text x="15.4223%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (332,704 samples, 0.45%)</title><rect x="15.4025%" y="69" width="0.4453%" height="15" fill="rgb(240,193,28)"/><text x="15.6525%" y="79.50"></text></g><g><title>specialization_graph_of (1,770,919 samples, 2.37%)</title><rect x="14.3776%" y="101" width="2.3705%" height="15" fill="rgb(216,20,37)"/><text x="14.6276%" y="111.50">sp..</text></g><g><title>impl_trait_ref (672,547 samples, 0.90%)</title><rect x="15.8479%" y="85" width="0.9002%" height="15" fill="rgb(206,188,39)"/><text x="16.0979%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (605,816 samples, 0.81%)</title><rect x="15.9372%" y="69" width="0.8109%" height="15" fill="rgb(217,207,13)"/><text x="16.1872%" y="79.50"></text></g><g><title>resolve_instance (2,045,183 samples, 2.74%)</title><rect x="14.0745%" y="117" width="2.7376%" height="15" fill="rgb(231,73,38)"/><text x="14.3245%" y="127.50">re..</text></g><g><title>thir_body (458,415 samples, 0.61%)</title><rect x="16.8269%" y="117" width="0.6136%" height="15" fill="rgb(225,20,46)"/><text x="17.0769%" y="127.50"></text></g><g><title>mir_const (5,231,234 samples, 7.00%)</title><rect x="10.4516%" y="165" width="7.0024%" height="15" fill="rgb(210,31,41)"/><text x="10.7016%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (4,719,959 samples, 6.32%)</title><rect x="11.1359%" y="149" width="6.3180%" height="15" fill="rgb(221,200,47)"/><text x="11.3859%" y="159.50">unsafety..</text></g><g><title>mir_built (4,315,714 samples, 5.78%)</title><rect x="11.6770%" y="133" width="5.7769%" height="15" fill="rgb(226,26,5)"/><text x="11.9270%" y="143.50">mir_bui..</text></g><g><title>thir_body (211,442 samples, 0.28%)</title><rect x="18.0234%" y="101" width="0.2830%" height="15" fill="rgb(249,33,26)"/><text x="18.2734%" y="111.50"></text></g><g><title>mir_const_qualif (639,489 samples, 0.86%)</title><rect x="17.4539%" y="165" width="0.8560%" height="15" fill="rgb(235,183,28)"/><text x="17.7039%" y="175.50"></text></g><g><title>mir_const (570,506 samples, 0.76%)</title><rect x="17.5463%" y="149" width="0.7637%" height="15" fill="rgb(221,5,38)"/><text x="17.7963%" y="159.50"></text></g><g><title>unsafety_check_result (475,916 samples, 0.64%)</title><rect x="17.6729%" y="133" width="0.6370%" height="15" fill="rgb(247,18,42)"/><text x="17.9229%" y="143.50"></text></g><g><title>mir_built (426,995 samples, 0.57%)</title><rect x="17.7384%" y="117" width="0.5716%" height="15" fill="rgb(241,131,45)"/><text x="17.9884%" y="127.50"></text></g><g><title>mir_promoted (6,357,268 samples, 8.51%)</title><rect x="9.8007%" y="181" width="8.5096%" height="15" fill="rgb(249,31,29)"/><text x="10.0507%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (80,761 samples, 0.11%)</title><rect x="18.3103%" y="181" width="0.1081%" height="15" fill="rgb(225,111,53)"/><text x="18.5603%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (256,953 samples, 0.34%)</title><rect x="18.4184%" y="181" width="0.3439%" height="15" fill="rgb(238,160,17)"/><text x="18.6684%" y="191.50"></text></g><g><title>normalize_projection_ty (187,401 samples, 0.25%)</title><rect x="18.5115%" y="165" width="0.2508%" height="15" fill="rgb(214,148,48)"/><text x="18.7615%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,109,423 samples, 1.49%)</title><rect x="18.8257%" y="181" width="1.4850%" height="15" fill="rgb(232,36,49)"/><text x="19.0757%" y="191.50"></text></g><g><title>evaluate_obligation (82,952 samples, 0.11%)</title><rect x="20.1997%" y="165" width="0.1110%" height="15" fill="rgb(209,103,24)"/><text x="20.4497%" y="175.50"></text></g><g><title>MIR_borrow_checking (14,184,627 samples, 18.99%)</title><rect x="1.3285%" y="213" width="18.9871%" height="15" fill="rgb(229,88,8)"/><text x="1.5785%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,136,247 samples, 18.92%)</title><rect x="1.3932%" y="197" width="18.9223%" height="15" fill="rgb(213,181,19)"/><text x="1.6432%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (197,773 samples, 0.26%)</title><rect x="20.3155%" y="213" width="0.2647%" height="15" fill="rgb(254,191,54)"/><text x="20.5655%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (169,382 samples, 0.23%)</title><rect x="20.3535%" y="197" width="0.2267%" height="15" fill="rgb(241,83,37)"/><text x="20.6035%" y="207.50"></text></g><g><title>hir_module_items (182,261 samples, 0.24%)</title><rect x="20.5803%" y="213" width="0.2440%" height="15" fill="rgb(233,36,39)"/><text x="20.8303%" y="223.50"></text></g><g><title>codegen_fn_attrs (161,602 samples, 0.22%)</title><rect x="21.1260%" y="181" width="0.2163%" height="15" fill="rgb(226,3,54)"/><text x="21.3760%" y="191.50"></text></g><g><title>check_mod_attrs (348,605 samples, 0.47%)</title><rect x="20.8758%" y="197" width="0.4666%" height="15" fill="rgb(245,192,40)"/><text x="21.1258%" y="207.50"></text></g><g><title>check_mod_const_bodies (77,870 samples, 0.10%)</title><rect x="21.3425%" y="197" width="0.1042%" height="15" fill="rgb(238,167,29)"/><text x="21.5925%" y="207.50"></text></g><g><title>lookup_deprecation_entry (103,221 samples, 0.14%)</title><rect x="21.7253%" y="181" width="0.1382%" height="15" fill="rgb(232,182,51)"/><text x="21.9753%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (320,824 samples, 0.43%)</title><rect x="21.5259%" y="197" width="0.4294%" height="15" fill="rgb(231,60,39)"/><text x="21.7759%" y="207.50"></text></g><g><title>misc_checking_1 (894,790 samples, 1.20%)</title><rect x="20.8249%" y="213" width="1.1977%" height="15" fill="rgb(208,69,12)"/><text x="21.0749%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (240,693 samples, 0.32%)</title><rect x="22.0245%" y="197" width="0.3222%" height="15" fill="rgb(235,93,37)"/><text x="22.2745%" y="207.50"></text></g><g><title>check_mod_liveness (187,281 samples, 0.25%)</title><rect x="22.0960%" y="181" width="0.2507%" height="15" fill="rgb(213,116,39)"/><text x="22.3460%" y="191.50"></text></g><g><title>misc_checking_2 (572,246 samples, 0.77%)</title><rect x="22.0227%" y="213" width="0.7660%" height="15" fill="rgb(222,207,29)"/><text x="22.2727%" y="223.50"></text></g><g><title>match_checking (330,153 samples, 0.44%)</title><rect x="22.3467%" y="197" width="0.4419%" height="15" fill="rgb(206,96,30)"/><text x="22.5967%" y="207.50"></text></g><g><title>check_match (316,743 samples, 0.42%)</title><rect x="22.3647%" y="181" width="0.4240%" height="15" fill="rgb(218,138,4)"/><text x="22.6147%" y="191.50"></text></g><g><title>death_checking (147,972 samples, 0.20%)</title><rect x="22.8738%" y="197" width="0.1981%" height="15" fill="rgb(250,191,14)"/><text x="23.1238%" y="207.50"></text></g><g><title>eval_to_const_value_raw (608,936 samples, 0.82%)</title><rect x="23.8090%" y="101" width="0.8151%" height="15" fill="rgb(239,60,40)"/><text x="24.0590%" y="111.50"></text></g><g><title>eval_to_const_value_raw (605,916 samples, 0.81%)</title><rect x="23.8130%" y="85" width="0.8111%" height="15" fill="rgb(206,27,48)"/><text x="24.0630%" y="95.50"></text></g><g><title>eval_to_allocation_raw (598,116 samples, 0.80%)</title><rect x="23.8235%" y="69" width="0.8006%" height="15" fill="rgb(225,35,8)"/><text x="24.0735%" y="79.50"></text></g><g><title>promoted_mir (144,040 samples, 0.19%)</title><rect x="24.4313%" y="53" width="0.1928%" height="15" fill="rgb(250,213,24)"/><text x="24.6813%" y="63.50"></text></g><g><title>eval_to_const_value_raw (993,322 samples, 1.33%)</title><rect x="23.3062%" y="165" width="1.3296%" height="15" fill="rgb(247,123,22)"/><text x="23.5562%" y="175.50"></text></g><g><title>eval_to_const_value_raw (987,162 samples, 1.32%)</title><rect x="23.3145%" y="149" width="1.3214%" height="15" fill="rgb(231,138,38)"/><text x="23.5645%" y="159.50"></text></g><g><title>eval_to_allocation_raw (977,902 samples, 1.31%)</title><rect x="23.3269%" y="133" width="1.3090%" height="15" fill="rgb(231,145,46)"/><text x="23.5769%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (631,057 samples, 0.84%)</title><rect x="23.7912%" y="117" width="0.8447%" height="15" fill="rgb(251,118,11)"/><text x="24.0412%" y="127.50"></text></g><g><title>param_env (183,682 samples, 0.25%)</title><rect x="24.6359%" y="165" width="0.2459%" height="15" fill="rgb(217,147,25)"/><text x="24.8859%" y="175.50"></text></g><g><title>predicates_of (85,830 samples, 0.11%)</title><rect x="24.7669%" y="149" width="0.1149%" height="15" fill="rgb(247,81,37)"/><text x="25.0169%" y="159.50"></text></g><g><title>crate_lints (1,356,375 samples, 1.82%)</title><rect x="23.0739%" y="181" width="1.8156%" height="15" fill="rgb(209,12,38)"/><text x="23.3239%" y="191.50">c..</text></g><g><title>lint_checking (1,579,037 samples, 2.11%)</title><rect x="23.0719%" y="197" width="2.1136%" height="15" fill="rgb(227,1,9)"/><text x="23.3219%" y="207.50">l..</text></g><g><title>module_lints (221,142 samples, 0.30%)</title><rect x="24.8895%" y="181" width="0.2960%" height="15" fill="rgb(248,47,43)"/><text x="25.1395%" y="191.50"></text></g><g><title>lint_mod (216,522 samples, 0.29%)</title><rect x="24.8957%" y="165" width="0.2898%" height="15" fill="rgb(221,10,30)"/><text x="25.1457%" y="175.50"></text></g><g><title>privacy_checking_modules (275,374 samples, 0.37%)</title><rect x="25.2711%" y="197" width="0.3686%" height="15" fill="rgb(210,229,1)"/><text x="25.5211%" y="207.50"></text></g><g><title>check_mod_privacy (271,583 samples, 0.36%)</title><rect x="25.2762%" y="181" width="0.3635%" height="15" fill="rgb(222,148,37)"/><text x="25.5262%" y="191.50"></text></g><g><title>misc_checking_3 (2,145,694 samples, 2.87%)</title><rect x="22.7886%" y="213" width="2.8722%" height="15" fill="rgb(234,67,33)"/><text x="23.0386%" y="223.50">mi..</text></g><g><title>associated_item (222,001 samples, 0.30%)</title><rect x="35.7015%" y="133" width="0.2972%" height="15" fill="rgb(247,98,35)"/><text x="35.9515%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (167,791 samples, 0.22%)</title><rect x="35.7740%" y="117" width="0.2246%" height="15" fill="rgb(247,138,52)"/><text x="36.0240%" y="127.50"></text></g><g><title>associated_items (322,664 samples, 0.43%)</title><rect x="35.5973%" y="149" width="0.4319%" height="15" fill="rgb(213,79,30)"/><text x="35.8473%" y="159.50"></text></g><g><title>impl_parent (95,180 samples, 0.13%)</title><rect x="36.3041%" y="53" width="0.1274%" height="15" fill="rgb(246,177,23)"/><text x="36.5541%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (76,410 samples, 0.10%)</title><rect x="36.3293%" y="37" width="0.1023%" height="15" fill="rgb(230,62,27)"/><text x="36.5793%" y="47.50"></text></g><g><title>impl_trait_ref (319,614 samples, 0.43%)</title><rect x="36.4315%" y="53" width="0.4278%" height="15" fill="rgb(216,154,8)"/><text x="36.6815%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (299,284 samples, 0.40%)</title><rect x="36.4587%" y="37" width="0.4006%" height="15" fill="rgb(244,35,45)"/><text x="36.7087%" y="47.50"></text></g><g><title>coherent_trait (535,735 samples, 0.72%)</title><rect x="36.1832%" y="85" width="0.7171%" height="15" fill="rgb(251,115,12)"/><text x="36.4332%" y="95.50"></text></g><g><title>specialization_graph_of (532,505 samples, 0.71%)</title><rect x="36.1875%" y="69" width="0.7128%" height="15" fill="rgb(240,54,50)"/><text x="36.4375%" y="79.50"></text></g><g><title>adt_destructor (544,835 samples, 0.73%)</title><rect x="36.1716%" y="117" width="0.7293%" height="15" fill="rgb(233,84,52)"/><text x="36.4216%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (542,735 samples, 0.73%)</title><rect x="36.1744%" y="101" width="0.7265%" height="15" fill="rgb(207,117,47)"/><text x="36.4244%" y="111.50"></text></g><g><title>adt_dtorck_constraint (103,031 samples, 0.14%)</title><rect x="36.9116%" y="101" width="0.1379%" height="15" fill="rgb(249,43,39)"/><text x="37.1616%" y="111.50"></text></g><g><title>adt_dtorck_constraint (115,391 samples, 0.15%)</title><rect x="36.9009%" y="117" width="0.1545%" height="15" fill="rgb(209,38,44)"/><text x="37.1509%" y="127.50"></text></g><g><title>dropck_outlives (745,168 samples, 1.00%)</title><rect x="36.0719%" y="149" width="0.9975%" height="15" fill="rgb(236,212,23)"/><text x="36.3219%" y="159.50"></text></g><g><title>adt_dtorck_constraint (695,878 samples, 0.93%)</title><rect x="36.1379%" y="133" width="0.9315%" height="15" fill="rgb(242,79,21)"/><text x="36.3879%" y="143.50"></text></g><g><title>generics_of (517,184 samples, 0.69%)</title><rect x="38.5618%" y="133" width="0.6923%" height="15" fill="rgb(211,96,35)"/><text x="38.8118%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (450,673 samples, 0.60%)</title><rect x="38.6508%" y="117" width="0.6033%" height="15" fill="rgb(253,215,40)"/><text x="38.9008%" y="127.50"></text></g><g><title>impl_trait_ref (711,243 samples, 0.95%)</title><rect x="39.3108%" y="133" width="0.9520%" height="15" fill="rgb(211,81,21)"/><text x="39.5608%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (644,812 samples, 0.86%)</title><rect x="39.3997%" y="117" width="0.8631%" height="15" fill="rgb(208,190,38)"/><text x="39.6497%" y="127.50"></text></g><g><title>predicates_of (128,041 samples, 0.17%)</title><rect x="40.2847%" y="133" width="0.1714%" height="15" fill="rgb(235,213,38)"/><text x="40.5347%" y="143.50"></text></g><g><title>predicates_defined_on (83,551 samples, 0.11%)</title><rect x="40.3443%" y="117" width="0.1118%" height="15" fill="rgb(237,122,38)"/><text x="40.5943%" y="127.50"></text></g><g><title>specializes (252,452 samples, 0.34%)</title><rect x="40.4561%" y="133" width="0.3379%" height="15" fill="rgb(244,218,35)"/><text x="40.7061%" y="143.50"></text></g><g><title>param_env (178,202 samples, 0.24%)</title><rect x="40.5555%" y="117" width="0.2385%" height="15" fill="rgb(240,68,47)"/><text x="40.8055%" y="127.50"></text></g><g><title>def_span (105,531 samples, 0.14%)</title><rect x="40.6528%" y="101" width="0.1413%" height="15" fill="rgb(210,16,53)"/><text x="40.9028%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (100,071 samples, 0.13%)</title><rect x="40.6601%" y="85" width="0.1340%" height="15" fill="rgb(235,124,12)"/><text x="40.9101%" y="95.50"></text></g><g><title>trait_impls_of (329,034 samples, 0.44%)</title><rect x="40.8078%" y="133" width="0.4404%" height="15" fill="rgb(224,169,11)"/><text x="41.0578%" y="143.50"></text></g><g><title>implementations_of_trait (136,431 samples, 0.18%)</title><rect x="41.0657%" y="117" width="0.1826%" height="15" fill="rgb(250,166,2)"/><text x="41.3157%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (88,031 samples, 0.12%)</title><rect x="41.1304%" y="101" width="0.1178%" height="15" fill="rgb(242,216,29)"/><text x="41.3804%" y="111.50"></text></g><g><title>evaluate_obligation (3,131,626 samples, 4.19%)</title><rect x="37.0694%" y="149" width="4.1919%" height="15" fill="rgb(230,116,27)"/><text x="37.3194%" y="159.50">evalu..</text></g><g><title>fn_sig (86,752 samples, 0.12%)</title><rect x="41.2834%" y="149" width="0.1161%" height="15" fill="rgb(228,99,48)"/><text x="41.5334%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (79,252 samples, 0.11%)</title><rect x="41.2934%" y="133" width="0.1061%" height="15" fill="rgb(253,11,6)"/><text x="41.5434%" y="143.50"></text></g><g><title>generics_of (657,831 samples, 0.88%)</title><rect x="41.3995%" y="149" width="0.8806%" height="15" fill="rgb(247,143,39)"/><text x="41.6495%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (512,927 samples, 0.69%)</title><rect x="41.5935%" y="133" width="0.6866%" height="15" fill="rgb(236,97,10)"/><text x="41.8435%" y="143.50"></text></g><g><title>impl_item_implementor_ids (84,191 samples, 0.11%)</title><rect x="42.2801%" y="149" width="0.1127%" height="15" fill="rgb(233,208,19)"/><text x="42.5301%" y="159.50"></text></g><g><title>associated_items (80,001 samples, 0.11%)</title><rect x="42.2857%" y="133" width="0.1071%" height="15" fill="rgb(216,164,2)"/><text x="42.5357%" y="143.50"></text></g><g><title>impl_trait_ref (1,284,447 samples, 1.72%)</title><rect x="42.4019%" y="149" width="1.7193%" height="15" fill="rgb(220,129,5)"/><text x="42.6519%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,156,206 samples, 1.55%)</title><rect x="42.5735%" y="133" width="1.5477%" height="15" fill="rgb(242,17,10)"/><text x="42.8235%" y="143.50"></text></g><g><title>method_autoderef_steps (155,382 samples, 0.21%)</title><rect x="44.2438%" y="149" width="0.2080%" height="15" fill="rgb(242,107,0)"/><text x="44.4938%" y="159.50"></text></g><g><title>predicates_of (215,672 samples, 0.29%)</title><rect x="44.4706%" y="149" width="0.2887%" height="15" fill="rgb(251,28,31)"/><text x="44.7206%" y="159.50"></text></g><g><title>predicates_defined_on (142,030 samples, 0.19%)</title><rect x="44.5692%" y="133" width="0.1901%" height="15" fill="rgb(233,223,10)"/><text x="44.8192%" y="143.50"></text></g><g><title>trait_impls_of (100,421 samples, 0.13%)</title><rect x="44.8809%" y="149" width="0.1344%" height="15" fill="rgb(215,21,27)"/><text x="45.1309%" y="159.50"></text></g><g><title>associated_item (316,984 samples, 0.42%)</title><rect x="51.6601%" y="117" width="0.4243%" height="15" fill="rgb(232,23,21)"/><text x="51.9101%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (247,924 samples, 0.33%)</title><rect x="51.7525%" y="101" width="0.3319%" height="15" fill="rgb(244,5,23)"/><text x="52.0025%" y="111.50"></text></g><g><title>associated_items (444,905 samples, 0.60%)</title><rect x="51.5154%" y="133" width="0.5955%" height="15" fill="rgb(226,81,46)"/><text x="51.7654%" y="143.50"></text></g><g><title>dropck_outlives (113,941 samples, 0.15%)</title><rect x="52.1474%" y="133" width="0.1525%" height="15" fill="rgb(247,70,30)"/><text x="52.3974%" y="143.50"></text></g><g><title>predicates_of (115,950 samples, 0.16%)</title><rect x="53.6500%" y="117" width="0.1552%" height="15" fill="rgb(212,68,19)"/><text x="53.9000%" y="127.50"></text></g><g><title>specializes (89,701 samples, 0.12%)</title><rect x="53.8052%" y="117" width="0.1201%" height="15" fill="rgb(240,187,13)"/><text x="54.0552%" y="127.50"></text></g><g><title>trait_impls_of (551,358 samples, 0.74%)</title><rect x="53.9339%" y="117" width="0.7380%" height="15" fill="rgb(223,113,26)"/><text x="54.1839%" y="127.50"></text></g><g><title>implementations_of_trait (149,414 samples, 0.20%)</title><rect x="54.4720%" y="101" width="0.2000%" height="15" fill="rgb(206,192,2)"/><text x="54.7220%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (109,403 samples, 0.15%)</title><rect x="54.5255%" y="85" width="0.1464%" height="15" fill="rgb(241,108,4)"/><text x="54.7755%" y="95.50"></text></g><g><title>evaluate_obligation (1,774,148 samples, 2.37%)</title><rect x="52.2999%" y="133" width="2.3748%" height="15" fill="rgb(247,173,49)"/><text x="52.5499%" y="143.50">ev..</text></g><g><title>impl_item_implementor_ids (126,081 samples, 0.17%)</title><rect x="54.8090%" y="133" width="0.1688%" height="15" fill="rgb(224,114,35)"/><text x="55.0590%" y="143.50"></text></g><g><title>associated_items (113,041 samples, 0.15%)</title><rect x="54.8265%" y="117" width="0.1513%" height="15" fill="rgb(245,159,27)"/><text x="55.0765%" y="127.50"></text></g><g><title>is_copy_raw (102,401 samples, 0.14%)</title><rect x="55.0617%" y="133" width="0.1371%" height="15" fill="rgb(245,172,44)"/><text x="55.3117%" y="143.50"></text></g><g><title>evaluate_obligation (83,241 samples, 0.11%)</title><rect x="55.0873%" y="117" width="0.1114%" height="15" fill="rgb(236,23,11)"/><text x="55.3373%" y="127.50"></text></g><g><title>lint_levels (87,031 samples, 0.12%)</title><rect x="55.2225%" y="133" width="0.1165%" height="15" fill="rgb(205,117,38)"/><text x="55.4725%" y="143.50"></text></g><g><title>method_autoderef_steps (110,901 samples, 0.15%)</title><rect x="55.3660%" y="133" width="0.1484%" height="15" fill="rgb(237,72,25)"/><text x="55.6160%" y="143.50"></text></g><g><title>predicates_of (127,942 samples, 0.17%)</title><rect x="55.5354%" y="133" width="0.1713%" height="15" fill="rgb(244,70,9)"/><text x="55.7854%" y="143.50"></text></g><g><title>predicates_defined_on (90,870 samples, 0.12%)</title><rect x="55.5850%" y="117" width="0.1216%" height="15" fill="rgb(217,125,39)"/><text x="55.8350%" y="127.50"></text></g><g><title>typeck (8,014,359 samples, 10.73%)</title><rect x="45.0682%" y="149" width="10.7277%" height="15" fill="rgb(235,36,10)"/><text x="45.3182%" y="159.50">typeck</text></g><g><title>item_bodies_checking (22,483,859 samples, 30.10%)</title><rect x="25.7494%" y="197" width="30.0961%" height="15" fill="rgb(251,123,47)"/><text x="25.9994%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,481,269 samples, 30.09%)</title><rect x="25.7529%" y="181" width="30.0927%" height="15" fill="rgb(221,13,13)"/><text x="26.0029%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (22,462,059 samples, 30.07%)</title><rect x="25.7786%" y="165" width="30.0670%" height="15" fill="rgb(238,131,9)"/><text x="26.0286%" y="175.50">typeck</text></g><g><title>item_types_checking (1,189,993 samples, 1.59%)</title><rect x="55.8455%" y="197" width="1.5929%" height="15" fill="rgb(211,50,8)"/><text x="56.0955%" y="207.50"></text></g><g><title>check_mod_item_types (1,184,593 samples, 1.59%)</title><rect x="55.8528%" y="181" width="1.5857%" height="15" fill="rgb(245,182,24)"/><text x="56.1028%" y="191.50"></text></g><g><title>typeck (1,171,933 samples, 1.57%)</title><rect x="55.8697%" y="165" width="1.5687%" height="15" fill="rgb(242,14,37)"/><text x="56.1197%" y="175.50"></text></g><g><title>fn_sig (228,553 samples, 0.31%)</title><rect x="57.6531%" y="165" width="0.3059%" height="15" fill="rgb(246,228,12)"/><text x="57.9031%" y="175.50"></text></g><g><title>named_region_map (107,821 samples, 0.14%)</title><rect x="58.0570%" y="149" width="0.1443%" height="15" fill="rgb(213,55,15)"/><text x="58.3070%" y="159.50"></text></g><g><title>resolve_lifetimes (94,951 samples, 0.13%)</title><rect x="58.0742%" y="133" width="0.1271%" height="15" fill="rgb(209,9,3)"/><text x="58.3242%" y="143.50"></text></g><g><title>generics_of (197,301 samples, 0.26%)</title><rect x="57.9590%" y="165" width="0.2641%" height="15" fill="rgb(230,59,30)"/><text x="58.2090%" y="175.50"></text></g><g><title>predicates_of (100,830 samples, 0.13%)</title><rect x="58.2231%" y="165" width="0.1350%" height="15" fill="rgb(209,121,21)"/><text x="58.4731%" y="175.50"></text></g><g><title>predicates_defined_on (83,260 samples, 0.11%)</title><rect x="58.2467%" y="149" width="0.1114%" height="15" fill="rgb(220,109,13)"/><text x="58.4967%" y="159.50"></text></g><g><title>type_collecting (811,129 samples, 1.09%)</title><rect x="57.4399%" y="197" width="1.0857%" height="15" fill="rgb(232,18,1)"/><text x="57.6899%" y="207.50"></text></g><g><title>collect_mod_item_types (789,178 samples, 1.06%)</title><rect x="57.4692%" y="181" width="1.0564%" height="15" fill="rgb(215,41,42)"/><text x="57.7192%" y="191.50"></text></g><g><title>type_of (125,133 samples, 0.17%)</title><rect x="58.3581%" y="165" width="0.1675%" height="15" fill="rgb(224,123,36)"/><text x="58.6081%" y="175.50"></text></g><g><title>adt_def (121,160 samples, 0.16%)</title><rect x="60.0002%" y="133" width="0.1622%" height="15" fill="rgb(240,125,3)"/><text x="60.2502%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (119,180 samples, 0.16%)</title><rect x="60.0029%" y="117" width="0.1595%" height="15" fill="rgb(205,98,50)"/><text x="60.2529%" y="127.50"></text></g><g><title>item_attrs (90,060 samples, 0.12%)</title><rect x="60.0418%" y="101" width="0.1206%" height="15" fill="rgb(205,185,37)"/><text x="60.2918%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,200 samples, 0.12%)</title><rect x="60.0443%" y="85" width="0.1181%" height="15" fill="rgb(238,207,15)"/><text x="60.2943%" y="95.50"></text></g><g><title>adt_def (76,421 samples, 0.10%)</title><rect x="60.1644%" y="117" width="0.1023%" height="15" fill="rgb(213,199,42)"/><text x="60.4144%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (75,951 samples, 0.10%)</title><rect x="60.1650%" y="101" width="0.1017%" height="15" fill="rgb(235,201,11)"/><text x="60.4150%" y="111.50"></text></g><g><title>adt_sized_constraint (78,971 samples, 0.11%)</title><rect x="60.1624%" y="133" width="0.1057%" height="15" fill="rgb(207,46,11)"/><text x="60.4124%" y="143.50"></text></g><g><title>adt_sized_constraint (227,473 samples, 0.30%)</title><rect x="59.9845%" y="149" width="0.3045%" height="15" fill="rgb(241,35,35)"/><text x="60.2345%" y="159.50"></text></g><g><title>evaluate_obligation (426,895 samples, 0.57%)</title><rect x="59.7201%" y="165" width="0.5714%" height="15" fill="rgb(243,32,47)"/><text x="59.9701%" y="175.50"></text></g><g><title>implied_outlives_bounds (186,121 samples, 0.25%)</title><rect x="60.2915%" y="165" width="0.2491%" height="15" fill="rgb(247,202,23)"/><text x="60.5415%" y="175.50"></text></g><g><title>param_env (264,173 samples, 0.35%)</title><rect x="60.5407%" y="165" width="0.3536%" height="15" fill="rgb(219,102,11)"/><text x="60.7907%" y="175.50"></text></g><g><title>region_scope_tree (274,365 samples, 0.37%)</title><rect x="60.9411%" y="165" width="0.3673%" height="15" fill="rgb(243,110,44)"/><text x="61.1911%" y="175.50"></text></g><g><title>analysis (45,119,601 samples, 60.40%)</title><rect x="0.9161%" y="229" width="60.3956%" height="15" fill="rgb(222,74,54)"/><text x="1.1661%" y="239.50">analysis</text></g><g><title>type_check_crate (26,633,626 samples, 35.65%)</title><rect x="25.6608%" y="213" width="35.6509%" height="15" fill="rgb(216,99,12)"/><text x="25.9108%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,078,753 samples, 2.78%)</title><rect x="58.5291%" y="197" width="2.7825%" height="15" fill="rgb(226,22,26)"/><text x="58.7791%" y="207.50">wf..</text></g><g><title>check_item_well_formed (1,990,403 samples, 2.66%)</title><rect x="58.6474%" y="181" width="2.6643%" height="15" fill="rgb(217,163,10)"/><text x="58.8974%" y="191.50">ch..</text></g><g><title>codegen_crate (565,666 samples, 0.76%)</title><rect x="61.3246%" y="229" width="0.7572%" height="15" fill="rgb(213,25,53)"/><text x="61.5746%" y="239.50"></text></g><g><title>AST_validation (125,722 samples, 0.17%)</title><rect x="62.3603%" y="213" width="0.1683%" height="15" fill="rgb(252,105,26)"/><text x="62.6103%" y="223.50"></text></g><g><title>crate_injection (76,921 samples, 0.10%)</title><rect x="62.6236%" y="213" width="0.1030%" height="15" fill="rgb(220,39,43)"/><text x="62.8736%" y="223.50"></text></g><g><title>metadata_load_macro (118,961 samples, 0.16%)</title><rect x="82.0842%" y="181" width="0.1592%" height="15" fill="rgb(229,68,48)"/><text x="82.3342%" y="191.50"></text></g><g><title>metadata_register_crate (2,566,868 samples, 3.44%)</title><rect x="82.2434%" y="181" width="3.4359%" height="15" fill="rgb(252,8,32)"/><text x="82.4934%" y="191.50">met..</text></g><g><title>metadata_register_crate (951,371 samples, 1.27%)</title><rect x="84.4059%" y="165" width="1.2735%" height="15" fill="rgb(223,20,43)"/><text x="84.6559%" y="175.50"></text></g><g><title>metadata_register_crate (75,681 samples, 0.10%)</title><rect x="85.5780%" y="149" width="0.1013%" height="15" fill="rgb(229,81,49)"/><text x="85.8280%" y="159.50"></text></g><g><title>macro_expand_crate (17,426,663 samples, 23.33%)</title><rect x="62.7266%" y="213" width="23.3267%" height="15" fill="rgb(236,28,36)"/><text x="62.9766%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (17,402,413 samples, 23.29%)</title><rect x="62.7590%" y="197" width="23.2943%" height="15" fill="rgb(249,185,26)"/><text x="63.0090%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (279,382 samples, 0.37%)</title><rect x="85.6794%" y="181" width="0.3740%" height="15" fill="rgb(249,174,33)"/><text x="85.9294%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (97,431 samples, 0.13%)</title><rect x="86.0596%" y="213" width="0.1304%" height="15" fill="rgb(233,201,37)"/><text x="86.3096%" y="223.50"></text></g><g><title>finalize_macro_resolutions (325,013 samples, 0.44%)</title><rect x="86.2831%" y="197" width="0.4351%" height="15" fill="rgb(221,78,26)"/><text x="86.5331%" y="207.50"></text></g><g><title>late_resolve_crate (1,725,299 samples, 2.31%)</title><rect x="86.7181%" y="197" width="2.3094%" height="15" fill="rgb(250,127,30)"/><text x="86.9681%" y="207.50">l..</text></g><g><title>configure_and_expand (20,257,274 samples, 27.12%)</title><rect x="62.0817%" y="229" width="27.1157%" height="15" fill="rgb(230,49,44)"/><text x="62.3317%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,246,765 samples, 3.01%)</title><rect x="86.1900%" y="213" width="3.0074%" height="15" fill="rgb(229,67,23)"/><text x="86.4400%" y="223.50">res..</text></g><g><title>drop_ast (130,872 samples, 0.18%)</title><rect x="89.1974%" y="229" width="0.1752%" height="15" fill="rgb(249,83,47)"/><text x="89.4474%" y="239.50"></text></g><g><title>early_lint_checks (435,905 samples, 0.58%)</title><rect x="89.3972%" y="229" width="0.5835%" height="15" fill="rgb(215,43,3)"/><text x="89.6472%" y="239.50"></text></g><g><title>free_global_ctxt (2,907,782 samples, 3.89%)</title><rect x="89.9807%" y="229" width="3.8923%" height="15" fill="rgb(238,154,13)"/><text x="90.2307%" y="239.50">free..</text></g><g><title>generate_crate_metadata (616,197 samples, 0.82%)</title><rect x="93.8730%" y="229" width="0.8248%" height="15" fill="rgb(219,56,2)"/><text x="94.1230%" y="239.50"></text></g><g><title>hir_lowering (2,207,524 samples, 2.95%)</title><rect x="94.6978%" y="229" width="2.9549%" height="15" fill="rgb(233,0,4)"/><text x="94.9478%" y="239.50">hir..</text></g><g><title>parse_crate (375,974 samples, 0.50%)</title><rect x="97.7147%" y="229" width="0.5033%" height="15" fill="rgb(235,30,7)"/><text x="97.9647%" y="239.50"></text></g><g><title>prepare_outputs (314,754 samples, 0.42%)</title><rect x="98.2275%" y="229" width="0.4213%" height="15" fill="rgb(250,79,13)"/><text x="98.4775%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (561,986 samples, 0.75%)</title><rect x="98.6488%" y="229" width="0.7523%" height="15" fill="rgb(211,146,34)"/><text x="98.8988%" y="239.50"></text></g><g><title>setup_global_ctxt (122,801 samples, 0.16%)</title><rect x="99.4162%" y="229" width="0.1644%" height="15" fill="rgb(228,22,38)"/><text x="99.6662%" y="239.50"></text></g><g><title>all (74,706,809 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (74,706,809 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (313,333 samples, 0.42%)</title><rect x="99.5806%" y="229" width="0.4194%" height="15" fill="rgb(215,215,53)"/><text x="99.8306%" y="239.50"></text></g></svg></svg>