<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (883,938 samples, 0.12%)</title><rect x="14.8406%" y="85" width="0.1211%" height="15" fill="rgb(227,0,7)"/><text x="15.0906%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (850,067 samples, 0.12%)</title><rect x="14.8452%" y="69" width="0.1165%" height="15" fill="rgb(217,0,24)"/><text x="15.0952%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,295,272 samples, 0.18%)</title><rect x="14.7921%" y="101" width="0.1775%" height="15" fill="rgb(221,193,54)"/><text x="15.0421%" y="111.50"></text></g><g><title>is_copy_raw (1,305,676 samples, 0.18%)</title><rect x="17.9328%" y="85" width="0.1789%" height="15" fill="rgb(248,212,6)"/><text x="18.1828%" y="95.50"></text></g><g><title>evaluate_obligation (840,561 samples, 0.12%)</title><rect x="17.9965%" y="69" width="0.1152%" height="15" fill="rgb(208,68,35)"/><text x="18.2465%" y="79.50"></text></g><g><title>is_copy_raw (8,902,705 samples, 1.22%)</title><rect x="18.3696%" y="69" width="1.2198%" height="15" fill="rgb(232,128,0)"/><text x="18.6196%" y="79.50"></text></g><g><title>evaluate_obligation (7,344,661 samples, 1.01%)</title><rect x="18.5831%" y="53" width="1.0063%" height="15" fill="rgb(207,160,47)"/><text x="18.8331%" y="63.50"></text></g><g><title>needs_drop_raw (10,901,600 samples, 1.49%)</title><rect x="18.1127%" y="85" width="1.4937%" height="15" fill="rgb(228,23,34)"/><text x="18.3627%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,885,664 samples, 0.40%)</title><rect x="19.8111%" y="69" width="0.3954%" height="15" fill="rgb(218,30,26)"/><text x="20.0611%" y="79.50"></text></g><g><title>specialization_graph_of (2,614,790 samples, 0.36%)</title><rect x="20.2346%" y="69" width="0.3583%" height="15" fill="rgb(220,122,19)"/><text x="20.4846%" y="79.50"></text></g><g><title>impl_trait_ref (910,134 samples, 0.12%)</title><rect x="20.4682%" y="53" width="0.1247%" height="15" fill="rgb(250,228,42)"/><text x="20.7182%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (745,130 samples, 0.10%)</title><rect x="20.4908%" y="37" width="0.1021%" height="15" fill="rgb(240,193,28)"/><text x="20.7408%" y="47.50"></text></g><g><title>resolve_instance (7,440,056 samples, 1.02%)</title><rect x="19.6115%" y="85" width="1.0194%" height="15" fill="rgb(216,20,37)"/><text x="19.8615%" y="95.50"></text></g><g><title>thir_body (7,686,420 samples, 1.05%)</title><rect x="20.6573%" y="85" width="1.0532%" height="15" fill="rgb(206,188,39)"/><text x="20.9073%" y="95.50"></text></g><g><title>mir_const (60,443,519 samples, 8.28%)</title><rect x="13.4528%" y="133" width="8.2818%" height="15" fill="rgb(217,207,13)"/><text x="13.7028%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (53,854,618 samples, 7.38%)</title><rect x="14.3556%" y="117" width="7.3790%" height="15" fill="rgb(231,73,38)"/><text x="14.6056%" y="127.50">unsafety_c..</text></g><g><title>mir_built (49,373,754 samples, 6.77%)</title><rect x="14.9696%" y="101" width="6.7651%" height="15" fill="rgb(225,20,46)"/><text x="15.2196%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (1,411,921 samples, 0.19%)</title><rect x="21.7347%" y="133" width="0.1935%" height="15" fill="rgb(210,31,41)"/><text x="21.9847%" y="143.50"></text></g><g><title>mir_promoted (67,687,911 samples, 9.27%)</title><rect x="12.6540%" y="149" width="9.2744%" height="15" fill="rgb(221,200,47)"/><text x="12.9040%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (5,557,383 samples, 0.76%)</title><rect x="21.9293%" y="149" width="0.7615%" height="15" fill="rgb(226,26,5)"/><text x="22.1793%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,143,565 samples, 0.43%)</title><rect x="22.6908%" y="149" width="0.4307%" height="15" fill="rgb(249,33,26)"/><text x="22.9408%" y="159.50"></text></g><g><title>normalize_projection_ty (2,100,170 samples, 0.29%)</title><rect x="22.8337%" y="133" width="0.2878%" height="15" fill="rgb(235,183,28)"/><text x="23.0837%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,322,208 samples, 0.18%)</title><rect x="23.1215%" y="149" width="0.1812%" height="15" fill="rgb(221,5,38)"/><text x="23.3715%" y="159.50"></text></g><g><title>normalize_projection_ty (889,374 samples, 0.12%)</title><rect x="23.1808%" y="133" width="0.1219%" height="15" fill="rgb(247,18,42)"/><text x="23.4308%" y="143.50"></text></g><g><title>type_op_prove_predicate (15,661,991 samples, 2.15%)</title><rect x="23.3263%" y="149" width="2.1460%" height="15" fill="rgb(241,131,45)"/><text x="23.5763%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (183,113,991 samples, 25.09%)</title><rect x="0.3856%" y="181" width="25.0898%" height="15" fill="rgb(249,31,29)"/><text x="0.6356%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (182,248,353 samples, 24.97%)</title><rect x="0.5043%" y="165" width="24.9712%" height="15" fill="rgb(225,111,53)"/><text x="0.7543%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (785,119 samples, 0.11%)</title><rect x="25.4755%" y="181" width="0.1076%" height="15" fill="rgb(238,160,17)"/><text x="25.7255%" y="191.50"></text></g><g><title>hir_module_items (1,143,152 samples, 0.16%)</title><rect x="25.5831%" y="181" width="0.1566%" height="15" fill="rgb(214,148,48)"/><text x="25.8331%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,057,415 samples, 0.14%)</title><rect x="25.9135%" y="149" width="0.1449%" height="15" fill="rgb(232,36,49)"/><text x="26.1635%" y="159.50"></text></g><g><title>check_mod_attrs (2,287,137 samples, 0.31%)</title><rect x="25.7450%" y="165" width="0.3134%" height="15" fill="rgb(209,103,24)"/><text x="25.9950%" y="175.50"></text></g><g><title>lookup_deprecation_entry (842,261 samples, 0.12%)</title><rect x="26.3420%" y="149" width="0.1154%" height="15" fill="rgb(229,88,8)"/><text x="26.5920%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,030,821 samples, 0.28%)</title><rect x="26.2058%" y="165" width="0.2783%" height="15" fill="rgb(213,181,19)"/><text x="26.4558%" y="175.50"></text></g><g><title>misc_checking_1 (5,642,983 samples, 0.77%)</title><rect x="25.7398%" y="181" width="0.7732%" height="15" fill="rgb(254,191,54)"/><text x="25.9898%" y="191.50"></text></g><g><title>check_mod_intrinsics (825,129 samples, 0.11%)</title><rect x="26.5156%" y="149" width="0.1131%" height="15" fill="rgb(241,83,37)"/><text x="26.7656%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (4,079,906 samples, 0.56%)</title><rect x="26.5133%" y="165" width="0.5590%" height="15" fill="rgb(233,36,39)"/><text x="26.7633%" y="175.50"></text></g><g><title>check_mod_liveness (3,237,717 samples, 0.44%)</title><rect x="26.6287%" y="149" width="0.4436%" height="15" fill="rgb(226,3,54)"/><text x="26.8787%" y="159.50"></text></g><g><title>type_uninhabited_from (803,061 samples, 0.11%)</title><rect x="26.9623%" y="133" width="0.1100%" height="15" fill="rgb(245,192,40)"/><text x="27.2123%" y="143.50"></text></g><g><title>misc_checking_2 (8,766,728 samples, 1.20%)</title><rect x="26.5130%" y="181" width="1.2012%" height="15" fill="rgb(238,167,29)"/><text x="26.7630%" y="191.50"></text></g><g><title>match_checking (4,684,582 samples, 0.64%)</title><rect x="27.0723%" y="165" width="0.6419%" height="15" fill="rgb(232,182,51)"/><text x="27.3223%" y="175.50"></text></g><g><title>check_match (4,450,359 samples, 0.61%)</title><rect x="27.1044%" y="149" width="0.6098%" height="15" fill="rgb(231,60,39)"/><text x="27.3544%" y="159.50"></text></g><g><title>check_private_in_public (1,216,664 samples, 0.17%)</title><rect x="27.7159%" y="165" width="0.1667%" height="15" fill="rgb(208,69,12)"/><text x="27.9659%" y="175.50"></text></g><g><title>death_checking (2,329,686 samples, 0.32%)</title><rect x="27.8826%" y="165" width="0.3192%" height="15" fill="rgb(235,93,37)"/><text x="28.1326%" y="175.50"></text></g><g><title>param_env (823,280 samples, 0.11%)</title><rect x="28.6056%" y="133" width="0.1128%" height="15" fill="rgb(213,116,39)"/><text x="28.8556%" y="143.50"></text></g><g><title>crate_lints (5,064,557 samples, 0.69%)</title><rect x="28.2021%" y="149" width="0.6939%" height="15" fill="rgb(222,207,29)"/><text x="28.4521%" y="159.50"></text></g><g><title>type_of (1,271,131 samples, 0.17%)</title><rect x="28.7219%" y="133" width="0.1742%" height="15" fill="rgb(206,96,30)"/><text x="28.9719%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,025,399 samples, 0.14%)</title><rect x="28.7556%" y="117" width="0.1405%" height="15" fill="rgb(218,138,4)"/><text x="29.0056%" y="127.50"></text></g><g><title>lint_checking (8,185,122 samples, 1.12%)</title><rect x="28.2018%" y="165" width="1.1215%" height="15" fill="rgb(250,191,14)"/><text x="28.4518%" y="175.50"></text></g><g><title>module_lints (3,118,115 samples, 0.43%)</title><rect x="28.8961%" y="149" width="0.4272%" height="15" fill="rgb(239,60,40)"/><text x="29.1461%" y="159.50"></text></g><g><title>lint_mod (3,104,254 samples, 0.43%)</title><rect x="28.8980%" y="133" width="0.4253%" height="15" fill="rgb(206,27,48)"/><text x="29.1480%" y="143.50"></text></g><g><title>privacy_access_levels (2,714,930 samples, 0.37%)</title><rect x="29.3233%" y="165" width="0.3720%" height="15" fill="rgb(225,35,8)"/><text x="29.5733%" y="175.50"></text></g><g><title>privacy_checking_modules (6,530,303 samples, 0.89%)</title><rect x="29.6953%" y="165" width="0.8948%" height="15" fill="rgb(250,213,24)"/><text x="29.9453%" y="175.50"></text></g><g><title>check_mod_privacy (6,520,093 samples, 0.89%)</title><rect x="29.6967%" y="149" width="0.8934%" height="15" fill="rgb(247,123,22)"/><text x="29.9467%" y="159.50"></text></g><g><title>misc_checking_3 (21,033,146 samples, 2.88%)</title><rect x="27.7142%" y="181" width="2.8819%" height="15" fill="rgb(231,138,38)"/><text x="27.9642%" y="191.50">mi..</text></g><g><title>impl_parent (3,119,443 samples, 0.43%)</title><rect x="31.8187%" y="117" width="0.4274%" height="15" fill="rgb(231,145,46)"/><text x="32.0687%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,672,729 samples, 0.23%)</title><rect x="32.0169%" y="101" width="0.2292%" height="15" fill="rgb(251,118,11)"/><text x="32.2669%" y="111.50"></text></g><g><title>impl_trait_ref (5,825,960 samples, 0.80%)</title><rect x="32.2464%" y="117" width="0.7983%" height="15" fill="rgb(217,147,25)"/><text x="32.4964%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,617,053 samples, 0.63%)</title><rect x="32.4121%" y="101" width="0.6326%" height="15" fill="rgb(247,81,37)"/><text x="32.6621%" y="111.50"></text></g><g><title>trait_impls_of (1,086,829 samples, 0.15%)</title><rect x="33.0561%" y="117" width="0.1489%" height="15" fill="rgb(209,12,38)"/><text x="33.3061%" y="127.50"></text></g><g><title>coherent_trait (18,624,179 samples, 2.55%)</title><rect x="30.6534%" y="149" width="2.5518%" height="15" fill="rgb(227,1,9)"/><text x="30.9034%" y="159.50">co..</text></g><g><title>specialization_graph_of (17,986,522 samples, 2.46%)</title><rect x="30.7408%" y="133" width="2.4645%" height="15" fill="rgb(248,47,43)"/><text x="30.9908%" y="143.50">sp..</text></g><g><title>coherence_checking (18,922,872 samples, 2.59%)</title><rect x="30.6477%" y="165" width="2.5928%" height="15" fill="rgb(221,10,30)"/><text x="30.8977%" y="175.50">co..</text></g><g><title>associated_item (1,908,930 samples, 0.26%)</title><rect x="54.7611%" y="101" width="0.2616%" height="15" fill="rgb(210,229,1)"/><text x="55.0111%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,514,552 samples, 0.21%)</title><rect x="54.8152%" y="85" width="0.2075%" height="15" fill="rgb(222,148,37)"/><text x="55.0652%" y="95.50"></text></g><g><title>associated_items (2,940,108 samples, 0.40%)</title><rect x="54.6323%" y="117" width="0.4028%" height="15" fill="rgb(234,67,33)"/><text x="54.8823%" y="127.50"></text></g><g><title>dropck_outlives (3,182,327 samples, 0.44%)</title><rect x="55.0607%" y="117" width="0.4360%" height="15" fill="rgb(247,98,35)"/><text x="55.3107%" y="127.50"></text></g><g><title>mir_borrowck (753,020 samples, 0.10%)</title><rect x="55.7109%" y="53" width="0.1032%" height="15" fill="rgb(247,138,52)"/><text x="55.9609%" y="63.50"></text></g><g><title>mir_for_ctfe (1,110,872 samples, 0.15%)</title><rect x="55.6628%" y="85" width="0.1522%" height="15" fill="rgb(213,79,30)"/><text x="55.9128%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,025,081 samples, 0.14%)</title><rect x="55.6746%" y="69" width="0.1405%" height="15" fill="rgb(246,177,23)"/><text x="55.9246%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,285,053 samples, 0.31%)</title><rect x="55.5036%" y="101" width="0.3131%" height="15" fill="rgb(230,62,27)"/><text x="55.7536%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,035,070 samples, 0.42%)</title><rect x="55.4970%" y="117" width="0.4159%" height="15" fill="rgb(216,154,8)"/><text x="55.7470%" y="127.50"></text></g><g><title>generics_of (1,093,588 samples, 0.15%)</title><rect x="57.8986%" y="101" width="0.1498%" height="15" fill="rgb(244,35,45)"/><text x="58.1486%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (780,055 samples, 0.11%)</title><rect x="57.9415%" y="85" width="0.1069%" height="15" fill="rgb(251,115,12)"/><text x="58.1915%" y="95.50"></text></g><g><title>impl_trait_ref (2,182,625 samples, 0.30%)</title><rect x="58.1021%" y="101" width="0.2991%" height="15" fill="rgb(240,54,50)"/><text x="58.3521%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,890,420 samples, 0.26%)</title><rect x="58.1421%" y="85" width="0.2590%" height="15" fill="rgb(233,84,52)"/><text x="58.3921%" y="95.50"></text></g><g><title>predicates_of (1,694,154 samples, 0.23%)</title><rect x="58.4129%" y="101" width="0.2321%" height="15" fill="rgb(207,117,47)"/><text x="58.6629%" y="111.50"></text></g><g><title>predicates_defined_on (997,555 samples, 0.14%)</title><rect x="58.5084%" y="85" width="0.1367%" height="15" fill="rgb(249,43,39)"/><text x="58.7584%" y="95.50"></text></g><g><title>specializes (3,721,508 samples, 0.51%)</title><rect x="58.6451%" y="101" width="0.5099%" height="15" fill="rgb(209,38,44)"/><text x="58.8951%" y="111.50"></text></g><g><title>param_env (1,820,849 samples, 0.25%)</title><rect x="58.9055%" y="85" width="0.2495%" height="15" fill="rgb(236,212,23)"/><text x="59.1555%" y="95.50"></text></g><g><title>def_span (783,320 samples, 0.11%)</title><rect x="59.0476%" y="69" width="0.1073%" height="15" fill="rgb(242,79,21)"/><text x="59.2976%" y="79.50"></text></g><g><title>evaluate_obligation (24,453,148 samples, 3.35%)</title><rect x="55.9129%" y="117" width="3.3505%" height="15" fill="rgb(211,96,35)"/><text x="56.1629%" y="127.50">eva..</text></g><g><title>impl_trait_ref (767,659 samples, 0.11%)</title><rect x="59.3979%" y="117" width="0.1052%" height="15" fill="rgb(253,215,40)"/><text x="59.6479%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (734,969 samples, 0.10%)</title><rect x="59.4023%" y="101" width="0.1007%" height="15" fill="rgb(211,81,21)"/><text x="59.6523%" y="111.50"></text></g><g><title>evaluate_obligation (1,363,154 samples, 0.19%)</title><rect x="60.0204%" y="101" width="0.1868%" height="15" fill="rgb(208,190,38)"/><text x="60.2704%" y="111.50"></text></g><g><title>method_autoderef_steps (4,338,535 samples, 0.59%)</title><rect x="59.6137%" y="117" width="0.5945%" height="15" fill="rgb(235,213,38)"/><text x="59.8637%" y="127.50"></text></g><g><title>predicates_of (846,552 samples, 0.12%)</title><rect x="60.3066%" y="117" width="0.1160%" height="15" fill="rgb(237,122,38)"/><text x="60.5566%" y="127.50"></text></g><g><title>dropck_outlives (803,870 samples, 0.11%)</title><rect x="64.4652%" y="101" width="0.1101%" height="15" fill="rgb(244,218,35)"/><text x="64.7152%" y="111.50"></text></g><g><title>evaluate_obligation (4,542,120 samples, 0.62%)</title><rect x="64.5753%" y="101" width="0.6224%" height="15" fill="rgb(240,68,47)"/><text x="64.8253%" y="111.50"></text></g><g><title>is_copy_raw (778,280 samples, 0.11%)</title><rect x="65.2568%" y="101" width="0.1066%" height="15" fill="rgb(210,16,53)"/><text x="65.5068%" y="111.50"></text></g><g><title>typeck (36,995,007 samples, 5.07%)</title><rect x="60.4828%" y="117" width="5.0690%" height="15" fill="rgb(235,124,12)"/><text x="60.7328%" y="127.50">typeck</text></g><g><title>item_bodies_checking (236,033,064 samples, 32.34%)</title><rect x="33.2773%" y="165" width="32.3407%" height="15" fill="rgb(224,169,11)"/><text x="33.5273%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (236,029,204 samples, 32.34%)</title><rect x="33.2778%" y="149" width="32.3402%" height="15" fill="rgb(250,166,2)"/><text x="33.5278%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (235,454,574 samples, 32.26%)</title><rect x="33.3565%" y="133" width="32.2614%" height="15" fill="rgb(242,216,29)"/><text x="33.6065%" y="143.50">typeck</text></g><g><title>evaluate_obligation (1,410,495 samples, 0.19%)</title><rect x="66.8582%" y="117" width="0.1933%" height="15" fill="rgb(230,116,27)"/><text x="67.1082%" y="127.50"></text></g><g><title>item_types_checking (10,570,378 samples, 1.45%)</title><rect x="65.6180%" y="165" width="1.4483%" height="15" fill="rgb(228,99,48)"/><text x="65.8680%" y="175.50"></text></g><g><title>check_mod_item_types (10,557,018 samples, 1.45%)</title><rect x="65.6198%" y="149" width="1.4465%" height="15" fill="rgb(253,11,6)"/><text x="65.8698%" y="159.50"></text></g><g><title>typeck (2,078,303 samples, 0.28%)</title><rect x="66.7815%" y="133" width="0.2848%" height="15" fill="rgb(247,143,39)"/><text x="67.0315%" y="143.50"></text></g><g><title>fn_sig (1,155,156 samples, 0.16%)</title><rect x="67.3225%" y="133" width="0.1583%" height="15" fill="rgb(236,97,10)"/><text x="67.5725%" y="143.50"></text></g><g><title>resolve_lifetimes (1,429,475 samples, 0.20%)</title><rect x="67.6026%" y="101" width="0.1959%" height="15" fill="rgb(233,208,19)"/><text x="67.8526%" y="111.50"></text></g><g><title>lint_levels (882,970 samples, 0.12%)</title><rect x="67.6775%" y="85" width="0.1210%" height="15" fill="rgb(216,164,2)"/><text x="67.9275%" y="95.50"></text></g><g><title>is_late_bound_map (1,489,716 samples, 0.20%)</title><rect x="67.5949%" y="117" width="0.2041%" height="15" fill="rgb(220,129,5)"/><text x="67.8449%" y="127.50"></text></g><g><title>named_region_map (1,055,152 samples, 0.14%)</title><rect x="67.7991%" y="117" width="0.1446%" height="15" fill="rgb(242,17,10)"/><text x="68.0491%" y="127.50"></text></g><g><title>resolve_lifetimes (927,112 samples, 0.13%)</title><rect x="67.8166%" y="101" width="0.1270%" height="15" fill="rgb(242,107,0)"/><text x="68.0666%" y="111.50"></text></g><g><title>generics_of (3,452,668 samples, 0.47%)</title><rect x="67.4807%" y="133" width="0.4731%" height="15" fill="rgb(251,28,31)"/><text x="67.7307%" y="143.50"></text></g><g><title>late_bound_vars_map (1,515,308 samples, 0.21%)</title><rect x="68.4702%" y="85" width="0.2076%" height="15" fill="rgb(233,223,10)"/><text x="68.7202%" y="95.50"></text></g><g><title>resolve_lifetimes (1,396,075 samples, 0.19%)</title><rect x="68.4865%" y="69" width="0.1913%" height="15" fill="rgb(215,21,27)"/><text x="68.7365%" y="79.50"></text></g><g><title>explicit_predicates_of (4,332,253 samples, 0.59%)</title><rect x="68.1282%" y="101" width="0.5936%" height="15" fill="rgb(232,23,21)"/><text x="68.3782%" y="111.50"></text></g><g><title>predicates_of (5,557,583 samples, 0.76%)</title><rect x="68.0186%" y="133" width="0.7615%" height="15" fill="rgb(244,5,23)"/><text x="68.2686%" y="143.50"></text></g><g><title>predicates_defined_on (5,249,572 samples, 0.72%)</title><rect x="68.0608%" y="117" width="0.7193%" height="15" fill="rgb(226,81,46)"/><text x="68.3108%" y="127.50"></text></g><g><title>type_collecting (13,521,522 samples, 1.85%)</title><rect x="67.0673%" y="165" width="1.8527%" height="15" fill="rgb(247,70,30)"/><text x="67.3173%" y="175.50">t..</text></g><g><title>collect_mod_item_types (13,493,942 samples, 1.85%)</title><rect x="67.0710%" y="149" width="1.8489%" height="15" fill="rgb(212,68,19)"/><text x="67.3210%" y="159.50">c..</text></g><g><title>type_of (887,697 samples, 0.12%)</title><rect x="68.7983%" y="133" width="0.1216%" height="15" fill="rgb(240,187,13)"/><text x="69.0483%" y="143.50"></text></g><g><title>evaluate_obligation (5,000,069 samples, 0.69%)</title><rect x="72.2251%" y="133" width="0.6851%" height="15" fill="rgb(223,113,26)"/><text x="72.4751%" y="143.50"></text></g><g><title>implied_outlives_bounds (2,666,566 samples, 0.37%)</title><rect x="72.9105%" y="133" width="0.3654%" height="15" fill="rgb(206,192,2)"/><text x="73.1605%" y="143.50"></text></g><g><title>param_env (2,721,725 samples, 0.37%)</title><rect x="73.3398%" y="133" width="0.3729%" height="15" fill="rgb(241,108,4)"/><text x="73.5898%" y="143.50"></text></g><g><title>region_scope_tree (2,328,828 samples, 0.32%)</title><rect x="73.7177%" y="133" width="0.3191%" height="15" fill="rgb(247,173,49)"/><text x="73.9677%" y="143.50"></text></g><g><title>check_impl_item_well_formed (35,580,838 samples, 4.88%)</title><rect x="69.1668%" y="149" width="4.8752%" height="15" fill="rgb(224,114,35)"/><text x="69.4168%" y="159.50">check_..</text></g><g><title>evaluate_obligation (2,427,565 samples, 0.33%)</title><rect x="79.9977%" y="133" width="0.3326%" height="15" fill="rgb(245,159,27)"/><text x="80.2477%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,299,643 samples, 0.18%)</title><rect x="80.3612%" y="133" width="0.1781%" height="15" fill="rgb(245,172,44)"/><text x="80.6112%" y="143.50"></text></g><g><title>param_env (2,782,722 samples, 0.38%)</title><rect x="80.5412%" y="133" width="0.3813%" height="15" fill="rgb(236,23,11)"/><text x="80.7912%" y="143.50"></text></g><g><title>check_item_well_formed (51,430,357 samples, 7.05%)</title><rect x="74.0420%" y="149" width="7.0469%" height="15" fill="rgb(205,117,38)"/><text x="74.2920%" y="159.50">check_ite..</text></g><g><title>evaluate_obligation (985,079 samples, 0.13%)</title><rect x="81.3006%" y="133" width="0.1350%" height="15" fill="rgb(237,72,25)"/><text x="81.5506%" y="143.50"></text></g><g><title>analysis (593,829,872 samples, 81.37%)</title><rect x="0.1700%" y="197" width="81.3652%" height="15" fill="rgb(244,70,9)"/><text x="0.4200%" y="207.50">analysis</text></g><g><title>type_check_crate (371,770,344 samples, 50.94%)</title><rect x="30.5961%" y="181" width="50.9391%" height="15" fill="rgb(217,125,39)"/><text x="30.8461%" y="191.50">type_check_crate</text></g><g><title>wf_checking (92,032,650 samples, 12.61%)</title><rect x="68.9251%" y="165" width="12.6101%" height="15" fill="rgb(235,36,10)"/><text x="69.1751%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,257,523 samples, 0.45%)</title><rect x="81.0888%" y="149" width="0.4463%" height="15" fill="rgb(251,123,47)"/><text x="81.3388%" y="159.50"></text></g><g><title>metadata_register_crate (2,691,480 samples, 0.37%)</title><rect x="90.7906%" y="149" width="0.3688%" height="15" fill="rgb(221,13,13)"/><text x="91.0406%" y="159.50"></text></g><g><title>metadata_register_crate (984,240 samples, 0.13%)</title><rect x="91.0245%" y="133" width="0.1349%" height="15" fill="rgb(238,131,9)"/><text x="91.2745%" y="143.50"></text></g><g><title>macro_expand_crate (70,302,967 samples, 9.63%)</title><rect x="81.7760%" y="181" width="9.6327%" height="15" fill="rgb(211,50,8)"/><text x="82.0260%" y="191.50">macro_expand_c..</text></g><g><title>expand_crate (70,287,927 samples, 9.63%)</title><rect x="81.7781%" y="165" width="9.6307%" height="15" fill="rgb(245,182,24)"/><text x="82.0281%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,820,113 samples, 0.25%)</title><rect x="91.1594%" y="149" width="0.2494%" height="15" fill="rgb(242,14,37)"/><text x="91.4094%" y="159.50"></text></g><g><title>late_resolve_crate (14,863,697 samples, 2.04%)</title><rect x="91.4728%" y="165" width="2.0366%" height="15" fill="rgb(246,228,12)"/><text x="91.7228%" y="175.50">l..</text></g><g><title>metadata_register_crate (4,887,475 samples, 0.67%)</title><rect x="92.8397%" y="149" width="0.6697%" height="15" fill="rgb(213,55,15)"/><text x="93.0897%" y="159.50"></text></g><g><title>metadata_register_crate (4,472,240 samples, 0.61%)</title><rect x="92.8966%" y="133" width="0.6128%" height="15" fill="rgb(209,9,3)"/><text x="93.1466%" y="143.50"></text></g><g><title>configure_and_expand (87,985,195 samples, 12.06%)</title><rect x="81.5963%" y="197" width="12.0555%" height="15" fill="rgb(230,59,30)"/><text x="81.8463%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (16,272,733 samples, 2.23%)</title><rect x="91.4222%" y="181" width="2.2297%" height="15" fill="rgb(209,121,21)"/><text x="91.6722%" y="191.50">r..</text></g><g><title>drop_ast (1,235,484 samples, 0.17%)</title><rect x="93.6518%" y="197" width="0.1693%" height="15" fill="rgb(220,109,13)"/><text x="93.9018%" y="207.50"></text></g><g><title>early_lint_checks (2,384,456 samples, 0.33%)</title><rect x="93.8242%" y="197" width="0.3267%" height="15" fill="rgb(232,18,1)"/><text x="94.0742%" y="207.50"></text></g><g><title>free_global_ctxt (7,759,897 samples, 1.06%)</title><rect x="94.1509%" y="197" width="1.0632%" height="15" fill="rgb(215,41,42)"/><text x="94.4009%" y="207.50"></text></g><g><title>generate_crate_metadata (9,437,056 samples, 1.29%)</title><rect x="95.2142%" y="197" width="1.2930%" height="15" fill="rgb(224,123,36)"/><text x="95.4642%" y="207.50"></text></g><g><title>hir_lowering (20,909,364 samples, 2.86%)</title><rect x="96.5072%" y="197" width="2.8650%" height="15" fill="rgb(240,125,3)"/><text x="96.7572%" y="207.50">hi..</text></g><g><title>parse_crate (980,551 samples, 0.13%)</title><rect x="99.3822%" y="197" width="0.1344%" height="15" fill="rgb(205,98,50)"/><text x="99.6322%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,476,848 samples, 0.34%)</title><rect x="99.5476%" y="197" width="0.3394%" height="15" fill="rgb(205,185,37)"/><text x="99.7976%" y="207.50"></text></g><g><title>all (729,832,984 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (729,832,984 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>