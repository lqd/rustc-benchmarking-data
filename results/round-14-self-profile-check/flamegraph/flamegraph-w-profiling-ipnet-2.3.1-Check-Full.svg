<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (626,044 samples, 0.20%)</title><rect x="15.5674%" y="117" width="0.2049%" height="15" fill="rgb(227,0,7)"/><text x="15.8174%" y="127.50"></text></g><g><title>item_attrs (466,062 samples, 0.15%)</title><rect x="16.3913%" y="85" width="0.1525%" height="15" fill="rgb(217,0,24)"/><text x="16.6413%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (450,622 samples, 0.15%)</title><rect x="16.3963%" y="69" width="0.1475%" height="15" fill="rgb(221,193,54)"/><text x="16.6463%" y="79.50"></text></g><g><title>codegen_fn_attrs (653,003 samples, 0.21%)</title><rect x="16.3378%" y="101" width="0.2137%" height="15" fill="rgb(248,212,6)"/><text x="16.5878%" y="111.50"></text></g><g><title>needs_drop_raw (1,201,461 samples, 0.39%)</title><rect x="20.0936%" y="85" width="0.3932%" height="15" fill="rgb(208,68,35)"/><text x="20.3436%" y="95.50"></text></g><g><title>is_copy_raw (869,830 samples, 0.28%)</title><rect x="20.2021%" y="69" width="0.2846%" height="15" fill="rgb(232,128,0)"/><text x="20.4521%" y="79.50"></text></g><g><title>evaluate_obligation (669,569 samples, 0.22%)</title><rect x="20.2677%" y="53" width="0.2191%" height="15" fill="rgb(207,160,47)"/><text x="20.5177%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (646,498 samples, 0.21%)</title><rect x="20.6733%" y="69" width="0.2116%" height="15" fill="rgb(228,23,34)"/><text x="20.9233%" y="79.50"></text></g><g><title>specialization_graph_of (367,894 samples, 0.12%)</title><rect x="20.9374%" y="69" width="0.1204%" height="15" fill="rgb(218,30,26)"/><text x="21.1874%" y="79.50"></text></g><g><title>resolve_instance (1,903,191 samples, 0.62%)</title><rect x="20.4958%" y="85" width="0.6228%" height="15" fill="rgb(220,122,19)"/><text x="20.7458%" y="95.50"></text></g><g><title>thir_body (4,223,897 samples, 1.38%)</title><rect x="21.1581%" y="85" width="1.3822%" height="15" fill="rgb(250,228,42)"/><text x="21.4081%" y="95.50"></text></g><g><title>mir_const (24,445,697 samples, 8.00%)</title><rect x="14.5690%" y="133" width="7.9996%" height="15" fill="rgb(240,193,28)"/><text x="14.8190%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (20,768,841 samples, 6.80%)</title><rect x="15.7723%" y="117" width="6.7964%" height="15" fill="rgb(216,20,37)"/><text x="16.0223%" y="127.50">unsafety_..</text></g><g><title>mir_built (18,387,745 samples, 6.02%)</title><rect x="16.5514%" y="101" width="6.0172%" height="15" fill="rgb(206,188,39)"/><text x="16.8014%" y="111.50">mir_built</text></g><g><title>mir_promoted (27,636,452 samples, 9.04%)</title><rect x="13.6176%" y="149" width="9.0438%" height="15" fill="rgb(217,207,13)"/><text x="13.8676%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (620,595 samples, 0.20%)</title><rect x="22.6618%" y="149" width="0.2031%" height="15" fill="rgb(231,73,38)"/><text x="22.9118%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (982,959 samples, 0.32%)</title><rect x="22.8648%" y="149" width="0.3217%" height="15" fill="rgb(225,20,46)"/><text x="23.1148%" y="159.50"></text></g><g><title>normalize_projection_ty (628,804 samples, 0.21%)</title><rect x="22.9807%" y="133" width="0.2058%" height="15" fill="rgb(210,31,41)"/><text x="23.2307%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,179,053 samples, 1.69%)</title><rect x="23.2999%" y="149" width="1.6948%" height="15" fill="rgb(221,200,47)"/><text x="23.5499%" y="159.50"></text></g><g><title>evaluate_obligation (512,978 samples, 0.17%)</title><rect x="24.8269%" y="133" width="0.1679%" height="15" fill="rgb(226,26,5)"/><text x="25.0769%" y="143.50"></text></g><g><title>MIR_borrow_checking (74,717,231 samples, 24.45%)</title><rect x="0.5479%" y="181" width="24.4506%" height="15" fill="rgb(249,33,26)"/><text x="0.7979%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (74,197,234 samples, 24.28%)</title><rect x="0.7181%" y="165" width="24.2804%" height="15" fill="rgb(235,183,28)"/><text x="0.9681%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (564,016 samples, 0.18%)</title><rect x="25.0912%" y="181" width="0.1846%" height="15" fill="rgb(221,5,38)"/><text x="25.3412%" y="191.50"></text></g><g><title>should_inherit_track_caller (566,577 samples, 0.19%)</title><rect x="25.5940%" y="133" width="0.1854%" height="15" fill="rgb(247,18,42)"/><text x="25.8440%" y="143.50"></text></g><g><title>codegen_fn_attrs (845,242 samples, 0.28%)</title><rect x="25.5093%" y="149" width="0.2766%" height="15" fill="rgb(241,131,45)"/><text x="25.7593%" y="159.50"></text></g><g><title>check_mod_attrs (1,536,146 samples, 0.50%)</title><rect x="25.2832%" y="165" width="0.5027%" height="15" fill="rgb(249,31,29)"/><text x="25.5332%" y="175.50"></text></g><g><title>check_mod_const_bodies (405,434 samples, 0.13%)</title><rect x="25.7859%" y="165" width="0.1327%" height="15" fill="rgb(225,111,53)"/><text x="26.0359%" y="175.50"></text></g><g><title>lint_levels (408,935 samples, 0.13%)</title><rect x="26.1316%" y="149" width="0.1338%" height="15" fill="rgb(238,160,17)"/><text x="26.3816%" y="159.50"></text></g><g><title>lookup_deprecation_entry (365,953 samples, 0.12%)</title><rect x="26.2655%" y="149" width="0.1198%" height="15" fill="rgb(214,148,48)"/><text x="26.5155%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,345,895 samples, 0.44%)</title><rect x="25.9872%" y="165" width="0.4404%" height="15" fill="rgb(232,36,49)"/><text x="26.2372%" y="175.50"></text></g><g><title>misc_checking_1 (3,635,090 samples, 1.19%)</title><rect x="25.2761%" y="181" width="1.1896%" height="15" fill="rgb(209,103,24)"/><text x="25.5261%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,206,193 samples, 0.39%)</title><rect x="26.4661%" y="165" width="0.3947%" height="15" fill="rgb(229,88,8)"/><text x="26.7161%" y="175.50"></text></g><g><title>check_mod_liveness (922,619 samples, 0.30%)</title><rect x="26.5589%" y="149" width="0.3019%" height="15" fill="rgb(213,181,19)"/><text x="26.8089%" y="159.50"></text></g><g><title>misc_checking_2 (3,513,889 samples, 1.15%)</title><rect x="26.4656%" y="181" width="1.1499%" height="15" fill="rgb(254,191,54)"/><text x="26.7156%" y="191.50"></text></g><g><title>match_checking (2,306,096 samples, 0.75%)</title><rect x="26.8609%" y="165" width="0.7547%" height="15" fill="rgb(241,83,37)"/><text x="27.1109%" y="175.50"></text></g><g><title>check_match (2,187,854 samples, 0.72%)</title><rect x="26.8996%" y="149" width="0.7160%" height="15" fill="rgb(233,36,39)"/><text x="27.1496%" y="159.50"></text></g><g><title>check_private_in_public (613,527 samples, 0.20%)</title><rect x="27.6192%" y="165" width="0.2008%" height="15" fill="rgb(226,3,54)"/><text x="27.8692%" y="175.50"></text></g><g><title>death_checking (1,257,534 samples, 0.41%)</title><rect x="27.8199%" y="165" width="0.4115%" height="15" fill="rgb(245,192,40)"/><text x="28.0699%" y="175.50"></text></g><g><title>param_env (387,786 samples, 0.13%)</title><rect x="28.7015%" y="133" width="0.1269%" height="15" fill="rgb(238,167,29)"/><text x="28.9515%" y="143.50"></text></g><g><title>crate_lints (2,952,203 samples, 0.97%)</title><rect x="28.2319%" y="149" width="0.9661%" height="15" fill="rgb(232,182,51)"/><text x="28.4819%" y="159.50"></text></g><g><title>type_of (1,114,353 samples, 0.36%)</title><rect x="28.8333%" y="133" width="0.3647%" height="15" fill="rgb(231,60,39)"/><text x="29.0833%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (884,571 samples, 0.29%)</title><rect x="28.9085%" y="117" width="0.2895%" height="15" fill="rgb(208,69,12)"/><text x="29.1585%" y="127.50"></text></g><g><title>lint_checking (4,311,638 samples, 1.41%)</title><rect x="28.2315%" y="165" width="1.4109%" height="15" fill="rgb(235,93,37)"/><text x="28.4815%" y="175.50"></text></g><g><title>module_lints (1,358,095 samples, 0.44%)</title><rect x="29.1980%" y="149" width="0.4444%" height="15" fill="rgb(213,116,39)"/><text x="29.4480%" y="159.50"></text></g><g><title>lint_mod (1,351,475 samples, 0.44%)</title><rect x="29.2001%" y="133" width="0.4423%" height="15" fill="rgb(222,207,29)"/><text x="29.4501%" y="143.50"></text></g><g><title>privacy_access_levels (953,940 samples, 0.31%)</title><rect x="29.6424%" y="165" width="0.3122%" height="15" fill="rgb(206,96,30)"/><text x="29.8924%" y="175.50"></text></g><g><title>privacy_checking_modules (2,598,949 samples, 0.85%)</title><rect x="29.9546%" y="165" width="0.8505%" height="15" fill="rgb(218,138,4)"/><text x="30.2046%" y="175.50"></text></g><g><title>check_mod_privacy (2,595,189 samples, 0.85%)</title><rect x="29.9558%" y="149" width="0.8493%" height="15" fill="rgb(250,191,14)"/><text x="30.2058%" y="159.50"></text></g><g><title>misc_checking_3 (9,770,828 samples, 3.20%)</title><rect x="27.6155%" y="181" width="3.1974%" height="15" fill="rgb(239,60,40)"/><text x="27.8655%" y="191.50">mis..</text></g><g><title>adt_destructor (333,114 samples, 0.11%)</title><rect x="30.9152%" y="133" width="0.1090%" height="15" fill="rgb(206,27,48)"/><text x="31.1652%" y="143.50"></text></g><g><title>coherent_trait (322,483 samples, 0.11%)</title><rect x="30.9187%" y="117" width="0.1055%" height="15" fill="rgb(225,35,8)"/><text x="31.1687%" y="127.50"></text></g><g><title>specialization_graph_of (321,333 samples, 0.11%)</title><rect x="30.9190%" y="101" width="0.1052%" height="15" fill="rgb(250,213,24)"/><text x="31.1690%" y="111.50"></text></g><g><title>impl_parent (3,157,770 samples, 1.03%)</title><rect x="32.8858%" y="117" width="1.0334%" height="15" fill="rgb(247,123,22)"/><text x="33.1358%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,821,893 samples, 0.60%)</title><rect x="33.3229%" y="101" width="0.5962%" height="15" fill="rgb(231,138,38)"/><text x="33.5729%" y="111.50"></text></g><g><title>impl_trait_ref (6,587,421 samples, 2.16%)</title><rect x="33.9191%" y="117" width="2.1557%" height="15" fill="rgb(231,145,46)"/><text x="34.1691%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,926,125 samples, 1.61%)</title><rect x="34.4628%" y="101" width="1.6120%" height="15" fill="rgb(251,118,11)"/><text x="34.7128%" y="111.50"></text></g><g><title>trait_impls_of (1,150,111 samples, 0.38%)</title><rect x="36.0840%" y="117" width="0.3764%" height="15" fill="rgb(217,147,25)"/><text x="36.3340%" y="127.50"></text></g><g><title>implementations_of_trait (324,215 samples, 0.11%)</title><rect x="36.3543%" y="101" width="0.1061%" height="15" fill="rgb(247,81,37)"/><text x="36.6043%" y="111.50"></text></g><g><title>coherent_trait (17,026,470 samples, 5.57%)</title><rect x="30.8889%" y="149" width="5.5718%" height="15" fill="rgb(209,12,38)"/><text x="31.1389%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (16,382,742 samples, 5.36%)</title><rect x="31.0995%" y="133" width="5.3611%" height="15" fill="rgb(227,1,9)"/><text x="31.3495%" y="143.50">special..</text></g><g><title>coherence_checking (17,183,981 samples, 5.62%)</title><rect x="30.8781%" y="165" width="5.6233%" height="15" fill="rgb(248,47,43)"/><text x="31.1281%" y="175.50">coheren..</text></g><g><title>adt_sized_constraint (363,474 samples, 0.12%)</title><rect x="55.5181%" y="101" width="0.1189%" height="15" fill="rgb(221,10,30)"/><text x="55.7681%" y="111.50"></text></g><g><title>adt_def (362,804 samples, 0.12%)</title><rect x="55.5183%" y="85" width="0.1187%" height="15" fill="rgb(210,229,1)"/><text x="55.7683%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (362,564 samples, 0.12%)</title><rect x="55.5184%" y="69" width="0.1186%" height="15" fill="rgb(222,148,37)"/><text x="55.7684%" y="79.50"></text></g><g><title>item_attrs (359,974 samples, 0.12%)</title><rect x="55.5193%" y="53" width="0.1178%" height="15" fill="rgb(234,67,33)"/><text x="55.7693%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (359,624 samples, 0.12%)</title><rect x="55.5194%" y="37" width="0.1177%" height="15" fill="rgb(247,98,35)"/><text x="55.7694%" y="47.50"></text></g><g><title>adt_sized_constraint (453,544 samples, 0.15%)</title><rect x="55.4899%" y="117" width="0.1484%" height="15" fill="rgb(247,138,52)"/><text x="55.7399%" y="127.50"></text></g><g><title>associated_item (656,397 samples, 0.21%)</title><rect x="55.7120%" y="101" width="0.2148%" height="15" fill="rgb(213,79,30)"/><text x="55.9620%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (536,396 samples, 0.18%)</title><rect x="55.7513%" y="85" width="0.1755%" height="15" fill="rgb(246,177,23)"/><text x="56.0013%" y="95.50"></text></g><g><title>associated_items (917,451 samples, 0.30%)</title><rect x="55.6404%" y="117" width="0.3002%" height="15" fill="rgb(230,62,27)"/><text x="55.8904%" y="127.50"></text></g><g><title>dropck_outlives (426,223 samples, 0.14%)</title><rect x="55.9780%" y="117" width="0.1395%" height="15" fill="rgb(216,154,8)"/><text x="56.2280%" y="127.50"></text></g><g><title>generics_of (953,229 samples, 0.31%)</title><rect x="57.6737%" y="101" width="0.3119%" height="15" fill="rgb(244,35,45)"/><text x="57.9237%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (750,286 samples, 0.25%)</title><rect x="57.7402%" y="85" width="0.2455%" height="15" fill="rgb(251,115,12)"/><text x="57.9902%" y="95.50"></text></g><g><title>impl_trait_ref (1,328,007 samples, 0.43%)</title><rect x="58.0470%" y="101" width="0.4346%" height="15" fill="rgb(240,54,50)"/><text x="58.2970%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (987,503 samples, 0.32%)</title><rect x="58.1584%" y="85" width="0.3232%" height="15" fill="rgb(233,84,52)"/><text x="58.4084%" y="95.50"></text></g><g><title>predicates_of (557,493 samples, 0.18%)</title><rect x="58.4964%" y="101" width="0.1824%" height="15" fill="rgb(207,117,47)"/><text x="58.7464%" y="111.50"></text></g><g><title>predicates_defined_on (310,333 samples, 0.10%)</title><rect x="58.5773%" y="85" width="0.1016%" height="15" fill="rgb(249,43,39)"/><text x="58.8273%" y="95.50"></text></g><g><title>specializes (1,060,466 samples, 0.35%)</title><rect x="58.6788%" y="101" width="0.3470%" height="15" fill="rgb(209,38,44)"/><text x="58.9288%" y="111.50"></text></g><g><title>param_env (642,462 samples, 0.21%)</title><rect x="58.8156%" y="85" width="0.2102%" height="15" fill="rgb(236,212,23)"/><text x="59.0656%" y="95.50"></text></g><g><title>trait_impls_of (586,607 samples, 0.19%)</title><rect x="59.0325%" y="101" width="0.1920%" height="15" fill="rgb(242,79,21)"/><text x="59.2825%" y="111.50"></text></g><g><title>evaluate_obligation (9,522,689 samples, 3.12%)</title><rect x="56.1174%" y="117" width="3.1162%" height="15" fill="rgb(211,96,35)"/><text x="56.3674%" y="127.50">eva..</text></g><g><title>generics_of (1,321,737 samples, 0.43%)</title><rect x="59.3114%" y="117" width="0.4325%" height="15" fill="rgb(253,215,40)"/><text x="59.5614%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (984,703 samples, 0.32%)</title><rect x="59.4217%" y="101" width="0.3222%" height="15" fill="rgb(211,81,21)"/><text x="59.6717%" y="111.50"></text></g><g><title>evaluate_obligation (311,520 samples, 0.10%)</title><rect x="60.0497%" y="101" width="0.1019%" height="15" fill="rgb(208,190,38)"/><text x="60.2997%" y="111.50"></text></g><g><title>method_autoderef_steps (562,062 samples, 0.18%)</title><rect x="59.9708%" y="117" width="0.1839%" height="15" fill="rgb(235,213,38)"/><text x="60.2208%" y="127.50"></text></g><g><title>predicates_of (518,255 samples, 0.17%)</title><rect x="60.2548%" y="117" width="0.1696%" height="15" fill="rgb(237,122,38)"/><text x="60.5048%" y="127.50"></text></g><g><title>predicates_defined_on (351,514 samples, 0.12%)</title><rect x="60.3094%" y="101" width="0.1150%" height="15" fill="rgb(244,218,35)"/><text x="60.5594%" y="111.50"></text></g><g><title>evaluate_obligation (2,097,674 samples, 0.69%)</title><rect x="65.8645%" y="101" width="0.6864%" height="15" fill="rgb(240,68,47)"/><text x="66.1145%" y="111.50"></text></g><g><title>is_copy_raw (499,734 samples, 0.16%)</title><rect x="66.6115%" y="101" width="0.1635%" height="15" fill="rgb(210,16,53)"/><text x="66.8615%" y="111.50"></text></g><g><title>evaluate_obligation (368,552 samples, 0.12%)</title><rect x="66.6544%" y="85" width="0.1206%" height="15" fill="rgb(235,124,12)"/><text x="66.9044%" y="95.50"></text></g><g><title>typeck (19,536,430 samples, 6.39%)</title><rect x="60.5488%" y="117" width="6.3931%" height="15" fill="rgb(224,169,11)"/><text x="60.7988%" y="127.50">typeck</text></g><g><title>item_bodies_checking (93,058,155 samples, 30.45%)</title><rect x="36.5328%" y="165" width="30.4525%" height="15" fill="rgb(250,166,2)"/><text x="36.7828%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (93,054,695 samples, 30.45%)</title><rect x="36.5339%" y="149" width="30.4514%" height="15" fill="rgb(242,216,29)"/><text x="36.7839%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (92,722,231 samples, 30.34%)</title><rect x="36.6427%" y="133" width="30.3426%" height="15" fill="rgb(230,116,27)"/><text x="36.8927%" y="143.50">typeck</text></g><g><title>item_types_checking (3,540,080 samples, 1.16%)</title><rect x="66.9853%" y="165" width="1.1585%" height="15" fill="rgb(228,99,48)"/><text x="67.2353%" y="175.50"></text></g><g><title>check_mod_item_types (3,534,460 samples, 1.16%)</title><rect x="66.9871%" y="149" width="1.1566%" height="15" fill="rgb(253,11,6)"/><text x="67.2371%" y="159.50"></text></g><g><title>late_bound_vars_map (311,442 samples, 0.10%)</title><rect x="68.6876%" y="117" width="0.1019%" height="15" fill="rgb(247,143,39)"/><text x="68.9376%" y="127.50"></text></g><g><title>fn_sig (1,245,503 samples, 0.41%)</title><rect x="68.4232%" y="133" width="0.4076%" height="15" fill="rgb(236,97,10)"/><text x="68.6732%" y="143.50"></text></g><g><title>named_region_map (796,438 samples, 0.26%)</title><rect x="69.0071%" y="117" width="0.2606%" height="15" fill="rgb(233,208,19)"/><text x="69.2571%" y="127.50"></text></g><g><title>resolve_lifetimes (720,737 samples, 0.24%)</title><rect x="69.0318%" y="101" width="0.2359%" height="15" fill="rgb(216,164,2)"/><text x="69.2818%" y="111.50"></text></g><g><title>generics_of (1,387,334 samples, 0.45%)</title><rect x="68.8308%" y="133" width="0.4540%" height="15" fill="rgb(220,129,5)"/><text x="69.0808%" y="143.50"></text></g><g><title>explicit_predicates_of (389,936 samples, 0.13%)</title><rect x="69.5016%" y="101" width="0.1276%" height="15" fill="rgb(242,17,10)"/><text x="69.7516%" y="111.50"></text></g><g><title>predicates_of (1,034,343 samples, 0.34%)</title><rect x="69.3587%" y="133" width="0.3385%" height="15" fill="rgb(242,107,0)"/><text x="69.6087%" y="143.50"></text></g><g><title>predicates_defined_on (864,512 samples, 0.28%)</title><rect x="69.4142%" y="117" width="0.2829%" height="15" fill="rgb(251,28,31)"/><text x="69.6642%" y="127.50"></text></g><g><title>type_collecting (4,995,505 samples, 1.63%)</title><rect x="68.1450%" y="165" width="1.6347%" height="15" fill="rgb(233,223,10)"/><text x="68.3950%" y="175.50"></text></g><g><title>collect_mod_item_types (4,981,835 samples, 1.63%)</title><rect x="68.1495%" y="149" width="1.6303%" height="15" fill="rgb(215,21,27)"/><text x="68.3995%" y="159.50"></text></g><g><title>evaluate_obligation (846,177 samples, 0.28%)</title><rect x="71.9241%" y="133" width="0.2769%" height="15" fill="rgb(232,23,21)"/><text x="72.1741%" y="143.50"></text></g><g><title>implied_outlives_bounds (400,485 samples, 0.13%)</title><rect x="72.2087%" y="133" width="0.1311%" height="15" fill="rgb(244,5,23)"/><text x="72.4587%" y="143.50"></text></g><g><title>param_env (943,315 samples, 0.31%)</title><rect x="72.4233%" y="133" width="0.3087%" height="15" fill="rgb(226,81,46)"/><text x="72.6733%" y="143.50"></text></g><g><title>region_scope_tree (1,485,324 samples, 0.49%)</title><rect x="72.7570%" y="133" width="0.4861%" height="15" fill="rgb(247,70,30)"/><text x="73.0070%" y="143.50"></text></g><g><title>check_impl_item_well_formed (9,956,948 samples, 3.26%)</title><rect x="69.9957%" y="149" width="3.2583%" height="15" fill="rgb(212,68,19)"/><text x="70.2457%" y="159.50">che..</text></g><g><title>evaluate_obligation (1,289,336 samples, 0.42%)</title><rect x="74.2102%" y="133" width="0.4219%" height="15" fill="rgb(240,187,13)"/><text x="74.4602%" y="143.50"></text></g><g><title>param_env (656,395 samples, 0.21%)</title><rect x="74.6721%" y="133" width="0.2148%" height="15" fill="rgb(223,113,26)"/><text x="74.9221%" y="143.50"></text></g><g><title>check_item_well_formed (5,392,504 samples, 1.76%)</title><rect x="73.2540%" y="149" width="1.7647%" height="15" fill="rgb(206,192,2)"/><text x="73.5040%" y="159.50"></text></g><g><title>analysis (229,111,148 samples, 74.97%)</title><rect x="0.2738%" y="197" width="74.9747%" height="15" fill="rgb(241,108,4)"/><text x="0.5238%" y="207.50">analysis</text></g><g><title>type_check_crate (135,788,360 samples, 44.44%)</title><rect x="30.8129%" y="181" width="44.4356%" height="15" fill="rgb(247,173,49)"/><text x="31.0629%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,692,125 samples, 5.46%)</title><rect x="69.7862%" y="165" width="5.4624%" height="15" fill="rgb(224,114,35)"/><text x="70.0362%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (702,478 samples, 0.23%)</title><rect x="75.0187%" y="149" width="0.2299%" height="15" fill="rgb(245,159,27)"/><text x="75.2687%" y="159.50"></text></g><g><title>codegen_crate (361,994 samples, 0.12%)</title><rect x="75.2516%" y="197" width="0.1185%" height="15" fill="rgb(245,172,44)"/><text x="75.5016%" y="207.50"></text></g><g><title>AST_validation (629,897 samples, 0.21%)</title><rect x="75.4298%" y="181" width="0.2061%" height="15" fill="rgb(236,23,11)"/><text x="75.6798%" y="191.50"></text></g><g><title>metadata_register_crate (2,315,836 samples, 0.76%)</title><rect x="89.3982%" y="149" width="0.7578%" height="15" fill="rgb(205,117,38)"/><text x="89.6482%" y="159.50"></text></g><g><title>metadata_register_crate (831,029 samples, 0.27%)</title><rect x="89.8841%" y="133" width="0.2719%" height="15" fill="rgb(237,72,25)"/><text x="90.1341%" y="143.50"></text></g><g><title>macro_expand_crate (45,081,371 samples, 14.75%)</title><rect x="75.7240%" y="181" width="14.7525%" height="15" fill="rgb(244,70,9)"/><text x="75.9740%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (45,056,311 samples, 14.74%)</title><rect x="75.7322%" y="165" width="14.7443%" height="15" fill="rgb(217,125,39)"/><text x="75.9822%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (979,531 samples, 0.32%)</title><rect x="90.1560%" y="149" width="0.3205%" height="15" fill="rgb(235,36,10)"/><text x="90.4060%" y="159.50"></text></g><g><title>finalize_macro_resolutions (503,286 samples, 0.16%)</title><rect x="90.5461%" y="165" width="0.1647%" height="15" fill="rgb(251,123,47)"/><text x="90.7961%" y="175.50"></text></g><g><title>late_resolve_crate (6,102,818 samples, 2.00%)</title><rect x="90.7108%" y="165" width="1.9971%" height="15" fill="rgb(221,13,13)"/><text x="90.9608%" y="175.50">l..</text></g><g><title>configure_and_expand (53,295,303 samples, 17.44%)</title><rect x="75.3701%" y="197" width="17.4404%" height="15" fill="rgb(238,131,9)"/><text x="75.6201%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,077,189 samples, 2.32%)</title><rect x="90.4946%" y="181" width="2.3160%" height="15" fill="rgb(211,50,8)"/><text x="90.7446%" y="191.50">r..</text></g><g><title>drop_ast (553,776 samples, 0.18%)</title><rect x="92.8105%" y="197" width="0.1812%" height="15" fill="rgb(245,182,24)"/><text x="93.0605%" y="207.50"></text></g><g><title>early_lint_checks (1,165,973 samples, 0.38%)</title><rect x="92.9978%" y="197" width="0.3816%" height="15" fill="rgb(242,14,37)"/><text x="93.2478%" y="207.50"></text></g><g><title>free_global_ctxt (5,540,141 samples, 1.81%)</title><rect x="93.3793%" y="197" width="1.8130%" height="15" fill="rgb(246,228,12)"/><text x="93.6293%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,655,420 samples, 0.87%)</title><rect x="95.1923%" y="197" width="0.8690%" height="15" fill="rgb(213,55,15)"/><text x="95.4423%" y="207.50"></text></g><g><title>hir_lowering (9,259,833 samples, 3.03%)</title><rect x="96.0613%" y="197" width="3.0302%" height="15" fill="rgb(209,9,3)"/><text x="96.3113%" y="207.50">hir..</text></g><g><title>parse_crate (464,685 samples, 0.15%)</title><rect x="99.1130%" y="197" width="0.1521%" height="15" fill="rgb(230,59,30)"/><text x="99.3630%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,529,606 samples, 0.50%)</title><rect x="99.3343%" y="197" width="0.5006%" height="15" fill="rgb(209,121,21)"/><text x="99.5843%" y="207.50"></text></g><g><title>all (305,584,588 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (305,584,588 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (399,025 samples, 0.13%)</title><rect x="99.8694%" y="197" width="0.1306%" height="15" fill="rgb(215,41,42)"/><text x="100.1194%" y="207.50"></text></g></svg></svg>