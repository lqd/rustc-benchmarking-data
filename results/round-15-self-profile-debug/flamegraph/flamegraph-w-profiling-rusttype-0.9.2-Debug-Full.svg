<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (100,740,506 samples, 11.55%)</title><rect x="0.0935%" y="181" width="11.5503%" height="15" fill="rgb(227,0,7)"/><text x="0.3435%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,996,256 samples, 0.23%)</title><rect x="15.3111%" y="69" width="0.2289%" height="15" fill="rgb(217,0,24)"/><text x="15.5611%" y="79.50"></text></g><g><title>is_copy_raw (1,154,059 samples, 0.13%)</title><rect x="15.4076%" y="53" width="0.1323%" height="15" fill="rgb(221,193,54)"/><text x="15.6576%" y="63.50"></text></g><g><title>evaluate_obligation (938,517 samples, 0.11%)</title><rect x="15.4323%" y="37" width="0.1076%" height="15" fill="rgb(248,212,6)"/><text x="15.6823%" y="47.50"></text></g><g><title>resolve_instance (1,350,970 samples, 0.15%)</title><rect x="15.5428%" y="69" width="0.1549%" height="15" fill="rgb(208,68,35)"/><text x="15.7928%" y="79.50"></text></g><g><title>thir_body (2,031,163 samples, 0.23%)</title><rect x="15.7047%" y="69" width="0.2329%" height="15" fill="rgb(232,128,0)"/><text x="15.9547%" y="79.50"></text></g><g><title>mir_const (14,211,452 samples, 1.63%)</title><rect x="14.3137%" y="117" width="1.6294%" height="15" fill="rgb(207,160,47)"/><text x="14.5637%" y="127.50"></text></g><g><title>unsafety_check_result (12,262,375 samples, 1.41%)</title><rect x="14.5372%" y="101" width="1.4059%" height="15" fill="rgb(228,23,34)"/><text x="14.7872%" y="111.50"></text></g><g><title>mir_built (10,962,821 samples, 1.26%)</title><rect x="14.6862%" y="85" width="1.2569%" height="15" fill="rgb(218,30,26)"/><text x="14.9362%" y="95.50"></text></g><g><title>mir_promoted (15,713,837 samples, 1.80%)</title><rect x="14.1527%" y="133" width="1.8016%" height="15" fill="rgb(220,122,19)"/><text x="14.4027%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (2,702,881 samples, 0.31%)</title><rect x="16.0926%" y="133" width="0.3099%" height="15" fill="rgb(250,228,42)"/><text x="16.3426%" y="143.50"></text></g><g><title>MIR_borrow_checking (40,632,224 samples, 4.66%)</title><rect x="11.7455%" y="165" width="4.6586%" height="15" fill="rgb(240,193,28)"/><text x="11.9955%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (40,362,884 samples, 4.63%)</title><rect x="11.7764%" y="149" width="4.6278%" height="15" fill="rgb(216,20,37)"/><text x="12.0264%" y="159.50">mir_b..</text></g><g><title>codegen_fn_attrs (917,628 samples, 0.11%)</title><rect x="16.5380%" y="133" width="0.1052%" height="15" fill="rgb(206,188,39)"/><text x="16.7880%" y="143.50"></text></g><g><title>check_mod_attrs (1,498,605 samples, 0.17%)</title><rect x="16.4714%" y="149" width="0.1718%" height="15" fill="rgb(217,207,13)"/><text x="16.7214%" y="159.50"></text></g><g><title>misc_checking_1 (2,900,050 samples, 0.33%)</title><rect x="16.4692%" y="165" width="0.3325%" height="15" fill="rgb(231,73,38)"/><text x="16.7192%" y="175.50"></text></g><g><title>misc_checking_2 (1,946,169 samples, 0.22%)</title><rect x="16.8017%" y="165" width="0.2231%" height="15" fill="rgb(225,20,46)"/><text x="17.0517%" y="175.50"></text></g><g><title>match_checking (1,079,080 samples, 0.12%)</title><rect x="16.9011%" y="149" width="0.1237%" height="15" fill="rgb(210,31,41)"/><text x="17.1511%" y="159.50"></text></g><g><title>check_match (1,017,609 samples, 0.12%)</title><rect x="16.9081%" y="133" width="0.1167%" height="15" fill="rgb(221,200,47)"/><text x="17.1581%" y="143.50"></text></g><g><title>crate_lints (2,612,887 samples, 0.30%)</title><rect x="17.1671%" y="133" width="0.2996%" height="15" fill="rgb(226,26,5)"/><text x="17.4171%" y="143.50"></text></g><g><title>type_of (1,146,173 samples, 0.13%)</title><rect x="17.3353%" y="117" width="0.1314%" height="15" fill="rgb(249,33,26)"/><text x="17.5853%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (904,300 samples, 0.10%)</title><rect x="17.3630%" y="101" width="0.1037%" height="15" fill="rgb(235,183,28)"/><text x="17.6130%" y="111.50"></text></g><g><title>lint_checking (3,362,184 samples, 0.39%)</title><rect x="17.1669%" y="149" width="0.3855%" height="15" fill="rgb(221,5,38)"/><text x="17.4169%" y="159.50"></text></g><g><title>privacy_checking_modules (1,474,975 samples, 0.17%)</title><rect x="17.6158%" y="149" width="0.1691%" height="15" fill="rgb(247,18,42)"/><text x="17.8658%" y="159.50"></text></g><g><title>check_mod_privacy (1,471,205 samples, 0.17%)</title><rect x="17.6163%" y="133" width="0.1687%" height="15" fill="rgb(241,131,45)"/><text x="17.8663%" y="143.50"></text></g><g><title>misc_checking_3 (6,645,788 samples, 0.76%)</title><rect x="17.0248%" y="165" width="0.7620%" height="15" fill="rgb(249,31,29)"/><text x="17.2748%" y="175.50"></text></g><g><title>impl_parent (3,335,873 samples, 0.38%)</title><rect x="18.5791%" y="101" width="0.3825%" height="15" fill="rgb(225,111,53)"/><text x="18.8291%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,879,353 samples, 0.22%)</title><rect x="18.7461%" y="85" width="0.2155%" height="15" fill="rgb(238,160,17)"/><text x="18.9961%" y="95.50"></text></g><g><title>impl_trait_ref (7,285,032 samples, 0.84%)</title><rect x="18.9620%" y="101" width="0.8353%" height="15" fill="rgb(214,148,48)"/><text x="19.2120%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,646,244 samples, 0.65%)</title><rect x="19.1499%" y="85" width="0.6474%" height="15" fill="rgb(232,36,49)"/><text x="19.3999%" y="95.50"></text></g><g><title>trait_impls_of (1,228,633 samples, 0.14%)</title><rect x="19.8060%" y="101" width="0.1409%" height="15" fill="rgb(209,103,24)"/><text x="20.0560%" y="111.50"></text></g><g><title>coherent_trait (18,702,560 samples, 2.14%)</title><rect x="17.8027%" y="133" width="2.1443%" height="15" fill="rgb(229,88,8)"/><text x="18.0527%" y="143.50">c..</text></g><g><title>specialization_graph_of (18,145,124 samples, 2.08%)</title><rect x="17.8666%" y="117" width="2.0804%" height="15" fill="rgb(213,181,19)"/><text x="18.1166%" y="127.50">s..</text></g><g><title>coherence_checking (18,842,272 samples, 2.16%)</title><rect x="17.7992%" y="149" width="2.1603%" height="15" fill="rgb(254,191,54)"/><text x="18.0492%" y="159.50">c..</text></g><g><title>dropck_outlives (1,707,487 samples, 0.20%)</title><rect x="23.6927%" y="101" width="0.1958%" height="15" fill="rgb(241,83,37)"/><text x="23.9427%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,166,881 samples, 0.13%)</title><rect x="23.7547%" y="85" width="0.1338%" height="15" fill="rgb(233,36,39)"/><text x="24.0047%" y="95.50"></text></g><g><title>evaluate_obligation (2,086,046 samples, 0.24%)</title><rect x="23.8884%" y="101" width="0.2392%" height="15" fill="rgb(226,3,54)"/><text x="24.1384%" y="111.50"></text></g><g><title>evaluate_obligation (961,690 samples, 0.11%)</title><rect x="24.7518%" y="85" width="0.1103%" height="15" fill="rgb(245,192,40)"/><text x="25.0018%" y="95.50"></text></g><g><title>typeck (5,148,753 samples, 0.59%)</title><rect x="24.3384%" y="101" width="0.5903%" height="15" fill="rgb(238,167,29)"/><text x="24.5884%" y="111.50"></text></g><g><title>item_bodies_checking (43,341,211 samples, 4.97%)</title><rect x="19.9680%" y="149" width="4.9692%" height="15" fill="rgb(232,182,51)"/><text x="20.2180%" y="159.50">item_b..</text></g><g><title>typeck_item_bodies (43,338,781 samples, 4.97%)</title><rect x="19.9683%" y="133" width="4.9690%" height="15" fill="rgb(231,60,39)"/><text x="20.2183%" y="143.50">typeck..</text></g><g><title>typeck (43,141,191 samples, 4.95%)</title><rect x="19.9910%" y="117" width="4.9463%" height="15" fill="rgb(208,69,12)"/><text x="20.2410%" y="127.50">typeck</text></g><g><title>item_types_checking (2,759,138 samples, 0.32%)</title><rect x="24.9373%" y="149" width="0.3163%" height="15" fill="rgb(235,93,37)"/><text x="25.1873%" y="159.50"></text></g><g><title>check_mod_item_types (2,754,128 samples, 0.32%)</title><rect x="24.9378%" y="133" width="0.3158%" height="15" fill="rgb(213,116,39)"/><text x="25.1878%" y="143.50"></text></g><g><title>predicates_of (1,572,654 samples, 0.18%)</title><rect x="25.4788%" y="117" width="0.1803%" height="15" fill="rgb(222,207,29)"/><text x="25.7288%" y="127.50"></text></g><g><title>predicates_defined_on (1,454,633 samples, 0.17%)</title><rect x="25.4923%" y="101" width="0.1668%" height="15" fill="rgb(206,96,30)"/><text x="25.7423%" y="111.50"></text></g><g><title>type_collecting (3,771,749 samples, 0.43%)</title><rect x="25.2538%" y="149" width="0.4324%" height="15" fill="rgb(218,138,4)"/><text x="25.5038%" y="159.50"></text></g><g><title>collect_mod_item_types (3,763,219 samples, 0.43%)</title><rect x="25.2548%" y="133" width="0.4315%" height="15" fill="rgb(250,191,14)"/><text x="25.5048%" y="143.50"></text></g><g><title>evaluate_obligation (989,078 samples, 0.11%)</title><rect x="26.2659%" y="117" width="0.1134%" height="15" fill="rgb(239,60,40)"/><text x="26.5159%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,755,612 samples, 0.89%)</title><rect x="25.7378%" y="133" width="0.8892%" height="15" fill="rgb(206,27,48)"/><text x="25.9878%" y="143.50"></text></g><g><title>check_item_well_formed (5,209,818 samples, 0.60%)</title><rect x="26.6270%" y="133" width="0.5973%" height="15" fill="rgb(225,35,8)"/><text x="26.8770%" y="143.50"></text></g><g><title>analysis (135,964,754 samples, 15.59%)</title><rect x="11.6437%" y="181" width="15.5889%" height="15" fill="rgb(250,213,24)"/><text x="11.8937%" y="191.50">analysis</text></g><g><title>type_check_crate (82,385,669 samples, 9.45%)</title><rect x="17.7868%" y="165" width="9.4458%" height="15" fill="rgb(247,123,22)"/><text x="18.0368%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (13,476,387 samples, 1.55%)</title><rect x="25.6875%" y="149" width="1.5451%" height="15" fill="rgb(231,138,38)"/><text x="25.9375%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,582,971 samples, 0.18%)</title><rect x="36.3630%" y="149" width="0.1815%" height="15" fill="rgb(231,145,46)"/><text x="36.6130%" y="159.50"></text></g><g><title>const_caller_location (882,536 samples, 0.10%)</title><rect x="36.5445%" y="149" width="0.1012%" height="15" fill="rgb(251,118,11)"/><text x="36.7945%" y="159.50"></text></g><g><title>codegen_fn_attrs (944,826 samples, 0.11%)</title><rect x="37.0790%" y="133" width="0.1083%" height="15" fill="rgb(217,147,25)"/><text x="37.3290%" y="143.50"></text></g><g><title>layout_of (1,704,389 samples, 0.20%)</title><rect x="37.2071%" y="133" width="0.1954%" height="15" fill="rgb(247,81,37)"/><text x="37.4571%" y="143.50"></text></g><g><title>predicates_of (1,667,818 samples, 0.19%)</title><rect x="37.7532%" y="117" width="0.1912%" height="15" fill="rgb(209,12,38)"/><text x="38.0032%" y="127.50"></text></g><g><title>predicates_defined_on (1,216,320 samples, 0.14%)</title><rect x="37.8050%" y="101" width="0.1395%" height="15" fill="rgb(227,1,9)"/><text x="38.0550%" y="111.50"></text></g><g><title>param_env (4,736,581 samples, 0.54%)</title><rect x="37.4025%" y="133" width="0.5431%" height="15" fill="rgb(248,47,43)"/><text x="37.6525%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,189,373 samples, 0.14%)</title><rect x="37.9456%" y="133" width="0.1364%" height="15" fill="rgb(221,10,30)"/><text x="38.1956%" y="143.50"></text></g><g><title>normalize_projection_ty (992,781 samples, 0.11%)</title><rect x="37.9681%" y="117" width="0.1138%" height="15" fill="rgb(210,229,1)"/><text x="38.2181%" y="127.50"></text></g><g><title>fn_abi_of_instance (12,561,625 samples, 1.44%)</title><rect x="36.6472%" y="149" width="1.4402%" height="15" fill="rgb(222,148,37)"/><text x="36.8972%" y="159.50"></text></g><g><title>layout_of (2,008,776 samples, 0.23%)</title><rect x="38.1492%" y="149" width="0.2303%" height="15" fill="rgb(234,67,33)"/><text x="38.3992%" y="159.50"></text></g><g><title>symbol_name (1,395,615 samples, 0.16%)</title><rect x="38.3823%" y="149" width="0.1600%" height="15" fill="rgb(247,98,35)"/><text x="38.6323%" y="159.50"></text></g><g><title>codegen_module (96,690,085 samples, 11.09%)</title><rect x="27.4699%" y="165" width="11.0859%" height="15" fill="rgb(247,138,52)"/><text x="27.7199%" y="175.50">codegen_module</text></g><g><title>codegen_crate (98,834,387 samples, 11.33%)</title><rect x="27.2332%" y="181" width="11.3317%" height="15" fill="rgb(213,79,30)"/><text x="27.4832%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (424,854,585 samples, 48.71%)</title><rect x="38.5895%" y="165" width="48.7111%" height="15" fill="rgb(246,177,23)"/><text x="38.8395%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (405,254,813 samples, 46.46%)</title><rect x="40.8367%" y="149" width="46.4640%" height="15" fill="rgb(230,62,27)"/><text x="41.0867%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (438,055,776 samples, 50.22%)</title><rect x="38.5649%" y="181" width="50.2247%" height="15" fill="rgb(216,154,8)"/><text x="38.8149%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,986,710 samples, 1.49%)</title><rect x="87.3007%" y="165" width="1.4890%" height="15" fill="rgb(244,35,45)"/><text x="87.5507%" y="175.50"></text></g><g><title>metadata_register_crate (2,243,522 samples, 0.26%)</title><rect x="90.8743%" y="133" width="0.2572%" height="15" fill="rgb(251,115,12)"/><text x="91.1243%" y="143.50"></text></g><g><title>macro_expand_crate (19,859,713 samples, 2.28%)</title><rect x="88.8712%" y="165" width="2.2770%" height="15" fill="rgb(240,54,50)"/><text x="89.1212%" y="175.50">m..</text></g><g><title>expand_crate (19,849,272 samples, 2.28%)</title><rect x="88.8724%" y="149" width="2.2758%" height="15" fill="rgb(233,84,52)"/><text x="89.1224%" y="159.50">e..</text></g><g><title>late_resolve_crate (5,472,615 samples, 0.63%)</title><rect x="91.2210%" y="149" width="0.6275%" height="15" fill="rgb(207,117,47)"/><text x="91.4710%" y="159.50"></text></g><g><title>configure_and_expand (27,002,285 samples, 3.10%)</title><rect x="88.7897%" y="181" width="3.0959%" height="15" fill="rgb(249,43,39)"/><text x="89.0397%" y="191.50">con..</text></g><g><title>resolve_crate (6,302,234 samples, 0.72%)</title><rect x="91.1630%" y="165" width="0.7226%" height="15" fill="rgb(209,38,44)"/><text x="91.4130%" y="175.50"></text></g><g><title>early_lint_checks (1,148,212 samples, 0.13%)</title><rect x="91.9455%" y="181" width="0.1316%" height="15" fill="rgb(236,212,23)"/><text x="92.1955%" y="191.50"></text></g><g><title>free_global_ctxt (6,082,031 samples, 0.70%)</title><rect x="92.0771%" y="181" width="0.6973%" height="15" fill="rgb(242,79,21)"/><text x="92.3271%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,557,578 samples, 0.18%)</title><rect x="93.3917%" y="101" width="0.1786%" height="15" fill="rgb(211,96,35)"/><text x="93.6417%" y="111.50"></text></g><g><title>layout_of (920,728 samples, 0.11%)</title><rect x="94.0003%" y="85" width="0.1056%" height="15" fill="rgb(253,215,40)"/><text x="94.2503%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,955,621 samples, 0.34%)</title><rect x="94.1059%" y="85" width="0.3389%" height="15" fill="rgb(211,81,21)"/><text x="94.3559%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,498,305 samples, 0.29%)</title><rect x="94.4447%" y="85" width="0.2864%" height="15" fill="rgb(208,190,38)"/><text x="94.6947%" y="95.50"></text></g><g><title>optimized_mir (8,811,101 samples, 1.01%)</title><rect x="93.7329%" y="101" width="1.0102%" height="15" fill="rgb(235,213,38)"/><text x="93.9829%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,699,851 samples, 0.42%)</title><rect x="94.8770%" y="85" width="0.4242%" height="15" fill="rgb(237,122,38)"/><text x="95.1270%" y="95.50"></text></g><g><title>specialization_graph_of (1,455,594 samples, 0.17%)</title><rect x="95.4198%" y="85" width="0.1669%" height="15" fill="rgb(244,218,35)"/><text x="95.6698%" y="95.50"></text></g><g><title>resolve_instance (7,827,596 samples, 0.90%)</title><rect x="94.7431%" y="101" width="0.8975%" height="15" fill="rgb(240,68,47)"/><text x="94.9931%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (984,449 samples, 0.11%)</title><rect x="95.6586%" y="101" width="0.1129%" height="15" fill="rgb(210,16,53)"/><text x="95.9086%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (23,918,883 samples, 2.74%)</title><rect x="93.0958%" y="117" width="2.7424%" height="15" fill="rgb(235,124,12)"/><text x="93.3458%" y="127.50">mo..</text></g><g><title>monomorphization_collector (24,019,664 samples, 2.75%)</title><rect x="93.0955%" y="133" width="2.7539%" height="15" fill="rgb(224,169,11)"/><text x="93.3455%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,110,591 samples, 0.24%)</title><rect x="95.8498%" y="117" width="0.2420%" height="15" fill="rgb(250,166,2)"/><text x="96.0998%" y="127.50"></text></g><g><title>symbol_name (1,924,059 samples, 0.22%)</title><rect x="95.8712%" y="101" width="0.2206%" height="15" fill="rgb(242,216,29)"/><text x="96.1212%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (27,249,187 samples, 3.12%)</title><rect x="93.0911%" y="149" width="3.1242%" height="15" fill="rgb(230,116,27)"/><text x="93.3411%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,191,022 samples, 0.37%)</title><rect x="95.8494%" y="133" width="0.3659%" height="15" fill="rgb(228,99,48)"/><text x="96.0994%" y="143.50"></text></g><g><title>cgu_partitioning (1,077,241 samples, 0.12%)</title><rect x="96.0918%" y="117" width="0.1235%" height="15" fill="rgb(253,11,6)"/><text x="96.3418%" y="127.50"></text></g><g><title>exported_symbols (27,543,710 samples, 3.16%)</title><rect x="93.0821%" y="165" width="3.1580%" height="15" fill="rgb(247,143,39)"/><text x="93.3321%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,551,288 samples, 0.52%)</title><rect x="96.8152%" y="149" width="0.5218%" height="15" fill="rgb(236,97,10)"/><text x="97.0652%" y="159.50"></text></g><g><title>optimized_mir (9,477,045 samples, 1.09%)</title><rect x="96.2597%" y="165" width="1.0866%" height="15" fill="rgb(233,208,19)"/><text x="96.5097%" y="175.50"></text></g><g><title>generate_crate_metadata (39,973,517 samples, 4.58%)</title><rect x="92.7745%" y="181" width="4.5831%" height="15" fill="rgb(216,164,2)"/><text x="93.0245%" y="191.50">gener..</text></g><g><title>hir_lowering (9,925,562 samples, 1.14%)</title><rect x="97.3576%" y="181" width="1.1380%" height="15" fill="rgb(220,129,5)"/><text x="97.6076%" y="191.50"></text></g><g><title>finish_ongoing_codegen (5,827,670 samples, 0.67%)</title><rect x="98.4973%" y="165" width="0.6682%" height="15" fill="rgb(242,17,10)"/><text x="98.7473%" y="175.50"></text></g><g><title>link_crate (2,824,689 samples, 0.32%)</title><rect x="99.1654%" y="165" width="0.3239%" height="15" fill="rgb(242,107,0)"/><text x="99.4154%" y="175.50"></text></g><g><title>link_binary (2,799,338 samples, 0.32%)</title><rect x="99.1684%" y="149" width="0.3210%" height="15" fill="rgb(251,28,31)"/><text x="99.4184%" y="159.50"></text></g><g><title>link_rlib (2,119,611 samples, 0.24%)</title><rect x="99.2463%" y="133" width="0.2430%" height="15" fill="rgb(233,223,10)"/><text x="99.4963%" y="143.50"></text></g><g><title>link (8,678,189 samples, 0.99%)</title><rect x="98.4956%" y="181" width="0.9950%" height="15" fill="rgb(215,21,27)"/><text x="98.7456%" y="191.50"></text></g><g><title>parse_crate (1,837,628 samples, 0.21%)</title><rect x="99.4906%" y="181" width="0.2107%" height="15" fill="rgb(232,23,21)"/><text x="99.7406%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,713,448 samples, 0.20%)</title><rect x="99.7394%" y="181" width="0.1965%" height="15" fill="rgb(244,5,23)"/><text x="99.9894%" y="191.50"></text></g><g><title>all (872,191,695 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (872,191,695 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>