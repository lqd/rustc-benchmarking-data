<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,439,264 samples, 1.16%)</title><rect x="0.6918%" y="197" width="1.1568%" height="15" fill="rgb(227,0,7)"/><text x="0.9418%" y="207.50"></text></g><g><title>is_sized_raw (190,213 samples, 0.15%)</title><rect x="10.3122%" y="149" width="0.1529%" height="15" fill="rgb(217,0,24)"/><text x="10.5622%" y="159.50"></text></g><g><title>evaluate_obligation (145,203 samples, 0.12%)</title><rect x="10.3483%" y="133" width="0.1167%" height="15" fill="rgb(221,193,54)"/><text x="10.5983%" y="143.50"></text></g><g><title>item_attrs (125,673 samples, 0.10%)</title><rect x="12.1413%" y="85" width="0.1010%" height="15" fill="rgb(248,212,6)"/><text x="12.3913%" y="95.50"></text></g><g><title>codegen_fn_attrs (191,624 samples, 0.15%)</title><rect x="12.0941%" y="101" width="0.1540%" height="15" fill="rgb(208,68,35)"/><text x="12.3441%" y="111.50"></text></g><g><title>is_copy_raw (505,037 samples, 0.41%)</title><rect x="13.9543%" y="85" width="0.4059%" height="15" fill="rgb(232,128,0)"/><text x="14.2043%" y="95.50"></text></g><g><title>evaluate_obligation (434,917 samples, 0.35%)</title><rect x="14.0107%" y="69" width="0.3496%" height="15" fill="rgb(207,160,47)"/><text x="14.2607%" y="79.50"></text></g><g><title>needs_drop_raw (466,214 samples, 0.37%)</title><rect x="14.3653%" y="85" width="0.3747%" height="15" fill="rgb(228,23,34)"/><text x="14.6153%" y="95.50"></text></g><g><title>is_copy_raw (279,022 samples, 0.22%)</title><rect x="14.5157%" y="69" width="0.2243%" height="15" fill="rgb(218,30,26)"/><text x="14.7657%" y="79.50"></text></g><g><title>evaluate_obligation (205,182 samples, 0.16%)</title><rect x="14.5751%" y="53" width="0.1649%" height="15" fill="rgb(220,122,19)"/><text x="14.8251%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (471,615 samples, 0.38%)</title><rect x="14.9631%" y="69" width="0.3791%" height="15" fill="rgb(250,228,42)"/><text x="15.2131%" y="79.50"></text></g><g><title>impl_parent (379,442 samples, 0.30%)</title><rect x="15.8474%" y="53" width="0.3050%" height="15" fill="rgb(240,193,28)"/><text x="16.0974%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (242,390 samples, 0.19%)</title><rect x="15.9576%" y="37" width="0.1948%" height="15" fill="rgb(216,20,37)"/><text x="16.2076%" y="47.50"></text></g><g><title>specialization_graph_of (1,730,797 samples, 1.39%)</title><rect x="15.4096%" y="69" width="1.3911%" height="15" fill="rgb(206,188,39)"/><text x="15.6596%" y="79.50"></text></g><g><title>impl_trait_ref (806,652 samples, 0.65%)</title><rect x="16.1524%" y="53" width="0.6483%" height="15" fill="rgb(217,207,13)"/><text x="16.4024%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (699,371 samples, 0.56%)</title><rect x="16.2386%" y="37" width="0.5621%" height="15" fill="rgb(231,73,38)"/><text x="16.4886%" y="47.50"></text></g><g><title>resolve_instance (2,630,774 samples, 2.11%)</title><rect x="14.7400%" y="85" width="2.1144%" height="15" fill="rgb(225,20,46)"/><text x="14.9900%" y="95.50">r..</text></g><g><title>thir_body (765,000 samples, 0.61%)</title><rect x="16.8836%" y="85" width="0.6149%" height="15" fill="rgb(210,31,41)"/><text x="17.1336%" y="95.50"></text></g><g><title>mir_const (8,161,046 samples, 6.56%)</title><rect x="11.0463%" y="133" width="6.5593%" height="15" fill="rgb(221,200,47)"/><text x="11.2963%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,273,088 samples, 5.85%)</title><rect x="11.7599%" y="117" width="5.8456%" height="15" fill="rgb(226,26,5)"/><text x="12.0099%" y="127.50">unsafet..</text></g><g><title>mir_built (6,665,699 samples, 5.36%)</title><rect x="12.2481%" y="101" width="5.3574%" height="15" fill="rgb(249,33,26)"/><text x="12.4981%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (8,944,206 samples, 7.19%)</title><rect x="10.4650%" y="149" width="7.1887%" height="15" fill="rgb(235,183,28)"/><text x="10.7150%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (760,960 samples, 0.61%)</title><rect x="17.6538%" y="149" width="0.6116%" height="15" fill="rgb(221,5,38)"/><text x="17.9038%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (774,187 samples, 0.62%)</title><rect x="18.2654%" y="149" width="0.6222%" height="15" fill="rgb(247,18,42)"/><text x="18.5154%" y="159.50"></text></g><g><title>normalize_projection_ty (330,992 samples, 0.27%)</title><rect x="18.6216%" y="133" width="0.2660%" height="15" fill="rgb(241,131,45)"/><text x="18.8716%" y="143.50"></text></g><g><title>type_op_normalize_predicate (312,831 samples, 0.25%)</title><rect x="18.8876%" y="149" width="0.2514%" height="15" fill="rgb(249,31,29)"/><text x="19.1376%" y="159.50"></text></g><g><title>normalize_projection_ty (143,210 samples, 0.12%)</title><rect x="19.0240%" y="133" width="0.1151%" height="15" fill="rgb(225,111,53)"/><text x="19.2740%" y="143.50"></text></g><g><title>type_op_normalize_ty (148,461 samples, 0.12%)</title><rect x="19.1391%" y="149" width="0.1193%" height="15" fill="rgb(238,160,17)"/><text x="19.3891%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,015,341 samples, 1.62%)</title><rect x="19.2584%" y="149" width="1.6198%" height="15" fill="rgb(214,148,48)"/><text x="19.5084%" y="159.50"></text></g><g><title>MIR_borrow_checking (23,208,253 samples, 18.65%)</title><rect x="2.2321%" y="181" width="18.6532%" height="15" fill="rgb(232,36,49)"/><text x="2.4821%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,074,133 samples, 18.55%)</title><rect x="2.3399%" y="165" width="18.5454%" height="15" fill="rgb(209,103,24)"/><text x="2.5899%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (331,854 samples, 0.27%)</title><rect x="20.9139%" y="181" width="0.2667%" height="15" fill="rgb(229,88,8)"/><text x="21.1639%" y="191.50"></text></g><g><title>associated_item (129,410 samples, 0.10%)</title><rect x="21.7729%" y="117" width="0.1040%" height="15" fill="rgb(213,181,19)"/><text x="22.0229%" y="127.50"></text></g><g><title>get_lang_items (164,852 samples, 0.13%)</title><rect x="21.8977%" y="101" width="0.1325%" height="15" fill="rgb(254,191,54)"/><text x="22.1477%" y="111.50"></text></g><g><title>codegen_fn_attrs (260,953 samples, 0.21%)</title><rect x="21.8769%" y="117" width="0.2097%" height="15" fill="rgb(241,83,37)"/><text x="22.1269%" y="127.50"></text></g><g><title>codegen_fn_attrs (672,155 samples, 0.54%)</title><rect x="21.5630%" y="149" width="0.5402%" height="15" fill="rgb(233,36,39)"/><text x="21.8130%" y="159.50"></text></g><g><title>should_inherit_track_caller (539,123 samples, 0.43%)</title><rect x="21.6700%" y="133" width="0.4333%" height="15" fill="rgb(226,3,54)"/><text x="21.9200%" y="143.50"></text></g><g><title>check_mod_attrs (1,102,750 samples, 0.89%)</title><rect x="21.2173%" y="165" width="0.8863%" height="15" fill="rgb(245,192,40)"/><text x="21.4673%" y="175.50"></text></g><g><title>check_mod_const_bodies (259,793 samples, 0.21%)</title><rect x="22.1036%" y="165" width="0.2088%" height="15" fill="rgb(238,167,29)"/><text x="22.3536%" y="175.50"></text></g><g><title>lint_levels (215,932 samples, 0.17%)</title><rect x="22.6382%" y="149" width="0.1736%" height="15" fill="rgb(232,182,51)"/><text x="22.8882%" y="159.50"></text></g><g><title>lookup_deprecation_entry (205,711 samples, 0.17%)</title><rect x="22.8117%" y="149" width="0.1653%" height="15" fill="rgb(231,60,39)"/><text x="23.0617%" y="159.50"></text></g><g><title>stability_index (141,031 samples, 0.11%)</title><rect x="22.8637%" y="133" width="0.1134%" height="15" fill="rgb(208,69,12)"/><text x="23.1137%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (740,318 samples, 0.60%)</title><rect x="22.4227%" y="165" width="0.5950%" height="15" fill="rgb(235,93,37)"/><text x="22.6727%" y="175.50"></text></g><g><title>misc_checking_1 (2,377,544 samples, 1.91%)</title><rect x="21.1811%" y="181" width="1.9109%" height="15" fill="rgb(213,116,39)"/><text x="21.4311%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (594,886 samples, 0.48%)</title><rect x="23.0933%" y="165" width="0.4781%" height="15" fill="rgb(222,207,29)"/><text x="23.3433%" y="175.50"></text></g><g><title>check_mod_liveness (525,684 samples, 0.42%)</title><rect x="23.1489%" y="149" width="0.4225%" height="15" fill="rgb(206,96,30)"/><text x="23.3989%" y="159.50"></text></g><g><title>misc_checking_2 (952,309 samples, 0.77%)</title><rect x="23.0920%" y="181" width="0.7654%" height="15" fill="rgb(218,138,4)"/><text x="23.3420%" y="191.50"></text></g><g><title>match_checking (355,863 samples, 0.29%)</title><rect x="23.5714%" y="165" width="0.2860%" height="15" fill="rgb(250,191,14)"/><text x="23.8214%" y="175.50"></text></g><g><title>check_match (325,143 samples, 0.26%)</title><rect x="23.5961%" y="149" width="0.2613%" height="15" fill="rgb(239,60,40)"/><text x="23.8461%" y="159.50"></text></g><g><title>check_private_in_public (183,042 samples, 0.15%)</title><rect x="23.8647%" y="165" width="0.1471%" height="15" fill="rgb(206,27,48)"/><text x="24.1147%" y="175.50"></text></g><g><title>death_checking (272,462 samples, 0.22%)</title><rect x="24.0118%" y="165" width="0.2190%" height="15" fill="rgb(225,35,8)"/><text x="24.2618%" y="175.50"></text></g><g><title>param_env (236,340 samples, 0.19%)</title><rect x="24.5424%" y="133" width="0.1900%" height="15" fill="rgb(250,213,24)"/><text x="24.7924%" y="143.50"></text></g><g><title>crate_lints (1,134,531 samples, 0.91%)</title><rect x="24.2319%" y="149" width="0.9119%" height="15" fill="rgb(247,123,22)"/><text x="24.4819%" y="159.50"></text></g><g><title>type_of (424,264 samples, 0.34%)</title><rect x="24.8028%" y="133" width="0.3410%" height="15" fill="rgb(231,138,38)"/><text x="25.0528%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (344,253 samples, 0.28%)</title><rect x="24.8671%" y="117" width="0.2767%" height="15" fill="rgb(231,145,46)"/><text x="25.1171%" y="127.50"></text></g><g><title>lint_checking (1,363,863 samples, 1.10%)</title><rect x="24.2308%" y="165" width="1.0962%" height="15" fill="rgb(251,118,11)"/><text x="24.4808%" y="175.50"></text></g><g><title>module_lints (227,892 samples, 0.18%)</title><rect x="25.1438%" y="149" width="0.1832%" height="15" fill="rgb(217,147,25)"/><text x="25.3938%" y="159.50"></text></g><g><title>lint_mod (223,642 samples, 0.18%)</title><rect x="25.1472%" y="133" width="0.1797%" height="15" fill="rgb(247,81,37)"/><text x="25.3972%" y="143.50"></text></g><g><title>privacy_access_levels (266,463 samples, 0.21%)</title><rect x="25.3270%" y="165" width="0.2142%" height="15" fill="rgb(209,12,38)"/><text x="25.5770%" y="175.50"></text></g><g><title>privacy_checking_modules (570,686 samples, 0.46%)</title><rect x="25.5411%" y="165" width="0.4587%" height="15" fill="rgb(227,1,9)"/><text x="25.7911%" y="175.50"></text></g><g><title>check_mod_privacy (566,866 samples, 0.46%)</title><rect x="25.5442%" y="149" width="0.4556%" height="15" fill="rgb(248,47,43)"/><text x="25.7942%" y="159.50"></text></g><g><title>misc_checking_3 (2,689,317 samples, 2.16%)</title><rect x="23.8574%" y="181" width="2.1615%" height="15" fill="rgb(221,10,30)"/><text x="24.1074%" y="191.50">m..</text></g><g><title>impl_parent (150,061 samples, 0.12%)</title><rect x="26.3592%" y="117" width="0.1206%" height="15" fill="rgb(210,229,1)"/><text x="26.6092%" y="127.50"></text></g><g><title>impl_trait_ref (466,184 samples, 0.37%)</title><rect x="26.4798%" y="117" width="0.3747%" height="15" fill="rgb(222,148,37)"/><text x="26.7298%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (410,434 samples, 0.33%)</title><rect x="26.5246%" y="101" width="0.3299%" height="15" fill="rgb(234,67,33)"/><text x="26.7746%" y="111.50"></text></g><g><title>coherent_trait (1,021,860 samples, 0.82%)</title><rect x="26.0938%" y="149" width="0.8213%" height="15" fill="rgb(247,98,35)"/><text x="26.3438%" y="159.50"></text></g><g><title>specialization_graph_of (1,003,860 samples, 0.81%)</title><rect x="26.1083%" y="133" width="0.8068%" height="15" fill="rgb(247,138,52)"/><text x="26.3583%" y="143.50"></text></g><g><title>coherence_checking (1,137,131 samples, 0.91%)</title><rect x="26.0782%" y="165" width="0.9139%" height="15" fill="rgb(213,79,30)"/><text x="26.3282%" y="175.50"></text></g><g><title>associated_item (556,588 samples, 0.45%)</title><rect x="37.6859%" y="101" width="0.4473%" height="15" fill="rgb(246,177,23)"/><text x="37.9359%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (428,324 samples, 0.34%)</title><rect x="37.7890%" y="85" width="0.3443%" height="15" fill="rgb(230,62,27)"/><text x="38.0390%" y="95.50"></text></g><g><title>associated_items (781,548 samples, 0.63%)</title><rect x="37.5294%" y="117" width="0.6282%" height="15" fill="rgb(216,154,8)"/><text x="37.7794%" y="127.50"></text></g><g><title>dropck_outlives (220,352 samples, 0.18%)</title><rect x="38.1769%" y="117" width="0.1771%" height="15" fill="rgb(244,35,45)"/><text x="38.4269%" y="127.50"></text></g><g><title>generics_of (167,342 samples, 0.13%)</title><rect x="40.6000%" y="101" width="0.1345%" height="15" fill="rgb(251,115,12)"/><text x="40.8500%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (132,041 samples, 0.11%)</title><rect x="40.6284%" y="85" width="0.1061%" height="15" fill="rgb(240,54,50)"/><text x="40.8784%" y="95.50"></text></g><g><title>impl_trait_ref (235,360 samples, 0.19%)</title><rect x="40.7862%" y="101" width="0.1892%" height="15" fill="rgb(233,84,52)"/><text x="41.0362%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (196,320 samples, 0.16%)</title><rect x="40.8176%" y="85" width="0.1578%" height="15" fill="rgb(207,117,47)"/><text x="41.0676%" y="95.50"></text></g><g><title>predicates_of (189,791 samples, 0.15%)</title><rect x="40.9816%" y="101" width="0.1525%" height="15" fill="rgb(249,43,39)"/><text x="41.2316%" y="111.50"></text></g><g><title>specializes (355,534 samples, 0.29%)</title><rect x="41.1341%" y="101" width="0.2858%" height="15" fill="rgb(209,38,44)"/><text x="41.3841%" y="111.50"></text></g><g><title>param_env (243,411 samples, 0.20%)</title><rect x="41.2242%" y="85" width="0.1956%" height="15" fill="rgb(236,212,23)"/><text x="41.4742%" y="95.50"></text></g><g><title>trait_impls_of (125,312 samples, 0.10%)</title><rect x="41.4231%" y="101" width="0.1007%" height="15" fill="rgb(242,79,21)"/><text x="41.6731%" y="111.50"></text></g><g><title>evaluate_obligation (3,948,554 samples, 3.17%)</title><rect x="38.3540%" y="117" width="3.1736%" height="15" fill="rgb(211,96,35)"/><text x="38.6040%" y="127.50">eva..</text></g><g><title>associated_item (135,832 samples, 0.11%)</title><rect x="41.6868%" y="85" width="0.1092%" height="15" fill="rgb(253,215,40)"/><text x="41.9368%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (124,472 samples, 0.10%)</title><rect x="41.6959%" y="69" width="0.1000%" height="15" fill="rgb(211,81,21)"/><text x="41.9459%" y="79.50"></text></g><g><title>impl_item_implementor_ids (226,712 samples, 0.18%)</title><rect x="41.6381%" y="117" width="0.1822%" height="15" fill="rgb(208,190,38)"/><text x="41.8881%" y="127.50"></text></g><g><title>associated_items (201,022 samples, 0.16%)</title><rect x="41.6587%" y="101" width="0.1616%" height="15" fill="rgb(235,213,38)"/><text x="41.9087%" y="111.50"></text></g><g><title>item_attrs (130,112 samples, 0.10%)</title><rect x="41.8696%" y="117" width="0.1046%" height="15" fill="rgb(237,122,38)"/><text x="42.1196%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (127,162 samples, 0.10%)</title><rect x="41.8720%" y="101" width="0.1022%" height="15" fill="rgb(244,218,35)"/><text x="42.1220%" y="111.50"></text></g><g><title>predicates_of (182,850 samples, 0.15%)</title><rect x="42.1042%" y="117" width="0.1470%" height="15" fill="rgb(240,68,47)"/><text x="42.3542%" y="127.50"></text></g><g><title>associated_item (151,492 samples, 0.12%)</title><rect x="44.6045%" y="85" width="0.1218%" height="15" fill="rgb(210,16,53)"/><text x="44.8545%" y="95.50"></text></g><g><title>associated_items (203,302 samples, 0.16%)</title><rect x="44.5668%" y="101" width="0.1634%" height="15" fill="rgb(235,124,12)"/><text x="44.8168%" y="111.50"></text></g><g><title>evaluate_obligation (422,302 samples, 0.34%)</title><rect x="44.8076%" y="101" width="0.3394%" height="15" fill="rgb(224,169,11)"/><text x="45.0576%" y="111.50"></text></g><g><title>method_autoderef_steps (139,481 samples, 0.11%)</title><rect x="45.3523%" y="101" width="0.1121%" height="15" fill="rgb(250,166,2)"/><text x="45.6023%" y="111.50"></text></g><g><title>predicates_of (142,931 samples, 0.11%)</title><rect x="45.4678%" y="101" width="0.1149%" height="15" fill="rgb(242,216,29)"/><text x="45.7178%" y="111.50"></text></g><g><title>typeck (4,086,170 samples, 3.28%)</title><rect x="42.3486%" y="117" width="3.2842%" height="15" fill="rgb(230,116,27)"/><text x="42.5986%" y="127.50">typ..</text></g><g><title>item_bodies_checking (23,124,952 samples, 18.59%)</title><rect x="27.0693%" y="165" width="18.5863%" height="15" fill="rgb(228,99,48)"/><text x="27.3193%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,122,612 samples, 18.58%)</title><rect x="27.0712%" y="149" width="18.5844%" height="15" fill="rgb(253,11,6)"/><text x="27.3212%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,036,902 samples, 18.52%)</title><rect x="27.1401%" y="133" width="18.5155%" height="15" fill="rgb(247,143,39)"/><text x="27.3901%" y="143.50">typeck</text></g><g><title>item_types_checking (2,242,702 samples, 1.80%)</title><rect x="45.6556%" y="165" width="1.8025%" height="15" fill="rgb(236,97,10)"/><text x="45.9056%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,237,462 samples, 1.80%)</title><rect x="45.6598%" y="149" width="1.7983%" height="15" fill="rgb(233,208,19)"/><text x="45.9098%" y="159.50">c..</text></g><g><title>late_bound_vars_map (418,124 samples, 0.34%)</title><rect x="48.5111%" y="117" width="0.3361%" height="15" fill="rgb(216,164,2)"/><text x="48.7611%" y="127.50"></text></g><g><title>resolve_lifetimes (354,663 samples, 0.29%)</title><rect x="48.5621%" y="101" width="0.2851%" height="15" fill="rgb(220,129,5)"/><text x="48.8121%" y="111.50"></text></g><g><title>fn_sig (1,208,351 samples, 0.97%)</title><rect x="48.0187%" y="133" width="0.9712%" height="15" fill="rgb(242,17,10)"/><text x="48.2687%" y="143.50"></text></g><g><title>type_param_predicates (162,700 samples, 0.13%)</title><rect x="48.8592%" y="117" width="0.1308%" height="15" fill="rgb(242,107,0)"/><text x="49.1092%" y="127.50"></text></g><g><title>is_late_bound_map (190,881 samples, 0.15%)</title><rect x="49.2297%" y="117" width="0.1534%" height="15" fill="rgb(251,28,31)"/><text x="49.4797%" y="127.50"></text></g><g><title>resolve_lifetimes (173,681 samples, 0.14%)</title><rect x="49.2435%" y="101" width="0.1396%" height="15" fill="rgb(233,223,10)"/><text x="49.4935%" y="111.50"></text></g><g><title>generics_of (565,254 samples, 0.45%)</title><rect x="48.9899%" y="133" width="0.4543%" height="15" fill="rgb(215,21,27)"/><text x="49.2399%" y="143.50"></text></g><g><title>late_bound_vars_map (428,232 samples, 0.34%)</title><rect x="50.2613%" y="85" width="0.3442%" height="15" fill="rgb(232,23,21)"/><text x="50.5113%" y="95.50"></text></g><g><title>resolve_lifetimes (397,031 samples, 0.32%)</title><rect x="50.2864%" y="69" width="0.3191%" height="15" fill="rgb(244,5,23)"/><text x="50.5364%" y="79.50"></text></g><g><title>explicit_predicates_of (1,037,770 samples, 0.83%)</title><rect x="49.8560%" y="101" width="0.8341%" height="15" fill="rgb(226,81,46)"/><text x="50.1060%" y="111.50"></text></g><g><title>predicates_of (1,921,790 samples, 1.54%)</title><rect x="49.5664%" y="133" width="1.5446%" height="15" fill="rgb(247,70,30)"/><text x="49.8164%" y="143.50"></text></g><g><title>predicates_defined_on (1,773,970 samples, 1.43%)</title><rect x="49.6852%" y="117" width="1.4258%" height="15" fill="rgb(212,68,19)"/><text x="49.9352%" y="127.50"></text></g><g><title>inferred_outlives_of (523,665 samples, 0.42%)</title><rect x="50.6901%" y="101" width="0.4209%" height="15" fill="rgb(240,187,13)"/><text x="50.9401%" y="111.50"></text></g><g><title>inferred_outlives_crate (473,365 samples, 0.38%)</title><rect x="50.7306%" y="85" width="0.3805%" height="15" fill="rgb(223,113,26)"/><text x="50.9806%" y="95.50"></text></g><g><title>type_of (375,184 samples, 0.30%)</title><rect x="50.8095%" y="69" width="0.3015%" height="15" fill="rgb(206,192,2)"/><text x="51.0595%" y="79.50"></text></g><g><title>type_param_predicates (256,932 samples, 0.21%)</title><rect x="50.9045%" y="53" width="0.2065%" height="15" fill="rgb(241,108,4)"/><text x="51.1545%" y="63.50"></text></g><g><title>type_param_predicates (240,251 samples, 0.19%)</title><rect x="50.9179%" y="37" width="0.1931%" height="15" fill="rgb(247,173,49)"/><text x="51.1679%" y="47.50"></text></g><g><title>type_collecting (4,918,149 samples, 3.95%)</title><rect x="47.4596%" y="165" width="3.9529%" height="15" fill="rgb(224,114,35)"/><text x="47.7096%" y="175.50">type..</text></g><g><title>collect_mod_item_types (4,898,058 samples, 3.94%)</title><rect x="47.4758%" y="149" width="3.9367%" height="15" fill="rgb(245,159,27)"/><text x="47.7258%" y="159.50">coll..</text></g><g><title>type_of (375,124 samples, 0.30%)</title><rect x="51.1110%" y="133" width="0.3015%" height="15" fill="rgb(245,172,44)"/><text x="51.3610%" y="143.50"></text></g><g><title>evaluate_obligation (741,426 samples, 0.60%)</title><rect x="54.5270%" y="133" width="0.5959%" height="15" fill="rgb(236,23,11)"/><text x="54.7770%" y="143.50"></text></g><g><title>implied_outlives_bounds (450,265 samples, 0.36%)</title><rect x="55.1229%" y="133" width="0.3619%" height="15" fill="rgb(205,117,38)"/><text x="55.3729%" y="143.50"></text></g><g><title>param_env (766,006 samples, 0.62%)</title><rect x="55.4848%" y="133" width="0.6157%" height="15" fill="rgb(237,72,25)"/><text x="55.7348%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,904,516 samples, 4.75%)</title><rect x="51.6723%" y="149" width="4.7456%" height="15" fill="rgb(244,70,9)"/><text x="51.9223%" y="159.50">check_..</text></g><g><title>region_scope_tree (395,004 samples, 0.32%)</title><rect x="56.1005%" y="133" width="0.3175%" height="15" fill="rgb(217,125,39)"/><text x="56.3505%" y="143.50"></text></g><g><title>evaluate_obligation (285,174 samples, 0.23%)</title><rect x="58.7723%" y="133" width="0.2292%" height="15" fill="rgb(235,36,10)"/><text x="59.0223%" y="143.50"></text></g><g><title>implied_outlives_bounds (170,441 samples, 0.14%)</title><rect x="59.0898%" y="133" width="0.1370%" height="15" fill="rgb(251,123,47)"/><text x="59.3398%" y="143.50"></text></g><g><title>param_env (584,846 samples, 0.47%)</title><rect x="59.2268%" y="133" width="0.4701%" height="15" fill="rgb(221,13,13)"/><text x="59.4768%" y="143.50"></text></g><g><title>predicates_of (133,100 samples, 0.11%)</title><rect x="59.6968%" y="133" width="0.1070%" height="15" fill="rgb(238,131,9)"/><text x="59.9468%" y="143.50"></text></g><g><title>trait_impls_of (265,283 samples, 0.21%)</title><rect x="59.8295%" y="133" width="0.2132%" height="15" fill="rgb(211,50,8)"/><text x="60.0795%" y="143.50"></text></g><g><title>check_item_well_formed (4,571,039 samples, 3.67%)</title><rect x="56.4179%" y="149" width="3.6739%" height="15" fill="rgb(245,182,24)"/><text x="56.6679%" y="159.50">chec..</text></g><g><title>evaluate_obligation (206,372 samples, 0.17%)</title><rect x="60.8577%" y="133" width="0.1659%" height="15" fill="rgb(242,14,37)"/><text x="61.1077%" y="143.50"></text></g><g><title>implied_outlives_bounds (194,931 samples, 0.16%)</title><rect x="61.0236%" y="133" width="0.1567%" height="15" fill="rgb(246,228,12)"/><text x="61.2736%" y="143.50"></text></g><g><title>param_env (151,412 samples, 0.12%)</title><rect x="61.1802%" y="133" width="0.1217%" height="15" fill="rgb(213,55,15)"/><text x="61.4302%" y="143.50"></text></g><g><title>analysis (74,023,411 samples, 59.49%)</title><rect x="1.8485%" y="197" width="59.4950%" height="15" fill="rgb(209,9,3)"/><text x="2.0985%" y="207.50">analysis</text></g><g><title>type_check_crate (43,950,730 samples, 35.32%)</title><rect x="26.0189%" y="181" width="35.3246%" height="15" fill="rgb(230,59,30)"/><text x="26.2689%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,350,404 samples, 9.93%)</title><rect x="51.4171%" y="165" width="9.9264%" height="15" fill="rgb(209,121,21)"/><text x="51.6671%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,557,365 samples, 1.25%)</title><rect x="60.0918%" y="149" width="1.2517%" height="15" fill="rgb(220,109,13)"/><text x="60.3418%" y="159.50"></text></g><g><title>codegen_module (273,842 samples, 0.22%)</title><rect x="61.7415%" y="181" width="0.2201%" height="15" fill="rgb(232,18,1)"/><text x="61.9915%" y="191.50"></text></g><g><title>codegen_crate (786,258 samples, 0.63%)</title><rect x="61.3519%" y="197" width="0.6319%" height="15" fill="rgb(215,41,42)"/><text x="61.6019%" y="207.50"></text></g><g><title>LLVM_module_codegen (865,818 samples, 0.70%)</title><rect x="61.9922%" y="181" width="0.6959%" height="15" fill="rgb(224,123,36)"/><text x="62.2422%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (790,178 samples, 0.64%)</title><rect x="62.0530%" y="165" width="0.6351%" height="15" fill="rgb(240,125,3)"/><text x="62.3030%" y="175.50"></text></g><g><title>codegen_module_optimize (1,064,160 samples, 0.86%)</title><rect x="61.9838%" y="197" width="0.8553%" height="15" fill="rgb(205,98,50)"/><text x="62.2338%" y="207.50"></text></g><g><title>LLVM_module_optimize (187,932 samples, 0.15%)</title><rect x="62.6881%" y="181" width="0.1510%" height="15" fill="rgb(205,185,37)"/><text x="62.9381%" y="191.50"></text></g><g><title>AST_validation (269,963 samples, 0.22%)</title><rect x="62.9965%" y="181" width="0.2170%" height="15" fill="rgb(238,207,15)"/><text x="63.2465%" y="191.50"></text></g><g><title>metadata_register_crate (208,651 samples, 0.17%)</title><rect x="76.9169%" y="149" width="0.1677%" height="15" fill="rgb(213,199,42)"/><text x="77.1669%" y="159.50"></text></g><g><title>macro_expand_crate (17,389,154 samples, 13.98%)</title><rect x="63.3540%" y="181" width="13.9762%" height="15" fill="rgb(235,201,11)"/><text x="63.6040%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,374,734 samples, 13.96%)</title><rect x="63.3656%" y="165" width="13.9646%" height="15" fill="rgb(207,46,11)"/><text x="63.6156%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (305,643 samples, 0.25%)</title><rect x="77.0846%" y="149" width="0.2457%" height="15" fill="rgb(241,35,35)"/><text x="77.3346%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (143,701 samples, 0.12%)</title><rect x="77.3344%" y="181" width="0.1155%" height="15" fill="rgb(243,32,47)"/><text x="77.5844%" y="191.50"></text></g><g><title>finalize_macro_resolutions (307,073 samples, 0.25%)</title><rect x="77.5124%" y="165" width="0.2468%" height="15" fill="rgb(247,202,23)"/><text x="77.7624%" y="175.50"></text></g><g><title>late_resolve_crate (2,526,566 samples, 2.03%)</title><rect x="77.7592%" y="165" width="2.0307%" height="15" fill="rgb(219,102,11)"/><text x="78.0092%" y="175.50">l..</text></g><g><title>configure_and_expand (21,256,863 samples, 17.08%)</title><rect x="62.8391%" y="197" width="17.0848%" height="15" fill="rgb(243,110,44)"/><text x="63.0891%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,078,211 samples, 2.47%)</title><rect x="77.4499%" y="181" width="2.4741%" height="15" fill="rgb(222,74,54)"/><text x="77.6999%" y="191.50">re..</text></g><g><title>drop_ast (341,183 samples, 0.27%)</title><rect x="79.9240%" y="197" width="0.2742%" height="15" fill="rgb(216,99,12)"/><text x="80.1740%" y="207.50"></text></g><g><title>early_lint_checks (593,616 samples, 0.48%)</title><rect x="80.2173%" y="197" width="0.4771%" height="15" fill="rgb(226,22,26)"/><text x="80.4673%" y="207.50"></text></g><g><title>free_global_ctxt (3,033,381 samples, 2.44%)</title><rect x="80.6944%" y="197" width="2.4380%" height="15" fill="rgb(217,163,10)"/><text x="80.9444%" y="207.50">fr..</text></g><g><title>exported_symbols (194,822 samples, 0.16%)</title><rect x="84.5505%" y="181" width="0.1566%" height="15" fill="rgb(213,25,53)"/><text x="84.8005%" y="191.50"></text></g><g><title>is_sized_raw (236,841 samples, 0.19%)</title><rect x="87.3065%" y="149" width="0.1904%" height="15" fill="rgb(252,105,26)"/><text x="87.5565%" y="159.50"></text></g><g><title>evaluate_obligation (182,041 samples, 0.15%)</title><rect x="87.3505%" y="133" width="0.1463%" height="15" fill="rgb(220,39,43)"/><text x="87.6005%" y="143.50"></text></g><g><title>layout_of (132,832 samples, 0.11%)</title><rect x="87.4968%" y="149" width="0.1068%" height="15" fill="rgb(229,68,48)"/><text x="87.7468%" y="159.50"></text></g><g><title>layout_of (788,137 samples, 0.63%)</title><rect x="87.0787%" y="165" width="0.6335%" height="15" fill="rgb(252,8,32)"/><text x="87.3287%" y="175.50"></text></g><g><title>needs_drop_raw (245,162 samples, 0.20%)</title><rect x="90.0823%" y="149" width="0.1970%" height="15" fill="rgb(223,20,43)"/><text x="90.3323%" y="159.50"></text></g><g><title>is_copy_raw (205,662 samples, 0.17%)</title><rect x="90.1141%" y="133" width="0.1653%" height="15" fill="rgb(229,81,49)"/><text x="90.3641%" y="143.50"></text></g><g><title>evaluate_obligation (141,172 samples, 0.11%)</title><rect x="90.1659%" y="117" width="0.1135%" height="15" fill="rgb(236,28,36)"/><text x="90.4159%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,387,273 samples, 2.72%)</title><rect x="87.7121%" y="165" width="2.7225%" height="15" fill="rgb(249,185,26)"/><text x="87.9621%" y="175.50">mi..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (153,180 samples, 0.12%)</title><rect x="90.3115%" y="149" width="0.1231%" height="15" fill="rgb(249,174,33)"/><text x="90.5615%" y="159.50"></text></g><g><title>eval_to_const_value_raw (129,351 samples, 0.10%)</title><rect x="90.4454%" y="149" width="0.1040%" height="15" fill="rgb(233,201,37)"/><text x="90.6954%" y="159.50"></text></g><g><title>optimized_mir (7,168,433 samples, 5.76%)</title><rect x="84.7930%" y="181" width="5.7615%" height="15" fill="rgb(221,78,26)"/><text x="85.0430%" y="191.50">optimiz..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (149,241 samples, 0.12%)</title><rect x="90.4346%" y="165" width="0.1199%" height="15" fill="rgb(250,127,30)"/><text x="90.6846%" y="175.50"></text></g><g><title>generate_crate_metadata (9,306,892 samples, 7.48%)</title><rect x="83.1324%" y="197" width="7.4802%" height="15" fill="rgb(230,49,44)"/><text x="83.3824%" y="207.50">generate_c..</text></g><g><title>hir_lowering (6,357,894 samples, 5.11%)</title><rect x="90.6126%" y="197" width="5.1100%" height="15" fill="rgb(229,67,23)"/><text x="90.8626%" y="207.50">hir_lo..</text></g><g><title>link_crate (1,324,773 samples, 1.06%)</title><rect x="95.7437%" y="181" width="1.0648%" height="15" fill="rgb(249,83,47)"/><text x="95.9937%" y="191.50"></text></g><g><title>link_binary (1,288,133 samples, 1.04%)</title><rect x="95.7731%" y="165" width="1.0353%" height="15" fill="rgb(215,43,3)"/><text x="96.0231%" y="175.50"></text></g><g><title>link_rlib (908,179 samples, 0.73%)</title><rect x="96.0785%" y="149" width="0.7299%" height="15" fill="rgb(238,154,13)"/><text x="96.3285%" y="159.50"></text></g><g><title>link (1,359,423 samples, 1.09%)</title><rect x="95.7227%" y="197" width="1.0926%" height="15" fill="rgb(219,56,2)"/><text x="95.9727%" y="207.50"></text></g><g><title>parse_crate (1,809,928 samples, 1.45%)</title><rect x="96.8153%" y="197" width="1.4547%" height="15" fill="rgb(233,0,4)"/><text x="97.0653%" y="207.50"></text></g><g><title>prepare_outputs (266,803 samples, 0.21%)</title><rect x="98.2757%" y="197" width="0.2144%" height="15" fill="rgb(235,30,7)"/><text x="98.5257%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,394,744 samples, 1.12%)</title><rect x="98.4902%" y="197" width="1.1210%" height="15" fill="rgb(250,79,13)"/><text x="98.7402%" y="207.50"></text></g><g><title>all (124,419,564 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (124,419,564 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (363,634 samples, 0.29%)</title><rect x="99.7077%" y="197" width="0.2923%" height="15" fill="rgb(235,168,5)"/><text x="99.9577%" y="207.50"></text></g></svg></svg>