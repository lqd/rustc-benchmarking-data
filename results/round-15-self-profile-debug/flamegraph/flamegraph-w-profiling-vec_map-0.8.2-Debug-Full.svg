<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,789,050 samples, 2.11%)</title><rect x="0.4962%" y="181" width="2.1067%" height="15" fill="rgb(227,0,7)"/><text x="0.7462%" y="191.50">L..</text></g><g><title>param_env (508,503 samples, 0.28%)</title><rect x="11.4850%" y="101" width="0.2827%" height="15" fill="rgb(217,0,24)"/><text x="11.7350%" y="111.50"></text></g><g><title>item_attrs (298,273 samples, 0.17%)</title><rect x="12.3266%" y="69" width="0.1658%" height="15" fill="rgb(221,193,54)"/><text x="12.5766%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (286,913 samples, 0.16%)</title><rect x="12.3330%" y="53" width="0.1595%" height="15" fill="rgb(248,212,6)"/><text x="12.5830%" y="63.50"></text></g><g><title>codegen_fn_attrs (389,244 samples, 0.22%)</title><rect x="12.2826%" y="85" width="0.2164%" height="15" fill="rgb(208,68,35)"/><text x="12.5326%" y="95.50"></text></g><g><title>adt_drop_tys (328,585 samples, 0.18%)</title><rect x="14.2782%" y="53" width="0.1827%" height="15" fill="rgb(232,128,0)"/><text x="14.5282%" y="63.50"></text></g><g><title>needs_drop_raw (1,664,551 samples, 0.93%)</title><rect x="14.1783%" y="69" width="0.9255%" height="15" fill="rgb(207,160,47)"/><text x="14.4283%" y="79.50"></text></g><g><title>is_copy_raw (1,156,204 samples, 0.64%)</title><rect x="14.4609%" y="53" width="0.6428%" height="15" fill="rgb(228,23,34)"/><text x="14.7109%" y="63.50"></text></g><g><title>evaluate_obligation (959,393 samples, 0.53%)</title><rect x="14.5703%" y="37" width="0.5334%" height="15" fill="rgb(218,30,26)"/><text x="14.8203%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (830,487 samples, 0.46%)</title><rect x="15.3041%" y="53" width="0.4617%" height="15" fill="rgb(220,122,19)"/><text x="15.5541%" y="63.50"></text></g><g><title>resolve_instance (1,563,241 samples, 0.87%)</title><rect x="15.1037%" y="69" width="0.8691%" height="15" fill="rgb(250,228,42)"/><text x="15.3537%" y="79.50"></text></g><g><title>thir_body (1,039,123 samples, 0.58%)</title><rect x="15.9947%" y="69" width="0.5777%" height="15" fill="rgb(240,193,28)"/><text x="16.2447%" y="79.50"></text></g><g><title>mir_const (10,221,885 samples, 5.68%)</title><rect x="10.9124%" y="117" width="5.6833%" height="15" fill="rgb(216,20,37)"/><text x="11.1624%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (8,683,556 samples, 4.83%)</title><rect x="11.7677%" y="101" width="4.8280%" height="15" fill="rgb(206,188,39)"/><text x="12.0177%" y="111.50">unsafe..</text></g><g><title>mir_built (7,368,165 samples, 4.10%)</title><rect x="12.4990%" y="85" width="4.0966%" height="15" fill="rgb(217,207,13)"/><text x="12.7490%" y="95.50">mir_..</text></g><g><title>mir_promoted (11,160,955 samples, 6.21%)</title><rect x="10.4230%" y="133" width="6.2054%" height="15" fill="rgb(231,73,38)"/><text x="10.6730%" y="143.50">mir_prom..</text></g><g><title>type_op_normalize_fn_sig (708,119 samples, 0.39%)</title><rect x="16.7087%" y="133" width="0.3937%" height="15" fill="rgb(225,20,46)"/><text x="16.9587%" y="143.50"></text></g><g><title>normalize_projection_ty (435,427 samples, 0.24%)</title><rect x="16.8603%" y="117" width="0.2421%" height="15" fill="rgb(210,31,41)"/><text x="17.1103%" y="127.50"></text></g><g><title>type_op_normalize_predicate (757,670 samples, 0.42%)</title><rect x="17.1024%" y="133" width="0.4213%" height="15" fill="rgb(221,200,47)"/><text x="17.3524%" y="143.50"></text></g><g><title>normalize_projection_ty (214,583 samples, 0.12%)</title><rect x="17.4043%" y="117" width="0.1193%" height="15" fill="rgb(226,26,5)"/><text x="17.6543%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,132,619 samples, 2.30%)</title><rect x="17.5335%" y="133" width="2.2977%" height="15" fill="rgb(249,33,26)"/><text x="17.7835%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (30,394,255 samples, 16.90%)</title><rect x="2.9330%" y="165" width="16.8989%" height="15" fill="rgb(235,183,28)"/><text x="3.1830%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (30,221,334 samples, 16.80%)</title><rect x="3.0291%" y="149" width="16.8027%" height="15" fill="rgb(221,5,38)"/><text x="3.2791%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (398,694 samples, 0.22%)</title><rect x="19.8545%" y="165" width="0.2217%" height="15" fill="rgb(247,18,42)"/><text x="20.1045%" y="175.50"></text></g><g><title>get_lang_items (208,853 samples, 0.12%)</title><rect x="20.4452%" y="117" width="0.1161%" height="15" fill="rgb(241,131,45)"/><text x="20.6952%" y="127.50"></text></g><g><title>item_attrs (218,263 samples, 0.12%)</title><rect x="20.7653%" y="85" width="0.1214%" height="15" fill="rgb(249,31,29)"/><text x="21.0153%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (208,903 samples, 0.12%)</title><rect x="20.7705%" y="69" width="0.1161%" height="15" fill="rgb(225,111,53)"/><text x="21.0205%" y="79.50"></text></g><g><title>codegen_fn_attrs (392,895 samples, 0.22%)</title><rect x="20.7071%" y="101" width="0.2184%" height="15" fill="rgb(238,160,17)"/><text x="20.9571%" y="111.50"></text></g><g><title>should_inherit_track_caller (678,168 samples, 0.38%)</title><rect x="20.5613%" y="117" width="0.3771%" height="15" fill="rgb(214,148,48)"/><text x="20.8113%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,083,234 samples, 0.60%)</title><rect x="20.3536%" y="133" width="0.6023%" height="15" fill="rgb(232,36,49)"/><text x="20.6036%" y="143.50"></text></g><g><title>check_mod_attrs (1,560,346 samples, 0.87%)</title><rect x="20.0885%" y="149" width="0.8675%" height="15" fill="rgb(209,103,24)"/><text x="20.3385%" y="159.50"></text></g><g><title>check_mod_const_bodies (293,653 samples, 0.16%)</title><rect x="20.9560%" y="149" width="0.1633%" height="15" fill="rgb(229,88,8)"/><text x="21.2060%" y="159.50"></text></g><g><title>lookup_deprecation_entry (319,082 samples, 0.18%)</title><rect x="21.4337%" y="133" width="0.1774%" height="15" fill="rgb(213,181,19)"/><text x="21.6837%" y="143.50"></text></g><g><title>stability_index (221,782 samples, 0.12%)</title><rect x="21.4878%" y="117" width="0.1233%" height="15" fill="rgb(254,191,54)"/><text x="21.7378%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (887,600 samples, 0.49%)</title><rect x="21.2115%" y="149" width="0.4935%" height="15" fill="rgb(241,83,37)"/><text x="21.4615%" y="159.50"></text></g><g><title>misc_checking_1 (3,032,363 samples, 1.69%)</title><rect x="20.0763%" y="165" width="1.6860%" height="15" fill="rgb(233,36,39)"/><text x="20.3263%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (487,455 samples, 0.27%)</title><rect x="21.7630%" y="149" width="0.2710%" height="15" fill="rgb(226,3,54)"/><text x="22.0130%" y="159.50"></text></g><g><title>check_mod_liveness (410,564 samples, 0.23%)</title><rect x="21.8058%" y="133" width="0.2283%" height="15" fill="rgb(245,192,40)"/><text x="22.0558%" y="143.50"></text></g><g><title>misc_checking_2 (991,520 samples, 0.55%)</title><rect x="21.7623%" y="165" width="0.5513%" height="15" fill="rgb(238,167,29)"/><text x="22.0123%" y="175.50"></text></g><g><title>match_checking (502,755 samples, 0.28%)</title><rect x="22.0340%" y="149" width="0.2795%" height="15" fill="rgb(232,182,51)"/><text x="22.2840%" y="159.50"></text></g><g><title>check_match (464,514 samples, 0.26%)</title><rect x="22.0553%" y="133" width="0.2583%" height="15" fill="rgb(231,60,39)"/><text x="22.3053%" y="143.50"></text></g><g><title>check_private_in_public (215,463 samples, 0.12%)</title><rect x="22.3178%" y="149" width="0.1198%" height="15" fill="rgb(208,69,12)"/><text x="22.5678%" y="159.50"></text></g><g><title>death_checking (334,723 samples, 0.19%)</title><rect x="22.4376%" y="149" width="0.1861%" height="15" fill="rgb(235,93,37)"/><text x="22.6876%" y="159.50"></text></g><g><title>param_env (183,292 samples, 0.10%)</title><rect x="22.9721%" y="117" width="0.1019%" height="15" fill="rgb(213,116,39)"/><text x="23.2221%" y="127.50"></text></g><g><title>crate_lints (1,906,961 samples, 1.06%)</title><rect x="22.6246%" y="133" width="1.0602%" height="15" fill="rgb(222,207,29)"/><text x="22.8746%" y="143.50"></text></g><g><title>type_of (1,094,580 samples, 0.61%)</title><rect x="23.0763%" y="117" width="0.6086%" height="15" fill="rgb(206,96,30)"/><text x="23.3263%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (845,998 samples, 0.47%)</title><rect x="23.2145%" y="101" width="0.4704%" height="15" fill="rgb(218,138,4)"/><text x="23.4645%" y="111.50"></text></g><g><title>lint_checking (2,287,605 samples, 1.27%)</title><rect x="22.6237%" y="149" width="1.2719%" height="15" fill="rgb(250,191,14)"/><text x="22.8737%" y="159.50"></text></g><g><title>module_lints (379,084 samples, 0.21%)</title><rect x="23.6848%" y="133" width="0.2108%" height="15" fill="rgb(239,60,40)"/><text x="23.9348%" y="143.50"></text></g><g><title>lint_mod (376,594 samples, 0.21%)</title><rect x="23.6862%" y="117" width="0.2094%" height="15" fill="rgb(206,27,48)"/><text x="23.9362%" y="127.50"></text></g><g><title>privacy_access_levels (298,873 samples, 0.17%)</title><rect x="23.8956%" y="149" width="0.1662%" height="15" fill="rgb(225,35,8)"/><text x="24.1456%" y="159.50"></text></g><g><title>privacy_checking_modules (810,259 samples, 0.45%)</title><rect x="24.0618%" y="149" width="0.4505%" height="15" fill="rgb(250,213,24)"/><text x="24.3118%" y="159.50"></text></g><g><title>check_mod_privacy (808,919 samples, 0.45%)</title><rect x="24.0625%" y="133" width="0.4497%" height="15" fill="rgb(247,123,22)"/><text x="24.3125%" y="143.50"></text></g><g><title>misc_checking_3 (3,971,873 samples, 2.21%)</title><rect x="22.3136%" y="165" width="2.2083%" height="15" fill="rgb(231,138,38)"/><text x="22.5636%" y="175.50">m..</text></g><g><title>impl_parent (2,561,952 samples, 1.42%)</title><rect x="27.2346%" y="101" width="1.4244%" height="15" fill="rgb(231,145,46)"/><text x="27.4846%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,563,121 samples, 0.87%)</title><rect x="27.7900%" y="85" width="0.8691%" height="15" fill="rgb(251,118,11)"/><text x="28.0400%" y="95.50"></text></g><g><title>impl_trait_ref (5,956,459 samples, 3.31%)</title><rect x="28.6598%" y="101" width="3.3117%" height="15" fill="rgb(217,147,25)"/><text x="28.9098%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,967,225 samples, 2.76%)</title><rect x="29.2098%" y="85" width="2.7617%" height="15" fill="rgb(247,81,37)"/><text x="29.4598%" y="95.50">me..</text></g><g><title>predicates_of (208,911 samples, 0.12%)</title><rect x="32.0415%" y="101" width="0.1162%" height="15" fill="rgb(209,12,38)"/><text x="32.2915%" y="111.50"></text></g><g><title>trait_impls_of (1,006,912 samples, 0.56%)</title><rect x="32.1584%" y="101" width="0.5598%" height="15" fill="rgb(227,1,9)"/><text x="32.4084%" y="111.50"></text></g><g><title>implementations_of_trait (267,095 samples, 0.15%)</title><rect x="32.5698%" y="85" width="0.1485%" height="15" fill="rgb(248,47,43)"/><text x="32.8198%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (204,384 samples, 0.11%)</title><rect x="32.6046%" y="69" width="0.1136%" height="15" fill="rgb(221,10,30)"/><text x="32.8546%" y="79.50"></text></g><g><title>coherent_trait (14,672,758 samples, 8.16%)</title><rect x="24.5743%" y="133" width="8.1579%" height="15" fill="rgb(210,229,1)"/><text x="24.8243%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (14,644,597 samples, 8.14%)</title><rect x="24.5899%" y="117" width="8.1422%" height="15" fill="rgb(222,148,37)"/><text x="24.8399%" y="127.50">specializat..</text></g><g><title>coherence_checking (14,784,258 samples, 8.22%)</title><rect x="24.5629%" y="149" width="8.2199%" height="15" fill="rgb(234,67,33)"/><text x="24.8129%" y="159.50">coherence_c..</text></g><g><title>associated_item (415,604 samples, 0.23%)</title><rect x="42.5928%" y="85" width="0.2311%" height="15" fill="rgb(247,98,35)"/><text x="42.8428%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (341,754 samples, 0.19%)</title><rect x="42.6338%" y="69" width="0.1900%" height="15" fill="rgb(247,138,52)"/><text x="42.8838%" y="79.50"></text></g><g><title>associated_items (577,227 samples, 0.32%)</title><rect x="42.5157%" y="101" width="0.3209%" height="15" fill="rgb(213,79,30)"/><text x="42.7657%" y="111.50"></text></g><g><title>adt_dtorck_constraint (195,792 samples, 0.11%)</title><rect x="43.0889%" y="85" width="0.1089%" height="15" fill="rgb(246,177,23)"/><text x="43.3389%" y="95.50"></text></g><g><title>dropck_outlives (552,466 samples, 0.31%)</title><rect x="42.8971%" y="101" width="0.3072%" height="15" fill="rgb(230,62,27)"/><text x="43.1471%" y="111.50"></text></g><g><title>predicates_of (446,564 samples, 0.25%)</title><rect x="44.0917%" y="85" width="0.2483%" height="15" fill="rgb(216,154,8)"/><text x="44.3417%" y="95.50"></text></g><g><title>predicates_defined_on (383,363 samples, 0.21%)</title><rect x="44.1269%" y="69" width="0.2131%" height="15" fill="rgb(244,35,45)"/><text x="44.3769%" y="79.50"></text></g><g><title>evaluate_obligation (2,309,344 samples, 1.28%)</title><rect x="43.2043%" y="101" width="1.2840%" height="15" fill="rgb(251,115,12)"/><text x="43.4543%" y="111.50"></text></g><g><title>evaluate_obligation (381,784 samples, 0.21%)</title><rect x="44.9354%" y="85" width="0.2123%" height="15" fill="rgb(240,54,50)"/><text x="45.1854%" y="95.50"></text></g><g><title>method_autoderef_steps (729,707 samples, 0.41%)</title><rect x="44.7471%" y="101" width="0.4057%" height="15" fill="rgb(233,84,52)"/><text x="44.9971%" y="111.50"></text></g><g><title>predicates_of (266,423 samples, 0.15%)</title><rect x="45.1886%" y="101" width="0.1481%" height="15" fill="rgb(207,117,47)"/><text x="45.4386%" y="111.50"></text></g><g><title>predicates_defined_on (195,773 samples, 0.11%)</title><rect x="45.2279%" y="85" width="0.1088%" height="15" fill="rgb(249,43,39)"/><text x="45.4779%" y="95.50"></text></g><g><title>evaluate_obligation (1,410,406 samples, 0.78%)</title><rect x="48.7723%" y="85" width="0.7842%" height="15" fill="rgb(209,38,44)"/><text x="49.0223%" y="95.50"></text></g><g><title>typeck (8,205,247 samples, 4.56%)</title><rect x="45.3665%" y="101" width="4.5620%" height="15" fill="rgb(236,212,23)"/><text x="45.6165%" y="111.50">typeck</text></g><g><title>item_bodies_checking (30,804,109 samples, 17.13%)</title><rect x="32.8282%" y="149" width="17.1267%" height="15" fill="rgb(242,79,21)"/><text x="33.0782%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,801,609 samples, 17.13%)</title><rect x="32.8296%" y="133" width="17.1253%" height="15" fill="rgb(211,96,35)"/><text x="33.0796%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (30,692,917 samples, 17.06%)</title><rect x="32.8900%" y="117" width="17.0649%" height="15" fill="rgb(253,215,40)"/><text x="33.1400%" y="127.50">typeck</text></g><g><title>adt_destructor (313,554 samples, 0.17%)</title><rect x="51.3260%" y="117" width="0.1743%" height="15" fill="rgb(211,81,21)"/><text x="51.5760%" y="127.50"></text></g><g><title>coherent_trait (307,574 samples, 0.17%)</title><rect x="51.3293%" y="101" width="0.1710%" height="15" fill="rgb(208,190,38)"/><text x="51.5793%" y="111.50"></text></g><g><title>specialization_graph_of (305,894 samples, 0.17%)</title><rect x="51.3302%" y="85" width="0.1701%" height="15" fill="rgb(235,213,38)"/><text x="51.5802%" y="95.50"></text></g><g><title>item_types_checking (3,089,664 samples, 1.72%)</title><rect x="49.9549%" y="149" width="1.7178%" height="15" fill="rgb(237,122,38)"/><text x="50.2049%" y="159.50"></text></g><g><title>check_mod_item_types (3,087,404 samples, 1.72%)</title><rect x="49.9562%" y="133" width="1.7166%" height="15" fill="rgb(244,218,35)"/><text x="50.2062%" y="143.50"></text></g><g><title>late_bound_vars_map (271,084 samples, 0.15%)</title><rect x="52.2940%" y="101" width="0.1507%" height="15" fill="rgb(240,68,47)"/><text x="52.5440%" y="111.50"></text></g><g><title>resolve_lifetimes (240,683 samples, 0.13%)</title><rect x="52.3109%" y="85" width="0.1338%" height="15" fill="rgb(210,16,53)"/><text x="52.5609%" y="95.50"></text></g><g><title>fn_sig (730,580 samples, 0.41%)</title><rect x="52.0525%" y="117" width="0.4062%" height="15" fill="rgb(235,124,12)"/><text x="52.3025%" y="127.50"></text></g><g><title>is_late_bound_map (816,870 samples, 0.45%)</title><rect x="52.6579%" y="101" width="0.4542%" height="15" fill="rgb(224,169,11)"/><text x="52.9079%" y="111.50"></text></g><g><title>resolve_lifetimes (746,510 samples, 0.42%)</title><rect x="52.6970%" y="85" width="0.4151%" height="15" fill="rgb(250,166,2)"/><text x="52.9470%" y="95.50"></text></g><g><title>generics_of (1,325,686 samples, 0.74%)</title><rect x="52.4587%" y="117" width="0.7371%" height="15" fill="rgb(242,216,29)"/><text x="52.7087%" y="127.50"></text></g><g><title>impl_trait_ref (185,120 samples, 0.10%)</title><rect x="53.1958%" y="117" width="0.1029%" height="15" fill="rgb(230,116,27)"/><text x="53.4458%" y="127.50"></text></g><g><title>late_bound_vars_map (413,975 samples, 0.23%)</title><rect x="53.8735%" y="69" width="0.2302%" height="15" fill="rgb(228,99,48)"/><text x="54.1235%" y="79.50"></text></g><g><title>resolve_lifetimes (398,824 samples, 0.22%)</title><rect x="53.8819%" y="53" width="0.2217%" height="15" fill="rgb(253,11,6)"/><text x="54.1319%" y="63.50"></text></g><g><title>lint_levels (240,113 samples, 0.13%)</title><rect x="53.9701%" y="37" width="0.1335%" height="15" fill="rgb(247,143,39)"/><text x="54.2201%" y="47.50"></text></g><g><title>explicit_predicates_of (1,092,130 samples, 0.61%)</title><rect x="53.5219%" y="85" width="0.6072%" height="15" fill="rgb(236,97,10)"/><text x="53.7719%" y="95.50"></text></g><g><title>predicates_of (2,514,097 samples, 1.40%)</title><rect x="53.2987%" y="117" width="1.3978%" height="15" fill="rgb(233,208,19)"/><text x="53.5487%" y="127.50"></text></g><g><title>predicates_defined_on (2,363,195 samples, 1.31%)</title><rect x="53.3826%" y="101" width="1.3139%" height="15" fill="rgb(216,164,2)"/><text x="53.6326%" y="111.50"></text></g><g><title>inferred_outlives_of (1,020,602 samples, 0.57%)</title><rect x="54.1291%" y="85" width="0.5674%" height="15" fill="rgb(220,129,5)"/><text x="54.3791%" y="95.50"></text></g><g><title>inferred_outlives_crate (960,241 samples, 0.53%)</title><rect x="54.1627%" y="69" width="0.5339%" height="15" fill="rgb(242,17,10)"/><text x="54.4127%" y="79.50"></text></g><g><title>type_of (520,903 samples, 0.29%)</title><rect x="54.4069%" y="53" width="0.2896%" height="15" fill="rgb(242,107,0)"/><text x="54.6569%" y="63.50"></text></g><g><title>type_collecting (5,837,622 samples, 3.25%)</title><rect x="51.6739%" y="149" width="3.2457%" height="15" fill="rgb(251,28,31)"/><text x="51.9239%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (5,827,782 samples, 3.24%)</title><rect x="51.6794%" y="133" width="3.2402%" height="15" fill="rgb(233,223,10)"/><text x="51.9294%" y="143.50">col..</text></g><g><title>type_of (401,104 samples, 0.22%)</title><rect x="54.6965%" y="117" width="0.2230%" height="15" fill="rgb(215,21,27)"/><text x="54.9465%" y="127.50"></text></g><g><title>evaluate_obligation (725,995 samples, 0.40%)</title><rect x="56.7159%" y="117" width="0.4036%" height="15" fill="rgb(232,23,21)"/><text x="56.9659%" y="127.50"></text></g><g><title>implied_outlives_bounds (435,984 samples, 0.24%)</title><rect x="57.1202%" y="117" width="0.2424%" height="15" fill="rgb(244,5,23)"/><text x="57.3702%" y="127.50"></text></g><g><title>param_env (510,696 samples, 0.28%)</title><rect x="57.3626%" y="117" width="0.2839%" height="15" fill="rgb(226,81,46)"/><text x="57.6126%" y="127.50"></text></g><g><title>region_scope_tree (412,082 samples, 0.23%)</title><rect x="57.6697%" y="117" width="0.2291%" height="15" fill="rgb(247,70,30)"/><text x="57.9197%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,121,982 samples, 2.85%)</title><rect x="55.0678%" y="133" width="2.8478%" height="15" fill="rgb(212,68,19)"/><text x="55.3178%" y="143.50">ch..</text></g><g><title>implied_outlives_bounds (227,345 samples, 0.13%)</title><rect x="59.5153%" y="117" width="0.1264%" height="15" fill="rgb(240,187,13)"/><text x="59.7653%" y="127.50"></text></g><g><title>param_env (443,595 samples, 0.25%)</title><rect x="59.6417%" y="117" width="0.2466%" height="15" fill="rgb(223,113,26)"/><text x="59.8917%" y="127.50"></text></g><g><title>analysis (103,437,855 samples, 57.51%)</title><rect x="2.6029%" y="181" width="57.5103%" height="15" fill="rgb(206,192,2)"/><text x="2.8529%" y="191.50">analysis</text></g><g><title>type_check_crate (64,014,354 samples, 35.59%)</title><rect x="24.5219%" y="165" width="35.5913%" height="15" fill="rgb(241,108,4)"/><text x="24.7719%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,334,459 samples, 5.19%)</title><rect x="54.9233%" y="149" width="5.1899%" height="15" fill="rgb(247,173,49)"/><text x="55.1733%" y="159.50">wf_che..</text></g><g><title>check_item_well_formed (3,952,546 samples, 2.20%)</title><rect x="57.9156%" y="133" width="2.1976%" height="15" fill="rgb(224,114,35)"/><text x="58.1656%" y="143.50">c..</text></g><g><title>codegen_module (219,762 samples, 0.12%)</title><rect x="65.0943%" y="165" width="0.1222%" height="15" fill="rgb(245,159,27)"/><text x="65.3443%" y="175.50"></text></g><g><title>codegen_crate (9,240,789 samples, 5.14%)</title><rect x="60.1197%" y="181" width="5.1378%" height="15" fill="rgb(245,172,44)"/><text x="60.3697%" y="191.50">codege..</text></g><g><title>LLVM_module_codegen (3,352,966 samples, 1.86%)</title><rect x="65.2654%" y="165" width="1.8642%" height="15" fill="rgb(236,23,11)"/><text x="65.5154%" y="175.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (3,234,675 samples, 1.80%)</title><rect x="65.3311%" y="149" width="1.7984%" height="15" fill="rgb(205,117,38)"/><text x="65.5811%" y="159.50">L..</text></g><g><title>codegen_module_optimize (3,581,328 samples, 1.99%)</title><rect x="65.2575%" y="181" width="1.9912%" height="15" fill="rgb(237,72,25)"/><text x="65.5075%" y="191.50">c..</text></g><g><title>LLVM_module_optimize (214,192 samples, 0.12%)</title><rect x="67.1296%" y="165" width="0.1191%" height="15" fill="rgb(244,70,9)"/><text x="67.3796%" y="175.50"></text></g><g><title>AST_validation (257,713 samples, 0.14%)</title><rect x="67.3651%" y="165" width="0.1433%" height="15" fill="rgb(217,125,39)"/><text x="67.6151%" y="175.50"></text></g><g><title>macro_expand_crate (15,223,253 samples, 8.46%)</title><rect x="67.6209%" y="165" width="8.4640%" height="15" fill="rgb(235,36,10)"/><text x="67.8709%" y="175.50">macro_expand..</text></g><g><title>expand_crate (15,198,693 samples, 8.45%)</title><rect x="67.6345%" y="149" width="8.4503%" height="15" fill="rgb(251,123,47)"/><text x="67.8845%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,621,519 samples, 1.46%)</title><rect x="74.6273%" y="133" width="1.4575%" height="15" fill="rgb(221,13,13)"/><text x="74.8773%" y="143.50"></text></g><g><title>metadata_register_crate (963,849 samples, 0.54%)</title><rect x="75.5489%" y="117" width="0.5359%" height="15" fill="rgb(238,131,9)"/><text x="75.7989%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (703,338 samples, 0.39%)</title><rect x="76.0874%" y="165" width="0.3910%" height="15" fill="rgb(211,50,8)"/><text x="76.3374%" y="175.50"></text></g><g><title>finalize_macro_resolutions (217,593 samples, 0.12%)</title><rect x="76.5185%" y="149" width="0.1210%" height="15" fill="rgb(245,182,24)"/><text x="76.7685%" y="159.50"></text></g><g><title>late_resolve_crate (3,232,544 samples, 1.80%)</title><rect x="76.6395%" y="149" width="1.7973%" height="15" fill="rgb(242,14,37)"/><text x="76.8895%" y="159.50">l..</text></g><g><title>configure_and_expand (20,345,867 samples, 11.31%)</title><rect x="67.2487%" y="181" width="11.3121%" height="15" fill="rgb(246,228,12)"/><text x="67.4987%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (3,745,169 samples, 2.08%)</title><rect x="76.4785%" y="165" width="2.0823%" height="15" fill="rgb(213,55,15)"/><text x="76.7285%" y="175.50">r..</text></g><g><title>drop_ast (523,516 samples, 0.29%)</title><rect x="78.5607%" y="181" width="0.2911%" height="15" fill="rgb(209,9,3)"/><text x="78.8107%" y="191.50"></text></g><g><title>early_lint_checks (1,379,944 samples, 0.77%)</title><rect x="78.8587%" y="181" width="0.7672%" height="15" fill="rgb(230,59,30)"/><text x="79.1087%" y="191.50"></text></g><g><title>free_global_ctxt (3,807,591 samples, 2.12%)</title><rect x="79.6259%" y="181" width="2.1170%" height="15" fill="rgb(209,121,21)"/><text x="79.8759%" y="191.50">f..</text></g><g><title>exported_symbols (199,192 samples, 0.11%)</title><rect x="82.8581%" y="165" width="0.1107%" height="15" fill="rgb(220,109,13)"/><text x="83.1081%" y="175.50"></text></g><g><title>layout_of (201,362 samples, 0.11%)</title><rect x="85.5458%" y="117" width="0.1120%" height="15" fill="rgb(232,18,1)"/><text x="85.7958%" y="127.50"></text></g><g><title>layout_of (504,486 samples, 0.28%)</title><rect x="85.3927%" y="133" width="0.2805%" height="15" fill="rgb(215,41,42)"/><text x="85.6427%" y="143.50"></text></g><g><title>layout_of (1,162,100 samples, 0.65%)</title><rect x="85.0412%" y="149" width="0.6461%" height="15" fill="rgb(224,123,36)"/><text x="85.2912%" y="159.50"></text></g><g><title>is_copy_raw (374,756 samples, 0.21%)</title><rect x="87.8921%" y="117" width="0.2084%" height="15" fill="rgb(240,125,3)"/><text x="88.1421%" y="127.50"></text></g><g><title>evaluate_obligation (267,625 samples, 0.15%)</title><rect x="87.9517%" y="101" width="0.1488%" height="15" fill="rgb(205,98,50)"/><text x="88.2017%" y="111.50"></text></g><g><title>needs_drop_raw (433,986 samples, 0.24%)</title><rect x="87.8605%" y="133" width="0.2413%" height="15" fill="rgb(205,185,37)"/><text x="88.1105%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,427,394 samples, 2.46%)</title><rect x="85.6873%" y="149" width="2.4616%" height="15" fill="rgb(238,207,15)"/><text x="85.9373%" y="159.50">mi..</text></g><g><title>optimized_mir (9,210,234 samples, 5.12%)</title><rect x="83.0384%" y="165" width="5.1208%" height="15" fill="rgb(213,199,42)"/><text x="83.2884%" y="175.50">optimi..</text></g><g><title>generate_crate_metadata (11,621,614 samples, 6.46%)</title><rect x="81.7429%" y="181" width="6.4615%" height="15" fill="rgb(235,201,11)"/><text x="81.9929%" y="191.50">generate..</text></g><g><title>hir_lowering (6,464,590 samples, 3.59%)</title><rect x="88.2044%" y="181" width="3.5942%" height="15" fill="rgb(207,46,11)"/><text x="88.4544%" y="191.50">hir_..</text></g><g><title>link_crate (853,719 samples, 0.47%)</title><rect x="91.8081%" y="165" width="0.4747%" height="15" fill="rgb(241,35,35)"/><text x="92.0581%" y="175.50"></text></g><g><title>link_binary (818,109 samples, 0.45%)</title><rect x="91.8279%" y="149" width="0.4549%" height="15" fill="rgb(243,32,47)"/><text x="92.0779%" y="159.50"></text></g><g><title>link_rlib (564,396 samples, 0.31%)</title><rect x="91.9690%" y="133" width="0.3138%" height="15" fill="rgb(247,202,23)"/><text x="92.2190%" y="143.50"></text></g><g><title>link (876,759 samples, 0.49%)</title><rect x="91.7986%" y="181" width="0.4875%" height="15" fill="rgb(219,102,11)"/><text x="92.0486%" y="191.50"></text></g><g><title>parse_crate (12,117,009 samples, 6.74%)</title><rect x="92.2861%" y="181" width="6.7369%" height="15" fill="rgb(243,110,44)"/><text x="92.5361%" y="191.50">parse_cra..</text></g><g><title>prepare_outputs (378,024 samples, 0.21%)</title><rect x="99.0278%" y="181" width="0.2102%" height="15" fill="rgb(222,74,54)"/><text x="99.2778%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (819,728 samples, 0.46%)</title><rect x="99.2380%" y="181" width="0.4558%" height="15" fill="rgb(216,99,12)"/><text x="99.4880%" y="191.50"></text></g><g><title>all (179,859,791 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (179,859,791 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (431,184 samples, 0.24%)</title><rect x="99.7603%" y="181" width="0.2397%" height="15" fill="rgb(213,25,53)"/><text x="100.0103%" y="191.50"></text></g></svg></svg>