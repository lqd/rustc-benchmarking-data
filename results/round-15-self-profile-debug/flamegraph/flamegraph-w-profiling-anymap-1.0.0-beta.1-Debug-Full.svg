<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,788,378 samples, 2.80%)</title><rect x="0.5861%" y="213" width="2.8028%" height="15" fill="rgb(227,0,7)"/><text x="0.8361%" y="223.50">LL..</text></g><g><title>implied_outlives_bounds (778,275 samples, 0.58%)</title><rect x="10.7951%" y="165" width="0.5758%" height="15" fill="rgb(217,0,24)"/><text x="11.0451%" y="175.50"></text></g><g><title>param_env (301,932 samples, 0.22%)</title><rect x="12.4891%" y="133" width="0.2234%" height="15" fill="rgb(221,193,54)"/><text x="12.7391%" y="143.50"></text></g><g><title>item_attrs (232,863 samples, 0.17%)</title><rect x="13.0684%" y="101" width="0.1723%" height="15" fill="rgb(248,212,6)"/><text x="13.3184%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (223,453 samples, 0.17%)</title><rect x="13.0753%" y="85" width="0.1653%" height="15" fill="rgb(208,68,35)"/><text x="13.3253%" y="95.50"></text></g><g><title>codegen_fn_attrs (335,554 samples, 0.25%)</title><rect x="13.0011%" y="117" width="0.2483%" height="15" fill="rgb(232,128,0)"/><text x="13.2511%" y="127.50"></text></g><g><title>is_copy_raw (382,085 samples, 0.28%)</title><rect x="14.8005%" y="101" width="0.2827%" height="15" fill="rgb(207,160,47)"/><text x="15.0505%" y="111.50"></text></g><g><title>evaluate_obligation (310,254 samples, 0.23%)</title><rect x="14.8537%" y="85" width="0.2295%" height="15" fill="rgb(228,23,34)"/><text x="15.1037%" y="95.50"></text></g><g><title>adt_drop_tys (175,962 samples, 0.13%)</title><rect x="15.3787%" y="69" width="0.1302%" height="15" fill="rgb(218,30,26)"/><text x="15.6287%" y="79.50"></text></g><g><title>adt_drop_tys (642,847 samples, 0.48%)</title><rect x="15.1806%" y="85" width="0.4756%" height="15" fill="rgb(220,122,19)"/><text x="15.4306%" y="95.50"></text></g><g><title>needs_drop_raw (1,557,595 samples, 1.15%)</title><rect x="15.0832%" y="101" width="1.1524%" height="15" fill="rgb(250,228,42)"/><text x="15.3332%" y="111.50"></text></g><g><title>is_copy_raw (783,096 samples, 0.58%)</title><rect x="15.6562%" y="85" width="0.5794%" height="15" fill="rgb(240,193,28)"/><text x="15.9062%" y="95.50"></text></g><g><title>evaluate_obligation (549,375 samples, 0.41%)</title><rect x="15.8291%" y="69" width="0.4064%" height="15" fill="rgb(216,20,37)"/><text x="16.0791%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (195,492 samples, 0.14%)</title><rect x="16.3661%" y="85" width="0.1446%" height="15" fill="rgb(206,188,39)"/><text x="16.6161%" y="95.50"></text></g><g><title>resolve_instance (517,282 samples, 0.38%)</title><rect x="16.2356%" y="101" width="0.3827%" height="15" fill="rgb(217,207,13)"/><text x="16.4856%" y="111.50"></text></g><g><title>thir_body (635,676 samples, 0.47%)</title><rect x="16.6389%" y="101" width="0.4703%" height="15" fill="rgb(231,73,38)"/><text x="16.8889%" y="111.50"></text></g><g><title>mir_const (6,997,888 samples, 5.18%)</title><rect x="11.9564%" y="149" width="5.1773%" height="15" fill="rgb(225,20,46)"/><text x="12.2064%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (5,975,981 samples, 4.42%)</title><rect x="12.7124%" y="133" width="4.4212%" height="15" fill="rgb(210,31,41)"/><text x="12.9624%" y="143.50">unsaf..</text></g><g><title>mir_built (5,250,183 samples, 3.88%)</title><rect x="13.2494%" y="117" width="3.8843%" height="15" fill="rgb(221,200,47)"/><text x="13.4994%" y="127.50">mir_..</text></g><g><title>mir_promoted (7,701,416 samples, 5.70%)</title><rect x="11.4715%" y="165" width="5.6978%" height="15" fill="rgb(226,26,5)"/><text x="11.7215%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (694,506 samples, 0.51%)</title><rect x="17.1693%" y="165" width="0.5138%" height="15" fill="rgb(249,33,26)"/><text x="17.4193%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,566,639 samples, 1.90%)</title><rect x="17.7989%" y="165" width="1.8989%" height="15" fill="rgb(235,183,28)"/><text x="18.0489%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (21,632,707 samples, 16.00%)</title><rect x="3.6971%" y="197" width="16.0046%" height="15" fill="rgb(221,5,38)"/><text x="3.9471%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,506,806 samples, 15.91%)</title><rect x="3.7902%" y="181" width="15.9115%" height="15" fill="rgb(247,18,42)"/><text x="4.0402%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (264,803 samples, 0.20%)</title><rect x="19.7328%" y="197" width="0.1959%" height="15" fill="rgb(241,131,45)"/><text x="19.9828%" y="207.50"></text></g><g><title>get_lang_items (142,331 samples, 0.11%)</title><rect x="20.4571%" y="117" width="0.1053%" height="15" fill="rgb(249,31,29)"/><text x="20.7071%" y="127.50"></text></g><g><title>codegen_fn_attrs (334,234 samples, 0.25%)</title><rect x="20.4324%" y="133" width="0.2473%" height="15" fill="rgb(225,111,53)"/><text x="20.6824%" y="143.50"></text></g><g><title>codegen_fn_attrs (666,098 samples, 0.49%)</title><rect x="20.1976%" y="165" width="0.4928%" height="15" fill="rgb(238,160,17)"/><text x="20.4476%" y="175.50"></text></g><g><title>should_inherit_track_caller (560,206 samples, 0.41%)</title><rect x="20.2760%" y="149" width="0.4145%" height="15" fill="rgb(214,148,48)"/><text x="20.5260%" y="159.50"></text></g><g><title>check_mod_attrs (1,002,860 samples, 0.74%)</title><rect x="19.9488%" y="181" width="0.7419%" height="15" fill="rgb(232,36,49)"/><text x="20.1988%" y="191.50"></text></g><g><title>check_mod_const_bodies (212,803 samples, 0.16%)</title><rect x="20.6907%" y="181" width="0.1574%" height="15" fill="rgb(209,103,24)"/><text x="20.9407%" y="191.50"></text></g><g><title>lookup_deprecation_entry (213,743 samples, 0.16%)</title><rect x="21.1268%" y="165" width="0.1581%" height="15" fill="rgb(229,88,8)"/><text x="21.3768%" y="175.50"></text></g><g><title>stability_index (135,662 samples, 0.10%)</title><rect x="21.1846%" y="149" width="0.1004%" height="15" fill="rgb(213,181,19)"/><text x="21.4346%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (586,346 samples, 0.43%)</title><rect x="20.9321%" y="181" width="0.4338%" height="15" fill="rgb(254,191,54)"/><text x="21.1821%" y="191.50"></text></g><g><title>misc_checking_1 (2,010,410 samples, 1.49%)</title><rect x="19.9291%" y="197" width="1.4874%" height="15" fill="rgb(241,83,37)"/><text x="20.1791%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (332,733 samples, 0.25%)</title><rect x="21.4174%" y="181" width="0.2462%" height="15" fill="rgb(233,36,39)"/><text x="21.6674%" y="191.50"></text></g><g><title>check_mod_liveness (277,493 samples, 0.21%)</title><rect x="21.4583%" y="165" width="0.2053%" height="15" fill="rgb(226,3,54)"/><text x="21.7083%" y="175.50"></text></g><g><title>misc_checking_2 (677,377 samples, 0.50%)</title><rect x="21.4164%" y="197" width="0.5011%" height="15" fill="rgb(245,192,40)"/><text x="21.6664%" y="207.50"></text></g><g><title>match_checking (343,334 samples, 0.25%)</title><rect x="21.6636%" y="181" width="0.2540%" height="15" fill="rgb(238,167,29)"/><text x="21.9136%" y="191.50"></text></g><g><title>check_match (315,344 samples, 0.23%)</title><rect x="21.6843%" y="165" width="0.2333%" height="15" fill="rgb(232,182,51)"/><text x="21.9343%" y="175.50"></text></g><g><title>check_private_in_public (168,652 samples, 0.12%)</title><rect x="21.9229%" y="181" width="0.1248%" height="15" fill="rgb(231,60,39)"/><text x="22.1729%" y="191.50"></text></g><g><title>death_checking (315,323 samples, 0.23%)</title><rect x="22.0477%" y="181" width="0.2333%" height="15" fill="rgb(208,69,12)"/><text x="22.2977%" y="191.50"></text></g><g><title>crate_lints (1,757,638 samples, 1.30%)</title><rect x="22.2820%" y="165" width="1.3004%" height="15" fill="rgb(235,93,37)"/><text x="22.5320%" y="175.50"></text></g><g><title>type_of (1,048,399 samples, 0.78%)</title><rect x="22.8068%" y="149" width="0.7756%" height="15" fill="rgb(213,116,39)"/><text x="23.0568%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (815,867 samples, 0.60%)</title><rect x="22.9788%" y="133" width="0.6036%" height="15" fill="rgb(222,207,29)"/><text x="23.2288%" y="143.50"></text></g><g><title>lint_checking (2,142,192 samples, 1.58%)</title><rect x="22.2810%" y="181" width="1.5849%" height="15" fill="rgb(206,96,30)"/><text x="22.5310%" y="191.50"></text></g><g><title>module_lints (383,164 samples, 0.28%)</title><rect x="23.5824%" y="165" width="0.2835%" height="15" fill="rgb(218,138,4)"/><text x="23.8324%" y="175.50"></text></g><g><title>lint_mod (379,804 samples, 0.28%)</title><rect x="23.5849%" y="149" width="0.2810%" height="15" fill="rgb(250,191,14)"/><text x="23.8349%" y="159.50"></text></g><g><title>privacy_access_levels (291,393 samples, 0.22%)</title><rect x="23.8659%" y="181" width="0.2156%" height="15" fill="rgb(239,60,40)"/><text x="24.1159%" y="191.50"></text></g><g><title>privacy_checking_modules (937,329 samples, 0.69%)</title><rect x="24.0815%" y="181" width="0.6935%" height="15" fill="rgb(206,27,48)"/><text x="24.3315%" y="191.50"></text></g><g><title>check_mod_privacy (934,359 samples, 0.69%)</title><rect x="24.0837%" y="165" width="0.6913%" height="15" fill="rgb(225,35,8)"/><text x="24.3337%" y="175.50"></text></g><g><title>misc_checking_3 (3,872,829 samples, 2.87%)</title><rect x="21.9176%" y="197" width="2.8652%" height="15" fill="rgb(250,213,24)"/><text x="22.1676%" y="207.50">mi..</text></g><g><title>evaluate_obligation (305,882 samples, 0.23%)</title><rect x="25.0102%" y="133" width="0.2263%" height="15" fill="rgb(247,123,22)"/><text x="25.2602%" y="143.50"></text></g><g><title>object_safety_violations (672,537 samples, 0.50%)</title><rect x="24.8752%" y="149" width="0.4976%" height="15" fill="rgb(231,138,38)"/><text x="25.1252%" y="159.50"></text></g><g><title>impl_parent (1,928,419 samples, 1.43%)</title><rect x="28.0199%" y="133" width="1.4267%" height="15" fill="rgb(231,145,46)"/><text x="28.2699%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,162,550 samples, 0.86%)</title><rect x="28.5865%" y="117" width="0.8601%" height="15" fill="rgb(251,118,11)"/><text x="28.8365%" y="127.50"></text></g><g><title>impl_trait_ref (6,075,682 samples, 4.49%)</title><rect x="29.4466%" y="133" width="4.4950%" height="15" fill="rgb(217,147,25)"/><text x="29.6966%" y="143.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,287,165 samples, 3.91%)</title><rect x="30.0300%" y="117" width="3.9116%" height="15" fill="rgb(247,81,37)"/><text x="30.2800%" y="127.50">meta..</text></g><g><title>trait_impls_of (675,297 samples, 0.50%)</title><rect x="34.0231%" y="133" width="0.4996%" height="15" fill="rgb(209,12,38)"/><text x="34.2731%" y="143.50"></text></g><g><title>implementations_of_trait (143,562 samples, 0.11%)</title><rect x="34.4165%" y="117" width="0.1062%" height="15" fill="rgb(227,1,9)"/><text x="34.6665%" y="127.50"></text></g><g><title>coherent_trait (13,095,071 samples, 9.69%)</title><rect x="24.8428%" y="165" width="9.6882%" height="15" fill="rgb(248,47,43)"/><text x="25.0928%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (12,378,704 samples, 9.16%)</title><rect x="25.3728%" y="149" width="9.1582%" height="15" fill="rgb(221,10,30)"/><text x="25.6228%" y="159.50">specializatio..</text></g><g><title>coherence_checking (13,180,532 samples, 9.75%)</title><rect x="24.8274%" y="181" width="9.7514%" height="15" fill="rgb(210,229,1)"/><text x="25.0774%" y="191.50">coherence_chec..</text></g><g><title>associated_items (176,080 samples, 0.13%)</title><rect x="45.0800%" y="133" width="0.1303%" height="15" fill="rgb(222,148,37)"/><text x="45.3300%" y="143.50"></text></g><g><title>adt_dtorck_constraint (163,592 samples, 0.12%)</title><rect x="45.4785%" y="117" width="0.1210%" height="15" fill="rgb(234,67,33)"/><text x="45.7285%" y="127.50"></text></g><g><title>dropck_outlives (512,568 samples, 0.38%)</title><rect x="45.2444%" y="133" width="0.3792%" height="15" fill="rgb(247,98,35)"/><text x="45.4944%" y="143.50"></text></g><g><title>evaluate_obligation (1,175,126 samples, 0.87%)</title><rect x="45.6236%" y="133" width="0.8694%" height="15" fill="rgb(247,138,52)"/><text x="45.8736%" y="143.50"></text></g><g><title>trait_impls_of (197,230 samples, 0.15%)</title><rect x="46.3471%" y="117" width="0.1459%" height="15" fill="rgb(213,79,30)"/><text x="46.5971%" y="127.50"></text></g><g><title>item_attrs (137,540 samples, 0.10%)</title><rect x="46.6462%" y="133" width="0.1018%" height="15" fill="rgb(246,177,23)"/><text x="46.8962%" y="143.50"></text></g><g><title>method_autoderef_steps (357,376 samples, 0.26%)</title><rect x="46.7948%" y="133" width="0.2644%" height="15" fill="rgb(230,62,27)"/><text x="47.0448%" y="143.50"></text></g><g><title>evaluate_obligation (187,445 samples, 0.14%)</title><rect x="46.9205%" y="117" width="0.1387%" height="15" fill="rgb(216,154,8)"/><text x="47.1705%" y="127.50"></text></g><g><title>predicates_of (226,743 samples, 0.17%)</title><rect x="47.1545%" y="133" width="0.1678%" height="15" fill="rgb(244,35,45)"/><text x="47.4045%" y="143.50"></text></g><g><title>predicates_defined_on (176,673 samples, 0.13%)</title><rect x="47.1915%" y="117" width="0.1307%" height="15" fill="rgb(251,115,12)"/><text x="47.4415%" y="127.50"></text></g><g><title>associated_item (327,773 samples, 0.24%)</title><rect x="49.8739%" y="101" width="0.2425%" height="15" fill="rgb(240,54,50)"/><text x="50.1239%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (256,042 samples, 0.19%)</title><rect x="49.9270%" y="85" width="0.1894%" height="15" fill="rgb(233,84,52)"/><text x="50.1770%" y="95.50"></text></g><g><title>associated_items (469,225 samples, 0.35%)</title><rect x="49.7835%" y="117" width="0.3471%" height="15" fill="rgb(207,117,47)"/><text x="50.0335%" y="127.50"></text></g><g><title>eval_to_const_value_raw (223,042 samples, 0.17%)</title><rect x="50.2120%" y="117" width="0.1650%" height="15" fill="rgb(249,43,39)"/><text x="50.4620%" y="127.50"></text></g><g><title>eval_to_const_value_raw (210,092 samples, 0.16%)</title><rect x="50.2216%" y="101" width="0.1554%" height="15" fill="rgb(209,38,44)"/><text x="50.4716%" y="111.50"></text></g><g><title>eval_to_allocation_raw (206,682 samples, 0.15%)</title><rect x="50.2241%" y="85" width="0.1529%" height="15" fill="rgb(236,212,23)"/><text x="50.4741%" y="95.50"></text></g><g><title>evaluate_obligation (794,959 samples, 0.59%)</title><rect x="50.3770%" y="117" width="0.5881%" height="15" fill="rgb(242,79,21)"/><text x="50.6270%" y="127.50"></text></g><g><title>trait_impls_of (375,244 samples, 0.28%)</title><rect x="50.6875%" y="101" width="0.2776%" height="15" fill="rgb(211,96,35)"/><text x="50.9375%" y="111.50"></text></g><g><title>predicates_of (141,791 samples, 0.10%)</title><rect x="51.3916%" y="117" width="0.1049%" height="15" fill="rgb(253,215,40)"/><text x="51.6416%" y="127.50"></text></g><g><title>typeck (5,642,576 samples, 4.17%)</title><rect x="47.3737%" y="133" width="4.1746%" height="15" fill="rgb(211,81,21)"/><text x="47.6237%" y="143.50">typeck</text></g><g><title>item_bodies_checking (22,908,590 samples, 16.95%)</title><rect x="34.6273%" y="181" width="16.9485%" height="15" fill="rgb(208,190,38)"/><text x="34.8773%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,906,410 samples, 16.95%)</title><rect x="34.6289%" y="165" width="16.9469%" height="15" fill="rgb(235,213,38)"/><text x="34.8789%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (22,821,149 samples, 16.88%)</title><rect x="34.6919%" y="149" width="16.8838%" height="15" fill="rgb(237,122,38)"/><text x="34.9419%" y="159.50">typeck</text></g><g><title>impl_trait_ref (148,081 samples, 0.11%)</title><rect x="52.4431%" y="101" width="0.1096%" height="15" fill="rgb(244,218,35)"/><text x="52.6931%" y="111.50"></text></g><g><title>adt_destructor (309,813 samples, 0.23%)</title><rect x="52.3416%" y="149" width="0.2292%" height="15" fill="rgb(240,68,47)"/><text x="52.5916%" y="159.50"></text></g><g><title>coherent_trait (306,203 samples, 0.23%)</title><rect x="52.3443%" y="133" width="0.2265%" height="15" fill="rgb(210,16,53)"/><text x="52.5943%" y="143.50"></text></g><g><title>specialization_graph_of (304,673 samples, 0.23%)</title><rect x="52.3454%" y="117" width="0.2254%" height="15" fill="rgb(235,124,12)"/><text x="52.5954%" y="127.50"></text></g><g><title>implied_outlives_bounds (185,150 samples, 0.14%)</title><rect x="52.6297%" y="149" width="0.1370%" height="15" fill="rgb(224,169,11)"/><text x="52.8797%" y="159.50"></text></g><g><title>item_types_checking (1,647,496 samples, 1.22%)</title><rect x="51.5758%" y="181" width="1.2189%" height="15" fill="rgb(250,166,2)"/><text x="51.8258%" y="191.50"></text></g><g><title>check_mod_item_types (1,644,546 samples, 1.22%)</title><rect x="51.5780%" y="165" width="1.2167%" height="15" fill="rgb(242,216,29)"/><text x="51.8280%" y="175.50"></text></g><g><title>fn_sig (630,454 samples, 0.47%)</title><rect x="53.2113%" y="149" width="0.4664%" height="15" fill="rgb(230,116,27)"/><text x="53.4613%" y="159.50"></text></g><g><title>generics_of (513,375 samples, 0.38%)</title><rect x="53.6777%" y="149" width="0.3798%" height="15" fill="rgb(228,99,48)"/><text x="53.9277%" y="159.50"></text></g><g><title>impl_trait_ref (317,572 samples, 0.23%)</title><rect x="54.0576%" y="149" width="0.2350%" height="15" fill="rgb(253,11,6)"/><text x="54.3076%" y="159.50"></text></g><g><title>lint_levels (177,482 samples, 0.13%)</title><rect x="55.0946%" y="69" width="0.1313%" height="15" fill="rgb(247,143,39)"/><text x="55.3446%" y="79.50"></text></g><g><title>late_bound_vars_map (516,846 samples, 0.38%)</title><rect x="54.8445%" y="101" width="0.3824%" height="15" fill="rgb(236,97,10)"/><text x="55.0945%" y="111.50"></text></g><g><title>resolve_lifetimes (490,036 samples, 0.36%)</title><rect x="54.8644%" y="85" width="0.3625%" height="15" fill="rgb(233,208,19)"/><text x="55.1144%" y="95.50"></text></g><g><title>explicit_predicates_of (1,033,581 samples, 0.76%)</title><rect x="54.4955%" y="117" width="0.7647%" height="15" fill="rgb(216,164,2)"/><text x="54.7455%" y="127.50"></text></g><g><title>predicates_of (248,153 samples, 0.18%)</title><rect x="55.4173%" y="85" width="0.1836%" height="15" fill="rgb(220,129,5)"/><text x="55.6673%" y="95.50"></text></g><g><title>predicates_defined_on (238,113 samples, 0.18%)</title><rect x="55.4247%" y="69" width="0.1762%" height="15" fill="rgb(242,17,10)"/><text x="55.6747%" y="79.50"></text></g><g><title>inferred_outlives_of (178,602 samples, 0.13%)</title><rect x="55.4688%" y="53" width="0.1321%" height="15" fill="rgb(242,107,0)"/><text x="55.7188%" y="63.50"></text></g><g><title>metadata_decode_entry_inferred_outlives_of (173,822 samples, 0.13%)</title><rect x="55.4723%" y="37" width="0.1286%" height="15" fill="rgb(251,28,31)"/><text x="55.7223%" y="47.50"></text></g><g><title>predicates_of (1,929,210 samples, 1.43%)</title><rect x="54.2925%" y="149" width="1.4273%" height="15" fill="rgb(233,223,10)"/><text x="54.5425%" y="159.50"></text></g><g><title>predicates_defined_on (1,824,800 samples, 1.35%)</title><rect x="54.3698%" y="133" width="1.3500%" height="15" fill="rgb(215,21,27)"/><text x="54.6198%" y="143.50"></text></g><g><title>inferred_outlives_of (621,306 samples, 0.46%)</title><rect x="55.2601%" y="117" width="0.4597%" height="15" fill="rgb(232,23,21)"/><text x="55.5101%" y="127.50"></text></g><g><title>inferred_outlives_crate (580,336 samples, 0.43%)</title><rect x="55.2905%" y="101" width="0.4294%" height="15" fill="rgb(244,5,23)"/><text x="55.5405%" y="111.50"></text></g><g><title>type_of (160,702 samples, 0.12%)</title><rect x="55.6009%" y="85" width="0.1189%" height="15" fill="rgb(226,81,46)"/><text x="55.8509%" y="95.50"></text></g><g><title>late_bound_vars_map (310,433 samples, 0.23%)</title><rect x="56.3245%" y="133" width="0.2297%" height="15" fill="rgb(247,70,30)"/><text x="56.5745%" y="143.50"></text></g><g><title>resolve_lifetimes (294,603 samples, 0.22%)</title><rect x="56.3362%" y="117" width="0.2180%" height="15" fill="rgb(212,68,19)"/><text x="56.5862%" y="127.50"></text></g><g><title>type_collecting (5,212,323 samples, 3.86%)</title><rect x="52.7957%" y="181" width="3.8563%" height="15" fill="rgb(240,187,13)"/><text x="53.0457%" y="191.50">type..</text></g><g><title>collect_mod_item_types (5,201,783 samples, 3.85%)</title><rect x="52.8035%" y="165" width="3.8485%" height="15" fill="rgb(223,113,26)"/><text x="53.0535%" y="175.50">coll..</text></g><g><title>type_of (1,195,111 samples, 0.88%)</title><rect x="55.7678%" y="149" width="0.8842%" height="15" fill="rgb(206,192,2)"/><text x="56.0178%" y="159.50"></text></g><g><title>evaluate_obligation (907,804 samples, 0.67%)</title><rect x="59.0486%" y="149" width="0.6716%" height="15" fill="rgb(241,108,4)"/><text x="59.2986%" y="159.50"></text></g><g><title>implied_outlives_bounds (639,341 samples, 0.47%)</title><rect x="59.7226%" y="149" width="0.4730%" height="15" fill="rgb(247,173,49)"/><text x="59.9726%" y="159.50"></text></g><g><title>param_env (516,056 samples, 0.38%)</title><rect x="60.1960%" y="149" width="0.3818%" height="15" fill="rgb(224,114,35)"/><text x="60.4460%" y="159.50"></text></g><g><title>region_scope_tree (287,561 samples, 0.21%)</title><rect x="60.6030%" y="149" width="0.2127%" height="15" fill="rgb(245,159,27)"/><text x="60.8530%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,511,268 samples, 4.08%)</title><rect x="56.8120%" y="165" width="4.0774%" height="15" fill="rgb(245,172,44)"/><text x="57.0620%" y="175.50">chec..</text></g><g><title>adt_sized_constraint (202,952 samples, 0.15%)</title><rect x="62.2354%" y="133" width="0.1502%" height="15" fill="rgb(236,23,11)"/><text x="62.4854%" y="143.50"></text></g><g><title>adt_sized_constraint (240,053 samples, 0.18%)</title><rect x="62.2123%" y="149" width="0.1776%" height="15" fill="rgb(205,117,38)"/><text x="62.4623%" y="159.50"></text></g><g><title>evaluate_obligation (643,209 samples, 0.48%)</title><rect x="62.3903%" y="149" width="0.4759%" height="15" fill="rgb(237,72,25)"/><text x="62.6403%" y="159.50"></text></g><g><title>implied_outlives_bounds (204,663 samples, 0.15%)</title><rect x="62.8790%" y="149" width="0.1514%" height="15" fill="rgb(244,70,9)"/><text x="63.1290%" y="159.50"></text></g><g><title>param_env (291,054 samples, 0.22%)</title><rect x="63.0304%" y="149" width="0.2153%" height="15" fill="rgb(217,125,39)"/><text x="63.2804%" y="159.50"></text></g><g><title>check_item_well_formed (3,428,832 samples, 2.54%)</title><rect x="60.8894%" y="165" width="2.5368%" height="15" fill="rgb(235,36,10)"/><text x="61.1394%" y="175.50">ch..</text></g><g><title>evaluate_obligation (183,671 samples, 0.14%)</title><rect x="63.6405%" y="149" width="0.1359%" height="15" fill="rgb(251,123,47)"/><text x="63.8905%" y="159.50"></text></g><g><title>analysis (81,750,359 samples, 60.48%)</title><rect x="3.3889%" y="213" width="60.4816%" height="15" fill="rgb(221,13,13)"/><text x="3.6389%" y="223.50">analysis</text></g><g><title>type_check_crate (52,833,129 samples, 39.09%)</title><rect x="24.7828%" y="197" width="39.0877%" height="15" fill="rgb(238,131,9)"/><text x="25.0328%" y="207.50">type_check_crate</text></g><g><title>wf_checking (9,751,598 samples, 7.21%)</title><rect x="56.6560%" y="181" width="7.2146%" height="15" fill="rgb(211,50,8)"/><text x="56.9060%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (600,678 samples, 0.44%)</title><rect x="63.4261%" y="165" width="0.4444%" height="15" fill="rgb(245,182,24)"/><text x="63.6761%" y="175.50"></text></g><g><title>codegen_module (227,333 samples, 0.17%)</title><rect x="64.1823%" y="197" width="0.1682%" height="15" fill="rgb(242,14,37)"/><text x="64.4323%" y="207.50"></text></g><g><title>codegen_crate (712,697 samples, 0.53%)</title><rect x="63.8779%" y="213" width="0.5273%" height="15" fill="rgb(246,228,12)"/><text x="64.1279%" y="223.50"></text></g><g><title>LLVM_module_codegen (3,378,053 samples, 2.50%)</title><rect x="64.4171%" y="197" width="2.4992%" height="15" fill="rgb(213,55,15)"/><text x="64.6671%" y="207.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (3,284,733 samples, 2.43%)</title><rect x="64.4861%" y="181" width="2.4302%" height="15" fill="rgb(209,9,3)"/><text x="64.7361%" y="191.50">LL..</text></g><g><title>codegen_module_optimize (3,614,076 samples, 2.67%)</title><rect x="64.4052%" y="213" width="2.6738%" height="15" fill="rgb(230,59,30)"/><text x="64.6552%" y="223.50">co..</text></g><g><title>LLVM_module_optimize (219,983 samples, 0.16%)</title><rect x="66.9162%" y="197" width="0.1628%" height="15" fill="rgb(209,121,21)"/><text x="67.1662%" y="207.50"></text></g><g><title>AST_validation (248,062 samples, 0.18%)</title><rect x="67.2146%" y="197" width="0.1835%" height="15" fill="rgb(220,109,13)"/><text x="67.4646%" y="207.50"></text></g><g><title>metadata_load_macro (198,080 samples, 0.15%)</title><rect x="77.9143%" y="165" width="0.1465%" height="15" fill="rgb(232,18,1)"/><text x="78.1643%" y="175.50"></text></g><g><title>metadata_register_crate (2,336,334 samples, 1.73%)</title><rect x="78.0609%" y="165" width="1.7285%" height="15" fill="rgb(215,41,42)"/><text x="78.3109%" y="175.50"></text></g><g><title>metadata_register_crate (860,717 samples, 0.64%)</title><rect x="79.1526%" y="149" width="0.6368%" height="15" fill="rgb(224,123,36)"/><text x="79.4026%" y="159.50"></text></g><g><title>macro_expand_crate (16,649,567 samples, 12.32%)</title><rect x="67.5120%" y="197" width="12.3179%" height="15" fill="rgb(240,125,3)"/><text x="67.7620%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (16,636,227 samples, 12.31%)</title><rect x="67.5218%" y="181" width="12.3080%" height="15" fill="rgb(205,98,50)"/><text x="67.7718%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (259,882 samples, 0.19%)</title><rect x="79.8392%" y="197" width="0.1923%" height="15" fill="rgb(205,185,37)"/><text x="80.0892%" y="207.50"></text></g><g><title>late_resolve_crate (2,125,761 samples, 1.57%)</title><rect x="80.1668%" y="181" width="1.5727%" height="15" fill="rgb(238,207,15)"/><text x="80.4168%" y="191.50"></text></g><g><title>configure_and_expand (19,967,730 samples, 14.77%)</title><rect x="67.0790%" y="213" width="14.7728%" height="15" fill="rgb(213,199,42)"/><text x="67.3290%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,460,484 samples, 1.82%)</title><rect x="80.0314%" y="197" width="1.8203%" height="15" fill="rgb(235,201,11)"/><text x="80.2814%" y="207.50">r..</text></g><g><title>drop_ast (324,083 samples, 0.24%)</title><rect x="81.8518%" y="213" width="0.2398%" height="15" fill="rgb(207,46,11)"/><text x="82.1018%" y="223.50"></text></g><g><title>early_lint_checks (508,225 samples, 0.38%)</title><rect x="82.1000%" y="213" width="0.3760%" height="15" fill="rgb(241,35,35)"/><text x="82.3500%" y="223.50"></text></g><g><title>free_global_ctxt (3,431,945 samples, 2.54%)</title><rect x="82.4760%" y="213" width="2.5391%" height="15" fill="rgb(243,32,47)"/><text x="82.7260%" y="223.50">fr..</text></g><g><title>is_sized_raw (148,291 samples, 0.11%)</title><rect x="88.4655%" y="165" width="0.1097%" height="15" fill="rgb(247,202,23)"/><text x="88.7155%" y="175.50"></text></g><g><title>layout_of (292,011 samples, 0.22%)</title><rect x="88.6815%" y="149" width="0.2160%" height="15" fill="rgb(219,102,11)"/><text x="88.9315%" y="159.50"></text></g><g><title>layout_of (461,941 samples, 0.34%)</title><rect x="88.5752%" y="165" width="0.3418%" height="15" fill="rgb(243,110,44)"/><text x="88.8252%" y="175.50"></text></g><g><title>layout_of (1,053,017 samples, 0.78%)</title><rect x="88.1475%" y="181" width="0.7791%" height="15" fill="rgb(222,74,54)"/><text x="88.3975%" y="191.50"></text></g><g><title>needs_drop_raw (495,112 samples, 0.37%)</title><rect x="90.9406%" y="165" width="0.3663%" height="15" fill="rgb(216,99,12)"/><text x="91.1906%" y="175.50"></text></g><g><title>is_copy_raw (449,362 samples, 0.33%)</title><rect x="90.9744%" y="149" width="0.3325%" height="15" fill="rgb(226,22,26)"/><text x="91.2244%" y="159.50"></text></g><g><title>evaluate_obligation (333,371 samples, 0.25%)</title><rect x="91.0602%" y="133" width="0.2466%" height="15" fill="rgb(217,163,10)"/><text x="91.3102%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,293,260 samples, 2.44%)</title><rect x="88.9265%" y="181" width="2.4365%" height="15" fill="rgb(213,25,53)"/><text x="89.1765%" y="191.50">mi..</text></g><g><title>optimized_mir (6,928,390 samples, 5.13%)</title><rect x="86.3049%" y="197" width="5.1259%" height="15" fill="rgb(252,105,26)"/><text x="86.5549%" y="207.50">optimi..</text></g><g><title>generate_crate_metadata (8,743,948 samples, 6.47%)</title><rect x="85.0150%" y="213" width="6.4691%" height="15" fill="rgb(220,39,43)"/><text x="85.2650%" y="223.50">generate..</text></g><g><title>hir_lowering (4,528,235 samples, 3.35%)</title><rect x="91.4841%" y="213" width="3.3501%" height="15" fill="rgb(229,68,48)"/><text x="91.7341%" y="223.50">hir..</text></g><g><title>link_crate (805,208 samples, 0.60%)</title><rect x="94.8459%" y="197" width="0.5957%" height="15" fill="rgb(252,8,32)"/><text x="95.0959%" y="207.50"></text></g><g><title>link_binary (786,278 samples, 0.58%)</title><rect x="94.8599%" y="181" width="0.5817%" height="15" fill="rgb(223,20,43)"/><text x="95.1099%" y="191.50"></text></g><g><title>link_rlib (509,835 samples, 0.38%)</title><rect x="95.0644%" y="165" width="0.3772%" height="15" fill="rgb(229,81,49)"/><text x="95.3144%" y="175.50"></text></g><g><title>link (826,598 samples, 0.61%)</title><rect x="94.8342%" y="213" width="0.6115%" height="15" fill="rgb(236,28,36)"/><text x="95.0842%" y="223.50"></text></g><g><title>parse_crate (4,605,846 samples, 3.41%)</title><rect x="95.4458%" y="213" width="3.4076%" height="15" fill="rgb(249,185,26)"/><text x="95.6958%" y="223.50">par..</text></g><g><title>prepare_outputs (318,433 samples, 0.24%)</title><rect x="98.8594%" y="213" width="0.2356%" height="15" fill="rgb(249,174,33)"/><text x="99.1094%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (709,377 samples, 0.52%)</title><rect x="99.0950%" y="213" width="0.5248%" height="15" fill="rgb(233,201,37)"/><text x="99.3450%" y="223.50"></text></g><g><title>all (135,165,563 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (135,165,563 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (393,704 samples, 0.29%)</title><rect x="99.7087%" y="213" width="0.2913%" height="15" fill="rgb(230,49,44)"/><text x="99.9587%" y="223.50"></text></g></svg></svg>