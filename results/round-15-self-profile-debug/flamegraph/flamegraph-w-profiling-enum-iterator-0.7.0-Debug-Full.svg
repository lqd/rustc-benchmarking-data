<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,629,246 samples, 8.59%)</title><rect x="2.2467%" y="197" width="8.5930%" height="15" fill="rgb(227,0,7)"/><text x="2.4967%" y="207.50">LLVM_passes</text></g><g><title>hir_module_items (108,811 samples, 0.36%)</title><rect x="11.3252%" y="181" width="0.3556%" height="15" fill="rgb(217,0,24)"/><text x="11.5752%" y="191.50"></text></g><g><title>hir_owner (31,741 samples, 0.10%)</title><rect x="11.5770%" y="165" width="0.1037%" height="15" fill="rgb(221,193,54)"/><text x="11.8270%" y="175.50"></text></g><g><title>get_lang_items (60,901 samples, 0.20%)</title><rect x="12.1263%" y="133" width="0.1990%" height="15" fill="rgb(248,212,6)"/><text x="12.3763%" y="143.50"></text></g><g><title>associated_item (34,521 samples, 0.11%)</title><rect x="12.3632%" y="117" width="0.1128%" height="15" fill="rgb(208,68,35)"/><text x="12.6132%" y="127.50"></text></g><g><title>should_inherit_track_caller (47,881 samples, 0.16%)</title><rect x="12.3253%" y="133" width="0.1565%" height="15" fill="rgb(232,128,0)"/><text x="12.5753%" y="143.50"></text></g><g><title>codegen_fn_attrs (193,002 samples, 0.63%)</title><rect x="11.9711%" y="149" width="0.6308%" height="15" fill="rgb(207,160,47)"/><text x="12.2211%" y="159.50"></text></g><g><title>supported_target_features (36,720 samples, 0.12%)</title><rect x="12.4818%" y="133" width="0.1200%" height="15" fill="rgb(228,23,34)"/><text x="12.7318%" y="143.50"></text></g><g><title>check_mod_attrs (261,643 samples, 0.86%)</title><rect x="11.7489%" y="165" width="0.8551%" height="15" fill="rgb(218,30,26)"/><text x="11.9989%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (101,581 samples, 0.33%)</title><rect x="12.6823%" y="165" width="0.3320%" height="15" fill="rgb(220,122,19)"/><text x="12.9323%" y="175.50"></text></g><g><title>looking_for_derive_registrar (38,610 samples, 0.13%)</title><rect x="13.0220%" y="165" width="0.1262%" height="15" fill="rgb(250,228,42)"/><text x="13.2720%" y="175.50"></text></g><g><title>misc_checking_1 (452,504 samples, 1.48%)</title><rect x="11.6833%" y="181" width="1.4789%" height="15" fill="rgb(240,193,28)"/><text x="11.9333%" y="191.50"></text></g><g><title>check_private_in_public (36,640 samples, 0.12%)</title><rect x="13.2524%" y="165" width="0.1197%" height="15" fill="rgb(216,20,37)"/><text x="13.5024%" y="175.50"></text></g><g><title>death_checking (97,221 samples, 0.32%)</title><rect x="13.3721%" y="165" width="0.3177%" height="15" fill="rgb(206,188,39)"/><text x="13.6221%" y="175.50"></text></g><g><title>explicit_predicates_of (30,920 samples, 0.10%)</title><rect x="14.0559%" y="85" width="0.1011%" height="15" fill="rgb(217,207,13)"/><text x="14.3059%" y="95.50"></text></g><g><title>crate_lints (142,032 samples, 0.46%)</title><rect x="13.6980%" y="149" width="0.4642%" height="15" fill="rgb(231,73,38)"/><text x="13.9480%" y="159.50"></text></g><g><title>param_env (96,022 samples, 0.31%)</title><rect x="13.8483%" y="133" width="0.3138%" height="15" fill="rgb(225,20,46)"/><text x="14.0983%" y="143.50"></text></g><g><title>predicates_of (54,201 samples, 0.18%)</title><rect x="13.9850%" y="117" width="0.1771%" height="15" fill="rgb(210,31,41)"/><text x="14.2350%" y="127.50"></text></g><g><title>predicates_defined_on (48,171 samples, 0.16%)</title><rect x="14.0047%" y="101" width="0.1574%" height="15" fill="rgb(221,200,47)"/><text x="14.2547%" y="111.50"></text></g><g><title>lint_checking (166,042 samples, 0.54%)</title><rect x="13.6898%" y="165" width="0.5427%" height="15" fill="rgb(226,26,5)"/><text x="13.9398%" y="175.50"></text></g><g><title>privacy_access_levels (53,201 samples, 0.17%)</title><rect x="14.2325%" y="165" width="0.1739%" height="15" fill="rgb(249,33,26)"/><text x="14.4825%" y="175.50"></text></g><g><title>privacy_checking_modules (51,760 samples, 0.17%)</title><rect x="14.4064%" y="165" width="0.1692%" height="15" fill="rgb(235,183,28)"/><text x="14.6564%" y="175.50"></text></g><g><title>check_mod_privacy (49,520 samples, 0.16%)</title><rect x="14.4137%" y="149" width="0.1618%" height="15" fill="rgb(221,5,38)"/><text x="14.6637%" y="159.50"></text></g><g><title>misc_checking_3 (435,054 samples, 1.42%)</title><rect x="13.2178%" y="181" width="1.4219%" height="15" fill="rgb(247,18,42)"/><text x="13.4678%" y="191.50"></text></g><g><title>fn_sig (104,871 samples, 0.34%)</title><rect x="15.1317%" y="133" width="0.3427%" height="15" fill="rgb(241,131,45)"/><text x="15.3817%" y="143.50"></text></g><g><title>generics_of (51,730 samples, 0.17%)</title><rect x="15.4744%" y="133" width="0.1691%" height="15" fill="rgb(249,31,29)"/><text x="15.7244%" y="143.50"></text></g><g><title>associated_item (137,641 samples, 0.45%)</title><rect x="16.7072%" y="53" width="0.4498%" height="15" fill="rgb(225,111,53)"/><text x="16.9572%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (103,241 samples, 0.34%)</title><rect x="16.8196%" y="37" width="0.3374%" height="15" fill="rgb(238,160,17)"/><text x="17.0696%" y="47.50"></text></g><g><title>associated_items (201,352 samples, 0.66%)</title><rect x="16.5102%" y="69" width="0.6581%" height="15" fill="rgb(214,148,48)"/><text x="16.7602%" y="79.50"></text></g><g><title>late_bound_vars_map (263,302 samples, 0.86%)</title><rect x="16.3232%" y="101" width="0.8605%" height="15" fill="rgb(232,36,49)"/><text x="16.5732%" y="111.50"></text></g><g><title>resolve_lifetimes (255,052 samples, 0.83%)</title><rect x="16.3501%" y="85" width="0.8336%" height="15" fill="rgb(209,103,24)"/><text x="16.6001%" y="95.50"></text></g><g><title>explicit_item_bounds (366,223 samples, 1.20%)</title><rect x="16.0240%" y="117" width="1.1969%" height="15" fill="rgb(229,88,8)"/><text x="16.2740%" y="127.50"></text></g><g><title>item_bounds (512,085 samples, 1.67%)</title><rect x="15.6435%" y="133" width="1.6736%" height="15" fill="rgb(213,181,19)"/><text x="15.8935%" y="143.50"></text></g><g><title>explicit_predicates_of (34,100 samples, 0.11%)</title><rect x="17.3776%" y="101" width="0.1114%" height="15" fill="rgb(254,191,54)"/><text x="17.6276%" y="111.50"></text></g><g><title>predicates_of (60,691 samples, 0.20%)</title><rect x="17.3171%" y="133" width="0.1984%" height="15" fill="rgb(241,83,37)"/><text x="17.5671%" y="143.50"></text></g><g><title>predicates_defined_on (53,430 samples, 0.17%)</title><rect x="17.3409%" y="117" width="0.1746%" height="15" fill="rgb(233,36,39)"/><text x="17.5909%" y="127.50"></text></g><g><title>late_bound_vars_map (31,460 samples, 0.10%)</title><rect x="17.8995%" y="101" width="0.1028%" height="15" fill="rgb(226,3,54)"/><text x="18.1495%" y="111.50"></text></g><g><title>super_predicates_of (163,982 samples, 0.54%)</title><rect x="17.5155%" y="133" width="0.5359%" height="15" fill="rgb(245,192,40)"/><text x="17.7655%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (156,382 samples, 0.51%)</title><rect x="17.5403%" y="117" width="0.5111%" height="15" fill="rgb(238,167,29)"/><text x="17.7903%" y="127.50"></text></g><g><title>type_collecting (992,570 samples, 3.24%)</title><rect x="14.8727%" y="165" width="3.2439%" height="15" fill="rgb(232,182,51)"/><text x="15.1227%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (981,739 samples, 3.21%)</title><rect x="14.9081%" y="149" width="3.2085%" height="15" fill="rgb(231,60,39)"/><text x="15.1581%" y="159.50">col..</text></g><g><title>param_env (182,912 samples, 0.60%)</title><rect x="18.9959%" y="133" width="0.5978%" height="15" fill="rgb(208,69,12)"/><text x="19.2459%" y="143.50"></text></g><g><title>check_item_well_formed (463,254 samples, 1.51%)</title><rect x="18.1711%" y="149" width="1.5140%" height="15" fill="rgb(235,93,37)"/><text x="18.4211%" y="159.50"></text></g><g><title>implied_outlives_bounds (100,921 samples, 0.33%)</title><rect x="20.6638%" y="133" width="0.3298%" height="15" fill="rgb(213,116,39)"/><text x="20.9138%" y="143.50"></text></g><g><title>param_env (44,101 samples, 0.14%)</title><rect x="20.9991%" y="133" width="0.1441%" height="15" fill="rgb(222,207,29)"/><text x="21.2491%" y="143.50"></text></g><g><title>predicates_of (33,031 samples, 0.11%)</title><rect x="21.1432%" y="133" width="0.1080%" height="15" fill="rgb(206,96,30)"/><text x="21.3932%" y="143.50"></text></g><g><title>analysis (3,496,926 samples, 11.43%)</title><rect x="10.8397%" y="197" width="11.4288%" height="15" fill="rgb(218,138,4)"/><text x="11.0897%" y="207.50">analysis</text></g><g><title>type_check_crate (2,334,214 samples, 7.63%)</title><rect x="14.6397%" y="181" width="7.6287%" height="15" fill="rgb(250,191,14)"/><text x="14.8897%" y="191.50">type_check..</text></g><g><title>wf_checking (1,270,342 samples, 4.15%)</title><rect x="18.1167%" y="165" width="4.1518%" height="15" fill="rgb(239,60,40)"/><text x="18.3667%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (790,437 samples, 2.58%)</title><rect x="19.6851%" y="149" width="2.5833%" height="15" fill="rgb(206,27,48)"/><text x="19.9351%" y="159.50">ch..</text></g><g><title>trait_impls_of (308,933 samples, 1.01%)</title><rect x="21.2588%" y="133" width="1.0097%" height="15" fill="rgb(225,35,8)"/><text x="21.5088%" y="143.50"></text></g><g><title>implementations_of_trait (60,540 samples, 0.20%)</title><rect x="22.0706%" y="117" width="0.1979%" height="15" fill="rgb(250,213,24)"/><text x="22.3206%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (49,200 samples, 0.16%)</title><rect x="22.1076%" y="101" width="0.1608%" height="15" fill="rgb(247,123,22)"/><text x="22.3576%" y="111.50"></text></g><g><title>codegen_module (515,585 samples, 1.69%)</title><rect x="24.7377%" y="181" width="1.6851%" height="15" fill="rgb(231,138,38)"/><text x="24.9877%" y="191.50"></text></g><g><title>codegen_crate (1,296,853 samples, 4.24%)</title><rect x="22.3008%" y="197" width="4.2384%" height="15" fill="rgb(231,145,46)"/><text x="22.5508%" y="207.50">codeg..</text></g><g><title>LLVM_module_codegen (2,126,611 samples, 6.95%)</title><rect x="26.5996%" y="181" width="6.9503%" height="15" fill="rgb(251,118,11)"/><text x="26.8496%" y="191.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (2,056,411 samples, 6.72%)</title><rect x="26.8290%" y="165" width="6.7208%" height="15" fill="rgb(217,147,25)"/><text x="27.0790%" y="175.50">LLVM_modu..</text></g><g><title>codegen_module_optimize (2,441,515 samples, 7.98%)</title><rect x="26.5392%" y="197" width="7.9794%" height="15" fill="rgb(247,81,37)"/><text x="26.7892%" y="207.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (296,423 samples, 0.97%)</title><rect x="33.5499%" y="181" width="0.9688%" height="15" fill="rgb(209,12,38)"/><text x="33.7999%" y="191.50"></text></g><g><title>AST_validation (94,651 samples, 0.31%)</title><rect x="35.2433%" y="181" width="0.3093%" height="15" fill="rgb(227,1,9)"/><text x="35.4933%" y="191.50"></text></g><g><title>crate_injection (94,251 samples, 0.31%)</title><rect x="35.6180%" y="181" width="0.3080%" height="15" fill="rgb(248,47,43)"/><text x="35.8680%" y="191.50"></text></g><g><title>macro_expand_crate (12,664,288 samples, 41.39%)</title><rect x="35.9260%" y="181" width="41.3898%" height="15" fill="rgb(221,10,30)"/><text x="36.1760%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,639,267 samples, 41.31%)</title><rect x="36.0078%" y="165" width="41.3080%" height="15" fill="rgb(210,229,1)"/><text x="36.2578%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (5,962,842 samples, 19.49%)</title><rect x="57.8279%" y="149" width="19.4879%" height="15" fill="rgb(222,148,37)"/><text x="58.0779%" y="159.50">metadata_register_crate</text></g><g><title>pre_AST_expansion_lint_checks (121,141 samples, 0.40%)</title><rect x="77.3309%" y="181" width="0.3959%" height="15" fill="rgb(234,67,33)"/><text x="77.5809%" y="191.50"></text></g><g><title>finalize_imports (265,433 samples, 0.87%)</title><rect x="77.7558%" y="165" width="0.8675%" height="15" fill="rgb(247,98,35)"/><text x="78.0058%" y="175.50"></text></g><g><title>late_resolve_crate (328,533 samples, 1.07%)</title><rect x="78.6521%" y="165" width="1.0737%" height="15" fill="rgb(247,138,52)"/><text x="78.9021%" y="175.50"></text></g><g><title>configure_and_expand (13,873,350 samples, 45.34%)</title><rect x="34.5186%" y="197" width="45.3413%" height="15" fill="rgb(213,79,30)"/><text x="34.7686%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (652,697 samples, 2.13%)</title><rect x="77.7268%" y="181" width="2.1332%" height="15" fill="rgb(246,177,23)"/><text x="77.9768%" y="191.50">r..</text></g><g><title>drop_compiler (36,051 samples, 0.12%)</title><rect x="79.9544%" y="197" width="0.1178%" height="15" fill="rgb(230,62,27)"/><text x="80.2044%" y="207.50"></text></g><g><title>early_lint_checks (97,121 samples, 0.32%)</title><rect x="80.0723%" y="197" width="0.3174%" height="15" fill="rgb(216,154,8)"/><text x="80.3223%" y="207.50"></text></g><g><title>free_global_ctxt (1,314,354 samples, 4.30%)</title><rect x="80.3897%" y="197" width="4.2956%" height="15" fill="rgb(244,35,45)"/><text x="80.6397%" y="207.50">free_..</text></g><g><title>crate_hash (124,772 samples, 0.41%)</title><rect x="85.7295%" y="181" width="0.4078%" height="15" fill="rgb(251,115,12)"/><text x="85.9795%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (107,361 samples, 0.35%)</title><rect x="86.2632%" y="165" width="0.3509%" height="15" fill="rgb(240,54,50)"/><text x="86.5132%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (49,321 samples, 0.16%)</title><rect x="86.4529%" y="149" width="0.1612%" height="15" fill="rgb(233,84,52)"/><text x="86.7029%" y="159.50"></text></g><g><title>cgu_partitioning (33,131 samples, 0.11%)</title><rect x="86.5058%" y="133" width="0.1083%" height="15" fill="rgb(207,117,47)"/><text x="86.7558%" y="143.50"></text></g><g><title>exported_symbols (150,111 samples, 0.49%)</title><rect x="86.2033%" y="181" width="0.4906%" height="15" fill="rgb(249,43,39)"/><text x="86.4533%" y="191.50"></text></g><g><title>mir_keys (41,140 samples, 0.13%)</title><rect x="86.7230%" y="181" width="0.1345%" height="15" fill="rgb(209,38,44)"/><text x="86.9730%" y="191.50"></text></g><g><title>variances_of (32,101 samples, 0.10%)</title><rect x="86.8880%" y="181" width="0.1049%" height="15" fill="rgb(236,212,23)"/><text x="87.1380%" y="191.50"></text></g><g><title>generate_crate_metadata (706,427 samples, 2.31%)</title><rect x="84.6853%" y="197" width="2.3088%" height="15" fill="rgb(242,79,21)"/><text x="84.9353%" y="207.50">g..</text></g><g><title>hir_lowering (341,343 samples, 1.12%)</title><rect x="86.9941%" y="197" width="1.1156%" height="15" fill="rgb(211,96,35)"/><text x="87.2441%" y="207.50"></text></g><g><title>finish_ongoing_codegen (711,067 samples, 2.32%)</title><rect x="88.1776%" y="181" width="2.3239%" height="15" fill="rgb(253,215,40)"/><text x="88.4276%" y="191.50">f..</text></g><g><title>link_binary_remove_temps (33,240 samples, 0.11%)</title><rect x="91.5855%" y="149" width="0.1086%" height="15" fill="rgb(211,81,21)"/><text x="91.8355%" y="159.50"></text></g><g><title>link_crate (977,910 samples, 3.20%)</title><rect x="90.5015%" y="181" width="3.1960%" height="15" fill="rgb(208,190,38)"/><text x="90.7515%" y="191.50">lin..</text></g><g><title>link_binary (963,580 samples, 3.15%)</title><rect x="90.5484%" y="165" width="3.1492%" height="15" fill="rgb(235,213,38)"/><text x="90.7984%" y="175.50">lin..</text></g><g><title>link_rlib (613,006 samples, 2.00%)</title><rect x="91.6941%" y="149" width="2.0034%" height="15" fill="rgb(237,122,38)"/><text x="91.9441%" y="159.50">l..</text></g><g><title>link (1,720,147 samples, 5.62%)</title><rect x="88.1096%" y="197" width="5.6218%" height="15" fill="rgb(244,218,35)"/><text x="88.3596%" y="207.50">link</text></g><g><title>parse_crate (508,885 samples, 1.66%)</title><rect x="93.7315%" y="197" width="1.6632%" height="15" fill="rgb(240,68,47)"/><text x="93.9815%" y="207.50"></text></g><g><title>prepare_outputs (330,953 samples, 1.08%)</title><rect x="95.4213%" y="197" width="1.0816%" height="15" fill="rgb(210,16,53)"/><text x="95.6713%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (509,245 samples, 1.66%)</title><rect x="96.5029%" y="197" width="1.6643%" height="15" fill="rgb(235,124,12)"/><text x="96.7529%" y="207.50"></text></g><g><title>setup_global_ctxt (144,921 samples, 0.47%)</title><rect x="98.1718%" y="197" width="0.4736%" height="15" fill="rgb(224,169,11)"/><text x="98.4218%" y="207.50"></text></g><g><title>all (30,597,598 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (30,597,598 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (414,454 samples, 1.35%)</title><rect x="98.6455%" y="197" width="1.3545%" height="15" fill="rgb(230,116,27)"/><text x="98.8955%" y="207.50"></text></g></svg></svg>