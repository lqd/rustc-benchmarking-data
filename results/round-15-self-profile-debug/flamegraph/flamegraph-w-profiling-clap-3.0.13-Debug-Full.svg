<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,872,714,281 samples, 15.01%)</title><rect x="0.0094%" y="197" width="15.0120%" height="15" fill="rgb(227,0,7)"/><text x="0.2594%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (14,264,756 samples, 0.11%)</title><rect x="19.0233%" y="85" width="0.1143%" height="15" fill="rgb(217,0,24)"/><text x="19.2733%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (17,186,837 samples, 0.14%)</title><rect x="19.1709%" y="69" width="0.1378%" height="15" fill="rgb(221,193,54)"/><text x="19.4209%" y="79.50"></text></g><g><title>resolve_instance (23,679,587 samples, 0.19%)</title><rect x="19.1379%" y="85" width="0.1898%" height="15" fill="rgb(248,212,6)"/><text x="19.3879%" y="95.50"></text></g><g><title>thir_body (27,700,611 samples, 0.22%)</title><rect x="19.3341%" y="85" width="0.2221%" height="15" fill="rgb(208,68,35)"/><text x="19.5841%" y="95.50"></text></g><g><title>mir_const (170,824,395 samples, 1.37%)</title><rect x="18.1920%" y="133" width="1.3694%" height="15" fill="rgb(232,128,0)"/><text x="18.4420%" y="143.50"></text></g><g><title>unsafety_check_result (151,229,768 samples, 1.21%)</title><rect x="18.3490%" y="117" width="1.2123%" height="15" fill="rgb(207,160,47)"/><text x="18.5990%" y="127.50"></text></g><g><title>mir_built (135,081,383 samples, 1.08%)</title><rect x="18.4785%" y="101" width="1.0828%" height="15" fill="rgb(228,23,34)"/><text x="18.7285%" y="111.50"></text></g><g><title>mir_promoted (197,701,714 samples, 1.58%)</title><rect x="18.0416%" y="149" width="1.5848%" height="15" fill="rgb(218,30,26)"/><text x="18.2916%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (23,258,634 samples, 0.19%)</title><rect x="19.7126%" y="149" width="0.1864%" height="15" fill="rgb(220,122,19)"/><text x="19.9626%" y="159.50"></text></g><g><title>type_op_normalize_predicate (21,998,435 samples, 0.18%)</title><rect x="19.8991%" y="149" width="0.1763%" height="15" fill="rgb(250,228,42)"/><text x="20.1491%" y="159.50"></text></g><g><title>type_op_prove_predicate (73,293,067 samples, 0.59%)</title><rect x="20.0846%" y="149" width="0.5875%" height="15" fill="rgb(240,193,28)"/><text x="20.3346%" y="159.50"></text></g><g><title>MIR_borrow_checking (700,761,956 samples, 5.62%)</title><rect x="15.0552%" y="181" width="5.6174%" height="15" fill="rgb(216,20,37)"/><text x="15.3052%" y="191.50">MIR_bor..</text></g><g><title>mir_borrowck (697,829,731 samples, 5.59%)</title><rect x="15.0787%" y="165" width="5.5939%" height="15" fill="rgb(206,188,39)"/><text x="15.3287%" y="175.50">mir_bor..</text></g><g><title>misc_checking_1 (21,539,607 samples, 0.17%)</title><rect x="20.7304%" y="181" width="0.1727%" height="15" fill="rgb(217,207,13)"/><text x="20.9804%" y="191.50"></text></g><g><title>misc_checking_2 (26,378,325 samples, 0.21%)</title><rect x="20.9031%" y="181" width="0.2115%" height="15" fill="rgb(231,73,38)"/><text x="21.1531%" y="191.50"></text></g><g><title>match_checking (14,283,724 samples, 0.11%)</title><rect x="21.0000%" y="165" width="0.1145%" height="15" fill="rgb(225,20,46)"/><text x="21.2500%" y="175.50"></text></g><g><title>check_match (13,429,806 samples, 0.11%)</title><rect x="21.0069%" y="149" width="0.1077%" height="15" fill="rgb(210,31,41)"/><text x="21.2569%" y="159.50"></text></g><g><title>crate_lints (14,907,790 samples, 0.12%)</title><rect x="21.2071%" y="149" width="0.1195%" height="15" fill="rgb(221,200,47)"/><text x="21.4571%" y="159.50"></text></g><g><title>lint_checking (26,734,458 samples, 0.21%)</title><rect x="21.2071%" y="165" width="0.2143%" height="15" fill="rgb(226,26,5)"/><text x="21.4571%" y="175.50"></text></g><g><title>privacy_checking_modules (20,021,622 samples, 0.16%)</title><rect x="21.4737%" y="165" width="0.1605%" height="15" fill="rgb(249,33,26)"/><text x="21.7237%" y="175.50"></text></g><g><title>check_mod_privacy (19,994,032 samples, 0.16%)</title><rect x="21.4740%" y="149" width="0.1603%" height="15" fill="rgb(235,183,28)"/><text x="21.7240%" y="159.50"></text></g><g><title>misc_checking_3 (65,072,854 samples, 0.52%)</title><rect x="21.1145%" y="181" width="0.5216%" height="15" fill="rgb(221,5,38)"/><text x="21.3645%" y="191.50"></text></g><g><title>coherent_trait (27,749,878 samples, 0.22%)</title><rect x="21.6516%" y="149" width="0.2224%" height="15" fill="rgb(247,18,42)"/><text x="21.9016%" y="159.50"></text></g><g><title>specialization_graph_of (27,104,501 samples, 0.22%)</title><rect x="21.6568%" y="133" width="0.2173%" height="15" fill="rgb(241,131,45)"/><text x="21.9068%" y="143.50"></text></g><g><title>coherence_checking (28,461,525 samples, 0.23%)</title><rect x="21.6513%" y="165" width="0.2282%" height="15" fill="rgb(249,31,29)"/><text x="21.9013%" y="175.50"></text></g><g><title>evaluate_obligation (23,026,171 samples, 0.18%)</title><rect x="24.7088%" y="117" width="0.1846%" height="15" fill="rgb(225,111,53)"/><text x="24.9588%" y="127.50"></text></g><g><title>evaluate_obligation (26,621,021 samples, 0.21%)</title><rect x="27.2866%" y="101" width="0.2134%" height="15" fill="rgb(238,160,17)"/><text x="27.5366%" y="111.50"></text></g><g><title>typeck (332,423,305 samples, 2.66%)</title><rect x="24.9570%" y="117" width="2.6648%" height="15" fill="rgb(214,148,48)"/><text x="25.2070%" y="127.50">ty..</text></g><g><title>item_bodies_checking (716,338,041 samples, 5.74%)</title><rect x="21.8835%" y="165" width="5.7423%" height="15" fill="rgb(232,36,49)"/><text x="22.1335%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (716,334,261 samples, 5.74%)</title><rect x="21.8835%" y="149" width="5.7423%" height="15" fill="rgb(209,103,24)"/><text x="22.1335%" y="159.50">typeck_..</text></g><g><title>typeck (713,960,328 samples, 5.72%)</title><rect x="21.9026%" y="133" width="5.7232%" height="15" fill="rgb(229,88,8)"/><text x="22.1526%" y="143.50">typeck</text></g><g><title>mir_built (23,137,065 samples, 0.19%)</title><rect x="27.8301%" y="53" width="0.1855%" height="15" fill="rgb(213,181,19)"/><text x="28.0801%" y="63.50"></text></g><g><title>typeck (20,473,745 samples, 0.16%)</title><rect x="27.8514%" y="37" width="0.1641%" height="15" fill="rgb(254,191,54)"/><text x="28.1014%" y="47.50"></text></g><g><title>mir_const (25,528,674 samples, 0.20%)</title><rect x="27.8201%" y="85" width="0.2046%" height="15" fill="rgb(241,83,37)"/><text x="28.0701%" y="95.50"></text></g><g><title>unsafety_check_result (24,610,314 samples, 0.20%)</title><rect x="27.8274%" y="69" width="0.1973%" height="15" fill="rgb(233,36,39)"/><text x="28.0774%" y="79.50"></text></g><g><title>mir_promoted (25,838,660 samples, 0.21%)</title><rect x="27.8178%" y="101" width="0.2071%" height="15" fill="rgb(226,3,54)"/><text x="28.0678%" y="111.50"></text></g><g><title>type_of (43,602,946 samples, 0.35%)</title><rect x="27.7127%" y="133" width="0.3495%" height="15" fill="rgb(245,192,40)"/><text x="27.9627%" y="143.50"></text></g><g><title>mir_borrowck (43,505,235 samples, 0.35%)</title><rect x="27.7135%" y="117" width="0.3487%" height="15" fill="rgb(238,167,29)"/><text x="27.9635%" y="127.50"></text></g><g><title>item_types_checking (54,926,392 samples, 0.44%)</title><rect x="27.6258%" y="165" width="0.4403%" height="15" fill="rgb(232,182,51)"/><text x="27.8758%" y="175.50"></text></g><g><title>check_mod_item_types (54,892,042 samples, 0.44%)</title><rect x="27.6261%" y="149" width="0.4400%" height="15" fill="rgb(231,60,39)"/><text x="27.8761%" y="159.50"></text></g><g><title>type_collecting (21,847,550 samples, 0.18%)</title><rect x="28.0663%" y="165" width="0.1751%" height="15" fill="rgb(208,69,12)"/><text x="28.3163%" y="175.50"></text></g><g><title>collect_mod_item_types (21,812,590 samples, 0.17%)</title><rect x="28.0666%" y="149" width="0.1749%" height="15" fill="rgb(235,93,37)"/><text x="28.3166%" y="159.50"></text></g><g><title>check_impl_item_well_formed (42,932,040 samples, 0.34%)</title><rect x="28.2649%" y="149" width="0.3442%" height="15" fill="rgb(213,116,39)"/><text x="28.5149%" y="159.50"></text></g><g><title>check_item_well_formed (16,357,565 samples, 0.13%)</title><rect x="28.6090%" y="149" width="0.1311%" height="15" fill="rgb(222,207,29)"/><text x="28.8590%" y="159.50"></text></g><g><title>analysis (1,716,502,303 samples, 13.76%)</title><rect x="15.0214%" y="197" width="13.7598%" height="15" fill="rgb(206,96,30)"/><text x="15.2714%" y="207.50">analysis</text></g><g><title>type_check_crate (891,331,958 samples, 7.15%)</title><rect x="21.6362%" y="181" width="7.1451%" height="15" fill="rgb(218,138,4)"/><text x="21.8862%" y="191.50">type_check..</text></g><g><title>wf_checking (67,133,244 samples, 0.54%)</title><rect x="28.2431%" y="165" width="0.5382%" height="15" fill="rgb(250,191,14)"/><text x="28.4931%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (56,451,541 samples, 0.45%)</title><rect x="40.3768%" y="165" width="0.4525%" height="15" fill="rgb(239,60,40)"/><text x="40.6268%" y="175.50"></text></g><g><title>const_caller_location (13,063,178 samples, 0.10%)</title><rect x="40.8293%" y="165" width="0.1047%" height="15" fill="rgb(206,27,48)"/><text x="41.0793%" y="175.50"></text></g><g><title>param_env (31,096,803 samples, 0.25%)</title><rect x="41.6253%" y="149" width="0.2493%" height="15" fill="rgb(225,35,8)"/><text x="41.8753%" y="159.50"></text></g><g><title>normalize_projection_ty (12,696,237 samples, 0.10%)</title><rect x="41.9148%" y="133" width="0.1018%" height="15" fill="rgb(250,213,24)"/><text x="42.1648%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (17,739,663 samples, 0.14%)</title><rect x="41.8745%" y="149" width="0.1422%" height="15" fill="rgb(247,123,22)"/><text x="42.1245%" y="159.50"></text></g><g><title>fn_abi_of_instance (135,075,363 samples, 1.08%)</title><rect x="40.9366%" y="165" width="1.0828%" height="15" fill="rgb(231,138,38)"/><text x="41.1866%" y="175.50"></text></g><g><title>layout_of (23,437,644 samples, 0.19%)</title><rect x="42.0679%" y="165" width="0.1879%" height="15" fill="rgb(231,145,46)"/><text x="42.3179%" y="175.50"></text></g><g><title>codegen_module (1,688,663,862 samples, 13.54%)</title><rect x="28.8269%" y="181" width="13.5367%" height="15" fill="rgb(251,118,11)"/><text x="29.0769%" y="191.50">codegen_module</text></g><g><title>codegen_crate (1,694,468,311 samples, 13.58%)</title><rect x="28.7813%" y="197" width="13.5832%" height="15" fill="rgb(217,147,25)"/><text x="29.0313%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (5,471,986,227 samples, 43.86%)</title><rect x="42.3673%" y="181" width="43.8645%" height="15" fill="rgb(247,81,37)"/><text x="42.6173%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (5,071,383,395 samples, 40.65%)</title><rect x="45.5786%" y="165" width="40.6532%" height="15" fill="rgb(209,12,38)"/><text x="45.8286%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (5,907,582,430 samples, 47.36%)</title><rect x="42.3645%" y="197" width="47.3563%" height="15" fill="rgb(227,1,9)"/><text x="42.6145%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (435,249,900 samples, 3.49%)</title><rect x="86.2318%" y="181" width="3.4890%" height="15" fill="rgb(248,47,43)"/><text x="86.4818%" y="191.50">LLV..</text></g><g><title>macro_expand_crate (127,918,574 samples, 1.03%)</title><rect x="89.7656%" y="181" width="1.0254%" height="15" fill="rgb(221,10,30)"/><text x="90.0156%" y="191.50"></text></g><g><title>expand_crate (127,903,794 samples, 1.03%)</title><rect x="89.7657%" y="165" width="1.0253%" height="15" fill="rgb(210,229,1)"/><text x="90.0157%" y="175.50"></text></g><g><title>late_resolve_crate (23,804,479 samples, 0.19%)</title><rect x="90.8083%" y="165" width="0.1908%" height="15" fill="rgb(222,148,37)"/><text x="91.0583%" y="175.50"></text></g><g><title>configure_and_expand (163,300,599 samples, 1.31%)</title><rect x="89.7209%" y="197" width="1.3090%" height="15" fill="rgb(234,67,33)"/><text x="89.9709%" y="207.50"></text></g><g><title>resolve_crate (29,707,569 samples, 0.24%)</title><rect x="90.7918%" y="181" width="0.2381%" height="15" fill="rgb(247,98,35)"/><text x="91.0418%" y="191.50"></text></g><g><title>free_global_ctxt (30,806,240 samples, 0.25%)</title><rect x="91.1438%" y="197" width="0.2469%" height="15" fill="rgb(247,138,52)"/><text x="91.3938%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (20,918,732 samples, 0.17%)</title><rect x="92.8817%" y="101" width="0.1677%" height="15" fill="rgb(213,79,30)"/><text x="93.1317%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (63,810,384 samples, 0.51%)</title><rect x="93.0494%" y="101" width="0.5115%" height="15" fill="rgb(246,177,23)"/><text x="93.2994%" y="111.50"></text></g><g><title>optimized_mir (141,742,244 samples, 1.14%)</title><rect x="92.4772%" y="117" width="1.1362%" height="15" fill="rgb(230,62,27)"/><text x="92.7272%" y="127.50"></text></g><g><title>evaluate_obligation (23,089,978 samples, 0.19%)</title><rect x="94.8764%" y="85" width="0.1851%" height="15" fill="rgb(216,154,8)"/><text x="95.1264%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (156,877,892 samples, 1.26%)</title><rect x="93.8330%" y="101" width="1.2576%" height="15" fill="rgb(244,35,45)"/><text x="94.0830%" y="111.50"></text></g><g><title>needs_drop_raw (13,578,168 samples, 0.11%)</title><rect x="95.1773%" y="101" width="0.1088%" height="15" fill="rgb(251,115,12)"/><text x="95.4273%" y="111.50"></text></g><g><title>resolve_instance (213,836,034 samples, 1.71%)</title><rect x="93.6134%" y="117" width="1.7142%" height="15" fill="rgb(240,54,50)"/><text x="93.8634%" y="127.50"></text></g><g><title>normalize_projection_ty (25,295,427 samples, 0.20%)</title><rect x="95.3860%" y="101" width="0.2028%" height="15" fill="rgb(233,84,52)"/><text x="95.6360%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (32,734,921 samples, 0.26%)</title><rect x="95.3276%" y="117" width="0.2624%" height="15" fill="rgb(207,117,47)"/><text x="95.5776%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (16,801,116 samples, 0.13%)</title><rect x="95.5900%" y="117" width="0.1347%" height="15" fill="rgb(249,43,39)"/><text x="95.8400%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (516,673,047 samples, 4.14%)</title><rect x="91.6281%" y="133" width="4.1418%" height="15" fill="rgb(209,38,44)"/><text x="91.8781%" y="143.50">monom..</text></g><g><title>monomorphization_collector (517,270,733 samples, 4.15%)</title><rect x="91.6280%" y="149" width="4.1465%" height="15" fill="rgb(236,212,23)"/><text x="91.8780%" y="159.50">monom..</text></g><g><title>assert_symbols_are_distinct (55,576,317 samples, 0.45%)</title><rect x="95.7747%" y="133" width="0.4455%" height="15" fill="rgb(242,79,21)"/><text x="96.0247%" y="143.50"></text></g><g><title>symbol_name (47,801,563 samples, 0.38%)</title><rect x="95.8370%" y="117" width="0.3832%" height="15" fill="rgb(211,96,35)"/><text x="96.0870%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (594,307,336 samples, 4.76%)</title><rect x="91.6261%" y="165" width="4.7641%" height="15" fill="rgb(253,215,40)"/><text x="91.8761%" y="175.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (76,796,531 samples, 0.62%)</title><rect x="95.7746%" y="149" width="0.6156%" height="15" fill="rgb(211,81,21)"/><text x="96.0246%" y="159.50"></text></g><g><title>cgu_partitioning (21,208,734 samples, 0.17%)</title><rect x="96.2202%" y="133" width="0.1700%" height="15" fill="rgb(208,190,38)"/><text x="96.4702%" y="143.50"></text></g><g><title>exported_symbols (599,112,815 samples, 4.80%)</title><rect x="91.6000%" y="181" width="4.8026%" height="15" fill="rgb(235,213,38)"/><text x="91.8500%" y="191.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (42,492,675 samples, 0.34%)</title><rect x="96.7798%" y="165" width="0.3406%" height="15" fill="rgb(237,122,38)"/><text x="97.0298%" y="175.50"></text></g><g><title>optimized_mir (91,216,551 samples, 0.73%)</title><rect x="96.4222%" y="181" width="0.7312%" height="15" fill="rgb(244,218,35)"/><text x="96.6722%" y="191.50"></text></g><g><title>generate_crate_metadata (720,698,096 samples, 5.78%)</title><rect x="91.3908%" y="197" width="5.7773%" height="15" fill="rgb(240,68,47)"/><text x="91.6408%" y="207.50">generat..</text></g><g><title>hir_lowering (54,972,162 samples, 0.44%)</title><rect x="97.1680%" y="197" width="0.4407%" height="15" fill="rgb(210,16,53)"/><text x="97.4180%" y="207.50"></text></g><g><title>finish_ongoing_codegen (255,298,313 samples, 2.05%)</title><rect x="97.6089%" y="181" width="2.0465%" height="15" fill="rgb(235,124,12)"/><text x="97.8589%" y="191.50">f..</text></g><g><title>link_crate (30,777,580 samples, 0.25%)</title><rect x="99.6554%" y="181" width="0.2467%" height="15" fill="rgb(224,169,11)"/><text x="99.9054%" y="191.50"></text></g><g><title>link_binary (30,169,423 samples, 0.24%)</title><rect x="99.6603%" y="165" width="0.2418%" height="15" fill="rgb(250,166,2)"/><text x="99.9103%" y="175.50"></text></g><g><title>link_rlib (26,391,565 samples, 0.21%)</title><rect x="99.6906%" y="149" width="0.2116%" height="15" fill="rgb(242,216,29)"/><text x="99.9406%" y="159.50"></text></g><g><title>link (286,119,623 samples, 2.29%)</title><rect x="97.6087%" y="197" width="2.2936%" height="15" fill="rgb(230,116,27)"/><text x="97.8587%" y="207.50">l..</text></g><g><title>all (12,474,742,651 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (12,474,742,651 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>