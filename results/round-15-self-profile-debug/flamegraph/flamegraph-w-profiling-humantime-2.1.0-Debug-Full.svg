<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (82,432,264 samples, 11.82%)</title><rect x="0.1041%" y="165" width="11.8168%" height="15" fill="rgb(227,0,7)"/><text x="0.3541%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,042,898 samples, 0.15%)</title><rect x="15.7592%" y="53" width="0.1495%" height="15" fill="rgb(217,0,24)"/><text x="16.0092%" y="63.50"></text></g><g><title>specialization_graph_of (931,891 samples, 0.13%)</title><rect x="15.9785%" y="37" width="0.1336%" height="15" fill="rgb(221,193,54)"/><text x="16.2285%" y="47.50"></text></g><g><title>resolve_instance (1,485,976 samples, 0.21%)</title><rect x="15.9087%" y="53" width="0.2130%" height="15" fill="rgb(248,212,6)"/><text x="16.1587%" y="63.50"></text></g><g><title>thir_body (1,861,986 samples, 0.27%)</title><rect x="16.1257%" y="53" width="0.2669%" height="15" fill="rgb(208,68,35)"/><text x="16.3757%" y="63.50"></text></g><g><title>mir_const (11,736,565 samples, 1.68%)</title><rect x="14.7132%" y="101" width="1.6825%" height="15" fill="rgb(232,128,0)"/><text x="14.9632%" y="111.50"></text></g><g><title>unsafety_check_result (10,272,300 samples, 1.47%)</title><rect x="14.9231%" y="85" width="1.4726%" height="15" fill="rgb(207,160,47)"/><text x="15.1731%" y="95.50"></text></g><g><title>mir_built (9,282,541 samples, 1.33%)</title><rect x="15.0650%" y="69" width="1.3307%" height="15" fill="rgb(228,23,34)"/><text x="15.3150%" y="79.50"></text></g><g><title>mir_promoted (13,277,794 samples, 1.90%)</title><rect x="14.5308%" y="117" width="1.9034%" height="15" fill="rgb(218,30,26)"/><text x="14.7808%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (1,668,105 samples, 0.24%)</title><rect x="16.5706%" y="117" width="0.2391%" height="15" fill="rgb(220,122,19)"/><text x="16.8206%" y="127.50"></text></g><g><title>MIR_borrow_checking (33,697,461 samples, 4.83%)</title><rect x="11.9803%" y="149" width="4.8306%" height="15" fill="rgb(250,228,42)"/><text x="12.2303%" y="159.50">MIR_bo..</text></g><g><title>mir_borrowck (33,571,479 samples, 4.81%)</title><rect x="11.9983%" y="133" width="4.8125%" height="15" fill="rgb(240,193,28)"/><text x="12.2483%" y="143.50">mir_bo..</text></g><g><title>check_mod_attrs (707,418 samples, 0.10%)</title><rect x="16.8787%" y="133" width="0.1014%" height="15" fill="rgb(216,20,37)"/><text x="17.1287%" y="143.50"></text></g><g><title>misc_checking_1 (1,524,995 samples, 0.22%)</title><rect x="16.8756%" y="149" width="0.2186%" height="15" fill="rgb(206,188,39)"/><text x="17.1256%" y="159.50"></text></g><g><title>misc_checking_2 (1,713,287 samples, 0.25%)</title><rect x="17.0942%" y="149" width="0.2456%" height="15" fill="rgb(217,207,13)"/><text x="17.3442%" y="159.50"></text></g><g><title>match_checking (1,121,291 samples, 0.16%)</title><rect x="17.1791%" y="133" width="0.1607%" height="15" fill="rgb(231,73,38)"/><text x="17.4291%" y="143.50"></text></g><g><title>check_match (1,086,981 samples, 0.16%)</title><rect x="17.1840%" y="117" width="0.1558%" height="15" fill="rgb(225,20,46)"/><text x="17.4340%" y="127.50"></text></g><g><title>crate_lints (2,548,136 samples, 0.37%)</title><rect x="17.4630%" y="117" width="0.3653%" height="15" fill="rgb(210,31,41)"/><text x="17.7130%" y="127.50"></text></g><g><title>type_of (1,094,990 samples, 0.16%)</title><rect x="17.6713%" y="101" width="0.1570%" height="15" fill="rgb(221,200,47)"/><text x="17.9213%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (865,176 samples, 0.12%)</title><rect x="17.7043%" y="85" width="0.1240%" height="15" fill="rgb(226,26,5)"/><text x="17.9543%" y="95.50"></text></g><g><title>lint_checking (3,352,394 samples, 0.48%)</title><rect x="17.4628%" y="133" width="0.4806%" height="15" fill="rgb(249,33,26)"/><text x="17.7128%" y="143.50"></text></g><g><title>module_lints (802,628 samples, 0.12%)</title><rect x="17.8283%" y="117" width="0.1151%" height="15" fill="rgb(235,183,28)"/><text x="18.0783%" y="127.50"></text></g><g><title>lint_mod (796,668 samples, 0.11%)</title><rect x="17.8292%" y="101" width="0.1142%" height="15" fill="rgb(221,5,38)"/><text x="18.0792%" y="111.50"></text></g><g><title>privacy_checking_modules (1,290,703 samples, 0.19%)</title><rect x="17.9910%" y="133" width="0.1850%" height="15" fill="rgb(247,18,42)"/><text x="18.2410%" y="143.50"></text></g><g><title>check_mod_privacy (1,287,053 samples, 0.18%)</title><rect x="17.9915%" y="117" width="0.1845%" height="15" fill="rgb(241,131,45)"/><text x="18.2415%" y="127.50"></text></g><g><title>misc_checking_3 (5,856,299 samples, 0.84%)</title><rect x="17.3399%" y="149" width="0.8395%" height="15" fill="rgb(249,31,29)"/><text x="17.5899%" y="159.50"></text></g><g><title>impl_parent (3,084,769 samples, 0.44%)</title><rect x="18.8859%" y="85" width="0.4422%" height="15" fill="rgb(225,111,53)"/><text x="19.1359%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,563,894 samples, 0.22%)</title><rect x="19.1039%" y="69" width="0.2242%" height="15" fill="rgb(238,160,17)"/><text x="19.3539%" y="79.50"></text></g><g><title>impl_trait_ref (5,443,754 samples, 0.78%)</title><rect x="19.3281%" y="85" width="0.7804%" height="15" fill="rgb(214,148,48)"/><text x="19.5781%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,349,014 samples, 0.62%)</title><rect x="19.4850%" y="69" width="0.6234%" height="15" fill="rgb(232,36,49)"/><text x="19.7350%" y="79.50"></text></g><g><title>trait_impls_of (915,701 samples, 0.13%)</title><rect x="20.1224%" y="85" width="0.1313%" height="15" fill="rgb(209,103,24)"/><text x="20.3724%" y="95.50"></text></g><g><title>coherent_trait (14,371,055 samples, 2.06%)</title><rect x="18.1937%" y="117" width="2.0601%" height="15" fill="rgb(229,88,8)"/><text x="18.4437%" y="127.50">c..</text></g><g><title>specialization_graph_of (13,933,031 samples, 2.00%)</title><rect x="18.2565%" y="101" width="1.9973%" height="15" fill="rgb(213,181,19)"/><text x="18.5065%" y="111.50">s..</text></g><g><title>coherence_checking (14,463,056 samples, 2.07%)</title><rect x="18.1905%" y="133" width="2.0733%" height="15" fill="rgb(254,191,54)"/><text x="18.4405%" y="143.50">c..</text></g><g><title>associated_items (734,736 samples, 0.11%)</title><rect x="26.0308%" y="85" width="0.1053%" height="15" fill="rgb(241,83,37)"/><text x="26.2808%" y="95.50"></text></g><g><title>dropck_outlives (793,366 samples, 0.11%)</title><rect x="26.1463%" y="85" width="0.1137%" height="15" fill="rgb(233,36,39)"/><text x="26.3963%" y="95.50"></text></g><g><title>generics_of (885,888 samples, 0.13%)</title><rect x="26.8540%" y="69" width="0.1270%" height="15" fill="rgb(226,3,54)"/><text x="27.1040%" y="79.50"></text></g><g><title>impl_trait_ref (791,361 samples, 0.11%)</title><rect x="27.0068%" y="69" width="0.1134%" height="15" fill="rgb(245,192,40)"/><text x="27.2568%" y="79.50"></text></g><g><title>specializes (840,747 samples, 0.12%)</title><rect x="27.1950%" y="69" width="0.1205%" height="15" fill="rgb(238,167,29)"/><text x="27.4450%" y="79.50"></text></g><g><title>evaluate_obligation (7,814,525 samples, 1.12%)</title><rect x="26.2600%" y="85" width="1.1202%" height="15" fill="rgb(232,182,51)"/><text x="26.5100%" y="95.50"></text></g><g><title>generics_of (716,375 samples, 0.10%)</title><rect x="27.4080%" y="85" width="0.1027%" height="15" fill="rgb(231,60,39)"/><text x="27.6580%" y="95.50"></text></g><g><title>typeck (2,331,664 samples, 0.33%)</title><rect x="27.7517%" y="85" width="0.3342%" height="15" fill="rgb(208,69,12)"/><text x="28.0017%" y="95.50"></text></g><g><title>item_bodies_checking (54,610,902 samples, 7.83%)</title><rect x="20.2684%" y="133" width="7.8286%" height="15" fill="rgb(235,93,37)"/><text x="20.5184%" y="143.50">item_bodies..</text></g><g><title>typeck_item_bodies (54,607,602 samples, 7.83%)</title><rect x="20.2689%" y="117" width="7.8281%" height="15" fill="rgb(213,116,39)"/><text x="20.5189%" y="127.50">typeck_item..</text></g><g><title>typeck (54,519,291 samples, 7.82%)</title><rect x="20.2816%" y="101" width="7.8155%" height="15" fill="rgb(222,207,29)"/><text x="20.5316%" y="111.50">typeck</text></g><g><title>generics_of (732,466 samples, 0.11%)</title><rect x="28.5910%" y="69" width="0.1050%" height="15" fill="rgb(206,96,30)"/><text x="28.8410%" y="79.50"></text></g><g><title>impl_trait_ref (820,419 samples, 0.12%)</title><rect x="28.7034%" y="69" width="0.1176%" height="15" fill="rgb(218,138,4)"/><text x="28.9534%" y="79.50"></text></g><g><title>evaluate_obligation (3,706,186 samples, 0.53%)</title><rect x="28.4095%" y="85" width="0.5313%" height="15" fill="rgb(250,191,14)"/><text x="28.6595%" y="95.50"></text></g><g><title>item_types_checking (6,025,651 samples, 0.86%)</title><rect x="28.0970%" y="133" width="0.8638%" height="15" fill="rgb(239,60,40)"/><text x="28.3470%" y="143.50"></text></g><g><title>check_mod_item_types (6,019,451 samples, 0.86%)</title><rect x="28.0979%" y="117" width="0.8629%" height="15" fill="rgb(206,27,48)"/><text x="28.3479%" y="127.50"></text></g><g><title>typeck (4,894,619 samples, 0.70%)</title><rect x="28.2592%" y="101" width="0.7017%" height="15" fill="rgb(225,35,8)"/><text x="28.5092%" y="111.50"></text></g><g><title>generics_of (837,579 samples, 0.12%)</title><rect x="29.0648%" y="101" width="0.1201%" height="15" fill="rgb(250,213,24)"/><text x="29.3148%" y="111.50"></text></g><g><title>type_collecting (2,317,164 samples, 0.33%)</title><rect x="28.9612%" y="133" width="0.3322%" height="15" fill="rgb(247,123,22)"/><text x="29.2112%" y="143.50"></text></g><g><title>collect_mod_item_types (2,302,484 samples, 0.33%)</title><rect x="28.9633%" y="117" width="0.3301%" height="15" fill="rgb(231,138,38)"/><text x="29.2133%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,629,068 samples, 0.38%)</title><rect x="29.3258%" y="117" width="0.3769%" height="15" fill="rgb(231,145,46)"/><text x="29.5758%" y="127.50"></text></g><g><title>check_item_well_formed (2,627,625 samples, 0.38%)</title><rect x="29.7027%" y="117" width="0.3767%" height="15" fill="rgb(251,118,11)"/><text x="29.9527%" y="127.50"></text></g><g><title>analysis (126,744,821 samples, 18.17%)</title><rect x="11.9209%" y="165" width="18.1692%" height="15" fill="rgb(217,147,25)"/><text x="12.1709%" y="175.50">analysis</text></g><g><title>type_check_crate (83,087,180 samples, 11.91%)</title><rect x="18.1794%" y="149" width="11.9107%" height="15" fill="rgb(247,81,37)"/><text x="18.4294%" y="159.50">type_check_crate</text></g><g><title>wf_checking (5,552,356 samples, 0.80%)</title><rect x="29.2942%" y="133" width="0.7959%" height="15" fill="rgb(209,12,38)"/><text x="29.5442%" y="143.50"></text></g><g><title>const_caller_location (2,005,473 samples, 0.29%)</title><rect x="38.1002%" y="133" width="0.2875%" height="15" fill="rgb(227,1,9)"/><text x="38.3502%" y="143.50"></text></g><g><title>codegen_fn_attrs (763,262 samples, 0.11%)</title><rect x="38.7824%" y="117" width="0.1094%" height="15" fill="rgb(248,47,43)"/><text x="39.0324%" y="127.50"></text></g><g><title>layout_of (1,255,863 samples, 0.18%)</title><rect x="38.9068%" y="117" width="0.1800%" height="15" fill="rgb(221,10,30)"/><text x="39.1568%" y="127.50"></text></g><g><title>predicates_of (1,264,445 samples, 0.18%)</title><rect x="39.4155%" y="101" width="0.1813%" height="15" fill="rgb(210,229,1)"/><text x="39.6655%" y="111.50"></text></g><g><title>predicates_defined_on (916,421 samples, 0.13%)</title><rect x="39.4654%" y="85" width="0.1314%" height="15" fill="rgb(222,148,37)"/><text x="39.7154%" y="95.50"></text></g><g><title>param_env (3,558,102 samples, 0.51%)</title><rect x="39.0869%" y="117" width="0.5101%" height="15" fill="rgb(234,67,33)"/><text x="39.3369%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (882,239 samples, 0.13%)</title><rect x="39.5969%" y="117" width="0.1265%" height="15" fill="rgb(247,98,35)"/><text x="39.8469%" y="127.50"></text></g><g><title>fn_abi_of_instance (9,319,162 samples, 1.34%)</title><rect x="38.3914%" y="133" width="1.3359%" height="15" fill="rgb(247,138,52)"/><text x="38.6414%" y="143.50"></text></g><g><title>layout_of (943,306 samples, 0.14%)</title><rect x="39.7915%" y="133" width="0.1352%" height="15" fill="rgb(213,79,30)"/><text x="40.0415%" y="143.50"></text></g><g><title>codegen_module (66,889,896 samples, 9.59%)</title><rect x="30.4324%" y="149" width="9.5888%" height="15" fill="rgb(246,177,23)"/><text x="30.6824%" y="159.50">codegen_module</text></g><g><title>codegen_crate (69,344,931 samples, 9.94%)</title><rect x="30.0916%" y="165" width="9.9407%" height="15" fill="rgb(230,62,27)"/><text x="30.3416%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (313,550,859 samples, 44.95%)</title><rect x="40.0660%" y="149" width="44.9482%" height="15" fill="rgb(216,154,8)"/><text x="40.3160%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (293,700,939 samples, 42.10%)</title><rect x="42.9116%" y="133" width="42.1027%" height="15" fill="rgb(244,35,45)"/><text x="43.1616%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (329,398,588 samples, 47.22%)</title><rect x="40.0324%" y="165" width="47.2200%" height="15" fill="rgb(251,115,12)"/><text x="40.2824%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (15,613,088 samples, 2.24%)</title><rect x="85.0142%" y="149" width="2.2382%" height="15" fill="rgb(240,54,50)"/><text x="85.2642%" y="159.50">L..</text></g><g><title>metadata_register_crate (2,617,707 samples, 0.38%)</title><rect x="90.4207%" y="117" width="0.3753%" height="15" fill="rgb(233,84,52)"/><text x="90.6707%" y="127.50"></text></g><g><title>metadata_register_crate (995,410 samples, 0.14%)</title><rect x="90.6532%" y="101" width="0.1427%" height="15" fill="rgb(207,117,47)"/><text x="90.9032%" y="111.50"></text></g><g><title>macro_expand_crate (24,854,861 samples, 3.56%)</title><rect x="87.3326%" y="149" width="3.5630%" height="15" fill="rgb(249,43,39)"/><text x="87.5826%" y="159.50">macr..</text></g><g><title>expand_crate (24,833,771 samples, 3.56%)</title><rect x="87.3356%" y="133" width="3.5600%" height="15" fill="rgb(209,38,44)"/><text x="87.5856%" y="143.50">expa..</text></g><g><title>late_resolve_crate (1,879,619 samples, 0.27%)</title><rect x="90.9464%" y="133" width="0.2694%" height="15" fill="rgb(236,212,23)"/><text x="91.1964%" y="143.50"></text></g><g><title>configure_and_expand (27,790,401 samples, 3.98%)</title><rect x="87.2524%" y="165" width="3.9838%" height="15" fill="rgb(242,79,21)"/><text x="87.5024%" y="175.50">conf..</text></g><g><title>resolve_crate (2,239,373 samples, 0.32%)</title><rect x="90.9152%" y="149" width="0.3210%" height="15" fill="rgb(211,96,35)"/><text x="91.1652%" y="159.50"></text></g><g><title>free_global_ctxt (9,861,900 samples, 1.41%)</title><rect x="91.3531%" y="165" width="1.4137%" height="15" fill="rgb(253,215,40)"/><text x="91.6031%" y="175.50"></text></g><g><title>item_attrs (910,970 samples, 0.13%)</title><rect x="93.2715%" y="69" width="0.1306%" height="15" fill="rgb(211,81,21)"/><text x="93.5215%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (873,929 samples, 0.13%)</title><rect x="93.2768%" y="53" width="0.1253%" height="15" fill="rgb(208,190,38)"/><text x="93.5268%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,464,917 samples, 0.21%)</title><rect x="93.2381%" y="85" width="0.2100%" height="15" fill="rgb(235,213,38)"/><text x="93.4881%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,283,986 samples, 0.33%)</title><rect x="94.3226%" y="69" width="0.3274%" height="15" fill="rgb(237,122,38)"/><text x="94.5726%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,439,512 samples, 0.78%)</title><rect x="94.6501%" y="69" width="0.7798%" height="15" fill="rgb(244,218,35)"/><text x="94.9001%" y="79.50"></text></g><g><title>eval_to_const_value_raw (739,230 samples, 0.11%)</title><rect x="95.4722%" y="53" width="0.1060%" height="15" fill="rgb(240,68,47)"/><text x="95.7222%" y="63.50"></text></g><g><title>eval_to_const_value_raw (716,819 samples, 0.10%)</title><rect x="95.4754%" y="37" width="0.1028%" height="15" fill="rgb(210,16,53)"/><text x="95.7254%" y="47.50"></text></g><g><title>optimized_mir (14,176,574 samples, 2.03%)</title><rect x="93.5476%" y="85" width="2.0322%" height="15" fill="rgb(235,124,12)"/><text x="93.7976%" y="95.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (823,650 samples, 0.12%)</title><rect x="95.4618%" y="69" width="0.1181%" height="15" fill="rgb(224,169,11)"/><text x="95.7118%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,328,782 samples, 0.33%)</title><rect x="95.6939%" y="69" width="0.3338%" height="15" fill="rgb(250,166,2)"/><text x="95.9439%" y="79.50"></text></g><g><title>specialization_graph_of (780,399 samples, 0.11%)</title><rect x="96.1127%" y="69" width="0.1119%" height="15" fill="rgb(242,216,29)"/><text x="96.3627%" y="79.50"></text></g><g><title>resolve_instance (4,807,277 samples, 0.69%)</title><rect x="95.5798%" y="85" width="0.6891%" height="15" fill="rgb(230,116,27)"/><text x="95.8298%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (23,725,330 samples, 3.40%)</title><rect x="92.9769%" y="101" width="3.4011%" height="15" fill="rgb(228,99,48)"/><text x="93.2269%" y="111.50">mon..</text></g><g><title>monomorphization_collector (23,806,261 samples, 3.41%)</title><rect x="92.9766%" y="117" width="3.4127%" height="15" fill="rgb(253,11,6)"/><text x="93.2266%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,639,486 samples, 0.24%)</title><rect x="96.3900%" y="101" width="0.2350%" height="15" fill="rgb(247,143,39)"/><text x="96.6400%" y="111.50"></text></g><g><title>symbol_name (1,493,704 samples, 0.21%)</title><rect x="96.4109%" y="85" width="0.2141%" height="15" fill="rgb(236,97,10)"/><text x="96.6609%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (26,304,036 samples, 3.77%)</title><rect x="92.9702%" y="133" width="3.7707%" height="15" fill="rgb(233,208,19)"/><text x="93.2202%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,453,455 samples, 0.35%)</title><rect x="96.3893%" y="117" width="0.3517%" height="15" fill="rgb(216,164,2)"/><text x="96.6393%" y="127.50"></text></g><g><title>cgu_partitioning (808,669 samples, 0.12%)</title><rect x="96.6251%" y="101" width="0.1159%" height="15" fill="rgb(220,129,5)"/><text x="96.8751%" y="111.50"></text></g><g><title>exported_symbols (26,477,598 samples, 3.80%)</title><rect x="92.9605%" y="149" width="3.7956%" height="15" fill="rgb(242,17,10)"/><text x="93.2105%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (921,542 samples, 0.13%)</title><rect x="96.9355%" y="133" width="0.1321%" height="15" fill="rgb(242,107,0)"/><text x="97.1855%" y="143.50"></text></g><g><title>optimized_mir (2,118,731 samples, 0.30%)</title><rect x="96.7668%" y="149" width="0.3037%" height="15" fill="rgb(251,28,31)"/><text x="97.0168%" y="159.50"></text></g><g><title>generate_crate_metadata (30,067,514 samples, 4.31%)</title><rect x="92.7668%" y="165" width="4.3102%" height="15" fill="rgb(233,223,10)"/><text x="93.0168%" y="175.50">gener..</text></g><g><title>hir_lowering (3,677,407 samples, 0.53%)</title><rect x="97.0771%" y="165" width="0.5272%" height="15" fill="rgb(215,21,27)"/><text x="97.3271%" y="175.50"></text></g><g><title>finish_ongoing_codegen (11,280,884 samples, 1.62%)</title><rect x="97.6075%" y="149" width="1.6171%" height="15" fill="rgb(232,23,21)"/><text x="97.8575%" y="159.50"></text></g><g><title>link_crate (2,177,252 samples, 0.31%)</title><rect x="99.2246%" y="149" width="0.3121%" height="15" fill="rgb(244,5,23)"/><text x="99.4746%" y="159.50"></text></g><g><title>link_binary (2,140,311 samples, 0.31%)</title><rect x="99.2299%" y="133" width="0.3068%" height="15" fill="rgb(226,81,46)"/><text x="99.4799%" y="143.50"></text></g><g><title>link_rlib (1,527,676 samples, 0.22%)</title><rect x="99.3177%" y="117" width="0.2190%" height="15" fill="rgb(247,70,30)"/><text x="99.5677%" y="127.50"></text></g><g><title>link (13,493,656 samples, 1.93%)</title><rect x="97.6043%" y="165" width="1.9343%" height="15" fill="rgb(212,68,19)"/><text x="97.8543%" y="175.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,136,042 samples, 0.31%)</title><rect x="99.6295%" y="165" width="0.3062%" height="15" fill="rgb(240,187,13)"/><text x="99.8795%" y="175.50"></text></g><g><title>all (697,582,490 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (697,582,490 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>