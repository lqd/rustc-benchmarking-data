<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (254,246,492 samples, 13.66%)</title><rect x="0.0322%" y="181" width="13.6626%" height="15" fill="rgb(227,0,7)"/><text x="0.2822%" y="191.50">LLVM_passes</text></g><g><title>specialization_graph_of (4,106,611 samples, 0.22%)</title><rect x="14.9659%" y="53" width="0.2207%" height="15" fill="rgb(217,0,24)"/><text x="15.2159%" y="63.50"></text></g><g><title>impl_trait_ref (2,085,963 samples, 0.11%)</title><rect x="15.0745%" y="37" width="0.1121%" height="15" fill="rgb(221,193,54)"/><text x="15.3245%" y="47.50"></text></g><g><title>resolve_instance (4,456,625 samples, 0.24%)</title><rect x="14.9502%" y="69" width="0.2395%" height="15" fill="rgb(248,212,6)"/><text x="15.2002%" y="79.50"></text></g><g><title>mir_const (13,941,811 samples, 0.75%)</title><rect x="14.5172%" y="117" width="0.7492%" height="15" fill="rgb(208,68,35)"/><text x="14.7672%" y="127.50"></text></g><g><title>unsafety_check_result (12,493,287 samples, 0.67%)</title><rect x="14.5951%" y="101" width="0.6714%" height="15" fill="rgb(232,128,0)"/><text x="14.8451%" y="111.50"></text></g><g><title>mir_built (11,027,361 samples, 0.59%)</title><rect x="14.6738%" y="85" width="0.5926%" height="15" fill="rgb(207,160,47)"/><text x="14.9238%" y="95.50"></text></g><g><title>mir_promoted (15,352,178 samples, 0.82%)</title><rect x="14.4612%" y="133" width="0.8250%" height="15" fill="rgb(228,23,34)"/><text x="14.7112%" y="143.50"></text></g><g><title>MIR_borrow_checking (31,879,384 samples, 1.71%)</title><rect x="13.7097%" y="165" width="1.7131%" height="15" fill="rgb(218,30,26)"/><text x="13.9597%" y="175.50"></text></g><g><title>mir_borrowck (31,827,704 samples, 1.71%)</title><rect x="13.7125%" y="149" width="1.7103%" height="15" fill="rgb(220,122,19)"/><text x="13.9625%" y="159.50"></text></g><g><title>lint_checking (1,946,949 samples, 0.10%)</title><rect x="15.5934%" y="149" width="0.1046%" height="15" fill="rgb(250,228,42)"/><text x="15.8434%" y="159.50"></text></g><g><title>misc_checking_3 (3,415,175 samples, 0.18%)</title><rect x="15.5660%" y="165" width="0.1835%" height="15" fill="rgb(240,193,28)"/><text x="15.8160%" y="175.50"></text></g><g><title>coherent_trait (3,163,962 samples, 0.17%)</title><rect x="15.7535%" y="133" width="0.1700%" height="15" fill="rgb(216,20,37)"/><text x="16.0035%" y="143.50"></text></g><g><title>specialization_graph_of (3,152,622 samples, 0.17%)</title><rect x="15.7541%" y="117" width="0.1694%" height="15" fill="rgb(206,188,39)"/><text x="16.0041%" y="127.50"></text></g><g><title>coherence_checking (3,212,973 samples, 0.17%)</title><rect x="15.7529%" y="149" width="0.1727%" height="15" fill="rgb(217,207,13)"/><text x="16.0029%" y="159.50"></text></g><g><title>evaluate_obligation (2,267,698 samples, 0.12%)</title><rect x="17.0675%" y="101" width="0.1219%" height="15" fill="rgb(231,73,38)"/><text x="17.3175%" y="111.50"></text></g><g><title>evaluate_obligation (6,295,021 samples, 0.34%)</title><rect x="17.7295%" y="85" width="0.3383%" height="15" fill="rgb(225,20,46)"/><text x="17.9795%" y="95.50"></text></g><g><title>typeck (16,761,430 samples, 0.90%)</title><rect x="17.2898%" y="101" width="0.9007%" height="15" fill="rgb(210,31,41)"/><text x="17.5398%" y="111.50"></text></g><g><title>item_bodies_checking (42,195,228 samples, 2.27%)</title><rect x="15.9267%" y="149" width="2.2675%" height="15" fill="rgb(221,200,47)"/><text x="16.1767%" y="159.50">i..</text></g><g><title>typeck_item_bodies (42,192,528 samples, 2.27%)</title><rect x="15.9268%" y="133" width="2.2673%" height="15" fill="rgb(226,26,5)"/><text x="16.1768%" y="143.50">t..</text></g><g><title>typeck (42,159,817 samples, 2.27%)</title><rect x="15.9286%" y="117" width="2.2656%" height="15" fill="rgb(249,33,26)"/><text x="16.1786%" y="127.50">t..</text></g><g><title>analysis (87,862,172 samples, 4.72%)</title><rect x="13.6948%" y="181" width="4.7215%" height="15" fill="rgb(235,183,28)"/><text x="13.9448%" y="191.50">analys..</text></g><g><title>type_check_crate (49,625,704 samples, 2.67%)</title><rect x="15.7495%" y="165" width="2.6668%" height="15" fill="rgb(221,5,38)"/><text x="15.9995%" y="175.50">ty..</text></g><g><title>wf_checking (2,168,781 samples, 0.12%)</title><rect x="18.2997%" y="149" width="0.1165%" height="15" fill="rgb(247,18,42)"/><text x="18.5497%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (4,527,897 samples, 0.24%)</title><rect x="27.9051%" y="149" width="0.2433%" height="15" fill="rgb(241,131,45)"/><text x="28.1551%" y="159.50"></text></g><g><title>const_caller_location (2,328,036 samples, 0.13%)</title><rect x="28.1484%" y="149" width="0.1251%" height="15" fill="rgb(249,31,29)"/><text x="28.3984%" y="159.50"></text></g><g><title>layout_of (4,209,825 samples, 0.23%)</title><rect x="28.9271%" y="133" width="0.2262%" height="15" fill="rgb(225,111,53)"/><text x="29.1771%" y="143.50"></text></g><g><title>predicates_of (3,204,609 samples, 0.17%)</title><rect x="29.5075%" y="117" width="0.1722%" height="15" fill="rgb(238,160,17)"/><text x="29.7575%" y="127.50"></text></g><g><title>predicates_defined_on (2,402,780 samples, 0.13%)</title><rect x="29.5506%" y="101" width="0.1291%" height="15" fill="rgb(214,148,48)"/><text x="29.8006%" y="111.50"></text></g><g><title>param_env (9,816,313 samples, 0.53%)</title><rect x="29.1533%" y="133" width="0.5275%" height="15" fill="rgb(232,36,49)"/><text x="29.4033%" y="143.50"></text></g><g><title>normalize_projection_ty (2,157,168 samples, 0.12%)</title><rect x="29.7319%" y="117" width="0.1159%" height="15" fill="rgb(209,103,24)"/><text x="29.9819%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,137,246 samples, 0.17%)</title><rect x="29.6808%" y="133" width="0.1686%" height="15" fill="rgb(229,88,8)"/><text x="29.9308%" y="143.50"></text></g><g><title>fn_abi_of_instance (29,279,102 samples, 1.57%)</title><rect x="28.2821%" y="149" width="1.5734%" height="15" fill="rgb(213,181,19)"/><text x="28.5321%" y="159.50"></text></g><g><title>layout_of (4,334,631 samples, 0.23%)</title><rect x="29.9345%" y="149" width="0.2329%" height="15" fill="rgb(254,191,54)"/><text x="30.1845%" y="159.50"></text></g><g><title>codegen_module (217,325,337 samples, 11.68%)</title><rect x="18.5909%" y="165" width="11.6785%" height="15" fill="rgb(241,83,37)"/><text x="18.8409%" y="175.50">codegen_module</text></g><g><title>item_attrs (2,248,825 samples, 0.12%)</title><rect x="30.7424%" y="101" width="0.1208%" height="15" fill="rgb(233,36,39)"/><text x="30.9924%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,133,635 samples, 0.11%)</title><rect x="30.7485%" y="85" width="0.1147%" height="15" fill="rgb(226,3,54)"/><text x="30.9985%" y="95.50"></text></g><g><title>codegen_fn_attrs (4,144,313 samples, 0.22%)</title><rect x="30.7057%" y="117" width="0.2227%" height="15" fill="rgb(245,192,40)"/><text x="30.9557%" y="127.50"></text></g><g><title>mir_shims (2,619,905 samples, 0.14%)</title><rect x="30.9739%" y="117" width="0.1408%" height="15" fill="rgb(238,167,29)"/><text x="31.2239%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,588,350 samples, 0.30%)</title><rect x="31.3961%" y="101" width="0.3003%" height="15" fill="rgb(232,182,51)"/><text x="31.6461%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,390,436 samples, 0.40%)</title><rect x="31.6964%" y="101" width="0.3971%" height="15" fill="rgb(231,60,39)"/><text x="31.9464%" y="111.50"></text></g><g><title>optimized_mir (19,074,222 samples, 1.03%)</title><rect x="31.1149%" y="117" width="1.0250%" height="15" fill="rgb(208,69,12)"/><text x="31.3649%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (8,975,750 samples, 0.48%)</title><rect x="32.3044%" y="101" width="0.4823%" height="15" fill="rgb(235,93,37)"/><text x="32.5544%" y="111.50"></text></g><g><title>needs_drop_raw (2,008,151 samples, 0.11%)</title><rect x="32.8578%" y="101" width="0.1079%" height="15" fill="rgb(213,116,39)"/><text x="33.1078%" y="111.50"></text></g><g><title>specialization_graph_of (3,848,749 samples, 0.21%)</title><rect x="32.9664%" y="101" width="0.2068%" height="15" fill="rgb(222,207,29)"/><text x="33.2164%" y="111.50"></text></g><g><title>resolve_instance (20,055,477 samples, 1.08%)</title><rect x="32.1399%" y="117" width="1.0777%" height="15" fill="rgb(206,96,30)"/><text x="32.3899%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,953,728 samples, 0.10%)</title><rect x="33.3220%" y="101" width="0.1050%" height="15" fill="rgb(218,138,4)"/><text x="33.5720%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,897,646 samples, 0.10%)</title><rect x="33.3250%" y="85" width="0.1020%" height="15" fill="rgb(250,191,14)"/><text x="33.5750%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,442,728 samples, 0.13%)</title><rect x="33.2995%" y="117" width="0.1313%" height="15" fill="rgb(239,60,40)"/><text x="33.5495%" y="127.50"></text></g><g><title>specialization_graph_of (3,006,910 samples, 0.16%)</title><rect x="33.5119%" y="85" width="0.1616%" height="15" fill="rgb(206,27,48)"/><text x="33.7619%" y="95.50"></text></g><g><title>resolve_instance (3,687,097 samples, 0.20%)</title><rect x="33.4758%" y="101" width="0.1981%" height="15" fill="rgb(225,35,8)"/><text x="33.7258%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (63,266,693 samples, 3.40%)</title><rect x="30.2743%" y="133" width="3.3998%" height="15" fill="rgb(250,213,24)"/><text x="30.5243%" y="143.50">mon..</text></g><g><title>vtable_entries (4,284,294 samples, 0.23%)</title><rect x="33.4439%" y="117" width="0.2302%" height="15" fill="rgb(247,123,22)"/><text x="33.6939%" y="127.50"></text></g><g><title>monomorphization_collector (63,297,273 samples, 3.40%)</title><rect x="30.2742%" y="149" width="3.4014%" height="15" fill="rgb(231,138,38)"/><text x="30.5242%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (6,254,244 samples, 0.34%)</title><rect x="33.6764%" y="133" width="0.3361%" height="15" fill="rgb(231,145,46)"/><text x="33.9264%" y="143.50"></text></g><g><title>symbol_name (5,632,011 samples, 0.30%)</title><rect x="33.7098%" y="117" width="0.3027%" height="15" fill="rgb(251,118,11)"/><text x="33.9598%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (72,463,885 samples, 3.89%)</title><rect x="30.2700%" y="165" width="3.8940%" height="15" fill="rgb(217,147,25)"/><text x="30.5200%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (9,088,852 samples, 0.49%)</title><rect x="33.6756%" y="149" width="0.4884%" height="15" fill="rgb(247,81,37)"/><text x="33.9256%" y="159.50"></text></g><g><title>cgu_partitioning (2,821,098 samples, 0.15%)</title><rect x="34.0125%" y="133" width="0.1516%" height="15" fill="rgb(209,12,38)"/><text x="34.2625%" y="143.50"></text></g><g><title>codegen_crate (293,444,979 samples, 15.77%)</title><rect x="18.4168%" y="181" width="15.7690%" height="15" fill="rgb(227,1,9)"/><text x="18.6668%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (819,506,701 samples, 44.04%)</title><rect x="34.1991%" y="165" width="44.0383%" height="15" fill="rgb(248,47,43)"/><text x="34.4491%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (782,804,320 samples, 42.07%)</title><rect x="36.1714%" y="149" width="42.0660%" height="15" fill="rgb(221,10,30)"/><text x="36.4214%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (860,279,742 samples, 46.23%)</title><rect x="34.1858%" y="181" width="46.2293%" height="15" fill="rgb(210,229,1)"/><text x="34.4358%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (40,524,871 samples, 2.18%)</title><rect x="78.2374%" y="165" width="2.1777%" height="15" fill="rgb(222,148,37)"/><text x="78.4874%" y="175.50">L..</text></g><g><title>metadata_register_crate (2,243,762 samples, 0.12%)</title><rect x="81.3164%" y="133" width="0.1206%" height="15" fill="rgb(234,67,33)"/><text x="81.5664%" y="143.50"></text></g><g><title>macro_expand_crate (18,656,540 samples, 1.00%)</title><rect x="80.4467%" y="165" width="1.0026%" height="15" fill="rgb(247,98,35)"/><text x="80.6967%" y="175.50"></text></g><g><title>expand_crate (18,632,310 samples, 1.00%)</title><rect x="80.4480%" y="149" width="1.0013%" height="15" fill="rgb(247,138,52)"/><text x="80.6980%" y="159.50"></text></g><g><title>late_resolve_crate (4,318,925 samples, 0.23%)</title><rect x="81.5025%" y="149" width="0.2321%" height="15" fill="rgb(213,79,30)"/><text x="81.7525%" y="159.50"></text></g><g><title>configure_and_expand (24,778,992 samples, 1.33%)</title><rect x="80.4151%" y="181" width="1.3316%" height="15" fill="rgb(246,177,23)"/><text x="80.6651%" y="191.50"></text></g><g><title>resolve_crate (4,833,230 samples, 0.26%)</title><rect x="81.4870%" y="165" width="0.2597%" height="15" fill="rgb(230,62,27)"/><text x="81.7370%" y="175.50"></text></g><g><title>free_global_ctxt (11,600,008 samples, 0.62%)</title><rect x="81.7766%" y="181" width="0.6234%" height="15" fill="rgb(216,154,8)"/><text x="82.0266%" y="191.50"></text></g><g><title>hir_lowering (4,182,342 samples, 0.22%)</title><rect x="82.4142%" y="181" width="0.2247%" height="15" fill="rgb(244,35,45)"/><text x="82.6642%" y="191.50"></text></g><g><title>finish_ongoing_codegen (33,957,024 samples, 1.82%)</title><rect x="82.6402%" y="165" width="1.8248%" height="15" fill="rgb(251,115,12)"/><text x="82.8902%" y="175.50">f..</text></g><g><title>link_crate (283,798,512 samples, 15.25%)</title><rect x="84.4649%" y="165" width="15.2506%" height="15" fill="rgb(240,54,50)"/><text x="84.7149%" y="175.50">link_crate</text></g><g><title>link_binary (283,655,371 samples, 15.24%)</title><rect x="84.4726%" y="149" width="15.2429%" height="15" fill="rgb(233,84,52)"/><text x="84.7226%" y="159.50">link_binary</text></g><g><title>run_linker (281,292,376 samples, 15.12%)</title><rect x="84.5996%" y="133" width="15.1160%" height="15" fill="rgb(207,117,47)"/><text x="84.8496%" y="143.50">run_linker</text></g><g><title>link (317,788,826 samples, 17.08%)</title><rect x="82.6390%" y="181" width="17.0772%" height="15" fill="rgb(249,43,39)"/><text x="82.8890%" y="191.50">link</text></g><g><title>parse_crate (3,059,190 samples, 0.16%)</title><rect x="99.7162%" y="181" width="0.1644%" height="15" fill="rgb(209,38,44)"/><text x="99.9662%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,868,639 samples, 0.10%)</title><rect x="99.8954%" y="181" width="0.1004%" height="15" fill="rgb(236,212,23)"/><text x="100.1454%" y="191.50"></text></g><g><title>all (1,860,896,072 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,860,896,072 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,96,35)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>