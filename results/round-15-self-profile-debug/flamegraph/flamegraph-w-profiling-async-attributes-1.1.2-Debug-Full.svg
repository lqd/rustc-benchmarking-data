<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (186,036,813 samples, 11.65%)</title><rect x="0.0525%" y="181" width="11.6532%" height="15" fill="rgb(227,0,7)"/><text x="0.3025%" y="191.50">LLVM_passes</text></g><g><title>mir_const (3,262,163 samples, 0.20%)</title><rect x="12.0563%" y="117" width="0.2043%" height="15" fill="rgb(217,0,24)"/><text x="12.3063%" y="127.50"></text></g><g><title>unsafety_check_result (2,921,389 samples, 0.18%)</title><rect x="12.0777%" y="101" width="0.1830%" height="15" fill="rgb(221,193,54)"/><text x="12.3277%" y="111.50"></text></g><g><title>mir_built (2,683,818 samples, 0.17%)</title><rect x="12.0926%" y="85" width="0.1681%" height="15" fill="rgb(248,212,6)"/><text x="12.3426%" y="95.50"></text></g><g><title>mir_promoted (4,028,601 samples, 0.25%)</title><rect x="12.0362%" y="133" width="0.2523%" height="15" fill="rgb(208,68,35)"/><text x="12.2862%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,611,306 samples, 0.60%)</title><rect x="11.7168%" y="165" width="0.6020%" height="15" fill="rgb(232,128,0)"/><text x="11.9668%" y="175.50"></text></g><g><title>mir_borrowck (9,599,756 samples, 0.60%)</title><rect x="11.7175%" y="149" width="0.6013%" height="15" fill="rgb(207,160,47)"/><text x="11.9675%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,659,635 samples, 0.10%)</title><rect x="13.2298%" y="37" width="0.1040%" height="15" fill="rgb(228,23,34)"/><text x="13.4798%" y="47.50"></text></g><g><title>adt_dtorck_constraint (3,024,042 samples, 0.19%)</title><rect x="13.1601%" y="53" width="0.1894%" height="15" fill="rgb(218,30,26)"/><text x="13.4101%" y="63.50"></text></g><g><title>adt_dtorck_constraint (3,805,906 samples, 0.24%)</title><rect x="13.1229%" y="69" width="0.2384%" height="15" fill="rgb(220,122,19)"/><text x="13.3729%" y="79.50"></text></g><g><title>dropck_outlives (4,573,506 samples, 0.29%)</title><rect x="13.0822%" y="101" width="0.2865%" height="15" fill="rgb(250,228,42)"/><text x="13.3322%" y="111.50"></text></g><g><title>adt_dtorck_constraint (4,388,543 samples, 0.27%)</title><rect x="13.0938%" y="85" width="0.2749%" height="15" fill="rgb(240,193,28)"/><text x="13.3438%" y="95.50"></text></g><g><title>evaluate_obligation (1,748,656 samples, 0.11%)</title><rect x="13.3687%" y="101" width="0.1095%" height="15" fill="rgb(216,20,37)"/><text x="13.6187%" y="111.50"></text></g><g><title>item_bodies_checking (16,768,998 samples, 1.05%)</title><rect x="12.4962%" y="149" width="1.0504%" height="15" fill="rgb(206,188,39)"/><text x="12.7462%" y="159.50"></text></g><g><title>typeck_item_bodies (16,766,408 samples, 1.05%)</title><rect x="12.4963%" y="133" width="1.0502%" height="15" fill="rgb(217,207,13)"/><text x="12.7463%" y="143.50"></text></g><g><title>typeck (16,759,088 samples, 1.05%)</title><rect x="12.4968%" y="117" width="1.0498%" height="15" fill="rgb(231,73,38)"/><text x="12.7468%" y="127.50"></text></g><g><title>analysis (32,016,420 samples, 2.01%)</title><rect x="11.7058%" y="181" width="2.0055%" height="15" fill="rgb(225,20,46)"/><text x="11.9558%" y="191.50">a..</text></g><g><title>type_check_crate (19,450,795 samples, 1.22%)</title><rect x="12.4929%" y="165" width="1.2184%" height="15" fill="rgb(210,31,41)"/><text x="12.7429%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (4,536,730 samples, 0.28%)</title><rect x="21.2516%" y="149" width="0.2842%" height="15" fill="rgb(221,200,47)"/><text x="21.5016%" y="159.50"></text></g><g><title>layout_of (3,251,650 samples, 0.20%)</title><rect x="21.9150%" y="133" width="0.2037%" height="15" fill="rgb(226,26,5)"/><text x="22.1650%" y="143.50"></text></g><g><title>predicates_of (2,066,686 samples, 0.13%)</title><rect x="22.3207%" y="117" width="0.1295%" height="15" fill="rgb(249,33,26)"/><text x="22.5707%" y="127.50"></text></g><g><title>param_env (5,316,194 samples, 0.33%)</title><rect x="22.1187%" y="133" width="0.3330%" height="15" fill="rgb(235,183,28)"/><text x="22.3687%" y="143.50"></text></g><g><title>normalize_projection_ty (1,886,200 samples, 0.12%)</title><rect x="22.4880%" y="117" width="0.1182%" height="15" fill="rgb(221,5,38)"/><text x="22.7380%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,490,217 samples, 0.16%)</title><rect x="22.4517%" y="133" width="0.1560%" height="15" fill="rgb(247,18,42)"/><text x="22.7017%" y="143.50"></text></g><g><title>fn_abi_of_instance (16,414,712 samples, 1.03%)</title><rect x="21.5838%" y="149" width="1.0282%" height="15" fill="rgb(241,131,45)"/><text x="21.8338%" y="159.50"></text></g><g><title>layout_of (1,608,167 samples, 0.10%)</title><rect x="22.8644%" y="53" width="0.1007%" height="15" fill="rgb(249,31,29)"/><text x="23.1144%" y="63.50"></text></g><g><title>layout_of (2,101,372 samples, 0.13%)</title><rect x="22.8462%" y="69" width="0.1316%" height="15" fill="rgb(225,111,53)"/><text x="23.0962%" y="79.50"></text></g><g><title>layout_of (2,338,026 samples, 0.15%)</title><rect x="22.8355%" y="85" width="0.1465%" height="15" fill="rgb(238,160,17)"/><text x="23.0855%" y="95.50"></text></g><g><title>layout_of (2,814,189 samples, 0.18%)</title><rect x="22.8161%" y="101" width="0.1763%" height="15" fill="rgb(214,148,48)"/><text x="23.0661%" y="111.50"></text></g><g><title>layout_of (3,324,874 samples, 0.21%)</title><rect x="22.7984%" y="117" width="0.2083%" height="15" fill="rgb(232,36,49)"/><text x="23.0484%" y="127.50"></text></g><g><title>layout_of (4,011,392 samples, 0.25%)</title><rect x="22.7726%" y="133" width="0.2513%" height="15" fill="rgb(209,103,24)"/><text x="23.0226%" y="143.50"></text></g><g><title>layout_of (6,214,976 samples, 0.39%)</title><rect x="22.6514%" y="149" width="0.3893%" height="15" fill="rgb(229,88,8)"/><text x="22.9014%" y="159.50"></text></g><g><title>codegen_module (146,842,520 samples, 9.20%)</title><rect x="13.9418%" y="165" width="9.1981%" height="15" fill="rgb(213,181,19)"/><text x="14.1918%" y="175.50">codegen_module</text></g><g><title>codegen_fn_attrs (1,840,645 samples, 0.12%)</title><rect x="23.3185%" y="117" width="0.1153%" height="15" fill="rgb(254,191,54)"/><text x="23.5685%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,035,802 samples, 0.13%)</title><rect x="23.6415%" y="101" width="0.1275%" height="15" fill="rgb(241,83,37)"/><text x="23.8915%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,951,010 samples, 0.12%)</title><rect x="23.7690%" y="101" width="0.1222%" height="15" fill="rgb(233,36,39)"/><text x="24.0190%" y="111.50"></text></g><g><title>optimized_mir (5,953,883 samples, 0.37%)</title><rect x="23.5217%" y="117" width="0.3729%" height="15" fill="rgb(226,3,54)"/><text x="23.7717%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (3,562,409 samples, 0.22%)</title><rect x="23.9665%" y="101" width="0.2231%" height="15" fill="rgb(245,192,40)"/><text x="24.2165%" y="111.50"></text></g><g><title>impl_parent (1,741,449 samples, 0.11%)</title><rect x="24.4472%" y="85" width="0.1091%" height="15" fill="rgb(238,167,29)"/><text x="24.6972%" y="95.50"></text></g><g><title>specialization_graph_of (7,031,431 samples, 0.44%)</title><rect x="24.2960%" y="101" width="0.4404%" height="15" fill="rgb(232,182,51)"/><text x="24.5460%" y="111.50"></text></g><g><title>impl_trait_ref (2,876,086 samples, 0.18%)</title><rect x="24.5563%" y="85" width="0.1802%" height="15" fill="rgb(231,60,39)"/><text x="24.8063%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,299,303 samples, 0.14%)</title><rect x="24.5924%" y="69" width="0.1440%" height="15" fill="rgb(208,69,12)"/><text x="24.8424%" y="79.50"></text></g><g><title>resolve_instance (14,189,455 samples, 0.89%)</title><rect x="23.8947%" y="117" width="0.8888%" height="15" fill="rgb(235,93,37)"/><text x="24.1447%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (3,405,663 samples, 0.21%)</title><rect x="24.8624%" y="117" width="0.2133%" height="15" fill="rgb(213,116,39)"/><text x="25.1124%" y="127.50"></text></g><g><title>upstream_monomorphizations (3,370,213 samples, 0.21%)</title><rect x="24.8647%" y="101" width="0.2111%" height="15" fill="rgb(222,207,29)"/><text x="25.1147%" y="111.50"></text></g><g><title>exported_symbols (2,868,478 samples, 0.18%)</title><rect x="24.8961%" y="85" width="0.1797%" height="15" fill="rgb(206,96,30)"/><text x="25.1461%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,862,988 samples, 0.18%)</title><rect x="24.8964%" y="69" width="0.1793%" height="15" fill="rgb(218,138,4)"/><text x="25.1464%" y="79.50"></text></g><g><title>impl_trait_ref (2,960,093 samples, 0.19%)</title><rect x="25.2865%" y="69" width="0.1854%" height="15" fill="rgb(250,191,14)"/><text x="25.5365%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,693,588 samples, 0.17%)</title><rect x="25.3032%" y="53" width="0.1687%" height="15" fill="rgb(239,60,40)"/><text x="25.5532%" y="63.50"></text></g><g><title>specialization_graph_of (4,917,968 samples, 0.31%)</title><rect x="25.1639%" y="85" width="0.3081%" height="15" fill="rgb(206,27,48)"/><text x="25.4139%" y="95.50"></text></g><g><title>resolve_instance (5,726,518 samples, 0.36%)</title><rect x="25.1138%" y="101" width="0.3587%" height="15" fill="rgb(225,35,8)"/><text x="25.3638%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (37,177,613 samples, 2.33%)</title><rect x="23.1441%" y="133" width="2.3288%" height="15" fill="rgb(250,213,24)"/><text x="23.3941%" y="143.50">m..</text></g><g><title>vtable_entries (6,340,484 samples, 0.40%)</title><rect x="25.0758%" y="117" width="0.3972%" height="15" fill="rgb(247,123,22)"/><text x="25.3258%" y="127.50"></text></g><g><title>monomorphization_collector (37,195,783 samples, 2.33%)</title><rect x="23.1440%" y="149" width="2.3299%" height="15" fill="rgb(231,138,38)"/><text x="23.3940%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (1,978,130 samples, 0.12%)</title><rect x="25.4743%" y="133" width="0.1239%" height="15" fill="rgb(231,145,46)"/><text x="25.7243%" y="143.50"></text></g><g><title>symbol_name (1,790,757 samples, 0.11%)</title><rect x="25.4860%" y="117" width="0.1122%" height="15" fill="rgb(251,118,11)"/><text x="25.7360%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (40,195,062 samples, 2.52%)</title><rect x="23.1406%" y="165" width="2.5178%" height="15" fill="rgb(217,147,25)"/><text x="23.3906%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (2,944,159 samples, 0.18%)</title><rect x="25.4739%" y="149" width="0.1844%" height="15" fill="rgb(247,81,37)"/><text x="25.7239%" y="159.50"></text></g><g><title>codegen_crate (191,119,884 samples, 11.97%)</title><rect x="13.7120%" y="181" width="11.9716%" height="15" fill="rgb(209,12,38)"/><text x="13.9620%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (430,970,516 samples, 27.00%)</title><rect x="25.6974%" y="165" width="26.9958%" height="15" fill="rgb(227,1,9)"/><text x="25.9474%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (407,542,762 samples, 25.53%)</title><rect x="27.1649%" y="149" width="25.5283%" height="15" fill="rgb(248,47,43)"/><text x="27.4149%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (445,060,858 samples, 27.88%)</title><rect x="25.6836%" y="181" width="27.8784%" height="15" fill="rgb(221,10,30)"/><text x="25.9336%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (13,870,378 samples, 0.87%)</title><rect x="52.6932%" y="165" width="0.8688%" height="15" fill="rgb(210,229,1)"/><text x="52.9432%" y="175.50"></text></g><g><title>macro_expand_crate (43,808,319 samples, 2.74%)</title><rect x="53.5895%" y="165" width="2.7441%" height="15" fill="rgb(222,148,37)"/><text x="53.8395%" y="175.50">ma..</text></g><g><title>expand_crate (43,788,409 samples, 2.74%)</title><rect x="53.5908%" y="149" width="2.7429%" height="15" fill="rgb(234,67,33)"/><text x="53.8408%" y="159.50">ex..</text></g><g><title>metadata_register_crate (3,042,940 samples, 0.19%)</title><rect x="56.1431%" y="133" width="0.1906%" height="15" fill="rgb(247,98,35)"/><text x="56.3931%" y="143.50"></text></g><g><title>configure_and_expand (46,511,675 samples, 2.91%)</title><rect x="53.5620%" y="181" width="2.9135%" height="15" fill="rgb(247,138,52)"/><text x="53.8120%" y="191.50">co..</text></g><g><title>resolve_crate (1,727,907 samples, 0.11%)</title><rect x="56.3672%" y="165" width="0.1082%" height="15" fill="rgb(213,79,30)"/><text x="56.6172%" y="175.50"></text></g><g><title>free_global_ctxt (5,405,234 samples, 0.34%)</title><rect x="56.4983%" y="181" width="0.3386%" height="15" fill="rgb(246,177,23)"/><text x="56.7483%" y="191.50"></text></g><g><title>finish_ongoing_codegen (45,857,149 samples, 2.87%)</title><rect x="56.9256%" y="165" width="2.8725%" height="15" fill="rgb(230,62,27)"/><text x="57.1756%" y="175.50">fi..</text></g><g><title>link_crate (639,112,480 samples, 40.03%)</title><rect x="59.7980%" y="165" width="40.0337%" height="15" fill="rgb(216,154,8)"/><text x="60.0480%" y="175.50">link_crate</text></g><g><title>link_binary (638,892,548 samples, 40.02%)</title><rect x="59.8118%" y="149" width="40.0199%" height="15" fill="rgb(244,35,45)"/><text x="60.0618%" y="159.50">link_binary</text></g><g><title>run_linker (636,578,454 samples, 39.87%)</title><rect x="59.9568%" y="133" width="39.8749%" height="15" fill="rgb(251,115,12)"/><text x="60.2068%" y="143.50">run_linker</text></g><g><title>link (684,998,019 samples, 42.91%)</title><rect x="56.9244%" y="181" width="42.9079%" height="15" fill="rgb(240,54,50)"/><text x="57.1744%" y="191.50">link</text></g><g><title>all (1,596,437,287 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,84,52)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,596,437,287 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>