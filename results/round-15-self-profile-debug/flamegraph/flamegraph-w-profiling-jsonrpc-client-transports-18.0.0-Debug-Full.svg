<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (149,266,872 samples, 11.42%)</title><rect x="0.0659%" y="357" width="11.4176%" height="15" fill="rgb(227,0,7)"/><text x="0.3159%" y="367.50">LLVM_passes</text></g><g><title>is_copy_raw (2,494,489 samples, 0.19%)</title><rect x="14.6951%" y="229" width="0.1908%" height="15" fill="rgb(217,0,24)"/><text x="14.9451%" y="239.50"></text></g><g><title>evaluate_obligation (2,046,835 samples, 0.16%)</title><rect x="14.7293%" y="213" width="0.1566%" height="15" fill="rgb(221,193,54)"/><text x="14.9793%" y="223.50"></text></g><g><title>needs_drop_raw (3,035,688 samples, 0.23%)</title><rect x="14.6543%" y="245" width="0.2322%" height="15" fill="rgb(248,212,6)"/><text x="14.9043%" y="255.50"></text></g><g><title>specialization_graph_of (3,007,191 samples, 0.23%)</title><rect x="14.9874%" y="229" width="0.2300%" height="15" fill="rgb(208,68,35)"/><text x="15.2374%" y="239.50"></text></g><g><title>resolve_instance (4,442,916 samples, 0.34%)</title><rect x="14.8865%" y="245" width="0.3398%" height="15" fill="rgb(232,128,0)"/><text x="15.1365%" y="255.50"></text></g><g><title>thir_body (2,195,220 samples, 0.17%)</title><rect x="15.2297%" y="245" width="0.1679%" height="15" fill="rgb(207,160,47)"/><text x="15.4797%" y="255.50"></text></g><g><title>mir_const (18,856,727 samples, 1.44%)</title><rect x="13.9619%" y="293" width="1.4424%" height="15" fill="rgb(228,23,34)"/><text x="14.2119%" y="303.50"></text></g><g><title>unsafety_check_result (17,063,595 samples, 1.31%)</title><rect x="14.0991%" y="277" width="1.3052%" height="15" fill="rgb(218,30,26)"/><text x="14.3491%" y="287.50"></text></g><g><title>mir_built (15,745,641 samples, 1.20%)</title><rect x="14.1999%" y="261" width="1.2044%" height="15" fill="rgb(220,122,19)"/><text x="14.4499%" y="271.50"></text></g><g><title>mir_promoted (20,590,443 samples, 1.57%)</title><rect x="13.8369%" y="309" width="1.5750%" height="15" fill="rgb(250,228,42)"/><text x="14.0869%" y="319.50"></text></g><g><title>type_op_ascribe_user_type (1,830,969 samples, 0.14%)</title><rect x="15.4122%" y="309" width="0.1401%" height="15" fill="rgb(240,193,28)"/><text x="15.6622%" y="319.50"></text></g><g><title>type_op_prove_predicate (6,684,861 samples, 0.51%)</title><rect x="15.6794%" y="309" width="0.5113%" height="15" fill="rgb(216,20,37)"/><text x="15.9294%" y="319.50"></text></g><g><title>MIR_borrow_checking (60,958,687 samples, 4.66%)</title><rect x="11.5287%" y="341" width="4.6628%" height="15" fill="rgb(206,188,39)"/><text x="11.7787%" y="351.50">MIR_b..</text></g><g><title>mir_borrowck (60,762,072 samples, 4.65%)</title><rect x="11.5437%" y="325" width="4.6478%" height="15" fill="rgb(217,207,13)"/><text x="11.7937%" y="335.50">mir_b..</text></g><g><title>misc_checking_1 (2,275,563 samples, 0.17%)</title><rect x="16.2323%" y="341" width="0.1741%" height="15" fill="rgb(231,73,38)"/><text x="16.4823%" y="351.50"></text></g><g><title>liveness_and_intrinsic_checking (1,798,588 samples, 0.14%)</title><rect x="16.4065%" y="325" width="0.1376%" height="15" fill="rgb(225,20,46)"/><text x="16.6565%" y="335.50"></text></g><g><title>check_mod_liveness (1,564,616 samples, 0.12%)</title><rect x="16.4244%" y="309" width="0.1197%" height="15" fill="rgb(210,31,41)"/><text x="16.6744%" y="319.50"></text></g><g><title>misc_checking_2 (3,439,885 samples, 0.26%)</title><rect x="16.4064%" y="341" width="0.2631%" height="15" fill="rgb(221,200,47)"/><text x="16.6564%" y="351.50"></text></g><g><title>match_checking (1,639,377 samples, 0.13%)</title><rect x="16.5441%" y="325" width="0.1254%" height="15" fill="rgb(226,26,5)"/><text x="16.7941%" y="335.50"></text></g><g><title>check_match (1,576,356 samples, 0.12%)</title><rect x="16.5489%" y="309" width="0.1206%" height="15" fill="rgb(249,33,26)"/><text x="16.7989%" y="319.50"></text></g><g><title>crate_lints (5,483,835 samples, 0.42%)</title><rect x="16.7786%" y="309" width="0.4195%" height="15" fill="rgb(235,183,28)"/><text x="17.0286%" y="319.50"></text></g><g><title>type_of (2,457,936 samples, 0.19%)</title><rect x="17.0100%" y="293" width="0.1880%" height="15" fill="rgb(221,5,38)"/><text x="17.2600%" y="303.50"></text></g><g><title>metadata_decode_entry_type_of (1,676,208 samples, 0.13%)</title><rect x="17.0698%" y="277" width="0.1282%" height="15" fill="rgb(247,18,42)"/><text x="17.3198%" y="287.50"></text></g><g><title>lint_checking (7,293,324 samples, 0.56%)</title><rect x="16.7784%" y="325" width="0.5579%" height="15" fill="rgb(241,131,45)"/><text x="17.0284%" y="335.50"></text></g><g><title>module_lints (1,807,709 samples, 0.14%)</title><rect x="17.1980%" y="309" width="0.1383%" height="15" fill="rgb(249,31,29)"/><text x="17.4480%" y="319.50"></text></g><g><title>lint_mod (1,799,189 samples, 0.14%)</title><rect x="17.1987%" y="293" width="0.1376%" height="15" fill="rgb(225,111,53)"/><text x="17.4487%" y="303.50"></text></g><g><title>privacy_checking_modules (3,127,001 samples, 0.24%)</title><rect x="17.3890%" y="325" width="0.2392%" height="15" fill="rgb(238,160,17)"/><text x="17.6390%" y="335.50"></text></g><g><title>check_mod_privacy (3,121,551 samples, 0.24%)</title><rect x="17.3894%" y="309" width="0.2388%" height="15" fill="rgb(214,148,48)"/><text x="17.6394%" y="319.50"></text></g><g><title>misc_checking_3 (12,559,817 samples, 0.96%)</title><rect x="16.6695%" y="341" width="0.9607%" height="15" fill="rgb(232,36,49)"/><text x="16.9195%" y="351.50"></text></g><g><title>impl_parent (4,737,942 samples, 0.36%)</title><rect x="18.1982%" y="277" width="0.3624%" height="15" fill="rgb(209,103,24)"/><text x="18.4482%" y="287.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,615,906 samples, 0.20%)</title><rect x="18.3605%" y="261" width="0.2001%" height="15" fill="rgb(229,88,8)"/><text x="18.6105%" y="271.50"></text></g><g><title>impl_trait_ref (10,331,900 samples, 0.79%)</title><rect x="18.5606%" y="277" width="0.7903%" height="15" fill="rgb(213,181,19)"/><text x="18.8106%" y="287.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,598,132 samples, 0.66%)</title><rect x="18.6932%" y="261" width="0.6577%" height="15" fill="rgb(254,191,54)"/><text x="18.9432%" y="271.50"></text></g><g><title>trait_impls_of (2,064,880 samples, 0.16%)</title><rect x="19.3531%" y="277" width="0.1579%" height="15" fill="rgb(241,83,37)"/><text x="19.6031%" y="287.50"></text></g><g><title>coherent_trait (24,417,448 samples, 1.87%)</title><rect x="17.6435%" y="309" width="1.8677%" height="15" fill="rgb(233,36,39)"/><text x="17.8935%" y="319.50">c..</text></g><g><title>specialization_graph_of (24,385,368 samples, 1.87%)</title><rect x="17.6459%" y="293" width="1.8653%" height="15" fill="rgb(226,3,54)"/><text x="17.8959%" y="303.50">s..</text></g><g><title>coherence_checking (24,531,698 samples, 1.88%)</title><rect x="17.6415%" y="325" width="1.8765%" height="15" fill="rgb(245,192,40)"/><text x="17.8915%" y="335.50">c..</text></g><g><title>dropck_outlives (1,568,284 samples, 0.12%)</title><rect x="21.7487%" y="277" width="0.1200%" height="15" fill="rgb(238,167,29)"/><text x="21.9987%" y="287.50"></text></g><g><title>evaluate_obligation (4,240,875 samples, 0.32%)</title><rect x="21.8686%" y="277" width="0.3244%" height="15" fill="rgb(232,182,51)"/><text x="22.1186%" y="287.50"></text></g><g><title>evaluate_obligation (2,836,395 samples, 0.22%)</title><rect x="24.3401%" y="261" width="0.2170%" height="15" fill="rgb(231,60,39)"/><text x="24.5901%" y="271.50"></text></g><g><title>typeck (30,733,151 samples, 2.35%)</title><rect x="22.3381%" y="277" width="2.3508%" height="15" fill="rgb(208,69,12)"/><text x="22.5881%" y="287.50">t..</text></g><g><title>item_bodies_checking (67,611,826 samples, 5.17%)</title><rect x="19.5216%" y="325" width="5.1717%" height="15" fill="rgb(235,93,37)"/><text x="19.7716%" y="335.50">item_b..</text></g><g><title>typeck_item_bodies (67,607,536 samples, 5.17%)</title><rect x="19.5219%" y="309" width="5.1714%" height="15" fill="rgb(213,116,39)"/><text x="19.7719%" y="319.50">typeck..</text></g><g><title>typeck (67,489,094 samples, 5.16%)</title><rect x="19.5310%" y="293" width="5.1623%" height="15" fill="rgb(222,207,29)"/><text x="19.7810%" y="303.50">typeck</text></g><g><title>mir_borrowck (2,164,443 samples, 0.17%)</title><rect x="25.9044%" y="245" width="0.1656%" height="15" fill="rgb(206,96,30)"/><text x="26.1544%" y="255.50"></text></g><g><title>type_op_ascribe_user_type (1,569,446 samples, 0.12%)</title><rect x="26.1170%" y="245" width="0.1200%" height="15" fill="rgb(218,138,4)"/><text x="26.3670%" y="255.50"></text></g><g><title>type_op_normalize_predicate (4,892,500 samples, 0.37%)</title><rect x="26.2669%" y="245" width="0.3742%" height="15" fill="rgb(250,191,14)"/><text x="26.5169%" y="255.50"></text></g><g><title>normalize_projection_ty (4,510,416 samples, 0.35%)</title><rect x="26.2961%" y="229" width="0.3450%" height="15" fill="rgb(239,60,40)"/><text x="26.5461%" y="239.50"></text></g><g><title>type_op_prove_predicate (17,575,425 samples, 1.34%)</title><rect x="26.6425%" y="245" width="1.3444%" height="15" fill="rgb(206,27,48)"/><text x="26.8925%" y="255.50"></text></g><g><title>mir_borrowck (32,556,930 samples, 2.49%)</title><rect x="25.4972%" y="261" width="2.4903%" height="15" fill="rgb(225,35,8)"/><text x="25.7472%" y="271.50">mi..</text></g><g><title>resolve_instance (1,593,356 samples, 0.12%)</title><rect x="28.2324%" y="197" width="0.1219%" height="15" fill="rgb(250,213,24)"/><text x="28.4824%" y="207.50"></text></g><g><title>dropck_outlives (3,133,425 samples, 0.24%)</title><rect x="30.4213%" y="181" width="0.2397%" height="15" fill="rgb(247,123,22)"/><text x="30.6713%" y="191.50"></text></g><g><title>trait_impls_of (1,880,538 samples, 0.14%)</title><rect x="31.4927%" y="165" width="0.1438%" height="15" fill="rgb(231,138,38)"/><text x="31.7427%" y="175.50"></text></g><g><title>mir_borrowck (3,471,455 samples, 0.27%)</title><rect x="31.8450%" y="101" width="0.2655%" height="15" fill="rgb(231,145,46)"/><text x="32.0950%" y="111.50"></text></g><g><title>mir_borrowck (5,680,129 samples, 0.43%)</title><rect x="31.7591%" y="117" width="0.4345%" height="15" fill="rgb(251,118,11)"/><text x="32.0091%" y="127.50"></text></g><g><title>mir_borrowck (8,013,501 samples, 0.61%)</title><rect x="31.7165%" y="133" width="0.6130%" height="15" fill="rgb(217,147,25)"/><text x="31.9665%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,538,366 samples, 0.12%)</title><rect x="33.2874%" y="37" width="0.1177%" height="15" fill="rgb(247,81,37)"/><text x="33.5374%" y="47.50"></text></g><g><title>dropck_outlives (2,468,724 samples, 0.19%)</title><rect x="33.2524%" y="53" width="0.1888%" height="15" fill="rgb(209,12,38)"/><text x="33.5024%" y="63.50"></text></g><g><title>trait_impls_of (1,533,506 samples, 0.12%)</title><rect x="33.8253%" y="37" width="0.1173%" height="15" fill="rgb(227,1,9)"/><text x="34.0753%" y="47.50"></text></g><g><title>evaluate_obligation (6,722,287 samples, 0.51%)</title><rect x="33.4412%" y="53" width="0.5142%" height="15" fill="rgb(248,47,43)"/><text x="33.6912%" y="63.50"></text></g><g><title>mir_built (24,567,238 samples, 1.88%)</title><rect x="32.3326%" y="85" width="1.8792%" height="15" fill="rgb(221,10,30)"/><text x="32.5826%" y="95.50">m..</text></g><g><title>typeck (24,392,606 samples, 1.87%)</title><rect x="32.3460%" y="69" width="1.8658%" height="15" fill="rgb(210,229,1)"/><text x="32.5960%" y="79.50">t..</text></g><g><title>mir_const (27,014,823 samples, 2.07%)</title><rect x="32.3306%" y="117" width="2.0664%" height="15" fill="rgb(222,148,37)"/><text x="32.5806%" y="127.50">m..</text></g><g><title>unsafety_check_result (26,995,283 samples, 2.06%)</title><rect x="32.3321%" y="101" width="2.0649%" height="15" fill="rgb(234,67,33)"/><text x="32.5821%" y="111.50">u..</text></g><g><title>unsafety_check_result (2,420,795 samples, 0.19%)</title><rect x="34.2118%" y="85" width="0.1852%" height="15" fill="rgb(247,98,35)"/><text x="34.4618%" y="95.50"></text></g><g><title>unsafety_check_result (1,955,851 samples, 0.15%)</title><rect x="34.2474%" y="69" width="0.1496%" height="15" fill="rgb(247,138,52)"/><text x="34.4974%" y="79.50"></text></g><g><title>mir_promoted (27,030,903 samples, 2.07%)</title><rect x="32.3294%" y="133" width="2.0676%" height="15" fill="rgb(213,79,30)"/><text x="32.5794%" y="143.50">m..</text></g><g><title>evaluate_obligation (48,958,706 samples, 3.74%)</title><rect x="30.6610%" y="181" width="3.7449%" height="15" fill="rgb(246,177,23)"/><text x="30.9110%" y="191.50">eval..</text></g><g><title>type_of (36,204,957 samples, 2.77%)</title><rect x="31.6365%" y="165" width="2.7694%" height="15" fill="rgb(230,62,27)"/><text x="31.8865%" y="175.50">ty..</text></g><g><title>mir_borrowck (36,110,555 samples, 2.76%)</title><rect x="31.6437%" y="149" width="2.7621%" height="15" fill="rgb(216,154,8)"/><text x="31.8937%" y="159.50">mi..</text></g><g><title>mir_built (88,658,877 samples, 6.78%)</title><rect x="28.0705%" y="213" width="6.7816%" height="15" fill="rgb(244,35,45)"/><text x="28.3205%" y="223.50">mir_built</text></g><g><title>typeck (84,679,376 samples, 6.48%)</title><rect x="28.3749%" y="197" width="6.4772%" height="15" fill="rgb(251,115,12)"/><text x="28.6249%" y="207.50">typeck</text></g><g><title>needs_drop_raw (1,323,934 samples, 0.10%)</title><rect x="34.9332%" y="181" width="0.1013%" height="15" fill="rgb(240,54,50)"/><text x="35.1832%" y="191.50"></text></g><g><title>mir_built (2,432,846 samples, 0.19%)</title><rect x="34.8727%" y="197" width="0.1861%" height="15" fill="rgb(233,84,52)"/><text x="35.1227%" y="207.50"></text></g><g><title>mir_const (93,008,941 samples, 7.11%)</title><rect x="28.0090%" y="245" width="7.1144%" height="15" fill="rgb(207,117,47)"/><text x="28.2590%" y="255.50">mir_const</text></g><g><title>unsafety_check_result (92,480,086 samples, 7.07%)</title><rect x="28.0495%" y="229" width="7.0739%" height="15" fill="rgb(249,43,39)"/><text x="28.2995%" y="239.50">unsafety_..</text></g><g><title>unsafety_check_result (3,545,778 samples, 0.27%)</title><rect x="34.8522%" y="213" width="0.2712%" height="15" fill="rgb(209,38,44)"/><text x="35.1022%" y="223.50"></text></g><g><title>mir_promoted (93,309,185 samples, 7.14%)</title><rect x="27.9875%" y="261" width="7.1373%" height="15" fill="rgb(236,212,23)"/><text x="28.2375%" y="271.50">mir_promot..</text></g><g><title>type_op_prove_predicate (2,984,783 samples, 0.23%)</title><rect x="35.2073%" y="261" width="0.2283%" height="15" fill="rgb(242,79,21)"/><text x="35.4573%" y="271.50"></text></g><g><title>type_of (135,079,559 samples, 10.33%)</title><rect x="25.1034%" y="293" width="10.3324%" height="15" fill="rgb(211,96,35)"/><text x="25.3534%" y="303.50">type_of</text></g><g><title>mir_borrowck (135,000,918 samples, 10.33%)</title><rect x="25.1094%" y="277" width="10.3264%" height="15" fill="rgb(253,215,40)"/><text x="25.3594%" y="287.50">mir_borrowck</text></g><g><title>item_types_checking (140,509,582 samples, 10.75%)</title><rect x="24.6933%" y="325" width="10.7478%" height="15" fill="rgb(211,81,21)"/><text x="24.9433%" y="335.50">item_types_check..</text></g><g><title>check_mod_item_types (140,494,812 samples, 10.75%)</title><rect x="24.6944%" y="309" width="10.7466%" height="15" fill="rgb(208,190,38)"/><text x="24.9444%" y="319.50">check_mod_item_t..</text></g><g><title>predicates_of (2,222,257 samples, 0.17%)</title><rect x="35.5779%" y="293" width="0.1700%" height="15" fill="rgb(235,213,38)"/><text x="35.8279%" y="303.50"></text></g><g><title>predicates_defined_on (2,138,416 samples, 0.16%)</title><rect x="35.5843%" y="277" width="0.1636%" height="15" fill="rgb(237,122,38)"/><text x="35.8343%" y="287.50"></text></g><g><title>type_collecting (4,158,482 samples, 0.32%)</title><rect x="35.4417%" y="325" width="0.3181%" height="15" fill="rgb(244,218,35)"/><text x="35.6917%" y="335.50"></text></g><g><title>collect_mod_item_types (4,143,892 samples, 0.32%)</title><rect x="35.4429%" y="309" width="0.3170%" height="15" fill="rgb(240,68,47)"/><text x="35.6929%" y="319.50"></text></g><g><title>check_impl_item_well_formed (6,692,116 samples, 0.51%)</title><rect x="35.7884%" y="309" width="0.5119%" height="15" fill="rgb(210,16,53)"/><text x="36.0384%" y="319.50"></text></g><g><title>evaluate_obligation (2,335,013 samples, 0.18%)</title><rect x="36.4970%" y="293" width="0.1786%" height="15" fill="rgb(235,124,12)"/><text x="36.7470%" y="303.50"></text></g><g><title>analysis (331,521,478 samples, 25.36%)</title><rect x="11.4835%" y="357" width="25.3585%" height="15" fill="rgb(224,169,11)"/><text x="11.7335%" y="367.50">analysis</text></g><g><title>type_check_crate (251,162,954 samples, 19.21%)</title><rect x="17.6302%" y="341" width="19.2118%" height="15" fill="rgb(250,166,2)"/><text x="17.8802%" y="351.50">type_check_crate</text></g><g><title>wf_checking (14,136,894 samples, 1.08%)</title><rect x="35.7606%" y="325" width="1.0813%" height="15" fill="rgb(242,216,29)"/><text x="36.0106%" y="335.50"></text></g><g><title>check_item_well_formed (7,082,493 samples, 0.54%)</title><rect x="36.3002%" y="309" width="0.5417%" height="15" fill="rgb(230,116,27)"/><text x="36.5502%" y="319.50"></text></g><g><title>compute_debuginfo_type_name (3,534,111 samples, 0.27%)</title><rect x="45.0211%" y="325" width="0.2703%" height="15" fill="rgb(228,99,48)"/><text x="45.2711%" y="335.50"></text></g><g><title>codegen_fn_attrs (1,903,589 samples, 0.15%)</title><rect x="45.8316%" y="309" width="0.1456%" height="15" fill="rgb(253,11,6)"/><text x="46.0816%" y="319.50"></text></g><g><title>layout_of (2,821,973 samples, 0.22%)</title><rect x="46.0098%" y="309" width="0.2159%" height="15" fill="rgb(247,143,39)"/><text x="46.2598%" y="319.50"></text></g><g><title>predicates_of (3,494,475 samples, 0.27%)</title><rect x="46.6006%" y="293" width="0.2673%" height="15" fill="rgb(236,97,10)"/><text x="46.8506%" y="303.50"></text></g><g><title>predicates_defined_on (2,697,277 samples, 0.21%)</title><rect x="46.6616%" y="277" width="0.2063%" height="15" fill="rgb(233,208,19)"/><text x="46.9116%" y="287.50"></text></g><g><title>param_env (8,421,404 samples, 0.64%)</title><rect x="46.2257%" y="309" width="0.6442%" height="15" fill="rgb(216,164,2)"/><text x="46.4757%" y="319.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,084,504 samples, 0.24%)</title><rect x="46.8698%" y="309" width="0.2359%" height="15" fill="rgb(220,129,5)"/><text x="47.1198%" y="319.50"></text></g><g><title>normalize_projection_ty (2,185,894 samples, 0.17%)</title><rect x="46.9386%" y="293" width="0.1672%" height="15" fill="rgb(242,17,10)"/><text x="47.1886%" y="303.50"></text></g><g><title>fn_abi_of_instance (22,736,951 samples, 1.74%)</title><rect x="45.3763%" y="325" width="1.7392%" height="15" fill="rgb(242,107,0)"/><text x="45.6263%" y="335.50"></text></g><g><title>layout_of (3,617,755 samples, 0.28%)</title><rect x="47.1945%" y="325" width="0.2767%" height="15" fill="rgb(251,28,31)"/><text x="47.4445%" y="335.50"></text></g><g><title>symbol_name (3,230,416 samples, 0.25%)</title><rect x="47.4727%" y="325" width="0.2471%" height="15" fill="rgb(233,223,10)"/><text x="47.7227%" y="335.50"></text></g><g><title>codegen_module (139,260,108 samples, 10.65%)</title><rect x="37.1111%" y="341" width="10.6522%" height="15" fill="rgb(215,21,27)"/><text x="37.3611%" y="351.50">codegen_module</text></g><g><title>codegen_crate (143,168,939 samples, 10.95%)</title><rect x="36.8429%" y="357" width="10.9512%" height="15" fill="rgb(232,23,21)"/><text x="37.0929%" y="367.50">codegen_crate</text></g><g><title>LLVM_module_codegen (446,136,269 samples, 34.13%)</title><rect x="47.8089%" y="341" width="34.1255%" height="15" fill="rgb(244,5,23)"/><text x="48.0589%" y="351.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (428,996,745 samples, 32.81%)</title><rect x="49.1199%" y="325" width="32.8145%" height="15" fill="rgb(226,81,46)"/><text x="49.3699%" y="335.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (461,709,525 samples, 35.32%)</title><rect x="47.7940%" y="357" width="35.3168%" height="15" fill="rgb(247,70,30)"/><text x="48.0440%" y="367.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (15,379,483 samples, 1.18%)</title><rect x="81.9344%" y="341" width="1.1764%" height="15" fill="rgb(212,68,19)"/><text x="82.1844%" y="351.50"></text></g><g><title>metadata_register_crate (26,519,599 samples, 2.03%)</title><rect x="86.5465%" y="309" width="2.0285%" height="15" fill="rgb(240,187,13)"/><text x="86.7965%" y="319.50">m..</text></g><g><title>metadata_register_crate (18,331,598 samples, 1.40%)</title><rect x="87.1729%" y="293" width="1.4022%" height="15" fill="rgb(223,113,26)"/><text x="87.4229%" y="303.50"></text></g><g><title>metadata_register_crate (10,433,224 samples, 0.80%)</title><rect x="87.7770%" y="277" width="0.7981%" height="15" fill="rgb(206,192,2)"/><text x="88.0270%" y="287.50"></text></g><g><title>metadata_register_crate (4,408,528 samples, 0.34%)</title><rect x="88.2378%" y="261" width="0.3372%" height="15" fill="rgb(241,108,4)"/><text x="88.4878%" y="271.50"></text></g><g><title>macro_expand_crate (71,334,242 samples, 5.46%)</title><rect x="83.1630%" y="341" width="5.4564%" height="15" fill="rgb(247,173,49)"/><text x="83.4130%" y="351.50">macro_e..</text></g><g><title>expand_crate (71,317,302 samples, 5.46%)</title><rect x="83.1643%" y="325" width="5.4552%" height="15" fill="rgb(224,114,35)"/><text x="83.4143%" y="335.50">expand_..</text></g><g><title>late_resolve_crate (6,637,697 samples, 0.51%)</title><rect x="88.6848%" y="325" width="0.5077%" height="15" fill="rgb(245,159,27)"/><text x="88.9348%" y="335.50"></text></g><g><title>configure_and_expand (79,759,677 samples, 6.10%)</title><rect x="83.1108%" y="357" width="6.1009%" height="15" fill="rgb(245,172,44)"/><text x="83.3608%" y="367.50">configur..</text></g><g><title>resolve_crate (7,459,346 samples, 0.57%)</title><rect x="88.6411%" y="341" width="0.5706%" height="15" fill="rgb(236,23,11)"/><text x="88.8911%" y="351.50"></text></g><g><title>free_global_ctxt (11,617,868 samples, 0.89%)</title><rect x="89.3018%" y="357" width="0.8887%" height="15" fill="rgb(205,117,38)"/><text x="89.5518%" y="367.50"></text></g><g><title>item_attrs (1,561,454 samples, 0.12%)</title><rect x="90.9358%" y="261" width="0.1194%" height="15" fill="rgb(237,72,25)"/><text x="91.1858%" y="271.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,491,873 samples, 0.11%)</title><rect x="90.9411%" y="245" width="0.1141%" height="15" fill="rgb(244,70,9)"/><text x="91.1911%" y="255.50"></text></g><g><title>codegen_fn_attrs (2,519,303 samples, 0.19%)</title><rect x="90.9049%" y="277" width="0.1927%" height="15" fill="rgb(217,125,39)"/><text x="91.1549%" y="287.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,556,775 samples, 0.27%)</title><rect x="91.4213%" y="261" width="0.2721%" height="15" fill="rgb(235,36,10)"/><text x="91.6713%" y="271.50"></text></g><g><title>optimized_mir (8,352,365 samples, 0.64%)</title><rect x="91.2433%" y="277" width="0.6389%" height="15" fill="rgb(251,123,47)"/><text x="91.4933%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,467,863 samples, 0.19%)</title><rect x="91.6934%" y="261" width="0.1888%" height="15" fill="rgb(221,13,13)"/><text x="91.9434%" y="271.50"></text></g><g><title>codegen_fulfill_obligation (5,319,087 samples, 0.41%)</title><rect x="92.0255%" y="261" width="0.4069%" height="15" fill="rgb(238,131,9)"/><text x="92.2755%" y="271.50"></text></g><g><title>specialization_graph_of (2,849,526 samples, 0.22%)</title><rect x="92.6122%" y="261" width="0.2180%" height="15" fill="rgb(211,50,8)"/><text x="92.8622%" y="271.50"></text></g><g><title>impl_trait_ref (1,404,148 samples, 0.11%)</title><rect x="92.7227%" y="245" width="0.1074%" height="15" fill="rgb(245,182,24)"/><text x="92.9727%" y="255.50"></text></g><g><title>resolve_instance (13,034,620 samples, 1.00%)</title><rect x="91.8821%" y="277" width="0.9970%" height="15" fill="rgb(242,14,37)"/><text x="92.1321%" y="287.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,531,214 samples, 0.12%)</title><rect x="92.9635%" y="277" width="0.1171%" height="15" fill="rgb(246,228,12)"/><text x="93.2135%" y="287.50"></text></g><g><title>upstream_monomorphizations_for (21,288,105 samples, 1.63%)</title><rect x="93.0825%" y="277" width="1.6284%" height="15" fill="rgb(213,55,15)"/><text x="93.3325%" y="287.50"></text></g><g><title>upstream_monomorphizations (21,213,575 samples, 1.62%)</title><rect x="93.0882%" y="261" width="1.6227%" height="15" fill="rgb(209,9,3)"/><text x="93.3382%" y="271.50"></text></g><g><title>exported_symbols (18,681,060 samples, 1.43%)</title><rect x="93.2820%" y="245" width="1.4289%" height="15" fill="rgb(230,59,30)"/><text x="93.5320%" y="255.50"></text></g><g><title>metadata_decode_entry_exported_symbols (18,639,139 samples, 1.43%)</title><rect x="93.2852%" y="229" width="1.4257%" height="15" fill="rgb(209,121,21)"/><text x="93.5352%" y="239.50"></text></g><g><title>monomorphization_collector_graph_walk (55,714,725 samples, 4.26%)</title><rect x="90.5715%" y="293" width="4.2617%" height="15" fill="rgb(220,109,13)"/><text x="90.8215%" y="303.50">monom..</text></g><g><title>vtable_entries (1,598,378 samples, 0.12%)</title><rect x="94.7109%" y="277" width="0.1223%" height="15" fill="rgb(232,18,1)"/><text x="94.9609%" y="287.50"></text></g><g><title>monomorphization_collector (55,788,955 samples, 4.27%)</title><rect x="90.5711%" y="309" width="4.2674%" height="15" fill="rgb(215,41,42)"/><text x="90.8211%" y="319.50">monom..</text></g><g><title>assert_symbols_are_distinct (3,630,297 samples, 0.28%)</title><rect x="94.8389%" y="293" width="0.2777%" height="15" fill="rgb(224,123,36)"/><text x="95.0889%" y="303.50"></text></g><g><title>symbol_name (3,322,435 samples, 0.25%)</title><rect x="94.8624%" y="277" width="0.2541%" height="15" fill="rgb(240,125,3)"/><text x="95.1124%" y="287.50"></text></g><g><title>collect_and_partition_mono_items (60,958,038 samples, 4.66%)</title><rect x="90.5676%" y="325" width="4.6628%" height="15" fill="rgb(205,98,50)"/><text x="90.8176%" y="335.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (5,124,162 samples, 0.39%)</title><rect x="94.8385%" y="309" width="0.3920%" height="15" fill="rgb(205,185,37)"/><text x="95.0885%" y="319.50"></text></g><g><title>cgu_partitioning (1,488,575 samples, 0.11%)</title><rect x="95.1165%" y="293" width="0.1139%" height="15" fill="rgb(238,207,15)"/><text x="95.3665%" y="303.50"></text></g><g><title>exported_symbols (61,365,631 samples, 4.69%)</title><rect x="90.5575%" y="341" width="4.6939%" height="15" fill="rgb(213,199,42)"/><text x="90.8075%" y="351.50">expor..</text></g><g><title>layout_of (1,570,097 samples, 0.12%)</title><rect x="96.1797%" y="213" width="0.1201%" height="15" fill="rgb(235,201,11)"/><text x="96.4297%" y="223.50"></text></g><g><title>optimized_mir (2,072,821 samples, 0.16%)</title><rect x="96.2998%" y="213" width="0.1586%" height="15" fill="rgb(207,46,11)"/><text x="96.5498%" y="223.50"></text></g><g><title>layout_of (3,875,649 samples, 0.30%)</title><rect x="96.1626%" y="229" width="0.2965%" height="15" fill="rgb(241,35,35)"/><text x="96.4126%" y="239.50"></text></g><g><title>layout_of (4,429,284 samples, 0.34%)</title><rect x="96.1539%" y="245" width="0.3388%" height="15" fill="rgb(243,32,47)"/><text x="96.4039%" y="255.50"></text></g><g><title>layout_of (4,733,758 samples, 0.36%)</title><rect x="96.1328%" y="261" width="0.3621%" height="15" fill="rgb(247,202,23)"/><text x="96.3828%" y="271.50"></text></g><g><title>layout_of (5,342,724 samples, 0.41%)</title><rect x="96.0962%" y="277" width="0.4087%" height="15" fill="rgb(219,102,11)"/><text x="96.3462%" y="287.50"></text></g><g><title>layout_of (5,741,636 samples, 0.44%)</title><rect x="96.0696%" y="293" width="0.4392%" height="15" fill="rgb(243,110,44)"/><text x="96.3196%" y="303.50"></text></g><g><title>layout_of (6,245,510 samples, 0.48%)</title><rect x="96.0341%" y="309" width="0.4777%" height="15" fill="rgb(222,74,54)"/><text x="96.2841%" y="319.50"></text></g><g><title>layout_of (8,065,161 samples, 0.62%)</title><rect x="95.9106%" y="325" width="0.6169%" height="15" fill="rgb(216,99,12)"/><text x="96.1606%" y="335.50"></text></g><g><title>is_copy_raw (2,459,629 samples, 0.19%)</title><rect x="97.5222%" y="293" width="0.1881%" height="15" fill="rgb(226,22,26)"/><text x="97.7722%" y="303.50"></text></g><g><title>evaluate_obligation (2,005,390 samples, 0.15%)</title><rect x="97.5569%" y="277" width="0.1534%" height="15" fill="rgb(217,163,10)"/><text x="97.8069%" y="287.50"></text></g><g><title>needs_drop_raw (4,210,427 samples, 0.32%)</title><rect x="97.4914%" y="309" width="0.3221%" height="15" fill="rgb(213,25,53)"/><text x="97.7414%" y="319.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,348,663 samples, 0.10%)</title><rect x="97.7103%" y="293" width="0.1032%" height="15" fill="rgb(252,105,26)"/><text x="97.9603%" y="303.50"></text></g><g><title>normalize_projection_ty (1,328,123 samples, 0.10%)</title><rect x="97.7119%" y="277" width="0.1016%" height="15" fill="rgb(220,39,43)"/><text x="97.9619%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,138,069 samples, 1.31%)</title><rect x="96.5275%" y="325" width="1.3109%" height="15" fill="rgb(229,68,48)"/><text x="96.7775%" y="335.50"></text></g><g><title>optimized_mir (34,454,579 samples, 2.64%)</title><rect x="95.2686%" y="341" width="2.6355%" height="15" fill="rgb(252,8,32)"/><text x="95.5186%" y="351.50">op..</text></g><g><title>generate_crate_metadata (101,866,582 samples, 7.79%)</title><rect x="90.1905%" y="357" width="7.7919%" height="15" fill="rgb(223,20,43)"/><text x="90.4405%" y="367.50">generate_cr..</text></g><g><title>hir_lowering (6,289,544 samples, 0.48%)</title><rect x="97.9824%" y="357" width="0.4811%" height="15" fill="rgb(229,81,49)"/><text x="98.2324%" y="367.50"></text></g><g><title>finish_ongoing_codegen (7,907,930 samples, 0.60%)</title><rect x="98.4648%" y="341" width="0.6049%" height="15" fill="rgb(236,28,36)"/><text x="98.7148%" y="351.50"></text></g><g><title>link_crate (4,097,771 samples, 0.31%)</title><rect x="99.0696%" y="341" width="0.3134%" height="15" fill="rgb(249,185,26)"/><text x="99.3196%" y="351.50"></text></g><g><title>link_binary (4,034,651 samples, 0.31%)</title><rect x="99.0745%" y="325" width="0.3086%" height="15" fill="rgb(249,174,33)"/><text x="99.3245%" y="335.50"></text></g><g><title>link_rlib (3,236,333 samples, 0.25%)</title><rect x="99.1355%" y="309" width="0.2476%" height="15" fill="rgb(233,201,37)"/><text x="99.3855%" y="319.50"></text></g><g><title>link (12,037,662 samples, 0.92%)</title><rect x="98.4635%" y="357" width="0.9208%" height="15" fill="rgb(221,78,26)"/><text x="98.7135%" y="367.50"></text></g><g><title>parse_crate (4,394,434 samples, 0.34%)</title><rect x="99.3843%" y="357" width="0.3361%" height="15" fill="rgb(250,127,30)"/><text x="99.6343%" y="367.50"></text></g><g><title>self_profile_alloc_query_strings (2,793,578 samples, 0.21%)</title><rect x="99.7378%" y="357" width="0.2137%" height="15" fill="rgb(230,49,44)"/><text x="99.9878%" y="367.50"></text></g><g><title>all (1,307,338,610 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="399.50"></text></g><g><title>rustc (1,307,338,610 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="383.50">rustc</text></g></svg></svg>