<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (643,360,044 samples, 13.79%)</title><rect x="0.0384%" y="181" width="13.7900%" height="15" fill="rgb(227,0,7)"/><text x="0.2884%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (9,966,296 samples, 0.21%)</title><rect x="19.2813%" y="53" width="0.2136%" height="15" fill="rgb(217,0,24)"/><text x="19.5313%" y="63.50"></text></g><g><title>evaluate_obligation (8,052,483 samples, 0.17%)</title><rect x="19.3224%" y="37" width="0.1726%" height="15" fill="rgb(221,193,54)"/><text x="19.5724%" y="47.50"></text></g><g><title>needs_drop_raw (13,564,430 samples, 0.29%)</title><rect x="19.2104%" y="69" width="0.2907%" height="15" fill="rgb(248,212,6)"/><text x="19.4604%" y="79.50"></text></g><g><title>resolve_instance (6,721,655 samples, 0.14%)</title><rect x="19.5011%" y="69" width="0.1441%" height="15" fill="rgb(208,68,35)"/><text x="19.7511%" y="79.50"></text></g><g><title>thir_body (13,460,183 samples, 0.29%)</title><rect x="19.6537%" y="69" width="0.2885%" height="15" fill="rgb(232,128,0)"/><text x="19.9037%" y="79.50"></text></g><g><title>mir_const (94,524,053 samples, 2.03%)</title><rect x="17.9308%" y="117" width="2.0261%" height="15" fill="rgb(207,160,47)"/><text x="18.1808%" y="127.50">m..</text></g><g><title>unsafety_check_result (81,811,138 samples, 1.75%)</title><rect x="18.2033%" y="101" width="1.7536%" height="15" fill="rgb(228,23,34)"/><text x="18.4533%" y="111.50"></text></g><g><title>mir_built (73,565,063 samples, 1.58%)</title><rect x="18.3801%" y="85" width="1.5768%" height="15" fill="rgb(218,30,26)"/><text x="18.6301%" y="95.50"></text></g><g><title>mir_promoted (105,704,911 samples, 2.27%)</title><rect x="17.7082%" y="133" width="2.2657%" height="15" fill="rgb(220,122,19)"/><text x="17.9582%" y="143.50">m..</text></g><g><title>type_op_normalize_fn_sig (9,415,651 samples, 0.20%)</title><rect x="20.0616%" y="133" width="0.2018%" height="15" fill="rgb(250,228,42)"/><text x="20.3116%" y="143.50"></text></g><g><title>normalize_projection_ty (5,696,987 samples, 0.12%)</title><rect x="20.1413%" y="117" width="0.1221%" height="15" fill="rgb(240,193,28)"/><text x="20.3913%" y="127.50"></text></g><g><title>type_op_normalize_predicate (4,734,067 samples, 0.10%)</title><rect x="20.2634%" y="133" width="0.1015%" height="15" fill="rgb(216,20,37)"/><text x="20.5134%" y="143.50"></text></g><g><title>type_op_prove_predicate (32,245,578 samples, 0.69%)</title><rect x="20.4313%" y="133" width="0.6912%" height="15" fill="rgb(206,188,39)"/><text x="20.6813%" y="143.50"></text></g><g><title>MIR_borrow_checking (337,738,559 samples, 7.24%)</title><rect x="13.8842%" y="165" width="7.2392%" height="15" fill="rgb(217,207,13)"/><text x="14.1342%" y="175.50">MIR_borrow..</text></g><g><title>mir_borrowck (336,094,425 samples, 7.20%)</title><rect x="13.9194%" y="149" width="7.2039%" height="15" fill="rgb(231,73,38)"/><text x="14.1694%" y="159.50">mir_borrow..</text></g><g><title>check_mod_attrs (4,865,693 samples, 0.10%)</title><rect x="21.1781%" y="149" width="0.1043%" height="15" fill="rgb(225,20,46)"/><text x="21.4281%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (4,717,341 samples, 0.10%)</title><rect x="21.3348%" y="149" width="0.1011%" height="15" fill="rgb(210,31,41)"/><text x="21.5848%" y="159.50"></text></g><g><title>misc_checking_1 (12,285,211 samples, 0.26%)</title><rect x="21.1770%" y="165" width="0.2633%" height="15" fill="rgb(221,200,47)"/><text x="21.4270%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (6,170,526 samples, 0.13%)</title><rect x="21.4404%" y="149" width="0.1323%" height="15" fill="rgb(226,26,5)"/><text x="21.6904%" y="159.50"></text></g><g><title>check_mod_liveness (5,147,203 samples, 0.11%)</title><rect x="21.4623%" y="133" width="0.1103%" height="15" fill="rgb(249,33,26)"/><text x="21.7123%" y="143.50"></text></g><g><title>misc_checking_2 (15,312,404 samples, 0.33%)</title><rect x="21.4403%" y="165" width="0.3282%" height="15" fill="rgb(235,183,28)"/><text x="21.6903%" y="175.50"></text></g><g><title>match_checking (9,138,908 samples, 0.20%)</title><rect x="21.5726%" y="149" width="0.1959%" height="15" fill="rgb(221,5,38)"/><text x="21.8226%" y="159.50"></text></g><g><title>check_match (8,717,214 samples, 0.19%)</title><rect x="21.5817%" y="133" width="0.1868%" height="15" fill="rgb(247,18,42)"/><text x="21.8317%" y="143.50"></text></g><g><title>crate_lints (7,918,865 samples, 0.17%)</title><rect x="21.8921%" y="133" width="0.1697%" height="15" fill="rgb(241,131,45)"/><text x="22.1421%" y="143.50"></text></g><g><title>lint_checking (17,531,608 samples, 0.38%)</title><rect x="21.8921%" y="149" width="0.3758%" height="15" fill="rgb(249,31,29)"/><text x="22.1421%" y="159.50"></text></g><g><title>module_lints (9,609,603 samples, 0.21%)</title><rect x="22.0619%" y="133" width="0.2060%" height="15" fill="rgb(225,111,53)"/><text x="22.3119%" y="143.50"></text></g><g><title>lint_mod (9,591,453 samples, 0.21%)</title><rect x="22.0622%" y="117" width="0.2056%" height="15" fill="rgb(238,160,17)"/><text x="22.3122%" y="127.50"></text></g><g><title>privacy_checking_modules (14,140,552 samples, 0.30%)</title><rect x="22.3413%" y="149" width="0.3031%" height="15" fill="rgb(214,148,48)"/><text x="22.5913%" y="159.50"></text></g><g><title>check_mod_privacy (14,128,092 samples, 0.30%)</title><rect x="22.3415%" y="133" width="0.3028%" height="15" fill="rgb(232,36,49)"/><text x="22.5915%" y="143.50"></text></g><g><title>misc_checking_3 (40,940,139 samples, 0.88%)</title><rect x="21.7685%" y="165" width="0.8775%" height="15" fill="rgb(209,103,24)"/><text x="22.0185%" y="175.50"></text></g><g><title>impl_trait_ref (7,653,963 samples, 0.16%)</title><rect x="22.8855%" y="101" width="0.1641%" height="15" fill="rgb(229,88,8)"/><text x="23.1355%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,026,303 samples, 0.13%)</title><rect x="22.9204%" y="85" width="0.1292%" height="15" fill="rgb(213,181,19)"/><text x="23.1704%" y="95.50"></text></g><g><title>coherent_trait (19,998,254 samples, 0.43%)</title><rect x="22.6599%" y="133" width="0.4286%" height="15" fill="rgb(254,191,54)"/><text x="22.9099%" y="143.50"></text></g><g><title>specialization_graph_of (19,504,639 samples, 0.42%)</title><rect x="22.6704%" y="117" width="0.4181%" height="15" fill="rgb(241,83,37)"/><text x="22.9204%" y="127.50"></text></g><g><title>coherence_checking (20,343,847 samples, 0.44%)</title><rect x="22.6589%" y="149" width="0.4361%" height="15" fill="rgb(233,36,39)"/><text x="22.9089%" y="159.50"></text></g><g><title>evaluate_obligation (17,236,222 samples, 0.37%)</title><rect x="28.4574%" y="101" width="0.3694%" height="15" fill="rgb(226,3,54)"/><text x="28.7074%" y="111.50"></text></g><g><title>evaluate_obligation (7,567,266 samples, 0.16%)</title><rect x="30.8097%" y="85" width="0.1622%" height="15" fill="rgb(245,192,40)"/><text x="31.0597%" y="95.50"></text></g><g><title>typeck (98,470,412 samples, 2.11%)</title><rect x="29.0010%" y="101" width="2.1106%" height="15" fill="rgb(238,167,29)"/><text x="29.2510%" y="111.50">t..</text></g><g><title>item_bodies_checking (374,054,128 samples, 8.02%)</title><rect x="23.1019%" y="149" width="8.0176%" height="15" fill="rgb(232,182,51)"/><text x="23.3519%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (374,049,728 samples, 8.02%)</title><rect x="23.1020%" y="133" width="8.0175%" height="15" fill="rgb(231,60,39)"/><text x="23.3520%" y="143.50">typeck_item..</text></g><g><title>typeck (372,941,288 samples, 7.99%)</title><rect x="23.1258%" y="117" width="7.9937%" height="15" fill="rgb(208,69,12)"/><text x="23.3758%" y="127.50">typeck</text></g><g><title>item_types_checking (23,538,652 samples, 0.50%)</title><rect x="31.1195%" y="149" width="0.5045%" height="15" fill="rgb(235,93,37)"/><text x="31.3695%" y="159.50"></text></g><g><title>check_mod_item_types (23,526,892 samples, 0.50%)</title><rect x="31.1198%" y="133" width="0.5043%" height="15" fill="rgb(213,116,39)"/><text x="31.3698%" y="143.50"></text></g><g><title>fn_sig (4,759,771 samples, 0.10%)</title><rect x="31.6768%" y="117" width="0.1020%" height="15" fill="rgb(222,207,29)"/><text x="31.9268%" y="127.50"></text></g><g><title>generics_of (5,122,031 samples, 0.11%)</title><rect x="31.7788%" y="117" width="0.1098%" height="15" fill="rgb(206,96,30)"/><text x="32.0288%" y="127.50"></text></g><g><title>predicates_of (5,294,103 samples, 0.11%)</title><rect x="31.8944%" y="117" width="0.1135%" height="15" fill="rgb(218,138,4)"/><text x="32.1444%" y="127.50"></text></g><g><title>predicates_defined_on (4,777,468 samples, 0.10%)</title><rect x="31.9054%" y="101" width="0.1024%" height="15" fill="rgb(250,191,14)"/><text x="32.1554%" y="111.50"></text></g><g><title>type_collecting (18,793,911 samples, 0.40%)</title><rect x="31.6242%" y="149" width="0.4028%" height="15" fill="rgb(239,60,40)"/><text x="31.8742%" y="159.50"></text></g><g><title>collect_mod_item_types (18,765,271 samples, 0.40%)</title><rect x="31.6248%" y="133" width="0.4022%" height="15" fill="rgb(206,27,48)"/><text x="31.8748%" y="143.50"></text></g><g><title>region_scope_tree (4,770,239 samples, 0.10%)</title><rect x="32.8865%" y="117" width="0.1022%" height="15" fill="rgb(225,35,8)"/><text x="33.1365%" y="127.50"></text></g><g><title>check_impl_item_well_formed (42,757,655 samples, 0.92%)</title><rect x="32.0732%" y="133" width="0.9165%" height="15" fill="rgb(250,213,24)"/><text x="32.3232%" y="143.50"></text></g><g><title>check_item_well_formed (12,992,918 samples, 0.28%)</title><rect x="32.9896%" y="133" width="0.2785%" height="15" fill="rgb(247,123,22)"/><text x="33.2396%" y="143.50"></text></g><g><title>analysis (907,089,300 samples, 19.44%)</title><rect x="13.8284%" y="181" width="19.4428%" height="15" fill="rgb(231,138,38)"/><text x="14.0784%" y="191.50">analysis</text></g><g><title>type_check_crate (495,707,641 samples, 10.63%)</title><rect x="22.6460%" y="165" width="10.6251%" height="15" fill="rgb(231,145,46)"/><text x="22.8960%" y="175.50">type_check_crate</text></g><g><title>wf_checking (57,969,612 samples, 1.24%)</title><rect x="32.0286%" y="149" width="1.2425%" height="15" fill="rgb(251,118,11)"/><text x="32.2786%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (13,362,244 samples, 0.29%)</title><rect x="44.0387%" y="149" width="0.2864%" height="15" fill="rgb(217,147,25)"/><text x="44.2887%" y="159.50"></text></g><g><title>const_caller_location (8,446,645 samples, 0.18%)</title><rect x="44.3251%" y="149" width="0.1810%" height="15" fill="rgb(247,81,37)"/><text x="44.5751%" y="159.50"></text></g><g><title>layout_of (5,471,403 samples, 0.12%)</title><rect x="45.0481%" y="133" width="0.1173%" height="15" fill="rgb(209,12,38)"/><text x="45.2981%" y="143.50"></text></g><g><title>predicates_of (6,335,651 samples, 0.14%)</title><rect x="45.4304%" y="117" width="0.1358%" height="15" fill="rgb(227,1,9)"/><text x="45.6804%" y="127.50"></text></g><g><title>param_env (18,746,009 samples, 0.40%)</title><rect x="45.1654%" y="133" width="0.4018%" height="15" fill="rgb(248,47,43)"/><text x="45.4154%" y="143.50"></text></g><g><title>normalize_projection_ty (4,997,168 samples, 0.11%)</title><rect x="45.6119%" y="117" width="0.1071%" height="15" fill="rgb(221,10,30)"/><text x="45.8619%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (7,097,579 samples, 0.15%)</title><rect x="45.5672%" y="133" width="0.1521%" height="15" fill="rgb(210,229,1)"/><text x="45.8172%" y="143.50"></text></g><g><title>fn_abi_of_instance (56,536,893 samples, 1.21%)</title><rect x="44.5102%" y="149" width="1.2118%" height="15" fill="rgb(222,148,37)"/><text x="44.7602%" y="159.50"></text></g><g><title>layout_of (8,805,915 samples, 0.19%)</title><rect x="45.7793%" y="149" width="0.1887%" height="15" fill="rgb(234,67,33)"/><text x="46.0293%" y="159.50"></text></g><g><title>codegen_module (592,665,871 samples, 12.70%)</title><rect x="33.3658%" y="165" width="12.7034%" height="15" fill="rgb(247,98,35)"/><text x="33.6158%" y="175.50">codegen_module</text></g><g><title>codegen_crate (597,159,088 samples, 12.80%)</title><rect x="33.2713%" y="181" width="12.7997%" height="15" fill="rgb(247,138,52)"/><text x="33.5213%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,875,299,784 samples, 40.20%)</title><rect x="46.0829%" y="165" width="40.1957%" height="15" fill="rgb(213,79,30)"/><text x="46.3329%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,742,098,774 samples, 37.34%)</title><rect x="48.9380%" y="149" width="37.3406%" height="15" fill="rgb(246,177,23)"/><text x="49.1880%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,008,570,372 samples, 43.05%)</title><rect x="46.0710%" y="181" width="43.0523%" height="15" fill="rgb(230,62,27)"/><text x="46.3210%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (132,713,571 samples, 2.84%)</title><rect x="86.2786%" y="165" width="2.8446%" height="15" fill="rgb(216,154,8)"/><text x="86.5286%" y="175.50">LL..</text></g><g><title>macro_expand_crate (64,880,055 samples, 1.39%)</title><rect x="89.1719%" y="165" width="1.3907%" height="15" fill="rgb(244,35,45)"/><text x="89.4219%" y="175.50"></text></g><g><title>expand_crate (64,867,055 samples, 1.39%)</title><rect x="89.1722%" y="149" width="1.3904%" height="15" fill="rgb(251,115,12)"/><text x="89.4222%" y="159.50"></text></g><g><title>late_resolve_crate (14,423,785 samples, 0.31%)</title><rect x="90.5789%" y="149" width="0.3092%" height="15" fill="rgb(240,54,50)"/><text x="90.8289%" y="159.50"></text></g><g><title>configure_and_expand (84,123,172 samples, 1.80%)</title><rect x="89.1232%" y="181" width="1.8031%" height="15" fill="rgb(233,84,52)"/><text x="89.3732%" y="191.50">c..</text></g><g><title>resolve_crate (16,903,612 samples, 0.36%)</title><rect x="90.5640%" y="165" width="0.3623%" height="15" fill="rgb(207,117,47)"/><text x="90.8140%" y="175.50"></text></g><g><title>free_global_ctxt (48,119,246 samples, 1.03%)</title><rect x="91.0672%" y="181" width="1.0314%" height="15" fill="rgb(249,43,39)"/><text x="91.3172%" y="191.50"></text></g><g><title>codegen_fn_attrs (7,441,858 samples, 0.16%)</title><rect x="92.9714%" y="101" width="0.1595%" height="15" fill="rgb(209,38,44)"/><text x="93.2214%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (12,205,619 samples, 0.26%)</title><rect x="93.7653%" y="85" width="0.2616%" height="15" fill="rgb(236,212,23)"/><text x="94.0153%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (30,553,643 samples, 0.65%)</title><rect x="94.0269%" y="85" width="0.6549%" height="15" fill="rgb(242,79,21)"/><text x="94.2769%" y="95.50"></text></g><g><title>optimized_mir (70,355,760 samples, 1.51%)</title><rect x="93.2409%" y="101" width="1.5080%" height="15" fill="rgb(211,96,35)"/><text x="93.4909%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (27,942,679 samples, 0.60%)</title><rect x="94.9283%" y="85" width="0.5989%" height="15" fill="rgb(253,215,40)"/><text x="95.1783%" y="95.50"></text></g><g><title>resolve_instance (47,245,379 samples, 1.01%)</title><rect x="94.7489%" y="101" width="1.0127%" height="15" fill="rgb(211,81,21)"/><text x="94.9989%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (5,912,710 samples, 0.13%)</title><rect x="95.8611%" y="101" width="0.1267%" height="15" fill="rgb(208,190,38)"/><text x="96.1111%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (168,926,570 samples, 3.62%)</title><rect x="92.4380%" y="117" width="3.6208%" height="15" fill="rgb(235,213,38)"/><text x="92.6880%" y="127.50">mono..</text></g><g><title>monomorphization_collector (169,349,244 samples, 3.63%)</title><rect x="92.4379%" y="133" width="3.6299%" height="15" fill="rgb(237,122,38)"/><text x="92.6879%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (18,341,037 samples, 0.39%)</title><rect x="96.0682%" y="117" width="0.3931%" height="15" fill="rgb(244,218,35)"/><text x="96.3182%" y="127.50"></text></g><g><title>symbol_name (16,240,964 samples, 0.35%)</title><rect x="96.1132%" y="101" width="0.3481%" height="15" fill="rgb(240,68,47)"/><text x="96.3632%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (194,968,019 samples, 4.18%)</title><rect x="92.4355%" y="149" width="4.1790%" height="15" fill="rgb(210,16,53)"/><text x="92.6855%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (25,505,954 samples, 0.55%)</title><rect x="96.0678%" y="133" width="0.5467%" height="15" fill="rgb(235,124,12)"/><text x="96.3178%" y="143.50"></text></g><g><title>cgu_partitioning (7,144,027 samples, 0.15%)</title><rect x="96.4613%" y="117" width="0.1531%" height="15" fill="rgb(224,169,11)"/><text x="96.7113%" y="127.50"></text></g><g><title>exported_symbols (196,965,120 samples, 4.22%)</title><rect x="92.4180%" y="165" width="4.2218%" height="15" fill="rgb(250,166,2)"/><text x="92.6680%" y="175.50">expor..</text></g><g><title>layout_of (4,751,773 samples, 0.10%)</title><rect x="97.1661%" y="149" width="0.1019%" height="15" fill="rgb(242,216,29)"/><text x="97.4161%" y="159.50"></text></g><g><title>needs_drop_raw (4,779,716 samples, 0.10%)</title><rect x="97.9417%" y="133" width="0.1024%" height="15" fill="rgb(230,116,27)"/><text x="98.1917%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (37,150,903 samples, 0.80%)</title><rect x="97.2680%" y="149" width="0.7963%" height="15" fill="rgb(228,99,48)"/><text x="97.5180%" y="159.50"></text></g><g><title>optimized_mir (65,998,727 samples, 1.41%)</title><rect x="96.6540%" y="165" width="1.4146%" height="15" fill="rgb(253,11,6)"/><text x="96.9040%" y="175.50"></text></g><g><title>generate_crate_metadata (279,492,445 samples, 5.99%)</title><rect x="92.0986%" y="181" width="5.9907%" height="15" fill="rgb(247,143,39)"/><text x="92.3486%" y="191.50">generate..</text></g><g><title>hir_lowering (33,376,497 samples, 0.72%)</title><rect x="98.0893%" y="181" width="0.7154%" height="15" fill="rgb(236,97,10)"/><text x="98.3393%" y="191.50"></text></g><g><title>finish_ongoing_codegen (35,131,076 samples, 0.75%)</title><rect x="98.8051%" y="165" width="0.7530%" height="15" fill="rgb(233,208,19)"/><text x="99.0551%" y="175.50"></text></g><g><title>link_crate (11,135,270 samples, 0.24%)</title><rect x="99.5582%" y="165" width="0.2387%" height="15" fill="rgb(216,164,2)"/><text x="99.8082%" y="175.50"></text></g><g><title>link_binary (10,881,657 samples, 0.23%)</title><rect x="99.5636%" y="149" width="0.2332%" height="15" fill="rgb(220,129,5)"/><text x="99.8136%" y="159.50"></text></g><g><title>link_rlib (9,180,769 samples, 0.20%)</title><rect x="99.6000%" y="133" width="0.1968%" height="15" fill="rgb(242,17,10)"/><text x="99.8500%" y="143.50"></text></g><g><title>link (46,295,976 samples, 0.99%)</title><rect x="98.8047%" y="181" width="0.9923%" height="15" fill="rgb(242,107,0)"/><text x="99.0547%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (7,887,264 samples, 0.17%)</title><rect x="99.8072%" y="181" width="0.1691%" height="15" fill="rgb(251,28,31)"/><text x="100.0572%" y="191.50"></text></g><g><title>all (4,665,423,401 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (4,665,423,401 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>