<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,912,355 samples, 8.82%)</title><rect x="0.7528%" y="213" width="8.8244%" height="15" fill="rgb(227,0,7)"/><text x="1.0028%" y="223.50">LLVM_passes</text></g><g><title>is_copy_raw (114,852 samples, 0.13%)</title><rect x="16.7730%" y="101" width="0.1281%" height="15" fill="rgb(217,0,24)"/><text x="17.0230%" y="111.50"></text></g><g><title>evaluate_obligation (94,902 samples, 0.11%)</title><rect x="16.7952%" y="85" width="0.1058%" height="15" fill="rgb(221,193,54)"/><text x="17.0452%" y="95.50"></text></g><g><title>thir_body (564,324 samples, 0.63%)</title><rect x="17.0388%" y="101" width="0.6294%" height="15" fill="rgb(248,212,6)"/><text x="17.2888%" y="111.50"></text></g><g><title>mir_const (2,589,605 samples, 2.89%)</title><rect x="14.7859%" y="149" width="2.8881%" height="15" fill="rgb(208,68,35)"/><text x="15.0359%" y="159.50">mi..</text></g><g><title>unsafety_check_result (2,227,522 samples, 2.48%)</title><rect x="15.1897%" y="133" width="2.4843%" height="15" fill="rgb(232,128,0)"/><text x="15.4397%" y="143.50">un..</text></g><g><title>mir_built (2,056,382 samples, 2.29%)</title><rect x="15.3806%" y="117" width="2.2934%" height="15" fill="rgb(207,160,47)"/><text x="15.6306%" y="127.50">m..</text></g><g><title>mir_promoted (3,013,350 samples, 3.36%)</title><rect x="14.4193%" y="165" width="3.3607%" height="15" fill="rgb(228,23,34)"/><text x="14.6693%" y="175.50">mir..</text></g><g><title>mir_const_qualif (95,062 samples, 0.11%)</title><rect x="17.6740%" y="149" width="0.1060%" height="15" fill="rgb(218,30,26)"/><text x="17.9240%" y="159.50"></text></g><g><title>type_op_prove_predicate (293,835 samples, 0.33%)</title><rect x="17.8502%" y="165" width="0.3277%" height="15" fill="rgb(220,122,19)"/><text x="18.1002%" y="175.50"></text></g><g><title>MIR_borrow_checking (7,476,791 samples, 8.34%)</title><rect x="9.8424%" y="197" width="8.3387%" height="15" fill="rgb(250,228,42)"/><text x="10.0924%" y="207.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (7,434,570 samples, 8.29%)</title><rect x="9.8895%" y="181" width="8.2916%" height="15" fill="rgb(240,193,28)"/><text x="10.1395%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (148,852 samples, 0.17%)</title><rect x="18.2791%" y="197" width="0.1660%" height="15" fill="rgb(216,20,37)"/><text x="18.5291%" y="207.50"></text></g><g><title>should_inherit_track_caller (185,353 samples, 0.21%)</title><rect x="18.8196%" y="149" width="0.2067%" height="15" fill="rgb(206,188,39)"/><text x="19.0696%" y="159.50"></text></g><g><title>codegen_fn_attrs (364,104 samples, 0.41%)</title><rect x="18.6659%" y="165" width="0.4061%" height="15" fill="rgb(217,207,13)"/><text x="18.9159%" y="175.50"></text></g><g><title>check_mod_attrs (535,326 samples, 0.60%)</title><rect x="18.4754%" y="181" width="0.5970%" height="15" fill="rgb(231,73,38)"/><text x="18.7254%" y="191.50"></text></g><g><title>lookup_deprecation_entry (92,291 samples, 0.10%)</title><rect x="19.3175%" y="165" width="0.1029%" height="15" fill="rgb(225,20,46)"/><text x="19.5675%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (225,921 samples, 0.25%)</title><rect x="19.2076%" y="181" width="0.2520%" height="15" fill="rgb(210,31,41)"/><text x="19.4576%" y="191.50"></text></g><g><title>misc_checking_1 (955,940 samples, 1.07%)</title><rect x="18.4456%" y="197" width="1.0661%" height="15" fill="rgb(221,200,47)"/><text x="18.6956%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (224,012 samples, 0.25%)</title><rect x="19.5151%" y="181" width="0.2498%" height="15" fill="rgb(226,26,5)"/><text x="19.7651%" y="191.50"></text></g><g><title>check_mod_liveness (157,852 samples, 0.18%)</title><rect x="19.5888%" y="165" width="0.1760%" height="15" fill="rgb(249,33,26)"/><text x="19.8388%" y="175.50"></text></g><g><title>misc_checking_2 (779,088 samples, 0.87%)</title><rect x="19.5117%" y="197" width="0.8689%" height="15" fill="rgb(235,183,28)"/><text x="19.7617%" y="207.50"></text></g><g><title>match_checking (552,086 samples, 0.62%)</title><rect x="19.7649%" y="181" width="0.6157%" height="15" fill="rgb(221,5,38)"/><text x="20.0149%" y="191.50"></text></g><g><title>check_match (522,166 samples, 0.58%)</title><rect x="19.7983%" y="165" width="0.5824%" height="15" fill="rgb(247,18,42)"/><text x="20.0483%" y="175.50"></text></g><g><title>check_private_in_public (94,501 samples, 0.11%)</title><rect x="20.3924%" y="181" width="0.1054%" height="15" fill="rgb(241,131,45)"/><text x="20.6424%" y="191.50"></text></g><g><title>death_checking (305,883 samples, 0.34%)</title><rect x="20.4978%" y="181" width="0.3411%" height="15" fill="rgb(249,31,29)"/><text x="20.7478%" y="191.50"></text></g><g><title>item_attrs (117,361 samples, 0.13%)</title><rect x="20.7081%" y="165" width="0.1309%" height="15" fill="rgb(225,111,53)"/><text x="20.9581%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (115,411 samples, 0.13%)</title><rect x="20.7103%" y="149" width="0.1287%" height="15" fill="rgb(238,160,17)"/><text x="20.9603%" y="159.50"></text></g><g><title>crate_lints (1,022,071 samples, 1.14%)</title><rect x="20.8416%" y="165" width="1.1399%" height="15" fill="rgb(214,148,48)"/><text x="21.0916%" y="175.50"></text></g><g><title>type_of (473,516 samples, 0.53%)</title><rect x="21.4534%" y="149" width="0.5281%" height="15" fill="rgb(232,36,49)"/><text x="21.7034%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (316,984 samples, 0.35%)</title><rect x="21.6280%" y="133" width="0.3535%" height="15" fill="rgb(209,103,24)"/><text x="21.8780%" y="143.50"></text></g><g><title>lint_checking (1,309,134 samples, 1.46%)</title><rect x="20.8390%" y="181" width="1.4600%" height="15" fill="rgb(229,88,8)"/><text x="21.0890%" y="191.50"></text></g><g><title>module_lints (284,713 samples, 0.32%)</title><rect x="21.9815%" y="165" width="0.3175%" height="15" fill="rgb(213,181,19)"/><text x="22.2315%" y="175.50"></text></g><g><title>lint_mod (279,923 samples, 0.31%)</title><rect x="21.9868%" y="149" width="0.3122%" height="15" fill="rgb(254,191,54)"/><text x="22.2368%" y="159.50"></text></g><g><title>privacy_access_levels (93,191 samples, 0.10%)</title><rect x="22.2990%" y="181" width="0.1039%" height="15" fill="rgb(241,83,37)"/><text x="22.5490%" y="191.50"></text></g><g><title>privacy_checking_modules (263,213 samples, 0.29%)</title><rect x="22.4029%" y="181" width="0.2936%" height="15" fill="rgb(233,36,39)"/><text x="22.6529%" y="191.50"></text></g><g><title>check_mod_privacy (260,063 samples, 0.29%)</title><rect x="22.4065%" y="165" width="0.2900%" height="15" fill="rgb(226,3,54)"/><text x="22.6565%" y="175.50"></text></g><g><title>misc_checking_3 (2,094,472 samples, 2.34%)</title><rect x="20.3806%" y="197" width="2.3359%" height="15" fill="rgb(245,192,40)"/><text x="20.6306%" y="207.50">m..</text></g><g><title>impl_parent (945,970 samples, 1.06%)</title><rect x="25.1040%" y="133" width="1.0550%" height="15" fill="rgb(238,167,29)"/><text x="25.3540%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (475,222 samples, 0.53%)</title><rect x="25.6290%" y="117" width="0.5300%" height="15" fill="rgb(232,182,51)"/><text x="25.8790%" y="127.50"></text></g><g><title>impl_trait_ref (2,429,568 samples, 2.71%)</title><rect x="26.1590%" y="133" width="2.7096%" height="15" fill="rgb(231,60,39)"/><text x="26.4090%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,965,833 samples, 2.19%)</title><rect x="26.6762%" y="117" width="2.1924%" height="15" fill="rgb(208,69,12)"/><text x="26.9262%" y="127.50">m..</text></g><g><title>coherent_trait (5,859,362 samples, 6.53%)</title><rect x="22.8021%" y="165" width="6.5348%" height="15" fill="rgb(235,93,37)"/><text x="23.0521%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (5,726,780 samples, 6.39%)</title><rect x="22.9500%" y="149" width="6.3869%" height="15" fill="rgb(213,116,39)"/><text x="23.2000%" y="159.50">speciali..</text></g><g><title>trait_impls_of (417,043 samples, 0.47%)</title><rect x="28.8718%" y="133" width="0.4651%" height="15" fill="rgb(222,207,29)"/><text x="29.1218%" y="143.50"></text></g><g><title>implementations_of_trait (91,050 samples, 0.10%)</title><rect x="29.2353%" y="117" width="0.1015%" height="15" fill="rgb(206,96,30)"/><text x="29.4853%" y="127.50"></text></g><g><title>coherence_checking (5,921,674 samples, 6.60%)</title><rect x="22.7792%" y="181" width="6.6043%" height="15" fill="rgb(218,138,4)"/><text x="23.0292%" y="191.50">coherence..</text></g><g><title>associated_items (113,760 samples, 0.13%)</title><rect x="38.8165%" y="133" width="0.1269%" height="15" fill="rgb(250,191,14)"/><text x="39.0665%" y="143.50"></text></g><g><title>dropck_outlives (115,441 samples, 0.13%)</title><rect x="38.9574%" y="133" width="0.1287%" height="15" fill="rgb(239,60,40)"/><text x="39.2074%" y="143.50"></text></g><g><title>generics_of (108,210 samples, 0.12%)</title><rect x="40.1398%" y="117" width="0.1207%" height="15" fill="rgb(206,27,48)"/><text x="40.3898%" y="127.50"></text></g><g><title>impl_trait_ref (147,662 samples, 0.16%)</title><rect x="40.3767%" y="117" width="0.1647%" height="15" fill="rgb(225,35,8)"/><text x="40.6267%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (129,872 samples, 0.14%)</title><rect x="40.3965%" y="101" width="0.1448%" height="15" fill="rgb(250,213,24)"/><text x="40.6465%" y="111.50"></text></g><g><title>predicates_of (258,643 samples, 0.29%)</title><rect x="40.5764%" y="117" width="0.2885%" height="15" fill="rgb(247,123,22)"/><text x="40.8264%" y="127.50"></text></g><g><title>predicates_defined_on (156,482 samples, 0.17%)</title><rect x="40.6904%" y="101" width="0.1745%" height="15" fill="rgb(231,138,38)"/><text x="40.9404%" y="111.50"></text></g><g><title>specializes (872,431 samples, 0.97%)</title><rect x="40.8649%" y="117" width="0.9730%" height="15" fill="rgb(231,145,46)"/><text x="41.1149%" y="127.50"></text></g><g><title>param_env (632,286 samples, 0.71%)</title><rect x="41.1327%" y="101" width="0.7052%" height="15" fill="rgb(251,118,11)"/><text x="41.3827%" y="111.50"></text></g><g><title>def_span (423,405 samples, 0.47%)</title><rect x="41.3657%" y="85" width="0.4722%" height="15" fill="rgb(217,147,25)"/><text x="41.6157%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (394,905 samples, 0.44%)</title><rect x="41.3975%" y="69" width="0.4404%" height="15" fill="rgb(247,81,37)"/><text x="41.6475%" y="79.50"></text></g><g><title>trait_impls_of (319,193 samples, 0.36%)</title><rect x="41.8515%" y="117" width="0.3560%" height="15" fill="rgb(209,12,38)"/><text x="42.1015%" y="127.50"></text></g><g><title>implementations_of_trait (130,271 samples, 0.15%)</title><rect x="42.0622%" y="101" width="0.1453%" height="15" fill="rgb(227,1,9)"/><text x="42.3122%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (122,411 samples, 0.14%)</title><rect x="42.0709%" y="85" width="0.1365%" height="15" fill="rgb(248,47,43)"/><text x="42.3209%" y="95.50"></text></g><g><title>evaluate_obligation (2,810,311 samples, 3.13%)</title><rect x="39.0862%" y="133" width="3.1343%" height="15" fill="rgb(221,10,30)"/><text x="39.3362%" y="143.50">eva..</text></g><g><title>method_autoderef_steps (114,920 samples, 0.13%)</title><rect x="42.4641%" y="133" width="0.1282%" height="15" fill="rgb(210,229,1)"/><text x="42.7141%" y="143.50"></text></g><g><title>predicates_of (116,230 samples, 0.13%)</title><rect x="42.6052%" y="133" width="0.1296%" height="15" fill="rgb(222,148,37)"/><text x="42.8552%" y="143.50"></text></g><g><title>item_bodies_checking (12,059,238 samples, 13.45%)</title><rect x="29.4061%" y="181" width="13.4493%" height="15" fill="rgb(234,67,33)"/><text x="29.6561%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,055,848 samples, 13.45%)</title><rect x="29.4099%" y="165" width="13.4456%" height="15" fill="rgb(247,98,35)"/><text x="29.6599%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (12,021,368 samples, 13.41%)</title><rect x="29.4483%" y="149" width="13.4071%" height="15" fill="rgb(247,138,52)"/><text x="29.6983%" y="159.50">typeck</text></g><g><title>item_types_checking (541,596 samples, 0.60%)</title><rect x="42.8554%" y="181" width="0.6040%" height="15" fill="rgb(213,79,30)"/><text x="43.1054%" y="191.50"></text></g><g><title>check_mod_item_types (536,286 samples, 0.60%)</title><rect x="42.8614%" y="165" width="0.5981%" height="15" fill="rgb(246,177,23)"/><text x="43.1114%" y="175.50"></text></g><g><title>thir_body (126,204 samples, 0.14%)</title><rect x="45.8065%" y="37" width="0.1408%" height="15" fill="rgb(230,62,27)"/><text x="46.0565%" y="47.50"></text></g><g><title>mir_const_qualif (1,020,070 samples, 1.14%)</title><rect x="44.8253%" y="101" width="1.1377%" height="15" fill="rgb(216,154,8)"/><text x="45.0753%" y="111.50"></text></g><g><title>mir_const (855,527 samples, 0.95%)</title><rect x="45.0088%" y="85" width="0.9541%" height="15" fill="rgb(244,35,45)"/><text x="45.2588%" y="95.50"></text></g><g><title>unsafety_check_result (597,515 samples, 0.67%)</title><rect x="45.2966%" y="69" width="0.6664%" height="15" fill="rgb(251,115,12)"/><text x="45.5466%" y="79.50"></text></g><g><title>mir_built (508,235 samples, 0.57%)</title><rect x="45.3962%" y="53" width="0.5668%" height="15" fill="rgb(240,54,50)"/><text x="45.6462%" y="63.50"></text></g><g><title>is_late_bound_map (109,832 samples, 0.12%)</title><rect x="49.2444%" y="53" width="0.1225%" height="15" fill="rgb(233,84,52)"/><text x="49.4944%" y="63.50"></text></g><g><title>mir_borrowck (2,131,884 samples, 2.38%)</title><rect x="47.1751%" y="69" width="2.3776%" height="15" fill="rgb(207,117,47)"/><text x="47.4251%" y="79.50">mi..</text></g><g><title>mir_promoted (166,642 samples, 0.19%)</title><rect x="49.3668%" y="53" width="0.1859%" height="15" fill="rgb(249,43,39)"/><text x="49.6168%" y="63.50"></text></g><g><title>mir_for_ctfe (3,231,975 samples, 3.60%)</title><rect x="45.9630%" y="101" width="3.6045%" height="15" fill="rgb(209,38,44)"/><text x="46.2130%" y="111.50">mir_..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,955,974 samples, 3.30%)</title><rect x="46.2708%" y="85" width="3.2967%" height="15" fill="rgb(236,212,23)"/><text x="46.5208%" y="95.50">mir..</text></g><g><title>region_scope_tree (92,472 samples, 0.10%)</title><rect x="50.8678%" y="85" width="0.1031%" height="15" fill="rgb(242,79,21)"/><text x="51.1178%" y="95.50"></text></g><g><title>eval_to_const_value_raw (6,381,655 samples, 7.12%)</title><rect x="43.9212%" y="149" width="7.1173%" height="15" fill="rgb(211,96,35)"/><text x="44.1712%" y="159.50">eval_to_co..</text></g><g><title>eval_to_const_value_raw (6,326,465 samples, 7.06%)</title><rect x="43.9828%" y="133" width="7.0557%" height="15" fill="rgb(253,215,40)"/><text x="44.2328%" y="143.50">eval_to_c..</text></g><g><title>eval_to_allocation_raw (6,241,793 samples, 6.96%)</title><rect x="44.0772%" y="117" width="6.9613%" height="15" fill="rgb(211,81,21)"/><text x="44.3272%" y="127.50">eval_to_a..</text></g><g><title>typeck (1,310,972 samples, 1.46%)</title><rect x="49.5764%" y="101" width="1.4621%" height="15" fill="rgb(208,190,38)"/><text x="49.8264%" y="111.50"></text></g><g><title>fn_sig (205,101 samples, 0.23%)</title><rect x="51.0385%" y="149" width="0.2287%" height="15" fill="rgb(235,213,38)"/><text x="51.2885%" y="159.50"></text></g><g><title>named_region_map (297,962 samples, 0.33%)</title><rect x="51.3944%" y="133" width="0.3323%" height="15" fill="rgb(237,122,38)"/><text x="51.6444%" y="143.50"></text></g><g><title>resolve_lifetimes (279,562 samples, 0.31%)</title><rect x="51.4149%" y="117" width="0.3118%" height="15" fill="rgb(244,218,35)"/><text x="51.6649%" y="127.50"></text></g><g><title>lint_levels (134,651 samples, 0.15%)</title><rect x="51.5765%" y="101" width="0.1502%" height="15" fill="rgb(240,68,47)"/><text x="51.8265%" y="111.50"></text></g><g><title>generics_of (429,875 samples, 0.48%)</title><rect x="51.2672%" y="149" width="0.4794%" height="15" fill="rgb(210,16,53)"/><text x="51.5172%" y="159.50"></text></g><g><title>param_env (539,199 samples, 0.60%)</title><rect x="51.8064%" y="149" width="0.6014%" height="15" fill="rgb(235,124,12)"/><text x="52.0564%" y="159.50"></text></g><g><title>predicates_of (112,361 samples, 0.13%)</title><rect x="52.2824%" y="133" width="0.1253%" height="15" fill="rgb(224,169,11)"/><text x="52.5324%" y="143.50"></text></g><g><title>predicates_defined_on (98,291 samples, 0.11%)</title><rect x="52.2981%" y="117" width="0.1096%" height="15" fill="rgb(250,166,2)"/><text x="52.5481%" y="127.50"></text></g><g><title>explicit_predicates_of (166,053 samples, 0.19%)</title><rect x="52.5743%" y="117" width="0.1852%" height="15" fill="rgb(242,216,29)"/><text x="52.8243%" y="127.50"></text></g><g><title>predicates_of (429,327 samples, 0.48%)</title><rect x="52.4077%" y="149" width="0.4788%" height="15" fill="rgb(230,116,27)"/><text x="52.6577%" y="159.50"></text></g><g><title>predicates_defined_on (374,047 samples, 0.42%)</title><rect x="52.4694%" y="133" width="0.4172%" height="15" fill="rgb(228,99,48)"/><text x="52.7194%" y="143.50"></text></g><g><title>inferred_outlives_of (113,871 samples, 0.13%)</title><rect x="52.7595%" y="117" width="0.1270%" height="15" fill="rgb(253,11,6)"/><text x="53.0095%" y="127.50"></text></g><g><title>type_collecting (8,581,841 samples, 9.57%)</title><rect x="43.4615%" y="181" width="9.5711%" height="15" fill="rgb(247,143,39)"/><text x="43.7115%" y="191.50">type_collecting</text></g><g><title>collect_mod_item_types (8,570,031 samples, 9.56%)</title><rect x="43.4747%" y="165" width="9.5579%" height="15" fill="rgb(236,97,10)"/><text x="43.7247%" y="175.50">collect_mod_it..</text></g><g><title>evaluate_obligation (258,883 samples, 0.29%)</title><rect x="53.9430%" y="149" width="0.2887%" height="15" fill="rgb(233,208,19)"/><text x="54.1930%" y="159.50"></text></g><g><title>implied_outlives_bounds (102,992 samples, 0.11%)</title><rect x="54.2317%" y="149" width="0.1149%" height="15" fill="rgb(216,164,2)"/><text x="54.4817%" y="159.50"></text></g><g><title>param_env (96,580 samples, 0.11%)</title><rect x="54.3466%" y="149" width="0.1077%" height="15" fill="rgb(220,129,5)"/><text x="54.5966%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,435,405 samples, 1.60%)</title><rect x="53.1609%" y="165" width="1.6009%" height="15" fill="rgb(242,17,10)"/><text x="53.4109%" y="175.50"></text></g><g><title>region_scope_tree (219,272 samples, 0.24%)</title><rect x="54.5172%" y="149" width="0.2445%" height="15" fill="rgb(242,107,0)"/><text x="54.7672%" y="159.50"></text></g><g><title>evaluate_obligation (201,524 samples, 0.22%)</title><rect x="55.4330%" y="149" width="0.2248%" height="15" fill="rgb(251,28,31)"/><text x="55.6830%" y="159.50"></text></g><g><title>param_env (132,972 samples, 0.15%)</title><rect x="55.6871%" y="149" width="0.1483%" height="15" fill="rgb(233,223,10)"/><text x="55.9371%" y="159.50"></text></g><g><title>check_item_well_formed (1,135,092 samples, 1.27%)</title><rect x="54.7618%" y="165" width="1.2659%" height="15" fill="rgb(215,21,27)"/><text x="55.0118%" y="175.50"></text></g><g><title>analysis (41,954,348 samples, 46.79%)</title><rect x="9.5772%" y="213" width="46.7906%" height="15" fill="rgb(232,23,21)"/><text x="9.8272%" y="223.50">analysis</text></g><g><title>type_check_crate (30,173,122 samples, 33.65%)</title><rect x="22.7165%" y="197" width="33.6513%" height="15" fill="rgb(244,5,23)"/><text x="22.9665%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,984,032 samples, 3.33%)</title><rect x="53.0398%" y="181" width="3.3280%" height="15" fill="rgb(226,81,46)"/><text x="53.2898%" y="191.50">wf_..</text></g><g><title>check_trait_item_well_formed (304,944 samples, 0.34%)</title><rect x="56.0277%" y="165" width="0.3401%" height="15" fill="rgb(247,70,30)"/><text x="56.2777%" y="175.50"></text></g><g><title>fn_abi_of_instance (110,511 samples, 0.12%)</title><rect x="58.2744%" y="181" width="0.1232%" height="15" fill="rgb(212,68,19)"/><text x="58.5244%" y="191.50"></text></g><g><title>codegen_module (1,371,115 samples, 1.53%)</title><rect x="56.9056%" y="197" width="1.5292%" height="15" fill="rgb(240,187,13)"/><text x="57.1556%" y="207.50"></text></g><g><title>codegen_crate (1,865,620 samples, 2.08%)</title><rect x="56.3787%" y="213" width="2.0807%" height="15" fill="rgb(223,113,26)"/><text x="56.6287%" y="223.50">c..</text></g><g><title>LLVM_module_codegen (10,288,940 samples, 11.47%)</title><rect x="58.4834%" y="197" width="11.4750%" height="15" fill="rgb(206,192,2)"/><text x="58.7334%" y="207.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (9,994,857 samples, 11.15%)</title><rect x="58.8114%" y="181" width="11.1470%" height="15" fill="rgb(241,108,4)"/><text x="59.0614%" y="191.50">LLVM_module_code..</text></g><g><title>codegen_module_optimize (10,784,246 samples, 12.03%)</title><rect x="58.4593%" y="213" width="12.0274%" height="15" fill="rgb(247,173,49)"/><text x="58.7093%" y="223.50">codegen_module_opt..</text></g><g><title>LLVM_module_optimize (473,715 samples, 0.53%)</title><rect x="69.9584%" y="197" width="0.5283%" height="15" fill="rgb(224,114,35)"/><text x="70.2084%" y="207.50"></text></g><g><title>AST_validation (96,011 samples, 0.11%)</title><rect x="70.6780%" y="197" width="0.1071%" height="15" fill="rgb(245,159,27)"/><text x="70.9280%" y="207.50"></text></g><g><title>metadata_load_macro (101,741 samples, 0.11%)</title><rect x="80.4198%" y="165" width="0.1135%" height="15" fill="rgb(245,172,44)"/><text x="80.6698%" y="175.50"></text></g><g><title>metadata_register_crate (186,782 samples, 0.21%)</title><rect x="80.5333%" y="165" width="0.2083%" height="15" fill="rgb(236,23,11)"/><text x="80.7833%" y="175.50"></text></g><g><title>macro_expand_crate (8,863,765 samples, 9.89%)</title><rect x="70.9260%" y="197" width="9.8855%" height="15" fill="rgb(205,117,38)"/><text x="71.1760%" y="207.50">macro_expand_c..</text></g><g><title>expand_crate (8,850,275 samples, 9.87%)</title><rect x="70.9411%" y="181" width="9.8705%" height="15" fill="rgb(237,72,25)"/><text x="71.1911%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (95,381 samples, 0.11%)</title><rect x="80.8158%" y="197" width="0.1064%" height="15" fill="rgb(244,70,9)"/><text x="81.0658%" y="207.50"></text></g><g><title>finalize_macro_resolutions (208,592 samples, 0.23%)</title><rect x="80.9678%" y="181" width="0.2326%" height="15" fill="rgb(217,125,39)"/><text x="81.2178%" y="191.50"></text></g><g><title>late_resolve_crate (1,526,477 samples, 1.70%)</title><rect x="81.2005%" y="181" width="1.7024%" height="15" fill="rgb(235,36,10)"/><text x="81.4505%" y="191.50"></text></g><g><title>configure_and_expand (11,210,340 samples, 12.50%)</title><rect x="70.4867%" y="213" width="12.5026%" height="15" fill="rgb(251,123,47)"/><text x="70.7367%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,853,439 samples, 2.07%)</title><rect x="80.9222%" y="197" width="2.0671%" height="15" fill="rgb(221,13,13)"/><text x="81.1722%" y="207.50">r..</text></g><g><title>drop_ast (118,202 samples, 0.13%)</title><rect x="82.9893%" y="213" width="0.1318%" height="15" fill="rgb(238,131,9)"/><text x="83.2393%" y="223.50"></text></g><g><title>early_lint_checks (315,073 samples, 0.35%)</title><rect x="83.1404%" y="213" width="0.3514%" height="15" fill="rgb(211,50,8)"/><text x="83.3904%" y="223.50"></text></g><g><title>free_global_ctxt (1,836,059 samples, 2.05%)</title><rect x="83.4917%" y="213" width="2.0477%" height="15" fill="rgb(245,182,24)"/><text x="83.7417%" y="223.50">f..</text></g><g><title>optimized_mir (485,786 samples, 0.54%)</title><rect x="86.3046%" y="133" width="0.5418%" height="15" fill="rgb(242,14,37)"/><text x="86.5546%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (217,642 samples, 0.24%)</title><rect x="86.6037%" y="117" width="0.2427%" height="15" fill="rgb(246,228,12)"/><text x="86.8537%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (574,396 samples, 0.64%)</title><rect x="86.2101%" y="149" width="0.6406%" height="15" fill="rgb(213,55,15)"/><text x="86.4601%" y="159.50"></text></g><g><title>monomorphization_collector (592,666 samples, 0.66%)</title><rect x="86.2080%" y="165" width="0.6610%" height="15" fill="rgb(209,9,3)"/><text x="86.4580%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (700,017 samples, 0.78%)</title><rect x="86.1927%" y="181" width="0.7807%" height="15" fill="rgb(230,59,30)"/><text x="86.4427%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (93,631 samples, 0.10%)</title><rect x="86.8690%" y="165" width="0.1044%" height="15" fill="rgb(209,121,21)"/><text x="87.1190%" y="175.50"></text></g><g><title>exported_symbols (743,658 samples, 0.83%)</title><rect x="86.1829%" y="197" width="0.8294%" height="15" fill="rgb(220,109,13)"/><text x="86.4329%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (442,985 samples, 0.49%)</title><rect x="87.8177%" y="181" width="0.4940%" height="15" fill="rgb(232,18,1)"/><text x="88.0677%" y="191.50"></text></g><g><title>optimized_mir (1,150,422 samples, 1.28%)</title><rect x="87.0366%" y="197" width="1.2830%" height="15" fill="rgb(215,41,42)"/><text x="87.2866%" y="207.50"></text></g><g><title>generate_crate_metadata (2,517,336 samples, 2.81%)</title><rect x="85.5395%" y="213" width="2.8075%" height="15" fill="rgb(224,123,36)"/><text x="85.7895%" y="223.50">ge..</text></g><g><title>hir_lowering (1,630,148 samples, 1.82%)</title><rect x="88.3470%" y="213" width="1.8181%" height="15" fill="rgb(240,125,3)"/><text x="88.5970%" y="223.50">h..</text></g><g><title>finish_ongoing_codegen (5,092,855 samples, 5.68%)</title><rect x="90.1828%" y="197" width="5.6799%" height="15" fill="rgb(205,98,50)"/><text x="90.4328%" y="207.50">finish_..</text></g><g><title>link_crate (923,440 samples, 1.03%)</title><rect x="95.8627%" y="197" width="1.0299%" height="15" fill="rgb(205,185,37)"/><text x="96.1127%" y="207.50"></text></g><g><title>link_binary (916,590 samples, 1.02%)</title><rect x="95.8704%" y="181" width="1.0222%" height="15" fill="rgb(238,207,15)"/><text x="96.1204%" y="191.50"></text></g><g><title>link_rlib (564,246 samples, 0.63%)</title><rect x="96.2633%" y="165" width="0.6293%" height="15" fill="rgb(213,199,42)"/><text x="96.5133%" y="175.50"></text></g><g><title>link (6,040,235 samples, 6.74%)</title><rect x="90.1650%" y="213" width="6.7365%" height="15" fill="rgb(235,201,11)"/><text x="90.4150%" y="223.50">link</text></g><g><title>parse_crate (1,318,294 samples, 1.47%)</title><rect x="96.9015%" y="213" width="1.4703%" height="15" fill="rgb(207,46,11)"/><text x="97.1515%" y="223.50"></text></g><g><title>prepare_outputs (313,513 samples, 0.35%)</title><rect x="98.3810%" y="213" width="0.3497%" height="15" fill="rgb(241,35,35)"/><text x="98.6310%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (662,557 samples, 0.74%)</title><rect x="98.7307%" y="213" width="0.7389%" height="15" fill="rgb(243,32,47)"/><text x="98.9807%" y="223.50"></text></g><g><title>setup_global_ctxt (112,581 samples, 0.13%)</title><rect x="99.4710%" y="213" width="0.1256%" height="15" fill="rgb(247,202,23)"/><text x="99.7210%" y="223.50"></text></g><g><title>all (89,664,119 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (89,664,119 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (361,774 samples, 0.40%)</title><rect x="99.5965%" y="213" width="0.4035%" height="15" fill="rgb(222,74,54)"/><text x="99.8465%" y="223.50"></text></g></svg></svg>