<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (573,257,434 samples, 6.64%)</title><rect x="0.1942%" y="181" width="6.6371%" height="15" fill="rgb(227,0,7)"/><text x="0.4442%" y="191.50">LLVM_pass..</text></g><g><title>implied_outlives_bounds (10,669,852 samples, 0.12%)</title><rect x="15.0168%" y="133" width="0.1235%" height="15" fill="rgb(217,0,24)"/><text x="15.2668%" y="143.50"></text></g><g><title>is_copy_raw (36,632,342 samples, 0.42%)</title><rect x="18.4612%" y="53" width="0.4241%" height="15" fill="rgb(221,193,54)"/><text x="18.7112%" y="63.50"></text></g><g><title>evaluate_obligation (27,766,564 samples, 0.32%)</title><rect x="18.5638%" y="37" width="0.3215%" height="15" fill="rgb(248,212,6)"/><text x="18.8138%" y="47.50"></text></g><g><title>needs_drop_raw (45,003,590 samples, 0.52%)</title><rect x="18.3649%" y="69" width="0.5210%" height="15" fill="rgb(208,68,35)"/><text x="18.6149%" y="79.50"></text></g><g><title>resolve_instance (14,807,179 samples, 0.17%)</title><rect x="18.8859%" y="69" width="0.1714%" height="15" fill="rgb(232,128,0)"/><text x="19.1359%" y="79.50"></text></g><g><title>thir_body (63,642,871 samples, 0.74%)</title><rect x="19.0742%" y="69" width="0.7368%" height="15" fill="rgb(207,160,47)"/><text x="19.3242%" y="79.50"></text></g><g><title>mir_const (357,548,889 samples, 4.14%)</title><rect x="15.7093%" y="117" width="4.1397%" height="15" fill="rgb(228,23,34)"/><text x="15.9593%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (314,100,520 samples, 3.64%)</title><rect x="16.2123%" y="101" width="3.6366%" height="15" fill="rgb(218,30,26)"/><text x="16.4623%" y="111.50">unsa..</text></g><g><title>mir_built (287,651,087 samples, 3.33%)</title><rect x="16.5185%" y="85" width="3.3304%" height="15" fill="rgb(220,122,19)"/><text x="16.7685%" y="95.50">mir..</text></g><g><title>mir_promoted (411,477,238 samples, 4.76%)</title><rect x="15.1974%" y="133" width="4.7640%" height="15" fill="rgb(250,228,42)"/><text x="15.4474%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (9,716,786 samples, 0.11%)</title><rect x="19.8489%" y="117" width="0.1125%" height="15" fill="rgb(240,193,28)"/><text x="20.0989%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (18,166,703 samples, 0.21%)</title><rect x="19.9614%" y="133" width="0.2103%" height="15" fill="rgb(216,20,37)"/><text x="20.2114%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (11,092,427 samples, 0.13%)</title><rect x="20.1718%" y="133" width="0.1284%" height="15" fill="rgb(206,188,39)"/><text x="20.4218%" y="143.50"></text></g><g><title>type_op_prove_predicate (74,555,107 samples, 0.86%)</title><rect x="20.4152%" y="133" width="0.8632%" height="15" fill="rgb(217,207,13)"/><text x="20.6652%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,235,560,946 samples, 14.31%)</title><rect x="6.9736%" y="165" width="14.3052%" height="15" fill="rgb(231,73,38)"/><text x="7.2236%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,227,104,851 samples, 14.21%)</title><rect x="7.0715%" y="149" width="14.2073%" height="15" fill="rgb(225,20,46)"/><text x="7.3215%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (9,169,185 samples, 0.11%)</title><rect x="21.5750%" y="133" width="0.1062%" height="15" fill="rgb(210,31,41)"/><text x="21.8250%" y="143.50"></text></g><g><title>check_mod_attrs (20,829,686 samples, 0.24%)</title><rect x="21.4400%" y="149" width="0.2412%" height="15" fill="rgb(221,200,47)"/><text x="21.6900%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (12,290,370 samples, 0.14%)</title><rect x="21.8146%" y="149" width="0.1423%" height="15" fill="rgb(226,26,5)"/><text x="22.0646%" y="159.50"></text></g><g><title>misc_checking_1 (46,515,360 samples, 0.54%)</title><rect x="21.4382%" y="165" width="0.5385%" height="15" fill="rgb(249,33,26)"/><text x="21.6882%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (25,308,561 samples, 0.29%)</title><rect x="21.9767%" y="149" width="0.2930%" height="15" fill="rgb(235,183,28)"/><text x="22.2267%" y="159.50"></text></g><g><title>check_mod_liveness (20,312,246 samples, 0.24%)</title><rect x="22.0346%" y="133" width="0.2352%" height="15" fill="rgb(221,5,38)"/><text x="22.2846%" y="143.50"></text></g><g><title>misc_checking_2 (69,558,217 samples, 0.81%)</title><rect x="21.9767%" y="165" width="0.8053%" height="15" fill="rgb(247,18,42)"/><text x="22.2267%" y="175.50"></text></g><g><title>match_checking (44,245,866 samples, 0.51%)</title><rect x="22.2698%" y="149" width="0.5123%" height="15" fill="rgb(241,131,45)"/><text x="22.5198%" y="159.50"></text></g><g><title>check_match (41,493,758 samples, 0.48%)</title><rect x="22.3016%" y="133" width="0.4804%" height="15" fill="rgb(249,31,29)"/><text x="22.5516%" y="143.50"></text></g><g><title>check_private_in_public (15,632,747 samples, 0.18%)</title><rect x="22.7824%" y="149" width="0.1810%" height="15" fill="rgb(225,111,53)"/><text x="23.0324%" y="159.50"></text></g><g><title>death_checking (21,692,024 samples, 0.25%)</title><rect x="22.9634%" y="149" width="0.2511%" height="15" fill="rgb(238,160,17)"/><text x="23.2134%" y="159.50"></text></g><g><title>crate_lints (31,635,389 samples, 0.37%)</title><rect x="23.2145%" y="133" width="0.3663%" height="15" fill="rgb(214,148,48)"/><text x="23.4645%" y="143.50"></text></g><g><title>lint_checking (62,486,541 samples, 0.72%)</title><rect x="23.2145%" y="149" width="0.7235%" height="15" fill="rgb(232,36,49)"/><text x="23.4645%" y="159.50"></text></g><g><title>module_lints (30,846,972 samples, 0.36%)</title><rect x="23.5808%" y="133" width="0.3571%" height="15" fill="rgb(209,103,24)"/><text x="23.8308%" y="143.50"></text></g><g><title>lint_mod (30,784,322 samples, 0.36%)</title><rect x="23.5815%" y="117" width="0.3564%" height="15" fill="rgb(229,88,8)"/><text x="23.8315%" y="127.50"></text></g><g><title>privacy_access_levels (17,932,023 samples, 0.21%)</title><rect x="23.9380%" y="149" width="0.2076%" height="15" fill="rgb(213,181,19)"/><text x="24.1880%" y="159.50"></text></g><g><title>privacy_checking_modules (52,538,555 samples, 0.61%)</title><rect x="24.1456%" y="149" width="0.6083%" height="15" fill="rgb(254,191,54)"/><text x="24.3956%" y="159.50"></text></g><g><title>check_mod_privacy (52,475,915 samples, 0.61%)</title><rect x="24.1463%" y="133" width="0.6076%" height="15" fill="rgb(241,83,37)"/><text x="24.3963%" y="143.50"></text></g><g><title>misc_checking_3 (170,664,295 samples, 1.98%)</title><rect x="22.7820%" y="165" width="1.9759%" height="15" fill="rgb(233,36,39)"/><text x="23.0320%" y="175.50">m..</text></g><g><title>coherent_trait (10,542,004 samples, 0.12%)</title><rect x="24.8133%" y="133" width="0.1221%" height="15" fill="rgb(226,3,54)"/><text x="25.0633%" y="143.50"></text></g><g><title>specialization_graph_of (10,134,381 samples, 0.12%)</title><rect x="24.8181%" y="117" width="0.1173%" height="15" fill="rgb(245,192,40)"/><text x="25.0681%" y="127.50"></text></g><g><title>coherence_checking (12,104,220 samples, 0.14%)</title><rect x="24.8128%" y="149" width="0.1401%" height="15" fill="rgb(238,167,29)"/><text x="25.0628%" y="159.50"></text></g><g><title>dropck_outlives (12,150,715 samples, 0.14%)</title><rect x="34.5183%" y="101" width="0.1407%" height="15" fill="rgb(232,182,51)"/><text x="34.7683%" y="111.50"></text></g><g><title>evaluate_obligation (21,583,619 samples, 0.25%)</title><rect x="34.6590%" y="101" width="0.2499%" height="15" fill="rgb(231,60,39)"/><text x="34.9090%" y="111.50"></text></g><g><title>evaluate_obligation (9,969,462 samples, 0.12%)</title><rect x="39.4773%" y="85" width="0.1154%" height="15" fill="rgb(208,69,12)"/><text x="39.7273%" y="95.50"></text></g><g><title>typeck (404,698,205 samples, 4.69%)</title><rect x="35.0037%" y="101" width="4.6855%" height="15" fill="rgb(235,93,37)"/><text x="35.2537%" y="111.50">typeck</text></g><g><title>item_bodies_checking (1,271,853,866 samples, 14.73%)</title><rect x="24.9762%" y="149" width="14.7254%" height="15" fill="rgb(213,116,39)"/><text x="25.2262%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,271,850,016 samples, 14.73%)</title><rect x="24.9763%" y="133" width="14.7253%" height="15" fill="rgb(222,207,29)"/><text x="25.2263%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,264,776,960 samples, 14.64%)</title><rect x="25.0582%" y="117" width="14.6434%" height="15" fill="rgb(206,96,30)"/><text x="25.3082%" y="127.50">typeck</text></g><g><title>item_types_checking (76,256,920 samples, 0.88%)</title><rect x="39.7016%" y="149" width="0.8829%" height="15" fill="rgb(218,138,4)"/><text x="39.9516%" y="159.50"></text></g><g><title>check_mod_item_types (76,203,488 samples, 0.88%)</title><rect x="39.7022%" y="133" width="0.8823%" height="15" fill="rgb(250,191,14)"/><text x="39.9522%" y="143.50"></text></g><g><title>typeck (9,554,512 samples, 0.11%)</title><rect x="40.4739%" y="117" width="0.1106%" height="15" fill="rgb(239,60,40)"/><text x="40.7239%" y="127.50"></text></g><g><title>eval_to_const_value_raw (14,119,212 samples, 0.16%)</title><rect x="40.7499%" y="117" width="0.1635%" height="15" fill="rgb(206,27,48)"/><text x="40.9999%" y="127.50"></text></g><g><title>eval_to_const_value_raw (14,036,352 samples, 0.16%)</title><rect x="40.7508%" y="101" width="0.1625%" height="15" fill="rgb(225,35,8)"/><text x="41.0008%" y="111.50"></text></g><g><title>eval_to_allocation_raw (13,877,020 samples, 0.16%)</title><rect x="40.7527%" y="85" width="0.1607%" height="15" fill="rgb(250,213,24)"/><text x="41.0027%" y="95.50"></text></g><g><title>fn_sig (12,621,970 samples, 0.15%)</title><rect x="40.9133%" y="117" width="0.1461%" height="15" fill="rgb(247,123,22)"/><text x="41.1633%" y="127.50"></text></g><g><title>named_region_map (23,345,286 samples, 0.27%)</title><rect x="41.2149%" y="101" width="0.2703%" height="15" fill="rgb(231,138,38)"/><text x="41.4649%" y="111.50"></text></g><g><title>resolve_lifetimes (22,194,642 samples, 0.26%)</title><rect x="41.2282%" y="85" width="0.2570%" height="15" fill="rgb(231,145,46)"/><text x="41.4782%" y="95.50"></text></g><g><title>lint_levels (10,958,048 samples, 0.13%)</title><rect x="41.3583%" y="69" width="0.1269%" height="15" fill="rgb(251,118,11)"/><text x="41.6083%" y="79.50"></text></g><g><title>generics_of (37,298,060 samples, 0.43%)</title><rect x="41.0595%" y="117" width="0.4318%" height="15" fill="rgb(217,147,25)"/><text x="41.3095%" y="127.50"></text></g><g><title>predicates_of (21,063,494 samples, 0.24%)</title><rect x="41.5171%" y="117" width="0.2439%" height="15" fill="rgb(247,81,37)"/><text x="41.7671%" y="127.50"></text></g><g><title>predicates_defined_on (18,008,046 samples, 0.21%)</title><rect x="41.5524%" y="101" width="0.2085%" height="15" fill="rgb(209,12,38)"/><text x="41.8024%" y="111.50"></text></g><g><title>type_collecting (105,575,225 samples, 1.22%)</title><rect x="40.5846%" y="149" width="1.2223%" height="15" fill="rgb(227,1,9)"/><text x="40.8346%" y="159.50"></text></g><g><title>collect_mod_item_types (105,501,053 samples, 1.22%)</title><rect x="40.5855%" y="133" width="1.2215%" height="15" fill="rgb(248,47,43)"/><text x="40.8355%" y="143.50"></text></g><g><title>evaluate_obligation (18,987,795 samples, 0.22%)</title><rect x="42.9104%" y="117" width="0.2198%" height="15" fill="rgb(221,10,30)"/><text x="43.1604%" y="127.50"></text></g><g><title>implied_outlives_bounds (10,500,041 samples, 0.12%)</title><rect x="43.1328%" y="117" width="0.1216%" height="15" fill="rgb(210,229,1)"/><text x="43.3828%" y="127.50"></text></g><g><title>param_env (11,763,015 samples, 0.14%)</title><rect x="43.2548%" y="117" width="0.1362%" height="15" fill="rgb(222,148,37)"/><text x="43.5048%" y="127.50"></text></g><g><title>region_scope_tree (22,359,865 samples, 0.26%)</title><rect x="43.3951%" y="117" width="0.2589%" height="15" fill="rgb(234,67,33)"/><text x="43.6451%" y="127.50"></text></g><g><title>check_impl_item_well_formed (149,456,512 samples, 1.73%)</title><rect x="41.9250%" y="133" width="1.7304%" height="15" fill="rgb(247,98,35)"/><text x="42.1750%" y="143.50"></text></g><g><title>evaluate_obligation (15,459,865 samples, 0.18%)</title><rect x="44.2465%" y="117" width="0.1790%" height="15" fill="rgb(247,138,52)"/><text x="44.4965%" y="127.50"></text></g><g><title>param_env (11,157,995 samples, 0.13%)</title><rect x="44.4602%" y="117" width="0.1292%" height="15" fill="rgb(213,79,30)"/><text x="44.7102%" y="127.50"></text></g><g><title>check_item_well_formed (87,058,519 samples, 1.01%)</title><rect x="43.6553%" y="133" width="1.0080%" height="15" fill="rgb(246,177,23)"/><text x="43.9053%" y="143.50"></text></g><g><title>analysis (3,268,670,906 samples, 37.84%)</title><rect x="6.8313%" y="181" width="37.8443%" height="15" fill="rgb(230,62,27)"/><text x="7.0813%" y="191.50">analysis</text></g><g><title>type_check_crate (1,720,314,808 samples, 19.92%)</title><rect x="24.7580%" y="165" width="19.9176%" height="15" fill="rgb(216,154,8)"/><text x="25.0080%" y="175.50">type_check_crate</text></g><g><title>wf_checking (247,114,997 samples, 2.86%)</title><rect x="41.8145%" y="149" width="2.8611%" height="15" fill="rgb(244,35,45)"/><text x="42.0645%" y="159.50">wf..</text></g><g><title>compute_debuginfo_type_name (9,249,962 samples, 0.11%)</title><rect x="49.2050%" y="149" width="0.1071%" height="15" fill="rgb(251,115,12)"/><text x="49.4550%" y="159.50"></text></g><g><title>fn_abi_of_instance (28,013,771 samples, 0.32%)</title><rect x="49.3200%" y="149" width="0.3243%" height="15" fill="rgb(240,54,50)"/><text x="49.5700%" y="159.50"></text></g><g><title>codegen_module (432,917,184 samples, 5.01%)</title><rect x="44.7296%" y="165" width="5.0123%" height="15" fill="rgb(233,84,52)"/><text x="44.9796%" y="175.50">codege..</text></g><g><title>codegen_crate (437,666,016 samples, 5.07%)</title><rect x="44.6757%" y="181" width="5.0672%" height="15" fill="rgb(207,117,47)"/><text x="44.9257%" y="191.50">codege..</text></g><g><title>LLVM_module_codegen (1,455,864,505 samples, 16.86%)</title><rect x="49.7460%" y="165" width="16.8558%" height="15" fill="rgb(249,43,39)"/><text x="49.9960%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,376,372,809 samples, 15.94%)</title><rect x="50.6664%" y="149" width="15.9355%" height="15" fill="rgb(209,38,44)"/><text x="50.9164%" y="159.50">LLVM_module_codegen_emit_..</text></g><g><title>codegen_module_optimize (1,553,178,588 samples, 17.98%)</title><rect x="49.7429%" y="181" width="17.9825%" height="15" fill="rgb(236,212,23)"/><text x="49.9929%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (97,046,921 samples, 1.12%)</title><rect x="66.6019%" y="165" width="1.1236%" height="15" fill="rgb(242,79,21)"/><text x="66.8519%" y="175.50"></text></g><g><title>AST_validation (9,442,381 samples, 0.11%)</title><rect x="67.7282%" y="165" width="0.1093%" height="15" fill="rgb(211,96,35)"/><text x="67.9782%" y="175.50"></text></g><g><title>metadata_register_crate (17,613,909 samples, 0.20%)</title><rect x="85.9679%" y="133" width="0.2039%" height="15" fill="rgb(253,215,40)"/><text x="86.2179%" y="143.50"></text></g><g><title>metadata_register_crate (12,711,067 samples, 0.15%)</title><rect x="86.0247%" y="117" width="0.1472%" height="15" fill="rgb(211,81,21)"/><text x="86.2747%" y="127.50"></text></g><g><title>macro_expand_crate (1,576,905,597 samples, 18.26%)</title><rect x="67.9197%" y="165" width="18.2572%" height="15" fill="rgb(208,190,38)"/><text x="68.1697%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (1,576,865,336 samples, 18.26%)</title><rect x="67.9201%" y="149" width="18.2568%" height="15" fill="rgb(235,213,38)"/><text x="68.1701%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (82,912,751 samples, 0.96%)</title><rect x="86.2319%" y="149" width="0.9600%" height="15" fill="rgb(237,122,38)"/><text x="86.4819%" y="159.50"></text></g><g><title>configure_and_expand (1,692,882,454 samples, 19.60%)</title><rect x="67.7255%" y="181" width="19.6000%" height="15" fill="rgb(244,218,35)"/><text x="67.9755%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (99,037,706 samples, 1.15%)</title><rect x="86.1788%" y="165" width="1.1466%" height="15" fill="rgb(240,68,47)"/><text x="86.4288%" y="175.50"></text></g><g><title>drop_ast (14,175,243 samples, 0.16%)</title><rect x="87.3254%" y="181" width="0.1641%" height="15" fill="rgb(210,16,53)"/><text x="87.5754%" y="191.50"></text></g><g><title>early_lint_checks (23,686,504 samples, 0.27%)</title><rect x="87.4900%" y="181" width="0.2742%" height="15" fill="rgb(235,124,12)"/><text x="87.7400%" y="191.50"></text></g><g><title>free_global_ctxt (46,822,133 samples, 0.54%)</title><rect x="87.7642%" y="181" width="0.5421%" height="15" fill="rgb(224,169,11)"/><text x="88.0142%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (43,270,798 samples, 0.50%)</title><rect x="90.4471%" y="85" width="0.5010%" height="15" fill="rgb(250,166,2)"/><text x="90.6971%" y="95.50"></text></g><g><title>optimized_mir (89,878,560 samples, 1.04%)</title><rect x="89.9148%" y="101" width="1.0406%" height="15" fill="rgb(242,216,29)"/><text x="90.1648%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (10,068,748 samples, 0.12%)</title><rect x="91.0253%" y="85" width="0.1166%" height="15" fill="rgb(230,116,27)"/><text x="91.2753%" y="95.50"></text></g><g><title>resolve_instance (18,824,879 samples, 0.22%)</title><rect x="90.9554%" y="101" width="0.2180%" height="15" fill="rgb(228,99,48)"/><text x="91.2054%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (158,006,519 samples, 1.83%)</title><rect x="89.5716%" y="117" width="1.8294%" height="15" fill="rgb(253,11,6)"/><text x="89.8216%" y="127.50">m..</text></g><g><title>vtable_entries (11,873,757 samples, 0.14%)</title><rect x="91.2635%" y="101" width="0.1375%" height="15" fill="rgb(247,143,39)"/><text x="91.5135%" y="111.50"></text></g><g><title>resolve_instance (9,543,680 samples, 0.11%)</title><rect x="91.2905%" y="85" width="0.1105%" height="15" fill="rgb(236,97,10)"/><text x="91.5405%" y="95.50"></text></g><g><title>monomorphization_collector (160,913,370 samples, 1.86%)</title><rect x="89.5715%" y="133" width="1.8630%" height="15" fill="rgb(233,208,19)"/><text x="89.8215%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (18,408,478 samples, 0.21%)</title><rect x="91.4355%" y="117" width="0.2131%" height="15" fill="rgb(216,164,2)"/><text x="91.6855%" y="127.50"></text></g><g><title>symbol_name (15,946,417 samples, 0.18%)</title><rect x="91.4640%" y="101" width="0.1846%" height="15" fill="rgb(220,129,5)"/><text x="91.7140%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (187,723,608 samples, 2.17%)</title><rect x="89.5697%" y="149" width="2.1734%" height="15" fill="rgb(242,17,10)"/><text x="89.8197%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (26,655,386 samples, 0.31%)</title><rect x="91.4345%" y="133" width="0.3086%" height="15" fill="rgb(242,107,0)"/><text x="91.6845%" y="143.50"></text></g><g><title>exported_symbols (198,319,072 samples, 2.30%)</title><rect x="89.5557%" y="165" width="2.2961%" height="15" fill="rgb(251,28,31)"/><text x="89.8057%" y="175.50">e..</text></g><g><title>reachable_non_generics (9,388,791 samples, 0.11%)</title><rect x="91.7431%" y="149" width="0.1087%" height="15" fill="rgb(233,223,10)"/><text x="91.9931%" y="159.50"></text></g><g><title>layout_of (18,075,893 samples, 0.21%)</title><rect x="93.5626%" y="149" width="0.2093%" height="15" fill="rgb(215,21,27)"/><text x="93.8126%" y="159.50"></text></g><g><title>is_copy_raw (16,630,875 samples, 0.19%)</title><rect x="95.9777%" y="117" width="0.1926%" height="15" fill="rgb(232,23,21)"/><text x="96.2277%" y="127.50"></text></g><g><title>evaluate_obligation (13,530,028 samples, 0.16%)</title><rect x="96.0136%" y="101" width="0.1566%" height="15" fill="rgb(244,5,23)"/><text x="96.2636%" y="111.50"></text></g><g><title>needs_drop_raw (18,794,552 samples, 0.22%)</title><rect x="95.9534%" y="133" width="0.2176%" height="15" fill="rgb(226,81,46)"/><text x="96.2034%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (210,684,697 samples, 2.44%)</title><rect x="93.7719%" y="149" width="2.4393%" height="15" fill="rgb(247,70,30)"/><text x="94.0219%" y="159.50">mi..</text></g><g><title>optimized_mir (379,853,310 samples, 4.40%)</title><rect x="91.8798%" y="165" width="4.3979%" height="15" fill="rgb(212,68,19)"/><text x="92.1298%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (694,746,700 samples, 8.04%)</title><rect x="88.3063%" y="181" width="8.0437%" height="15" fill="rgb(240,187,13)"/><text x="88.5563%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (155,464,642 samples, 1.80%)</title><rect x="96.3500%" y="181" width="1.8000%" height="15" fill="rgb(223,113,26)"/><text x="96.6000%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (118,527,384 samples, 1.37%)</title><rect x="98.1501%" y="165" width="1.3723%" height="15" fill="rgb(206,192,2)"/><text x="98.4001%" y="175.50"></text></g><g><title>link_crate (22,807,224 samples, 0.26%)</title><rect x="99.5224%" y="165" width="0.2641%" height="15" fill="rgb(241,108,4)"/><text x="99.7724%" y="175.50"></text></g><g><title>link_binary (22,320,069 samples, 0.26%)</title><rect x="99.5281%" y="149" width="0.2584%" height="15" fill="rgb(247,173,49)"/><text x="99.7781%" y="159.50"></text></g><g><title>link_rlib (19,892,623 samples, 0.23%)</title><rect x="99.5562%" y="133" width="0.2303%" height="15" fill="rgb(224,114,35)"/><text x="99.8062%" y="143.50"></text></g><g><title>link (141,364,669 samples, 1.64%)</title><rect x="98.1499%" y="181" width="1.6367%" height="15" fill="rgb(245,159,27)"/><text x="98.3999%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (10,959,319 samples, 0.13%)</title><rect x="99.8060%" y="181" width="0.1269%" height="15" fill="rgb(245,172,44)"/><text x="100.0560%" y="191.50"></text></g><g><title>all (8,637,159,798 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (8,637,159,798 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>