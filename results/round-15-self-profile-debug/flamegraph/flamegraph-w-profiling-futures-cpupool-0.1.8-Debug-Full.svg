<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (159,558,230 samples, 16.57%)</title><rect x="0.0421%" y="165" width="16.5729%" height="15" fill="rgb(227,0,7)"/><text x="0.2921%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,525,813 samples, 0.16%)</title><rect x="17.6228%" y="53" width="0.1585%" height="15" fill="rgb(217,0,24)"/><text x="17.8728%" y="63.50"></text></g><g><title>specialization_graph_of (1,000,030 samples, 0.10%)</title><rect x="17.8170%" y="37" width="0.1039%" height="15" fill="rgb(221,193,54)"/><text x="18.0670%" y="47.50"></text></g><g><title>resolve_instance (1,425,896 samples, 0.15%)</title><rect x="17.7813%" y="53" width="0.1481%" height="15" fill="rgb(248,212,6)"/><text x="18.0313%" y="63.50"></text></g><g><title>mir_const (6,123,540 samples, 0.64%)</title><rect x="17.3512%" y="101" width="0.6360%" height="15" fill="rgb(208,68,35)"/><text x="17.6012%" y="111.50"></text></g><g><title>unsafety_check_result (5,463,735 samples, 0.57%)</title><rect x="17.4197%" y="85" width="0.5675%" height="15" fill="rgb(232,128,0)"/><text x="17.6697%" y="95.50"></text></g><g><title>mir_built (4,919,747 samples, 0.51%)</title><rect x="17.4762%" y="69" width="0.5110%" height="15" fill="rgb(207,160,47)"/><text x="17.7262%" y="79.50"></text></g><g><title>mir_promoted (6,550,035 samples, 0.68%)</title><rect x="17.3089%" y="117" width="0.6803%" height="15" fill="rgb(228,23,34)"/><text x="17.5589%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,343,154 samples, 0.24%)</title><rect x="18.0670%" y="117" width="0.2434%" height="15" fill="rgb(218,30,26)"/><text x="18.3170%" y="127.50"></text></g><g><title>MIR_borrow_checking (16,168,614 samples, 1.68%)</title><rect x="16.6314%" y="149" width="1.6794%" height="15" fill="rgb(220,122,19)"/><text x="16.8814%" y="159.50"></text></g><g><title>mir_borrowck (16,120,543 samples, 1.67%)</title><rect x="16.6364%" y="133" width="1.6744%" height="15" fill="rgb(250,228,42)"/><text x="16.8864%" y="143.50"></text></g><g><title>crate_lints (2,016,791 samples, 0.21%)</title><rect x="18.5086%" y="117" width="0.2095%" height="15" fill="rgb(240,193,28)"/><text x="18.7586%" y="127.50"></text></g><g><title>type_of (1,124,942 samples, 0.12%)</title><rect x="18.6012%" y="101" width="0.1168%" height="15" fill="rgb(216,20,37)"/><text x="18.8512%" y="111.50"></text></g><g><title>lint_checking (2,462,535 samples, 0.26%)</title><rect x="18.5085%" y="133" width="0.2558%" height="15" fill="rgb(206,188,39)"/><text x="18.7585%" y="143.50"></text></g><g><title>misc_checking_3 (3,638,216 samples, 0.38%)</title><rect x="18.4730%" y="149" width="0.3779%" height="15" fill="rgb(217,207,13)"/><text x="18.7230%" y="159.50"></text></g><g><title>impl_parent (1,544,926 samples, 0.16%)</title><rect x="19.1087%" y="85" width="0.1605%" height="15" fill="rgb(231,73,38)"/><text x="19.3587%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (981,350 samples, 0.10%)</title><rect x="19.1672%" y="69" width="0.1019%" height="15" fill="rgb(225,20,46)"/><text x="19.4172%" y="79.50"></text></g><g><title>impl_trait_ref (4,455,872 samples, 0.46%)</title><rect x="19.2692%" y="85" width="0.4628%" height="15" fill="rgb(210,31,41)"/><text x="19.5192%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,883,437 samples, 0.40%)</title><rect x="19.3286%" y="69" width="0.4034%" height="15" fill="rgb(221,200,47)"/><text x="19.5786%" y="79.50"></text></g><g><title>coherent_trait (8,920,749 samples, 0.93%)</title><rect x="18.8577%" y="117" width="0.9266%" height="15" fill="rgb(226,26,5)"/><text x="19.1077%" y="127.50"></text></g><g><title>specialization_graph_of (8,909,139 samples, 0.93%)</title><rect x="18.8589%" y="101" width="0.9254%" height="15" fill="rgb(249,33,26)"/><text x="19.1089%" y="111.50"></text></g><g><title>coherence_checking (8,970,690 samples, 0.93%)</title><rect x="18.8554%" y="133" width="0.9318%" height="15" fill="rgb(235,183,28)"/><text x="19.1054%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,428,855 samples, 0.15%)</title><rect x="20.7688%" y="69" width="0.1484%" height="15" fill="rgb(221,5,38)"/><text x="21.0188%" y="79.50"></text></g><g><title>dropck_outlives (2,081,723 samples, 0.22%)</title><rect x="20.7091%" y="85" width="0.2162%" height="15" fill="rgb(247,18,42)"/><text x="20.9591%" y="95.50"></text></g><g><title>evaluate_obligation (1,572,115 samples, 0.16%)</title><rect x="20.9254%" y="85" width="0.1633%" height="15" fill="rgb(241,131,45)"/><text x="21.1754%" y="95.50"></text></g><g><title>typeck (5,078,801 samples, 0.53%)</title><rect x="21.2695%" y="85" width="0.5275%" height="15" fill="rgb(249,31,29)"/><text x="21.5195%" y="95.50"></text></g><g><title>item_bodies_checking (19,366,326 samples, 2.01%)</title><rect x="19.7893%" y="133" width="2.0115%" height="15" fill="rgb(225,111,53)"/><text x="20.0393%" y="143.50">i..</text></g><g><title>typeck_item_bodies (19,363,525 samples, 2.01%)</title><rect x="19.7896%" y="117" width="2.0112%" height="15" fill="rgb(238,160,17)"/><text x="20.0396%" y="127.50">t..</text></g><g><title>typeck (19,322,294 samples, 2.01%)</title><rect x="19.7938%" y="101" width="2.0070%" height="15" fill="rgb(214,148,48)"/><text x="20.0438%" y="111.50">t..</text></g><g><title>predicates_of (1,186,371 samples, 0.12%)</title><rect x="21.9445%" y="101" width="0.1232%" height="15" fill="rgb(232,36,49)"/><text x="22.1945%" y="111.50"></text></g><g><title>predicates_defined_on (1,160,831 samples, 0.12%)</title><rect x="21.9471%" y="85" width="0.1206%" height="15" fill="rgb(209,103,24)"/><text x="22.1971%" y="95.50"></text></g><g><title>type_collecting (2,019,271 samples, 0.21%)</title><rect x="21.8710%" y="133" width="0.2097%" height="15" fill="rgb(229,88,8)"/><text x="22.1210%" y="143.50"></text></g><g><title>collect_mod_item_types (2,013,651 samples, 0.21%)</title><rect x="21.8716%" y="117" width="0.2092%" height="15" fill="rgb(213,181,19)"/><text x="22.1216%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,209,236 samples, 0.23%)</title><rect x="22.0910%" y="117" width="0.2295%" height="15" fill="rgb(254,191,54)"/><text x="22.3410%" y="127.50"></text></g><g><title>evaluate_obligation (1,164,582 samples, 0.12%)</title><rect x="22.4020%" y="101" width="0.1210%" height="15" fill="rgb(241,83,37)"/><text x="22.6520%" y="111.50"></text></g><g><title>analysis (57,745,543 samples, 6.00%)</title><rect x="16.6150%" y="165" width="5.9979%" height="15" fill="rgb(233,36,39)"/><text x="16.8650%" y="175.50">analysis</text></g><g><title>type_check_crate (36,219,806 samples, 3.76%)</title><rect x="18.8509%" y="149" width="3.7621%" height="15" fill="rgb(226,3,54)"/><text x="19.1009%" y="159.50">type..</text></g><g><title>wf_checking (5,121,293 samples, 0.53%)</title><rect x="22.0810%" y="133" width="0.5319%" height="15" fill="rgb(245,192,40)"/><text x="22.3310%" y="143.50"></text></g><g><title>check_item_well_formed (2,815,606 samples, 0.29%)</title><rect x="22.3205%" y="117" width="0.2925%" height="15" fill="rgb(238,167,29)"/><text x="22.5705%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (4,691,816 samples, 0.49%)</title><rect x="35.4708%" y="133" width="0.4873%" height="15" fill="rgb(232,182,51)"/><text x="35.7208%" y="143.50"></text></g><g><title>const_caller_location (1,905,229 samples, 0.20%)</title><rect x="35.9582%" y="133" width="0.1979%" height="15" fill="rgb(231,60,39)"/><text x="36.2082%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,241,404 samples, 0.13%)</title><rect x="36.7321%" y="117" width="0.1289%" height="15" fill="rgb(208,69,12)"/><text x="36.9821%" y="127.50"></text></g><g><title>layout_of (1,095,624 samples, 0.11%)</title><rect x="37.0584%" y="101" width="0.1138%" height="15" fill="rgb(235,93,37)"/><text x="37.3084%" y="111.50"></text></g><g><title>layout_of (3,091,976 samples, 0.32%)</title><rect x="36.8762%" y="117" width="0.3212%" height="15" fill="rgb(213,116,39)"/><text x="37.1262%" y="127.50"></text></g><g><title>predicates_of (2,047,099 samples, 0.21%)</title><rect x="37.5742%" y="101" width="0.2126%" height="15" fill="rgb(222,207,29)"/><text x="37.8242%" y="111.50"></text></g><g><title>predicates_defined_on (1,461,090 samples, 0.15%)</title><rect x="37.6350%" y="85" width="0.1518%" height="15" fill="rgb(206,96,30)"/><text x="37.8850%" y="95.50"></text></g><g><title>param_env (5,703,178 samples, 0.59%)</title><rect x="37.1974%" y="117" width="0.5924%" height="15" fill="rgb(218,138,4)"/><text x="37.4474%" y="127.50"></text></g><g><title>fn_abi_of_instance (16,435,033 samples, 1.71%)</title><rect x="36.1601%" y="133" width="1.7071%" height="15" fill="rgb(250,191,14)"/><text x="36.4101%" y="143.50"></text></g><g><title>layout_of (3,202,424 samples, 0.33%)</title><rect x="37.9445%" y="133" width="0.3326%" height="15" fill="rgb(239,60,40)"/><text x="38.1945%" y="143.50"></text></g><g><title>symbol_name (1,147,900 samples, 0.12%)</title><rect x="38.2792%" y="133" width="0.1192%" height="15" fill="rgb(206,27,48)"/><text x="38.5292%" y="143.50"></text></g><g><title>codegen_module (149,153,965 samples, 15.49%)</title><rect x="22.9153%" y="149" width="15.4923%" height="15" fill="rgb(225,35,8)"/><text x="23.1653%" y="159.50">codegen_module</text></g><g><title>codegen_crate (152,139,846 samples, 15.80%)</title><rect x="22.6138%" y="165" width="15.8024%" height="15" fill="rgb(250,213,24)"/><text x="22.8638%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (492,186,458 samples, 51.12%)</title><rect x="38.4332%" y="149" width="51.1222%" height="15" fill="rgb(247,123,22)"/><text x="38.6832%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (472,130,272 samples, 49.04%)</title><rect x="40.5164%" y="133" width="49.0390%" height="15" fill="rgb(231,138,38)"/><text x="40.7664%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (513,493,635 samples, 53.34%)</title><rect x="38.4162%" y="165" width="53.3354%" height="15" fill="rgb(231,145,46)"/><text x="38.6662%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (21,143,626 samples, 2.20%)</title><rect x="89.5554%" y="149" width="2.1961%" height="15" fill="rgb(251,118,11)"/><text x="89.8054%" y="159.50">L..</text></g><g><title>macro_expand_crate (7,083,232 samples, 0.74%)</title><rect x="91.7765%" y="149" width="0.7357%" height="15" fill="rgb(217,147,25)"/><text x="92.0265%" y="159.50"></text></g><g><title>expand_crate (7,075,892 samples, 0.73%)</title><rect x="91.7773%" y="133" width="0.7350%" height="15" fill="rgb(247,81,37)"/><text x="92.0273%" y="143.50"></text></g><g><title>metadata_register_crate (1,377,605 samples, 0.14%)</title><rect x="92.3691%" y="117" width="0.1431%" height="15" fill="rgb(209,12,38)"/><text x="92.6191%" y="127.50"></text></g><g><title>late_resolve_crate (1,340,574 samples, 0.14%)</title><rect x="92.5299%" y="133" width="0.1392%" height="15" fill="rgb(227,1,9)"/><text x="92.7799%" y="143.50"></text></g><g><title>configure_and_expand (8,887,240 samples, 0.92%)</title><rect x="91.7516%" y="165" width="0.9231%" height="15" fill="rgb(248,47,43)"/><text x="92.0016%" y="175.50"></text></g><g><title>resolve_crate (1,457,904 samples, 0.15%)</title><rect x="92.5232%" y="149" width="0.1514%" height="15" fill="rgb(221,10,30)"/><text x="92.7732%" y="159.50"></text></g><g><title>free_global_ctxt (5,615,486 samples, 0.58%)</title><rect x="92.7012%" y="165" width="0.5833%" height="15" fill="rgb(210,229,1)"/><text x="92.9512%" y="175.50"></text></g><g><title>item_attrs (1,266,767 samples, 0.13%)</title><rect x="93.9223%" y="69" width="0.1316%" height="15" fill="rgb(222,148,37)"/><text x="94.1723%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,203,266 samples, 0.12%)</title><rect x="93.9289%" y="53" width="0.1250%" height="15" fill="rgb(234,67,33)"/><text x="94.1789%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,083,604 samples, 0.22%)</title><rect x="93.8843%" y="85" width="0.2164%" height="15" fill="rgb(247,98,35)"/><text x="94.1343%" y="95.50"></text></g><g><title>needs_drop_raw (1,475,253 samples, 0.15%)</title><rect x="94.3468%" y="69" width="0.1532%" height="15" fill="rgb(247,138,52)"/><text x="94.5968%" y="79.50"></text></g><g><title>is_copy_raw (1,018,520 samples, 0.11%)</title><rect x="94.3943%" y="53" width="0.1058%" height="15" fill="rgb(213,79,30)"/><text x="94.6443%" y="63.50"></text></g><g><title>mir_shims (3,398,288 samples, 0.35%)</title><rect x="94.1496%" y="85" width="0.3530%" height="15" fill="rgb(246,177,23)"/><text x="94.3996%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,343,380 samples, 0.45%)</title><rect x="94.6677%" y="69" width="0.4511%" height="15" fill="rgb(230,62,27)"/><text x="94.9177%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,356,513 samples, 0.14%)</title><rect x="95.1189%" y="69" width="0.1409%" height="15" fill="rgb(216,154,8)"/><text x="95.3689%" y="79.50"></text></g><g><title>optimized_mir (7,433,573 samples, 0.77%)</title><rect x="94.5028%" y="85" width="0.7721%" height="15" fill="rgb(244,35,45)"/><text x="94.7528%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,215,996 samples, 0.33%)</title><rect x="95.4461%" y="69" width="0.3340%" height="15" fill="rgb(251,115,12)"/><text x="95.6961%" y="79.50"></text></g><g><title>specialization_graph_of (4,226,916 samples, 0.44%)</title><rect x="95.9381%" y="69" width="0.4390%" height="15" fill="rgb(240,54,50)"/><text x="96.1881%" y="79.50"></text></g><g><title>impl_trait_ref (1,812,529 samples, 0.19%)</title><rect x="96.1889%" y="53" width="0.1883%" height="15" fill="rgb(233,84,52)"/><text x="96.4389%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,247,543 samples, 0.13%)</title><rect x="96.2475%" y="37" width="0.1296%" height="15" fill="rgb(207,117,47)"/><text x="96.4975%" y="47.50"></text></g><g><title>resolve_instance (11,196,430 samples, 1.16%)</title><rect x="95.2749%" y="85" width="1.1629%" height="15" fill="rgb(249,43,39)"/><text x="95.5249%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,682,773 samples, 0.17%)</title><rect x="96.4638%" y="69" width="0.1748%" height="15" fill="rgb(209,38,44)"/><text x="96.7138%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,601,831 samples, 0.17%)</title><rect x="96.4722%" y="53" width="0.1664%" height="15" fill="rgb(236,212,23)"/><text x="96.7222%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,503,600 samples, 0.16%)</title><rect x="96.4824%" y="37" width="0.1562%" height="15" fill="rgb(242,79,21)"/><text x="96.7324%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,994,948 samples, 0.21%)</title><rect x="96.4378%" y="85" width="0.2072%" height="15" fill="rgb(211,96,35)"/><text x="96.6878%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (32,583,469 samples, 3.38%)</title><rect x="93.3985%" y="101" width="3.3844%" height="15" fill="rgb(253,215,40)"/><text x="93.6485%" y="111.50">mon..</text></g><g><title>monomorphization_collector (32,612,159 samples, 3.39%)</title><rect x="93.3982%" y="117" width="3.3873%" height="15" fill="rgb(211,81,21)"/><text x="93.6482%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,316,424 samples, 0.34%)</title><rect x="96.7867%" y="101" width="0.3445%" height="15" fill="rgb(208,190,38)"/><text x="97.0367%" y="111.50"></text></g><g><title>symbol_name (2,933,210 samples, 0.30%)</title><rect x="96.8265%" y="85" width="0.3047%" height="15" fill="rgb(235,213,38)"/><text x="97.0765%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (37,577,139 samples, 3.90%)</title><rect x="93.3937%" y="133" width="3.9030%" height="15" fill="rgb(237,122,38)"/><text x="93.6437%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (4,921,500 samples, 0.51%)</title><rect x="96.7855%" y="117" width="0.5112%" height="15" fill="rgb(244,218,35)"/><text x="97.0355%" y="127.50"></text></g><g><title>cgu_partitioning (1,594,196 samples, 0.17%)</title><rect x="97.1311%" y="101" width="0.1656%" height="15" fill="rgb(240,68,47)"/><text x="97.3811%" y="111.50"></text></g><g><title>exported_symbols (37,811,342 samples, 3.93%)</title><rect x="93.3750%" y="149" width="3.9274%" height="15" fill="rgb(210,16,53)"/><text x="93.6250%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,868,289 samples, 0.19%)</title><rect x="97.4689%" y="133" width="0.1941%" height="15" fill="rgb(235,124,12)"/><text x="97.7189%" y="143.50"></text></g><g><title>optimized_mir (3,403,923 samples, 0.35%)</title><rect x="97.3101%" y="149" width="0.3536%" height="15" fill="rgb(224,169,11)"/><text x="97.5601%" y="159.50"></text></g><g><title>generate_crate_metadata (42,183,515 samples, 4.38%)</title><rect x="93.2845%" y="165" width="4.3815%" height="15" fill="rgb(250,166,2)"/><text x="93.5345%" y="175.50">gener..</text></g><g><title>hir_lowering (1,265,022 samples, 0.13%)</title><rect x="97.6660%" y="165" width="0.1314%" height="15" fill="rgb(242,216,29)"/><text x="97.9160%" y="175.50"></text></g><g><title>finish_ongoing_codegen (14,261,764 samples, 1.48%)</title><rect x="97.7992%" y="149" width="1.4813%" height="15" fill="rgb(230,116,27)"/><text x="98.0492%" y="159.50"></text></g><g><title>link_crate (3,353,294 samples, 0.35%)</title><rect x="99.2806%" y="149" width="0.3483%" height="15" fill="rgb(228,99,48)"/><text x="99.5306%" y="159.50"></text></g><g><title>link_binary (3,310,083 samples, 0.34%)</title><rect x="99.2850%" y="133" width="0.3438%" height="15" fill="rgb(253,11,6)"/><text x="99.5350%" y="143.50"></text></g><g><title>link_rlib (2,524,136 samples, 0.26%)</title><rect x="99.3667%" y="117" width="0.2622%" height="15" fill="rgb(247,143,39)"/><text x="99.6167%" y="127.50"></text></g><g><title>link (17,641,349 samples, 1.83%)</title><rect x="97.7974%" y="165" width="1.8324%" height="15" fill="rgb(236,97,10)"/><text x="98.0474%" y="175.50">l..</text></g><g><title>parse_crate (1,475,655 samples, 0.15%)</title><rect x="99.6297%" y="165" width="0.1533%" height="15" fill="rgb(233,208,19)"/><text x="99.8797%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,444,965 samples, 0.15%)</title><rect x="99.8055%" y="165" width="0.1501%" height="15" fill="rgb(216,164,2)"/><text x="100.0555%" y="175.50"></text></g><g><title>all (962,764,019 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (962,764,019 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>