<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,273,692 samples, 1.74%)</title><rect x="0.6223%" y="309" width="1.7398%" height="15" fill="rgb(227,0,7)"/><text x="0.8723%" y="319.50"></text></g><g><title>implied_outlives_bounds (149,073 samples, 0.11%)</title><rect x="7.5869%" y="261" width="0.1141%" height="15" fill="rgb(217,0,24)"/><text x="7.8369%" y="271.50"></text></g><g><title>param_env (254,070 samples, 0.19%)</title><rect x="8.4495%" y="229" width="0.1944%" height="15" fill="rgb(221,193,54)"/><text x="8.6995%" y="239.50"></text></g><g><title>codegen_fn_attrs (186,653 samples, 0.14%)</title><rect x="8.8540%" y="213" width="0.1428%" height="15" fill="rgb(248,212,6)"/><text x="9.1040%" y="223.50"></text></g><g><title>adt_drop_tys (158,862 samples, 0.12%)</title><rect x="10.0946%" y="165" width="0.1216%" height="15" fill="rgb(208,68,35)"/><text x="10.3446%" y="175.50"></text></g><g><title>adt_drop_tys (336,283 samples, 0.26%)</title><rect x="10.0746%" y="181" width="0.2573%" height="15" fill="rgb(232,128,0)"/><text x="10.3246%" y="191.50"></text></g><g><title>is_copy_raw (593,656 samples, 0.45%)</title><rect x="10.3319%" y="181" width="0.4542%" height="15" fill="rgb(207,160,47)"/><text x="10.5819%" y="191.50"></text></g><g><title>evaluate_obligation (479,734 samples, 0.37%)</title><rect x="10.4190%" y="165" width="0.3671%" height="15" fill="rgb(228,23,34)"/><text x="10.6690%" y="175.50"></text></g><g><title>needs_drop_raw (1,024,110 samples, 0.78%)</title><rect x="10.0086%" y="197" width="0.7836%" height="15" fill="rgb(218,30,26)"/><text x="10.2586%" y="207.50"></text></g><g><title>specialization_graph_of (213,972 samples, 0.16%)</title><rect x="10.9982%" y="181" width="0.1637%" height="15" fill="rgb(220,122,19)"/><text x="11.2482%" y="191.50"></text></g><g><title>resolve_instance (570,638 samples, 0.44%)</title><rect x="10.7923%" y="197" width="0.4366%" height="15" fill="rgb(250,228,42)"/><text x="11.0423%" y="207.50"></text></g><g><title>thir_body (412,592 samples, 0.32%)</title><rect x="11.2424%" y="197" width="0.3157%" height="15" fill="rgb(240,193,28)"/><text x="11.4924%" y="207.50"></text></g><g><title>mir_const (4,637,808 samples, 3.55%)</title><rect x="8.0806%" y="245" width="3.5487%" height="15" fill="rgb(216,20,37)"/><text x="8.3306%" y="255.50">mir_..</text></g><g><title>unsafety_check_result (3,901,632 samples, 2.99%)</title><rect x="8.6439%" y="229" width="2.9854%" height="15" fill="rgb(206,188,39)"/><text x="8.8939%" y="239.50">uns..</text></g><g><title>mir_built (3,440,438 samples, 2.63%)</title><rect x="8.9968%" y="213" width="2.6325%" height="15" fill="rgb(217,207,13)"/><text x="9.2468%" y="223.50">mi..</text></g><g><title>mir_promoted (5,106,512 samples, 3.91%)</title><rect x="7.7621%" y="261" width="3.9073%" height="15" fill="rgb(231,73,38)"/><text x="8.0121%" y="271.50">mir_..</text></g><g><title>type_op_ascribe_user_type (443,575 samples, 0.34%)</title><rect x="11.6694%" y="261" width="0.3394%" height="15" fill="rgb(225,20,46)"/><text x="11.9194%" y="271.50"></text></g><g><title>type_op_normalize_fn_sig (380,313 samples, 0.29%)</title><rect x="12.0088%" y="261" width="0.2910%" height="15" fill="rgb(210,31,41)"/><text x="12.2588%" y="271.50"></text></g><g><title>normalize_projection_ty (179,750 samples, 0.14%)</title><rect x="12.1623%" y="245" width="0.1375%" height="15" fill="rgb(221,200,47)"/><text x="12.4123%" y="255.50"></text></g><g><title>type_op_normalize_predicate (227,613 samples, 0.17%)</title><rect x="12.2998%" y="261" width="0.1742%" height="15" fill="rgb(226,26,5)"/><text x="12.5498%" y="271.50"></text></g><g><title>type_op_normalize_ty (283,203 samples, 0.22%)</title><rect x="12.4740%" y="261" width="0.2167%" height="15" fill="rgb(249,33,26)"/><text x="12.7240%" y="271.50"></text></g><g><title>type_op_prove_predicate (2,101,650 samples, 1.61%)</title><rect x="12.6907%" y="261" width="1.6081%" height="15" fill="rgb(235,183,28)"/><text x="12.9407%" y="271.50"></text></g><g><title>MIR_borrow_checking (15,300,524 samples, 11.71%)</title><rect x="2.5952%" y="293" width="11.7074%" height="15" fill="rgb(221,5,38)"/><text x="2.8452%" y="303.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (15,238,974 samples, 11.66%)</title><rect x="2.6423%" y="277" width="11.6603%" height="15" fill="rgb(247,18,42)"/><text x="2.8923%" y="287.50">mir_borrowck</text></g><g><title>hir_module_items (196,821 samples, 0.15%)</title><rect x="14.3898%" y="293" width="0.1506%" height="15" fill="rgb(241,131,45)"/><text x="14.6398%" y="303.50"></text></g><g><title>get_lang_items (138,511 samples, 0.11%)</title><rect x="14.9182%" y="213" width="0.1060%" height="15" fill="rgb(249,31,29)"/><text x="15.1682%" y="223.50"></text></g><g><title>codegen_fn_attrs (379,454 samples, 0.29%)</title><rect x="14.8795%" y="229" width="0.2903%" height="15" fill="rgb(225,111,53)"/><text x="15.1295%" y="239.50"></text></g><g><title>codegen_fn_attrs (568,705 samples, 0.44%)</title><rect x="14.7403%" y="261" width="0.4352%" height="15" fill="rgb(238,160,17)"/><text x="14.9903%" y="271.50"></text></g><g><title>should_inherit_track_caller (517,555 samples, 0.40%)</title><rect x="14.7794%" y="245" width="0.3960%" height="15" fill="rgb(214,148,48)"/><text x="15.0294%" y="255.50"></text></g><g><title>check_mod_attrs (803,719 samples, 0.61%)</title><rect x="14.5608%" y="277" width="0.6150%" height="15" fill="rgb(232,36,49)"/><text x="14.8108%" y="287.50"></text></g><g><title>lookup_deprecation_entry (174,481 samples, 0.13%)</title><rect x="15.4846%" y="261" width="0.1335%" height="15" fill="rgb(209,103,24)"/><text x="15.7346%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (474,835 samples, 0.36%)</title><rect x="15.3345%" y="277" width="0.3633%" height="15" fill="rgb(229,88,8)"/><text x="15.5845%" y="287.50"></text></g><g><title>misc_checking_1 (1,583,346 samples, 1.21%)</title><rect x="14.5406%" y="293" width="1.2115%" height="15" fill="rgb(213,181,19)"/><text x="14.7906%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (268,243 samples, 0.21%)</title><rect x="15.7533%" y="277" width="0.2053%" height="15" fill="rgb(254,191,54)"/><text x="16.0033%" y="287.50"></text></g><g><title>check_mod_liveness (221,991 samples, 0.17%)</title><rect x="15.7887%" y="261" width="0.1699%" height="15" fill="rgb(241,83,37)"/><text x="16.0387%" y="271.50"></text></g><g><title>misc_checking_2 (594,106 samples, 0.45%)</title><rect x="15.7522%" y="293" width="0.4546%" height="15" fill="rgb(233,36,39)"/><text x="16.0022%" y="303.50"></text></g><g><title>match_checking (324,363 samples, 0.25%)</title><rect x="15.9586%" y="277" width="0.2482%" height="15" fill="rgb(226,3,54)"/><text x="16.2086%" y="287.50"></text></g><g><title>check_match (306,843 samples, 0.23%)</title><rect x="15.9720%" y="261" width="0.2348%" height="15" fill="rgb(245,192,40)"/><text x="16.2220%" y="271.50"></text></g><g><title>check_private_in_public (144,092 samples, 0.11%)</title><rect x="16.2137%" y="277" width="0.1103%" height="15" fill="rgb(238,167,29)"/><text x="16.4637%" y="287.50"></text></g><g><title>death_checking (245,212 samples, 0.19%)</title><rect x="16.3239%" y="277" width="0.1876%" height="15" fill="rgb(232,182,51)"/><text x="16.5739%" y="287.50"></text></g><g><title>eval_to_const_value_raw (144,931 samples, 0.11%)</title><rect x="17.1407%" y="245" width="0.1109%" height="15" fill="rgb(231,60,39)"/><text x="17.3907%" y="255.50"></text></g><g><title>eval_to_const_value_raw (142,701 samples, 0.11%)</title><rect x="17.1424%" y="229" width="0.1092%" height="15" fill="rgb(208,69,12)"/><text x="17.3924%" y="239.50"></text></g><g><title>eval_to_allocation_raw (136,781 samples, 0.10%)</title><rect x="17.1469%" y="213" width="0.1047%" height="15" fill="rgb(235,93,37)"/><text x="17.3969%" y="223.50"></text></g><g><title>param_env (192,162 samples, 0.15%)</title><rect x="17.2516%" y="245" width="0.1470%" height="15" fill="rgb(213,116,39)"/><text x="17.5016%" y="255.50"></text></g><g><title>crate_lints (2,696,448 samples, 2.06%)</title><rect x="16.5127%" y="261" width="2.0632%" height="15" fill="rgb(222,207,29)"/><text x="16.7627%" y="271.50">c..</text></g><g><title>type_of (1,536,541 samples, 1.18%)</title><rect x="17.4002%" y="245" width="1.1757%" height="15" fill="rgb(206,96,30)"/><text x="17.6502%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (1,167,578 samples, 0.89%)</title><rect x="17.6825%" y="229" width="0.8934%" height="15" fill="rgb(218,138,4)"/><text x="17.9325%" y="239.50"></text></g><g><title>lint_checking (2,915,420 samples, 2.23%)</title><rect x="16.5115%" y="277" width="2.2308%" height="15" fill="rgb(250,191,14)"/><text x="16.7615%" y="287.50">l..</text></g><g><title>module_lints (217,482 samples, 0.17%)</title><rect x="18.5759%" y="261" width="0.1664%" height="15" fill="rgb(239,60,40)"/><text x="18.8259%" y="271.50"></text></g><g><title>lint_mod (213,692 samples, 0.16%)</title><rect x="18.5788%" y="245" width="0.1635%" height="15" fill="rgb(206,27,48)"/><text x="18.8288%" y="255.50"></text></g><g><title>privacy_access_levels (190,302 samples, 0.15%)</title><rect x="18.7423%" y="277" width="0.1456%" height="15" fill="rgb(225,35,8)"/><text x="18.9923%" y="287.50"></text></g><g><title>privacy_checking_modules (661,077 samples, 0.51%)</title><rect x="18.8879%" y="277" width="0.5058%" height="15" fill="rgb(250,213,24)"/><text x="19.1379%" y="287.50"></text></g><g><title>check_mod_privacy (658,577 samples, 0.50%)</title><rect x="18.8898%" y="261" width="0.5039%" height="15" fill="rgb(247,123,22)"/><text x="19.1398%" y="271.50"></text></g><g><title>misc_checking_3 (4,182,823 samples, 3.20%)</title><rect x="16.2068%" y="293" width="3.2006%" height="15" fill="rgb(231,138,38)"/><text x="16.4568%" y="303.50">mis..</text></g><g><title>impl_parent (2,154,600 samples, 1.65%)</title><rect x="22.1812%" y="229" width="1.6486%" height="15" fill="rgb(231,145,46)"/><text x="22.4312%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,410,788 samples, 1.08%)</title><rect x="22.7503%" y="213" width="1.0795%" height="15" fill="rgb(251,118,11)"/><text x="23.0003%" y="223.50"></text></g><g><title>impl_trait_ref (5,502,825 samples, 4.21%)</title><rect x="23.8298%" y="229" width="4.2106%" height="15" fill="rgb(217,147,25)"/><text x="24.0798%" y="239.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,775,094 samples, 3.65%)</title><rect x="24.3866%" y="213" width="3.6537%" height="15" fill="rgb(247,81,37)"/><text x="24.6366%" y="223.50">meta..</text></g><g><title>coherent_trait (12,003,811 samples, 9.18%)</title><rect x="19.4704%" y="261" width="9.1849%" height="15" fill="rgb(209,12,38)"/><text x="19.7204%" y="271.50">coherent_trait</text></g><g><title>specialization_graph_of (11,989,001 samples, 9.17%)</title><rect x="19.4818%" y="245" width="9.1736%" height="15" fill="rgb(227,1,9)"/><text x="19.7318%" y="255.50">specializatio..</text></g><g><title>trait_impls_of (764,115 samples, 0.58%)</title><rect x="28.0706%" y="229" width="0.5847%" height="15" fill="rgb(248,47,43)"/><text x="28.3206%" y="239.50"></text></g><g><title>implementations_of_trait (228,740 samples, 0.18%)</title><rect x="28.4803%" y="213" width="0.1750%" height="15" fill="rgb(221,10,30)"/><text x="28.7303%" y="223.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (155,620 samples, 0.12%)</title><rect x="28.5362%" y="197" width="0.1191%" height="15" fill="rgb(210,229,1)"/><text x="28.7862%" y="207.50"></text></g><g><title>orphan_check_crate (165,482 samples, 0.13%)</title><rect x="28.6773%" y="261" width="0.1266%" height="15" fill="rgb(222,148,37)"/><text x="28.9273%" y="271.50"></text></g><g><title>coherence_checking (12,226,693 samples, 9.36%)</title><rect x="19.4510%" y="277" width="9.3554%" height="15" fill="rgb(234,67,33)"/><text x="19.7010%" y="287.50">coherence_che..</text></g><g><title>adt_def (226,904 samples, 0.17%)</title><rect x="34.4747%" y="197" width="0.1736%" height="15" fill="rgb(247,98,35)"/><text x="34.7247%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (223,014 samples, 0.17%)</title><rect x="34.4777%" y="181" width="0.1706%" height="15" fill="rgb(247,138,52)"/><text x="34.7277%" y="191.50"></text></g><g><title>adt_def (157,712 samples, 0.12%)</title><rect x="34.7299%" y="165" width="0.1207%" height="15" fill="rgb(213,79,30)"/><text x="34.9799%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (156,352 samples, 0.12%)</title><rect x="34.7310%" y="149" width="0.1196%" height="15" fill="rgb(246,177,23)"/><text x="34.9810%" y="159.50"></text></g><g><title>adt_destructor (222,693 samples, 0.17%)</title><rect x="34.8806%" y="149" width="0.1704%" height="15" fill="rgb(230,62,27)"/><text x="35.1306%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_destructor (221,863 samples, 0.17%)</title><rect x="34.8813%" y="133" width="0.1698%" height="15" fill="rgb(216,154,8)"/><text x="35.1313%" y="143.50"></text></g><g><title>adt_def (421,104 samples, 0.32%)</title><rect x="35.2035%" y="85" width="0.3222%" height="15" fill="rgb(244,35,45)"/><text x="35.4535%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (420,454 samples, 0.32%)</title><rect x="35.2040%" y="69" width="0.3217%" height="15" fill="rgb(251,115,12)"/><text x="35.4540%" y="79.50"></text></g><g><title>item_attrs (413,014 samples, 0.32%)</title><rect x="35.2096%" y="53" width="0.3160%" height="15" fill="rgb(240,54,50)"/><text x="35.4596%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (412,124 samples, 0.32%)</title><rect x="35.2103%" y="37" width="0.3153%" height="15" fill="rgb(233,84,52)"/><text x="35.4603%" y="47.50"></text></g><g><title>adt_dtorck_constraint (518,705 samples, 0.40%)</title><rect x="35.1959%" y="101" width="0.3969%" height="15" fill="rgb(207,117,47)"/><text x="35.4459%" y="111.50"></text></g><g><title>adt_dtorck_constraint (586,076 samples, 0.45%)</title><rect x="35.1460%" y="117" width="0.4484%" height="15" fill="rgb(249,43,39)"/><text x="35.3960%" y="127.50"></text></g><g><title>adt_dtorck_constraint (643,216 samples, 0.49%)</title><rect x="35.1087%" y="133" width="0.4922%" height="15" fill="rgb(209,38,44)"/><text x="35.3587%" y="143.50"></text></g><g><title>adt_dtorck_constraint (727,387 samples, 0.56%)</title><rect x="35.0510%" y="149" width="0.5566%" height="15" fill="rgb(236,212,23)"/><text x="35.3010%" y="159.50"></text></g><g><title>adt_dtorck_constraint (992,430 samples, 0.76%)</title><rect x="34.8572%" y="165" width="0.7594%" height="15" fill="rgb(242,79,21)"/><text x="35.1072%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,197,542 samples, 0.92%)</title><rect x="34.7159%" y="181" width="0.9163%" height="15" fill="rgb(211,96,35)"/><text x="34.9659%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,275,142 samples, 0.98%)</title><rect x="34.6652%" y="197" width="0.9757%" height="15" fill="rgb(253,215,40)"/><text x="34.9152%" y="207.50"></text></g><g><title>adt_dtorck_constraint (1,636,096 samples, 1.25%)</title><rect x="34.4254%" y="213" width="1.2519%" height="15" fill="rgb(211,81,21)"/><text x="34.6754%" y="223.50"></text></g><g><title>dropck_outlives (1,813,007 samples, 1.39%)</title><rect x="34.2994%" y="229" width="1.3873%" height="15" fill="rgb(208,190,38)"/><text x="34.5494%" y="239.50"></text></g><g><title>evaluate_obligation (493,275 samples, 0.38%)</title><rect x="35.6866%" y="229" width="0.3774%" height="15" fill="rgb(235,213,38)"/><text x="35.9366%" y="239.50"></text></g><g><title>method_autoderef_steps (267,341 samples, 0.20%)</title><rect x="36.2446%" y="229" width="0.2046%" height="15" fill="rgb(237,122,38)"/><text x="36.4946%" y="239.50"></text></g><g><title>predicates_of (148,982 samples, 0.11%)</title><rect x="36.4869%" y="229" width="0.1140%" height="15" fill="rgb(244,218,35)"/><text x="36.7369%" y="239.50"></text></g><g><title>dropck_outlives (377,661 samples, 0.29%)</title><rect x="40.7075%" y="213" width="0.2890%" height="15" fill="rgb(240,68,47)"/><text x="40.9575%" y="223.50"></text></g><g><title>evaluate_obligation (971,617 samples, 0.74%)</title><rect x="40.9965%" y="213" width="0.7434%" height="15" fill="rgb(210,16,53)"/><text x="41.2465%" y="223.50"></text></g><g><title>trait_impls_of (178,891 samples, 0.14%)</title><rect x="41.6030%" y="197" width="0.1369%" height="15" fill="rgb(235,124,12)"/><text x="41.8530%" y="207.50"></text></g><g><title>is_copy_raw (666,668 samples, 0.51%)</title><rect x="41.8713%" y="213" width="0.5101%" height="15" fill="rgb(224,169,11)"/><text x="42.1213%" y="223.50"></text></g><g><title>evaluate_obligation (588,987 samples, 0.45%)</title><rect x="41.9307%" y="197" width="0.4507%" height="15" fill="rgb(250,166,2)"/><text x="42.1807%" y="207.50"></text></g><g><title>trait_impls_of (212,512 samples, 0.16%)</title><rect x="42.2188%" y="181" width="0.1626%" height="15" fill="rgb(242,216,29)"/><text x="42.4688%" y="191.50"></text></g><g><title>predicates_of (180,631 samples, 0.14%)</title><rect x="42.5788%" y="213" width="0.1382%" height="15" fill="rgb(230,116,27)"/><text x="42.8288%" y="223.50"></text></g><g><title>typeck (8,071,551 samples, 6.18%)</title><rect x="36.6435%" y="229" width="6.1761%" height="15" fill="rgb(228,99,48)"/><text x="36.8935%" y="239.50">typeck</text></g><g><title>item_bodies_checking (18,314,305 samples, 14.01%)</title><rect x="28.8261%" y="277" width="14.0135%" height="15" fill="rgb(253,11,6)"/><text x="29.0761%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,310,995 samples, 14.01%)</title><rect x="28.8286%" y="261" width="14.0109%" height="15" fill="rgb(247,143,39)"/><text x="29.0786%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (18,264,335 samples, 13.98%)</title><rect x="28.8643%" y="245" width="13.9752%" height="15" fill="rgb(236,97,10)"/><text x="29.1143%" y="255.50">typeck</text></g><g><title>adt_destructor (538,965 samples, 0.41%)</title><rect x="43.7263%" y="245" width="0.4124%" height="15" fill="rgb(233,208,19)"/><text x="43.9763%" y="255.50"></text></g><g><title>coherent_trait (534,595 samples, 0.41%)</title><rect x="43.7296%" y="229" width="0.4091%" height="15" fill="rgb(216,164,2)"/><text x="43.9796%" y="239.50"></text></g><g><title>specialization_graph_of (532,225 samples, 0.41%)</title><rect x="43.7315%" y="213" width="0.4072%" height="15" fill="rgb(220,129,5)"/><text x="43.9815%" y="223.50"></text></g><g><title>impl_trait_ref (265,493 samples, 0.20%)</title><rect x="43.9356%" y="197" width="0.2031%" height="15" fill="rgb(242,17,10)"/><text x="44.1856%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (228,073 samples, 0.17%)</title><rect x="43.9642%" y="181" width="0.1745%" height="15" fill="rgb(242,107,0)"/><text x="44.2142%" y="191.50"></text></g><g><title>type_of (234,512 samples, 0.18%)</title><rect x="44.2705%" y="245" width="0.1794%" height="15" fill="rgb(251,28,31)"/><text x="44.5205%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (217,572 samples, 0.17%)</title><rect x="44.2834%" y="229" width="0.1665%" height="15" fill="rgb(233,223,10)"/><text x="44.5334%" y="239.50"></text></g><g><title>item_types_checking (2,199,532 samples, 1.68%)</title><rect x="42.8395%" y="277" width="1.6830%" height="15" fill="rgb(215,21,27)"/><text x="43.0895%" y="287.50"></text></g><g><title>check_mod_item_types (2,195,992 samples, 1.68%)</title><rect x="42.8422%" y="261" width="1.6803%" height="15" fill="rgb(232,23,21)"/><text x="43.0922%" y="271.50"></text></g><g><title>fn_sig (171,651 samples, 0.13%)</title><rect x="44.6732%" y="245" width="0.1313%" height="15" fill="rgb(244,5,23)"/><text x="44.9232%" y="255.50"></text></g><g><title>generics_of (136,813 samples, 0.10%)</title><rect x="44.8045%" y="245" width="0.1047%" height="15" fill="rgb(226,81,46)"/><text x="45.0545%" y="255.50"></text></g><g><title>late_bound_vars_map (364,995 samples, 0.28%)</title><rect x="45.1344%" y="197" width="0.2793%" height="15" fill="rgb(247,70,30)"/><text x="45.3844%" y="207.50"></text></g><g><title>resolve_lifetimes (355,674 samples, 0.27%)</title><rect x="45.1415%" y="181" width="0.2721%" height="15" fill="rgb(212,68,19)"/><text x="45.3915%" y="191.50"></text></g><g><title>lint_levels (134,041 samples, 0.10%)</title><rect x="45.3111%" y="165" width="0.1026%" height="15" fill="rgb(240,187,13)"/><text x="45.5611%" y="175.50"></text></g><g><title>explicit_predicates_of (696,298 samples, 0.53%)</title><rect x="44.9786%" y="213" width="0.5328%" height="15" fill="rgb(223,113,26)"/><text x="45.2286%" y="223.50"></text></g><g><title>predicates_of (1,000,101 samples, 0.77%)</title><rect x="44.9198%" y="245" width="0.7652%" height="15" fill="rgb(206,192,2)"/><text x="45.1698%" y="255.50"></text></g><g><title>predicates_defined_on (972,221 samples, 0.74%)</title><rect x="44.9411%" y="229" width="0.7439%" height="15" fill="rgb(241,108,4)"/><text x="45.1911%" y="239.50"></text></g><g><title>inferred_outlives_of (226,942 samples, 0.17%)</title><rect x="45.5114%" y="213" width="0.1736%" height="15" fill="rgb(247,173,49)"/><text x="45.7614%" y="223.50"></text></g><g><title>inferred_outlives_crate (210,812 samples, 0.16%)</title><rect x="45.5237%" y="197" width="0.1613%" height="15" fill="rgb(224,114,35)"/><text x="45.7737%" y="207.50"></text></g><g><title>type_collecting (1,956,440 samples, 1.50%)</title><rect x="44.5248%" y="277" width="1.4970%" height="15" fill="rgb(245,159,27)"/><text x="44.7748%" y="287.50"></text></g><g><title>collect_mod_item_types (1,947,680 samples, 1.49%)</title><rect x="44.5315%" y="261" width="1.4903%" height="15" fill="rgb(245,172,44)"/><text x="44.7815%" y="271.50"></text></g><g><title>type_of (436,253 samples, 0.33%)</title><rect x="45.6880%" y="245" width="0.3338%" height="15" fill="rgb(236,23,11)"/><text x="45.9380%" y="255.50"></text></g><g><title>evaluate_obligation (764,687 samples, 0.59%)</title><rect x="47.9092%" y="245" width="0.5851%" height="15" fill="rgb(205,117,38)"/><text x="48.1592%" y="255.50"></text></g><g><title>implied_outlives_bounds (278,834 samples, 0.21%)</title><rect x="48.5248%" y="245" width="0.2134%" height="15" fill="rgb(237,72,25)"/><text x="48.7748%" y="255.50"></text></g><g><title>layout_of (150,842 samples, 0.12%)</title><rect x="48.8237%" y="229" width="0.1154%" height="15" fill="rgb(244,70,9)"/><text x="49.0737%" y="239.50"></text></g><g><title>object_safety_violations (277,853 samples, 0.21%)</title><rect x="48.7382%" y="245" width="0.2126%" height="15" fill="rgb(217,125,39)"/><text x="48.9882%" y="255.50"></text></g><g><title>param_env (312,541 samples, 0.24%)</title><rect x="48.9508%" y="245" width="0.2391%" height="15" fill="rgb(235,36,10)"/><text x="49.2008%" y="255.50"></text></g><g><title>region_scope_tree (189,851 samples, 0.15%)</title><rect x="49.2250%" y="245" width="0.1453%" height="15" fill="rgb(251,123,47)"/><text x="49.4750%" y="255.50"></text></g><g><title>check_impl_item_well_formed (4,246,167 samples, 3.25%)</title><rect x="46.1243%" y="261" width="3.2490%" height="15" fill="rgb(221,13,13)"/><text x="46.3743%" y="271.50">che..</text></g><g><title>evaluate_obligation (166,700 samples, 0.13%)</title><rect x="50.4513%" y="245" width="0.1276%" height="15" fill="rgb(238,131,9)"/><text x="50.7013%" y="255.50"></text></g><g><title>implied_outlives_bounds (133,582 samples, 0.10%)</title><rect x="50.6230%" y="245" width="0.1022%" height="15" fill="rgb(211,50,8)"/><text x="50.8730%" y="255.50"></text></g><g><title>evaluate_obligation (153,093 samples, 0.12%)</title><rect x="50.8524%" y="229" width="0.1171%" height="15" fill="rgb(245,182,24)"/><text x="51.1024%" y="239.50"></text></g><g><title>object_safety_violations (513,535 samples, 0.39%)</title><rect x="50.7431%" y="245" width="0.3929%" height="15" fill="rgb(242,14,37)"/><text x="50.9931%" y="255.50"></text></g><g><title>param_env (257,091 samples, 0.20%)</title><rect x="51.1366%" y="245" width="0.1967%" height="15" fill="rgb(246,228,12)"/><text x="51.3866%" y="255.50"></text></g><g><title>trait_impls_of (207,522 samples, 0.16%)</title><rect x="51.4171%" y="245" width="0.1588%" height="15" fill="rgb(213,55,15)"/><text x="51.6671%" y="255.50"></text></g><g><title>analysis (64,405,132 samples, 49.28%)</title><rect x="2.3620%" y="309" width="49.2806%" height="15" fill="rgb(209,9,3)"/><text x="2.6120%" y="319.50">analysis</text></g><g><title>type_check_crate (42,128,517 samples, 32.24%)</title><rect x="19.4073%" y="293" width="32.2353%" height="15" fill="rgb(230,59,30)"/><text x="19.6573%" y="303.50">type_check_crate</text></g><g><title>wf_checking (7,343,255 samples, 5.62%)</title><rect x="46.0238%" y="277" width="5.6188%" height="15" fill="rgb(209,121,21)"/><text x="46.2738%" y="287.50">wf_chec..</text></g><g><title>check_item_well_formed (2,965,758 samples, 2.27%)</title><rect x="49.3733%" y="261" width="2.2693%" height="15" fill="rgb(220,109,13)"/><text x="49.6233%" y="271.50">c..</text></g><g><title>codegen_module (280,103 samples, 0.21%)</title><rect x="52.1624%" y="293" width="0.2143%" height="15" fill="rgb(232,18,1)"/><text x="52.4124%" y="303.50"></text></g><g><title>codegen_crate (1,089,051 samples, 0.83%)</title><rect x="51.6505%" y="309" width="0.8333%" height="15" fill="rgb(215,41,42)"/><text x="51.9005%" y="319.50"></text></g><g><title>LLVM_module_codegen (1,604,756 samples, 1.23%)</title><rect x="52.6392%" y="293" width="1.2279%" height="15" fill="rgb(224,123,36)"/><text x="52.8892%" y="303.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,543,396 samples, 1.18%)</title><rect x="52.6861%" y="277" width="1.1810%" height="15" fill="rgb(240,125,3)"/><text x="52.9361%" y="287.50"></text></g><g><title>codegen_module_optimize (2,135,751 samples, 1.63%)</title><rect x="52.4838%" y="309" width="1.6342%" height="15" fill="rgb(205,98,50)"/><text x="52.7338%" y="319.50"></text></g><g><title>LLVM_module_optimize (327,923 samples, 0.25%)</title><rect x="53.8671%" y="293" width="0.2509%" height="15" fill="rgb(205,185,37)"/><text x="54.1171%" y="303.50"></text></g><g><title>AST_validation (219,933 samples, 0.17%)</title><rect x="54.2704%" y="293" width="0.1683%" height="15" fill="rgb(238,207,15)"/><text x="54.5204%" y="303.50"></text></g><g><title>metadata_load_macro (1,407,074 samples, 1.08%)</title><rect x="70.7620%" y="261" width="1.0766%" height="15" fill="rgb(213,199,42)"/><text x="71.0120%" y="271.50"></text></g><g><title>metadata_register_crate (12,346,694 samples, 9.45%)</title><rect x="71.8387%" y="261" width="9.4473%" height="15" fill="rgb(235,201,11)"/><text x="72.0887%" y="271.50">metadata_regis..</text></g><g><title>metadata_register_crate (8,896,571 samples, 6.81%)</title><rect x="74.4786%" y="245" width="6.8073%" height="15" fill="rgb(207,46,11)"/><text x="74.7286%" y="255.50">metadata_..</text></g><g><title>metadata_register_crate (365,313 samples, 0.28%)</title><rect x="81.0064%" y="229" width="0.2795%" height="15" fill="rgb(241,35,35)"/><text x="81.2564%" y="239.50"></text></g><g><title>macro_expand_crate (35,003,323 samples, 26.78%)</title><rect x="54.5480%" y="293" width="26.7833%" height="15" fill="rgb(243,32,47)"/><text x="54.7980%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (34,977,943 samples, 26.76%)</title><rect x="54.5674%" y="277" width="26.7639%" height="15" fill="rgb(247,202,23)"/><text x="54.8174%" y="287.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (177,462 samples, 0.14%)</title><rect x="81.3349%" y="293" width="0.1358%" height="15" fill="rgb(219,102,11)"/><text x="81.5849%" y="303.50"></text></g><g><title>finalize_imports (139,321 samples, 0.11%)</title><rect x="81.4774%" y="277" width="0.1066%" height="15" fill="rgb(243,110,44)"/><text x="81.7274%" y="287.50"></text></g><g><title>late_resolve_crate (2,203,573 samples, 1.69%)</title><rect x="81.6637%" y="277" width="1.6861%" height="15" fill="rgb(222,74,54)"/><text x="81.9137%" y="287.50"></text></g><g><title>configure_and_expand (38,322,337 samples, 29.32%)</title><rect x="54.1180%" y="309" width="29.3229%" height="15" fill="rgb(216,99,12)"/><text x="54.3680%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (2,574,886 samples, 1.97%)</title><rect x="81.4707%" y="293" width="1.9702%" height="15" fill="rgb(226,22,26)"/><text x="81.7207%" y="303.50">r..</text></g><g><title>drop_ast (179,871 samples, 0.14%)</title><rect x="83.4409%" y="309" width="0.1376%" height="15" fill="rgb(217,163,10)"/><text x="83.6909%" y="319.50"></text></g><g><title>early_lint_checks (537,856 samples, 0.41%)</title><rect x="83.6012%" y="309" width="0.4115%" height="15" fill="rgb(213,25,53)"/><text x="83.8512%" y="319.50"></text></g><g><title>free_global_ctxt (5,366,764 samples, 4.11%)</title><rect x="84.0128%" y="309" width="4.1065%" height="15" fill="rgb(252,105,26)"/><text x="84.2628%" y="319.50">free..</text></g><g><title>dep_kind (242,252 samples, 0.19%)</title><rect x="89.0586%" y="293" width="0.1854%" height="15" fill="rgb(220,39,43)"/><text x="89.3086%" y="303.50"></text></g><g><title>exported_symbols (143,301 samples, 0.11%)</title><rect x="89.2583%" y="293" width="0.1096%" height="15" fill="rgb(229,68,48)"/><text x="89.5083%" y="303.50"></text></g><g><title>layout_of (199,532 samples, 0.15%)</title><rect x="91.2299%" y="197" width="0.1527%" height="15" fill="rgb(252,8,32)"/><text x="91.4799%" y="207.50"></text></g><g><title>layout_of (353,184 samples, 0.27%)</title><rect x="91.1400%" y="213" width="0.2702%" height="15" fill="rgb(223,20,43)"/><text x="91.3900%" y="223.50"></text></g><g><title>layout_of (427,624 samples, 0.33%)</title><rect x="91.0992%" y="229" width="0.3272%" height="15" fill="rgb(229,81,49)"/><text x="91.3492%" y="239.50"></text></g><g><title>layout_of (489,935 samples, 0.37%)</title><rect x="91.0683%" y="245" width="0.3749%" height="15" fill="rgb(236,28,36)"/><text x="91.3183%" y="255.50"></text></g><g><title>layout_of (609,496 samples, 0.47%)</title><rect x="91.0047%" y="261" width="0.4664%" height="15" fill="rgb(249,185,26)"/><text x="91.2547%" y="271.50"></text></g><g><title>layout_of (963,877 samples, 0.74%)</title><rect x="90.7469%" y="277" width="0.7375%" height="15" fill="rgb(249,174,33)"/><text x="90.9969%" y="287.50"></text></g><g><title>is_copy_raw (512,298 samples, 0.39%)</title><rect x="93.0072%" y="245" width="0.3920%" height="15" fill="rgb(233,201,37)"/><text x="93.2572%" y="255.50"></text></g><g><title>evaluate_obligation (432,587 samples, 0.33%)</title><rect x="93.0682%" y="229" width="0.3310%" height="15" fill="rgb(221,78,26)"/><text x="93.3182%" y="239.50"></text></g><g><title>needs_drop_raw (576,808 samples, 0.44%)</title><rect x="92.9622%" y="261" width="0.4414%" height="15" fill="rgb(250,127,30)"/><text x="93.2122%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,640,371 samples, 2.02%)</title><rect x="91.4844%" y="277" width="2.0203%" height="15" fill="rgb(230,49,44)"/><text x="91.7344%" y="287.50">m..</text></g><g><title>optimized_mir (5,344,826 samples, 4.09%)</title><rect x="89.4167%" y="293" width="4.0897%" height="15" fill="rgb(229,67,23)"/><text x="89.6667%" y="303.50">opti..</text></g><g><title>generate_crate_metadata (7,074,471 samples, 5.41%)</title><rect x="88.1193%" y="309" width="5.4131%" height="15" fill="rgb(249,83,47)"/><text x="88.3693%" y="319.50">generat..</text></g><g><title>hir_lowering (3,251,633 samples, 2.49%)</title><rect x="93.5324%" y="309" width="2.4880%" height="15" fill="rgb(215,43,3)"/><text x="93.7824%" y="319.50">hi..</text></g><g><title>link_crate (723,117 samples, 0.55%)</title><rect x="96.0398%" y="293" width="0.5533%" height="15" fill="rgb(238,154,13)"/><text x="96.2898%" y="303.50"></text></g><g><title>link_binary (705,917 samples, 0.54%)</title><rect x="96.0530%" y="277" width="0.5401%" height="15" fill="rgb(219,56,2)"/><text x="96.3030%" y="287.50"></text></g><g><title>link_rlib (466,985 samples, 0.36%)</title><rect x="96.2358%" y="261" width="0.3573%" height="15" fill="rgb(233,0,4)"/><text x="96.4858%" y="271.50"></text></g><g><title>link (755,328 samples, 0.58%)</title><rect x="96.0204%" y="309" width="0.5780%" height="15" fill="rgb(235,30,7)"/><text x="96.2704%" y="319.50"></text></g><g><title>parse_crate (1,934,400 samples, 1.48%)</title><rect x="96.5984%" y="309" width="1.4801%" height="15" fill="rgb(250,79,13)"/><text x="96.8484%" y="319.50"></text></g><g><title>prepare_outputs (316,943 samples, 0.24%)</title><rect x="98.0848%" y="309" width="0.2425%" height="15" fill="rgb(211,146,34)"/><text x="98.3348%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (1,719,438 samples, 1.32%)</title><rect x="98.3274%" y="309" width="1.3157%" height="15" fill="rgb(228,22,38)"/><text x="98.5774%" y="319.50"></text></g><g><title>all (130,690,690 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (130,690,690 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (336,464 samples, 0.26%)</title><rect x="99.7425%" y="309" width="0.2575%" height="15" fill="rgb(215,215,53)"/><text x="99.9925%" y="319.50"></text></g></svg></svg>