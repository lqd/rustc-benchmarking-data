<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (40,999,421 samples, 10.92%)</title><rect x="0.1751%" y="181" width="10.9244%" height="15" fill="rgb(227,0,7)"/><text x="0.4251%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,127,802 samples, 0.30%)</title><rect x="17.4316%" y="69" width="0.3005%" height="15" fill="rgb(217,0,24)"/><text x="17.6816%" y="79.50"></text></g><g><title>is_copy_raw (837,370 samples, 0.22%)</title><rect x="17.5090%" y="53" width="0.2231%" height="15" fill="rgb(221,193,54)"/><text x="17.7590%" y="63.50"></text></g><g><title>evaluate_obligation (676,748 samples, 0.18%)</title><rect x="17.5517%" y="37" width="0.1803%" height="15" fill="rgb(248,212,6)"/><text x="17.8017%" y="47.50"></text></g><g><title>resolve_instance (674,116 samples, 0.18%)</title><rect x="17.7321%" y="69" width="0.1796%" height="15" fill="rgb(208,68,35)"/><text x="17.9821%" y="79.50"></text></g><g><title>thir_body (1,506,668 samples, 0.40%)</title><rect x="17.9228%" y="69" width="0.4015%" height="15" fill="rgb(232,128,0)"/><text x="18.1728%" y="79.50"></text></g><g><title>mir_const (10,154,413 samples, 2.71%)</title><rect x="15.6258%" y="117" width="2.7057%" height="15" fill="rgb(207,160,47)"/><text x="15.8758%" y="127.50">mi..</text></g><g><title>unsafety_check_result (8,599,001 samples, 2.29%)</title><rect x="16.0402%" y="101" width="2.2912%" height="15" fill="rgb(228,23,34)"/><text x="16.2902%" y="111.50">u..</text></g><g><title>mir_built (7,544,410 samples, 2.01%)</title><rect x="16.3212%" y="85" width="2.0102%" height="15" fill="rgb(218,30,26)"/><text x="16.5712%" y="95.50">m..</text></g><g><title>mir_promoted (11,661,548 samples, 3.11%)</title><rect x="15.2429%" y="133" width="3.1072%" height="15" fill="rgb(220,122,19)"/><text x="15.4929%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (526,163 samples, 0.14%)</title><rect x="18.3501%" y="133" width="0.1402%" height="15" fill="rgb(250,228,42)"/><text x="18.6001%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,796,564 samples, 0.48%)</title><rect x="18.5810%" y="133" width="0.4787%" height="15" fill="rgb(240,193,28)"/><text x="18.8310%" y="143.50"></text></g><g><title>MIR_borrow_checking (29,517,016 samples, 7.86%)</title><rect x="11.1971%" y="165" width="7.8648%" height="15" fill="rgb(216,20,37)"/><text x="11.4471%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (29,322,604 samples, 7.81%)</title><rect x="11.2489%" y="149" width="7.8130%" height="15" fill="rgb(206,188,39)"/><text x="11.4989%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (533,904 samples, 0.14%)</title><rect x="19.2301%" y="133" width="0.1423%" height="15" fill="rgb(217,207,13)"/><text x="19.4801%" y="143.50"></text></g><g><title>should_inherit_track_caller (459,933 samples, 0.12%)</title><rect x="19.2498%" y="117" width="0.1225%" height="15" fill="rgb(231,73,38)"/><text x="19.4998%" y="127.50"></text></g><g><title>check_mod_attrs (835,467 samples, 0.22%)</title><rect x="19.1498%" y="149" width="0.2226%" height="15" fill="rgb(225,20,46)"/><text x="19.3998%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (467,404 samples, 0.12%)</title><rect x="19.4455%" y="149" width="0.1245%" height="15" fill="rgb(210,31,41)"/><text x="19.6955%" y="159.50"></text></g><g><title>misc_checking_1 (1,676,056 samples, 0.45%)</title><rect x="19.1429%" y="165" width="0.4466%" height="15" fill="rgb(221,200,47)"/><text x="19.3929%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (619,127 samples, 0.16%)</title><rect x="19.5900%" y="149" width="0.1650%" height="15" fill="rgb(226,26,5)"/><text x="19.8400%" y="159.50"></text></g><g><title>check_mod_liveness (501,155 samples, 0.13%)</title><rect x="19.6214%" y="133" width="0.1335%" height="15" fill="rgb(249,33,26)"/><text x="19.8714%" y="143.50"></text></g><g><title>misc_checking_2 (1,478,475 samples, 0.39%)</title><rect x="19.5895%" y="165" width="0.3939%" height="15" fill="rgb(235,183,28)"/><text x="19.8395%" y="175.50"></text></g><g><title>match_checking (857,408 samples, 0.23%)</title><rect x="19.7550%" y="149" width="0.2285%" height="15" fill="rgb(221,5,38)"/><text x="20.0050%" y="159.50"></text></g><g><title>check_match (810,078 samples, 0.22%)</title><rect x="19.7676%" y="133" width="0.2158%" height="15" fill="rgb(247,18,42)"/><text x="20.0176%" y="143.50"></text></g><g><title>death_checking (625,756 samples, 0.17%)</title><rect x="20.0651%" y="149" width="0.1667%" height="15" fill="rgb(241,131,45)"/><text x="20.3151%" y="159.50"></text></g><g><title>crate_lints (2,192,162 samples, 0.58%)</title><rect x="20.2322%" y="133" width="0.5841%" height="15" fill="rgb(249,31,29)"/><text x="20.4822%" y="143.50"></text></g><g><title>type_of (1,093,852 samples, 0.29%)</title><rect x="20.5249%" y="117" width="0.2915%" height="15" fill="rgb(225,111,53)"/><text x="20.7749%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (864,399 samples, 0.23%)</title><rect x="20.5860%" y="101" width="0.2303%" height="15" fill="rgb(238,160,17)"/><text x="20.8360%" y="111.50"></text></g><g><title>lint_checking (2,759,108 samples, 0.74%)</title><rect x="20.2319%" y="149" width="0.7352%" height="15" fill="rgb(214,148,48)"/><text x="20.4819%" y="159.50"></text></g><g><title>module_lints (565,556 samples, 0.15%)</title><rect x="20.8163%" y="133" width="0.1507%" height="15" fill="rgb(232,36,49)"/><text x="21.0663%" y="143.50"></text></g><g><title>lint_mod (558,996 samples, 0.15%)</title><rect x="20.8181%" y="117" width="0.1489%" height="15" fill="rgb(209,103,24)"/><text x="21.0681%" y="127.50"></text></g><g><title>privacy_access_levels (387,614 samples, 0.10%)</title><rect x="20.9670%" y="149" width="0.1033%" height="15" fill="rgb(229,88,8)"/><text x="21.2170%" y="159.50"></text></g><g><title>privacy_checking_modules (990,030 samples, 0.26%)</title><rect x="21.0703%" y="149" width="0.2638%" height="15" fill="rgb(213,181,19)"/><text x="21.3203%" y="159.50"></text></g><g><title>check_mod_privacy (985,640 samples, 0.26%)</title><rect x="21.0715%" y="133" width="0.2626%" height="15" fill="rgb(254,191,54)"/><text x="21.3215%" y="143.50"></text></g><g><title>misc_checking_3 (5,086,351 samples, 1.36%)</title><rect x="19.9834%" y="165" width="1.3553%" height="15" fill="rgb(241,83,37)"/><text x="20.2334%" y="175.50"></text></g><g><title>impl_parent (2,793,077 samples, 0.74%)</title><rect x="22.6971%" y="101" width="0.7442%" height="15" fill="rgb(233,36,39)"/><text x="22.9471%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,621,098 samples, 0.43%)</title><rect x="23.0094%" y="85" width="0.4319%" height="15" fill="rgb(226,3,54)"/><text x="23.2594%" y="95.50"></text></g><g><title>impl_trait_ref (6,032,579 samples, 1.61%)</title><rect x="23.4413%" y="101" width="1.6074%" height="15" fill="rgb(245,192,40)"/><text x="23.6913%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,638,635 samples, 1.24%)</title><rect x="23.8127%" y="85" width="1.2360%" height="15" fill="rgb(238,167,29)"/><text x="24.0627%" y="95.50"></text></g><g><title>trait_impls_of (1,047,330 samples, 0.28%)</title><rect x="25.0542%" y="101" width="0.2791%" height="15" fill="rgb(232,182,51)"/><text x="25.3042%" y="111.50"></text></g><g><title>coherent_trait (14,872,979 samples, 3.96%)</title><rect x="21.3706%" y="133" width="3.9629%" height="15" fill="rgb(231,60,39)"/><text x="21.6206%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (14,450,536 samples, 3.85%)</title><rect x="21.4832%" y="117" width="3.8504%" height="15" fill="rgb(208,69,12)"/><text x="21.7332%" y="127.50">spec..</text></g><g><title>coherence_checking (14,995,611 samples, 4.00%)</title><rect x="21.3640%" y="149" width="3.9956%" height="15" fill="rgb(235,93,37)"/><text x="21.6140%" y="159.50">cohe..</text></g><g><title>associated_item (610,087 samples, 0.16%)</title><rect x="31.7941%" y="85" width="0.1626%" height="15" fill="rgb(213,116,39)"/><text x="32.0441%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (493,026 samples, 0.13%)</title><rect x="31.8253%" y="69" width="0.1314%" height="15" fill="rgb(222,207,29)"/><text x="32.0753%" y="79.50"></text></g><g><title>associated_items (866,530 samples, 0.23%)</title><rect x="31.7382%" y="101" width="0.2309%" height="15" fill="rgb(206,96,30)"/><text x="31.9882%" y="111.50"></text></g><g><title>dropck_outlives (710,329 samples, 0.19%)</title><rect x="31.9911%" y="101" width="0.1893%" height="15" fill="rgb(218,138,4)"/><text x="32.2411%" y="111.50"></text></g><g><title>adt_dtorck_constraint (410,605 samples, 0.11%)</title><rect x="32.0709%" y="85" width="0.1094%" height="15" fill="rgb(250,191,14)"/><text x="32.3209%" y="95.50"></text></g><g><title>specializes (444,445 samples, 0.12%)</title><rect x="32.9720%" y="85" width="0.1184%" height="15" fill="rgb(239,60,40)"/><text x="33.2220%" y="95.50"></text></g><g><title>trait_impls_of (439,725 samples, 0.12%)</title><rect x="33.0939%" y="85" width="0.1172%" height="15" fill="rgb(206,27,48)"/><text x="33.3439%" y="95.50"></text></g><g><title>evaluate_obligation (3,880,556 samples, 1.03%)</title><rect x="32.1803%" y="101" width="1.0340%" height="15" fill="rgb(225,35,8)"/><text x="32.4303%" y="111.50"></text></g><g><title>method_autoderef_steps (655,728 samples, 0.17%)</title><rect x="33.4143%" y="101" width="0.1747%" height="15" fill="rgb(250,213,24)"/><text x="33.6643%" y="111.50"></text></g><g><title>predicates_of (416,280 samples, 0.11%)</title><rect x="33.6500%" y="101" width="0.1109%" height="15" fill="rgb(247,123,22)"/><text x="33.9000%" y="111.50"></text></g><g><title>typeck (3,468,384 samples, 0.92%)</title><rect x="33.7920%" y="101" width="0.9242%" height="15" fill="rgb(231,138,38)"/><text x="34.0420%" y="111.50"></text></g><g><title>item_bodies_checking (35,130,172 samples, 9.36%)</title><rect x="25.3768%" y="149" width="9.3605%" height="15" fill="rgb(231,145,46)"/><text x="25.6268%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (35,127,432 samples, 9.36%)</title><rect x="25.3775%" y="133" width="9.3598%" height="15" fill="rgb(251,118,11)"/><text x="25.6275%" y="143.50">typeck_item_b..</text></g><g><title>typeck (34,983,060 samples, 9.32%)</title><rect x="25.4160%" y="117" width="9.3213%" height="15" fill="rgb(217,147,25)"/><text x="25.6660%" y="127.50">typeck</text></g><g><title>item_types_checking (1,166,872 samples, 0.31%)</title><rect x="34.7373%" y="149" width="0.3109%" height="15" fill="rgb(247,81,37)"/><text x="34.9873%" y="159.50"></text></g><g><title>check_mod_item_types (1,160,872 samples, 0.31%)</title><rect x="34.7389%" y="133" width="0.3093%" height="15" fill="rgb(209,12,38)"/><text x="34.9889%" y="143.50"></text></g><g><title>mir_borrowck (565,354 samples, 0.15%)</title><rect x="35.3439%" y="37" width="0.1506%" height="15" fill="rgb(227,1,9)"/><text x="35.5939%" y="47.50"></text></g><g><title>mir_for_ctfe (776,468 samples, 0.21%)</title><rect x="35.2880%" y="69" width="0.2069%" height="15" fill="rgb(248,47,43)"/><text x="35.5380%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (721,727 samples, 0.19%)</title><rect x="35.3026%" y="53" width="0.1923%" height="15" fill="rgb(221,10,30)"/><text x="35.5526%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,794,488 samples, 0.48%)</title><rect x="35.1727%" y="117" width="0.4781%" height="15" fill="rgb(210,229,1)"/><text x="35.4227%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,776,588 samples, 0.47%)</title><rect x="35.1775%" y="101" width="0.4734%" height="15" fill="rgb(222,148,37)"/><text x="35.4275%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,773,048 samples, 0.47%)</title><rect x="35.1784%" y="85" width="0.4724%" height="15" fill="rgb(234,67,33)"/><text x="35.4284%" y="95.50"></text></g><g><title>typeck (455,614 samples, 0.12%)</title><rect x="35.5295%" y="69" width="0.1214%" height="15" fill="rgb(247,98,35)"/><text x="35.7795%" y="79.50"></text></g><g><title>fn_sig (397,335 samples, 0.11%)</title><rect x="35.6508%" y="117" width="0.1059%" height="15" fill="rgb(247,138,52)"/><text x="35.9008%" y="127.50"></text></g><g><title>generics_of (554,344 samples, 0.15%)</title><rect x="35.7567%" y="117" width="0.1477%" height="15" fill="rgb(213,79,30)"/><text x="36.0067%" y="127.50"></text></g><g><title>explicit_predicates_of (520,247 samples, 0.14%)</title><rect x="36.0397%" y="85" width="0.1386%" height="15" fill="rgb(246,177,23)"/><text x="36.2897%" y="95.50"></text></g><g><title>predicates_of (1,135,552 samples, 0.30%)</title><rect x="35.9787%" y="117" width="0.3026%" height="15" fill="rgb(230,62,27)"/><text x="36.2287%" y="127.50"></text></g><g><title>predicates_defined_on (1,047,492 samples, 0.28%)</title><rect x="36.0022%" y="101" width="0.2791%" height="15" fill="rgb(216,154,8)"/><text x="36.2522%" y="111.50"></text></g><g><title>inferred_outlives_of (386,515 samples, 0.10%)</title><rect x="36.1783%" y="85" width="0.1030%" height="15" fill="rgb(244,35,45)"/><text x="36.4283%" y="95.50"></text></g><g><title>type_collecting (4,823,118 samples, 1.29%)</title><rect x="35.0489%" y="149" width="1.2851%" height="15" fill="rgb(251,115,12)"/><text x="35.2989%" y="159.50"></text></g><g><title>collect_mod_item_types (4,806,348 samples, 1.28%)</title><rect x="35.0534%" y="133" width="1.2807%" height="15" fill="rgb(240,54,50)"/><text x="35.3034%" y="143.50"></text></g><g><title>evaluate_obligation (870,819 samples, 0.23%)</title><rect x="37.3204%" y="117" width="0.2320%" height="15" fill="rgb(233,84,52)"/><text x="37.5704%" y="127.50"></text></g><g><title>implied_outlives_bounds (392,485 samples, 0.10%)</title><rect x="37.5524%" y="117" width="0.1046%" height="15" fill="rgb(207,117,47)"/><text x="37.8024%" y="127.50"></text></g><g><title>param_env (552,055 samples, 0.15%)</title><rect x="37.6570%" y="117" width="0.1471%" height="15" fill="rgb(249,43,39)"/><text x="37.9070%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,830,967 samples, 1.55%)</title><rect x="36.4238%" y="133" width="1.5537%" height="15" fill="rgb(209,38,44)"/><text x="36.6738%" y="143.50"></text></g><g><title>region_scope_tree (635,354 samples, 0.17%)</title><rect x="37.8081%" y="117" width="0.1693%" height="15" fill="rgb(236,212,23)"/><text x="38.0581%" y="127.50"></text></g><g><title>evaluate_obligation (524,624 samples, 0.14%)</title><rect x="38.5318%" y="117" width="0.1398%" height="15" fill="rgb(242,79,21)"/><text x="38.7818%" y="127.50"></text></g><g><title>param_env (417,554 samples, 0.11%)</title><rect x="38.7039%" y="117" width="0.1113%" height="15" fill="rgb(211,96,35)"/><text x="38.9539%" y="127.50"></text></g><g><title>check_item_well_formed (3,462,693 samples, 0.92%)</title><rect x="37.9774%" y="133" width="0.9226%" height="15" fill="rgb(253,215,40)"/><text x="38.2274%" y="143.50"></text></g><g><title>analysis (104,372,077 samples, 27.81%)</title><rect x="11.0995%" y="181" width="27.8101%" height="15" fill="rgb(211,81,21)"/><text x="11.3495%" y="191.50">analysis</text></g><g><title>type_check_crate (65,944,042 samples, 17.57%)</title><rect x="21.3387%" y="165" width="17.5709%" height="15" fill="rgb(208,190,38)"/><text x="21.5887%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,658,007 samples, 2.57%)</title><rect x="36.3362%" y="149" width="2.5734%" height="15" fill="rgb(235,213,38)"/><text x="36.5862%" y="159.50">wf..</text></g><g><title>compute_debuginfo_type_name (396,623 samples, 0.11%)</title><rect x="44.4605%" y="149" width="0.1057%" height="15" fill="rgb(237,122,38)"/><text x="44.7105%" y="159.50"></text></g><g><title>layout_of (446,933 samples, 0.12%)</title><rect x="45.0905%" y="117" width="0.1191%" height="15" fill="rgb(244,218,35)"/><text x="45.3405%" y="127.50"></text></g><g><title>layout_of (1,157,760 samples, 0.31%)</title><rect x="44.9535%" y="133" width="0.3085%" height="15" fill="rgb(240,68,47)"/><text x="45.2035%" y="143.50"></text></g><g><title>param_env (1,298,790 samples, 0.35%)</title><rect x="45.2620%" y="133" width="0.3461%" height="15" fill="rgb(210,16,53)"/><text x="45.5120%" y="143.50"></text></g><g><title>predicates_of (449,184 samples, 0.12%)</title><rect x="45.4883%" y="117" width="0.1197%" height="15" fill="rgb(235,124,12)"/><text x="45.7383%" y="127.50"></text></g><g><title>fn_abi_of_instance (3,876,092 samples, 1.03%)</title><rect x="44.6265%" y="149" width="1.0328%" height="15" fill="rgb(224,169,11)"/><text x="44.8765%" y="159.50"></text></g><g><title>layout_of (529,736 samples, 0.14%)</title><rect x="45.8716%" y="117" width="0.1411%" height="15" fill="rgb(250,166,2)"/><text x="46.1216%" y="127.50"></text></g><g><title>layout_of (817,218 samples, 0.22%)</title><rect x="45.8098%" y="133" width="0.2177%" height="15" fill="rgb(242,216,29)"/><text x="46.0598%" y="143.50"></text></g><g><title>layout_of (1,270,375 samples, 0.34%)</title><rect x="45.7106%" y="149" width="0.3385%" height="15" fill="rgb(230,116,27)"/><text x="45.9606%" y="159.50"></text></g><g><title>codegen_module (25,265,121 samples, 6.73%)</title><rect x="39.4192%" y="165" width="6.7319%" height="15" fill="rgb(228,99,48)"/><text x="39.6692%" y="175.50">codegen_m..</text></g><g><title>codegen_crate (27,251,593 samples, 7.26%)</title><rect x="38.9115%" y="181" width="7.2612%" height="15" fill="rgb(253,11,6)"/><text x="39.1615%" y="191.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (123,173,544 samples, 32.82%)</title><rect x="46.2300%" y="165" width="32.8198%" height="15" fill="rgb(247,143,39)"/><text x="46.4800%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (117,222,073 samples, 31.23%)</title><rect x="47.8158%" y="149" width="31.2340%" height="15" fill="rgb(236,97,10)"/><text x="48.0658%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (131,509,059 samples, 35.04%)</title><rect x="46.1728%" y="181" width="35.0408%" height="15" fill="rgb(233,208,19)"/><text x="46.4228%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,120,775 samples, 2.16%)</title><rect x="79.0497%" y="165" width="2.1638%" height="15" fill="rgb(216,164,2)"/><text x="79.2997%" y="175.50">L..</text></g><g><title>metadata_register_crate (1,338,184 samples, 0.36%)</title><rect x="85.2540%" y="133" width="0.3566%" height="15" fill="rgb(220,129,5)"/><text x="85.5040%" y="143.50"></text></g><g><title>metadata_register_crate (477,596 samples, 0.13%)</title><rect x="85.4833%" y="117" width="0.1273%" height="15" fill="rgb(242,17,10)"/><text x="85.7333%" y="127.50"></text></g><g><title>macro_expand_crate (16,298,784 samples, 4.34%)</title><rect x="81.3325%" y="165" width="4.3428%" height="15" fill="rgb(242,107,0)"/><text x="81.5825%" y="175.50">macro..</text></g><g><title>expand_crate (16,280,324 samples, 4.34%)</title><rect x="81.3374%" y="149" width="4.3379%" height="15" fill="rgb(251,28,31)"/><text x="81.5874%" y="159.50">expan..</text></g><g><title>late_resolve_crate (2,567,786 samples, 0.68%)</title><rect x="85.7660%" y="149" width="0.6842%" height="15" fill="rgb(233,223,10)"/><text x="86.0160%" y="159.50"></text></g><g><title>configure_and_expand (19,778,249 samples, 5.27%)</title><rect x="81.2135%" y="181" width="5.2699%" height="15" fill="rgb(215,21,27)"/><text x="81.4635%" y="191.50">config..</text></g><g><title>resolve_crate (2,943,460 samples, 0.78%)</title><rect x="85.6992%" y="165" width="0.7843%" height="15" fill="rgb(232,23,21)"/><text x="85.9492%" y="175.50"></text></g><g><title>early_lint_checks (463,065 samples, 0.12%)</title><rect x="86.5382%" y="181" width="0.1234%" height="15" fill="rgb(244,5,23)"/><text x="86.7882%" y="191.50"></text></g><g><title>free_global_ctxt (5,159,162 samples, 1.37%)</title><rect x="86.6616%" y="181" width="1.3747%" height="15" fill="rgb(226,81,46)"/><text x="86.9116%" y="191.50"></text></g><g><title>item_attrs (391,624 samples, 0.10%)</title><rect x="88.8698%" y="85" width="0.1043%" height="15" fill="rgb(247,70,30)"/><text x="89.1198%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (377,774 samples, 0.10%)</title><rect x="88.8735%" y="69" width="0.1007%" height="15" fill="rgb(212,68,19)"/><text x="89.1235%" y="79.50"></text></g><g><title>codegen_fn_attrs (588,315 samples, 0.16%)</title><rect x="88.8454%" y="101" width="0.1568%" height="15" fill="rgb(240,187,13)"/><text x="89.0954%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (528,937 samples, 0.14%)</title><rect x="89.5006%" y="85" width="0.1409%" height="15" fill="rgb(223,113,26)"/><text x="89.7506%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,175,392 samples, 0.31%)</title><rect x="89.6416%" y="85" width="0.3132%" height="15" fill="rgb(206,192,2)"/><text x="89.8916%" y="95.50"></text></g><g><title>optimized_mir (3,558,937 samples, 0.95%)</title><rect x="89.0826%" y="101" width="0.9483%" height="15" fill="rgb(241,108,4)"/><text x="89.3326%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (526,586 samples, 0.14%)</title><rect x="90.1089%" y="85" width="0.1403%" height="15" fill="rgb(247,173,49)"/><text x="90.3589%" y="95.50"></text></g><g><title>specialization_graph_of (419,964 samples, 0.11%)</title><rect x="90.3160%" y="85" width="0.1119%" height="15" fill="rgb(224,114,35)"/><text x="90.5660%" y="95.50"></text></g><g><title>resolve_instance (2,056,060 samples, 0.55%)</title><rect x="90.0309%" y="101" width="0.5478%" height="15" fill="rgb(245,159,27)"/><text x="90.2809%" y="111.50"></text></g><g><title>type_of (494,894 samples, 0.13%)</title><rect x="90.4469%" y="85" width="0.1319%" height="15" fill="rgb(245,172,44)"/><text x="90.6969%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (476,994 samples, 0.13%)</title><rect x="90.4516%" y="69" width="0.1271%" height="15" fill="rgb(236,23,11)"/><text x="90.7016%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (7,945,421 samples, 2.12%)</title><rect x="88.6837%" y="117" width="2.1171%" height="15" fill="rgb(205,117,38)"/><text x="88.9337%" y="127.50">m..</text></g><g><title>vtable_entries (535,455 samples, 0.14%)</title><rect x="90.6581%" y="101" width="0.1427%" height="15" fill="rgb(237,72,25)"/><text x="90.9081%" y="111.50"></text></g><g><title>monomorphization_collector (8,007,092 samples, 2.13%)</title><rect x="88.6828%" y="133" width="2.1335%" height="15" fill="rgb(244,70,9)"/><text x="88.9328%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (629,297 samples, 0.17%)</title><rect x="90.8191%" y="117" width="0.1677%" height="15" fill="rgb(217,125,39)"/><text x="91.0691%" y="127.50"></text></g><g><title>symbol_name (577,667 samples, 0.15%)</title><rect x="90.8329%" y="101" width="0.1539%" height="15" fill="rgb(235,36,10)"/><text x="91.0829%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (9,027,312 samples, 2.41%)</title><rect x="88.6721%" y="149" width="2.4053%" height="15" fill="rgb(251,123,47)"/><text x="88.9221%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (980,210 samples, 0.26%)</title><rect x="90.8163%" y="133" width="0.2612%" height="15" fill="rgb(221,13,13)"/><text x="91.0663%" y="143.50"></text></g><g><title>exported_symbols (9,221,423 samples, 2.46%)</title><rect x="88.6602%" y="165" width="2.4571%" height="15" fill="rgb(238,131,9)"/><text x="88.9102%" y="175.50">ex..</text></g><g><title>layout_of (686,418 samples, 0.18%)</title><rect x="92.0803%" y="149" width="0.1829%" height="15" fill="rgb(211,50,8)"/><text x="92.3303%" y="159.50"></text></g><g><title>needs_drop_raw (477,145 samples, 0.13%)</title><rect x="93.4269%" y="133" width="0.1271%" height="15" fill="rgb(245,182,24)"/><text x="93.6769%" y="143.50"></text></g><g><title>is_copy_raw (412,745 samples, 0.11%)</title><rect x="93.4441%" y="117" width="0.1100%" height="15" fill="rgb(242,14,37)"/><text x="93.6941%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,877,792 samples, 1.30%)</title><rect x="92.2632%" y="149" width="1.2997%" height="15" fill="rgb(246,228,12)"/><text x="92.5132%" y="159.50"></text></g><g><title>optimized_mir (9,109,220 samples, 2.43%)</title><rect x="91.1395%" y="165" width="2.4272%" height="15" fill="rgb(213,55,15)"/><text x="91.3895%" y="175.50">op..</text></g><g><title>generate_crate_metadata (21,013,851 samples, 5.60%)</title><rect x="88.0362%" y="181" width="5.5992%" height="15" fill="rgb(209,9,3)"/><text x="88.2862%" y="191.50">generat..</text></g><g><title>hir_lowering (3,508,535 samples, 0.93%)</title><rect x="93.6354%" y="181" width="0.9349%" height="15" fill="rgb(230,59,30)"/><text x="93.8854%" y="191.50"></text></g><g><title>finish_ongoing_codegen (15,581,607 samples, 4.15%)</title><rect x="94.5764%" y="165" width="4.1517%" height="15" fill="rgb(209,121,21)"/><text x="94.8264%" y="175.50">finis..</text></g><g><title>link_crate (1,766,438 samples, 0.47%)</title><rect x="98.7281%" y="165" width="0.4707%" height="15" fill="rgb(220,109,13)"/><text x="98.9781%" y="175.50"></text></g><g><title>link_binary (1,748,408 samples, 0.47%)</title><rect x="98.7329%" y="149" width="0.4659%" height="15" fill="rgb(232,18,1)"/><text x="98.9829%" y="159.50"></text></g><g><title>link_rlib (1,202,372 samples, 0.32%)</title><rect x="98.8784%" y="133" width="0.3204%" height="15" fill="rgb(215,41,42)"/><text x="99.1284%" y="143.50"></text></g><g><title>link (17,382,905 samples, 4.63%)</title><rect x="94.5702%" y="181" width="4.6317%" height="15" fill="rgb(224,123,36)"/><text x="94.8202%" y="191.50">link</text></g><g><title>parse_crate (461,824 samples, 0.12%)</title><rect x="99.2019%" y="181" width="0.1231%" height="15" fill="rgb(240,125,3)"/><text x="99.4519%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,831,988 samples, 0.49%)</title><rect x="99.3903%" y="181" width="0.4881%" height="15" fill="rgb(205,98,50)"/><text x="99.6403%" y="191.50"></text></g><g><title>all (375,303,015 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (375,303,015 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>