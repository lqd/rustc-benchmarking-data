<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (46,109,782 samples, 10.98%)</title><rect x="0.1616%" y="181" width="10.9822%" height="15" fill="rgb(227,0,7)"/><text x="0.4116%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,074,834 samples, 0.26%)</title><rect x="16.9238%" y="69" width="0.2560%" height="15" fill="rgb(217,0,24)"/><text x="17.1738%" y="79.50"></text></g><g><title>is_copy_raw (847,673 samples, 0.20%)</title><rect x="16.9779%" y="53" width="0.2019%" height="15" fill="rgb(221,193,54)"/><text x="17.2279%" y="63.50"></text></g><g><title>evaluate_obligation (703,871 samples, 0.17%)</title><rect x="17.0122%" y="37" width="0.1676%" height="15" fill="rgb(248,212,6)"/><text x="17.2622%" y="47.50"></text></g><g><title>resolve_instance (699,544 samples, 0.17%)</title><rect x="17.1798%" y="69" width="0.1666%" height="15" fill="rgb(208,68,35)"/><text x="17.4298%" y="79.50"></text></g><g><title>thir_body (1,652,814 samples, 0.39%)</title><rect x="17.3550%" y="69" width="0.3937%" height="15" fill="rgb(232,128,0)"/><text x="17.6050%" y="79.50"></text></g><g><title>mir_const (10,402,517 samples, 2.48%)</title><rect x="15.2761%" y="117" width="2.4776%" height="15" fill="rgb(207,160,47)"/><text x="15.5261%" y="127.50">mi..</text></g><g><title>unsafety_check_result (8,796,609 samples, 2.10%)</title><rect x="15.6586%" y="101" width="2.0951%" height="15" fill="rgb(228,23,34)"/><text x="15.9086%" y="111.50">u..</text></g><g><title>mir_built (7,776,726 samples, 1.85%)</title><rect x="15.9015%" y="85" width="1.8522%" height="15" fill="rgb(218,30,26)"/><text x="16.1515%" y="95.50">m..</text></g><g><title>mir_promoted (11,719,273 samples, 2.79%)</title><rect x="14.9910%" y="133" width="2.7912%" height="15" fill="rgb(220,122,19)"/><text x="15.2410%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (497,545 samples, 0.12%)</title><rect x="17.7822%" y="133" width="0.1185%" height="15" fill="rgb(250,228,42)"/><text x="18.0322%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,698,025 samples, 0.40%)</title><rect x="17.9918%" y="133" width="0.4044%" height="15" fill="rgb(240,193,28)"/><text x="18.2418%" y="143.50"></text></g><g><title>MIR_borrow_checking (30,071,271 samples, 7.16%)</title><rect x="11.2382%" y="165" width="7.1622%" height="15" fill="rgb(216,20,37)"/><text x="11.4882%" y="175.50">MIR_borrow..</text></g><g><title>mir_borrowck (29,904,831 samples, 7.12%)</title><rect x="11.2778%" y="149" width="7.1226%" height="15" fill="rgb(206,188,39)"/><text x="11.5278%" y="159.50">mir_borrow..</text></g><g><title>codegen_fn_attrs (494,205 samples, 0.12%)</title><rect x="18.5600%" y="133" width="0.1177%" height="15" fill="rgb(217,207,13)"/><text x="18.8100%" y="143.50"></text></g><g><title>should_inherit_track_caller (426,595 samples, 0.10%)</title><rect x="18.5761%" y="117" width="0.1016%" height="15" fill="rgb(231,73,38)"/><text x="18.8261%" y="127.50"></text></g><g><title>check_mod_attrs (801,468 samples, 0.19%)</title><rect x="18.4868%" y="149" width="0.1909%" height="15" fill="rgb(225,20,46)"/><text x="18.7368%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (681,787 samples, 0.16%)</title><rect x="18.7419%" y="149" width="0.1624%" height="15" fill="rgb(210,31,41)"/><text x="18.9919%" y="159.50"></text></g><g><title>misc_checking_1 (1,845,248 samples, 0.44%)</title><rect x="18.4820%" y="165" width="0.4395%" height="15" fill="rgb(221,200,47)"/><text x="18.7320%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (607,906 samples, 0.14%)</title><rect x="18.9219%" y="149" width="0.1448%" height="15" fill="rgb(226,26,5)"/><text x="19.1719%" y="159.50"></text></g><g><title>check_mod_liveness (475,015 samples, 0.11%)</title><rect x="18.9535%" y="133" width="0.1131%" height="15" fill="rgb(249,33,26)"/><text x="19.2035%" y="143.50"></text></g><g><title>misc_checking_2 (1,440,285 samples, 0.34%)</title><rect x="18.9215%" y="165" width="0.3430%" height="15" fill="rgb(235,183,28)"/><text x="19.1715%" y="175.50"></text></g><g><title>match_checking (830,839 samples, 0.20%)</title><rect x="19.0667%" y="149" width="0.1979%" height="15" fill="rgb(221,5,38)"/><text x="19.3167%" y="159.50"></text></g><g><title>check_match (789,689 samples, 0.19%)</title><rect x="19.0765%" y="133" width="0.1881%" height="15" fill="rgb(247,18,42)"/><text x="19.3265%" y="143.50"></text></g><g><title>death_checking (603,576 samples, 0.14%)</title><rect x="19.3323%" y="149" width="0.1438%" height="15" fill="rgb(241,131,45)"/><text x="19.5823%" y="159.50"></text></g><g><title>param_env (476,714 samples, 0.11%)</title><rect x="19.7046%" y="117" width="0.1135%" height="15" fill="rgb(249,31,29)"/><text x="19.9546%" y="127.50"></text></g><g><title>crate_lints (2,595,146 samples, 0.62%)</title><rect x="19.4764%" y="133" width="0.6181%" height="15" fill="rgb(225,111,53)"/><text x="19.7264%" y="143.50"></text></g><g><title>type_of (1,096,771 samples, 0.26%)</title><rect x="19.8333%" y="117" width="0.2612%" height="15" fill="rgb(238,160,17)"/><text x="20.0833%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (866,836 samples, 0.21%)</title><rect x="19.8881%" y="101" width="0.2065%" height="15" fill="rgb(214,148,48)"/><text x="20.1381%" y="111.50"></text></g><g><title>lint_checking (3,199,502 samples, 0.76%)</title><rect x="19.4760%" y="149" width="0.7620%" height="15" fill="rgb(232,36,49)"/><text x="19.7260%" y="159.50"></text></g><g><title>module_lints (602,666 samples, 0.14%)</title><rect x="20.0945%" y="133" width="0.1435%" height="15" fill="rgb(209,103,24)"/><text x="20.3445%" y="143.50"></text></g><g><title>lint_mod (596,416 samples, 0.14%)</title><rect x="20.0960%" y="117" width="0.1421%" height="15" fill="rgb(229,88,8)"/><text x="20.3460%" y="127.50"></text></g><g><title>privacy_checking_modules (1,056,570 samples, 0.25%)</title><rect x="20.3264%" y="149" width="0.2516%" height="15" fill="rgb(213,181,19)"/><text x="20.5764%" y="159.50"></text></g><g><title>check_mod_privacy (1,051,850 samples, 0.25%)</title><rect x="20.3276%" y="133" width="0.2505%" height="15" fill="rgb(254,191,54)"/><text x="20.5776%" y="143.50"></text></g><g><title>misc_checking_3 (5,531,265 samples, 1.32%)</title><rect x="19.2646%" y="165" width="1.3174%" height="15" fill="rgb(241,83,37)"/><text x="19.5146%" y="175.50"></text></g><g><title>impl_parent (2,699,898 samples, 0.64%)</title><rect x="21.8299%" y="101" width="0.6430%" height="15" fill="rgb(233,36,39)"/><text x="22.0799%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,570,016 samples, 0.37%)</title><rect x="22.0990%" y="85" width="0.3739%" height="15" fill="rgb(226,3,54)"/><text x="22.3490%" y="95.50"></text></g><g><title>impl_trait_ref (5,694,696 samples, 1.36%)</title><rect x="22.4730%" y="101" width="1.3563%" height="15" fill="rgb(245,192,40)"/><text x="22.7230%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,571,634 samples, 1.09%)</title><rect x="22.7405%" y="85" width="1.0888%" height="15" fill="rgb(238,167,29)"/><text x="22.9905%" y="95.50"></text></g><g><title>trait_impls_of (996,429 samples, 0.24%)</title><rect x="23.8353%" y="101" width="0.2373%" height="15" fill="rgb(232,182,51)"/><text x="24.0853%" y="111.50"></text></g><g><title>coherent_trait (14,538,916 samples, 3.46%)</title><rect x="20.6101%" y="133" width="3.4628%" height="15" fill="rgb(231,60,39)"/><text x="20.8601%" y="143.50">coh..</text></g><g><title>specialization_graph_of (14,178,342 samples, 3.38%)</title><rect x="20.6959%" y="117" width="3.3769%" height="15" fill="rgb(208,69,12)"/><text x="20.9459%" y="127.50">spe..</text></g><g><title>coherence_checking (14,650,178 samples, 3.49%)</title><rect x="20.6030%" y="149" width="3.4893%" height="15" fill="rgb(235,93,37)"/><text x="20.8530%" y="159.50">coh..</text></g><g><title>associated_item (771,337 samples, 0.18%)</title><rect x="31.5607%" y="85" width="0.1837%" height="15" fill="rgb(213,116,39)"/><text x="31.8107%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (632,805 samples, 0.15%)</title><rect x="31.5937%" y="69" width="0.1507%" height="15" fill="rgb(222,207,29)"/><text x="31.8437%" y="79.50"></text></g><g><title>associated_items (1,035,700 samples, 0.25%)</title><rect x="31.5084%" y="101" width="0.2467%" height="15" fill="rgb(206,96,30)"/><text x="31.7584%" y="111.50"></text></g><g><title>dropck_outlives (580,789 samples, 0.14%)</title><rect x="31.7757%" y="101" width="0.1383%" height="15" fill="rgb(218,138,4)"/><text x="32.0257%" y="111.50"></text></g><g><title>evaluate_obligation (2,930,135 samples, 0.70%)</title><rect x="31.9140%" y="101" width="0.6979%" height="15" fill="rgb(250,191,14)"/><text x="32.1640%" y="111.50"></text></g><g><title>method_autoderef_steps (433,765 samples, 0.10%)</title><rect x="32.8025%" y="101" width="0.1033%" height="15" fill="rgb(239,60,40)"/><text x="33.0525%" y="111.50"></text></g><g><title>item_bodies_checking (37,780,709 samples, 9.00%)</title><rect x="24.1019%" y="149" width="8.9984%" height="15" fill="rgb(206,27,48)"/><text x="24.3519%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (37,776,809 samples, 9.00%)</title><rect x="24.1028%" y="133" width="8.9975%" height="15" fill="rgb(225,35,8)"/><text x="24.3528%" y="143.50">typeck_item_b..</text></g><g><title>typeck (37,658,279 samples, 8.97%)</title><rect x="24.1311%" y="117" width="8.9693%" height="15" fill="rgb(250,213,24)"/><text x="24.3811%" y="127.50">typeck</text></g><g><title>impl_trait_ref (474,524 samples, 0.11%)</title><rect x="33.6019%" y="85" width="0.1130%" height="15" fill="rgb(247,123,22)"/><text x="33.8519%" y="95.50"></text></g><g><title>evaluate_obligation (1,525,525 samples, 0.36%)</title><rect x="33.4303%" y="101" width="0.3633%" height="15" fill="rgb(231,138,38)"/><text x="33.6803%" y="111.50"></text></g><g><title>item_types_checking (3,151,181 samples, 0.75%)</title><rect x="33.1003%" y="149" width="0.7505%" height="15" fill="rgb(231,145,46)"/><text x="33.3503%" y="159.50"></text></g><g><title>check_mod_item_types (3,144,781 samples, 0.75%)</title><rect x="33.1018%" y="133" width="0.7490%" height="15" fill="rgb(251,118,11)"/><text x="33.3518%" y="143.50"></text></g><g><title>typeck (2,088,011 samples, 0.50%)</title><rect x="33.3535%" y="117" width="0.4973%" height="15" fill="rgb(217,147,25)"/><text x="33.6035%" y="127.50"></text></g><g><title>mir_borrowck (760,479 samples, 0.18%)</title><rect x="34.1647%" y="37" width="0.1811%" height="15" fill="rgb(247,81,37)"/><text x="34.4147%" y="47.50"></text></g><g><title>mir_for_ctfe (1,070,622 samples, 0.25%)</title><rect x="34.0914%" y="69" width="0.2550%" height="15" fill="rgb(209,12,38)"/><text x="34.3414%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (989,202 samples, 0.24%)</title><rect x="34.1108%" y="53" width="0.2356%" height="15" fill="rgb(227,1,9)"/><text x="34.3608%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,483,395 samples, 0.59%)</title><rect x="33.9573%" y="117" width="0.5915%" height="15" fill="rgb(248,47,43)"/><text x="34.2073%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,468,825 samples, 0.59%)</title><rect x="33.9607%" y="101" width="0.5880%" height="15" fill="rgb(221,10,30)"/><text x="34.2107%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,460,845 samples, 0.59%)</title><rect x="33.9626%" y="85" width="0.5861%" height="15" fill="rgb(210,229,1)"/><text x="34.2126%" y="95.50"></text></g><g><title>typeck (632,958 samples, 0.15%)</title><rect x="34.3980%" y="69" width="0.1508%" height="15" fill="rgb(222,148,37)"/><text x="34.6480%" y="79.50"></text></g><g><title>predicates_of (951,690 samples, 0.23%)</title><rect x="34.7926%" y="117" width="0.2267%" height="15" fill="rgb(234,67,33)"/><text x="35.0426%" y="127.50"></text></g><g><title>predicates_defined_on (873,258 samples, 0.21%)</title><rect x="34.8113%" y="101" width="0.2080%" height="15" fill="rgb(247,98,35)"/><text x="35.0613%" y="111.50"></text></g><g><title>type_collecting (5,025,711 samples, 1.20%)</title><rect x="33.8515%" y="149" width="1.1970%" height="15" fill="rgb(247,138,52)"/><text x="34.1015%" y="159.50"></text></g><g><title>collect_mod_item_types (5,015,351 samples, 1.19%)</title><rect x="33.8539%" y="133" width="1.1945%" height="15" fill="rgb(213,79,30)"/><text x="34.1039%" y="143.50"></text></g><g><title>evaluate_obligation (557,666 samples, 0.13%)</title><rect x="35.7165%" y="117" width="0.1328%" height="15" fill="rgb(246,177,23)"/><text x="35.9665%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,415,185 samples, 1.05%)</title><rect x="35.1192%" y="133" width="1.0516%" height="15" fill="rgb(230,62,27)"/><text x="35.3692%" y="143.50"></text></g><g><title>region_scope_tree (648,518 samples, 0.15%)</title><rect x="36.0163%" y="117" width="0.1545%" height="15" fill="rgb(216,154,8)"/><text x="36.2663%" y="127.50"></text></g><g><title>evaluate_obligation (647,528 samples, 0.15%)</title><rect x="36.5552%" y="117" width="0.1542%" height="15" fill="rgb(244,35,45)"/><text x="36.8052%" y="127.50"></text></g><g><title>analysis (108,061,464 samples, 25.74%)</title><rect x="11.1438%" y="181" width="25.7375%" height="15" fill="rgb(251,115,12)"/><text x="11.3938%" y="191.50">analysis</text></g><g><title>type_check_crate (68,434,237 samples, 16.30%)</title><rect x="20.5820%" y="165" width="16.2993%" height="15" fill="rgb(240,54,50)"/><text x="20.8320%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,687,887 samples, 1.83%)</title><rect x="35.0502%" y="149" width="1.8311%" height="15" fill="rgb(233,84,52)"/><text x="35.3002%" y="159.50">w..</text></g><g><title>check_item_well_formed (2,983,049 samples, 0.71%)</title><rect x="36.1708%" y="133" width="0.7105%" height="15" fill="rgb(207,117,47)"/><text x="36.4208%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (462,366 samples, 0.11%)</title><rect x="44.6482%" y="149" width="0.1101%" height="15" fill="rgb(249,43,39)"/><text x="44.8982%" y="159.50"></text></g><g><title>item_attrs (1,180,842 samples, 0.28%)</title><rect x="45.3248%" y="117" width="0.2812%" height="15" fill="rgb(209,38,44)"/><text x="45.5748%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,166,102 samples, 0.28%)</title><rect x="45.3283%" y="101" width="0.2777%" height="15" fill="rgb(236,212,23)"/><text x="45.5783%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,324,983 samples, 0.32%)</title><rect x="45.2980%" y="133" width="0.3156%" height="15" fill="rgb(242,79,21)"/><text x="45.5480%" y="143.50"></text></g><g><title>layout_of (903,507 samples, 0.22%)</title><rect x="45.7947%" y="117" width="0.2152%" height="15" fill="rgb(211,96,35)"/><text x="46.0447%" y="127.50"></text></g><g><title>layout_of (1,910,750 samples, 0.46%)</title><rect x="45.6253%" y="133" width="0.4551%" height="15" fill="rgb(253,215,40)"/><text x="45.8753%" y="143.50"></text></g><g><title>predicates_of (807,419 samples, 0.19%)</title><rect x="46.4705%" y="117" width="0.1923%" height="15" fill="rgb(211,81,21)"/><text x="46.7205%" y="127.50"></text></g><g><title>predicates_defined_on (595,606 samples, 0.14%)</title><rect x="46.5210%" y="101" width="0.1419%" height="15" fill="rgb(208,190,38)"/><text x="46.7710%" y="111.50"></text></g><g><title>param_env (2,450,997 samples, 0.58%)</title><rect x="46.0804%" y="133" width="0.5838%" height="15" fill="rgb(235,213,38)"/><text x="46.3304%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,815,568 samples, 1.86%)</title><rect x="44.8606%" y="149" width="1.8615%" height="15" fill="rgb(237,122,38)"/><text x="45.1106%" y="159.50">f..</text></g><g><title>layout_of (526,205 samples, 0.13%)</title><rect x="47.0008%" y="101" width="0.1253%" height="15" fill="rgb(244,218,35)"/><text x="47.2508%" y="111.50"></text></g><g><title>layout_of (659,427 samples, 0.16%)</title><rect x="46.9801%" y="117" width="0.1571%" height="15" fill="rgb(240,68,47)"/><text x="47.2301%" y="127.50"></text></g><g><title>layout_of (893,399 samples, 0.21%)</title><rect x="46.9362%" y="133" width="0.2128%" height="15" fill="rgb(210,16,53)"/><text x="47.1862%" y="143.50"></text></g><g><title>layout_of (1,543,800 samples, 0.37%)</title><rect x="46.7986%" y="149" width="0.3677%" height="15" fill="rgb(235,124,12)"/><text x="47.0486%" y="159.50"></text></g><g><title>symbol_name (451,594 samples, 0.11%)</title><rect x="47.1741%" y="149" width="0.1076%" height="15" fill="rgb(224,169,11)"/><text x="47.4241%" y="159.50"></text></g><g><title>codegen_module (41,327,757 samples, 9.84%)</title><rect x="37.4572%" y="165" width="9.8432%" height="15" fill="rgb(250,166,2)"/><text x="37.7072%" y="175.50">codegen_module</text></g><g><title>codegen_crate (43,818,799 samples, 10.44%)</title><rect x="36.8830%" y="181" width="10.4365%" height="15" fill="rgb(242,216,29)"/><text x="37.1330%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (150,689,249 samples, 35.89%)</title><rect x="47.3732%" y="165" width="35.8904%" height="15" fill="rgb(230,116,27)"/><text x="47.6232%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (142,051,425 samples, 33.83%)</title><rect x="49.4305%" y="149" width="33.8331%" height="15" fill="rgb(228,99,48)"/><text x="49.6805%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (160,216,104 samples, 38.16%)</title><rect x="47.3195%" y="181" width="38.1594%" height="15" fill="rgb(253,11,6)"/><text x="47.5695%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,301,394 samples, 2.22%)</title><rect x="83.2636%" y="165" width="2.2154%" height="15" fill="rgb(247,143,39)"/><text x="83.5136%" y="175.50">L..</text></g><g><title>metadata_register_crate (1,343,913 samples, 0.32%)</title><rect x="89.3227%" y="133" width="0.3201%" height="15" fill="rgb(236,97,10)"/><text x="89.5727%" y="143.50"></text></g><g><title>metadata_register_crate (469,755 samples, 0.11%)</title><rect x="89.5309%" y="117" width="0.1119%" height="15" fill="rgb(233,208,19)"/><text x="89.7809%" y="127.50"></text></g><g><title>macro_expand_crate (17,275,843 samples, 4.11%)</title><rect x="85.5854%" y="165" width="4.1147%" height="15" fill="rgb(216,164,2)"/><text x="85.8354%" y="175.50">macr..</text></g><g><title>expand_crate (17,258,743 samples, 4.11%)</title><rect x="85.5895%" y="149" width="4.1106%" height="15" fill="rgb(220,129,5)"/><text x="85.8395%" y="159.50">expa..</text></g><g><title>late_resolve_crate (3,012,860 samples, 0.72%)</title><rect x="89.7872%" y="149" width="0.7176%" height="15" fill="rgb(242,17,10)"/><text x="90.0372%" y="159.50"></text></g><g><title>configure_and_expand (21,245,443 samples, 5.06%)</title><rect x="85.4789%" y="181" width="5.0601%" height="15" fill="rgb(242,107,0)"/><text x="85.7289%" y="191.50">config..</text></g><g><title>resolve_crate (3,430,384 samples, 0.82%)</title><rect x="89.7220%" y="165" width="0.8170%" height="15" fill="rgb(251,28,31)"/><text x="89.9720%" y="175.50"></text></g><g><title>early_lint_checks (536,945 samples, 0.13%)</title><rect x="90.5978%" y="181" width="0.1279%" height="15" fill="rgb(233,223,10)"/><text x="90.8478%" y="191.50"></text></g><g><title>free_global_ctxt (5,996,050 samples, 1.43%)</title><rect x="90.7257%" y="181" width="1.4281%" height="15" fill="rgb(215,21,27)"/><text x="90.9757%" y="191.50"></text></g><g><title>item_attrs (704,716 samples, 0.17%)</title><rect x="92.9261%" y="85" width="0.1678%" height="15" fill="rgb(232,23,21)"/><text x="93.1761%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (678,326 samples, 0.16%)</title><rect x="92.9324%" y="69" width="0.1616%" height="15" fill="rgb(244,5,23)"/><text x="93.1824%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,076,339 samples, 0.26%)</title><rect x="92.8876%" y="101" width="0.2564%" height="15" fill="rgb(226,81,46)"/><text x="93.1376%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (885,829 samples, 0.21%)</title><rect x="93.7011%" y="85" width="0.2110%" height="15" fill="rgb(247,70,30)"/><text x="93.9511%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,362,223 samples, 0.32%)</title><rect x="93.9121%" y="85" width="0.3244%" height="15" fill="rgb(212,68,19)"/><text x="94.1621%" y="95.50"></text></g><g><title>optimized_mir (4,513,156 samples, 1.07%)</title><rect x="93.2594%" y="101" width="1.0749%" height="15" fill="rgb(240,187,13)"/><text x="93.5094%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,231,319 samples, 0.29%)</title><rect x="94.4397%" y="85" width="0.2933%" height="15" fill="rgb(223,113,26)"/><text x="94.6897%" y="95.50"></text></g><g><title>resolve_instance (2,494,964 samples, 0.59%)</title><rect x="94.3343%" y="101" width="0.5942%" height="15" fill="rgb(206,192,2)"/><text x="94.5843%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (10,484,895 samples, 2.50%)</title><rect x="92.6596%" y="117" width="2.4972%" height="15" fill="rgb(241,108,4)"/><text x="92.9096%" y="127.50">mo..</text></g><g><title>vtable_entries (562,224 samples, 0.13%)</title><rect x="95.0230%" y="101" width="0.1339%" height="15" fill="rgb(247,173,49)"/><text x="95.2730%" y="111.50"></text></g><g><title>monomorphization_collector (10,548,606 samples, 2.51%)</title><rect x="92.6587%" y="133" width="2.5124%" height="15" fill="rgb(224,114,35)"/><text x="92.9087%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (984,110 samples, 0.23%)</title><rect x="95.1736%" y="117" width="0.2344%" height="15" fill="rgb(245,159,27)"/><text x="95.4236%" y="127.50"></text></g><g><title>symbol_name (898,990 samples, 0.21%)</title><rect x="95.1939%" y="101" width="0.2141%" height="15" fill="rgb(245,172,44)"/><text x="95.4439%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (12,081,152 samples, 2.88%)</title><rect x="92.6511%" y="149" width="2.8774%" height="15" fill="rgb(236,23,11)"/><text x="92.9011%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,500,966 samples, 0.36%)</title><rect x="95.1711%" y="133" width="0.3575%" height="15" fill="rgb(205,117,38)"/><text x="95.4211%" y="143.50"></text></g><g><title>cgu_partitioning (506,266 samples, 0.12%)</title><rect x="95.4080%" y="117" width="0.1206%" height="15" fill="rgb(237,72,25)"/><text x="95.6580%" y="127.50"></text></g><g><title>exported_symbols (12,282,743 samples, 2.93%)</title><rect x="92.6386%" y="165" width="2.9254%" height="15" fill="rgb(244,70,9)"/><text x="92.8886%" y="175.50">ex..</text></g><g><title>layout_of (556,709 samples, 0.13%)</title><rect x="96.3613%" y="149" width="0.1326%" height="15" fill="rgb(217,125,39)"/><text x="96.6113%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,684,445 samples, 1.12%)</title><rect x="96.4939%" y="149" width="1.1157%" height="15" fill="rgb(235,36,10)"/><text x="96.7439%" y="159.50"></text></g><g><title>optimized_mir (8,529,717 samples, 2.03%)</title><rect x="95.5820%" y="165" width="2.0316%" height="15" fill="rgb(251,123,47)"/><text x="95.8320%" y="175.50">o..</text></g><g><title>generate_crate_metadata (23,165,192 samples, 5.52%)</title><rect x="92.1538%" y="181" width="5.5174%" height="15" fill="rgb(221,13,13)"/><text x="92.4038%" y="191.50">generat..</text></g><g><title>hir_lowering (3,786,758 samples, 0.90%)</title><rect x="97.6712%" y="181" width="0.9019%" height="15" fill="rgb(238,131,9)"/><text x="97.9212%" y="191.50"></text></g><g><title>finish_ongoing_codegen (622,666 samples, 0.15%)</title><rect x="98.5967%" y="165" width="0.1483%" height="15" fill="rgb(211,50,8)"/><text x="98.8467%" y="175.50"></text></g><g><title>link_crate (2,137,772 samples, 0.51%)</title><rect x="98.7450%" y="165" width="0.5092%" height="15" fill="rgb(245,182,24)"/><text x="98.9950%" y="175.50"></text></g><g><title>link_binary (2,116,092 samples, 0.50%)</title><rect x="98.7502%" y="149" width="0.5040%" height="15" fill="rgb(242,14,37)"/><text x="99.0002%" y="159.50"></text></g><g><title>link_rlib (1,447,674 samples, 0.34%)</title><rect x="98.9094%" y="133" width="0.3448%" height="15" fill="rgb(246,228,12)"/><text x="99.1594%" y="143.50"></text></g><g><title>link (2,872,089 samples, 0.68%)</title><rect x="98.5731%" y="181" width="0.6841%" height="15" fill="rgb(213,55,15)"/><text x="98.8231%" y="191.50"></text></g><g><title>parse_crate (533,725 samples, 0.13%)</title><rect x="99.2572%" y="181" width="0.1271%" height="15" fill="rgb(209,9,3)"/><text x="99.5072%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,793,938 samples, 0.43%)</title><rect x="99.4462%" y="181" width="0.4273%" height="15" fill="rgb(230,59,30)"/><text x="99.6962%" y="191.50"></text></g><g><title>all (419,859,717 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (419,859,717 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (434,395 samples, 0.10%)</title><rect x="99.8965%" y="181" width="0.1035%" height="15" fill="rgb(232,18,1)"/><text x="100.1465%" y="191.50"></text></g></svg></svg>