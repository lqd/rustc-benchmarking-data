<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (56,767,483 samples, 10.07%)</title><rect x="0.1136%" y="181" width="10.0736%" height="15" fill="rgb(227,0,7)"/><text x="0.3636%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (647,475 samples, 0.11%)</title><rect x="17.7437%" y="85" width="0.1149%" height="15" fill="rgb(217,0,24)"/><text x="17.9937%" y="95.50"></text></g><g><title>adt_drop_tys (586,268 samples, 0.10%)</title><rect x="19.7119%" y="53" width="0.1040%" height="15" fill="rgb(221,193,54)"/><text x="19.9619%" y="63.50"></text></g><g><title>needs_drop_raw (3,217,957 samples, 0.57%)</title><rect x="19.6538%" y="69" width="0.5710%" height="15" fill="rgb(248,212,6)"/><text x="19.9038%" y="79.50"></text></g><g><title>is_copy_raw (2,304,327 samples, 0.41%)</title><rect x="19.8159%" y="53" width="0.4089%" height="15" fill="rgb(208,68,35)"/><text x="20.0659%" y="63.50"></text></g><g><title>evaluate_obligation (1,954,421 samples, 0.35%)</title><rect x="19.8780%" y="37" width="0.3468%" height="15" fill="rgb(232,128,0)"/><text x="20.1280%" y="47.50"></text></g><g><title>specialization_graph_of (869,198 samples, 0.15%)</title><rect x="20.3539%" y="53" width="0.1542%" height="15" fill="rgb(207,160,47)"/><text x="20.6039%" y="63.50"></text></g><g><title>resolve_instance (1,674,898 samples, 0.30%)</title><rect x="20.2251%" y="69" width="0.2972%" height="15" fill="rgb(228,23,34)"/><text x="20.4751%" y="79.50"></text></g><g><title>thir_body (3,378,215 samples, 0.60%)</title><rect x="20.5303%" y="69" width="0.5995%" height="15" fill="rgb(218,30,26)"/><text x="20.7803%" y="79.50"></text></g><g><title>mir_const (22,944,664 samples, 4.07%)</title><rect x="17.0614%" y="117" width="4.0716%" height="15" fill="rgb(220,122,19)"/><text x="17.3114%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (20,262,791 samples, 3.60%)</title><rect x="17.5373%" y="101" width="3.5957%" height="15" fill="rgb(250,228,42)"/><text x="17.7873%" y="111.50">unsa..</text></g><g><title>mir_built (18,452,195 samples, 3.27%)</title><rect x="17.8586%" y="85" width="3.2744%" height="15" fill="rgb(240,193,28)"/><text x="18.1086%" y="95.50">mir..</text></g><g><title>mir_promoted (25,267,771 samples, 4.48%)</title><rect x="16.6579%" y="133" width="4.4839%" height="15" fill="rgb(216,20,37)"/><text x="16.9079%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (684,325 samples, 0.12%)</title><rect x="21.1418%" y="133" width="0.1214%" height="15" fill="rgb(206,188,39)"/><text x="21.3918%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,373,293 samples, 0.24%)</title><rect x="21.2632%" y="133" width="0.2437%" height="15" fill="rgb(217,207,13)"/><text x="21.5132%" y="143.50"></text></g><g><title>normalize_projection_ty (911,500 samples, 0.16%)</title><rect x="21.3452%" y="117" width="0.1617%" height="15" fill="rgb(231,73,38)"/><text x="21.5952%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,048,969 samples, 0.72%)</title><rect x="21.6042%" y="133" width="0.7185%" height="15" fill="rgb(225,20,46)"/><text x="21.8542%" y="143.50"></text></g><g><title>MIR_borrow_checking (67,739,533 samples, 12.02%)</title><rect x="10.3056%" y="165" width="12.0207%" height="15" fill="rgb(210,31,41)"/><text x="10.5556%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (67,603,273 samples, 12.00%)</title><rect x="10.3297%" y="149" width="11.9965%" height="15" fill="rgb(221,200,47)"/><text x="10.5797%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (931,919 samples, 0.17%)</title><rect x="22.3910%" y="149" width="0.1654%" height="15" fill="rgb(226,26,5)"/><text x="22.6410%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (594,206 samples, 0.11%)</title><rect x="22.6162%" y="149" width="0.1054%" height="15" fill="rgb(249,33,26)"/><text x="22.8662%" y="159.50"></text></g><g><title>misc_checking_1 (1,942,219 samples, 0.34%)</title><rect x="22.3866%" y="165" width="0.3447%" height="15" fill="rgb(235,183,28)"/><text x="22.6366%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,512,715 samples, 0.27%)</title><rect x="22.7316%" y="149" width="0.2684%" height="15" fill="rgb(221,5,38)"/><text x="22.9816%" y="159.50"></text></g><g><title>check_mod_liveness (1,271,982 samples, 0.23%)</title><rect x="22.7743%" y="133" width="0.2257%" height="15" fill="rgb(247,18,42)"/><text x="23.0243%" y="143.50"></text></g><g><title>misc_checking_2 (3,367,984 samples, 0.60%)</title><rect x="22.7313%" y="165" width="0.5977%" height="15" fill="rgb(241,131,45)"/><text x="22.9813%" y="175.50"></text></g><g><title>match_checking (1,853,539 samples, 0.33%)</title><rect x="23.0000%" y="149" width="0.3289%" height="15" fill="rgb(249,31,29)"/><text x="23.2500%" y="159.50"></text></g><g><title>check_match (1,819,469 samples, 0.32%)</title><rect x="23.0061%" y="133" width="0.3229%" height="15" fill="rgb(225,111,53)"/><text x="23.2561%" y="143.50"></text></g><g><title>death_checking (775,628 samples, 0.14%)</title><rect x="23.3744%" y="149" width="0.1376%" height="15" fill="rgb(238,160,17)"/><text x="23.6244%" y="159.50"></text></g><g><title>crate_lints (2,672,037 samples, 0.47%)</title><rect x="23.5123%" y="133" width="0.4742%" height="15" fill="rgb(214,148,48)"/><text x="23.7623%" y="143.50"></text></g><g><title>type_of (1,091,851 samples, 0.19%)</title><rect x="23.7927%" y="117" width="0.1938%" height="15" fill="rgb(232,36,49)"/><text x="24.0427%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (862,371 samples, 0.15%)</title><rect x="23.8334%" y="101" width="0.1530%" height="15" fill="rgb(209,103,24)"/><text x="24.0834%" y="111.50"></text></g><g><title>lint_checking (4,343,995 samples, 0.77%)</title><rect x="23.5120%" y="149" width="0.7709%" height="15" fill="rgb(229,88,8)"/><text x="23.7620%" y="159.50"></text></g><g><title>module_lints (1,670,498 samples, 0.30%)</title><rect x="23.9864%" y="133" width="0.2964%" height="15" fill="rgb(213,181,19)"/><text x="24.2364%" y="143.50"></text></g><g><title>lint_mod (1,664,398 samples, 0.30%)</title><rect x="23.9875%" y="117" width="0.2954%" height="15" fill="rgb(254,191,54)"/><text x="24.2375%" y="127.50"></text></g><g><title>privacy_checking_modules (2,081,901 samples, 0.37%)</title><rect x="24.3714%" y="149" width="0.3694%" height="15" fill="rgb(241,83,37)"/><text x="24.6214%" y="159.50"></text></g><g><title>check_mod_privacy (2,077,831 samples, 0.37%)</title><rect x="24.3721%" y="133" width="0.3687%" height="15" fill="rgb(233,36,39)"/><text x="24.6221%" y="143.50"></text></g><g><title>misc_checking_3 (7,975,061 samples, 1.42%)</title><rect x="23.3289%" y="165" width="1.4152%" height="15" fill="rgb(226,3,54)"/><text x="23.5789%" y="175.50"></text></g><g><title>impl_parent (2,585,679 samples, 0.46%)</title><rect x="25.4448%" y="101" width="0.4588%" height="15" fill="rgb(245,192,40)"/><text x="25.6948%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,403,045 samples, 0.25%)</title><rect x="25.6547%" y="85" width="0.2490%" height="15" fill="rgb(238,167,29)"/><text x="25.9047%" y="95.50"></text></g><g><title>impl_trait_ref (5,078,233 samples, 0.90%)</title><rect x="25.9036%" y="101" width="0.9012%" height="15" fill="rgb(232,182,51)"/><text x="26.1536%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,117,334 samples, 0.73%)</title><rect x="26.0742%" y="85" width="0.7306%" height="15" fill="rgb(231,60,39)"/><text x="26.3242%" y="95.50"></text></g><g><title>trait_impls_of (777,427 samples, 0.14%)</title><rect x="26.8088%" y="101" width="0.1380%" height="15" fill="rgb(208,69,12)"/><text x="27.0588%" y="111.50"></text></g><g><title>coherent_trait (12,333,104 samples, 2.19%)</title><rect x="24.7584%" y="133" width="2.1886%" height="15" fill="rgb(235,93,37)"/><text x="25.0084%" y="143.50">c..</text></g><g><title>specialization_graph_of (12,311,943 samples, 2.18%)</title><rect x="24.7621%" y="117" width="2.1848%" height="15" fill="rgb(213,116,39)"/><text x="25.0121%" y="127.50">s..</text></g><g><title>coherence_checking (12,401,875 samples, 2.20%)</title><rect x="24.7556%" y="149" width="2.2008%" height="15" fill="rgb(222,207,29)"/><text x="25.0056%" y="159.50">c..</text></g><g><title>associated_item (893,497 samples, 0.16%)</title><rect x="35.2317%" y="85" width="0.1586%" height="15" fill="rgb(206,96,30)"/><text x="35.4817%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (757,647 samples, 0.13%)</title><rect x="35.2558%" y="69" width="0.1344%" height="15" fill="rgb(218,138,4)"/><text x="35.5058%" y="79.50"></text></g><g><title>associated_items (1,171,761 samples, 0.21%)</title><rect x="35.1898%" y="101" width="0.2079%" height="15" fill="rgb(250,191,14)"/><text x="35.4398%" y="111.50"></text></g><g><title>dropck_outlives (1,147,003 samples, 0.20%)</title><rect x="35.4189%" y="101" width="0.2035%" height="15" fill="rgb(239,60,40)"/><text x="35.6689%" y="111.50"></text></g><g><title>adt_dtorck_constraint (666,608 samples, 0.12%)</title><rect x="35.5042%" y="85" width="0.1183%" height="15" fill="rgb(206,27,48)"/><text x="35.7542%" y="95.50"></text></g><g><title>evaluate_obligation (4,837,395 samples, 0.86%)</title><rect x="35.6224%" y="101" width="0.8584%" height="15" fill="rgb(225,35,8)"/><text x="35.8724%" y="111.50"></text></g><g><title>generics_of (1,245,902 samples, 0.22%)</title><rect x="36.5325%" y="101" width="0.2211%" height="15" fill="rgb(250,213,24)"/><text x="36.7825%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (971,009 samples, 0.17%)</title><rect x="36.5813%" y="85" width="0.1723%" height="15" fill="rgb(247,123,22)"/><text x="36.8313%" y="95.50"></text></g><g><title>method_autoderef_steps (768,986 samples, 0.14%)</title><rect x="36.8824%" y="101" width="0.1365%" height="15" fill="rgb(231,138,38)"/><text x="37.1324%" y="111.50"></text></g><g><title>predicates_of (803,630 samples, 0.14%)</title><rect x="37.0547%" y="101" width="0.1426%" height="15" fill="rgb(231,145,46)"/><text x="37.3047%" y="111.50"></text></g><g><title>predicates_defined_on (625,556 samples, 0.11%)</title><rect x="37.0863%" y="85" width="0.1110%" height="15" fill="rgb(251,118,11)"/><text x="37.3363%" y="95.50"></text></g><g><title>evaluate_obligation (2,141,587 samples, 0.38%)</title><rect x="41.3781%" y="85" width="0.3800%" height="15" fill="rgb(217,147,25)"/><text x="41.6281%" y="95.50"></text></g><g><title>typeck (26,141,735 samples, 4.64%)</title><rect x="37.2316%" y="101" width="4.6390%" height="15" fill="rgb(247,81,37)"/><text x="37.4816%" y="111.50">typeck</text></g><g><title>item_bodies_checking (84,113,538 samples, 14.93%)</title><rect x="26.9604%" y="149" width="14.9263%" height="15" fill="rgb(209,12,38)"/><text x="27.2104%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (84,111,238 samples, 14.93%)</title><rect x="26.9608%" y="133" width="14.9259%" height="15" fill="rgb(227,1,9)"/><text x="27.2108%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (84,029,468 samples, 14.91%)</title><rect x="26.9754%" y="117" width="14.9114%" height="15" fill="rgb(248,47,43)"/><text x="27.2254%" y="127.50">typeck</text></g><g><title>item_types_checking (999,240 samples, 0.18%)</title><rect x="41.8867%" y="149" width="0.1773%" height="15" fill="rgb(221,10,30)"/><text x="42.1367%" y="159.50"></text></g><g><title>check_mod_item_types (994,880 samples, 0.18%)</title><rect x="41.8875%" y="133" width="0.1765%" height="15" fill="rgb(210,229,1)"/><text x="42.1375%" y="143.50"></text></g><g><title>named_region_map (1,043,979 samples, 0.19%)</title><rect x="42.2031%" y="101" width="0.1853%" height="15" fill="rgb(222,148,37)"/><text x="42.4531%" y="111.50"></text></g><g><title>resolve_lifetimes (1,019,469 samples, 0.18%)</title><rect x="42.2075%" y="85" width="0.1809%" height="15" fill="rgb(234,67,33)"/><text x="42.4575%" y="95.50"></text></g><g><title>generics_of (1,193,631 samples, 0.21%)</title><rect x="42.1787%" y="117" width="0.2118%" height="15" fill="rgb(247,98,35)"/><text x="42.4287%" y="127.50"></text></g><g><title>predicates_of (853,529 samples, 0.15%)</title><rect x="42.3988%" y="117" width="0.1515%" height="15" fill="rgb(247,138,52)"/><text x="42.6488%" y="127.50"></text></g><g><title>predicates_defined_on (790,928 samples, 0.14%)</title><rect x="42.4099%" y="101" width="0.1404%" height="15" fill="rgb(213,79,30)"/><text x="42.6599%" y="111.50"></text></g><g><title>type_collecting (2,803,578 samples, 0.50%)</title><rect x="42.0645%" y="149" width="0.4975%" height="15" fill="rgb(246,177,23)"/><text x="42.3145%" y="159.50"></text></g><g><title>collect_mod_item_types (2,794,518 samples, 0.50%)</title><rect x="42.0661%" y="133" width="0.4959%" height="15" fill="rgb(230,62,27)"/><text x="42.3161%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,298,360 samples, 0.23%)</title><rect x="42.6058%" y="133" width="0.2304%" height="15" fill="rgb(216,154,8)"/><text x="42.8558%" y="143.50"></text></g><g><title>evaluate_obligation (942,529 samples, 0.17%)</title><rect x="43.1397%" y="117" width="0.1673%" height="15" fill="rgb(244,35,45)"/><text x="43.3897%" y="127.50"></text></g><g><title>region_scope_tree (963,270 samples, 0.17%)</title><rect x="43.4219%" y="117" width="0.1709%" height="15" fill="rgb(251,115,12)"/><text x="43.6719%" y="127.50"></text></g><g><title>analysis (188,366,561 samples, 33.43%)</title><rect x="10.1872%" y="181" width="33.4264%" height="15" fill="rgb(240,54,50)"/><text x="10.4372%" y="191.50">analysis</text></g><g><title>type_check_crate (106,334,623 samples, 18.87%)</title><rect x="24.7442%" y="165" width="18.8695%" height="15" fill="rgb(233,84,52)"/><text x="24.9942%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,921,450 samples, 1.05%)</title><rect x="42.5629%" y="149" width="1.0508%" height="15" fill="rgb(207,117,47)"/><text x="42.8129%" y="159.50"></text></g><g><title>check_item_well_formed (4,381,168 samples, 0.78%)</title><rect x="42.8362%" y="133" width="0.7775%" height="15" fill="rgb(249,43,39)"/><text x="43.0862%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (619,755 samples, 0.11%)</title><rect x="50.6634%" y="149" width="0.1100%" height="15" fill="rgb(209,38,44)"/><text x="50.9134%" y="159.50"></text></g><g><title>layout_of (870,758 samples, 0.15%)</title><rect x="51.3603%" y="133" width="0.1545%" height="15" fill="rgb(236,212,23)"/><text x="51.6103%" y="143.50"></text></g><g><title>predicates_of (1,122,224 samples, 0.20%)</title><rect x="51.8722%" y="117" width="0.1991%" height="15" fill="rgb(242,79,21)"/><text x="52.1222%" y="127.50"></text></g><g><title>predicates_defined_on (810,828 samples, 0.14%)</title><rect x="51.9275%" y="101" width="0.1439%" height="15" fill="rgb(211,96,35)"/><text x="52.1775%" y="111.50"></text></g><g><title>param_env (3,145,375 samples, 0.56%)</title><rect x="51.5148%" y="133" width="0.5582%" height="15" fill="rgb(253,215,40)"/><text x="51.7648%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,147,226 samples, 1.27%)</title><rect x="50.8687%" y="149" width="1.2683%" height="15" fill="rgb(211,81,21)"/><text x="51.1187%" y="159.50"></text></g><g><title>layout_of (1,047,732 samples, 0.19%)</title><rect x="52.2006%" y="149" width="0.1859%" height="15" fill="rgb(208,190,38)"/><text x="52.4506%" y="159.50"></text></g><g><title>codegen_module (47,306,726 samples, 8.39%)</title><rect x="44.0751%" y="165" width="8.3948%" height="15" fill="rgb(235,213,38)"/><text x="44.3251%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (49,970,233 samples, 8.87%)</title><rect x="43.6147%" y="181" width="8.8674%" height="15" fill="rgb(237,122,38)"/><text x="43.8647%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (162,516,590 samples, 28.84%)</title><rect x="52.5104%" y="165" width="28.8393%" height="15" fill="rgb(244,218,35)"/><text x="52.7604%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (153,017,695 samples, 27.15%)</title><rect x="54.1961%" y="149" width="27.1536%" height="15" fill="rgb(240,68,47)"/><text x="54.4461%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (171,415,260 samples, 30.42%)</title><rect x="52.4822%" y="181" width="30.4184%" height="15" fill="rgb(210,16,53)"/><text x="52.7322%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,739,288 samples, 1.55%)</title><rect x="81.3497%" y="165" width="1.5508%" height="15" fill="rgb(235,124,12)"/><text x="81.5997%" y="175.50"></text></g><g><title>metadata_register_crate (1,429,134 samples, 0.25%)</title><rect x="85.7184%" y="133" width="0.2536%" height="15" fill="rgb(224,169,11)"/><text x="85.9684%" y="143.50"></text></g><g><title>macro_expand_crate (17,121,053 samples, 3.04%)</title><rect x="82.9793%" y="165" width="3.0382%" height="15" fill="rgb(250,166,2)"/><text x="83.2293%" y="175.50">mac..</text></g><g><title>expand_crate (17,106,833 samples, 3.04%)</title><rect x="82.9818%" y="149" width="3.0357%" height="15" fill="rgb(242,216,29)"/><text x="83.2318%" y="159.50">exp..</text></g><g><title>late_resolve_crate (3,524,805 samples, 0.63%)</title><rect x="86.0809%" y="149" width="0.6255%" height="15" fill="rgb(230,116,27)"/><text x="86.3309%" y="159.50"></text></g><g><title>configure_and_expand (21,669,989 samples, 3.85%)</title><rect x="82.9005%" y="181" width="3.8454%" height="15" fill="rgb(228,99,48)"/><text x="83.1505%" y="191.50">conf..</text></g><g><title>resolve_crate (3,970,810 samples, 0.70%)</title><rect x="86.0413%" y="165" width="0.7046%" height="15" fill="rgb(253,11,6)"/><text x="86.2913%" y="175.50"></text></g><g><title>early_lint_checks (2,823,509 samples, 0.50%)</title><rect x="86.8145%" y="181" width="0.5010%" height="15" fill="rgb(247,143,39)"/><text x="87.0645%" y="191.50"></text></g><g><title>free_global_ctxt (6,527,255 samples, 1.16%)</title><rect x="87.3155%" y="181" width="1.1583%" height="15" fill="rgb(236,97,10)"/><text x="87.5655%" y="191.50"></text></g><g><title>item_attrs (903,613 samples, 0.16%)</title><rect x="89.3688%" y="85" width="0.1603%" height="15" fill="rgb(233,208,19)"/><text x="89.6188%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (866,043 samples, 0.15%)</title><rect x="89.3755%" y="69" width="0.1537%" height="15" fill="rgb(216,164,2)"/><text x="89.6255%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,632,607 samples, 0.29%)</title><rect x="89.3280%" y="101" width="0.2897%" height="15" fill="rgb(220,129,5)"/><text x="89.5780%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,543,909 samples, 0.27%)</title><rect x="89.9332%" y="85" width="0.2740%" height="15" fill="rgb(242,17,10)"/><text x="90.1832%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (893,528 samples, 0.16%)</title><rect x="90.2072%" y="85" width="0.1586%" height="15" fill="rgb(242,107,0)"/><text x="90.4572%" y="95.50"></text></g><g><title>optimized_mir (3,563,510 samples, 0.63%)</title><rect x="89.7491%" y="101" width="0.6324%" height="15" fill="rgb(251,28,31)"/><text x="89.9991%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,587,949 samples, 0.28%)</title><rect x="90.4856%" y="85" width="0.2818%" height="15" fill="rgb(233,223,10)"/><text x="90.7356%" y="95.50"></text></g><g><title>specialization_graph_of (704,869 samples, 0.13%)</title><rect x="90.8626%" y="85" width="0.1251%" height="15" fill="rgb(215,21,27)"/><text x="91.1126%" y="95.50"></text></g><g><title>resolve_instance (3,709,231 samples, 0.66%)</title><rect x="90.3815%" y="101" width="0.6582%" height="15" fill="rgb(232,23,21)"/><text x="90.6315%" y="111.50"></text></g><g><title>eval_to_const_value_raw (589,936 samples, 0.10%)</title><rect x="91.0476%" y="85" width="0.1047%" height="15" fill="rgb(244,5,23)"/><text x="91.2976%" y="95.50"></text></g><g><title>eval_to_const_value_raw (578,906 samples, 0.10%)</title><rect x="91.0496%" y="69" width="0.1027%" height="15" fill="rgb(226,81,46)"/><text x="91.2996%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (664,466 samples, 0.12%)</title><rect x="91.0397%" y="101" width="0.1179%" height="15" fill="rgb(247,70,30)"/><text x="91.2897%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (12,392,555 samples, 2.20%)</title><rect x="89.0919%" y="117" width="2.1991%" height="15" fill="rgb(212,68,19)"/><text x="89.3419%" y="127.50">m..</text></g><g><title>vtable_entries (592,395 samples, 0.11%)</title><rect x="91.1858%" y="101" width="0.1051%" height="15" fill="rgb(240,187,13)"/><text x="91.4358%" y="111.50"></text></g><g><title>monomorphization_collector (12,434,695 samples, 2.21%)</title><rect x="89.0913%" y="133" width="2.2066%" height="15" fill="rgb(223,113,26)"/><text x="89.3413%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (1,269,643 samples, 0.23%)</title><rect x="91.2985%" y="117" width="0.2253%" height="15" fill="rgb(206,192,2)"/><text x="91.5485%" y="127.50"></text></g><g><title>symbol_name (1,146,981 samples, 0.20%)</title><rect x="91.3203%" y="101" width="0.2035%" height="15" fill="rgb(241,108,4)"/><text x="91.5703%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (14,380,155 samples, 2.55%)</title><rect x="89.0863%" y="149" width="2.5518%" height="15" fill="rgb(247,173,49)"/><text x="89.3363%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,917,250 samples, 0.34%)</title><rect x="91.2979%" y="133" width="0.3402%" height="15" fill="rgb(224,114,35)"/><text x="91.5479%" y="143.50"></text></g><g><title>cgu_partitioning (644,327 samples, 0.11%)</title><rect x="91.5238%" y="117" width="0.1143%" height="15" fill="rgb(245,159,27)"/><text x="91.7738%" y="127.50"></text></g><g><title>exported_symbols (14,682,599 samples, 2.61%)</title><rect x="89.0749%" y="165" width="2.6055%" height="15" fill="rgb(245,172,44)"/><text x="89.3249%" y="175.50">ex..</text></g><g><title>layout_of (568,674 samples, 0.10%)</title><rect x="93.4582%" y="133" width="0.1009%" height="15" fill="rgb(236,23,11)"/><text x="93.7082%" y="143.50"></text></g><g><title>layout_of (1,787,218 samples, 0.32%)</title><rect x="93.2510%" y="149" width="0.3171%" height="15" fill="rgb(205,117,38)"/><text x="93.5010%" y="159.50"></text></g><g><title>needs_drop_raw (757,886 samples, 0.13%)</title><rect x="96.4975%" y="133" width="0.1345%" height="15" fill="rgb(237,72,25)"/><text x="96.7475%" y="143.50"></text></g><g><title>is_copy_raw (671,795 samples, 0.12%)</title><rect x="96.5128%" y="117" width="0.1192%" height="15" fill="rgb(244,70,9)"/><text x="96.7628%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,283,725 samples, 3.07%)</title><rect x="93.5681%" y="149" width="3.0671%" height="15" fill="rgb(217,125,39)"/><text x="93.8181%" y="159.50">mir..</text></g><g><title>optimized_mir (27,862,834 samples, 4.94%)</title><rect x="91.7053%" y="165" width="4.9444%" height="15" fill="rgb(235,36,10)"/><text x="91.9553%" y="175.50">optimi..</text></g><g><title>generate_crate_metadata (46,527,049 samples, 8.26%)</title><rect x="88.4738%" y="181" width="8.2564%" height="15" fill="rgb(251,123,47)"/><text x="88.7238%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (6,086,551 samples, 1.08%)</title><rect x="96.7302%" y="181" width="1.0801%" height="15" fill="rgb(221,13,13)"/><text x="96.9802%" y="191.50"></text></g><g><title>finish_ongoing_codegen (4,948,971 samples, 0.88%)</title><rect x="97.8129%" y="165" width="0.8782%" height="15" fill="rgb(238,131,9)"/><text x="98.0629%" y="175.50"></text></g><g><title>link_crate (2,368,114 samples, 0.42%)</title><rect x="98.6911%" y="165" width="0.4202%" height="15" fill="rgb(211,50,8)"/><text x="98.9411%" y="175.50"></text></g><g><title>link_binary (2,306,463 samples, 0.41%)</title><rect x="98.7021%" y="149" width="0.4093%" height="15" fill="rgb(245,182,24)"/><text x="98.9521%" y="159.50"></text></g><g><title>link_rlib (1,728,437 samples, 0.31%)</title><rect x="98.8047%" y="133" width="0.3067%" height="15" fill="rgb(242,14,37)"/><text x="99.0547%" y="143.50"></text></g><g><title>link (7,342,065 samples, 1.30%)</title><rect x="97.8103%" y="181" width="1.3029%" height="15" fill="rgb(246,228,12)"/><text x="98.0603%" y="191.50"></text></g><g><title>parse_crate (2,204,742 samples, 0.39%)</title><rect x="99.1132%" y="181" width="0.3912%" height="15" fill="rgb(213,55,15)"/><text x="99.3632%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,983,730 samples, 0.35%)</title><rect x="99.5460%" y="181" width="0.3520%" height="15" fill="rgb(209,9,3)"/><text x="99.7960%" y="191.50"></text></g><g><title>all (563,525,556 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (563,525,556 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>