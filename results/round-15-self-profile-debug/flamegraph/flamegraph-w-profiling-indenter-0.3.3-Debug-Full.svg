<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,898,440 samples, 11.81%)</title><rect x="1.0038%" y="197" width="11.8140%" height="15" fill="rgb(227,0,7)"/><text x="1.2538%" y="207.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (111,191 samples, 0.13%)</title><rect x="16.6975%" y="101" width="0.1327%" height="15" fill="rgb(217,0,24)"/><text x="16.9475%" y="111.50"></text></g><g><title>adt_drop_tys (175,871 samples, 0.21%)</title><rect x="17.5846%" y="69" width="0.2099%" height="15" fill="rgb(221,193,54)"/><text x="17.8346%" y="79.50"></text></g><g><title>is_copy_raw (386,325 samples, 0.46%)</title><rect x="17.7945%" y="69" width="0.4611%" height="15" fill="rgb(248,212,6)"/><text x="18.0445%" y="79.50"></text></g><g><title>evaluate_obligation (345,954 samples, 0.41%)</title><rect x="17.8426%" y="53" width="0.4129%" height="15" fill="rgb(208,68,35)"/><text x="18.0926%" y="63.50"></text></g><g><title>needs_drop_raw (621,247 samples, 0.74%)</title><rect x="17.5344%" y="85" width="0.7415%" height="15" fill="rgb(232,128,0)"/><text x="17.7844%" y="95.50"></text></g><g><title>specialization_graph_of (383,873 samples, 0.46%)</title><rect x="18.4086%" y="69" width="0.4582%" height="15" fill="rgb(207,160,47)"/><text x="18.6586%" y="79.50"></text></g><g><title>impl_trait_ref (218,033 samples, 0.26%)</title><rect x="18.6066%" y="53" width="0.2602%" height="15" fill="rgb(228,23,34)"/><text x="18.8566%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (195,263 samples, 0.23%)</title><rect x="18.6337%" y="37" width="0.2331%" height="15" fill="rgb(218,30,26)"/><text x="18.8837%" y="47.50"></text></g><g><title>resolve_instance (504,105 samples, 0.60%)</title><rect x="18.2759%" y="85" width="0.6017%" height="15" fill="rgb(220,122,19)"/><text x="18.5259%" y="95.50"></text></g><g><title>thir_body (175,432 samples, 0.21%)</title><rect x="18.8819%" y="85" width="0.2094%" height="15" fill="rgb(250,228,42)"/><text x="19.1319%" y="95.50"></text></g><g><title>mir_const (2,302,523 samples, 2.75%)</title><rect x="16.3465%" y="133" width="2.7481%" height="15" fill="rgb(240,193,28)"/><text x="16.5965%" y="143.50">mi..</text></g><g><title>unsafety_check_result (2,111,131 samples, 2.52%)</title><rect x="16.5750%" y="117" width="2.5197%" height="15" fill="rgb(216,20,37)"/><text x="16.8250%" y="127.50">un..</text></g><g><title>mir_built (1,897,309 samples, 2.26%)</title><rect x="16.8302%" y="101" width="2.2645%" height="15" fill="rgb(206,188,39)"/><text x="17.0802%" y="111.50">m..</text></g><g><title>mir_promoted (2,510,925 samples, 3.00%)</title><rect x="16.1082%" y="149" width="2.9968%" height="15" fill="rgb(217,207,13)"/><text x="16.3582%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (127,563 samples, 0.15%)</title><rect x="19.1094%" y="149" width="0.1522%" height="15" fill="rgb(231,73,38)"/><text x="19.3594%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (215,962 samples, 0.26%)</title><rect x="19.2617%" y="149" width="0.2578%" height="15" fill="rgb(225,20,46)"/><text x="19.5117%" y="159.50"></text></g><g><title>normalize_projection_ty (154,541 samples, 0.18%)</title><rect x="19.3350%" y="133" width="0.1844%" height="15" fill="rgb(210,31,41)"/><text x="19.5850%" y="143.50"></text></g><g><title>type_op_prove_predicate (858,950 samples, 1.03%)</title><rect x="19.5503%" y="149" width="1.0252%" height="15" fill="rgb(221,200,47)"/><text x="19.8003%" y="159.50"></text></g><g><title>MIR_borrow_checking (6,301,014 samples, 7.52%)</title><rect x="13.0590%" y="181" width="7.5204%" height="15" fill="rgb(226,26,5)"/><text x="13.3090%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (6,288,464 samples, 7.51%)</title><rect x="13.0740%" y="165" width="7.5054%" height="15" fill="rgb(249,33,26)"/><text x="13.3240%" y="175.50">mir_borrow..</text></g><g><title>hir_module_items (129,551 samples, 0.15%)</title><rect x="20.5841%" y="181" width="0.1546%" height="15" fill="rgb(235,183,28)"/><text x="20.8341%" y="191.50"></text></g><g><title>should_inherit_track_caller (124,681 samples, 0.15%)</title><rect x="21.1300%" y="133" width="0.1488%" height="15" fill="rgb(221,5,38)"/><text x="21.3800%" y="143.50"></text></g><g><title>codegen_fn_attrs (291,273 samples, 0.35%)</title><rect x="20.9731%" y="149" width="0.3476%" height="15" fill="rgb(247,18,42)"/><text x="21.2231%" y="159.50"></text></g><g><title>check_mod_attrs (452,574 samples, 0.54%)</title><rect x="20.7809%" y="165" width="0.5402%" height="15" fill="rgb(241,131,45)"/><text x="21.0309%" y="175.50"></text></g><g><title>lookup_deprecation_entry (100,910 samples, 0.12%)</title><rect x="21.5557%" y="149" width="0.1204%" height="15" fill="rgb(249,31,29)"/><text x="21.8057%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (257,753 samples, 0.31%)</title><rect x="21.4415%" y="165" width="0.3076%" height="15" fill="rgb(225,111,53)"/><text x="21.6915%" y="175.50"></text></g><g><title>misc_checking_1 (895,679 samples, 1.07%)</title><rect x="20.7392%" y="181" width="1.0690%" height="15" fill="rgb(238,160,17)"/><text x="20.9892%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (123,742 samples, 0.15%)</title><rect x="21.8100%" y="165" width="0.1477%" height="15" fill="rgb(214,148,48)"/><text x="22.0600%" y="175.50"></text></g><g><title>check_mod_liveness (100,161 samples, 0.12%)</title><rect x="21.8382%" y="149" width="0.1195%" height="15" fill="rgb(232,36,49)"/><text x="22.0882%" y="159.50"></text></g><g><title>misc_checking_2 (254,363 samples, 0.30%)</title><rect x="21.8082%" y="181" width="0.3036%" height="15" fill="rgb(209,103,24)"/><text x="22.0582%" y="191.50"></text></g><g><title>match_checking (129,081 samples, 0.15%)</title><rect x="21.9577%" y="165" width="0.1541%" height="15" fill="rgb(229,88,8)"/><text x="22.2077%" y="175.50"></text></g><g><title>check_match (124,801 samples, 0.15%)</title><rect x="21.9628%" y="149" width="0.1490%" height="15" fill="rgb(213,181,19)"/><text x="22.2128%" y="159.50"></text></g><g><title>death_checking (157,471 samples, 0.19%)</title><rect x="22.1774%" y="165" width="0.1879%" height="15" fill="rgb(254,191,54)"/><text x="22.4274%" y="175.50"></text></g><g><title>crate_lints (1,116,491 samples, 1.33%)</title><rect x="22.3673%" y="149" width="1.3326%" height="15" fill="rgb(241,83,37)"/><text x="22.6173%" y="159.50"></text></g><g><title>type_of (751,078 samples, 0.90%)</title><rect x="22.8035%" y="133" width="0.8964%" height="15" fill="rgb(233,36,39)"/><text x="23.0535%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (666,137 samples, 0.80%)</title><rect x="22.9048%" y="117" width="0.7951%" height="15" fill="rgb(226,3,54)"/><text x="23.1548%" y="127.50"></text></g><g><title>lint_checking (1,257,392 samples, 1.50%)</title><rect x="22.3654%" y="165" width="1.5007%" height="15" fill="rgb(245,192,40)"/><text x="22.6154%" y="175.50"></text></g><g><title>module_lints (139,251 samples, 0.17%)</title><rect x="23.6999%" y="149" width="0.1662%" height="15" fill="rgb(238,167,29)"/><text x="23.9499%" y="159.50"></text></g><g><title>lint_mod (136,791 samples, 0.16%)</title><rect x="23.7028%" y="133" width="0.1633%" height="15" fill="rgb(232,182,51)"/><text x="23.9528%" y="143.50"></text></g><g><title>privacy_checking_modules (210,322 samples, 0.25%)</title><rect x="23.9454%" y="165" width="0.2510%" height="15" fill="rgb(231,60,39)"/><text x="24.1954%" y="175.50"></text></g><g><title>check_mod_privacy (208,822 samples, 0.25%)</title><rect x="23.9471%" y="149" width="0.2492%" height="15" fill="rgb(208,69,12)"/><text x="24.1971%" y="159.50"></text></g><g><title>misc_checking_3 (1,754,457 samples, 2.09%)</title><rect x="22.1118%" y="181" width="2.0940%" height="15" fill="rgb(235,93,37)"/><text x="22.3618%" y="191.50">m..</text></g><g><title>coherent_trait (120,241 samples, 0.14%)</title><rect x="24.2548%" y="149" width="0.1435%" height="15" fill="rgb(213,116,39)"/><text x="24.5048%" y="159.50"></text></g><g><title>specialization_graph_of (114,131 samples, 0.14%)</title><rect x="24.2621%" y="133" width="0.1362%" height="15" fill="rgb(222,207,29)"/><text x="24.5121%" y="143.50"></text></g><g><title>coherence_checking (165,961 samples, 0.20%)</title><rect x="24.2393%" y="165" width="0.1981%" height="15" fill="rgb(206,96,30)"/><text x="24.4893%" y="175.50"></text></g><g><title>associated_item (126,570 samples, 0.15%)</title><rect x="29.9261%" y="101" width="0.1511%" height="15" fill="rgb(218,138,4)"/><text x="30.1761%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (96,570 samples, 0.12%)</title><rect x="29.9619%" y="85" width="0.1153%" height="15" fill="rgb(250,191,14)"/><text x="30.2119%" y="95.50"></text></g><g><title>associated_items (190,881 samples, 0.23%)</title><rect x="29.8618%" y="117" width="0.2278%" height="15" fill="rgb(239,60,40)"/><text x="30.1118%" y="127.50"></text></g><g><title>adt_dtorck_constraint (170,432 samples, 0.20%)</title><rect x="30.2490%" y="101" width="0.2034%" height="15" fill="rgb(206,27,48)"/><text x="30.4990%" y="111.50"></text></g><g><title>dropck_outlives (312,945 samples, 0.37%)</title><rect x="30.1371%" y="117" width="0.3735%" height="15" fill="rgb(225,35,8)"/><text x="30.3871%" y="127.50"></text></g><g><title>adt_sized_constraint (97,140 samples, 0.12%)</title><rect x="30.9969%" y="101" width="0.1159%" height="15" fill="rgb(250,213,24)"/><text x="31.2469%" y="111.50"></text></g><g><title>evaluate_obligation (806,502 samples, 0.96%)</title><rect x="30.5123%" y="117" width="0.9626%" height="15" fill="rgb(247,123,22)"/><text x="30.7623%" y="127.50"></text></g><g><title>trait_impls_of (156,202 samples, 0.19%)</title><rect x="31.2885%" y="101" width="0.1864%" height="15" fill="rgb(231,138,38)"/><text x="31.5385%" y="111.50"></text></g><g><title>method_autoderef_steps (122,071 samples, 0.15%)</title><rect x="31.9402%" y="117" width="0.1457%" height="15" fill="rgb(231,145,46)"/><text x="32.1902%" y="127.50"></text></g><g><title>explicit_predicates_of (196,053 samples, 0.23%)</title><rect x="32.2505%" y="85" width="0.2340%" height="15" fill="rgb(251,118,11)"/><text x="32.5005%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (179,733 samples, 0.21%)</title><rect x="32.2700%" y="69" width="0.2145%" height="15" fill="rgb(217,147,25)"/><text x="32.5200%" y="79.50"></text></g><g><title>predicates_of (348,393 samples, 0.42%)</title><rect x="32.1084%" y="117" width="0.4158%" height="15" fill="rgb(247,81,37)"/><text x="32.3584%" y="127.50"></text></g><g><title>predicates_defined_on (279,613 samples, 0.33%)</title><rect x="32.1904%" y="101" width="0.3337%" height="15" fill="rgb(209,12,38)"/><text x="32.4404%" y="111.50"></text></g><g><title>item_bodies_checking (6,893,109 samples, 8.23%)</title><rect x="24.4668%" y="165" width="8.2271%" height="15" fill="rgb(227,1,9)"/><text x="24.7168%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (6,890,639 samples, 8.22%)</title><rect x="24.4698%" y="149" width="8.2241%" height="15" fill="rgb(248,47,43)"/><text x="24.7198%" y="159.50">typeck_item..</text></g><g><title>typeck (6,880,239 samples, 8.21%)</title><rect x="24.4822%" y="133" width="8.2117%" height="15" fill="rgb(221,10,30)"/><text x="24.7322%" y="143.50">typeck</text></g><g><title>adt_destructor (106,531 samples, 0.13%)</title><rect x="32.8215%" y="133" width="0.1271%" height="15" fill="rgb(210,229,1)"/><text x="33.0715%" y="143.50"></text></g><g><title>coherent_trait (101,361 samples, 0.12%)</title><rect x="32.8277%" y="117" width="0.1210%" height="15" fill="rgb(222,148,37)"/><text x="33.0777%" y="127.50"></text></g><g><title>specialization_graph_of (99,021 samples, 0.12%)</title><rect x="32.8305%" y="101" width="0.1182%" height="15" fill="rgb(234,67,33)"/><text x="33.0805%" y="111.50"></text></g><g><title>item_types_checking (220,812 samples, 0.26%)</title><rect x="32.6939%" y="165" width="0.2635%" height="15" fill="rgb(247,98,35)"/><text x="32.9439%" y="175.50"></text></g><g><title>check_mod_item_types (217,942 samples, 0.26%)</title><rect x="32.6973%" y="149" width="0.2601%" height="15" fill="rgb(247,138,52)"/><text x="32.9473%" y="159.50"></text></g><g><title>is_late_bound_map (184,182 samples, 0.22%)</title><rect x="33.2523%" y="117" width="0.2198%" height="15" fill="rgb(213,79,30)"/><text x="33.5023%" y="127.50"></text></g><g><title>resolve_lifetimes (155,192 samples, 0.19%)</title><rect x="33.2869%" y="101" width="0.1852%" height="15" fill="rgb(246,177,23)"/><text x="33.5369%" y="111.50"></text></g><g><title>generics_of (274,132 samples, 0.33%)</title><rect x="33.1698%" y="133" width="0.3272%" height="15" fill="rgb(230,62,27)"/><text x="33.4198%" y="143.50"></text></g><g><title>predicates_of (86,571 samples, 0.10%)</title><rect x="33.7899%" y="69" width="0.1033%" height="15" fill="rgb(216,154,8)"/><text x="34.0399%" y="79.50"></text></g><g><title>predicates_of (969,490 samples, 1.16%)</title><rect x="33.5007%" y="133" width="1.1571%" height="15" fill="rgb(244,35,45)"/><text x="33.7507%" y="143.50"></text></g><g><title>predicates_defined_on (949,370 samples, 1.13%)</title><rect x="33.5247%" y="117" width="1.1331%" height="15" fill="rgb(251,115,12)"/><text x="33.7747%" y="127.50"></text></g><g><title>inferred_outlives_of (843,259 samples, 1.01%)</title><rect x="33.6514%" y="101" width="1.0064%" height="15" fill="rgb(240,54,50)"/><text x="33.9014%" y="111.50"></text></g><g><title>inferred_outlives_crate (831,629 samples, 0.99%)</title><rect x="33.6652%" y="85" width="0.9926%" height="15" fill="rgb(233,84,52)"/><text x="33.9152%" y="95.50"></text></g><g><title>type_of (640,575 samples, 0.76%)</title><rect x="33.8933%" y="69" width="0.7645%" height="15" fill="rgb(207,117,47)"/><text x="34.1433%" y="79.50"></text></g><g><title>type_of (554,695 samples, 0.66%)</title><rect x="33.9958%" y="53" width="0.6620%" height="15" fill="rgb(249,43,39)"/><text x="34.2458%" y="63.50"></text></g><g><title>type_collecting (1,523,165 samples, 1.82%)</title><rect x="32.9582%" y="165" width="1.8179%" height="15" fill="rgb(209,38,44)"/><text x="33.2082%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,512,525 samples, 1.81%)</title><rect x="32.9709%" y="149" width="1.8052%" height="15" fill="rgb(236,212,23)"/><text x="33.2209%" y="159.50">c..</text></g><g><title>type_of (99,101 samples, 0.12%)</title><rect x="34.6578%" y="133" width="0.1183%" height="15" fill="rgb(242,79,21)"/><text x="34.9078%" y="143.50"></text></g><g><title>evaluate_obligation (126,461 samples, 0.15%)</title><rect x="35.2658%" y="133" width="0.1509%" height="15" fill="rgb(211,96,35)"/><text x="35.5158%" y="143.50"></text></g><g><title>implied_outlives_bounds (97,642 samples, 0.12%)</title><rect x="35.4168%" y="133" width="0.1165%" height="15" fill="rgb(253,215,40)"/><text x="35.6668%" y="143.50"></text></g><g><title>check_impl_item_well_formed (709,888 samples, 0.85%)</title><rect x="34.8429%" y="149" width="0.8473%" height="15" fill="rgb(211,81,21)"/><text x="35.0929%" y="159.50"></text></g><g><title>evaluate_obligation (155,511 samples, 0.19%)</title><rect x="36.2853%" y="133" width="0.1856%" height="15" fill="rgb(208,190,38)"/><text x="36.5353%" y="143.50"></text></g><g><title>evaluate_obligation (193,192 samples, 0.23%)</title><rect x="36.7401%" y="117" width="0.2306%" height="15" fill="rgb(235,213,38)"/><text x="36.9901%" y="127.50"></text></g><g><title>layout_of (188,143 samples, 0.22%)</title><rect x="37.0281%" y="117" width="0.2246%" height="15" fill="rgb(237,122,38)"/><text x="37.2781%" y="127.50"></text></g><g><title>object_safety_violations (683,038 samples, 0.82%)</title><rect x="36.5553%" y="133" width="0.8152%" height="15" fill="rgb(244,218,35)"/><text x="36.8053%" y="143.50"></text></g><g><title>param_env (136,181 samples, 0.16%)</title><rect x="37.3706%" y="133" width="0.1625%" height="15" fill="rgb(240,68,47)"/><text x="37.6206%" y="143.50"></text></g><g><title>analysis (20,774,420 samples, 24.79%)</title><rect x="12.8178%" y="197" width="24.7948%" height="15" fill="rgb(210,16,53)"/><text x="13.0678%" y="207.50">analysis</text></g><g><title>type_check_crate (11,232,933 samples, 13.41%)</title><rect x="24.2058%" y="181" width="13.4068%" height="15" fill="rgb(235,124,12)"/><text x="24.4558%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,375,795 samples, 2.84%)</title><rect x="34.7770%" y="165" width="2.8356%" height="15" fill="rgb(224,169,11)"/><text x="35.0270%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,610,697 samples, 1.92%)</title><rect x="35.6901%" y="149" width="1.9224%" height="15" fill="rgb(250,166,2)"/><text x="35.9401%" y="159.50">c..</text></g><g><title>item_attrs (105,091 samples, 0.13%)</title><rect x="43.0799%" y="133" width="0.1254%" height="15" fill="rgb(242,216,29)"/><text x="43.3299%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (103,311 samples, 0.12%)</title><rect x="43.0820%" y="117" width="0.1233%" height="15" fill="rgb(230,116,27)"/><text x="43.3320%" y="127.50"></text></g><g><title>codegen_fn_attrs (132,391 samples, 0.16%)</title><rect x="43.0498%" y="149" width="0.1580%" height="15" fill="rgb(228,99,48)"/><text x="43.2998%" y="159.50"></text></g><g><title>param_env (184,432 samples, 0.22%)</title><rect x="43.2512%" y="149" width="0.2201%" height="15" fill="rgb(253,11,6)"/><text x="43.5012%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (87,922 samples, 0.10%)</title><rect x="43.4713%" y="149" width="0.1049%" height="15" fill="rgb(247,143,39)"/><text x="43.7213%" y="159.50"></text></g><g><title>fn_abi_of_instance (663,247 samples, 0.79%)</title><rect x="42.7928%" y="165" width="0.7916%" height="15" fill="rgb(236,97,10)"/><text x="43.0428%" y="175.50"></text></g><g><title>codegen_module (4,131,101 samples, 4.93%)</title><rect x="38.7871%" y="181" width="4.9306%" height="15" fill="rgb(233,208,19)"/><text x="39.0371%" y="191.50">codege..</text></g><g><title>codegen_crate (5,119,162 samples, 6.11%)</title><rect x="37.6266%" y="197" width="6.1098%" height="15" fill="rgb(216,164,2)"/><text x="37.8766%" y="207.50">codegen_..</text></g><g><title>LLVM_module_codegen (18,438,506 samples, 22.01%)</title><rect x="43.7844%" y="181" width="22.0068%" height="15" fill="rgb(220,129,5)"/><text x="44.0344%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (16,787,589 samples, 20.04%)</title><rect x="45.7548%" y="165" width="20.0364%" height="15" fill="rgb(242,17,10)"/><text x="46.0048%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (19,561,528 samples, 23.35%)</title><rect x="43.7364%" y="197" width="23.3472%" height="15" fill="rgb(242,107,0)"/><text x="43.9864%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,082,811 samples, 1.29%)</title><rect x="65.7912%" y="181" width="1.2924%" height="15" fill="rgb(251,28,31)"/><text x="66.0412%" y="191.50"></text></g><g><title>AST_validation (172,302 samples, 0.21%)</title><rect x="67.3400%" y="181" width="0.2056%" height="15" fill="rgb(233,223,10)"/><text x="67.5900%" y="191.50"></text></g><g><title>metadata_load_macro (331,314 samples, 0.40%)</title><rect x="76.1706%" y="149" width="0.3954%" height="15" fill="rgb(215,21,27)"/><text x="76.4206%" y="159.50"></text></g><g><title>macro_expand_crate (7,638,827 samples, 9.12%)</title><rect x="67.6947%" y="181" width="9.1171%" height="15" fill="rgb(232,23,21)"/><text x="67.9447%" y="191.50">macro_expand_..</text></g><g><title>expand_crate (7,623,427 samples, 9.10%)</title><rect x="67.7130%" y="165" width="9.0987%" height="15" fill="rgb(244,5,23)"/><text x="67.9630%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (205,902 samples, 0.25%)</title><rect x="76.5660%" y="149" width="0.2457%" height="15" fill="rgb(226,81,46)"/><text x="76.8160%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (271,743 samples, 0.32%)</title><rect x="76.8181%" y="181" width="0.3243%" height="15" fill="rgb(247,70,30)"/><text x="77.0681%" y="191.50"></text></g><g><title>finalize_imports (278,483 samples, 0.33%)</title><rect x="77.1532%" y="165" width="0.3324%" height="15" fill="rgb(212,68,19)"/><text x="77.4032%" y="175.50"></text></g><g><title>late_resolve_crate (964,270 samples, 1.15%)</title><rect x="77.5144%" y="165" width="1.1509%" height="15" fill="rgb(240,187,13)"/><text x="77.7644%" y="175.50"></text></g><g><title>configure_and_expand (9,773,449 samples, 11.66%)</title><rect x="67.0836%" y="197" width="11.6648%" height="15" fill="rgb(223,113,26)"/><text x="67.3336%" y="207.50">configure_and_exp..</text></g><g><title>resolve_crate (1,345,604 samples, 1.61%)</title><rect x="77.1424%" y="181" width="1.6060%" height="15" fill="rgb(206,192,2)"/><text x="77.3924%" y="191.50"></text></g><g><title>drop_ast (119,691 samples, 0.14%)</title><rect x="78.7484%" y="197" width="0.1429%" height="15" fill="rgb(241,108,4)"/><text x="78.9984%" y="207.50"></text></g><g><title>early_lint_checks (260,463 samples, 0.31%)</title><rect x="78.9083%" y="197" width="0.3109%" height="15" fill="rgb(247,173,49)"/><text x="79.1583%" y="207.50"></text></g><g><title>free_global_ctxt (1,578,996 samples, 1.88%)</title><rect x="79.2192%" y="197" width="1.8846%" height="15" fill="rgb(224,114,35)"/><text x="79.4692%" y="207.50">f..</text></g><g><title>metadata_decode_entry_optimized_mir (99,601 samples, 0.12%)</title><rect x="82.1687%" y="101" width="0.1189%" height="15" fill="rgb(245,159,27)"/><text x="82.4187%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (116,412 samples, 0.14%)</title><rect x="82.2876%" y="101" width="0.1389%" height="15" fill="rgb(245,172,44)"/><text x="82.5376%" y="111.50"></text></g><g><title>eval_to_const_value_raw (262,843 samples, 0.31%)</title><rect x="82.5485%" y="85" width="0.3137%" height="15" fill="rgb(236,23,11)"/><text x="82.7985%" y="95.50"></text></g><g><title>eval_to_const_value_raw (258,333 samples, 0.31%)</title><rect x="82.5538%" y="69" width="0.3083%" height="15" fill="rgb(205,117,38)"/><text x="82.8038%" y="79.50"></text></g><g><title>eval_to_allocation_raw (249,283 samples, 0.30%)</title><rect x="82.5646%" y="53" width="0.2975%" height="15" fill="rgb(237,72,25)"/><text x="82.8146%" y="63.50"></text></g><g><title>optimized_mir (826,489 samples, 0.99%)</title><rect x="81.8780%" y="117" width="0.9864%" height="15" fill="rgb(244,70,9)"/><text x="82.1280%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (283,523 samples, 0.34%)</title><rect x="82.5260%" y="101" width="0.3384%" height="15" fill="rgb(217,125,39)"/><text x="82.7760%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (199,891 samples, 0.24%)</title><rect x="82.9238%" y="101" width="0.2386%" height="15" fill="rgb(235,36,10)"/><text x="83.1738%" y="111.50"></text></g><g><title>resolve_instance (365,224 samples, 0.44%)</title><rect x="82.8644%" y="117" width="0.4359%" height="15" fill="rgb(251,123,47)"/><text x="83.1144%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,448,075 samples, 1.73%)</title><rect x="81.6655%" y="133" width="1.7283%" height="15" fill="rgb(221,13,13)"/><text x="81.9155%" y="143.50"></text></g><g><title>monomorphization_collector (1,464,595 samples, 1.75%)</title><rect x="81.6622%" y="149" width="1.7480%" height="15" fill="rgb(238,131,9)"/><text x="81.9122%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (137,191 samples, 0.16%)</title><rect x="83.4139%" y="133" width="0.1637%" height="15" fill="rgb(211,50,8)"/><text x="83.6639%" y="143.50"></text></g><g><title>symbol_name (128,651 samples, 0.15%)</title><rect x="83.4241%" y="117" width="0.1535%" height="15" fill="rgb(245,182,24)"/><text x="83.6741%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (1,682,807 samples, 2.01%)</title><rect x="81.6377%" y="165" width="2.0085%" height="15" fill="rgb(242,14,37)"/><text x="81.8877%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (197,692 samples, 0.24%)</title><rect x="83.4102%" y="149" width="0.2360%" height="15" fill="rgb(246,228,12)"/><text x="83.6602%" y="159.50"></text></g><g><title>exported_symbols (1,741,397 samples, 2.08%)</title><rect x="81.6109%" y="181" width="2.0784%" height="15" fill="rgb(213,55,15)"/><text x="81.8609%" y="191.50">e..</text></g><g><title>layout_of (125,701 samples, 0.15%)</title><rect x="84.4144%" y="133" width="0.1500%" height="15" fill="rgb(209,9,3)"/><text x="84.6644%" y="143.50"></text></g><g><title>layout_of (91,201 samples, 0.11%)</title><rect x="84.4555%" y="117" width="0.1089%" height="15" fill="rgb(230,59,30)"/><text x="84.7055%" y="127.50"></text></g><g><title>layout_of (190,331 samples, 0.23%)</title><rect x="84.3412%" y="149" width="0.2272%" height="15" fill="rgb(209,121,21)"/><text x="84.5912%" y="159.50"></text></g><g><title>layout_of (292,884 samples, 0.35%)</title><rect x="84.2364%" y="165" width="0.3496%" height="15" fill="rgb(220,109,13)"/><text x="84.4864%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (441,174 samples, 0.53%)</title><rect x="84.5859%" y="165" width="0.5266%" height="15" fill="rgb(232,18,1)"/><text x="84.8359%" y="175.50"></text></g><g><title>specialization_graph_of (145,102 samples, 0.17%)</title><rect x="85.2189%" y="149" width="0.1732%" height="15" fill="rgb(215,41,42)"/><text x="85.4689%" y="159.50"></text></g><g><title>optimized_mir (1,396,615 samples, 1.67%)</title><rect x="83.7281%" y="181" width="1.6669%" height="15" fill="rgb(224,123,36)"/><text x="83.9781%" y="191.50"></text></g><g><title>resolve_instance (236,672 samples, 0.28%)</title><rect x="85.1125%" y="165" width="0.2825%" height="15" fill="rgb(240,125,3)"/><text x="85.3625%" y="175.50"></text></g><g><title>generate_crate_metadata (3,631,667 samples, 4.33%)</title><rect x="81.1038%" y="197" width="4.3345%" height="15" fill="rgb(205,98,50)"/><text x="81.3538%" y="207.50">gener..</text></g><g><title>hir_lowering (1,257,183 samples, 1.50%)</title><rect x="85.4383%" y="197" width="1.5005%" height="15" fill="rgb(205,185,37)"/><text x="85.6883%" y="207.50"></text></g><g><title>finish_ongoing_codegen (5,701,617 samples, 6.81%)</title><rect x="86.9541%" y="181" width="6.8050%" height="15" fill="rgb(238,207,15)"/><text x="87.2041%" y="191.50">finish_on..</text></g><g><title>join_worker_thread (102,461 samples, 0.12%)</title><rect x="93.6368%" y="165" width="0.1223%" height="15" fill="rgb(213,199,42)"/><text x="93.8868%" y="175.50"></text></g><g><title>link_crate (675,907 samples, 0.81%)</title><rect x="93.7591%" y="181" width="0.8067%" height="15" fill="rgb(235,201,11)"/><text x="94.0091%" y="191.50"></text></g><g><title>link_binary (669,757 samples, 0.80%)</title><rect x="93.7665%" y="165" width="0.7994%" height="15" fill="rgb(207,46,11)"/><text x="94.0165%" y="175.50"></text></g><g><title>link_rlib (415,815 samples, 0.50%)</title><rect x="94.0695%" y="149" width="0.4963%" height="15" fill="rgb(241,35,35)"/><text x="94.3195%" y="159.50"></text></g><g><title>link (6,399,554 samples, 7.64%)</title><rect x="86.9387%" y="197" width="7.6380%" height="15" fill="rgb(243,32,47)"/><text x="87.1887%" y="207.50">link</text></g><g><title>parse_crate (3,339,764 samples, 3.99%)</title><rect x="94.5768%" y="197" width="3.9861%" height="15" fill="rgb(247,202,23)"/><text x="94.8268%" y="207.50">pars..</text></g><g><title>prepare_outputs (349,403 samples, 0.42%)</title><rect x="98.5748%" y="197" width="0.4170%" height="15" fill="rgb(219,102,11)"/><text x="98.8248%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (410,174 samples, 0.49%)</title><rect x="98.9918%" y="197" width="0.4896%" height="15" fill="rgb(243,110,44)"/><text x="99.2418%" y="207.50"></text></g><g><title>setup_global_ctxt (143,052 samples, 0.17%)</title><rect x="99.4826%" y="197" width="0.1707%" height="15" fill="rgb(222,74,54)"/><text x="99.7326%" y="207.50"></text></g><g><title>all (83,785,487 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (83,785,487 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (290,473 samples, 0.35%)</title><rect x="99.6533%" y="197" width="0.3467%" height="15" fill="rgb(217,163,10)"/><text x="99.9033%" y="207.50"></text></g></svg></svg>