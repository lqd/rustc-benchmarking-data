<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,402,666 samples, 8.97%)</title><rect x="0.2944%" y="197" width="8.9722%" height="15" fill="rgb(227,0,7)"/><text x="0.5444%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (342,643 samples, 0.20%)</title><rect x="15.9249%" y="85" width="0.1996%" height="15" fill="rgb(217,0,24)"/><text x="16.1749%" y="95.50"></text></g><g><title>is_copy_raw (186,801 samples, 0.11%)</title><rect x="16.0157%" y="69" width="0.1088%" height="15" fill="rgb(221,193,54)"/><text x="16.2657%" y="79.50"></text></g><g><title>specialization_graph_of (755,378 samples, 0.44%)</title><rect x="16.2876%" y="69" width="0.4400%" height="15" fill="rgb(248,212,6)"/><text x="16.5376%" y="79.50"></text></g><g><title>impl_trait_ref (363,344 samples, 0.21%)</title><rect x="16.5160%" y="53" width="0.2117%" height="15" fill="rgb(208,68,35)"/><text x="16.7660%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (312,494 samples, 0.18%)</title><rect x="16.5456%" y="37" width="0.1820%" height="15" fill="rgb(232,128,0)"/><text x="16.7956%" y="47.50"></text></g><g><title>resolve_instance (1,040,321 samples, 0.61%)</title><rect x="16.1391%" y="85" width="0.6060%" height="15" fill="rgb(207,160,47)"/><text x="16.3891%" y="95.50"></text></g><g><title>thir_body (827,429 samples, 0.48%)</title><rect x="16.7515%" y="85" width="0.4820%" height="15" fill="rgb(228,23,34)"/><text x="17.0015%" y="95.50"></text></g><g><title>mir_const (5,576,526 samples, 3.25%)</title><rect x="13.9892%" y="133" width="3.2484%" height="15" fill="rgb(218,30,26)"/><text x="14.2392%" y="143.50">mir..</text></g><g><title>unsafety_check_result (4,976,081 samples, 2.90%)</title><rect x="14.3390%" y="117" width="2.8986%" height="15" fill="rgb(220,122,19)"/><text x="14.5890%" y="127.50">un..</text></g><g><title>mir_built (4,546,817 samples, 2.65%)</title><rect x="14.5890%" y="101" width="2.6486%" height="15" fill="rgb(250,228,42)"/><text x="14.8390%" y="111.50">mi..</text></g><g><title>mir_promoted (6,124,142 samples, 3.57%)</title><rect x="13.6827%" y="149" width="3.5674%" height="15" fill="rgb(240,193,28)"/><text x="13.9327%" y="159.50">mir_..</text></g><g><title>type_op_prove_predicate (849,289 samples, 0.49%)</title><rect x="17.3990%" y="149" width="0.4947%" height="15" fill="rgb(216,20,37)"/><text x="17.6490%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,585,347 samples, 8.50%)</title><rect x="9.4058%" y="181" width="8.4961%" height="15" fill="rgb(206,188,39)"/><text x="9.6558%" y="191.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (14,537,006 samples, 8.47%)</title><rect x="9.4339%" y="165" width="8.4679%" height="15" fill="rgb(217,207,13)"/><text x="9.6839%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (268,314 samples, 0.16%)</title><rect x="18.0925%" y="149" width="0.1563%" height="15" fill="rgb(231,73,38)"/><text x="18.3425%" y="159.50"></text></g><g><title>check_mod_attrs (449,684 samples, 0.26%)</title><rect x="17.9870%" y="165" width="0.2619%" height="15" fill="rgb(225,20,46)"/><text x="18.2370%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (281,852 samples, 0.16%)</title><rect x="18.3169%" y="165" width="0.1642%" height="15" fill="rgb(210,31,41)"/><text x="18.5669%" y="175.50"></text></g><g><title>misc_checking_1 (890,509 samples, 0.52%)</title><rect x="17.9794%" y="181" width="0.5187%" height="15" fill="rgb(221,200,47)"/><text x="18.2294%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (194,142 samples, 0.11%)</title><rect x="18.4989%" y="165" width="0.1131%" height="15" fill="rgb(226,26,5)"/><text x="18.7489%" y="175.50"></text></g><g><title>misc_checking_2 (777,908 samples, 0.45%)</title><rect x="18.4982%" y="181" width="0.4531%" height="15" fill="rgb(249,33,26)"/><text x="18.7482%" y="191.50"></text></g><g><title>match_checking (582,456 samples, 0.34%)</title><rect x="18.6120%" y="165" width="0.3393%" height="15" fill="rgb(235,183,28)"/><text x="18.8620%" y="175.50"></text></g><g><title>check_match (567,735 samples, 0.33%)</title><rect x="18.6206%" y="149" width="0.3307%" height="15" fill="rgb(221,5,38)"/><text x="18.8706%" y="159.50"></text></g><g><title>death_checking (384,194 samples, 0.22%)</title><rect x="19.0181%" y="165" width="0.2238%" height="15" fill="rgb(247,18,42)"/><text x="19.2681%" y="175.50"></text></g><g><title>item_attrs (199,402 samples, 0.12%)</title><rect x="19.1258%" y="149" width="0.1162%" height="15" fill="rgb(241,131,45)"/><text x="19.3758%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (197,242 samples, 0.11%)</title><rect x="19.1270%" y="133" width="0.1149%" height="15" fill="rgb(249,31,29)"/><text x="19.3770%" y="143.50"></text></g><g><title>crate_lints (1,715,937 samples, 1.00%)</title><rect x="19.2428%" y="149" width="0.9995%" height="15" fill="rgb(225,111,53)"/><text x="19.4928%" y="159.50"></text></g><g><title>type_of (1,037,199 samples, 0.60%)</title><rect x="19.6381%" y="133" width="0.6042%" height="15" fill="rgb(238,160,17)"/><text x="19.8881%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (804,188 samples, 0.47%)</title><rect x="19.7739%" y="117" width="0.4684%" height="15" fill="rgb(214,148,48)"/><text x="20.0239%" y="127.50"></text></g><g><title>lint_checking (2,026,850 samples, 1.18%)</title><rect x="19.2419%" y="165" width="1.1807%" height="15" fill="rgb(232,36,49)"/><text x="19.4919%" y="175.50"></text></g><g><title>module_lints (309,483 samples, 0.18%)</title><rect x="20.2423%" y="149" width="0.1803%" height="15" fill="rgb(209,103,24)"/><text x="20.4923%" y="159.50"></text></g><g><title>lint_mod (307,593 samples, 0.18%)</title><rect x="20.2434%" y="133" width="0.1792%" height="15" fill="rgb(229,88,8)"/><text x="20.4934%" y="143.50"></text></g><g><title>privacy_checking_modules (471,755 samples, 0.27%)</title><rect x="20.5058%" y="165" width="0.2748%" height="15" fill="rgb(213,181,19)"/><text x="20.7558%" y="175.50"></text></g><g><title>check_mod_privacy (470,295 samples, 0.27%)</title><rect x="20.5067%" y="149" width="0.2740%" height="15" fill="rgb(254,191,54)"/><text x="20.7567%" y="159.50"></text></g><g><title>misc_checking_3 (3,148,762 samples, 1.83%)</title><rect x="18.9513%" y="181" width="1.8342%" height="15" fill="rgb(241,83,37)"/><text x="19.2013%" y="191.50">m..</text></g><g><title>adt_destructor (308,263 samples, 0.18%)</title><rect x="20.8373%" y="133" width="0.1796%" height="15" fill="rgb(233,36,39)"/><text x="21.0873%" y="143.50"></text></g><g><title>coherent_trait (304,783 samples, 0.18%)</title><rect x="20.8393%" y="117" width="0.1775%" height="15" fill="rgb(226,3,54)"/><text x="21.0893%" y="127.50"></text></g><g><title>specialization_graph_of (303,553 samples, 0.18%)</title><rect x="20.8401%" y="101" width="0.1768%" height="15" fill="rgb(245,192,40)"/><text x="21.0901%" y="111.50"></text></g><g><title>is_copy_raw (188,242 samples, 0.11%)</title><rect x="21.0169%" y="133" width="0.1097%" height="15" fill="rgb(238,167,29)"/><text x="21.2669%" y="143.50"></text></g><g><title>impl_parent (2,609,158 samples, 1.52%)</title><rect x="23.6226%" y="117" width="1.5199%" height="15" fill="rgb(232,182,51)"/><text x="23.8726%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,389,610 samples, 0.81%)</title><rect x="24.3330%" y="101" width="0.8095%" height="15" fill="rgb(231,60,39)"/><text x="24.5830%" y="111.50"></text></g><g><title>impl_trait_ref (5,132,950 samples, 2.99%)</title><rect x="25.1424%" y="117" width="2.9900%" height="15" fill="rgb(208,69,12)"/><text x="25.3924%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,062,221 samples, 2.37%)</title><rect x="25.7661%" y="101" width="2.3663%" height="15" fill="rgb(235,93,37)"/><text x="26.0161%" y="111.50">me..</text></g><g><title>coherent_trait (13,491,156 samples, 7.86%)</title><rect x="20.8123%" y="149" width="7.8587%" height="15" fill="rgb(213,116,39)"/><text x="21.0623%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (12,868,069 samples, 7.50%)</title><rect x="21.1753%" y="133" width="7.4958%" height="15" fill="rgb(222,207,29)"/><text x="21.4253%" y="143.50">specializa..</text></g><g><title>trait_impls_of (923,090 samples, 0.54%)</title><rect x="28.1333%" y="117" width="0.5377%" height="15" fill="rgb(206,96,30)"/><text x="28.3833%" y="127.50"></text></g><g><title>implementations_of_trait (220,325 samples, 0.13%)</title><rect x="28.5427%" y="101" width="0.1283%" height="15" fill="rgb(218,138,4)"/><text x="28.7927%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (178,533 samples, 0.10%)</title><rect x="28.5671%" y="85" width="0.1040%" height="15" fill="rgb(250,191,14)"/><text x="28.8171%" y="95.50"></text></g><g><title>coherence_checking (13,541,936 samples, 7.89%)</title><rect x="20.8034%" y="165" width="7.8883%" height="15" fill="rgb(239,60,40)"/><text x="21.0534%" y="175.50">coherence_c..</text></g><g><title>associated_item (208,840 samples, 0.12%)</title><rect x="38.4343%" y="101" width="0.1217%" height="15" fill="rgb(206,27,48)"/><text x="38.6843%" y="111.50"></text></g><g><title>associated_items (299,913 samples, 0.17%)</title><rect x="38.3891%" y="117" width="0.1747%" height="15" fill="rgb(225,35,8)"/><text x="38.6391%" y="127.50"></text></g><g><title>generics_of (593,933 samples, 0.35%)</title><rect x="39.8498%" y="101" width="0.3460%" height="15" fill="rgb(250,213,24)"/><text x="40.0998%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (492,053 samples, 0.29%)</title><rect x="39.9092%" y="85" width="0.2866%" height="15" fill="rgb(247,123,22)"/><text x="40.1592%" y="95.50"></text></g><g><title>impl_trait_ref (172,002 samples, 0.10%)</title><rect x="40.2447%" y="101" width="0.1002%" height="15" fill="rgb(231,138,38)"/><text x="40.4947%" y="111.50"></text></g><g><title>predicates_of (370,757 samples, 0.22%)</title><rect x="40.3600%" y="101" width="0.2160%" height="15" fill="rgb(231,145,46)"/><text x="40.6100%" y="111.50"></text></g><g><title>predicates_defined_on (222,496 samples, 0.13%)</title><rect x="40.4464%" y="85" width="0.1296%" height="15" fill="rgb(251,118,11)"/><text x="40.6964%" y="95.50"></text></g><g><title>specializes (532,908 samples, 0.31%)</title><rect x="40.5760%" y="101" width="0.3104%" height="15" fill="rgb(217,147,25)"/><text x="40.8260%" y="111.50"></text></g><g><title>param_env (329,415 samples, 0.19%)</title><rect x="40.6946%" y="85" width="0.1919%" height="15" fill="rgb(247,81,37)"/><text x="40.9446%" y="95.50"></text></g><g><title>trait_impls_of (361,395 samples, 0.21%)</title><rect x="40.8943%" y="101" width="0.2105%" height="15" fill="rgb(209,12,38)"/><text x="41.1443%" y="111.50"></text></g><g><title>evaluate_obligation (4,242,846 samples, 2.47%)</title><rect x="38.6387%" y="117" width="2.4715%" height="15" fill="rgb(227,1,9)"/><text x="38.8887%" y="127.50">ev..</text></g><g><title>generics_of (614,338 samples, 0.36%)</title><rect x="41.1674%" y="117" width="0.3579%" height="15" fill="rgb(248,47,43)"/><text x="41.4174%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (472,976 samples, 0.28%)</title><rect x="41.2498%" y="101" width="0.2755%" height="15" fill="rgb(221,10,30)"/><text x="41.4998%" y="111.50"></text></g><g><title>predicates_of (258,130 samples, 0.15%)</title><rect x="41.7845%" y="117" width="0.1504%" height="15" fill="rgb(210,229,1)"/><text x="42.0345%" y="127.50"></text></g><g><title>predicates_defined_on (178,100 samples, 0.10%)</title><rect x="41.8311%" y="101" width="0.1037%" height="15" fill="rgb(222,148,37)"/><text x="42.0811%" y="111.50"></text></g><g><title>associated_items (217,052 samples, 0.13%)</title><rect x="42.3365%" y="101" width="0.1264%" height="15" fill="rgb(234,67,33)"/><text x="42.5865%" y="111.50"></text></g><g><title>typeck (1,112,801 samples, 0.65%)</title><rect x="42.0461%" y="117" width="0.6482%" height="15" fill="rgb(247,98,35)"/><text x="42.2961%" y="127.50"></text></g><g><title>item_bodies_checking (24,042,181 samples, 14.00%)</title><rect x="28.7029%" y="165" width="14.0048%" height="15" fill="rgb(247,138,52)"/><text x="28.9529%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (24,040,051 samples, 14.00%)</title><rect x="28.7042%" y="149" width="14.0035%" height="15" fill="rgb(213,79,30)"/><text x="28.9542%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (24,002,619 samples, 13.98%)</title><rect x="28.7260%" y="133" width="13.9817%" height="15" fill="rgb(246,177,23)"/><text x="28.9760%" y="143.50">typeck</text></g><g><title>item_types_checking (516,276 samples, 0.30%)</title><rect x="42.7077%" y="165" width="0.3007%" height="15" fill="rgb(230,62,27)"/><text x="42.9577%" y="175.50"></text></g><g><title>check_mod_item_types (514,356 samples, 0.30%)</title><rect x="42.7088%" y="149" width="0.2996%" height="15" fill="rgb(216,154,8)"/><text x="42.9588%" y="159.50"></text></g><g><title>is_late_bound_map (260,142 samples, 0.15%)</title><rect x="43.2179%" y="117" width="0.1515%" height="15" fill="rgb(244,35,45)"/><text x="43.4679%" y="127.50"></text></g><g><title>resolve_lifetimes (247,652 samples, 0.14%)</title><rect x="43.2252%" y="101" width="0.1443%" height="15" fill="rgb(251,115,12)"/><text x="43.4752%" y="111.50"></text></g><g><title>generics_of (452,293 samples, 0.26%)</title><rect x="43.1764%" y="133" width="0.2635%" height="15" fill="rgb(240,54,50)"/><text x="43.4264%" y="143.50"></text></g><g><title>predicates_of (241,542 samples, 0.14%)</title><rect x="43.4717%" y="133" width="0.1407%" height="15" fill="rgb(233,84,52)"/><text x="43.7217%" y="143.50"></text></g><g><title>predicates_defined_on (214,161 samples, 0.12%)</title><rect x="43.4877%" y="117" width="0.1248%" height="15" fill="rgb(207,117,47)"/><text x="43.7377%" y="127.50"></text></g><g><title>type_collecting (1,119,761 samples, 0.65%)</title><rect x="43.0088%" y="165" width="0.6523%" height="15" fill="rgb(249,43,39)"/><text x="43.2588%" y="175.50"></text></g><g><title>collect_mod_item_types (1,114,411 samples, 0.65%)</title><rect x="43.0119%" y="149" width="0.6492%" height="15" fill="rgb(209,38,44)"/><text x="43.2619%" y="159.50"></text></g><g><title>evaluate_obligation (196,954 samples, 0.11%)</title><rect x="44.1187%" y="133" width="0.1147%" height="15" fill="rgb(236,212,23)"/><text x="44.3687%" y="143.50"></text></g><g><title>region_scope_tree (268,780 samples, 0.16%)</title><rect x="44.3409%" y="133" width="0.1566%" height="15" fill="rgb(242,79,21)"/><text x="44.5909%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,341,349 samples, 0.78%)</title><rect x="43.7247%" y="149" width="0.7813%" height="15" fill="rgb(211,96,35)"/><text x="43.9747%" y="159.50"></text></g><g><title>analysis (61,788,683 samples, 35.99%)</title><rect x="9.2665%" y="197" width="35.9924%" height="15" fill="rgb(253,215,40)"/><text x="9.5165%" y="207.50">analysis</text></g><g><title>type_check_crate (42,013,914 samples, 24.47%)</title><rect x="20.7855%" y="181" width="24.4734%" height="15" fill="rgb(211,81,21)"/><text x="21.0355%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,740,868 samples, 1.60%)</title><rect x="43.6624%" y="165" width="1.5966%" height="15" fill="rgb(208,190,38)"/><text x="43.9124%" y="175.50"></text></g><g><title>check_item_well_formed (1,292,558 samples, 0.75%)</title><rect x="44.5060%" y="149" width="0.7529%" height="15" fill="rgb(235,213,38)"/><text x="44.7560%" y="159.50"></text></g><g><title>codegen_fn_attrs (240,030 samples, 0.14%)</title><rect x="51.5995%" y="149" width="0.1398%" height="15" fill="rgb(237,122,38)"/><text x="51.8495%" y="159.50"></text></g><g><title>eval_to_const_value_raw (422,285 samples, 0.25%)</title><rect x="51.8335%" y="133" width="0.2460%" height="15" fill="rgb(244,218,35)"/><text x="52.0835%" y="143.50"></text></g><g><title>eval_to_const_value_raw (410,935 samples, 0.24%)</title><rect x="51.8401%" y="117" width="0.2394%" height="15" fill="rgb(240,68,47)"/><text x="52.0901%" y="127.50"></text></g><g><title>eval_to_allocation_raw (391,155 samples, 0.23%)</title><rect x="51.8517%" y="101" width="0.2279%" height="15" fill="rgb(210,16,53)"/><text x="52.1017%" y="111.50"></text></g><g><title>static_mutability (227,672 samples, 0.13%)</title><rect x="51.9469%" y="85" width="0.1326%" height="15" fill="rgb(235,124,12)"/><text x="52.1969%" y="95.50"></text></g><g><title>layout_of (775,478 samples, 0.45%)</title><rect x="51.7647%" y="149" width="0.4517%" height="15" fill="rgb(224,169,11)"/><text x="52.0147%" y="159.50"></text></g><g><title>predicates_of (250,972 samples, 0.15%)</title><rect x="52.5315%" y="133" width="0.1462%" height="15" fill="rgb(250,166,2)"/><text x="52.7815%" y="143.50"></text></g><g><title>param_env (793,726 samples, 0.46%)</title><rect x="52.2164%" y="149" width="0.4624%" height="15" fill="rgb(242,216,29)"/><text x="52.4664%" y="159.50"></text></g><g><title>fn_abi_of_instance (2,491,419 samples, 1.45%)</title><rect x="51.2393%" y="165" width="1.4513%" height="15" fill="rgb(230,116,27)"/><text x="51.4893%" y="175.50"></text></g><g><title>layout_of (321,173 samples, 0.19%)</title><rect x="52.7361%" y="165" width="0.1871%" height="15" fill="rgb(228,99,48)"/><text x="52.9861%" y="175.50"></text></g><g><title>symbol_name (332,273 samples, 0.19%)</title><rect x="52.9351%" y="165" width="0.1936%" height="15" fill="rgb(253,11,6)"/><text x="53.1851%" y="175.50"></text></g><g><title>codegen_module (12,068,514 samples, 7.03%)</title><rect x="46.1208%" y="181" width="7.0300%" height="15" fill="rgb(247,143,39)"/><text x="46.3708%" y="191.50">codegen_m..</text></g><g><title>codegen_crate (13,610,698 samples, 7.93%)</title><rect x="45.2634%" y="197" width="7.9283%" height="15" fill="rgb(236,97,10)"/><text x="45.5134%" y="207.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (42,875,810 samples, 24.98%)</title><rect x="53.2461%" y="181" width="24.9755%" height="15" fill="rgb(233,208,19)"/><text x="53.4961%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (40,833,703 samples, 23.79%)</title><rect x="54.4357%" y="165" width="23.7860%" height="15" fill="rgb(216,164,2)"/><text x="54.6857%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (46,314,185 samples, 26.98%)</title><rect x="53.1918%" y="197" width="26.9784%" height="15" fill="rgb(220,129,5)"/><text x="53.4418%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,345,063 samples, 1.95%)</title><rect x="78.2216%" y="181" width="1.9485%" height="15" fill="rgb(242,17,10)"/><text x="78.4716%" y="191.50">L..</text></g><g><title>metadata_load_macro (246,502 samples, 0.14%)</title><rect x="84.9878%" y="149" width="0.1436%" height="15" fill="rgb(242,107,0)"/><text x="85.2378%" y="159.50"></text></g><g><title>macro_expand_crate (10,271,594 samples, 5.98%)</title><rect x="80.3670%" y="181" width="5.9833%" height="15" fill="rgb(251,28,31)"/><text x="80.6170%" y="191.50">macro_ex..</text></g><g><title>expand_crate (10,258,344 samples, 5.98%)</title><rect x="80.3747%" y="165" width="5.9756%" height="15" fill="rgb(233,223,10)"/><text x="80.6247%" y="175.50">expand_c..</text></g><g><title>metadata_register_crate (2,092,501 samples, 1.22%)</title><rect x="85.1314%" y="149" width="1.2189%" height="15" fill="rgb(215,21,27)"/><text x="85.3814%" y="159.50"></text></g><g><title>metadata_register_crate (752,030 samples, 0.44%)</title><rect x="85.9122%" y="133" width="0.4381%" height="15" fill="rgb(232,23,21)"/><text x="86.1622%" y="143.50"></text></g><g><title>finalize_macro_resolutions (175,432 samples, 0.10%)</title><rect x="86.4333%" y="165" width="0.1022%" height="15" fill="rgb(244,5,23)"/><text x="86.6833%" y="175.50"></text></g><g><title>late_resolve_crate (1,671,767 samples, 0.97%)</title><rect x="86.5355%" y="165" width="0.9738%" height="15" fill="rgb(226,81,46)"/><text x="86.7855%" y="175.50"></text></g><g><title>configure_and_expand (12,683,178 samples, 7.39%)</title><rect x="80.1702%" y="197" width="7.3881%" height="15" fill="rgb(247,70,30)"/><text x="80.4202%" y="207.50">configure_..</text></g><g><title>resolve_crate (1,945,749 samples, 1.13%)</title><rect x="86.4248%" y="181" width="1.1334%" height="15" fill="rgb(212,68,19)"/><text x="86.6748%" y="191.50"></text></g><g><title>early_lint_checks (515,685 samples, 0.30%)</title><rect x="87.6498%" y="197" width="0.3004%" height="15" fill="rgb(240,187,13)"/><text x="87.8998%" y="207.50"></text></g><g><title>free_global_ctxt (4,355,693 samples, 2.54%)</title><rect x="87.9501%" y="197" width="2.5372%" height="15" fill="rgb(223,113,26)"/><text x="88.2001%" y="207.50">fr..</text></g><g><title>item_attrs (227,611 samples, 0.13%)</title><rect x="91.3094%" y="101" width="0.1326%" height="15" fill="rgb(206,192,2)"/><text x="91.5594%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (221,341 samples, 0.13%)</title><rect x="91.3131%" y="85" width="0.1289%" height="15" fill="rgb(241,108,4)"/><text x="91.5631%" y="95.50"></text></g><g><title>codegen_fn_attrs (341,703 samples, 0.20%)</title><rect x="91.2761%" y="117" width="0.1990%" height="15" fill="rgb(247,173,49)"/><text x="91.5261%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (260,243 samples, 0.15%)</title><rect x="91.7532%" y="101" width="0.1516%" height="15" fill="rgb(224,114,35)"/><text x="92.0032%" y="111.50"></text></g><g><title>optimized_mir (880,737 samples, 0.51%)</title><rect x="91.5522%" y="117" width="0.5130%" height="15" fill="rgb(245,159,27)"/><text x="91.8022%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (275,442 samples, 0.16%)</title><rect x="91.9048%" y="101" width="0.1604%" height="15" fill="rgb(245,172,44)"/><text x="92.1548%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (328,342 samples, 0.19%)</title><rect x="92.1548%" y="101" width="0.1913%" height="15" fill="rgb(236,23,11)"/><text x="92.4048%" y="111.50"></text></g><g><title>specialization_graph_of (567,216 samples, 0.33%)</title><rect x="92.4587%" y="101" width="0.3304%" height="15" fill="rgb(205,117,38)"/><text x="92.7087%" y="111.50"></text></g><g><title>impl_trait_ref (209,683 samples, 0.12%)</title><rect x="92.6669%" y="85" width="0.1221%" height="15" fill="rgb(237,72,25)"/><text x="92.9169%" y="95.50"></text></g><g><title>resolve_instance (1,304,744 samples, 0.76%)</title><rect x="92.0652%" y="117" width="0.7600%" height="15" fill="rgb(244,70,9)"/><text x="92.3152%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (3,434,145 samples, 2.00%)</title><rect x="91.1044%" y="133" width="2.0004%" height="15" fill="rgb(217,125,39)"/><text x="91.3544%" y="143.50">m..</text></g><g><title>vtable_entries (265,342 samples, 0.15%)</title><rect x="92.9502%" y="117" width="0.1546%" height="15" fill="rgb(235,36,10)"/><text x="93.2002%" y="127.50"></text></g><g><title>resolve_instance (206,932 samples, 0.12%)</title><rect x="92.9843%" y="101" width="0.1205%" height="15" fill="rgb(251,123,47)"/><text x="93.2343%" y="111.50"></text></g><g><title>monomorphization_collector (3,458,236 samples, 2.01%)</title><rect x="91.1031%" y="149" width="2.0145%" height="15" fill="rgb(221,13,13)"/><text x="91.3531%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (286,263 samples, 0.17%)</title><rect x="93.1201%" y="133" width="0.1668%" height="15" fill="rgb(238,131,9)"/><text x="93.3701%" y="143.50"></text></g><g><title>symbol_name (260,733 samples, 0.15%)</title><rect x="93.1350%" y="117" width="0.1519%" height="15" fill="rgb(211,50,8)"/><text x="93.3850%" y="127.50"></text></g><g><title>cgu_partitioning_place_roots (437,624 samples, 0.25%)</title><rect x="93.3202%" y="117" width="0.2549%" height="15" fill="rgb(245,182,24)"/><text x="93.5702%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (4,274,144 samples, 2.49%)</title><rect x="91.0888%" y="165" width="2.4897%" height="15" fill="rgb(242,14,37)"/><text x="91.3388%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (791,358 samples, 0.46%)</title><rect x="93.1175%" y="149" width="0.4610%" height="15" fill="rgb(246,228,12)"/><text x="93.3675%" y="159.50"></text></g><g><title>cgu_partitioning (500,585 samples, 0.29%)</title><rect x="93.2869%" y="133" width="0.2916%" height="15" fill="rgb(213,55,15)"/><text x="93.5369%" y="143.50"></text></g><g><title>exported_symbols (4,366,005 samples, 2.54%)</title><rect x="91.0752%" y="181" width="2.5432%" height="15" fill="rgb(209,9,3)"/><text x="91.3252%" y="191.50">ex..</text></g><g><title>layout_of (267,284 samples, 0.16%)</title><rect x="94.7945%" y="165" width="0.1557%" height="15" fill="rgb(230,59,30)"/><text x="95.0445%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,028,661 samples, 1.18%)</title><rect x="94.9502%" y="165" width="1.1817%" height="15" fill="rgb(209,121,21)"/><text x="95.2002%" y="175.50"></text></g><g><title>optimized_mir (4,276,552 samples, 2.49%)</title><rect x="93.6510%" y="181" width="2.4911%" height="15" fill="rgb(220,109,13)"/><text x="93.9010%" y="191.50">op..</text></g><g><title>generate_crate_metadata (9,739,079 samples, 5.67%)</title><rect x="90.4874%" y="197" width="5.6731%" height="15" fill="rgb(232,18,1)"/><text x="90.7374%" y="207.50">generat..</text></g><g><title>hir_lowering (2,011,910 samples, 1.17%)</title><rect x="96.1605%" y="197" width="1.1720%" height="15" fill="rgb(215,41,42)"/><text x="96.4105%" y="207.50"></text></g><g><title>link_binary_remove_temps (179,512 samples, 0.10%)</title><rect x="97.5018%" y="149" width="0.1046%" height="15" fill="rgb(224,123,36)"/><text x="97.7518%" y="159.50"></text></g><g><title>link_crate (1,138,001 samples, 0.66%)</title><rect x="97.3426%" y="181" width="0.6629%" height="15" fill="rgb(240,125,3)"/><text x="97.5926%" y="191.50"></text></g><g><title>link_binary (1,124,621 samples, 0.66%)</title><rect x="97.3504%" y="165" width="0.6551%" height="15" fill="rgb(205,98,50)"/><text x="97.6004%" y="175.50"></text></g><g><title>link_rlib (685,107 samples, 0.40%)</title><rect x="97.6064%" y="149" width="0.3991%" height="15" fill="rgb(205,185,37)"/><text x="97.8564%" y="159.50"></text></g><g><title>link (1,161,071 samples, 0.68%)</title><rect x="97.3324%" y="197" width="0.6763%" height="15" fill="rgb(238,207,15)"/><text x="97.5824%" y="207.50"></text></g><g><title>parse_crate (1,871,629 samples, 1.09%)</title><rect x="98.0087%" y="197" width="1.0902%" height="15" fill="rgb(213,199,42)"/><text x="98.2587%" y="207.50"></text></g><g><title>prepare_outputs (203,662 samples, 0.12%)</title><rect x="99.1028%" y="197" width="0.1186%" height="15" fill="rgb(235,201,11)"/><text x="99.3528%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (904,879 samples, 0.53%)</title><rect x="99.2214%" y="197" width="0.5271%" height="15" fill="rgb(207,46,11)"/><text x="99.4714%" y="207.50"></text></g><g><title>all (171,671,470 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (171,671,470 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (359,283 samples, 0.21%)</title><rect x="99.7907%" y="197" width="0.2093%" height="15" fill="rgb(247,202,23)"/><text x="100.0407%" y="207.50"></text></g></svg></svg>