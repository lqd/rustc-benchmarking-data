<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,649,732 samples, 4.29%)</title><rect x="0.1802%" y="181" width="4.2898%" height="15" fill="rgb(227,0,7)"/><text x="0.4302%" y="191.50">LLVM_..</text></g><g><title>param_env (680,055 samples, 0.25%)</title><rect x="15.1929%" y="101" width="0.2504%" height="15" fill="rgb(217,0,24)"/><text x="15.4429%" y="111.50"></text></g><g><title>item_attrs (560,778 samples, 0.21%)</title><rect x="15.8781%" y="69" width="0.2065%" height="15" fill="rgb(221,193,54)"/><text x="16.1281%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (544,308 samples, 0.20%)</title><rect x="15.8841%" y="53" width="0.2004%" height="15" fill="rgb(248,212,6)"/><text x="16.1341%" y="63.50"></text></g><g><title>codegen_fn_attrs (774,110 samples, 0.29%)</title><rect x="15.8102%" y="85" width="0.2851%" height="15" fill="rgb(208,68,35)"/><text x="16.0602%" y="95.50"></text></g><g><title>is_copy_raw (365,127 samples, 0.13%)</title><rect x="18.1313%" y="69" width="0.1345%" height="15" fill="rgb(232,128,0)"/><text x="18.3813%" y="79.50"></text></g><g><title>evaluate_obligation (295,296 samples, 0.11%)</title><rect x="18.1571%" y="53" width="0.1087%" height="15" fill="rgb(207,160,47)"/><text x="18.4071%" y="63.50"></text></g><g><title>adt_drop_tys (275,010 samples, 0.10%)</title><rect x="18.3336%" y="53" width="0.1013%" height="15" fill="rgb(228,23,34)"/><text x="18.5836%" y="63.50"></text></g><g><title>is_copy_raw (1,179,384 samples, 0.43%)</title><rect x="18.4349%" y="53" width="0.4343%" height="15" fill="rgb(218,30,26)"/><text x="18.6849%" y="63.50"></text></g><g><title>evaluate_obligation (967,560 samples, 0.36%)</title><rect x="18.5129%" y="37" width="0.3563%" height="15" fill="rgb(220,122,19)"/><text x="18.7629%" y="47.50"></text></g><g><title>needs_drop_raw (1,640,275 samples, 0.60%)</title><rect x="18.2678%" y="69" width="0.6040%" height="15" fill="rgb(250,228,42)"/><text x="18.5178%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (916,861 samples, 0.34%)</title><rect x="19.0584%" y="53" width="0.3376%" height="15" fill="rgb(240,193,28)"/><text x="19.3084%" y="63.50"></text></g><g><title>resolve_instance (1,808,593 samples, 0.67%)</title><rect x="18.8718%" y="69" width="0.6660%" height="15" fill="rgb(216,20,37)"/><text x="19.1218%" y="79.50"></text></g><g><title>thir_body (2,043,375 samples, 0.75%)</title><rect x="19.5597%" y="69" width="0.7524%" height="15" fill="rgb(206,188,39)"/><text x="19.8097%" y="79.50"></text></g><g><title>mir_const (15,956,190 samples, 5.88%)</title><rect x="14.5317%" y="117" width="5.8756%" height="15" fill="rgb(217,207,13)"/><text x="14.7817%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (13,480,548 samples, 4.96%)</title><rect x="15.4433%" y="101" width="4.9640%" height="15" fill="rgb(231,73,38)"/><text x="15.6933%" y="111.50">unsafe..</text></g><g><title>mir_built (11,709,938 samples, 4.31%)</title><rect x="16.0953%" y="85" width="4.3120%" height="15" fill="rgb(225,20,46)"/><text x="16.3453%" y="95.50">mir_b..</text></g><g><title>mir_promoted (18,707,783 samples, 6.89%)</title><rect x="13.8719%" y="133" width="6.8888%" height="15" fill="rgb(210,31,41)"/><text x="14.1219%" y="143.50">mir_promo..</text></g><g><title>mir_const_qualif (959,901 samples, 0.35%)</title><rect x="20.4073%" y="117" width="0.3535%" height="15" fill="rgb(221,200,47)"/><text x="20.6573%" y="127.50"></text></g><g><title>mir_const (692,740 samples, 0.26%)</title><rect x="20.5056%" y="101" width="0.2551%" height="15" fill="rgb(226,26,5)"/><text x="20.7556%" y="111.50"></text></g><g><title>unsafety_check_result (479,699 samples, 0.18%)</title><rect x="20.5841%" y="85" width="0.1766%" height="15" fill="rgb(249,33,26)"/><text x="20.8341%" y="95.50"></text></g><g><title>mir_built (410,587 samples, 0.15%)</title><rect x="20.6095%" y="69" width="0.1512%" height="15" fill="rgb(235,183,28)"/><text x="20.8595%" y="79.50"></text></g><g><title>type_op_ascribe_user_type (820,217 samples, 0.30%)</title><rect x="20.7643%" y="133" width="0.3020%" height="15" fill="rgb(221,5,38)"/><text x="21.0143%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,536,888 samples, 0.57%)</title><rect x="21.0664%" y="133" width="0.5659%" height="15" fill="rgb(247,18,42)"/><text x="21.3164%" y="143.50"></text></g><g><title>normalize_projection_ty (686,018 samples, 0.25%)</title><rect x="21.3797%" y="117" width="0.2526%" height="15" fill="rgb(241,131,45)"/><text x="21.6297%" y="127.50"></text></g><g><title>type_op_normalize_predicate (678,395 samples, 0.25%)</title><rect x="21.6323%" y="133" width="0.2498%" height="15" fill="rgb(249,31,29)"/><text x="21.8823%" y="143.50"></text></g><g><title>type_op_normalize_ty (580,744 samples, 0.21%)</title><rect x="21.8821%" y="133" width="0.2138%" height="15" fill="rgb(225,111,53)"/><text x="22.1321%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,977,705 samples, 1.83%)</title><rect x="22.0960%" y="133" width="1.8330%" height="15" fill="rgb(238,160,17)"/><text x="22.3460%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (52,379,953 samples, 19.29%)</title><rect x="4.6450%" y="165" width="19.2880%" height="15" fill="rgb(214,148,48)"/><text x="4.8950%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (52,017,510 samples, 19.15%)</title><rect x="4.7785%" y="149" width="19.1546%" height="15" fill="rgb(232,36,49)"/><text x="5.0285%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (636,617 samples, 0.23%)</title><rect x="23.9331%" y="165" width="0.2344%" height="15" fill="rgb(209,103,24)"/><text x="24.1831%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (487,096 samples, 0.18%)</title><rect x="23.9881%" y="149" width="0.1794%" height="15" fill="rgb(229,88,8)"/><text x="24.2381%" y="159.50"></text></g><g><title>hir_module_items (318,814 samples, 0.12%)</title><rect x="24.1675%" y="165" width="0.1174%" height="15" fill="rgb(213,181,19)"/><text x="24.4175%" y="175.50"></text></g><g><title>should_inherit_track_caller (486,146 samples, 0.18%)</title><rect x="24.5286%" y="117" width="0.1790%" height="15" fill="rgb(254,191,54)"/><text x="24.7786%" y="127.50"></text></g><g><title>codegen_fn_attrs (763,579 samples, 0.28%)</title><rect x="24.4323%" y="133" width="0.2812%" height="15" fill="rgb(241,83,37)"/><text x="24.6823%" y="143.50"></text></g><g><title>check_mod_attrs (1,146,212 samples, 0.42%)</title><rect x="24.2914%" y="149" width="0.4221%" height="15" fill="rgb(233,36,39)"/><text x="24.5414%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (954,410 samples, 0.35%)</title><rect x="24.8542%" y="149" width="0.3514%" height="15" fill="rgb(226,3,54)"/><text x="25.1042%" y="159.50"></text></g><g><title>misc_checking_1 (2,572,057 samples, 0.95%)</title><rect x="24.2851%" y="165" width="0.9471%" height="15" fill="rgb(245,192,40)"/><text x="24.5351%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (926,380 samples, 0.34%)</title><rect x="25.2328%" y="149" width="0.3411%" height="15" fill="rgb(238,167,29)"/><text x="25.4828%" y="159.50"></text></g><g><title>check_mod_liveness (756,958 samples, 0.28%)</title><rect x="25.2952%" y="133" width="0.2787%" height="15" fill="rgb(232,182,51)"/><text x="25.5452%" y="143.50"></text></g><g><title>misc_checking_2 (1,855,270 samples, 0.68%)</title><rect x="25.2322%" y="165" width="0.6832%" height="15" fill="rgb(231,60,39)"/><text x="25.4822%" y="175.50"></text></g><g><title>match_checking (927,300 samples, 0.34%)</title><rect x="25.5739%" y="149" width="0.3415%" height="15" fill="rgb(208,69,12)"/><text x="25.8239%" y="159.50"></text></g><g><title>check_match (850,029 samples, 0.31%)</title><rect x="25.6023%" y="133" width="0.3130%" height="15" fill="rgb(235,93,37)"/><text x="25.8523%" y="143.50"></text></g><g><title>check_private_in_public (440,055 samples, 0.16%)</title><rect x="25.9194%" y="149" width="0.1620%" height="15" fill="rgb(213,116,39)"/><text x="26.1694%" y="159.50"></text></g><g><title>death_checking (676,097 samples, 0.25%)</title><rect x="26.0815%" y="149" width="0.2490%" height="15" fill="rgb(222,207,29)"/><text x="26.3315%" y="159.50"></text></g><g><title>crate_lints (1,377,514 samples, 0.51%)</title><rect x="26.3310%" y="133" width="0.5072%" height="15" fill="rgb(206,96,30)"/><text x="26.5810%" y="143.50"></text></g><g><title>type_of (429,055 samples, 0.16%)</title><rect x="26.6803%" y="117" width="0.1580%" height="15" fill="rgb(218,138,4)"/><text x="26.9303%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (338,454 samples, 0.12%)</title><rect x="26.7137%" y="101" width="0.1246%" height="15" fill="rgb(250,191,14)"/><text x="26.9637%" y="111.50"></text></g><g><title>lint_checking (2,135,392 samples, 0.79%)</title><rect x="26.3304%" y="149" width="0.7863%" height="15" fill="rgb(239,60,40)"/><text x="26.5804%" y="159.50"></text></g><g><title>module_lints (756,248 samples, 0.28%)</title><rect x="26.8383%" y="133" width="0.2785%" height="15" fill="rgb(206,27,48)"/><text x="27.0883%" y="143.50"></text></g><g><title>lint_mod (753,418 samples, 0.28%)</title><rect x="26.8393%" y="117" width="0.2774%" height="15" fill="rgb(225,35,8)"/><text x="27.0893%" y="127.50"></text></g><g><title>privacy_access_levels (604,846 samples, 0.22%)</title><rect x="27.1168%" y="149" width="0.2227%" height="15" fill="rgb(250,213,24)"/><text x="27.3668%" y="159.50"></text></g><g><title>privacy_checking_modules (1,706,148 samples, 0.63%)</title><rect x="27.3395%" y="149" width="0.6283%" height="15" fill="rgb(247,123,22)"/><text x="27.5895%" y="159.50"></text></g><g><title>check_mod_privacy (1,704,318 samples, 0.63%)</title><rect x="27.3402%" y="133" width="0.6276%" height="15" fill="rgb(231,138,38)"/><text x="27.5902%" y="143.50"></text></g><g><title>misc_checking_3 (5,592,528 samples, 2.06%)</title><rect x="25.9154%" y="165" width="2.0594%" height="15" fill="rgb(231,145,46)"/><text x="26.1654%" y="175.50">m..</text></g><g><title>impl_parent (1,366,018 samples, 0.50%)</title><rect x="30.7062%" y="101" width="0.5030%" height="15" fill="rgb(251,118,11)"/><text x="30.9562%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (786,180 samples, 0.29%)</title><rect x="30.9198%" y="85" width="0.2895%" height="15" fill="rgb(217,147,25)"/><text x="31.1698%" y="95.50"></text></g><g><title>impl_trait_ref (2,962,920 samples, 1.09%)</title><rect x="31.2098%" y="101" width="1.0910%" height="15" fill="rgb(247,81,37)"/><text x="31.4598%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,384,631 samples, 0.88%)</title><rect x="31.4227%" y="85" width="0.8781%" height="15" fill="rgb(209,12,38)"/><text x="31.6727%" y="95.50"></text></g><g><title>trait_impls_of (494,454 samples, 0.18%)</title><rect x="32.3716%" y="101" width="0.1821%" height="15" fill="rgb(227,1,9)"/><text x="32.6216%" y="111.50"></text></g><g><title>coherent_trait (12,283,000 samples, 4.52%)</title><rect x="28.0367%" y="133" width="4.5230%" height="15" fill="rgb(248,47,43)"/><text x="28.2867%" y="143.50">coher..</text></g><g><title>specialization_graph_of (12,241,000 samples, 4.51%)</title><rect x="28.0522%" y="117" width="4.5075%" height="15" fill="rgb(221,10,30)"/><text x="28.3022%" y="127.50">speci..</text></g><g><title>coherence_checking (12,427,392 samples, 4.58%)</title><rect x="28.0249%" y="149" width="4.5762%" height="15" fill="rgb(210,229,1)"/><text x="28.2749%" y="159.50">coher..</text></g><g><title>associated_item (317,862 samples, 0.12%)</title><rect x="47.8141%" y="85" width="0.1170%" height="15" fill="rgb(222,148,37)"/><text x="48.0641%" y="95.50"></text></g><g><title>associated_items (494,883 samples, 0.18%)</title><rect x="47.7596%" y="101" width="0.1822%" height="15" fill="rgb(234,67,33)"/><text x="48.0096%" y="111.50"></text></g><g><title>adt_dtorck_constraint (507,443 samples, 0.19%)</title><rect x="48.1306%" y="85" width="0.1869%" height="15" fill="rgb(247,98,35)"/><text x="48.3806%" y="95.50"></text></g><g><title>dropck_outlives (923,385 samples, 0.34%)</title><rect x="48.0005%" y="101" width="0.3400%" height="15" fill="rgb(247,138,52)"/><text x="48.2505%" y="111.50"></text></g><g><title>generics_of (410,914 samples, 0.15%)</title><rect x="49.8486%" y="85" width="0.1513%" height="15" fill="rgb(213,79,30)"/><text x="50.0986%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (345,194 samples, 0.13%)</title><rect x="49.8728%" y="69" width="0.1271%" height="15" fill="rgb(246,177,23)"/><text x="50.1228%" y="79.50"></text></g><g><title>specializes (393,665 samples, 0.14%)</title><rect x="50.1887%" y="85" width="0.1450%" height="15" fill="rgb(230,62,27)"/><text x="50.4387%" y="95.50"></text></g><g><title>evaluate_obligation (5,581,265 samples, 2.06%)</title><rect x="48.3405%" y="101" width="2.0552%" height="15" fill="rgb(216,154,8)"/><text x="48.5905%" y="111.50">e..</text></g><g><title>fn_sig (388,678 samples, 0.14%)</title><rect x="50.4107%" y="101" width="0.1431%" height="15" fill="rgb(244,35,45)"/><text x="50.6607%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (358,557 samples, 0.13%)</title><rect x="50.4218%" y="85" width="0.1320%" height="15" fill="rgb(251,115,12)"/><text x="50.6718%" y="95.50"></text></g><g><title>generics_of (481,096 samples, 0.18%)</title><rect x="50.5538%" y="101" width="0.1772%" height="15" fill="rgb(240,54,50)"/><text x="50.8038%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (365,155 samples, 0.13%)</title><rect x="50.5965%" y="85" width="0.1345%" height="15" fill="rgb(233,84,52)"/><text x="50.8465%" y="95.50"></text></g><g><title>item_attrs (367,855 samples, 0.14%)</title><rect x="50.8151%" y="101" width="0.1355%" height="15" fill="rgb(207,117,47)"/><text x="51.0651%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (355,245 samples, 0.13%)</title><rect x="50.8198%" y="85" width="0.1308%" height="15" fill="rgb(249,43,39)"/><text x="51.0698%" y="95.50"></text></g><g><title>evaluate_obligation (628,646 samples, 0.23%)</title><rect x="51.3146%" y="85" width="0.2315%" height="15" fill="rgb(209,38,44)"/><text x="51.5646%" y="95.50"></text></g><g><title>method_autoderef_steps (1,487,393 samples, 0.55%)</title><rect x="51.0011%" y="101" width="0.5477%" height="15" fill="rgb(236,212,23)"/><text x="51.2511%" y="111.50"></text></g><g><title>param_env (391,364 samples, 0.14%)</title><rect x="51.6234%" y="101" width="0.1441%" height="15" fill="rgb(242,79,21)"/><text x="51.8734%" y="111.50"></text></g><g><title>predicates_of (517,704 samples, 0.19%)</title><rect x="51.7761%" y="101" width="0.1906%" height="15" fill="rgb(211,96,35)"/><text x="52.0261%" y="111.50"></text></g><g><title>predicates_defined_on (375,011 samples, 0.14%)</title><rect x="51.8287%" y="85" width="0.1381%" height="15" fill="rgb(253,215,40)"/><text x="52.0787%" y="95.50"></text></g><g><title>associated_items (295,964 samples, 0.11%)</title><rect x="53.1575%" y="85" width="0.1090%" height="15" fill="rgb(211,81,21)"/><text x="53.4075%" y="95.50"></text></g><g><title>evaluate_obligation (437,882 samples, 0.16%)</title><rect x="53.3042%" y="85" width="0.1612%" height="15" fill="rgb(208,190,38)"/><text x="53.5542%" y="95.50"></text></g><g><title>typeck (4,445,737 samples, 1.64%)</title><rect x="52.0869%" y="101" width="1.6371%" height="15" fill="rgb(235,213,38)"/><text x="52.3369%" y="111.50"></text></g><g><title>item_bodies_checking (57,367,455 samples, 21.12%)</title><rect x="32.6349%" y="149" width="21.1246%" height="15" fill="rgb(237,122,38)"/><text x="32.8849%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,363,504 samples, 21.12%)</title><rect x="32.6363%" y="133" width="21.1232%" height="15" fill="rgb(244,218,35)"/><text x="32.8863%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (57,117,318 samples, 21.03%)</title><rect x="32.7270%" y="117" width="21.0325%" height="15" fill="rgb(240,68,47)"/><text x="32.9770%" y="127.50">typeck</text></g><g><title>item_types_checking (7,503,170 samples, 2.76%)</title><rect x="53.7595%" y="149" width="2.7629%" height="15" fill="rgb(210,16,53)"/><text x="54.0095%" y="159.50">it..</text></g><g><title>check_mod_item_types (7,500,450 samples, 2.76%)</title><rect x="53.7605%" y="133" width="2.7619%" height="15" fill="rgb(235,124,12)"/><text x="54.0105%" y="143.50">ch..</text></g><g><title>fn_sig (650,323 samples, 0.24%)</title><rect x="56.7557%" y="117" width="0.2395%" height="15" fill="rgb(224,169,11)"/><text x="57.0057%" y="127.50"></text></g><g><title>generics_of (525,704 samples, 0.19%)</title><rect x="56.9952%" y="117" width="0.1936%" height="15" fill="rgb(250,166,2)"/><text x="57.2452%" y="127.50"></text></g><g><title>late_bound_vars_map (453,535 samples, 0.17%)</title><rect x="57.6395%" y="69" width="0.1670%" height="15" fill="rgb(242,216,29)"/><text x="57.8895%" y="79.50"></text></g><g><title>resolve_lifetimes (423,194 samples, 0.16%)</title><rect x="57.6506%" y="53" width="0.1558%" height="15" fill="rgb(230,116,27)"/><text x="57.9006%" y="63.50"></text></g><g><title>explicit_predicates_of (1,226,913 samples, 0.45%)</title><rect x="57.4294%" y="85" width="0.4518%" height="15" fill="rgb(228,99,48)"/><text x="57.6794%" y="95.50"></text></g><g><title>predicates_of (1,946,200 samples, 0.72%)</title><rect x="57.3041%" y="117" width="0.7167%" height="15" fill="rgb(253,11,6)"/><text x="57.5541%" y="127.50"></text></g><g><title>predicates_defined_on (1,812,308 samples, 0.67%)</title><rect x="57.3534%" y="101" width="0.6674%" height="15" fill="rgb(247,143,39)"/><text x="57.6034%" y="111.50"></text></g><g><title>inferred_outlives_of (378,834 samples, 0.14%)</title><rect x="57.8812%" y="85" width="0.1395%" height="15" fill="rgb(236,97,10)"/><text x="58.1312%" y="95.50"></text></g><g><title>inferred_outlives_crate (331,543 samples, 0.12%)</title><rect x="57.8987%" y="69" width="0.1221%" height="15" fill="rgb(233,208,19)"/><text x="58.1487%" y="79.50"></text></g><g><title>type_collecting (4,574,408 samples, 1.68%)</title><rect x="56.5233%" y="149" width="1.6844%" height="15" fill="rgb(216,164,2)"/><text x="56.7733%" y="159.50"></text></g><g><title>collect_mod_item_types (4,563,988 samples, 1.68%)</title><rect x="56.5272%" y="133" width="1.6806%" height="15" fill="rgb(220,129,5)"/><text x="56.7772%" y="143.50"></text></g><g><title>type_of (466,963 samples, 0.17%)</title><rect x="58.0358%" y="117" width="0.1720%" height="15" fill="rgb(242,17,10)"/><text x="58.2858%" y="127.50"></text></g><g><title>evaluate_obligation (748,432 samples, 0.28%)</title><rect x="60.5768%" y="117" width="0.2756%" height="15" fill="rgb(242,107,0)"/><text x="60.8268%" y="127.50"></text></g><g><title>implied_outlives_bounds (582,342 samples, 0.21%)</title><rect x="60.8556%" y="117" width="0.2144%" height="15" fill="rgb(251,28,31)"/><text x="61.1056%" y="127.50"></text></g><g><title>param_env (1,398,923 samples, 0.52%)</title><rect x="61.0735%" y="117" width="0.5151%" height="15" fill="rgb(233,223,10)"/><text x="61.3235%" y="127.50"></text></g><g><title>region_scope_tree (946,393 samples, 0.35%)</title><rect x="61.6157%" y="117" width="0.3485%" height="15" fill="rgb(215,21,27)"/><text x="61.8657%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,696,682 samples, 3.57%)</title><rect x="58.4028%" y="133" width="3.5706%" height="15" fill="rgb(232,23,21)"/><text x="58.6528%" y="143.50">chec..</text></g><g><title>implied_outlives_bounds (368,424 samples, 0.14%)</title><rect x="64.8726%" y="117" width="0.1357%" height="15" fill="rgb(244,5,23)"/><text x="65.1226%" y="127.50"></text></g><g><title>param_env (828,709 samples, 0.31%)</title><rect x="65.0087%" y="117" width="0.3052%" height="15" fill="rgb(226,81,46)"/><text x="65.2587%" y="127.50"></text></g><g><title>check_item_well_formed (9,588,890 samples, 3.53%)</title><rect x="61.9734%" y="133" width="3.5309%" height="15" fill="rgb(247,70,30)"/><text x="62.2234%" y="143.50">che..</text></g><g><title>analysis (166,110,882 samples, 61.17%)</title><rect x="4.4701%" y="181" width="61.1676%" height="15" fill="rgb(212,68,19)"/><text x="4.7201%" y="191.50">analysis</text></g><g><title>type_check_crate (102,280,029 samples, 37.66%)</title><rect x="27.9747%" y="165" width="37.6629%" height="15" fill="rgb(240,187,13)"/><text x="28.2247%" y="175.50">type_check_crate</text></g><g><title>wf_checking (20,161,932 samples, 7.42%)</title><rect x="58.2133%" y="149" width="7.4243%" height="15" fill="rgb(223,113,26)"/><text x="58.4633%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (361,905 samples, 0.13%)</title><rect x="65.5044%" y="133" width="0.1333%" height="15" fill="rgb(206,192,2)"/><text x="65.7544%" y="143.50"></text></g><g><title>fn_abi_of_instance (441,855 samples, 0.16%)</title><rect x="67.1445%" y="149" width="0.1627%" height="15" fill="rgb(241,108,4)"/><text x="67.3945%" y="159.50"></text></g><g><title>codegen_module (3,700,780 samples, 1.36%)</title><rect x="66.0250%" y="165" width="1.3628%" height="15" fill="rgb(247,173,49)"/><text x="66.2750%" y="175.50"></text></g><g><title>codegen_crate (4,764,550 samples, 1.75%)</title><rect x="65.6403%" y="181" width="1.7545%" height="15" fill="rgb(224,114,35)"/><text x="65.8903%" y="191.50"></text></g><g><title>LLVM_module_codegen (28,062,305 samples, 10.33%)</title><rect x="67.4237%" y="165" width="10.3335%" height="15" fill="rgb(245,159,27)"/><text x="67.6737%" y="175.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (25,221,856 samples, 9.29%)</title><rect x="68.4696%" y="149" width="9.2875%" height="15" fill="rgb(245,172,44)"/><text x="68.7196%" y="159.50">LLVM_module_c..</text></g><g><title>codegen_module_optimize (29,289,588 samples, 10.79%)</title><rect x="67.3947%" y="181" width="10.7854%" height="15" fill="rgb(236,23,11)"/><text x="67.6447%" y="191.50">codegen_module_o..</text></g><g><title>LLVM_module_optimize (1,148,633 samples, 0.42%)</title><rect x="77.7572%" y="165" width="0.4230%" height="15" fill="rgb(205,117,38)"/><text x="78.0072%" y="175.50"></text></g><g><title>macro_expand_crate (8,087,045 samples, 2.98%)</title><rect x="78.3637%" y="165" width="2.9779%" height="15" fill="rgb(237,72,25)"/><text x="78.6137%" y="175.50">mac..</text></g><g><title>expand_crate (8,078,135 samples, 2.97%)</title><rect x="78.3670%" y="149" width="2.9746%" height="15" fill="rgb(244,70,9)"/><text x="78.6170%" y="159.50">exp..</text></g><g><title>pre_AST_expansion_lint_checks (349,484 samples, 0.13%)</title><rect x="81.3428%" y="165" width="0.1287%" height="15" fill="rgb(217,125,39)"/><text x="81.5928%" y="175.50"></text></g><g><title>late_resolve_crate (2,770,030 samples, 1.02%)</title><rect x="81.5162%" y="149" width="1.0200%" height="15" fill="rgb(235,36,10)"/><text x="81.7662%" y="159.50"></text></g><g><title>configure_and_expand (12,001,436 samples, 4.42%)</title><rect x="78.1801%" y="181" width="4.4193%" height="15" fill="rgb(251,123,47)"/><text x="78.4301%" y="191.50">confi..</text></g><g><title>resolve_crate (3,063,242 samples, 1.13%)</title><rect x="81.4715%" y="165" width="1.1280%" height="15" fill="rgb(221,13,13)"/><text x="81.7215%" y="175.50"></text></g><g><title>drop_ast (463,125 samples, 0.17%)</title><rect x="82.5995%" y="181" width="0.1705%" height="15" fill="rgb(238,131,9)"/><text x="82.8495%" y="191.50"></text></g><g><title>early_lint_checks (588,316 samples, 0.22%)</title><rect x="82.7760%" y="181" width="0.2166%" height="15" fill="rgb(211,50,8)"/><text x="83.0260%" y="191.50"></text></g><g><title>free_global_ctxt (4,622,818 samples, 1.70%)</title><rect x="82.9927%" y="181" width="1.7023%" height="15" fill="rgb(245,182,24)"/><text x="83.2427%" y="191.50"></text></g><g><title>optimized_mir (751,697 samples, 0.28%)</title><rect x="86.1466%" y="101" width="0.2768%" height="15" fill="rgb(242,14,37)"/><text x="86.3966%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,195,083 samples, 0.44%)</title><rect x="86.0815%" y="117" width="0.4401%" height="15" fill="rgb(246,228,12)"/><text x="86.3315%" y="127.50"></text></g><g><title>monomorphization_collector (1,233,193 samples, 0.45%)</title><rect x="86.0801%" y="133" width="0.4541%" height="15" fill="rgb(213,55,15)"/><text x="86.3301%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,452,376 samples, 0.53%)</title><rect x="86.0728%" y="149" width="0.5348%" height="15" fill="rgb(209,9,3)"/><text x="86.3228%" y="159.50"></text></g><g><title>exported_symbols (1,820,560 samples, 0.67%)</title><rect x="86.0634%" y="165" width="0.6704%" height="15" fill="rgb(230,59,30)"/><text x="86.3134%" y="175.50"></text></g><g><title>reachable_non_generics (342,734 samples, 0.13%)</title><rect x="86.6076%" y="149" width="0.1262%" height="15" fill="rgb(209,121,21)"/><text x="86.8576%" y="159.50"></text></g><g><title>reachable_set (311,274 samples, 0.11%)</title><rect x="86.6192%" y="133" width="0.1146%" height="15" fill="rgb(220,109,13)"/><text x="86.8692%" y="143.50"></text></g><g><title>is_sized_raw (332,012 samples, 0.12%)</title><rect x="89.6033%" y="133" width="0.1223%" height="15" fill="rgb(232,18,1)"/><text x="89.8533%" y="143.50"></text></g><g><title>layout_of (523,066 samples, 0.19%)</title><rect x="89.7256%" y="133" width="0.1926%" height="15" fill="rgb(215,41,42)"/><text x="89.9756%" y="143.50"></text></g><g><title>layout_of (2,052,316 samples, 0.76%)</title><rect x="89.3477%" y="149" width="0.7557%" height="15" fill="rgb(224,123,36)"/><text x="89.5977%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (437,201 samples, 0.16%)</title><rect x="89.9424%" y="133" width="0.1610%" height="15" fill="rgb(240,125,3)"/><text x="90.1924%" y="143.50"></text></g><g><title>is_copy_raw (302,744 samples, 0.11%)</title><rect x="92.6603%" y="117" width="0.1115%" height="15" fill="rgb(205,98,50)"/><text x="92.9103%" y="127.50"></text></g><g><title>needs_drop_raw (353,104 samples, 0.13%)</title><rect x="92.6422%" y="133" width="0.1300%" height="15" fill="rgb(205,185,37)"/><text x="92.8922%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,398,031 samples, 2.72%)</title><rect x="90.1034%" y="149" width="2.7242%" height="15" fill="rgb(238,207,15)"/><text x="90.3534%" y="159.50">mi..</text></g><g><title>optimized_mir (16,429,146 samples, 6.05%)</title><rect x="86.8665%" y="165" width="6.0498%" height="15" fill="rgb(213,199,42)"/><text x="87.1165%" y="175.50">optimize..</text></g><g><title>generate_crate_metadata (22,482,868 samples, 8.28%)</title><rect x="84.6950%" y="181" width="8.2789%" height="15" fill="rgb(235,201,11)"/><text x="84.9450%" y="191.50">generate_cra..</text></g><g><title>hir_lowering (5,519,519 samples, 2.03%)</title><rect x="92.9739%" y="181" width="2.0325%" height="15" fill="rgb(207,46,11)"/><text x="93.2239%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (3,122,344 samples, 1.15%)</title><rect x="95.0127%" y="165" width="1.1498%" height="15" fill="rgb(241,35,35)"/><text x="95.2627%" y="175.50"></text></g><g><title>link_crate (1,406,915 samples, 0.52%)</title><rect x="96.1624%" y="165" width="0.5181%" height="15" fill="rgb(243,32,47)"/><text x="96.4124%" y="175.50"></text></g><g><title>link_binary (1,376,795 samples, 0.51%)</title><rect x="96.1735%" y="149" width="0.5070%" height="15" fill="rgb(247,202,23)"/><text x="96.4235%" y="159.50"></text></g><g><title>link_rlib (1,021,371 samples, 0.38%)</title><rect x="96.3044%" y="133" width="0.3761%" height="15" fill="rgb(219,102,11)"/><text x="96.5544%" y="143.50"></text></g><g><title>link (4,554,639 samples, 1.68%)</title><rect x="95.0064%" y="181" width="1.6772%" height="15" fill="rgb(243,110,44)"/><text x="95.2564%" y="191.50"></text></g><g><title>parse_crate (6,536,869 samples, 2.41%)</title><rect x="96.6835%" y="181" width="2.4071%" height="15" fill="rgb(222,74,54)"/><text x="96.9335%" y="191.50">pa..</text></g><g><title>self_profile_alloc_query_strings (1,649,588 samples, 0.61%)</title><rect x="99.1784%" y="181" width="0.6074%" height="15" fill="rgb(216,99,12)"/><text x="99.4284%" y="191.50"></text></g><g><title>all (271,566,933 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (271,566,933 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (486,275 samples, 0.18%)</title><rect x="99.8209%" y="181" width="0.1791%" height="15" fill="rgb(213,25,53)"/><text x="100.0709%" y="191.50"></text></g></svg></svg>