<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (19,919,300 samples, 5.16%)</title><rect x="0.1811%" y="181" width="5.1585%" height="15" fill="rgb(227,0,7)"/><text x="0.4311%" y="191.50">LLVM_p..</text></g><g><title>implied_outlives_bounds (496,838 samples, 0.13%)</title><rect x="13.0275%" y="133" width="0.1287%" height="15" fill="rgb(217,0,24)"/><text x="13.2775%" y="143.50"></text></g><g><title>is_sized_raw (403,855 samples, 0.10%)</title><rect x="13.2061%" y="133" width="0.1046%" height="15" fill="rgb(221,193,54)"/><text x="13.4561%" y="143.50"></text></g><g><title>param_env (439,213 samples, 0.11%)</title><rect x="14.3317%" y="101" width="0.1137%" height="15" fill="rgb(248,212,6)"/><text x="14.5817%" y="111.50"></text></g><g><title>is_copy_raw (588,396 samples, 0.15%)</title><rect x="16.4604%" y="69" width="0.1524%" height="15" fill="rgb(208,68,35)"/><text x="16.7104%" y="79.50"></text></g><g><title>evaluate_obligation (472,286 samples, 0.12%)</title><rect x="16.4905%" y="53" width="0.1223%" height="15" fill="rgb(232,128,0)"/><text x="16.7405%" y="63.50"></text></g><g><title>adt_drop_tys (536,296 samples, 0.14%)</title><rect x="16.7267%" y="53" width="0.1389%" height="15" fill="rgb(207,160,47)"/><text x="16.9767%" y="63.50"></text></g><g><title>is_copy_raw (2,862,110 samples, 0.74%)</title><rect x="16.8669%" y="53" width="0.7412%" height="15" fill="rgb(228,23,34)"/><text x="17.1169%" y="63.50"></text></g><g><title>evaluate_obligation (2,282,755 samples, 0.59%)</title><rect x="17.0170%" y="37" width="0.5912%" height="15" fill="rgb(218,30,26)"/><text x="17.2670%" y="47.50"></text></g><g><title>needs_drop_raw (4,047,075 samples, 1.05%)</title><rect x="16.6141%" y="69" width="1.0481%" height="15" fill="rgb(220,122,19)"/><text x="16.8641%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,093,207 samples, 0.28%)</title><rect x="17.7614%" y="53" width="0.2831%" height="15" fill="rgb(250,228,42)"/><text x="18.0114%" y="63.50"></text></g><g><title>resolve_instance (1,718,804 samples, 0.45%)</title><rect x="17.6621%" y="69" width="0.4451%" height="15" fill="rgb(240,193,28)"/><text x="17.9121%" y="79.50"></text></g><g><title>thir_body (1,875,378 samples, 0.49%)</title><rect x="18.1289%" y="69" width="0.4857%" height="15" fill="rgb(216,20,37)"/><text x="18.3789%" y="79.50"></text></g><g><title>mir_const (18,632,608 samples, 4.83%)</title><rect x="13.8058%" y="117" width="4.8253%" height="15" fill="rgb(206,188,39)"/><text x="14.0558%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (16,162,701 samples, 4.19%)</title><rect x="14.4454%" y="101" width="4.1856%" height="15" fill="rgb(217,207,13)"/><text x="14.6954%" y="111.50">unsaf..</text></g><g><title>mir_built (14,720,565 samples, 3.81%)</title><rect x="14.8189%" y="85" width="3.8122%" height="15" fill="rgb(231,73,38)"/><text x="15.0689%" y="95.50">mir_..</text></g><g><title>mir_promoted (20,679,289 samples, 5.36%)</title><rect x="13.3107%" y="133" width="5.3553%" height="15" fill="rgb(225,20,46)"/><text x="13.5607%" y="143.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (1,712,596 samples, 0.44%)</title><rect x="18.6660%" y="133" width="0.4435%" height="15" fill="rgb(210,31,41)"/><text x="18.9160%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,230,293 samples, 1.10%)</title><rect x="19.1095%" y="133" width="1.0955%" height="15" fill="rgb(221,200,47)"/><text x="19.3595%" y="143.50"></text></g><g><title>normalize_projection_ty (2,850,638 samples, 0.74%)</title><rect x="19.4668%" y="117" width="0.7382%" height="15" fill="rgb(226,26,5)"/><text x="19.7168%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,859,921 samples, 0.48%)</title><rect x="20.3020%" y="133" width="0.4817%" height="15" fill="rgb(249,33,26)"/><text x="20.5520%" y="143.50"></text></g><g><title>normalize_projection_ty (1,241,935 samples, 0.32%)</title><rect x="20.4620%" y="117" width="0.3216%" height="15" fill="rgb(235,183,28)"/><text x="20.7120%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,533,392 samples, 1.69%)</title><rect x="20.7837%" y="133" width="1.6919%" height="15" fill="rgb(221,5,38)"/><text x="21.0337%" y="143.50"></text></g><g><title>MIR_borrow_checking (65,674,504 samples, 17.01%)</title><rect x="5.4744%" y="165" width="17.0077%" height="15" fill="rgb(247,18,42)"/><text x="5.7244%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (65,278,493 samples, 16.91%)</title><rect x="5.5769%" y="149" width="16.9051%" height="15" fill="rgb(241,131,45)"/><text x="5.8269%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (537,627 samples, 0.14%)</title><rect x="22.8471%" y="101" width="0.1392%" height="15" fill="rgb(249,31,29)"/><text x="23.0971%" y="111.50"></text></g><g><title>should_inherit_track_caller (856,119 samples, 0.22%)</title><rect x="22.7697%" y="117" width="0.2217%" height="15" fill="rgb(225,111,53)"/><text x="23.0197%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,097,131 samples, 0.28%)</title><rect x="22.7111%" y="133" width="0.2841%" height="15" fill="rgb(238,160,17)"/><text x="22.9611%" y="143.50"></text></g><g><title>check_mod_attrs (1,505,295 samples, 0.39%)</title><rect x="22.6055%" y="149" width="0.3898%" height="15" fill="rgb(214,148,48)"/><text x="22.8555%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (934,069 samples, 0.24%)</title><rect x="23.1056%" y="149" width="0.2419%" height="15" fill="rgb(232,36,49)"/><text x="23.3556%" y="159.50"></text></g><g><title>misc_checking_1 (2,944,941 samples, 0.76%)</title><rect x="22.5984%" y="165" width="0.7626%" height="15" fill="rgb(209,103,24)"/><text x="22.8484%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,221,043 samples, 0.32%)</title><rect x="23.3614%" y="149" width="0.3162%" height="15" fill="rgb(229,88,8)"/><text x="23.6114%" y="159.50"></text></g><g><title>check_mod_liveness (1,062,413 samples, 0.28%)</title><rect x="23.4025%" y="133" width="0.2751%" height="15" fill="rgb(213,181,19)"/><text x="23.6525%" y="143.50"></text></g><g><title>type_uninhabited_from (432,105 samples, 0.11%)</title><rect x="23.5657%" y="117" width="0.1119%" height="15" fill="rgb(254,191,54)"/><text x="23.8157%" y="127.50"></text></g><g><title>misc_checking_2 (2,405,725 samples, 0.62%)</title><rect x="23.3610%" y="165" width="0.6230%" height="15" fill="rgb(241,83,37)"/><text x="23.6110%" y="175.50"></text></g><g><title>match_checking (1,183,212 samples, 0.31%)</title><rect x="23.6776%" y="149" width="0.3064%" height="15" fill="rgb(233,36,39)"/><text x="23.9276%" y="159.50"></text></g><g><title>check_match (1,101,771 samples, 0.29%)</title><rect x="23.6987%" y="133" width="0.2853%" height="15" fill="rgb(226,3,54)"/><text x="23.9487%" y="143.50"></text></g><g><title>check_private_in_public (481,395 samples, 0.12%)</title><rect x="23.9861%" y="149" width="0.1247%" height="15" fill="rgb(245,192,40)"/><text x="24.2361%" y="159.50"></text></g><g><title>death_checking (975,170 samples, 0.25%)</title><rect x="24.1108%" y="149" width="0.2525%" height="15" fill="rgb(238,167,29)"/><text x="24.3608%" y="159.50"></text></g><g><title>crate_lints (2,462,086 samples, 0.64%)</title><rect x="24.3637%" y="133" width="0.6376%" height="15" fill="rgb(232,182,51)"/><text x="24.6137%" y="143.50"></text></g><g><title>type_of (1,173,715 samples, 0.30%)</title><rect x="24.6973%" y="117" width="0.3040%" height="15" fill="rgb(231,60,39)"/><text x="24.9473%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (937,322 samples, 0.24%)</title><rect x="24.7585%" y="101" width="0.2427%" height="15" fill="rgb(208,69,12)"/><text x="25.0085%" y="111.50"></text></g><g><title>lint_checking (3,325,505 samples, 0.86%)</title><rect x="24.3633%" y="149" width="0.8612%" height="15" fill="rgb(235,93,37)"/><text x="24.6133%" y="159.50"></text></g><g><title>module_lints (862,049 samples, 0.22%)</title><rect x="25.0013%" y="133" width="0.2232%" height="15" fill="rgb(213,116,39)"/><text x="25.2513%" y="143.50"></text></g><g><title>lint_mod (855,009 samples, 0.22%)</title><rect x="25.0031%" y="117" width="0.2214%" height="15" fill="rgb(222,207,29)"/><text x="25.2531%" y="127.50"></text></g><g><title>privacy_access_levels (678,747 samples, 0.18%)</title><rect x="25.2245%" y="149" width="0.1758%" height="15" fill="rgb(206,96,30)"/><text x="25.4745%" y="159.50"></text></g><g><title>privacy_checking_modules (2,495,557 samples, 0.65%)</title><rect x="25.4003%" y="149" width="0.6463%" height="15" fill="rgb(218,138,4)"/><text x="25.6503%" y="159.50"></text></g><g><title>check_mod_privacy (2,489,517 samples, 0.64%)</title><rect x="25.4019%" y="133" width="0.6447%" height="15" fill="rgb(250,191,14)"/><text x="25.6519%" y="143.50"></text></g><g><title>misc_checking_3 (7,979,895 samples, 2.07%)</title><rect x="23.9840%" y="165" width="2.0665%" height="15" fill="rgb(239,60,40)"/><text x="24.2340%" y="175.50">m..</text></g><g><title>impl_parent (2,363,037 samples, 0.61%)</title><rect x="27.0436%" y="101" width="0.6120%" height="15" fill="rgb(206,27,48)"/><text x="27.2936%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,419,147 samples, 0.37%)</title><rect x="27.2880%" y="85" width="0.3675%" height="15" fill="rgb(225,35,8)"/><text x="27.5380%" y="95.50"></text></g><g><title>impl_trait_ref (6,000,734 samples, 1.55%)</title><rect x="27.6556%" y="101" width="1.5540%" height="15" fill="rgb(250,213,24)"/><text x="27.9056%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,611,408 samples, 1.19%)</title><rect x="28.0153%" y="85" width="1.1942%" height="15" fill="rgb(247,123,22)"/><text x="28.2653%" y="95.50"></text></g><g><title>trait_impls_of (990,372 samples, 0.26%)</title><rect x="29.2156%" y="101" width="0.2565%" height="15" fill="rgb(231,138,38)"/><text x="29.4656%" y="111.50"></text></g><g><title>coherent_trait (13,032,288 samples, 3.37%)</title><rect x="26.0973%" y="133" width="3.3750%" height="15" fill="rgb(231,145,46)"/><text x="26.3473%" y="143.50">coh..</text></g><g><title>specialization_graph_of (13,002,808 samples, 3.37%)</title><rect x="26.1049%" y="117" width="3.3673%" height="15" fill="rgb(251,118,11)"/><text x="26.3549%" y="127.50">spe..</text></g><g><title>coherence_checking (13,138,719 samples, 3.40%)</title><rect x="26.0910%" y="149" width="3.4025%" height="15" fill="rgb(217,147,25)"/><text x="26.3410%" y="159.50">coh..</text></g><g><title>associated_item (1,224,651 samples, 0.32%)</title><rect x="42.0488%" y="85" width="0.3171%" height="15" fill="rgb(247,81,37)"/><text x="42.2988%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (760,478 samples, 0.20%)</title><rect x="42.1690%" y="69" width="0.1969%" height="15" fill="rgb(209,12,38)"/><text x="42.4190%" y="79.50"></text></g><g><title>associated_items (1,677,766 samples, 0.43%)</title><rect x="41.9441%" y="101" width="0.4345%" height="15" fill="rgb(227,1,9)"/><text x="42.1941%" y="111.50"></text></g><g><title>adt_dtorck_constraint (439,514 samples, 0.11%)</title><rect x="42.6393%" y="85" width="0.1138%" height="15" fill="rgb(248,47,43)"/><text x="42.8893%" y="95.50"></text></g><g><title>dropck_outlives (1,746,898 samples, 0.45%)</title><rect x="42.4056%" y="101" width="0.4524%" height="15" fill="rgb(221,10,30)"/><text x="42.6556%" y="111.50"></text></g><g><title>normalize_projection_ty (404,953 samples, 0.10%)</title><rect x="42.7531%" y="85" width="0.1049%" height="15" fill="rgb(210,229,1)"/><text x="43.0031%" y="95.50"></text></g><g><title>evaluate_obligation (3,742,027 samples, 0.97%)</title><rect x="42.8580%" y="101" width="0.9691%" height="15" fill="rgb(222,148,37)"/><text x="43.1080%" y="111.50"></text></g><g><title>associated_item (703,056 samples, 0.18%)</title><rect x="43.9643%" y="69" width="0.1821%" height="15" fill="rgb(234,67,33)"/><text x="44.2143%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (616,146 samples, 0.16%)</title><rect x="43.9868%" y="53" width="0.1596%" height="15" fill="rgb(247,98,35)"/><text x="44.2368%" y="63.50"></text></g><g><title>impl_item_implementor_ids (950,998 samples, 0.25%)</title><rect x="43.9074%" y="101" width="0.2463%" height="15" fill="rgb(247,138,52)"/><text x="44.1574%" y="111.50"></text></g><g><title>associated_items (885,558 samples, 0.23%)</title><rect x="43.9243%" y="85" width="0.2293%" height="15" fill="rgb(213,79,30)"/><text x="44.1743%" y="95.50"></text></g><g><title>evaluate_obligation (545,253 samples, 0.14%)</title><rect x="44.3638%" y="85" width="0.1412%" height="15" fill="rgb(246,177,23)"/><text x="44.6138%" y="95.50"></text></g><g><title>method_autoderef_steps (1,089,193 samples, 0.28%)</title><rect x="44.2270%" y="101" width="0.2821%" height="15" fill="rgb(230,62,27)"/><text x="44.4770%" y="111.50"></text></g><g><title>predicates_of (420,705 samples, 0.11%)</title><rect x="44.5376%" y="101" width="0.1089%" height="15" fill="rgb(216,154,8)"/><text x="44.7876%" y="111.50"></text></g><g><title>evaluate_obligation (1,189,827 samples, 0.31%)</title><rect x="46.7036%" y="85" width="0.3081%" height="15" fill="rgb(244,35,45)"/><text x="46.9536%" y="95.50"></text></g><g><title>is_copy_raw (386,743 samples, 0.10%)</title><rect x="47.0548%" y="85" width="0.1002%" height="15" fill="rgb(251,115,12)"/><text x="47.3048%" y="95.50"></text></g><g><title>typeck (9,950,015 samples, 2.58%)</title><rect x="44.6916%" y="101" width="2.5767%" height="15" fill="rgb(240,54,50)"/><text x="44.9416%" y="111.50">ty..</text></g><g><title>item_bodies_checking (68,678,615 samples, 17.79%)</title><rect x="29.5133%" y="149" width="17.7856%" height="15" fill="rgb(233,84,52)"/><text x="29.7633%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (68,675,875 samples, 17.78%)</title><rect x="29.5140%" y="133" width="17.7849%" height="15" fill="rgb(207,117,47)"/><text x="29.7640%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (68,387,639 samples, 17.71%)</title><rect x="29.5886%" y="117" width="17.7103%" height="15" fill="rgb(249,43,39)"/><text x="29.8386%" y="127.50">typeck</text></g><g><title>evaluate_obligation (782,256 samples, 0.20%)</title><rect x="50.3177%" y="117" width="0.2026%" height="15" fill="rgb(209,38,44)"/><text x="50.5677%" y="127.50"></text></g><g><title>item_types_checking (13,194,810 samples, 3.42%)</title><rect x="47.2989%" y="149" width="3.4170%" height="15" fill="rgb(236,212,23)"/><text x="47.5489%" y="159.50">ite..</text></g><g><title>check_mod_item_types (13,187,229 samples, 3.42%)</title><rect x="47.3009%" y="133" width="3.4151%" height="15" fill="rgb(242,79,21)"/><text x="47.5509%" y="143.50">che..</text></g><g><title>fn_sig (1,763,598 samples, 0.46%)</title><rect x="50.8851%" y="117" width="0.4567%" height="15" fill="rgb(211,96,35)"/><text x="51.1351%" y="127.50"></text></g><g><title>is_late_bound_map (761,187 samples, 0.20%)</title><rect x="51.4254%" y="101" width="0.1971%" height="15" fill="rgb(253,215,40)"/><text x="51.6754%" y="111.50"></text></g><g><title>resolve_lifetimes (722,626 samples, 0.19%)</title><rect x="51.4354%" y="85" width="0.1871%" height="15" fill="rgb(211,81,21)"/><text x="51.6854%" y="95.50"></text></g><g><title>generics_of (1,210,720 samples, 0.31%)</title><rect x="51.3418%" y="117" width="0.3135%" height="15" fill="rgb(208,190,38)"/><text x="51.5918%" y="127.50"></text></g><g><title>explicit_predicates_of (827,780 samples, 0.21%)</title><rect x="51.7723%" y="85" width="0.2144%" height="15" fill="rgb(235,213,38)"/><text x="52.0223%" y="95.50"></text></g><g><title>predicates_of (1,633,822 samples, 0.42%)</title><rect x="51.6816%" y="117" width="0.4231%" height="15" fill="rgb(237,122,38)"/><text x="51.9316%" y="127.50"></text></g><g><title>predicates_defined_on (1,504,018 samples, 0.39%)</title><rect x="51.7153%" y="101" width="0.3895%" height="15" fill="rgb(244,218,35)"/><text x="51.9653%" y="111.50"></text></g><g><title>inferred_outlives_of (455,866 samples, 0.12%)</title><rect x="51.9867%" y="85" width="0.1181%" height="15" fill="rgb(240,68,47)"/><text x="52.2367%" y="95.50"></text></g><g><title>inferred_outlives_crate (410,025 samples, 0.11%)</title><rect x="51.9986%" y="69" width="0.1062%" height="15" fill="rgb(210,16,53)"/><text x="52.2486%" y="79.50"></text></g><g><title>type_collecting (5,694,541 samples, 1.47%)</title><rect x="50.7168%" y="149" width="1.4747%" height="15" fill="rgb(235,124,12)"/><text x="50.9668%" y="159.50"></text></g><g><title>collect_mod_item_types (5,681,561 samples, 1.47%)</title><rect x="50.7201%" y="133" width="1.4713%" height="15" fill="rgb(224,169,11)"/><text x="50.9701%" y="143.50"></text></g><g><title>evaluate_obligation (691,505 samples, 0.18%)</title><rect x="55.2824%" y="117" width="0.1791%" height="15" fill="rgb(250,166,2)"/><text x="55.5324%" y="127.50"></text></g><g><title>implied_outlives_bounds (749,985 samples, 0.19%)</title><rect x="55.4790%" y="117" width="0.1942%" height="15" fill="rgb(242,216,29)"/><text x="55.7290%" y="127.50"></text></g><g><title>object_safety_violations (436,054 samples, 0.11%)</title><rect x="55.6774%" y="117" width="0.1129%" height="15" fill="rgb(230,116,27)"/><text x="55.9274%" y="127.50"></text></g><g><title>param_env (1,702,766 samples, 0.44%)</title><rect x="55.7910%" y="117" width="0.4410%" height="15" fill="rgb(228,99,48)"/><text x="56.0410%" y="127.50"></text></g><g><title>region_scope_tree (881,428 samples, 0.23%)</title><rect x="56.2761%" y="117" width="0.2283%" height="15" fill="rgb(253,11,6)"/><text x="56.5261%" y="127.50"></text></g><g><title>check_impl_item_well_formed (16,204,939 samples, 4.20%)</title><rect x="52.3452%" y="133" width="4.1966%" height="15" fill="rgb(247,143,39)"/><text x="52.5952%" y="143.50">check..</text></g><g><title>adt_sized_constraint (412,444 samples, 0.11%)</title><rect x="57.2029%" y="117" width="0.1068%" height="15" fill="rgb(236,97,10)"/><text x="57.4529%" y="127.50"></text></g><g><title>adt_sized_constraint (400,294 samples, 0.10%)</title><rect x="57.2060%" y="101" width="0.1037%" height="15" fill="rgb(233,208,19)"/><text x="57.4560%" y="111.50"></text></g><g><title>evaluate_obligation (553,687 samples, 0.14%)</title><rect x="57.3101%" y="117" width="0.1434%" height="15" fill="rgb(216,164,2)"/><text x="57.5601%" y="127.50"></text></g><g><title>param_env (439,197 samples, 0.11%)</title><rect x="57.5189%" y="117" width="0.1137%" height="15" fill="rgb(220,129,5)"/><text x="57.7689%" y="127.50"></text></g><g><title>check_item_well_formed (4,877,681 samples, 1.26%)</title><rect x="56.5418%" y="133" width="1.2632%" height="15" fill="rgb(242,17,10)"/><text x="56.7918%" y="143.50"></text></g><g><title>analysis (202,955,344 samples, 52.56%)</title><rect x="5.3396%" y="181" width="52.5592%" height="15" fill="rgb(242,107,0)"/><text x="5.5896%" y="191.50">analysis</text></g><g><title>type_check_crate (122,980,749 samples, 31.85%)</title><rect x="26.0506%" y="165" width="31.8482%" height="15" fill="rgb(251,28,31)"/><text x="26.3006%" y="175.50">type_check_crate</text></g><g><title>wf_checking (22,019,761 samples, 5.70%)</title><rect x="52.1964%" y="149" width="5.7024%" height="15" fill="rgb(233,223,10)"/><text x="52.4464%" y="159.50">wf_chec..</text></g><g><title>param_env (655,129 samples, 0.17%)</title><rect x="62.3549%" y="133" width="0.1697%" height="15" fill="rgb(215,21,27)"/><text x="62.6049%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,139,426 samples, 0.55%)</title><rect x="62.0329%" y="149" width="0.5540%" height="15" fill="rgb(232,23,21)"/><text x="62.2829%" y="159.50"></text></g><g><title>layout_of (434,765 samples, 0.11%)</title><rect x="62.8192%" y="85" width="0.1126%" height="15" fill="rgb(244,5,23)"/><text x="63.0692%" y="95.50"></text></g><g><title>layout_of (664,398 samples, 0.17%)</title><rect x="62.7775%" y="101" width="0.1721%" height="15" fill="rgb(226,81,46)"/><text x="63.0275%" y="111.50"></text></g><g><title>layout_of (869,509 samples, 0.23%)</title><rect x="62.7410%" y="117" width="0.2252%" height="15" fill="rgb(247,70,30)"/><text x="62.9910%" y="127.50"></text></g><g><title>layout_of (1,080,613 samples, 0.28%)</title><rect x="62.6991%" y="133" width="0.2798%" height="15" fill="rgb(212,68,19)"/><text x="62.9491%" y="143.50"></text></g><g><title>layout_of (1,387,834 samples, 0.36%)</title><rect x="62.6382%" y="149" width="0.3594%" height="15" fill="rgb(240,187,13)"/><text x="62.8882%" y="159.50"></text></g><g><title>codegen_module (18,019,359 samples, 4.67%)</title><rect x="58.4152%" y="165" width="4.6665%" height="15" fill="rgb(223,113,26)"/><text x="58.6652%" y="175.50">codeg..</text></g><g><title>codegen_crate (20,095,131 samples, 5.20%)</title><rect x="57.9009%" y="181" width="5.2040%" height="15" fill="rgb(206,192,2)"/><text x="58.1509%" y="191.50">codege..</text></g><g><title>LLVM_module_codegen (49,480,683 samples, 12.81%)</title><rect x="63.1348%" y="165" width="12.8140%" height="15" fill="rgb(241,108,4)"/><text x="63.3848%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (46,784,223 samples, 12.12%)</title><rect x="63.8331%" y="149" width="12.1157%" height="15" fill="rgb(247,173,49)"/><text x="64.0831%" y="159.50">LLVM_module_codege..</text></g><g><title>codegen_module_optimize (51,865,878 samples, 13.43%)</title><rect x="63.1049%" y="181" width="13.4317%" height="15" fill="rgb(224,114,35)"/><text x="63.3549%" y="191.50">codegen_module_optim..</text></g><g><title>LLVM_module_optimize (2,270,014 samples, 0.59%)</title><rect x="75.9487%" y="165" width="0.5879%" height="15" fill="rgb(245,159,27)"/><text x="76.1987%" y="175.50"></text></g><g><title>metadata_load_macro (538,358 samples, 0.14%)</title><rect x="86.0672%" y="133" width="0.1394%" height="15" fill="rgb(245,172,44)"/><text x="86.3172%" y="143.50"></text></g><g><title>metadata_register_crate (3,048,582 samples, 0.79%)</title><rect x="86.2066%" y="133" width="0.7895%" height="15" fill="rgb(236,23,11)"/><text x="86.4566%" y="143.50"></text></g><g><title>metadata_register_crate (1,030,011 samples, 0.27%)</title><rect x="86.7294%" y="117" width="0.2667%" height="15" fill="rgb(205,117,38)"/><text x="86.9794%" y="127.50"></text></g><g><title>macro_expand_crate (40,433,207 samples, 10.47%)</title><rect x="76.6872%" y="165" width="10.4710%" height="15" fill="rgb(237,72,25)"/><text x="76.9372%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (40,417,397 samples, 10.47%)</title><rect x="76.6913%" y="149" width="10.4669%" height="15" fill="rgb(244,70,9)"/><text x="76.9413%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (625,625 samples, 0.16%)</title><rect x="86.9961%" y="133" width="0.1620%" height="15" fill="rgb(217,125,39)"/><text x="87.2461%" y="143.50"></text></g><g><title>late_resolve_crate (3,668,339 samples, 0.95%)</title><rect x="87.2270%" y="149" width="0.9500%" height="15" fill="rgb(235,36,10)"/><text x="87.4770%" y="159.50"></text></g><g><title>configure_and_expand (45,131,757 samples, 11.69%)</title><rect x="76.5366%" y="181" width="11.6877%" height="15" fill="rgb(251,123,47)"/><text x="76.7866%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (4,040,633 samples, 1.05%)</title><rect x="87.1779%" y="165" width="1.0464%" height="15" fill="rgb(221,13,13)"/><text x="87.4279%" y="175.50"></text></g><g><title>early_lint_checks (538,906 samples, 0.14%)</title><rect x="88.3080%" y="181" width="0.1396%" height="15" fill="rgb(238,131,9)"/><text x="88.5580%" y="191.50"></text></g><g><title>free_global_ctxt (5,215,226 samples, 1.35%)</title><rect x="88.4476%" y="181" width="1.3506%" height="15" fill="rgb(211,50,8)"/><text x="88.6976%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (725,757 samples, 0.19%)</title><rect x="91.2435%" y="85" width="0.1879%" height="15" fill="rgb(245,182,24)"/><text x="91.4935%" y="95.50"></text></g><g><title>optimized_mir (1,898,061 samples, 0.49%)</title><rect x="90.9731%" y="101" width="0.4915%" height="15" fill="rgb(242,14,37)"/><text x="91.2231%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (446,334 samples, 0.12%)</title><rect x="91.4993%" y="85" width="0.1156%" height="15" fill="rgb(246,228,12)"/><text x="91.7493%" y="95.50"></text></g><g><title>resolve_instance (821,637 samples, 0.21%)</title><rect x="91.4647%" y="101" width="0.2128%" height="15" fill="rgb(213,55,15)"/><text x="91.7147%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (4,184,975 samples, 1.08%)</title><rect x="90.7754%" y="117" width="1.0838%" height="15" fill="rgb(209,9,3)"/><text x="91.0254%" y="127.50"></text></g><g><title>monomorphization_collector (4,238,335 samples, 1.10%)</title><rect x="90.7747%" y="133" width="1.0976%" height="15" fill="rgb(230,59,30)"/><text x="91.0247%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (4,781,501 samples, 1.24%)</title><rect x="90.7684%" y="149" width="1.2383%" height="15" fill="rgb(209,121,21)"/><text x="91.0184%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (518,895 samples, 0.13%)</title><rect x="91.8723%" y="133" width="0.1344%" height="15" fill="rgb(220,109,13)"/><text x="92.1223%" y="143.50"></text></g><g><title>exported_symbols (5,183,836 samples, 1.34%)</title><rect x="90.7613%" y="165" width="1.3425%" height="15" fill="rgb(232,18,1)"/><text x="91.0113%" y="175.50"></text></g><g><title>layout_of (447,506 samples, 0.12%)</title><rect x="94.3188%" y="133" width="0.1159%" height="15" fill="rgb(215,41,42)"/><text x="94.5688%" y="143.50"></text></g><g><title>layout_of (1,947,340 samples, 0.50%)</title><rect x="93.9911%" y="149" width="0.5043%" height="15" fill="rgb(224,123,36)"/><text x="94.2411%" y="159.50"></text></g><g><title>is_copy_raw (732,325 samples, 0.19%)</title><rect x="96.7131%" y="117" width="0.1896%" height="15" fill="rgb(240,125,3)"/><text x="96.9631%" y="127.50"></text></g><g><title>evaluate_obligation (567,155 samples, 0.15%)</title><rect x="96.7559%" y="101" width="0.1469%" height="15" fill="rgb(205,98,50)"/><text x="97.0059%" y="111.50"></text></g><g><title>needs_drop_raw (948,679 samples, 0.25%)</title><rect x="96.6776%" y="133" width="0.2457%" height="15" fill="rgb(205,185,37)"/><text x="96.9276%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,506,239 samples, 2.46%)</title><rect x="94.4954%" y="149" width="2.4618%" height="15" fill="rgb(238,207,15)"/><text x="94.7454%" y="159.50">mi..</text></g><g><title>optimized_mir (18,534,105 samples, 4.80%)</title><rect x="92.1727%" y="165" width="4.7998%" height="15" fill="rgb(213,199,42)"/><text x="92.4227%" y="175.50">optimi..</text></g><g><title>generate_crate_metadata (27,915,874 samples, 7.23%)</title><rect x="89.7982%" y="181" width="7.2293%" height="15" fill="rgb(235,201,11)"/><text x="90.0482%" y="191.50">generate_c..</text></g><g><title>hir_lowering (6,477,009 samples, 1.68%)</title><rect x="97.0275%" y="181" width="1.6773%" height="15" fill="rgb(207,46,11)"/><text x="97.2775%" y="191.50"></text></g><g><title>link_crate (1,905,680 samples, 0.49%)</title><rect x="98.7111%" y="165" width="0.4935%" height="15" fill="rgb(241,35,35)"/><text x="98.9611%" y="175.50"></text></g><g><title>link_binary (1,849,360 samples, 0.48%)</title><rect x="98.7257%" y="149" width="0.4789%" height="15" fill="rgb(243,32,47)"/><text x="98.9757%" y="159.50"></text></g><g><title>link_rlib (1,267,903 samples, 0.33%)</title><rect x="98.8762%" y="133" width="0.3283%" height="15" fill="rgb(247,202,23)"/><text x="99.1262%" y="143.50"></text></g><g><title>link (1,938,410 samples, 0.50%)</title><rect x="98.7049%" y="181" width="0.5020%" height="15" fill="rgb(219,102,11)"/><text x="98.9549%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,942,730 samples, 0.50%)</title><rect x="99.3500%" y="181" width="0.5031%" height="15" fill="rgb(243,110,44)"/><text x="99.6000%" y="191.50"></text></g><g><title>all (386,146,427 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (386,146,427 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (497,886 samples, 0.13%)</title><rect x="99.8711%" y="181" width="0.1289%" height="15" fill="rgb(226,22,26)"/><text x="100.1211%" y="191.50"></text></g></svg></svg>