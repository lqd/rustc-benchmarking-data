<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,448,259 samples, 4.85%)</title><rect x="0.4759%" y="181" width="4.8503%" height="15" fill="rgb(227,0,7)"/><text x="0.7259%" y="191.50">LLVM_p..</text></g><g><title>codegen_fn_attrs (239,361 samples, 0.12%)</title><rect x="12.7807%" y="85" width="0.1229%" height="15" fill="rgb(217,0,24)"/><text x="13.0307%" y="95.50"></text></g><g><title>is_copy_raw (418,966 samples, 0.22%)</title><rect x="14.4484%" y="69" width="0.2151%" height="15" fill="rgb(221,193,54)"/><text x="14.6984%" y="79.50"></text></g><g><title>evaluate_obligation (329,634 samples, 0.17%)</title><rect x="14.4943%" y="53" width="0.1692%" height="15" fill="rgb(248,212,6)"/><text x="14.7443%" y="63.50"></text></g><g><title>needs_drop_raw (840,690 samples, 0.43%)</title><rect x="14.6691%" y="69" width="0.4316%" height="15" fill="rgb(208,68,35)"/><text x="14.9191%" y="79.50"></text></g><g><title>is_copy_raw (405,114 samples, 0.21%)</title><rect x="14.8927%" y="53" width="0.2080%" height="15" fill="rgb(232,128,0)"/><text x="15.1427%" y="63.50"></text></g><g><title>evaluate_obligation (333,103 samples, 0.17%)</title><rect x="14.9297%" y="37" width="0.1710%" height="15" fill="rgb(207,160,47)"/><text x="15.1797%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (511,750 samples, 0.26%)</title><rect x="15.2868%" y="53" width="0.2627%" height="15" fill="rgb(228,23,34)"/><text x="15.5368%" y="63.50"></text></g><g><title>resolve_instance (1,064,773 samples, 0.55%)</title><rect x="15.1007%" y="69" width="0.5466%" height="15" fill="rgb(218,30,26)"/><text x="15.3507%" y="79.50"></text></g><g><title>thir_body (1,332,159 samples, 0.68%)</title><rect x="15.6643%" y="69" width="0.6839%" height="15" fill="rgb(220,122,19)"/><text x="15.9143%" y="79.50"></text></g><g><title>mir_const (8,552,257 samples, 4.39%)</title><rect x="11.9669%" y="117" width="4.3903%" height="15" fill="rgb(250,228,42)"/><text x="12.2169%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (7,486,889 samples, 3.84%)</title><rect x="12.5138%" y="101" width="3.8434%" height="15" fill="rgb(240,193,28)"/><text x="12.7638%" y="111.50">unsa..</text></g><g><title>mir_built (6,727,453 samples, 3.45%)</title><rect x="12.9036%" y="85" width="3.4536%" height="15" fill="rgb(216,20,37)"/><text x="13.1536%" y="95.50">mir..</text></g><g><title>mir_promoted (9,456,952 samples, 4.85%)</title><rect x="11.5309%" y="133" width="4.8548%" height="15" fill="rgb(206,188,39)"/><text x="11.7809%" y="143.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (215,854 samples, 0.11%)</title><rect x="16.3857%" y="133" width="0.1108%" height="15" fill="rgb(217,207,13)"/><text x="16.6357%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,301,707 samples, 0.67%)</title><rect x="16.4965%" y="133" width="0.6682%" height="15" fill="rgb(231,73,38)"/><text x="16.7465%" y="143.50"></text></g><g><title>normalize_projection_ty (760,060 samples, 0.39%)</title><rect x="16.7746%" y="117" width="0.3902%" height="15" fill="rgb(225,20,46)"/><text x="17.0246%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,704,114 samples, 0.87%)</title><rect x="17.1647%" y="133" width="0.8748%" height="15" fill="rgb(210,31,41)"/><text x="17.4147%" y="143.50"></text></g><g><title>MIR_borrow_checking (24,169,046 samples, 12.41%)</title><rect x="5.6349%" y="165" width="12.4073%" height="15" fill="rgb(221,200,47)"/><text x="5.8849%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,018,235 samples, 12.33%)</title><rect x="5.7123%" y="149" width="12.3299%" height="15" fill="rgb(226,26,5)"/><text x="5.9623%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (355,604 samples, 0.18%)</title><rect x="18.0627%" y="165" width="0.1826%" height="15" fill="rgb(249,33,26)"/><text x="18.3127%" y="175.50"></text></g><g><title>should_inherit_track_caller (500,996 samples, 0.26%)</title><rect x="18.8849%" y="117" width="0.2572%" height="15" fill="rgb(235,183,28)"/><text x="19.1349%" y="127.50"></text></g><g><title>codegen_fn_attrs (884,661 samples, 0.45%)</title><rect x="18.7011%" y="133" width="0.4541%" height="15" fill="rgb(221,5,38)"/><text x="18.9511%" y="143.50"></text></g><g><title>check_mod_attrs (2,002,811 samples, 1.03%)</title><rect x="18.2592%" y="149" width="1.0282%" height="15" fill="rgb(247,18,42)"/><text x="18.5092%" y="159.50"></text></g><g><title>lint_levels (255,342 samples, 0.13%)</title><rect x="19.1563%" y="133" width="0.1311%" height="15" fill="rgb(241,131,45)"/><text x="19.4063%" y="143.50"></text></g><g><title>check_mod_const_bodies (272,433 samples, 0.14%)</title><rect x="19.2874%" y="149" width="0.1399%" height="15" fill="rgb(249,31,29)"/><text x="19.5374%" y="159.50"></text></g><g><title>lookup_deprecation_entry (223,352 samples, 0.11%)</title><rect x="19.6260%" y="133" width="0.1147%" height="15" fill="rgb(225,111,53)"/><text x="19.8760%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (595,626 samples, 0.31%)</title><rect x="19.4986%" y="149" width="0.3058%" height="15" fill="rgb(238,160,17)"/><text x="19.7486%" y="159.50"></text></g><g><title>misc_checking_1 (3,119,202 samples, 1.60%)</title><rect x="18.2455%" y="165" width="1.6013%" height="15" fill="rgb(214,148,48)"/><text x="18.4955%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (435,764 samples, 0.22%)</title><rect x="19.8475%" y="149" width="0.2237%" height="15" fill="rgb(232,36,49)"/><text x="20.0975%" y="159.50"></text></g><g><title>check_mod_liveness (353,454 samples, 0.18%)</title><rect x="19.8898%" y="133" width="0.1814%" height="15" fill="rgb(209,103,24)"/><text x="20.1398%" y="143.50"></text></g><g><title>misc_checking_2 (958,590 samples, 0.49%)</title><rect x="19.8468%" y="165" width="0.4921%" height="15" fill="rgb(229,88,8)"/><text x="20.0968%" y="175.50"></text></g><g><title>match_checking (521,386 samples, 0.27%)</title><rect x="20.0712%" y="149" width="0.2677%" height="15" fill="rgb(213,181,19)"/><text x="20.3212%" y="159.50"></text></g><g><title>check_match (488,856 samples, 0.25%)</title><rect x="20.0879%" y="133" width="0.2510%" height="15" fill="rgb(254,191,54)"/><text x="20.3379%" y="143.50"></text></g><g><title>check_private_in_public (211,282 samples, 0.11%)</title><rect x="20.3438%" y="149" width="0.1085%" height="15" fill="rgb(241,83,37)"/><text x="20.5938%" y="159.50"></text></g><g><title>death_checking (359,694 samples, 0.18%)</title><rect x="20.4523%" y="149" width="0.1847%" height="15" fill="rgb(233,36,39)"/><text x="20.7023%" y="159.50"></text></g><g><title>crate_lints (1,986,451 samples, 1.02%)</title><rect x="20.6377%" y="133" width="1.0198%" height="15" fill="rgb(226,3,54)"/><text x="20.8877%" y="143.50"></text></g><g><title>type_of (1,104,483 samples, 0.57%)</title><rect x="21.0904%" y="117" width="0.5670%" height="15" fill="rgb(245,192,40)"/><text x="21.3404%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (870,529 samples, 0.45%)</title><rect x="21.2105%" y="101" width="0.4469%" height="15" fill="rgb(238,167,29)"/><text x="21.4605%" y="111.50"></text></g><g><title>lint_checking (2,326,544 samples, 1.19%)</title><rect x="20.6369%" y="149" width="1.1943%" height="15" fill="rgb(232,182,51)"/><text x="20.8869%" y="159.50"></text></g><g><title>module_lints (338,663 samples, 0.17%)</title><rect x="21.6574%" y="133" width="0.1739%" height="15" fill="rgb(231,60,39)"/><text x="21.9074%" y="143.50"></text></g><g><title>lint_mod (336,153 samples, 0.17%)</title><rect x="21.6587%" y="117" width="0.1726%" height="15" fill="rgb(208,69,12)"/><text x="21.9087%" y="127.50"></text></g><g><title>privacy_access_levels (308,044 samples, 0.16%)</title><rect x="21.8313%" y="149" width="0.1581%" height="15" fill="rgb(235,93,37)"/><text x="22.0813%" y="159.50"></text></g><g><title>privacy_checking_modules (587,436 samples, 0.30%)</title><rect x="21.9894%" y="149" width="0.3016%" height="15" fill="rgb(213,116,39)"/><text x="22.2394%" y="159.50"></text></g><g><title>check_mod_privacy (586,026 samples, 0.30%)</title><rect x="21.9901%" y="133" width="0.3008%" height="15" fill="rgb(222,207,29)"/><text x="22.2401%" y="143.50"></text></g><g><title>misc_checking_3 (3,824,090 samples, 1.96%)</title><rect x="20.3389%" y="165" width="1.9631%" height="15" fill="rgb(206,96,30)"/><text x="20.5889%" y="175.50">m..</text></g><g><title>adt_destructor (277,243 samples, 0.14%)</title><rect x="22.3854%" y="117" width="0.1423%" height="15" fill="rgb(218,138,4)"/><text x="22.6354%" y="127.50"></text></g><g><title>coherent_trait (269,273 samples, 0.14%)</title><rect x="22.3895%" y="101" width="0.1382%" height="15" fill="rgb(250,191,14)"/><text x="22.6395%" y="111.50"></text></g><g><title>specialization_graph_of (267,823 samples, 0.14%)</title><rect x="22.3902%" y="85" width="0.1375%" height="15" fill="rgb(239,60,40)"/><text x="22.6402%" y="95.50"></text></g><g><title>impl_parent (2,542,505 samples, 1.31%)</title><rect x="24.6239%" y="101" width="1.3052%" height="15" fill="rgb(206,27,48)"/><text x="24.8739%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,372,945 samples, 0.70%)</title><rect x="25.2243%" y="85" width="0.7048%" height="15" fill="rgb(225,35,8)"/><text x="25.4743%" y="95.50"></text></g><g><title>impl_trait_ref (6,444,470 samples, 3.31%)</title><rect x="25.9291%" y="101" width="3.3083%" height="15" fill="rgb(250,213,24)"/><text x="26.1791%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,231,402 samples, 2.69%)</title><rect x="26.5519%" y="85" width="2.6856%" height="15" fill="rgb(247,123,22)"/><text x="26.8019%" y="95.50">me..</text></g><g><title>trait_impls_of (871,989 samples, 0.45%)</title><rect x="29.2551%" y="101" width="0.4476%" height="15" fill="rgb(231,138,38)"/><text x="29.5051%" y="111.50"></text></g><g><title>implementations_of_trait (223,100 samples, 0.11%)</title><rect x="29.5882%" y="85" width="0.1145%" height="15" fill="rgb(231,145,46)"/><text x="29.8382%" y="95.50"></text></g><g><title>coherent_trait (14,314,781 samples, 7.35%)</title><rect x="22.3549%" y="133" width="7.3486%" height="15" fill="rgb(251,118,11)"/><text x="22.6049%" y="143.50">coherent_t..</text></g><g><title>specialization_graph_of (13,802,946 samples, 7.09%)</title><rect x="22.6176%" y="117" width="7.0858%" height="15" fill="rgb(217,147,25)"/><text x="22.8676%" y="127.50">specializa..</text></g><g><title>coherence_checking (14,465,452 samples, 7.43%)</title><rect x="22.3380%" y="149" width="7.4259%" height="15" fill="rgb(247,81,37)"/><text x="22.5880%" y="159.50">coherence_..</text></g><g><title>associated_item (755,299 samples, 0.39%)</title><rect x="42.3731%" y="85" width="0.3877%" height="15" fill="rgb(209,12,38)"/><text x="42.6231%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (596,808 samples, 0.31%)</title><rect x="42.4545%" y="69" width="0.3064%" height="15" fill="rgb(227,1,9)"/><text x="42.7045%" y="79.50"></text></g><g><title>associated_items (1,018,411 samples, 0.52%)</title><rect x="42.2570%" y="101" width="0.5228%" height="15" fill="rgb(248,47,43)"/><text x="42.5070%" y="111.50"></text></g><g><title>dropck_outlives (211,114 samples, 0.11%)</title><rect x="42.8018%" y="101" width="0.1084%" height="15" fill="rgb(221,10,30)"/><text x="43.0518%" y="111.50"></text></g><g><title>generics_of (1,210,538 samples, 0.62%)</title><rect x="46.7440%" y="85" width="0.6214%" height="15" fill="rgb(210,229,1)"/><text x="46.9940%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (955,806 samples, 0.49%)</title><rect x="46.8748%" y="69" width="0.4907%" height="15" fill="rgb(222,148,37)"/><text x="47.1248%" y="79.50"></text></g><g><title>impl_item_implementor_ids (203,840 samples, 0.10%)</title><rect x="47.3655%" y="85" width="0.1046%" height="15" fill="rgb(234,67,33)"/><text x="47.6155%" y="95.50"></text></g><g><title>impl_trait_ref (729,607 samples, 0.37%)</title><rect x="47.5672%" y="85" width="0.3745%" height="15" fill="rgb(247,98,35)"/><text x="47.8172%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (574,906 samples, 0.30%)</title><rect x="47.6466%" y="69" width="0.2951%" height="15" fill="rgb(247,138,52)"/><text x="47.8966%" y="79.50"></text></g><g><title>predicates_of (979,000 samples, 0.50%)</title><rect x="47.9750%" y="85" width="0.5026%" height="15" fill="rgb(213,79,30)"/><text x="48.2250%" y="95.50"></text></g><g><title>predicates_defined_on (560,775 samples, 0.29%)</title><rect x="48.1897%" y="69" width="0.2879%" height="15" fill="rgb(246,177,23)"/><text x="48.4397%" y="79.50"></text></g><g><title>specializes (2,706,220 samples, 1.39%)</title><rect x="48.4776%" y="85" width="1.3893%" height="15" fill="rgb(230,62,27)"/><text x="48.7276%" y="95.50"></text></g><g><title>param_env (1,698,862 samples, 0.87%)</title><rect x="48.9947%" y="69" width="0.8721%" height="15" fill="rgb(216,154,8)"/><text x="49.2447%" y="79.50"></text></g><g><title>def_span (699,891 samples, 0.36%)</title><rect x="49.5075%" y="53" width="0.3593%" height="15" fill="rgb(244,35,45)"/><text x="49.7575%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (622,381 samples, 0.32%)</title><rect x="49.5473%" y="37" width="0.3195%" height="15" fill="rgb(251,115,12)"/><text x="49.7973%" y="47.50"></text></g><g><title>trait_impls_of (462,746 samples, 0.24%)</title><rect x="49.8765%" y="85" width="0.2376%" height="15" fill="rgb(240,54,50)"/><text x="50.1265%" y="95.50"></text></g><g><title>evaluate_obligation (14,066,762 samples, 7.22%)</title><rect x="42.9102%" y="101" width="7.2212%" height="15" fill="rgb(233,84,52)"/><text x="43.1602%" y="111.50">evaluate_o..</text></g><g><title>generics_of (694,336 samples, 0.36%)</title><rect x="50.1938%" y="101" width="0.3564%" height="15" fill="rgb(207,117,47)"/><text x="50.4438%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (532,776 samples, 0.27%)</title><rect x="50.2767%" y="85" width="0.2735%" height="15" fill="rgb(249,43,39)"/><text x="50.5267%" y="95.50"></text></g><g><title>impl_item_implementor_ids (401,897 samples, 0.21%)</title><rect x="50.5524%" y="101" width="0.2063%" height="15" fill="rgb(209,38,44)"/><text x="50.8024%" y="111.50"></text></g><g><title>associated_items (343,817 samples, 0.18%)</title><rect x="50.5822%" y="85" width="0.1765%" height="15" fill="rgb(236,212,23)"/><text x="50.8322%" y="95.50"></text></g><g><title>impl_trait_ref (751,350 samples, 0.39%)</title><rect x="50.7679%" y="101" width="0.3857%" height="15" fill="rgb(242,79,21)"/><text x="51.0179%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (629,408 samples, 0.32%)</title><rect x="50.8305%" y="85" width="0.3231%" height="15" fill="rgb(211,96,35)"/><text x="51.0805%" y="95.50"></text></g><g><title>method_autoderef_steps (206,773 samples, 0.11%)</title><rect x="51.2864%" y="101" width="0.1061%" height="15" fill="rgb(253,215,40)"/><text x="51.5364%" y="111.50"></text></g><g><title>predicates_of (318,696 samples, 0.16%)</title><rect x="51.5090%" y="101" width="0.1636%" height="15" fill="rgb(211,81,21)"/><text x="51.7590%" y="111.50"></text></g><g><title>predicates_defined_on (213,626 samples, 0.11%)</title><rect x="51.5629%" y="85" width="0.1097%" height="15" fill="rgb(208,190,38)"/><text x="51.8129%" y="95.50"></text></g><g><title>item_bodies_checking (42,946,803 samples, 22.05%)</title><rect x="29.8054%" y="149" width="22.0469%" height="15" fill="rgb(235,213,38)"/><text x="30.0554%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,943,483 samples, 22.05%)</title><rect x="29.8071%" y="133" width="22.0452%" height="15" fill="rgb(237,122,38)"/><text x="30.0571%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (42,839,991 samples, 21.99%)</title><rect x="29.8603%" y="117" width="21.9921%" height="15" fill="rgb(244,218,35)"/><text x="30.1103%" y="127.50">typeck</text></g><g><title>item_types_checking (1,471,315 samples, 0.76%)</title><rect x="51.8524%" y="149" width="0.7553%" height="15" fill="rgb(240,68,47)"/><text x="52.1024%" y="159.50"></text></g><g><title>check_mod_item_types (1,468,875 samples, 0.75%)</title><rect x="51.8536%" y="133" width="0.7541%" height="15" fill="rgb(210,16,53)"/><text x="52.1036%" y="143.50"></text></g><g><title>late_bound_vars_map (208,531 samples, 0.11%)</title><rect x="53.1247%" y="101" width="0.1071%" height="15" fill="rgb(235,124,12)"/><text x="53.3747%" y="111.50"></text></g><g><title>fn_sig (634,599 samples, 0.33%)</title><rect x="52.9199%" y="117" width="0.3258%" height="15" fill="rgb(224,169,11)"/><text x="53.1699%" y="127.50"></text></g><g><title>named_region_map (561,805 samples, 0.29%)</title><rect x="53.3697%" y="101" width="0.2884%" height="15" fill="rgb(250,166,2)"/><text x="53.6197%" y="111.50"></text></g><g><title>resolve_lifetimes (503,755 samples, 0.26%)</title><rect x="53.3995%" y="85" width="0.2586%" height="15" fill="rgb(242,216,29)"/><text x="53.6495%" y="95.50"></text></g><g><title>generics_of (846,357 samples, 0.43%)</title><rect x="53.2457%" y="117" width="0.4345%" height="15" fill="rgb(230,116,27)"/><text x="53.4957%" y="127.50"></text></g><g><title>late_bound_vars_map (222,581 samples, 0.11%)</title><rect x="54.1204%" y="69" width="0.1143%" height="15" fill="rgb(228,99,48)"/><text x="54.3704%" y="79.50"></text></g><g><title>resolve_lifetimes (209,401 samples, 0.11%)</title><rect x="54.1271%" y="53" width="0.1075%" height="15" fill="rgb(253,11,6)"/><text x="54.3771%" y="63.50"></text></g><g><title>explicit_predicates_of (655,766 samples, 0.34%)</title><rect x="53.9229%" y="85" width="0.3366%" height="15" fill="rgb(247,143,39)"/><text x="54.1729%" y="95.50"></text></g><g><title>predicates_of (1,133,143 samples, 0.58%)</title><rect x="53.7557%" y="117" width="0.5817%" height="15" fill="rgb(236,97,10)"/><text x="54.0057%" y="127.50"></text></g><g><title>predicates_defined_on (1,003,351 samples, 0.52%)</title><rect x="53.8223%" y="101" width="0.5151%" height="15" fill="rgb(233,208,19)"/><text x="54.0723%" y="111.50"></text></g><g><title>type_collecting (3,673,089 samples, 1.89%)</title><rect x="52.6084%" y="149" width="1.8856%" height="15" fill="rgb(216,164,2)"/><text x="52.8584%" y="159.50">t..</text></g><g><title>collect_mod_item_types (3,661,819 samples, 1.88%)</title><rect x="52.6142%" y="133" width="1.8798%" height="15" fill="rgb(220,129,5)"/><text x="52.8642%" y="143.50">c..</text></g><g><title>type_of (226,493 samples, 0.12%)</title><rect x="54.3777%" y="117" width="0.1163%" height="15" fill="rgb(242,17,10)"/><text x="54.6277%" y="127.50"></text></g><g><title>evaluate_obligation (605,208 samples, 0.31%)</title><rect x="55.7005%" y="117" width="0.3107%" height="15" fill="rgb(242,107,0)"/><text x="55.9505%" y="127.50"></text></g><g><title>implied_outlives_bounds (232,025 samples, 0.12%)</title><rect x="56.0112%" y="117" width="0.1191%" height="15" fill="rgb(251,28,31)"/><text x="56.2612%" y="127.50"></text></g><g><title>param_env (358,382 samples, 0.18%)</title><rect x="56.1303%" y="117" width="0.1840%" height="15" fill="rgb(233,223,10)"/><text x="56.3803%" y="127.50"></text></g><g><title>region_scope_tree (446,567 samples, 0.23%)</title><rect x="56.3267%" y="117" width="0.2292%" height="15" fill="rgb(215,21,27)"/><text x="56.5767%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,841,851 samples, 1.97%)</title><rect x="54.6125%" y="133" width="1.9722%" height="15" fill="rgb(232,23,21)"/><text x="54.8625%" y="143.50">c..</text></g><g><title>evaluate_obligation (540,728 samples, 0.28%)</title><rect x="57.3791%" y="117" width="0.2776%" height="15" fill="rgb(244,5,23)"/><text x="57.6291%" y="127.50"></text></g><g><title>param_env (272,924 samples, 0.14%)</title><rect x="57.7468%" y="117" width="0.1401%" height="15" fill="rgb(226,81,46)"/><text x="57.9968%" y="127.50"></text></g><g><title>check_item_well_formed (2,733,079 samples, 1.40%)</title><rect x="56.5847%" y="133" width="1.4030%" height="15" fill="rgb(247,70,30)"/><text x="56.8347%" y="143.50"></text></g><g><title>analysis (103,057,116 samples, 52.90%)</title><rect x="5.3262%" y="181" width="52.9048%" height="15" fill="rgb(212,68,19)"/><text x="5.5762%" y="191.50">analysis</text></g><g><title>type_check_crate (69,988,748 samples, 35.93%)</title><rect x="22.3020%" y="165" width="35.9290%" height="15" fill="rgb(240,187,13)"/><text x="22.5520%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,272,818 samples, 3.73%)</title><rect x="54.4975%" y="149" width="3.7335%" height="15" fill="rgb(223,113,26)"/><text x="54.7475%" y="159.50">wf_c..</text></g><g><title>check_trait_item_well_formed (473,905 samples, 0.24%)</title><rect x="57.9877%" y="133" width="0.2433%" height="15" fill="rgb(206,192,2)"/><text x="58.2377%" y="143.50"></text></g><g><title>fn_abi_of_instance (503,084 samples, 0.26%)</title><rect x="60.0338%" y="149" width="0.2583%" height="15" fill="rgb(241,108,4)"/><text x="60.2838%" y="159.50"></text></g><g><title>codegen_module (3,339,395 samples, 1.71%)</title><rect x="58.6541%" y="165" width="1.7143%" height="15" fill="rgb(247,173,49)"/><text x="58.9041%" y="175.50"></text></g><g><title>codegen_crate (4,219,434 samples, 2.17%)</title><rect x="58.2365%" y="181" width="2.1661%" height="15" fill="rgb(224,114,35)"/><text x="58.4865%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (19,507,444 samples, 10.01%)</title><rect x="60.4342%" y="165" width="10.0142%" height="15" fill="rgb(245,159,27)"/><text x="60.6842%" y="175.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (18,436,553 samples, 9.46%)</title><rect x="60.9839%" y="149" width="9.4645%" height="15" fill="rgb(245,172,44)"/><text x="61.2339%" y="159.50">LLVM_module_co..</text></g><g><title>codegen_module_optimize (20,536,485 samples, 10.54%)</title><rect x="60.4026%" y="181" width="10.5425%" height="15" fill="rgb(236,23,11)"/><text x="60.6526%" y="191.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (967,490 samples, 0.50%)</title><rect x="70.4484%" y="165" width="0.4967%" height="15" fill="rgb(205,117,38)"/><text x="70.6984%" y="175.50"></text></g><g><title>AST_validation (245,282 samples, 0.13%)</title><rect x="71.0457%" y="165" width="0.1259%" height="15" fill="rgb(237,72,25)"/><text x="71.2957%" y="175.50"></text></g><g><title>metadata_load_macro (222,983 samples, 0.11%)</title><rect x="80.6630%" y="133" width="0.1145%" height="15" fill="rgb(244,70,9)"/><text x="80.9130%" y="143.50"></text></g><g><title>macro_expand_crate (20,350,085 samples, 10.45%)</title><rect x="71.2804%" y="165" width="10.4468%" height="15" fill="rgb(217,125,39)"/><text x="71.5304%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (20,335,665 samples, 10.44%)</title><rect x="71.2878%" y="149" width="10.4394%" height="15" fill="rgb(235,36,10)"/><text x="71.5378%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (1,850,069 samples, 0.95%)</title><rect x="80.7775%" y="133" width="0.9497%" height="15" fill="rgb(251,123,47)"/><text x="81.0275%" y="143.50"></text></g><g><title>metadata_register_crate (666,867 samples, 0.34%)</title><rect x="81.3849%" y="117" width="0.3423%" height="15" fill="rgb(221,13,13)"/><text x="81.6349%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (240,782 samples, 0.12%)</title><rect x="81.7298%" y="165" width="0.1236%" height="15" fill="rgb(238,131,9)"/><text x="81.9798%" y="175.50"></text></g><g><title>finalize_macro_resolutions (315,653 samples, 0.16%)</title><rect x="81.8792%" y="149" width="0.1620%" height="15" fill="rgb(211,50,8)"/><text x="82.1292%" y="159.50"></text></g><g><title>late_resolve_crate (3,239,734 samples, 1.66%)</title><rect x="82.0412%" y="149" width="1.6631%" height="15" fill="rgb(245,182,24)"/><text x="82.2912%" y="159.50"></text></g><g><title>configure_and_expand (25,069,574 samples, 12.87%)</title><rect x="70.9451%" y="181" width="12.8696%" height="15" fill="rgb(242,14,37)"/><text x="71.1951%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,820,550 samples, 1.96%)</title><rect x="81.8534%" y="165" width="1.9613%" height="15" fill="rgb(246,228,12)"/><text x="82.1034%" y="175.50">r..</text></g><g><title>drop_ast (411,574 samples, 0.21%)</title><rect x="83.8147%" y="181" width="0.2113%" height="15" fill="rgb(213,55,15)"/><text x="84.0647%" y="191.50"></text></g><g><title>early_lint_checks (752,788 samples, 0.39%)</title><rect x="84.0325%" y="181" width="0.3864%" height="15" fill="rgb(209,9,3)"/><text x="84.2825%" y="191.50"></text></g><g><title>free_global_ctxt (4,281,065 samples, 2.20%)</title><rect x="84.4190%" y="181" width="2.1977%" height="15" fill="rgb(230,59,30)"/><text x="84.6690%" y="191.50">f..</text></g><g><title>optimized_mir (321,865 samples, 0.17%)</title><rect x="87.6813%" y="101" width="0.1652%" height="15" fill="rgb(209,121,21)"/><text x="87.9313%" y="111.50"></text></g><g><title>specialization_graph_of (462,755 samples, 0.24%)</title><rect x="87.9653%" y="85" width="0.2376%" height="15" fill="rgb(220,109,13)"/><text x="88.2153%" y="95.50"></text></g><g><title>resolve_instance (714,537 samples, 0.37%)</title><rect x="87.8465%" y="101" width="0.3668%" height="15" fill="rgb(232,18,1)"/><text x="88.0965%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,526,836 samples, 0.78%)</title><rect x="87.5677%" y="117" width="0.7838%" height="15" fill="rgb(215,41,42)"/><text x="87.8177%" y="127.50"></text></g><g><title>monomorphization_collector (1,573,496 samples, 0.81%)</title><rect x="87.5661%" y="133" width="0.8078%" height="15" fill="rgb(224,123,36)"/><text x="87.8161%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,753,658 samples, 0.90%)</title><rect x="87.5515%" y="149" width="0.9002%" height="15" fill="rgb(240,125,3)"/><text x="87.8015%" y="159.50"></text></g><g><title>exported_symbols (1,917,630 samples, 0.98%)</title><rect x="87.5450%" y="165" width="0.9844%" height="15" fill="rgb(205,98,50)"/><text x="87.7950%" y="175.50"></text></g><g><title>layout_of (549,948 samples, 0.28%)</title><rect x="90.3237%" y="149" width="0.2823%" height="15" fill="rgb(205,185,37)"/><text x="90.5737%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,302,276 samples, 1.70%)</title><rect x="90.6060%" y="149" width="1.6952%" height="15" fill="rgb(238,207,15)"/><text x="90.8560%" y="159.50"></text></g><g><title>optimized_mir (7,277,930 samples, 3.74%)</title><rect x="88.5724%" y="165" width="3.7362%" height="15" fill="rgb(213,199,42)"/><text x="88.8224%" y="175.50">opti..</text></g><g><title>generate_crate_metadata (11,179,028 samples, 5.74%)</title><rect x="86.6167%" y="181" width="5.7388%" height="15" fill="rgb(235,201,11)"/><text x="86.8667%" y="191.50">generat..</text></g><g><title>hir_lowering (6,428,949 samples, 3.30%)</title><rect x="92.3555%" y="181" width="3.3003%" height="15" fill="rgb(207,46,11)"/><text x="92.6055%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (289,953 samples, 0.15%)</title><rect x="95.6745%" y="165" width="0.1488%" height="15" fill="rgb(241,35,35)"/><text x="95.9245%" y="175.50"></text></g><g><title>link_crate (1,029,401 samples, 0.53%)</title><rect x="95.8233%" y="165" width="0.5284%" height="15" fill="rgb(243,32,47)"/><text x="96.0733%" y="175.50"></text></g><g><title>link_binary (1,002,101 samples, 0.51%)</title><rect x="95.8373%" y="149" width="0.5144%" height="15" fill="rgb(247,202,23)"/><text x="96.0873%" y="159.50"></text></g><g><title>link_rlib (667,687 samples, 0.34%)</title><rect x="96.0090%" y="133" width="0.3428%" height="15" fill="rgb(219,102,11)"/><text x="96.2590%" y="143.50"></text></g><g><title>link (1,364,604 samples, 0.70%)</title><rect x="95.6558%" y="181" width="0.7005%" height="15" fill="rgb(243,110,44)"/><text x="95.9058%" y="191.50"></text></g><g><title>parse_crate (3,814,970 samples, 1.96%)</title><rect x="96.3563%" y="181" width="1.9584%" height="15" fill="rgb(222,74,54)"/><text x="96.6063%" y="191.50">p..</text></g><g><title>prepare_outputs (290,053 samples, 0.15%)</title><rect x="98.3189%" y="181" width="0.1489%" height="15" fill="rgb(216,99,12)"/><text x="98.5689%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,498,867 samples, 1.28%)</title><rect x="98.4678%" y="181" width="1.2828%" height="15" fill="rgb(226,22,26)"/><text x="98.7178%" y="191.50"></text></g><g><title>all (194,797,142 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (194,797,142 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (371,464 samples, 0.19%)</title><rect x="99.8093%" y="181" width="0.1907%" height="15" fill="rgb(252,105,26)"/><text x="100.0593%" y="191.50"></text></g></svg></svg>