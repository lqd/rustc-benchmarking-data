<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (30,428,426 samples, 12.02%)</title><rect x="0.4036%" y="165" width="12.0203%" height="15" fill="rgb(227,0,7)"/><text x="0.6536%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (363,755 samples, 0.14%)</title><rect x="14.4879%" y="53" width="0.1437%" height="15" fill="rgb(217,0,24)"/><text x="14.7379%" y="63.50"></text></g><g><title>thir_body (435,434 samples, 0.17%)</title><rect x="14.7178%" y="53" width="0.1720%" height="15" fill="rgb(221,193,54)"/><text x="14.9678%" y="63.50"></text></g><g><title>mir_const (2,372,015 samples, 0.94%)</title><rect x="13.9577%" y="101" width="0.9370%" height="15" fill="rgb(248,212,6)"/><text x="14.2077%" y="111.50"></text></g><g><title>unsafety_check_result (2,064,640 samples, 0.82%)</title><rect x="14.0791%" y="85" width="0.8156%" height="15" fill="rgb(208,68,35)"/><text x="14.3291%" y="95.50"></text></g><g><title>mir_built (1,813,528 samples, 0.72%)</title><rect x="14.1783%" y="69" width="0.7164%" height="15" fill="rgb(232,128,0)"/><text x="14.4283%" y="79.50"></text></g><g><title>mir_promoted (2,827,039 samples, 1.12%)</title><rect x="13.8613%" y="117" width="1.1168%" height="15" fill="rgb(207,160,47)"/><text x="14.1113%" y="127.50"></text></g><g><title>type_op_prove_predicate (732,436 samples, 0.29%)</title><rect x="15.0456%" y="117" width="0.2893%" height="15" fill="rgb(228,23,34)"/><text x="15.2956%" y="127.50"></text></g><g><title>MIR_borrow_checking (7,129,552 samples, 2.82%)</title><rect x="12.5232%" y="149" width="2.8164%" height="15" fill="rgb(218,30,26)"/><text x="12.7732%" y="159.50">MI..</text></g><g><title>mir_borrowck (7,094,952 samples, 2.80%)</title><rect x="12.5369%" y="133" width="2.8028%" height="15" fill="rgb(220,122,19)"/><text x="12.7869%" y="143.50">mi..</text></g><g><title>should_inherit_track_caller (351,134 samples, 0.14%)</title><rect x="15.6221%" y="101" width="0.1387%" height="15" fill="rgb(250,228,42)"/><text x="15.8721%" y="111.50"></text></g><g><title>codegen_fn_attrs (570,216 samples, 0.23%)</title><rect x="15.5490%" y="117" width="0.2253%" height="15" fill="rgb(240,193,28)"/><text x="15.7990%" y="127.50"></text></g><g><title>check_mod_attrs (768,309 samples, 0.30%)</title><rect x="15.4708%" y="133" width="0.3035%" height="15" fill="rgb(216,20,37)"/><text x="15.7208%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (478,874 samples, 0.19%)</title><rect x="15.8379%" y="133" width="0.1892%" height="15" fill="rgb(206,188,39)"/><text x="16.0879%" y="143.50"></text></g><g><title>misc_checking_1 (1,512,326 samples, 0.60%)</title><rect x="15.4577%" y="149" width="0.5974%" height="15" fill="rgb(217,207,13)"/><text x="15.7077%" y="159.50"></text></g><g><title>misc_checking_2 (309,513 samples, 0.12%)</title><rect x="16.0551%" y="149" width="0.1223%" height="15" fill="rgb(231,73,38)"/><text x="16.3051%" y="159.50"></text></g><g><title>death_checking (304,293 samples, 0.12%)</title><rect x="16.2085%" y="133" width="0.1202%" height="15" fill="rgb(225,20,46)"/><text x="16.4585%" y="143.50"></text></g><g><title>crate_lints (1,768,418 samples, 0.70%)</title><rect x="16.3293%" y="117" width="0.6986%" height="15" fill="rgb(210,31,41)"/><text x="16.5793%" y="127.50"></text></g><g><title>type_of (1,071,418 samples, 0.42%)</title><rect x="16.6046%" y="101" width="0.4232%" height="15" fill="rgb(221,200,47)"/><text x="16.8546%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (838,827 samples, 0.33%)</title><rect x="16.6965%" y="85" width="0.3314%" height="15" fill="rgb(226,26,5)"/><text x="16.9465%" y="95.50"></text></g><g><title>lint_checking (1,883,589 samples, 0.74%)</title><rect x="16.3287%" y="133" width="0.7441%" height="15" fill="rgb(249,33,26)"/><text x="16.5787%" y="143.50"></text></g><g><title>misc_checking_3 (2,591,286 samples, 1.02%)</title><rect x="16.1773%" y="149" width="1.0237%" height="15" fill="rgb(235,183,28)"/><text x="16.4273%" y="159.50"></text></g><g><title>impl_parent (529,806 samples, 0.21%)</title><rect x="17.3528%" y="53" width="0.2093%" height="15" fill="rgb(221,5,38)"/><text x="17.6028%" y="63.50"></text></g><g><title>impl_trait_ref (347,112 samples, 0.14%)</title><rect x="17.5621%" y="53" width="0.1371%" height="15" fill="rgb(247,18,42)"/><text x="17.8121%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (300,542 samples, 0.12%)</title><rect x="17.5805%" y="37" width="0.1187%" height="15" fill="rgb(241,131,45)"/><text x="17.8305%" y="47.50"></text></g><g><title>adt_destructor (1,159,632 samples, 0.46%)</title><rect x="17.2687%" y="101" width="0.4581%" height="15" fill="rgb(249,31,29)"/><text x="17.5187%" y="111.50"></text></g><g><title>coherent_trait (1,145,052 samples, 0.45%)</title><rect x="17.2745%" y="85" width="0.4523%" height="15" fill="rgb(225,111,53)"/><text x="17.5245%" y="95.50"></text></g><g><title>specialization_graph_of (1,142,011 samples, 0.45%)</title><rect x="17.2757%" y="69" width="0.4511%" height="15" fill="rgb(238,160,17)"/><text x="17.5257%" y="79.50"></text></g><g><title>impl_parent (7,135,868 samples, 2.82%)</title><rect x="22.7947%" y="85" width="2.8189%" height="15" fill="rgb(214,148,48)"/><text x="23.0447%" y="95.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (3,441,374 samples, 1.36%)</title><rect x="24.2541%" y="69" width="1.3595%" height="15" fill="rgb(232,36,49)"/><text x="24.5041%" y="79.50"></text></g><g><title>impl_trait_ref (14,360,564 samples, 5.67%)</title><rect x="25.6136%" y="85" width="5.6729%" height="15" fill="rgb(209,103,24)"/><text x="25.8636%" y="95.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (11,215,035 samples, 4.43%)</title><rect x="26.8562%" y="69" width="4.4303%" height="15" fill="rgb(229,88,8)"/><text x="27.1062%" y="79.50">metad..</text></g><g><title>trait_impls_of (2,555,647 samples, 1.01%)</title><rect x="31.3598%" y="85" width="1.0096%" height="15" fill="rgb(213,181,19)"/><text x="31.6098%" y="95.50"></text></g><g><title>implementations_of_trait (682,141 samples, 0.27%)</title><rect x="32.0999%" y="69" width="0.2695%" height="15" fill="rgb(254,191,54)"/><text x="32.3499%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (541,557 samples, 0.21%)</title><rect x="32.1554%" y="53" width="0.2139%" height="15" fill="rgb(241,83,37)"/><text x="32.4054%" y="63.50"></text></g><g><title>coherent_trait (38,307,106 samples, 15.13%)</title><rect x="17.2379%" y="117" width="15.1327%" height="15" fill="rgb(233,36,39)"/><text x="17.4879%" y="127.50">coherent_trait</text></g><g><title>specialization_graph_of (36,872,192 samples, 14.57%)</title><rect x="17.8048%" y="101" width="14.5659%" height="15" fill="rgb(226,3,54)"/><text x="18.0548%" y="111.50">specialization_graph_of</text></g><g><title>coherence_checking (38,453,597 samples, 15.19%)</title><rect x="17.2169%" y="133" width="15.1906%" height="15" fill="rgb(245,192,40)"/><text x="17.4669%" y="143.50">coherence_checking</text></g><g><title>evaluate_obligation (647,137 samples, 0.26%)</title><rect x="33.6347%" y="85" width="0.2556%" height="15" fill="rgb(238,167,29)"/><text x="33.8847%" y="95.50"></text></g><g><title>typeck (3,089,601 samples, 1.22%)</title><rect x="34.0585%" y="85" width="1.2205%" height="15" fill="rgb(232,182,51)"/><text x="34.3085%" y="95.50"></text></g><g><title>item_bodies_checking (7,261,093 samples, 2.87%)</title><rect x="32.4217%" y="133" width="2.8684%" height="15" fill="rgb(231,60,39)"/><text x="32.6717%" y="143.50">it..</text></g><g><title>typeck_item_bodies (7,258,663 samples, 2.87%)</title><rect x="32.4226%" y="117" width="2.8674%" height="15" fill="rgb(208,69,12)"/><text x="32.6726%" y="127.50">ty..</text></g><g><title>typeck (7,236,592 samples, 2.86%)</title><rect x="32.4313%" y="101" width="2.8587%" height="15" fill="rgb(235,93,37)"/><text x="32.6813%" y="111.50">ty..</text></g><g><title>item_types_checking (530,666 samples, 0.21%)</title><rect x="35.2900%" y="133" width="0.2096%" height="15" fill="rgb(213,116,39)"/><text x="35.5400%" y="143.50"></text></g><g><title>check_mod_item_types (527,416 samples, 0.21%)</title><rect x="35.2913%" y="117" width="0.2083%" height="15" fill="rgb(222,207,29)"/><text x="35.5413%" y="127.50"></text></g><g><title>fn_sig (361,454 samples, 0.14%)</title><rect x="35.5946%" y="101" width="0.1428%" height="15" fill="rgb(206,96,30)"/><text x="35.8446%" y="111.50"></text></g><g><title>named_region_map (326,063 samples, 0.13%)</title><rect x="35.7759%" y="85" width="0.1288%" height="15" fill="rgb(218,138,4)"/><text x="36.0259%" y="95.50"></text></g><g><title>resolve_lifetimes (312,692 samples, 0.12%)</title><rect x="35.7812%" y="69" width="0.1235%" height="15" fill="rgb(250,191,14)"/><text x="36.0312%" y="79.50"></text></g><g><title>generics_of (439,815 samples, 0.17%)</title><rect x="35.7374%" y="101" width="0.1737%" height="15" fill="rgb(239,60,40)"/><text x="35.9874%" y="111.50"></text></g><g><title>explicit_predicates_of (271,921 samples, 0.11%)</title><rect x="36.0025%" y="69" width="0.1074%" height="15" fill="rgb(206,27,48)"/><text x="36.2525%" y="79.50"></text></g><g><title>predicates_of (437,053 samples, 0.17%)</title><rect x="35.9611%" y="101" width="0.1727%" height="15" fill="rgb(225,35,8)"/><text x="36.2111%" y="111.50"></text></g><g><title>predicates_defined_on (394,432 samples, 0.16%)</title><rect x="35.9779%" y="85" width="0.1558%" height="15" fill="rgb(250,213,24)"/><text x="36.2279%" y="95.50"></text></g><g><title>type_collecting (1,773,917 samples, 0.70%)</title><rect x="35.5002%" y="133" width="0.7008%" height="15" fill="rgb(247,123,22)"/><text x="35.7502%" y="143.50"></text></g><g><title>collect_mod_item_types (1,754,337 samples, 0.69%)</title><rect x="35.5079%" y="117" width="0.6930%" height="15" fill="rgb(231,138,38)"/><text x="35.7579%" y="127.50"></text></g><g><title>check_impl_item_well_formed (761,968 samples, 0.30%)</title><rect x="36.2286%" y="117" width="0.3010%" height="15" fill="rgb(231,145,46)"/><text x="36.4786%" y="127.50"></text></g><g><title>analysis (62,165,847 samples, 24.56%)</title><rect x="12.4239%" y="165" width="24.5578%" height="15" fill="rgb(251,118,11)"/><text x="12.6739%" y="175.50">analysis</text></g><g><title>type_check_crate (50,073,034 samples, 19.78%)</title><rect x="17.2010%" y="149" width="19.7807%" height="15" fill="rgb(217,147,25)"/><text x="17.4510%" y="159.50">type_check_crate</text></g><g><title>wf_checking (1,974,920 samples, 0.78%)</title><rect x="36.2015%" y="133" width="0.7802%" height="15" fill="rgb(247,81,37)"/><text x="36.4515%" y="143.50"></text></g><g><title>check_item_well_formed (1,144,442 samples, 0.45%)</title><rect x="36.5296%" y="117" width="0.4521%" height="15" fill="rgb(209,12,38)"/><text x="36.7796%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (266,024 samples, 0.11%)</title><rect x="45.0733%" y="133" width="0.1051%" height="15" fill="rgb(227,1,9)"/><text x="45.3233%" y="143.50"></text></g><g><title>codegen_fn_attrs (290,483 samples, 0.11%)</title><rect x="45.6963%" y="117" width="0.1148%" height="15" fill="rgb(248,47,43)"/><text x="45.9463%" y="127.50"></text></g><g><title>layout_of (756,158 samples, 0.30%)</title><rect x="45.8289%" y="117" width="0.2987%" height="15" fill="rgb(221,10,30)"/><text x="46.0789%" y="127.50"></text></g><g><title>predicates_of (483,674 samples, 0.19%)</title><rect x="46.4965%" y="101" width="0.1911%" height="15" fill="rgb(210,229,1)"/><text x="46.7465%" y="111.50"></text></g><g><title>predicates_defined_on (362,823 samples, 0.14%)</title><rect x="46.5442%" y="85" width="0.1433%" height="15" fill="rgb(222,148,37)"/><text x="46.7942%" y="95.50"></text></g><g><title>param_env (1,423,064 samples, 0.56%)</title><rect x="46.1276%" y="117" width="0.5622%" height="15" fill="rgb(234,67,33)"/><text x="46.3776%" y="127.50"></text></g><g><title>fn_abi_of_instance (3,740,079 samples, 1.48%)</title><rect x="45.3060%" y="133" width="1.4775%" height="15" fill="rgb(247,98,35)"/><text x="45.5560%" y="143.50"></text></g><g><title>layout_of (348,413 samples, 0.14%)</title><rect x="47.0752%" y="117" width="0.1376%" height="15" fill="rgb(247,138,52)"/><text x="47.3252%" y="127.50"></text></g><g><title>layout_of (907,078 samples, 0.36%)</title><rect x="46.8907%" y="133" width="0.3583%" height="15" fill="rgb(213,79,30)"/><text x="47.1407%" y="143.50"></text></g><g><title>symbol_name (343,225 samples, 0.14%)</title><rect x="47.2583%" y="133" width="0.1356%" height="15" fill="rgb(246,177,23)"/><text x="47.5083%" y="143.50"></text></g><g><title>codegen_module (23,752,000 samples, 9.38%)</title><rect x="38.0320%" y="149" width="9.3829%" height="15" fill="rgb(230,62,27)"/><text x="38.2820%" y="159.50">codegen_module</text></g><g><title>codegen_crate (26,474,806 samples, 10.46%)</title><rect x="36.9868%" y="165" width="10.4585%" height="15" fill="rgb(216,154,8)"/><text x="37.2368%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (82,065,057 samples, 32.42%)</title><rect x="47.5067%" y="149" width="32.4187%" height="15" fill="rgb(244,35,45)"/><text x="47.7567%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (77,204,509 samples, 30.50%)</title><rect x="49.4268%" y="133" width="30.4986%" height="15" fill="rgb(251,115,12)"/><text x="49.6768%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (86,632,181 samples, 34.22%)</title><rect x="47.4453%" y="165" width="34.2229%" height="15" fill="rgb(240,54,50)"/><text x="47.6953%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,411,662 samples, 1.74%)</title><rect x="79.9254%" y="149" width="1.7428%" height="15" fill="rgb(233,84,52)"/><text x="80.1754%" y="159.50"></text></g><g><title>metadata_register_crate (2,566,196 samples, 1.01%)</title><rect x="89.8599%" y="117" width="1.0137%" height="15" fill="rgb(207,117,47)"/><text x="90.1099%" y="127.50"></text></g><g><title>metadata_register_crate (933,838 samples, 0.37%)</title><rect x="90.5048%" y="101" width="0.3689%" height="15" fill="rgb(249,43,39)"/><text x="90.7548%" y="111.50"></text></g><g><title>macro_expand_crate (22,814,699 samples, 9.01%)</title><rect x="81.8762%" y="149" width="9.0126%" height="15" fill="rgb(209,38,44)"/><text x="82.1262%" y="159.50">macro_expand_..</text></g><g><title>expand_crate (22,799,589 samples, 9.01%)</title><rect x="81.8822%" y="133" width="9.0067%" height="15" fill="rgb(236,212,23)"/><text x="82.1322%" y="143.50">expand_crate</text></g><g><title>finalize_macro_resolutions (290,173 samples, 0.11%)</title><rect x="90.9582%" y="133" width="0.1146%" height="15" fill="rgb(242,79,21)"/><text x="91.2082%" y="143.50"></text></g><g><title>late_resolve_crate (1,633,576 samples, 0.65%)</title><rect x="91.0728%" y="133" width="0.6453%" height="15" fill="rgb(211,96,35)"/><text x="91.3228%" y="143.50"></text></g><g><title>configure_and_expand (25,519,526 samples, 10.08%)</title><rect x="81.6682%" y="165" width="10.0811%" height="15" fill="rgb(253,215,40)"/><text x="81.9182%" y="175.50">configure_and_e..</text></g><g><title>resolve_crate (2,054,401 samples, 0.81%)</title><rect x="90.9378%" y="149" width="0.8116%" height="15" fill="rgb(211,81,21)"/><text x="91.1878%" y="159.50"></text></g><g><title>early_lint_checks (278,603 samples, 0.11%)</title><rect x="91.8149%" y="165" width="0.1101%" height="15" fill="rgb(208,190,38)"/><text x="92.0649%" y="175.50"></text></g><g><title>free_global_ctxt (3,996,110 samples, 1.58%)</title><rect x="91.9249%" y="165" width="1.5786%" height="15" fill="rgb(235,213,38)"/><text x="92.1749%" y="175.50"></text></g><g><title>item_attrs (354,595 samples, 0.14%)</title><rect x="94.0346%" y="69" width="0.1401%" height="15" fill="rgb(237,122,38)"/><text x="94.2846%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (342,705 samples, 0.14%)</title><rect x="94.0393%" y="53" width="0.1354%" height="15" fill="rgb(244,218,35)"/><text x="94.2893%" y="63.50"></text></g><g><title>codegen_fn_attrs (552,586 samples, 0.22%)</title><rect x="94.0030%" y="85" width="0.2183%" height="15" fill="rgb(240,68,47)"/><text x="94.2530%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (474,774 samples, 0.19%)</title><rect x="94.5555%" y="69" width="0.1876%" height="15" fill="rgb(210,16,53)"/><text x="94.8055%" y="79.50"></text></g><g><title>optimized_mir (1,120,951 samples, 0.44%)</title><rect x="94.3916%" y="85" width="0.4428%" height="15" fill="rgb(235,124,12)"/><text x="94.6416%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (557,006 samples, 0.22%)</title><rect x="94.9291%" y="69" width="0.2200%" height="15" fill="rgb(224,169,11)"/><text x="95.1791%" y="79.50"></text></g><g><title>specialization_graph_of (361,594 samples, 0.14%)</title><rect x="95.2549%" y="69" width="0.1428%" height="15" fill="rgb(250,166,2)"/><text x="95.5049%" y="79.50"></text></g><g><title>resolve_instance (1,547,664 samples, 0.61%)</title><rect x="94.8344%" y="85" width="0.6114%" height="15" fill="rgb(242,216,29)"/><text x="95.0844%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (4,828,838 samples, 1.91%)</title><rect x="93.7868%" y="101" width="1.9076%" height="15" fill="rgb(230,116,27)"/><text x="94.0368%" y="111.50">m..</text></g><g><title>monomorphization_collector (4,857,358 samples, 1.92%)</title><rect x="93.7859%" y="117" width="1.9188%" height="15" fill="rgb(228,99,48)"/><text x="94.0359%" y="127.50">m..</text></g><g><title>assert_symbols_are_distinct (527,086 samples, 0.21%)</title><rect x="95.7064%" y="101" width="0.2082%" height="15" fill="rgb(253,11,6)"/><text x="95.9564%" y="111.50"></text></g><g><title>symbol_name (483,005 samples, 0.19%)</title><rect x="95.7239%" y="85" width="0.1908%" height="15" fill="rgb(247,143,39)"/><text x="95.9739%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (5,740,158 samples, 2.27%)</title><rect x="93.7726%" y="133" width="2.2676%" height="15" fill="rgb(236,97,10)"/><text x="94.0226%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (848,989 samples, 0.34%)</title><rect x="95.7047%" y="117" width="0.3354%" height="15" fill="rgb(233,208,19)"/><text x="95.9547%" y="127.50"></text></g><g><title>cgu_partitioning (317,603 samples, 0.13%)</title><rect x="95.9147%" y="101" width="0.1255%" height="15" fill="rgb(216,164,2)"/><text x="96.1647%" y="111.50"></text></g><g><title>exported_symbols (5,809,248 samples, 2.29%)</title><rect x="93.7585%" y="149" width="2.2949%" height="15" fill="rgb(220,129,5)"/><text x="94.0085%" y="159.50">e..</text></g><g><title>layout_of (402,356 samples, 0.16%)</title><rect x="96.3115%" y="133" width="0.1589%" height="15" fill="rgb(242,17,10)"/><text x="96.5615%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (572,695 samples, 0.23%)</title><rect x="96.4705%" y="133" width="0.2262%" height="15" fill="rgb(242,107,0)"/><text x="96.7205%" y="143.50"></text></g><g><title>optimized_mir (1,700,676 samples, 0.67%)</title><rect x="96.0687%" y="149" width="0.6718%" height="15" fill="rgb(251,28,31)"/><text x="96.3187%" y="159.50"></text></g><g><title>generate_crate_metadata (8,264,992 samples, 3.26%)</title><rect x="93.5035%" y="165" width="3.2650%" height="15" fill="rgb(233,223,10)"/><text x="93.7535%" y="175.50">gen..</text></g><g><title>hir_lowering (1,786,868 samples, 0.71%)</title><rect x="96.7685%" y="165" width="0.7059%" height="15" fill="rgb(215,21,27)"/><text x="97.0185%" y="175.50"></text></g><g><title>finish_ongoing_codegen (1,328,004 samples, 0.52%)</title><rect x="97.4799%" y="149" width="0.5246%" height="15" fill="rgb(232,23,21)"/><text x="97.7299%" y="159.50"></text></g><g><title>link_crate (1,382,054 samples, 0.55%)</title><rect x="98.0045%" y="149" width="0.5460%" height="15" fill="rgb(244,5,23)"/><text x="98.2545%" y="159.50"></text></g><g><title>link_binary (1,367,644 samples, 0.54%)</title><rect x="98.0102%" y="133" width="0.5403%" height="15" fill="rgb(226,81,46)"/><text x="98.2602%" y="143.50"></text></g><g><title>link_rlib (869,329 samples, 0.34%)</title><rect x="98.2071%" y="117" width="0.3434%" height="15" fill="rgb(247,70,30)"/><text x="98.4571%" y="127.50"></text></g><g><title>link (2,733,968 samples, 1.08%)</title><rect x="97.4744%" y="165" width="1.0800%" height="15" fill="rgb(212,68,19)"/><text x="97.7244%" y="175.50"></text></g><g><title>parse_crate (1,381,544 samples, 0.55%)</title><rect x="98.5544%" y="165" width="0.5458%" height="15" fill="rgb(240,187,13)"/><text x="98.8044%" y="175.50"></text></g><g><title>prepare_outputs (344,554 samples, 0.14%)</title><rect x="99.1040%" y="165" width="0.1361%" height="15" fill="rgb(223,113,26)"/><text x="99.3540%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,468,995 samples, 0.58%)</title><rect x="99.2402%" y="165" width="0.5803%" height="15" fill="rgb(206,192,2)"/><text x="99.4902%" y="175.50"></text></g><g><title>all (253,141,088 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (253,141,088 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (291,263 samples, 0.12%)</title><rect x="99.8849%" y="165" width="0.1151%" height="15" fill="rgb(224,114,35)"/><text x="100.1349%" y="175.50"></text></g></svg></svg>