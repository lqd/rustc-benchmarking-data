<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (350,177,058 samples, 16.85%)</title><rect x="0.0399%" y="149" width="16.8507%" height="15" fill="rgb(227,0,7)"/><text x="0.2899%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,119,541 samples, 0.15%)</title><rect x="19.3466%" y="37" width="0.1501%" height="15" fill="rgb(217,0,24)"/><text x="19.5966%" y="47.50"></text></g><g><title>resolve_instance (4,639,092 samples, 0.22%)</title><rect x="19.4968%" y="37" width="0.2232%" height="15" fill="rgb(221,193,54)"/><text x="19.7468%" y="47.50"></text></g><g><title>thir_body (2,906,973 samples, 0.14%)</title><rect x="19.7233%" y="37" width="0.1399%" height="15" fill="rgb(248,212,6)"/><text x="19.9733%" y="47.50"></text></g><g><title>mir_const (23,691,304 samples, 1.14%)</title><rect x="18.7252%" y="85" width="1.1400%" height="15" fill="rgb(208,68,35)"/><text x="18.9752%" y="95.50"></text></g><g><title>unsafety_check_result (21,096,005 samples, 1.02%)</title><rect x="18.8501%" y="69" width="1.0152%" height="15" fill="rgb(232,128,0)"/><text x="19.1001%" y="79.50"></text></g><g><title>mir_built (19,125,227 samples, 0.92%)</title><rect x="18.9450%" y="53" width="0.9203%" height="15" fill="rgb(207,160,47)"/><text x="19.1950%" y="63.50"></text></g><g><title>mir_promoted (27,269,446 samples, 1.31%)</title><rect x="18.6322%" y="101" width="1.3122%" height="15" fill="rgb(228,23,34)"/><text x="18.8822%" y="111.50"></text></g><g><title>type_op_normalize_fn_sig (2,715,488 samples, 0.13%)</title><rect x="19.9902%" y="101" width="0.1307%" height="15" fill="rgb(218,30,26)"/><text x="20.2402%" y="111.50"></text></g><g><title>type_op_prove_predicate (7,912,481 samples, 0.38%)</title><rect x="20.1396%" y="101" width="0.3808%" height="15" fill="rgb(220,122,19)"/><text x="20.3896%" y="111.50"></text></g><g><title>MIR_borrow_checking (74,861,535 samples, 3.60%)</title><rect x="16.9192%" y="133" width="3.6024%" height="15" fill="rgb(250,228,42)"/><text x="17.1692%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (74,637,224 samples, 3.59%)</title><rect x="16.9300%" y="117" width="3.5916%" height="15" fill="rgb(240,193,28)"/><text x="17.1800%" y="127.50">mir_..</text></g><g><title>misc_checking_2 (2,961,222 samples, 0.14%)</title><rect x="20.6433%" y="133" width="0.1425%" height="15" fill="rgb(216,20,37)"/><text x="20.8933%" y="143.50"></text></g><g><title>crate_lints (3,309,595 samples, 0.16%)</title><rect x="20.8413%" y="101" width="0.1593%" height="15" fill="rgb(206,188,39)"/><text x="21.0913%" y="111.50"></text></g><g><title>lint_checking (4,391,367 samples, 0.21%)</title><rect x="20.8412%" y="117" width="0.2113%" height="15" fill="rgb(217,207,13)"/><text x="21.0912%" y="127.50"></text></g><g><title>privacy_checking_modules (2,105,912 samples, 0.10%)</title><rect x="21.0766%" y="117" width="0.1013%" height="15" fill="rgb(231,73,38)"/><text x="21.3266%" y="127.50"></text></g><g><title>check_mod_privacy (2,103,872 samples, 0.10%)</title><rect x="21.0767%" y="101" width="0.1012%" height="15" fill="rgb(225,20,46)"/><text x="21.3267%" y="111.50"></text></g><g><title>misc_checking_3 (8,178,467 samples, 0.39%)</title><rect x="20.7858%" y="133" width="0.3936%" height="15" fill="rgb(210,31,41)"/><text x="21.0358%" y="143.50"></text></g><g><title>impl_parent (3,171,675 samples, 0.15%)</title><rect x="21.4653%" y="69" width="0.1526%" height="15" fill="rgb(221,200,47)"/><text x="21.7153%" y="79.50"></text></g><g><title>impl_trait_ref (5,807,780 samples, 0.28%)</title><rect x="21.6179%" y="69" width="0.2795%" height="15" fill="rgb(226,26,5)"/><text x="21.8679%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,542,438 samples, 0.22%)</title><rect x="21.6788%" y="53" width="0.2186%" height="15" fill="rgb(249,33,26)"/><text x="21.9288%" y="63.50"></text></g><g><title>coherent_trait (15,779,989 samples, 0.76%)</title><rect x="21.1857%" y="101" width="0.7593%" height="15" fill="rgb(235,183,28)"/><text x="21.4357%" y="111.50"></text></g><g><title>specialization_graph_of (14,680,166 samples, 0.71%)</title><rect x="21.2386%" y="85" width="0.7064%" height="15" fill="rgb(221,5,38)"/><text x="21.4886%" y="95.50"></text></g><g><title>coherence_checking (15,877,561 samples, 0.76%)</title><rect x="21.1844%" y="117" width="0.7640%" height="15" fill="rgb(247,18,42)"/><text x="21.4344%" y="127.50"></text></g><g><title>evaluate_obligation (7,861,815 samples, 0.38%)</title><rect x="24.4053%" y="69" width="0.3783%" height="15" fill="rgb(241,131,45)"/><text x="24.6553%" y="79.50"></text></g><g><title>evaluate_obligation (4,053,001 samples, 0.20%)</title><rect x="25.8454%" y="53" width="0.1950%" height="15" fill="rgb(249,31,29)"/><text x="26.0954%" y="63.50"></text></g><g><title>typeck (24,747,487 samples, 1.19%)</title><rect x="24.9816%" y="69" width="1.1909%" height="15" fill="rgb(225,111,53)"/><text x="25.2316%" y="79.50"></text></g><g><title>item_bodies_checking (87,855,676 samples, 4.23%)</title><rect x="21.9505%" y="117" width="4.2277%" height="15" fill="rgb(238,160,17)"/><text x="22.2005%" y="127.50">item_..</text></g><g><title>typeck_item_bodies (87,851,745 samples, 4.23%)</title><rect x="21.9507%" y="101" width="4.2275%" height="15" fill="rgb(214,148,48)"/><text x="22.2007%" y="111.50">typec..</text></g><g><title>typeck (87,712,774 samples, 4.22%)</title><rect x="21.9574%" y="85" width="4.2208%" height="15" fill="rgb(232,36,49)"/><text x="22.2074%" y="95.50">typeck</text></g><g><title>item_types_checking (4,187,224 samples, 0.20%)</title><rect x="26.1782%" y="117" width="0.2015%" height="15" fill="rgb(209,103,24)"/><text x="26.4282%" y="127.50"></text></g><g><title>check_mod_item_types (4,183,604 samples, 0.20%)</title><rect x="26.1784%" y="101" width="0.2013%" height="15" fill="rgb(229,88,8)"/><text x="26.4284%" y="111.50"></text></g><g><title>type_collecting (3,357,006 samples, 0.16%)</title><rect x="26.3798%" y="117" width="0.1615%" height="15" fill="rgb(213,181,19)"/><text x="26.6298%" y="127.50"></text></g><g><title>collect_mod_item_types (3,349,036 samples, 0.16%)</title><rect x="26.3802%" y="101" width="0.1612%" height="15" fill="rgb(254,191,54)"/><text x="26.6302%" y="111.50"></text></g><g><title>check_impl_item_well_formed (5,299,941 samples, 0.26%)</title><rect x="26.5583%" y="101" width="0.2550%" height="15" fill="rgb(241,83,37)"/><text x="26.8083%" y="111.50"></text></g><g><title>check_item_well_formed (4,136,335 samples, 0.20%)</title><rect x="26.8133%" y="101" width="0.1990%" height="15" fill="rgb(233,36,39)"/><text x="27.0633%" y="111.50"></text></g><g><title>analysis (210,421,013 samples, 10.13%)</title><rect x="16.8907%" y="149" width="10.1256%" height="15" fill="rgb(226,3,54)"/><text x="17.1407%" y="159.50">analysis</text></g><g><title>type_check_crate (121,296,165 samples, 5.84%)</title><rect x="21.1794%" y="133" width="5.8368%" height="15" fill="rgb(245,192,40)"/><text x="21.4294%" y="143.50">type_ch..</text></g><g><title>wf_checking (9,857,357 samples, 0.47%)</title><rect x="26.5419%" y="117" width="0.4743%" height="15" fill="rgb(238,167,29)"/><text x="26.7919%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (7,562,084 samples, 0.36%)</title><rect x="40.3624%" y="117" width="0.3639%" height="15" fill="rgb(232,182,51)"/><text x="40.6124%" y="127.50"></text></g><g><title>const_caller_location (2,669,382 samples, 0.13%)</title><rect x="40.7263%" y="117" width="0.1285%" height="15" fill="rgb(231,60,39)"/><text x="40.9763%" y="127.50"></text></g><g><title>layout_of (3,051,638 samples, 0.15%)</title><rect x="41.5461%" y="101" width="0.1468%" height="15" fill="rgb(208,69,12)"/><text x="41.7961%" y="111.50"></text></g><g><title>predicates_of (4,714,731 samples, 0.23%)</title><rect x="42.0835%" y="85" width="0.2269%" height="15" fill="rgb(235,93,37)"/><text x="42.3335%" y="95.50"></text></g><g><title>predicates_defined_on (3,609,071 samples, 0.17%)</title><rect x="42.1367%" y="69" width="0.1737%" height="15" fill="rgb(213,116,39)"/><text x="42.3867%" y="79.50"></text></g><g><title>param_env (12,850,134 samples, 0.62%)</title><rect x="41.6929%" y="101" width="0.6184%" height="15" fill="rgb(222,207,29)"/><text x="41.9429%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,760,082 samples, 0.13%)</title><rect x="42.3113%" y="101" width="0.1328%" height="15" fill="rgb(206,96,30)"/><text x="42.5613%" y="111.50"></text></g><g><title>fn_abi_of_instance (33,067,686 samples, 1.59%)</title><rect x="40.8604%" y="117" width="1.5912%" height="15" fill="rgb(218,138,4)"/><text x="41.1104%" y="127.50"></text></g><g><title>layout_of (6,566,283 samples, 0.32%)</title><rect x="42.5800%" y="117" width="0.3160%" height="15" fill="rgb(250,191,14)"/><text x="42.8300%" y="127.50"></text></g><g><title>symbol_name (3,949,862 samples, 0.19%)</title><rect x="42.8970%" y="117" width="0.1901%" height="15" fill="rgb(239,60,40)"/><text x="43.1470%" y="127.50"></text></g><g><title>codegen_module (330,167,231 samples, 15.89%)</title><rect x="27.2256%" y="133" width="15.8878%" height="15" fill="rgb(206,27,48)"/><text x="27.4756%" y="143.50">codegen_module</text></g><g><title>codegen_crate (334,592,520 samples, 16.10%)</title><rect x="27.0169%" y="149" width="16.1008%" height="15" fill="rgb(225,35,8)"/><text x="27.2669%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (912,342,193 samples, 43.90%)</title><rect x="43.1291%" y="133" width="43.9025%" height="15" fill="rgb(250,213,24)"/><text x="43.3791%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (859,774,261 samples, 41.37%)</title><rect x="45.6587%" y="117" width="41.3729%" height="15" fill="rgb(247,123,22)"/><text x="45.9087%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (959,607,785 samples, 46.18%)</title><rect x="43.1177%" y="149" width="46.1769%" height="15" fill="rgb(231,138,38)"/><text x="43.3677%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (47,028,855 samples, 2.26%)</title><rect x="87.0315%" y="133" width="2.2631%" height="15" fill="rgb(231,145,46)"/><text x="87.2815%" y="143.50">L..</text></g><g><title>metadata_register_crate (3,198,254 samples, 0.15%)</title><rect x="91.3407%" y="101" width="0.1539%" height="15" fill="rgb(251,118,11)"/><text x="91.5907%" y="111.50"></text></g><g><title>macro_expand_crate (45,015,714 samples, 2.17%)</title><rect x="89.3312%" y="133" width="2.1662%" height="15" fill="rgb(217,147,25)"/><text x="89.5812%" y="143.50">m..</text></g><g><title>expand_crate (45,001,183 samples, 2.17%)</title><rect x="89.3319%" y="117" width="2.1655%" height="15" fill="rgb(247,81,37)"/><text x="89.5819%" y="127.50">e..</text></g><g><title>late_resolve_crate (4,213,105 samples, 0.20%)</title><rect x="91.5555%" y="117" width="0.2027%" height="15" fill="rgb(209,12,38)"/><text x="91.8055%" y="127.50"></text></g><g><title>configure_and_expand (51,435,932 samples, 2.48%)</title><rect x="89.2946%" y="149" width="2.4751%" height="15" fill="rgb(227,1,9)"/><text x="89.5446%" y="159.50">co..</text></g><g><title>resolve_crate (5,062,565 samples, 0.24%)</title><rect x="91.5261%" y="133" width="0.2436%" height="15" fill="rgb(248,47,43)"/><text x="91.7761%" y="143.50"></text></g><g><title>free_global_ctxt (11,641,496 samples, 0.56%)</title><rect x="91.8385%" y="149" width="0.5602%" height="15" fill="rgb(221,10,30)"/><text x="92.0885%" y="159.50"></text></g><g><title>item_attrs (2,547,211 samples, 0.12%)</title><rect x="93.1150%" y="53" width="0.1226%" height="15" fill="rgb(210,229,1)"/><text x="93.3650%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,378,569 samples, 0.11%)</title><rect x="93.1231%" y="37" width="0.1145%" height="15" fill="rgb(222,148,37)"/><text x="93.3731%" y="47.50"></text></g><g><title>codegen_fn_attrs (4,596,027 samples, 0.22%)</title><rect x="93.0668%" y="69" width="0.2212%" height="15" fill="rgb(234,67,33)"/><text x="93.3168%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (8,590,597 samples, 0.41%)</title><rect x="93.7567%" y="53" width="0.4134%" height="15" fill="rgb(247,98,35)"/><text x="94.0067%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,275,877 samples, 0.35%)</title><rect x="94.1701%" y="53" width="0.3501%" height="15" fill="rgb(247,138,52)"/><text x="94.4201%" y="63.50"></text></g><g><title>optimized_mir (22,261,023 samples, 1.07%)</title><rect x="93.4637%" y="69" width="1.0712%" height="15" fill="rgb(213,79,30)"/><text x="93.7137%" y="79.50"></text></g><g><title>evaluate_obligation (2,556,189 samples, 0.12%)</title><rect x="95.3280%" y="37" width="0.1230%" height="15" fill="rgb(246,177,23)"/><text x="95.5780%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (15,741,969 samples, 0.76%)</title><rect x="94.7702%" y="53" width="0.7575%" height="15" fill="rgb(230,62,27)"/><text x="95.0202%" y="63.50"></text></g><g><title>specialization_graph_of (4,664,229 samples, 0.22%)</title><rect x="95.6687%" y="53" width="0.2244%" height="15" fill="rgb(216,154,8)"/><text x="95.9187%" y="63.50"></text></g><g><title>resolve_instance (29,447,055 samples, 1.42%)</title><rect x="94.5349%" y="69" width="1.4170%" height="15" fill="rgb(244,35,45)"/><text x="94.7849%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,170,653 samples, 0.10%)</title><rect x="96.0201%" y="53" width="0.1045%" height="15" fill="rgb(251,115,12)"/><text x="96.2701%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,128,293 samples, 0.10%)</title><rect x="96.0221%" y="37" width="0.1024%" height="15" fill="rgb(240,54,50)"/><text x="96.2721%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,551,217 samples, 0.12%)</title><rect x="96.0047%" y="69" width="0.1228%" height="15" fill="rgb(233,84,52)"/><text x="96.2547%" y="79.50"></text></g><g><title>upstream_drop_glue_for (2,346,815 samples, 0.11%)</title><rect x="96.1275%" y="69" width="0.1129%" height="15" fill="rgb(207,117,47)"/><text x="96.3775%" y="79.50"></text></g><g><title>upstream_monomorphizations_for (2,321,585 samples, 0.11%)</title><rect x="96.1287%" y="53" width="0.1117%" height="15" fill="rgb(249,43,39)"/><text x="96.3787%" y="63.50"></text></g><g><title>upstream_monomorphizations (2,318,515 samples, 0.11%)</title><rect x="96.1288%" y="37" width="0.1116%" height="15" fill="rgb(209,38,44)"/><text x="96.3788%" y="47.50"></text></g><g><title>resolve_instance (2,343,411 samples, 0.11%)</title><rect x="96.3316%" y="53" width="0.1128%" height="15" fill="rgb(236,212,23)"/><text x="96.5816%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (80,648,087 samples, 3.88%)</title><rect x="92.5639%" y="85" width="3.8808%" height="15" fill="rgb(242,79,21)"/><text x="92.8139%" y="95.50">mono..</text></g><g><title>vtable_entries (4,146,590 samples, 0.20%)</title><rect x="96.2452%" y="69" width="0.1995%" height="15" fill="rgb(211,96,35)"/><text x="96.4952%" y="79.50"></text></g><g><title>monomorphization_collector (80,735,898 samples, 3.89%)</title><rect x="92.5638%" y="101" width="3.8851%" height="15" fill="rgb(253,215,40)"/><text x="92.8138%" y="111.50">mono..</text></g><g><title>assert_symbols_are_distinct (8,252,560 samples, 0.40%)</title><rect x="96.4495%" y="85" width="0.3971%" height="15" fill="rgb(211,81,21)"/><text x="96.6995%" y="95.50"></text></g><g><title>symbol_name (7,425,983 samples, 0.36%)</title><rect x="96.4892%" y="69" width="0.3573%" height="15" fill="rgb(208,190,38)"/><text x="96.7392%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (92,518,655 samples, 4.45%)</title><rect x="92.5600%" y="117" width="4.4521%" height="15" fill="rgb(235,213,38)"/><text x="92.8100%" y="127.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (11,703,567 samples, 0.56%)</title><rect x="96.4488%" y="101" width="0.5632%" height="15" fill="rgb(237,122,38)"/><text x="96.6988%" y="111.50"></text></g><g><title>cgu_partitioning (3,437,557 samples, 0.17%)</title><rect x="96.8466%" y="85" width="0.1654%" height="15" fill="rgb(244,218,35)"/><text x="97.0966%" y="95.50"></text></g><g><title>exported_symbols (93,006,981 samples, 4.48%)</title><rect x="92.5435%" y="133" width="4.4756%" height="15" fill="rgb(240,68,47)"/><text x="92.7935%" y="143.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,343,673 samples, 0.26%)</title><rect x="97.3031%" y="117" width="0.2571%" height="15" fill="rgb(210,16,53)"/><text x="97.5531%" y="127.50"></text></g><g><title>optimized_mir (11,674,422 samples, 0.56%)</title><rect x="97.0240%" y="133" width="0.5618%" height="15" fill="rgb(235,124,12)"/><text x="97.2740%" y="143.50"></text></g><g><title>generate_crate_metadata (107,913,922 samples, 5.19%)</title><rect x="92.3987%" y="149" width="5.1929%" height="15" fill="rgb(224,169,11)"/><text x="92.6487%" y="159.50">genera..</text></g><g><title>hir_lowering (6,308,769 samples, 0.30%)</title><rect x="97.5916%" y="149" width="0.3036%" height="15" fill="rgb(250,166,2)"/><text x="97.8416%" y="159.50"></text></g><g><title>finish_ongoing_codegen (22,736,054 samples, 1.09%)</title><rect x="97.8960%" y="133" width="1.0941%" height="15" fill="rgb(242,216,29)"/><text x="98.1460%" y="143.50"></text></g><g><title>link_crate (5,931,964 samples, 0.29%)</title><rect x="98.9901%" y="133" width="0.2854%" height="15" fill="rgb(230,116,27)"/><text x="99.2401%" y="143.50"></text></g><g><title>link_binary (5,860,074 samples, 0.28%)</title><rect x="98.9935%" y="117" width="0.2820%" height="15" fill="rgb(228,99,48)"/><text x="99.2435%" y="127.50"></text></g><g><title>link_rlib (4,738,561 samples, 0.23%)</title><rect x="99.0475%" y="101" width="0.2280%" height="15" fill="rgb(253,11,6)"/><text x="99.2975%" y="111.50"></text></g><g><title>link (28,696,098 samples, 1.38%)</title><rect x="97.8951%" y="149" width="1.3809%" height="15" fill="rgb(247,143,39)"/><text x="98.1451%" y="159.50"></text></g><g><title>parse_crate (11,180,561 samples, 0.54%)</title><rect x="99.2760%" y="149" width="0.5380%" height="15" fill="rgb(236,97,10)"/><text x="99.5260%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (3,033,103 samples, 0.15%)</title><rect x="99.8262%" y="149" width="0.1460%" height="15" fill="rgb(233,208,19)"/><text x="100.0762%" y="159.50"></text></g><g><title>all (2,078,111,770 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (2,078,111,770 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>