<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,303,382,840 samples, 15.85%)</title><rect x="0.0356%" y="149" width="15.8518%" height="15" fill="rgb(227,0,7)"/><text x="0.2856%" y="159.50">LLVM_passes</text></g><g><title>thir_body (16,673,405 samples, 0.20%)</title><rect x="19.2966%" y="37" width="0.2028%" height="15" fill="rgb(217,0,24)"/><text x="19.5466%" y="47.50"></text></g><g><title>mir_const (96,130,020 samples, 1.17%)</title><rect x="18.3336%" y="85" width="1.1691%" height="15" fill="rgb(221,193,54)"/><text x="18.5836%" y="95.50"></text></g><g><title>unsafety_check_result (83,473,453 samples, 1.02%)</title><rect x="18.4875%" y="69" width="1.0152%" height="15" fill="rgb(248,212,6)"/><text x="18.7375%" y="79.50"></text></g><g><title>mir_built (74,660,835 samples, 0.91%)</title><rect x="18.5947%" y="53" width="0.9080%" height="15" fill="rgb(208,68,35)"/><text x="18.8447%" y="63.50"></text></g><g><title>mir_promoted (108,618,063 samples, 1.32%)</title><rect x="18.1996%" y="101" width="1.3210%" height="15" fill="rgb(232,128,0)"/><text x="18.4496%" y="111.50"></text></g><g><title>type_op_prove_predicate (23,555,935 samples, 0.29%)</title><rect x="19.6459%" y="101" width="0.2865%" height="15" fill="rgb(207,160,47)"/><text x="19.8959%" y="111.50"></text></g><g><title>MIR_borrow_checking (329,663,151 samples, 4.01%)</title><rect x="15.9234%" y="133" width="4.0094%" height="15" fill="rgb(228,23,34)"/><text x="16.1734%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (327,635,008 samples, 3.98%)</title><rect x="15.9481%" y="117" width="3.9847%" height="15" fill="rgb(218,30,26)"/><text x="16.1981%" y="127.50">mir_..</text></g><g><title>misc_checking_1 (13,197,404 samples, 0.16%)</title><rect x="19.9815%" y="133" width="0.1605%" height="15" fill="rgb(220,122,19)"/><text x="20.2315%" y="143.50"></text></g><g><title>misc_checking_2 (15,927,343 samples, 0.19%)</title><rect x="20.1420%" y="133" width="0.1937%" height="15" fill="rgb(250,228,42)"/><text x="20.3920%" y="143.50"></text></g><g><title>match_checking (9,604,849 samples, 0.12%)</title><rect x="20.2189%" y="117" width="0.1168%" height="15" fill="rgb(240,193,28)"/><text x="20.4689%" y="127.50"></text></g><g><title>check_match (9,126,302 samples, 0.11%)</title><rect x="20.2247%" y="101" width="0.1110%" height="15" fill="rgb(216,20,37)"/><text x="20.4747%" y="111.50"></text></g><g><title>crate_lints (11,081,863 samples, 0.13%)</title><rect x="20.4372%" y="101" width="0.1348%" height="15" fill="rgb(206,188,39)"/><text x="20.6872%" y="111.50"></text></g><g><title>lint_checking (19,734,051 samples, 0.24%)</title><rect x="20.4372%" y="117" width="0.2400%" height="15" fill="rgb(217,207,13)"/><text x="20.6872%" y="127.50"></text></g><g><title>module_lints (8,649,538 samples, 0.11%)</title><rect x="20.5720%" y="101" width="0.1052%" height="15" fill="rgb(231,73,38)"/><text x="20.8220%" y="111.50"></text></g><g><title>lint_mod (8,619,808 samples, 0.10%)</title><rect x="20.5723%" y="85" width="0.1048%" height="15" fill="rgb(225,20,46)"/><text x="20.8223%" y="95.50"></text></g><g><title>privacy_checking_modules (12,572,138 samples, 0.15%)</title><rect x="20.7362%" y="117" width="0.1529%" height="15" fill="rgb(210,31,41)"/><text x="20.9862%" y="127.50"></text></g><g><title>check_mod_privacy (12,548,226 samples, 0.15%)</title><rect x="20.7365%" y="101" width="0.1526%" height="15" fill="rgb(221,200,47)"/><text x="20.9865%" y="111.50"></text></g><g><title>misc_checking_3 (45,643,714 samples, 0.56%)</title><rect x="20.3357%" y="133" width="0.5551%" height="15" fill="rgb(226,26,5)"/><text x="20.5857%" y="143.50"></text></g><g><title>coherent_trait (22,115,355 samples, 0.27%)</title><rect x="20.8996%" y="101" width="0.2690%" height="15" fill="rgb(249,33,26)"/><text x="21.1496%" y="111.50"></text></g><g><title>specialization_graph_of (20,831,761 samples, 0.25%)</title><rect x="20.9152%" y="85" width="0.2534%" height="15" fill="rgb(235,183,28)"/><text x="21.1652%" y="95.50"></text></g><g><title>coherence_checking (22,578,130 samples, 0.27%)</title><rect x="20.8992%" y="117" width="0.2746%" height="15" fill="rgb(221,5,38)"/><text x="21.1492%" y="127.50"></text></g><g><title>evaluate_obligation (15,735,435 samples, 0.19%)</title><rect x="24.4009%" y="69" width="0.1914%" height="15" fill="rgb(247,18,42)"/><text x="24.6509%" y="79.50"></text></g><g><title>typeck (81,548,483 samples, 0.99%)</title><rect x="24.7185%" y="69" width="0.9918%" height="15" fill="rgb(241,131,45)"/><text x="24.9685%" y="79.50"></text></g><g><title>item_bodies_checking (372,991,212 samples, 4.54%)</title><rect x="21.1785%" y="117" width="4.5363%" height="15" fill="rgb(249,31,29)"/><text x="21.4285%" y="127.50">item_..</text></g><g><title>typeck_item_bodies (372,988,732 samples, 4.54%)</title><rect x="21.1785%" y="101" width="4.5363%" height="15" fill="rgb(225,111,53)"/><text x="21.4285%" y="111.50">typec..</text></g><g><title>typeck (371,814,175 samples, 4.52%)</title><rect x="21.1928%" y="85" width="4.5220%" height="15" fill="rgb(238,160,17)"/><text x="21.4428%" y="95.50">typeck</text></g><g><title>item_types_checking (21,932,893 samples, 0.27%)</title><rect x="25.7148%" y="117" width="0.2667%" height="15" fill="rgb(214,148,48)"/><text x="25.9648%" y="127.50"></text></g><g><title>check_mod_item_types (21,906,033 samples, 0.27%)</title><rect x="25.7152%" y="101" width="0.2664%" height="15" fill="rgb(232,36,49)"/><text x="25.9652%" y="111.50"></text></g><g><title>typeck (10,135,005 samples, 0.12%)</title><rect x="25.8583%" y="85" width="0.1233%" height="15" fill="rgb(209,103,24)"/><text x="26.1083%" y="95.50"></text></g><g><title>type_collecting (18,513,728 samples, 0.23%)</title><rect x="25.9818%" y="117" width="0.2252%" height="15" fill="rgb(229,88,8)"/><text x="26.2318%" y="127.50"></text></g><g><title>collect_mod_item_types (18,476,678 samples, 0.22%)</title><rect x="25.9822%" y="101" width="0.2247%" height="15" fill="rgb(213,181,19)"/><text x="26.2322%" y="111.50"></text></g><g><title>check_impl_item_well_formed (36,652,929 samples, 0.45%)</title><rect x="26.2366%" y="101" width="0.4458%" height="15" fill="rgb(254,191,54)"/><text x="26.4866%" y="111.50"></text></g><g><title>check_item_well_formed (20,602,118 samples, 0.25%)</title><rect x="26.6824%" y="101" width="0.2506%" height="15" fill="rgb(241,83,37)"/><text x="26.9324%" y="111.50"></text></g><g><title>analysis (909,761,650 samples, 11.06%)</title><rect x="15.8874%" y="149" width="11.0646%" height="15" fill="rgb(233,36,39)"/><text x="16.1374%" y="159.50">analysis</text></g><g><title>type_check_crate (498,371,106 samples, 6.06%)</title><rect x="20.8908%" y="133" width="6.0612%" height="15" fill="rgb(226,3,54)"/><text x="21.1408%" y="143.50">type_che..</text></g><g><title>wf_checking (61,200,292 samples, 0.74%)</title><rect x="26.2077%" y="117" width="0.7443%" height="15" fill="rgb(245,192,40)"/><text x="26.4577%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (15,253,753 samples, 0.19%)</title><rect x="35.1528%" y="117" width="0.1855%" height="15" fill="rgb(238,167,29)"/><text x="35.4028%" y="127.50"></text></g><g><title>const_caller_location (9,788,588 samples, 0.12%)</title><rect x="35.3384%" y="117" width="0.1190%" height="15" fill="rgb(232,182,51)"/><text x="35.5884%" y="127.50"></text></g><g><title>param_env (19,614,006 samples, 0.24%)</title><rect x="35.9955%" y="101" width="0.2385%" height="15" fill="rgb(231,60,39)"/><text x="36.2455%" y="111.50"></text></g><g><title>fn_abi_of_instance (69,836,301 samples, 0.85%)</title><rect x="35.4596%" y="117" width="0.8494%" height="15" fill="rgb(208,69,12)"/><text x="35.7096%" y="127.50"></text></g><g><title>layout_of (10,936,940 samples, 0.13%)</title><rect x="36.3559%" y="117" width="0.1330%" height="15" fill="rgb(235,93,37)"/><text x="36.6059%" y="127.50"></text></g><g><title>codegen_module (787,363,125 samples, 9.58%)</title><rect x="26.9983%" y="133" width="9.5760%" height="15" fill="rgb(213,116,39)"/><text x="27.2483%" y="143.50">codegen_module</text></g><g><title>codegen_crate (791,249,514 samples, 9.62%)</title><rect x="26.9521%" y="149" width="9.6232%" height="15" fill="rgb(222,207,29)"/><text x="27.2021%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (3,569,981,652 samples, 43.42%)</title><rect x="36.5788%" y="133" width="43.4183%" height="15" fill="rgb(206,96,30)"/><text x="36.8288%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (3,359,557,994 samples, 40.86%)</title><rect x="39.1380%" y="117" width="40.8591%" height="15" fill="rgb(218,138,4)"/><text x="39.3880%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (4,136,527,780 samples, 50.31%)</title><rect x="36.5753%" y="149" width="50.3087%" height="15" fill="rgb(250,191,14)"/><text x="36.8253%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (566,263,484 samples, 6.89%)</title><rect x="79.9971%" y="133" width="6.8869%" height="15" fill="rgb(239,60,40)"/><text x="80.2471%" y="143.50">LLVM_modu..</text></g><g><title>macro_expand_crate (100,826,865 samples, 1.23%)</title><rect x="86.9205%" y="133" width="1.2263%" height="15" fill="rgb(206,27,48)"/><text x="87.1705%" y="143.50"></text></g><g><title>expand_crate (100,813,455 samples, 1.23%)</title><rect x="86.9207%" y="117" width="1.2261%" height="15" fill="rgb(225,35,8)"/><text x="87.1707%" y="127.50"></text></g><g><title>late_resolve_crate (16,558,568 samples, 0.20%)</title><rect x="88.1625%" y="117" width="0.2014%" height="15" fill="rgb(250,213,24)"/><text x="88.4125%" y="127.50"></text></g><g><title>configure_and_expand (124,046,861 samples, 1.51%)</title><rect x="86.8840%" y="149" width="1.5087%" height="15" fill="rgb(247,123,22)"/><text x="87.1340%" y="159.50"></text></g><g><title>resolve_crate (20,122,794 samples, 0.24%)</title><rect x="88.1480%" y="133" width="0.2447%" height="15" fill="rgb(231,138,38)"/><text x="88.3980%" y="143.50"></text></g><g><title>free_global_ctxt (53,360,393 samples, 0.65%)</title><rect x="88.4921%" y="149" width="0.6490%" height="15" fill="rgb(231,145,46)"/><text x="88.7421%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (14,992,427 samples, 0.18%)</title><rect x="90.3707%" y="53" width="0.1823%" height="15" fill="rgb(251,118,11)"/><text x="90.6207%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (39,119,892 samples, 0.48%)</title><rect x="90.5531%" y="53" width="0.4758%" height="15" fill="rgb(217,147,25)"/><text x="90.8031%" y="63.50"></text></g><g><title>optimized_mir (93,372,202 samples, 1.14%)</title><rect x="89.9301%" y="69" width="1.1356%" height="15" fill="rgb(247,81,37)"/><text x="90.1801%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (29,742,283 samples, 0.36%)</title><rect x="91.1960%" y="53" width="0.3617%" height="15" fill="rgb(209,12,38)"/><text x="91.4460%" y="63.50"></text></g><g><title>resolve_instance (51,947,536 samples, 0.63%)</title><rect x="91.0657%" y="69" width="0.6318%" height="15" fill="rgb(227,1,9)"/><text x="91.3157%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (211,679,022 samples, 2.57%)</title><rect x="89.3403%" y="85" width="2.5745%" height="15" fill="rgb(248,47,43)"/><text x="89.5903%" y="95.50">mo..</text></g><g><title>monomorphization_collector (212,401,769 samples, 2.58%)</title><rect x="89.3402%" y="101" width="2.5832%" height="15" fill="rgb(221,10,30)"/><text x="89.5902%" y="111.50">mo..</text></g><g><title>assert_symbols_are_distinct (23,844,452 samples, 0.29%)</title><rect x="91.9237%" y="85" width="0.2900%" height="15" fill="rgb(210,229,1)"/><text x="92.1737%" y="95.50"></text></g><g><title>symbol_name (20,928,212 samples, 0.25%)</title><rect x="91.9592%" y="69" width="0.2545%" height="15" fill="rgb(222,148,37)"/><text x="92.2092%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (246,814,239 samples, 3.00%)</title><rect x="89.3383%" y="117" width="3.0018%" height="15" fill="rgb(234,67,33)"/><text x="89.5883%" y="127.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (34,256,958 samples, 0.42%)</title><rect x="91.9235%" y="101" width="0.4166%" height="15" fill="rgb(247,98,35)"/><text x="92.1735%" y="111.50"></text></g><g><title>cgu_partitioning (10,392,446 samples, 0.13%)</title><rect x="92.2137%" y="85" width="0.1264%" height="15" fill="rgb(247,138,52)"/><text x="92.4637%" y="95.50"></text></g><g><title>exported_symbols (249,205,403 samples, 3.03%)</title><rect x="89.3234%" y="133" width="3.0309%" height="15" fill="rgb(213,79,30)"/><text x="89.5734%" y="143.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (20,460,443 samples, 0.25%)</title><rect x="92.6133%" y="117" width="0.2488%" height="15" fill="rgb(246,177,23)"/><text x="92.8633%" y="127.50"></text></g><g><title>optimized_mir (41,782,629 samples, 0.51%)</title><rect x="92.3627%" y="133" width="0.5082%" height="15" fill="rgb(230,62,27)"/><text x="92.6127%" y="143.50"></text></g><g><title>generate_crate_metadata (307,274,013 samples, 3.74%)</title><rect x="89.1411%" y="149" width="3.7371%" height="15" fill="rgb(216,154,8)"/><text x="89.3911%" y="159.50">gene..</text></g><g><title>hir_lowering (37,342,880 samples, 0.45%)</title><rect x="92.8782%" y="149" width="0.4542%" height="15" fill="rgb(244,35,45)"/><text x="93.1282%" y="159.50"></text></g><g><title>finish_ongoing_codegen (522,289,150 samples, 6.35%)</title><rect x="93.3327%" y="133" width="6.3521%" height="15" fill="rgb(251,115,12)"/><text x="93.5827%" y="143.50">finish_o..</text></g><g><title>link_crate (15,688,160 samples, 0.19%)</title><rect x="99.6848%" y="133" width="0.1908%" height="15" fill="rgb(240,54,50)"/><text x="99.9348%" y="143.50"></text></g><g><title>link_binary (15,398,757 samples, 0.19%)</title><rect x="99.6883%" y="117" width="0.1873%" height="15" fill="rgb(233,84,52)"/><text x="99.9383%" y="127.50"></text></g><g><title>link_rlib (13,020,003 samples, 0.16%)</title><rect x="99.7173%" y="101" width="0.1584%" height="15" fill="rgb(207,117,47)"/><text x="99.9673%" y="111.50"></text></g><g><title>link (538,017,450 samples, 6.54%)</title><rect x="93.3323%" y="149" width="6.5434%" height="15" fill="rgb(249,43,39)"/><text x="93.5823%" y="159.50">link</text></g><g><title>all (8,222,292,628 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(209,38,44)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (8,222,292,628 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>