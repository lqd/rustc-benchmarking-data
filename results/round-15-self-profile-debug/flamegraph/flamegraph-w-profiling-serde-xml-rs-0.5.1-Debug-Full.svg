<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (32,328,851 samples, 6.10%)</title><rect x="0.1546%" y="197" width="6.0994%" height="15" fill="rgb(227,0,7)"/><text x="0.4046%" y="207.50">LLVM_pas..</text></g><g><title>param_env (544,767 samples, 0.10%)</title><rect x="15.6680%" y="117" width="0.1028%" height="15" fill="rgb(217,0,24)"/><text x="15.9180%" y="127.50"></text></g><g><title>codegen_fn_attrs (634,707 samples, 0.12%)</title><rect x="16.0342%" y="101" width="0.1197%" height="15" fill="rgb(221,193,54)"/><text x="16.2842%" y="111.50"></text></g><g><title>is_copy_raw (844,639 samples, 0.16%)</title><rect x="17.7958%" y="85" width="0.1594%" height="15" fill="rgb(248,212,6)"/><text x="18.0458%" y="95.50"></text></g><g><title>evaluate_obligation (660,627 samples, 0.12%)</title><rect x="17.8305%" y="69" width="0.1246%" height="15" fill="rgb(208,68,35)"/><text x="18.0805%" y="79.50"></text></g><g><title>adt_drop_tys (592,154 samples, 0.11%)</title><rect x="18.0525%" y="69" width="0.1117%" height="15" fill="rgb(232,128,0)"/><text x="18.3025%" y="79.50"></text></g><g><title>is_copy_raw (5,749,794 samples, 1.08%)</title><rect x="18.1642%" y="69" width="1.0848%" height="15" fill="rgb(207,160,47)"/><text x="18.4142%" y="79.50"></text></g><g><title>evaluate_obligation (4,921,524 samples, 0.93%)</title><rect x="18.3205%" y="53" width="0.9285%" height="15" fill="rgb(228,23,34)"/><text x="18.5705%" y="63.50"></text></g><g><title>needs_drop_raw (6,864,036 samples, 1.30%)</title><rect x="17.9555%" y="85" width="1.2950%" height="15" fill="rgb(218,30,26)"/><text x="18.2055%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (981,454 samples, 0.19%)</title><rect x="19.3495%" y="69" width="0.1852%" height="15" fill="rgb(220,122,19)"/><text x="19.5995%" y="79.50"></text></g><g><title>specialization_graph_of (1,919,801 samples, 0.36%)</title><rect x="19.5489%" y="69" width="0.3622%" height="15" fill="rgb(250,228,42)"/><text x="19.7989%" y="79.50"></text></g><g><title>impl_trait_ref (642,035 samples, 0.12%)</title><rect x="19.7900%" y="53" width="0.1211%" height="15" fill="rgb(240,193,28)"/><text x="20.0400%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (566,552 samples, 0.11%)</title><rect x="19.8042%" y="37" width="0.1069%" height="15" fill="rgb(216,20,37)"/><text x="20.0542%" y="47.50"></text></g><g><title>resolve_instance (3,622,653 samples, 0.68%)</title><rect x="19.2506%" y="85" width="0.6835%" height="15" fill="rgb(206,188,39)"/><text x="19.5006%" y="95.50"></text></g><g><title>thir_body (2,969,290 samples, 0.56%)</title><rect x="19.9483%" y="85" width="0.5602%" height="15" fill="rgb(217,207,13)"/><text x="20.1983%" y="95.50"></text></g><g><title>mir_const (28,266,540 samples, 5.33%)</title><rect x="15.2087%" y="133" width="5.3330%" height="15" fill="rgb(231,73,38)"/><text x="15.4587%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (25,287,733 samples, 4.77%)</title><rect x="15.7707%" y="117" width="4.7710%" height="15" fill="rgb(225,20,46)"/><text x="16.0207%" y="127.50">unsafe..</text></g><g><title>mir_built (23,256,489 samples, 4.39%)</title><rect x="16.1540%" y="101" width="4.3878%" height="15" fill="rgb(210,31,41)"/><text x="16.4040%" y="111.50">mir_b..</text></g><g><title>mir_promoted (31,118,395 samples, 5.87%)</title><rect x="14.6922%" y="149" width="5.8710%" height="15" fill="rgb(221,200,47)"/><text x="14.9422%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (2,224,183 samples, 0.42%)</title><rect x="20.5633%" y="149" width="0.4196%" height="15" fill="rgb(226,26,5)"/><text x="20.8133%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,637,479 samples, 0.69%)</title><rect x="20.9829%" y="149" width="0.6863%" height="15" fill="rgb(249,33,26)"/><text x="21.2329%" y="159.50"></text></g><g><title>normalize_projection_ty (2,160,060 samples, 0.41%)</title><rect x="21.2617%" y="133" width="0.4075%" height="15" fill="rgb(235,183,28)"/><text x="21.5117%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,741,568 samples, 0.33%)</title><rect x="21.6692%" y="149" width="0.3286%" height="15" fill="rgb(221,5,38)"/><text x="21.9192%" y="159.50"></text></g><g><title>normalize_projection_ty (1,120,160 samples, 0.21%)</title><rect x="21.7864%" y="133" width="0.2113%" height="15" fill="rgb(247,18,42)"/><text x="22.0364%" y="143.50"></text></g><g><title>type_op_normalize_ty (885,862 samples, 0.17%)</title><rect x="21.9978%" y="149" width="0.1671%" height="15" fill="rgb(241,131,45)"/><text x="22.2478%" y="159.50"></text></g><g><title>type_op_prove_predicate (11,574,007 samples, 2.18%)</title><rect x="22.1649%" y="149" width="2.1836%" height="15" fill="rgb(249,31,29)"/><text x="22.4149%" y="159.50">t..</text></g><g><title>evaluate_obligation (898,160 samples, 0.17%)</title><rect x="24.1791%" y="133" width="0.1695%" height="15" fill="rgb(225,111,53)"/><text x="24.4291%" y="143.50"></text></g><g><title>MIR_borrow_checking (95,308,816 samples, 17.98%)</title><rect x="6.3704%" y="181" width="17.9817%" height="15" fill="rgb(238,160,17)"/><text x="6.6204%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (94,993,834 samples, 17.92%)</title><rect x="6.4298%" y="165" width="17.9223%" height="15" fill="rgb(214,148,48)"/><text x="6.6798%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (647,315 samples, 0.12%)</title><rect x="24.6302%" y="117" width="0.1221%" height="15" fill="rgb(232,36,49)"/><text x="24.8802%" y="127.50"></text></g><g><title>should_inherit_track_caller (878,677 samples, 0.17%)</title><rect x="24.5895%" y="133" width="0.1658%" height="15" fill="rgb(209,103,24)"/><text x="24.8395%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,105,239 samples, 0.21%)</title><rect x="24.5505%" y="149" width="0.2085%" height="15" fill="rgb(229,88,8)"/><text x="24.8005%" y="159.50"></text></g><g><title>check_mod_attrs (1,646,767 samples, 0.31%)</title><rect x="24.4483%" y="165" width="0.3107%" height="15" fill="rgb(213,181,19)"/><text x="24.6983%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (757,830 samples, 0.14%)</title><rect x="24.8439%" y="165" width="0.1430%" height="15" fill="rgb(254,191,54)"/><text x="25.0939%" y="175.50"></text></g><g><title>misc_checking_1 (2,965,491 samples, 0.56%)</title><rect x="24.4420%" y="181" width="0.5595%" height="15" fill="rgb(241,83,37)"/><text x="24.6920%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,500,976 samples, 0.28%)</title><rect x="25.0018%" y="165" width="0.2832%" height="15" fill="rgb(233,36,39)"/><text x="25.2518%" y="175.50"></text></g><g><title>check_mod_liveness (1,288,572 samples, 0.24%)</title><rect x="25.0419%" y="149" width="0.2431%" height="15" fill="rgb(226,3,54)"/><text x="25.2919%" y="159.50"></text></g><g><title>misc_checking_2 (3,378,186 samples, 0.64%)</title><rect x="25.0014%" y="181" width="0.6374%" height="15" fill="rgb(245,192,40)"/><text x="25.2514%" y="191.50"></text></g><g><title>match_checking (1,875,380 samples, 0.35%)</title><rect x="25.2850%" y="165" width="0.3538%" height="15" fill="rgb(238,167,29)"/><text x="25.5350%" y="175.50"></text></g><g><title>check_match (1,798,159 samples, 0.34%)</title><rect x="25.2995%" y="149" width="0.3393%" height="15" fill="rgb(232,182,51)"/><text x="25.5495%" y="159.50"></text></g><g><title>death_checking (835,519 samples, 0.16%)</title><rect x="25.7369%" y="165" width="0.1576%" height="15" fill="rgb(231,60,39)"/><text x="25.9869%" y="175.50"></text></g><g><title>param_env (725,179 samples, 0.14%)</title><rect x="26.1471%" y="133" width="0.1368%" height="15" fill="rgb(208,69,12)"/><text x="26.3971%" y="143.50"></text></g><g><title>impl_parent (558,420 samples, 0.11%)</title><rect x="26.5227%" y="101" width="0.1054%" height="15" fill="rgb(235,93,37)"/><text x="26.7727%" y="111.50"></text></g><g><title>specialization_graph_of (2,789,059 samples, 0.53%)</title><rect x="26.2973%" y="117" width="0.5262%" height="15" fill="rgb(213,116,39)"/><text x="26.5473%" y="127.50"></text></g><g><title>impl_trait_ref (1,036,190 samples, 0.20%)</title><rect x="26.6280%" y="101" width="0.1955%" height="15" fill="rgb(222,207,29)"/><text x="26.8780%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (805,969 samples, 0.15%)</title><rect x="26.6715%" y="85" width="0.1521%" height="15" fill="rgb(206,96,30)"/><text x="26.9215%" y="95.50"></text></g><g><title>resolve_instance (2,863,200 samples, 0.54%)</title><rect x="26.2839%" y="133" width="0.5402%" height="15" fill="rgb(218,138,4)"/><text x="26.5339%" y="143.50"></text></g><g><title>crate_lints (6,123,935 samples, 1.16%)</title><rect x="25.8950%" y="149" width="1.1554%" height="15" fill="rgb(250,191,14)"/><text x="26.1450%" y="159.50"></text></g><g><title>type_of (1,179,134 samples, 0.22%)</title><rect x="26.8279%" y="133" width="0.2225%" height="15" fill="rgb(239,60,40)"/><text x="27.0779%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (933,389 samples, 0.18%)</title><rect x="26.8743%" y="117" width="0.1761%" height="15" fill="rgb(206,27,48)"/><text x="27.1243%" y="127.50"></text></g><g><title>lint_checking (7,722,582 samples, 1.46%)</title><rect x="25.8946%" y="165" width="1.4570%" height="15" fill="rgb(225,35,8)"/><text x="26.1446%" y="175.50"></text></g><g><title>module_lints (1,596,597 samples, 0.30%)</title><rect x="27.0504%" y="149" width="0.3012%" height="15" fill="rgb(250,213,24)"/><text x="27.3004%" y="159.50"></text></g><g><title>lint_mod (1,586,107 samples, 0.30%)</title><rect x="27.0523%" y="133" width="0.2992%" height="15" fill="rgb(247,123,22)"/><text x="27.3023%" y="143.50"></text></g><g><title>privacy_access_levels (743,048 samples, 0.14%)</title><rect x="27.3516%" y="165" width="0.1402%" height="15" fill="rgb(231,138,38)"/><text x="27.6016%" y="175.50"></text></g><g><title>privacy_checking_modules (2,716,509 samples, 0.51%)</title><rect x="27.4918%" y="165" width="0.5125%" height="15" fill="rgb(231,145,46)"/><text x="27.7418%" y="175.50"></text></g><g><title>check_mod_privacy (2,708,779 samples, 0.51%)</title><rect x="27.4932%" y="149" width="0.5111%" height="15" fill="rgb(251,118,11)"/><text x="27.7432%" y="159.50"></text></g><g><title>misc_checking_3 (12,560,553 samples, 2.37%)</title><rect x="25.6388%" y="181" width="2.3698%" height="15" fill="rgb(217,147,25)"/><text x="25.8888%" y="191.50">mi..</text></g><g><title>impl_parent (1,126,629 samples, 0.21%)</title><rect x="28.4247%" y="117" width="0.2126%" height="15" fill="rgb(247,81,37)"/><text x="28.6747%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (732,723 samples, 0.14%)</title><rect x="28.4990%" y="101" width="0.1382%" height="15" fill="rgb(209,12,38)"/><text x="28.7490%" y="111.50"></text></g><g><title>impl_trait_ref (3,499,241 samples, 0.66%)</title><rect x="28.6372%" y="117" width="0.6602%" height="15" fill="rgb(227,1,9)"/><text x="28.8872%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,089,629 samples, 0.58%)</title><rect x="28.7145%" y="101" width="0.5829%" height="15" fill="rgb(248,47,43)"/><text x="28.9645%" y="111.50"></text></g><g><title>coherent_trait (7,134,945 samples, 1.35%)</title><rect x="28.0420%" y="149" width="1.3461%" height="15" fill="rgb(221,10,30)"/><text x="28.2920%" y="159.50"></text></g><g><title>specialization_graph_of (7,114,345 samples, 1.34%)</title><rect x="28.0459%" y="133" width="1.3422%" height="15" fill="rgb(210,229,1)"/><text x="28.2959%" y="143.50"></text></g><g><title>coherence_checking (7,230,086 samples, 1.36%)</title><rect x="28.0380%" y="165" width="1.3641%" height="15" fill="rgb(222,148,37)"/><text x="28.2880%" y="175.50"></text></g><g><title>associated_item (551,627 samples, 0.10%)</title><rect x="43.3229%" y="101" width="0.1041%" height="15" fill="rgb(234,67,33)"/><text x="43.5729%" y="111.50"></text></g><g><title>associated_items (866,821 samples, 0.16%)</title><rect x="43.2734%" y="117" width="0.1635%" height="15" fill="rgb(247,98,35)"/><text x="43.5234%" y="127.50"></text></g><g><title>adt_dtorck_constraint (595,767 samples, 0.11%)</title><rect x="43.9088%" y="37" width="0.1124%" height="15" fill="rgb(247,138,52)"/><text x="44.1588%" y="47.50"></text></g><g><title>adt_dtorck_constraint (667,937 samples, 0.13%)</title><rect x="43.8966%" y="53" width="0.1260%" height="15" fill="rgb(213,79,30)"/><text x="44.1466%" y="63.50"></text></g><g><title>adt_dtorck_constraint (707,297 samples, 0.13%)</title><rect x="43.8903%" y="69" width="0.1334%" height="15" fill="rgb(246,177,23)"/><text x="44.1403%" y="79.50"></text></g><g><title>adt_dtorck_constraint (769,988 samples, 0.15%)</title><rect x="43.8808%" y="85" width="0.1453%" height="15" fill="rgb(230,62,27)"/><text x="44.1308%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,375,925 samples, 0.26%)</title><rect x="43.7731%" y="101" width="0.2596%" height="15" fill="rgb(216,154,8)"/><text x="44.0231%" y="111.50"></text></g><g><title>dropck_outlives (3,503,010 samples, 0.66%)</title><rect x="43.4691%" y="117" width="0.6609%" height="15" fill="rgb(244,35,45)"/><text x="43.7191%" y="127.50"></text></g><g><title>generics_of (1,033,911 samples, 0.20%)</title><rect x="45.4605%" y="101" width="0.1951%" height="15" fill="rgb(251,115,12)"/><text x="45.7105%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (836,500 samples, 0.16%)</title><rect x="45.4977%" y="85" width="0.1578%" height="15" fill="rgb(240,54,50)"/><text x="45.7477%" y="95.50"></text></g><g><title>impl_trait_ref (874,984 samples, 0.17%)</title><rect x="45.6705%" y="101" width="0.1651%" height="15" fill="rgb(233,84,52)"/><text x="45.9205%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (691,023 samples, 0.13%)</title><rect x="45.7052%" y="85" width="0.1304%" height="15" fill="rgb(207,117,47)"/><text x="45.9552%" y="95.50"></text></g><g><title>trait_impls_of (787,566 samples, 0.15%)</title><rect x="46.0162%" y="101" width="0.1486%" height="15" fill="rgb(249,43,39)"/><text x="46.2662%" y="111.50"></text></g><g><title>evaluate_obligation (10,794,721 samples, 2.04%)</title><rect x="44.1300%" y="117" width="2.0366%" height="15" fill="rgb(209,38,44)"/><text x="44.3800%" y="127.50">e..</text></g><g><title>method_autoderef_steps (1,085,484 samples, 0.20%)</title><rect x="46.4418%" y="117" width="0.2048%" height="15" fill="rgb(236,212,23)"/><text x="46.6918%" y="127.50"></text></g><g><title>predicates_of (726,458 samples, 0.14%)</title><rect x="46.6885%" y="117" width="0.1371%" height="15" fill="rgb(242,79,21)"/><text x="46.9385%" y="127.50"></text></g><g><title>evaluate_obligation (903,258 samples, 0.17%)</title><rect x="48.6314%" y="101" width="0.1704%" height="15" fill="rgb(211,96,35)"/><text x="48.8814%" y="111.50"></text></g><g><title>is_copy_raw (695,906 samples, 0.13%)</title><rect x="48.8099%" y="101" width="0.1313%" height="15" fill="rgb(253,215,40)"/><text x="49.0599%" y="111.50"></text></g><g><title>evaluate_obligation (601,465 samples, 0.11%)</title><rect x="48.8277%" y="85" width="0.1135%" height="15" fill="rgb(211,81,21)"/><text x="49.0777%" y="95.50"></text></g><g><title>typeck (11,095,358 samples, 2.09%)</title><rect x="46.8823%" y="117" width="2.0933%" height="15" fill="rgb(208,190,38)"/><text x="47.1323%" y="127.50">t..</text></g><g><title>item_bodies_checking (103,826,816 samples, 19.59%)</title><rect x="29.4139%" y="165" width="19.5888%" height="15" fill="rgb(235,213,38)"/><text x="29.6639%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (103,822,285 samples, 19.59%)</title><rect x="29.4148%" y="149" width="19.5879%" height="15" fill="rgb(237,122,38)"/><text x="29.6648%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (103,585,192 samples, 19.54%)</title><rect x="29.4595%" y="133" width="19.5432%" height="15" fill="rgb(244,218,35)"/><text x="29.7095%" y="143.50">typeck</text></g><g><title>evaluate_obligation (536,956 samples, 0.10%)</title><rect x="50.2351%" y="133" width="0.1013%" height="15" fill="rgb(240,68,47)"/><text x="50.4851%" y="143.50"></text></g><g><title>item_types_checking (7,836,753 samples, 1.48%)</title><rect x="49.0027%" y="165" width="1.4785%" height="15" fill="rgb(210,16,53)"/><text x="49.2527%" y="175.50"></text></g><g><title>check_mod_item_types (7,826,512 samples, 1.48%)</title><rect x="49.0046%" y="149" width="1.4766%" height="15" fill="rgb(235,124,12)"/><text x="49.2546%" y="159.50"></text></g><g><title>fn_sig (1,278,792 samples, 0.24%)</title><rect x="50.5927%" y="133" width="0.2413%" height="15" fill="rgb(224,169,11)"/><text x="50.8427%" y="143.50"></text></g><g><title>is_late_bound_map (1,245,281 samples, 0.23%)</title><rect x="50.8841%" y="117" width="0.2349%" height="15" fill="rgb(250,166,2)"/><text x="51.1341%" y="127.50"></text></g><g><title>resolve_lifetimes (1,212,251 samples, 0.23%)</title><rect x="50.8903%" y="101" width="0.2287%" height="15" fill="rgb(242,216,29)"/><text x="51.1403%" y="111.50"></text></g><g><title>generics_of (1,649,905 samples, 0.31%)</title><rect x="50.8339%" y="133" width="0.3113%" height="15" fill="rgb(230,116,27)"/><text x="51.0839%" y="143.50"></text></g><g><title>explicit_predicates_of (677,156 samples, 0.13%)</title><rect x="51.2110%" y="101" width="0.1278%" height="15" fill="rgb(228,99,48)"/><text x="51.4610%" y="111.50"></text></g><g><title>predicates_of (1,444,347 samples, 0.27%)</title><rect x="51.1565%" y="133" width="0.2725%" height="15" fill="rgb(253,11,6)"/><text x="51.4065%" y="143.50"></text></g><g><title>predicates_defined_on (1,336,156 samples, 0.25%)</title><rect x="51.1769%" y="117" width="0.2521%" height="15" fill="rgb(247,143,39)"/><text x="51.4269%" y="127.50"></text></g><g><title>type_collecting (5,299,787 samples, 1.00%)</title><rect x="50.4825%" y="165" width="0.9999%" height="15" fill="rgb(236,97,10)"/><text x="50.7325%" y="175.50"></text></g><g><title>collect_mod_item_types (5,280,607 samples, 1.00%)</title><rect x="50.4861%" y="149" width="0.9963%" height="15" fill="rgb(233,208,19)"/><text x="50.7361%" y="159.50"></text></g><g><title>evaluate_obligation (962,987 samples, 0.18%)</title><rect x="52.9830%" y="133" width="0.1817%" height="15" fill="rgb(216,164,2)"/><text x="53.2330%" y="143.50"></text></g><g><title>implied_outlives_bounds (701,329 samples, 0.13%)</title><rect x="53.1697%" y="133" width="0.1323%" height="15" fill="rgb(220,129,5)"/><text x="53.4197%" y="143.50"></text></g><g><title>param_env (1,131,858 samples, 0.21%)</title><rect x="53.3877%" y="133" width="0.2135%" height="15" fill="rgb(242,17,10)"/><text x="53.6377%" y="143.50"></text></g><g><title>region_scope_tree (980,762 samples, 0.19%)</title><rect x="53.6229%" y="133" width="0.1850%" height="15" fill="rgb(242,107,0)"/><text x="53.8729%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,926,139 samples, 2.25%)</title><rect x="51.5743%" y="149" width="2.2501%" height="15" fill="rgb(251,28,31)"/><text x="51.8243%" y="159.50">c..</text></g><g><title>check_item_well_formed (3,700,278 samples, 0.70%)</title><rect x="53.8244%" y="149" width="0.6981%" height="15" fill="rgb(233,223,10)"/><text x="54.0744%" y="159.50"></text></g><g><title>evaluate_obligation (555,635 samples, 0.10%)</title><rect x="54.5621%" y="133" width="0.1048%" height="15" fill="rgb(215,21,27)"/><text x="54.8121%" y="143.50"></text></g><g><title>analysis (256,691,870 samples, 48.43%)</title><rect x="6.2540%" y="197" width="48.4295%" height="15" fill="rgb(232,23,21)"/><text x="6.5040%" y="207.50">analysis</text></g><g><title>type_check_crate (141,385,683 samples, 26.67%)</title><rect x="28.0086%" y="181" width="26.6749%" height="15" fill="rgb(244,5,23)"/><text x="28.2586%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,953,969 samples, 3.20%)</title><rect x="51.4848%" y="165" width="3.1987%" height="15" fill="rgb(226,81,46)"/><text x="51.7348%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (853,389 samples, 0.16%)</title><rect x="54.5225%" y="149" width="0.1610%" height="15" fill="rgb(247,70,30)"/><text x="54.7725%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (676,436 samples, 0.13%)</title><rect x="59.3294%" y="165" width="0.1276%" height="15" fill="rgb(212,68,19)"/><text x="59.5794%" y="175.50"></text></g><g><title>param_env (782,210 samples, 0.15%)</title><rect x="59.7908%" y="149" width="0.1476%" height="15" fill="rgb(240,187,13)"/><text x="60.0408%" y="159.50"></text></g><g><title>fn_abi_of_instance (2,414,930 samples, 0.46%)</title><rect x="59.4837%" y="165" width="0.4556%" height="15" fill="rgb(223,113,26)"/><text x="59.7337%" y="175.50"></text></g><g><title>layout_of (573,147 samples, 0.11%)</title><rect x="60.0619%" y="117" width="0.1081%" height="15" fill="rgb(206,192,2)"/><text x="60.3119%" y="127.50"></text></g><g><title>layout_of (763,998 samples, 0.14%)</title><rect x="60.0377%" y="133" width="0.1441%" height="15" fill="rgb(241,108,4)"/><text x="60.2877%" y="143.50"></text></g><g><title>layout_of (1,155,214 samples, 0.22%)</title><rect x="60.0095%" y="149" width="0.2180%" height="15" fill="rgb(247,173,49)"/><text x="60.2595%" y="159.50"></text></g><g><title>layout_of (1,567,669 samples, 0.30%)</title><rect x="59.9542%" y="165" width="0.2958%" height="15" fill="rgb(224,114,35)"/><text x="60.2042%" y="175.50"></text></g><g><title>symbol_name (1,112,443 samples, 0.21%)</title><rect x="60.2500%" y="165" width="0.2099%" height="15" fill="rgb(245,159,27)"/><text x="60.5000%" y="175.50"></text></g><g><title>codegen_module (28,827,464 samples, 5.44%)</title><rect x="55.0837%" y="181" width="5.4388%" height="15" fill="rgb(245,172,44)"/><text x="55.3337%" y="191.50">codegen..</text></g><g><title>codegen_crate (31,032,098 samples, 5.85%)</title><rect x="54.6851%" y="197" width="5.8548%" height="15" fill="rgb(236,23,11)"/><text x="54.9351%" y="207.50">codegen..</text></g><g><title>LLVM_module_codegen (83,233,550 samples, 15.70%)</title><rect x="60.6689%" y="181" width="15.7035%" height="15" fill="rgb(205,117,38)"/><text x="60.9189%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (77,963,661 samples, 14.71%)</title><rect x="61.6631%" y="165" width="14.7092%" height="15" fill="rgb(237,72,25)"/><text x="61.9131%" y="175.50">LLVM_module_codegen_em..</text></g><g><title>codegen_module_optimize (87,255,541 samples, 16.46%)</title><rect x="60.5399%" y="197" width="16.4623%" height="15" fill="rgb(244,70,9)"/><text x="60.7899%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,338,345 samples, 0.63%)</title><rect x="76.3723%" y="181" width="0.6298%" height="15" fill="rgb(217,125,39)"/><text x="76.6223%" y="191.50"></text></g><g><title>metadata_load_macro (846,669 samples, 0.16%)</title><rect x="86.1347%" y="149" width="0.1597%" height="15" fill="rgb(235,36,10)"/><text x="86.3847%" y="159.50"></text></g><g><title>metadata_register_crate (7,996,034 samples, 1.51%)</title><rect x="86.2945%" y="149" width="1.5086%" height="15" fill="rgb(251,123,47)"/><text x="86.5445%" y="159.50"></text></g><g><title>metadata_register_crate (5,772,760 samples, 1.09%)</title><rect x="86.7139%" y="133" width="1.0891%" height="15" fill="rgb(221,13,13)"/><text x="86.9639%" y="143.50"></text></g><g><title>macro_expand_crate (57,293,035 samples, 10.81%)</title><rect x="77.1198%" y="181" width="10.8094%" height="15" fill="rgb(238,131,9)"/><text x="77.3698%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (57,269,984 samples, 10.81%)</title><rect x="77.1241%" y="165" width="10.8050%" height="15" fill="rgb(211,50,8)"/><text x="77.3741%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (668,046 samples, 0.13%)</title><rect x="87.8031%" y="149" width="0.1260%" height="15" fill="rgb(245,182,24)"/><text x="88.0531%" y="159.50"></text></g><g><title>late_resolve_crate (4,118,913 samples, 0.78%)</title><rect x="87.9915%" y="165" width="0.7771%" height="15" fill="rgb(242,14,37)"/><text x="88.2415%" y="175.50"></text></g><g><title>configure_and_expand (62,582,681 samples, 11.81%)</title><rect x="77.0022%" y="197" width="11.8073%" height="15" fill="rgb(246,228,12)"/><text x="77.2522%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (4,614,129 samples, 0.87%)</title><rect x="87.9390%" y="181" width="0.8705%" height="15" fill="rgb(213,55,15)"/><text x="88.1890%" y="191.50"></text></g><g><title>early_lint_checks (719,738 samples, 0.14%)</title><rect x="88.8787%" y="197" width="0.1358%" height="15" fill="rgb(209,9,3)"/><text x="89.1287%" y="207.50"></text></g><g><title>free_global_ctxt (6,452,848 samples, 1.22%)</title><rect x="89.0145%" y="197" width="1.2174%" height="15" fill="rgb(230,59,30)"/><text x="89.2645%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (824,968 samples, 0.16%)</title><rect x="91.4477%" y="101" width="0.1556%" height="15" fill="rgb(209,121,21)"/><text x="91.6977%" y="111.50"></text></g><g><title>optimized_mir (2,443,984 samples, 0.46%)</title><rect x="91.2242%" y="117" width="0.4611%" height="15" fill="rgb(220,109,13)"/><text x="91.4742%" y="127.50"></text></g><g><title>resolve_instance (777,927 samples, 0.15%)</title><rect x="91.6853%" y="117" width="0.1468%" height="15" fill="rgb(232,18,1)"/><text x="91.9353%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (1,093,041 samples, 0.21%)</title><rect x="91.8576%" y="117" width="0.2062%" height="15" fill="rgb(215,41,42)"/><text x="92.1076%" y="127.50"></text></g><g><title>upstream_monomorphizations (1,088,891 samples, 0.21%)</title><rect x="91.8584%" y="101" width="0.2054%" height="15" fill="rgb(224,123,36)"/><text x="92.1084%" y="111.50"></text></g><g><title>exported_symbols (893,190 samples, 0.17%)</title><rect x="91.8953%" y="85" width="0.1685%" height="15" fill="rgb(240,125,3)"/><text x="92.1453%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (887,650 samples, 0.17%)</title><rect x="91.8964%" y="69" width="0.1675%" height="15" fill="rgb(205,98,50)"/><text x="92.1464%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (5,987,542 samples, 1.13%)</title><rect x="91.0932%" y="133" width="1.1297%" height="15" fill="rgb(205,185,37)"/><text x="91.3432%" y="143.50"></text></g><g><title>vtable_entries (843,080 samples, 0.16%)</title><rect x="92.0638%" y="117" width="0.1591%" height="15" fill="rgb(238,207,15)"/><text x="92.3138%" y="127.50"></text></g><g><title>monomorphization_collector (6,037,483 samples, 1.14%)</title><rect x="91.0924%" y="149" width="1.1391%" height="15" fill="rgb(213,199,42)"/><text x="91.3424%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (6,693,480 samples, 1.26%)</title><rect x="91.0851%" y="165" width="1.2628%" height="15" fill="rgb(235,201,11)"/><text x="91.3351%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (617,136 samples, 0.12%)</title><rect x="92.2315%" y="149" width="0.1164%" height="15" fill="rgb(207,46,11)"/><text x="92.4815%" y="159.50"></text></g><g><title>exported_symbols (7,083,135 samples, 1.34%)</title><rect x="91.0762%" y="181" width="1.3364%" height="15" fill="rgb(241,35,35)"/><text x="91.3262%" y="191.50"></text></g><g><title>layout_of (1,951,463 samples, 0.37%)</title><rect x="94.1806%" y="165" width="0.3682%" height="15" fill="rgb(243,32,47)"/><text x="94.4306%" y="175.50"></text></g><g><title>is_copy_raw (1,277,647 samples, 0.24%)</title><rect x="97.0661%" y="133" width="0.2411%" height="15" fill="rgb(247,202,23)"/><text x="97.3161%" y="143.50"></text></g><g><title>evaluate_obligation (1,045,774 samples, 0.20%)</title><rect x="97.1098%" y="117" width="0.1973%" height="15" fill="rgb(219,102,11)"/><text x="97.3598%" y="127.50"></text></g><g><title>needs_drop_raw (1,426,537 samples, 0.27%)</title><rect x="97.0395%" y="149" width="0.2691%" height="15" fill="rgb(243,110,44)"/><text x="97.2895%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (14,900,769 samples, 2.81%)</title><rect x="94.5487%" y="165" width="2.8113%" height="15" fill="rgb(222,74,54)"/><text x="94.7987%" y="175.50">mi..</text></g><g><title>optimized_mir (26,291,418 samples, 4.96%)</title><rect x="92.4651%" y="181" width="4.9603%" height="15" fill="rgb(216,99,12)"/><text x="92.7151%" y="191.50">optimi..</text></g><g><title>promoted_mir (719,915 samples, 0.14%)</title><rect x="97.4255%" y="181" width="0.1358%" height="15" fill="rgb(226,22,26)"/><text x="97.6755%" y="191.50"></text></g><g><title>generate_crate_metadata (38,911,480 samples, 7.34%)</title><rect x="90.2320%" y="197" width="7.3413%" height="15" fill="rgb(217,163,10)"/><text x="90.4820%" y="207.50">generate_c..</text></g><g><title>hir_lowering (7,507,030 samples, 1.42%)</title><rect x="97.5733%" y="197" width="1.4163%" height="15" fill="rgb(213,25,53)"/><text x="97.8233%" y="207.50"></text></g><g><title>link_crate (2,253,844 samples, 0.43%)</title><rect x="98.9955%" y="181" width="0.4252%" height="15" fill="rgb(252,105,26)"/><text x="99.2455%" y="191.50"></text></g><g><title>link_binary (2,195,263 samples, 0.41%)</title><rect x="99.0066%" y="165" width="0.4142%" height="15" fill="rgb(220,39,43)"/><text x="99.2566%" y="175.50"></text></g><g><title>link_rlib (1,604,947 samples, 0.30%)</title><rect x="99.1180%" y="149" width="0.3028%" height="15" fill="rgb(229,68,48)"/><text x="99.3680%" y="159.50"></text></g><g><title>link (2,296,304 samples, 0.43%)</title><rect x="98.9896%" y="197" width="0.4332%" height="15" fill="rgb(252,8,32)"/><text x="99.2396%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,667,298 samples, 0.31%)</title><rect x="99.5643%" y="197" width="0.3146%" height="15" fill="rgb(223,20,43)"/><text x="99.8143%" y="207.50"></text></g><g><title>all (530,031,924 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (530,031,924 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (543,626 samples, 0.10%)</title><rect x="99.8974%" y="197" width="0.1026%" height="15" fill="rgb(249,185,26)"/><text x="100.1474%" y="207.50"></text></g></svg></svg>