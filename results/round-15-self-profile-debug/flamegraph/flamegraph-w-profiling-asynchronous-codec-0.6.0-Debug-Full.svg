<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (39,093,492 samples, 9.00%)</title><rect x="0.2027%" y="197" width="8.9973%" height="15" fill="rgb(227,0,7)"/><text x="0.4527%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (1,757,826 samples, 0.40%)</title><rect x="14.9850%" y="69" width="0.4046%" height="15" fill="rgb(217,0,24)"/><text x="15.2350%" y="79.50"></text></g><g><title>evaluate_obligation (1,487,205 samples, 0.34%)</title><rect x="15.0473%" y="53" width="0.3423%" height="15" fill="rgb(221,193,54)"/><text x="15.2973%" y="63.50"></text></g><g><title>needs_drop_raw (2,200,311 samples, 0.51%)</title><rect x="14.8835%" y="85" width="0.5064%" height="15" fill="rgb(248,212,6)"/><text x="15.1335%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,083,142 samples, 0.25%)</title><rect x="15.4764%" y="69" width="0.2493%" height="15" fill="rgb(208,68,35)"/><text x="15.7264%" y="79.50"></text></g><g><title>resolve_instance (1,663,328 samples, 0.38%)</title><rect x="15.3899%" y="85" width="0.3828%" height="15" fill="rgb(232,128,0)"/><text x="15.6399%" y="95.50"></text></g><g><title>thir_body (1,252,295 samples, 0.29%)</title><rect x="15.7812%" y="85" width="0.2882%" height="15" fill="rgb(207,160,47)"/><text x="16.0312%" y="95.50"></text></g><g><title>mir_const (11,442,795 samples, 2.63%)</title><rect x="13.4544%" y="133" width="2.6335%" height="15" fill="rgb(228,23,34)"/><text x="13.7044%" y="143.50">mi..</text></g><g><title>unsafety_check_result (10,010,748 samples, 2.30%)</title><rect x="13.7840%" y="117" width="2.3040%" height="15" fill="rgb(218,30,26)"/><text x="14.0340%" y="127.50">u..</text></g><g><title>mir_built (9,040,893 samples, 2.08%)</title><rect x="14.0072%" y="101" width="2.0808%" height="15" fill="rgb(220,122,19)"/><text x="14.2572%" y="111.50">m..</text></g><g><title>mir_promoted (12,700,854 samples, 2.92%)</title><rect x="13.2128%" y="149" width="2.9231%" height="15" fill="rgb(250,228,42)"/><text x="13.4628%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (909,158 samples, 0.21%)</title><rect x="16.1359%" y="149" width="0.2092%" height="15" fill="rgb(240,193,28)"/><text x="16.3859%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,519,844 samples, 0.35%)</title><rect x="16.3452%" y="149" width="0.3498%" height="15" fill="rgb(216,20,37)"/><text x="16.5952%" y="159.50"></text></g><g><title>normalize_projection_ty (1,032,640 samples, 0.24%)</title><rect x="16.4573%" y="133" width="0.2377%" height="15" fill="rgb(206,188,39)"/><text x="16.7073%" y="143.50"></text></g><g><title>type_op_normalize_ty (612,288 samples, 0.14%)</title><rect x="16.7270%" y="149" width="0.1409%" height="15" fill="rgb(217,207,13)"/><text x="16.9770%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,580,837 samples, 1.05%)</title><rect x="16.8679%" y="149" width="1.0543%" height="15" fill="rgb(231,73,38)"/><text x="17.1179%" y="159.50"></text></g><g><title>MIR_borrow_checking (37,484,886 samples, 8.63%)</title><rect x="9.2965%" y="181" width="8.6271%" height="15" fill="rgb(225,20,46)"/><text x="9.5465%" y="191.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (37,274,305 samples, 8.58%)</title><rect x="9.3450%" y="165" width="8.5786%" height="15" fill="rgb(210,31,41)"/><text x="9.5950%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (452,523 samples, 0.10%)</title><rect x="18.1284%" y="149" width="0.1041%" height="15" fill="rgb(221,200,47)"/><text x="18.3784%" y="159.50"></text></g><g><title>check_mod_attrs (805,520 samples, 0.19%)</title><rect x="18.0472%" y="165" width="0.1854%" height="15" fill="rgb(226,26,5)"/><text x="18.2972%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (649,704 samples, 0.15%)</title><rect x="18.3074%" y="165" width="0.1495%" height="15" fill="rgb(249,33,26)"/><text x="18.5574%" y="175.50"></text></g><g><title>misc_checking_1 (1,918,899 samples, 0.44%)</title><rect x="18.0383%" y="181" width="0.4416%" height="15" fill="rgb(235,183,28)"/><text x="18.2883%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (666,386 samples, 0.15%)</title><rect x="18.4803%" y="165" width="0.1534%" height="15" fill="rgb(221,5,38)"/><text x="18.7303%" y="175.50"></text></g><g><title>check_mod_liveness (532,916 samples, 0.12%)</title><rect x="18.5111%" y="149" width="0.1226%" height="15" fill="rgb(247,18,42)"/><text x="18.7611%" y="159.50"></text></g><g><title>misc_checking_2 (1,304,533 samples, 0.30%)</title><rect x="18.4799%" y="181" width="0.3002%" height="15" fill="rgb(241,131,45)"/><text x="18.7299%" y="191.50"></text></g><g><title>match_checking (636,397 samples, 0.15%)</title><rect x="18.6337%" y="165" width="0.1465%" height="15" fill="rgb(249,31,29)"/><text x="18.8837%" y="175.50"></text></g><g><title>check_match (584,407 samples, 0.13%)</title><rect x="18.6457%" y="149" width="0.1345%" height="15" fill="rgb(225,111,53)"/><text x="18.8957%" y="159.50"></text></g><g><title>check_private_in_public (438,204 samples, 0.10%)</title><rect x="18.7825%" y="165" width="0.1009%" height="15" fill="rgb(238,160,17)"/><text x="19.0325%" y="175.50"></text></g><g><title>death_checking (1,154,372 samples, 0.27%)</title><rect x="18.8834%" y="165" width="0.2657%" height="15" fill="rgb(214,148,48)"/><text x="19.1334%" y="175.50"></text></g><g><title>item_attrs (437,865 samples, 0.10%)</title><rect x="19.0483%" y="149" width="0.1008%" height="15" fill="rgb(232,36,49)"/><text x="19.2983%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (436,915 samples, 0.10%)</title><rect x="19.0485%" y="133" width="0.1006%" height="15" fill="rgb(209,103,24)"/><text x="19.2985%" y="143.50"></text></g><g><title>param_env (732,549 samples, 0.17%)</title><rect x="19.4958%" y="133" width="0.1686%" height="15" fill="rgb(229,88,8)"/><text x="19.7458%" y="143.50"></text></g><g><title>crate_lints (3,530,956 samples, 0.81%)</title><rect x="19.1495%" y="149" width="0.8126%" height="15" fill="rgb(213,181,19)"/><text x="19.3995%" y="159.50"></text></g><g><title>type_of (1,285,155 samples, 0.30%)</title><rect x="19.6664%" y="133" width="0.2958%" height="15" fill="rgb(254,191,54)"/><text x="19.9164%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (996,262 samples, 0.23%)</title><rect x="19.7329%" y="117" width="0.2293%" height="15" fill="rgb(241,83,37)"/><text x="19.9829%" y="127.50"></text></g><g><title>lint_checking (4,170,922 samples, 0.96%)</title><rect x="19.1491%" y="165" width="0.9599%" height="15" fill="rgb(233,36,39)"/><text x="19.3991%" y="175.50"></text></g><g><title>module_lints (638,026 samples, 0.15%)</title><rect x="19.9622%" y="149" width="0.1468%" height="15" fill="rgb(226,3,54)"/><text x="20.2122%" y="159.50"></text></g><g><title>lint_mod (627,166 samples, 0.14%)</title><rect x="19.9647%" y="133" width="0.1443%" height="15" fill="rgb(245,192,40)"/><text x="20.2147%" y="143.50"></text></g><g><title>privacy_checking_modules (1,629,076 samples, 0.37%)</title><rect x="20.2078%" y="165" width="0.3749%" height="15" fill="rgb(238,167,29)"/><text x="20.4578%" y="175.50"></text></g><g><title>check_mod_privacy (1,620,506 samples, 0.37%)</title><rect x="20.2097%" y="149" width="0.3730%" height="15" fill="rgb(232,182,51)"/><text x="20.4597%" y="159.50"></text></g><g><title>misc_checking_3 (7,860,808 samples, 1.81%)</title><rect x="18.7802%" y="181" width="1.8092%" height="15" fill="rgb(231,60,39)"/><text x="19.0302%" y="191.50">m..</text></g><g><title>impl_parent (1,224,951 samples, 0.28%)</title><rect x="21.1316%" y="117" width="0.2819%" height="15" fill="rgb(208,69,12)"/><text x="21.3816%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (826,359 samples, 0.19%)</title><rect x="21.2234%" y="101" width="0.1902%" height="15" fill="rgb(235,93,37)"/><text x="21.4734%" y="111.50"></text></g><g><title>impl_trait_ref (3,803,454 samples, 0.88%)</title><rect x="21.4135%" y="117" width="0.8754%" height="15" fill="rgb(213,116,39)"/><text x="21.6635%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,398,116 samples, 0.78%)</title><rect x="21.5068%" y="101" width="0.7821%" height="15" fill="rgb(222,207,29)"/><text x="21.7568%" y="111.50"></text></g><g><title>coherent_trait (7,724,097 samples, 1.78%)</title><rect x="20.6260%" y="149" width="1.7777%" height="15" fill="rgb(206,96,30)"/><text x="20.8760%" y="159.50">c..</text></g><g><title>specialization_graph_of (7,696,777 samples, 1.77%)</title><rect x="20.6323%" y="133" width="1.7714%" height="15" fill="rgb(218,138,4)"/><text x="20.8823%" y="143.50">s..</text></g><g><title>trait_impls_of (455,174 samples, 0.10%)</title><rect x="22.2989%" y="117" width="0.1048%" height="15" fill="rgb(250,191,14)"/><text x="22.5489%" y="127.50"></text></g><g><title>coherence_checking (8,020,100 samples, 1.85%)</title><rect x="20.6214%" y="165" width="1.8458%" height="15" fill="rgb(239,60,40)"/><text x="20.8714%" y="175.50">c..</text></g><g><title>associated_item (765,290 samples, 0.18%)</title><rect x="29.3016%" y="101" width="0.1761%" height="15" fill="rgb(206,27,48)"/><text x="29.5516%" y="111.50"></text></g><g><title>associated_items (999,667 samples, 0.23%)</title><rect x="29.2549%" y="117" width="0.2301%" height="15" fill="rgb(225,35,8)"/><text x="29.5049%" y="127.50"></text></g><g><title>dropck_outlives (892,034 samples, 0.21%)</title><rect x="29.5085%" y="117" width="0.2053%" height="15" fill="rgb(250,213,24)"/><text x="29.7585%" y="127.50"></text></g><g><title>mir_borrowck (515,584 samples, 0.12%)</title><rect x="29.8650%" y="53" width="0.1187%" height="15" fill="rgb(247,123,22)"/><text x="30.1150%" y="63.50"></text></g><g><title>mir_for_ctfe (725,527 samples, 0.17%)</title><rect x="29.8199%" y="85" width="0.1670%" height="15" fill="rgb(231,138,38)"/><text x="30.0699%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (667,486 samples, 0.15%)</title><rect x="29.8333%" y="69" width="0.1536%" height="15" fill="rgb(231,145,46)"/><text x="30.0833%" y="79.50"></text></g><g><title>eval_to_const_value_raw (543,795 samples, 0.13%)</title><rect x="29.9903%" y="69" width="0.1252%" height="15" fill="rgb(251,118,11)"/><text x="30.2403%" y="79.50"></text></g><g><title>eval_to_const_value_raw (541,545 samples, 0.12%)</title><rect x="29.9908%" y="53" width="0.1246%" height="15" fill="rgb(217,147,25)"/><text x="30.2408%" y="63.50"></text></g><g><title>eval_to_allocation_raw (533,575 samples, 0.12%)</title><rect x="29.9927%" y="37" width="0.1228%" height="15" fill="rgb(247,81,37)"/><text x="30.2427%" y="47.50"></text></g><g><title>eval_to_allocation_raw (1,727,527 samples, 0.40%)</title><rect x="29.7184%" y="101" width="0.3976%" height="15" fill="rgb(209,12,38)"/><text x="29.9684%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (560,295 samples, 0.13%)</title><rect x="29.9871%" y="85" width="0.1290%" height="15" fill="rgb(227,1,9)"/><text x="30.2371%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,782,037 samples, 0.41%)</title><rect x="29.7138%" y="117" width="0.4101%" height="15" fill="rgb(248,47,43)"/><text x="29.9638%" y="127.50"></text></g><g><title>trait_impls_of (518,886 samples, 0.12%)</title><rect x="30.6918%" y="101" width="0.1194%" height="15" fill="rgb(221,10,30)"/><text x="30.9418%" y="111.50"></text></g><g><title>evaluate_obligation (2,988,581 samples, 0.69%)</title><rect x="30.1239%" y="117" width="0.6878%" height="15" fill="rgb(210,229,1)"/><text x="30.3739%" y="127.50"></text></g><g><title>evaluate_obligation (721,956 samples, 0.17%)</title><rect x="31.2819%" y="101" width="0.1662%" height="15" fill="rgb(222,148,37)"/><text x="31.5319%" y="111.50"></text></g><g><title>method_autoderef_steps (2,107,579 samples, 0.49%)</title><rect x="30.9670%" y="117" width="0.4851%" height="15" fill="rgb(234,67,33)"/><text x="31.2170%" y="127.50"></text></g><g><title>evaluate_obligation (1,071,779 samples, 0.25%)</title><rect x="32.0858%" y="101" width="0.2467%" height="15" fill="rgb(247,98,35)"/><text x="32.3358%" y="111.50"></text></g><g><title>typeck (3,366,694 samples, 0.77%)</title><rect x="31.6483%" y="117" width="0.7748%" height="15" fill="rgb(247,138,52)"/><text x="31.8983%" y="127.50"></text></g><g><title>item_bodies_checking (43,251,233 samples, 9.95%)</title><rect x="22.4842%" y="165" width="9.9542%" height="15" fill="rgb(213,79,30)"/><text x="22.7342%" y="175.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (43,247,203 samples, 9.95%)</title><rect x="22.4851%" y="149" width="9.9533%" height="15" fill="rgb(246,177,23)"/><text x="22.7351%" y="159.50">typeck_item_bo..</text></g><g><title>typeck (43,095,632 samples, 9.92%)</title><rect x="22.5200%" y="133" width="9.9184%" height="15" fill="rgb(230,62,27)"/><text x="22.7700%" y="143.50">typeck</text></g><g><title>evaluate_obligation (1,505,914 samples, 0.35%)</title><rect x="33.4687%" y="117" width="0.3466%" height="15" fill="rgb(216,154,8)"/><text x="33.7187%" y="127.50"></text></g><g><title>item_types_checking (6,133,032 samples, 1.41%)</title><rect x="32.4384%" y="165" width="1.4115%" height="15" fill="rgb(244,35,45)"/><text x="32.6884%" y="175.50"></text></g><g><title>check_mod_item_types (6,120,482 samples, 1.41%)</title><rect x="32.4413%" y="149" width="1.4086%" height="15" fill="rgb(251,115,12)"/><text x="32.6913%" y="159.50"></text></g><g><title>typeck (2,198,632 samples, 0.51%)</title><rect x="33.3439%" y="133" width="0.5060%" height="15" fill="rgb(240,54,50)"/><text x="33.5939%" y="143.50"></text></g><g><title>fn_sig (676,215 samples, 0.16%)</title><rect x="33.9827%" y="133" width="0.1556%" height="15" fill="rgb(233,84,52)"/><text x="34.2327%" y="143.50"></text></g><g><title>generics_of (592,287 samples, 0.14%)</title><rect x="34.1384%" y="133" width="0.1363%" height="15" fill="rgb(207,117,47)"/><text x="34.3884%" y="143.50"></text></g><g><title>late_bound_vars_map (847,000 samples, 0.19%)</title><rect x="34.5184%" y="85" width="0.1949%" height="15" fill="rgb(249,43,39)"/><text x="34.7684%" y="95.50"></text></g><g><title>resolve_lifetimes (823,040 samples, 0.19%)</title><rect x="34.5239%" y="69" width="0.1894%" height="15" fill="rgb(209,38,44)"/><text x="34.7739%" y="79.50"></text></g><g><title>lint_levels (457,545 samples, 0.11%)</title><rect x="34.6081%" y="53" width="0.1053%" height="15" fill="rgb(236,212,23)"/><text x="34.8581%" y="63.50"></text></g><g><title>explicit_predicates_of (1,332,221 samples, 0.31%)</title><rect x="34.4176%" y="101" width="0.3066%" height="15" fill="rgb(242,79,21)"/><text x="34.6676%" y="111.50"></text></g><g><title>predicates_of (2,160,449 samples, 0.50%)</title><rect x="34.3469%" y="133" width="0.4972%" height="15" fill="rgb(211,96,35)"/><text x="34.5969%" y="143.50"></text></g><g><title>predicates_defined_on (2,045,028 samples, 0.47%)</title><rect x="34.3735%" y="117" width="0.4707%" height="15" fill="rgb(253,215,40)"/><text x="34.6235%" y="127.50"></text></g><g><title>inferred_outlives_of (520,925 samples, 0.12%)</title><rect x="34.7242%" y="101" width="0.1199%" height="15" fill="rgb(211,81,21)"/><text x="34.9742%" y="111.50"></text></g><g><title>inferred_outlives_crate (474,715 samples, 0.11%)</title><rect x="34.7349%" y="85" width="0.1093%" height="15" fill="rgb(208,190,38)"/><text x="34.9849%" y="95.50"></text></g><g><title>type_collecting (4,732,758 samples, 1.09%)</title><rect x="33.8517%" y="165" width="1.0892%" height="15" fill="rgb(235,213,38)"/><text x="34.1017%" y="175.50"></text></g><g><title>collect_mod_item_types (4,706,767 samples, 1.08%)</title><rect x="33.8577%" y="149" width="1.0833%" height="15" fill="rgb(237,122,38)"/><text x="34.1077%" y="159.50"></text></g><g><title>evaluate_obligation (1,868,967 samples, 0.43%)</title><rect x="36.4356%" y="133" width="0.4301%" height="15" fill="rgb(244,218,35)"/><text x="36.6856%" y="143.50"></text></g><g><title>implied_outlives_bounds (793,636 samples, 0.18%)</title><rect x="36.8789%" y="133" width="0.1827%" height="15" fill="rgb(240,68,47)"/><text x="37.1289%" y="143.50"></text></g><g><title>param_env (703,044 samples, 0.16%)</title><rect x="37.0633%" y="133" width="0.1618%" height="15" fill="rgb(210,16,53)"/><text x="37.3133%" y="143.50"></text></g><g><title>region_scope_tree (486,313 samples, 0.11%)</title><rect x="37.2435%" y="133" width="0.1119%" height="15" fill="rgb(235,124,12)"/><text x="37.4935%" y="143.50"></text></g><g><title>check_impl_item_well_formed (10,075,007 samples, 2.32%)</title><rect x="35.0420%" y="149" width="2.3188%" height="15" fill="rgb(224,169,11)"/><text x="35.2920%" y="159.50">c..</text></g><g><title>param_env (715,631 samples, 0.16%)</title><rect x="38.2918%" y="133" width="0.1647%" height="15" fill="rgb(250,166,2)"/><text x="38.5418%" y="143.50"></text></g><g><title>check_item_well_formed (5,106,058 samples, 1.18%)</title><rect x="37.3607%" y="149" width="1.1752%" height="15" fill="rgb(242,216,29)"/><text x="37.6107%" y="159.50"></text></g><g><title>analysis (127,959,831 samples, 29.45%)</title><rect x="9.2000%" y="197" width="29.4498%" height="15" fill="rgb(230,116,27)"/><text x="9.4500%" y="207.50">analysis</text></g><g><title>type_check_crate (78,473,006 samples, 18.06%)</title><rect x="20.5893%" y="181" width="18.0605%" height="15" fill="rgb(228,99,48)"/><text x="20.8393%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,105,941 samples, 3.71%)</title><rect x="34.9430%" y="165" width="3.7068%" height="15" fill="rgb(253,11,6)"/><text x="35.1930%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (494,974 samples, 0.11%)</title><rect x="38.5359%" y="149" width="0.1139%" height="15" fill="rgb(247,143,39)"/><text x="38.7859%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (557,603 samples, 0.13%)</title><rect x="44.9097%" y="165" width="0.1283%" height="15" fill="rgb(236,97,10)"/><text x="45.1597%" y="175.50"></text></g><g><title>const_caller_location (434,832 samples, 0.10%)</title><rect x="45.0380%" y="165" width="0.1001%" height="15" fill="rgb(233,208,19)"/><text x="45.2880%" y="175.50"></text></g><g><title>item_attrs (489,854 samples, 0.11%)</title><rect x="45.4567%" y="133" width="0.1127%" height="15" fill="rgb(216,164,2)"/><text x="45.7067%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (471,744 samples, 0.11%)</title><rect x="45.4609%" y="117" width="0.1086%" height="15" fill="rgb(220,129,5)"/><text x="45.7109%" y="127.50"></text></g><g><title>codegen_fn_attrs (695,026 samples, 0.16%)</title><rect x="45.4280%" y="149" width="0.1600%" height="15" fill="rgb(242,17,10)"/><text x="45.6780%" y="159.50"></text></g><g><title>layout_of (1,044,378 samples, 0.24%)</title><rect x="45.6048%" y="149" width="0.2404%" height="15" fill="rgb(242,107,0)"/><text x="45.8548%" y="159.50"></text></g><g><title>predicates_of (634,137 samples, 0.15%)</title><rect x="46.0815%" y="133" width="0.1459%" height="15" fill="rgb(251,28,31)"/><text x="46.3315%" y="143.50"></text></g><g><title>predicates_defined_on (437,405 samples, 0.10%)</title><rect x="46.1268%" y="117" width="0.1007%" height="15" fill="rgb(233,223,10)"/><text x="46.3768%" y="127.50"></text></g><g><title>param_env (1,668,477 samples, 0.38%)</title><rect x="45.8451%" y="149" width="0.3840%" height="15" fill="rgb(215,21,27)"/><text x="46.0951%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (695,919 samples, 0.16%)</title><rect x="46.2291%" y="149" width="0.1602%" height="15" fill="rgb(232,23,21)"/><text x="46.4791%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,439,075 samples, 1.25%)</title><rect x="45.1425%" y="165" width="1.2518%" height="15" fill="rgb(244,5,23)"/><text x="45.3925%" y="175.50"></text></g><g><title>layout_of (662,255 samples, 0.15%)</title><rect x="46.6206%" y="117" width="0.1524%" height="15" fill="rgb(226,81,46)"/><text x="46.8706%" y="127.50"></text></g><g><title>layout_of (858,927 samples, 0.20%)</title><rect x="46.5911%" y="133" width="0.1977%" height="15" fill="rgb(247,70,30)"/><text x="46.8411%" y="143.50"></text></g><g><title>layout_of (1,206,114 samples, 0.28%)</title><rect x="46.5395%" y="149" width="0.2776%" height="15" fill="rgb(212,68,19)"/><text x="46.7895%" y="159.50"></text></g><g><title>layout_of (1,815,827 samples, 0.42%)</title><rect x="46.4320%" y="165" width="0.4179%" height="15" fill="rgb(240,187,13)"/><text x="46.6820%" y="175.50"></text></g><g><title>symbol_name (738,016 samples, 0.17%)</title><rect x="46.8550%" y="165" width="0.1699%" height="15" fill="rgb(223,113,26)"/><text x="47.1050%" y="175.50"></text></g><g><title>codegen_module (34,022,071 samples, 7.83%)</title><rect x="39.2155%" y="181" width="7.8301%" height="15" fill="rgb(206,192,2)"/><text x="39.4655%" y="191.50">codegen_mod..</text></g><g><title>codegen_crate (36,570,636 samples, 8.42%)</title><rect x="38.6520%" y="197" width="8.4167%" height="15" fill="rgb(241,108,4)"/><text x="38.9020%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (124,453,043 samples, 28.64%)</title><rect x="47.1150%" y="181" width="28.6427%" height="15" fill="rgb(247,173,49)"/><text x="47.3650%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (117,373,485 samples, 27.01%)</title><rect x="48.7444%" y="165" width="27.0134%" height="15" fill="rgb(224,114,35)"/><text x="48.9944%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (130,658,567 samples, 30.07%)</title><rect x="47.0686%" y="197" width="30.0709%" height="15" fill="rgb(245,159,27)"/><text x="47.3186%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,004,021 samples, 1.38%)</title><rect x="75.7577%" y="181" width="1.3818%" height="15" fill="rgb(245,172,44)"/><text x="76.0077%" y="191.50"></text></g><g><title>metadata_load_macro (683,677 samples, 0.16%)</title><rect x="86.5521%" y="149" width="0.1573%" height="15" fill="rgb(236,23,11)"/><text x="86.8021%" y="159.50"></text></g><g><title>metadata_register_crate (10,262,062 samples, 2.36%)</title><rect x="86.7094%" y="149" width="2.3618%" height="15" fill="rgb(205,117,38)"/><text x="86.9594%" y="159.50">me..</text></g><g><title>metadata_register_crate (7,507,097 samples, 1.73%)</title><rect x="87.3435%" y="133" width="1.7277%" height="15" fill="rgb(237,72,25)"/><text x="87.5935%" y="143.50"></text></g><g><title>macro_expand_crate (51,582,466 samples, 11.87%)</title><rect x="77.3073%" y="181" width="11.8716%" height="15" fill="rgb(244,70,9)"/><text x="77.5573%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (51,569,566 samples, 11.87%)</title><rect x="77.3103%" y="165" width="11.8687%" height="15" fill="rgb(217,125,39)"/><text x="77.5603%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (468,075 samples, 0.11%)</title><rect x="89.0712%" y="149" width="0.1077%" height="15" fill="rgb(235,36,10)"/><text x="89.3212%" y="159.50"></text></g><g><title>late_resolve_crate (2,339,903 samples, 0.54%)</title><rect x="89.2745%" y="165" width="0.5385%" height="15" fill="rgb(251,123,47)"/><text x="89.5245%" y="175.50"></text></g><g><title>configure_and_expand (55,238,843 samples, 12.71%)</title><rect x="77.1396%" y="197" width="12.7132%" height="15" fill="rgb(221,13,13)"/><text x="77.3896%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,842,609 samples, 0.65%)</title><rect x="89.1985%" y="181" width="0.6542%" height="15" fill="rgb(238,131,9)"/><text x="89.4485%" y="191.50"></text></g><g><title>early_lint_checks (966,000 samples, 0.22%)</title><rect x="89.9363%" y="197" width="0.2223%" height="15" fill="rgb(211,50,8)"/><text x="90.1863%" y="207.50"></text></g><g><title>free_global_ctxt (6,883,529 samples, 1.58%)</title><rect x="90.1586%" y="197" width="1.5842%" height="15" fill="rgb(245,182,24)"/><text x="90.4086%" y="207.50"></text></g><g><title>codegen_fn_attrs (564,762 samples, 0.13%)</title><rect x="92.7349%" y="117" width="0.1300%" height="15" fill="rgb(242,14,37)"/><text x="92.9849%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (700,798 samples, 0.16%)</title><rect x="93.1510%" y="101" width="0.1613%" height="15" fill="rgb(246,228,12)"/><text x="93.4010%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (676,817 samples, 0.16%)</title><rect x="93.3123%" y="101" width="0.1558%" height="15" fill="rgb(213,55,15)"/><text x="93.5623%" y="111.50"></text></g><g><title>optimized_mir (2,103,594 samples, 0.48%)</title><rect x="92.9858%" y="117" width="0.4841%" height="15" fill="rgb(209,9,3)"/><text x="93.2358%" y="127.50"></text></g><g><title>evaluate_obligation (561,975 samples, 0.13%)</title><rect x="93.6724%" y="85" width="0.1293%" height="15" fill="rgb(230,59,30)"/><text x="93.9224%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,346,093 samples, 0.31%)</title><rect x="93.5479%" y="101" width="0.3098%" height="15" fill="rgb(209,121,21)"/><text x="93.7979%" y="111.50"></text></g><g><title>impl_parent (630,446 samples, 0.15%)</title><rect x="94.0746%" y="85" width="0.1451%" height="15" fill="rgb(220,109,13)"/><text x="94.3246%" y="95.50"></text></g><g><title>specialization_graph_of (1,922,830 samples, 0.44%)</title><rect x="93.9264%" y="101" width="0.4425%" height="15" fill="rgb(232,18,1)"/><text x="94.1764%" y="111.50"></text></g><g><title>impl_trait_ref (648,674 samples, 0.15%)</title><rect x="94.2197%" y="85" width="0.1493%" height="15" fill="rgb(215,41,42)"/><text x="94.4697%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (493,643 samples, 0.11%)</title><rect x="94.2554%" y="69" width="0.1136%" height="15" fill="rgb(224,123,36)"/><text x="94.5054%" y="79.50"></text></g><g><title>resolve_instance (4,069,020 samples, 0.94%)</title><rect x="93.4699%" y="117" width="0.9365%" height="15" fill="rgb(240,125,3)"/><text x="93.7199%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (448,346 samples, 0.10%)</title><rect x="94.4064%" y="117" width="0.1032%" height="15" fill="rgb(205,98,50)"/><text x="94.6564%" y="127.50"></text></g><g><title>upstream_drop_glue_for (575,056 samples, 0.13%)</title><rect x="94.5096%" y="117" width="0.1323%" height="15" fill="rgb(205,185,37)"/><text x="94.7596%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (570,916 samples, 0.13%)</title><rect x="94.5105%" y="101" width="0.1314%" height="15" fill="rgb(238,207,15)"/><text x="94.7605%" y="111.50"></text></g><g><title>upstream_monomorphizations (568,326 samples, 0.13%)</title><rect x="94.5111%" y="85" width="0.1308%" height="15" fill="rgb(213,199,42)"/><text x="94.7611%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (9,728,158 samples, 2.24%)</title><rect x="92.5812%" y="133" width="2.2389%" height="15" fill="rgb(235,201,11)"/><text x="92.8312%" y="143.50">m..</text></g><g><title>vtable_entries (767,308 samples, 0.18%)</title><rect x="94.6435%" y="117" width="0.1766%" height="15" fill="rgb(207,46,11)"/><text x="94.8935%" y="127.50"></text></g><g><title>monomorphization_collector (9,777,838 samples, 2.25%)</title><rect x="92.5803%" y="149" width="2.2504%" height="15" fill="rgb(241,35,35)"/><text x="92.8303%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (604,776 samples, 0.14%)</title><rect x="94.8316%" y="133" width="0.1392%" height="15" fill="rgb(243,32,47)"/><text x="95.0816%" y="143.50"></text></g><g><title>symbol_name (554,796 samples, 0.13%)</title><rect x="94.8431%" y="117" width="0.1277%" height="15" fill="rgb(247,202,23)"/><text x="95.0931%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (10,756,927 samples, 2.48%)</title><rect x="92.5737%" y="165" width="2.4757%" height="15" fill="rgb(219,102,11)"/><text x="92.8237%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (950,769 samples, 0.22%)</title><rect x="94.8306%" y="149" width="0.2188%" height="15" fill="rgb(243,110,44)"/><text x="95.0806%" y="159.50"></text></g><g><title>exported_symbols (11,024,280 samples, 2.54%)</title><rect x="92.5669%" y="181" width="2.5372%" height="15" fill="rgb(222,74,54)"/><text x="92.8169%" y="191.50">ex..</text></g><g><title>layout_of (1,271,523 samples, 0.29%)</title><rect x="96.0053%" y="165" width="0.2926%" height="15" fill="rgb(216,99,12)"/><text x="96.2553%" y="175.50"></text></g><g><title>is_copy_raw (641,683 samples, 0.15%)</title><rect x="97.4801%" y="133" width="0.1477%" height="15" fill="rgb(226,22,26)"/><text x="97.7301%" y="143.50"></text></g><g><title>evaluate_obligation (515,893 samples, 0.12%)</title><rect x="97.5091%" y="117" width="0.1187%" height="15" fill="rgb(217,163,10)"/><text x="97.7591%" y="127.50"></text></g><g><title>needs_drop_raw (744,455 samples, 0.17%)</title><rect x="97.4571%" y="149" width="0.1713%" height="15" fill="rgb(213,25,53)"/><text x="97.7071%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,919,490 samples, 1.36%)</title><rect x="96.2979%" y="165" width="1.3624%" height="15" fill="rgb(252,105,26)"/><text x="96.5479%" y="175.50"></text></g><g><title>optimized_mir (10,913,981 samples, 2.51%)</title><rect x="95.1504%" y="181" width="2.5118%" height="15" fill="rgb(220,39,43)"/><text x="95.4004%" y="191.50">op..</text></g><g><title>generate_crate_metadata (25,821,079 samples, 5.94%)</title><rect x="91.7429%" y="197" width="5.9427%" height="15" fill="rgb(229,68,48)"/><text x="91.9929%" y="207.50">generate..</text></g><g><title>hir_lowering (4,978,750 samples, 1.15%)</title><rect x="97.6856%" y="197" width="1.1459%" height="15" fill="rgb(252,8,32)"/><text x="97.9356%" y="207.50"></text></g><g><title>link_crate (2,114,121 samples, 0.49%)</title><rect x="98.8363%" y="181" width="0.4866%" height="15" fill="rgb(223,20,43)"/><text x="99.0863%" y="191.50"></text></g><g><title>link_binary (2,064,880 samples, 0.48%)</title><rect x="98.8476%" y="165" width="0.4752%" height="15" fill="rgb(229,81,49)"/><text x="99.0976%" y="175.50"></text></g><g><title>link_rlib (1,471,085 samples, 0.34%)</title><rect x="98.9842%" y="149" width="0.3386%" height="15" fill="rgb(236,28,36)"/><text x="99.2342%" y="159.50"></text></g><g><title>link (2,145,312 samples, 0.49%)</title><rect x="98.8314%" y="197" width="0.4937%" height="15" fill="rgb(249,185,26)"/><text x="99.0814%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,781,038 samples, 0.41%)</title><rect x="99.4580%" y="197" width="0.4099%" height="15" fill="rgb(249,174,33)"/><text x="99.7080%" y="207.50"></text></g><g><title>all (434,501,540 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (434,501,540 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (500,695 samples, 0.12%)</title><rect x="99.8848%" y="197" width="0.1152%" height="15" fill="rgb(250,127,30)"/><text x="100.1348%" y="207.50"></text></g></svg></svg>