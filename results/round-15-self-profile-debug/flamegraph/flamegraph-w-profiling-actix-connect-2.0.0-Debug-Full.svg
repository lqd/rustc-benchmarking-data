<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (55,263,372 samples, 9.59%)</title><rect x="0.0940%" y="293" width="9.5896%" height="15" fill="rgb(227,0,7)"/><text x="0.3440%" y="303.50">LLVM_passes</text></g><g><title>adt_drop_tys (646,278 samples, 0.11%)</title><rect x="14.7202%" y="165" width="0.1121%" height="15" fill="rgb(217,0,24)"/><text x="14.9702%" y="175.50"></text></g><g><title>is_copy_raw (1,754,529 samples, 0.30%)</title><rect x="14.8326%" y="165" width="0.3045%" height="15" fill="rgb(221,193,54)"/><text x="15.0826%" y="175.50"></text></g><g><title>evaluate_obligation (1,462,975 samples, 0.25%)</title><rect x="14.8832%" y="149" width="0.2539%" height="15" fill="rgb(248,212,6)"/><text x="15.1332%" y="159.50"></text></g><g><title>needs_drop_raw (2,713,793 samples, 0.47%)</title><rect x="14.6749%" y="181" width="0.4709%" height="15" fill="rgb(208,68,35)"/><text x="14.9249%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (985,043 samples, 0.17%)</title><rect x="15.2112%" y="165" width="0.1709%" height="15" fill="rgb(232,128,0)"/><text x="15.4612%" y="175.50"></text></g><g><title>specialization_graph_of (1,008,420 samples, 0.17%)</title><rect x="15.4012%" y="165" width="0.1750%" height="15" fill="rgb(207,160,47)"/><text x="15.6512%" y="175.50"></text></g><g><title>resolve_instance (2,587,128 samples, 0.45%)</title><rect x="15.1458%" y="181" width="0.4489%" height="15" fill="rgb(228,23,34)"/><text x="15.3958%" y="191.50"></text></g><g><title>thir_body (1,503,013 samples, 0.26%)</title><rect x="15.6023%" y="181" width="0.2608%" height="15" fill="rgb(218,30,26)"/><text x="15.8523%" y="191.50"></text></g><g><title>mir_const (13,551,167 samples, 2.35%)</title><rect x="13.5177%" y="229" width="2.3515%" height="15" fill="rgb(220,122,19)"/><text x="13.7677%" y="239.50">m..</text></g><g><title>unsafety_check_result (12,037,180 samples, 2.09%)</title><rect x="13.7804%" y="213" width="2.0887%" height="15" fill="rgb(250,228,42)"/><text x="14.0304%" y="223.50">u..</text></g><g><title>mir_built (10,935,101 samples, 1.90%)</title><rect x="13.9717%" y="197" width="1.8975%" height="15" fill="rgb(240,193,28)"/><text x="14.2217%" y="207.50">m..</text></g><g><title>mir_promoted (14,829,130 samples, 2.57%)</title><rect x="13.3057%" y="245" width="2.5732%" height="15" fill="rgb(216,20,37)"/><text x="13.5557%" y="255.50">mi..</text></g><g><title>type_op_ascribe_user_type (1,110,992 samples, 0.19%)</title><rect x="15.8789%" y="245" width="0.1928%" height="15" fill="rgb(206,188,39)"/><text x="16.1289%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (788,727 samples, 0.14%)</title><rect x="16.0717%" y="245" width="0.1369%" height="15" fill="rgb(217,207,13)"/><text x="16.3217%" y="255.50"></text></g><g><title>type_op_prove_predicate (4,485,678 samples, 0.78%)</title><rect x="16.2939%" y="245" width="0.7784%" height="15" fill="rgb(231,73,38)"/><text x="16.5439%" y="255.50"></text></g><g><title>MIR_borrow_checking (42,167,831 samples, 7.32%)</title><rect x="9.7567%" y="277" width="7.3172%" height="15" fill="rgb(225,20,46)"/><text x="10.0067%" y="287.50">MIR_borrow..</text></g><g><title>mir_borrowck (41,989,309 samples, 7.29%)</title><rect x="9.7876%" y="261" width="7.2862%" height="15" fill="rgb(210,31,41)"/><text x="10.0376%" y="271.50">mir_borrow..</text></g><g><title>check_mod_attrs (893,239 samples, 0.15%)</title><rect x="17.1416%" y="261" width="0.1550%" height="15" fill="rgb(221,200,47)"/><text x="17.3916%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (619,918 samples, 0.11%)</title><rect x="17.3504%" y="261" width="0.1076%" height="15" fill="rgb(226,26,5)"/><text x="17.6004%" y="271.50"></text></g><g><title>misc_checking_1 (1,944,409 samples, 0.34%)</title><rect x="17.1358%" y="277" width="0.3374%" height="15" fill="rgb(249,33,26)"/><text x="17.3858%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (892,999 samples, 0.15%)</title><rect x="17.4735%" y="261" width="0.1550%" height="15" fill="rgb(235,183,28)"/><text x="17.7235%" y="271.50"></text></g><g><title>check_mod_liveness (738,028 samples, 0.13%)</title><rect x="17.5004%" y="245" width="0.1281%" height="15" fill="rgb(221,5,38)"/><text x="17.7504%" y="255.50"></text></g><g><title>misc_checking_2 (1,848,028 samples, 0.32%)</title><rect x="17.4733%" y="277" width="0.3207%" height="15" fill="rgb(247,18,42)"/><text x="17.7233%" y="287.50"></text></g><g><title>match_checking (953,519 samples, 0.17%)</title><rect x="17.6285%" y="261" width="0.1655%" height="15" fill="rgb(241,131,45)"/><text x="17.8785%" y="271.50"></text></g><g><title>check_match (904,089 samples, 0.16%)</title><rect x="17.6370%" y="245" width="0.1569%" height="15" fill="rgb(249,31,29)"/><text x="17.8870%" y="255.50"></text></g><g><title>death_checking (888,458 samples, 0.15%)</title><rect x="17.8701%" y="261" width="0.1542%" height="15" fill="rgb(225,111,53)"/><text x="18.1201%" y="271.50"></text></g><g><title>param_env (708,955 samples, 0.12%)</title><rect x="18.2397%" y="229" width="0.1230%" height="15" fill="rgb(238,160,17)"/><text x="18.4897%" y="239.50"></text></g><g><title>crate_lints (4,064,580 samples, 0.71%)</title><rect x="18.0246%" y="245" width="0.7053%" height="15" fill="rgb(214,148,48)"/><text x="18.2746%" y="255.50"></text></g><g><title>type_of (1,836,449 samples, 0.32%)</title><rect x="18.4112%" y="229" width="0.3187%" height="15" fill="rgb(232,36,49)"/><text x="18.6612%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (1,228,484 samples, 0.21%)</title><rect x="18.5167%" y="213" width="0.2132%" height="15" fill="rgb(209,103,24)"/><text x="18.7667%" y="223.50"></text></g><g><title>lint_checking (5,218,622 samples, 0.91%)</title><rect x="18.0243%" y="261" width="0.9056%" height="15" fill="rgb(229,88,8)"/><text x="18.2743%" y="271.50"></text></g><g><title>module_lints (1,152,402 samples, 0.20%)</title><rect x="18.7299%" y="245" width="0.2000%" height="15" fill="rgb(213,181,19)"/><text x="18.9799%" y="255.50"></text></g><g><title>lint_mod (1,142,142 samples, 0.20%)</title><rect x="18.7317%" y="229" width="0.1982%" height="15" fill="rgb(254,191,54)"/><text x="18.9817%" y="239.50"></text></g><g><title>privacy_access_levels (604,036 samples, 0.10%)</title><rect x="18.9299%" y="261" width="0.1048%" height="15" fill="rgb(241,83,37)"/><text x="19.1799%" y="271.50"></text></g><g><title>privacy_checking_modules (1,933,549 samples, 0.34%)</title><rect x="19.0347%" y="261" width="0.3355%" height="15" fill="rgb(233,36,39)"/><text x="19.2847%" y="271.50"></text></g><g><title>check_mod_privacy (1,926,419 samples, 0.33%)</title><rect x="19.0359%" y="245" width="0.3343%" height="15" fill="rgb(226,3,54)"/><text x="19.2859%" y="255.50"></text></g><g><title>misc_checking_3 (9,096,611 samples, 1.58%)</title><rect x="17.7939%" y="277" width="1.5785%" height="15" fill="rgb(245,192,40)"/><text x="18.0439%" y="287.50"></text></g><g><title>impl_parent (4,378,462 samples, 0.76%)</title><rect x="20.6352%" y="213" width="0.7598%" height="15" fill="rgb(238,167,29)"/><text x="20.8852%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,470,802 samples, 0.43%)</title><rect x="20.9662%" y="197" width="0.4287%" height="15" fill="rgb(232,182,51)"/><text x="21.2162%" y="207.50"></text></g><g><title>impl_trait_ref (9,718,798 samples, 1.69%)</title><rect x="21.3949%" y="213" width="1.6865%" height="15" fill="rgb(231,60,39)"/><text x="21.6449%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,594,038 samples, 1.32%)</title><rect x="21.7636%" y="197" width="1.3178%" height="15" fill="rgb(208,69,12)"/><text x="22.0136%" y="207.50"></text></g><g><title>trait_impls_of (2,094,502 samples, 0.36%)</title><rect x="23.0888%" y="213" width="0.3634%" height="15" fill="rgb(235,93,37)"/><text x="23.3388%" y="223.50"></text></g><g><title>implementations_of_trait (792,388 samples, 0.14%)</title><rect x="23.3147%" y="197" width="0.1375%" height="15" fill="rgb(213,116,39)"/><text x="23.5647%" y="207.50"></text></g><g><title>coherent_trait (23,361,943 samples, 4.05%)</title><rect x="19.3986%" y="245" width="4.0539%" height="15" fill="rgb(222,207,29)"/><text x="19.6486%" y="255.50">cohe..</text></g><g><title>specialization_graph_of (23,329,303 samples, 4.05%)</title><rect x="19.4042%" y="229" width="4.0482%" height="15" fill="rgb(206,96,30)"/><text x="19.6542%" y="239.50">spec..</text></g><g><title>coherence_checking (23,476,955 samples, 4.07%)</title><rect x="19.3940%" y="261" width="4.0738%" height="15" fill="rgb(218,138,4)"/><text x="19.6440%" y="271.50">cohe..</text></g><g><title>dropck_outlives (1,427,113 samples, 0.25%)</title><rect x="28.6409%" y="213" width="0.2476%" height="15" fill="rgb(250,191,14)"/><text x="28.8909%" y="223.50"></text></g><g><title>trait_impls_of (847,488 samples, 0.15%)</title><rect x="29.3753%" y="197" width="0.1471%" height="15" fill="rgb(239,60,40)"/><text x="29.6253%" y="207.50"></text></g><g><title>evaluate_obligation (3,688,418 samples, 0.64%)</title><rect x="28.8885%" y="213" width="0.6400%" height="15" fill="rgb(206,27,48)"/><text x="29.1385%" y="223.50"></text></g><g><title>method_autoderef_steps (1,126,792 samples, 0.20%)</title><rect x="29.6423%" y="213" width="0.1955%" height="15" fill="rgb(225,35,8)"/><text x="29.8923%" y="223.50"></text></g><g><title>evaluate_obligation (996,368 samples, 0.17%)</title><rect x="31.4698%" y="197" width="0.1729%" height="15" fill="rgb(250,213,24)"/><text x="31.7198%" y="207.50"></text></g><g><title>typeck (10,734,877 samples, 1.86%)</title><rect x="29.9576%" y="213" width="1.8628%" height="15" fill="rgb(247,123,22)"/><text x="30.2076%" y="223.50">t..</text></g><g><title>item_bodies_checking (48,142,741 samples, 8.35%)</title><rect x="23.4798%" y="261" width="8.3540%" height="15" fill="rgb(231,138,38)"/><text x="23.7298%" y="271.50">item_bodies_..</text></g><g><title>typeck_item_bodies (48,140,201 samples, 8.35%)</title><rect x="23.4802%" y="245" width="8.3535%" height="15" fill="rgb(231,145,46)"/><text x="23.7302%" y="255.50">typeck_item_..</text></g><g><title>typeck (48,000,010 samples, 8.33%)</title><rect x="23.5045%" y="229" width="8.3292%" height="15" fill="rgb(251,118,11)"/><text x="23.7545%" y="239.50">typeck</text></g><g><title>mir_borrowck (3,307,923 samples, 0.57%)</title><rect x="33.0626%" y="197" width="0.5740%" height="15" fill="rgb(217,147,25)"/><text x="33.3126%" y="207.50"></text></g><g><title>coherent_trait (649,396 samples, 0.11%)</title><rect x="35.2797%" y="53" width="0.1127%" height="15" fill="rgb(247,81,37)"/><text x="35.5297%" y="63.50"></text></g><g><title>specialization_graph_of (647,206 samples, 0.11%)</title><rect x="35.2801%" y="37" width="0.1123%" height="15" fill="rgb(209,12,38)"/><text x="35.5301%" y="47.50"></text></g><g><title>adt_destructor (706,717 samples, 0.12%)</title><rect x="35.2727%" y="85" width="0.1226%" height="15" fill="rgb(227,1,9)"/><text x="35.5227%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (691,547 samples, 0.12%)</title><rect x="35.2753%" y="69" width="0.1200%" height="15" fill="rgb(248,47,43)"/><text x="35.5253%" y="79.50"></text></g><g><title>adt_dtorck_constraint (957,590 samples, 0.17%)</title><rect x="35.4551%" y="69" width="0.1662%" height="15" fill="rgb(221,10,30)"/><text x="35.7051%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,384,763 samples, 0.24%)</title><rect x="35.3953%" y="85" width="0.2403%" height="15" fill="rgb(210,229,1)"/><text x="35.6453%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,504,204 samples, 0.43%)</title><rect x="35.2190%" y="101" width="0.4345%" height="15" fill="rgb(222,148,37)"/><text x="35.4690%" y="111.50"></text></g><g><title>dropck_outlives (2,972,912 samples, 0.52%)</title><rect x="35.1422%" y="117" width="0.5159%" height="15" fill="rgb(234,67,33)"/><text x="35.3922%" y="127.50"></text></g><g><title>evaluate_obligation (1,748,892 samples, 0.30%)</title><rect x="35.6581%" y="117" width="0.3035%" height="15" fill="rgb(247,98,35)"/><text x="35.9081%" y="127.50"></text></g><g><title>trait_impls_of (611,966 samples, 0.11%)</title><rect x="35.8554%" y="101" width="0.1062%" height="15" fill="rgb(247,138,52)"/><text x="36.1054%" y="111.50"></text></g><g><title>is_copy_raw (613,346 samples, 0.11%)</title><rect x="36.0128%" y="117" width="0.1064%" height="15" fill="rgb(213,79,30)"/><text x="36.2628%" y="127.50"></text></g><g><title>mir_built (14,870,969 samples, 2.58%)</title><rect x="33.7030%" y="149" width="2.5805%" height="15" fill="rgb(246,177,23)"/><text x="33.9530%" y="159.50">mi..</text></g><g><title>typeck (14,193,724 samples, 2.46%)</title><rect x="33.8205%" y="133" width="2.4630%" height="15" fill="rgb(230,62,27)"/><text x="34.0705%" y="143.50">ty..</text></g><g><title>mir_built (946,349 samples, 0.16%)</title><rect x="36.3084%" y="133" width="0.1642%" height="15" fill="rgb(216,154,8)"/><text x="36.5584%" y="143.50"></text></g><g><title>mir_const (16,269,204 samples, 2.82%)</title><rect x="33.6562%" y="181" width="2.8231%" height="15" fill="rgb(244,35,45)"/><text x="33.9062%" y="191.50">mi..</text></g><g><title>unsafety_check_result (16,062,073 samples, 2.79%)</title><rect x="33.6922%" y="165" width="2.7872%" height="15" fill="rgb(251,115,12)"/><text x="33.9422%" y="175.50">un..</text></g><g><title>unsafety_check_result (1,128,952 samples, 0.20%)</title><rect x="36.2834%" y="149" width="0.1959%" height="15" fill="rgb(240,54,50)"/><text x="36.5334%" y="159.50"></text></g><g><title>mir_promoted (16,391,745 samples, 2.84%)</title><rect x="33.6366%" y="197" width="2.8444%" height="15" fill="rgb(233,84,52)"/><text x="33.8866%" y="207.50">mi..</text></g><g><title>item_types_checking (27,419,313 samples, 4.76%)</title><rect x="31.8337%" y="261" width="4.7579%" height="15" fill="rgb(207,117,47)"/><text x="32.0837%" y="271.50">item_t..</text></g><g><title>check_mod_item_types (27,408,323 samples, 4.76%)</title><rect x="31.8356%" y="245" width="4.7560%" height="15" fill="rgb(249,43,39)"/><text x="32.0856%" y="255.50">check_..</text></g><g><title>type_of (22,004,640 samples, 3.82%)</title><rect x="32.7733%" y="229" width="3.8183%" height="15" fill="rgb(209,38,44)"/><text x="33.0233%" y="239.50">type..</text></g><g><title>mir_borrowck (21,938,349 samples, 3.81%)</title><rect x="32.7848%" y="213" width="3.8068%" height="15" fill="rgb(236,212,23)"/><text x="33.0348%" y="223.50">mir_..</text></g><g><title>fn_sig (591,316 samples, 0.10%)</title><rect x="36.6797%" y="229" width="0.1026%" height="15" fill="rgb(242,79,21)"/><text x="36.9297%" y="239.50"></text></g><g><title>late_bound_vars_map (664,926 samples, 0.12%)</title><rect x="36.9634%" y="181" width="0.1154%" height="15" fill="rgb(211,96,35)"/><text x="37.2134%" y="191.50"></text></g><g><title>resolve_lifetimes (639,146 samples, 0.11%)</title><rect x="36.9679%" y="165" width="0.1109%" height="15" fill="rgb(253,215,40)"/><text x="37.2179%" y="175.50"></text></g><g><title>explicit_predicates_of (969,547 samples, 0.17%)</title><rect x="36.9151%" y="197" width="0.1682%" height="15" fill="rgb(211,81,21)"/><text x="37.1651%" y="207.50"></text></g><g><title>predicates_of (1,940,030 samples, 0.34%)</title><rect x="36.8669%" y="229" width="0.3366%" height="15" fill="rgb(208,190,38)"/><text x="37.1169%" y="239.50"></text></g><g><title>predicates_defined_on (1,832,825 samples, 0.32%)</title><rect x="36.8855%" y="213" width="0.3180%" height="15" fill="rgb(235,213,38)"/><text x="37.1355%" y="223.50"></text></g><g><title>inferred_outlives_of (692,418 samples, 0.12%)</title><rect x="37.0834%" y="197" width="0.1202%" height="15" fill="rgb(237,122,38)"/><text x="37.3334%" y="207.50"></text></g><g><title>inferred_outlives_crate (652,747 samples, 0.11%)</title><rect x="37.0903%" y="181" width="0.1133%" height="15" fill="rgb(244,218,35)"/><text x="37.3403%" y="191.50"></text></g><g><title>type_collecting (3,834,879 samples, 0.67%)</title><rect x="36.5929%" y="261" width="0.6654%" height="15" fill="rgb(240,68,47)"/><text x="36.8429%" y="271.50"></text></g><g><title>collect_mod_item_types (3,821,899 samples, 0.66%)</title><rect x="36.5952%" y="245" width="0.6632%" height="15" fill="rgb(210,16,53)"/><text x="36.8452%" y="255.50"></text></g><g><title>adt_sized_constraint (660,186 samples, 0.11%)</title><rect x="38.2600%" y="213" width="0.1146%" height="15" fill="rgb(235,124,12)"/><text x="38.5100%" y="223.50"></text></g><g><title>evaluate_obligation (1,650,144 samples, 0.29%)</title><rect x="38.0931%" y="229" width="0.2863%" height="15" fill="rgb(224,169,11)"/><text x="38.3431%" y="239.50"></text></g><g><title>param_env (808,717 samples, 0.14%)</title><rect x="38.4803%" y="229" width="0.1403%" height="15" fill="rgb(250,166,2)"/><text x="38.7303%" y="239.50"></text></g><g><title>region_scope_tree (591,038 samples, 0.10%)</title><rect x="38.6340%" y="229" width="0.1026%" height="15" fill="rgb(242,216,29)"/><text x="38.8840%" y="239.50"></text></g><g><title>check_impl_item_well_formed (8,205,396 samples, 1.42%)</title><rect x="37.3326%" y="245" width="1.4238%" height="15" fill="rgb(230,116,27)"/><text x="37.5826%" y="255.50"></text></g><g><title>evaluate_obligation (1,147,342 samples, 0.20%)</title><rect x="39.3152%" y="229" width="0.1991%" height="15" fill="rgb(228,99,48)"/><text x="39.5652%" y="239.50"></text></g><g><title>param_env (626,474 samples, 0.11%)</title><rect x="39.6452%" y="229" width="0.1087%" height="15" fill="rgb(253,11,6)"/><text x="39.8952%" y="239.50"></text></g><g><title>check_item_well_formed (6,269,756 samples, 1.09%)</title><rect x="38.7564%" y="245" width="1.0880%" height="15" fill="rgb(247,143,39)"/><text x="39.0064%" y="255.50"></text></g><g><title>analysis (174,201,260 samples, 30.23%)</title><rect x="9.6835%" y="293" width="30.2282%" height="15" fill="rgb(236,97,10)"/><text x="9.9335%" y="303.50">analysis</text></g><g><title>type_check_crate (118,365,533 samples, 20.54%)</title><rect x="19.3724%" y="277" width="20.5393%" height="15" fill="rgb(233,208,19)"/><text x="19.6224%" y="287.50">type_check_crate</text></g><g><title>wf_checking (15,283,363 samples, 2.65%)</title><rect x="37.2597%" y="261" width="2.6520%" height="15" fill="rgb(216,164,2)"/><text x="37.5097%" y="271.50">wf..</text></g><g><title>compute_debuginfo_type_name (1,029,258 samples, 0.18%)</title><rect x="46.0411%" y="261" width="0.1786%" height="15" fill="rgb(220,129,5)"/><text x="46.2911%" y="271.50"></text></g><g><title>layout_of (871,260 samples, 0.15%)</title><rect x="46.5631%" y="245" width="0.1512%" height="15" fill="rgb(242,17,10)"/><text x="46.8131%" y="255.50"></text></g><g><title>param_env (1,529,704 samples, 0.27%)</title><rect x="46.7143%" y="245" width="0.2654%" height="15" fill="rgb(242,107,0)"/><text x="46.9643%" y="255.50"></text></g><g><title>fn_abi_of_instance (4,566,431 samples, 0.79%)</title><rect x="46.2623%" y="261" width="0.7924%" height="15" fill="rgb(251,28,31)"/><text x="46.5123%" y="271.50"></text></g><g><title>layout_of (898,829 samples, 0.16%)</title><rect x="47.4165%" y="197" width="0.1560%" height="15" fill="rgb(233,223,10)"/><text x="47.6665%" y="207.50"></text></g><g><title>layout_of (1,523,526 samples, 0.26%)</title><rect x="47.3721%" y="213" width="0.2644%" height="15" fill="rgb(215,21,27)"/><text x="47.6221%" y="223.50"></text></g><g><title>layout_of (2,151,541 samples, 0.37%)</title><rect x="47.2932%" y="229" width="0.3733%" height="15" fill="rgb(232,23,21)"/><text x="47.5432%" y="239.50"></text></g><g><title>layout_of (2,679,109 samples, 0.46%)</title><rect x="47.2345%" y="245" width="0.4649%" height="15" fill="rgb(244,5,23)"/><text x="47.4845%" y="255.50"></text></g><g><title>layout_of (3,751,665 samples, 0.65%)</title><rect x="47.0976%" y="261" width="0.6510%" height="15" fill="rgb(226,81,46)"/><text x="47.3476%" y="271.50"></text></g><g><title>codegen_module (42,814,760 samples, 7.43%)</title><rect x="40.4304%" y="277" width="7.4294%" height="15" fill="rgb(247,70,30)"/><text x="40.6804%" y="287.50">codegen_mo..</text></g><g><title>codegen_crate (46,049,720 samples, 7.99%)</title><rect x="39.9128%" y="293" width="7.9908%" height="15" fill="rgb(212,68,19)"/><text x="40.1628%" y="303.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (162,605,338 samples, 28.22%)</title><rect x="47.9369%" y="277" width="28.2161%" height="15" fill="rgb(240,187,13)"/><text x="48.1869%" y="287.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (150,054,112 samples, 26.04%)</title><rect x="50.1149%" y="261" width="26.0381%" height="15" fill="rgb(223,113,26)"/><text x="50.3649%" y="271.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (170,409,267 samples, 29.57%)</title><rect x="47.9036%" y="293" width="29.5702%" height="15" fill="rgb(206,192,2)"/><text x="48.1536%" y="303.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,611,528 samples, 1.32%)</title><rect x="76.1530%" y="277" width="1.3208%" height="15" fill="rgb(241,108,4)"/><text x="76.4030%" y="287.50"></text></g><g><title>metadata_register_crate (32,919,020 samples, 5.71%)</title><rect x="81.6550%" y="245" width="5.7123%" height="15" fill="rgb(247,173,49)"/><text x="81.9050%" y="255.50">metadat..</text></g><g><title>metadata_register_crate (30,925,270 samples, 5.37%)</title><rect x="82.0009%" y="229" width="5.3663%" height="15" fill="rgb(224,114,35)"/><text x="82.2509%" y="239.50">metadat..</text></g><g><title>metadata_register_crate (23,778,437 samples, 4.13%)</title><rect x="83.2411%" y="213" width="4.1261%" height="15" fill="rgb(245,159,27)"/><text x="83.4911%" y="223.50">meta..</text></g><g><title>metadata_register_crate (4,137,950 samples, 0.72%)</title><rect x="86.6492%" y="197" width="0.7180%" height="15" fill="rgb(245,172,44)"/><text x="86.8992%" y="207.50"></text></g><g><title>macro_expand_crate (56,791,117 samples, 9.85%)</title><rect x="77.5496%" y="277" width="9.8547%" height="15" fill="rgb(236,23,11)"/><text x="77.7996%" y="287.50">macro_expand_c..</text></g><g><title>expand_crate (56,782,267 samples, 9.85%)</title><rect x="77.5511%" y="261" width="9.8531%" height="15" fill="rgb(205,117,38)"/><text x="77.8011%" y="271.50">expand_crate</text></g><g><title>late_resolve_crate (2,540,046 samples, 0.44%)</title><rect x="87.4820%" y="261" width="0.4408%" height="15" fill="rgb(237,72,25)"/><text x="87.7320%" y="271.50"></text></g><g><title>configure_and_expand (60,402,344 samples, 10.48%)</title><rect x="77.4738%" y="293" width="10.4813%" height="15" fill="rgb(244,70,9)"/><text x="77.7238%" y="303.50">configure_and_e..</text></g><g><title>resolve_crate (3,103,971 samples, 0.54%)</title><rect x="87.4165%" y="277" width="0.5386%" height="15" fill="rgb(217,125,39)"/><text x="87.6665%" y="287.50"></text></g><g><title>free_global_ctxt (12,490,445 samples, 2.17%)</title><rect x="88.0946%" y="293" width="2.1674%" height="15" fill="rgb(235,36,10)"/><text x="88.3446%" y="303.50">f..</text></g><g><title>codegen_fn_attrs (801,170 samples, 0.14%)</title><rect x="91.0114%" y="213" width="0.1390%" height="15" fill="rgb(251,123,47)"/><text x="91.2614%" y="223.50"></text></g><g><title>layout_of (619,768 samples, 0.11%)</title><rect x="91.4648%" y="181" width="0.1075%" height="15" fill="rgb(221,13,13)"/><text x="91.7148%" y="191.50"></text></g><g><title>layout_of (597,136 samples, 0.10%)</title><rect x="91.4687%" y="165" width="0.1036%" height="15" fill="rgb(238,131,9)"/><text x="91.7187%" y="175.50"></text></g><g><title>layout_of (875,719 samples, 0.15%)</title><rect x="91.4367%" y="197" width="0.1520%" height="15" fill="rgb(211,50,8)"/><text x="91.6867%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (739,330 samples, 0.13%)</title><rect x="91.5886%" y="197" width="0.1283%" height="15" fill="rgb(245,182,24)"/><text x="91.8386%" y="207.50"></text></g><g><title>optimized_mir (3,599,149 samples, 0.62%)</title><rect x="91.2592%" y="213" width="0.6245%" height="15" fill="rgb(242,14,37)"/><text x="91.5092%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (961,109 samples, 0.17%)</title><rect x="91.7169%" y="197" width="0.1668%" height="15" fill="rgb(246,228,12)"/><text x="91.9669%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (1,370,981 samples, 0.24%)</title><rect x="91.9512%" y="197" width="0.2379%" height="15" fill="rgb(213,55,15)"/><text x="92.2012%" y="207.50"></text></g><g><title>specialization_graph_of (690,417 samples, 0.12%)</title><rect x="92.2530%" y="197" width="0.1198%" height="15" fill="rgb(209,9,3)"/><text x="92.5030%" y="207.50"></text></g><g><title>resolve_instance (2,961,044 samples, 0.51%)</title><rect x="91.8837%" y="213" width="0.5138%" height="15" fill="rgb(230,59,30)"/><text x="92.1337%" y="223.50"></text></g><g><title>upstream_monomorphizations_for (11,527,375 samples, 2.00%)</title><rect x="92.4382%" y="213" width="2.0003%" height="15" fill="rgb(209,121,21)"/><text x="92.6882%" y="223.50">u..</text></g><g><title>upstream_monomorphizations (11,509,355 samples, 2.00%)</title><rect x="92.4413%" y="197" width="1.9972%" height="15" fill="rgb(220,109,13)"/><text x="92.6913%" y="207.50">u..</text></g><g><title>exported_symbols (10,005,398 samples, 1.74%)</title><rect x="92.7023%" y="181" width="1.7362%" height="15" fill="rgb(232,18,1)"/><text x="92.9523%" y="191.50"></text></g><g><title>metadata_decode_entry_exported_symbols (9,979,228 samples, 1.73%)</title><rect x="92.7068%" y="165" width="1.7316%" height="15" fill="rgb(215,41,42)"/><text x="92.9568%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (20,876,618 samples, 3.62%)</title><rect x="90.8703%" y="229" width="3.6226%" height="15" fill="rgb(224,123,36)"/><text x="91.1203%" y="239.50">mono..</text></g><g><title>monomorphization_collector (20,927,679 samples, 3.63%)</title><rect x="90.8698%" y="245" width="3.6315%" height="15" fill="rgb(240,125,3)"/><text x="91.1198%" y="255.50">mono..</text></g><g><title>assert_symbols_are_distinct (831,178 samples, 0.14%)</title><rect x="94.5031%" y="229" width="0.1442%" height="15" fill="rgb(205,98,50)"/><text x="94.7531%" y="239.50"></text></g><g><title>symbol_name (763,177 samples, 0.13%)</title><rect x="94.5149%" y="213" width="0.1324%" height="15" fill="rgb(205,185,37)"/><text x="94.7649%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (22,182,142 samples, 3.85%)</title><rect x="90.8658%" y="261" width="3.8492%" height="15" fill="rgb(238,207,15)"/><text x="91.1158%" y="271.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (1,231,322 samples, 0.21%)</title><rect x="94.5013%" y="245" width="0.2137%" height="15" fill="rgb(213,199,42)"/><text x="94.7513%" y="255.50"></text></g><g><title>exported_symbols (22,509,165 samples, 3.91%)</title><rect x="90.8581%" y="277" width="3.9059%" height="15" fill="rgb(235,201,11)"/><text x="91.1081%" y="287.50">expo..</text></g><g><title>layout_of (601,367 samples, 0.10%)</title><rect x="96.2437%" y="85" width="0.1044%" height="15" fill="rgb(207,46,11)"/><text x="96.4937%" y="95.50"></text></g><g><title>layout_of (686,398 samples, 0.12%)</title><rect x="96.2345%" y="101" width="0.1191%" height="15" fill="rgb(241,35,35)"/><text x="96.4845%" y="111.50"></text></g><g><title>layout_of (758,488 samples, 0.13%)</title><rect x="96.2282%" y="117" width="0.1316%" height="15" fill="rgb(243,32,47)"/><text x="96.4782%" y="127.50"></text></g><g><title>layout_of (870,189 samples, 0.15%)</title><rect x="96.2180%" y="133" width="0.1510%" height="15" fill="rgb(247,202,23)"/><text x="96.4680%" y="143.50"></text></g><g><title>layout_of (1,245,521 samples, 0.22%)</title><rect x="96.2044%" y="149" width="0.2161%" height="15" fill="rgb(219,102,11)"/><text x="96.4544%" y="159.50"></text></g><g><title>layout_of (1,308,901 samples, 0.23%)</title><rect x="96.1970%" y="165" width="0.2271%" height="15" fill="rgb(243,110,44)"/><text x="96.4470%" y="175.50"></text></g><g><title>layout_of (1,648,914 samples, 0.29%)</title><rect x="96.1644%" y="181" width="0.2861%" height="15" fill="rgb(222,74,54)"/><text x="96.4144%" y="191.50"></text></g><g><title>layout_of (1,937,849 samples, 0.34%)</title><rect x="96.1320%" y="197" width="0.3363%" height="15" fill="rgb(216,99,12)"/><text x="96.3820%" y="207.50"></text></g><g><title>layout_of (2,163,301 samples, 0.38%)</title><rect x="96.1124%" y="213" width="0.3754%" height="15" fill="rgb(226,22,26)"/><text x="96.3624%" y="223.50"></text></g><g><title>layout_of (2,744,047 samples, 0.48%)</title><rect x="96.0561%" y="229" width="0.4762%" height="15" fill="rgb(217,163,10)"/><text x="96.3061%" y="239.50"></text></g><g><title>layout_of (2,974,998 samples, 0.52%)</title><rect x="96.0214%" y="245" width="0.5162%" height="15" fill="rgb(213,25,53)"/><text x="96.2714%" y="255.50"></text></g><g><title>layout_of (4,030,562 samples, 0.70%)</title><rect x="95.8513%" y="261" width="0.6994%" height="15" fill="rgb(252,105,26)"/><text x="96.1013%" y="271.50"></text></g><g><title>is_copy_raw (1,107,941 samples, 0.19%)</title><rect x="97.8352%" y="229" width="0.1923%" height="15" fill="rgb(220,39,43)"/><text x="98.0852%" y="239.50"></text></g><g><title>evaluate_obligation (878,658 samples, 0.15%)</title><rect x="97.8750%" y="213" width="0.1525%" height="15" fill="rgb(229,68,48)"/><text x="98.1250%" y="223.50"></text></g><g><title>needs_drop_raw (1,383,533 samples, 0.24%)</title><rect x="97.7953%" y="245" width="0.2401%" height="15" fill="rgb(252,8,32)"/><text x="98.0453%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,838,462 samples, 1.53%)</title><rect x="96.5507%" y="261" width="1.5337%" height="15" fill="rgb(223,20,43)"/><text x="96.8007%" y="271.50"></text></g><g><title>optimized_mir (19,387,012 samples, 3.36%)</title><rect x="94.8110%" y="277" width="3.3641%" height="15" fill="rgb(229,81,49)"/><text x="95.0610%" y="287.50">opt..</text></g><g><title>generate_crate_metadata (46,028,510 samples, 7.99%)</title><rect x="90.2620%" y="293" width="7.9871%" height="15" fill="rgb(236,28,36)"/><text x="90.5120%" y="303.50">generate_cr..</text></g><g><title>hir_lowering (4,590,326 samples, 0.80%)</title><rect x="98.2490%" y="293" width="0.7965%" height="15" fill="rgb(249,185,26)"/><text x="98.4990%" y="303.50"></text></g><g><title>link_crate (2,366,934 samples, 0.41%)</title><rect x="99.0489%" y="277" width="0.4107%" height="15" fill="rgb(249,174,33)"/><text x="99.2989%" y="287.50"></text></g><g><title>link_binary (2,308,654 samples, 0.40%)</title><rect x="99.0590%" y="261" width="0.4006%" height="15" fill="rgb(233,201,37)"/><text x="99.3090%" y="271.50"></text></g><g><title>link_rlib (1,662,147 samples, 0.29%)</title><rect x="99.1712%" y="245" width="0.2884%" height="15" fill="rgb(221,78,26)"/><text x="99.4212%" y="255.50"></text></g><g><title>link (2,395,724 samples, 0.42%)</title><rect x="99.0456%" y="293" width="0.4157%" height="15" fill="rgb(250,127,30)"/><text x="99.2956%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,745,838 samples, 0.30%)</title><rect x="99.6036%" y="293" width="0.3029%" height="15" fill="rgb(230,49,44)"/><text x="99.8536%" y="303.50"></text></g><g><title>all (576,286,673 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (576,286,673 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="319.50">rustc</text></g></svg></svg>