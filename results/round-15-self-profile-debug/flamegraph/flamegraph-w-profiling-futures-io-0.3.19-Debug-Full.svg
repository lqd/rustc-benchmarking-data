<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (59,535,451 samples, 14.67%)</title><rect x="0.2008%" y="197" width="14.6746%" height="15" fill="rgb(227,0,7)"/><text x="0.4508%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (984,632 samples, 0.24%)</title><rect x="17.3745%" y="69" width="0.2427%" height="15" fill="rgb(217,0,24)"/><text x="17.6245%" y="79.50"></text></g><g><title>evaluate_obligation (895,508 samples, 0.22%)</title><rect x="17.3965%" y="53" width="0.2207%" height="15" fill="rgb(221,193,54)"/><text x="17.6465%" y="63.50"></text></g><g><title>needs_drop_raw (1,189,255 samples, 0.29%)</title><rect x="17.3253%" y="85" width="0.2931%" height="15" fill="rgb(248,212,6)"/><text x="17.5753%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (448,067 samples, 0.11%)</title><rect x="17.6682%" y="69" width="0.1104%" height="15" fill="rgb(208,68,35)"/><text x="17.9182%" y="79.50"></text></g><g><title>specialization_graph_of (1,259,923 samples, 0.31%)</title><rect x="17.7902%" y="69" width="0.3106%" height="15" fill="rgb(232,128,0)"/><text x="18.0402%" y="79.50"></text></g><g><title>impl_trait_ref (673,835 samples, 0.17%)</title><rect x="17.9346%" y="53" width="0.1661%" height="15" fill="rgb(207,160,47)"/><text x="18.1846%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (600,885 samples, 0.15%)</title><rect x="17.9526%" y="37" width="0.1481%" height="15" fill="rgb(228,23,34)"/><text x="18.2026%" y="47.50"></text></g><g><title>resolve_instance (1,984,892 samples, 0.49%)</title><rect x="17.6184%" y="85" width="0.4892%" height="15" fill="rgb(218,30,26)"/><text x="17.8684%" y="95.50"></text></g><g><title>mir_const (5,626,549 samples, 1.39%)</title><rect x="16.8220%" y="133" width="1.3869%" height="15" fill="rgb(220,122,19)"/><text x="17.0720%" y="143.50"></text></g><g><title>unsafety_check_result (5,176,364 samples, 1.28%)</title><rect x="16.9330%" y="117" width="1.2759%" height="15" fill="rgb(250,228,42)"/><text x="17.1830%" y="127.50"></text></g><g><title>mir_built (4,843,948 samples, 1.19%)</title><rect x="17.0149%" y="101" width="1.1940%" height="15" fill="rgb(240,193,28)"/><text x="17.2649%" y="111.50"></text></g><g><title>mir_promoted (6,041,410 samples, 1.49%)</title><rect x="16.7258%" y="149" width="1.4891%" height="15" fill="rgb(216,20,37)"/><text x="16.9758%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (690,977 samples, 0.17%)</title><rect x="18.3072%" y="149" width="0.1703%" height="15" fill="rgb(206,188,39)"/><text x="18.5572%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,921,215 samples, 0.47%)</title><rect x="18.4854%" y="149" width="0.4736%" height="15" fill="rgb(217,207,13)"/><text x="18.7354%" y="159.50"></text></g><g><title>MIR_borrow_checking (16,225,134 samples, 4.00%)</title><rect x="14.9614%" y="181" width="3.9993%" height="15" fill="rgb(231,73,38)"/><text x="15.2114%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (16,156,773 samples, 3.98%)</title><rect x="14.9782%" y="165" width="3.9824%" height="15" fill="rgb(225,20,46)"/><text x="15.2282%" y="175.50">mir_..</text></g><g><title>check_mod_attrs (610,837 samples, 0.15%)</title><rect x="19.0261%" y="165" width="0.1506%" height="15" fill="rgb(210,31,41)"/><text x="19.2761%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (531,505 samples, 0.13%)</title><rect x="19.2294%" y="165" width="0.1310%" height="15" fill="rgb(221,200,47)"/><text x="19.4794%" y="175.50"></text></g><g><title>misc_checking_1 (1,440,395 samples, 0.36%)</title><rect x="19.0191%" y="181" width="0.3550%" height="15" fill="rgb(226,26,5)"/><text x="19.2691%" y="191.50"></text></g><g><title>misc_checking_2 (462,135 samples, 0.11%)</title><rect x="19.3742%" y="181" width="0.1139%" height="15" fill="rgb(249,33,26)"/><text x="19.6242%" y="191.50"></text></g><g><title>lint_checking (430,704 samples, 0.11%)</title><rect x="19.5700%" y="165" width="0.1062%" height="15" fill="rgb(235,183,28)"/><text x="19.8200%" y="175.50"></text></g><g><title>privacy_checking_modules (489,535 samples, 0.12%)</title><rect x="19.7112%" y="165" width="0.1207%" height="15" fill="rgb(221,5,38)"/><text x="19.9612%" y="175.50"></text></g><g><title>check_mod_privacy (488,165 samples, 0.12%)</title><rect x="19.7115%" y="149" width="0.1203%" height="15" fill="rgb(247,18,42)"/><text x="19.9615%" y="159.50"></text></g><g><title>misc_checking_3 (1,403,714 samples, 0.35%)</title><rect x="19.4881%" y="181" width="0.3460%" height="15" fill="rgb(241,131,45)"/><text x="19.7381%" y="191.50"></text></g><g><title>coherent_trait (448,825 samples, 0.11%)</title><rect x="23.2139%" y="53" width="0.1106%" height="15" fill="rgb(249,31,29)"/><text x="23.4639%" y="63.50"></text></g><g><title>specialization_graph_of (447,375 samples, 0.11%)</title><rect x="23.2143%" y="37" width="0.1103%" height="15" fill="rgb(225,111,53)"/><text x="23.4643%" y="47.50"></text></g><g><title>adt_destructor (464,315 samples, 0.11%)</title><rect x="23.2116%" y="85" width="0.1144%" height="15" fill="rgb(238,160,17)"/><text x="23.4616%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (461,685 samples, 0.11%)</title><rect x="23.2123%" y="69" width="0.1138%" height="15" fill="rgb(214,148,48)"/><text x="23.4623%" y="79.50"></text></g><g><title>adt_dtorck_constraint (590,126 samples, 0.15%)</title><rect x="23.2032%" y="101" width="0.1455%" height="15" fill="rgb(232,36,49)"/><text x="23.4532%" y="111.50"></text></g><g><title>dropck_outlives (833,577 samples, 0.21%)</title><rect x="23.1484%" y="117" width="0.2055%" height="15" fill="rgb(209,103,24)"/><text x="23.3984%" y="127.50"></text></g><g><title>evaluate_obligation (1,200,721 samples, 0.30%)</title><rect x="23.3539%" y="117" width="0.2960%" height="15" fill="rgb(229,88,8)"/><text x="23.6039%" y="127.50"></text></g><g><title>evaluate_obligation (470,235 samples, 0.12%)</title><rect x="24.0233%" y="101" width="0.1159%" height="15" fill="rgb(213,181,19)"/><text x="24.2733%" y="111.50"></text></g><g><title>method_autoderef_steps (1,335,731 samples, 0.33%)</title><rect x="23.8175%" y="117" width="0.3292%" height="15" fill="rgb(254,191,54)"/><text x="24.0675%" y="127.50"></text></g><g><title>item_bodies_checking (17,598,258 samples, 4.34%)</title><rect x="19.9044%" y="165" width="4.3377%" height="15" fill="rgb(241,83,37)"/><text x="20.1544%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (17,596,168 samples, 4.34%)</title><rect x="19.9049%" y="149" width="4.3372%" height="15" fill="rgb(233,36,39)"/><text x="20.1549%" y="159.50">typec..</text></g><g><title>typeck (17,546,098 samples, 4.32%)</title><rect x="19.9172%" y="133" width="4.3249%" height="15" fill="rgb(226,3,54)"/><text x="20.1672%" y="143.50">typeck</text></g><g><title>item_types_checking (897,739 samples, 0.22%)</title><rect x="24.2421%" y="165" width="0.2213%" height="15" fill="rgb(245,192,40)"/><text x="24.4921%" y="175.50"></text></g><g><title>check_mod_item_types (895,719 samples, 0.22%)</title><rect x="24.2426%" y="149" width="0.2208%" height="15" fill="rgb(238,167,29)"/><text x="24.4926%" y="159.50"></text></g><g><title>fn_sig (531,272 samples, 0.13%)</title><rect x="24.5498%" y="133" width="0.1310%" height="15" fill="rgb(232,182,51)"/><text x="24.7998%" y="143.50"></text></g><g><title>generics_of (631,260 samples, 0.16%)</title><rect x="24.6807%" y="133" width="0.1556%" height="15" fill="rgb(231,60,39)"/><text x="24.9307%" y="143.50"></text></g><g><title>explicit_predicates_of (869,421 samples, 0.21%)</title><rect x="24.8914%" y="101" width="0.2143%" height="15" fill="rgb(208,69,12)"/><text x="25.1414%" y="111.50"></text></g><g><title>predicates_of (1,082,022 samples, 0.27%)</title><rect x="24.8433%" y="133" width="0.2667%" height="15" fill="rgb(235,93,37)"/><text x="25.0933%" y="143.50"></text></g><g><title>predicates_defined_on (1,009,412 samples, 0.25%)</title><rect x="24.8612%" y="117" width="0.2488%" height="15" fill="rgb(213,116,39)"/><text x="25.1112%" y="127.50"></text></g><g><title>type_collecting (2,973,830 samples, 0.73%)</title><rect x="24.4636%" y="165" width="0.7330%" height="15" fill="rgb(222,207,29)"/><text x="24.7136%" y="175.50"></text></g><g><title>collect_mod_item_types (2,958,690 samples, 0.73%)</title><rect x="24.4674%" y="149" width="0.7293%" height="15" fill="rgb(206,96,30)"/><text x="24.7174%" y="159.50"></text></g><g><title>evaluate_obligation (1,400,629 samples, 0.35%)</title><rect x="26.5768%" y="133" width="0.3452%" height="15" fill="rgb(218,138,4)"/><text x="26.8268%" y="143.50"></text></g><g><title>implied_outlives_bounds (615,530 samples, 0.15%)</title><rect x="26.9220%" y="133" width="0.1517%" height="15" fill="rgb(250,191,14)"/><text x="27.1720%" y="143.50"></text></g><g><title>param_env (550,976 samples, 0.14%)</title><rect x="27.0737%" y="133" width="0.1358%" height="15" fill="rgb(239,60,40)"/><text x="27.3237%" y="143.50"></text></g><g><title>check_impl_item_well_formed (8,140,872 samples, 2.01%)</title><rect x="25.2617%" y="149" width="2.0066%" height="15" fill="rgb(206,27,48)"/><text x="25.5117%" y="159.50">c..</text></g><g><title>param_env (537,698 samples, 0.13%)</title><rect x="27.8621%" y="133" width="0.1325%" height="15" fill="rgb(225,35,8)"/><text x="28.1121%" y="143.50"></text></g><g><title>check_item_well_formed (3,128,023 samples, 0.77%)</title><rect x="27.2683%" y="149" width="0.7710%" height="15" fill="rgb(250,213,24)"/><text x="27.5183%" y="159.50"></text></g><g><title>evaluate_obligation (1,075,231 samples, 0.27%)</title><rect x="28.5580%" y="133" width="0.2650%" height="15" fill="rgb(247,123,22)"/><text x="28.8080%" y="143.50"></text></g><g><title>analysis (57,216,707 samples, 14.10%)</title><rect x="14.8755%" y="197" width="14.1031%" height="15" fill="rgb(231,138,38)"/><text x="15.1255%" y="207.50">analysis</text></g><g><title>type_check_crate (37,099,494 samples, 9.14%)</title><rect x="19.8341%" y="181" width="9.1445%" height="15" fill="rgb(231,145,46)"/><text x="20.0841%" y="191.50">type_check_cr..</text></g><g><title>wf_checking (15,340,785 samples, 3.78%)</title><rect x="25.1973%" y="165" width="3.7813%" height="15" fill="rgb(251,118,11)"/><text x="25.4473%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (3,810,557 samples, 0.94%)</title><rect x="28.0393%" y="149" width="0.9392%" height="15" fill="rgb(217,147,25)"/><text x="28.2893%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (779,727 samples, 0.19%)</title><rect x="39.4297%" y="165" width="0.1922%" height="15" fill="rgb(247,81,37)"/><text x="39.6797%" y="175.50"></text></g><g><title>const_caller_location (545,017 samples, 0.13%)</title><rect x="39.6219%" y="165" width="0.1343%" height="15" fill="rgb(209,12,38)"/><text x="39.8719%" y="175.50"></text></g><g><title>layout_of (1,153,283 samples, 0.28%)</title><rect x="40.2630%" y="149" width="0.2843%" height="15" fill="rgb(227,1,9)"/><text x="40.5130%" y="159.50"></text></g><g><title>predicates_of (968,140 samples, 0.24%)</title><rect x="41.0425%" y="133" width="0.2386%" height="15" fill="rgb(248,47,43)"/><text x="41.2925%" y="143.50"></text></g><g><title>predicates_defined_on (729,197 samples, 0.18%)</title><rect x="41.1013%" y="117" width="0.1797%" height="15" fill="rgb(221,10,30)"/><text x="41.3513%" y="127.50"></text></g><g><title>param_env (2,992,507 samples, 0.74%)</title><rect x="40.5472%" y="149" width="0.7376%" height="15" fill="rgb(210,229,1)"/><text x="40.7972%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (440,774 samples, 0.11%)</title><rect x="41.2848%" y="149" width="0.1086%" height="15" fill="rgb(222,148,37)"/><text x="41.5348%" y="159.50"></text></g><g><title>fn_abi_of_instance (6,643,065 samples, 1.64%)</title><rect x="39.7586%" y="165" width="1.6374%" height="15" fill="rgb(234,67,33)"/><text x="40.0086%" y="175.50"></text></g><g><title>layout_of (1,247,769 samples, 0.31%)</title><rect x="41.5048%" y="165" width="0.3076%" height="15" fill="rgb(247,98,35)"/><text x="41.7548%" y="175.50"></text></g><g><title>codegen_module (49,667,833 samples, 12.24%)</title><rect x="29.6122%" y="181" width="12.2424%" height="15" fill="rgb(247,138,52)"/><text x="29.8622%" y="191.50">codegen_module</text></g><g><title>codegen_crate (52,300,778 samples, 12.89%)</title><rect x="28.9812%" y="197" width="12.8914%" height="15" fill="rgb(213,79,30)"/><text x="29.2312%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (158,926,042 samples, 39.17%)</title><rect x="41.9151%" y="181" width="39.1730%" height="15" fill="rgb(246,177,23)"/><text x="42.1651%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (150,591,278 samples, 37.12%)</title><rect x="43.9695%" y="165" width="37.1186%" height="15" fill="rgb(230,62,27)"/><text x="44.2195%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (171,014,783 samples, 42.15%)</title><rect x="41.8726%" y="197" width="42.1527%" height="15" fill="rgb(216,154,8)"/><text x="42.1226%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,916,399 samples, 2.94%)</title><rect x="81.0881%" y="181" width="2.9372%" height="15" fill="rgb(244,35,45)"/><text x="81.3381%" y="191.50">LL..</text></g><g><title>macro_expand_crate (15,528,287 samples, 3.83%)</title><rect x="84.1609%" y="181" width="3.8275%" height="15" fill="rgb(251,115,12)"/><text x="84.4109%" y="191.50">macr..</text></g><g><title>expand_crate (15,513,517 samples, 3.82%)</title><rect x="84.1646%" y="165" width="3.8239%" height="15" fill="rgb(240,54,50)"/><text x="84.4146%" y="175.50">expa..</text></g><g><title>metadata_register_crate (2,695,367 samples, 0.66%)</title><rect x="87.3241%" y="149" width="0.6644%" height="15" fill="rgb(233,84,52)"/><text x="87.5741%" y="159.50"></text></g><g><title>metadata_register_crate (968,010 samples, 0.24%)</title><rect x="87.7498%" y="133" width="0.2386%" height="15" fill="rgb(207,117,47)"/><text x="87.9998%" y="143.50"></text></g><g><title>late_resolve_crate (1,546,666 samples, 0.38%)</title><rect x="88.1245%" y="165" width="0.3812%" height="15" fill="rgb(249,43,39)"/><text x="88.3745%" y="175.50"></text></g><g><title>configure_and_expand (18,307,184 samples, 4.51%)</title><rect x="84.0253%" y="197" width="4.5125%" height="15" fill="rgb(209,38,44)"/><text x="84.2753%" y="207.50">confi..</text></g><g><title>resolve_crate (2,015,370 samples, 0.50%)</title><rect x="88.0410%" y="181" width="0.4968%" height="15" fill="rgb(236,212,23)"/><text x="88.2910%" y="191.50"></text></g><g><title>free_global_ctxt (3,978,270 samples, 0.98%)</title><rect x="88.6780%" y="197" width="0.9806%" height="15" fill="rgb(242,79,21)"/><text x="88.9280%" y="207.50"></text></g><g><title>item_attrs (1,032,010 samples, 0.25%)</title><rect x="90.2756%" y="101" width="0.2544%" height="15" fill="rgb(211,96,35)"/><text x="90.5256%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (992,539 samples, 0.24%)</title><rect x="90.2853%" y="85" width="0.2446%" height="15" fill="rgb(253,215,40)"/><text x="90.5353%" y="95.50"></text></g><g><title>item_attrs (452,344 samples, 0.11%)</title><rect x="90.5804%" y="69" width="0.1115%" height="15" fill="rgb(211,81,21)"/><text x="90.8304%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (448,644 samples, 0.11%)</title><rect x="90.5813%" y="53" width="0.1106%" height="15" fill="rgb(208,190,38)"/><text x="90.8313%" y="63.50"></text></g><g><title>codegen_fn_attrs (514,784 samples, 0.13%)</title><rect x="90.5722%" y="85" width="0.1269%" height="15" fill="rgb(235,213,38)"/><text x="90.8222%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,022,079 samples, 0.50%)</title><rect x="90.2161%" y="117" width="0.4984%" height="15" fill="rgb(237,122,38)"/><text x="90.4661%" y="127.50"></text></g><g><title>should_inherit_track_caller (748,734 samples, 0.18%)</title><rect x="90.5300%" y="101" width="0.1846%" height="15" fill="rgb(244,218,35)"/><text x="90.7800%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,568,235 samples, 0.39%)</title><rect x="90.9510%" y="101" width="0.3865%" height="15" fill="rgb(240,68,47)"/><text x="91.2010%" y="111.50"></text></g><g><title>optimized_mir (2,587,067 samples, 0.64%)</title><rect x="90.8211%" y="117" width="0.6377%" height="15" fill="rgb(210,16,53)"/><text x="91.0711%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (491,607 samples, 0.12%)</title><rect x="91.3376%" y="101" width="0.1212%" height="15" fill="rgb(235,124,12)"/><text x="91.5876%" y="111.50"></text></g><g><title>evaluate_obligation (506,737 samples, 0.12%)</title><rect x="91.9077%" y="85" width="0.1249%" height="15" fill="rgb(224,169,11)"/><text x="92.1577%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,606,824 samples, 0.64%)</title><rect x="91.6086%" y="101" width="0.6425%" height="15" fill="rgb(250,166,2)"/><text x="91.8586%" y="111.50"></text></g><g><title>trait_impls_of (631,267 samples, 0.16%)</title><rect x="92.0955%" y="85" width="0.1556%" height="15" fill="rgb(242,216,29)"/><text x="92.3455%" y="95.50"></text></g><g><title>impl_parent (1,012,029 samples, 0.25%)</title><rect x="92.8187%" y="85" width="0.2495%" height="15" fill="rgb(230,116,27)"/><text x="93.0687%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (659,403 samples, 0.16%)</title><rect x="92.9056%" y="69" width="0.1625%" height="15" fill="rgb(228,99,48)"/><text x="93.1556%" y="79.50"></text></g><g><title>specialization_graph_of (5,952,364 samples, 1.47%)</title><rect x="92.3889%" y="101" width="1.4672%" height="15" fill="rgb(253,11,6)"/><text x="92.6389%" y="111.50"></text></g><g><title>impl_trait_ref (3,196,668 samples, 0.79%)</title><rect x="93.0682%" y="85" width="0.7879%" height="15" fill="rgb(247,143,39)"/><text x="93.3182%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,831,893 samples, 0.70%)</title><rect x="93.1581%" y="69" width="0.6980%" height="15" fill="rgb(236,97,10)"/><text x="93.4081%" y="79.50"></text></g><g><title>resolve_instance (10,002,970 samples, 2.47%)</title><rect x="91.4588%" y="117" width="2.4656%" height="15" fill="rgb(233,208,19)"/><text x="91.7088%" y="127.50">re..</text></g><g><title>monomorphization_collector_graph_walk (16,944,761 samples, 4.18%)</title><rect x="89.9060%" y="133" width="4.1766%" height="15" fill="rgb(216,164,2)"/><text x="90.1560%" y="143.50">monom..</text></g><g><title>monomorphization_collector (16,969,081 samples, 4.18%)</title><rect x="89.9054%" y="149" width="4.1826%" height="15" fill="rgb(220,129,5)"/><text x="90.1554%" y="159.50">monom..</text></g><g><title>assert_symbols_are_distinct (1,266,163 samples, 0.31%)</title><rect x="94.0890%" y="133" width="0.3121%" height="15" fill="rgb(242,17,10)"/><text x="94.3390%" y="143.50"></text></g><g><title>symbol_name (1,157,812 samples, 0.29%)</title><rect x="94.1157%" y="117" width="0.2854%" height="15" fill="rgb(242,107,0)"/><text x="94.3657%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (18,888,280 samples, 4.66%)</title><rect x="89.8971%" y="165" width="4.6557%" height="15" fill="rgb(251,28,31)"/><text x="90.1471%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,885,409 samples, 0.46%)</title><rect x="94.0881%" y="149" width="0.4647%" height="15" fill="rgb(233,223,10)"/><text x="94.3381%" y="159.50"></text></g><g><title>cgu_partitioning (615,576 samples, 0.15%)</title><rect x="94.4011%" y="133" width="0.1517%" height="15" fill="rgb(215,21,27)"/><text x="94.6511%" y="143.50"></text></g><g><title>exported_symbols (18,989,831 samples, 4.68%)</title><rect x="89.8845%" y="181" width="4.6807%" height="15" fill="rgb(232,23,21)"/><text x="90.1345%" y="191.50">expor..</text></g><g><title>layout_of (603,734 samples, 0.15%)</title><rect x="94.8436%" y="165" width="0.1488%" height="15" fill="rgb(244,5,23)"/><text x="95.0936%" y="175.50"></text></g><g><title>optimized_mir (2,836,479 samples, 0.70%)</title><rect x="94.5785%" y="181" width="0.6992%" height="15" fill="rgb(226,81,46)"/><text x="94.8285%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,157,130 samples, 0.29%)</title><rect x="94.9924%" y="165" width="0.2852%" height="15" fill="rgb(247,70,30)"/><text x="95.2424%" y="175.50"></text></g><g><title>generate_crate_metadata (22,907,951 samples, 5.65%)</title><rect x="89.6586%" y="197" width="5.6465%" height="15" fill="rgb(212,68,19)"/><text x="89.9086%" y="207.50">generat..</text></g><g><title>hir_lowering (4,331,354 samples, 1.07%)</title><rect x="95.3051%" y="197" width="1.0676%" height="15" fill="rgb(240,187,13)"/><text x="95.5551%" y="207.50"></text></g><g><title>finish_ongoing_codegen (7,538,746 samples, 1.86%)</title><rect x="96.3760%" y="181" width="1.8582%" height="15" fill="rgb(223,113,26)"/><text x="96.6260%" y="191.50">f..</text></g><g><title>link_crate (1,846,989 samples, 0.46%)</title><rect x="98.2342%" y="181" width="0.4553%" height="15" fill="rgb(206,192,2)"/><text x="98.4842%" y="191.50"></text></g><g><title>link_binary (1,825,329 samples, 0.45%)</title><rect x="98.2396%" y="165" width="0.4499%" height="15" fill="rgb(241,108,4)"/><text x="98.4896%" y="175.50"></text></g><g><title>link_rlib (1,250,043 samples, 0.31%)</title><rect x="98.3814%" y="149" width="0.3081%" height="15" fill="rgb(247,173,49)"/><text x="98.6314%" y="159.50"></text></g><g><title>link (9,405,705 samples, 2.32%)</title><rect x="96.3727%" y="197" width="2.3184%" height="15" fill="rgb(224,114,35)"/><text x="96.6227%" y="207.50">l..</text></g><g><title>parse_crate (3,190,483 samples, 0.79%)</title><rect x="98.6910%" y="197" width="0.7864%" height="15" fill="rgb(245,159,27)"/><text x="98.9410%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,267,733 samples, 0.31%)</title><rect x="99.5711%" y="197" width="0.3125%" height="15" fill="rgb(245,172,44)"/><text x="99.8211%" y="207.50"></text></g><g><title>all (405,702,902 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (405,702,902 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>