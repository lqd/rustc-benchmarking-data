<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (35,591,903 samples, 11.80%)</title><rect x="0.1989%" y="197" width="11.7954%" height="15" fill="rgb(227,0,7)"/><text x="0.4489%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (697,917 samples, 0.23%)</title><rect x="15.0597%" y="85" width="0.2313%" height="15" fill="rgb(217,0,24)"/><text x="15.3097%" y="95.50"></text></g><g><title>is_copy_raw (487,086 samples, 0.16%)</title><rect x="15.1295%" y="69" width="0.1614%" height="15" fill="rgb(221,193,54)"/><text x="15.3795%" y="79.50"></text></g><g><title>evaluate_obligation (398,306 samples, 0.13%)</title><rect x="15.1590%" y="53" width="0.1320%" height="15" fill="rgb(248,212,6)"/><text x="15.4090%" y="63.50"></text></g><g><title>specialization_graph_of (947,970 samples, 0.31%)</title><rect x="15.3466%" y="69" width="0.3142%" height="15" fill="rgb(208,68,35)"/><text x="15.5966%" y="79.50"></text></g><g><title>impl_trait_ref (464,074 samples, 0.15%)</title><rect x="15.5069%" y="53" width="0.1538%" height="15" fill="rgb(232,128,0)"/><text x="15.7569%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (401,814 samples, 0.13%)</title><rect x="15.5276%" y="37" width="0.1332%" height="15" fill="rgb(207,160,47)"/><text x="15.7776%" y="47.50"></text></g><g><title>resolve_instance (1,152,003 samples, 0.38%)</title><rect x="15.2910%" y="85" width="0.3818%" height="15" fill="rgb(228,23,34)"/><text x="15.5410%" y="95.50"></text></g><g><title>thir_body (585,504 samples, 0.19%)</title><rect x="15.6758%" y="85" width="0.1940%" height="15" fill="rgb(218,30,26)"/><text x="15.9258%" y="95.50"></text></g><g><title>mir_const (4,819,365 samples, 1.60%)</title><rect x="14.2770%" y="133" width="1.5972%" height="15" fill="rgb(220,122,19)"/><text x="14.5270%" y="143.50"></text></g><g><title>unsafety_check_result (4,314,500 samples, 1.43%)</title><rect x="14.4443%" y="117" width="1.4299%" height="15" fill="rgb(250,228,42)"/><text x="14.6943%" y="127.50"></text></g><g><title>mir_built (3,915,986 samples, 1.30%)</title><rect x="14.5764%" y="101" width="1.2978%" height="15" fill="rgb(240,193,28)"/><text x="14.8264%" y="111.50"></text></g><g><title>mir_promoted (5,357,561 samples, 1.78%)</title><rect x="14.1443%" y="149" width="1.7755%" height="15" fill="rgb(216,20,37)"/><text x="14.3943%" y="159.50">m..</text></g><g><title>type_op_normalize_fn_sig (309,225 samples, 0.10%)</title><rect x="15.9825%" y="149" width="0.1025%" height="15" fill="rgb(206,188,39)"/><text x="16.2325%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,624,012 samples, 0.54%)</title><rect x="16.1372%" y="149" width="0.5382%" height="15" fill="rgb(217,207,13)"/><text x="16.3872%" y="159.50"></text></g><g><title>MIR_borrow_checking (13,841,520 samples, 4.59%)</title><rect x="12.0913%" y="181" width="4.5872%" height="15" fill="rgb(231,73,38)"/><text x="12.3413%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (13,787,289 samples, 4.57%)</title><rect x="12.1093%" y="165" width="4.5692%" height="15" fill="rgb(225,20,46)"/><text x="12.3593%" y="175.50">mir_b..</text></g><g><title>codegen_fn_attrs (328,693 samples, 0.11%)</title><rect x="16.8596%" y="149" width="0.1089%" height="15" fill="rgb(210,31,41)"/><text x="17.1096%" y="159.50"></text></g><g><title>check_mod_attrs (573,505 samples, 0.19%)</title><rect x="16.7785%" y="165" width="0.1901%" height="15" fill="rgb(221,200,47)"/><text x="17.0285%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (328,203 samples, 0.11%)</title><rect x="17.0196%" y="165" width="0.1088%" height="15" fill="rgb(226,26,5)"/><text x="17.2696%" y="175.50"></text></g><g><title>misc_checking_1 (1,122,611 samples, 0.37%)</title><rect x="16.7717%" y="181" width="0.3720%" height="15" fill="rgb(249,33,26)"/><text x="17.0217%" y="191.50"></text></g><g><title>mir_borrowck (366,844 samples, 0.12%)</title><rect x="17.4311%" y="53" width="0.1216%" height="15" fill="rgb(235,183,28)"/><text x="17.6811%" y="63.50"></text></g><g><title>eval_to_const_value_raw (655,467 samples, 0.22%)</title><rect x="17.3359%" y="133" width="0.2172%" height="15" fill="rgb(221,5,38)"/><text x="17.5859%" y="143.50"></text></g><g><title>eval_to_const_value_raw (645,837 samples, 0.21%)</title><rect x="17.3391%" y="117" width="0.2140%" height="15" fill="rgb(247,18,42)"/><text x="17.5891%" y="127.50"></text></g><g><title>eval_to_allocation_raw (637,127 samples, 0.21%)</title><rect x="17.3420%" y="101" width="0.2111%" height="15" fill="rgb(241,131,45)"/><text x="17.5920%" y="111.50"></text></g><g><title>mir_for_ctfe (527,166 samples, 0.17%)</title><rect x="17.3784%" y="85" width="0.1747%" height="15" fill="rgb(249,31,29)"/><text x="17.6284%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (483,296 samples, 0.16%)</title><rect x="17.3930%" y="69" width="0.1602%" height="15" fill="rgb(225,111,53)"/><text x="17.6430%" y="79.50"></text></g><g><title>misc_checking_2 (1,483,935 samples, 0.49%)</title><rect x="17.1437%" y="181" width="0.4918%" height="15" fill="rgb(238,160,17)"/><text x="17.3937%" y="191.50"></text></g><g><title>match_checking (1,259,812 samples, 0.42%)</title><rect x="17.2180%" y="165" width="0.4175%" height="15" fill="rgb(214,148,48)"/><text x="17.4680%" y="175.50"></text></g><g><title>check_match (1,242,562 samples, 0.41%)</title><rect x="17.2237%" y="149" width="0.4118%" height="15" fill="rgb(232,36,49)"/><text x="17.4737%" y="159.50"></text></g><g><title>crate_lints (2,096,092 samples, 0.69%)</title><rect x="17.7491%" y="149" width="0.6947%" height="15" fill="rgb(209,103,24)"/><text x="17.9991%" y="159.50"></text></g><g><title>type_of (1,399,056 samples, 0.46%)</title><rect x="17.9801%" y="133" width="0.4637%" height="15" fill="rgb(229,88,8)"/><text x="18.2301%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (918,270 samples, 0.30%)</title><rect x="18.1394%" y="117" width="0.3043%" height="15" fill="rgb(213,181,19)"/><text x="18.3894%" y="127.50"></text></g><g><title>lint_checking (2,330,834 samples, 0.77%)</title><rect x="17.7485%" y="165" width="0.7725%" height="15" fill="rgb(254,191,54)"/><text x="17.9985%" y="175.50"></text></g><g><title>privacy_checking_modules (398,164 samples, 0.13%)</title><rect x="18.5532%" y="165" width="0.1320%" height="15" fill="rgb(241,83,37)"/><text x="18.8032%" y="175.50"></text></g><g><title>check_mod_privacy (396,194 samples, 0.13%)</title><rect x="18.5539%" y="149" width="0.1313%" height="15" fill="rgb(233,36,39)"/><text x="18.8039%" y="159.50"></text></g><g><title>misc_checking_3 (3,180,963 samples, 1.05%)</title><rect x="17.6355%" y="181" width="1.0542%" height="15" fill="rgb(226,3,54)"/><text x="17.8855%" y="191.50"></text></g><g><title>impl_trait_ref (522,246 samples, 0.17%)</title><rect x="18.8223%" y="85" width="0.1731%" height="15" fill="rgb(245,192,40)"/><text x="19.0723%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (477,846 samples, 0.16%)</title><rect x="18.8371%" y="69" width="0.1584%" height="15" fill="rgb(238,167,29)"/><text x="19.0871%" y="79.50"></text></g><g><title>adt_destructor (891,459 samples, 0.30%)</title><rect x="18.7224%" y="133" width="0.2954%" height="15" fill="rgb(232,182,51)"/><text x="18.9724%" y="143.50"></text></g><g><title>coherent_trait (881,089 samples, 0.29%)</title><rect x="18.7259%" y="117" width="0.2920%" height="15" fill="rgb(231,60,39)"/><text x="18.9759%" y="127.50"></text></g><g><title>specialization_graph_of (878,609 samples, 0.29%)</title><rect x="18.7267%" y="101" width="0.2912%" height="15" fill="rgb(208,69,12)"/><text x="18.9767%" y="111.50"></text></g><g><title>impl_parent (4,521,098 samples, 1.50%)</title><rect x="21.5631%" y="117" width="1.4983%" height="15" fill="rgb(235,93,37)"/><text x="21.8131%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,144,871 samples, 0.71%)</title><rect x="22.3505%" y="101" width="0.7108%" height="15" fill="rgb(213,116,39)"/><text x="22.6005%" y="111.50"></text></g><g><title>impl_trait_ref (9,735,470 samples, 3.23%)</title><rect x="23.0614%" y="117" width="3.2264%" height="15" fill="rgb(222,207,29)"/><text x="23.3114%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,829,443 samples, 2.59%)</title><rect x="23.6930%" y="101" width="2.5947%" height="15" fill="rgb(206,96,30)"/><text x="23.9430%" y="111.50">me..</text></g><g><title>coherent_trait (24,437,508 samples, 8.10%)</title><rect x="18.7079%" y="149" width="8.0988%" height="15" fill="rgb(218,138,4)"/><text x="18.9579%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (23,394,368 samples, 7.75%)</title><rect x="19.0536%" y="133" width="7.7530%" height="15" fill="rgb(250,191,14)"/><text x="19.3036%" y="143.50">specializat..</text></g><g><title>trait_impls_of (1,563,036 samples, 0.52%)</title><rect x="26.2887%" y="117" width="0.5180%" height="15" fill="rgb(239,60,40)"/><text x="26.5387%" y="127.50"></text></g><g><title>implementations_of_trait (383,153 samples, 0.13%)</title><rect x="26.6797%" y="101" width="0.1270%" height="15" fill="rgb(206,27,48)"/><text x="26.9297%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (326,963 samples, 0.11%)</title><rect x="26.6983%" y="85" width="0.1084%" height="15" fill="rgb(225,35,8)"/><text x="26.9483%" y="95.50"></text></g><g><title>coherence_checking (24,508,080 samples, 8.12%)</title><rect x="18.7010%" y="165" width="8.1221%" height="15" fill="rgb(250,213,24)"/><text x="18.9510%" y="175.50">coherence_c..</text></g><g><title>associated_item (511,026 samples, 0.17%)</title><rect x="29.5455%" y="101" width="0.1694%" height="15" fill="rgb(247,123,22)"/><text x="29.7955%" y="111.50"></text></g><g><title>associated_items (616,566 samples, 0.20%)</title><rect x="29.5155%" y="117" width="0.2043%" height="15" fill="rgb(231,138,38)"/><text x="29.7655%" y="127.50"></text></g><g><title>predicates_of (415,506 samples, 0.14%)</title><rect x="30.3768%" y="101" width="0.1377%" height="15" fill="rgb(231,145,46)"/><text x="30.6268%" y="111.50"></text></g><g><title>specializes (898,710 samples, 0.30%)</title><rect x="30.5145%" y="101" width="0.2978%" height="15" fill="rgb(251,118,11)"/><text x="30.7645%" y="111.50"></text></g><g><title>param_env (556,507 samples, 0.18%)</title><rect x="30.6279%" y="85" width="0.1844%" height="15" fill="rgb(217,147,25)"/><text x="30.8779%" y="95.50"></text></g><g><title>trait_impls_of (404,724 samples, 0.13%)</title><rect x="30.8154%" y="101" width="0.1341%" height="15" fill="rgb(247,81,37)"/><text x="31.0654%" y="111.50"></text></g><g><title>evaluate_obligation (3,536,586 samples, 1.17%)</title><rect x="29.7802%" y="117" width="1.1720%" height="15" fill="rgb(209,12,38)"/><text x="30.0302%" y="127.50"></text></g><g><title>evaluate_obligation (792,784 samples, 0.26%)</title><rect x="33.4969%" y="101" width="0.2627%" height="15" fill="rgb(227,1,9)"/><text x="33.7469%" y="111.50"></text></g><g><title>typeck (8,588,146 samples, 2.85%)</title><rect x="31.2637%" y="117" width="2.8462%" height="15" fill="rgb(248,47,43)"/><text x="31.5137%" y="127.50">ty..</text></g><g><title>item_bodies_checking (21,984,204 samples, 7.29%)</title><rect x="26.8307%" y="165" width="7.2857%" height="15" fill="rgb(221,10,30)"/><text x="27.0807%" y="175.50">item_bodie..</text></g><g><title>typeck_item_bodies (21,982,134 samples, 7.29%)</title><rect x="26.8314%" y="149" width="7.2850%" height="15" fill="rgb(210,229,1)"/><text x="27.0814%" y="159.50">typeck_ite..</text></g><g><title>typeck (21,952,734 samples, 7.28%)</title><rect x="26.8412%" y="133" width="7.2753%" height="15" fill="rgb(222,148,37)"/><text x="27.0912%" y="143.50">typeck</text></g><g><title>item_types_checking (339,623 samples, 0.11%)</title><rect x="34.1165%" y="165" width="0.1126%" height="15" fill="rgb(234,67,33)"/><text x="34.3665%" y="175.50"></text></g><g><title>check_mod_item_types (337,743 samples, 0.11%)</title><rect x="34.1171%" y="149" width="0.1119%" height="15" fill="rgb(247,98,35)"/><text x="34.3671%" y="159.50"></text></g><g><title>is_late_bound_map (396,393 samples, 0.13%)</title><rect x="34.4186%" y="117" width="0.1314%" height="15" fill="rgb(247,138,52)"/><text x="34.6686%" y="127.50"></text></g><g><title>resolve_lifetimes (379,323 samples, 0.13%)</title><rect x="34.4243%" y="101" width="0.1257%" height="15" fill="rgb(213,79,30)"/><text x="34.6743%" y="111.50"></text></g><g><title>generics_of (727,025 samples, 0.24%)</title><rect x="34.3781%" y="133" width="0.2409%" height="15" fill="rgb(246,177,23)"/><text x="34.6281%" y="143.50"></text></g><g><title>predicates_of (378,504 samples, 0.13%)</title><rect x="34.6363%" y="133" width="0.1254%" height="15" fill="rgb(230,62,27)"/><text x="34.8863%" y="143.50"></text></g><g><title>predicates_defined_on (324,893 samples, 0.11%)</title><rect x="34.6540%" y="117" width="0.1077%" height="15" fill="rgb(216,154,8)"/><text x="34.9040%" y="127.50"></text></g><g><title>type_collecting (1,709,107 samples, 0.57%)</title><rect x="34.2292%" y="165" width="0.5664%" height="15" fill="rgb(244,35,45)"/><text x="34.4792%" y="175.50"></text></g><g><title>collect_mod_item_types (1,700,637 samples, 0.56%)</title><rect x="34.2320%" y="149" width="0.5636%" height="15" fill="rgb(251,115,12)"/><text x="34.4820%" y="159.50"></text></g><g><title>check_impl_item_well_formed (729,579 samples, 0.24%)</title><rect x="34.8185%" y="149" width="0.2418%" height="15" fill="rgb(240,54,50)"/><text x="35.0685%" y="159.50"></text></g><g><title>analysis (70,667,489 samples, 23.42%)</title><rect x="11.9943%" y="197" width="23.4197%" height="15" fill="rgb(233,84,52)"/><text x="12.2443%" y="207.50">analysis</text></g><g><title>type_check_crate (50,464,384 samples, 16.72%)</title><rect x="18.6897%" y="181" width="16.7242%" height="15" fill="rgb(207,117,47)"/><text x="18.9397%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,862,049 samples, 0.62%)</title><rect x="34.7968%" y="165" width="0.6171%" height="15" fill="rgb(249,43,39)"/><text x="35.0468%" y="175.50"></text></g><g><title>check_item_well_formed (1,067,210 samples, 0.35%)</title><rect x="35.0602%" y="149" width="0.3537%" height="15" fill="rgb(209,38,44)"/><text x="35.3102%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (452,934 samples, 0.15%)</title><rect x="44.7673%" y="165" width="0.1501%" height="15" fill="rgb(236,212,23)"/><text x="45.0173%" y="175.50"></text></g><g><title>const_caller_location (467,755 samples, 0.16%)</title><rect x="44.9174%" y="165" width="0.1550%" height="15" fill="rgb(242,79,21)"/><text x="45.1674%" y="175.50"></text></g><g><title>item_attrs (416,233 samples, 0.14%)</title><rect x="45.7028%" y="133" width="0.1379%" height="15" fill="rgb(211,96,35)"/><text x="45.9528%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (401,163 samples, 0.13%)</title><rect x="45.7077%" y="117" width="0.1329%" height="15" fill="rgb(253,215,40)"/><text x="45.9577%" y="127.50"></text></g><g><title>codegen_fn_attrs (612,915 samples, 0.20%)</title><rect x="45.6664%" y="149" width="0.2031%" height="15" fill="rgb(211,81,21)"/><text x="45.9164%" y="159.50"></text></g><g><title>layout_of (1,149,615 samples, 0.38%)</title><rect x="45.8973%" y="149" width="0.3810%" height="15" fill="rgb(208,190,38)"/><text x="46.1473%" y="159.50"></text></g><g><title>predicates_of (1,107,394 samples, 0.37%)</title><rect x="46.6701%" y="133" width="0.3670%" height="15" fill="rgb(235,213,38)"/><text x="46.9201%" y="143.50"></text></g><g><title>predicates_defined_on (466,309 samples, 0.15%)</title><rect x="46.8825%" y="117" width="0.1545%" height="15" fill="rgb(237,122,38)"/><text x="47.1325%" y="127.50"></text></g><g><title>param_env (2,300,985 samples, 0.76%)</title><rect x="46.2783%" y="149" width="0.7626%" height="15" fill="rgb(244,218,35)"/><text x="46.5283%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (910,338 samples, 0.30%)</title><rect x="47.0409%" y="149" width="0.3017%" height="15" fill="rgb(240,68,47)"/><text x="47.2909%" y="159.50"></text></g><g><title>normalize_projection_ty (773,146 samples, 0.26%)</title><rect x="47.0863%" y="133" width="0.2562%" height="15" fill="rgb(210,16,53)"/><text x="47.3363%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,778,341 samples, 2.25%)</title><rect x="45.1643%" y="165" width="2.2464%" height="15" fill="rgb(235,124,12)"/><text x="45.4143%" y="175.50">f..</text></g><g><title>layout_of (333,093 samples, 0.11%)</title><rect x="47.7225%" y="133" width="0.1104%" height="15" fill="rgb(224,169,11)"/><text x="47.9725%" y="143.50"></text></g><g><title>layout_of (515,205 samples, 0.17%)</title><rect x="47.6857%" y="149" width="0.1707%" height="15" fill="rgb(250,166,2)"/><text x="47.9357%" y="159.50"></text></g><g><title>layout_of (1,241,298 samples, 0.41%)</title><rect x="47.4764%" y="165" width="0.4114%" height="15" fill="rgb(242,216,29)"/><text x="47.7264%" y="175.50"></text></g><g><title>symbol_name (771,228 samples, 0.26%)</title><rect x="47.8944%" y="165" width="0.2556%" height="15" fill="rgb(230,116,27)"/><text x="48.1444%" y="175.50"></text></g><g><title>codegen_module (36,007,385 samples, 11.93%)</title><rect x="36.2304%" y="181" width="11.9331%" height="15" fill="rgb(228,99,48)"/><text x="36.4804%" y="191.50">codegen_module</text></g><g><title>codegen_crate (38,634,203 samples, 12.80%)</title><rect x="35.4168%" y="197" width="12.8036%" height="15" fill="rgb(253,11,6)"/><text x="35.6668%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (106,439,203 samples, 35.27%)</title><rect x="48.3258%" y="181" width="35.2747%" height="15" fill="rgb(247,143,39)"/><text x="48.5758%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (101,098,891 samples, 33.50%)</title><rect x="50.0956%" y="165" width="33.5048%" height="15" fill="rgb(236,97,10)"/><text x="50.3456%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (110,958,128 samples, 36.77%)</title><rect x="48.2204%" y="197" width="36.7723%" height="15" fill="rgb(233,208,19)"/><text x="48.4704%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,201,013 samples, 1.39%)</title><rect x="83.6004%" y="181" width="1.3922%" height="15" fill="rgb(216,164,2)"/><text x="83.8504%" y="191.50"></text></g><g><title>metadata_load_macro (396,654 samples, 0.13%)</title><rect x="88.1202%" y="149" width="0.1315%" height="15" fill="rgb(220,129,5)"/><text x="88.3702%" y="159.50"></text></g><g><title>macro_expand_crate (9,638,238 samples, 3.19%)</title><rect x="85.1278%" y="181" width="3.1942%" height="15" fill="rgb(242,17,10)"/><text x="85.3778%" y="191.50">mac..</text></g><g><title>expand_crate (9,617,468 samples, 3.19%)</title><rect x="85.1347%" y="165" width="3.1873%" height="15" fill="rgb(242,107,0)"/><text x="85.3847%" y="175.50">exp..</text></g><g><title>late_resolve_crate (5,106,153 samples, 1.69%)</title><rect x="88.4652%" y="165" width="1.6922%" height="15" fill="rgb(251,28,31)"/><text x="88.7152%" y="175.50"></text></g><g><title>metadata_register_crate (2,179,903 samples, 0.72%)</title><rect x="89.4350%" y="149" width="0.7224%" height="15" fill="rgb(233,223,10)"/><text x="89.6850%" y="159.50"></text></g><g><title>metadata_register_crate (1,609,776 samples, 0.53%)</title><rect x="89.6239%" y="133" width="0.5335%" height="15" fill="rgb(215,21,27)"/><text x="89.8739%" y="143.50"></text></g><g><title>metadata_register_crate (664,036 samples, 0.22%)</title><rect x="89.9373%" y="117" width="0.2201%" height="15" fill="rgb(232,23,21)"/><text x="90.1873%" y="127.50"></text></g><g><title>configure_and_expand (15,693,960 samples, 5.20%)</title><rect x="84.9927%" y="197" width="5.2011%" height="15" fill="rgb(244,5,23)"/><text x="85.2427%" y="207.50">config..</text></g><g><title>resolve_crate (5,465,966 samples, 1.81%)</title><rect x="88.3823%" y="181" width="1.8115%" height="15" fill="rgb(226,81,46)"/><text x="88.6323%" y="191.50">r..</text></g><g><title>early_lint_checks (372,764 samples, 0.12%)</title><rect x="90.2514%" y="197" width="0.1235%" height="15" fill="rgb(247,70,30)"/><text x="90.5014%" y="207.50"></text></g><g><title>free_global_ctxt (4,443,415 samples, 1.47%)</title><rect x="90.3749%" y="197" width="1.4726%" height="15" fill="rgb(212,68,19)"/><text x="90.6249%" y="207.50"></text></g><g><title>item_attrs (810,678 samples, 0.27%)</title><rect x="92.4216%" y="101" width="0.2687%" height="15" fill="rgb(240,187,13)"/><text x="92.6716%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (794,957 samples, 0.26%)</title><rect x="92.4268%" y="85" width="0.2635%" height="15" fill="rgb(223,113,26)"/><text x="92.6768%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,062,163 samples, 0.35%)</title><rect x="92.3798%" y="117" width="0.3520%" height="15" fill="rgb(206,192,2)"/><text x="92.6298%" y="127.50"></text></g><g><title>layout_of (434,872 samples, 0.14%)</title><rect x="93.2135%" y="101" width="0.1441%" height="15" fill="rgb(241,108,4)"/><text x="93.4635%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (671,475 samples, 0.22%)</title><rect x="93.3576%" y="101" width="0.2225%" height="15" fill="rgb(247,173,49)"/><text x="93.6076%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,153,992 samples, 0.38%)</title><rect x="93.5801%" y="101" width="0.3824%" height="15" fill="rgb(224,114,35)"/><text x="93.8301%" y="111.50"></text></g><g><title>optimized_mir (4,007,090 samples, 1.33%)</title><rect x="92.8398%" y="117" width="1.3280%" height="15" fill="rgb(245,159,27)"/><text x="93.0898%" y="127.50"></text></g><g><title>vtable_allocation (432,424 samples, 0.14%)</title><rect x="94.0245%" y="101" width="0.1433%" height="15" fill="rgb(245,172,44)"/><text x="94.2745%" y="111.50"></text></g><g><title>evaluate_obligation (452,306 samples, 0.15%)</title><rect x="94.6060%" y="85" width="0.1499%" height="15" fill="rgb(236,23,11)"/><text x="94.8560%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,526,677 samples, 0.51%)</title><rect x="94.3122%" y="101" width="0.5060%" height="15" fill="rgb(205,117,38)"/><text x="94.5622%" y="111.50"></text></g><g><title>specialization_graph_of (1,797,659 samples, 0.60%)</title><rect x="94.9223%" y="101" width="0.5958%" height="15" fill="rgb(237,72,25)"/><text x="95.1723%" y="111.50"></text></g><g><title>impl_trait_ref (1,035,391 samples, 0.34%)</title><rect x="95.1749%" y="85" width="0.3431%" height="15" fill="rgb(244,70,9)"/><text x="95.4249%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (909,690 samples, 0.30%)</title><rect x="95.2165%" y="69" width="0.3015%" height="15" fill="rgb(217,125,39)"/><text x="95.4665%" y="79.50"></text></g><g><title>resolve_instance (4,228,100 samples, 1.40%)</title><rect x="94.1678%" y="117" width="1.4012%" height="15" fill="rgb(235,36,10)"/><text x="94.4178%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (1,011,211 samples, 0.34%)</title><rect x="95.6024%" y="117" width="0.3351%" height="15" fill="rgb(251,123,47)"/><text x="95.8524%" y="127.50"></text></g><g><title>upstream_monomorphizations (994,701 samples, 0.33%)</title><rect x="95.6079%" y="101" width="0.3297%" height="15" fill="rgb(221,13,13)"/><text x="95.8579%" y="111.50"></text></g><g><title>exported_symbols (815,639 samples, 0.27%)</title><rect x="95.6672%" y="85" width="0.2703%" height="15" fill="rgb(238,131,9)"/><text x="95.9172%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (810,129 samples, 0.27%)</title><rect x="95.6690%" y="69" width="0.2685%" height="15" fill="rgb(211,50,8)"/><text x="95.9190%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (11,778,140 samples, 3.90%)</title><rect x="92.0936%" y="133" width="3.9034%" height="15" fill="rgb(245,182,24)"/><text x="92.3436%" y="143.50">mono..</text></g><g><title>monomorphization_collector (11,801,270 samples, 3.91%)</title><rect x="92.0928%" y="149" width="3.9110%" height="15" fill="rgb(242,14,37)"/><text x="92.3428%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (816,238 samples, 0.27%)</title><rect x="96.0049%" y="133" width="0.2705%" height="15" fill="rgb(246,228,12)"/><text x="96.2549%" y="143.50"></text></g><g><title>symbol_name (751,086 samples, 0.25%)</title><rect x="96.0265%" y="117" width="0.2489%" height="15" fill="rgb(213,55,15)"/><text x="96.2765%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (13,033,202 samples, 4.32%)</title><rect x="92.0803%" y="165" width="4.3193%" height="15" fill="rgb(209,9,3)"/><text x="92.3303%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,194,062 samples, 0.40%)</title><rect x="96.0038%" y="149" width="0.3957%" height="15" fill="rgb(230,59,30)"/><text x="96.2538%" y="159.50"></text></g><g><title>cgu_partitioning (374,514 samples, 0.12%)</title><rect x="96.2754%" y="133" width="0.1241%" height="15" fill="rgb(209,121,21)"/><text x="96.5254%" y="143.50"></text></g><g><title>exported_symbols (13,091,424 samples, 4.34%)</title><rect x="92.0709%" y="181" width="4.3386%" height="15" fill="rgb(220,109,13)"/><text x="92.3209%" y="191.50">expor..</text></g><g><title>optimized_mir (1,379,575 samples, 0.46%)</title><rect x="96.4220%" y="181" width="0.4572%" height="15" fill="rgb(232,18,1)"/><text x="96.6720%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (578,375 samples, 0.19%)</title><rect x="96.6876%" y="165" width="0.1917%" height="15" fill="rgb(215,41,42)"/><text x="96.9376%" y="175.50"></text></g><g><title>generate_crate_metadata (15,204,925 samples, 5.04%)</title><rect x="91.8475%" y="197" width="5.0390%" height="15" fill="rgb(224,123,36)"/><text x="92.0975%" y="207.50">genera..</text></g><g><title>hir_lowering (2,299,524 samples, 0.76%)</title><rect x="96.8865%" y="197" width="0.7621%" height="15" fill="rgb(240,125,3)"/><text x="97.1365%" y="207.50"></text></g><g><title>finish_ongoing_codegen (1,389,525 samples, 0.46%)</title><rect x="97.6690%" y="181" width="0.4605%" height="15" fill="rgb(205,98,50)"/><text x="97.9190%" y="191.50"></text></g><g><title>link_crate (1,537,006 samples, 0.51%)</title><rect x="98.1295%" y="181" width="0.5094%" height="15" fill="rgb(205,185,37)"/><text x="98.3795%" y="191.50"></text></g><g><title>link_binary (1,521,075 samples, 0.50%)</title><rect x="98.1348%" y="165" width="0.5041%" height="15" fill="rgb(238,207,15)"/><text x="98.3848%" y="175.50"></text></g><g><title>link_rlib (981,700 samples, 0.33%)</title><rect x="98.3136%" y="149" width="0.3253%" height="15" fill="rgb(213,199,42)"/><text x="98.5636%" y="159.50"></text></g><g><title>link (2,996,111 samples, 0.99%)</title><rect x="97.6486%" y="197" width="0.9929%" height="15" fill="rgb(235,201,11)"/><text x="97.8986%" y="207.50"></text></g><g><title>parse_crate (2,320,554 samples, 0.77%)</title><rect x="98.6415%" y="197" width="0.7690%" height="15" fill="rgb(207,46,11)"/><text x="98.8915%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,089,331 samples, 0.36%)</title><rect x="99.5061%" y="197" width="0.3610%" height="15" fill="rgb(241,35,35)"/><text x="99.7561%" y="207.50"></text></g><g><title>all (301,744,161 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (301,744,161 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>