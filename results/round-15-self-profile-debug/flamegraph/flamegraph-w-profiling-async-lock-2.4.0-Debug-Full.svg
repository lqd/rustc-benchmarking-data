<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (32,565,566 samples, 10.28%)</title><rect x="0.1586%" y="245" width="10.2831%" height="15" fill="rgb(227,0,7)"/><text x="0.4086%" y="255.50">LLVM_passes</text></g><g><title>resolve_instance (483,336 samples, 0.15%)</title><rect x="14.9104%" y="133" width="0.1526%" height="15" fill="rgb(217,0,24)"/><text x="15.1604%" y="143.50"></text></g><g><title>thir_body (807,672 samples, 0.26%)</title><rect x="15.0699%" y="133" width="0.2550%" height="15" fill="rgb(221,193,54)"/><text x="15.3199%" y="143.50"></text></g><g><title>mir_const (4,762,199 samples, 1.50%)</title><rect x="13.8251%" y="181" width="1.5037%" height="15" fill="rgb(248,212,6)"/><text x="14.0751%" y="191.50"></text></g><g><title>unsafety_check_result (4,053,400 samples, 1.28%)</title><rect x="14.0489%" y="165" width="1.2799%" height="15" fill="rgb(208,68,35)"/><text x="14.2989%" y="175.50"></text></g><g><title>mir_built (3,538,214 samples, 1.12%)</title><rect x="14.2116%" y="149" width="1.1172%" height="15" fill="rgb(232,128,0)"/><text x="14.4616%" y="159.50"></text></g><g><title>mir_const (455,855 samples, 0.14%)</title><rect x="15.5091%" y="165" width="0.1439%" height="15" fill="rgb(207,160,47)"/><text x="15.7591%" y="175.50"></text></g><g><title>unsafety_check_result (375,923 samples, 0.12%)</title><rect x="15.5344%" y="149" width="0.1187%" height="15" fill="rgb(228,23,34)"/><text x="15.7844%" y="159.50"></text></g><g><title>mir_built (332,453 samples, 0.10%)</title><rect x="15.5481%" y="133" width="0.1050%" height="15" fill="rgb(218,30,26)"/><text x="15.7981%" y="143.50"></text></g><g><title>mir_promoted (6,468,535 samples, 2.04%)</title><rect x="13.6211%" y="197" width="2.0425%" height="15" fill="rgb(220,122,19)"/><text x="13.8711%" y="207.50">m..</text></g><g><title>mir_const_qualif (1,060,283 samples, 0.33%)</title><rect x="15.3288%" y="181" width="0.3348%" height="15" fill="rgb(250,228,42)"/><text x="15.5788%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (370,195 samples, 0.12%)</title><rect x="15.7472%" y="197" width="0.1169%" height="15" fill="rgb(240,193,28)"/><text x="15.9972%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,232,730 samples, 0.39%)</title><rect x="15.8753%" y="197" width="0.3893%" height="15" fill="rgb(216,20,37)"/><text x="16.1253%" y="207.50"></text></g><g><title>MIR_borrow_checking (18,100,591 samples, 5.72%)</title><rect x="10.5505%" y="229" width="5.7155%" height="15" fill="rgb(206,188,39)"/><text x="10.8005%" y="239.50">MIR_bor..</text></g><g><title>mir_borrowck (17,976,121 samples, 5.68%)</title><rect x="10.5898%" y="213" width="5.6762%" height="15" fill="rgb(217,207,13)"/><text x="10.8398%" y="223.50">mir_bor..</text></g><g><title>MIR_effect_checking (417,344 samples, 0.13%)</title><rect x="16.2661%" y="229" width="0.1318%" height="15" fill="rgb(231,73,38)"/><text x="16.5161%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (344,563 samples, 0.11%)</title><rect x="16.2890%" y="213" width="0.1088%" height="15" fill="rgb(225,20,46)"/><text x="16.5390%" y="223.50"></text></g><g><title>codegen_fn_attrs (354,606 samples, 0.11%)</title><rect x="16.5620%" y="197" width="0.1120%" height="15" fill="rgb(210,31,41)"/><text x="16.8120%" y="207.50"></text></g><g><title>check_mod_attrs (621,817 samples, 0.20%)</title><rect x="16.4776%" y="213" width="0.1963%" height="15" fill="rgb(221,200,47)"/><text x="16.7276%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (703,997 samples, 0.22%)</title><rect x="16.7528%" y="213" width="0.2223%" height="15" fill="rgb(226,26,5)"/><text x="17.0028%" y="223.50"></text></g><g><title>misc_checking_1 (1,668,897 samples, 0.53%)</title><rect x="16.4692%" y="229" width="0.5270%" height="15" fill="rgb(249,33,26)"/><text x="16.7192%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (588,326 samples, 0.19%)</title><rect x="16.9966%" y="213" width="0.1858%" height="15" fill="rgb(235,183,28)"/><text x="17.2466%" y="223.50"></text></g><g><title>check_mod_liveness (465,343 samples, 0.15%)</title><rect x="17.0355%" y="197" width="0.1469%" height="15" fill="rgb(221,5,38)"/><text x="17.2855%" y="207.50"></text></g><g><title>misc_checking_2 (1,106,662 samples, 0.35%)</title><rect x="16.9962%" y="229" width="0.3494%" height="15" fill="rgb(247,18,42)"/><text x="17.2462%" y="239.50"></text></g><g><title>match_checking (516,836 samples, 0.16%)</title><rect x="17.1824%" y="213" width="0.1632%" height="15" fill="rgb(241,131,45)"/><text x="17.4324%" y="223.50"></text></g><g><title>check_match (479,946 samples, 0.15%)</title><rect x="17.1940%" y="197" width="0.1516%" height="15" fill="rgb(249,31,29)"/><text x="17.4440%" y="207.50"></text></g><g><title>death_checking (571,476 samples, 0.18%)</title><rect x="17.4429%" y="213" width="0.1805%" height="15" fill="rgb(225,111,53)"/><text x="17.6929%" y="223.50"></text></g><g><title>param_env (318,574 samples, 0.10%)</title><rect x="18.0167%" y="181" width="0.1006%" height="15" fill="rgb(238,160,17)"/><text x="18.2667%" y="191.50"></text></g><g><title>crate_lints (2,712,647 samples, 0.86%)</title><rect x="17.6238%" y="197" width="0.8566%" height="15" fill="rgb(214,148,48)"/><text x="17.8738%" y="207.50"></text></g><g><title>type_of (1,094,578 samples, 0.35%)</title><rect x="18.1348%" y="181" width="0.3456%" height="15" fill="rgb(232,36,49)"/><text x="18.3848%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (861,067 samples, 0.27%)</title><rect x="18.2085%" y="165" width="0.2719%" height="15" fill="rgb(209,103,24)"/><text x="18.4585%" y="175.50"></text></g><g><title>lint_checking (3,284,403 samples, 1.04%)</title><rect x="17.6234%" y="213" width="1.0371%" height="15" fill="rgb(229,88,8)"/><text x="17.8734%" y="223.50"></text></g><g><title>module_lints (570,246 samples, 0.18%)</title><rect x="18.4804%" y="197" width="0.1801%" height="15" fill="rgb(213,181,19)"/><text x="18.7304%" y="207.50"></text></g><g><title>lint_mod (563,966 samples, 0.18%)</title><rect x="18.4824%" y="181" width="0.1781%" height="15" fill="rgb(254,191,54)"/><text x="18.7324%" y="191.50"></text></g><g><title>privacy_access_levels (584,416 samples, 0.18%)</title><rect x="18.6605%" y="213" width="0.1845%" height="15" fill="rgb(241,83,37)"/><text x="18.9105%" y="223.50"></text></g><g><title>privacy_checking_modules (1,154,611 samples, 0.36%)</title><rect x="18.8450%" y="213" width="0.3646%" height="15" fill="rgb(233,36,39)"/><text x="19.0950%" y="223.50"></text></g><g><title>check_mod_privacy (1,150,551 samples, 0.36%)</title><rect x="18.8463%" y="197" width="0.3633%" height="15" fill="rgb(226,3,54)"/><text x="19.0963%" y="207.50"></text></g><g><title>misc_checking_3 (5,925,349 samples, 1.87%)</title><rect x="17.3456%" y="229" width="1.8710%" height="15" fill="rgb(245,192,40)"/><text x="17.5956%" y="239.50">m..</text></g><g><title>impl_parent (1,777,547 samples, 0.56%)</title><rect x="20.2108%" y="165" width="0.5613%" height="15" fill="rgb(238,167,29)"/><text x="20.4608%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,110,340 samples, 0.35%)</title><rect x="20.4215%" y="149" width="0.3506%" height="15" fill="rgb(232,182,51)"/><text x="20.6715%" y="159.50"></text></g><g><title>impl_trait_ref (4,540,019 samples, 1.43%)</title><rect x="20.7727%" y="165" width="1.4336%" height="15" fill="rgb(231,60,39)"/><text x="21.0227%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,885,209 samples, 1.23%)</title><rect x="20.9795%" y="149" width="1.2268%" height="15" fill="rgb(208,69,12)"/><text x="21.2295%" y="159.50"></text></g><g><title>trait_impls_of (586,687 samples, 0.19%)</title><rect x="22.2169%" y="165" width="0.1853%" height="15" fill="rgb(235,93,37)"/><text x="22.4669%" y="175.50"></text></g><g><title>coherent_trait (9,989,100 samples, 3.15%)</title><rect x="19.2483%" y="197" width="3.1542%" height="15" fill="rgb(213,116,39)"/><text x="19.4983%" y="207.50">coh..</text></g><g><title>specialization_graph_of (9,968,140 samples, 3.15%)</title><rect x="19.2550%" y="181" width="3.1476%" height="15" fill="rgb(222,207,29)"/><text x="19.5050%" y="191.50">spe..</text></g><g><title>coherence_checking (10,099,431 samples, 3.19%)</title><rect x="19.2426%" y="213" width="3.1890%" height="15" fill="rgb(206,96,30)"/><text x="19.4926%" y="223.50">coh..</text></g><g><title>evaluate_obligation (638,194 samples, 0.20%)</title><rect x="27.5719%" y="165" width="0.2015%" height="15" fill="rgb(218,138,4)"/><text x="27.8219%" y="175.50"></text></g><g><title>item_bodies_checking (17,854,179 samples, 5.64%)</title><rect x="22.4478%" y="213" width="5.6377%" height="15" fill="rgb(250,191,14)"/><text x="22.6978%" y="223.50">item_bo..</text></g><g><title>typeck_item_bodies (17,850,559 samples, 5.64%)</title><rect x="22.4490%" y="197" width="5.6366%" height="15" fill="rgb(239,60,40)"/><text x="22.6990%" y="207.50">typeck_..</text></g><g><title>typeck (17,754,268 samples, 5.61%)</title><rect x="22.4794%" y="181" width="5.6062%" height="15" fill="rgb(206,27,48)"/><text x="22.7294%" y="191.50">typeck</text></g><g><title>mir_borrowck (362,364 samples, 0.11%)</title><rect x="31.9725%" y="133" width="0.1144%" height="15" fill="rgb(225,35,8)"/><text x="32.2225%" y="143.50"></text></g><g><title>mir_const (625,785 samples, 0.20%)</title><rect x="32.2285%" y="117" width="0.1976%" height="15" fill="rgb(250,213,24)"/><text x="32.4785%" y="127.50"></text></g><g><title>mir_promoted (1,083,700 samples, 0.34%)</title><rect x="32.0869%" y="133" width="0.3422%" height="15" fill="rgb(247,123,22)"/><text x="32.3369%" y="143.50"></text></g><g><title>type_op_prove_predicate (589,273 samples, 0.19%)</title><rect x="32.5540%" y="133" width="0.1861%" height="15" fill="rgb(231,138,38)"/><text x="32.8040%" y="143.50"></text></g><g><title>mir_borrowck (9,779,068 samples, 3.09%)</title><rect x="29.6546%" y="149" width="3.0879%" height="15" fill="rgb(231,145,46)"/><text x="29.9046%" y="159.50">mir..</text></g><g><title>associated_item (762,128 samples, 0.24%)</title><rect x="37.9729%" y="53" width="0.2407%" height="15" fill="rgb(251,118,11)"/><text x="38.2229%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (687,368 samples, 0.22%)</title><rect x="37.9965%" y="37" width="0.2170%" height="15" fill="rgb(217,147,25)"/><text x="38.2465%" y="47.50"></text></g><g><title>associated_items (909,879 samples, 0.29%)</title><rect x="37.9337%" y="69" width="0.2873%" height="15" fill="rgb(247,81,37)"/><text x="38.1837%" y="79.50"></text></g><g><title>adt_dtorck_constraint (573,558 samples, 0.18%)</title><rect x="38.4204%" y="37" width="0.1811%" height="15" fill="rgb(209,12,38)"/><text x="38.6704%" y="47.50"></text></g><g><title>dropck_outlives (1,198,992 samples, 0.38%)</title><rect x="38.2363%" y="69" width="0.3786%" height="15" fill="rgb(227,1,9)"/><text x="38.4863%" y="79.50"></text></g><g><title>adt_dtorck_constraint (967,781 samples, 0.31%)</title><rect x="38.3093%" y="53" width="0.3056%" height="15" fill="rgb(248,47,43)"/><text x="38.5593%" y="63.50"></text></g><g><title>impl_trait_ref (334,352 samples, 0.11%)</title><rect x="39.2123%" y="53" width="0.1056%" height="15" fill="rgb(221,10,30)"/><text x="39.4623%" y="63.50"></text></g><g><title>specializes (398,693 samples, 0.13%)</title><rect x="39.3847%" y="53" width="0.1259%" height="15" fill="rgb(210,229,1)"/><text x="39.6347%" y="63.50"></text></g><g><title>trait_impls_of (402,562 samples, 0.13%)</title><rect x="39.5165%" y="53" width="0.1271%" height="15" fill="rgb(222,148,37)"/><text x="39.7665%" y="63.50"></text></g><g><title>evaluate_obligation (3,267,570 samples, 1.03%)</title><rect x="38.6160%" y="69" width="1.0318%" height="15" fill="rgb(234,67,33)"/><text x="38.8660%" y="79.50"></text></g><g><title>is_copy_raw (542,786 samples, 0.17%)</title><rect x="39.8063%" y="69" width="0.1714%" height="15" fill="rgb(247,98,35)"/><text x="40.0563%" y="79.50"></text></g><g><title>evaluate_obligation (439,434 samples, 0.14%)</title><rect x="39.8389%" y="53" width="0.1388%" height="15" fill="rgb(247,138,52)"/><text x="40.0889%" y="63.50"></text></g><g><title>mir_built (23,821,020 samples, 7.52%)</title><rect x="32.8694%" y="101" width="7.5218%" height="15" fill="rgb(213,79,30)"/><text x="33.1194%" y="111.50">mir_built</text></g><g><title>typeck (22,945,501 samples, 7.25%)</title><rect x="33.1458%" y="85" width="7.2454%" height="15" fill="rgb(246,177,23)"/><text x="33.3958%" y="95.50">typeck</text></g><g><title>thir_body (604,685 samples, 0.19%)</title><rect x="41.1964%" y="69" width="0.1909%" height="15" fill="rgb(230,62,27)"/><text x="41.4464%" y="79.50"></text></g><g><title>mir_built (2,687,856 samples, 0.85%)</title><rect x="40.5436%" y="85" width="0.8487%" height="15" fill="rgb(216,154,8)"/><text x="40.7936%" y="95.50"></text></g><g><title>mir_const (27,384,405 samples, 8.65%)</title><rect x="32.7902%" y="133" width="8.6470%" height="15" fill="rgb(244,35,45)"/><text x="33.0402%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (27,196,143 samples, 8.59%)</title><rect x="32.8497%" y="117" width="8.5876%" height="15" fill="rgb(251,115,12)"/><text x="33.0997%" y="127.50">unsafety_che..</text></g><g><title>unsafety_check_result (3,312,823 samples, 1.05%)</title><rect x="40.3912%" y="101" width="1.0461%" height="15" fill="rgb(240,54,50)"/><text x="40.6412%" y="111.50"></text></g><g><title>mir_promoted (27,551,487 samples, 8.70%)</title><rect x="32.7425%" y="149" width="8.6998%" height="15" fill="rgb(233,84,52)"/><text x="32.9925%" y="159.50">mir_promoted</text></g><g><title>type_of (40,902,729 samples, 12.92%)</title><rect x="28.7859%" y="181" width="12.9157%" height="15" fill="rgb(207,117,47)"/><text x="29.0359%" y="191.50">type_of</text></g><g><title>mir_borrowck (40,875,119 samples, 12.91%)</title><rect x="28.7946%" y="165" width="12.9069%" height="15" fill="rgb(249,43,39)"/><text x="29.0446%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (571,890 samples, 0.18%)</title><rect x="41.5210%" y="149" width="0.1806%" height="15" fill="rgb(209,38,44)"/><text x="41.7710%" y="159.50"></text></g><g><title>item_types_checking (43,158,103 samples, 13.63%)</title><rect x="28.0855%" y="213" width="13.6278%" height="15" fill="rgb(236,212,23)"/><text x="28.3355%" y="223.50">item_types_checking</text></g><g><title>check_mod_item_types (43,147,753 samples, 13.62%)</title><rect x="28.0888%" y="197" width="13.6246%" height="15" fill="rgb(242,79,21)"/><text x="28.3388%" y="207.50">check_mod_item_types</text></g><g><title>fn_sig (430,744 samples, 0.14%)</title><rect x="41.8378%" y="181" width="0.1360%" height="15" fill="rgb(211,96,35)"/><text x="42.0878%" y="191.50"></text></g><g><title>generics_of (708,938 samples, 0.22%)</title><rect x="41.9738%" y="181" width="0.2239%" height="15" fill="rgb(253,215,40)"/><text x="42.2238%" y="191.50"></text></g><g><title>explicit_predicates_of (407,036 samples, 0.13%)</title><rect x="42.2801%" y="149" width="0.1285%" height="15" fill="rgb(211,81,21)"/><text x="42.5301%" y="159.50"></text></g><g><title>predicates_of (1,031,210 samples, 0.33%)</title><rect x="42.2195%" y="181" width="0.3256%" height="15" fill="rgb(208,190,38)"/><text x="42.4695%" y="191.50"></text></g><g><title>predicates_defined_on (960,760 samples, 0.30%)</title><rect x="42.2417%" y="165" width="0.3034%" height="15" fill="rgb(235,213,38)"/><text x="42.4917%" y="175.50"></text></g><g><title>inferred_outlives_of (432,244 samples, 0.14%)</title><rect x="42.4086%" y="149" width="0.1365%" height="15" fill="rgb(237,122,38)"/><text x="42.6586%" y="159.50"></text></g><g><title>inferred_outlives_crate (398,644 samples, 0.13%)</title><rect x="42.4192%" y="133" width="0.1259%" height="15" fill="rgb(244,218,35)"/><text x="42.6692%" y="143.50"></text></g><g><title>type_collecting (2,808,318 samples, 0.89%)</title><rect x="41.7143%" y="213" width="0.8868%" height="15" fill="rgb(240,68,47)"/><text x="41.9643%" y="223.50"></text></g><g><title>collect_mod_item_types (2,793,708 samples, 0.88%)</title><rect x="41.7189%" y="197" width="0.8822%" height="15" fill="rgb(210,16,53)"/><text x="41.9689%" y="207.50"></text></g><g><title>evaluate_obligation (863,168 samples, 0.27%)</title><rect x="43.5197%" y="181" width="0.2726%" height="15" fill="rgb(235,124,12)"/><text x="43.7697%" y="191.50"></text></g><g><title>implied_outlives_bounds (423,598 samples, 0.13%)</title><rect x="43.7949%" y="181" width="0.1338%" height="15" fill="rgb(224,169,11)"/><text x="44.0449%" y="191.50"></text></g><g><title>param_env (336,143 samples, 0.11%)</title><rect x="43.9287%" y="181" width="0.1061%" height="15" fill="rgb(250,166,2)"/><text x="44.1787%" y="191.50"></text></g><g><title>region_scope_tree (656,074 samples, 0.21%)</title><rect x="44.0416%" y="181" width="0.2072%" height="15" fill="rgb(242,216,29)"/><text x="44.2916%" y="191.50"></text></g><g><title>check_impl_item_well_formed (4,920,283 samples, 1.55%)</title><rect x="42.6953%" y="197" width="1.5537%" height="15" fill="rgb(230,116,27)"/><text x="42.9453%" y="207.50"></text></g><g><title>param_env (471,297 samples, 0.15%)</title><rect x="45.1079%" y="181" width="0.1488%" height="15" fill="rgb(228,99,48)"/><text x="45.3579%" y="191.50"></text></g><g><title>analysis (110,614,078 samples, 34.93%)</title><rect x="10.4416%" y="245" width="34.9281%" height="15" fill="rgb(253,11,6)"/><text x="10.6916%" y="255.50">analysis</text></g><g><title>type_check_crate (82,824,480 samples, 26.15%)</title><rect x="19.2166%" y="229" width="26.1531%" height="15" fill="rgb(247,143,39)"/><text x="19.4666%" y="239.50">type_check_crate</text></g><g><title>wf_checking (8,760,988 samples, 2.77%)</title><rect x="42.6033%" y="213" width="2.7664%" height="15" fill="rgb(236,97,10)"/><text x="42.8533%" y="223.50">wf..</text></g><g><title>check_item_well_formed (3,549,184 samples, 1.12%)</title><rect x="44.2490%" y="197" width="1.1207%" height="15" fill="rgb(233,208,19)"/><text x="44.4990%" y="207.50"></text></g><g><title>compute_debuginfo_type_name (597,245 samples, 0.19%)</title><rect x="53.0523%" y="213" width="0.1886%" height="15" fill="rgb(216,164,2)"/><text x="53.3023%" y="223.50"></text></g><g><title>layout_of (1,125,880 samples, 0.36%)</title><rect x="53.7794%" y="197" width="0.3555%" height="15" fill="rgb(220,129,5)"/><text x="54.0294%" y="207.50"></text></g><g><title>predicates_of (370,282 samples, 0.12%)</title><rect x="54.3450%" y="181" width="0.1169%" height="15" fill="rgb(242,17,10)"/><text x="54.5950%" y="191.50"></text></g><g><title>param_env (1,037,750 samples, 0.33%)</title><rect x="54.1349%" y="197" width="0.3277%" height="15" fill="rgb(242,107,0)"/><text x="54.3849%" y="207.50"></text></g><g><title>fn_abi_of_instance (3,739,163 samples, 1.18%)</title><rect x="53.3005%" y="213" width="1.1807%" height="15" fill="rgb(251,28,31)"/><text x="53.5505%" y="223.50"></text></g><g><title>layout_of (408,204 samples, 0.13%)</title><rect x="54.6461%" y="165" width="0.1289%" height="15" fill="rgb(233,223,10)"/><text x="54.8961%" y="175.50"></text></g><g><title>layout_of (541,025 samples, 0.17%)</title><rect x="54.6202%" y="181" width="0.1708%" height="15" fill="rgb(215,21,27)"/><text x="54.8702%" y="191.50"></text></g><g><title>layout_of (610,305 samples, 0.19%)</title><rect x="54.6043%" y="197" width="0.1927%" height="15" fill="rgb(232,23,21)"/><text x="54.8543%" y="207.50"></text></g><g><title>layout_of (985,079 samples, 0.31%)</title><rect x="54.5078%" y="213" width="0.3111%" height="15" fill="rgb(244,5,23)"/><text x="54.7578%" y="223.50"></text></g><g><title>symbol_name (413,155 samples, 0.13%)</title><rect x="54.8330%" y="213" width="0.1305%" height="15" fill="rgb(226,81,46)"/><text x="55.0830%" y="223.50"></text></g><g><title>codegen_module (28,456,794 samples, 8.99%)</title><rect x="45.9936%" y="229" width="8.9857%" height="15" fill="rgb(247,70,30)"/><text x="46.2436%" y="239.50">codegen_module</text></g><g><title>codegen_crate (30,502,326 samples, 9.63%)</title><rect x="45.3717%" y="245" width="9.6316%" height="15" fill="rgb(212,68,19)"/><text x="45.6217%" y="255.50">codegen_crate</text></g><g><title>LLVM_module_codegen (83,788,790 samples, 26.46%)</title><rect x="55.0436%" y="229" width="26.4576%" height="15" fill="rgb(240,187,13)"/><text x="55.2936%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (78,260,916 samples, 24.71%)</title><rect x="56.7891%" y="213" width="24.7121%" height="15" fill="rgb(223,113,26)"/><text x="57.0391%" y="223.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (88,135,715 samples, 27.83%)</title><rect x="55.0033%" y="245" width="27.8302%" height="15" fill="rgb(206,192,2)"/><text x="55.2533%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,219,434 samples, 1.33%)</title><rect x="81.5011%" y="229" width="1.3324%" height="15" fill="rgb(241,108,4)"/><text x="81.7511%" y="239.50"></text></g><g><title>metadata_register_crate (1,362,693 samples, 0.43%)</title><rect x="86.1961%" y="197" width="0.4303%" height="15" fill="rgb(247,173,49)"/><text x="86.4461%" y="207.50"></text></g><g><title>metadata_register_crate (555,204 samples, 0.18%)</title><rect x="86.4510%" y="181" width="0.1753%" height="15" fill="rgb(224,114,35)"/><text x="86.7010%" y="191.50"></text></g><g><title>macro_expand_crate (11,779,098 samples, 3.72%)</title><rect x="82.9642%" y="229" width="3.7194%" height="15" fill="rgb(245,159,27)"/><text x="83.2142%" y="239.50">macr..</text></g><g><title>expand_crate (11,762,788 samples, 3.71%)</title><rect x="82.9694%" y="213" width="3.7143%" height="15" fill="rgb(245,172,44)"/><text x="83.2194%" y="223.50">expa..</text></g><g><title>late_resolve_crate (1,926,649 samples, 0.61%)</title><rect x="86.7519%" y="213" width="0.6084%" height="15" fill="rgb(236,23,11)"/><text x="87.0019%" y="223.50"></text></g><g><title>configure_and_expand (14,460,905 samples, 4.57%)</title><rect x="82.8335%" y="245" width="4.5662%" height="15" fill="rgb(205,117,38)"/><text x="83.0835%" y="255.50">confi..</text></g><g><title>resolve_crate (2,202,832 samples, 0.70%)</title><rect x="86.7042%" y="229" width="0.6956%" height="15" fill="rgb(237,72,25)"/><text x="86.9542%" y="239.50"></text></g><g><title>early_lint_checks (387,904 samples, 0.12%)</title><rect x="87.4587%" y="245" width="0.1225%" height="15" fill="rgb(244,70,9)"/><text x="87.7087%" y="255.50"></text></g><g><title>free_global_ctxt (6,189,002 samples, 1.95%)</title><rect x="87.5812%" y="245" width="1.9543%" height="15" fill="rgb(217,125,39)"/><text x="87.8312%" y="255.50">f..</text></g><g><title>layout_of (379,903 samples, 0.12%)</title><rect x="91.0191%" y="149" width="0.1200%" height="15" fill="rgb(235,36,10)"/><text x="91.2691%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (401,575 samples, 0.13%)</title><rect x="91.1390%" y="149" width="0.1268%" height="15" fill="rgb(251,123,47)"/><text x="91.3890%" y="159.50"></text></g><g><title>optimized_mir (2,430,765 samples, 0.77%)</title><rect x="90.7470%" y="165" width="0.7676%" height="15" fill="rgb(221,13,13)"/><text x="90.9970%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (787,820 samples, 0.25%)</title><rect x="91.2658%" y="149" width="0.2488%" height="15" fill="rgb(238,131,9)"/><text x="91.5158%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (332,544 samples, 0.11%)</title><rect x="91.6002%" y="149" width="0.1050%" height="15" fill="rgb(211,50,8)"/><text x="91.8502%" y="159.50"></text></g><g><title>resolve_instance (997,711 samples, 0.32%)</title><rect x="91.5146%" y="165" width="0.3150%" height="15" fill="rgb(245,182,24)"/><text x="91.7646%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (5,516,305 samples, 1.74%)</title><rect x="90.3759%" y="181" width="1.7419%" height="15" fill="rgb(242,14,37)"/><text x="90.6259%" y="191.50"></text></g><g><title>vtable_entries (406,504 samples, 0.13%)</title><rect x="91.9894%" y="165" width="0.1284%" height="15" fill="rgb(246,228,12)"/><text x="92.2394%" y="175.50"></text></g><g><title>resolve_instance (317,313 samples, 0.10%)</title><rect x="92.0175%" y="149" width="0.1002%" height="15" fill="rgb(213,55,15)"/><text x="92.2675%" y="159.50"></text></g><g><title>monomorphization_collector (5,568,916 samples, 1.76%)</title><rect x="90.3748%" y="197" width="1.7585%" height="15" fill="rgb(209,9,3)"/><text x="90.6248%" y="207.50"></text></g><g><title>assert_symbols_are_distinct (513,545 samples, 0.16%)</title><rect x="92.1364%" y="181" width="0.1622%" height="15" fill="rgb(230,59,30)"/><text x="92.3864%" y="191.50"></text></g><g><title>symbol_name (466,475 samples, 0.15%)</title><rect x="92.1513%" y="165" width="0.1473%" height="15" fill="rgb(209,121,21)"/><text x="92.4013%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (6,383,034 samples, 2.02%)</title><rect x="90.3631%" y="213" width="2.0155%" height="15" fill="rgb(220,109,13)"/><text x="90.6131%" y="223.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (777,008 samples, 0.25%)</title><rect x="92.1333%" y="197" width="0.2454%" height="15" fill="rgb(232,18,1)"/><text x="92.3833%" y="207.50"></text></g><g><title>exported_symbols (6,607,646 samples, 2.09%)</title><rect x="90.3529%" y="229" width="2.0865%" height="15" fill="rgb(215,41,42)"/><text x="90.6029%" y="239.50">e..</text></g><g><title>layout_of (334,352 samples, 0.11%)</title><rect x="94.6663%" y="181" width="0.1056%" height="15" fill="rgb(224,123,36)"/><text x="94.9163%" y="191.50"></text></g><g><title>layout_of (463,184 samples, 0.15%)</title><rect x="94.6318%" y="197" width="0.1463%" height="15" fill="rgb(240,125,3)"/><text x="94.8818%" y="207.50"></text></g><g><title>layout_of (890,812 samples, 0.28%)</title><rect x="94.5080%" y="213" width="0.2813%" height="15" fill="rgb(205,98,50)"/><text x="94.7580%" y="223.50"></text></g><g><title>is_copy_raw (582,113 samples, 0.18%)</title><rect x="96.6673%" y="181" width="0.1838%" height="15" fill="rgb(205,185,37)"/><text x="96.9173%" y="191.50"></text></g><g><title>evaluate_obligation (476,692 samples, 0.15%)</title><rect x="96.7006%" y="165" width="0.1505%" height="15" fill="rgb(238,207,15)"/><text x="96.9506%" y="175.50"></text></g><g><title>needs_drop_raw (702,144 samples, 0.22%)</title><rect x="96.6301%" y="197" width="0.2217%" height="15" fill="rgb(213,199,42)"/><text x="96.8801%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,607,573 samples, 2.09%)</title><rect x="94.7892%" y="213" width="2.0864%" height="15" fill="rgb(235,201,11)"/><text x="95.0392%" y="223.50">m..</text></g><g><title>optimized_mir (14,121,428 samples, 4.46%)</title><rect x="92.4789%" y="229" width="4.4591%" height="15" fill="rgb(207,46,11)"/><text x="92.7289%" y="239.50">optim..</text></g><g><title>generate_crate_metadata (23,556,836 samples, 7.44%)</title><rect x="89.5355%" y="245" width="7.4384%" height="15" fill="rgb(241,35,35)"/><text x="89.7855%" y="255.50">generate_c..</text></g><g><title>hir_lowering (3,613,556 samples, 1.14%)</title><rect x="96.9739%" y="245" width="1.1410%" height="15" fill="rgb(243,32,47)"/><text x="97.2239%" y="255.50"></text></g><g><title>link_crate (1,896,479 samples, 0.60%)</title><rect x="98.1221%" y="229" width="0.5988%" height="15" fill="rgb(247,202,23)"/><text x="98.3721%" y="239.50"></text></g><g><title>link_binary (1,856,609 samples, 0.59%)</title><rect x="98.1347%" y="213" width="0.5863%" height="15" fill="rgb(219,102,11)"/><text x="98.3847%" y="223.50"></text></g><g><title>link_rlib (1,277,613 samples, 0.40%)</title><rect x="98.3175%" y="197" width="0.4034%" height="15" fill="rgb(243,110,44)"/><text x="98.5675%" y="207.50"></text></g><g><title>link (1,929,119 samples, 0.61%)</title><rect x="98.1150%" y="245" width="0.6091%" height="15" fill="rgb(222,74,54)"/><text x="98.3650%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,756,158 samples, 0.55%)</title><rect x="98.8517%" y="245" width="0.5545%" height="15" fill="rgb(216,99,12)"/><text x="99.1017%" y="255.50"></text></g><g><title>all (316,691,074 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (316,691,074 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (1,794,568 samples, 0.57%)</title><rect x="99.4333%" y="245" width="0.5667%" height="15" fill="rgb(213,25,53)"/><text x="99.6833%" y="255.50"></text></g></svg></svg>