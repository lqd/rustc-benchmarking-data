<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,418,605 samples, 5.06%)</title><rect x="0.7466%" y="197" width="5.0597%" height="15" fill="rgb(227,0,7)"/><text x="0.9966%" y="207.50">LLVM_p..</text></g><g><title>param_env (197,154 samples, 0.29%)</title><rect x="12.0696%" y="117" width="0.2918%" height="15" fill="rgb(217,0,24)"/><text x="12.3196%" y="127.50"></text></g><g><title>item_attrs (100,861 samples, 0.15%)</title><rect x="12.6204%" y="85" width="0.1493%" height="15" fill="rgb(221,193,54)"/><text x="12.8704%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (97,211 samples, 0.14%)</title><rect x="12.6258%" y="69" width="0.1439%" height="15" fill="rgb(248,212,6)"/><text x="12.8758%" y="79.50"></text></g><g><title>codegen_fn_attrs (142,391 samples, 0.21%)</title><rect x="12.5667%" y="101" width="0.2107%" height="15" fill="rgb(208,68,35)"/><text x="12.8167%" y="111.50"></text></g><g><title>is_copy_raw (73,580 samples, 0.11%)</title><rect x="14.0798%" y="53" width="0.1089%" height="15" fill="rgb(232,128,0)"/><text x="14.3298%" y="63.50"></text></g><g><title>adt_drop_tys (197,522 samples, 0.29%)</title><rect x="13.9735%" y="69" width="0.2923%" height="15" fill="rgb(207,160,47)"/><text x="14.2235%" y="79.50"></text></g><g><title>needs_drop_raw (658,016 samples, 0.97%)</title><rect x="13.8977%" y="85" width="0.9739%" height="15" fill="rgb(228,23,34)"/><text x="14.1477%" y="95.50"></text></g><g><title>is_copy_raw (409,284 samples, 0.61%)</title><rect x="14.2658%" y="69" width="0.6058%" height="15" fill="rgb(218,30,26)"/><text x="14.5158%" y="79.50"></text></g><g><title>evaluate_obligation (368,184 samples, 0.54%)</title><rect x="14.3267%" y="53" width="0.5449%" height="15" fill="rgb(220,122,19)"/><text x="14.5767%" y="63.50"></text></g><g><title>trait_impls_of (134,992 samples, 0.20%)</title><rect x="14.6718%" y="37" width="0.1998%" height="15" fill="rgb(250,228,42)"/><text x="14.9218%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (92,651 samples, 0.14%)</title><rect x="15.0592%" y="69" width="0.1371%" height="15" fill="rgb(240,193,28)"/><text x="15.3092%" y="79.50"></text></g><g><title>resolve_instance (319,394 samples, 0.47%)</title><rect x="14.8716%" y="85" width="0.4727%" height="15" fill="rgb(216,20,37)"/><text x="15.1216%" y="95.50"></text></g><g><title>thir_body (237,721 samples, 0.35%)</title><rect x="15.3567%" y="85" width="0.3518%" height="15" fill="rgb(206,188,39)"/><text x="15.6067%" y="95.50"></text></g><g><title>mir_const (2,748,482 samples, 4.07%)</title><rect x="11.6483%" y="133" width="4.0679%" height="15" fill="rgb(217,207,13)"/><text x="11.8983%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (2,266,632 samples, 3.35%)</title><rect x="12.3614%" y="117" width="3.3547%" height="15" fill="rgb(231,73,38)"/><text x="12.6114%" y="127.50">uns..</text></g><g><title>mir_built (1,985,529 samples, 2.94%)</title><rect x="12.7775%" y="101" width="2.9387%" height="15" fill="rgb(225,20,46)"/><text x="13.0275%" y="111.50">mi..</text></g><g><title>mir_promoted (3,164,064 samples, 4.68%)</title><rect x="11.2614%" y="149" width="4.6830%" height="15" fill="rgb(210,31,41)"/><text x="11.5114%" y="159.50">mir_p..</text></g><g><title>mir_const_qualif (154,191 samples, 0.23%)</title><rect x="15.7162%" y="133" width="0.2282%" height="15" fill="rgb(221,200,47)"/><text x="15.9662%" y="143.50"></text></g><g><title>mir_const (110,121 samples, 0.16%)</title><rect x="15.7814%" y="117" width="0.1630%" height="15" fill="rgb(226,26,5)"/><text x="16.0314%" y="127.50"></text></g><g><title>unsafety_check_result (77,071 samples, 0.11%)</title><rect x="15.8303%" y="101" width="0.1141%" height="15" fill="rgb(249,33,26)"/><text x="16.0803%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (205,581 samples, 0.30%)</title><rect x="15.9444%" y="149" width="0.3043%" height="15" fill="rgb(235,183,28)"/><text x="16.1944%" y="159.50"></text></g><g><title>type_op_prove_predicate (752,957 samples, 1.11%)</title><rect x="16.2486%" y="149" width="1.1144%" height="15" fill="rgb(221,5,38)"/><text x="16.4986%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,698,657 samples, 11.39%)</title><rect x="5.9739%" y="181" width="11.3944%" height="15" fill="rgb(247,18,42)"/><text x="6.2239%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (7,657,386 samples, 11.33%)</title><rect x="6.0350%" y="165" width="11.3333%" height="15" fill="rgb(241,131,45)"/><text x="6.2850%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (98,621 samples, 0.15%)</title><rect x="17.3683%" y="181" width="0.1460%" height="15" fill="rgb(249,31,29)"/><text x="17.6183%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (80,491 samples, 0.12%)</title><rect x="17.3952%" y="165" width="0.1191%" height="15" fill="rgb(225,111,53)"/><text x="17.6452%" y="175.50"></text></g><g><title>hir_module_items (75,951 samples, 0.11%)</title><rect x="17.5143%" y="181" width="0.1124%" height="15" fill="rgb(238,160,17)"/><text x="17.7643%" y="191.50"></text></g><g><title>item_attrs (89,441 samples, 0.13%)</title><rect x="17.9724%" y="101" width="0.1324%" height="15" fill="rgb(214,148,48)"/><text x="18.2224%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (83,481 samples, 0.12%)</title><rect x="17.9813%" y="85" width="0.1236%" height="15" fill="rgb(232,36,49)"/><text x="18.2313%" y="95.50"></text></g><g><title>codegen_fn_attrs (205,483 samples, 0.30%)</title><rect x="17.8738%" y="117" width="0.3041%" height="15" fill="rgb(209,103,24)"/><text x="18.1238%" y="127.50"></text></g><g><title>codegen_fn_attrs (289,784 samples, 0.43%)</title><rect x="17.7530%" y="149" width="0.4289%" height="15" fill="rgb(229,88,8)"/><text x="18.0030%" y="159.50"></text></g><g><title>should_inherit_track_caller (267,114 samples, 0.40%)</title><rect x="17.7865%" y="133" width="0.3953%" height="15" fill="rgb(213,181,19)"/><text x="18.0365%" y="143.50"></text></g><g><title>check_mod_attrs (361,964 samples, 0.54%)</title><rect x="17.6465%" y="165" width="0.5357%" height="15" fill="rgb(254,191,54)"/><text x="17.8965%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (230,372 samples, 0.34%)</title><rect x="18.2757%" y="165" width="0.3410%" height="15" fill="rgb(241,83,37)"/><text x="18.5257%" y="175.50"></text></g><g><title>misc_checking_1 (694,717 samples, 1.03%)</title><rect x="17.6274%" y="181" width="1.0282%" height="15" fill="rgb(233,36,39)"/><text x="17.8774%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (138,252 samples, 0.20%)</title><rect x="18.6573%" y="165" width="0.2046%" height="15" fill="rgb(226,3,54)"/><text x="18.9073%" y="175.50"></text></g><g><title>check_mod_liveness (113,911 samples, 0.17%)</title><rect x="18.6933%" y="149" width="0.1686%" height="15" fill="rgb(245,192,40)"/><text x="18.9433%" y="159.50"></text></g><g><title>misc_checking_2 (278,453 samples, 0.41%)</title><rect x="18.6556%" y="181" width="0.4121%" height="15" fill="rgb(238,167,29)"/><text x="18.9056%" y="191.50"></text></g><g><title>match_checking (139,091 samples, 0.21%)</title><rect x="18.8619%" y="165" width="0.2059%" height="15" fill="rgb(232,182,51)"/><text x="19.1119%" y="175.50"></text></g><g><title>check_match (129,131 samples, 0.19%)</title><rect x="18.8767%" y="149" width="0.1911%" height="15" fill="rgb(231,60,39)"/><text x="19.1267%" y="159.50"></text></g><g><title>check_private_in_public (80,111 samples, 0.12%)</title><rect x="19.0770%" y="165" width="0.1186%" height="15" fill="rgb(208,69,12)"/><text x="19.3270%" y="175.50"></text></g><g><title>death_checking (130,282 samples, 0.19%)</title><rect x="19.1956%" y="165" width="0.1928%" height="15" fill="rgb(235,93,37)"/><text x="19.4456%" y="175.50"></text></g><g><title>eval_to_const_value_raw (108,711 samples, 0.16%)</title><rect x="20.0580%" y="133" width="0.1609%" height="15" fill="rgb(213,116,39)"/><text x="20.3080%" y="143.50"></text></g><g><title>eval_to_const_value_raw (102,101 samples, 0.15%)</title><rect x="20.0678%" y="117" width="0.1511%" height="15" fill="rgb(222,207,29)"/><text x="20.3178%" y="127.50"></text></g><g><title>eval_to_allocation_raw (98,731 samples, 0.15%)</title><rect x="20.0728%" y="101" width="0.1461%" height="15" fill="rgb(206,96,30)"/><text x="20.3228%" y="111.50"></text></g><g><title>crate_lints (1,617,936 samples, 2.39%)</title><rect x="19.3904%" y="149" width="2.3946%" height="15" fill="rgb(218,138,4)"/><text x="19.6404%" y="159.50">cr..</text></g><g><title>type_of (1,006,792 samples, 1.49%)</title><rect x="20.2949%" y="133" width="1.4901%" height="15" fill="rgb(250,191,14)"/><text x="20.5449%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (773,917 samples, 1.15%)</title><rect x="20.6396%" y="117" width="1.1454%" height="15" fill="rgb(239,60,40)"/><text x="20.8896%" y="127.50"></text></g><g><title>lint_checking (1,707,957 samples, 2.53%)</title><rect x="19.3884%" y="165" width="2.5279%" height="15" fill="rgb(206,27,48)"/><text x="19.6384%" y="175.50">li..</text></g><g><title>module_lints (88,671 samples, 0.13%)</title><rect x="21.7850%" y="149" width="0.1312%" height="15" fill="rgb(225,35,8)"/><text x="22.0350%" y="159.50"></text></g><g><title>lint_mod (86,751 samples, 0.13%)</title><rect x="21.7879%" y="133" width="0.1284%" height="15" fill="rgb(250,213,24)"/><text x="22.0379%" y="143.50"></text></g><g><title>privacy_access_levels (77,260 samples, 0.11%)</title><rect x="21.9162%" y="165" width="0.1143%" height="15" fill="rgb(247,123,22)"/><text x="22.1662%" y="175.50"></text></g><g><title>privacy_checking_modules (234,052 samples, 0.35%)</title><rect x="22.0306%" y="165" width="0.3464%" height="15" fill="rgb(231,138,38)"/><text x="22.2806%" y="175.50"></text></g><g><title>check_mod_privacy (232,982 samples, 0.34%)</title><rect x="22.0322%" y="149" width="0.3448%" height="15" fill="rgb(231,145,46)"/><text x="22.2822%" y="159.50"></text></g><g><title>misc_checking_3 (2,242,752 samples, 3.32%)</title><rect x="19.0678%" y="181" width="3.3194%" height="15" fill="rgb(251,118,11)"/><text x="19.3178%" y="191.50">mis..</text></g><g><title>impl_parent (1,028,317 samples, 1.52%)</title><rect x="24.9360%" y="117" width="1.5220%" height="15" fill="rgb(217,147,25)"/><text x="25.1860%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (657,382 samples, 0.97%)</title><rect x="25.4850%" y="101" width="0.9730%" height="15" fill="rgb(247,81,37)"/><text x="25.7350%" y="111.50"></text></g><g><title>impl_trait_ref (3,286,467 samples, 4.86%)</title><rect x="26.4580%" y="117" width="4.8641%" height="15" fill="rgb(209,12,38)"/><text x="26.7080%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,913,840 samples, 4.31%)</title><rect x="27.0095%" y="101" width="4.3126%" height="15" fill="rgb(227,1,9)"/><text x="27.2595%" y="111.50">metad..</text></g><g><title>trait_impls_of (347,553 samples, 0.51%)</title><rect x="31.3425%" y="117" width="0.5144%" height="15" fill="rgb(248,47,43)"/><text x="31.5925%" y="127.50"></text></g><g><title>implementations_of_trait (99,600 samples, 0.15%)</title><rect x="31.7095%" y="101" width="0.1474%" height="15" fill="rgb(221,10,30)"/><text x="31.9595%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (68,600 samples, 0.10%)</title><rect x="31.7554%" y="85" width="0.1015%" height="15" fill="rgb(210,229,1)"/><text x="32.0054%" y="95.50"></text></g><g><title>coherent_trait (6,356,355 samples, 9.41%)</title><rect x="22.4501%" y="149" width="9.4077%" height="15" fill="rgb(222,148,37)"/><text x="22.7001%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (6,344,985 samples, 9.39%)</title><rect x="22.4670%" y="133" width="9.3909%" height="15" fill="rgb(234,67,33)"/><text x="22.7170%" y="143.50">specializatio..</text></g><g><title>coherence_checking (6,417,135 samples, 9.50%)</title><rect x="22.4288%" y="165" width="9.4977%" height="15" fill="rgb(247,98,35)"/><text x="22.6788%" y="175.50">coherence_chec..</text></g><g><title>associated_item (151,881 samples, 0.22%)</title><rect x="41.0114%" y="101" width="0.2248%" height="15" fill="rgb(247,138,52)"/><text x="41.2614%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (115,321 samples, 0.17%)</title><rect x="41.0655%" y="85" width="0.1707%" height="15" fill="rgb(213,79,30)"/><text x="41.3155%" y="95.50"></text></g><g><title>associated_items (242,411 samples, 0.36%)</title><rect x="40.8974%" y="117" width="0.3588%" height="15" fill="rgb(246,177,23)"/><text x="41.1474%" y="127.50"></text></g><g><title>adt_def (90,471 samples, 0.13%)</title><rect x="41.5873%" y="85" width="0.1339%" height="15" fill="rgb(230,62,27)"/><text x="41.8373%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (89,931 samples, 0.13%)</title><rect x="41.5881%" y="69" width="0.1331%" height="15" fill="rgb(216,154,8)"/><text x="41.8381%" y="79.50"></text></g><g><title>item_attrs (69,501 samples, 0.10%)</title><rect x="41.6183%" y="53" width="0.1029%" height="15" fill="rgb(244,35,45)"/><text x="41.8683%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (68,821 samples, 0.10%)</title><rect x="41.6193%" y="37" width="0.1019%" height="15" fill="rgb(251,115,12)"/><text x="41.8693%" y="47.50"></text></g><g><title>adt_dtorck_constraint (104,871 samples, 0.16%)</title><rect x="41.8502%" y="69" width="0.1552%" height="15" fill="rgb(240,54,50)"/><text x="42.1002%" y="79.50"></text></g><g><title>adt_dtorck_constraint (184,122 samples, 0.27%)</title><rect x="41.7399%" y="85" width="0.2725%" height="15" fill="rgb(233,84,52)"/><text x="41.9899%" y="95.50"></text></g><g><title>dropck_outlives (478,514 samples, 0.71%)</title><rect x="41.3273%" y="117" width="0.7082%" height="15" fill="rgb(207,117,47)"/><text x="41.5773%" y="127.50"></text></g><g><title>adt_dtorck_constraint (333,673 samples, 0.49%)</title><rect x="41.5417%" y="101" width="0.4939%" height="15" fill="rgb(249,43,39)"/><text x="41.7917%" y="111.50"></text></g><g><title>adt_def (74,810 samples, 0.11%)</title><rect x="42.6016%" y="85" width="0.1107%" height="15" fill="rgb(209,38,44)"/><text x="42.8516%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (73,960 samples, 0.11%)</title><rect x="42.6029%" y="69" width="0.1095%" height="15" fill="rgb(236,212,23)"/><text x="42.8529%" y="79.50"></text></g><g><title>adt_sized_constraint (82,650 samples, 0.12%)</title><rect x="42.5935%" y="101" width="0.1223%" height="15" fill="rgb(242,79,21)"/><text x="42.8435%" y="111.50"></text></g><g><title>predicates_of (81,890 samples, 0.12%)</title><rect x="42.7545%" y="101" width="0.1212%" height="15" fill="rgb(211,96,35)"/><text x="43.0045%" y="111.50"></text></g><g><title>evaluate_obligation (592,342 samples, 0.88%)</title><rect x="42.0355%" y="117" width="0.8767%" height="15" fill="rgb(253,215,40)"/><text x="42.2855%" y="127.50"></text></g><g><title>fn_sig (73,591 samples, 0.11%)</title><rect x="42.9351%" y="117" width="0.1089%" height="15" fill="rgb(211,81,21)"/><text x="43.1851%" y="127.50"></text></g><g><title>item_attrs (106,571 samples, 0.16%)</title><rect x="43.1722%" y="117" width="0.1577%" height="15" fill="rgb(208,190,38)"/><text x="43.4222%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (101,361 samples, 0.15%)</title><rect x="43.1799%" y="101" width="0.1500%" height="15" fill="rgb(235,213,38)"/><text x="43.4299%" y="111.50"></text></g><g><title>method_autoderef_steps (232,322 samples, 0.34%)</title><rect x="43.3941%" y="117" width="0.3438%" height="15" fill="rgb(237,122,38)"/><text x="43.6441%" y="127.50"></text></g><g><title>evaluate_obligation (115,631 samples, 0.17%)</title><rect x="43.5668%" y="101" width="0.1711%" height="15" fill="rgb(244,218,35)"/><text x="43.8168%" y="111.50"></text></g><g><title>object_safety_violations (124,741 samples, 0.18%)</title><rect x="43.7379%" y="117" width="0.1846%" height="15" fill="rgb(240,68,47)"/><text x="43.9879%" y="127.50"></text></g><g><title>predicates_of (160,662 samples, 0.24%)</title><rect x="43.9632%" y="117" width="0.2378%" height="15" fill="rgb(210,16,53)"/><text x="44.2132%" y="127.50"></text></g><g><title>predicates_defined_on (122,141 samples, 0.18%)</title><rect x="44.0203%" y="101" width="0.1808%" height="15" fill="rgb(235,124,12)"/><text x="44.2703%" y="111.50"></text></g><g><title>item_bodies_checking (8,351,254 samples, 12.36%)</title><rect x="31.9561%" y="165" width="12.3603%" height="15" fill="rgb(224,169,11)"/><text x="32.2061%" y="175.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (8,349,263 samples, 12.36%)</title><rect x="31.9591%" y="149" width="12.3573%" height="15" fill="rgb(250,166,2)"/><text x="32.2091%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (8,319,693 samples, 12.31%)</title><rect x="32.0028%" y="133" width="12.3136%" height="15" fill="rgb(242,216,29)"/><text x="32.2528%" y="143.50">typeck</text></g><g><title>impl_trait_ref (143,370 samples, 0.21%)</title><rect x="45.1083%" y="85" width="0.2122%" height="15" fill="rgb(230,116,27)"/><text x="45.3583%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (125,110 samples, 0.19%)</title><rect x="45.1354%" y="69" width="0.1852%" height="15" fill="rgb(228,99,48)"/><text x="45.3854%" y="79.50"></text></g><g><title>adt_destructor (311,703 samples, 0.46%)</title><rect x="44.9001%" y="133" width="0.4613%" height="15" fill="rgb(253,11,6)"/><text x="45.1501%" y="143.50"></text></g><g><title>coherent_trait (307,113 samples, 0.45%)</title><rect x="44.9069%" y="117" width="0.4545%" height="15" fill="rgb(247,143,39)"/><text x="45.1569%" y="127.50"></text></g><g><title>specialization_graph_of (305,103 samples, 0.45%)</title><rect x="44.9099%" y="101" width="0.4516%" height="15" fill="rgb(236,97,10)"/><text x="45.1599%" y="111.50"></text></g><g><title>generics_of (187,313 samples, 0.28%)</title><rect x="46.6733%" y="101" width="0.2772%" height="15" fill="rgb(233,208,19)"/><text x="46.9233%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (144,352 samples, 0.21%)</title><rect x="46.7369%" y="85" width="0.2136%" height="15" fill="rgb(216,164,2)"/><text x="46.9869%" y="95.50"></text></g><g><title>impl_trait_ref (524,794 samples, 0.78%)</title><rect x="46.9892%" y="101" width="0.7767%" height="15" fill="rgb(220,129,5)"/><text x="47.2392%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (239,822 samples, 0.35%)</title><rect x="47.4110%" y="85" width="0.3549%" height="15" fill="rgb(242,17,10)"/><text x="47.6610%" y="95.50"></text></g><g><title>specializes (280,954 samples, 0.42%)</title><rect x="47.8664%" y="101" width="0.4158%" height="15" fill="rgb(242,107,0)"/><text x="48.1164%" y="111.50"></text></g><g><title>param_env (208,971 samples, 0.31%)</title><rect x="47.9730%" y="85" width="0.3093%" height="15" fill="rgb(251,28,31)"/><text x="48.2230%" y="95.50"></text></g><g><title>def_span (150,221 samples, 0.22%)</title><rect x="48.0599%" y="69" width="0.2223%" height="15" fill="rgb(233,223,10)"/><text x="48.3099%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (143,801 samples, 0.21%)</title><rect x="48.0694%" y="53" width="0.2128%" height="15" fill="rgb(215,21,27)"/><text x="48.3194%" y="63.50"></text></g><g><title>evaluate_obligation (1,587,286 samples, 2.35%)</title><rect x="45.9931%" y="117" width="2.3493%" height="15" fill="rgb(232,23,21)"/><text x="46.2431%" y="127.50">e..</text></g><g><title>item_types_checking (2,807,718 samples, 4.16%)</title><rect x="44.3164%" y="165" width="4.1556%" height="15" fill="rgb(244,5,23)"/><text x="44.5664%" y="175.50">item_..</text></g><g><title>check_mod_item_types (2,805,468 samples, 4.15%)</title><rect x="44.3197%" y="149" width="4.1522%" height="15" fill="rgb(226,81,46)"/><text x="44.5697%" y="159.50">check..</text></g><g><title>typeck (1,984,300 samples, 2.94%)</title><rect x="45.5351%" y="133" width="2.9369%" height="15" fill="rgb(247,70,30)"/><text x="45.7851%" y="143.50">ty..</text></g><g><title>fn_sig (120,803 samples, 0.18%)</title><rect x="48.6377%" y="133" width="0.1788%" height="15" fill="rgb(212,68,19)"/><text x="48.8877%" y="143.50"></text></g><g><title>generics_of (84,000 samples, 0.12%)</title><rect x="48.8165%" y="133" width="0.1243%" height="15" fill="rgb(240,187,13)"/><text x="49.0665%" y="143.50"></text></g><g><title>late_bound_vars_map (153,113 samples, 0.23%)</title><rect x="49.1920%" y="85" width="0.2266%" height="15" fill="rgb(223,113,26)"/><text x="49.4420%" y="95.50"></text></g><g><title>resolve_lifetimes (140,943 samples, 0.21%)</title><rect x="49.2100%" y="69" width="0.2086%" height="15" fill="rgb(206,192,2)"/><text x="49.4600%" y="79.50"></text></g><g><title>explicit_predicates_of (257,284 samples, 0.38%)</title><rect x="49.0456%" y="101" width="0.3808%" height="15" fill="rgb(241,108,4)"/><text x="49.2956%" y="111.50"></text></g><g><title>predicates_of (425,895 samples, 0.63%)</title><rect x="48.9762%" y="133" width="0.6303%" height="15" fill="rgb(247,173,49)"/><text x="49.2262%" y="143.50"></text></g><g><title>predicates_defined_on (409,355 samples, 0.61%)</title><rect x="49.0007%" y="117" width="0.6059%" height="15" fill="rgb(224,114,35)"/><text x="49.2507%" y="127.50"></text></g><g><title>inferred_outlives_of (121,771 samples, 0.18%)</title><rect x="49.4264%" y="101" width="0.1802%" height="15" fill="rgb(245,159,27)"/><text x="49.6764%" y="111.50"></text></g><g><title>inferred_outlives_crate (112,661 samples, 0.17%)</title><rect x="49.4398%" y="85" width="0.1667%" height="15" fill="rgb(245,172,44)"/><text x="49.6898%" y="95.50"></text></g><g><title>type_collecting (825,379 samples, 1.22%)</title><rect x="48.4732%" y="165" width="1.2216%" height="15" fill="rgb(236,23,11)"/><text x="48.7232%" y="175.50"></text></g><g><title>collect_mod_item_types (817,348 samples, 1.21%)</title><rect x="48.4851%" y="149" width="1.2097%" height="15" fill="rgb(205,117,38)"/><text x="48.7351%" y="159.50"></text></g><g><title>evaluate_obligation (327,453 samples, 0.48%)</title><rect x="51.3776%" y="133" width="0.4846%" height="15" fill="rgb(237,72,25)"/><text x="51.6276%" y="143.50"></text></g><g><title>implied_outlives_bounds (191,274 samples, 0.28%)</title><rect x="51.8622%" y="133" width="0.2831%" height="15" fill="rgb(244,70,9)"/><text x="52.1122%" y="143.50"></text></g><g><title>param_env (133,980 samples, 0.20%)</title><rect x="52.1453%" y="133" width="0.1983%" height="15" fill="rgb(217,125,39)"/><text x="52.3953%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,841,610 samples, 2.73%)</title><rect x="49.8047%" y="149" width="2.7257%" height="15" fill="rgb(235,36,10)"/><text x="50.0547%" y="159.50">ch..</text></g><g><title>region_scope_tree (98,200 samples, 0.15%)</title><rect x="52.3850%" y="133" width="0.1453%" height="15" fill="rgb(251,123,47)"/><text x="52.6350%" y="143.50"></text></g><g><title>adt_sized_constraint (89,132 samples, 0.13%)</title><rect x="53.5435%" y="117" width="0.1319%" height="15" fill="rgb(221,13,13)"/><text x="53.7935%" y="127.50"></text></g><g><title>adt_sized_constraint (122,382 samples, 0.18%)</title><rect x="53.4955%" y="133" width="0.1811%" height="15" fill="rgb(238,131,9)"/><text x="53.7455%" y="143.50"></text></g><g><title>param_env (148,512 samples, 0.22%)</title><rect x="53.8166%" y="133" width="0.2198%" height="15" fill="rgb(211,50,8)"/><text x="54.0666%" y="143.50"></text></g><g><title>analysis (32,711,068 samples, 48.41%)</title><rect x="5.8063%" y="197" width="48.4140%" height="15" fill="rgb(245,182,24)"/><text x="6.0563%" y="207.50">analysis</text></g><g><title>type_check_crate (21,508,157 samples, 31.83%)</title><rect x="22.3872%" y="181" width="31.8332%" height="15" fill="rgb(242,14,37)"/><text x="22.6372%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,055,741 samples, 4.52%)</title><rect x="49.6977%" y="165" width="4.5227%" height="15" fill="rgb(246,228,12)"/><text x="49.9477%" y="175.50">wf_ch..</text></g><g><title>check_item_well_formed (1,141,841 samples, 1.69%)</title><rect x="52.5303%" y="149" width="1.6900%" height="15" fill="rgb(213,55,15)"/><text x="52.7803%" y="159.50"></text></g><g><title>codegen_module (229,972 samples, 0.34%)</title><rect x="55.1326%" y="181" width="0.3404%" height="15" fill="rgb(209,9,3)"/><text x="55.3826%" y="191.50"></text></g><g><title>codegen_crate (908,199 samples, 1.34%)</title><rect x="54.2363%" y="197" width="1.3442%" height="15" fill="rgb(230,59,30)"/><text x="54.4863%" y="207.50"></text></g><g><title>LLVM_module_codegen (3,029,010 samples, 4.48%)</title><rect x="55.6027%" y="181" width="4.4831%" height="15" fill="rgb(209,121,21)"/><text x="55.8527%" y="191.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,959,099 samples, 4.38%)</title><rect x="55.7062%" y="165" width="4.3796%" height="15" fill="rgb(220,109,13)"/><text x="55.9562%" y="175.50">LLVM_..</text></g><g><title>codegen_module_optimize (3,255,823 samples, 4.82%)</title><rect x="55.5805%" y="197" width="4.8188%" height="15" fill="rgb(232,18,1)"/><text x="55.8305%" y="207.50">codege..</text></g><g><title>LLVM_module_optimize (211,832 samples, 0.31%)</title><rect x="60.0858%" y="181" width="0.3135%" height="15" fill="rgb(215,41,42)"/><text x="60.3358%" y="191.50"></text></g><g><title>crate_injection (78,081 samples, 0.12%)</title><rect x="60.8362%" y="181" width="0.1156%" height="15" fill="rgb(224,123,36)"/><text x="61.0862%" y="191.50"></text></g><g><title>metadata_load_macro (77,352 samples, 0.11%)</title><rect x="75.5448%" y="149" width="0.1145%" height="15" fill="rgb(240,125,3)"/><text x="75.7948%" y="159.50"></text></g><g><title>macro_expand_crate (12,601,916 samples, 18.65%)</title><rect x="60.9517%" y="181" width="18.6515%" height="15" fill="rgb(205,98,50)"/><text x="61.2017%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,588,386 samples, 18.63%)</title><rect x="60.9718%" y="165" width="18.6314%" height="15" fill="rgb(205,185,37)"/><text x="61.2218%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,664,707 samples, 3.94%)</title><rect x="75.6593%" y="149" width="3.9439%" height="15" fill="rgb(238,207,15)"/><text x="75.9093%" y="159.50">meta..</text></g><g><title>metadata_register_crate (955,300 samples, 1.41%)</title><rect x="78.1893%" y="133" width="1.4139%" height="15" fill="rgb(213,199,42)"/><text x="78.4393%" y="143.50"></text></g><g><title>metadata_register_crate (79,091 samples, 0.12%)</title><rect x="79.4862%" y="117" width="0.1171%" height="15" fill="rgb(235,201,11)"/><text x="79.7362%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (139,511 samples, 0.21%)</title><rect x="79.6199%" y="181" width="0.2065%" height="15" fill="rgb(207,46,11)"/><text x="79.8699%" y="191.50"></text></g><g><title>late_resolve_crate (1,438,484 samples, 2.13%)</title><rect x="79.9255%" y="165" width="2.1290%" height="15" fill="rgb(241,35,35)"/><text x="80.1755%" y="175.50">l..</text></g><g><title>configure_and_expand (14,694,097 samples, 21.75%)</title><rect x="60.3993%" y="197" width="21.7480%" height="15" fill="rgb(243,32,47)"/><text x="60.6493%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,568,126 samples, 2.32%)</title><rect x="79.8264%" y="181" width="2.3209%" height="15" fill="rgb(247,202,23)"/><text x="80.0764%" y="191.50">r..</text></g><g><title>early_lint_checks (110,171 samples, 0.16%)</title><rect x="82.2557%" y="197" width="0.1631%" height="15" fill="rgb(219,102,11)"/><text x="82.5057%" y="207.50"></text></g><g><title>free_global_ctxt (2,903,759 samples, 4.30%)</title><rect x="82.4188%" y="197" width="4.2977%" height="15" fill="rgb(243,110,44)"/><text x="82.6688%" y="207.50">free_..</text></g><g><title>exported_symbols (78,021 samples, 0.12%)</title><rect x="87.6933%" y="181" width="0.1155%" height="15" fill="rgb(222,74,54)"/><text x="87.9433%" y="191.50"></text></g><g><title>layout_of (154,471 samples, 0.23%)</title><rect x="89.4904%" y="149" width="0.2286%" height="15" fill="rgb(216,99,12)"/><text x="89.7404%" y="159.50"></text></g><g><title>layout_of (132,981 samples, 0.20%)</title><rect x="89.5222%" y="133" width="0.1968%" height="15" fill="rgb(226,22,26)"/><text x="89.7722%" y="143.50"></text></g><g><title>layout_of (411,053 samples, 0.61%)</title><rect x="89.1427%" y="165" width="0.6084%" height="15" fill="rgb(217,163,10)"/><text x="89.3927%" y="175.50"></text></g><g><title>needs_drop_raw (112,700 samples, 0.17%)</title><rect x="91.2486%" y="149" width="0.1668%" height="15" fill="rgb(213,25,53)"/><text x="91.4986%" y="159.50"></text></g><g><title>is_copy_raw (96,240 samples, 0.14%)</title><rect x="91.2730%" y="133" width="0.1424%" height="15" fill="rgb(252,105,26)"/><text x="91.5230%" y="143.50"></text></g><g><title>evaluate_obligation (74,330 samples, 0.11%)</title><rect x="91.3054%" y="117" width="0.1100%" height="15" fill="rgb(220,39,43)"/><text x="91.5554%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,135,404 samples, 1.68%)</title><rect x="89.7511%" y="165" width="1.6805%" height="15" fill="rgb(229,68,48)"/><text x="90.0011%" y="175.50"></text></g><g><title>optimized_mir (2,432,064 samples, 3.60%)</title><rect x="87.8537%" y="181" width="3.5996%" height="15" fill="rgb(252,8,32)"/><text x="88.1037%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (3,230,132 samples, 4.78%)</title><rect x="86.7165%" y="197" width="4.7808%" height="15" fill="rgb(223,20,43)"/><text x="86.9665%" y="207.50">genera..</text></g><g><title>hir_lowering (1,137,612 samples, 1.68%)</title><rect x="91.4972%" y="197" width="1.6837%" height="15" fill="rgb(229,81,49)"/><text x="91.7472%" y="207.50"></text></g><g><title>finish_ongoing_codegen (293,313 samples, 0.43%)</title><rect x="93.1969%" y="181" width="0.4341%" height="15" fill="rgb(236,28,36)"/><text x="93.4469%" y="191.50"></text></g><g><title>link_crate (647,936 samples, 0.96%)</title><rect x="93.6310%" y="181" width="0.9590%" height="15" fill="rgb(249,185,26)"/><text x="93.8810%" y="191.50"></text></g><g><title>link_binary (636,246 samples, 0.94%)</title><rect x="93.6483%" y="165" width="0.9417%" height="15" fill="rgb(249,174,33)"/><text x="93.8983%" y="175.50"></text></g><g><title>link_rlib (382,314 samples, 0.57%)</title><rect x="94.0241%" y="149" width="0.5658%" height="15" fill="rgb(233,201,37)"/><text x="94.2741%" y="159.50"></text></g><g><title>link (957,640 samples, 1.42%)</title><rect x="93.1810%" y="197" width="1.4174%" height="15" fill="rgb(221,78,26)"/><text x="93.4310%" y="207.50"></text></g><g><title>parse_crate (2,472,515 samples, 3.66%)</title><rect x="94.5983%" y="197" width="3.6594%" height="15" fill="rgb(250,127,30)"/><text x="94.8483%" y="207.50">pars..</text></g><g><title>prepare_outputs (293,953 samples, 0.44%)</title><rect x="98.2712%" y="197" width="0.4351%" height="15" fill="rgb(230,49,44)"/><text x="98.5212%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (459,625 samples, 0.68%)</title><rect x="98.7063%" y="197" width="0.6803%" height="15" fill="rgb(229,67,23)"/><text x="98.9563%" y="207.50"></text></g><g><title>setup_global_ctxt (69,240 samples, 0.10%)</title><rect x="99.3874%" y="197" width="0.1025%" height="15" fill="rgb(249,83,47)"/><text x="99.6374%" y="207.50"></text></g><g><title>all (67,565,259 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (67,565,259 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (344,683 samples, 0.51%)</title><rect x="99.4899%" y="197" width="0.5101%" height="15" fill="rgb(219,56,2)"/><text x="99.7399%" y="207.50"></text></g></svg></svg>