<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (49,212,528 samples, 10.72%)</title><rect x="0.1425%" y="197" width="10.7224%" height="15" fill="rgb(227,0,7)"/><text x="0.3925%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (956,932 samples, 0.21%)</title><rect x="15.0638%" y="85" width="0.2085%" height="15" fill="rgb(217,0,24)"/><text x="15.3138%" y="95.50"></text></g><g><title>is_copy_raw (723,417 samples, 0.16%)</title><rect x="15.1147%" y="69" width="0.1576%" height="15" fill="rgb(221,193,54)"/><text x="15.3647%" y="79.50"></text></g><g><title>evaluate_obligation (627,747 samples, 0.14%)</title><rect x="15.1355%" y="53" width="0.1368%" height="15" fill="rgb(248,212,6)"/><text x="15.3855%" y="63.50"></text></g><g><title>specialization_graph_of (1,092,732 samples, 0.24%)</title><rect x="15.4146%" y="69" width="0.2381%" height="15" fill="rgb(208,68,35)"/><text x="15.6646%" y="79.50"></text></g><g><title>impl_trait_ref (552,658 samples, 0.12%)</title><rect x="15.5323%" y="53" width="0.1204%" height="15" fill="rgb(232,128,0)"/><text x="15.7823%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (479,498 samples, 0.10%)</title><rect x="15.5482%" y="37" width="0.1045%" height="15" fill="rgb(207,160,47)"/><text x="15.7982%" y="47.50"></text></g><g><title>resolve_instance (1,798,529 samples, 0.39%)</title><rect x="15.2723%" y="85" width="0.3919%" height="15" fill="rgb(228,23,34)"/><text x="15.5223%" y="95.50"></text></g><g><title>thir_body (1,222,763 samples, 0.27%)</title><rect x="15.6702%" y="85" width="0.2664%" height="15" fill="rgb(218,30,26)"/><text x="15.9202%" y="95.50"></text></g><g><title>mir_const (9,388,353 samples, 2.05%)</title><rect x="13.8950%" y="133" width="2.0455%" height="15" fill="rgb(220,122,19)"/><text x="14.1450%" y="143.50">m..</text></g><g><title>unsafety_check_result (8,236,670 samples, 1.79%)</title><rect x="14.1460%" y="117" width="1.7946%" height="15" fill="rgb(250,228,42)"/><text x="14.3960%" y="127.50">u..</text></g><g><title>mir_built (7,463,873 samples, 1.63%)</title><rect x="14.3143%" y="101" width="1.6262%" height="15" fill="rgb(240,193,28)"/><text x="14.5643%" y="111.50"></text></g><g><title>mir_const_qualif (534,928 samples, 0.12%)</title><rect x="15.9406%" y="133" width="0.1166%" height="15" fill="rgb(216,20,37)"/><text x="16.1906%" y="143.50"></text></g><g><title>mir_promoted (10,948,614 samples, 2.39%)</title><rect x="13.6717%" y="149" width="2.3855%" height="15" fill="rgb(206,188,39)"/><text x="13.9217%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (463,366 samples, 0.10%)</title><rect x="16.0583%" y="149" width="0.1010%" height="15" fill="rgb(217,207,13)"/><text x="16.3083%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (534,714 samples, 0.12%)</title><rect x="16.1592%" y="149" width="0.1165%" height="15" fill="rgb(231,73,38)"/><text x="16.4092%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,230,361 samples, 0.27%)</title><rect x="16.3126%" y="149" width="0.2681%" height="15" fill="rgb(225,20,46)"/><text x="16.5626%" y="159.50"></text></g><g><title>MIR_borrow_checking (25,919,873 samples, 5.65%)</title><rect x="10.9353%" y="181" width="5.6474%" height="15" fill="rgb(210,31,41)"/><text x="11.1853%" y="191.50">MIR_bor..</text></g><g><title>mir_borrowck (25,754,691 samples, 5.61%)</title><rect x="10.9713%" y="165" width="5.6114%" height="15" fill="rgb(221,200,47)"/><text x="11.2213%" y="175.50">mir_bor..</text></g><g><title>check_mod_attrs (572,857 samples, 0.12%)</title><rect x="16.7092%" y="165" width="0.1248%" height="15" fill="rgb(226,26,5)"/><text x="16.9592%" y="175.50"></text></g><g><title>misc_checking_1 (1,234,323 samples, 0.27%)</title><rect x="16.7026%" y="181" width="0.2689%" height="15" fill="rgb(249,33,26)"/><text x="16.9526%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (548,255 samples, 0.12%)</title><rect x="16.9719%" y="165" width="0.1195%" height="15" fill="rgb(235,183,28)"/><text x="17.2219%" y="175.50"></text></g><g><title>misc_checking_2 (1,114,401 samples, 0.24%)</title><rect x="16.9716%" y="181" width="0.2428%" height="15" fill="rgb(221,5,38)"/><text x="17.2216%" y="191.50"></text></g><g><title>match_checking (564,536 samples, 0.12%)</title><rect x="17.0914%" y="165" width="0.1230%" height="15" fill="rgb(247,18,42)"/><text x="17.3414%" y="175.50"></text></g><g><title>check_match (520,865 samples, 0.11%)</title><rect x="17.1009%" y="149" width="0.1135%" height="15" fill="rgb(241,131,45)"/><text x="17.3509%" y="159.50"></text></g><g><title>crate_lints (639,496 samples, 0.14%)</title><rect x="17.3258%" y="149" width="0.1393%" height="15" fill="rgb(249,31,29)"/><text x="17.5758%" y="159.50"></text></g><g><title>lint_checking (1,042,591 samples, 0.23%)</title><rect x="17.3255%" y="165" width="0.2272%" height="15" fill="rgb(225,111,53)"/><text x="17.5755%" y="175.50"></text></g><g><title>privacy_checking_modules (606,666 samples, 0.13%)</title><rect x="17.6056%" y="165" width="0.1322%" height="15" fill="rgb(238,160,17)"/><text x="17.8556%" y="175.50"></text></g><g><title>check_mod_privacy (602,296 samples, 0.13%)</title><rect x="17.6066%" y="149" width="0.1312%" height="15" fill="rgb(214,148,48)"/><text x="17.8566%" y="159.50"></text></g><g><title>misc_checking_3 (2,414,315 samples, 0.53%)</title><rect x="17.2144%" y="181" width="0.5260%" height="15" fill="rgb(232,36,49)"/><text x="17.4644%" y="191.50"></text></g><g><title>impl_trait_ref (625,776 samples, 0.14%)</title><rect x="17.8681%" y="117" width="0.1363%" height="15" fill="rgb(209,103,24)"/><text x="18.1181%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (577,316 samples, 0.13%)</title><rect x="17.8787%" y="101" width="0.1258%" height="15" fill="rgb(229,88,8)"/><text x="18.1287%" y="111.50"></text></g><g><title>coherent_trait (1,193,452 samples, 0.26%)</title><rect x="17.7599%" y="149" width="0.2600%" height="15" fill="rgb(213,181,19)"/><text x="18.0099%" y="159.50"></text></g><g><title>specialization_graph_of (1,184,452 samples, 0.26%)</title><rect x="17.7618%" y="133" width="0.2581%" height="15" fill="rgb(254,191,54)"/><text x="18.0118%" y="143.50"></text></g><g><title>coherence_checking (1,257,383 samples, 0.27%)</title><rect x="17.7572%" y="165" width="0.2740%" height="15" fill="rgb(241,83,37)"/><text x="18.0072%" y="175.50"></text></g><g><title>associated_item (955,678 samples, 0.21%)</title><rect x="23.8725%" y="101" width="0.2082%" height="15" fill="rgb(233,36,39)"/><text x="24.1225%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (759,036 samples, 0.17%)</title><rect x="23.9154%" y="85" width="0.1654%" height="15" fill="rgb(226,3,54)"/><text x="24.1654%" y="95.50"></text></g><g><title>associated_items (1,305,541 samples, 0.28%)</title><rect x="23.8055%" y="117" width="0.2845%" height="15" fill="rgb(245,192,40)"/><text x="24.0555%" y="127.50"></text></g><g><title>dropck_outlives (471,834 samples, 0.10%)</title><rect x="24.1000%" y="117" width="0.1028%" height="15" fill="rgb(238,167,29)"/><text x="24.3500%" y="127.50"></text></g><g><title>mir_for_ctfe (905,264 samples, 0.20%)</title><rect x="25.5046%" y="53" width="0.1972%" height="15" fill="rgb(232,182,51)"/><text x="25.7546%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (895,444 samples, 0.20%)</title><rect x="25.5067%" y="37" width="0.1951%" height="15" fill="rgb(231,60,39)"/><text x="25.7567%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,826,847 samples, 0.40%)</title><rect x="25.3101%" y="101" width="0.3980%" height="15" fill="rgb(208,69,12)"/><text x="25.5601%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,782,856 samples, 0.39%)</title><rect x="25.3197%" y="85" width="0.3884%" height="15" fill="rgb(235,93,37)"/><text x="25.5697%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,741,196 samples, 0.38%)</title><rect x="25.3288%" y="69" width="0.3794%" height="15" fill="rgb(213,116,39)"/><text x="25.5788%" y="79.50"></text></g><g><title>generics_of (972,260 samples, 0.21%)</title><rect x="25.7082%" y="101" width="0.2118%" height="15" fill="rgb(222,207,29)"/><text x="25.9582%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (738,718 samples, 0.16%)</title><rect x="25.7590%" y="85" width="0.1610%" height="15" fill="rgb(206,96,30)"/><text x="26.0090%" y="95.50"></text></g><g><title>impl_trait_ref (1,460,633 samples, 0.32%)</title><rect x="25.9569%" y="101" width="0.3182%" height="15" fill="rgb(218,138,4)"/><text x="26.2069%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,028,359 samples, 0.22%)</title><rect x="26.0511%" y="85" width="0.2241%" height="15" fill="rgb(250,191,14)"/><text x="26.3011%" y="95.50"></text></g><g><title>predicates_of (675,567 samples, 0.15%)</title><rect x="26.2885%" y="101" width="0.1472%" height="15" fill="rgb(239,60,40)"/><text x="26.5385%" y="111.50"></text></g><g><title>specializes (1,671,325 samples, 0.36%)</title><rect x="26.4519%" y="101" width="0.3641%" height="15" fill="rgb(206,27,48)"/><text x="26.7019%" y="111.50"></text></g><g><title>param_env (1,013,158 samples, 0.22%)</title><rect x="26.5953%" y="85" width="0.2207%" height="15" fill="rgb(225,35,8)"/><text x="26.8453%" y="95.50"></text></g><g><title>def_span (462,105 samples, 0.10%)</title><rect x="26.7153%" y="69" width="0.1007%" height="15" fill="rgb(250,213,24)"/><text x="26.9653%" y="79.50"></text></g><g><title>trait_impls_of (1,128,613 samples, 0.25%)</title><rect x="26.8210%" y="101" width="0.2459%" height="15" fill="rgb(247,123,22)"/><text x="27.0710%" y="111.50"></text></g><g><title>evaluate_obligation (13,170,763 samples, 2.87%)</title><rect x="24.2028%" y="117" width="2.8696%" height="15" fill="rgb(231,138,38)"/><text x="24.4528%" y="127.50">ev..</text></g><g><title>generics_of (1,669,471 samples, 0.36%)</title><rect x="27.1028%" y="117" width="0.3637%" height="15" fill="rgb(231,145,46)"/><text x="27.3528%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,291,941 samples, 0.28%)</title><rect x="27.1850%" y="101" width="0.2815%" height="15" fill="rgb(251,118,11)"/><text x="27.4350%" y="111.50"></text></g><g><title>impl_trait_ref (2,931,613 samples, 0.64%)</title><rect x="27.5130%" y="117" width="0.6387%" height="15" fill="rgb(217,147,25)"/><text x="27.7630%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,569,069 samples, 0.56%)</title><rect x="27.5920%" y="101" width="0.5597%" height="15" fill="rgb(247,81,37)"/><text x="27.8420%" y="111.50"></text></g><g><title>typeck (2,017,671 samples, 0.44%)</title><rect x="28.5307%" y="117" width="0.4396%" height="15" fill="rgb(209,12,38)"/><text x="28.7807%" y="127.50"></text></g><g><title>item_bodies_checking (50,241,658 samples, 10.95%)</title><rect x="18.0382%" y="165" width="10.9467%" height="15" fill="rgb(227,1,9)"/><text x="18.2882%" y="175.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (50,238,328 samples, 10.95%)</title><rect x="18.0389%" y="149" width="10.9459%" height="15" fill="rgb(248,47,43)"/><text x="18.2889%" y="159.50">typeck_item_bodi..</text></g><g><title>typeck (50,120,978 samples, 10.92%)</title><rect x="18.0644%" y="133" width="10.9204%" height="15" fill="rgb(221,10,30)"/><text x="18.3144%" y="143.50">typeck</text></g><g><title>item_types_checking (1,337,624 samples, 0.29%)</title><rect x="28.9848%" y="165" width="0.2914%" height="15" fill="rgb(210,229,1)"/><text x="29.2348%" y="175.50"></text></g><g><title>check_mod_item_types (1,332,784 samples, 0.29%)</title><rect x="28.9859%" y="149" width="0.2904%" height="15" fill="rgb(222,148,37)"/><text x="29.2359%" y="159.50"></text></g><g><title>fn_sig (607,524 samples, 0.13%)</title><rect x="29.3398%" y="133" width="0.1324%" height="15" fill="rgb(234,67,33)"/><text x="29.5898%" y="143.50"></text></g><g><title>type_collecting (1,714,987 samples, 0.37%)</title><rect x="29.2766%" y="165" width="0.3737%" height="15" fill="rgb(247,98,35)"/><text x="29.5266%" y="175.50"></text></g><g><title>collect_mod_item_types (1,699,637 samples, 0.37%)</title><rect x="29.2799%" y="149" width="0.3703%" height="15" fill="rgb(247,138,52)"/><text x="29.5299%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,748,708 samples, 0.60%)</title><rect x="29.6975%" y="149" width="0.5989%" height="15" fill="rgb(213,79,30)"/><text x="29.9475%" y="159.50"></text></g><g><title>check_item_well_formed (2,082,820 samples, 0.45%)</title><rect x="30.2964%" y="149" width="0.4538%" height="15" fill="rgb(246,177,23)"/><text x="30.5464%" y="159.50"></text></g><g><title>analysis (92,643,458 samples, 20.19%)</title><rect x="10.8649%" y="197" width="20.1852%" height="15" fill="rgb(230,62,27)"/><text x="11.1149%" y="207.50">analysis</text></g><g><title>type_check_crate (61,087,208 samples, 13.31%)</title><rect x="17.7404%" y="181" width="13.3097%" height="15" fill="rgb(216,154,8)"/><text x="17.9904%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,416,245 samples, 1.40%)</title><rect x="29.6521%" y="165" width="1.3980%" height="15" fill="rgb(244,35,45)"/><text x="29.9021%" y="175.50"></text></g><g><title>check_trait_item_well_formed (1,376,414 samples, 0.30%)</title><rect x="30.7502%" y="149" width="0.2999%" height="15" fill="rgb(251,115,12)"/><text x="31.0002%" y="159.50"></text></g><g><title>const_caller_location (472,642 samples, 0.10%)</title><rect x="37.7872%" y="165" width="0.1030%" height="15" fill="rgb(240,54,50)"/><text x="38.0372%" y="175.50"></text></g><g><title>layout_of (749,616 samples, 0.16%)</title><rect x="38.5035%" y="133" width="0.1633%" height="15" fill="rgb(233,84,52)"/><text x="38.7535%" y="143.50"></text></g><g><title>layout_of (2,000,909 samples, 0.44%)</title><rect x="38.3020%" y="149" width="0.4360%" height="15" fill="rgb(207,117,47)"/><text x="38.5520%" y="159.50"></text></g><g><title>predicates_of (738,015 samples, 0.16%)</title><rect x="39.0470%" y="133" width="0.1608%" height="15" fill="rgb(249,43,39)"/><text x="39.2970%" y="143.50"></text></g><g><title>predicates_defined_on (540,782 samples, 0.12%)</title><rect x="39.0900%" y="117" width="0.1178%" height="15" fill="rgb(209,38,44)"/><text x="39.3400%" y="127.50"></text></g><g><title>param_env (2,161,760 samples, 0.47%)</title><rect x="38.7380%" y="149" width="0.4710%" height="15" fill="rgb(236,212,23)"/><text x="38.9880%" y="159.50"></text></g><g><title>fn_abi_of_instance (6,314,374 samples, 1.38%)</title><rect x="37.8922%" y="165" width="1.3758%" height="15" fill="rgb(242,79,21)"/><text x="38.1422%" y="175.50"></text></g><g><title>layout_of (566,299 samples, 0.12%)</title><rect x="39.5193%" y="133" width="0.1234%" height="15" fill="rgb(211,96,35)"/><text x="39.7693%" y="143.50"></text></g><g><title>layout_of (977,302 samples, 0.21%)</title><rect x="39.4432%" y="149" width="0.2129%" height="15" fill="rgb(253,215,40)"/><text x="39.6932%" y="159.50"></text></g><g><title>layout_of (1,611,782 samples, 0.35%)</title><rect x="39.3314%" y="165" width="0.3512%" height="15" fill="rgb(211,81,21)"/><text x="39.5814%" y="175.50"></text></g><g><title>codegen_module (38,135,675 samples, 8.31%)</title><rect x="31.4791%" y="181" width="8.3090%" height="15" fill="rgb(208,190,38)"/><text x="31.7291%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (40,171,276 samples, 8.75%)</title><rect x="31.0525%" y="197" width="8.7525%" height="15" fill="rgb(235,213,38)"/><text x="31.3025%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (193,848,444 samples, 42.24%)</title><rect x="39.8562%" y="181" width="42.2357%" height="15" fill="rgb(237,122,38)"/><text x="40.1062%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (182,228,406 samples, 39.70%)</title><rect x="42.3880%" y="165" width="39.7040%" height="15" fill="rgb(244,218,35)"/><text x="42.6380%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (203,983,496 samples, 44.44%)</title><rect x="39.8051%" y="197" width="44.4440%" height="15" fill="rgb(240,68,47)"/><text x="40.0551%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,900,428 samples, 2.16%)</title><rect x="82.0919%" y="181" width="2.1571%" height="15" fill="rgb(210,16,53)"/><text x="82.3419%" y="191.50">L..</text></g><g><title>metadata_register_crate (2,693,037 samples, 0.59%)</title><rect x="88.8356%" y="149" width="0.5868%" height="15" fill="rgb(235,124,12)"/><text x="89.0856%" y="159.50"></text></g><g><title>metadata_register_crate (992,890 samples, 0.22%)</title><rect x="89.2060%" y="133" width="0.2163%" height="15" fill="rgb(224,169,11)"/><text x="89.4560%" y="143.50"></text></g><g><title>macro_expand_crate (23,722,560 samples, 5.17%)</title><rect x="84.3532%" y="181" width="5.1687%" height="15" fill="rgb(250,166,2)"/><text x="84.6032%" y="191.50">macro_..</text></g><g><title>expand_crate (23,701,969 samples, 5.16%)</title><rect x="84.3577%" y="165" width="5.1642%" height="15" fill="rgb(242,216,29)"/><text x="84.6077%" y="175.50">expand..</text></g><g><title>late_resolve_crate (1,723,977 samples, 0.38%)</title><rect x="89.5565%" y="165" width="0.3756%" height="15" fill="rgb(230,116,27)"/><text x="89.8065%" y="175.50"></text></g><g><title>configure_and_expand (26,179,124 samples, 5.70%)</title><rect x="84.2490%" y="197" width="5.7039%" height="15" fill="rgb(228,99,48)"/><text x="84.4990%" y="207.50">configu..</text></g><g><title>resolve_crate (1,923,489 samples, 0.42%)</title><rect x="89.5339%" y="181" width="0.4191%" height="15" fill="rgb(253,11,6)"/><text x="89.7839%" y="191.50"></text></g><g><title>free_global_ctxt (7,819,280 samples, 1.70%)</title><rect x="90.0585%" y="197" width="1.7037%" height="15" fill="rgb(247,143,39)"/><text x="90.3085%" y="207.50"></text></g><g><title>item_attrs (989,628 samples, 0.22%)</title><rect x="92.3589%" y="101" width="0.2156%" height="15" fill="rgb(236,97,10)"/><text x="92.6089%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (964,138 samples, 0.21%)</title><rect x="92.3644%" y="85" width="0.2101%" height="15" fill="rgb(233,208,19)"/><text x="92.6144%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,373,052 samples, 0.30%)</title><rect x="92.3199%" y="117" width="0.2992%" height="15" fill="rgb(216,164,2)"/><text x="92.5699%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (846,825 samples, 0.18%)</title><rect x="93.4037%" y="101" width="0.1845%" height="15" fill="rgb(220,129,5)"/><text x="93.6537%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,180,360 samples, 0.48%)</title><rect x="93.5882%" y="101" width="0.4751%" height="15" fill="rgb(242,17,10)"/><text x="93.8382%" y="111.50"></text></g><g><title>eval_to_const_value_raw (706,028 samples, 0.15%)</title><rect x="94.0838%" y="85" width="0.1538%" height="15" fill="rgb(242,107,0)"/><text x="94.3338%" y="95.50"></text></g><g><title>eval_to_const_value_raw (666,776 samples, 0.15%)</title><rect x="94.0923%" y="69" width="0.1453%" height="15" fill="rgb(251,28,31)"/><text x="94.3423%" y="79.50"></text></g><g><title>eval_to_allocation_raw (621,176 samples, 0.14%)</title><rect x="94.1023%" y="53" width="0.1353%" height="15" fill="rgb(233,223,10)"/><text x="94.3523%" y="63.50"></text></g><g><title>optimized_mir (7,049,838 samples, 1.54%)</title><rect x="92.7315%" y="117" width="1.5360%" height="15" fill="rgb(215,21,27)"/><text x="92.9815%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (937,551 samples, 0.20%)</title><rect x="94.0632%" y="101" width="0.2043%" height="15" fill="rgb(232,23,21)"/><text x="94.3132%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,666,925 samples, 0.36%)</title><rect x="94.3647%" y="101" width="0.3632%" height="15" fill="rgb(244,5,23)"/><text x="94.6147%" y="111.50"></text></g><g><title>specialization_graph_of (1,416,695 samples, 0.31%)</title><rect x="94.8061%" y="101" width="0.3087%" height="15" fill="rgb(226,81,46)"/><text x="95.0561%" y="111.50"></text></g><g><title>impl_trait_ref (499,266 samples, 0.11%)</title><rect x="95.0060%" y="85" width="0.1088%" height="15" fill="rgb(247,70,30)"/><text x="95.2560%" y="95.50"></text></g><g><title>resolve_instance (4,081,778 samples, 0.89%)</title><rect x="94.2675%" y="117" width="0.8893%" height="15" fill="rgb(212,68,19)"/><text x="94.5175%" y="127.50"></text></g><g><title>own_existential_vtable_entries (467,235 samples, 0.10%)</title><rect x="95.2603%" y="101" width="0.1018%" height="15" fill="rgb(240,187,13)"/><text x="95.5103%" y="111.50"></text></g><g><title>impl_parent (719,667 samples, 0.16%)</title><rect x="95.6941%" y="69" width="0.1568%" height="15" fill="rgb(223,113,26)"/><text x="95.9441%" y="79.50"></text></g><g><title>impl_trait_ref (1,671,550 samples, 0.36%)</title><rect x="95.8509%" y="69" width="0.3642%" height="15" fill="rgb(206,192,2)"/><text x="96.1009%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,384,709 samples, 0.30%)</title><rect x="95.9134%" y="53" width="0.3017%" height="15" fill="rgb(241,108,4)"/><text x="96.1634%" y="63.50"></text></g><g><title>specialization_graph_of (3,706,488 samples, 0.81%)</title><rect x="95.4078%" y="85" width="0.8076%" height="15" fill="rgb(247,173,49)"/><text x="95.6578%" y="95.50"></text></g><g><title>resolve_instance (3,926,711 samples, 0.86%)</title><rect x="95.3621%" y="101" width="0.8556%" height="15" fill="rgb(224,114,35)"/><text x="95.6121%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (19,078,673 samples, 4.16%)</title><rect x="92.0616%" y="133" width="4.1569%" height="15" fill="rgb(245,159,27)"/><text x="92.3116%" y="143.50">monom..</text></g><g><title>vtable_entries (4,564,847 samples, 0.99%)</title><rect x="95.2239%" y="117" width="0.9946%" height="15" fill="rgb(245,172,44)"/><text x="95.4739%" y="127.50"></text></g><g><title>monomorphization_collector (19,172,924 samples, 4.18%)</title><rect x="92.0610%" y="149" width="4.1774%" height="15" fill="rgb(236,23,11)"/><text x="92.3110%" y="159.50">monom..</text></g><g><title>assert_symbols_are_distinct (1,094,591 samples, 0.24%)</title><rect x="96.2393%" y="133" width="0.2385%" height="15" fill="rgb(205,117,38)"/><text x="96.4893%" y="143.50"></text></g><g><title>symbol_name (994,610 samples, 0.22%)</title><rect x="96.2610%" y="117" width="0.2167%" height="15" fill="rgb(237,72,25)"/><text x="96.5110%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (20,927,282 samples, 4.56%)</title><rect x="92.0520%" y="165" width="4.5596%" height="15" fill="rgb(244,70,9)"/><text x="92.3020%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,713,208 samples, 0.37%)</title><rect x="96.2384%" y="149" width="0.3733%" height="15" fill="rgb(217,125,39)"/><text x="96.4884%" y="159.50"></text></g><g><title>cgu_partitioning (614,446 samples, 0.13%)</title><rect x="96.4777%" y="133" width="0.1339%" height="15" fill="rgb(235,36,10)"/><text x="96.7277%" y="143.50"></text></g><g><title>exported_symbols (21,102,353 samples, 4.60%)</title><rect x="92.0378%" y="181" width="4.5978%" height="15" fill="rgb(251,123,47)"/><text x="92.2878%" y="191.50">expor..</text></g><g><title>layout_of (568,026 samples, 0.12%)</title><rect x="96.9540%" y="165" width="0.1238%" height="15" fill="rgb(221,13,13)"/><text x="97.2040%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,611,026 samples, 0.35%)</title><rect x="97.0778%" y="165" width="0.3510%" height="15" fill="rgb(238,131,9)"/><text x="97.3278%" y="175.50"></text></g><g><title>optimized_mir (3,504,976 samples, 0.76%)</title><rect x="96.6668%" y="181" width="0.7637%" height="15" fill="rgb(211,50,8)"/><text x="96.9168%" y="191.50"></text></g><g><title>generate_crate_metadata (26,057,404 samples, 5.68%)</title><rect x="91.7622%" y="197" width="5.6774%" height="15" fill="rgb(245,182,24)"/><text x="92.0122%" y="207.50">generat..</text></g><g><title>hir_lowering (3,034,141 samples, 0.66%)</title><rect x="97.4395%" y="197" width="0.6611%" height="15" fill="rgb(242,14,37)"/><text x="97.6895%" y="207.50"></text></g><g><title>finish_ongoing_codegen (4,015,290 samples, 0.87%)</title><rect x="98.1039%" y="181" width="0.8749%" height="15" fill="rgb(246,228,12)"/><text x="98.3539%" y="191.50"></text></g><g><title>link_crate (1,921,360 samples, 0.42%)</title><rect x="98.9788%" y="181" width="0.4186%" height="15" fill="rgb(213,55,15)"/><text x="99.2288%" y="191.50"></text></g><g><title>link_binary (1,866,349 samples, 0.41%)</title><rect x="98.9908%" y="165" width="0.4066%" height="15" fill="rgb(209,9,3)"/><text x="99.2408%" y="175.50"></text></g><g><title>link_rlib (1,304,973 samples, 0.28%)</title><rect x="99.1131%" y="149" width="0.2843%" height="15" fill="rgb(230,59,30)"/><text x="99.3631%" y="159.50"></text></g><g><title>link (5,963,760 samples, 1.30%)</title><rect x="98.1006%" y="197" width="1.2994%" height="15" fill="rgb(209,121,21)"/><text x="98.3506%" y="207.50"></text></g><g><title>parse_crate (496,445 samples, 0.11%)</title><rect x="99.4000%" y="197" width="0.1082%" height="15" fill="rgb(220,109,13)"/><text x="99.6500%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,588,296 samples, 0.35%)</title><rect x="99.5552%" y="197" width="0.3461%" height="15" fill="rgb(232,18,1)"/><text x="99.8052%" y="207.50"></text></g><g><title>all (458,967,867 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (458,967,867 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>