<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (133,875,285 samples, 10.48%)</title><rect x="0.0325%" y="197" width="10.4768%" height="15" fill="rgb(227,0,7)"/><text x="0.2825%" y="207.50">LLVM_passes</text></g><g><title>specialization_graph_of (4,230,153 samples, 0.33%)</title><rect x="11.1180%" y="69" width="0.3310%" height="15" fill="rgb(217,0,24)"/><text x="11.3680%" y="79.50"></text></g><g><title>impl_trait_ref (2,302,347 samples, 0.18%)</title><rect x="11.2689%" y="53" width="0.1802%" height="15" fill="rgb(221,193,54)"/><text x="11.5189%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,036,113 samples, 0.16%)</title><rect x="11.2897%" y="37" width="0.1593%" height="15" fill="rgb(248,212,6)"/><text x="11.5397%" y="47.50"></text></g><g><title>resolve_instance (4,512,205 samples, 0.35%)</title><rect x="11.0985%" y="85" width="0.3531%" height="15" fill="rgb(208,68,35)"/><text x="11.3485%" y="95.50"></text></g><g><title>mir_const (7,470,795 samples, 0.58%)</title><rect x="10.9014%" y="133" width="0.5847%" height="15" fill="rgb(232,128,0)"/><text x="11.1514%" y="143.50"></text></g><g><title>unsafety_check_result (6,993,240 samples, 0.55%)</title><rect x="10.9388%" y="117" width="0.5473%" height="15" fill="rgb(207,160,47)"/><text x="11.1888%" y="127.50"></text></g><g><title>mir_built (6,582,467 samples, 0.52%)</title><rect x="10.9710%" y="101" width="0.5151%" height="15" fill="rgb(228,23,34)"/><text x="11.2210%" y="111.50"></text></g><g><title>mir_promoted (8,664,455 samples, 0.68%)</title><rect x="10.8716%" y="149" width="0.6781%" height="15" fill="rgb(218,30,26)"/><text x="11.1216%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,269,324 samples, 1.12%)</title><rect x="10.5212%" y="181" width="1.1167%" height="15" fill="rgb(220,122,19)"/><text x="10.7712%" y="191.50"></text></g><g><title>mir_borrowck (14,222,483 samples, 1.11%)</title><rect x="10.5249%" y="165" width="1.1130%" height="15" fill="rgb(250,228,42)"/><text x="10.7749%" y="175.50"></text></g><g><title>specialization_graph_of (3,551,886 samples, 0.28%)</title><rect x="11.8790%" y="117" width="0.2780%" height="15" fill="rgb(240,193,28)"/><text x="12.1290%" y="127.50"></text></g><g><title>impl_trait_ref (1,666,934 samples, 0.13%)</title><rect x="12.0265%" y="101" width="0.1305%" height="15" fill="rgb(216,20,37)"/><text x="12.2765%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,402,101 samples, 0.11%)</title><rect x="12.0472%" y="85" width="0.1097%" height="15" fill="rgb(206,188,39)"/><text x="12.2972%" y="95.50"></text></g><g><title>resolve_instance (3,604,426 samples, 0.28%)</title><rect x="11.8751%" y="133" width="0.2821%" height="15" fill="rgb(217,207,13)"/><text x="12.1251%" y="143.50"></text></g><g><title>crate_lints (4,971,840 samples, 0.39%)</title><rect x="11.7687%" y="149" width="0.3891%" height="15" fill="rgb(231,73,38)"/><text x="12.0187%" y="159.50"></text></g><g><title>lint_checking (5,155,652 samples, 0.40%)</title><rect x="11.7685%" y="165" width="0.4035%" height="15" fill="rgb(225,20,46)"/><text x="12.0185%" y="175.50"></text></g><g><title>misc_checking_3 (5,798,268 samples, 0.45%)</title><rect x="11.7507%" y="181" width="0.4538%" height="15" fill="rgb(210,31,41)"/><text x="12.0007%" y="191.50"></text></g><g><title>evaluate_obligation (4,585,466 samples, 0.36%)</title><rect x="13.0088%" y="117" width="0.3588%" height="15" fill="rgb(221,200,47)"/><text x="13.2588%" y="127.50"></text></g><g><title>item_bodies_checking (16,108,172 samples, 1.26%)</title><rect x="12.2422%" y="165" width="1.2606%" height="15" fill="rgb(226,26,5)"/><text x="12.4922%" y="175.50"></text></g><g><title>typeck_item_bodies (16,104,472 samples, 1.26%)</title><rect x="12.2425%" y="149" width="1.2603%" height="15" fill="rgb(249,33,26)"/><text x="12.4925%" y="159.50"></text></g><g><title>typeck (16,073,102 samples, 1.26%)</title><rect x="12.2449%" y="133" width="1.2579%" height="15" fill="rgb(235,183,28)"/><text x="12.4949%" y="143.50"></text></g><g><title>mir_const (2,979,110 samples, 0.23%)</title><rect x="13.6099%" y="85" width="0.2331%" height="15" fill="rgb(221,5,38)"/><text x="13.8599%" y="95.50"></text></g><g><title>unsafety_check_result (2,873,919 samples, 0.22%)</title><rect x="13.6182%" y="69" width="0.2249%" height="15" fill="rgb(247,18,42)"/><text x="13.8682%" y="79.50"></text></g><g><title>mir_built (2,808,698 samples, 0.22%)</title><rect x="13.6233%" y="53" width="0.2198%" height="15" fill="rgb(241,131,45)"/><text x="13.8733%" y="63.50"></text></g><g><title>typeck (1,953,159 samples, 0.15%)</title><rect x="13.6902%" y="37" width="0.1529%" height="15" fill="rgb(249,31,29)"/><text x="13.9402%" y="47.50"></text></g><g><title>mir_promoted (3,069,500 samples, 0.24%)</title><rect x="13.6032%" y="101" width="0.2402%" height="15" fill="rgb(225,111,53)"/><text x="13.8532%" y="111.50"></text></g><g><title>type_of (4,058,931 samples, 0.32%)</title><rect x="13.5452%" y="133" width="0.3176%" height="15" fill="rgb(238,160,17)"/><text x="13.7952%" y="143.50"></text></g><g><title>mir_borrowck (4,055,711 samples, 0.32%)</title><rect x="13.5454%" y="117" width="0.3174%" height="15" fill="rgb(214,148,48)"/><text x="13.7954%" y="127.50"></text></g><g><title>item_types_checking (6,082,431 samples, 0.48%)</title><rect x="13.5028%" y="165" width="0.4760%" height="15" fill="rgb(232,36,49)"/><text x="13.7528%" y="175.50"></text></g><g><title>check_mod_item_types (6,077,421 samples, 0.48%)</title><rect x="13.5032%" y="149" width="0.4756%" height="15" fill="rgb(209,103,24)"/><text x="13.7532%" y="159.50"></text></g><g><title>typeck (1,481,684 samples, 0.12%)</title><rect x="13.8628%" y="133" width="0.1160%" height="15" fill="rgb(229,88,8)"/><text x="14.1128%" y="143.50"></text></g><g><title>check_item_well_formed (1,499,692 samples, 0.12%)</title><rect x="14.0745%" y="149" width="0.1174%" height="15" fill="rgb(213,181,19)"/><text x="14.3245%" y="159.50"></text></g><g><title>analysis (47,081,783 samples, 3.68%)</title><rect x="10.5093%" y="197" width="3.6845%" height="15" fill="rgb(254,191,54)"/><text x="10.7593%" y="207.50">anal..</text></g><g><title>type_check_crate (25,420,845 samples, 1.99%)</title><rect x="12.2045%" y="181" width="1.9894%" height="15" fill="rgb(241,83,37)"/><text x="12.4545%" y="191.50">t..</text></g><g><title>wf_checking (1,986,200 samples, 0.16%)</title><rect x="14.0384%" y="165" width="0.1554%" height="15" fill="rgb(233,36,39)"/><text x="14.2884%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (2,669,547 samples, 0.21%)</title><rect x="21.5562%" y="165" width="0.2089%" height="15" fill="rgb(226,3,54)"/><text x="21.8062%" y="175.50"></text></g><g><title>layout_of (3,406,096 samples, 0.27%)</title><rect x="22.3941%" y="149" width="0.2666%" height="15" fill="rgb(245,192,40)"/><text x="22.6441%" y="159.50"></text></g><g><title>predicates_of (2,225,013 samples, 0.17%)</title><rect x="23.0059%" y="133" width="0.1741%" height="15" fill="rgb(238,167,29)"/><text x="23.2559%" y="143.50"></text></g><g><title>predicates_defined_on (1,646,475 samples, 0.13%)</title><rect x="23.0512%" y="117" width="0.1288%" height="15" fill="rgb(232,182,51)"/><text x="23.3012%" y="127.50"></text></g><g><title>param_env (6,652,666 samples, 0.52%)</title><rect x="22.6606%" y="149" width="0.5206%" height="15" fill="rgb(231,60,39)"/><text x="22.9106%" y="159.50"></text></g><g><title>normalize_projection_ty (1,680,835 samples, 0.13%)</title><rect x="23.2291%" y="133" width="0.1315%" height="15" fill="rgb(208,69,12)"/><text x="23.4791%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,312,308 samples, 0.18%)</title><rect x="23.1813%" y="149" width="0.1810%" height="15" fill="rgb(235,93,37)"/><text x="23.4313%" y="159.50"></text></g><g><title>fn_abi_of_instance (19,273,925 samples, 1.51%)</title><rect x="21.8605%" y="165" width="1.5083%" height="15" fill="rgb(213,116,39)"/><text x="22.1105%" y="175.50"></text></g><g><title>layout_of (3,295,024 samples, 0.26%)</title><rect x="23.4458%" y="165" width="0.2579%" height="15" fill="rgb(222,207,29)"/><text x="23.6958%" y="175.50"></text></g><g><title>symbol_name (1,370,890 samples, 0.11%)</title><rect x="23.7058%" y="165" width="0.1073%" height="15" fill="rgb(206,96,30)"/><text x="23.9558%" y="175.50"></text></g><g><title>codegen_module (120,427,201 samples, 9.42%)</title><rect x="14.4072%" y="181" width="9.4244%" height="15" fill="rgb(218,138,4)"/><text x="14.6572%" y="191.50">codegen_module</text></g><g><title>item_attrs (2,001,191 samples, 0.16%)</title><rect x="24.2607%" y="117" width="0.1566%" height="15" fill="rgb(250,191,14)"/><text x="24.5107%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,920,090 samples, 0.15%)</title><rect x="24.2671%" y="101" width="0.1503%" height="15" fill="rgb(239,60,40)"/><text x="24.5171%" y="111.50"></text></g><g><title>codegen_fn_attrs (3,170,998 samples, 0.25%)</title><rect x="24.2197%" y="133" width="0.2482%" height="15" fill="rgb(206,27,48)"/><text x="24.4697%" y="143.50"></text></g><g><title>mir_shims (1,556,336 samples, 0.12%)</title><rect x="24.5241%" y="133" width="0.1218%" height="15" fill="rgb(225,35,8)"/><text x="24.7741%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,472,095 samples, 0.27%)</title><rect x="24.8090%" y="117" width="0.2717%" height="15" fill="rgb(250,213,24)"/><text x="25.0590%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,992,834 samples, 0.16%)</title><rect x="25.0807%" y="117" width="0.1560%" height="15" fill="rgb(247,123,22)"/><text x="25.3307%" y="127.50"></text></g><g><title>optimized_mir (8,089,892 samples, 0.63%)</title><rect x="24.6460%" y="133" width="0.6331%" height="15" fill="rgb(231,138,38)"/><text x="24.8960%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (5,020,460 samples, 0.39%)</title><rect x="25.4529%" y="117" width="0.3929%" height="15" fill="rgb(231,145,46)"/><text x="25.7029%" y="127.50"></text></g><g><title>specialization_graph_of (2,809,219 samples, 0.22%)</title><rect x="26.0124%" y="117" width="0.2198%" height="15" fill="rgb(251,118,11)"/><text x="26.2624%" y="127.50"></text></g><g><title>resolve_instance (12,816,480 samples, 1.00%)</title><rect x="25.2791%" y="133" width="1.0030%" height="15" fill="rgb(217,147,25)"/><text x="25.5291%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,477,075 samples, 0.12%)</title><rect x="26.3089%" y="133" width="0.1156%" height="15" fill="rgb(247,81,37)"/><text x="26.5589%" y="143.50"></text></g><g><title>specialization_graph_of (2,868,498 samples, 0.22%)</title><rect x="26.5837%" y="101" width="0.2245%" height="15" fill="rgb(209,12,38)"/><text x="26.8337%" y="111.50"></text></g><g><title>resolve_instance (3,668,466 samples, 0.29%)</title><rect x="26.5223%" y="117" width="0.2871%" height="15" fill="rgb(227,1,9)"/><text x="26.7723%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (37,980,601 samples, 2.97%)</title><rect x="23.8377%" y="149" width="2.9723%" height="15" fill="rgb(248,47,43)"/><text x="24.0877%" y="159.50">mon..</text></g><g><title>vtable_entries (4,669,386 samples, 0.37%)</title><rect x="26.4446%" y="133" width="0.3654%" height="15" fill="rgb(221,10,30)"/><text x="26.6946%" y="143.50"></text></g><g><title>monomorphization_collector (38,007,461 samples, 2.97%)</title><rect x="23.8376%" y="165" width="2.9744%" height="15" fill="rgb(210,229,1)"/><text x="24.0876%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,494,286 samples, 0.27%)</title><rect x="26.8124%" y="149" width="0.2735%" height="15" fill="rgb(222,148,37)"/><text x="27.0624%" y="159.50"></text></g><g><title>symbol_name (3,108,299 samples, 0.24%)</title><rect x="26.8426%" y="133" width="0.2432%" height="15" fill="rgb(234,67,33)"/><text x="27.0926%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (43,335,336 samples, 3.39%)</title><rect x="23.8324%" y="181" width="3.3913%" height="15" fill="rgb(247,98,35)"/><text x="24.0824%" y="191.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (5,262,103 samples, 0.41%)</title><rect x="26.8120%" y="165" width="0.4118%" height="15" fill="rgb(247,138,52)"/><text x="27.0620%" y="175.50"></text></g><g><title>cgu_partitioning (1,762,357 samples, 0.14%)</title><rect x="27.0859%" y="149" width="0.1379%" height="15" fill="rgb(213,79,30)"/><text x="27.3359%" y="159.50"></text></g><g><title>codegen_crate (166,905,267 samples, 13.06%)</title><rect x="14.1944%" y="197" width="13.0617%" height="15" fill="rgb(246,177,23)"/><text x="14.4444%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (580,581,922 samples, 45.44%)</title><rect x="27.2757%" y="181" width="45.4352%" height="15" fill="rgb(230,62,27)"/><text x="27.5257%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (553,850,839 samples, 43.34%)</title><rect x="29.3676%" y="165" width="43.3433%" height="15" fill="rgb(216,154,8)"/><text x="29.6176%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (610,183,591 samples, 47.75%)</title><rect x="27.2560%" y="197" width="47.7518%" height="15" fill="rgb(244,35,45)"/><text x="27.5060%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (29,350,276 samples, 2.30%)</title><rect x="72.7109%" y="181" width="2.2969%" height="15" fill="rgb(251,115,12)"/><text x="72.9609%" y="191.50">L..</text></g><g><title>metadata_register_crate (1,804,648 samples, 0.14%)</title><rect x="75.7814%" y="149" width="0.1412%" height="15" fill="rgb(240,54,50)"/><text x="76.0314%" y="159.50"></text></g><g><title>macro_expand_crate (11,415,245 samples, 0.89%)</title><rect x="75.0309%" y="181" width="0.8933%" height="15" fill="rgb(233,84,52)"/><text x="75.2809%" y="191.50"></text></g><g><title>expand_crate (11,400,164 samples, 0.89%)</title><rect x="75.0321%" y="165" width="0.8922%" height="15" fill="rgb(207,117,47)"/><text x="75.2821%" y="175.50"></text></g><g><title>late_resolve_crate (1,630,657 samples, 0.13%)</title><rect x="75.9601%" y="165" width="0.1276%" height="15" fill="rgb(249,43,39)"/><text x="76.2101%" y="175.50"></text></g><g><title>configure_and_expand (13,850,498 samples, 1.08%)</title><rect x="75.0078%" y="197" width="1.0839%" height="15" fill="rgb(209,38,44)"/><text x="75.2578%" y="207.50"></text></g><g><title>resolve_crate (1,856,499 samples, 0.15%)</title><rect x="75.9465%" y="181" width="0.1453%" height="15" fill="rgb(236,212,23)"/><text x="76.1965%" y="191.50"></text></g><g><title>free_global_ctxt (5,822,549 samples, 0.46%)</title><rect x="76.1141%" y="197" width="0.4557%" height="15" fill="rgb(242,79,21)"/><text x="76.3641%" y="207.50"></text></g><g><title>finish_ongoing_codegen (15,909,700 samples, 1.25%)</title><rect x="76.6772%" y="181" width="1.2451%" height="15" fill="rgb(211,96,35)"/><text x="76.9272%" y="191.50"></text></g><g><title>link_crate (279,591,288 samples, 21.88%)</title><rect x="77.9222%" y="181" width="21.8803%" height="15" fill="rgb(253,215,40)"/><text x="78.1722%" y="191.50">link_crate</text></g><g><title>link_binary (279,519,348 samples, 21.87%)</title><rect x="77.9278%" y="165" width="21.8746%" height="15" fill="rgb(211,81,21)"/><text x="78.1778%" y="175.50">link_binary</text></g><g><title>run_linker (278,160,974 samples, 21.77%)</title><rect x="78.0341%" y="149" width="21.7683%" height="15" fill="rgb(208,190,38)"/><text x="78.2841%" y="159.50">run_linker</text></g><g><title>link (295,537,109 samples, 23.13%)</title><rect x="76.6752%" y="197" width="23.1282%" height="15" fill="rgb(235,213,38)"/><text x="76.9252%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (1,725,327 samples, 0.14%)</title><rect x="99.8575%" y="197" width="0.1350%" height="15" fill="rgb(237,122,38)"/><text x="100.1075%" y="207.50"></text></g><g><title>all (1,277,823,388 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,277,823,388 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>