<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (50,338,168 samples, 9.89%)</title><rect x="0.1332%" y="197" width="9.8886%" height="15" fill="rgb(227,0,7)"/><text x="0.3832%" y="207.50">LLVM_passes</text></g><g><title>is_late_bound_map (509,773 samples, 0.10%)</title><rect x="14.0731%" y="149" width="0.1001%" height="15" fill="rgb(217,0,24)"/><text x="14.3231%" y="159.50"></text></g><g><title>thir_body (1,297,197 samples, 0.25%)</title><rect x="15.4917%" y="85" width="0.2548%" height="15" fill="rgb(221,193,54)"/><text x="15.7417%" y="95.50"></text></g><g><title>mir_const (6,624,567 samples, 1.30%)</title><rect x="14.4484%" y="133" width="1.3014%" height="15" fill="rgb(248,212,6)"/><text x="14.6984%" y="143.50"></text></g><g><title>unsafety_check_result (5,770,038 samples, 1.13%)</title><rect x="14.6162%" y="117" width="1.1335%" height="15" fill="rgb(208,68,35)"/><text x="14.8662%" y="127.50"></text></g><g><title>mir_built (5,283,064 samples, 1.04%)</title><rect x="14.7119%" y="101" width="1.0378%" height="15" fill="rgb(232,128,0)"/><text x="14.9619%" y="111.50"></text></g><g><title>mir_promoted (11,414,382 samples, 2.24%)</title><rect x="14.1732%" y="149" width="2.2423%" height="15" fill="rgb(207,160,47)"/><text x="14.4232%" y="159.50">m..</text></g><g><title>mir_const_qualif (3,389,101 samples, 0.67%)</title><rect x="15.7497%" y="133" width="0.6658%" height="15" fill="rgb(228,23,34)"/><text x="15.9997%" y="143.50"></text></g><g><title>mir_const (2,841,804 samples, 0.56%)</title><rect x="15.8572%" y="117" width="0.5583%" height="15" fill="rgb(218,30,26)"/><text x="16.1072%" y="127.50"></text></g><g><title>unsafety_check_result (2,049,578 samples, 0.40%)</title><rect x="16.0129%" y="101" width="0.4026%" height="15" fill="rgb(220,122,19)"/><text x="16.2629%" y="111.50"></text></g><g><title>mir_built (1,806,277 samples, 0.35%)</title><rect x="16.0607%" y="85" width="0.3548%" height="15" fill="rgb(250,228,42)"/><text x="16.3107%" y="95.50"></text></g><g><title>type_op_prove_predicate (1,297,546 samples, 0.25%)</title><rect x="16.4836%" y="149" width="0.2549%" height="15" fill="rgb(240,193,28)"/><text x="16.7336%" y="159.50"></text></g><g><title>MIR_borrow_checking (33,688,280 samples, 6.62%)</title><rect x="10.1217%" y="181" width="6.6178%" height="15" fill="rgb(216,20,37)"/><text x="10.3717%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (33,317,196 samples, 6.54%)</title><rect x="10.1946%" y="165" width="6.5449%" height="15" fill="rgb(206,188,39)"/><text x="10.4446%" y="175.50">mir_borro..</text></g><g><title>MIR_effect_checking (1,718,977 samples, 0.34%)</title><rect x="16.7396%" y="181" width="0.3377%" height="15" fill="rgb(217,207,13)"/><text x="16.9896%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,503,176 samples, 0.30%)</title><rect x="16.7820%" y="165" width="0.2953%" height="15" fill="rgb(231,73,38)"/><text x="17.0320%" y="175.50"></text></g><g><title>check_mod_attrs (901,979 samples, 0.18%)</title><rect x="17.1486%" y="165" width="0.1772%" height="15" fill="rgb(225,20,46)"/><text x="17.3986%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,408,824 samples, 0.28%)</title><rect x="17.3846%" y="165" width="0.2768%" height="15" fill="rgb(210,31,41)"/><text x="17.6346%" y="175.50"></text></g><g><title>misc_checking_1 (2,722,397 samples, 0.53%)</title><rect x="17.1454%" y="181" width="0.5348%" height="15" fill="rgb(221,200,47)"/><text x="17.3954%" y="191.50"></text></g><g><title>misc_checking_2 (1,363,964 samples, 0.27%)</title><rect x="17.6802%" y="181" width="0.2679%" height="15" fill="rgb(226,26,5)"/><text x="17.9302%" y="191.50"></text></g><g><title>match_checking (1,026,021 samples, 0.20%)</title><rect x="17.7466%" y="165" width="0.2016%" height="15" fill="rgb(249,33,26)"/><text x="17.9966%" y="175.50"></text></g><g><title>check_match (943,761 samples, 0.19%)</title><rect x="17.7628%" y="149" width="0.1854%" height="15" fill="rgb(235,183,28)"/><text x="18.0128%" y="159.50"></text></g><g><title>death_checking (884,979 samples, 0.17%)</title><rect x="18.0376%" y="165" width="0.1738%" height="15" fill="rgb(221,5,38)"/><text x="18.2876%" y="175.50"></text></g><g><title>mir_for_ctfe (539,644 samples, 0.11%)</title><rect x="18.6914%" y="85" width="0.1060%" height="15" fill="rgb(247,18,42)"/><text x="18.9414%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,626,729 samples, 0.32%)</title><rect x="18.4977%" y="133" width="0.3196%" height="15" fill="rgb(241,131,45)"/><text x="18.7477%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,525,865 samples, 0.30%)</title><rect x="18.5176%" y="117" width="0.2997%" height="15" fill="rgb(249,31,29)"/><text x="18.7676%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,399,974 samples, 0.28%)</title><rect x="18.5423%" y="101" width="0.2750%" height="15" fill="rgb(225,111,53)"/><text x="18.7923%" y="111.50"></text></g><g><title>crate_lints (4,366,784 samples, 0.86%)</title><rect x="18.2118%" y="149" width="0.8578%" height="15" fill="rgb(238,160,17)"/><text x="18.4618%" y="159.50"></text></g><g><title>type_of (1,130,608 samples, 0.22%)</title><rect x="18.8475%" y="133" width="0.2221%" height="15" fill="rgb(214,148,48)"/><text x="19.0975%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (897,286 samples, 0.18%)</title><rect x="18.8933%" y="117" width="0.1763%" height="15" fill="rgb(232,36,49)"/><text x="19.1433%" y="127.50"></text></g><g><title>lint_checking (5,112,591 samples, 1.00%)</title><rect x="18.2115%" y="165" width="1.0043%" height="15" fill="rgb(209,103,24)"/><text x="18.4615%" y="175.50"></text></g><g><title>module_lints (744,267 samples, 0.15%)</title><rect x="19.0696%" y="149" width="0.1462%" height="15" fill="rgb(229,88,8)"/><text x="19.3196%" y="159.50"></text></g><g><title>lint_mod (742,057 samples, 0.15%)</title><rect x="19.0700%" y="133" width="0.1458%" height="15" fill="rgb(213,181,19)"/><text x="19.3200%" y="143.50"></text></g><g><title>privacy_access_levels (697,927 samples, 0.14%)</title><rect x="19.2158%" y="165" width="0.1371%" height="15" fill="rgb(254,191,54)"/><text x="19.4658%" y="175.50"></text></g><g><title>privacy_checking_modules (1,166,712 samples, 0.23%)</title><rect x="19.3529%" y="165" width="0.2292%" height="15" fill="rgb(241,83,37)"/><text x="19.6029%" y="175.50"></text></g><g><title>check_mod_privacy (1,164,992 samples, 0.23%)</title><rect x="19.3533%" y="149" width="0.2289%" height="15" fill="rgb(233,36,39)"/><text x="19.6033%" y="159.50"></text></g><g><title>misc_checking_3 (8,330,554 samples, 1.64%)</title><rect x="17.9482%" y="181" width="1.6365%" height="15" fill="rgb(226,3,54)"/><text x="18.1982%" y="191.50"></text></g><g><title>eval_to_const_value_raw (522,456 samples, 0.10%)</title><rect x="19.7041%" y="133" width="0.1026%" height="15" fill="rgb(245,192,40)"/><text x="19.9541%" y="143.50"></text></g><g><title>eval_to_const_value_raw (521,216 samples, 0.10%)</title><rect x="19.7043%" y="117" width="0.1024%" height="15" fill="rgb(238,167,29)"/><text x="19.9543%" y="127.50"></text></g><g><title>eval_to_allocation_raw (520,006 samples, 0.10%)</title><rect x="19.7046%" y="101" width="0.1022%" height="15" fill="rgb(232,182,51)"/><text x="19.9546%" y="111.50"></text></g><g><title>impl_parent (2,270,116 samples, 0.45%)</title><rect x="20.6423%" y="117" width="0.4459%" height="15" fill="rgb(231,60,39)"/><text x="20.8923%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,344,043 samples, 0.26%)</title><rect x="20.8243%" y="101" width="0.2640%" height="15" fill="rgb(208,69,12)"/><text x="21.0743%" y="111.50"></text></g><g><title>impl_trait_ref (5,135,682 samples, 1.01%)</title><rect x="21.0883%" y="117" width="1.0089%" height="15" fill="rgb(235,93,37)"/><text x="21.3383%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,974,568 samples, 0.78%)</title><rect x="21.3164%" y="101" width="0.7808%" height="15" fill="rgb(213,116,39)"/><text x="21.5664%" y="111.50"></text></g><g><title>coherent_trait (13,240,102 samples, 2.60%)</title><rect x="19.6156%" y="149" width="2.6009%" height="15" fill="rgb(222,207,29)"/><text x="19.8656%" y="159.50">co..</text></g><g><title>specialization_graph_of (11,855,069 samples, 2.33%)</title><rect x="19.8877%" y="133" width="2.3289%" height="15" fill="rgb(206,96,30)"/><text x="20.1377%" y="143.50">s..</text></g><g><title>trait_impls_of (605,924 samples, 0.12%)</title><rect x="22.0975%" y="117" width="0.1190%" height="15" fill="rgb(218,138,4)"/><text x="22.3475%" y="127.50"></text></g><g><title>coherence_checking (13,342,504 samples, 2.62%)</title><rect x="19.6125%" y="165" width="2.6210%" height="15" fill="rgb(250,191,14)"/><text x="19.8625%" y="175.50">co..</text></g><g><title>mir_for_ctfe (855,050 samples, 0.17%)</title><rect x="27.3752%" y="53" width="0.1680%" height="15" fill="rgb(239,60,40)"/><text x="27.6252%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (846,020 samples, 0.17%)</title><rect x="27.3770%" y="37" width="0.1662%" height="15" fill="rgb(206,27,48)"/><text x="27.6270%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,896,560 samples, 0.37%)</title><rect x="27.1766%" y="101" width="0.3726%" height="15" fill="rgb(225,35,8)"/><text x="27.4266%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,872,619 samples, 0.37%)</title><rect x="27.1813%" y="85" width="0.3679%" height="15" fill="rgb(250,213,24)"/><text x="27.4313%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,835,329 samples, 0.36%)</title><rect x="27.1886%" y="69" width="0.3605%" height="15" fill="rgb(247,123,22)"/><text x="27.4386%" y="79.50"></text></g><g><title>evaluate_obligation (4,104,467 samples, 0.81%)</title><rect x="26.8406%" y="117" width="0.8063%" height="15" fill="rgb(231,138,38)"/><text x="27.0906%" y="127.50"></text></g><g><title>item_bodies_checking (28,401,677 samples, 5.58%)</title><rect x="22.2444%" y="165" width="5.5793%" height="15" fill="rgb(231,145,46)"/><text x="22.4944%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (28,399,237 samples, 5.58%)</title><rect x="22.2449%" y="149" width="5.5788%" height="15" fill="rgb(251,118,11)"/><text x="22.4949%" y="159.50">typeck_..</text></g><g><title>typeck (28,254,497 samples, 5.55%)</title><rect x="22.2733%" y="133" width="5.5504%" height="15" fill="rgb(217,147,25)"/><text x="22.5233%" y="143.50">typeck</text></g><g><title>impl_trait_ref (707,618 samples, 0.14%)</title><rect x="29.6492%" y="101" width="0.1390%" height="15" fill="rgb(247,81,37)"/><text x="29.8992%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (564,915 samples, 0.11%)</title><rect x="29.6772%" y="85" width="0.1110%" height="15" fill="rgb(209,12,38)"/><text x="29.9272%" y="95.50"></text></g><g><title>predicates_of (700,726 samples, 0.14%)</title><rect x="29.7947%" y="101" width="0.1377%" height="15" fill="rgb(227,1,9)"/><text x="30.0447%" y="111.50"></text></g><g><title>specializes (1,792,199 samples, 0.35%)</title><rect x="29.9323%" y="101" width="0.3521%" height="15" fill="rgb(248,47,43)"/><text x="30.1823%" y="111.50"></text></g><g><title>param_env (1,028,672 samples, 0.20%)</title><rect x="30.0823%" y="85" width="0.2021%" height="15" fill="rgb(221,10,30)"/><text x="30.3323%" y="95.50"></text></g><g><title>evaluate_obligation (6,076,102 samples, 1.19%)</title><rect x="29.1132%" y="117" width="1.1936%" height="15" fill="rgb(210,229,1)"/><text x="29.3632%" y="127.50"></text></g><g><title>item_types_checking (13,135,212 samples, 2.58%)</title><rect x="27.8237%" y="165" width="2.5803%" height="15" fill="rgb(222,148,37)"/><text x="28.0737%" y="175.50">it..</text></g><g><title>check_mod_item_types (13,132,362 samples, 2.58%)</title><rect x="27.8243%" y="149" width="2.5798%" height="15" fill="rgb(234,67,33)"/><text x="28.0743%" y="159.50">ch..</text></g><g><title>typeck (11,583,517 samples, 2.28%)</title><rect x="28.1285%" y="133" width="2.2755%" height="15" fill="rgb(247,98,35)"/><text x="28.3785%" y="143.50">t..</text></g><g><title>mir_borrowck (655,807 samples, 0.13%)</title><rect x="30.7285%" y="53" width="0.1288%" height="15" fill="rgb(247,138,52)"/><text x="30.9785%" y="63.50"></text></g><g><title>mir_for_ctfe (966,940 samples, 0.19%)</title><rect x="30.6680%" y="85" width="0.1899%" height="15" fill="rgb(213,79,30)"/><text x="30.9180%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (889,449 samples, 0.17%)</title><rect x="30.6832%" y="69" width="0.1747%" height="15" fill="rgb(246,177,23)"/><text x="30.9332%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,972,840 samples, 0.39%)</title><rect x="30.5481%" y="133" width="0.3876%" height="15" fill="rgb(230,62,27)"/><text x="30.7981%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,954,380 samples, 0.38%)</title><rect x="30.5517%" y="117" width="0.3839%" height="15" fill="rgb(216,154,8)"/><text x="30.8017%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,935,440 samples, 0.38%)</title><rect x="30.5554%" y="101" width="0.3802%" height="15" fill="rgb(244,35,45)"/><text x="30.8054%" y="111.50"></text></g><g><title>fn_sig (680,076 samples, 0.13%)</title><rect x="30.9356%" y="133" width="0.1336%" height="15" fill="rgb(251,115,12)"/><text x="31.1856%" y="143.50"></text></g><g><title>generics_of (767,736 samples, 0.15%)</title><rect x="31.0692%" y="133" width="0.1508%" height="15" fill="rgb(240,54,50)"/><text x="31.3192%" y="143.50"></text></g><g><title>predicates_of (797,462 samples, 0.16%)</title><rect x="31.2573%" y="133" width="0.1567%" height="15" fill="rgb(233,84,52)"/><text x="31.5073%" y="143.50"></text></g><g><title>predicates_defined_on (601,420 samples, 0.12%)</title><rect x="31.2958%" y="117" width="0.1181%" height="15" fill="rgb(207,117,47)"/><text x="31.5458%" y="127.50"></text></g><g><title>type_collecting (5,287,304 samples, 1.04%)</title><rect x="30.4042%" y="165" width="1.0387%" height="15" fill="rgb(249,43,39)"/><text x="30.6542%" y="175.50"></text></g><g><title>collect_mod_item_types (5,285,244 samples, 1.04%)</title><rect x="30.4046%" y="149" width="1.0383%" height="15" fill="rgb(209,38,44)"/><text x="30.6546%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,501,434 samples, 0.69%)</title><rect x="31.5215%" y="149" width="0.6878%" height="15" fill="rgb(236,212,23)"/><text x="31.7715%" y="159.50"></text></g><g><title>region_scope_tree (643,850 samples, 0.13%)</title><rect x="32.0829%" y="133" width="0.1265%" height="15" fill="rgb(242,79,21)"/><text x="32.3329%" y="143.50"></text></g><g><title>evaluate_obligation (856,109 samples, 0.17%)</title><rect x="32.8963%" y="133" width="0.1682%" height="15" fill="rgb(211,96,35)"/><text x="33.1463%" y="143.50"></text></g><g><title>param_env (1,065,493 samples, 0.21%)</title><rect x="33.0889%" y="133" width="0.2093%" height="15" fill="rgb(253,215,40)"/><text x="33.3389%" y="143.50"></text></g><g><title>analysis (118,915,320 samples, 23.36%)</title><rect x="10.0218%" y="197" width="23.3601%" height="15" fill="rgb(211,81,21)"/><text x="10.2718%" y="207.50">analysis</text></g><g><title>type_check_crate (70,235,339 samples, 13.80%)</title><rect x="19.5847%" y="181" width="13.7973%" height="15" fill="rgb(208,190,38)"/><text x="19.8347%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,849,270 samples, 1.93%)</title><rect x="31.4471%" y="165" width="1.9348%" height="15" fill="rgb(235,213,38)"/><text x="31.6971%" y="175.50">w..</text></g><g><title>check_item_well_formed (5,968,964 samples, 1.17%)</title><rect x="32.2094%" y="149" width="1.1726%" height="15" fill="rgb(237,122,38)"/><text x="32.4594%" y="159.50"></text></g><g><title>eval_to_const_value_raw (550,555 samples, 0.11%)</title><rect x="40.6445%" y="133" width="0.1082%" height="15" fill="rgb(244,218,35)"/><text x="40.8945%" y="143.50"></text></g><g><title>eval_to_const_value_raw (522,855 samples, 0.10%)</title><rect x="40.6499%" y="117" width="0.1027%" height="15" fill="rgb(240,68,47)"/><text x="40.8999%" y="127.50"></text></g><g><title>layout_of (1,753,998 samples, 0.34%)</title><rect x="40.5604%" y="149" width="0.3446%" height="15" fill="rgb(210,16,53)"/><text x="40.8104%" y="159.50"></text></g><g><title>param_env (1,361,614 samples, 0.27%)</title><rect x="40.9049%" y="149" width="0.2675%" height="15" fill="rgb(235,124,12)"/><text x="41.1549%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (631,788 samples, 0.12%)</title><rect x="41.1724%" y="149" width="0.1241%" height="15" fill="rgb(224,169,11)"/><text x="41.4224%" y="159.50"></text></g><g><title>normalize_projection_ty (540,528 samples, 0.11%)</title><rect x="41.1903%" y="133" width="0.1062%" height="15" fill="rgb(250,166,2)"/><text x="41.4403%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,090,328 samples, 1.20%)</title><rect x="40.1078%" y="165" width="1.1964%" height="15" fill="rgb(242,216,29)"/><text x="40.3578%" y="175.50"></text></g><g><title>layout_of (912,841 samples, 0.18%)</title><rect x="41.3352%" y="165" width="0.1793%" height="15" fill="rgb(230,116,27)"/><text x="41.5852%" y="175.50"></text></g><g><title>symbol_name (509,656 samples, 0.10%)</title><rect x="41.5244%" y="165" width="0.1001%" height="15" fill="rgb(228,99,48)"/><text x="41.7744%" y="175.50"></text></g><g><title>codegen_module (40,513,538 samples, 7.96%)</title><rect x="33.7004%" y="181" width="7.9586%" height="15" fill="rgb(253,11,6)"/><text x="33.9504%" y="191.50">codegen_mod..</text></g><g><title>codegen_crate (42,188,225 samples, 8.29%)</title><rect x="33.3859%" y="197" width="8.2876%" height="15" fill="rgb(247,143,39)"/><text x="33.6359%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (191,409,161 samples, 37.60%)</title><rect x="41.7150%" y="181" width="37.6011%" height="15" fill="rgb(236,97,10)"/><text x="41.9650%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (181,458,013 samples, 35.65%)</title><rect x="43.6699%" y="165" width="35.6462%" height="15" fill="rgb(233,208,19)"/><text x="43.9199%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (203,944,078 samples, 40.06%)</title><rect x="41.6735%" y="197" width="40.0635%" height="15" fill="rgb(216,164,2)"/><text x="41.9235%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,323,405 samples, 2.42%)</title><rect x="79.3161%" y="181" width="2.4209%" height="15" fill="rgb(220,129,5)"/><text x="79.5661%" y="191.50">LL..</text></g><g><title>AST_validation (525,425 samples, 0.10%)</title><rect x="81.7775%" y="181" width="0.1032%" height="15" fill="rgb(242,17,10)"/><text x="82.0275%" y="191.50"></text></g><g><title>macro_expand_crate (31,857,672 samples, 6.26%)</title><rect x="81.9498%" y="181" width="6.2582%" height="15" fill="rgb(242,107,0)"/><text x="82.1998%" y="191.50">macro_ex..</text></g><g><title>expand_crate (31,832,771 samples, 6.25%)</title><rect x="81.9547%" y="165" width="6.2533%" height="15" fill="rgb(251,28,31)"/><text x="82.2047%" y="175.50">expand_c..</text></g><g><title>metadata_register_crate (2,724,328 samples, 0.54%)</title><rect x="87.6729%" y="149" width="0.5352%" height="15" fill="rgb(233,223,10)"/><text x="87.9229%" y="159.50"></text></g><g><title>metadata_register_crate (990,529 samples, 0.19%)</title><rect x="88.0135%" y="133" width="0.1946%" height="15" fill="rgb(215,21,27)"/><text x="88.2635%" y="143.50"></text></g><g><title>finalize_macro_resolutions (824,348 samples, 0.16%)</title><rect x="88.2530%" y="165" width="0.1619%" height="15" fill="rgb(232,23,21)"/><text x="88.5030%" y="175.50"></text></g><g><title>late_resolve_crate (6,558,967 samples, 1.29%)</title><rect x="88.4149%" y="165" width="1.2885%" height="15" fill="rgb(244,5,23)"/><text x="88.6649%" y="175.50"></text></g><g><title>configure_and_expand (40,993,943 samples, 8.05%)</title><rect x="81.7369%" y="197" width="8.0530%" height="15" fill="rgb(226,81,46)"/><text x="81.9869%" y="207.50">configure_a..</text></g><g><title>resolve_crate (7,860,360 samples, 1.54%)</title><rect x="88.2458%" y="181" width="1.5441%" height="15" fill="rgb(247,70,30)"/><text x="88.4958%" y="191.50"></text></g><g><title>early_lint_checks (691,477 samples, 0.14%)</title><rect x="89.8475%" y="197" width="0.1358%" height="15" fill="rgb(212,68,19)"/><text x="90.0975%" y="207.50"></text></g><g><title>free_global_ctxt (7,339,583 samples, 1.44%)</title><rect x="89.9833%" y="197" width="1.4418%" height="15" fill="rgb(240,187,13)"/><text x="90.2333%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,343,651 samples, 0.26%)</title><rect x="92.8200%" y="101" width="0.2640%" height="15" fill="rgb(223,113,26)"/><text x="93.0700%" y="111.50"></text></g><g><title>optimized_mir (3,537,583 samples, 0.69%)</title><rect x="92.4247%" y="117" width="0.6949%" height="15" fill="rgb(206,192,2)"/><text x="92.6747%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,901,998 samples, 0.37%)</title><rect x="93.2263%" y="101" width="0.3736%" height="15" fill="rgb(241,108,4)"/><text x="93.4763%" y="111.50"></text></g><g><title>specialization_graph_of (2,471,823 samples, 0.49%)</title><rect x="93.6902%" y="101" width="0.4856%" height="15" fill="rgb(247,173,49)"/><text x="93.9402%" y="111.50"></text></g><g><title>impl_trait_ref (1,096,851 samples, 0.22%)</title><rect x="93.9603%" y="85" width="0.2155%" height="15" fill="rgb(224,114,35)"/><text x="94.2103%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (872,470 samples, 0.17%)</title><rect x="94.0044%" y="69" width="0.1714%" height="15" fill="rgb(245,159,27)"/><text x="94.2544%" y="79.50"></text></g><g><title>resolve_instance (5,472,752 samples, 1.08%)</title><rect x="93.1196%" y="117" width="1.0751%" height="15" fill="rgb(245,172,44)"/><text x="93.3696%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (533,477 samples, 0.10%)</title><rect x="94.3175%" y="85" width="0.1048%" height="15" fill="rgb(236,23,11)"/><text x="94.5675%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (12,103,232 samples, 2.38%)</title><rect x="92.0460%" y="133" width="2.3776%" height="15" fill="rgb(205,117,38)"/><text x="92.2960%" y="143.50">mo..</text></g><g><title>vtable_entries (755,098 samples, 0.15%)</title><rect x="94.2753%" y="117" width="0.1483%" height="15" fill="rgb(237,72,25)"/><text x="94.5253%" y="127.50"></text></g><g><title>resolve_instance (620,097 samples, 0.12%)</title><rect x="94.3018%" y="101" width="0.1218%" height="15" fill="rgb(244,70,9)"/><text x="94.5518%" y="111.50"></text></g><g><title>monomorphization_collector (12,197,233 samples, 2.40%)</title><rect x="92.0455%" y="149" width="2.3961%" height="15" fill="rgb(217,125,39)"/><text x="92.2955%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,084,190 samples, 0.21%)</title><rect x="94.4422%" y="133" width="0.2130%" height="15" fill="rgb(235,36,10)"/><text x="94.6922%" y="143.50"></text></g><g><title>symbol_name (972,270 samples, 0.19%)</title><rect x="94.4642%" y="117" width="0.1910%" height="15" fill="rgb(251,123,47)"/><text x="94.7142%" y="127.50"></text></g><g><title>cgu_partitioning_place_roots (551,706 samples, 0.11%)</title><rect x="94.6904%" y="117" width="0.1084%" height="15" fill="rgb(221,13,13)"/><text x="94.9404%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (14,067,602 samples, 2.76%)</title><rect x="92.0380%" y="165" width="2.7635%" height="15" fill="rgb(238,131,9)"/><text x="92.2880%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,832,158 samples, 0.36%)</title><rect x="94.4416%" y="149" width="0.3599%" height="15" fill="rgb(211,50,8)"/><text x="94.6916%" y="159.50"></text></g><g><title>cgu_partitioning (744,798 samples, 0.15%)</title><rect x="94.6552%" y="133" width="0.1463%" height="15" fill="rgb(245,182,24)"/><text x="94.9052%" y="143.50"></text></g><g><title>exported_symbols (14,414,245 samples, 2.83%)</title><rect x="92.0254%" y="181" width="2.8316%" height="15" fill="rgb(242,14,37)"/><text x="92.2754%" y="191.50">ex..</text></g><g><title>optimized_mir (4,555,124 samples, 0.89%)</title><rect x="94.8870%" y="181" width="0.8948%" height="15" fill="rgb(246,228,12)"/><text x="95.1370%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,059,875 samples, 0.40%)</title><rect x="95.3772%" y="165" width="0.4046%" height="15" fill="rgb(213,55,15)"/><text x="95.6272%" y="175.50"></text></g><g><title>generate_crate_metadata (22,307,735 samples, 4.38%)</title><rect x="91.4251%" y="197" width="4.3822%" height="15" fill="rgb(209,9,3)"/><text x="91.6751%" y="207.50">gener..</text></g><g><title>hir_lowering (8,337,785 samples, 1.64%)</title><rect x="95.8073%" y="197" width="1.6379%" height="15" fill="rgb(230,59,30)"/><text x="96.0573%" y="207.50"></text></g><g><title>finish_ongoing_codegen (5,204,943 samples, 1.02%)</title><rect x="97.4483%" y="181" width="1.0225%" height="15" fill="rgb(209,121,21)"/><text x="97.6983%" y="191.50"></text></g><g><title>link_crate (2,145,031 samples, 0.42%)</title><rect x="98.4708%" y="181" width="0.4214%" height="15" fill="rgb(220,109,13)"/><text x="98.7208%" y="191.50"></text></g><g><title>link_binary (2,112,711 samples, 0.42%)</title><rect x="98.4772%" y="165" width="0.4150%" height="15" fill="rgb(232,18,1)"/><text x="98.7272%" y="175.50"></text></g><g><title>link_rlib (1,522,825 samples, 0.30%)</title><rect x="98.5930%" y="149" width="0.2991%" height="15" fill="rgb(215,41,42)"/><text x="98.8430%" y="159.50"></text></g><g><title>link (7,374,295 samples, 1.45%)</title><rect x="97.4452%" y="197" width="1.4486%" height="15" fill="rgb(224,123,36)"/><text x="97.6952%" y="207.50"></text></g><g><title>parse_crate (2,595,777 samples, 0.51%)</title><rect x="98.8938%" y="197" width="0.5099%" height="15" fill="rgb(240,125,3)"/><text x="99.1438%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,154,133 samples, 0.42%)</title><rect x="99.4757%" y="197" width="0.4232%" height="15" fill="rgb(205,98,50)"/><text x="99.7257%" y="207.50"></text></g><g><title>all (509,052,437 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (509,052,437 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>