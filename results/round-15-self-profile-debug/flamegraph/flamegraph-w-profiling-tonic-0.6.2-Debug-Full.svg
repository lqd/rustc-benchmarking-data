<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,148,847,860 samples, 17.16%)</title><rect x="0.0152%" y="229" width="17.1553%" height="15" fill="rgb(227,0,7)"/><text x="0.2652%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (13,891,982 samples, 0.11%)</title><rect x="18.9284%" y="117" width="0.1109%" height="15" fill="rgb(217,0,24)"/><text x="19.1784%" y="127.50"></text></g><g><title>mir_const (88,012,780 samples, 0.70%)</title><rect x="18.5312%" y="165" width="0.7026%" height="15" fill="rgb(221,193,54)"/><text x="18.7812%" y="175.50"></text></g><g><title>unsafety_check_result (77,606,602 samples, 0.62%)</title><rect x="18.6143%" y="149" width="0.6196%" height="15" fill="rgb(248,212,6)"/><text x="18.8643%" y="159.50"></text></g><g><title>mir_built (70,153,554 samples, 0.56%)</title><rect x="18.6738%" y="133" width="0.5601%" height="15" fill="rgb(208,68,35)"/><text x="18.9238%" y="143.50"></text></g><g><title>mir_promoted (102,191,218 samples, 0.82%)</title><rect x="18.4590%" y="181" width="0.8158%" height="15" fill="rgb(232,128,0)"/><text x="18.7090%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (13,771,300 samples, 0.11%)</title><rect x="19.2749%" y="181" width="0.1099%" height="15" fill="rgb(207,160,47)"/><text x="19.5249%" y="191.50"></text></g><g><title>type_op_prove_predicate (33,890,350 samples, 0.27%)</title><rect x="19.4759%" y="181" width="0.2706%" height="15" fill="rgb(228,23,34)"/><text x="19.7259%" y="191.50"></text></g><g><title>MIR_borrow_checking (319,798,956 samples, 2.55%)</title><rect x="17.1936%" y="213" width="2.5531%" height="15" fill="rgb(218,30,26)"/><text x="17.4436%" y="223.50">MI..</text></g><g><title>mir_borrowck (318,113,525 samples, 2.54%)</title><rect x="17.2071%" y="197" width="2.5397%" height="15" fill="rgb(220,122,19)"/><text x="17.4571%" y="207.50">mi..</text></g><g><title>misc_checking_1 (15,149,272 samples, 0.12%)</title><rect x="19.7837%" y="213" width="0.1209%" height="15" fill="rgb(250,228,42)"/><text x="20.0337%" y="223.50"></text></g><g><title>misc_checking_2 (17,926,922 samples, 0.14%)</title><rect x="19.9047%" y="213" width="0.1431%" height="15" fill="rgb(240,193,28)"/><text x="20.1547%" y="223.50"></text></g><g><title>crate_lints (21,507,289 samples, 0.17%)</title><rect x="20.1249%" y="181" width="0.1717%" height="15" fill="rgb(216,20,37)"/><text x="20.3749%" y="191.50"></text></g><g><title>lint_checking (29,208,212 samples, 0.23%)</title><rect x="20.1249%" y="197" width="0.2332%" height="15" fill="rgb(206,188,39)"/><text x="20.3749%" y="207.50"></text></g><g><title>privacy_checking_modules (16,173,354 samples, 0.13%)</title><rect x="20.4162%" y="197" width="0.1291%" height="15" fill="rgb(217,207,13)"/><text x="20.6662%" y="207.50"></text></g><g><title>check_mod_privacy (16,133,284 samples, 0.13%)</title><rect x="20.4165%" y="181" width="0.1288%" height="15" fill="rgb(231,73,38)"/><text x="20.6665%" y="191.50"></text></g><g><title>misc_checking_3 (62,461,830 samples, 0.50%)</title><rect x="20.0478%" y="213" width="0.4987%" height="15" fill="rgb(225,20,46)"/><text x="20.2978%" y="223.50"></text></g><g><title>coherent_trait (35,292,039 samples, 0.28%)</title><rect x="20.5584%" y="181" width="0.2818%" height="15" fill="rgb(210,31,41)"/><text x="20.8084%" y="191.50"></text></g><g><title>specialization_graph_of (34,342,408 samples, 0.27%)</title><rect x="20.5659%" y="165" width="0.2742%" height="15" fill="rgb(221,200,47)"/><text x="20.8159%" y="175.50"></text></g><g><title>coherence_checking (35,947,106 samples, 0.29%)</title><rect x="20.5579%" y="197" width="0.2870%" height="15" fill="rgb(226,26,5)"/><text x="20.8079%" y="207.50"></text></g><g><title>evaluate_obligation (18,263,741 samples, 0.15%)</title><rect x="22.8081%" y="149" width="0.1458%" height="15" fill="rgb(249,33,26)"/><text x="23.0581%" y="159.50"></text></g><g><title>typeck (119,121,149 samples, 0.95%)</title><rect x="23.0457%" y="149" width="0.9510%" height="15" fill="rgb(235,183,28)"/><text x="23.2957%" y="159.50"></text></g><g><title>item_bodies_checking (394,546,466 samples, 3.15%)</title><rect x="20.8492%" y="197" width="3.1499%" height="15" fill="rgb(221,5,38)"/><text x="21.0992%" y="207.50">ite..</text></g><g><title>typeck_item_bodies (394,542,276 samples, 3.15%)</title><rect x="20.8493%" y="181" width="3.1498%" height="15" fill="rgb(247,18,42)"/><text x="21.0993%" y="191.50">typ..</text></g><g><title>typeck (392,957,695 samples, 3.14%)</title><rect x="20.8619%" y="165" width="3.1372%" height="15" fill="rgb(241,131,45)"/><text x="21.1119%" y="175.50">typ..</text></g><g><title>type_op_normalize_fn_sig (13,698,048 samples, 0.11%)</title><rect x="24.6190%" y="117" width="0.1094%" height="15" fill="rgb(249,31,29)"/><text x="24.8690%" y="127.50"></text></g><g><title>type_op_prove_predicate (24,143,573 samples, 0.19%)</title><rect x="24.7613%" y="117" width="0.1927%" height="15" fill="rgb(225,111,53)"/><text x="25.0113%" y="127.50"></text></g><g><title>mir_borrowck (80,382,231 samples, 0.64%)</title><rect x="24.3125%" y="133" width="0.6417%" height="15" fill="rgb(238,160,17)"/><text x="24.5625%" y="143.50"></text></g><g><title>evaluate_obligation (17,945,457 samples, 0.14%)</title><rect x="25.8167%" y="53" width="0.1433%" height="15" fill="rgb(214,148,48)"/><text x="26.0667%" y="63.50"></text></g><g><title>type_of (19,136,165 samples, 0.15%)</title><rect x="26.0450%" y="53" width="0.1528%" height="15" fill="rgb(232,36,49)"/><text x="26.2950%" y="63.50"></text></g><g><title>mir_borrowck (18,454,278 samples, 0.15%)</title><rect x="26.0504%" y="37" width="0.1473%" height="15" fill="rgb(209,103,24)"/><text x="26.3004%" y="47.50"></text></g><g><title>mir_built (155,702,819 samples, 1.24%)</title><rect x="24.9611%" y="85" width="1.2431%" height="15" fill="rgb(229,88,8)"/><text x="25.2111%" y="95.50"></text></g><g><title>typeck (152,411,941 samples, 1.22%)</title><rect x="24.9874%" y="69" width="1.2168%" height="15" fill="rgb(213,181,19)"/><text x="25.2374%" y="79.50"></text></g><g><title>mir_const (167,004,669 samples, 1.33%)</title><rect x="24.9566%" y="117" width="1.3333%" height="15" fill="rgb(254,191,54)"/><text x="25.2066%" y="127.50"></text></g><g><title>unsafety_check_result (166,597,306 samples, 1.33%)</title><rect x="24.9599%" y="101" width="1.3300%" height="15" fill="rgb(241,83,37)"/><text x="25.2099%" y="111.50"></text></g><g><title>mir_promoted (167,338,133 samples, 1.34%)</title><rect x="24.9542%" y="133" width="1.3359%" height="15" fill="rgb(233,36,39)"/><text x="25.2042%" y="143.50"></text></g><g><title>type_of (262,840,837 samples, 2.10%)</title><rect x="24.2280%" y="165" width="2.0984%" height="15" fill="rgb(226,3,54)"/><text x="24.4780%" y="175.50">t..</text></g><g><title>mir_borrowck (262,387,571 samples, 2.09%)</title><rect x="24.2316%" y="149" width="2.0948%" height="15" fill="rgb(245,192,40)"/><text x="24.4816%" y="159.50">m..</text></g><g><title>item_types_checking (305,042,108 samples, 2.44%)</title><rect x="23.9991%" y="197" width="2.4353%" height="15" fill="rgb(238,167,29)"/><text x="24.2491%" y="207.50">it..</text></g><g><title>check_mod_item_types (304,985,308 samples, 2.43%)</title><rect x="23.9995%" y="181" width="2.4348%" height="15" fill="rgb(232,182,51)"/><text x="24.2495%" y="191.50">ch..</text></g><g><title>typeck (13,531,307 samples, 0.11%)</title><rect x="26.3264%" y="165" width="0.1080%" height="15" fill="rgb(231,60,39)"/><text x="26.5764%" y="175.50"></text></g><g><title>type_collecting (30,626,657 samples, 0.24%)</title><rect x="26.4348%" y="197" width="0.2445%" height="15" fill="rgb(208,69,12)"/><text x="26.6848%" y="207.50"></text></g><g><title>collect_mod_item_types (30,576,637 samples, 0.24%)</title><rect x="26.4352%" y="181" width="0.2441%" height="15" fill="rgb(235,93,37)"/><text x="26.6852%" y="191.50"></text></g><g><title>check_impl_item_well_formed (61,302,476 samples, 0.49%)</title><rect x="26.7055%" y="181" width="0.4894%" height="15" fill="rgb(213,116,39)"/><text x="26.9555%" y="191.50"></text></g><g><title>check_item_well_formed (33,702,749 samples, 0.27%)</title><rect x="27.1949%" y="181" width="0.2691%" height="15" fill="rgb(222,207,29)"/><text x="27.4449%" y="191.50"></text></g><g><title>analysis (1,292,583,787 samples, 10.32%)</title><rect x="17.1704%" y="229" width="10.3193%" height="15" fill="rgb(206,96,30)"/><text x="17.4204%" y="239.50">analysis</text></g><g><title>type_check_crate (869,708,547 samples, 6.94%)</title><rect x="20.5465%" y="213" width="6.9433%" height="15" fill="rgb(218,138,4)"/><text x="20.7965%" y="223.50">type_chec..</text></g><g><title>wf_checking (101,395,186 samples, 0.81%)</title><rect x="26.6803%" y="197" width="0.8095%" height="15" fill="rgb(250,191,14)"/><text x="26.9303%" y="207.50"></text></g><g><title>compute_debuginfo_type_name (90,894,127 samples, 0.73%)</title><rect x="40.6286%" y="197" width="0.7257%" height="15" fill="rgb(239,60,40)"/><text x="40.8786%" y="207.50"></text></g><g><title>const_caller_location (14,849,029 samples, 0.12%)</title><rect x="41.3542%" y="197" width="0.1185%" height="15" fill="rgb(206,27,48)"/><text x="41.6042%" y="207.50"></text></g><g><title>layout_of (18,329,871 samples, 0.15%)</title><rect x="42.0889%" y="181" width="0.1463%" height="15" fill="rgb(225,35,8)"/><text x="42.3389%" y="191.50"></text></g><g><title>predicates_of (18,679,341 samples, 0.15%)</title><rect x="42.4611%" y="165" width="0.1491%" height="15" fill="rgb(250,213,24)"/><text x="42.7111%" y="175.50"></text></g><g><title>predicates_defined_on (13,494,022 samples, 0.11%)</title><rect x="42.5025%" y="149" width="0.1077%" height="15" fill="rgb(247,123,22)"/><text x="42.7525%" y="159.50"></text></g><g><title>param_env (47,032,493 samples, 0.38%)</title><rect x="42.2352%" y="181" width="0.3755%" height="15" fill="rgb(231,138,38)"/><text x="42.4852%" y="191.50"></text></g><g><title>normalize_projection_ty (38,427,581 samples, 0.31%)</title><rect x="42.6533%" y="165" width="0.3068%" height="15" fill="rgb(231,145,46)"/><text x="42.9033%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (43,780,689 samples, 0.35%)</title><rect x="42.6107%" y="181" width="0.3495%" height="15" fill="rgb(251,118,11)"/><text x="42.8607%" y="191.50"></text></g><g><title>fn_abi_of_instance (186,257,413 samples, 1.49%)</title><rect x="41.4781%" y="197" width="1.4870%" height="15" fill="rgb(217,147,25)"/><text x="41.7281%" y="207.50"></text></g><g><title>layout_of (30,441,720 samples, 0.24%)</title><rect x="43.0458%" y="197" width="0.2430%" height="15" fill="rgb(247,81,37)"/><text x="43.2958%" y="207.50"></text></g><g><title>symbol_name (18,267,172 samples, 0.15%)</title><rect x="43.2926%" y="197" width="0.1458%" height="15" fill="rgb(209,12,38)"/><text x="43.5426%" y="207.50"></text></g><g><title>codegen_module (1,997,089,404 samples, 15.94%)</title><rect x="27.5451%" y="213" width="15.9437%" height="15" fill="rgb(227,1,9)"/><text x="27.7951%" y="223.50">codegen_module</text></g><g><title>codegen_crate (2,004,268,110 samples, 16.00%)</title><rect x="27.4898%" y="229" width="16.0010%" height="15" fill="rgb(248,47,43)"/><text x="27.7398%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (5,258,157,044 samples, 41.98%)</title><rect x="43.4935%" y="213" width="41.9784%" height="15" fill="rgb(221,10,30)"/><text x="43.7435%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (4,831,788,887 samples, 38.57%)</title><rect x="46.8974%" y="197" width="38.5745%" height="15" fill="rgb(210,229,1)"/><text x="47.1474%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (5,770,251,373 samples, 46.07%)</title><rect x="43.4909%" y="229" width="46.0667%" height="15" fill="rgb(222,148,37)"/><text x="43.7409%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (511,761,879 samples, 4.09%)</title><rect x="85.4719%" y="213" width="4.0856%" height="15" fill="rgb(234,67,33)"/><text x="85.7219%" y="223.50">LLVM..</text></g><g><title>metadata_register_crate (28,559,436 samples, 0.23%)</title><rect x="91.0508%" y="181" width="0.2280%" height="15" fill="rgb(247,98,35)"/><text x="91.3008%" y="191.50"></text></g><g><title>metadata_register_crate (21,481,871 samples, 0.17%)</title><rect x="91.1073%" y="165" width="0.1715%" height="15" fill="rgb(247,138,52)"/><text x="91.3573%" y="175.50"></text></g><g><title>macro_expand_crate (214,167,064 samples, 1.71%)</title><rect x="89.5880%" y="213" width="1.7098%" height="15" fill="rgb(213,79,30)"/><text x="89.8380%" y="223.50"></text></g><g><title>expand_crate (214,147,674 samples, 1.71%)</title><rect x="89.5881%" y="197" width="1.7096%" height="15" fill="rgb(246,177,23)"/><text x="89.8381%" y="207.50"></text></g><g><title>late_resolve_crate (18,423,688 samples, 0.15%)</title><rect x="91.3177%" y="197" width="0.1471%" height="15" fill="rgb(230,62,27)"/><text x="91.5677%" y="207.50"></text></g><g><title>configure_and_expand (241,845,771 samples, 1.93%)</title><rect x="89.5575%" y="229" width="1.9308%" height="15" fill="rgb(216,154,8)"/><text x="89.8075%" y="239.50">c..</text></g><g><title>resolve_crate (23,761,035 samples, 0.19%)</title><rect x="91.2986%" y="213" width="0.1897%" height="15" fill="rgb(244,35,45)"/><text x="91.5486%" y="223.50"></text></g><g><title>free_global_ctxt (81,432,982 samples, 0.65%)</title><rect x="91.5687%" y="229" width="0.6501%" height="15" fill="rgb(251,115,12)"/><text x="91.8187%" y="239.50"></text></g><g><title>evaluate_obligation (15,066,137 samples, 0.12%)</title><rect x="93.2240%" y="133" width="0.1203%" height="15" fill="rgb(240,54,50)"/><text x="93.4740%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (19,216,936 samples, 0.15%)</title><rect x="93.1910%" y="149" width="0.1534%" height="15" fill="rgb(233,84,52)"/><text x="93.4410%" y="159.50"></text></g><g><title>mir_shims (25,402,502 samples, 0.20%)</title><rect x="93.3780%" y="149" width="0.2028%" height="15" fill="rgb(207,117,47)"/><text x="93.6280%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (46,670,795 samples, 0.37%)</title><rect x="93.6788%" y="133" width="0.3726%" height="15" fill="rgb(249,43,39)"/><text x="93.9288%" y="143.50"></text></g><g><title>optimized_mir (70,976,601 samples, 0.57%)</title><rect x="93.5808%" y="149" width="0.5666%" height="15" fill="rgb(209,38,44)"/><text x="93.8308%" y="159.50"></text></g><g><title>evaluate_obligation (18,733,179 samples, 0.15%)</title><rect x="94.9549%" y="117" width="0.1496%" height="15" fill="rgb(236,212,23)"/><text x="95.2049%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (102,748,577 samples, 0.82%)</title><rect x="94.3158%" y="133" width="0.8203%" height="15" fill="rgb(242,79,21)"/><text x="94.5658%" y="143.50"></text></g><g><title>resolve_instance (148,715,186 samples, 1.19%)</title><rect x="94.1475%" y="149" width="1.1873%" height="15" fill="rgb(211,96,35)"/><text x="94.3975%" y="159.50"></text></g><g><title>normalize_projection_ty (52,114,097 samples, 0.42%)</title><rect x="95.3685%" y="133" width="0.4161%" height="15" fill="rgb(253,215,40)"/><text x="95.6185%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (56,417,598 samples, 0.45%)</title><rect x="95.3347%" y="149" width="0.4504%" height="15" fill="rgb(211,81,21)"/><text x="95.5847%" y="159.50"></text></g><g><title>eval_to_const_value_raw (43,032,442 samples, 0.34%)</title><rect x="95.8539%" y="133" width="0.3435%" height="15" fill="rgb(208,190,38)"/><text x="96.1039%" y="143.50"></text></g><g><title>eval_to_const_value_raw (41,040,576 samples, 0.33%)</title><rect x="95.8698%" y="117" width="0.3276%" height="15" fill="rgb(235,213,38)"/><text x="96.1198%" y="127.50"></text></g><g><title>eval_to_allocation_raw (37,847,890 samples, 0.30%)</title><rect x="95.8953%" y="101" width="0.3022%" height="15" fill="rgb(237,122,38)"/><text x="96.1453%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (52,319,088 samples, 0.42%)</title><rect x="95.7852%" y="149" width="0.4177%" height="15" fill="rgb(244,218,35)"/><text x="96.0352%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (493,829,160 samples, 3.94%)</title><rect x="92.4406%" y="165" width="3.9425%" height="15" fill="rgb(240,68,47)"/><text x="92.6906%" y="175.50">mono..</text></g><g><title>vtable_entries (12,738,967 samples, 0.10%)</title><rect x="96.2814%" y="149" width="0.1017%" height="15" fill="rgb(210,16,53)"/><text x="96.5314%" y="159.50"></text></g><g><title>monomorphization_collector (494,278,035 samples, 3.95%)</title><rect x="92.4406%" y="181" width="3.9461%" height="15" fill="rgb(235,124,12)"/><text x="92.6906%" y="191.50">mono..</text></g><g><title>assert_symbols_are_distinct (46,537,558 samples, 0.37%)</title><rect x="96.3867%" y="165" width="0.3715%" height="15" fill="rgb(224,169,11)"/><text x="96.6367%" y="175.50"></text></g><g><title>symbol_name (41,348,237 samples, 0.33%)</title><rect x="96.4282%" y="149" width="0.3301%" height="15" fill="rgb(250,166,2)"/><text x="96.6782%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (558,375,582 samples, 4.46%)</title><rect x="92.4389%" y="197" width="4.4578%" height="15" fill="rgb(242,216,29)"/><text x="92.6889%" y="207.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (63,888,144 samples, 0.51%)</title><rect x="96.3867%" y="181" width="0.5100%" height="15" fill="rgb(230,116,27)"/><text x="96.6367%" y="191.50"></text></g><g><title>cgu_partitioning (17,342,046 samples, 0.14%)</title><rect x="96.7583%" y="165" width="0.1384%" height="15" fill="rgb(228,99,48)"/><text x="97.0083%" y="175.50"></text></g><g><title>exported_symbols (562,583,166 samples, 4.49%)</title><rect x="92.4207%" y="213" width="4.4914%" height="15" fill="rgb(253,11,6)"/><text x="92.6707%" y="223.50">expor..</text></g><g><title>layout_of (13,909,240 samples, 0.11%)</title><rect x="97.2254%" y="197" width="0.1110%" height="15" fill="rgb(247,143,39)"/><text x="97.4754%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (58,161,242 samples, 0.46%)</title><rect x="97.3365%" y="197" width="0.4643%" height="15" fill="rgb(236,97,10)"/><text x="97.5865%" y="207.50"></text></g><g><title>optimized_mir (110,622,751 samples, 0.88%)</title><rect x="96.9241%" y="213" width="0.8832%" height="15" fill="rgb(233,208,19)"/><text x="97.1741%" y="223.50"></text></g><g><title>generate_crate_metadata (702,575,746 samples, 5.61%)</title><rect x="92.2188%" y="229" width="5.6090%" height="15" fill="rgb(216,164,2)"/><text x="92.4688%" y="239.50">generat..</text></g><g><title>hir_lowering (39,141,929 samples, 0.31%)</title><rect x="97.8278%" y="229" width="0.3125%" height="15" fill="rgb(220,129,5)"/><text x="98.0778%" y="239.50"></text></g><g><title>finish_ongoing_codegen (187,233,186 samples, 1.49%)</title><rect x="98.1404%" y="213" width="1.4948%" height="15" fill="rgb(242,17,10)"/><text x="98.3904%" y="223.50"></text></g><g><title>link_crate (31,842,841 samples, 0.25%)</title><rect x="99.6352%" y="213" width="0.2542%" height="15" fill="rgb(242,107,0)"/><text x="99.8852%" y="223.50"></text></g><g><title>link_binary (31,373,986 samples, 0.25%)</title><rect x="99.6390%" y="197" width="0.2505%" height="15" fill="rgb(251,28,31)"/><text x="99.8890%" y="207.50"></text></g><g><title>link_rlib (26,872,698 samples, 0.21%)</title><rect x="99.6749%" y="181" width="0.2145%" height="15" fill="rgb(233,223,10)"/><text x="99.9249%" y="191.50"></text></g><g><title>link (219,107,197 samples, 1.75%)</title><rect x="98.1403%" y="229" width="1.7492%" height="15" fill="rgb(215,21,27)"/><text x="98.3903%" y="239.50"></text></g><g><title>all (12,525,868,351 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (12,525,868,351 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>