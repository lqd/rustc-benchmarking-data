<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,331,754 samples, 4.94%)</title><rect x="1.0363%" y="229" width="4.9427%" height="15" fill="rgb(227,0,7)"/><text x="1.2863%" y="239.50">LLVM_p..</text></g><g><title>param_env (108,951 samples, 0.16%)</title><rect x="10.1163%" y="149" width="0.1616%" height="15" fill="rgb(217,0,24)"/><text x="10.3663%" y="159.50"></text></g><g><title>item_attrs (119,361 samples, 0.18%)</title><rect x="10.4947%" y="117" width="0.1771%" height="15" fill="rgb(221,193,54)"/><text x="10.7447%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (114,881 samples, 0.17%)</title><rect x="10.5013%" y="101" width="0.1704%" height="15" fill="rgb(248,212,6)"/><text x="10.7513%" y="111.50"></text></g><g><title>codegen_fn_attrs (174,262 samples, 0.26%)</title><rect x="10.4206%" y="133" width="0.2585%" height="15" fill="rgb(208,68,35)"/><text x="10.6706%" y="143.50"></text></g><g><title>needs_drop_raw (156,870 samples, 0.23%)</title><rect x="11.6751%" y="117" width="0.2327%" height="15" fill="rgb(232,128,0)"/><text x="11.9251%" y="127.50"></text></g><g><title>is_copy_raw (140,340 samples, 0.21%)</title><rect x="11.6996%" y="101" width="0.2082%" height="15" fill="rgb(207,160,47)"/><text x="11.9496%" y="111.50"></text></g><g><title>evaluate_obligation (119,160 samples, 0.18%)</title><rect x="11.7310%" y="85" width="0.1768%" height="15" fill="rgb(228,23,34)"/><text x="11.9810%" y="95.50"></text></g><g><title>impl_parent (176,031 samples, 0.26%)</title><rect x="12.4240%" y="85" width="0.2611%" height="15" fill="rgb(218,30,26)"/><text x="12.6740%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (98,820 samples, 0.15%)</title><rect x="12.5385%" y="69" width="0.1466%" height="15" fill="rgb(220,122,19)"/><text x="12.7885%" y="79.50"></text></g><g><title>specialization_graph_of (900,929 samples, 1.34%)</title><rect x="11.9850%" y="101" width="1.3365%" height="15" fill="rgb(250,228,42)"/><text x="12.2350%" y="111.50"></text></g><g><title>impl_trait_ref (429,014 samples, 0.64%)</title><rect x="12.6851%" y="85" width="0.6365%" height="15" fill="rgb(240,193,28)"/><text x="12.9351%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (349,444 samples, 0.52%)</title><rect x="12.8032%" y="69" width="0.5184%" height="15" fill="rgb(216,20,37)"/><text x="13.0532%" y="79.50"></text></g><g><title>resolve_instance (983,941 samples, 1.46%)</title><rect x="11.9078%" y="117" width="1.4597%" height="15" fill="rgb(206,188,39)"/><text x="12.1578%" y="127.50"></text></g><g><title>thir_body (279,314 samples, 0.41%)</title><rect x="13.3748%" y="117" width="0.4144%" height="15" fill="rgb(217,207,13)"/><text x="13.6248%" y="127.50"></text></g><g><title>mir_const (2,685,758 samples, 3.98%)</title><rect x="9.8114%" y="165" width="3.9844%" height="15" fill="rgb(231,73,38)"/><text x="10.0614%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (2,371,245 samples, 3.52%)</title><rect x="10.2780%" y="149" width="3.5178%" height="15" fill="rgb(225,20,46)"/><text x="10.5280%" y="159.50">uns..</text></g><g><title>mir_built (2,100,862 samples, 3.12%)</title><rect x="10.6791%" y="133" width="3.1167%" height="15" fill="rgb(210,31,41)"/><text x="10.9291%" y="143.50">mir..</text></g><g><title>mir_promoted (3,072,671 samples, 4.56%)</title><rect x="9.5592%" y="181" width="4.5584%" height="15" fill="rgb(221,200,47)"/><text x="9.8092%" y="191.50">mir_p..</text></g><g><title>mir_const_qualif (216,922 samples, 0.32%)</title><rect x="13.7958%" y="165" width="0.3218%" height="15" fill="rgb(226,26,5)"/><text x="14.0458%" y="175.50"></text></g><g><title>mir_const (169,862 samples, 0.25%)</title><rect x="13.8656%" y="149" width="0.2520%" height="15" fill="rgb(249,33,26)"/><text x="14.1156%" y="159.50"></text></g><g><title>unsafety_check_result (113,611 samples, 0.17%)</title><rect x="13.9490%" y="133" width="0.1685%" height="15" fill="rgb(235,183,28)"/><text x="14.1990%" y="143.50"></text></g><g><title>mir_built (67,691 samples, 0.10%)</title><rect x="14.0171%" y="117" width="0.1004%" height="15" fill="rgb(221,5,38)"/><text x="14.2671%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (402,673 samples, 0.60%)</title><rect x="14.1312%" y="181" width="0.5974%" height="15" fill="rgb(247,18,42)"/><text x="14.3812%" y="191.50"></text></g><g><title>normalize_projection_ty (270,272 samples, 0.40%)</title><rect x="14.3277%" y="165" width="0.4010%" height="15" fill="rgb(241,131,45)"/><text x="14.5777%" y="175.50"></text></g><g><title>MIR_borrow_checking (6,031,121 samples, 8.95%)</title><rect x="6.2853%" y="213" width="8.9473%" height="15" fill="rgb(249,31,29)"/><text x="6.5353%" y="223.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (6,004,440 samples, 8.91%)</title><rect x="6.3249%" y="197" width="8.9077%" height="15" fill="rgb(225,111,53)"/><text x="6.5749%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (339,733 samples, 0.50%)</title><rect x="14.7286%" y="181" width="0.5040%" height="15" fill="rgb(238,160,17)"/><text x="14.9786%" y="191.50"></text></g><g><title>MIR_effect_checking (99,151 samples, 0.15%)</title><rect x="15.2326%" y="213" width="0.1471%" height="15" fill="rgb(214,148,48)"/><text x="15.4826%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (81,110 samples, 0.12%)</title><rect x="15.2594%" y="197" width="0.1203%" height="15" fill="rgb(232,36,49)"/><text x="15.5094%" y="207.50"></text></g><g><title>hir_module_items (136,991 samples, 0.20%)</title><rect x="15.3797%" y="213" width="0.2032%" height="15" fill="rgb(209,103,24)"/><text x="15.6297%" y="223.50"></text></g><g><title>get_lang_items (87,911 samples, 0.13%)</title><rect x="16.0900%" y="133" width="0.1304%" height="15" fill="rgb(229,88,8)"/><text x="16.3400%" y="143.50"></text></g><g><title>item_attrs (79,072 samples, 0.12%)</title><rect x="16.2205%" y="133" width="0.1173%" height="15" fill="rgb(213,181,19)"/><text x="16.4705%" y="143.50"></text></g><g><title>codegen_fn_attrs (284,903 samples, 0.42%)</title><rect x="16.0269%" y="149" width="0.4227%" height="15" fill="rgb(254,191,54)"/><text x="16.2769%" y="159.50"></text></g><g><title>codegen_fn_attrs (438,015 samples, 0.65%)</title><rect x="15.8055%" y="181" width="0.6498%" height="15" fill="rgb(241,83,37)"/><text x="16.0555%" y="191.50"></text></g><g><title>should_inherit_track_caller (379,794 samples, 0.56%)</title><rect x="15.8918%" y="165" width="0.5634%" height="15" fill="rgb(233,36,39)"/><text x="16.1418%" y="175.50"></text></g><g><title>check_mod_attrs (560,475 samples, 0.83%)</title><rect x="15.6246%" y="197" width="0.8315%" height="15" fill="rgb(226,3,54)"/><text x="15.8746%" y="207.50"></text></g><g><title>lookup_deprecation_entry (87,791 samples, 0.13%)</title><rect x="16.7309%" y="181" width="0.1302%" height="15" fill="rgb(245,192,40)"/><text x="16.9809%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (239,603 samples, 0.36%)</title><rect x="16.6114%" y="197" width="0.3555%" height="15" fill="rgb(238,167,29)"/><text x="16.8614%" y="207.50"></text></g><g><title>misc_checking_1 (981,530 samples, 1.46%)</title><rect x="15.5836%" y="213" width="1.4561%" height="15" fill="rgb(232,182,51)"/><text x="15.8336%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (183,921 samples, 0.27%)</title><rect x="17.0440%" y="197" width="0.2729%" height="15" fill="rgb(231,60,39)"/><text x="17.2940%" y="207.50"></text></g><g><title>check_mod_liveness (142,471 samples, 0.21%)</title><rect x="17.1055%" y="181" width="0.2114%" height="15" fill="rgb(208,69,12)"/><text x="17.3555%" y="191.50"></text></g><g><title>misc_checking_2 (397,894 samples, 0.59%)</title><rect x="17.0397%" y="213" width="0.5903%" height="15" fill="rgb(235,93,37)"/><text x="17.2897%" y="223.50"></text></g><g><title>match_checking (211,073 samples, 0.31%)</title><rect x="17.3168%" y="197" width="0.3131%" height="15" fill="rgb(213,116,39)"/><text x="17.5668%" y="207.50"></text></g><g><title>check_match (196,213 samples, 0.29%)</title><rect x="17.3389%" y="181" width="0.2911%" height="15" fill="rgb(222,207,29)"/><text x="17.5889%" y="191.50"></text></g><g><title>death_checking (68,860 samples, 0.10%)</title><rect x="17.7065%" y="197" width="0.1022%" height="15" fill="rgb(206,96,30)"/><text x="17.9565%" y="207.50"></text></g><g><title>eval_to_const_value_raw (87,041 samples, 0.13%)</title><rect x="18.4440%" y="165" width="0.1291%" height="15" fill="rgb(218,138,4)"/><text x="18.6940%" y="175.50"></text></g><g><title>eval_to_const_value_raw (85,221 samples, 0.13%)</title><rect x="18.4467%" y="149" width="0.1264%" height="15" fill="rgb(250,191,14)"/><text x="18.6967%" y="159.50"></text></g><g><title>eval_to_allocation_raw (79,691 samples, 0.12%)</title><rect x="18.4549%" y="133" width="0.1182%" height="15" fill="rgb(239,60,40)"/><text x="18.7049%" y="143.50"></text></g><g><title>param_env (85,141 samples, 0.13%)</title><rect x="18.5731%" y="165" width="0.1263%" height="15" fill="rgb(206,27,48)"/><text x="18.8231%" y="175.50"></text></g><g><title>crate_lints (3,095,372 samples, 4.59%)</title><rect x="17.8111%" y="181" width="4.5920%" height="15" fill="rgb(225,35,8)"/><text x="18.0611%" y="191.50">crate..</text></g><g><title>type_of (2,493,375 samples, 3.70%)</title><rect x="18.7042%" y="165" width="3.6990%" height="15" fill="rgb(250,213,24)"/><text x="18.9542%" y="175.50">type..</text></g><g><title>metadata_decode_entry_type_of (2,245,642 samples, 3.33%)</title><rect x="19.0717%" y="149" width="3.3315%" height="15" fill="rgb(247,123,22)"/><text x="19.3217%" y="159.50">met..</text></g><g><title>lint_checking (3,174,293 samples, 4.71%)</title><rect x="17.8087%" y="197" width="4.7091%" height="15" fill="rgb(231,138,38)"/><text x="18.0587%" y="207.50">lint_..</text></g><g><title>module_lints (77,261 samples, 0.11%)</title><rect x="22.4032%" y="181" width="0.1146%" height="15" fill="rgb(231,145,46)"/><text x="22.6532%" y="191.50"></text></g><g><title>lint_mod (75,211 samples, 0.11%)</title><rect x="22.4062%" y="165" width="0.1116%" height="15" fill="rgb(251,118,11)"/><text x="22.6562%" y="175.50"></text></g><g><title>privacy_checking_modules (123,661 samples, 0.18%)</title><rect x="22.5903%" y="197" width="0.1835%" height="15" fill="rgb(217,147,25)"/><text x="22.8403%" y="207.50"></text></g><g><title>check_mod_privacy (121,981 samples, 0.18%)</title><rect x="22.5928%" y="181" width="0.1810%" height="15" fill="rgb(247,81,37)"/><text x="22.8428%" y="191.50"></text></g><g><title>misc_checking_3 (3,475,315 samples, 5.16%)</title><rect x="17.6300%" y="213" width="5.1557%" height="15" fill="rgb(209,12,38)"/><text x="17.8800%" y="223.50">misc_c..</text></g><g><title>impl_parent (433,282 samples, 0.64%)</title><rect x="23.7158%" y="149" width="0.6428%" height="15" fill="rgb(227,1,9)"/><text x="23.9658%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (327,460 samples, 0.49%)</title><rect x="23.8728%" y="133" width="0.4858%" height="15" fill="rgb(248,47,43)"/><text x="24.1228%" y="143.50"></text></g><g><title>impl_trait_ref (1,173,000 samples, 1.74%)</title><rect x="24.3586%" y="149" width="1.7402%" height="15" fill="rgb(221,10,30)"/><text x="24.6086%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,058,470 samples, 1.57%)</title><rect x="24.5285%" y="133" width="1.5703%" height="15" fill="rgb(210,229,1)"/><text x="24.7785%" y="143.50"></text></g><g><title>coherent_trait (2,326,163 samples, 3.45%)</title><rect x="22.8991%" y="181" width="3.4509%" height="15" fill="rgb(222,148,37)"/><text x="23.1491%" y="191.50">coh..</text></g><g><title>specialization_graph_of (2,303,642 samples, 3.42%)</title><rect x="22.9325%" y="165" width="3.4175%" height="15" fill="rgb(234,67,33)"/><text x="23.1825%" y="175.50">spe..</text></g><g><title>trait_impls_of (169,362 samples, 0.25%)</title><rect x="26.0987%" y="149" width="0.2513%" height="15" fill="rgb(247,98,35)"/><text x="26.3487%" y="159.50"></text></g><g><title>coherence_checking (2,402,984 samples, 3.56%)</title><rect x="22.8712%" y="197" width="3.5649%" height="15" fill="rgb(247,138,52)"/><text x="23.1212%" y="207.50">cohe..</text></g><g><title>associated_item (360,034 samples, 0.53%)</title><rect x="29.3693%" y="133" width="0.5341%" height="15" fill="rgb(213,79,30)"/><text x="29.6193%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (310,693 samples, 0.46%)</title><rect x="29.4425%" y="117" width="0.4609%" height="15" fill="rgb(246,177,23)"/><text x="29.6925%" y="127.50"></text></g><g><title>associated_items (441,825 samples, 0.66%)</title><rect x="29.2595%" y="149" width="0.6555%" height="15" fill="rgb(230,62,27)"/><text x="29.5095%" y="159.50"></text></g><g><title>specializes (67,501 samples, 0.10%)</title><rect x="30.1954%" y="133" width="0.1001%" height="15" fill="rgb(216,154,8)"/><text x="30.4454%" y="143.50"></text></g><g><title>evaluate_obligation (287,072 samples, 0.43%)</title><rect x="29.9817%" y="149" width="0.4259%" height="15" fill="rgb(244,35,45)"/><text x="30.2317%" y="159.50"></text></g><g><title>trait_impls_of (72,930 samples, 0.11%)</title><rect x="30.2993%" y="133" width="0.1082%" height="15" fill="rgb(251,115,12)"/><text x="30.5493%" y="143.50"></text></g><g><title>method_autoderef_steps (106,781 samples, 0.16%)</title><rect x="30.5542%" y="149" width="0.1584%" height="15" fill="rgb(240,54,50)"/><text x="30.8042%" y="159.50"></text></g><g><title>evaluate_obligation (81,851 samples, 0.12%)</title><rect x="30.5912%" y="133" width="0.1214%" height="15" fill="rgb(233,84,52)"/><text x="30.8412%" y="143.50"></text></g><g><title>predicates_of (72,450 samples, 0.11%)</title><rect x="30.7342%" y="149" width="0.1075%" height="15" fill="rgb(207,117,47)"/><text x="30.9842%" y="159.50"></text></g><g><title>associated_item (831,849 samples, 1.23%)</title><rect x="41.8809%" y="117" width="1.2341%" height="15" fill="rgb(249,43,39)"/><text x="42.1309%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (609,958 samples, 0.90%)</title><rect x="42.2101%" y="101" width="0.9049%" height="15" fill="rgb(209,38,44)"/><text x="42.4601%" y="111.50"></text></g><g><title>associated_items (1,215,803 samples, 1.80%)</title><rect x="41.3636%" y="133" width="1.8037%" height="15" fill="rgb(236,212,23)"/><text x="41.6136%" y="143.50">a..</text></g><g><title>dropck_outlives (98,630 samples, 0.15%)</title><rect x="43.2238%" y="133" width="0.1463%" height="15" fill="rgb(242,79,21)"/><text x="43.4738%" y="143.50"></text></g><g><title>item_attrs (95,351 samples, 0.14%)</title><rect x="43.9448%" y="53" width="0.1415%" height="15" fill="rgb(211,96,35)"/><text x="44.1948%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (94,551 samples, 0.14%)</title><rect x="43.9459%" y="37" width="0.1403%" height="15" fill="rgb(253,215,40)"/><text x="44.1959%" y="47.50"></text></g><g><title>codegen_fn_attrs (111,781 samples, 0.17%)</title><rect x="43.9214%" y="69" width="0.1658%" height="15" fill="rgb(211,81,21)"/><text x="44.1714%" y="79.50"></text></g><g><title>fn_abi_of_instance (181,062 samples, 0.27%)</title><rect x="43.8701%" y="85" width="0.2686%" height="15" fill="rgb(208,190,38)"/><text x="44.1201%" y="95.50"></text></g><g><title>eval_to_const_value_raw (660,067 samples, 0.98%)</title><rect x="43.3701%" y="133" width="0.9792%" height="15" fill="rgb(235,213,38)"/><text x="43.6201%" y="143.50"></text></g><g><title>eval_to_const_value_raw (631,827 samples, 0.94%)</title><rect x="43.4120%" y="117" width="0.9373%" height="15" fill="rgb(237,122,38)"/><text x="43.6620%" y="127.50"></text></g><g><title>eval_to_allocation_raw (615,237 samples, 0.91%)</title><rect x="43.4366%" y="101" width="0.9127%" height="15" fill="rgb(244,218,35)"/><text x="43.6866%" y="111.50"></text></g><g><title>adt_def (74,262 samples, 0.11%)</title><rect x="45.3603%" y="101" width="0.1102%" height="15" fill="rgb(240,68,47)"/><text x="45.6103%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (72,162 samples, 0.11%)</title><rect x="45.3634%" y="85" width="0.1071%" height="15" fill="rgb(210,16,53)"/><text x="45.6134%" y="95.50"></text></g><g><title>adt_sized_constraint (84,482 samples, 0.13%)</title><rect x="45.3476%" y="117" width="0.1253%" height="15" fill="rgb(235,124,12)"/><text x="45.5976%" y="127.50"></text></g><g><title>predicates_of (108,302 samples, 0.16%)</title><rect x="45.6225%" y="117" width="0.1607%" height="15" fill="rgb(224,169,11)"/><text x="45.8725%" y="127.50"></text></g><g><title>predicates_defined_on (76,232 samples, 0.11%)</title><rect x="45.6700%" y="101" width="0.1131%" height="15" fill="rgb(250,166,2)"/><text x="45.9200%" y="111.50"></text></g><g><title>evaluate_obligation (2,076,631 samples, 3.08%)</title><rect x="44.3493%" y="133" width="3.0807%" height="15" fill="rgb(242,216,29)"/><text x="44.5993%" y="143.50">eva..</text></g><g><title>trait_impls_of (1,099,151 samples, 1.63%)</title><rect x="45.7994%" y="117" width="1.6306%" height="15" fill="rgb(230,116,27)"/><text x="46.0494%" y="127.50"></text></g><g><title>implementations_of_trait (319,822 samples, 0.47%)</title><rect x="46.9556%" y="101" width="0.4745%" height="15" fill="rgb(228,99,48)"/><text x="47.2056%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (222,832 samples, 0.33%)</title><rect x="47.0994%" y="85" width="0.3306%" height="15" fill="rgb(253,11,6)"/><text x="47.3494%" y="95.50"></text></g><g><title>fn_sig (85,001 samples, 0.13%)</title><rect x="47.4686%" y="133" width="0.1261%" height="15" fill="rgb(247,143,39)"/><text x="47.7186%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (74,431 samples, 0.11%)</title><rect x="47.4843%" y="117" width="0.1104%" height="15" fill="rgb(236,97,10)"/><text x="47.7343%" y="127.50"></text></g><g><title>generics_of (117,361 samples, 0.17%)</title><rect x="47.5947%" y="133" width="0.1741%" height="15" fill="rgb(233,208,19)"/><text x="47.8447%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (83,791 samples, 0.12%)</title><rect x="47.6445%" y="117" width="0.1243%" height="15" fill="rgb(216,164,2)"/><text x="47.8945%" y="127.50"></text></g><g><title>associated_item (118,891 samples, 0.18%)</title><rect x="47.8808%" y="101" width="0.1764%" height="15" fill="rgb(220,129,5)"/><text x="48.1308%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (104,031 samples, 0.15%)</title><rect x="47.9028%" y="85" width="0.1543%" height="15" fill="rgb(242,17,10)"/><text x="48.1528%" y="95.50"></text></g><g><title>impl_item_implementor_ids (203,933 samples, 0.30%)</title><rect x="47.7700%" y="133" width="0.3025%" height="15" fill="rgb(242,107,0)"/><text x="48.0200%" y="143.50"></text></g><g><title>associated_items (182,463 samples, 0.27%)</title><rect x="47.8018%" y="117" width="0.2707%" height="15" fill="rgb(251,28,31)"/><text x="48.0518%" y="127.50"></text></g><g><title>impl_trait_ref (105,750 samples, 0.16%)</title><rect x="48.0867%" y="133" width="0.1569%" height="15" fill="rgb(233,223,10)"/><text x="48.3367%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (89,870 samples, 0.13%)</title><rect x="48.1103%" y="117" width="0.1333%" height="15" fill="rgb(215,21,27)"/><text x="48.3603%" y="127.50"></text></g><g><title>predicates_of (90,010 samples, 0.13%)</title><rect x="48.6726%" y="101" width="0.1335%" height="15" fill="rgb(232,23,21)"/><text x="48.9226%" y="111.50"></text></g><g><title>is_copy_raw (367,644 samples, 0.55%)</title><rect x="48.2632%" y="133" width="0.5454%" height="15" fill="rgb(244,5,23)"/><text x="48.5132%" y="143.50"></text></g><g><title>evaluate_obligation (336,384 samples, 0.50%)</title><rect x="48.3096%" y="117" width="0.4990%" height="15" fill="rgb(226,81,46)"/><text x="48.5596%" y="127.50"></text></g><g><title>item_attrs (205,504 samples, 0.30%)</title><rect x="48.8086%" y="133" width="0.3049%" height="15" fill="rgb(247,70,30)"/><text x="49.0586%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (201,523 samples, 0.30%)</title><rect x="48.8145%" y="117" width="0.2990%" height="15" fill="rgb(212,68,19)"/><text x="49.0645%" y="127.50"></text></g><g><title>lint_levels (79,381 samples, 0.12%)</title><rect x="49.1135%" y="133" width="0.1178%" height="15" fill="rgb(240,187,13)"/><text x="49.3635%" y="143.50"></text></g><g><title>method_autoderef_steps (89,550 samples, 0.13%)</title><rect x="49.2791%" y="133" width="0.1328%" height="15" fill="rgb(223,113,26)"/><text x="49.5291%" y="143.50"></text></g><g><title>explicit_predicates_of (108,280 samples, 0.16%)</title><rect x="49.7104%" y="101" width="0.1606%" height="15" fill="rgb(206,192,2)"/><text x="49.9604%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (84,940 samples, 0.13%)</title><rect x="49.7451%" y="85" width="0.1260%" height="15" fill="rgb(241,108,4)"/><text x="49.9951%" y="95.50"></text></g><g><title>predicates_of (335,467 samples, 0.50%)</title><rect x="49.4458%" y="133" width="0.4977%" height="15" fill="rgb(247,173,49)"/><text x="49.6958%" y="143.50"></text></g><g><title>predicates_defined_on (221,581 samples, 0.33%)</title><rect x="49.6148%" y="117" width="0.3287%" height="15" fill="rgb(224,114,35)"/><text x="49.8648%" y="127.50"></text></g><g><title>trait_impls_of (590,906 samples, 0.88%)</title><rect x="49.9997%" y="133" width="0.8766%" height="15" fill="rgb(245,159,27)"/><text x="50.2497%" y="143.50"></text></g><g><title>implementations_of_trait (157,811 samples, 0.23%)</title><rect x="50.6422%" y="117" width="0.2341%" height="15" fill="rgb(245,172,44)"/><text x="50.8922%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (119,071 samples, 0.18%)</title><rect x="50.6996%" y="101" width="0.1766%" height="15" fill="rgb(236,23,11)"/><text x="50.9496%" y="111.50"></text></g><g><title>type_of (74,870 samples, 0.11%)</title><rect x="50.8763%" y="133" width="0.1111%" height="15" fill="rgb(205,117,38)"/><text x="51.1263%" y="143.50"></text></g><g><title>typeck (13,593,989 samples, 20.17%)</title><rect x="30.8711%" y="149" width="20.1670%" height="15" fill="rgb(237,72,25)"/><text x="31.1211%" y="159.50">typeck</text></g><g><title>item_bodies_checking (16,569,639 samples, 24.58%)</title><rect x="26.4703%" y="197" width="24.5814%" height="15" fill="rgb(244,70,9)"/><text x="26.7203%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,565,289 samples, 24.57%)</title><rect x="26.4767%" y="181" width="24.5749%" height="15" fill="rgb(217,125,39)"/><text x="26.7267%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (16,539,519 samples, 24.54%)</title><rect x="26.5150%" y="165" width="24.5367%" height="15" fill="rgb(235,36,10)"/><text x="26.7650%" y="175.50">typeck</text></g><g><title>impl_parent (112,912 samples, 0.17%)</title><rect x="51.9052%" y="117" width="0.1675%" height="15" fill="rgb(251,123,47)"/><text x="52.1552%" y="127.50"></text></g><g><title>impl_trait_ref (395,732 samples, 0.59%)</title><rect x="52.0727%" y="117" width="0.5871%" height="15" fill="rgb(221,13,13)"/><text x="52.3227%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (346,461 samples, 0.51%)</title><rect x="52.1458%" y="101" width="0.5140%" height="15" fill="rgb(238,131,9)"/><text x="52.3958%" y="111.50"></text></g><g><title>adt_destructor (775,188 samples, 1.15%)</title><rect x="51.6089%" y="165" width="1.1500%" height="15" fill="rgb(211,50,8)"/><text x="51.8589%" y="175.50"></text></g><g><title>coherent_trait (768,348 samples, 1.14%)</title><rect x="51.6190%" y="149" width="1.1399%" height="15" fill="rgb(245,182,24)"/><text x="51.8690%" y="159.50"></text></g><g><title>specialization_graph_of (765,198 samples, 1.14%)</title><rect x="51.6237%" y="133" width="1.1352%" height="15" fill="rgb(242,14,37)"/><text x="51.8737%" y="143.50"></text></g><g><title>item_types_checking (1,420,634 samples, 2.11%)</title><rect x="51.0517%" y="197" width="2.1075%" height="15" fill="rgb(246,228,12)"/><text x="51.3017%" y="207.50">i..</text></g><g><title>check_mod_item_types (1,416,264 samples, 2.10%)</title><rect x="51.0582%" y="181" width="2.1011%" height="15" fill="rgb(213,55,15)"/><text x="51.3082%" y="191.50">c..</text></g><g><title>typeck (142,281 samples, 0.21%)</title><rect x="52.9482%" y="165" width="0.2111%" height="15" fill="rgb(209,9,3)"/><text x="53.1982%" y="175.50"></text></g><g><title>fn_sig (112,552 samples, 0.17%)</title><rect x="53.3622%" y="165" width="0.1670%" height="15" fill="rgb(230,59,30)"/><text x="53.6122%" y="175.50"></text></g><g><title>named_region_map (86,910 samples, 0.13%)</title><rect x="53.6556%" y="149" width="0.1289%" height="15" fill="rgb(209,121,21)"/><text x="53.9056%" y="159.50"></text></g><g><title>resolve_lifetimes (81,890 samples, 0.12%)</title><rect x="53.6631%" y="133" width="0.1215%" height="15" fill="rgb(220,109,13)"/><text x="53.9131%" y="143.50"></text></g><g><title>generics_of (186,260 samples, 0.28%)</title><rect x="53.5291%" y="165" width="0.2763%" height="15" fill="rgb(232,18,1)"/><text x="53.7791%" y="175.50"></text></g><g><title>predicates_of (153,081 samples, 0.23%)</title><rect x="53.8654%" y="165" width="0.2271%" height="15" fill="rgb(215,41,42)"/><text x="54.1154%" y="175.50"></text></g><g><title>predicates_defined_on (135,501 samples, 0.20%)</title><rect x="53.8915%" y="149" width="0.2010%" height="15" fill="rgb(224,123,36)"/><text x="54.1415%" y="159.50"></text></g><g><title>type_collecting (874,248 samples, 1.30%)</title><rect x="53.1632%" y="197" width="1.2970%" height="15" fill="rgb(240,125,3)"/><text x="53.4132%" y="207.50"></text></g><g><title>collect_mod_item_types (862,678 samples, 1.28%)</title><rect x="53.1803%" y="181" width="1.2798%" height="15" fill="rgb(205,98,50)"/><text x="53.4303%" y="191.50"></text></g><g><title>type_of (247,803 samples, 0.37%)</title><rect x="54.0925%" y="165" width="0.3676%" height="15" fill="rgb(205,185,37)"/><text x="54.3425%" y="175.50"></text></g><g><title>type_of (120,411 samples, 0.18%)</title><rect x="54.2815%" y="149" width="0.1786%" height="15" fill="rgb(238,207,15)"/><text x="54.5315%" y="159.50"></text></g><g><title>evaluate_obligation (235,322 samples, 0.35%)</title><rect x="55.3496%" y="165" width="0.3491%" height="15" fill="rgb(213,199,42)"/><text x="55.5996%" y="175.50"></text></g><g><title>implied_outlives_bounds (85,860 samples, 0.13%)</title><rect x="55.6987%" y="165" width="0.1274%" height="15" fill="rgb(235,201,11)"/><text x="55.9487%" y="175.50"></text></g><g><title>param_env (78,411 samples, 0.12%)</title><rect x="55.8261%" y="165" width="0.1163%" height="15" fill="rgb(207,46,11)"/><text x="56.0761%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,047,861 samples, 1.55%)</title><rect x="54.5620%" y="181" width="1.5545%" height="15" fill="rgb(241,35,35)"/><text x="54.8120%" y="191.50"></text></g><g><title>region_scope_tree (117,371 samples, 0.17%)</title><rect x="55.9424%" y="165" width="0.1741%" height="15" fill="rgb(243,32,47)"/><text x="56.1924%" y="175.50"></text></g><g><title>evaluate_obligation (174,471 samples, 0.26%)</title><rect x="56.6949%" y="165" width="0.2588%" height="15" fill="rgb(247,202,23)"/><text x="56.9449%" y="175.50"></text></g><g><title>param_env (187,492 samples, 0.28%)</title><rect x="57.0198%" y="165" width="0.2781%" height="15" fill="rgb(219,102,11)"/><text x="57.2698%" y="175.50"></text></g><g><title>analysis (34,700,683 samples, 51.48%)</title><rect x="5.9790%" y="229" width="51.4792%" height="15" fill="rgb(243,110,44)"/><text x="6.2290%" y="239.50">analysis</text></g><g><title>type_check_crate (23,371,777 samples, 34.67%)</title><rect x="22.7857%" y="213" width="34.6725%" height="15" fill="rgb(222,74,54)"/><text x="23.0357%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,018,710 samples, 2.99%)</title><rect x="54.4634%" y="197" width="2.9948%" height="15" fill="rgb(216,99,12)"/><text x="54.7134%" y="207.50">wf_..</text></g><g><title>check_item_well_formed (904,389 samples, 1.34%)</title><rect x="56.1165%" y="181" width="1.3417%" height="15" fill="rgb(226,22,26)"/><text x="56.3665%" y="191.50"></text></g><g><title>codegen_module (276,563 samples, 0.41%)</title><rect x="58.0854%" y="213" width="0.4103%" height="15" fill="rgb(217,163,10)"/><text x="58.3354%" y="223.50"></text></g><g><title>codegen_crate (763,598 samples, 1.13%)</title><rect x="57.4765%" y="229" width="1.1328%" height="15" fill="rgb(213,25,53)"/><text x="57.7265%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,906,070 samples, 4.31%)</title><rect x="58.6342%" y="213" width="4.3112%" height="15" fill="rgb(252,105,26)"/><text x="58.8842%" y="223.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,849,429 samples, 4.23%)</title><rect x="58.7182%" y="197" width="4.2272%" height="15" fill="rgb(220,39,43)"/><text x="58.9682%" y="207.50">LLVM_..</text></g><g><title>codegen_module_optimize (3,177,233 samples, 4.71%)</title><rect x="58.6093%" y="229" width="4.7135%" height="15" fill="rgb(229,68,48)"/><text x="58.8593%" y="239.50">codeg..</text></g><g><title>LLVM_module_optimize (254,393 samples, 0.38%)</title><rect x="62.9454%" y="213" width="0.3774%" height="15" fill="rgb(252,8,32)"/><text x="63.1954%" y="223.50"></text></g><g><title>AST_validation (111,271 samples, 0.17%)</title><rect x="63.6588%" y="213" width="0.1651%" height="15" fill="rgb(223,20,43)"/><text x="63.9088%" y="223.50"></text></g><g><title>crate_injection (93,441 samples, 0.14%)</title><rect x="63.8806%" y="213" width="0.1386%" height="15" fill="rgb(229,81,49)"/><text x="64.1306%" y="223.50"></text></g><g><title>metadata_load_macro (73,091 samples, 0.11%)</title><rect x="80.3864%" y="181" width="0.1084%" height="15" fill="rgb(236,28,36)"/><text x="80.6364%" y="191.50"></text></g><g><title>macro_expand_crate (13,272,535 samples, 19.69%)</title><rect x="64.0192%" y="213" width="19.6901%" height="15" fill="rgb(249,185,26)"/><text x="64.2692%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (13,256,625 samples, 19.67%)</title><rect x="64.0428%" y="197" width="19.6665%" height="15" fill="rgb(249,174,33)"/><text x="64.2928%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,166,752 samples, 3.21%)</title><rect x="80.4948%" y="181" width="3.2144%" height="15" fill="rgb(233,201,37)"/><text x="80.7448%" y="191.50">met..</text></g><g><title>metadata_register_crate (792,960 samples, 1.18%)</title><rect x="82.5329%" y="165" width="1.1764%" height="15" fill="rgb(221,78,26)"/><text x="82.7829%" y="175.50"></text></g><g><title>metadata_register_crate (69,970 samples, 0.10%)</title><rect x="83.6055%" y="149" width="0.1038%" height="15" fill="rgb(250,127,30)"/><text x="83.8555%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (106,041 samples, 0.16%)</title><rect x="83.7288%" y="213" width="0.1573%" height="15" fill="rgb(230,49,44)"/><text x="83.9788%" y="223.50"></text></g><g><title>finalize_imports (69,060 samples, 0.10%)</title><rect x="83.8992%" y="197" width="0.1025%" height="15" fill="rgb(229,67,23)"/><text x="84.1492%" y="207.50"></text></g><g><title>finalize_macro_resolutions (209,542 samples, 0.31%)</title><rect x="84.0017%" y="197" width="0.3109%" height="15" fill="rgb(249,83,47)"/><text x="84.2517%" y="207.50"></text></g><g><title>late_resolve_crate (1,013,001 samples, 1.50%)</title><rect x="84.3126%" y="197" width="1.5028%" height="15" fill="rgb(215,43,3)"/><text x="84.5626%" y="207.50"></text></g><g><title>configure_and_expand (15,227,715 samples, 22.59%)</title><rect x="63.3228%" y="229" width="22.5906%" height="15" fill="rgb(238,154,13)"/><text x="63.5728%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,366,535 samples, 2.03%)</title><rect x="83.8861%" y="213" width="2.0273%" height="15" fill="rgb(219,56,2)"/><text x="84.1361%" y="223.50">r..</text></g><g><title>drop_ast (91,601 samples, 0.14%)</title><rect x="85.9134%" y="229" width="0.1359%" height="15" fill="rgb(233,0,4)"/><text x="86.1634%" y="239.50"></text></g><g><title>early_lint_checks (171,811 samples, 0.25%)</title><rect x="86.0680%" y="229" width="0.2549%" height="15" fill="rgb(235,30,7)"/><text x="86.3180%" y="239.50"></text></g><g><title>free_global_ctxt (2,610,226 samples, 3.87%)</title><rect x="86.3229%" y="229" width="3.8723%" height="15" fill="rgb(250,79,13)"/><text x="86.5729%" y="239.50">free..</text></g><g><title>crate_hash (78,801 samples, 0.12%)</title><rect x="90.7999%" y="213" width="0.1169%" height="15" fill="rgb(211,146,34)"/><text x="91.0499%" y="223.50"></text></g><g><title>exported_symbols (91,741 samples, 0.14%)</title><rect x="90.9583%" y="213" width="0.1361%" height="15" fill="rgb(228,22,38)"/><text x="91.2083%" y="223.50"></text></g><g><title>layout_of (168,791 samples, 0.25%)</title><rect x="91.8978%" y="197" width="0.2504%" height="15" fill="rgb(235,168,5)"/><text x="92.1478%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (502,624 samples, 0.75%)</title><rect x="92.1482%" y="197" width="0.7457%" height="15" fill="rgb(221,155,16)"/><text x="92.3982%" y="207.50"></text></g><g><title>optimized_mir (1,189,582 samples, 1.76%)</title><rect x="91.1321%" y="213" width="1.7648%" height="15" fill="rgb(215,215,53)"/><text x="91.3821%" y="223.50"></text></g><g><title>generate_crate_metadata (1,838,099 samples, 2.73%)</title><rect x="90.1952%" y="229" width="2.7269%" height="15" fill="rgb(223,4,10)"/><text x="90.4452%" y="239.50">ge..</text></g><g><title>hir_lowering (1,045,861 samples, 1.55%)</title><rect x="92.9220%" y="229" width="1.5516%" height="15" fill="rgb(234,103,6)"/><text x="93.1720%" y="239.50"></text></g><g><title>finish_ongoing_codegen (373,804 samples, 0.55%)</title><rect x="94.4912%" y="213" width="0.5545%" height="15" fill="rgb(227,97,0)"/><text x="94.7412%" y="223.50"></text></g><g><title>link_crate (550,136 samples, 0.82%)</title><rect x="95.0458%" y="213" width="0.8161%" height="15" fill="rgb(234,150,53)"/><text x="95.2958%" y="223.50"></text></g><g><title>link_binary (539,996 samples, 0.80%)</title><rect x="95.0608%" y="197" width="0.8011%" height="15" fill="rgb(228,201,54)"/><text x="95.3108%" y="207.50"></text></g><g><title>link_rlib (337,914 samples, 0.50%)</title><rect x="95.3606%" y="181" width="0.5013%" height="15" fill="rgb(222,22,37)"/><text x="95.6106%" y="191.50"></text></g><g><title>link (942,350 samples, 1.40%)</title><rect x="94.4736%" y="229" width="1.3980%" height="15" fill="rgb(237,53,32)"/><text x="94.7236%" y="239.50"></text></g><g><title>parse_crate (1,530,815 samples, 2.27%)</title><rect x="95.8716%" y="229" width="2.2710%" height="15" fill="rgb(233,25,53)"/><text x="96.1216%" y="239.50">p..</text></g><g><title>prepare_outputs (365,364 samples, 0.54%)</title><rect x="98.1583%" y="229" width="0.5420%" height="15" fill="rgb(210,40,34)"/><text x="98.4083%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (428,165 samples, 0.64%)</title><rect x="98.7003%" y="229" width="0.6352%" height="15" fill="rgb(241,220,44)"/><text x="98.9503%" y="239.50"></text></g><g><title>setup_global_ctxt (154,812 samples, 0.23%)</title><rect x="99.3371%" y="229" width="0.2297%" height="15" fill="rgb(235,28,35)"/><text x="99.5871%" y="239.50"></text></g><g><title>all (67,407,227 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(210,56,17)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (67,407,227 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (292,023 samples, 0.43%)</title><rect x="99.5668%" y="229" width="0.4332%" height="15" fill="rgb(235,212,8)"/><text x="99.8168%" y="239.50"></text></g></svg></svg>