<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (45,067,597 samples, 12.09%)</title><rect x="0.2210%" y="197" width="12.0940%" height="15" fill="rgb(227,0,7)"/><text x="0.4710%" y="207.50">LLVM_passes</text></g><g><title>param_env (459,624 samples, 0.12%)</title><rect x="15.7821%" y="117" width="0.1233%" height="15" fill="rgb(217,0,24)"/><text x="16.0321%" y="127.50"></text></g><g><title>codegen_fn_attrs (503,906 samples, 0.14%)</title><rect x="16.0464%" y="101" width="0.1352%" height="15" fill="rgb(221,193,54)"/><text x="16.2964%" y="111.50"></text></g><g><title>needs_drop_raw (1,208,603 samples, 0.32%)</title><rect x="17.0517%" y="85" width="0.3243%" height="15" fill="rgb(248,212,6)"/><text x="17.3017%" y="95.50"></text></g><g><title>is_copy_raw (774,249 samples, 0.21%)</title><rect x="17.1682%" y="69" width="0.2078%" height="15" fill="rgb(208,68,35)"/><text x="17.4182%" y="79.50"></text></g><g><title>evaluate_obligation (679,118 samples, 0.18%)</title><rect x="17.1937%" y="53" width="0.1822%" height="15" fill="rgb(232,128,0)"/><text x="17.4437%" y="63.50"></text></g><g><title>specialization_graph_of (1,614,188 samples, 0.43%)</title><rect x="17.5523%" y="69" width="0.4332%" height="15" fill="rgb(207,160,47)"/><text x="17.8023%" y="79.50"></text></g><g><title>impl_trait_ref (629,968 samples, 0.17%)</title><rect x="17.8165%" y="53" width="0.1691%" height="15" fill="rgb(228,23,34)"/><text x="18.0665%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (524,898 samples, 0.14%)</title><rect x="17.8447%" y="37" width="0.1409%" height="15" fill="rgb(218,30,26)"/><text x="18.0947%" y="47.50"></text></g><g><title>resolve_instance (2,383,223 samples, 0.64%)</title><rect x="17.3827%" y="85" width="0.6395%" height="15" fill="rgb(220,122,19)"/><text x="17.6327%" y="95.50"></text></g><g><title>thir_body (1,064,940 samples, 0.29%)</title><rect x="18.0301%" y="85" width="0.2858%" height="15" fill="rgb(250,228,42)"/><text x="18.2801%" y="95.50"></text></g><g><title>mir_const (10,461,670 samples, 2.81%)</title><rect x="15.5148%" y="133" width="2.8074%" height="15" fill="rgb(240,193,28)"/><text x="15.7648%" y="143.50">mi..</text></g><g><title>unsafety_check_result (9,006,022 samples, 2.42%)</title><rect x="15.9054%" y="117" width="2.4168%" height="15" fill="rgb(216,20,37)"/><text x="16.1554%" y="127.50">un..</text></g><g><title>mir_built (7,976,740 samples, 2.14%)</title><rect x="16.1816%" y="101" width="2.1406%" height="15" fill="rgb(206,188,39)"/><text x="16.4316%" y="111.50">m..</text></g><g><title>mir_promoted (11,463,870 samples, 3.08%)</title><rect x="15.2591%" y="149" width="3.0764%" height="15" fill="rgb(217,207,13)"/><text x="15.5091%" y="159.50">mir..</text></g><g><title>type_op_prove_predicate (1,324,157 samples, 0.36%)</title><rect x="18.4432%" y="149" width="0.3553%" height="15" fill="rgb(231,73,38)"/><text x="18.6932%" y="159.50"></text></g><g><title>MIR_borrow_checking (23,874,672 samples, 6.41%)</title><rect x="12.3927%" y="181" width="6.4068%" height="15" fill="rgb(225,20,46)"/><text x="12.6427%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (23,736,750 samples, 6.37%)</title><rect x="12.4297%" y="165" width="6.3698%" height="15" fill="rgb(210,31,41)"/><text x="12.6797%" y="175.50">mir_borr..</text></g><g><title>codegen_fn_attrs (405,443 samples, 0.11%)</title><rect x="18.9173%" y="149" width="0.1088%" height="15" fill="rgb(221,200,47)"/><text x="19.1673%" y="159.50"></text></g><g><title>check_mod_attrs (602,755 samples, 0.16%)</title><rect x="18.8644%" y="165" width="0.1618%" height="15" fill="rgb(226,26,5)"/><text x="19.1144%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (480,764 samples, 0.13%)</title><rect x="19.0802%" y="165" width="0.1290%" height="15" fill="rgb(249,33,26)"/><text x="19.3302%" y="175.50"></text></g><g><title>misc_checking_1 (1,368,464 samples, 0.37%)</title><rect x="18.8590%" y="181" width="0.3672%" height="15" fill="rgb(235,183,28)"/><text x="19.1090%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (448,864 samples, 0.12%)</title><rect x="19.2266%" y="165" width="0.1205%" height="15" fill="rgb(221,5,38)"/><text x="19.4766%" y="175.50"></text></g><g><title>misc_checking_2 (1,040,581 samples, 0.28%)</title><rect x="19.2262%" y="181" width="0.2792%" height="15" fill="rgb(247,18,42)"/><text x="19.4762%" y="191.50"></text></g><g><title>match_checking (590,277 samples, 0.16%)</title><rect x="19.3471%" y="165" width="0.1584%" height="15" fill="rgb(241,131,45)"/><text x="19.5971%" y="175.50"></text></g><g><title>check_match (558,737 samples, 0.15%)</title><rect x="19.3555%" y="149" width="0.1499%" height="15" fill="rgb(249,31,29)"/><text x="19.6055%" y="159.50"></text></g><g><title>death_checking (405,144 samples, 0.11%)</title><rect x="19.5640%" y="165" width="0.1087%" height="15" fill="rgb(225,111,53)"/><text x="19.8140%" y="175.50"></text></g><g><title>param_env (462,525 samples, 0.12%)</title><rect x="19.8657%" y="133" width="0.1241%" height="15" fill="rgb(238,160,17)"/><text x="20.1157%" y="143.50"></text></g><g><title>crate_lints (2,276,463 samples, 0.61%)</title><rect x="19.6731%" y="149" width="0.6109%" height="15" fill="rgb(214,148,48)"/><text x="19.9231%" y="159.50"></text></g><g><title>type_of (1,093,190 samples, 0.29%)</title><rect x="19.9906%" y="133" width="0.2934%" height="15" fill="rgb(232,36,49)"/><text x="20.2406%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (851,108 samples, 0.23%)</title><rect x="20.0556%" y="117" width="0.2284%" height="15" fill="rgb(209,103,24)"/><text x="20.3056%" y="127.50"></text></g><g><title>lint_checking (2,649,907 samples, 0.71%)</title><rect x="19.6728%" y="165" width="0.7111%" height="15" fill="rgb(229,88,8)"/><text x="19.9228%" y="175.50"></text></g><g><title>privacy_checking_modules (728,547 samples, 0.20%)</title><rect x="20.4467%" y="165" width="0.1955%" height="15" fill="rgb(213,181,19)"/><text x="20.6967%" y="175.50"></text></g><g><title>check_mod_privacy (724,667 samples, 0.19%)</title><rect x="20.4477%" y="149" width="0.1945%" height="15" fill="rgb(254,191,54)"/><text x="20.6977%" y="159.50"></text></g><g><title>misc_checking_3 (4,248,902 samples, 1.14%)</title><rect x="19.5055%" y="181" width="1.1402%" height="15" fill="rgb(241,83,37)"/><text x="19.7555%" y="191.50"></text></g><g><title>impl_parent (924,319 samples, 0.25%)</title><rect x="21.0665%" y="117" width="0.2480%" height="15" fill="rgb(233,36,39)"/><text x="21.3165%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (613,368 samples, 0.16%)</title><rect x="21.1499%" y="101" width="0.1646%" height="15" fill="rgb(226,3,54)"/><text x="21.3999%" y="111.50"></text></g><g><title>impl_trait_ref (2,906,940 samples, 0.78%)</title><rect x="21.3145%" y="117" width="0.7801%" height="15" fill="rgb(245,192,40)"/><text x="21.5645%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,589,105 samples, 0.69%)</title><rect x="21.3998%" y="101" width="0.6948%" height="15" fill="rgb(238,167,29)"/><text x="21.6498%" y="111.50"></text></g><g><title>coherent_trait (5,728,608 samples, 1.54%)</title><rect x="20.6727%" y="149" width="1.5373%" height="15" fill="rgb(232,182,51)"/><text x="20.9227%" y="159.50"></text></g><g><title>specialization_graph_of (5,714,448 samples, 1.53%)</title><rect x="20.6765%" y="133" width="1.5335%" height="15" fill="rgb(231,60,39)"/><text x="20.9265%" y="143.50"></text></g><g><title>coherence_checking (5,811,329 samples, 1.56%)</title><rect x="20.6673%" y="165" width="1.5595%" height="15" fill="rgb(208,69,12)"/><text x="20.9173%" y="175.50"></text></g><g><title>associated_item (515,562 samples, 0.14%)</title><rect x="27.0903%" y="101" width="0.1384%" height="15" fill="rgb(235,93,37)"/><text x="27.3403%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (416,911 samples, 0.11%)</title><rect x="27.1168%" y="85" width="0.1119%" height="15" fill="rgb(213,116,39)"/><text x="27.3668%" y="95.50"></text></g><g><title>associated_items (729,937 samples, 0.20%)</title><rect x="27.0432%" y="117" width="0.1959%" height="15" fill="rgb(222,207,29)"/><text x="27.2932%" y="127.50"></text></g><g><title>dropck_outlives (616,904 samples, 0.17%)</title><rect x="27.2615%" y="117" width="0.1655%" height="15" fill="rgb(206,96,30)"/><text x="27.5115%" y="127.50"></text></g><g><title>adt_dtorck_constraint (409,794 samples, 0.11%)</title><rect x="27.3171%" y="101" width="0.1100%" height="15" fill="rgb(218,138,4)"/><text x="27.5671%" y="111.50"></text></g><g><title>trait_impls_of (812,164 samples, 0.22%)</title><rect x="27.9253%" y="101" width="0.2179%" height="15" fill="rgb(250,191,14)"/><text x="28.1753%" y="111.50"></text></g><g><title>evaluate_obligation (2,672,038 samples, 0.72%)</title><rect x="27.4270%" y="117" width="0.7170%" height="15" fill="rgb(239,60,40)"/><text x="27.6770%" y="127.50"></text></g><g><title>predicates_of (484,684 samples, 0.13%)</title><rect x="28.5434%" y="117" width="0.1301%" height="15" fill="rgb(206,27,48)"/><text x="28.7934%" y="127.50"></text></g><g><title>typeck (1,680,517 samples, 0.45%)</title><rect x="28.7154%" y="117" width="0.4510%" height="15" fill="rgb(225,35,8)"/><text x="28.9654%" y="127.50"></text></g><g><title>item_bodies_checking (25,918,573 samples, 6.96%)</title><rect x="22.2346%" y="165" width="6.9553%" height="15" fill="rgb(250,213,24)"/><text x="22.4846%" y="175.50">item_bodi..</text></g><g><title>typeck_item_bodies (25,915,093 samples, 6.95%)</title><rect x="22.2355%" y="149" width="6.9544%" height="15" fill="rgb(247,123,22)"/><text x="22.4855%" y="159.50">typeck_it..</text></g><g><title>typeck (25,827,322 samples, 6.93%)</title><rect x="22.2591%" y="133" width="6.9308%" height="15" fill="rgb(231,138,38)"/><text x="22.5091%" y="143.50">typeck</text></g><g><title>item_types_checking (638,607 samples, 0.17%)</title><rect x="29.1899%" y="165" width="0.1714%" height="15" fill="rgb(231,145,46)"/><text x="29.4399%" y="175.50"></text></g><g><title>check_mod_item_types (633,597 samples, 0.17%)</title><rect x="29.1913%" y="149" width="0.1700%" height="15" fill="rgb(251,118,11)"/><text x="29.4413%" y="159.50"></text></g><g><title>fn_sig (395,443 samples, 0.11%)</title><rect x="29.4234%" y="133" width="0.1061%" height="15" fill="rgb(217,147,25)"/><text x="29.6734%" y="143.50"></text></g><g><title>predicates_of (411,617 samples, 0.11%)</title><rect x="29.6137%" y="133" width="0.1105%" height="15" fill="rgb(247,81,37)"/><text x="29.8637%" y="143.50"></text></g><g><title>type_collecting (1,424,354 samples, 0.38%)</title><rect x="29.3627%" y="165" width="0.3822%" height="15" fill="rgb(209,12,38)"/><text x="29.6127%" y="175.50"></text></g><g><title>collect_mod_item_types (1,408,264 samples, 0.38%)</title><rect x="29.3670%" y="149" width="0.3779%" height="15" fill="rgb(227,1,9)"/><text x="29.6170%" y="159.50"></text></g><g><title>evaluate_obligation (561,683 samples, 0.15%)</title><rect x="30.3091%" y="133" width="0.1507%" height="15" fill="rgb(248,47,43)"/><text x="30.5591%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,191,374 samples, 0.86%)</title><rect x="29.8524%" y="149" width="0.8564%" height="15" fill="rgb(221,10,30)"/><text x="30.1024%" y="159.50"></text></g><g><title>analysis (69,623,936 samples, 18.68%)</title><rect x="12.3150%" y="197" width="18.6838%" height="15" fill="rgb(210,229,1)"/><text x="12.5650%" y="207.50">analysis</text></g><g><title>type_check_crate (38,580,031 samples, 10.35%)</title><rect x="20.6457%" y="181" width="10.3531%" height="15" fill="rgb(222,148,37)"/><text x="20.8957%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,666,877 samples, 1.25%)</title><rect x="29.7464%" y="165" width="1.2524%" height="15" fill="rgb(234,67,33)"/><text x="29.9964%" y="175.50"></text></g><g><title>check_item_well_formed (1,080,509 samples, 0.29%)</title><rect x="30.7088%" y="149" width="0.2900%" height="15" fill="rgb(247,98,35)"/><text x="30.9588%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (531,225 samples, 0.14%)</title><rect x="39.5203%" y="165" width="0.1426%" height="15" fill="rgb(247,138,52)"/><text x="39.7703%" y="175.50"></text></g><g><title>layout_of (452,566 samples, 0.12%)</title><rect x="40.4202%" y="101" width="0.1214%" height="15" fill="rgb(213,79,30)"/><text x="40.6702%" y="111.50"></text></g><g><title>layout_of (788,617 samples, 0.21%)</title><rect x="40.3619%" y="117" width="0.2116%" height="15" fill="rgb(246,177,23)"/><text x="40.6119%" y="127.50"></text></g><g><title>layout_of (1,256,572 samples, 0.34%)</title><rect x="40.2709%" y="133" width="0.3372%" height="15" fill="rgb(230,62,27)"/><text x="40.5209%" y="143.50"></text></g><g><title>layout_of (1,863,969 samples, 0.50%)</title><rect x="40.1491%" y="149" width="0.5002%" height="15" fill="rgb(216,154,8)"/><text x="40.3991%" y="159.50"></text></g><g><title>param_env (1,078,314 samples, 0.29%)</title><rect x="40.6493%" y="149" width="0.2894%" height="15" fill="rgb(244,35,45)"/><text x="40.8993%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,026,499 samples, 1.35%)</title><rect x="39.7026%" y="165" width="1.3489%" height="15" fill="rgb(251,115,12)"/><text x="39.9526%" y="175.50"></text></g><g><title>layout_of (429,113 samples, 0.12%)</title><rect x="41.2544%" y="117" width="0.1152%" height="15" fill="rgb(240,54,50)"/><text x="41.5044%" y="127.50"></text></g><g><title>layout_of (608,136 samples, 0.16%)</title><rect x="41.2216%" y="133" width="0.1632%" height="15" fill="rgb(233,84,52)"/><text x="41.4716%" y="143.50"></text></g><g><title>layout_of (889,038 samples, 0.24%)</title><rect x="41.1842%" y="149" width="0.2386%" height="15" fill="rgb(207,117,47)"/><text x="41.4342%" y="159.50"></text></g><g><title>layout_of (1,280,543 samples, 0.34%)</title><rect x="41.0996%" y="165" width="0.3436%" height="15" fill="rgb(249,43,39)"/><text x="41.3496%" y="175.50"></text></g><g><title>symbol_name (818,428 samples, 0.22%)</title><rect x="41.4482%" y="165" width="0.2196%" height="15" fill="rgb(209,38,44)"/><text x="41.6982%" y="175.50"></text></g><g><title>codegen_module (37,414,728 samples, 10.04%)</title><rect x="31.6343%" y="181" width="10.0403%" height="15" fill="rgb(236,212,23)"/><text x="31.8843%" y="191.50">codegen_module</text></g><g><title>codegen_crate (39,875,935 samples, 10.70%)</title><rect x="31.0014%" y="197" width="10.7008%" height="15" fill="rgb(242,79,21)"/><text x="31.2514%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (142,557,639 samples, 38.26%)</title><rect x="41.7507%" y="181" width="38.2557%" height="15" fill="rgb(211,96,35)"/><text x="42.0007%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (137,024,690 samples, 36.77%)</title><rect x="43.2355%" y="165" width="36.7709%" height="15" fill="rgb(253,215,40)"/><text x="43.4855%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (147,716,969 samples, 39.64%)</title><rect x="41.7023%" y="197" width="39.6403%" height="15" fill="rgb(211,81,21)"/><text x="41.9523%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,978,648 samples, 1.34%)</title><rect x="80.0065%" y="181" width="1.3360%" height="15" fill="rgb(208,190,38)"/><text x="80.2565%" y="191.50"></text></g><g><title>metadata_register_crate (3,452,295 samples, 0.93%)</title><rect x="88.3912%" y="149" width="0.9264%" height="15" fill="rgb(235,213,38)"/><text x="88.6412%" y="159.50"></text></g><g><title>metadata_register_crate (1,247,553 samples, 0.33%)</title><rect x="88.9829%" y="133" width="0.3348%" height="15" fill="rgb(237,122,38)"/><text x="89.2329%" y="143.50"></text></g><g><title>macro_expand_crate (29,621,270 samples, 7.95%)</title><rect x="81.4711%" y="181" width="7.9489%" height="15" fill="rgb(244,218,35)"/><text x="81.7211%" y="191.50">macro_expan..</text></g><g><title>expand_crate (29,602,220 samples, 7.94%)</title><rect x="81.4762%" y="165" width="7.9438%" height="15" fill="rgb(240,68,47)"/><text x="81.7262%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (381,464 samples, 0.10%)</title><rect x="89.3177%" y="149" width="0.1024%" height="15" fill="rgb(210,16,53)"/><text x="89.5677%" y="159.50"></text></g><g><title>late_resolve_crate (1,990,400 samples, 0.53%)</title><rect x="89.4822%" y="165" width="0.5341%" height="15" fill="rgb(235,124,12)"/><text x="89.7322%" y="175.50"></text></g><g><title>configure_and_expand (32,419,209 samples, 8.70%)</title><rect x="81.3425%" y="197" width="8.6998%" height="15" fill="rgb(224,169,11)"/><text x="81.5925%" y="207.50">configure_an..</text></g><g><title>resolve_crate (2,223,013 samples, 0.60%)</title><rect x="89.4457%" y="181" width="0.5966%" height="15" fill="rgb(250,166,2)"/><text x="89.6957%" y="191.50"></text></g><g><title>free_global_ctxt (5,257,903 samples, 1.41%)</title><rect x="90.1828%" y="197" width="1.4110%" height="15" fill="rgb(242,216,29)"/><text x="90.4328%" y="207.50"></text></g><g><title>layout_of (896,111 samples, 0.24%)</title><rect x="93.1733%" y="101" width="0.2405%" height="15" fill="rgb(230,116,27)"/><text x="93.4233%" y="111.50"></text></g><g><title>needs_drop_raw (401,754 samples, 0.11%)</title><rect x="94.7332%" y="85" width="0.1078%" height="15" fill="rgb(228,99,48)"/><text x="94.9832%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,058,782 samples, 1.36%)</title><rect x="93.4877%" y="101" width="1.3575%" height="15" fill="rgb(253,11,6)"/><text x="93.7377%" y="111.50"></text></g><g><title>optimized_mir (10,079,749 samples, 2.70%)</title><rect x="92.2441%" y="117" width="2.7049%" height="15" fill="rgb(247,143,39)"/><text x="92.4941%" y="127.50">op..</text></g><g><title>codegen_fulfill_obligation (745,182 samples, 0.20%)</title><rect x="95.0398%" y="101" width="0.2000%" height="15" fill="rgb(236,97,10)"/><text x="95.2898%" y="111.50"></text></g><g><title>impl_parent (532,826 samples, 0.14%)</title><rect x="95.5678%" y="85" width="0.1430%" height="15" fill="rgb(233,208,19)"/><text x="95.8178%" y="95.50"></text></g><g><title>specialization_graph_of (2,433,934 samples, 0.65%)</title><rect x="95.2843%" y="101" width="0.6532%" height="15" fill="rgb(216,164,2)"/><text x="95.5343%" y="111.50"></text></g><g><title>impl_trait_ref (844,947 samples, 0.23%)</title><rect x="95.7107%" y="85" width="0.2267%" height="15" fill="rgb(220,129,5)"/><text x="95.9607%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (626,206 samples, 0.17%)</title><rect x="95.7694%" y="69" width="0.1680%" height="15" fill="rgb(242,17,10)"/><text x="96.0194%" y="79.50"></text></g><g><title>resolve_instance (3,746,138 samples, 1.01%)</title><rect x="94.9490%" y="117" width="1.0053%" height="15" fill="rgb(242,107,0)"/><text x="95.1990%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (753,957 samples, 0.20%)</title><rect x="96.0052%" y="117" width="0.2023%" height="15" fill="rgb(251,28,31)"/><text x="96.2552%" y="127.50"></text></g><g><title>upstream_monomorphizations (745,767 samples, 0.20%)</title><rect x="96.0074%" y="101" width="0.2001%" height="15" fill="rgb(233,223,10)"/><text x="96.2574%" y="111.50"></text></g><g><title>exported_symbols (623,516 samples, 0.17%)</title><rect x="96.0402%" y="85" width="0.1673%" height="15" fill="rgb(215,21,27)"/><text x="96.2902%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (617,826 samples, 0.17%)</title><rect x="96.0417%" y="69" width="0.1658%" height="15" fill="rgb(232,23,21)"/><text x="96.2917%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (16,374,617 samples, 4.39%)</title><rect x="91.8571%" y="133" width="4.3942%" height="15" fill="rgb(244,5,23)"/><text x="92.1071%" y="143.50">monom..</text></g><g><title>monomorphization_collector (16,465,127 samples, 4.42%)</title><rect x="91.8563%" y="149" width="4.4185%" height="15" fill="rgb(226,81,46)"/><text x="92.1063%" y="159.50">monom..</text></g><g><title>assert_symbols_are_distinct (656,057 samples, 0.18%)</title><rect x="96.2776%" y="133" width="0.1761%" height="15" fill="rgb(247,70,30)"/><text x="96.5276%" y="143.50"></text></g><g><title>symbol_name (592,996 samples, 0.16%)</title><rect x="96.2945%" y="117" width="0.1591%" height="15" fill="rgb(212,68,19)"/><text x="96.5445%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (17,469,298 samples, 4.69%)</title><rect x="91.8475%" y="165" width="4.6879%" height="15" fill="rgb(240,187,13)"/><text x="92.0975%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (971,530 samples, 0.26%)</title><rect x="96.2747%" y="149" width="0.2607%" height="15" fill="rgb(223,113,26)"/><text x="96.5247%" y="159.50"></text></g><g><title>exported_symbols (17,578,508 samples, 4.72%)</title><rect x="91.8346%" y="181" width="4.7172%" height="15" fill="rgb(206,192,2)"/><text x="92.0846%" y="191.50">expor..</text></g><g><title>optimized_mir (1,192,053 samples, 0.32%)</title><rect x="96.5815%" y="181" width="0.3199%" height="15" fill="rgb(241,108,4)"/><text x="96.8315%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (530,886 samples, 0.14%)</title><rect x="96.7589%" y="165" width="0.1425%" height="15" fill="rgb(247,173,49)"/><text x="97.0089%" y="175.50"></text></g><g><title>generate_crate_metadata (19,803,641 samples, 5.31%)</title><rect x="91.5938%" y="197" width="5.3144%" height="15" fill="rgb(224,114,35)"/><text x="91.8438%" y="207.50">generat..</text></g><g><title>hir_lowering (2,550,536 samples, 0.68%)</title><rect x="96.9081%" y="197" width="0.6844%" height="15" fill="rgb(245,159,27)"/><text x="97.1581%" y="207.50"></text></g><g><title>finish_ongoing_codegen (3,311,603 samples, 0.89%)</title><rect x="97.6077%" y="181" width="0.8887%" height="15" fill="rgb(245,172,44)"/><text x="97.8577%" y="191.50"></text></g><g><title>link_crate (1,670,747 samples, 0.45%)</title><rect x="98.4964%" y="181" width="0.4483%" height="15" fill="rgb(236,23,11)"/><text x="98.7464%" y="191.50"></text></g><g><title>link_binary (1,648,287 samples, 0.44%)</title><rect x="98.5024%" y="165" width="0.4423%" height="15" fill="rgb(205,117,38)"/><text x="98.7524%" y="175.50"></text></g><g><title>link_rlib (1,112,331 samples, 0.30%)</title><rect x="98.6462%" y="149" width="0.2985%" height="15" fill="rgb(237,72,25)"/><text x="98.8962%" y="159.50"></text></g><g><title>link (5,049,551 samples, 1.36%)</title><rect x="97.5926%" y="197" width="1.3551%" height="15" fill="rgb(244,70,9)"/><text x="97.8426%" y="207.50"></text></g><g><title>parse_crate (569,756 samples, 0.15%)</title><rect x="98.9476%" y="197" width="0.1529%" height="15" fill="rgb(217,125,39)"/><text x="99.1976%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,727,017 samples, 0.73%)</title><rect x="99.1598%" y="197" width="0.7318%" height="15" fill="rgb(235,36,10)"/><text x="99.4098%" y="207.50"></text></g><g><title>all (372,643,880 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (372,643,880 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>