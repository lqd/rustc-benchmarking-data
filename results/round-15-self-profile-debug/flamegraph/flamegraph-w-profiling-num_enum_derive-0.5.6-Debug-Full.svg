<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (366,763,213 samples, 12.85%)</title><rect x="0.0257%" y="181" width="12.8472%" height="15" fill="rgb(227,0,7)"/><text x="0.2757%" y="191.50">LLVM_passes</text></g><g><title>mir_const (14,812,013 samples, 0.52%)</title><rect x="13.8499%" y="117" width="0.5188%" height="15" fill="rgb(217,0,24)"/><text x="14.0999%" y="127.50"></text></g><g><title>unsafety_check_result (13,177,563 samples, 0.46%)</title><rect x="13.9071%" y="101" width="0.4616%" height="15" fill="rgb(221,193,54)"/><text x="14.1571%" y="111.50"></text></g><g><title>mir_built (11,888,444 samples, 0.42%)</title><rect x="13.9523%" y="85" width="0.4164%" height="15" fill="rgb(248,212,6)"/><text x="14.2023%" y="95.50"></text></g><g><title>mir_promoted (16,646,582 samples, 0.58%)</title><rect x="13.8050%" y="133" width="0.5831%" height="15" fill="rgb(208,68,35)"/><text x="14.0550%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,433,693 samples, 0.12%)</title><rect x="14.4609%" y="133" width="0.1203%" height="15" fill="rgb(232,128,0)"/><text x="14.7109%" y="143.50"></text></g><g><title>MIR_borrow_checking (48,295,250 samples, 1.69%)</title><rect x="12.8901%" y="165" width="1.6917%" height="15" fill="rgb(207,160,47)"/><text x="13.1401%" y="175.50"></text></g><g><title>mir_borrowck (48,175,130 samples, 1.69%)</title><rect x="12.8943%" y="149" width="1.6875%" height="15" fill="rgb(228,23,34)"/><text x="13.1443%" y="159.50"></text></g><g><title>misc_checking_3 (5,130,182 samples, 0.18%)</title><rect x="14.7115%" y="165" width="0.1797%" height="15" fill="rgb(218,30,26)"/><text x="14.9615%" y="175.50"></text></g><g><title>impl_trait_ref (3,919,759 samples, 0.14%)</title><rect x="15.0608%" y="101" width="0.1373%" height="15" fill="rgb(220,122,19)"/><text x="15.3108%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,093,559 samples, 0.11%)</title><rect x="15.0897%" y="85" width="0.1084%" height="15" fill="rgb(250,228,42)"/><text x="15.3397%" y="95.50"></text></g><g><title>coherent_trait (9,227,574 samples, 0.32%)</title><rect x="14.8946%" y="133" width="0.3232%" height="15" fill="rgb(240,193,28)"/><text x="15.1446%" y="143.50"></text></g><g><title>specialization_graph_of (8,660,078 samples, 0.30%)</title><rect x="14.9145%" y="117" width="0.3034%" height="15" fill="rgb(216,20,37)"/><text x="15.1645%" y="127.50"></text></g><g><title>coherence_checking (9,301,415 samples, 0.33%)</title><rect x="14.8940%" y="149" width="0.3258%" height="15" fill="rgb(206,188,39)"/><text x="15.1440%" y="159.50"></text></g><g><title>dropck_outlives (3,311,777 samples, 0.12%)</title><rect x="16.6660%" y="101" width="0.1160%" height="15" fill="rgb(217,207,13)"/><text x="16.9160%" y="111.50"></text></g><g><title>evaluate_obligation (4,361,054 samples, 0.15%)</title><rect x="16.7820%" y="101" width="0.1528%" height="15" fill="rgb(231,73,38)"/><text x="17.0320%" y="111.50"></text></g><g><title>typeck (11,451,373 samples, 0.40%)</title><rect x="17.0135%" y="101" width="0.4011%" height="15" fill="rgb(225,20,46)"/><text x="17.2635%" y="111.50"></text></g><g><title>item_bodies_checking (62,695,496 samples, 2.20%)</title><rect x="15.2207%" y="149" width="2.1961%" height="15" fill="rgb(210,31,41)"/><text x="15.4707%" y="159.50">i..</text></g><g><title>typeck_item_bodies (62,691,076 samples, 2.20%)</title><rect x="15.2209%" y="133" width="2.1960%" height="15" fill="rgb(221,200,47)"/><text x="15.4709%" y="143.50">t..</text></g><g><title>typeck (62,627,354 samples, 2.19%)</title><rect x="15.2231%" y="117" width="2.1938%" height="15" fill="rgb(226,26,5)"/><text x="15.4731%" y="127.50">t..</text></g><g><title>mir_const (3,286,693 samples, 0.12%)</title><rect x="17.4760%" y="69" width="0.1151%" height="15" fill="rgb(249,33,26)"/><text x="17.7260%" y="79.50"></text></g><g><title>unsafety_check_result (3,174,022 samples, 0.11%)</title><rect x="17.4799%" y="53" width="0.1112%" height="15" fill="rgb(235,183,28)"/><text x="17.7299%" y="63.50"></text></g><g><title>mir_built (3,093,471 samples, 0.11%)</title><rect x="17.4828%" y="37" width="0.1084%" height="15" fill="rgb(221,5,38)"/><text x="17.7328%" y="47.50"></text></g><g><title>mir_promoted (3,360,423 samples, 0.12%)</title><rect x="17.4736%" y="85" width="0.1177%" height="15" fill="rgb(247,18,42)"/><text x="17.7236%" y="95.50"></text></g><g><title>type_of (4,299,264 samples, 0.15%)</title><rect x="17.4493%" y="117" width="0.1506%" height="15" fill="rgb(241,131,45)"/><text x="17.6993%" y="127.50"></text></g><g><title>mir_borrowck (4,184,992 samples, 0.15%)</title><rect x="17.4533%" y="101" width="0.1466%" height="15" fill="rgb(249,31,29)"/><text x="17.7033%" y="111.50"></text></g><g><title>item_types_checking (6,004,731 samples, 0.21%)</title><rect x="17.4169%" y="149" width="0.2103%" height="15" fill="rgb(225,111,53)"/><text x="17.6669%" y="159.50"></text></g><g><title>check_mod_item_types (5,999,281 samples, 0.21%)</title><rect x="17.4170%" y="133" width="0.2101%" height="15" fill="rgb(238,160,17)"/><text x="17.6670%" y="143.50"></text></g><g><title>analysis (142,148,803 samples, 4.98%)</title><rect x="12.8730%" y="181" width="4.9793%" height="15" fill="rgb(214,148,48)"/><text x="13.1230%" y="191.50">analys..</text></g><g><title>type_check_crate (84,532,388 samples, 2.96%)</title><rect x="14.8912%" y="165" width="2.9611%" height="15" fill="rgb(232,36,49)"/><text x="15.1412%" y="175.50">typ..</text></g><g><title>wf_checking (4,536,966 samples, 0.16%)</title><rect x="17.6933%" y="149" width="0.1589%" height="15" fill="rgb(209,103,24)"/><text x="17.9433%" y="159.50"></text></g><g><title>check_item_well_formed (2,934,830 samples, 0.10%)</title><rect x="17.7494%" y="133" width="0.1028%" height="15" fill="rgb(229,88,8)"/><text x="17.9994%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (8,780,554 samples, 0.31%)</title><rect x="27.5656%" y="149" width="0.3076%" height="15" fill="rgb(213,181,19)"/><text x="27.8156%" y="159.50"></text></g><g><title>layout_of (4,303,612 samples, 0.15%)</title><rect x="28.4053%" y="133" width="0.1507%" height="15" fill="rgb(254,191,54)"/><text x="28.6553%" y="143.50"></text></g><g><title>predicates_of (3,003,477 samples, 0.11%)</title><rect x="28.7879%" y="117" width="0.1052%" height="15" fill="rgb(241,83,37)"/><text x="29.0379%" y="127.50"></text></g><g><title>param_env (9,651,230 samples, 0.34%)</title><rect x="28.5560%" y="133" width="0.3381%" height="15" fill="rgb(233,36,39)"/><text x="28.8060%" y="143.50"></text></g><g><title>normalize_projection_ty (3,155,366 samples, 0.11%)</title><rect x="28.9299%" y="117" width="0.1105%" height="15" fill="rgb(226,3,54)"/><text x="29.1799%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,198,991 samples, 0.15%)</title><rect x="28.8941%" y="133" width="0.1471%" height="15" fill="rgb(245,192,40)"/><text x="29.1441%" y="143.50"></text></g><g><title>fn_abi_of_instance (31,669,059 samples, 1.11%)</title><rect x="27.9382%" y="149" width="1.1093%" height="15" fill="rgb(238,167,29)"/><text x="28.1882%" y="159.50"></text></g><g><title>layout_of (6,962,199 samples, 0.24%)</title><rect x="29.0976%" y="149" width="0.2439%" height="15" fill="rgb(232,182,51)"/><text x="29.3476%" y="159.50"></text></g><g><title>symbol_name (3,521,710 samples, 0.12%)</title><rect x="29.3427%" y="149" width="0.1234%" height="15" fill="rgb(231,60,39)"/><text x="29.5927%" y="159.50"></text></g><g><title>codegen_module (327,668,985 samples, 11.48%)</title><rect x="18.0085%" y="165" width="11.4778%" height="15" fill="rgb(208,69,12)"/><text x="18.2585%" y="175.50">codegen_module</text></g><g><title>codegen_fn_attrs (3,119,650 samples, 0.11%)</title><rect x="29.8465%" y="117" width="0.1093%" height="15" fill="rgb(235,93,37)"/><text x="30.0965%" y="127.50"></text></g><g><title>mir_shims (3,036,656 samples, 0.11%)</title><rect x="29.9879%" y="117" width="0.1064%" height="15" fill="rgb(213,116,39)"/><text x="30.2379%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,380,915 samples, 0.15%)</title><rect x="30.4061%" y="101" width="0.1535%" height="15" fill="rgb(222,207,29)"/><text x="30.6561%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,140,811 samples, 0.36%)</title><rect x="30.5595%" y="101" width="0.3552%" height="15" fill="rgb(206,96,30)"/><text x="30.8095%" y="111.50"></text></g><g><title>optimized_mir (24,622,357 samples, 0.86%)</title><rect x="30.0944%" y="117" width="0.8625%" height="15" fill="rgb(218,138,4)"/><text x="30.3444%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (15,181,663 samples, 0.53%)</title><rect x="31.1023%" y="101" width="0.5318%" height="15" fill="rgb(250,191,14)"/><text x="31.3523%" y="111.50"></text></g><g><title>specialization_graph_of (5,786,049 samples, 0.20%)</title><rect x="31.7511%" y="101" width="0.2027%" height="15" fill="rgb(239,60,40)"/><text x="32.0011%" y="111.50"></text></g><g><title>resolve_instance (29,311,013 samples, 1.03%)</title><rect x="30.9568%" y="117" width="1.0267%" height="15" fill="rgb(206,27,48)"/><text x="31.2068%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,872,879 samples, 0.10%)</title><rect x="32.0620%" y="101" width="0.1006%" height="15" fill="rgb(225,35,8)"/><text x="32.3120%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,481,145 samples, 0.12%)</title><rect x="32.0438%" y="117" width="0.1219%" height="15" fill="rgb(250,213,24)"/><text x="32.2938%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (4,481,676 samples, 0.16%)</title><rect x="32.1673%" y="117" width="0.1570%" height="15" fill="rgb(247,123,22)"/><text x="32.4173%" y="127.50"></text></g><g><title>upstream_monomorphizations (4,406,875 samples, 0.15%)</title><rect x="32.1699%" y="101" width="0.1544%" height="15" fill="rgb(231,138,38)"/><text x="32.4199%" y="111.50"></text></g><g><title>exported_symbols (3,876,720 samples, 0.14%)</title><rect x="32.1885%" y="85" width="0.1358%" height="15" fill="rgb(231,145,46)"/><text x="32.4385%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,868,760 samples, 0.14%)</title><rect x="32.1888%" y="69" width="0.1355%" height="15" fill="rgb(251,118,11)"/><text x="32.4388%" y="79.50"></text></g><g><title>specialization_graph_of (3,885,859 samples, 0.14%)</title><rect x="32.4190%" y="85" width="0.1361%" height="15" fill="rgb(217,147,25)"/><text x="32.6690%" y="95.50"></text></g><g><title>resolve_instance (4,814,008 samples, 0.17%)</title><rect x="32.3872%" y="101" width="0.1686%" height="15" fill="rgb(247,81,37)"/><text x="32.6372%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (87,564,649 samples, 3.07%)</title><rect x="29.4893%" y="133" width="3.0673%" height="15" fill="rgb(209,12,38)"/><text x="29.7393%" y="143.50">mon..</text></g><g><title>vtable_entries (6,631,346 samples, 0.23%)</title><rect x="32.3243%" y="117" width="0.2323%" height="15" fill="rgb(227,1,9)"/><text x="32.5743%" y="127.50"></text></g><g><title>monomorphization_collector (87,601,090 samples, 3.07%)</title><rect x="29.4892%" y="149" width="3.0685%" height="15" fill="rgb(248,47,43)"/><text x="29.7392%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (7,514,066 samples, 0.26%)</title><rect x="32.5582%" y="133" width="0.2632%" height="15" fill="rgb(221,10,30)"/><text x="32.8082%" y="143.50"></text></g><g><title>symbol_name (6,669,668 samples, 0.23%)</title><rect x="32.5878%" y="117" width="0.2336%" height="15" fill="rgb(210,229,1)"/><text x="32.8378%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (98,251,308 samples, 3.44%)</title><rect x="29.4867%" y="165" width="3.4416%" height="15" fill="rgb(222,148,37)"/><text x="29.7367%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (10,579,617 samples, 0.37%)</title><rect x="32.5578%" y="149" width="0.3706%" height="15" fill="rgb(234,67,33)"/><text x="32.8078%" y="159.50"></text></g><g><title>cgu_partitioning (3,051,501 samples, 0.11%)</title><rect x="32.8215%" y="133" width="0.1069%" height="15" fill="rgb(247,98,35)"/><text x="33.0715%" y="143.50"></text></g><g><title>codegen_crate (430,851,633 samples, 15.09%)</title><rect x="17.8525%" y="181" width="15.0922%" height="15" fill="rgb(247,138,52)"/><text x="18.1025%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (981,409,075 samples, 34.38%)</title><rect x="32.9530%" y="165" width="34.3774%" height="15" fill="rgb(213,79,30)"/><text x="33.2030%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (940,596,481 samples, 32.95%)</title><rect x="34.3827%" y="149" width="32.9478%" height="15" fill="rgb(246,177,23)"/><text x="34.6327%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,035,550,703 samples, 36.27%)</title><rect x="32.9447%" y="181" width="36.2739%" height="15" fill="rgb(230,62,27)"/><text x="33.1947%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (53,902,296 samples, 1.89%)</title><rect x="67.3305%" y="165" width="1.8881%" height="15" fill="rgb(216,154,8)"/><text x="67.5805%" y="175.50">L..</text></g><g><title>macro_expand_crate (67,792,408 samples, 2.37%)</title><rect x="69.2368%" y="165" width="2.3747%" height="15" fill="rgb(244,35,45)"/><text x="69.4868%" y="175.50">ma..</text></g><g><title>expand_crate (67,782,058 samples, 2.37%)</title><rect x="69.2372%" y="149" width="2.3743%" height="15" fill="rgb(251,115,12)"/><text x="69.4872%" y="159.50">ex..</text></g><g><title>late_resolve_crate (6,964,561 samples, 0.24%)</title><rect x="71.6676%" y="149" width="0.2440%" height="15" fill="rgb(240,54,50)"/><text x="71.9176%" y="159.50"></text></g><g><title>metadata_register_crate (2,936,470 samples, 0.10%)</title><rect x="71.8087%" y="133" width="0.1029%" height="15" fill="rgb(233,84,52)"/><text x="72.0587%" y="143.50"></text></g><g><title>configure_and_expand (77,108,962 samples, 2.70%)</title><rect x="69.2186%" y="181" width="2.7010%" height="15" fill="rgb(207,117,47)"/><text x="69.4686%" y="191.50">co..</text></g><g><title>resolve_crate (8,186,783 samples, 0.29%)</title><rect x="71.6329%" y="165" width="0.2868%" height="15" fill="rgb(249,43,39)"/><text x="71.8829%" y="175.50"></text></g><g><title>free_global_ctxt (10,735,488 samples, 0.38%)</title><rect x="71.9601%" y="181" width="0.3760%" height="15" fill="rgb(209,38,44)"/><text x="72.2101%" y="191.50"></text></g><g><title>hir_lowering (4,449,526 samples, 0.16%)</title><rect x="72.3512%" y="181" width="0.1559%" height="15" fill="rgb(236,212,23)"/><text x="72.6012%" y="191.50"></text></g><g><title>finish_ongoing_codegen (47,560,743 samples, 1.67%)</title><rect x="72.5078%" y="165" width="1.6660%" height="15" fill="rgb(242,79,21)"/><text x="72.7578%" y="175.50"></text></g><g><title>link_crate (730,526,105 samples, 25.59%)</title><rect x="74.1738%" y="165" width="25.5893%" height="15" fill="rgb(211,96,35)"/><text x="74.4238%" y="175.50">link_crate</text></g><g><title>link_binary (730,212,462 samples, 25.58%)</title><rect x="74.1848%" y="149" width="25.5784%" height="15" fill="rgb(253,215,40)"/><text x="74.4348%" y="159.50">link_binary</text></g><g><title>run_linker (727,396,753 samples, 25.48%)</title><rect x="74.2834%" y="133" width="25.4797%" height="15" fill="rgb(211,81,21)"/><text x="74.5334%" y="143.50">run_linker</text></g><g><title>link (778,118,378 samples, 27.26%)</title><rect x="72.5071%" y="181" width="27.2564%" height="15" fill="rgb(208,190,38)"/><text x="72.7571%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (4,387,485 samples, 0.15%)</title><rect x="99.8423%" y="181" width="0.1537%" height="15" fill="rgb(235,213,38)"/><text x="100.0923%" y="191.50"></text></g><g><title>all (2,854,805,518 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,854,805,518 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>