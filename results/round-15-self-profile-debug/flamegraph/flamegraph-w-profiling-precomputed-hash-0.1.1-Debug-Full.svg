<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,928,639 samples, 8.76%)</title><rect x="1.8170%" y="149" width="8.7571%" height="15" fill="rgb(227,0,7)"/><text x="2.0670%" y="159.50">LLVM_passes</text></g><g><title>mir_const (393,994 samples, 1.18%)</title><rect x="13.6316%" y="85" width="1.1781%" height="15" fill="rgb(217,0,24)"/><text x="13.8816%" y="95.50"></text></g><g><title>unsafety_check_result (292,373 samples, 0.87%)</title><rect x="13.9354%" y="69" width="0.8742%" height="15" fill="rgb(221,193,54)"/><text x="14.1854%" y="79.50"></text></g><g><title>mir_built (224,032 samples, 0.67%)</title><rect x="14.1398%" y="53" width="0.6699%" height="15" fill="rgb(248,212,6)"/><text x="14.3898%" y="63.50"></text></g><g><title>mir_promoted (522,446 samples, 1.56%)</title><rect x="13.2751%" y="101" width="1.5622%" height="15" fill="rgb(208,68,35)"/><text x="13.5251%" y="111.50"></text></g><g><title>MIR_borrow_checking (1,353,844 samples, 4.05%)</title><rect x="10.9411%" y="133" width="4.0482%" height="15" fill="rgb(232,128,0)"/><text x="11.1911%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (1,345,304 samples, 4.02%)</title><rect x="10.9667%" y="117" width="4.0227%" height="15" fill="rgb(207,160,47)"/><text x="11.2167%" y="127.50">mir_..</text></g><g><title>type_op_prove_predicate (50,841 samples, 0.15%)</title><rect x="14.8373%" y="101" width="0.1520%" height="15" fill="rgb(228,23,34)"/><text x="15.0873%" y="111.50"></text></g><g><title>hir_module_items (102,721 samples, 0.31%)</title><rect x="15.0046%" y="133" width="0.3072%" height="15" fill="rgb(218,30,26)"/><text x="15.2546%" y="143.50"></text></g><g><title>get_lang_items (77,641 samples, 0.23%)</title><rect x="15.7458%" y="85" width="0.2322%" height="15" fill="rgb(220,122,19)"/><text x="15.9958%" y="95.50"></text></g><g><title>associated_item (44,250 samples, 0.13%)</title><rect x="16.0180%" y="69" width="0.1323%" height="15" fill="rgb(250,228,42)"/><text x="16.2680%" y="79.50"></text></g><g><title>should_inherit_track_caller (60,010 samples, 0.18%)</title><rect x="15.9779%" y="85" width="0.1794%" height="15" fill="rgb(240,193,28)"/><text x="16.2279%" y="95.50"></text></g><g><title>codegen_fn_attrs (231,353 samples, 0.69%)</title><rect x="15.5661%" y="101" width="0.6918%" height="15" fill="rgb(216,20,37)"/><text x="15.8161%" y="111.50"></text></g><g><title>supported_target_features (33,631 samples, 0.10%)</title><rect x="16.1574%" y="85" width="0.1006%" height="15" fill="rgb(206,188,39)"/><text x="16.4074%" y="95.50"></text></g><g><title>check_mod_attrs (291,353 samples, 0.87%)</title><rect x="15.3877%" y="117" width="0.8712%" height="15" fill="rgb(217,207,13)"/><text x="15.6377%" y="127.50"></text></g><g><title>lookup_stability (43,240 samples, 0.13%)</title><rect x="16.5108%" y="101" width="0.1293%" height="15" fill="rgb(231,73,38)"/><text x="16.7608%" y="111.50"></text></g><g><title>check_mod_unstable_api_usage (93,081 samples, 0.28%)</title><rect x="16.3735%" y="117" width="0.2783%" height="15" fill="rgb(225,20,46)"/><text x="16.6235%" y="127.50"></text></g><g><title>misc_checking_1 (477,244 samples, 1.43%)</title><rect x="15.3138%" y="133" width="1.4270%" height="15" fill="rgb(210,31,41)"/><text x="15.5638%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (53,680 samples, 0.16%)</title><rect x="16.7654%" y="117" width="0.1605%" height="15" fill="rgb(221,200,47)"/><text x="17.0154%" y="127.50"></text></g><g><title>check_mod_liveness (41,360 samples, 0.12%)</title><rect x="16.8023%" y="101" width="0.1237%" height="15" fill="rgb(226,26,5)"/><text x="17.0523%" y="111.50"></text></g><g><title>misc_checking_2 (149,401 samples, 0.45%)</title><rect x="16.7409%" y="133" width="0.4467%" height="15" fill="rgb(249,33,26)"/><text x="16.9909%" y="143.50"></text></g><g><title>match_checking (87,501 samples, 0.26%)</title><rect x="16.9260%" y="117" width="0.2616%" height="15" fill="rgb(235,183,28)"/><text x="17.1760%" y="127.50"></text></g><g><title>check_match (82,831 samples, 0.25%)</title><rect x="16.9399%" y="101" width="0.2477%" height="15" fill="rgb(221,5,38)"/><text x="17.1899%" y="111.50"></text></g><g><title>check_private_in_public (36,390 samples, 0.11%)</title><rect x="17.2227%" y="117" width="0.1088%" height="15" fill="rgb(247,18,42)"/><text x="17.4727%" y="127.50"></text></g><g><title>death_checking (55,381 samples, 0.17%)</title><rect x="17.3315%" y="117" width="0.1656%" height="15" fill="rgb(241,131,45)"/><text x="17.5815%" y="127.50"></text></g><g><title>crate_lints (96,591 samples, 0.29%)</title><rect x="17.5037%" y="101" width="0.2888%" height="15" fill="rgb(249,31,29)"/><text x="17.7537%" y="111.50"></text></g><g><title>param_env (42,931 samples, 0.13%)</title><rect x="17.6642%" y="85" width="0.1284%" height="15" fill="rgb(225,111,53)"/><text x="17.9142%" y="95.50"></text></g><g><title>lint_checking (133,631 samples, 0.40%)</title><rect x="17.4971%" y="117" width="0.3996%" height="15" fill="rgb(238,160,17)"/><text x="17.7471%" y="127.50"></text></g><g><title>module_lints (34,820 samples, 0.10%)</title><rect x="17.7925%" y="101" width="0.1041%" height="15" fill="rgb(214,148,48)"/><text x="18.0425%" y="111.50"></text></g><g><title>privacy_access_levels (67,041 samples, 0.20%)</title><rect x="17.8967%" y="117" width="0.2005%" height="15" fill="rgb(232,36,49)"/><text x="18.1467%" y="127.50"></text></g><g><title>privacy_checking_modules (42,440 samples, 0.13%)</title><rect x="18.0971%" y="117" width="0.1269%" height="15" fill="rgb(209,103,24)"/><text x="18.3471%" y="127.50"></text></g><g><title>check_mod_privacy (40,560 samples, 0.12%)</title><rect x="18.1028%" y="101" width="0.1213%" height="15" fill="rgb(229,88,8)"/><text x="18.3528%" y="111.50"></text></g><g><title>misc_checking_3 (362,214 samples, 1.08%)</title><rect x="17.1876%" y="133" width="1.0831%" height="15" fill="rgb(213,181,19)"/><text x="17.4376%" y="143.50"></text></g><g><title>coherent_trait (96,051 samples, 0.29%)</title><rect x="18.4016%" y="101" width="0.2872%" height="15" fill="rgb(254,191,54)"/><text x="18.6516%" y="111.50"></text></g><g><title>specialization_graph_of (88,731 samples, 0.27%)</title><rect x="18.4235%" y="85" width="0.2653%" height="15" fill="rgb(241,83,37)"/><text x="18.6735%" y="95.50"></text></g><g><title>coherence_checking (150,292 samples, 0.45%)</title><rect x="18.3584%" y="117" width="0.4494%" height="15" fill="rgb(233,36,39)"/><text x="18.6084%" y="127.50"></text></g><g><title>method_autoderef_steps (105,041 samples, 0.31%)</title><rect x="20.6760%" y="69" width="0.3141%" height="15" fill="rgb(226,3,54)"/><text x="20.9260%" y="79.50"></text></g><g><title>evaluate_obligation (93,631 samples, 0.28%)</title><rect x="20.7101%" y="53" width="0.2800%" height="15" fill="rgb(245,192,40)"/><text x="20.9601%" y="63.50"></text></g><g><title>trait_impls_of (56,300 samples, 0.17%)</title><rect x="20.8218%" y="37" width="0.1683%" height="15" fill="rgb(238,167,29)"/><text x="21.0718%" y="47.50"></text></g><g><title>trait_impls_of (36,470 samples, 0.11%)</title><rect x="21.0388%" y="69" width="0.1091%" height="15" fill="rgb(232,182,51)"/><text x="21.2888%" y="79.50"></text></g><g><title>item_bodies_checking (764,568 samples, 2.29%)</title><rect x="18.8677%" y="117" width="2.2862%" height="15" fill="rgb(231,60,39)"/><text x="19.1177%" y="127.50">i..</text></g><g><title>typeck_item_bodies (761,398 samples, 2.28%)</title><rect x="18.8771%" y="101" width="2.2767%" height="15" fill="rgb(208,69,12)"/><text x="19.1271%" y="111.50">t..</text></g><g><title>typeck (754,007 samples, 2.25%)</title><rect x="18.8992%" y="85" width="2.2546%" height="15" fill="rgb(235,93,37)"/><text x="19.1492%" y="95.50">t..</text></g><g><title>item_types_checking (171,692 samples, 0.51%)</title><rect x="21.1538%" y="117" width="0.5134%" height="15" fill="rgb(213,116,39)"/><text x="21.4038%" y="127.50"></text></g><g><title>check_mod_item_types (167,692 samples, 0.50%)</title><rect x="21.1658%" y="101" width="0.5014%" height="15" fill="rgb(222,207,29)"/><text x="21.4158%" y="111.50"></text></g><g><title>fn_sig (39,511 samples, 0.12%)</title><rect x="21.9473%" y="85" width="0.1181%" height="15" fill="rgb(206,96,30)"/><text x="22.1973%" y="95.50"></text></g><g><title>is_late_bound_map (126,131 samples, 0.38%)</title><rect x="22.2067%" y="69" width="0.3772%" height="15" fill="rgb(218,138,4)"/><text x="22.4567%" y="79.50"></text></g><g><title>resolve_lifetimes (110,311 samples, 0.33%)</title><rect x="22.2540%" y="53" width="0.3298%" height="15" fill="rgb(250,191,14)"/><text x="22.5040%" y="63.50"></text></g><g><title>generics_of (197,571 samples, 0.59%)</title><rect x="22.0655%" y="85" width="0.5908%" height="15" fill="rgb(239,60,40)"/><text x="22.3155%" y="95.50"></text></g><g><title>explicit_predicates_of (111,530 samples, 0.33%)</title><rect x="22.7943%" y="53" width="0.3335%" height="15" fill="rgb(206,27,48)"/><text x="23.0443%" y="63.50"></text></g><g><title>predicates_of (143,950 samples, 0.43%)</title><rect x="22.7040%" y="85" width="0.4304%" height="15" fill="rgb(225,35,8)"/><text x="22.9540%" y="95.50"></text></g><g><title>predicates_defined_on (127,920 samples, 0.38%)</title><rect x="22.7519%" y="69" width="0.3825%" height="15" fill="rgb(250,213,24)"/><text x="23.0019%" y="79.50"></text></g><g><title>super_predicates_of (50,761 samples, 0.15%)</title><rect x="23.1344%" y="85" width="0.1518%" height="15" fill="rgb(247,123,22)"/><text x="23.3844%" y="95.50"></text></g><g><title>super_predicates_that_define_assoc_type (37,861 samples, 0.11%)</title><rect x="23.1730%" y="69" width="0.1132%" height="15" fill="rgb(231,138,38)"/><text x="23.4230%" y="79.50"></text></g><g><title>type_collecting (580,196 samples, 1.73%)</title><rect x="21.6694%" y="117" width="1.7349%" height="15" fill="rgb(231,145,46)"/><text x="21.9194%" y="127.50"></text></g><g><title>collect_mod_item_types (569,906 samples, 1.70%)</title><rect x="21.7002%" y="101" width="1.7041%" height="15" fill="rgb(251,118,11)"/><text x="21.9502%" y="111.50"></text></g><g><title>type_of (37,301 samples, 0.11%)</title><rect x="23.2928%" y="85" width="0.1115%" height="15" fill="rgb(217,147,25)"/><text x="23.5428%" y="95.50"></text></g><g><title>evaluate_obligation (91,140 samples, 0.27%)</title><rect x="24.1774%" y="85" width="0.2725%" height="15" fill="rgb(247,81,37)"/><text x="24.4274%" y="95.50"></text></g><g><title>implied_outlives_bounds (36,610 samples, 0.11%)</title><rect x="24.4499%" y="85" width="0.1095%" height="15" fill="rgb(209,12,38)"/><text x="24.6999%" y="95.50"></text></g><g><title>param_env (33,850 samples, 0.10%)</title><rect x="24.5594%" y="85" width="0.1012%" height="15" fill="rgb(227,1,9)"/><text x="24.8094%" y="95.50"></text></g><g><title>check_impl_item_well_formed (411,734 samples, 1.23%)</title><rect x="23.4923%" y="101" width="1.2311%" height="15" fill="rgb(248,47,43)"/><text x="23.7423%" y="111.50"></text></g><g><title>param_env (215,343 samples, 0.64%)</title><rect x="26.2658%" y="85" width="0.6439%" height="15" fill="rgb(221,10,30)"/><text x="26.5158%" y="95.50"></text></g><g><title>check_item_well_formed (753,267 samples, 2.25%)</title><rect x="24.7234%" y="101" width="2.2524%" height="15" fill="rgb(210,229,1)"/><text x="24.9734%" y="111.50">c..</text></g><g><title>evaluate_obligation (245,673 samples, 0.73%)</title><rect x="27.5449%" y="85" width="0.7346%" height="15" fill="rgb(222,148,37)"/><text x="27.7949%" y="95.50"></text></g><g><title>trait_impls_of (39,520 samples, 0.12%)</title><rect x="28.1613%" y="69" width="0.1182%" height="15" fill="rgb(234,67,33)"/><text x="28.4113%" y="79.50"></text></g><g><title>implied_outlives_bounds (58,301 samples, 0.17%)</title><rect x="28.2795%" y="85" width="0.1743%" height="15" fill="rgb(247,98,35)"/><text x="28.5295%" y="95.50"></text></g><g><title>analysis (5,993,401 samples, 17.92%)</title><rect x="10.5741%" y="149" width="17.9212%" height="15" fill="rgb(247,138,52)"/><text x="10.8241%" y="159.50">analysis</text></g><g><title>type_check_crate (3,419,425 samples, 10.22%)</title><rect x="18.2707%" y="133" width="10.2246%" height="15" fill="rgb(213,79,30)"/><text x="18.5207%" y="143.50">type_check_crate</text></g><g><title>wf_checking (1,701,847 samples, 5.09%)</title><rect x="23.4065%" y="117" width="5.0888%" height="15" fill="rgb(246,177,23)"/><text x="23.6565%" y="127.50">wf_che..</text></g><g><title>check_trait_item_well_formed (508,155 samples, 1.52%)</title><rect x="26.9758%" y="101" width="1.5195%" height="15" fill="rgb(230,62,27)"/><text x="27.2258%" y="111.50"></text></g><g><title>codegen_module (499,055 samples, 1.49%)</title><rect x="30.8662%" y="133" width="1.4923%" height="15" fill="rgb(216,154,8)"/><text x="31.1162%" y="143.50"></text></g><g><title>native_libraries (49,120 samples, 0.15%)</title><rect x="32.5377%" y="133" width="0.1469%" height="15" fill="rgb(244,35,45)"/><text x="32.7877%" y="143.50"></text></g><g><title>metadata_decode_entry_native_libraries (38,080 samples, 0.11%)</title><rect x="32.5707%" y="117" width="0.1139%" height="15" fill="rgb(251,115,12)"/><text x="32.8207%" y="127.50"></text></g><g><title>codegen_crate (1,425,244 samples, 4.26%)</title><rect x="28.5217%" y="149" width="4.2617%" height="15" fill="rgb(240,54,50)"/><text x="28.7717%" y="159.50">codeg..</text></g><g><title>LLVM_module_codegen (2,501,195 samples, 7.48%)</title><rect x="32.8359%" y="133" width="7.4790%" height="15" fill="rgb(233,84,52)"/><text x="33.0859%" y="143.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (2,433,454 samples, 7.28%)</title><rect x="33.0384%" y="117" width="7.2764%" height="15" fill="rgb(207,117,47)"/><text x="33.2884%" y="127.50">LLVM_modul..</text></g><g><title>codegen_module_optimize (2,770,048 samples, 8.28%)</title><rect x="32.7834%" y="149" width="8.2829%" height="15" fill="rgb(249,43,39)"/><text x="33.0334%" y="159.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (251,313 samples, 0.75%)</title><rect x="40.3149%" y="133" width="0.7515%" height="15" fill="rgb(209,38,44)"/><text x="40.5649%" y="143.50"></text></g><g><title>AST_validation (51,531 samples, 0.15%)</title><rect x="41.7193%" y="133" width="0.1541%" height="15" fill="rgb(236,212,23)"/><text x="41.9693%" y="143.50"></text></g><g><title>crate_injection (87,891 samples, 0.26%)</title><rect x="41.9084%" y="133" width="0.2628%" height="15" fill="rgb(242,79,21)"/><text x="42.1584%" y="143.50"></text></g><g><title>metadata_load_macro (51,240 samples, 0.15%)</title><rect x="67.3387%" y="101" width="0.1532%" height="15" fill="rgb(211,96,35)"/><text x="67.5887%" y="111.50"></text></g><g><title>macro_expand_crate (11,146,013 samples, 33.33%)</title><rect x="42.1713%" y="133" width="33.3283%" height="15" fill="rgb(253,215,40)"/><text x="42.4213%" y="143.50">macro_expand_crate</text></g><g><title>expand_crate (11,124,263 samples, 33.26%)</title><rect x="42.2363%" y="117" width="33.2633%" height="15" fill="rgb(211,81,21)"/><text x="42.4863%" y="127.50">expand_crate</text></g><g><title>metadata_register_crate (2,678,026 samples, 8.01%)</title><rect x="67.4919%" y="101" width="8.0077%" height="15" fill="rgb(208,190,38)"/><text x="67.7419%" y="111.50">metadata_re..</text></g><g><title>metadata_register_crate (996,049 samples, 2.98%)</title><rect x="72.5213%" y="85" width="2.9783%" height="15" fill="rgb(235,213,38)"/><text x="72.7713%" y="95.50">met..</text></g><g><title>metadata_register_crate (84,320 samples, 0.25%)</title><rect x="75.2475%" y="69" width="0.2521%" height="15" fill="rgb(237,122,38)"/><text x="75.4975%" y="79.50"></text></g><g><title>pre_AST_expansion_lint_checks (56,820 samples, 0.17%)</title><rect x="75.5109%" y="133" width="0.1699%" height="15" fill="rgb(244,218,35)"/><text x="75.7609%" y="143.50"></text></g><g><title>finalize_macro_resolutions (333,643 samples, 1.00%)</title><rect x="75.7373%" y="117" width="0.9976%" height="15" fill="rgb(240,68,47)"/><text x="75.9873%" y="127.50"></text></g><g><title>late_resolve_crate (408,345 samples, 1.22%)</title><rect x="76.7349%" y="117" width="1.2210%" height="15" fill="rgb(210,16,53)"/><text x="76.9849%" y="127.50"></text></g><g><title>configure_and_expand (12,371,296 samples, 36.99%)</title><rect x="41.0663%" y="149" width="36.9921%" height="15" fill="rgb(235,124,12)"/><text x="41.3163%" y="159.50">configure_and_expand</text></g><g><title>resolve_crate (795,148 samples, 2.38%)</title><rect x="75.6808%" y="133" width="2.3776%" height="15" fill="rgb(224,169,11)"/><text x="75.9308%" y="143.50">re..</text></g><g><title>drop_ast (40,620 samples, 0.12%)</title><rect x="78.0584%" y="149" width="0.1215%" height="15" fill="rgb(250,166,2)"/><text x="78.3084%" y="159.50"></text></g><g><title>early_lint_checks (63,581 samples, 0.19%)</title><rect x="78.2438%" y="149" width="0.1901%" height="15" fill="rgb(242,216,29)"/><text x="78.4938%" y="159.50"></text></g><g><title>free_global_ctxt (2,177,742 samples, 6.51%)</title><rect x="78.4339%" y="149" width="6.5118%" height="15" fill="rgb(230,116,27)"/><text x="78.6839%" y="159.50">free_glob..</text></g><g><title>crate_hash (138,271 samples, 0.41%)</title><rect x="86.2041%" y="133" width="0.4135%" height="15" fill="rgb(228,99,48)"/><text x="86.4541%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (84,151 samples, 0.25%)</title><rect x="86.8400%" y="117" width="0.2516%" height="15" fill="rgb(253,11,6)"/><text x="87.0900%" y="127.50"></text></g><g><title>partition_and_assert_distinct_symbols (39,810 samples, 0.12%)</title><rect x="86.9726%" y="101" width="0.1190%" height="15" fill="rgb(247,143,39)"/><text x="87.2226%" y="111.50"></text></g><g><title>exported_symbols (147,852 samples, 0.44%)</title><rect x="86.7694%" y="133" width="0.4421%" height="15" fill="rgb(236,97,10)"/><text x="87.0194%" y="143.50"></text></g><g><title>reachable_non_generics (40,100 samples, 0.12%)</title><rect x="87.0916%" y="117" width="0.1199%" height="15" fill="rgb(233,208,19)"/><text x="87.3416%" y="127.50"></text></g><g><title>layout_of (44,482 samples, 0.13%)</title><rect x="88.1440%" y="117" width="0.1330%" height="15" fill="rgb(216,164,2)"/><text x="88.3940%" y="127.50"></text></g><g><title>optimized_mir (542,845 samples, 1.62%)</title><rect x="87.3827%" y="133" width="1.6232%" height="15" fill="rgb(220,129,5)"/><text x="87.6327%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (243,772 samples, 0.73%)</title><rect x="88.2770%" y="117" width="0.7289%" height="15" fill="rgb(242,17,10)"/><text x="88.5270%" y="127.50"></text></g><g><title>variances_of (38,011 samples, 0.11%)</title><rect x="89.0527%" y="133" width="0.1137%" height="15" fill="rgb(242,107,0)"/><text x="89.3027%" y="143.50"></text></g><g><title>generate_crate_metadata (1,411,914 samples, 4.22%)</title><rect x="84.9457%" y="149" width="4.2218%" height="15" fill="rgb(251,28,31)"/><text x="85.1957%" y="159.50">gener..</text></g><g><title>hir_lowering (337,143 samples, 1.01%)</title><rect x="89.1676%" y="149" width="1.0081%" height="15" fill="rgb(233,223,10)"/><text x="89.4176%" y="159.50"></text></g><g><title>finish_ongoing_codegen (211,672 samples, 0.63%)</title><rect x="90.2367%" y="133" width="0.6329%" height="15" fill="rgb(215,21,27)"/><text x="90.4867%" y="143.50"></text></g><g><title>link_binary_remove_temps (37,440 samples, 0.11%)</title><rect x="91.9802%" y="101" width="0.1120%" height="15" fill="rgb(232,23,21)"/><text x="92.2302%" y="111.50"></text></g><g><title>link_crate (1,002,150 samples, 3.00%)</title><rect x="90.8696%" y="133" width="2.9966%" height="15" fill="rgb(244,5,23)"/><text x="91.1196%" y="143.50">lin..</text></g><g><title>link_binary (978,550 samples, 2.93%)</title><rect x="90.9402%" y="117" width="2.9260%" height="15" fill="rgb(226,81,46)"/><text x="91.1902%" y="127.50">li..</text></g><g><title>link_rlib (593,296 samples, 1.77%)</title><rect x="92.0921%" y="101" width="1.7740%" height="15" fill="rgb(247,70,30)"/><text x="92.3421%" y="111.50">l..</text></g><g><title>link (1,244,203 samples, 3.72%)</title><rect x="90.1757%" y="149" width="3.7204%" height="15" fill="rgb(212,68,19)"/><text x="90.4257%" y="159.50">link</text></g><g><title>parse_crate (497,495 samples, 1.49%)</title><rect x="93.8960%" y="149" width="1.4876%" height="15" fill="rgb(240,187,13)"/><text x="94.1460%" y="159.50"></text></g><g><title>prepare_outputs (350,614 samples, 1.05%)</title><rect x="95.4110%" y="149" width="1.0484%" height="15" fill="rgb(223,113,26)"/><text x="95.6610%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (544,096 samples, 1.63%)</title><rect x="96.4594%" y="149" width="1.6269%" height="15" fill="rgb(206,192,2)"/><text x="96.7094%" y="159.50"></text></g><g><title>setup_global_ctxt (127,491 samples, 0.38%)</title><rect x="98.1146%" y="149" width="0.3812%" height="15" fill="rgb(241,108,4)"/><text x="98.3646%" y="159.50"></text></g><g><title>all (33,443,049 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (33,443,049 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="175.50">rustc</text></g><g><title>write_crate_metadata (503,035 samples, 1.50%)</title><rect x="98.4958%" y="149" width="1.5042%" height="15" fill="rgb(245,159,27)"/><text x="98.7458%" y="159.50"></text></g></svg></svg>