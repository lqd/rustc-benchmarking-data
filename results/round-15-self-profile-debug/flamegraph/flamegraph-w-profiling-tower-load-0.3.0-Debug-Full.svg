<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (32,606,469 samples, 7.55%)</title><rect x="0.1609%" y="197" width="7.5519%" height="15" fill="rgb(227,0,7)"/><text x="0.4109%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (1,559,345 samples, 0.36%)</title><rect x="12.7230%" y="69" width="0.3612%" height="15" fill="rgb(217,0,24)"/><text x="12.9730%" y="79.50"></text></g><g><title>evaluate_obligation (1,318,865 samples, 0.31%)</title><rect x="12.7787%" y="53" width="0.3055%" height="15" fill="rgb(221,193,54)"/><text x="13.0287%" y="63.50"></text></g><g><title>needs_drop_raw (1,948,304 samples, 0.45%)</title><rect x="12.6336%" y="85" width="0.4512%" height="15" fill="rgb(248,212,6)"/><text x="12.8836%" y="95.50"></text></g><g><title>specialization_graph_of (1,234,703 samples, 0.29%)</title><rect x="13.2132%" y="69" width="0.2860%" height="15" fill="rgb(208,68,35)"/><text x="13.4632%" y="79.50"></text></g><g><title>impl_trait_ref (566,916 samples, 0.13%)</title><rect x="13.3679%" y="53" width="0.1313%" height="15" fill="rgb(232,128,0)"/><text x="13.6179%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (457,575 samples, 0.11%)</title><rect x="13.3932%" y="37" width="0.1060%" height="15" fill="rgb(207,160,47)"/><text x="13.6432%" y="47.50"></text></g><g><title>resolve_instance (1,851,527 samples, 0.43%)</title><rect x="13.0916%" y="85" width="0.4288%" height="15" fill="rgb(228,23,34)"/><text x="13.3416%" y="95.50"></text></g><g><title>thir_body (1,207,795 samples, 0.28%)</title><rect x="13.5273%" y="85" width="0.2797%" height="15" fill="rgb(218,30,26)"/><text x="13.7773%" y="95.50"></text></g><g><title>mir_const (10,427,869 samples, 2.42%)</title><rect x="11.4049%" y="133" width="2.4152%" height="15" fill="rgb(220,122,19)"/><text x="11.6549%" y="143.50">mi..</text></g><g><title>unsafety_check_result (9,295,329 samples, 2.15%)</title><rect x="11.6672%" y="117" width="2.1529%" height="15" fill="rgb(250,228,42)"/><text x="11.9172%" y="127.50">u..</text></g><g><title>mir_built (8,497,160 samples, 1.97%)</title><rect x="11.8521%" y="101" width="1.9680%" height="15" fill="rgb(240,193,28)"/><text x="12.1021%" y="111.50">m..</text></g><g><title>mir_promoted (11,581,629 samples, 2.68%)</title><rect x="11.1867%" y="149" width="2.6824%" height="15" fill="rgb(216,20,37)"/><text x="11.4367%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (930,150 samples, 0.22%)</title><rect x="13.8690%" y="149" width="0.2154%" height="15" fill="rgb(206,188,39)"/><text x="14.1190%" y="159.50"></text></g><g><title>type_op_normalize_ty (501,184 samples, 0.12%)</title><rect x="14.1776%" y="149" width="0.1161%" height="15" fill="rgb(217,207,13)"/><text x="14.4276%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,165,496 samples, 0.73%)</title><rect x="14.2937%" y="149" width="0.7331%" height="15" fill="rgb(231,73,38)"/><text x="14.5437%" y="159.50"></text></g><g><title>MIR_borrow_checking (31,182,874 samples, 7.22%)</title><rect x="7.8075%" y="181" width="7.2221%" height="15" fill="rgb(225,20,46)"/><text x="8.0575%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (31,036,524 samples, 7.19%)</title><rect x="7.8414%" y="165" width="7.1882%" height="15" fill="rgb(210,31,41)"/><text x="8.0914%" y="175.50">mir_borrow..</text></g><g><title>codegen_fn_attrs (511,465 samples, 0.12%)</title><rect x="15.2194%" y="149" width="0.1185%" height="15" fill="rgb(221,200,47)"/><text x="15.4694%" y="159.50"></text></g><g><title>check_mod_attrs (840,928 samples, 0.19%)</title><rect x="15.1432%" y="165" width="0.1948%" height="15" fill="rgb(226,26,5)"/><text x="15.3932%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (608,697 samples, 0.14%)</title><rect x="15.4001%" y="165" width="0.1410%" height="15" fill="rgb(249,33,26)"/><text x="15.6501%" y="175.50"></text></g><g><title>misc_checking_1 (1,822,979 samples, 0.42%)</title><rect x="15.1373%" y="181" width="0.4222%" height="15" fill="rgb(235,183,28)"/><text x="15.3873%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (524,176 samples, 0.12%)</title><rect x="15.5598%" y="165" width="0.1214%" height="15" fill="rgb(221,5,38)"/><text x="15.8098%" y="175.50"></text></g><g><title>misc_checking_2 (1,187,093 samples, 0.27%)</title><rect x="15.5595%" y="181" width="0.2749%" height="15" fill="rgb(247,18,42)"/><text x="15.8095%" y="191.50"></text></g><g><title>match_checking (661,417 samples, 0.15%)</title><rect x="15.6812%" y="165" width="0.1532%" height="15" fill="rgb(241,131,45)"/><text x="15.9312%" y="175.50"></text></g><g><title>check_match (622,357 samples, 0.14%)</title><rect x="15.6903%" y="149" width="0.1441%" height="15" fill="rgb(249,31,29)"/><text x="15.9403%" y="159.50"></text></g><g><title>death_checking (841,199 samples, 0.19%)</title><rect x="15.9229%" y="165" width="0.1948%" height="15" fill="rgb(225,111,53)"/><text x="16.1729%" y="175.50"></text></g><g><title>param_env (488,386 samples, 0.11%)</title><rect x="16.4083%" y="133" width="0.1131%" height="15" fill="rgb(238,160,17)"/><text x="16.6583%" y="143.50"></text></g><g><title>crate_lints (3,015,503 samples, 0.70%)</title><rect x="16.1181%" y="149" width="0.6984%" height="15" fill="rgb(214,148,48)"/><text x="16.3681%" y="159.50"></text></g><g><title>type_of (1,206,159 samples, 0.28%)</title><rect x="16.5372%" y="133" width="0.2794%" height="15" fill="rgb(232,36,49)"/><text x="16.7872%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (939,138 samples, 0.22%)</title><rect x="16.5990%" y="117" width="0.2175%" height="15" fill="rgb(209,103,24)"/><text x="16.8490%" y="127.50"></text></g><g><title>lint_checking (3,554,998 samples, 0.82%)</title><rect x="16.1177%" y="165" width="0.8234%" height="15" fill="rgb(229,88,8)"/><text x="16.3677%" y="175.50"></text></g><g><title>module_lints (537,755 samples, 0.12%)</title><rect x="16.8165%" y="149" width="0.1245%" height="15" fill="rgb(213,181,19)"/><text x="17.0665%" y="159.50"></text></g><g><title>lint_mod (532,005 samples, 0.12%)</title><rect x="16.8179%" y="133" width="0.1232%" height="15" fill="rgb(254,191,54)"/><text x="17.0679%" y="143.50"></text></g><g><title>privacy_checking_modules (1,382,075 samples, 0.32%)</title><rect x="17.0379%" y="165" width="0.3201%" height="15" fill="rgb(241,83,37)"/><text x="17.2879%" y="175.50"></text></g><g><title>check_mod_privacy (1,377,775 samples, 0.32%)</title><rect x="17.0389%" y="149" width="0.3191%" height="15" fill="rgb(233,36,39)"/><text x="17.2889%" y="159.50"></text></g><g><title>misc_checking_3 (6,602,931 samples, 1.53%)</title><rect x="15.8344%" y="181" width="1.5293%" height="15" fill="rgb(226,3,54)"/><text x="16.0844%" y="191.50"></text></g><g><title>adt_destructor (446,895 samples, 0.10%)</title><rect x="17.4042%" y="133" width="0.1035%" height="15" fill="rgb(245,192,40)"/><text x="17.6542%" y="143.50"></text></g><g><title>coherent_trait (443,405 samples, 0.10%)</title><rect x="17.4050%" y="117" width="0.1027%" height="15" fill="rgb(238,167,29)"/><text x="17.6550%" y="127.50"></text></g><g><title>specialization_graph_of (441,605 samples, 0.10%)</title><rect x="17.4054%" y="101" width="0.1023%" height="15" fill="rgb(232,182,51)"/><text x="17.6554%" y="111.50"></text></g><g><title>impl_parent (2,746,852 samples, 0.64%)</title><rect x="18.6884%" y="117" width="0.6362%" height="15" fill="rgb(231,60,39)"/><text x="18.9384%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,582,266 samples, 0.37%)</title><rect x="18.9581%" y="101" width="0.3665%" height="15" fill="rgb(208,69,12)"/><text x="19.2081%" y="111.50"></text></g><g><title>impl_trait_ref (5,897,309 samples, 1.37%)</title><rect x="19.3246%" y="117" width="1.3659%" height="15" fill="rgb(235,93,37)"/><text x="19.5746%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,527,683 samples, 1.05%)</title><rect x="19.6418%" y="101" width="1.0486%" height="15" fill="rgb(213,116,39)"/><text x="19.8918%" y="111.50"></text></g><g><title>coherent_trait (15,444,726 samples, 3.58%)</title><rect x="17.3906%" y="149" width="3.5771%" height="15" fill="rgb(222,207,29)"/><text x="17.6406%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (14,769,709 samples, 3.42%)</title><rect x="17.5470%" y="133" width="3.4208%" height="15" fill="rgb(206,96,30)"/><text x="17.7970%" y="143.50">spe..</text></g><g><title>trait_impls_of (1,147,936 samples, 0.27%)</title><rect x="20.7018%" y="117" width="0.2659%" height="15" fill="rgb(218,138,4)"/><text x="20.9518%" y="127.50"></text></g><g><title>coherence_checking (15,576,227 samples, 3.61%)</title><rect x="17.3846%" y="165" width="3.6075%" height="15" fill="rgb(250,191,14)"/><text x="17.6346%" y="175.50">cohe..</text></g><g><title>associated_item (466,993 samples, 0.11%)</title><rect x="27.5029%" y="101" width="0.1082%" height="15" fill="rgb(239,60,40)"/><text x="27.7529%" y="111.50"></text></g><g><title>associated_items (699,645 samples, 0.16%)</title><rect x="27.4575%" y="117" width="0.1620%" height="15" fill="rgb(206,27,48)"/><text x="27.7075%" y="127.50"></text></g><g><title>adt_def (450,206 samples, 0.10%)</title><rect x="27.8296%" y="53" width="0.1043%" height="15" fill="rgb(225,35,8)"/><text x="28.0796%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (448,896 samples, 0.10%)</title><rect x="27.8299%" y="37" width="0.1040%" height="15" fill="rgb(250,213,24)"/><text x="28.0799%" y="47.50"></text></g><g><title>adt_dtorck_constraint (533,057 samples, 0.12%)</title><rect x="27.8245%" y="69" width="0.1235%" height="15" fill="rgb(247,123,22)"/><text x="28.0745%" y="79.50"></text></g><g><title>adt_dtorck_constraint (611,987 samples, 0.14%)</title><rect x="27.8111%" y="85" width="0.1417%" height="15" fill="rgb(231,138,38)"/><text x="28.0611%" y="95.50"></text></g><g><title>adt_dtorck_constraint (873,871 samples, 0.20%)</title><rect x="27.7602%" y="101" width="0.2024%" height="15" fill="rgb(231,145,46)"/><text x="28.0102%" y="111.50"></text></g><g><title>dropck_outlives (1,433,286 samples, 0.33%)</title><rect x="27.6441%" y="117" width="0.3320%" height="15" fill="rgb(251,118,11)"/><text x="27.8941%" y="127.50"></text></g><g><title>generics_of (746,247 samples, 0.17%)</title><rect x="28.5877%" y="101" width="0.1728%" height="15" fill="rgb(217,147,25)"/><text x="28.8377%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (618,546 samples, 0.14%)</title><rect x="28.6172%" y="85" width="0.1433%" height="15" fill="rgb(247,81,37)"/><text x="28.8672%" y="95.50"></text></g><g><title>trait_impls_of (473,215 samples, 0.11%)</title><rect x="28.9827%" y="101" width="0.1096%" height="15" fill="rgb(209,12,38)"/><text x="29.2327%" y="111.50"></text></g><g><title>evaluate_obligation (4,834,111 samples, 1.12%)</title><rect x="27.9761%" y="117" width="1.1196%" height="15" fill="rgb(227,1,9)"/><text x="28.2261%" y="127.50"></text></g><g><title>generics_of (720,425 samples, 0.17%)</title><rect x="29.1435%" y="117" width="0.1669%" height="15" fill="rgb(248,47,43)"/><text x="29.3935%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (553,634 samples, 0.13%)</title><rect x="29.1821%" y="101" width="0.1282%" height="15" fill="rgb(221,10,30)"/><text x="29.4321%" y="111.50"></text></g><g><title>method_autoderef_steps (1,058,181 samples, 0.25%)</title><rect x="29.4309%" y="117" width="0.2451%" height="15" fill="rgb(210,229,1)"/><text x="29.6809%" y="127.50"></text></g><g><title>predicates_of (554,548 samples, 0.13%)</title><rect x="29.7238%" y="117" width="0.1284%" height="15" fill="rgb(222,148,37)"/><text x="29.9738%" y="127.50"></text></g><g><title>item_bodies_checking (38,508,092 samples, 8.92%)</title><rect x="21.0057%" y="165" width="8.9187%" height="15" fill="rgb(234,67,33)"/><text x="21.2557%" y="175.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (38,504,312 samples, 8.92%)</title><rect x="21.0066%" y="149" width="8.9178%" height="15" fill="rgb(247,98,35)"/><text x="21.2566%" y="159.50">typeck_item_b..</text></g><g><title>typeck (38,393,139 samples, 8.89%)</title><rect x="21.0323%" y="133" width="8.8921%" height="15" fill="rgb(247,138,52)"/><text x="21.2823%" y="143.50">typeck</text></g><g><title>item_types_checking (3,308,945 samples, 0.77%)</title><rect x="29.9244%" y="165" width="0.7664%" height="15" fill="rgb(213,79,30)"/><text x="30.1744%" y="175.50"></text></g><g><title>check_mod_item_types (3,302,825 samples, 0.76%)</title><rect x="29.9258%" y="149" width="0.7650%" height="15" fill="rgb(246,177,23)"/><text x="30.1758%" y="159.50"></text></g><g><title>fn_sig (480,584 samples, 0.11%)</title><rect x="30.8042%" y="133" width="0.1113%" height="15" fill="rgb(230,62,27)"/><text x="31.0542%" y="143.50"></text></g><g><title>generics_of (905,547 samples, 0.21%)</title><rect x="30.9155%" y="133" width="0.2097%" height="15" fill="rgb(216,154,8)"/><text x="31.1655%" y="143.50"></text></g><g><title>explicit_predicates_of (721,553 samples, 0.17%)</title><rect x="31.2523%" y="101" width="0.1671%" height="15" fill="rgb(244,35,45)"/><text x="31.5023%" y="111.50"></text></g><g><title>predicates_of (1,618,001 samples, 0.37%)</title><rect x="31.1852%" y="133" width="0.3747%" height="15" fill="rgb(251,115,12)"/><text x="31.4352%" y="143.50"></text></g><g><title>predicates_defined_on (1,501,409 samples, 0.35%)</title><rect x="31.2122%" y="117" width="0.3477%" height="15" fill="rgb(240,54,50)"/><text x="31.4622%" y="127.50"></text></g><g><title>inferred_outlives_of (606,776 samples, 0.14%)</title><rect x="31.4194%" y="101" width="0.1405%" height="15" fill="rgb(233,84,52)"/><text x="31.6694%" y="111.50"></text></g><g><title>inferred_outlives_crate (565,806 samples, 0.13%)</title><rect x="31.4289%" y="85" width="0.1310%" height="15" fill="rgb(207,117,47)"/><text x="31.6789%" y="95.50"></text></g><g><title>type_collecting (4,179,345 samples, 0.97%)</title><rect x="30.6919%" y="165" width="0.9680%" height="15" fill="rgb(249,43,39)"/><text x="30.9419%" y="175.50"></text></g><g><title>collect_mod_item_types (4,168,085 samples, 0.97%)</title><rect x="30.6945%" y="149" width="0.9654%" height="15" fill="rgb(209,38,44)"/><text x="30.9445%" y="159.50"></text></g><g><title>evaluate_obligation (1,306,717 samples, 0.30%)</title><rect x="32.7289%" y="133" width="0.3026%" height="15" fill="rgb(236,212,23)"/><text x="32.9789%" y="143.50"></text></g><g><title>implied_outlives_bounds (538,006 samples, 0.12%)</title><rect x="33.0416%" y="133" width="0.1246%" height="15" fill="rgb(242,79,21)"/><text x="33.2916%" y="143.50"></text></g><g><title>param_env (555,128 samples, 0.13%)</title><rect x="33.1747%" y="133" width="0.1286%" height="15" fill="rgb(211,96,35)"/><text x="33.4247%" y="143.50"></text></g><g><title>region_scope_tree (496,426 samples, 0.11%)</title><rect x="33.3174%" y="133" width="0.1150%" height="15" fill="rgb(253,215,40)"/><text x="33.5674%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,286,500 samples, 1.69%)</title><rect x="31.7455%" y="149" width="1.6876%" height="15" fill="rgb(211,81,21)"/><text x="31.9955%" y="159.50"></text></g><g><title>param_env (691,365 samples, 0.16%)</title><rect x="34.4066%" y="133" width="0.1601%" height="15" fill="rgb(208,190,38)"/><text x="34.6566%" y="143.50"></text></g><g><title>check_item_well_formed (5,276,078 samples, 1.22%)</title><rect x="33.4331%" y="149" width="1.2220%" height="15" fill="rgb(235,213,38)"/><text x="33.6831%" y="159.50"></text></g><g><title>analysis (116,574,128 samples, 27.00%)</title><rect x="7.7127%" y="197" width="26.9993%" height="15" fill="rgb(237,122,38)"/><text x="7.9627%" y="207.50">analysis</text></g><g><title>type_check_crate (74,904,442 samples, 17.35%)</title><rect x="17.3637%" y="181" width="17.3483%" height="15" fill="rgb(244,218,35)"/><text x="17.6137%" y="191.50">type_check_crate</text></g><g><title>wf_checking (13,172,051 samples, 3.05%)</title><rect x="31.6613%" y="165" width="3.0507%" height="15" fill="rgb(240,68,47)"/><text x="31.9113%" y="175.50">wf_..</text></g><g><title>layout_of (692,918 samples, 0.16%)</title><rect x="39.8459%" y="149" width="0.1605%" height="15" fill="rgb(210,16,53)"/><text x="40.0959%" y="159.50"></text></g><g><title>predicates_of (443,843 samples, 0.10%)</title><rect x="40.2008%" y="133" width="0.1028%" height="15" fill="rgb(235,124,12)"/><text x="40.4508%" y="143.50"></text></g><g><title>param_env (1,288,192 samples, 0.30%)</title><rect x="40.0064%" y="149" width="0.2984%" height="15" fill="rgb(224,169,11)"/><text x="40.2564%" y="159.50"></text></g><g><title>fn_abi_of_instance (3,483,066 samples, 0.81%)</title><rect x="39.5246%" y="165" width="0.8067%" height="15" fill="rgb(250,166,2)"/><text x="39.7746%" y="175.50"></text></g><g><title>layout_of (546,275 samples, 0.13%)</title><rect x="40.3593%" y="165" width="0.1265%" height="15" fill="rgb(242,216,29)"/><text x="40.6093%" y="175.50"></text></g><g><title>symbol_name (439,875 samples, 0.10%)</title><rect x="40.4907%" y="165" width="0.1019%" height="15" fill="rgb(230,116,27)"/><text x="40.7407%" y="175.50"></text></g><g><title>codegen_module (24,138,546 samples, 5.59%)</title><rect x="35.0163%" y="181" width="5.5906%" height="15" fill="rgb(228,99,48)"/><text x="35.2663%" y="191.50">codegen..</text></g><g><title>codegen_crate (25,549,093 samples, 5.92%)</title><rect x="34.7142%" y="197" width="5.9173%" height="15" fill="rgb(253,11,6)"/><text x="34.9642%" y="207.50">codegen_..</text></g><g><title>LLVM_module_codegen (134,768,080 samples, 31.21%)</title><rect x="40.6848%" y="181" width="31.2131%" height="15" fill="rgb(247,143,39)"/><text x="40.9348%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (127,094,628 samples, 29.44%)</title><rect x="42.4620%" y="165" width="29.4359%" height="15" fill="rgb(236,97,10)"/><text x="42.7120%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (142,078,109 samples, 32.91%)</title><rect x="40.6315%" y="197" width="32.9062%" height="15" fill="rgb(233,208,19)"/><text x="40.8815%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,079,896 samples, 1.64%)</title><rect x="71.8979%" y="181" width="1.6397%" height="15" fill="rgb(216,164,2)"/><text x="72.1479%" y="191.50"></text></g><g><title>metadata_load_macro (504,866 samples, 0.12%)</title><rect x="85.0954%" y="149" width="0.1169%" height="15" fill="rgb(220,129,5)"/><text x="85.3454%" y="159.50"></text></g><g><title>metadata_register_crate (17,545,219 samples, 4.06%)</title><rect x="85.2123%" y="149" width="4.0636%" height="15" fill="rgb(242,17,10)"/><text x="85.4623%" y="159.50">meta..</text></g><g><title>metadata_register_crate (14,075,471 samples, 3.26%)</title><rect x="86.0159%" y="133" width="3.2600%" height="15" fill="rgb(242,107,0)"/><text x="86.2659%" y="143.50">met..</text></g><g><title>macro_expand_crate (67,615,014 samples, 15.66%)</title><rect x="73.6864%" y="181" width="15.6600%" height="15" fill="rgb(251,28,31)"/><text x="73.9364%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (67,595,114 samples, 15.66%)</title><rect x="73.6911%" y="165" width="15.6554%" height="15" fill="rgb(233,223,10)"/><text x="73.9411%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (2,087,153 samples, 0.48%)</title><rect x="89.4576%" y="165" width="0.4834%" height="15" fill="rgb(215,21,27)"/><text x="89.7076%" y="175.50"></text></g><g><title>configure_and_expand (70,983,490 samples, 16.44%)</title><rect x="73.5376%" y="197" width="16.4402%" height="15" fill="rgb(232,23,21)"/><text x="73.7876%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,616,458 samples, 0.61%)</title><rect x="89.3719%" y="181" width="0.6060%" height="15" fill="rgb(244,5,23)"/><text x="89.6219%" y="191.50"></text></g><g><title>early_lint_checks (655,587 samples, 0.15%)</title><rect x="90.0445%" y="197" width="0.1518%" height="15" fill="rgb(226,81,46)"/><text x="90.2945%" y="207.50"></text></g><g><title>free_global_ctxt (6,010,715 samples, 1.39%)</title><rect x="90.1964%" y="197" width="1.3921%" height="15" fill="rgb(247,70,30)"/><text x="90.4464%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (674,249 samples, 0.16%)</title><rect x="92.8611%" y="101" width="0.1562%" height="15" fill="rgb(212,68,19)"/><text x="93.1111%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (909,989 samples, 0.21%)</title><rect x="93.0173%" y="101" width="0.2108%" height="15" fill="rgb(240,187,13)"/><text x="93.2673%" y="111.50"></text></g><g><title>optimized_mir (3,167,307 samples, 0.73%)</title><rect x="92.6279%" y="117" width="0.7336%" height="15" fill="rgb(223,113,26)"/><text x="92.8779%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (531,466 samples, 0.12%)</title><rect x="93.2383%" y="101" width="0.1231%" height="15" fill="rgb(206,192,2)"/><text x="93.4883%" y="111.50"></text></g><g><title>eval_to_const_value_raw (505,915 samples, 0.12%)</title><rect x="93.2443%" y="85" width="0.1172%" height="15" fill="rgb(241,108,4)"/><text x="93.4943%" y="95.50"></text></g><g><title>eval_to_const_value_raw (493,775 samples, 0.11%)</title><rect x="93.2471%" y="69" width="0.1144%" height="15" fill="rgb(247,173,49)"/><text x="93.4971%" y="79.50"></text></g><g><title>eval_to_allocation_raw (481,415 samples, 0.11%)</title><rect x="93.2499%" y="53" width="0.1115%" height="15" fill="rgb(224,114,35)"/><text x="93.4999%" y="63.50"></text></g><g><title>resolve_instance (1,173,929 samples, 0.27%)</title><rect x="93.3614%" y="117" width="0.2719%" height="15" fill="rgb(245,159,27)"/><text x="93.6114%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (1,329,834 samples, 0.31%)</title><rect x="93.6901%" y="117" width="0.3080%" height="15" fill="rgb(245,172,44)"/><text x="93.9401%" y="127.50"></text></g><g><title>upstream_monomorphizations (1,322,564 samples, 0.31%)</title><rect x="93.6918%" y="101" width="0.3063%" height="15" fill="rgb(236,23,11)"/><text x="93.9418%" y="111.50"></text></g><g><title>exported_symbols (1,101,282 samples, 0.26%)</title><rect x="93.7430%" y="85" width="0.2551%" height="15" fill="rgb(205,117,38)"/><text x="93.9930%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,094,332 samples, 0.25%)</title><rect x="93.7447%" y="69" width="0.2535%" height="15" fill="rgb(237,72,25)"/><text x="93.9947%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (7,714,493 samples, 1.79%)</title><rect x="92.3020%" y="133" width="1.7867%" height="15" fill="rgb(244,70,9)"/><text x="92.5520%" y="143.50">m..</text></g><g><title>monomorphization_collector (7,772,483 samples, 1.80%)</title><rect x="92.3011%" y="149" width="1.8002%" height="15" fill="rgb(217,125,39)"/><text x="92.5511%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (651,807 samples, 0.15%)</title><rect x="94.1021%" y="133" width="0.1510%" height="15" fill="rgb(235,36,10)"/><text x="94.3521%" y="143.50"></text></g><g><title>symbol_name (596,786 samples, 0.14%)</title><rect x="94.1149%" y="117" width="0.1382%" height="15" fill="rgb(251,123,47)"/><text x="94.3649%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (8,794,715 samples, 2.04%)</title><rect x="92.2927%" y="165" width="2.0369%" height="15" fill="rgb(221,13,13)"/><text x="92.5427%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (986,251 samples, 0.23%)</title><rect x="94.1012%" y="149" width="0.2284%" height="15" fill="rgb(238,131,9)"/><text x="94.3512%" y="159.50"></text></g><g><title>exported_symbols (9,004,147 samples, 2.09%)</title><rect x="92.2849%" y="181" width="2.0854%" height="15" fill="rgb(211,50,8)"/><text x="92.5349%" y="191.50">e..</text></g><g><title>layout_of (480,859 samples, 0.11%)</title><rect x="95.2382%" y="149" width="0.1114%" height="15" fill="rgb(245,182,24)"/><text x="95.4882%" y="159.50"></text></g><g><title>layout_of (1,239,254 samples, 0.29%)</title><rect x="95.0928%" y="165" width="0.2870%" height="15" fill="rgb(242,14,37)"/><text x="95.3428%" y="175.50"></text></g><g><title>is_copy_raw (664,136 samples, 0.15%)</title><rect x="96.1501%" y="133" width="0.1538%" height="15" fill="rgb(246,228,12)"/><text x="96.4001%" y="143.50"></text></g><g><title>evaluate_obligation (557,046 samples, 0.13%)</title><rect x="96.1750%" y="117" width="0.1290%" height="15" fill="rgb(213,55,15)"/><text x="96.4250%" y="127.50"></text></g><g><title>needs_drop_raw (766,057 samples, 0.18%)</title><rect x="96.1277%" y="149" width="0.1774%" height="15" fill="rgb(209,9,3)"/><text x="96.3777%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,136,412 samples, 0.96%)</title><rect x="95.3798%" y="165" width="0.9580%" height="15" fill="rgb(230,59,30)"/><text x="95.6298%" y="175.50"></text></g><g><title>specialization_graph_of (730,328 samples, 0.17%)</title><rect x="96.3609%" y="149" width="0.1691%" height="15" fill="rgb(209,121,21)"/><text x="96.6109%" y="159.50"></text></g><g><title>resolve_instance (817,778 samples, 0.19%)</title><rect x="96.3416%" y="165" width="0.1894%" height="15" fill="rgb(220,109,13)"/><text x="96.5916%" y="175.50"></text></g><g><title>optimized_mir (9,173,359 samples, 2.12%)</title><rect x="94.4085%" y="181" width="2.1246%" height="15" fill="rgb(232,18,1)"/><text x="94.6585%" y="191.50">o..</text></g><g><title>generate_crate_metadata (21,496,180 samples, 4.98%)</title><rect x="91.5885%" y="197" width="4.9786%" height="15" fill="rgb(215,41,42)"/><text x="91.8385%" y="207.50">genera..</text></g><g><title>hir_lowering (4,476,637 samples, 1.04%)</title><rect x="96.5671%" y="197" width="1.0368%" height="15" fill="rgb(224,123,36)"/><text x="96.8171%" y="207.50"></text></g><g><title>finish_ongoing_codegen (4,452,908 samples, 1.03%)</title><rect x="97.6073%" y="181" width="1.0313%" height="15" fill="rgb(240,125,3)"/><text x="97.8573%" y="191.50"></text></g><g><title>link_crate (2,004,781 samples, 0.46%)</title><rect x="98.6387%" y="181" width="0.4643%" height="15" fill="rgb(205,98,50)"/><text x="98.8887%" y="191.50"></text></g><g><title>link_binary (1,980,681 samples, 0.46%)</title><rect x="98.6442%" y="165" width="0.4587%" height="15" fill="rgb(205,185,37)"/><text x="98.8942%" y="175.50"></text></g><g><title>link_rlib (1,398,125 samples, 0.32%)</title><rect x="98.7792%" y="149" width="0.3238%" height="15" fill="rgb(238,207,15)"/><text x="99.0292%" y="159.50"></text></g><g><title>link (6,483,909 samples, 1.50%)</title><rect x="97.6040%" y="197" width="1.5017%" height="15" fill="rgb(213,199,42)"/><text x="97.8540%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,656,698 samples, 0.62%)</title><rect x="99.2554%" y="197" width="0.6153%" height="15" fill="rgb(235,201,11)"/><text x="99.5054%" y="207.50"></text></g><g><title>all (431,767,561 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (431,767,561 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (474,305 samples, 0.11%)</title><rect x="99.8901%" y="197" width="0.1099%" height="15" fill="rgb(243,32,47)"/><text x="100.1401%" y="207.50"></text></g></svg></svg>