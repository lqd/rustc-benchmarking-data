<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,425,611 samples, 6.38%)</title><rect x="0.4154%" y="245" width="6.3845%" height="15" fill="rgb(227,0,7)"/><text x="0.6654%" y="255.50">LLVM_pas..</text></g><g><title>param_env (221,073 samples, 0.15%)</title><rect x="11.2498%" y="165" width="0.1497%" height="15" fill="rgb(217,0,24)"/><text x="11.4998%" y="175.50"></text></g><g><title>codegen_fn_attrs (183,185 samples, 0.12%)</title><rect x="11.5442%" y="149" width="0.1241%" height="15" fill="rgb(221,193,54)"/><text x="11.7942%" y="159.50"></text></g><g><title>needs_drop_raw (785,427 samples, 0.53%)</title><rect x="12.5144%" y="133" width="0.5320%" height="15" fill="rgb(248,212,6)"/><text x="12.7644%" y="143.50"></text></g><g><title>is_copy_raw (554,283 samples, 0.38%)</title><rect x="12.6710%" y="117" width="0.3754%" height="15" fill="rgb(208,68,35)"/><text x="12.9210%" y="127.50"></text></g><g><title>evaluate_obligation (443,762 samples, 0.30%)</title><rect x="12.7458%" y="101" width="0.3006%" height="15" fill="rgb(232,128,0)"/><text x="12.9958%" y="111.50"></text></g><g><title>specialization_graph_of (246,692 samples, 0.17%)</title><rect x="13.2436%" y="117" width="0.1671%" height="15" fill="rgb(207,160,47)"/><text x="13.4936%" y="127.50"></text></g><g><title>resolve_instance (578,285 samples, 0.39%)</title><rect x="13.0464%" y="133" width="0.3917%" height="15" fill="rgb(228,23,34)"/><text x="13.2964%" y="143.50"></text></g><g><title>thir_body (430,548 samples, 0.29%)</title><rect x="13.4509%" y="133" width="0.2916%" height="15" fill="rgb(218,30,26)"/><text x="13.7009%" y="143.50"></text></g><g><title>mir_const (4,059,435 samples, 2.75%)</title><rect x="11.0012%" y="181" width="2.7497%" height="15" fill="rgb(220,122,19)"/><text x="11.2512%" y="191.50">mi..</text></g><g><title>unsafety_check_result (3,471,327 samples, 2.35%)</title><rect x="11.3996%" y="165" width="2.3513%" height="15" fill="rgb(250,228,42)"/><text x="11.6496%" y="175.50">u..</text></g><g><title>mir_built (3,074,699 samples, 2.08%)</title><rect x="11.6682%" y="149" width="2.0827%" height="15" fill="rgb(240,193,28)"/><text x="11.9182%" y="159.50">m..</text></g><g><title>mir_promoted (4,447,920 samples, 3.01%)</title><rect x="10.7499%" y="197" width="3.0128%" height="15" fill="rgb(216,20,37)"/><text x="10.9999%" y="207.50">mir..</text></g><g><title>type_op_ascribe_user_type (195,652 samples, 0.13%)</title><rect x="13.7627%" y="197" width="0.1325%" height="15" fill="rgb(206,188,39)"/><text x="14.0127%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (222,174 samples, 0.15%)</title><rect x="13.8953%" y="197" width="0.1505%" height="15" fill="rgb(217,207,13)"/><text x="14.1453%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,699,459 samples, 1.15%)</title><rect x="14.0951%" y="197" width="1.1511%" height="15" fill="rgb(231,73,38)"/><text x="14.3451%" y="207.50"></text></g><g><title>MIR_borrow_checking (12,266,162 samples, 8.31%)</title><rect x="6.9423%" y="229" width="8.3086%" height="15" fill="rgb(225,20,46)"/><text x="7.1923%" y="239.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (12,203,891 samples, 8.27%)</title><rect x="6.9845%" y="213" width="8.2664%" height="15" fill="rgb(210,31,41)"/><text x="7.2345%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (153,121 samples, 0.10%)</title><rect x="15.6254%" y="165" width="0.1037%" height="15" fill="rgb(221,200,47)"/><text x="15.8754%" y="175.50"></text></g><g><title>should_inherit_track_caller (236,013 samples, 0.16%)</title><rect x="15.5726%" y="181" width="0.1599%" height="15" fill="rgb(226,26,5)"/><text x="15.8226%" y="191.50"></text></g><g><title>codegen_fn_attrs (402,914 samples, 0.27%)</title><rect x="15.4751%" y="197" width="0.2729%" height="15" fill="rgb(249,33,26)"/><text x="15.7251%" y="207.50"></text></g><g><title>check_mod_attrs (556,826 samples, 0.38%)</title><rect x="15.3709%" y="213" width="0.3772%" height="15" fill="rgb(235,183,28)"/><text x="15.6209%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (303,373 samples, 0.21%)</title><rect x="15.8260%" y="213" width="0.2055%" height="15" fill="rgb(221,5,38)"/><text x="16.0760%" y="223.50"></text></g><g><title>misc_checking_1 (1,032,021 samples, 0.70%)</title><rect x="15.3575%" y="229" width="0.6990%" height="15" fill="rgb(247,18,42)"/><text x="15.6075%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (372,214 samples, 0.25%)</title><rect x="16.0578%" y="213" width="0.2521%" height="15" fill="rgb(241,131,45)"/><text x="16.3078%" y="223.50"></text></g><g><title>check_mod_liveness (314,604 samples, 0.21%)</title><rect x="16.0968%" y="197" width="0.2131%" height="15" fill="rgb(249,31,29)"/><text x="16.3468%" y="207.50"></text></g><g><title>misc_checking_2 (682,487 samples, 0.46%)</title><rect x="16.0566%" y="229" width="0.4623%" height="15" fill="rgb(225,111,53)"/><text x="16.3066%" y="239.50"></text></g><g><title>match_checking (308,563 samples, 0.21%)</title><rect x="16.3099%" y="213" width="0.2090%" height="15" fill="rgb(238,160,17)"/><text x="16.5599%" y="223.50"></text></g><g><title>check_match (288,513 samples, 0.20%)</title><rect x="16.3235%" y="197" width="0.1954%" height="15" fill="rgb(214,148,48)"/><text x="16.5735%" y="207.50"></text></g><g><title>death_checking (273,683 samples, 0.19%)</title><rect x="16.6203%" y="213" width="0.1854%" height="15" fill="rgb(232,36,49)"/><text x="16.8703%" y="223.50"></text></g><g><title>param_env (148,541 samples, 0.10%)</title><rect x="17.5282%" y="181" width="0.1006%" height="15" fill="rgb(209,103,24)"/><text x="17.7782%" y="191.50"></text></g><g><title>crate_lints (2,554,567 samples, 1.73%)</title><rect x="16.8067%" y="197" width="1.7304%" height="15" fill="rgb(229,88,8)"/><text x="17.0567%" y="207.50"></text></g><g><title>type_of (1,331,365 samples, 0.90%)</title><rect x="17.6352%" y="181" width="0.9018%" height="15" fill="rgb(213,181,19)"/><text x="17.8852%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,025,480 samples, 0.69%)</title><rect x="17.8424%" y="165" width="0.6946%" height="15" fill="rgb(254,191,54)"/><text x="18.0924%" y="175.50"></text></g><g><title>layout_of (290,772 samples, 0.20%)</title><rect x="18.8077%" y="53" width="0.1970%" height="15" fill="rgb(241,83,37)"/><text x="19.0577%" y="63.50"></text></g><g><title>layout_of (355,053 samples, 0.24%)</title><rect x="18.7864%" y="69" width="0.2405%" height="15" fill="rgb(233,36,39)"/><text x="19.0364%" y="79.50"></text></g><g><title>layout_of (421,985 samples, 0.29%)</title><rect x="18.7577%" y="85" width="0.2858%" height="15" fill="rgb(226,3,54)"/><text x="19.0077%" y="95.50"></text></g><g><title>layout_of (454,415 samples, 0.31%)</title><rect x="18.7406%" y="149" width="0.3078%" height="15" fill="rgb(245,192,40)"/><text x="18.9906%" y="159.50"></text></g><g><title>layout_of (449,075 samples, 0.30%)</title><rect x="18.7442%" y="133" width="0.3042%" height="15" fill="rgb(238,167,29)"/><text x="18.9942%" y="143.50"></text></g><g><title>layout_of (443,315 samples, 0.30%)</title><rect x="18.7481%" y="117" width="0.3003%" height="15" fill="rgb(232,182,51)"/><text x="18.9981%" y="127.50"></text></g><g><title>layout_of (438,555 samples, 0.30%)</title><rect x="18.7513%" y="101" width="0.2971%" height="15" fill="rgb(231,60,39)"/><text x="19.0013%" y="111.50"></text></g><g><title>lint_checking (3,311,916 samples, 2.24%)</title><rect x="16.8057%" y="213" width="2.2434%" height="15" fill="rgb(208,69,12)"/><text x="17.0557%" y="223.50">l..</text></g><g><title>module_lints (755,899 samples, 0.51%)</title><rect x="18.5370%" y="197" width="0.5120%" height="15" fill="rgb(235,93,37)"/><text x="18.7870%" y="207.50"></text></g><g><title>lint_mod (752,629 samples, 0.51%)</title><rect x="18.5392%" y="181" width="0.5098%" height="15" fill="rgb(213,116,39)"/><text x="18.7892%" y="191.50"></text></g><g><title>layout_of (463,755 samples, 0.31%)</title><rect x="18.7349%" y="165" width="0.3141%" height="15" fill="rgb(222,207,29)"/><text x="18.9849%" y="175.50"></text></g><g><title>privacy_access_levels (267,023 samples, 0.18%)</title><rect x="19.0490%" y="213" width="0.1809%" height="15" fill="rgb(206,96,30)"/><text x="19.2990%" y="223.50"></text></g><g><title>privacy_checking_modules (669,757 samples, 0.45%)</title><rect x="19.2299%" y="213" width="0.4537%" height="15" fill="rgb(218,138,4)"/><text x="19.4799%" y="223.50"></text></g><g><title>check_mod_privacy (667,457 samples, 0.45%)</title><rect x="19.2315%" y="197" width="0.4521%" height="15" fill="rgb(250,191,14)"/><text x="19.4815%" y="207.50"></text></g><g><title>misc_checking_3 (4,683,661 samples, 3.17%)</title><rect x="16.5189%" y="229" width="3.1725%" height="15" fill="rgb(239,60,40)"/><text x="16.7689%" y="239.50">mis..</text></g><g><title>impl_parent (2,342,029 samples, 1.59%)</title><rect x="22.5418%" y="165" width="1.5864%" height="15" fill="rgb(206,27,48)"/><text x="22.7918%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,460,753 samples, 0.99%)</title><rect x="23.1387%" y="149" width="0.9895%" height="15" fill="rgb(225,35,8)"/><text x="23.3887%" y="159.50"></text></g><g><title>impl_trait_ref (5,989,136 samples, 4.06%)</title><rect x="24.1282%" y="165" width="4.0568%" height="15" fill="rgb(250,213,24)"/><text x="24.3782%" y="175.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,110,023 samples, 3.46%)</title><rect x="24.7236%" y="149" width="3.4613%" height="15" fill="rgb(247,123,22)"/><text x="24.9736%" y="159.50">met..</text></g><g><title>trait_impls_of (848,139 samples, 0.57%)</title><rect x="28.1980%" y="165" width="0.5745%" height="15" fill="rgb(231,138,38)"/><text x="28.4480%" y="175.50"></text></g><g><title>implementations_of_trait (250,874 samples, 0.17%)</title><rect x="28.6025%" y="149" width="0.1699%" height="15" fill="rgb(231,145,46)"/><text x="28.8525%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (173,162 samples, 0.12%)</title><rect x="28.6552%" y="133" width="0.1173%" height="15" fill="rgb(251,118,11)"/><text x="28.9052%" y="143.50"></text></g><g><title>coherent_trait (13,333,983 samples, 9.03%)</title><rect x="19.7411%" y="197" width="9.0319%" height="15" fill="rgb(217,147,25)"/><text x="19.9911%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (13,313,371 samples, 9.02%)</title><rect x="19.7550%" y="181" width="9.0179%" height="15" fill="rgb(247,81,37)"/><text x="20.0050%" y="191.50">specializatio..</text></g><g><title>coherence_checking (13,420,074 samples, 9.09%)</title><rect x="19.7270%" y="213" width="9.0902%" height="15" fill="rgb(209,12,38)"/><text x="19.9770%" y="223.50">coherence_che..</text></g><g><title>associated_item (206,610 samples, 0.14%)</title><rect x="33.1928%" y="149" width="0.1399%" height="15" fill="rgb(227,1,9)"/><text x="33.4428%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (161,830 samples, 0.11%)</title><rect x="33.2231%" y="133" width="0.1096%" height="15" fill="rgb(248,47,43)"/><text x="33.4731%" y="143.50"></text></g><g><title>associated_items (314,590 samples, 0.21%)</title><rect x="33.1337%" y="165" width="0.2131%" height="15" fill="rgb(221,10,30)"/><text x="33.3837%" y="175.50"></text></g><g><title>dropck_outlives (243,192 samples, 0.16%)</title><rect x="33.3682%" y="165" width="0.1647%" height="15" fill="rgb(210,229,1)"/><text x="33.6182%" y="175.50"></text></g><g><title>evaluate_obligation (1,241,054 samples, 0.84%)</title><rect x="33.5329%" y="165" width="0.8406%" height="15" fill="rgb(222,148,37)"/><text x="33.7829%" y="175.50"></text></g><g><title>trait_impls_of (335,174 samples, 0.23%)</title><rect x="34.1465%" y="149" width="0.2270%" height="15" fill="rgb(234,67,33)"/><text x="34.3965%" y="159.50"></text></g><g><title>method_autoderef_steps (149,304 samples, 0.10%)</title><rect x="34.6112%" y="165" width="0.1011%" height="15" fill="rgb(247,98,35)"/><text x="34.8612%" y="175.50"></text></g><g><title>predicates_of (192,653 samples, 0.13%)</title><rect x="34.8190%" y="165" width="0.1305%" height="15" fill="rgb(247,138,52)"/><text x="35.0690%" y="175.50"></text></g><g><title>associated_items (195,393 samples, 0.13%)</title><rect x="37.8037%" y="149" width="0.1324%" height="15" fill="rgb(213,79,30)"/><text x="38.0537%" y="159.50"></text></g><g><title>evaluate_obligation (546,258 samples, 0.37%)</title><rect x="38.0264%" y="149" width="0.3700%" height="15" fill="rgb(246,177,23)"/><text x="38.2764%" y="159.50"></text></g><g><title>is_copy_raw (243,934 samples, 0.17%)</title><rect x="38.4857%" y="149" width="0.1652%" height="15" fill="rgb(230,62,27)"/><text x="38.7357%" y="159.50"></text></g><g><title>evaluate_obligation (193,263 samples, 0.13%)</title><rect x="38.5200%" y="133" width="0.1309%" height="15" fill="rgb(216,154,8)"/><text x="38.7700%" y="143.50"></text></g><g><title>method_autoderef_steps (237,483 samples, 0.16%)</title><rect x="38.6738%" y="149" width="0.1609%" height="15" fill="rgb(244,35,45)"/><text x="38.9238%" y="159.50"></text></g><g><title>typeck (5,819,403 samples, 3.94%)</title><rect x="34.9919%" y="165" width="3.9418%" height="15" fill="rgb(251,115,12)"/><text x="35.2419%" y="175.50">type..</text></g><g><title>item_bodies_checking (14,941,460 samples, 10.12%)</title><rect x="28.8348%" y="213" width="10.1207%" height="15" fill="rgb(240,54,50)"/><text x="29.0848%" y="223.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (14,937,480 samples, 10.12%)</title><rect x="28.8375%" y="197" width="10.1180%" height="15" fill="rgb(233,84,52)"/><text x="29.0875%" y="207.50">typeck_item_bod..</text></g><g><title>typeck (14,897,640 samples, 10.09%)</title><rect x="28.8645%" y="181" width="10.0910%" height="15" fill="rgb(207,117,47)"/><text x="29.1145%" y="191.50">typeck</text></g><g><title>mir_borrowck (429,255 samples, 0.29%)</title><rect x="41.8414%" y="133" width="0.2908%" height="15" fill="rgb(249,43,39)"/><text x="42.0914%" y="143.50"></text></g><g><title>mir_promoted (236,692 samples, 0.16%)</title><rect x="42.1321%" y="133" width="0.1603%" height="15" fill="rgb(209,38,44)"/><text x="42.3821%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (341,444 samples, 0.23%)</title><rect x="42.2925%" y="133" width="0.2313%" height="15" fill="rgb(236,212,23)"/><text x="42.5425%" y="143.50"></text></g><g><title>normalize_projection_ty (219,523 samples, 0.15%)</title><rect x="42.3750%" y="117" width="0.1487%" height="15" fill="rgb(242,79,21)"/><text x="42.6250%" y="127.50"></text></g><g><title>mir_borrowck (3,639,288 samples, 2.47%)</title><rect x="40.4980%" y="149" width="2.4651%" height="15" fill="rgb(211,96,35)"/><text x="40.7480%" y="159.50">mi..</text></g><g><title>type_op_prove_predicate (595,835 samples, 0.40%)</title><rect x="42.5595%" y="133" width="0.4036%" height="15" fill="rgb(253,215,40)"/><text x="42.8095%" y="143.50"></text></g><g><title>adt_dtorck_constraint (323,484 samples, 0.22%)</title><rect x="46.7983%" y="53" width="0.2191%" height="15" fill="rgb(211,81,21)"/><text x="47.0483%" y="63.50"></text></g><g><title>dropck_outlives (592,646 samples, 0.40%)</title><rect x="46.6904%" y="69" width="0.4014%" height="15" fill="rgb(208,190,38)"/><text x="46.9404%" y="79.50"></text></g><g><title>evaluate_obligation (489,598 samples, 0.33%)</title><rect x="47.0942%" y="69" width="0.3316%" height="15" fill="rgb(235,213,38)"/><text x="47.3442%" y="79.50"></text></g><g><title>is_copy_raw (553,947 samples, 0.38%)</title><rect x="47.5356%" y="69" width="0.3752%" height="15" fill="rgb(237,122,38)"/><text x="47.7856%" y="79.50"></text></g><g><title>evaluate_obligation (475,107 samples, 0.32%)</title><rect x="47.5890%" y="53" width="0.3218%" height="15" fill="rgb(244,218,35)"/><text x="47.8390%" y="63.50"></text></g><g><title>trait_impls_of (202,822 samples, 0.14%)</title><rect x="47.7735%" y="37" width="0.1374%" height="15" fill="rgb(240,68,47)"/><text x="48.0235%" y="47.50"></text></g><g><title>mir_built (7,544,681 samples, 5.11%)</title><rect x="43.1254%" y="101" width="5.1104%" height="15" fill="rgb(210,16,53)"/><text x="43.3754%" y="111.50">mir_bu..</text></g><g><title>typeck (7,107,586 samples, 4.81%)</title><rect x="43.4215%" y="85" width="4.8144%" height="15" fill="rgb(235,124,12)"/><text x="43.6715%" y="95.50">typeck</text></g><g><title>needs_drop_raw (193,141 samples, 0.13%)</title><rect x="48.6007%" y="69" width="0.1308%" height="15" fill="rgb(224,169,11)"/><text x="48.8507%" y="79.50"></text></g><g><title>mir_built (778,849 samples, 0.53%)</title><rect x="48.3023%" y="85" width="0.5276%" height="15" fill="rgb(250,166,2)"/><text x="48.5523%" y="95.50"></text></g><g><title>item_attrs (371,685 samples, 0.25%)</title><rect x="48.8505%" y="53" width="0.2518%" height="15" fill="rgb(242,216,29)"/><text x="49.1005%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (370,395 samples, 0.25%)</title><rect x="48.8514%" y="37" width="0.2509%" height="15" fill="rgb(230,116,27)"/><text x="49.1014%" y="47.50"></text></g><g><title>codegen_fn_attrs (382,015 samples, 0.26%)</title><rect x="48.8443%" y="69" width="0.2588%" height="15" fill="rgb(228,99,48)"/><text x="49.0943%" y="79.50"></text></g><g><title>mir_const (9,060,619 samples, 6.14%)</title><rect x="43.0287%" y="133" width="6.1373%" height="15" fill="rgb(253,11,6)"/><text x="43.2787%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,949,037 samples, 6.06%)</title><rect x="43.1043%" y="117" width="6.0617%" height="15" fill="rgb(247,143,39)"/><text x="43.3543%" y="127.50">unsafety..</text></g><g><title>unsafety_check_result (1,373,085 samples, 0.93%)</title><rect x="48.2359%" y="101" width="0.9301%" height="15" fill="rgb(236,97,10)"/><text x="48.4859%" y="111.50"></text></g><g><title>unsafety_check_result (495,435 samples, 0.34%)</title><rect x="48.8304%" y="85" width="0.3356%" height="15" fill="rgb(233,208,19)"/><text x="49.0804%" y="95.50"></text></g><g><title>mir_promoted (9,165,799 samples, 6.21%)</title><rect x="42.9631%" y="149" width="6.2085%" height="15" fill="rgb(216,164,2)"/><text x="43.2131%" y="159.50">mir_prom..</text></g><g><title>item_types_checking (15,397,555 samples, 10.43%)</title><rect x="38.9555%" y="213" width="10.4296%" height="15" fill="rgb(220,129,5)"/><text x="39.2055%" y="223.50">item_types_chec..</text></g><g><title>check_mod_item_types (15,392,895 samples, 10.43%)</title><rect x="38.9586%" y="197" width="10.4265%" height="15" fill="rgb(242,17,10)"/><text x="39.2086%" y="207.50">check_mod_item_..</text></g><g><title>type_of (14,173,173 samples, 9.60%)</title><rect x="39.7848%" y="181" width="9.6003%" height="15" fill="rgb(242,107,0)"/><text x="40.0348%" y="191.50">type_of</text></g><g><title>mir_borrowck (14,131,492 samples, 9.57%)</title><rect x="39.8131%" y="165" width="9.5721%" height="15" fill="rgb(251,28,31)"/><text x="40.0631%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (237,853 samples, 0.16%)</title><rect x="49.2240%" y="149" width="0.1611%" height="15" fill="rgb(233,223,10)"/><text x="49.4740%" y="159.50"></text></g><g><title>fn_sig (240,483 samples, 0.16%)</title><rect x="49.5211%" y="181" width="0.1629%" height="15" fill="rgb(215,21,27)"/><text x="49.7711%" y="191.50"></text></g><g><title>generics_of (222,055 samples, 0.15%)</title><rect x="49.6840%" y="181" width="0.1504%" height="15" fill="rgb(232,23,21)"/><text x="49.9340%" y="191.50"></text></g><g><title>late_bound_vars_map (274,162 samples, 0.19%)</title><rect x="50.1022%" y="133" width="0.1857%" height="15" fill="rgb(244,5,23)"/><text x="50.3522%" y="143.50"></text></g><g><title>resolve_lifetimes (264,592 samples, 0.18%)</title><rect x="50.1087%" y="117" width="0.1792%" height="15" fill="rgb(226,81,46)"/><text x="50.3587%" y="127.50"></text></g><g><title>explicit_predicates_of (607,475 samples, 0.41%)</title><rect x="49.9202%" y="149" width="0.4115%" height="15" fill="rgb(247,70,30)"/><text x="50.1702%" y="159.50"></text></g><g><title>predicates_of (961,779 samples, 0.65%)</title><rect x="49.8588%" y="181" width="0.6515%" height="15" fill="rgb(212,68,19)"/><text x="50.1088%" y="191.50"></text></g><g><title>predicates_defined_on (927,109 samples, 0.63%)</title><rect x="49.8823%" y="165" width="0.6280%" height="15" fill="rgb(240,187,13)"/><text x="50.1323%" y="175.50"></text></g><g><title>inferred_outlives_of (263,683 samples, 0.18%)</title><rect x="50.3317%" y="149" width="0.1786%" height="15" fill="rgb(223,113,26)"/><text x="50.5817%" y="159.50"></text></g><g><title>inferred_outlives_crate (250,203 samples, 0.17%)</title><rect x="50.3408%" y="133" width="0.1695%" height="15" fill="rgb(206,192,2)"/><text x="50.5908%" y="143.50"></text></g><g><title>type_collecting (1,762,139 samples, 1.19%)</title><rect x="49.3864%" y="213" width="1.1936%" height="15" fill="rgb(241,108,4)"/><text x="49.6364%" y="223.50"></text></g><g><title>collect_mod_item_types (1,753,909 samples, 1.19%)</title><rect x="49.3920%" y="197" width="1.1880%" height="15" fill="rgb(247,173,49)"/><text x="49.6420%" y="207.50"></text></g><g><title>evaluate_obligation (730,833 samples, 0.50%)</title><rect x="51.7819%" y="181" width="0.4950%" height="15" fill="rgb(224,114,35)"/><text x="52.0319%" y="191.50"></text></g><g><title>implied_outlives_bounds (251,932 samples, 0.17%)</title><rect x="52.2883%" y="181" width="0.1706%" height="15" fill="rgb(245,159,27)"/><text x="52.5383%" y="191.50"></text></g><g><title>param_env (187,800 samples, 0.13%)</title><rect x="52.4589%" y="181" width="0.1272%" height="15" fill="rgb(245,172,44)"/><text x="52.7089%" y="191.50"></text></g><g><title>region_scope_tree (189,512 samples, 0.13%)</title><rect x="52.6280%" y="181" width="0.1284%" height="15" fill="rgb(236,23,11)"/><text x="52.8780%" y="191.50"></text></g><g><title>check_impl_item_well_formed (3,082,900 samples, 2.09%)</title><rect x="50.6703%" y="197" width="2.0882%" height="15" fill="rgb(205,117,38)"/><text x="50.9203%" y="207.50">c..</text></g><g><title>adt_def (224,862 samples, 0.15%)</title><rect x="53.5888%" y="133" width="0.1523%" height="15" fill="rgb(237,72,25)"/><text x="53.8388%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (224,212 samples, 0.15%)</title><rect x="53.5892%" y="117" width="0.1519%" height="15" fill="rgb(244,70,9)"/><text x="53.8392%" y="127.50"></text></g><g><title>adt_sized_constraint (384,945 samples, 0.26%)</title><rect x="53.7411%" y="133" width="0.2607%" height="15" fill="rgb(217,125,39)"/><text x="53.9911%" y="143.50"></text></g><g><title>adt_sized_constraint (619,067 samples, 0.42%)</title><rect x="53.5857%" y="149" width="0.4193%" height="15" fill="rgb(235,36,10)"/><text x="53.8357%" y="159.50"></text></g><g><title>adt_sized_constraint (642,837 samples, 0.44%)</title><rect x="53.5718%" y="165" width="0.4354%" height="15" fill="rgb(251,123,47)"/><text x="53.8218%" y="175.50"></text></g><g><title>adt_sized_constraint (669,698 samples, 0.45%)</title><rect x="53.5548%" y="181" width="0.4536%" height="15" fill="rgb(221,13,13)"/><text x="53.8048%" y="191.50"></text></g><g><title>evaluate_obligation (150,543 samples, 0.10%)</title><rect x="54.0084%" y="181" width="0.1020%" height="15" fill="rgb(238,131,9)"/><text x="54.2584%" y="191.50"></text></g><g><title>param_env (254,594 samples, 0.17%)</title><rect x="54.2055%" y="181" width="0.1725%" height="15" fill="rgb(211,50,8)"/><text x="54.4555%" y="191.50"></text></g><g><title>analysis (70,542,268 samples, 47.78%)</title><rect x="6.7999%" y="245" width="47.7823%" height="15" fill="rgb(245,182,24)"/><text x="7.0499%" y="255.50">analysis</text></g><g><title>type_check_crate (51,510,263 samples, 34.89%)</title><rect x="19.6914%" y="229" width="34.8909%" height="15" fill="rgb(242,14,37)"/><text x="19.9414%" y="239.50">type_check_crate</text></g><g><title>wf_checking (5,905,744 samples, 4.00%)</title><rect x="50.5819%" y="213" width="4.0003%" height="15" fill="rgb(246,228,12)"/><text x="50.8319%" y="223.50">wf_c..</text></g><g><title>check_item_well_formed (2,692,360 samples, 1.82%)</title><rect x="52.7586%" y="197" width="1.8237%" height="15" fill="rgb(213,55,15)"/><text x="53.0086%" y="207.50">c..</text></g><g><title>codegen_module (1,361,434 samples, 0.92%)</title><rect x="54.9364%" y="229" width="0.9222%" height="15" fill="rgb(209,9,3)"/><text x="55.1864%" y="239.50"></text></g><g><title>codegen_crate (1,988,691 samples, 1.35%)</title><rect x="54.5913%" y="245" width="1.3471%" height="15" fill="rgb(230,59,30)"/><text x="54.8413%" y="255.50"></text></g><g><title>LLVM_module_codegen (8,729,224 samples, 5.91%)</title><rect x="55.9500%" y="229" width="5.9128%" height="15" fill="rgb(209,121,21)"/><text x="56.2000%" y="239.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (8,513,521 samples, 5.77%)</title><rect x="56.0961%" y="213" width="5.7667%" height="15" fill="rgb(220,109,13)"/><text x="56.3461%" y="223.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (9,204,579 samples, 6.23%)</title><rect x="55.9384%" y="245" width="6.2348%" height="15" fill="rgb(232,18,1)"/><text x="56.1884%" y="255.50">codegen_..</text></g><g><title>LLVM_module_optimize (458,235 samples, 0.31%)</title><rect x="61.8628%" y="229" width="0.3104%" height="15" fill="rgb(215,41,42)"/><text x="62.1128%" y="239.50"></text></g><g><title>AST_validation (157,801 samples, 0.11%)</title><rect x="62.3432%" y="229" width="0.1069%" height="15" fill="rgb(224,123,36)"/><text x="62.5932%" y="239.50"></text></g><g><title>macro_expand_crate (26,932,039 samples, 18.24%)</title><rect x="62.5391%" y="229" width="18.2426%" height="15" fill="rgb(240,125,3)"/><text x="62.7891%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (26,905,948 samples, 18.22%)</title><rect x="62.5567%" y="213" width="18.2249%" height="15" fill="rgb(205,98,50)"/><text x="62.8067%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (12,920,489 samples, 8.75%)</title><rect x="72.0299%" y="197" width="8.7518%" height="15" fill="rgb(205,185,37)"/><text x="72.2799%" y="207.50">metadata_reg..</text></g><g><title>metadata_register_crate (9,736,256 samples, 6.59%)</title><rect x="74.1868%" y="181" width="6.5949%" height="15" fill="rgb(238,207,15)"/><text x="74.4368%" y="191.50">metadata_..</text></g><g><title>metadata_register_crate (329,783 samples, 0.22%)</title><rect x="80.5583%" y="165" width="0.2234%" height="15" fill="rgb(213,199,42)"/><text x="80.8083%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (260,302 samples, 0.18%)</title><rect x="80.7849%" y="229" width="0.1763%" height="15" fill="rgb(235,201,11)"/><text x="81.0349%" y="239.50"></text></g><g><title>late_resolve_crate (1,214,233 samples, 0.82%)</title><rect x="81.0657%" y="213" width="0.8225%" height="15" fill="rgb(207,46,11)"/><text x="81.3157%" y="223.50"></text></g><g><title>configure_and_expand (29,179,733 samples, 19.77%)</title><rect x="62.1732%" y="245" width="19.7651%" height="15" fill="rgb(241,35,35)"/><text x="62.4232%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,442,446 samples, 0.98%)</title><rect x="80.9612%" y="229" width="0.9771%" height="15" fill="rgb(243,32,47)"/><text x="81.2112%" y="239.50"></text></g><g><title>early_lint_checks (189,102 samples, 0.13%)</title><rect x="82.0288%" y="245" width="0.1281%" height="15" fill="rgb(247,202,23)"/><text x="82.2788%" y="255.50"></text></g><g><title>free_global_ctxt (3,796,341 samples, 2.57%)</title><rect x="82.1569%" y="245" width="2.5715%" height="15" fill="rgb(219,102,11)"/><text x="82.4069%" y="255.50">fr..</text></g><g><title>optimized_mir (243,393 samples, 0.16%)</title><rect x="85.7176%" y="165" width="0.1649%" height="15" fill="rgb(243,110,44)"/><text x="85.9676%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (332,894 samples, 0.23%)</title><rect x="85.6594%" y="181" width="0.2255%" height="15" fill="rgb(222,74,54)"/><text x="85.9094%" y="191.50"></text></g><g><title>monomorphization_collector (357,554 samples, 0.24%)</title><rect x="85.6575%" y="197" width="0.2422%" height="15" fill="rgb(216,99,12)"/><text x="85.9075%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (503,575 samples, 0.34%)</title><rect x="85.6405%" y="213" width="0.3411%" height="15" fill="rgb(226,22,26)"/><text x="85.8905%" y="223.50"></text></g><g><title>exported_symbols (617,106 samples, 0.42%)</title><rect x="85.6279%" y="229" width="0.4180%" height="15" fill="rgb(217,163,10)"/><text x="85.8779%" y="239.50"></text></g><g><title>layout_of (252,193 samples, 0.17%)</title><rect x="88.0888%" y="197" width="0.1708%" height="15" fill="rgb(213,25,53)"/><text x="88.3388%" y="207.50"></text></g><g><title>layout_of (688,448 samples, 0.47%)</title><rect x="87.8332%" y="213" width="0.4663%" height="15" fill="rgb(252,105,26)"/><text x="88.0832%" y="223.50"></text></g><g><title>needs_drop_raw (694,178 samples, 0.47%)</title><rect x="90.3138%" y="197" width="0.4702%" height="15" fill="rgb(220,39,43)"/><text x="90.5638%" y="207.50"></text></g><g><title>is_copy_raw (581,168 samples, 0.39%)</title><rect x="90.3903%" y="181" width="0.3937%" height="15" fill="rgb(229,68,48)"/><text x="90.6403%" y="191.50"></text></g><g><title>evaluate_obligation (481,936 samples, 0.33%)</title><rect x="90.4576%" y="165" width="0.3264%" height="15" fill="rgb(252,8,32)"/><text x="90.7076%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,702,954 samples, 2.51%)</title><rect x="88.2995%" y="213" width="2.5082%" height="15" fill="rgb(223,20,43)"/><text x="88.5495%" y="223.50">mi..</text></g><g><title>optimized_mir (6,967,743 samples, 4.72%)</title><rect x="86.1204%" y="229" width="4.7197%" height="15" fill="rgb(229,81,49)"/><text x="86.3704%" y="239.50">optim..</text></g><g><title>generate_crate_metadata (9,087,358 samples, 6.16%)</title><rect x="84.7283%" y="245" width="6.1554%" height="15" fill="rgb(236,28,36)"/><text x="84.9783%" y="255.50">generate..</text></g><g><title>hir_lowering (1,670,288 samples, 1.13%)</title><rect x="90.8837%" y="245" width="1.1314%" height="15" fill="rgb(249,185,26)"/><text x="91.1337%" y="255.50"></text></g><g><title>finish_ongoing_codegen (4,982,903 samples, 3.38%)</title><rect x="92.0276%" y="229" width="3.3752%" height="15" fill="rgb(249,174,33)"/><text x="92.2776%" y="239.50">fin..</text></g><g><title>link_crate (1,328,734 samples, 0.90%)</title><rect x="95.4028%" y="229" width="0.9000%" height="15" fill="rgb(233,201,37)"/><text x="95.6528%" y="239.50"></text></g><g><title>link_binary (1,306,804 samples, 0.89%)</title><rect x="95.4177%" y="213" width="0.8852%" height="15" fill="rgb(221,78,26)"/><text x="95.6677%" y="223.50"></text></g><g><title>link_rlib (885,249 samples, 0.60%)</title><rect x="95.7032%" y="197" width="0.5996%" height="15" fill="rgb(250,127,30)"/><text x="95.9532%" y="207.50"></text></g><g><title>link (6,344,738 samples, 4.30%)</title><rect x="92.0151%" y="245" width="4.2977%" height="15" fill="rgb(230,49,44)"/><text x="92.2651%" y="255.50">link</text></g><g><title>parse_crate (3,940,673 samples, 2.67%)</title><rect x="96.3128%" y="245" width="2.6692%" height="15" fill="rgb(229,67,23)"/><text x="96.5628%" y="255.50">pa..</text></g><g><title>prepare_outputs (205,432 samples, 0.14%)</title><rect x="98.9885%" y="245" width="0.1392%" height="15" fill="rgb(249,83,47)"/><text x="99.2385%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (829,729 samples, 0.56%)</title><rect x="99.1276%" y="245" width="0.5620%" height="15" fill="rgb(215,43,3)"/><text x="99.3776%" y="255.50"></text></g><g><title>all (147,632,575 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (147,632,575 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (351,844 samples, 0.24%)</title><rect x="99.7617%" y="245" width="0.2383%" height="15" fill="rgb(233,0,4)"/><text x="100.0117%" y="255.50"></text></g></svg></svg>