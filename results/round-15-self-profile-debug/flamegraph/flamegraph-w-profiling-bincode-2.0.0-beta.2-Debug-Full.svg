<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (59,342,965 samples, 6.03%)</title><rect x="0.1129%" y="181" width="6.0273%" height="15" fill="rgb(227,0,7)"/><text x="0.3629%" y="191.50">LLVM_pas..</text></g><g><title>param_env (1,569,378 samples, 0.16%)</title><rect x="15.5591%" y="101" width="0.1594%" height="15" fill="rgb(217,0,24)"/><text x="15.8091%" y="111.50"></text></g><g><title>item_attrs (1,482,070 samples, 0.15%)</title><rect x="16.0934%" y="69" width="0.1505%" height="15" fill="rgb(221,193,54)"/><text x="16.3434%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,431,569 samples, 0.15%)</title><rect x="16.0985%" y="53" width="0.1454%" height="15" fill="rgb(248,212,6)"/><text x="16.3485%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,133,997 samples, 0.22%)</title><rect x="16.0378%" y="85" width="0.2167%" height="15" fill="rgb(208,68,35)"/><text x="16.2878%" y="95.50"></text></g><g><title>is_copy_raw (1,142,760 samples, 0.12%)</title><rect x="18.2662%" y="69" width="0.1161%" height="15" fill="rgb(232,128,0)"/><text x="18.5162%" y="79.50"></text></g><g><title>adt_drop_tys (1,024,320 samples, 0.10%)</title><rect x="18.5021%" y="53" width="0.1040%" height="15" fill="rgb(207,160,47)"/><text x="18.7521%" y="63.50"></text></g><g><title>needs_drop_raw (10,368,578 samples, 1.05%)</title><rect x="18.3823%" y="69" width="1.0531%" height="15" fill="rgb(228,23,34)"/><text x="18.6323%" y="79.50"></text></g><g><title>is_copy_raw (8,164,670 samples, 0.83%)</title><rect x="18.6061%" y="53" width="0.8293%" height="15" fill="rgb(218,30,26)"/><text x="18.8561%" y="63.50"></text></g><g><title>evaluate_obligation (6,993,754 samples, 0.71%)</title><rect x="18.7251%" y="37" width="0.7103%" height="15" fill="rgb(220,122,19)"/><text x="18.9751%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (2,089,225 samples, 0.21%)</title><rect x="19.5702%" y="53" width="0.2122%" height="15" fill="rgb(250,228,42)"/><text x="19.8202%" y="63.50"></text></g><g><title>resolve_instance (4,227,866 samples, 0.43%)</title><rect x="19.4355%" y="69" width="0.4294%" height="15" fill="rgb(240,193,28)"/><text x="19.6855%" y="79.50"></text></g><g><title>thir_body (7,469,451 samples, 0.76%)</title><rect x="19.8779%" y="69" width="0.7586%" height="15" fill="rgb(216,20,37)"/><text x="20.1279%" y="79.50"></text></g><g><title>mir_const (55,693,690 samples, 5.66%)</title><rect x="14.9903%" y="117" width="5.6566%" height="15" fill="rgb(206,188,39)"/><text x="15.2403%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (48,524,677 samples, 4.93%)</title><rect x="15.7185%" y="101" width="4.9285%" height="15" fill="rgb(217,207,13)"/><text x="15.9685%" y="111.50">unsafe..</text></g><g><title>mir_built (43,247,070 samples, 4.39%)</title><rect x="16.2545%" y="85" width="4.3925%" height="15" fill="rgb(231,73,38)"/><text x="16.5045%" y="95.50">mir_b..</text></g><g><title>mir_const (1,859,150 samples, 0.19%)</title><rect x="20.7649%" y="101" width="0.1888%" height="15" fill="rgb(225,20,46)"/><text x="21.0149%" y="111.50"></text></g><g><title>unsafety_check_result (1,398,207 samples, 0.14%)</title><rect x="20.8117%" y="85" width="0.1420%" height="15" fill="rgb(210,31,41)"/><text x="21.0617%" y="95.50"></text></g><g><title>mir_built (1,221,223 samples, 0.12%)</title><rect x="20.8297%" y="69" width="0.1240%" height="15" fill="rgb(221,200,47)"/><text x="21.0797%" y="79.50"></text></g><g><title>mir_const_qualif (3,420,308 samples, 0.35%)</title><rect x="20.6470%" y="117" width="0.3474%" height="15" fill="rgb(226,26,5)"/><text x="20.8970%" y="127.50"></text></g><g><title>mir_promoted (64,920,034 samples, 6.59%)</title><rect x="14.4008%" y="133" width="6.5937%" height="15" fill="rgb(249,33,26)"/><text x="14.6508%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (4,254,373 samples, 0.43%)</title><rect x="20.9959%" y="133" width="0.4321%" height="15" fill="rgb(235,183,28)"/><text x="21.2459%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,361,213 samples, 0.44%)</title><rect x="21.4280%" y="133" width="0.4430%" height="15" fill="rgb(221,5,38)"/><text x="21.6780%" y="143.50"></text></g><g><title>normalize_projection_ty (2,710,649 samples, 0.28%)</title><rect x="21.5956%" y="117" width="0.2753%" height="15" fill="rgb(247,18,42)"/><text x="21.8456%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,587,304 samples, 0.26%)</title><rect x="21.8709%" y="133" width="0.2628%" height="15" fill="rgb(241,131,45)"/><text x="22.1209%" y="143.50"></text></g><g><title>normalize_projection_ty (1,876,410 samples, 0.19%)</title><rect x="21.9431%" y="117" width="0.1906%" height="15" fill="rgb(249,31,29)"/><text x="22.1931%" y="127.50"></text></g><g><title>type_op_prove_predicate (13,393,760 samples, 1.36%)</title><rect x="22.1865%" y="133" width="1.3604%" height="15" fill="rgb(225,111,53)"/><text x="22.4365%" y="143.50"></text></g><g><title>MIR_borrow_checking (169,955,244 samples, 17.26%)</title><rect x="6.2869%" y="165" width="17.2618%" height="15" fill="rgb(238,160,17)"/><text x="6.5369%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (169,207,648 samples, 17.19%)</title><rect x="6.3628%" y="149" width="17.1858%" height="15" fill="rgb(214,148,48)"/><text x="6.6128%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,309,623 samples, 0.13%)</title><rect x="23.5487%" y="165" width="0.1330%" height="15" fill="rgb(232,36,49)"/><text x="23.7987%" y="175.50"></text></g><g><title>hir_module_items (1,116,688 samples, 0.11%)</title><rect x="23.6817%" y="165" width="0.1134%" height="15" fill="rgb(209,103,24)"/><text x="23.9317%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,015,818 samples, 0.10%)</title><rect x="23.9398%" y="133" width="0.1032%" height="15" fill="rgb(229,88,8)"/><text x="24.1898%" y="143.50"></text></g><g><title>check_mod_attrs (2,368,143 samples, 0.24%)</title><rect x="23.8024%" y="149" width="0.2405%" height="15" fill="rgb(213,181,19)"/><text x="24.0524%" y="159.50"></text></g><g><title>lint_levels (1,330,954 samples, 0.14%)</title><rect x="24.2222%" y="133" width="0.1352%" height="15" fill="rgb(254,191,54)"/><text x="24.4722%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,959,030 samples, 0.30%)</title><rect x="24.1439%" y="149" width="0.3005%" height="15" fill="rgb(241,83,37)"/><text x="24.3939%" y="159.50"></text></g><g><title>misc_checking_1 (6,628,556 samples, 0.67%)</title><rect x="23.7952%" y="165" width="0.6732%" height="15" fill="rgb(233,36,39)"/><text x="24.0452%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,301,613 samples, 0.34%)</title><rect x="24.4689%" y="149" width="0.3353%" height="15" fill="rgb(226,3,54)"/><text x="24.7189%" y="159.50"></text></g><g><title>check_mod_liveness (2,771,348 samples, 0.28%)</title><rect x="24.5227%" y="133" width="0.2815%" height="15" fill="rgb(245,192,40)"/><text x="24.7727%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,104,011 samples, 0.11%)</title><rect x="25.2293%" y="117" width="0.1121%" height="15" fill="rgb(238,167,29)"/><text x="25.4793%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,098,731 samples, 0.11%)</title><rect x="25.2299%" y="101" width="0.1116%" height="15" fill="rgb(232,182,51)"/><text x="25.4799%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,086,541 samples, 0.11%)</title><rect x="25.2311%" y="85" width="0.1104%" height="15" fill="rgb(231,60,39)"/><text x="25.4811%" y="95.50"></text></g><g><title>misc_checking_2 (9,048,080 samples, 0.92%)</title><rect x="24.4684%" y="165" width="0.9190%" height="15" fill="rgb(208,69,12)"/><text x="24.7184%" y="175.50"></text></g><g><title>match_checking (5,742,197 samples, 0.58%)</title><rect x="24.8042%" y="149" width="0.5832%" height="15" fill="rgb(235,93,37)"/><text x="25.0542%" y="159.50"></text></g><g><title>check_match (5,537,974 samples, 0.56%)</title><rect x="24.8249%" y="133" width="0.5625%" height="15" fill="rgb(213,116,39)"/><text x="25.0749%" y="143.50"></text></g><g><title>check_private_in_public (1,172,602 samples, 0.12%)</title><rect x="25.3887%" y="149" width="0.1191%" height="15" fill="rgb(222,207,29)"/><text x="25.6387%" y="159.50"></text></g><g><title>death_checking (2,342,553 samples, 0.24%)</title><rect x="25.5078%" y="149" width="0.2379%" height="15" fill="rgb(206,96,30)"/><text x="25.7578%" y="159.50"></text></g><g><title>param_env (1,683,508 samples, 0.17%)</title><rect x="26.0444%" y="117" width="0.1710%" height="15" fill="rgb(218,138,4)"/><text x="26.2944%" y="127.50"></text></g><g><title>crate_lints (5,866,699 samples, 0.60%)</title><rect x="25.7460%" y="133" width="0.5959%" height="15" fill="rgb(250,191,14)"/><text x="25.9960%" y="143.50"></text></g><g><title>type_of (1,197,612 samples, 0.12%)</title><rect x="26.2202%" y="117" width="0.1216%" height="15" fill="rgb(239,60,40)"/><text x="26.4702%" y="127.50"></text></g><g><title>lint_checking (9,359,894 samples, 0.95%)</title><rect x="25.7457%" y="149" width="0.9507%" height="15" fill="rgb(206,27,48)"/><text x="25.9957%" y="159.50"></text></g><g><title>module_lints (3,490,604 samples, 0.35%)</title><rect x="26.3418%" y="133" width="0.3545%" height="15" fill="rgb(225,35,8)"/><text x="26.5918%" y="143.50"></text></g><g><title>lint_mod (3,470,874 samples, 0.35%)</title><rect x="26.3438%" y="117" width="0.3525%" height="15" fill="rgb(250,213,24)"/><text x="26.5938%" y="127.50"></text></g><g><title>privacy_access_levels (2,246,003 samples, 0.23%)</title><rect x="26.6964%" y="149" width="0.2281%" height="15" fill="rgb(247,123,22)"/><text x="26.9464%" y="159.50"></text></g><g><title>privacy_checking_modules (5,728,188 samples, 0.58%)</title><rect x="26.9245%" y="149" width="0.5818%" height="15" fill="rgb(231,138,38)"/><text x="27.1745%" y="159.50"></text></g><g><title>check_mod_privacy (5,709,658 samples, 0.58%)</title><rect x="26.9264%" y="133" width="0.5799%" height="15" fill="rgb(231,145,46)"/><text x="27.1764%" y="143.50"></text></g><g><title>misc_checking_3 (20,922,851 samples, 2.13%)</title><rect x="25.3874%" y="165" width="2.1251%" height="15" fill="rgb(251,118,11)"/><text x="25.6374%" y="175.50">m..</text></g><g><title>impl_parent (2,358,709 samples, 0.24%)</title><rect x="28.0705%" y="101" width="0.2396%" height="15" fill="rgb(217,147,25)"/><text x="28.3205%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,338,511 samples, 0.14%)</title><rect x="28.1741%" y="85" width="0.1359%" height="15" fill="rgb(247,81,37)"/><text x="28.4241%" y="95.50"></text></g><g><title>impl_trait_ref (4,982,353 samples, 0.51%)</title><rect x="28.3101%" y="101" width="0.5060%" height="15" fill="rgb(209,12,38)"/><text x="28.5601%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,810,542 samples, 0.39%)</title><rect x="28.4292%" y="85" width="0.3870%" height="15" fill="rgb(227,1,9)"/><text x="28.6792%" y="95.50"></text></g><g><title>coherent_trait (13,191,524 samples, 1.34%)</title><rect x="27.5587%" y="133" width="1.3398%" height="15" fill="rgb(248,47,43)"/><text x="27.8087%" y="143.50"></text></g><g><title>specialization_graph_of (12,621,548 samples, 1.28%)</title><rect x="27.6166%" y="117" width="1.2819%" height="15" fill="rgb(221,10,30)"/><text x="27.8666%" y="127.50"></text></g><g><title>coherence_checking (13,429,955 samples, 1.36%)</title><rect x="27.5558%" y="149" width="1.3640%" height="15" fill="rgb(210,229,1)"/><text x="27.8058%" y="159.50"></text></g><g><title>associated_item (2,581,444 samples, 0.26%)</title><rect x="45.4242%" y="85" width="0.2622%" height="15" fill="rgb(222,148,37)"/><text x="45.6742%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (2,056,801 samples, 0.21%)</title><rect x="45.4775%" y="69" width="0.2089%" height="15" fill="rgb(234,67,33)"/><text x="45.7275%" y="79.50"></text></g><g><title>associated_items (3,673,431 samples, 0.37%)</title><rect x="45.3277%" y="101" width="0.3731%" height="15" fill="rgb(247,98,35)"/><text x="45.5777%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,036,697 samples, 0.11%)</title><rect x="45.9228%" y="85" width="0.1053%" height="15" fill="rgb(247,138,52)"/><text x="46.1728%" y="95.50"></text></g><g><title>dropck_outlives (2,912,259 samples, 0.30%)</title><rect x="45.7330%" y="101" width="0.2958%" height="15" fill="rgb(213,79,30)"/><text x="45.9830%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,347,361 samples, 0.14%)</title><rect x="46.0290%" y="101" width="0.1368%" height="15" fill="rgb(246,177,23)"/><text x="46.2790%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,293,981 samples, 0.13%)</title><rect x="46.0345%" y="85" width="0.1314%" height="15" fill="rgb(230,62,27)"/><text x="46.2845%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,215,351 samples, 0.12%)</title><rect x="46.0424%" y="69" width="0.1234%" height="15" fill="rgb(216,154,8)"/><text x="46.2924%" y="79.50"></text></g><g><title>evaluate_obligation (13,433,163 samples, 1.36%)</title><rect x="46.1659%" y="101" width="1.3644%" height="15" fill="rgb(244,35,45)"/><text x="46.4159%" y="111.50"></text></g><g><title>item_attrs (1,013,259 samples, 0.10%)</title><rect x="47.7076%" y="101" width="0.1029%" height="15" fill="rgb(251,115,12)"/><text x="47.9576%" y="111.50"></text></g><g><title>evaluate_obligation (1,230,301 samples, 0.12%)</title><rect x="47.9785%" y="85" width="0.1250%" height="15" fill="rgb(240,54,50)"/><text x="48.2285%" y="95.50"></text></g><g><title>method_autoderef_steps (2,562,355 samples, 0.26%)</title><rect x="47.8475%" y="101" width="0.2602%" height="15" fill="rgb(233,84,52)"/><text x="48.0975%" y="111.50"></text></g><g><title>opt_const_param_of (1,403,474 samples, 0.14%)</title><rect x="48.1232%" y="101" width="0.1425%" height="15" fill="rgb(207,117,47)"/><text x="48.3732%" y="111.50"></text></g><g><title>typeck (1,325,884 samples, 0.13%)</title><rect x="48.1311%" y="85" width="0.1347%" height="15" fill="rgb(249,43,39)"/><text x="48.3811%" y="95.50"></text></g><g><title>predicates_of (1,402,107 samples, 0.14%)</title><rect x="48.3586%" y="101" width="0.1424%" height="15" fill="rgb(209,38,44)"/><text x="48.6086%" y="111.50"></text></g><g><title>evaluate_obligation (1,506,120 samples, 0.15%)</title><rect x="49.7826%" y="85" width="0.1530%" height="15" fill="rgb(236,212,23)"/><text x="50.0326%" y="95.50"></text></g><g><title>typeck (14,968,729 samples, 1.52%)</title><rect x="48.5663%" y="101" width="1.5203%" height="15" fill="rgb(242,79,21)"/><text x="48.8163%" y="111.50"></text></g><g><title>item_bodies_checking (208,762,143 samples, 21.20%)</title><rect x="28.9382%" y="149" width="21.2033%" height="15" fill="rgb(211,96,35)"/><text x="29.1882%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (208,757,853 samples, 21.20%)</title><rect x="28.9386%" y="133" width="21.2028%" height="15" fill="rgb(253,215,40)"/><text x="29.1886%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (208,224,625 samples, 21.15%)</title><rect x="28.9928%" y="117" width="21.1487%" height="15" fill="rgb(211,81,21)"/><text x="29.2428%" y="127.50">typeck</text></g><g><title>item_types_checking (7,621,287 samples, 0.77%)</title><rect x="50.1414%" y="149" width="0.7741%" height="15" fill="rgb(208,190,38)"/><text x="50.3914%" y="159.50"></text></g><g><title>check_mod_item_types (7,597,037 samples, 0.77%)</title><rect x="50.1439%" y="133" width="0.7716%" height="15" fill="rgb(235,213,38)"/><text x="50.3939%" y="143.50"></text></g><g><title>fn_sig (1,211,094 samples, 0.12%)</title><rect x="51.0650%" y="117" width="0.1230%" height="15" fill="rgb(237,122,38)"/><text x="51.3150%" y="127.50"></text></g><g><title>named_region_map (1,425,620 samples, 0.14%)</title><rect x="51.3188%" y="101" width="0.1448%" height="15" fill="rgb(244,218,35)"/><text x="51.5688%" y="111.50"></text></g><g><title>resolve_lifetimes (1,295,760 samples, 0.13%)</title><rect x="51.3320%" y="85" width="0.1316%" height="15" fill="rgb(240,68,47)"/><text x="51.5820%" y="95.50"></text></g><g><title>generics_of (2,781,518 samples, 0.28%)</title><rect x="51.1880%" y="117" width="0.2825%" height="15" fill="rgb(210,16,53)"/><text x="51.4380%" y="127.50"></text></g><g><title>explicit_predicates_of (2,099,105 samples, 0.21%)</title><rect x="51.5775%" y="85" width="0.2132%" height="15" fill="rgb(235,124,12)"/><text x="51.8275%" y="95.50"></text></g><g><title>predicates_of (3,404,197 samples, 0.35%)</title><rect x="51.5049%" y="117" width="0.3458%" height="15" fill="rgb(224,169,11)"/><text x="51.7549%" y="127.50"></text></g><g><title>predicates_defined_on (3,126,366 samples, 0.32%)</title><rect x="51.5331%" y="101" width="0.3175%" height="15" fill="rgb(250,166,2)"/><text x="51.7831%" y="111.50"></text></g><g><title>type_collecting (10,070,731 samples, 1.02%)</title><rect x="50.9172%" y="149" width="1.0228%" height="15" fill="rgb(242,216,29)"/><text x="51.1672%" y="159.50"></text></g><g><title>collect_mod_item_types (10,041,001 samples, 1.02%)</title><rect x="50.9203%" y="133" width="1.0198%" height="15" fill="rgb(230,116,27)"/><text x="51.1703%" y="143.50"></text></g><g><title>evaluate_obligation (3,333,417 samples, 0.34%)</title><rect x="53.4203%" y="117" width="0.3386%" height="15" fill="rgb(228,99,48)"/><text x="53.6703%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,950,476 samples, 0.20%)</title><rect x="53.7614%" y="117" width="0.1981%" height="15" fill="rgb(253,11,6)"/><text x="54.0114%" y="127.50"></text></g><g><title>param_env (2,009,260 samples, 0.20%)</title><rect x="53.9595%" y="117" width="0.2041%" height="15" fill="rgb(247,143,39)"/><text x="54.2095%" y="127.50"></text></g><g><title>check_impl_item_well_formed (22,658,890 samples, 2.30%)</title><rect x="52.0799%" y="133" width="2.3014%" height="15" fill="rgb(236,97,10)"/><text x="52.3299%" y="143.50">c..</text></g><g><title>region_scope_tree (2,124,160 samples, 0.22%)</title><rect x="54.1655%" y="117" width="0.2157%" height="15" fill="rgb(233,208,19)"/><text x="54.4155%" y="127.50"></text></g><g><title>evaluate_obligation (3,108,093 samples, 0.32%)</title><rect x="55.7937%" y="117" width="0.3157%" height="15" fill="rgb(216,164,2)"/><text x="56.0437%" y="127.50"></text></g><g><title>param_env (2,131,611 samples, 0.22%)</title><rect x="56.2023%" y="117" width="0.2165%" height="15" fill="rgb(220,129,5)"/><text x="56.4523%" y="127.50"></text></g><g><title>check_item_well_formed (21,690,235 samples, 2.20%)</title><rect x="54.3813%" y="133" width="2.2030%" height="15" fill="rgb(242,17,10)"/><text x="54.6313%" y="143.50">c..</text></g><g><title>analysis (498,505,729 samples, 50.63%)</title><rect x="6.1401%" y="181" width="50.6315%" height="15" fill="rgb(242,107,0)"/><text x="6.3901%" y="191.50">analysis</text></g><g><title>type_check_crate (288,078,509 samples, 29.26%)</title><rect x="27.5125%" y="165" width="29.2591%" height="15" fill="rgb(251,28,31)"/><text x="27.7625%" y="175.50">type_check_crate</text></g><g><title>wf_checking (47,533,586 samples, 4.83%)</title><rect x="51.9438%" y="149" width="4.8278%" height="15" fill="rgb(233,223,10)"/><text x="52.1938%" y="159.50">wf_che..</text></g><g><title>check_trait_item_well_formed (1,844,680 samples, 0.19%)</title><rect x="56.5843%" y="133" width="0.1874%" height="15" fill="rgb(215,21,27)"/><text x="56.8343%" y="143.50"></text></g><g><title>layout_of (1,052,510 samples, 0.11%)</title><rect x="61.7585%" y="133" width="0.1069%" height="15" fill="rgb(232,23,21)"/><text x="62.0085%" y="143.50"></text></g><g><title>predicates_of (1,008,323 samples, 0.10%)</title><rect x="62.0759%" y="117" width="0.1024%" height="15" fill="rgb(244,5,23)"/><text x="62.3259%" y="127.50"></text></g><g><title>param_env (3,082,313 samples, 0.31%)</title><rect x="61.8654%" y="133" width="0.3131%" height="15" fill="rgb(226,81,46)"/><text x="62.1154%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,902,200 samples, 0.80%)</title><rect x="61.4473%" y="149" width="0.8026%" height="15" fill="rgb(247,70,30)"/><text x="61.6973%" y="159.50"></text></g><g><title>layout_of (1,172,490 samples, 0.12%)</title><rect x="62.2837%" y="149" width="0.1191%" height="15" fill="rgb(212,68,19)"/><text x="62.5337%" y="159.50"></text></g><g><title>codegen_module (53,111,724 samples, 5.39%)</title><rect x="57.0679%" y="165" width="5.3944%" height="15" fill="rgb(240,187,13)"/><text x="57.3179%" y="175.50">codegen..</text></g><g><title>codegen_crate (56,103,352 samples, 5.70%)</title><rect x="56.7725%" y="181" width="5.6982%" height="15" fill="rgb(223,113,26)"/><text x="57.0225%" y="191.50">codegen..</text></g><g><title>LLVM_module_codegen (162,959,486 samples, 16.55%)</title><rect x="62.4890%" y="165" width="16.5512%" height="15" fill="rgb(206,192,2)"/><text x="62.7390%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (153,533,479 samples, 15.59%)</title><rect x="63.4464%" y="149" width="15.5939%" height="15" fill="rgb(241,108,4)"/><text x="63.6964%" y="159.50">LLVM_module_codegen_emit..</text></g><g><title>codegen_module_optimize (173,226,657 samples, 17.59%)</title><rect x="62.4708%" y="181" width="17.5940%" height="15" fill="rgb(247,173,49)"/><text x="62.7208%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,087,570 samples, 1.02%)</title><rect x="79.0403%" y="165" width="1.0246%" height="15" fill="rgb(224,114,35)"/><text x="79.2903%" y="175.50"></text></g><g><title>metadata_register_crate (1,813,437 samples, 0.18%)</title><rect x="85.0674%" y="133" width="0.1842%" height="15" fill="rgb(245,159,27)"/><text x="85.3174%" y="143.50"></text></g><g><title>macro_expand_crate (51,709,629 samples, 5.25%)</title><rect x="80.1733%" y="165" width="5.2520%" height="15" fill="rgb(245,172,44)"/><text x="80.4233%" y="175.50">macro_..</text></g><g><title>expand_crate (51,696,298 samples, 5.25%)</title><rect x="80.1747%" y="149" width="5.2506%" height="15" fill="rgb(236,23,11)"/><text x="80.4247%" y="159.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (1,710,483 samples, 0.17%)</title><rect x="85.2516%" y="133" width="0.1737%" height="15" fill="rgb(205,117,38)"/><text x="85.5016%" y="143.50"></text></g><g><title>late_resolve_crate (7,545,586 samples, 0.77%)</title><rect x="85.4865%" y="149" width="0.7664%" height="15" fill="rgb(237,72,25)"/><text x="85.7365%" y="159.50"></text></g><g><title>configure_and_expand (61,485,086 samples, 6.24%)</title><rect x="80.0648%" y="181" width="6.2448%" height="15" fill="rgb(244,70,9)"/><text x="80.3148%" y="191.50">configur..</text></g><g><title>resolve_crate (8,580,896 samples, 0.87%)</title><rect x="85.4381%" y="165" width="0.8715%" height="15" fill="rgb(217,125,39)"/><text x="85.6881%" y="175.50"></text></g><g><title>early_lint_checks (1,814,658 samples, 0.18%)</title><rect x="86.3993%" y="181" width="0.1843%" height="15" fill="rgb(235,36,10)"/><text x="86.6493%" y="191.50"></text></g><g><title>free_global_ctxt (11,579,406 samples, 1.18%)</title><rect x="86.5836%" y="181" width="1.1761%" height="15" fill="rgb(251,123,47)"/><text x="86.8336%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,071,501 samples, 0.11%)</title><rect x="89.0208%" y="101" width="0.1088%" height="15" fill="rgb(221,13,13)"/><text x="89.2708%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,285,092 samples, 0.13%)</title><rect x="89.3605%" y="85" width="0.1305%" height="15" fill="rgb(238,131,9)"/><text x="89.6105%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,155,492 samples, 0.12%)</title><rect x="89.4911%" y="85" width="0.1174%" height="15" fill="rgb(211,50,8)"/><text x="89.7411%" y="95.50"></text></g><g><title>optimized_mir (4,368,993 samples, 0.44%)</title><rect x="89.1857%" y="101" width="0.4437%" height="15" fill="rgb(245,182,24)"/><text x="89.4357%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,643,484 samples, 0.17%)</title><rect x="89.6948%" y="85" width="0.1669%" height="15" fill="rgb(242,14,37)"/><text x="89.9448%" y="95.50"></text></g><g><title>specialization_graph_of (2,492,915 samples, 0.25%)</title><rect x="89.9221%" y="85" width="0.2532%" height="15" fill="rgb(246,228,12)"/><text x="90.1721%" y="95.50"></text></g><g><title>impl_trait_ref (1,064,722 samples, 0.11%)</title><rect x="90.0672%" y="69" width="0.1081%" height="15" fill="rgb(213,55,15)"/><text x="90.3172%" y="79.50"></text></g><g><title>resolve_instance (5,608,538 samples, 0.57%)</title><rect x="89.6294%" y="101" width="0.5696%" height="15" fill="rgb(209,9,3)"/><text x="89.8794%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (14,029,650 samples, 1.42%)</title><rect x="88.8855%" y="117" width="1.4249%" height="15" fill="rgb(230,59,30)"/><text x="89.1355%" y="127.50"></text></g><g><title>monomorphization_collector (14,136,211 samples, 1.44%)</title><rect x="88.8850%" y="133" width="1.4358%" height="15" fill="rgb(209,121,21)"/><text x="89.1350%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (1,233,522 samples, 0.13%)</title><rect x="90.3213%" y="117" width="0.1253%" height="15" fill="rgb(220,109,13)"/><text x="90.5713%" y="127.50"></text></g><g><title>symbol_name (1,122,101 samples, 0.11%)</title><rect x="90.3326%" y="101" width="0.1140%" height="15" fill="rgb(232,18,1)"/><text x="90.5826%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (16,033,890 samples, 1.63%)</title><rect x="88.8818%" y="149" width="1.6285%" height="15" fill="rgb(215,41,42)"/><text x="89.1318%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,865,659 samples, 0.19%)</title><rect x="90.3208%" y="133" width="0.1895%" height="15" fill="rgb(224,123,36)"/><text x="90.5708%" y="143.50"></text></g><g><title>exported_symbols (16,840,889 samples, 1.71%)</title><rect x="88.8754%" y="165" width="1.7105%" height="15" fill="rgb(240,125,3)"/><text x="89.1254%" y="175.50"></text></g><g><title>is_sized_raw (1,314,230 samples, 0.13%)</title><rect x="93.1181%" y="133" width="0.1335%" height="15" fill="rgb(205,98,50)"/><text x="93.3681%" y="143.50"></text></g><g><title>evaluate_obligation (986,067 samples, 0.10%)</title><rect x="93.1515%" y="117" width="0.1002%" height="15" fill="rgb(205,185,37)"/><text x="93.4015%" y="127.50"></text></g><g><title>layout_of (1,334,991 samples, 0.14%)</title><rect x="93.2516%" y="133" width="0.1356%" height="15" fill="rgb(238,207,15)"/><text x="93.5016%" y="143.50"></text></g><g><title>layout_of (6,041,955 samples, 0.61%)</title><rect x="92.8199%" y="149" width="0.6137%" height="15" fill="rgb(213,199,42)"/><text x="93.0699%" y="159.50"></text></g><g><title>needs_drop_raw (4,375,591 samples, 0.44%)</title><rect x="96.7627%" y="133" width="0.4444%" height="15" fill="rgb(235,201,11)"/><text x="97.0127%" y="143.50"></text></g><g><title>is_copy_raw (3,841,522 samples, 0.39%)</title><rect x="96.8169%" y="117" width="0.3902%" height="15" fill="rgb(207,46,11)"/><text x="97.0669%" y="127.50"></text></g><g><title>evaluate_obligation (3,310,608 samples, 0.34%)</title><rect x="96.8708%" y="101" width="0.3362%" height="15" fill="rgb(241,35,35)"/><text x="97.1208%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (37,352,382 samples, 3.79%)</title><rect x="93.4336%" y="149" width="3.7938%" height="15" fill="rgb(243,32,47)"/><text x="93.6836%" y="159.50">mir_..</text></g><g><title>optimized_mir (64,743,311 samples, 6.58%)</title><rect x="90.6797%" y="165" width="6.5758%" height="15" fill="rgb(247,202,23)"/><text x="90.9297%" y="175.50">optimized..</text></g><g><title>generate_crate_metadata (94,183,034 samples, 9.57%)</title><rect x="87.7597%" y="181" width="9.5658%" height="15" fill="rgb(219,102,11)"/><text x="88.0097%" y="191.50">generate_crate..</text></g><g><title>hir_lowering (17,057,761 samples, 1.73%)</title><rect x="97.3256%" y="181" width="1.7325%" height="15" fill="rgb(243,110,44)"/><text x="97.5756%" y="191.50"></text></g><g><title>link_crate (3,886,929 samples, 0.39%)</title><rect x="99.0609%" y="165" width="0.3948%" height="15" fill="rgb(222,74,54)"/><text x="99.3109%" y="175.50"></text></g><g><title>link_binary (3,779,728 samples, 0.38%)</title><rect x="99.0718%" y="149" width="0.3839%" height="15" fill="rgb(216,99,12)"/><text x="99.3218%" y="159.50"></text></g><g><title>link_rlib (3,015,001 samples, 0.31%)</title><rect x="99.1495%" y="133" width="0.3062%" height="15" fill="rgb(226,22,26)"/><text x="99.3995%" y="143.50"></text></g><g><title>link (3,929,779 samples, 0.40%)</title><rect x="99.0581%" y="181" width="0.3991%" height="15" fill="rgb(217,163,10)"/><text x="99.3081%" y="191.50"></text></g><g><title>parse_crate (1,164,162 samples, 0.12%)</title><rect x="99.4572%" y="181" width="0.1182%" height="15" fill="rgb(213,25,53)"/><text x="99.7072%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,923,089 samples, 0.30%)</title><rect x="99.5998%" y="181" width="0.2969%" height="15" fill="rgb(252,105,26)"/><text x="99.8498%" y="191.50"></text></g><g><title>all (984,575,972 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (984,575,972 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>