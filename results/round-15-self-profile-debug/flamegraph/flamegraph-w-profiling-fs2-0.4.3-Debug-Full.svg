<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (50,255,308 samples, 14.12%)</title><rect x="0.2910%" y="149" width="14.1172%" height="15" fill="rgb(227,0,7)"/><text x="0.5410%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (562,886 samples, 0.16%)</title><rect x="16.4045%" y="37" width="0.1581%" height="15" fill="rgb(217,0,24)"/><text x="16.6545%" y="47.50"></text></g><g><title>thir_body (413,243 samples, 0.12%)</title><rect x="16.6452%" y="37" width="0.1161%" height="15" fill="rgb(221,193,54)"/><text x="16.8952%" y="47.50"></text></g><g><title>mir_const (3,336,486 samples, 0.94%)</title><rect x="15.8278%" y="85" width="0.9372%" height="15" fill="rgb(248,212,6)"/><text x="16.0778%" y="95.50"></text></g><g><title>unsafety_check_result (2,777,438 samples, 0.78%)</title><rect x="15.9849%" y="69" width="0.7802%" height="15" fill="rgb(208,68,35)"/><text x="16.2349%" y="79.50"></text></g><g><title>mir_built (2,441,494 samples, 0.69%)</title><rect x="16.0793%" y="53" width="0.6858%" height="15" fill="rgb(232,128,0)"/><text x="16.3293%" y="63.50"></text></g><g><title>mir_promoted (3,749,079 samples, 1.05%)</title><rect x="15.7195%" y="101" width="1.0532%" height="15" fill="rgb(207,160,47)"/><text x="15.9695%" y="111.50"></text></g><g><title>type_op_prove_predicate (437,414 samples, 0.12%)</title><rect x="16.8358%" y="101" width="0.1229%" height="15" fill="rgb(228,23,34)"/><text x="17.0858%" y="111.50"></text></g><g><title>MIR_borrow_checking (8,751,539 samples, 2.46%)</title><rect x="14.5014%" y="133" width="2.4584%" height="15" fill="rgb(218,30,26)"/><text x="14.7514%" y="143.50">MI..</text></g><g><title>mir_borrowck (8,679,338 samples, 2.44%)</title><rect x="14.5217%" y="117" width="2.4381%" height="15" fill="rgb(220,122,19)"/><text x="14.7717%" y="127.50">mi..</text></g><g><title>codegen_fn_attrs (598,538 samples, 0.17%)</title><rect x="17.1055%" y="101" width="0.1681%" height="15" fill="rgb(250,228,42)"/><text x="17.3555%" y="111.50"></text></g><g><title>check_mod_attrs (855,168 samples, 0.24%)</title><rect x="17.0335%" y="117" width="0.2402%" height="15" fill="rgb(240,193,28)"/><text x="17.2835%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (481,385 samples, 0.14%)</title><rect x="17.3352%" y="117" width="0.1352%" height="15" fill="rgb(216,20,37)"/><text x="17.5852%" y="127.50"></text></g><g><title>misc_checking_1 (1,667,077 samples, 0.47%)</title><rect x="17.0241%" y="133" width="0.4683%" height="15" fill="rgb(206,188,39)"/><text x="17.2741%" y="143.50"></text></g><g><title>misc_checking_2 (444,174 samples, 0.12%)</title><rect x="17.4924%" y="133" width="0.1248%" height="15" fill="rgb(217,207,13)"/><text x="17.7424%" y="143.50"></text></g><g><title>crate_lints (1,697,937 samples, 0.48%)</title><rect x="17.7245%" y="101" width="0.4770%" height="15" fill="rgb(231,73,38)"/><text x="17.9745%" y="111.50"></text></g><g><title>type_of (1,046,972 samples, 0.29%)</title><rect x="17.9074%" y="85" width="0.2941%" height="15" fill="rgb(225,20,46)"/><text x="18.1574%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (812,080 samples, 0.23%)</title><rect x="17.9733%" y="69" width="0.2281%" height="15" fill="rgb(210,31,41)"/><text x="18.2233%" y="79.50"></text></g><g><title>lint_checking (1,858,428 samples, 0.52%)</title><rect x="17.7241%" y="117" width="0.5220%" height="15" fill="rgb(221,200,47)"/><text x="17.9741%" y="127.50"></text></g><g><title>misc_checking_3 (2,646,516 samples, 0.74%)</title><rect x="17.6172%" y="133" width="0.7434%" height="15" fill="rgb(226,26,5)"/><text x="17.8672%" y="143.50"></text></g><g><title>impl_parent (2,768,515 samples, 0.78%)</title><rect x="19.5112%" y="69" width="0.7777%" height="15" fill="rgb(249,33,26)"/><text x="19.7612%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,461,529 samples, 0.41%)</title><rect x="19.8783%" y="53" width="0.4106%" height="15" fill="rgb(235,183,28)"/><text x="20.1283%" y="63.50"></text></g><g><title>impl_trait_ref (6,049,424 samples, 1.70%)</title><rect x="20.2889%" y="69" width="1.6993%" height="15" fill="rgb(221,5,38)"/><text x="20.5389%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,024,579 samples, 1.41%)</title><rect x="20.5768%" y="53" width="1.4115%" height="15" fill="rgb(247,18,42)"/><text x="20.8268%" y="63.50"></text></g><g><title>coherent_trait (13,750,799 samples, 3.86%)</title><rect x="18.3827%" y="101" width="3.8627%" height="15" fill="rgb(241,131,45)"/><text x="18.6327%" y="111.50">cohe..</text></g><g><title>specialization_graph_of (13,731,909 samples, 3.86%)</title><rect x="18.3880%" y="85" width="3.8574%" height="15" fill="rgb(249,31,29)"/><text x="18.6380%" y="95.50">spec..</text></g><g><title>trait_impls_of (913,769 samples, 0.26%)</title><rect x="21.9888%" y="69" width="0.2567%" height="15" fill="rgb(225,111,53)"/><text x="22.2388%" y="79.50"></text></g><g><title>coherence_checking (13,839,059 samples, 3.89%)</title><rect x="18.3748%" y="117" width="3.8875%" height="15" fill="rgb(238,160,17)"/><text x="18.6248%" y="127.50">cohe..</text></g><g><title>evaluate_obligation (1,215,191 samples, 0.34%)</title><rect x="24.1398%" y="69" width="0.3414%" height="15" fill="rgb(214,148,48)"/><text x="24.3898%" y="79.50"></text></g><g><title>typeck (2,227,033 samples, 0.63%)</title><rect x="24.7367%" y="69" width="0.6256%" height="15" fill="rgb(232,36,49)"/><text x="24.9867%" y="79.50"></text></g><g><title>item_bodies_checking (11,031,411 samples, 3.10%)</title><rect x="22.2726%" y="117" width="3.0988%" height="15" fill="rgb(209,103,24)"/><text x="22.5226%" y="127.50">ite..</text></g><g><title>typeck_item_bodies (11,028,551 samples, 3.10%)</title><rect x="22.2734%" y="101" width="3.0980%" height="15" fill="rgb(229,88,8)"/><text x="22.5234%" y="111.50">typ..</text></g><g><title>typeck (10,777,829 samples, 3.03%)</title><rect x="22.3438%" y="85" width="3.0276%" height="15" fill="rgb(213,181,19)"/><text x="22.5938%" y="95.50">typ..</text></g><g><title>item_types_checking (650,197 samples, 0.18%)</title><rect x="25.3714%" y="117" width="0.1826%" height="15" fill="rgb(254,191,54)"/><text x="25.6214%" y="127.50"></text></g><g><title>check_mod_item_types (646,887 samples, 0.18%)</title><rect x="25.3723%" y="101" width="0.1817%" height="15" fill="rgb(241,83,37)"/><text x="25.6223%" y="111.50"></text></g><g><title>fn_sig (402,325 samples, 0.11%)</title><rect x="25.6496%" y="85" width="0.1130%" height="15" fill="rgb(233,36,39)"/><text x="25.8996%" y="95.50"></text></g><g><title>named_region_map (522,676 samples, 0.15%)</title><rect x="25.8088%" y="69" width="0.1468%" height="15" fill="rgb(226,3,54)"/><text x="26.0588%" y="79.50"></text></g><g><title>resolve_lifetimes (481,606 samples, 0.14%)</title><rect x="25.8203%" y="53" width="0.1353%" height="15" fill="rgb(245,192,40)"/><text x="26.0703%" y="63.50"></text></g><g><title>generics_of (707,108 samples, 0.20%)</title><rect x="25.7627%" y="85" width="0.1986%" height="15" fill="rgb(238,167,29)"/><text x="26.0127%" y="95.50"></text></g><g><title>predicates_of (523,646 samples, 0.15%)</title><rect x="25.9795%" y="85" width="0.1471%" height="15" fill="rgb(232,182,51)"/><text x="26.2295%" y="95.50"></text></g><g><title>predicates_defined_on (457,786 samples, 0.13%)</title><rect x="25.9980%" y="69" width="0.1286%" height="15" fill="rgb(231,60,39)"/><text x="26.2480%" y="79.50"></text></g><g><title>type_collecting (2,218,873 samples, 0.62%)</title><rect x="25.5549%" y="117" width="0.6233%" height="15" fill="rgb(208,69,12)"/><text x="25.8049%" y="127.50"></text></g><g><title>collect_mod_item_types (2,205,902 samples, 0.62%)</title><rect x="25.5586%" y="101" width="0.6197%" height="15" fill="rgb(235,93,37)"/><text x="25.8086%" y="111.50"></text></g><g><title>check_impl_item_well_formed (749,508 samples, 0.21%)</title><rect x="26.2041%" y="101" width="0.2105%" height="15" fill="rgb(213,116,39)"/><text x="26.4541%" y="111.50"></text></g><g><title>check_item_well_formed (1,518,902 samples, 0.43%)</title><rect x="26.4146%" y="101" width="0.4267%" height="15" fill="rgb(222,207,29)"/><text x="26.6646%" y="111.50"></text></g><g><title>analysis (44,674,971 samples, 12.55%)</title><rect x="14.4081%" y="149" width="12.5496%" height="15" fill="rgb(206,96,30)"/><text x="14.6581%" y="159.50">analysis</text></g><g><title>type_check_crate (30,604,609 samples, 8.60%)</title><rect x="18.3606%" y="133" width="8.5971%" height="15" fill="rgb(218,138,4)"/><text x="18.6106%" y="143.50">type_check_c..</text></g><g><title>wf_checking (2,771,998 samples, 0.78%)</title><rect x="26.1791%" y="117" width="0.7787%" height="15" fill="rgb(250,191,14)"/><text x="26.4291%" y="127.50"></text></g><g><title>check_trait_item_well_formed (414,604 samples, 0.12%)</title><rect x="26.8413%" y="101" width="0.1165%" height="15" fill="rgb(239,60,40)"/><text x="27.0913%" y="111.50"></text></g><g><title>compute_debuginfo_type_name (503,045 samples, 0.14%)</title><rect x="35.8332%" y="117" width="0.1413%" height="15" fill="rgb(206,27,48)"/><text x="36.0832%" y="127.50"></text></g><g><title>codegen_fn_attrs (521,135 samples, 0.15%)</title><rect x="36.5672%" y="101" width="0.1464%" height="15" fill="rgb(225,35,8)"/><text x="36.8172%" y="111.50"></text></g><g><title>layout_of (725,786 samples, 0.20%)</title><rect x="36.9751%" y="85" width="0.2039%" height="15" fill="rgb(250,213,24)"/><text x="37.2251%" y="95.50"></text></g><g><title>layout_of (1,791,008 samples, 0.50%)</title><rect x="36.7372%" y="101" width="0.5031%" height="15" fill="rgb(247,123,22)"/><text x="36.9872%" y="111.50"></text></g><g><title>predicates_of (886,299 samples, 0.25%)</title><rect x="37.6952%" y="85" width="0.2490%" height="15" fill="rgb(231,138,38)"/><text x="37.9452%" y="95.50"></text></g><g><title>predicates_defined_on (632,097 samples, 0.18%)</title><rect x="37.7666%" y="69" width="0.1776%" height="15" fill="rgb(231,145,46)"/><text x="38.0166%" y="79.50"></text></g><g><title>param_env (2,521,085 samples, 0.71%)</title><rect x="37.2403%" y="101" width="0.7082%" height="15" fill="rgb(251,118,11)"/><text x="37.4903%" y="111.50"></text></g><g><title>fn_abi_of_instance (7,028,701 samples, 1.97%)</title><rect x="36.0549%" y="117" width="1.9744%" height="15" fill="rgb(217,147,25)"/><text x="36.3049%" y="127.50">f..</text></g><g><title>layout_of (571,785 samples, 0.16%)</title><rect x="38.4388%" y="69" width="0.1606%" height="15" fill="rgb(247,81,37)"/><text x="38.6888%" y="79.50"></text></g><g><title>layout_of (854,741 samples, 0.24%)</title><rect x="38.3787%" y="85" width="0.2401%" height="15" fill="rgb(209,12,38)"/><text x="38.6287%" y="95.50"></text></g><g><title>layout_of (1,203,863 samples, 0.34%)</title><rect x="38.2994%" y="101" width="0.3382%" height="15" fill="rgb(227,1,9)"/><text x="38.5494%" y="111.50"></text></g><g><title>layout_of (1,924,217 samples, 0.54%)</title><rect x="38.1328%" y="117" width="0.5405%" height="15" fill="rgb(248,47,43)"/><text x="38.3828%" y="127.50"></text></g><g><title>symbol_name (575,206 samples, 0.16%)</title><rect x="38.6784%" y="117" width="0.1616%" height="15" fill="rgb(221,10,30)"/><text x="38.9284%" y="127.50"></text></g><g><title>codegen_module (39,745,353 samples, 11.16%)</title><rect x="27.7005%" y="133" width="11.1648%" height="15" fill="rgb(210,229,1)"/><text x="27.9505%" y="143.50">codegen_module</text></g><g><title>codegen_crate (42,455,439 samples, 11.93%)</title><rect x="26.9611%" y="149" width="11.9261%" height="15" fill="rgb(222,148,37)"/><text x="27.2111%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (142,548,149 samples, 40.04%)</title><rect x="38.9429%" y="133" width="40.0431%" height="15" fill="rgb(234,67,33)"/><text x="39.1929%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (135,345,732 samples, 38.02%)</title><rect x="40.9661%" y="117" width="38.0199%" height="15" fill="rgb(247,98,35)"/><text x="41.2161%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (151,245,005 samples, 42.49%)</title><rect x="38.8872%" y="149" width="42.4861%" height="15" fill="rgb(247,138,52)"/><text x="39.1372%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,498,685 samples, 2.39%)</title><rect x="78.9860%" y="133" width="2.3874%" height="15" fill="rgb(213,79,30)"/><text x="79.2360%" y="143.50">LL..</text></g><g><title>metadata_register_crate (2,595,966 samples, 0.73%)</title><rect x="85.7538%" y="101" width="0.7292%" height="15" fill="rgb(246,177,23)"/><text x="86.0038%" y="111.50"></text></g><g><title>metadata_register_crate (965,292 samples, 0.27%)</title><rect x="86.2118%" y="85" width="0.2712%" height="15" fill="rgb(230,62,27)"/><text x="86.4618%" y="95.50"></text></g><g><title>macro_expand_crate (17,786,490 samples, 5.00%)</title><rect x="81.5316%" y="133" width="4.9964%" height="15" fill="rgb(216,154,8)"/><text x="81.7816%" y="143.50">macro_..</text></g><g><title>expand_crate (17,759,348 samples, 4.99%)</title><rect x="81.5393%" y="117" width="4.9888%" height="15" fill="rgb(244,35,45)"/><text x="81.7893%" y="127.50">expand..</text></g><g><title>late_resolve_crate (9,529,266 samples, 2.68%)</title><rect x="86.6902%" y="117" width="2.6769%" height="15" fill="rgb(251,115,12)"/><text x="86.9402%" y="127.50">la..</text></g><g><title>configure_and_expand (28,579,348 samples, 8.03%)</title><rect x="81.3733%" y="149" width="8.0282%" height="15" fill="rgb(240,54,50)"/><text x="81.6233%" y="159.50">configure_a..</text></g><g><title>resolve_crate (9,987,901 samples, 2.81%)</title><rect x="86.5958%" y="133" width="2.8057%" height="15" fill="rgb(233,84,52)"/><text x="86.8458%" y="143.50">re..</text></g><g><title>early_lint_checks (397,894 samples, 0.11%)</title><rect x="89.4747%" y="149" width="0.1118%" height="15" fill="rgb(207,117,47)"/><text x="89.7247%" y="159.50"></text></g><g><title>free_global_ctxt (4,383,684 samples, 1.23%)</title><rect x="89.5865%" y="149" width="1.2314%" height="15" fill="rgb(249,43,39)"/><text x="89.8365%" y="159.50"></text></g><g><title>item_attrs (769,145 samples, 0.22%)</title><rect x="91.3651%" y="53" width="0.2161%" height="15" fill="rgb(209,38,44)"/><text x="91.6151%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (743,295 samples, 0.21%)</title><rect x="91.3723%" y="37" width="0.2088%" height="15" fill="rgb(236,212,23)"/><text x="91.6223%" y="47.50"></text></g><g><title>codegen_fn_attrs (1,164,323 samples, 0.33%)</title><rect x="91.3183%" y="69" width="0.3271%" height="15" fill="rgb(242,79,21)"/><text x="91.5683%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (882,297 samples, 0.25%)</title><rect x="92.2061%" y="53" width="0.2478%" height="15" fill="rgb(211,96,35)"/><text x="92.4561%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (965,231 samples, 0.27%)</title><rect x="92.4540%" y="53" width="0.2711%" height="15" fill="rgb(253,215,40)"/><text x="92.7040%" y="63.50"></text></g><g><title>optimized_mir (3,273,762 samples, 0.92%)</title><rect x="91.8164%" y="69" width="0.9196%" height="15" fill="rgb(211,81,21)"/><text x="92.0664%" y="79.50"></text></g><g><title>evaluate_obligation (479,464 samples, 0.13%)</title><rect x="93.0835%" y="37" width="0.1347%" height="15" fill="rgb(208,190,38)"/><text x="93.3335%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,673,505 samples, 0.47%)</title><rect x="92.8662%" y="53" width="0.4701%" height="15" fill="rgb(235,213,38)"/><text x="93.1162%" y="63.50"></text></g><g><title>specialization_graph_of (1,499,609 samples, 0.42%)</title><rect x="93.4729%" y="53" width="0.4213%" height="15" fill="rgb(237,122,38)"/><text x="93.7229%" y="63.50"></text></g><g><title>impl_trait_ref (471,505 samples, 0.13%)</title><rect x="93.7617%" y="37" width="0.1325%" height="15" fill="rgb(244,218,35)"/><text x="94.0117%" y="47.50"></text></g><g><title>resolve_instance (4,355,571 samples, 1.22%)</title><rect x="92.7360%" y="69" width="1.2235%" height="15" fill="rgb(240,68,47)"/><text x="92.9860%" y="79.50"></text></g><g><title>specialization_graph_of (417,335 samples, 0.12%)</title><rect x="94.2792%" y="37" width="0.1172%" height="15" fill="rgb(210,16,53)"/><text x="94.5292%" y="47.50"></text></g><g><title>resolve_instance (670,757 samples, 0.19%)</title><rect x="94.2102%" y="53" width="0.1884%" height="15" fill="rgb(235,124,12)"/><text x="94.4602%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (11,948,631 samples, 3.36%)</title><rect x="91.0431%" y="85" width="3.3565%" height="15" fill="rgb(224,169,11)"/><text x="91.2931%" y="95.50">mon..</text></g><g><title>vtable_entries (1,119,841 samples, 0.31%)</title><rect x="94.0850%" y="69" width="0.3146%" height="15" fill="rgb(250,166,2)"/><text x="94.3350%" y="79.50"></text></g><g><title>monomorphization_collector (11,988,661 samples, 3.37%)</title><rect x="91.0423%" y="101" width="3.3677%" height="15" fill="rgb(242,216,29)"/><text x="91.2923%" y="111.50">mon..</text></g><g><title>assert_symbols_are_distinct (924,670 samples, 0.26%)</title><rect x="94.4113%" y="85" width="0.2597%" height="15" fill="rgb(230,116,27)"/><text x="94.6613%" y="95.50"></text></g><g><title>symbol_name (844,508 samples, 0.24%)</title><rect x="94.4338%" y="69" width="0.2372%" height="15" fill="rgb(228,99,48)"/><text x="94.6838%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (13,498,576 samples, 3.79%)</title><rect x="91.0275%" y="117" width="3.7919%" height="15" fill="rgb(253,11,6)"/><text x="91.2775%" y="127.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (1,457,165 samples, 0.41%)</title><rect x="94.4100%" y="101" width="0.4093%" height="15" fill="rgb(247,143,39)"/><text x="94.6600%" y="111.50"></text></g><g><title>cgu_partitioning (527,945 samples, 0.15%)</title><rect x="94.6711%" y="85" width="0.1483%" height="15" fill="rgb(236,97,10)"/><text x="94.9211%" y="95.50"></text></g><g><title>exported_symbols (13,589,167 samples, 3.82%)</title><rect x="91.0141%" y="133" width="3.8173%" height="15" fill="rgb(233,208,19)"/><text x="91.2641%" y="143.50">expo..</text></g><g><title>optimized_mir (1,532,527 samples, 0.43%)</title><rect x="94.8485%" y="133" width="0.4305%" height="15" fill="rgb(216,164,2)"/><text x="95.0985%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (641,506 samples, 0.18%)</title><rect x="95.0988%" y="117" width="0.1802%" height="15" fill="rgb(220,129,5)"/><text x="95.3488%" y="127.50"></text></g><g><title>generate_crate_metadata (15,904,201 samples, 4.47%)</title><rect x="90.8179%" y="149" width="4.4676%" height="15" fill="rgb(242,17,10)"/><text x="91.0679%" y="159.50">gener..</text></g><g><title>hir_lowering (2,622,856 samples, 0.74%)</title><rect x="95.2856%" y="149" width="0.7368%" height="15" fill="rgb(242,107,0)"/><text x="95.5356%" y="159.50"></text></g><g><title>finish_ongoing_codegen (6,228,173 samples, 1.75%)</title><rect x="96.0266%" y="133" width="1.7496%" height="15" fill="rgb(251,28,31)"/><text x="96.2766%" y="143.50"></text></g><g><title>link_crate (1,579,807 samples, 0.44%)</title><rect x="97.7762%" y="133" width="0.4438%" height="15" fill="rgb(233,223,10)"/><text x="98.0262%" y="143.50"></text></g><g><title>link_binary (1,562,926 samples, 0.44%)</title><rect x="97.7809%" y="117" width="0.4390%" height="15" fill="rgb(215,21,27)"/><text x="98.0309%" y="127.50"></text></g><g><title>link_rlib (1,042,011 samples, 0.29%)</title><rect x="97.9273%" y="101" width="0.2927%" height="15" fill="rgb(232,23,21)"/><text x="98.1773%" y="111.50"></text></g><g><title>link (7,832,800 samples, 2.20%)</title><rect x="96.0223%" y="149" width="2.2003%" height="15" fill="rgb(244,5,23)"/><text x="96.2723%" y="159.50">l..</text></g><g><title>parse_crate (4,074,451 samples, 1.14%)</title><rect x="98.2226%" y="149" width="1.1446%" height="15" fill="rgb(226,81,46)"/><text x="98.4726%" y="159.50"></text></g><g><title>prepare_outputs (373,564 samples, 0.10%)</title><rect x="99.3695%" y="149" width="0.1049%" height="15" fill="rgb(247,70,30)"/><text x="99.6195%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (1,449,905 samples, 0.41%)</title><rect x="99.4744%" y="149" width="0.4073%" height="15" fill="rgb(212,68,19)"/><text x="99.7244%" y="159.50"></text></g><g><title>all (355,986,792 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (355,986,792 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>