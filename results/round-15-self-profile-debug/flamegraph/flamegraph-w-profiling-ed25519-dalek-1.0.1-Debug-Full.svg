<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (40,872,142 samples, 10.51%)</title><rect x="0.1579%" y="341" width="10.5105%" height="15" fill="rgb(227,0,7)"/><text x="0.4079%" y="351.50">LLVM_passes</text></g><g><title>adt_drop_tys (432,334 samples, 0.11%)</title><rect x="16.3331%" y="213" width="0.1112%" height="15" fill="rgb(217,0,24)"/><text x="16.5831%" y="223.50"></text></g><g><title>needs_drop_raw (1,507,144 samples, 0.39%)</title><rect x="16.3104%" y="229" width="0.3876%" height="15" fill="rgb(221,193,54)"/><text x="16.5604%" y="239.50"></text></g><g><title>is_copy_raw (983,019 samples, 0.25%)</title><rect x="16.4452%" y="213" width="0.2528%" height="15" fill="rgb(248,212,6)"/><text x="16.6952%" y="223.50"></text></g><g><title>evaluate_obligation (878,999 samples, 0.23%)</title><rect x="16.4719%" y="197" width="0.2260%" height="15" fill="rgb(208,68,35)"/><text x="16.7219%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (463,504 samples, 0.12%)</title><rect x="16.7701%" y="213" width="0.1192%" height="15" fill="rgb(232,128,0)"/><text x="17.0201%" y="223.50"></text></g><g><title>specialization_graph_of (1,081,392 samples, 0.28%)</title><rect x="16.9153%" y="213" width="0.2781%" height="15" fill="rgb(207,160,47)"/><text x="17.1653%" y="223.50"></text></g><g><title>resolve_instance (2,011,119 samples, 0.52%)</title><rect x="16.6979%" y="229" width="0.5172%" height="15" fill="rgb(228,23,34)"/><text x="16.9479%" y="239.50"></text></g><g><title>thir_body (1,337,577 samples, 0.34%)</title><rect x="17.2203%" y="229" width="0.3440%" height="15" fill="rgb(218,30,26)"/><text x="17.4703%" y="239.50"></text></g><g><title>mir_const (10,076,406 samples, 2.59%)</title><rect x="14.9762%" y="277" width="2.5912%" height="15" fill="rgb(220,122,19)"/><text x="15.2262%" y="287.50">mi..</text></g><g><title>unsafety_check_result (8,927,234 samples, 2.30%)</title><rect x="15.2717%" y="261" width="2.2957%" height="15" fill="rgb(250,228,42)"/><text x="15.5217%" y="271.50">u..</text></g><g><title>mir_built (8,127,074 samples, 2.09%)</title><rect x="15.4774%" y="245" width="2.0899%" height="15" fill="rgb(240,193,28)"/><text x="15.7274%" y="255.50">m..</text></g><g><title>mir_const_qualif (700,745 samples, 0.18%)</title><rect x="17.5674%" y="277" width="0.1802%" height="15" fill="rgb(216,20,37)"/><text x="17.8174%" y="287.50"></text></g><g><title>mir_const (542,735 samples, 0.14%)</title><rect x="17.6080%" y="261" width="0.1396%" height="15" fill="rgb(206,188,39)"/><text x="17.8580%" y="271.50"></text></g><g><title>mir_promoted (11,814,662 samples, 3.04%)</title><rect x="14.7098%" y="293" width="3.0382%" height="15" fill="rgb(217,207,13)"/><text x="14.9598%" y="303.50">mir..</text></g><g><title>type_op_ascribe_user_type (470,487 samples, 0.12%)</title><rect x="17.7494%" y="293" width="0.1210%" height="15" fill="rgb(231,73,38)"/><text x="17.9994%" y="303.50"></text></g><g><title>type_op_normalize_fn_sig (736,089 samples, 0.19%)</title><rect x="17.8704%" y="293" width="0.1893%" height="15" fill="rgb(225,20,46)"/><text x="18.1204%" y="303.50"></text></g><g><title>normalize_projection_ty (480,597 samples, 0.12%)</title><rect x="17.9361%" y="277" width="0.1236%" height="15" fill="rgb(210,31,41)"/><text x="18.1861%" y="287.50"></text></g><g><title>type_op_prove_predicate (2,175,592 samples, 0.56%)</title><rect x="18.1014%" y="293" width="0.5595%" height="15" fill="rgb(221,200,47)"/><text x="18.3514%" y="303.50"></text></g><g><title>MIR_borrow_checking (30,764,900 samples, 7.91%)</title><rect x="10.7532%" y="325" width="7.9114%" height="15" fill="rgb(226,26,5)"/><text x="11.0032%" y="335.50">MIR_borrow_..</text></g><g><title>mir_borrowck (30,591,130 samples, 7.87%)</title><rect x="10.7979%" y="309" width="7.8667%" height="15" fill="rgb(249,33,26)"/><text x="11.0479%" y="319.50">mir_borrowck</text></g><g><title>MIR_effect_checking (401,314 samples, 0.10%)</title><rect x="18.6646%" y="325" width="0.1032%" height="15" fill="rgb(235,183,28)"/><text x="18.9146%" y="335.50"></text></g><g><title>check_mod_attrs (658,677 samples, 0.17%)</title><rect x="18.8231%" y="309" width="0.1694%" height="15" fill="rgb(221,5,38)"/><text x="19.0731%" y="319.50"></text></g><g><title>check_mod_unstable_api_usage (429,606 samples, 0.11%)</title><rect x="19.0522%" y="309" width="0.1105%" height="15" fill="rgb(247,18,42)"/><text x="19.3022%" y="319.50"></text></g><g><title>misc_checking_1 (1,412,014 samples, 0.36%)</title><rect x="18.8176%" y="325" width="0.3631%" height="15" fill="rgb(241,131,45)"/><text x="19.0676%" y="335.50"></text></g><g><title>liveness_and_intrinsic_checking (576,946 samples, 0.15%)</title><rect x="19.1810%" y="309" width="0.1484%" height="15" fill="rgb(249,31,29)"/><text x="19.4310%" y="319.50"></text></g><g><title>check_mod_liveness (452,464 samples, 0.12%)</title><rect x="19.2130%" y="293" width="0.1164%" height="15" fill="rgb(225,111,53)"/><text x="19.4630%" y="303.50"></text></g><g><title>misc_checking_2 (1,174,022 samples, 0.30%)</title><rect x="19.1807%" y="325" width="0.3019%" height="15" fill="rgb(238,160,17)"/><text x="19.4307%" y="335.50"></text></g><g><title>match_checking (595,826 samples, 0.15%)</title><rect x="19.3294%" y="309" width="0.1532%" height="15" fill="rgb(214,148,48)"/><text x="19.5794%" y="319.50"></text></g><g><title>check_match (549,845 samples, 0.14%)</title><rect x="19.3412%" y="293" width="0.1414%" height="15" fill="rgb(232,36,49)"/><text x="19.5912%" y="303.50"></text></g><g><title>death_checking (1,136,191 samples, 0.29%)</title><rect x="19.5536%" y="309" width="0.2922%" height="15" fill="rgb(209,103,24)"/><text x="19.8036%" y="319.50"></text></g><g><title>param_env (422,985 samples, 0.11%)</title><rect x="20.1876%" y="277" width="0.1088%" height="15" fill="rgb(229,88,8)"/><text x="20.4376%" y="287.50"></text></g><g><title>crate_lints (2,961,370 samples, 0.76%)</title><rect x="19.8461%" y="293" width="0.7615%" height="15" fill="rgb(213,181,19)"/><text x="20.0961%" y="303.50"></text></g><g><title>type_of (1,206,121 samples, 0.31%)</title><rect x="20.2975%" y="277" width="0.3102%" height="15" fill="rgb(254,191,54)"/><text x="20.5475%" y="287.50"></text></g><g><title>metadata_decode_entry_type_of (944,418 samples, 0.24%)</title><rect x="20.3648%" y="261" width="0.2429%" height="15" fill="rgb(241,83,37)"/><text x="20.6148%" y="271.50"></text></g><g><title>lint_checking (3,551,436 samples, 0.91%)</title><rect x="19.8457%" y="309" width="0.9133%" height="15" fill="rgb(233,36,39)"/><text x="20.0957%" y="319.50"></text></g><g><title>module_lints (588,596 samples, 0.15%)</title><rect x="20.6076%" y="293" width="0.1514%" height="15" fill="rgb(226,3,54)"/><text x="20.8576%" y="303.50"></text></g><g><title>lint_mod (581,626 samples, 0.15%)</title><rect x="20.6094%" y="277" width="0.1496%" height="15" fill="rgb(245,192,40)"/><text x="20.8594%" y="287.50"></text></g><g><title>privacy_checking_modules (987,970 samples, 0.25%)</title><rect x="20.8301%" y="309" width="0.2541%" height="15" fill="rgb(238,167,29)"/><text x="21.0801%" y="319.50"></text></g><g><title>check_mod_privacy (982,910 samples, 0.25%)</title><rect x="20.8314%" y="293" width="0.2528%" height="15" fill="rgb(232,182,51)"/><text x="21.0814%" y="303.50"></text></g><g><title>misc_checking_3 (6,247,434 samples, 1.61%)</title><rect x="19.4826%" y="325" width="1.6066%" height="15" fill="rgb(231,60,39)"/><text x="19.7326%" y="335.50"></text></g><g><title>impl_parent (3,309,380 samples, 0.85%)</title><rect x="22.9817%" y="261" width="0.8510%" height="15" fill="rgb(208,69,12)"/><text x="23.2317%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,877,225 samples, 0.48%)</title><rect x="23.3500%" y="245" width="0.4827%" height="15" fill="rgb(235,93,37)"/><text x="23.6000%" y="255.50"></text></g><g><title>impl_trait_ref (7,038,199 samples, 1.81%)</title><rect x="23.8331%" y="261" width="1.8099%" height="15" fill="rgb(213,116,39)"/><text x="24.0831%" y="271.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,613,766 samples, 1.44%)</title><rect x="24.1994%" y="245" width="1.4436%" height="15" fill="rgb(222,207,29)"/><text x="24.4494%" y="255.50"></text></g><g><title>trait_impls_of (1,393,285 samples, 0.36%)</title><rect x="25.6675%" y="261" width="0.3583%" height="15" fill="rgb(206,96,30)"/><text x="25.9175%" y="271.50"></text></g><g><title>implementations_of_trait (478,936 samples, 0.12%)</title><rect x="25.9026%" y="245" width="0.1232%" height="15" fill="rgb(218,138,4)"/><text x="26.1526%" y="255.50"></text></g><g><title>coherent_trait (19,050,822 samples, 4.90%)</title><rect x="21.1273%" y="293" width="4.8990%" height="15" fill="rgb(250,191,14)"/><text x="21.3773%" y="303.50">cohere..</text></g><g><title>specialization_graph_of (18,521,907 samples, 4.76%)</title><rect x="21.2633%" y="277" width="4.7630%" height="15" fill="rgb(239,60,40)"/><text x="21.5133%" y="287.50">specia..</text></g><g><title>coherence_checking (19,151,784 samples, 4.92%)</title><rect x="21.1205%" y="309" width="4.9250%" height="15" fill="rgb(206,27,48)"/><text x="21.3705%" y="319.50">cohere..</text></g><g><title>associated_items (587,075 samples, 0.15%)</title><rect x="34.2783%" y="261" width="0.1510%" height="15" fill="rgb(225,35,8)"/><text x="34.5283%" y="271.50"></text></g><g><title>dropck_outlives (988,960 samples, 0.25%)</title><rect x="34.4531%" y="261" width="0.2543%" height="15" fill="rgb(250,213,24)"/><text x="34.7031%" y="271.50"></text></g><g><title>normalize_projection_ty (418,815 samples, 0.11%)</title><rect x="34.5997%" y="245" width="0.1077%" height="15" fill="rgb(247,123,22)"/><text x="34.8497%" y="255.50"></text></g><g><title>eval_to_const_value_raw (569,355 samples, 0.15%)</title><rect x="34.7074%" y="261" width="0.1464%" height="15" fill="rgb(231,138,38)"/><text x="34.9574%" y="271.50"></text></g><g><title>eval_to_const_value_raw (565,585 samples, 0.15%)</title><rect x="34.7084%" y="245" width="0.1454%" height="15" fill="rgb(231,145,46)"/><text x="34.9584%" y="255.50"></text></g><g><title>eval_to_allocation_raw (556,875 samples, 0.14%)</title><rect x="34.7106%" y="229" width="0.1432%" height="15" fill="rgb(251,118,11)"/><text x="34.9606%" y="239.50"></text></g><g><title>impl_trait_ref (406,622 samples, 0.10%)</title><rect x="35.9594%" y="245" width="0.1046%" height="15" fill="rgb(217,147,25)"/><text x="36.2094%" y="255.50"></text></g><g><title>trait_impls_of (737,647 samples, 0.19%)</title><rect x="36.2511%" y="245" width="0.1897%" height="15" fill="rgb(247,81,37)"/><text x="36.5011%" y="255.50"></text></g><g><title>evaluate_obligation (6,177,965 samples, 1.59%)</title><rect x="34.8538%" y="261" width="1.5887%" height="15" fill="rgb(209,12,38)"/><text x="35.1038%" y="271.50"></text></g><g><title>method_autoderef_steps (443,161 samples, 0.11%)</title><rect x="36.6468%" y="261" width="0.1140%" height="15" fill="rgb(227,1,9)"/><text x="36.8968%" y="271.50"></text></g><g><title>predicates_of (483,763 samples, 0.12%)</title><rect x="36.8967%" y="261" width="0.1244%" height="15" fill="rgb(248,47,43)"/><text x="37.1467%" y="271.50"></text></g><g><title>item_bodies_checking (42,943,963 samples, 11.04%)</title><rect x="26.0565%" y="309" width="11.0433%" height="15" fill="rgb(221,10,30)"/><text x="26.3065%" y="319.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (42,941,413 samples, 11.04%)</title><rect x="26.0571%" y="293" width="11.0426%" height="15" fill="rgb(210,229,1)"/><text x="26.3071%" y="303.50">typeck_item_bodi..</text></g><g><title>typeck (42,821,393 samples, 11.01%)</title><rect x="26.0880%" y="277" width="11.0117%" height="15" fill="rgb(222,148,37)"/><text x="26.3380%" y="287.50">typeck</text></g><g><title>item_types_checking (1,323,563 samples, 0.34%)</title><rect x="37.0997%" y="309" width="0.3404%" height="15" fill="rgb(234,67,33)"/><text x="37.3497%" y="319.50"></text></g><g><title>check_mod_item_types (1,317,073 samples, 0.34%)</title><rect x="37.1014%" y="293" width="0.3387%" height="15" fill="rgb(247,98,35)"/><text x="37.3514%" y="303.50"></text></g><g><title>named_region_map (607,375 samples, 0.16%)</title><rect x="37.6338%" y="261" width="0.1562%" height="15" fill="rgb(247,138,52)"/><text x="37.8838%" y="271.50"></text></g><g><title>resolve_lifetimes (584,304 samples, 0.15%)</title><rect x="37.6398%" y="245" width="0.1503%" height="15" fill="rgb(213,79,30)"/><text x="37.8898%" y="255.50"></text></g><g><title>generics_of (785,378 samples, 0.20%)</title><rect x="37.5919%" y="277" width="0.2020%" height="15" fill="rgb(246,177,23)"/><text x="37.8419%" y="287.50"></text></g><g><title>predicates_of (495,557 samples, 0.13%)</title><rect x="37.8168%" y="277" width="0.1274%" height="15" fill="rgb(230,62,27)"/><text x="38.0668%" y="287.50"></text></g><g><title>predicates_defined_on (440,056 samples, 0.11%)</title><rect x="37.8311%" y="261" width="0.1132%" height="15" fill="rgb(216,154,8)"/><text x="38.0811%" y="271.50"></text></g><g><title>type_collecting (2,039,481 samples, 0.52%)</title><rect x="37.4411%" y="309" width="0.5245%" height="15" fill="rgb(244,35,45)"/><text x="37.6911%" y="319.50"></text></g><g><title>collect_mod_item_types (2,026,701 samples, 0.52%)</title><rect x="37.4444%" y="293" width="0.5212%" height="15" fill="rgb(251,115,12)"/><text x="37.6944%" y="303.50"></text></g><g><title>mir_borrowck (570,956 samples, 0.15%)</title><rect x="38.7253%" y="197" width="0.1468%" height="15" fill="rgb(240,54,50)"/><text x="38.9753%" y="207.50"></text></g><g><title>mir_for_ctfe (845,619 samples, 0.22%)</title><rect x="38.6554%" y="229" width="0.2175%" height="15" fill="rgb(233,84,52)"/><text x="38.9054%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (772,038 samples, 0.20%)</title><rect x="38.6743%" y="213" width="0.1985%" height="15" fill="rgb(207,117,47)"/><text x="38.9243%" y="223.50"></text></g><g><title>eval_to_const_value_raw (565,106 samples, 0.15%)</title><rect x="39.0020%" y="149" width="0.1453%" height="15" fill="rgb(249,43,39)"/><text x="39.2520%" y="159.50"></text></g><g><title>eval_to_const_value_raw (561,796 samples, 0.14%)</title><rect x="39.0028%" y="133" width="0.1445%" height="15" fill="rgb(209,38,44)"/><text x="39.2528%" y="143.50"></text></g><g><title>eval_to_allocation_raw (552,825 samples, 0.14%)</title><rect x="39.0051%" y="117" width="0.1422%" height="15" fill="rgb(236,212,23)"/><text x="39.2551%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (593,636 samples, 0.15%)</title><rect x="38.9969%" y="165" width="0.1527%" height="15" fill="rgb(242,79,21)"/><text x="39.2469%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,474,825 samples, 0.38%)</title><rect x="38.8767%" y="213" width="0.3793%" height="15" fill="rgb(211,96,35)"/><text x="39.1267%" y="223.50"></text></g><g><title>eval_to_const_value_raw (1,472,495 samples, 0.38%)</title><rect x="38.8773%" y="197" width="0.3787%" height="15" fill="rgb(253,215,40)"/><text x="39.1273%" y="207.50"></text></g><g><title>eval_to_allocation_raw (1,468,805 samples, 0.38%)</title><rect x="38.8783%" y="181" width="0.3777%" height="15" fill="rgb(211,81,21)"/><text x="39.1283%" y="191.50"></text></g><g><title>typeck (413,763 samples, 0.11%)</title><rect x="39.1496%" y="165" width="0.1064%" height="15" fill="rgb(208,190,38)"/><text x="39.3996%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,497,095 samples, 0.38%)</title><rect x="38.8732%" y="229" width="0.3850%" height="15" fill="rgb(235,213,38)"/><text x="39.1232%" y="239.50"></text></g><g><title>eval_to_const_value_raw (3,133,750 samples, 0.81%)</title><rect x="38.5292%" y="277" width="0.8059%" height="15" fill="rgb(237,122,38)"/><text x="38.7792%" y="287.50"></text></g><g><title>eval_to_const_value_raw (3,121,250 samples, 0.80%)</title><rect x="38.5324%" y="261" width="0.8026%" height="15" fill="rgb(244,218,35)"/><text x="38.7824%" y="271.50"></text></g><g><title>eval_to_allocation_raw (3,103,890 samples, 0.80%)</title><rect x="38.5369%" y="245" width="0.7982%" height="15" fill="rgb(240,68,47)"/><text x="38.7869%" y="255.50"></text></g><g><title>evaluate_obligation (473,923 samples, 0.12%)</title><rect x="39.3351%" y="277" width="0.1219%" height="15" fill="rgb(210,16,53)"/><text x="39.5851%" y="287.50"></text></g><g><title>region_scope_tree (515,484 samples, 0.13%)</title><rect x="39.5962%" y="277" width="0.1326%" height="15" fill="rgb(235,124,12)"/><text x="39.8462%" y="287.50"></text></g><g><title>check_impl_item_well_formed (6,740,864 samples, 1.73%)</title><rect x="38.0283%" y="293" width="1.7334%" height="15" fill="rgb(224,169,11)"/><text x="38.2783%" y="303.50"></text></g><g><title>evaluate_obligation (433,273 samples, 0.11%)</title><rect x="40.0911%" y="277" width="0.1114%" height="15" fill="rgb(250,166,2)"/><text x="40.3411%" y="287.50"></text></g><g><title>analysis (115,386,173 samples, 29.67%)</title><rect x="10.6684%" y="341" width="29.6722%" height="15" fill="rgb(242,216,29)"/><text x="10.9184%" y="351.50">analysis</text></g><g><title>type_check_crate (74,863,024 samples, 19.25%)</title><rect x="21.0891%" y="325" width="19.2514%" height="15" fill="rgb(230,116,27)"/><text x="21.3391%" y="335.50">type_check_crate</text></g><g><title>wf_checking (9,226,032 samples, 2.37%)</title><rect x="37.9680%" y="309" width="2.3725%" height="15" fill="rgb(228,99,48)"/><text x="38.2180%" y="319.50">wf..</text></g><g><title>check_item_well_formed (2,250,718 samples, 0.58%)</title><rect x="39.7618%" y="293" width="0.5788%" height="15" fill="rgb(253,11,6)"/><text x="40.0118%" y="303.50"></text></g><g><title>compute_debuginfo_type_name (644,699 samples, 0.17%)</title><rect x="47.6067%" y="309" width="0.1658%" height="15" fill="rgb(247,143,39)"/><text x="47.8567%" y="319.50"></text></g><g><title>const_caller_location (503,412 samples, 0.13%)</title><rect x="47.7725%" y="309" width="0.1295%" height="15" fill="rgb(236,97,10)"/><text x="48.0225%" y="319.50"></text></g><g><title>item_attrs (409,153 samples, 0.11%)</title><rect x="48.3255%" y="277" width="0.1052%" height="15" fill="rgb(233,208,19)"/><text x="48.5755%" y="287.50"></text></g><g><title>metadata_decode_entry_item_attrs (394,312 samples, 0.10%)</title><rect x="48.3293%" y="261" width="0.1014%" height="15" fill="rgb(216,164,2)"/><text x="48.5793%" y="271.50"></text></g><g><title>codegen_fn_attrs (576,615 samples, 0.15%)</title><rect x="48.2958%" y="293" width="0.1483%" height="15" fill="rgb(220,129,5)"/><text x="48.5458%" y="303.50"></text></g><g><title>eval_to_const_value_raw (433,074 samples, 0.11%)</title><rect x="48.5679%" y="277" width="0.1114%" height="15" fill="rgb(242,17,10)"/><text x="48.8179%" y="287.50"></text></g><g><title>layout_of (442,204 samples, 0.11%)</title><rect x="48.7973%" y="245" width="0.1137%" height="15" fill="rgb(242,107,0)"/><text x="49.0473%" y="255.50"></text></g><g><title>layout_of (482,374 samples, 0.12%)</title><rect x="48.7896%" y="261" width="0.1240%" height="15" fill="rgb(251,28,31)"/><text x="49.0396%" y="271.50"></text></g><g><title>layout_of (995,998 samples, 0.26%)</title><rect x="48.6921%" y="277" width="0.2561%" height="15" fill="rgb(233,223,10)"/><text x="48.9421%" y="287.50"></text></g><g><title>layout_of (2,187,671 samples, 0.56%)</title><rect x="48.4716%" y="293" width="0.5626%" height="15" fill="rgb(215,21,27)"/><text x="48.7216%" y="303.50"></text></g><g><title>predicates_of (433,154 samples, 0.11%)</title><rect x="49.2817%" y="277" width="0.1114%" height="15" fill="rgb(232,23,21)"/><text x="49.5317%" y="287.50"></text></g><g><title>param_env (1,406,941 samples, 0.36%)</title><rect x="49.0342%" y="293" width="0.3618%" height="15" fill="rgb(244,5,23)"/><text x="49.2842%" y="303.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (751,448 samples, 0.19%)</title><rect x="49.3960%" y="293" width="0.1932%" height="15" fill="rgb(226,81,46)"/><text x="49.6460%" y="303.50"></text></g><g><title>normalize_projection_ty (611,217 samples, 0.16%)</title><rect x="49.4321%" y="277" width="0.1572%" height="15" fill="rgb(247,70,30)"/><text x="49.6821%" y="287.50"></text></g><g><title>fn_abi_of_instance (6,578,304 samples, 1.69%)</title><rect x="47.9086%" y="309" width="1.6916%" height="15" fill="rgb(212,68,19)"/><text x="48.1586%" y="319.50"></text></g><g><title>layout_of (500,576 samples, 0.13%)</title><rect x="49.7745%" y="261" width="0.1287%" height="15" fill="rgb(240,187,13)"/><text x="50.0245%" y="271.50"></text></g><g><title>layout_of (623,957 samples, 0.16%)</title><rect x="49.7543%" y="277" width="0.1605%" height="15" fill="rgb(223,113,26)"/><text x="50.0043%" y="287.50"></text></g><g><title>layout_of (755,288 samples, 0.19%)</title><rect x="49.7295%" y="293" width="0.1942%" height="15" fill="rgb(206,192,2)"/><text x="49.9795%" y="303.50"></text></g><g><title>layout_of (1,151,862 samples, 0.30%)</title><rect x="49.6395%" y="309" width="0.2962%" height="15" fill="rgb(241,108,4)"/><text x="49.8895%" y="319.50"></text></g><g><title>symbol_name (865,506 samples, 0.22%)</title><rect x="49.9460%" y="309" width="0.2226%" height="15" fill="rgb(247,173,49)"/><text x="50.1960%" y="319.50"></text></g><g><title>codegen_module (36,197,293 samples, 9.31%)</title><rect x="40.8921%" y="325" width="9.3083%" height="15" fill="rgb(224,114,35)"/><text x="41.1421%" y="335.50">codegen_module</text></g><g><title>codegen_crate (38,457,517 samples, 9.89%)</title><rect x="40.3418%" y="341" width="9.8896%" height="15" fill="rgb(245,159,27)"/><text x="40.5918%" y="351.50">codegen_crate</text></g><g><title>LLVM_module_codegen (112,114,018 samples, 28.83%)</title><rect x="50.2722%" y="325" width="28.8307%" height="15" fill="rgb(245,172,44)"/><text x="50.5222%" y="335.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (105,934,986 samples, 27.24%)</title><rect x="51.8611%" y="309" width="27.2417%" height="15" fill="rgb(236,23,11)"/><text x="52.1111%" y="319.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (117,574,714 samples, 30.23%)</title><rect x="50.2313%" y="341" width="30.2350%" height="15" fill="rgb(205,117,38)"/><text x="50.4813%" y="351.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,301,805 samples, 1.36%)</title><rect x="79.1029%" y="325" width="1.3634%" height="15" fill="rgb(237,72,25)"/><text x="79.3529%" y="335.50"></text></g><g><title>metadata_register_crate (6,659,856 samples, 1.71%)</title><rect x="85.4996%" y="293" width="1.7126%" height="15" fill="rgb(244,70,9)"/><text x="85.7496%" y="303.50"></text></g><g><title>metadata_register_crate (5,500,636 samples, 1.41%)</title><rect x="85.7977%" y="277" width="1.4145%" height="15" fill="rgb(217,125,39)"/><text x="86.0477%" y="287.50"></text></g><g><title>metadata_register_crate (4,742,338 samples, 1.22%)</title><rect x="85.9927%" y="261" width="1.2195%" height="15" fill="rgb(235,36,10)"/><text x="86.2427%" y="271.50"></text></g><g><title>macro_expand_crate (26,033,023 samples, 6.69%)</title><rect x="80.5725%" y="325" width="6.6945%" height="15" fill="rgb(251,123,47)"/><text x="80.8225%" y="335.50">macro_exp..</text></g><g><title>expand_crate (26,025,053 samples, 6.69%)</title><rect x="80.5745%" y="309" width="6.6925%" height="15" fill="rgb(221,13,13)"/><text x="80.8245%" y="319.50">expand_cr..</text></g><g><title>late_resolve_crate (1,813,669 samples, 0.47%)</title><rect x="87.3491%" y="309" width="0.4664%" height="15" fill="rgb(238,131,9)"/><text x="87.5991%" y="319.50"></text></g><g><title>configure_and_expand (28,730,910 samples, 7.39%)</title><rect x="80.4663%" y="341" width="7.3883%" height="15" fill="rgb(211,50,8)"/><text x="80.7163%" y="351.50">configure_..</text></g><g><title>resolve_crate (2,233,232 samples, 0.57%)</title><rect x="87.2803%" y="325" width="0.5743%" height="15" fill="rgb(245,182,24)"/><text x="87.5303%" y="335.50"></text></g><g><title>early_lint_checks (494,665 samples, 0.13%)</title><rect x="87.9186%" y="341" width="0.1272%" height="15" fill="rgb(242,14,37)"/><text x="88.1686%" y="351.50"></text></g><g><title>free_global_ctxt (6,634,667 samples, 1.71%)</title><rect x="88.0458%" y="341" width="1.7061%" height="15" fill="rgb(246,228,12)"/><text x="88.2958%" y="351.50"></text></g><g><title>metadata_decode_entry_optimized_mir (441,087 samples, 0.11%)</title><rect x="91.1905%" y="245" width="0.1134%" height="15" fill="rgb(213,55,15)"/><text x="91.4405%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,114,212 samples, 0.54%)</title><rect x="91.3039%" y="245" width="0.5437%" height="15" fill="rgb(209,9,3)"/><text x="91.5539%" y="255.50"></text></g><g><title>mir_for_ctfe (2,257,682 samples, 0.58%)</title><rect x="93.5844%" y="53" width="0.5806%" height="15" fill="rgb(230,59,30)"/><text x="93.8344%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (2,257,242 samples, 0.58%)</title><rect x="93.5846%" y="37" width="0.5805%" height="15" fill="rgb(209,121,21)"/><text x="93.8346%" y="47.50"></text></g><g><title>eval_to_const_value_raw (6,002,120 samples, 1.54%)</title><rect x="92.6219%" y="101" width="1.5435%" height="15" fill="rgb(220,109,13)"/><text x="92.8719%" y="111.50"></text></g><g><title>eval_to_const_value_raw (6,001,470 samples, 1.54%)</title><rect x="92.6221%" y="85" width="1.5433%" height="15" fill="rgb(232,18,1)"/><text x="92.8721%" y="95.50"></text></g><g><title>eval_to_allocation_raw (5,999,650 samples, 1.54%)</title><rect x="92.6226%" y="69" width="1.5428%" height="15" fill="rgb(215,41,42)"/><text x="92.8726%" y="79.50"></text></g><g><title>eval_to_const_value_raw (6,800,659 samples, 1.75%)</title><rect x="92.4188%" y="165" width="1.7488%" height="15" fill="rgb(224,123,36)"/><text x="92.6688%" y="175.50"></text></g><g><title>eval_to_const_value_raw (6,799,798 samples, 1.75%)</title><rect x="92.4190%" y="149" width="1.7486%" height="15" fill="rgb(240,125,3)"/><text x="92.6690%" y="159.50"></text></g><g><title>eval_to_allocation_raw (6,798,918 samples, 1.75%)</title><rect x="92.4193%" y="133" width="1.7484%" height="15" fill="rgb(205,98,50)"/><text x="92.6693%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,021,410 samples, 1.55%)</title><rect x="92.6192%" y="117" width="1.5484%" height="15" fill="rgb(205,185,37)"/><text x="92.8692%" y="127.50"></text></g><g><title>eval_to_const_value_raw (8,776,468 samples, 2.26%)</title><rect x="91.9108%" y="229" width="2.2569%" height="15" fill="rgb(238,207,15)"/><text x="92.1608%" y="239.50">e..</text></g><g><title>eval_to_const_value_raw (8,757,708 samples, 2.25%)</title><rect x="91.9157%" y="213" width="2.2521%" height="15" fill="rgb(213,199,42)"/><text x="92.1657%" y="223.50">e..</text></g><g><title>eval_to_allocation_raw (8,740,288 samples, 2.25%)</title><rect x="91.9201%" y="197" width="2.2476%" height="15" fill="rgb(235,201,11)"/><text x="92.1701%" y="207.50">e..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,811,869 samples, 1.75%)</title><rect x="92.4160%" y="181" width="1.7517%" height="15" fill="rgb(207,46,11)"/><text x="92.6660%" y="191.50"></text></g><g><title>optimized_mir (13,749,235 samples, 3.54%)</title><rect x="90.6338%" y="261" width="3.5357%" height="15" fill="rgb(241,35,35)"/><text x="90.8838%" y="271.50">opt..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,829,738 samples, 2.27%)</title><rect x="91.8989%" y="245" width="2.2706%" height="15" fill="rgb(243,32,47)"/><text x="92.1489%" y="255.50">t..</text></g><g><title>evaluate_obligation (530,326 samples, 0.14%)</title><rect x="94.6506%" y="229" width="0.1364%" height="15" fill="rgb(247,202,23)"/><text x="94.9006%" y="239.50"></text></g><g><title>codegen_fulfill_obligation (2,183,820 samples, 0.56%)</title><rect x="94.2785%" y="245" width="0.5616%" height="15" fill="rgb(219,102,11)"/><text x="94.5285%" y="255.50"></text></g><g><title>resolve_instance (3,458,692 samples, 0.89%)</title><rect x="94.1695%" y="261" width="0.8894%" height="15" fill="rgb(243,110,44)"/><text x="94.4195%" y="271.50"></text></g><g><title>eval_to_const_value_raw (434,703 samples, 0.11%)</title><rect x="95.0738%" y="245" width="0.1118%" height="15" fill="rgb(222,74,54)"/><text x="95.3238%" y="255.50"></text></g><g><title>eval_to_const_value_raw (431,853 samples, 0.11%)</title><rect x="95.0745%" y="229" width="0.1111%" height="15" fill="rgb(216,99,12)"/><text x="95.3245%" y="239.50"></text></g><g><title>eval_to_allocation_raw (426,653 samples, 0.11%)</title><rect x="95.0758%" y="213" width="0.1097%" height="15" fill="rgb(226,22,26)"/><text x="95.3258%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (690,036 samples, 0.18%)</title><rect x="95.0669%" y="261" width="0.1774%" height="15" fill="rgb(217,163,10)"/><text x="95.3169%" y="271.50"></text></g><g><title>upstream_monomorphizations_for (1,113,361 samples, 0.29%)</title><rect x="95.2449%" y="261" width="0.2863%" height="15" fill="rgb(213,25,53)"/><text x="95.4949%" y="271.50"></text></g><g><title>upstream_monomorphizations (1,102,591 samples, 0.28%)</title><rect x="95.2477%" y="245" width="0.2835%" height="15" fill="rgb(252,105,26)"/><text x="95.4977%" y="255.50"></text></g><g><title>exported_symbols (903,939 samples, 0.23%)</title><rect x="95.2988%" y="229" width="0.2325%" height="15" fill="rgb(220,39,43)"/><text x="95.5488%" y="239.50"></text></g><g><title>metadata_decode_entry_exported_symbols (895,179 samples, 0.23%)</title><rect x="95.3010%" y="213" width="0.2302%" height="15" fill="rgb(229,68,48)"/><text x="95.5510%" y="223.50"></text></g><g><title>monomorphization_collector_graph_walk (21,191,974 samples, 5.45%)</title><rect x="90.2464%" y="277" width="5.4496%" height="15" fill="rgb(252,8,32)"/><text x="90.4964%" y="287.50">monomor..</text></g><g><title>vtable_entries (640,907 samples, 0.16%)</title><rect x="95.5312%" y="261" width="0.1648%" height="15" fill="rgb(223,20,43)"/><text x="95.7812%" y="271.50"></text></g><g><title>monomorphization_collector (21,258,544 samples, 5.47%)</title><rect x="90.2457%" y="293" width="5.4667%" height="15" fill="rgb(229,81,49)"/><text x="90.4957%" y="303.50">monomor..</text></g><g><title>assert_symbols_are_distinct (842,568 samples, 0.22%)</title><rect x="95.7153%" y="277" width="0.2167%" height="15" fill="rgb(236,28,36)"/><text x="95.9653%" y="287.50"></text></g><g><title>symbol_name (786,328 samples, 0.20%)</title><rect x="95.7297%" y="261" width="0.2022%" height="15" fill="rgb(249,185,26)"/><text x="95.9797%" y="271.50"></text></g><g><title>collect_and_partition_mono_items (22,475,656 samples, 5.78%)</title><rect x="90.2395%" y="309" width="5.7797%" height="15" fill="rgb(249,174,33)"/><text x="90.4895%" y="319.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (1,192,962 samples, 0.31%)</title><rect x="95.7125%" y="293" width="0.3068%" height="15" fill="rgb(233,201,37)"/><text x="95.9625%" y="303.50"></text></g><g><title>exported_symbols (22,635,679 samples, 5.82%)</title><rect x="90.2277%" y="325" width="5.8209%" height="15" fill="rgb(221,78,26)"/><text x="90.4777%" y="335.50">exporte..</text></g><g><title>layout_of (506,536 samples, 0.13%)</title><rect x="96.7065%" y="261" width="0.1303%" height="15" fill="rgb(250,127,30)"/><text x="96.9565%" y="271.50"></text></g><g><title>layout_of (472,896 samples, 0.12%)</title><rect x="96.7151%" y="245" width="0.1216%" height="15" fill="rgb(230,49,44)"/><text x="96.9651%" y="255.50"></text></g><g><title>layout_of (566,986 samples, 0.15%)</title><rect x="96.6963%" y="277" width="0.1458%" height="15" fill="rgb(229,67,23)"/><text x="96.9463%" y="287.50"></text></g><g><title>layout_of (701,169 samples, 0.18%)</title><rect x="96.6840%" y="293" width="0.1803%" height="15" fill="rgb(249,83,47)"/><text x="96.9340%" y="303.50"></text></g><g><title>layout_of (1,102,333 samples, 0.28%)</title><rect x="96.5881%" y="309" width="0.2835%" height="15" fill="rgb(215,43,3)"/><text x="96.8381%" y="319.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,222,201 samples, 0.57%)</title><rect x="96.8715%" y="309" width="0.5715%" height="15" fill="rgb(238,154,13)"/><text x="97.1215%" y="319.50"></text></g><g><title>optimized_mir (5,283,612 samples, 1.36%)</title><rect x="96.0914%" y="325" width="1.3587%" height="15" fill="rgb(219,56,2)"/><text x="96.3414%" y="335.50"></text></g><g><title>generate_crate_metadata (30,049,152 samples, 7.73%)</title><rect x="89.7520%" y="341" width="7.7273%" height="15" fill="rgb(233,0,4)"/><text x="90.0020%" y="351.50">generate_cr..</text></g><g><title>hir_lowering (3,317,344 samples, 0.85%)</title><rect x="97.4792%" y="341" width="0.8531%" height="15" fill="rgb(235,30,7)"/><text x="97.7292%" y="351.50"></text></g><g><title>link_crate (2,267,723 samples, 0.58%)</title><rect x="98.3376%" y="325" width="0.5832%" height="15" fill="rgb(250,79,13)"/><text x="98.5876%" y="335.50"></text></g><g><title>link_binary (2,235,773 samples, 0.57%)</title><rect x="98.3458%" y="309" width="0.5749%" height="15" fill="rgb(211,146,34)"/><text x="98.5958%" y="319.50"></text></g><g><title>link_rlib (1,561,676 samples, 0.40%)</title><rect x="98.5192%" y="293" width="0.4016%" height="15" fill="rgb(228,22,38)"/><text x="98.7692%" y="303.50"></text></g><g><title>link (2,297,823 samples, 0.59%)</title><rect x="98.3323%" y="341" width="0.5909%" height="15" fill="rgb(235,168,5)"/><text x="98.5823%" y="351.50"></text></g><g><title>self_profile_alloc_query_strings (3,109,712 samples, 0.80%)</title><rect x="99.0713%" y="341" width="0.7997%" height="15" fill="rgb(221,155,16)"/><text x="99.3213%" y="351.50"></text></g><g><title>all (388,870,128 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="383.50"></text></g><g><title>rustc (388,870,128 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="367.50">rustc</text></g><g><title>write_crate_metadata (432,515 samples, 0.11%)</title><rect x="99.8888%" y="341" width="0.1112%" height="15" fill="rgb(234,103,6)"/><text x="100.1388%" y="351.50"></text></g></svg></svg>