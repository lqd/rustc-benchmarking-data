<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (52,289,320 samples, 13.95%)</title><rect x="0.1356%" y="149" width="13.9476%" height="15" fill="rgb(227,0,7)"/><text x="0.3856%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (588,379 samples, 0.16%)</title><rect x="17.0689%" y="37" width="0.1569%" height="15" fill="rgb(217,0,24)"/><text x="17.3189%" y="47.50"></text></g><g><title>resolve_instance (660,527 samples, 0.18%)</title><rect x="17.2258%" y="37" width="0.1762%" height="15" fill="rgb(221,193,54)"/><text x="17.4758%" y="47.50"></text></g><g><title>thir_body (743,087 samples, 0.20%)</title><rect x="17.4075%" y="37" width="0.1982%" height="15" fill="rgb(248,212,6)"/><text x="17.6575%" y="47.50"></text></g><g><title>mir_const (5,207,392 samples, 1.39%)</title><rect x="16.2210%" y="85" width="1.3890%" height="15" fill="rgb(208,68,35)"/><text x="16.4710%" y="95.50"></text></g><g><title>unsafety_check_result (4,378,694 samples, 1.17%)</title><rect x="16.4420%" y="69" width="1.1680%" height="15" fill="rgb(232,128,0)"/><text x="16.6920%" y="79.50"></text></g><g><title>mir_built (3,892,682 samples, 1.04%)</title><rect x="16.5717%" y="53" width="1.0383%" height="15" fill="rgb(207,160,47)"/><text x="16.8217%" y="63.50"></text></g><g><title>mir_promoted (5,992,698 samples, 1.60%)</title><rect x="16.0602%" y="101" width="1.5985%" height="15" fill="rgb(228,23,34)"/><text x="16.3102%" y="111.50"></text></g><g><title>type_op_prove_predicate (833,878 samples, 0.22%)</title><rect x="17.7734%" y="101" width="0.2224%" height="15" fill="rgb(218,30,26)"/><text x="18.0234%" y="111.50"></text></g><g><title>MIR_borrow_checking (14,475,838 samples, 3.86%)</title><rect x="14.1362%" y="133" width="3.8613%" height="15" fill="rgb(220,122,19)"/><text x="14.3862%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (14,378,708 samples, 3.84%)</title><rect x="14.1621%" y="117" width="3.8354%" height="15" fill="rgb(250,228,42)"/><text x="14.4121%" y="127.50">mir_..</text></g><g><title>check_mod_attrs (487,225 samples, 0.13%)</title><rect x="18.0702%" y="117" width="0.1300%" height="15" fill="rgb(240,193,28)"/><text x="18.3202%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (401,743 samples, 0.11%)</title><rect x="18.2368%" y="117" width="0.1072%" height="15" fill="rgb(216,20,37)"/><text x="18.4868%" y="127.50"></text></g><g><title>misc_checking_1 (1,080,141 samples, 0.29%)</title><rect x="18.0651%" y="133" width="0.2881%" height="15" fill="rgb(206,188,39)"/><text x="18.3151%" y="143.50"></text></g><g><title>misc_checking_2 (615,356 samples, 0.16%)</title><rect x="18.3532%" y="133" width="0.1641%" height="15" fill="rgb(217,207,13)"/><text x="18.6032%" y="143.50"></text></g><g><title>crate_lints (2,018,990 samples, 0.54%)</title><rect x="18.6231%" y="101" width="0.5385%" height="15" fill="rgb(231,73,38)"/><text x="18.8731%" y="111.50"></text></g><g><title>type_of (1,072,189 samples, 0.29%)</title><rect x="18.8757%" y="85" width="0.2860%" height="15" fill="rgb(225,20,46)"/><text x="19.1257%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (839,335 samples, 0.22%)</title><rect x="18.9378%" y="69" width="0.2239%" height="15" fill="rgb(210,31,41)"/><text x="19.1878%" y="79.50"></text></g><g><title>lint_checking (2,262,522 samples, 0.60%)</title><rect x="18.6227%" y="117" width="0.6035%" height="15" fill="rgb(221,200,47)"/><text x="18.8727%" y="127.50"></text></g><g><title>privacy_checking_modules (428,285 samples, 0.11%)</title><rect x="19.2634%" y="117" width="0.1142%" height="15" fill="rgb(226,26,5)"/><text x="19.5134%" y="127.50"></text></g><g><title>check_mod_privacy (426,015 samples, 0.11%)</title><rect x="19.2640%" y="101" width="0.1136%" height="15" fill="rgb(249,33,26)"/><text x="19.5140%" y="111.50"></text></g><g><title>misc_checking_3 (3,238,393 samples, 0.86%)</title><rect x="18.5173%" y="133" width="0.8638%" height="15" fill="rgb(235,183,28)"/><text x="18.7673%" y="143.50"></text></g><g><title>impl_parent (1,847,432 samples, 0.49%)</title><rect x="20.0059%" y="69" width="0.4928%" height="15" fill="rgb(221,5,38)"/><text x="20.2559%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,026,939 samples, 0.27%)</title><rect x="20.2248%" y="53" width="0.2739%" height="15" fill="rgb(247,18,42)"/><text x="20.4748%" y="63.50"></text></g><g><title>impl_trait_ref (4,250,969 samples, 1.13%)</title><rect x="20.4987%" y="69" width="1.1339%" height="15" fill="rgb(241,131,45)"/><text x="20.7487%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,617,543 samples, 0.96%)</title><rect x="20.6677%" y="53" width="0.9649%" height="15" fill="rgb(249,31,29)"/><text x="20.9177%" y="63.50"></text></g><g><title>coherent_trait (8,895,589 samples, 2.37%)</title><rect x="19.3985%" y="101" width="2.3728%" height="15" fill="rgb(225,111,53)"/><text x="19.6485%" y="111.50">co..</text></g><g><title>specialization_graph_of (8,879,448 samples, 2.37%)</title><rect x="19.4028%" y="85" width="2.3685%" height="15" fill="rgb(238,160,17)"/><text x="19.6528%" y="95.50">sp..</text></g><g><title>trait_impls_of (518,216 samples, 0.14%)</title><rect x="21.6330%" y="69" width="0.1382%" height="15" fill="rgb(214,148,48)"/><text x="21.8830%" y="79.50"></text></g><g><title>coherence_checking (8,956,571 samples, 2.39%)</title><rect x="19.3942%" y="117" width="2.3891%" height="15" fill="rgb(232,36,49)"/><text x="19.6442%" y="127.50">co..</text></g><g><title>trait_impls_of (531,436 samples, 0.14%)</title><rect x="24.9829%" y="53" width="0.1418%" height="15" fill="rgb(209,103,24)"/><text x="25.2329%" y="63.50"></text></g><g><title>evaluate_obligation (2,092,143 samples, 0.56%)</title><rect x="24.5691%" y="69" width="0.5581%" height="15" fill="rgb(229,88,8)"/><text x="24.8191%" y="79.50"></text></g><g><title>evaluate_obligation (395,304 samples, 0.11%)</title><rect x="26.3961%" y="53" width="0.1054%" height="15" fill="rgb(213,181,19)"/><text x="26.6461%" y="63.50"></text></g><g><title>typeck (4,780,958 samples, 1.28%)</title><rect x="25.4166%" y="69" width="1.2753%" height="15" fill="rgb(254,191,54)"/><text x="25.6666%" y="79.50"></text></g><g><title>item_bodies_checking (18,422,446 samples, 4.91%)</title><rect x="21.7894%" y="117" width="4.9140%" height="15" fill="rgb(241,83,37)"/><text x="22.0394%" y="127.50">item_b..</text></g><g><title>typeck_item_bodies (18,419,726 samples, 4.91%)</title><rect x="21.7902%" y="101" width="4.9133%" height="15" fill="rgb(233,36,39)"/><text x="22.0402%" y="111.50">typeck..</text></g><g><title>typeck (18,362,256 samples, 4.90%)</title><rect x="21.8055%" y="85" width="4.8979%" height="15" fill="rgb(226,3,54)"/><text x="22.0555%" y="95.50">typeck</text></g><g><title>item_types_checking (573,626 samples, 0.15%)</title><rect x="26.7034%" y="117" width="0.1530%" height="15" fill="rgb(245,192,40)"/><text x="26.9534%" y="127.50"></text></g><g><title>check_mod_item_types (570,716 samples, 0.15%)</title><rect x="26.7042%" y="101" width="0.1522%" height="15" fill="rgb(238,167,29)"/><text x="26.9542%" y="111.50"></text></g><g><title>type_collecting (1,128,341 samples, 0.30%)</title><rect x="26.8569%" y="117" width="0.3010%" height="15" fill="rgb(232,182,51)"/><text x="27.1069%" y="127.50"></text></g><g><title>collect_mod_item_types (1,120,781 samples, 0.30%)</title><rect x="26.8589%" y="101" width="0.2990%" height="15" fill="rgb(231,60,39)"/><text x="27.1089%" y="111.50"></text></g><g><title>check_impl_item_well_formed (2,066,959 samples, 0.55%)</title><rect x="27.1885%" y="101" width="0.5513%" height="15" fill="rgb(208,69,12)"/><text x="27.4385%" y="111.50"></text></g><g><title>analysis (52,237,160 samples, 13.93%)</title><rect x="14.0832%" y="149" width="13.9337%" height="15" fill="rgb(235,93,37)"/><text x="14.3332%" y="159.50">analysis</text></g><g><title>type_check_crate (32,375,378 samples, 8.64%)</title><rect x="19.3811%" y="133" width="8.6358%" height="15" fill="rgb(213,116,39)"/><text x="19.6311%" y="143.50">type_check_c..</text></g><g><title>wf_checking (3,216,922 samples, 0.86%)</title><rect x="27.1588%" y="117" width="0.8581%" height="15" fill="rgb(222,207,29)"/><text x="27.4088%" y="127.50"></text></g><g><title>check_item_well_formed (1,038,751 samples, 0.28%)</title><rect x="27.7398%" y="101" width="0.2771%" height="15" fill="rgb(206,96,30)"/><text x="27.9898%" y="111.50"></text></g><g><title>compute_debuginfo_type_name (736,060 samples, 0.20%)</title><rect x="38.0770%" y="117" width="0.1963%" height="15" fill="rgb(218,138,4)"/><text x="38.3270%" y="127.50"></text></g><g><title>const_caller_location (618,073 samples, 0.16%)</title><rect x="38.2733%" y="117" width="0.1649%" height="15" fill="rgb(250,191,14)"/><text x="38.5233%" y="127.50"></text></g><g><title>codegen_fn_attrs (517,416 samples, 0.14%)</title><rect x="38.9540%" y="101" width="0.1380%" height="15" fill="rgb(239,60,40)"/><text x="39.2040%" y="111.50"></text></g><g><title>layout_of (425,765 samples, 0.11%)</title><rect x="39.4784%" y="37" width="0.1136%" height="15" fill="rgb(206,27,48)"/><text x="39.7284%" y="47.50"></text></g><g><title>layout_of (633,626 samples, 0.17%)</title><rect x="39.4405%" y="53" width="0.1690%" height="15" fill="rgb(225,35,8)"/><text x="39.6905%" y="63.50"></text></g><g><title>layout_of (757,457 samples, 0.20%)</title><rect x="39.4180%" y="69" width="0.2020%" height="15" fill="rgb(250,213,24)"/><text x="39.6680%" y="79.50"></text></g><g><title>layout_of (1,344,366 samples, 0.36%)</title><rect x="39.2837%" y="85" width="0.3586%" height="15" fill="rgb(247,123,22)"/><text x="39.5337%" y="95.50"></text></g><g><title>layout_of (2,183,814 samples, 0.58%)</title><rect x="39.1118%" y="101" width="0.5825%" height="15" fill="rgb(231,138,38)"/><text x="39.3618%" y="111.50"></text></g><g><title>predicates_of (823,925 samples, 0.22%)</title><rect x="40.0927%" y="85" width="0.2198%" height="15" fill="rgb(231,145,46)"/><text x="40.3427%" y="95.50"></text></g><g><title>predicates_defined_on (592,845 samples, 0.16%)</title><rect x="40.1544%" y="69" width="0.1581%" height="15" fill="rgb(251,118,11)"/><text x="40.4044%" y="79.50"></text></g><g><title>param_env (2,321,649 samples, 0.62%)</title><rect x="39.6943%" y="101" width="0.6193%" height="15" fill="rgb(217,147,25)"/><text x="39.9443%" y="111.50"></text></g><g><title>fn_abi_of_instance (7,246,628 samples, 1.93%)</title><rect x="38.4426%" y="117" width="1.9330%" height="15" fill="rgb(247,81,37)"/><text x="38.6926%" y="127.50">f..</text></g><g><title>layout_of (390,524 samples, 0.10%)</title><rect x="40.9031%" y="37" width="0.1042%" height="15" fill="rgb(209,12,38)"/><text x="41.1531%" y="47.50"></text></g><g><title>layout_of (532,835 samples, 0.14%)</title><rect x="40.8732%" y="53" width="0.1421%" height="15" fill="rgb(227,1,9)"/><text x="41.1232%" y="63.50"></text></g><g><title>layout_of (1,011,941 samples, 0.27%)</title><rect x="40.7667%" y="69" width="0.2699%" height="15" fill="rgb(248,47,43)"/><text x="41.0167%" y="79.50"></text></g><g><title>layout_of (1,299,953 samples, 0.35%)</title><rect x="40.7196%" y="85" width="0.3467%" height="15" fill="rgb(221,10,30)"/><text x="40.9696%" y="95.50"></text></g><g><title>layout_of (1,800,438 samples, 0.48%)</title><rect x="40.6122%" y="101" width="0.4802%" height="15" fill="rgb(210,229,1)"/><text x="40.8622%" y="111.50"></text></g><g><title>layout_of (2,543,788 samples, 0.68%)</title><rect x="40.4557%" y="117" width="0.6785%" height="15" fill="rgb(222,148,37)"/><text x="40.7057%" y="127.50"></text></g><g><title>symbol_name (572,769 samples, 0.15%)</title><rect x="41.1409%" y="117" width="0.1528%" height="15" fill="rgb(234,67,33)"/><text x="41.3909%" y="127.50"></text></g><g><title>codegen_module (47,640,154 samples, 12.71%)</title><rect x="28.6177%" y="133" width="12.7075%" height="15" fill="rgb(247,98,35)"/><text x="28.8677%" y="143.50">codegen_module</text></g><g><title>codegen_crate (49,962,566 samples, 13.33%)</title><rect x="28.0187%" y="149" width="13.3270%" height="15" fill="rgb(247,138,52)"/><text x="28.2687%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (166,371,114 samples, 44.38%)</title><rect x="41.3898%" y="133" width="44.3777%" height="15" fill="rgb(213,79,30)"/><text x="41.6398%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (158,646,437 samples, 42.32%)</title><rect x="43.4502%" y="117" width="42.3172%" height="15" fill="rgb(246,177,23)"/><text x="43.7002%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (173,908,733 samples, 46.39%)</title><rect x="41.3457%" y="149" width="46.3883%" height="15" fill="rgb(230,62,27)"/><text x="41.5957%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,372,287 samples, 1.97%)</title><rect x="85.7675%" y="133" width="1.9665%" height="15" fill="rgb(216,154,8)"/><text x="86.0175%" y="143.50">L..</text></g><g><title>metadata_register_crate (1,235,792 samples, 0.33%)</title><rect x="89.5746%" y="101" width="0.3296%" height="15" fill="rgb(244,35,45)"/><text x="89.8246%" y="111.50"></text></g><g><title>metadata_register_crate (458,956 samples, 0.12%)</title><rect x="89.7818%" y="85" width="0.1224%" height="15" fill="rgb(251,115,12)"/><text x="90.0318%" y="95.50"></text></g><g><title>macro_expand_crate (7,862,710 samples, 2.10%)</title><rect x="87.8189%" y="133" width="2.0973%" height="15" fill="rgb(240,54,50)"/><text x="88.0689%" y="143.50">m..</text></g><g><title>expand_crate (7,846,110 samples, 2.09%)</title><rect x="87.8233%" y="117" width="2.0929%" height="15" fill="rgb(233,84,52)"/><text x="88.0733%" y="127.50">e..</text></g><g><title>late_resolve_crate (4,488,246 samples, 1.20%)</title><rect x="89.9786%" y="117" width="1.1972%" height="15" fill="rgb(207,117,47)"/><text x="90.2286%" y="127.50"></text></g><g><title>configure_and_expand (12,971,212 samples, 3.46%)</title><rect x="87.7339%" y="149" width="3.4599%" height="15" fill="rgb(249,43,39)"/><text x="87.9839%" y="159.50">con..</text></g><g><title>resolve_crate (4,639,717 samples, 1.24%)</title><rect x="89.9563%" y="133" width="1.2376%" height="15" fill="rgb(209,38,44)"/><text x="90.2063%" y="143.50"></text></g><g><title>free_global_ctxt (5,651,657 samples, 1.51%)</title><rect x="91.2992%" y="149" width="1.5075%" height="15" fill="rgb(236,212,23)"/><text x="91.5492%" y="159.50"></text></g><g><title>item_attrs (515,634 samples, 0.14%)</title><rect x="93.3836%" y="53" width="0.1375%" height="15" fill="rgb(242,79,21)"/><text x="93.6336%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (493,914 samples, 0.13%)</title><rect x="93.3894%" y="37" width="0.1317%" height="15" fill="rgb(211,96,35)"/><text x="93.6394%" y="47.50"></text></g><g><title>codegen_fn_attrs (828,246 samples, 0.22%)</title><rect x="93.3484%" y="69" width="0.2209%" height="15" fill="rgb(253,215,40)"/><text x="93.5984%" y="79.50"></text></g><g><title>mir_shims (413,126 samples, 0.11%)</title><rect x="93.6477%" y="69" width="0.1102%" height="15" fill="rgb(211,81,21)"/><text x="93.8977%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (883,689 samples, 0.24%)</title><rect x="94.3730%" y="53" width="0.2357%" height="15" fill="rgb(208,190,38)"/><text x="94.6230%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,219,304 samples, 0.59%)</title><rect x="94.6088%" y="53" width="0.5920%" height="15" fill="rgb(235,213,38)"/><text x="94.8588%" y="63.50"></text></g><g><title>resolve_instance (400,814 samples, 0.11%)</title><rect x="95.2007%" y="53" width="0.1069%" height="15" fill="rgb(237,122,38)"/><text x="95.4507%" y="63.50"></text></g><g><title>optimized_mir (6,014,512 samples, 1.60%)</title><rect x="93.7579%" y="69" width="1.6043%" height="15" fill="rgb(244,218,35)"/><text x="94.0079%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,527,966 samples, 0.41%)</title><rect x="95.4955%" y="53" width="0.4076%" height="15" fill="rgb(240,68,47)"/><text x="95.7455%" y="63.50"></text></g><g><title>specialization_graph_of (1,314,853 samples, 0.35%)</title><rect x="96.0348%" y="53" width="0.3507%" height="15" fill="rgb(210,16,53)"/><text x="96.2848%" y="63.50"></text></g><g><title>impl_trait_ref (438,143 samples, 0.12%)</title><rect x="96.2687%" y="37" width="0.1169%" height="15" fill="rgb(235,124,12)"/><text x="96.5187%" y="47.50"></text></g><g><title>resolve_instance (4,028,481 samples, 1.07%)</title><rect x="95.3622%" y="69" width="1.0746%" height="15" fill="rgb(224,169,11)"/><text x="95.6122%" y="79.50"></text></g><g><title>resolve_instance (568,306 samples, 0.15%)</title><rect x="96.6719%" y="53" width="0.1516%" height="15" fill="rgb(250,166,2)"/><text x="96.9219%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (14,209,673 samples, 3.79%)</title><rect x="93.0339%" y="85" width="3.7903%" height="15" fill="rgb(242,216,29)"/><text x="93.2839%" y="95.50">mono..</text></g><g><title>vtable_entries (1,062,301 samples, 0.28%)</title><rect x="96.5409%" y="69" width="0.2834%" height="15" fill="rgb(230,116,27)"/><text x="96.7909%" y="79.50"></text></g><g><title>monomorphization_collector (14,264,194 samples, 3.80%)</title><rect x="93.0332%" y="101" width="3.8048%" height="15" fill="rgb(228,99,48)"/><text x="93.2832%" y="111.50">mono..</text></g><g><title>assert_symbols_are_distinct (1,067,890 samples, 0.28%)</title><rect x="96.8412%" y="85" width="0.2848%" height="15" fill="rgb(253,11,6)"/><text x="97.0912%" y="95.50"></text></g><g><title>symbol_name (966,340 samples, 0.26%)</title><rect x="96.8682%" y="69" width="0.2578%" height="15" fill="rgb(247,143,39)"/><text x="97.1182%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (15,957,642 samples, 4.26%)</title><rect x="93.0234%" y="117" width="4.2565%" height="15" fill="rgb(236,97,10)"/><text x="93.2734%" y="127.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,656,787 samples, 0.44%)</title><rect x="96.8380%" y="101" width="0.4419%" height="15" fill="rgb(233,208,19)"/><text x="97.0880%" y="111.50"></text></g><g><title>cgu_partitioning (577,065 samples, 0.15%)</title><rect x="97.1260%" y="85" width="0.1539%" height="15" fill="rgb(216,164,2)"/><text x="97.3760%" y="95.50"></text></g><g><title>exported_symbols (16,084,353 samples, 4.29%)</title><rect x="93.0054%" y="133" width="4.2903%" height="15" fill="rgb(220,129,5)"/><text x="93.2554%" y="143.50">expor..</text></g><g><title>layout_of (383,383 samples, 0.10%)</title><rect x="97.4729%" y="117" width="0.1023%" height="15" fill="rgb(242,17,10)"/><text x="97.7229%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (741,559 samples, 0.20%)</title><rect x="97.5752%" y="117" width="0.1978%" height="15" fill="rgb(242,107,0)"/><text x="97.8252%" y="127.50"></text></g><g><title>optimized_mir (1,848,071 samples, 0.49%)</title><rect x="97.3038%" y="133" width="0.4930%" height="15" fill="rgb(251,28,31)"/><text x="97.5538%" y="143.50"></text></g><g><title>generate_crate_metadata (18,731,860 samples, 5.00%)</title><rect x="92.8067%" y="149" width="4.9965%" height="15" fill="rgb(233,223,10)"/><text x="93.0567%" y="159.50">genera..</text></g><g><title>hir_lowering (1,652,136 samples, 0.44%)</title><rect x="97.8032%" y="149" width="0.4407%" height="15" fill="rgb(215,21,27)"/><text x="98.0532%" y="159.50"></text></g><g><title>link_crate (1,962,990 samples, 0.52%)</title><rect x="98.2500%" y="133" width="0.5236%" height="15" fill="rgb(232,23,21)"/><text x="98.5000%" y="143.50"></text></g><g><title>link_binary (1,940,479 samples, 0.52%)</title><rect x="98.2560%" y="117" width="0.5176%" height="15" fill="rgb(244,5,23)"/><text x="98.5060%" y="127.50"></text></g><g><title>link_rlib (1,348,364 samples, 0.36%)</title><rect x="98.4140%" y="101" width="0.3597%" height="15" fill="rgb(226,81,46)"/><text x="98.6640%" y="111.50"></text></g><g><title>link (1,994,851 samples, 0.53%)</title><rect x="98.2439%" y="149" width="0.5321%" height="15" fill="rgb(247,70,30)"/><text x="98.4939%" y="159.50"></text></g><g><title>parse_crate (2,657,427 samples, 0.71%)</title><rect x="98.7760%" y="149" width="0.7088%" height="15" fill="rgb(212,68,19)"/><text x="99.0260%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (1,321,284 samples, 0.35%)</title><rect x="99.5433%" y="149" width="0.3524%" height="15" fill="rgb(240,187,13)"/><text x="99.7933%" y="159.50"></text></g><g><title>all (374,897,901 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (374,897,901 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>