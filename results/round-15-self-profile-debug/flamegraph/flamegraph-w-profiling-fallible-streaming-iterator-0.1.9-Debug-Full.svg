<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,449,744 samples, 1.84%)</title><rect x="0.6175%" y="197" width="1.8378%" height="15" fill="rgb(227,0,7)"/><text x="0.8675%" y="207.50">L..</text></g><g><title>codegen_fn_attrs (173,602 samples, 0.13%)</title><rect x="13.4967%" y="101" width="0.1302%" height="15" fill="rgb(217,0,24)"/><text x="13.7467%" y="111.50"></text></g><g><title>is_copy_raw (1,893,989 samples, 1.42%)</title><rect x="15.9675%" y="69" width="1.4209%" height="15" fill="rgb(221,193,54)"/><text x="16.2175%" y="79.50"></text></g><g><title>evaluate_obligation (1,675,405 samples, 1.26%)</title><rect x="16.1315%" y="53" width="1.2569%" height="15" fill="rgb(248,212,6)"/><text x="16.3815%" y="63.50"></text></g><g><title>needs_drop_raw (2,153,693 samples, 1.62%)</title><rect x="15.7876%" y="85" width="1.6157%" height="15" fill="rgb(208,68,35)"/><text x="16.0376%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (296,334 samples, 0.22%)</title><rect x="17.5334%" y="69" width="0.2223%" height="15" fill="rgb(232,128,0)"/><text x="17.7834%" y="79.50"></text></g><g><title>specialization_graph_of (581,805 samples, 0.44%)</title><rect x="17.7620%" y="69" width="0.4365%" height="15" fill="rgb(207,160,47)"/><text x="18.0120%" y="79.50"></text></g><g><title>impl_trait_ref (170,472 samples, 0.13%)</title><rect x="18.0706%" y="53" width="0.1279%" height="15" fill="rgb(228,23,34)"/><text x="18.3206%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (145,011 samples, 0.11%)</title><rect x="18.0897%" y="37" width="0.1088%" height="15" fill="rgb(218,30,26)"/><text x="18.3397%" y="47.50"></text></g><g><title>resolve_instance (1,102,920 samples, 0.83%)</title><rect x="17.4033%" y="85" width="0.8274%" height="15" fill="rgb(220,122,19)"/><text x="17.6533%" y="95.50"></text></g><g><title>thir_body (918,198 samples, 0.69%)</title><rect x="18.2554%" y="85" width="0.6888%" height="15" fill="rgb(250,228,42)"/><text x="18.5054%" y="95.50"></text></g><g><title>mir_const (8,834,562 samples, 6.63%)</title><rect x="12.4062%" y="133" width="6.6277%" height="15" fill="rgb(240,193,28)"/><text x="12.6562%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,825,314 samples, 5.87%)</title><rect x="13.1634%" y="117" width="5.8706%" height="15" fill="rgb(216,20,37)"/><text x="13.4134%" y="127.50">unsafet..</text></g><g><title>mir_built (7,207,450 samples, 5.41%)</title><rect x="13.6269%" y="101" width="5.4070%" height="15" fill="rgb(206,188,39)"/><text x="13.8769%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (9,642,868 samples, 7.23%)</title><rect x="11.8346%" y="149" width="7.2341%" height="15" fill="rgb(217,207,13)"/><text x="12.0846%" y="159.50">mir_promot..</text></g><g><title>type_op_normalize_fn_sig (938,614 samples, 0.70%)</title><rect x="19.0687%" y="149" width="0.7041%" height="15" fill="rgb(231,73,38)"/><text x="19.3187%" y="159.50"></text></g><g><title>normalize_projection_ty (414,756 samples, 0.31%)</title><rect x="19.4617%" y="133" width="0.3112%" height="15" fill="rgb(225,20,46)"/><text x="19.7117%" y="143.50"></text></g><g><title>type_op_normalize_predicate (742,326 samples, 0.56%)</title><rect x="19.7729%" y="149" width="0.5569%" height="15" fill="rgb(210,31,41)"/><text x="20.0229%" y="159.50"></text></g><g><title>normalize_projection_ty (280,672 samples, 0.21%)</title><rect x="20.1192%" y="133" width="0.2106%" height="15" fill="rgb(221,200,47)"/><text x="20.3692%" y="143.50"></text></g><g><title>type_op_normalize_ty (337,065 samples, 0.25%)</title><rect x="20.3298%" y="149" width="0.2529%" height="15" fill="rgb(226,26,5)"/><text x="20.5798%" y="159.50"></text></g><g><title>MIR_borrow_checking (27,078,703 samples, 20.31%)</title><rect x="2.8886%" y="181" width="20.3145%" height="15" fill="rgb(249,33,26)"/><text x="3.1386%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,952,113 samples, 20.22%)</title><rect x="2.9835%" y="165" width="20.2195%" height="15" fill="rgb(235,183,28)"/><text x="3.2335%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (3,492,931 samples, 2.62%)</title><rect x="20.5826%" y="149" width="2.6204%" height="15" fill="rgb(221,5,38)"/><text x="20.8326%" y="159.50">ty..</text></g><g><title>hir_module_items (339,884 samples, 0.25%)</title><rect x="23.2261%" y="181" width="0.2550%" height="15" fill="rgb(247,18,42)"/><text x="23.4761%" y="191.50"></text></g><g><title>get_lang_items (176,621 samples, 0.13%)</title><rect x="23.9764%" y="133" width="0.1325%" height="15" fill="rgb(241,131,45)"/><text x="24.2264%" y="143.50"></text></g><g><title>should_inherit_track_caller (286,333 samples, 0.21%)</title><rect x="24.1089%" y="133" width="0.2148%" height="15" fill="rgb(249,31,29)"/><text x="24.3589%" y="143.50"></text></g><g><title>codegen_fn_attrs (646,046 samples, 0.48%)</title><rect x="23.8619%" y="149" width="0.4847%" height="15" fill="rgb(225,111,53)"/><text x="24.1119%" y="159.50"></text></g><g><title>check_mod_attrs (1,127,912 samples, 0.85%)</title><rect x="23.5007%" y="165" width="0.8462%" height="15" fill="rgb(238,160,17)"/><text x="23.7507%" y="175.50"></text></g><g><title>check_mod_const_bodies (271,312 samples, 0.20%)</title><rect x="24.3468%" y="165" width="0.2035%" height="15" fill="rgb(214,148,48)"/><text x="24.5968%" y="175.50"></text></g><g><title>lookup_deprecation_entry (243,982 samples, 0.18%)</title><rect x="24.9148%" y="149" width="0.1830%" height="15" fill="rgb(232,36,49)"/><text x="25.1648%" y="159.50"></text></g><g><title>stability_index (186,322 samples, 0.14%)</title><rect x="24.9580%" y="133" width="0.1398%" height="15" fill="rgb(209,103,24)"/><text x="25.2080%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (637,657 samples, 0.48%)</title><rect x="24.6657%" y="165" width="0.4784%" height="15" fill="rgb(229,88,8)"/><text x="24.9157%" y="175.50"></text></g><g><title>misc_checking_1 (2,280,493 samples, 1.71%)</title><rect x="23.4813%" y="181" width="1.7108%" height="15" fill="rgb(213,181,19)"/><text x="23.7313%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (429,475 samples, 0.32%)</title><rect x="25.1932%" y="165" width="0.3222%" height="15" fill="rgb(254,191,54)"/><text x="25.4432%" y="175.50"></text></g><g><title>check_mod_liveness (356,574 samples, 0.27%)</title><rect x="25.2479%" y="149" width="0.2675%" height="15" fill="rgb(241,83,37)"/><text x="25.4979%" y="159.50"></text></g><g><title>misc_checking_2 (1,007,520 samples, 0.76%)</title><rect x="25.1921%" y="181" width="0.7558%" height="15" fill="rgb(233,36,39)"/><text x="25.4421%" y="191.50"></text></g><g><title>match_checking (576,685 samples, 0.43%)</title><rect x="25.5154%" y="165" width="0.4326%" height="15" fill="rgb(226,3,54)"/><text x="25.7654%" y="175.50"></text></g><g><title>check_match (543,183 samples, 0.41%)</title><rect x="25.5405%" y="149" width="0.4075%" height="15" fill="rgb(245,192,40)"/><text x="25.7905%" y="159.50"></text></g><g><title>check_private_in_public (181,202 samples, 0.14%)</title><rect x="25.9539%" y="165" width="0.1359%" height="15" fill="rgb(238,167,29)"/><text x="26.2039%" y="175.50"></text></g><g><title>death_checking (288,063 samples, 0.22%)</title><rect x="26.0898%" y="165" width="0.2161%" height="15" fill="rgb(232,182,51)"/><text x="26.3398%" y="175.50"></text></g><g><title>crate_lints (894,129 samples, 0.67%)</title><rect x="26.3071%" y="149" width="0.6708%" height="15" fill="rgb(231,60,39)"/><text x="26.5571%" y="159.50"></text></g><g><title>type_of (414,291 samples, 0.31%)</title><rect x="26.6670%" y="133" width="0.3108%" height="15" fill="rgb(208,69,12)"/><text x="26.9170%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (332,601 samples, 0.25%)</title><rect x="26.7283%" y="117" width="0.2495%" height="15" fill="rgb(235,93,37)"/><text x="26.9783%" y="127.50"></text></g><g><title>lint_checking (1,236,432 samples, 0.93%)</title><rect x="26.3059%" y="165" width="0.9276%" height="15" fill="rgb(213,116,39)"/><text x="26.5559%" y="175.50"></text></g><g><title>module_lints (340,813 samples, 0.26%)</title><rect x="26.9778%" y="149" width="0.2557%" height="15" fill="rgb(222,207,29)"/><text x="27.2278%" y="159.50"></text></g><g><title>lint_mod (338,963 samples, 0.25%)</title><rect x="26.9792%" y="133" width="0.2543%" height="15" fill="rgb(206,96,30)"/><text x="27.2292%" y="143.50"></text></g><g><title>privacy_access_levels (278,053 samples, 0.21%)</title><rect x="27.2335%" y="165" width="0.2086%" height="15" fill="rgb(218,138,4)"/><text x="27.4835%" y="175.50"></text></g><g><title>privacy_checking_modules (1,029,320 samples, 0.77%)</title><rect x="27.4421%" y="165" width="0.7722%" height="15" fill="rgb(250,191,14)"/><text x="27.6921%" y="175.50"></text></g><g><title>check_mod_privacy (1,027,730 samples, 0.77%)</title><rect x="27.4433%" y="149" width="0.7710%" height="15" fill="rgb(239,60,40)"/><text x="27.6933%" y="159.50"></text></g><g><title>misc_checking_3 (3,031,450 samples, 2.27%)</title><rect x="25.9480%" y="181" width="2.2742%" height="15" fill="rgb(206,27,48)"/><text x="26.1980%" y="191.50">m..</text></g><g><title>impl_parent (512,717 samples, 0.38%)</title><rect x="29.1655%" y="117" width="0.3846%" height="15" fill="rgb(225,35,8)"/><text x="29.4155%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (269,682 samples, 0.20%)</title><rect x="29.3478%" y="101" width="0.2023%" height="15" fill="rgb(250,213,24)"/><text x="29.5978%" y="111.50"></text></g><g><title>impl_trait_ref (1,571,676 samples, 1.18%)</title><rect x="29.5501%" y="117" width="1.1791%" height="15" fill="rgb(247,123,22)"/><text x="29.8001%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,342,972 samples, 1.01%)</title><rect x="29.7217%" y="101" width="1.0075%" height="15" fill="rgb(231,138,38)"/><text x="29.9717%" y="111.50"></text></g><g><title>coherent_trait (3,442,115 samples, 2.58%)</title><rect x="28.2809%" y="149" width="2.5823%" height="15" fill="rgb(231,145,46)"/><text x="28.5309%" y="159.50">co..</text></g><g><title>specialization_graph_of (3,239,653 samples, 2.43%)</title><rect x="28.4328%" y="133" width="2.4304%" height="15" fill="rgb(251,118,11)"/><text x="28.6828%" y="143.50">sp..</text></g><g><title>trait_impls_of (178,542 samples, 0.13%)</title><rect x="30.7292%" y="117" width="0.1339%" height="15" fill="rgb(217,147,25)"/><text x="30.9792%" y="127.50"></text></g><g><title>coherence_checking (3,549,867 samples, 2.66%)</title><rect x="28.2594%" y="165" width="2.6631%" height="15" fill="rgb(247,81,37)"/><text x="28.5094%" y="175.50">co..</text></g><g><title>dropck_outlives (692,577 samples, 0.52%)</title><rect x="44.1490%" y="117" width="0.5196%" height="15" fill="rgb(209,12,38)"/><text x="44.3990%" y="127.50"></text></g><g><title>specializes (221,662 samples, 0.17%)</title><rect x="45.6756%" y="101" width="0.1663%" height="15" fill="rgb(227,1,9)"/><text x="45.9256%" y="111.50"></text></g><g><title>param_env (143,981 samples, 0.11%)</title><rect x="45.7339%" y="85" width="0.1080%" height="15" fill="rgb(248,47,43)"/><text x="45.9839%" y="95.50"></text></g><g><title>trait_impls_of (165,922 samples, 0.12%)</title><rect x="45.8455%" y="101" width="0.1245%" height="15" fill="rgb(221,10,30)"/><text x="46.0955%" y="111.50"></text></g><g><title>evaluate_obligation (1,735,399 samples, 1.30%)</title><rect x="44.6686%" y="117" width="1.3019%" height="15" fill="rgb(210,229,1)"/><text x="44.9186%" y="127.50"></text></g><g><title>method_autoderef_steps (285,822 samples, 0.21%)</title><rect x="46.2576%" y="117" width="0.2144%" height="15" fill="rgb(222,148,37)"/><text x="46.5076%" y="127.50"></text></g><g><title>evaluate_obligation (143,871 samples, 0.11%)</title><rect x="46.3641%" y="101" width="0.1079%" height="15" fill="rgb(234,67,33)"/><text x="46.6141%" y="111.50"></text></g><g><title>predicates_of (190,631 samples, 0.14%)</title><rect x="46.5014%" y="117" width="0.1430%" height="15" fill="rgb(247,98,35)"/><text x="46.7514%" y="127.50"></text></g><g><title>predicates_defined_on (137,520 samples, 0.10%)</title><rect x="46.5413%" y="101" width="0.1032%" height="15" fill="rgb(247,138,52)"/><text x="46.7913%" y="111.50"></text></g><g><title>associated_items (163,681 samples, 0.12%)</title><rect x="47.9029%" y="101" width="0.1228%" height="15" fill="rgb(213,79,30)"/><text x="48.1529%" y="111.50"></text></g><g><title>typeck (2,125,972 samples, 1.59%)</title><rect x="46.7013%" y="117" width="1.5949%" height="15" fill="rgb(246,177,23)"/><text x="46.9513%" y="127.50"></text></g><g><title>item_bodies_checking (23,114,463 samples, 17.34%)</title><rect x="30.9867%" y="165" width="17.3405%" height="15" fill="rgb(230,62,27)"/><text x="31.2367%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,112,773 samples, 17.34%)</title><rect x="30.9880%" y="149" width="17.3392%" height="15" fill="rgb(216,154,8)"/><text x="31.2380%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,023,523 samples, 17.27%)</title><rect x="31.0550%" y="133" width="17.2723%" height="15" fill="rgb(244,35,45)"/><text x="31.3050%" y="143.50">typeck</text></g><g><title>item_types_checking (2,754,468 samples, 2.07%)</title><rect x="48.3272%" y="165" width="2.0664%" height="15" fill="rgb(251,115,12)"/><text x="48.5772%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,752,688 samples, 2.07%)</title><rect x="48.3286%" y="149" width="2.0651%" height="15" fill="rgb(240,54,50)"/><text x="48.5786%" y="159.50">c..</text></g><g><title>fn_sig (919,586 samples, 0.69%)</title><rect x="50.9351%" y="133" width="0.6899%" height="15" fill="rgb(233,84,52)"/><text x="51.1851%" y="143.50"></text></g><g><title>associated_items (157,633 samples, 0.12%)</title><rect x="52.0675%" y="85" width="0.1183%" height="15" fill="rgb(207,117,47)"/><text x="52.3175%" y="95.50"></text></g><g><title>lint_levels (317,773 samples, 0.24%)</title><rect x="52.2006%" y="85" width="0.2384%" height="15" fill="rgb(249,43,39)"/><text x="52.4506%" y="95.50"></text></g><g><title>is_late_bound_map (777,358 samples, 0.58%)</title><rect x="51.8798%" y="117" width="0.5832%" height="15" fill="rgb(209,38,44)"/><text x="52.1298%" y="127.50"></text></g><g><title>resolve_lifetimes (764,658 samples, 0.57%)</title><rect x="51.8893%" y="101" width="0.5736%" height="15" fill="rgb(236,212,23)"/><text x="52.1393%" y="111.50"></text></g><g><title>named_region_map (359,294 samples, 0.27%)</title><rect x="52.4629%" y="117" width="0.2695%" height="15" fill="rgb(242,79,21)"/><text x="52.7129%" y="127.50"></text></g><g><title>resolve_lifetimes (317,853 samples, 0.24%)</title><rect x="52.4940%" y="101" width="0.2385%" height="15" fill="rgb(211,96,35)"/><text x="52.7440%" y="111.50"></text></g><g><title>generics_of (1,509,737 samples, 1.13%)</title><rect x="51.6250%" y="133" width="1.1326%" height="15" fill="rgb(253,215,40)"/><text x="51.8750%" y="143.50"></text></g><g><title>late_bound_vars_map (551,495 samples, 0.41%)</title><rect x="54.0391%" y="85" width="0.4137%" height="15" fill="rgb(211,81,21)"/><text x="54.2891%" y="95.50"></text></g><g><title>resolve_lifetimes (525,035 samples, 0.39%)</title><rect x="54.0589%" y="69" width="0.3939%" height="15" fill="rgb(208,190,38)"/><text x="54.3089%" y="79.50"></text></g><g><title>type_param_predicates (194,352 samples, 0.15%)</title><rect x="54.5702%" y="85" width="0.1458%" height="15" fill="rgb(235,213,38)"/><text x="54.8202%" y="95.50"></text></g><g><title>explicit_predicates_of (2,140,524 samples, 1.61%)</title><rect x="53.1118%" y="101" width="1.6058%" height="15" fill="rgb(237,122,38)"/><text x="53.3618%" y="111.50"></text></g><g><title>predicates_of (2,926,822 samples, 2.20%)</title><rect x="52.8059%" y="133" width="2.1957%" height="15" fill="rgb(244,218,35)"/><text x="53.0559%" y="143.50">p..</text></g><g><title>predicates_defined_on (2,774,790 samples, 2.08%)</title><rect x="52.9200%" y="117" width="2.0817%" height="15" fill="rgb(240,68,47)"/><text x="53.1700%" y="127.50">p..</text></g><g><title>inferred_outlives_of (378,514 samples, 0.28%)</title><rect x="54.7177%" y="101" width="0.2840%" height="15" fill="rgb(210,16,53)"/><text x="54.9677%" y="111.50"></text></g><g><title>inferred_outlives_crate (318,454 samples, 0.24%)</title><rect x="54.7627%" y="85" width="0.2389%" height="15" fill="rgb(235,124,12)"/><text x="55.0127%" y="95.50"></text></g><g><title>type_collecting (6,688,757 samples, 5.02%)</title><rect x="50.3942%" y="165" width="5.0179%" height="15" fill="rgb(224,169,11)"/><text x="50.6442%" y="175.50">type_c..</text></g><g><title>collect_mod_item_types (6,677,656 samples, 5.01%)</title><rect x="50.4025%" y="149" width="5.0096%" height="15" fill="rgb(250,166,2)"/><text x="50.6525%" y="159.50">collec..</text></g><g><title>type_of (436,845 samples, 0.33%)</title><rect x="55.0844%" y="133" width="0.3277%" height="15" fill="rgb(242,216,29)"/><text x="55.3344%" y="143.50"></text></g><g><title>evaluate_obligation (815,860 samples, 0.61%)</title><rect x="58.2709%" y="133" width="0.6121%" height="15" fill="rgb(230,116,27)"/><text x="58.5209%" y="143.50"></text></g><g><title>implied_outlives_bounds (556,911 samples, 0.42%)</title><rect x="58.8829%" y="133" width="0.4178%" height="15" fill="rgb(228,99,48)"/><text x="59.1329%" y="143.50"></text></g><g><title>param_env (838,040 samples, 0.63%)</title><rect x="59.3007%" y="133" width="0.6287%" height="15" fill="rgb(253,11,6)"/><text x="59.5507%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,964,220 samples, 4.47%)</title><rect x="55.6798%" y="149" width="4.4744%" height="15" fill="rgb(247,143,39)"/><text x="55.9298%" y="159.50">check..</text></g><g><title>region_scope_tree (299,561 samples, 0.22%)</title><rect x="59.9294%" y="133" width="0.2247%" height="15" fill="rgb(236,97,10)"/><text x="60.1794%" y="143.50"></text></g><g><title>implied_outlives_bounds (135,391 samples, 0.10%)</title><rect x="61.8559%" y="133" width="0.1016%" height="15" fill="rgb(233,208,19)"/><text x="62.1059%" y="143.50"></text></g><g><title>param_env (425,173 samples, 0.32%)</title><rect x="61.9574%" y="133" width="0.3190%" height="15" fill="rgb(216,164,2)"/><text x="62.2074%" y="143.50"></text></g><g><title>check_item_well_formed (3,111,601 samples, 2.33%)</title><rect x="60.1541%" y="149" width="2.3343%" height="15" fill="rgb(220,129,5)"/><text x="60.4041%" y="159.50">c..</text></g><g><title>variances_of (155,531 samples, 0.12%)</title><rect x="62.3718%" y="133" width="0.1167%" height="15" fill="rgb(242,17,10)"/><text x="62.6218%" y="143.50"></text></g><g><title>crate_variances (148,391 samples, 0.11%)</title><rect x="62.3771%" y="117" width="0.1113%" height="15" fill="rgb(242,107,0)"/><text x="62.6271%" y="127.50"></text></g><g><title>evaluate_obligation (452,274 samples, 0.34%)</title><rect x="64.6349%" y="133" width="0.3393%" height="15" fill="rgb(251,28,31)"/><text x="64.8849%" y="143.50"></text></g><g><title>implied_outlives_bounds (513,445 samples, 0.39%)</title><rect x="64.9742%" y="133" width="0.3852%" height="15" fill="rgb(233,223,10)"/><text x="65.2242%" y="143.50"></text></g><g><title>param_env (656,029 samples, 0.49%)</title><rect x="65.3594%" y="133" width="0.4922%" height="15" fill="rgb(215,21,27)"/><text x="65.6094%" y="143.50"></text></g><g><title>region_scope_tree (292,112 samples, 0.22%)</title><rect x="65.9067%" y="133" width="0.2191%" height="15" fill="rgb(232,23,21)"/><text x="66.1567%" y="143.50"></text></g><g><title>analysis (84,908,176 samples, 63.70%)</title><rect x="2.4553%" y="197" width="63.6983%" height="15" fill="rgb(244,5,23)"/><text x="2.7053%" y="207.50">analysis</text></g><g><title>type_check_crate (50,561,551 samples, 37.93%)</title><rect x="28.2222%" y="181" width="37.9314%" height="15" fill="rgb(226,81,46)"/><text x="28.4722%" y="191.50">type_check_crate</text></g><g><title>wf_checking (14,313,094 samples, 10.74%)</title><rect x="55.4158%" y="165" width="10.7377%" height="15" fill="rgb(247,70,30)"/><text x="55.6658%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (4,885,460 samples, 3.67%)</title><rect x="62.4885%" y="149" width="3.6651%" height="15" fill="rgb(212,68,19)"/><text x="62.7385%" y="159.50">chec..</text></g><g><title>codegen_module (236,522 samples, 0.18%)</title><rect x="66.4736%" y="181" width="0.1774%" height="15" fill="rgb(240,187,13)"/><text x="66.7236%" y="191.50"></text></g><g><title>codegen_crate (665,967 samples, 0.50%)</title><rect x="66.1614%" y="197" width="0.4996%" height="15" fill="rgb(223,113,26)"/><text x="66.4114%" y="207.50"></text></g><g><title>LLVM_module_codegen (1,842,029 samples, 1.38%)</title><rect x="66.6722%" y="181" width="1.3819%" height="15" fill="rgb(206,192,2)"/><text x="66.9222%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,734,768 samples, 1.30%)</title><rect x="66.7527%" y="165" width="1.3014%" height="15" fill="rgb(241,108,4)"/><text x="67.0027%" y="175.50"></text></g><g><title>codegen_module_optimize (2,077,711 samples, 1.56%)</title><rect x="66.6610%" y="197" width="1.5587%" height="15" fill="rgb(247,173,49)"/><text x="66.9110%" y="207.50"></text></g><g><title>LLVM_module_optimize (220,762 samples, 0.17%)</title><rect x="68.0541%" y="181" width="0.1656%" height="15" fill="rgb(224,114,35)"/><text x="68.3041%" y="191.50"></text></g><g><title>AST_validation (228,412 samples, 0.17%)</title><rect x="68.3582%" y="181" width="0.1714%" height="15" fill="rgb(245,159,27)"/><text x="68.6082%" y="191.50"></text></g><g><title>macro_expand_crate (8,042,232 samples, 6.03%)</title><rect x="68.6784%" y="181" width="6.0333%" height="15" fill="rgb(245,172,44)"/><text x="68.9284%" y="191.50">macro_ex..</text></g><g><title>expand_crate (8,019,202 samples, 6.02%)</title><rect x="68.6957%" y="165" width="6.0160%" height="15" fill="rgb(236,23,11)"/><text x="68.9457%" y="175.50">expand_c..</text></g><g><title>metadata_register_crate (191,951 samples, 0.14%)</title><rect x="74.5677%" y="149" width="0.1440%" height="15" fill="rgb(205,117,38)"/><text x="74.8177%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (367,154 samples, 0.28%)</title><rect x="74.7151%" y="181" width="0.2754%" height="15" fill="rgb(237,72,25)"/><text x="74.9651%" y="191.50"></text></g><g><title>late_resolve_crate (2,282,343 samples, 1.71%)</title><rect x="75.1024%" y="165" width="1.7122%" height="15" fill="rgb(244,70,9)"/><text x="75.3524%" y="175.50"></text></g><g><title>configure_and_expand (11,652,688 samples, 8.74%)</title><rect x="68.2197%" y="197" width="8.7419%" height="15" fill="rgb(217,125,39)"/><text x="68.4697%" y="207.50">configure_an..</text></g><g><title>resolve_crate (2,627,336 samples, 1.97%)</title><rect x="74.9905%" y="181" width="1.9710%" height="15" fill="rgb(235,36,10)"/><text x="75.2405%" y="191.50">r..</text></g><g><title>drop_ast (368,984 samples, 0.28%)</title><rect x="76.9616%" y="197" width="0.2768%" height="15" fill="rgb(251,123,47)"/><text x="77.2116%" y="207.50"></text></g><g><title>early_lint_checks (590,496 samples, 0.44%)</title><rect x="77.2473%" y="197" width="0.4430%" height="15" fill="rgb(221,13,13)"/><text x="77.4973%" y="207.50"></text></g><g><title>free_global_ctxt (1,586,576 samples, 1.19%)</title><rect x="77.6903%" y="197" width="1.1903%" height="15" fill="rgb(238,131,9)"/><text x="77.9403%" y="207.50"></text></g><g><title>exported_symbols (165,062 samples, 0.12%)</title><rect x="80.0390%" y="181" width="0.1238%" height="15" fill="rgb(211,50,8)"/><text x="80.2890%" y="191.50"></text></g><g><title>is_sized_raw (144,702 samples, 0.11%)</title><rect x="82.9301%" y="149" width="0.1086%" height="15" fill="rgb(245,182,24)"/><text x="83.1801%" y="159.50"></text></g><g><title>layout_of (263,262 samples, 0.20%)</title><rect x="83.0387%" y="149" width="0.1975%" height="15" fill="rgb(242,14,37)"/><text x="83.2887%" y="159.50"></text></g><g><title>layout_of (897,989 samples, 0.67%)</title><rect x="82.6636%" y="165" width="0.6737%" height="15" fill="rgb(246,228,12)"/><text x="82.9136%" y="175.50"></text></g><g><title>is_copy_raw (1,456,931 samples, 1.09%)</title><rect x="86.6772%" y="133" width="1.0930%" height="15" fill="rgb(213,55,15)"/><text x="86.9272%" y="143.50"></text></g><g><title>evaluate_obligation (1,299,101 samples, 0.97%)</title><rect x="86.7956%" y="117" width="0.9746%" height="15" fill="rgb(209,9,3)"/><text x="87.0456%" y="127.50"></text></g><g><title>needs_drop_raw (1,612,492 samples, 1.21%)</title><rect x="86.5798%" y="149" width="1.2097%" height="15" fill="rgb(230,59,30)"/><text x="86.8298%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,231,876 samples, 4.68%)</title><rect x="83.3373%" y="165" width="4.6752%" height="15" fill="rgb(209,121,21)"/><text x="83.5873%" y="175.50">mir_d..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (260,262 samples, 0.20%)</title><rect x="87.8172%" y="149" width="0.1952%" height="15" fill="rgb(220,109,13)"/><text x="88.0672%" y="159.50"></text></g><g><title>normalize_projection_ty (157,371 samples, 0.12%)</title><rect x="87.8944%" y="133" width="0.1181%" height="15" fill="rgb(232,18,1)"/><text x="88.1444%" y="143.50"></text></g><g><title>optimized_mir (10,378,583 samples, 7.79%)</title><rect x="80.2342%" y="181" width="7.7860%" height="15" fill="rgb(215,41,42)"/><text x="80.4842%" y="191.50">optimized_m..</text></g><g><title>generate_crate_metadata (12,255,654 samples, 9.19%)</title><rect x="78.8805%" y="197" width="9.1942%" height="15" fill="rgb(224,123,36)"/><text x="79.1305%" y="207.50">generate_crat..</text></g><g><title>hir_lowering (6,018,501 samples, 4.52%)</title><rect x="88.0747%" y="197" width="4.5151%" height="15" fill="rgb(240,125,3)"/><text x="88.3247%" y="207.50">hir_l..</text></g><g><title>finish_ongoing_codegen (330,783 samples, 0.25%)</title><rect x="92.6006%" y="181" width="0.2482%" height="15" fill="rgb(205,98,50)"/><text x="92.8506%" y="191.50"></text></g><g><title>link_crate (715,848 samples, 0.54%)</title><rect x="92.8487%" y="181" width="0.5370%" height="15" fill="rgb(205,185,37)"/><text x="93.0987%" y="191.50"></text></g><g><title>link_binary (708,278 samples, 0.53%)</title><rect x="92.8544%" y="165" width="0.5314%" height="15" fill="rgb(238,207,15)"/><text x="93.1044%" y="175.50"></text></g><g><title>link_rlib (476,945 samples, 0.36%)</title><rect x="93.0279%" y="149" width="0.3578%" height="15" fill="rgb(213,199,42)"/><text x="93.2779%" y="159.50"></text></g><g><title>link (1,065,931 samples, 0.80%)</title><rect x="92.5898%" y="197" width="0.7997%" height="15" fill="rgb(235,201,11)"/><text x="92.8398%" y="207.50"></text></g><g><title>parse_crate (7,410,885 samples, 5.56%)</title><rect x="93.3895%" y="197" width="5.5597%" height="15" fill="rgb(207,46,11)"/><text x="93.6395%" y="207.50">parse_c..</text></g><g><title>prepare_outputs (356,493 samples, 0.27%)</title><rect x="98.9558%" y="197" width="0.2674%" height="15" fill="rgb(241,35,35)"/><text x="99.2058%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (536,615 samples, 0.40%)</title><rect x="99.2232%" y="197" width="0.4026%" height="15" fill="rgb(243,32,47)"/><text x="99.4732%" y="207.50"></text></g><g><title>all (133,297,484 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (133,297,484 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (367,424 samples, 0.28%)</title><rect x="99.7244%" y="197" width="0.2756%" height="15" fill="rgb(243,110,44)"/><text x="99.9744%" y="207.50"></text></g></svg></svg>