<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,172,170,822 samples, 17.54%)</title><rect x="0.0220%" y="213" width="17.5447%" height="15" fill="rgb(227,0,7)"/><text x="0.2720%" y="223.50">LLVM_passes</text></g><g><title>codegen_fulfill_obligation (9,126,886 samples, 0.14%)</title><rect x="19.3902%" y="85" width="0.1366%" height="15" fill="rgb(217,0,24)"/><text x="19.6402%" y="95.50"></text></g><g><title>resolve_instance (12,443,080 samples, 0.19%)</title><rect x="19.3622%" y="101" width="0.1862%" height="15" fill="rgb(221,193,54)"/><text x="19.6122%" y="111.50"></text></g><g><title>mir_const (52,165,119 samples, 0.78%)</title><rect x="18.8636%" y="149" width="0.7808%" height="15" fill="rgb(248,212,6)"/><text x="19.1136%" y="159.50"></text></g><g><title>unsafety_check_result (46,541,691 samples, 0.70%)</title><rect x="18.9478%" y="133" width="0.6966%" height="15" fill="rgb(208,68,35)"/><text x="19.1978%" y="143.50"></text></g><g><title>mir_built (42,387,267 samples, 0.63%)</title><rect x="19.0099%" y="117" width="0.6344%" height="15" fill="rgb(232,128,0)"/><text x="19.2599%" y="127.50"></text></g><g><title>mir_promoted (59,170,728 samples, 0.89%)</title><rect x="18.7912%" y="165" width="0.8857%" height="15" fill="rgb(207,160,47)"/><text x="19.0412%" y="175.50"></text></g><g><title>type_op_prove_predicate (25,391,982 samples, 0.38%)</title><rect x="19.9006%" y="165" width="0.3801%" height="15" fill="rgb(228,23,34)"/><text x="20.1506%" y="175.50"></text></g><g><title>MIR_borrow_checking (179,791,912 samples, 2.69%)</title><rect x="17.5898%" y="197" width="2.6911%" height="15" fill="rgb(218,30,26)"/><text x="17.8398%" y="207.50">MI..</text></g><g><title>mir_borrowck (178,907,172 samples, 2.68%)</title><rect x="17.6031%" y="181" width="2.6778%" height="15" fill="rgb(220,122,19)"/><text x="17.8531%" y="191.50">mi..</text></g><g><title>misc_checking_2 (10,018,137 samples, 0.15%)</title><rect x="20.3993%" y="197" width="0.1499%" height="15" fill="rgb(250,228,42)"/><text x="20.6493%" y="207.50"></text></g><g><title>crate_lints (10,927,697 samples, 0.16%)</title><rect x="20.6167%" y="165" width="0.1636%" height="15" fill="rgb(240,193,28)"/><text x="20.8667%" y="175.50"></text></g><g><title>lint_checking (15,767,129 samples, 0.24%)</title><rect x="20.6167%" y="181" width="0.2360%" height="15" fill="rgb(216,20,37)"/><text x="20.8667%" y="191.50"></text></g><g><title>privacy_checking_modules (7,920,264 samples, 0.12%)</title><rect x="20.8951%" y="181" width="0.1185%" height="15" fill="rgb(206,188,39)"/><text x="21.1451%" y="191.50"></text></g><g><title>check_mod_privacy (7,902,784 samples, 0.12%)</title><rect x="20.8954%" y="165" width="0.1183%" height="15" fill="rgb(217,207,13)"/><text x="21.1454%" y="175.50"></text></g><g><title>misc_checking_3 (31,092,172 samples, 0.47%)</title><rect x="20.5492%" y="197" width="0.4654%" height="15" fill="rgb(231,73,38)"/><text x="20.7992%" y="207.50"></text></g><g><title>impl_trait_ref (9,272,833 samples, 0.14%)</title><rect x="21.2166%" y="133" width="0.1388%" height="15" fill="rgb(225,20,46)"/><text x="21.4666%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,051,161 samples, 0.11%)</title><rect x="21.2498%" y="117" width="0.1055%" height="15" fill="rgb(210,31,41)"/><text x="21.4998%" y="127.50"></text></g><g><title>coherent_trait (24,356,870 samples, 0.36%)</title><rect x="21.0226%" y="165" width="0.3646%" height="15" fill="rgb(221,200,47)"/><text x="21.2726%" y="175.50"></text></g><g><title>specialization_graph_of (23,490,860 samples, 0.35%)</title><rect x="21.0355%" y="149" width="0.3516%" height="15" fill="rgb(226,26,5)"/><text x="21.2855%" y="159.50"></text></g><g><title>coherence_checking (24,722,784 samples, 0.37%)</title><rect x="21.0220%" y="181" width="0.3700%" height="15" fill="rgb(249,33,26)"/><text x="21.2720%" y="191.50"></text></g><g><title>dropck_outlives (8,692,098 samples, 0.13%)</title><rect x="22.8058%" y="133" width="0.1301%" height="15" fill="rgb(235,183,28)"/><text x="23.0558%" y="143.50"></text></g><g><title>evaluate_obligation (17,173,993 samples, 0.26%)</title><rect x="22.9359%" y="133" width="0.2571%" height="15" fill="rgb(221,5,38)"/><text x="23.1859%" y="143.50"></text></g><g><title>evaluate_obligation (12,712,136 samples, 0.19%)</title><rect x="24.0848%" y="117" width="0.1903%" height="15" fill="rgb(247,18,42)"/><text x="24.3348%" y="127.50"></text></g><g><title>typeck (74,281,605 samples, 1.11%)</title><rect x="23.2513%" y="133" width="1.1118%" height="15" fill="rgb(241,131,45)"/><text x="23.5013%" y="143.50"></text></g><g><title>item_bodies_checking (198,444,191 samples, 2.97%)</title><rect x="21.3956%" y="181" width="2.9703%" height="15" fill="rgb(249,31,29)"/><text x="21.6456%" y="191.50">ite..</text></g><g><title>typeck_item_bodies (198,440,391 samples, 2.97%)</title><rect x="21.3956%" y="165" width="2.9702%" height="15" fill="rgb(225,111,53)"/><text x="21.6456%" y="175.50">typ..</text></g><g><title>typeck (197,882,311 samples, 2.96%)</title><rect x="21.4040%" y="149" width="2.9618%" height="15" fill="rgb(238,160,17)"/><text x="21.6540%" y="159.50">typ..</text></g><g><title>type_op_prove_predicate (9,398,777 samples, 0.14%)</title><rect x="25.3414%" y="101" width="0.1407%" height="15" fill="rgb(214,148,48)"/><text x="25.5914%" y="111.50"></text></g><g><title>mir_borrowck (47,216,474 samples, 0.71%)</title><rect x="24.7754%" y="117" width="0.7067%" height="15" fill="rgb(232,36,49)"/><text x="25.0254%" y="127.50"></text></g><g><title>dropck_outlives (6,785,101 samples, 0.10%)</title><rect x="26.5105%" y="37" width="0.1016%" height="15" fill="rgb(209,103,24)"/><text x="26.7605%" y="47.50"></text></g><g><title>evaluate_obligation (15,212,651 samples, 0.23%)</title><rect x="26.6122%" y="37" width="0.2277%" height="15" fill="rgb(229,88,8)"/><text x="26.8622%" y="47.50"></text></g><g><title>mir_built (98,818,681 samples, 1.48%)</title><rect x="25.4992%" y="69" width="1.4791%" height="15" fill="rgb(213,181,19)"/><text x="25.7492%" y="79.50"></text></g><g><title>typeck (95,925,687 samples, 1.44%)</title><rect x="25.5425%" y="53" width="1.4358%" height="15" fill="rgb(254,191,54)"/><text x="25.7925%" y="63.50"></text></g><g><title>mir_built (8,154,026 samples, 0.12%)</title><rect x="26.9959%" y="53" width="0.1220%" height="15" fill="rgb(241,83,37)"/><text x="27.2459%" y="63.50"></text></g><g><title>mir_const (109,246,480 samples, 1.64%)</title><rect x="25.4869%" y="101" width="1.6352%" height="15" fill="rgb(233,36,39)"/><text x="25.7369%" y="111.50"></text></g><g><title>unsafety_check_result (108,595,233 samples, 1.63%)</title><rect x="25.4966%" y="85" width="1.6254%" height="15" fill="rgb(226,3,54)"/><text x="25.7466%" y="95.50"></text></g><g><title>unsafety_check_result (9,600,671 samples, 0.14%)</title><rect x="26.9783%" y="69" width="0.1437%" height="15" fill="rgb(245,192,40)"/><text x="27.2283%" y="79.50"></text></g><g><title>mir_promoted (109,592,422 samples, 1.64%)</title><rect x="25.4821%" y="117" width="1.6403%" height="15" fill="rgb(238,167,29)"/><text x="25.7321%" y="127.50"></text></g><g><title>type_of (170,186,037 samples, 2.55%)</title><rect x="24.6468%" y="149" width="2.5473%" height="15" fill="rgb(232,182,51)"/><text x="24.8968%" y="159.50">ty..</text></g><g><title>mir_borrowck (169,985,246 samples, 2.54%)</title><rect x="24.6498%" y="133" width="2.5443%" height="15" fill="rgb(231,60,39)"/><text x="24.8998%" y="143.50">mi..</text></g><g><title>item_types_checking (190,483,166 samples, 2.85%)</title><rect x="24.3658%" y="181" width="2.8511%" height="15" fill="rgb(208,69,12)"/><text x="24.6158%" y="191.50">it..</text></g><g><title>check_mod_item_types (190,451,676 samples, 2.85%)</title><rect x="24.3663%" y="165" width="2.8506%" height="15" fill="rgb(235,93,37)"/><text x="24.6163%" y="175.50">ch..</text></g><g><title>type_collecting (14,897,080 samples, 0.22%)</title><rect x="27.2173%" y="181" width="0.2230%" height="15" fill="rgb(213,116,39)"/><text x="27.4673%" y="191.50"></text></g><g><title>collect_mod_item_types (14,869,619 samples, 0.22%)</title><rect x="27.2177%" y="165" width="0.2226%" height="15" fill="rgb(222,207,29)"/><text x="27.4677%" y="175.50"></text></g><g><title>check_impl_item_well_formed (24,708,433 samples, 0.37%)</title><rect x="27.4620%" y="165" width="0.3698%" height="15" fill="rgb(206,96,30)"/><text x="27.7120%" y="175.50"></text></g><g><title>evaluate_obligation (8,232,309 samples, 0.12%)</title><rect x="27.9926%" y="149" width="0.1232%" height="15" fill="rgb(218,138,4)"/><text x="28.2426%" y="159.50"></text></g><g><title>check_item_well_formed (22,796,665 samples, 0.34%)</title><rect x="27.8318%" y="165" width="0.3412%" height="15" fill="rgb(250,191,14)"/><text x="28.0818%" y="175.50"></text></g><g><title>analysis (709,358,813 samples, 10.62%)</title><rect x="17.5667%" y="213" width="10.6175%" height="15" fill="rgb(239,60,40)"/><text x="17.8167%" y="223.50">analysis</text></g><g><title>type_check_crate (479,003,941 samples, 7.17%)</title><rect x="21.0146%" y="197" width="7.1696%" height="15" fill="rgb(206,27,48)"/><text x="21.2646%" y="207.50">type_check..</text></g><g><title>wf_checking (49,668,592 samples, 0.74%)</title><rect x="27.4408%" y="181" width="0.7434%" height="15" fill="rgb(225,35,8)"/><text x="27.6908%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (47,580,040 samples, 0.71%)</title><rect x="41.8280%" y="181" width="0.7122%" height="15" fill="rgb(250,213,24)"/><text x="42.0780%" y="191.50"></text></g><g><title>layout_of (13,700,222 samples, 0.21%)</title><rect x="43.3391%" y="165" width="0.2051%" height="15" fill="rgb(247,123,22)"/><text x="43.5891%" y="175.50"></text></g><g><title>predicates_of (8,295,548 samples, 0.12%)</title><rect x="43.7894%" y="149" width="0.1242%" height="15" fill="rgb(231,138,38)"/><text x="44.0394%" y="159.50"></text></g><g><title>param_env (24,744,413 samples, 0.37%)</title><rect x="43.5441%" y="165" width="0.3704%" height="15" fill="rgb(231,145,46)"/><text x="43.7941%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (15,036,226 samples, 0.23%)</title><rect x="43.9145%" y="165" width="0.2251%" height="15" fill="rgb(251,118,11)"/><text x="44.1645%" y="175.50"></text></g><g><title>normalize_projection_ty (11,558,176 samples, 0.17%)</title><rect x="43.9666%" y="149" width="0.1730%" height="15" fill="rgb(217,147,25)"/><text x="44.2166%" y="159.50"></text></g><g><title>fn_abi_of_instance (100,894,170 samples, 1.51%)</title><rect x="42.6346%" y="181" width="1.5102%" height="15" fill="rgb(247,81,37)"/><text x="42.8846%" y="191.50"></text></g><g><title>layout_of (20,315,546 samples, 0.30%)</title><rect x="44.2008%" y="181" width="0.3041%" height="15" fill="rgb(209,12,38)"/><text x="44.4508%" y="191.50"></text></g><g><title>symbol_name (9,230,138 samples, 0.14%)</title><rect x="44.5058%" y="181" width="0.1382%" height="15" fill="rgb(227,1,9)"/><text x="44.7558%" y="191.50"></text></g><g><title>codegen_module (1,096,439,351 samples, 16.41%)</title><rect x="28.2737%" y="197" width="16.4112%" height="15" fill="rgb(248,47,43)"/><text x="28.5237%" y="207.50">codegen_module</text></g><g><title>codegen_crate (1,102,620,138 samples, 16.50%)</title><rect x="28.1843%" y="213" width="16.5037%" height="15" fill="rgb(221,10,30)"/><text x="28.4343%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,767,220,612 samples, 41.42%)</title><rect x="44.6928%" y="197" width="41.4190%" height="15" fill="rgb(210,229,1)"/><text x="44.9428%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,531,618,563 samples, 37.89%)</title><rect x="48.2192%" y="181" width="37.8925%" height="15" fill="rgb(222,148,37)"/><text x="48.4692%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,991,746,648 samples, 44.78%)</title><rect x="44.6880%" y="213" width="44.7796%" height="15" fill="rgb(234,67,33)"/><text x="44.9380%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (224,206,336 samples, 3.36%)</title><rect x="86.1118%" y="197" width="3.3559%" height="15" fill="rgb(247,98,35)"/><text x="86.3618%" y="207.50">LLV..</text></g><g><title>metadata_register_crate (13,753,186 samples, 0.21%)</title><rect x="90.4131%" y="165" width="0.2059%" height="15" fill="rgb(247,138,52)"/><text x="90.6631%" y="175.50"></text></g><g><title>metadata_register_crate (11,497,993 samples, 0.17%)</title><rect x="90.4469%" y="149" width="0.1721%" height="15" fill="rgb(213,79,30)"/><text x="90.6969%" y="159.50"></text></g><g><title>macro_expand_crate (77,000,093 samples, 1.15%)</title><rect x="89.4865%" y="197" width="1.1525%" height="15" fill="rgb(246,177,23)"/><text x="89.7365%" y="207.50"></text></g><g><title>expand_crate (76,988,733 samples, 1.15%)</title><rect x="89.4867%" y="181" width="1.1523%" height="15" fill="rgb(230,62,27)"/><text x="89.7367%" y="191.50"></text></g><g><title>late_resolve_crate (8,754,154 samples, 0.13%)</title><rect x="90.6558%" y="181" width="0.1310%" height="15" fill="rgb(216,154,8)"/><text x="90.9058%" y="191.50"></text></g><g><title>configure_and_expand (88,887,820 samples, 1.33%)</title><rect x="89.4676%" y="213" width="1.3304%" height="15" fill="rgb(244,35,45)"/><text x="89.7176%" y="223.50"></text></g><g><title>resolve_crate (10,518,453 samples, 0.16%)</title><rect x="90.6407%" y="197" width="0.1574%" height="15" fill="rgb(251,115,12)"/><text x="90.8907%" y="207.50"></text></g><g><title>free_global_ctxt (44,471,815 samples, 0.67%)</title><rect x="90.8560%" y="213" width="0.6656%" height="15" fill="rgb(240,54,50)"/><text x="91.1060%" y="223.50"></text></g><g><title>codegen_fn_attrs (8,911,547 samples, 0.13%)</title><rect x="92.3919%" y="133" width="0.1334%" height="15" fill="rgb(233,84,52)"/><text x="92.6419%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (9,653,463 samples, 0.14%)</title><rect x="92.5253%" y="133" width="0.1445%" height="15" fill="rgb(207,117,47)"/><text x="92.7753%" y="143.50"></text></g><g><title>mir_shims (12,264,691 samples, 0.18%)</title><rect x="92.7191%" y="133" width="0.1836%" height="15" fill="rgb(249,43,39)"/><text x="92.9691%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (23,582,419 samples, 0.35%)</title><rect x="93.1155%" y="117" width="0.3530%" height="15" fill="rgb(209,38,44)"/><text x="93.3655%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,314,354 samples, 0.20%)</title><rect x="93.4684%" y="117" width="0.1993%" height="15" fill="rgb(236,212,23)"/><text x="93.7184%" y="127.50"></text></g><g><title>optimized_mir (52,547,677 samples, 0.79%)</title><rect x="92.9026%" y="133" width="0.7865%" height="15" fill="rgb(242,79,21)"/><text x="93.1526%" y="143.50"></text></g><g><title>evaluate_obligation (14,197,918 samples, 0.21%)</title><rect x="94.5766%" y="101" width="0.2125%" height="15" fill="rgb(211,96,35)"/><text x="94.8266%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (62,247,358 samples, 0.93%)</title><rect x="93.9083%" y="117" width="0.9317%" height="15" fill="rgb(253,215,40)"/><text x="94.1583%" y="127.50"></text></g><g><title>needs_drop_raw (8,371,838 samples, 0.13%)</title><rect x="94.8930%" y="117" width="0.1253%" height="15" fill="rgb(211,81,21)"/><text x="95.1430%" y="127.50"></text></g><g><title>resolve_instance (96,311,510 samples, 1.44%)</title><rect x="93.6892%" y="133" width="1.4416%" height="15" fill="rgb(208,190,38)"/><text x="93.9392%" y="143.50"></text></g><g><title>normalize_projection_ty (7,113,215 samples, 0.11%)</title><rect x="95.1742%" y="117" width="0.1065%" height="15" fill="rgb(235,213,38)"/><text x="95.4242%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (10,108,425 samples, 0.15%)</title><rect x="95.1307%" y="133" width="0.1513%" height="15" fill="rgb(237,122,38)"/><text x="95.3807%" y="143.50"></text></g><g><title>eval_to_const_value_raw (10,028,337 samples, 0.15%)</title><rect x="95.3206%" y="117" width="0.1501%" height="15" fill="rgb(244,218,35)"/><text x="95.5706%" y="127.50"></text></g><g><title>eval_to_const_value_raw (9,747,676 samples, 0.15%)</title><rect x="95.3248%" y="101" width="0.1459%" height="15" fill="rgb(240,68,47)"/><text x="95.5748%" y="111.50"></text></g><g><title>eval_to_allocation_raw (9,224,592 samples, 0.14%)</title><rect x="95.3327%" y="85" width="0.1381%" height="15" fill="rgb(210,16,53)"/><text x="95.5827%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (13,031,483 samples, 0.20%)</title><rect x="95.2820%" y="133" width="0.1951%" height="15" fill="rgb(235,124,12)"/><text x="95.5320%" y="143.50"></text></g><g><title>upstream_drop_glue_for (8,109,736 samples, 0.12%)</title><rect x="95.4771%" y="133" width="0.1214%" height="15" fill="rgb(224,169,11)"/><text x="95.7271%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (7,959,885 samples, 0.12%)</title><rect x="95.4793%" y="117" width="0.1191%" height="15" fill="rgb(250,166,2)"/><text x="95.7293%" y="127.50"></text></g><g><title>upstream_monomorphizations (7,954,085 samples, 0.12%)</title><rect x="95.4794%" y="101" width="0.1191%" height="15" fill="rgb(242,216,29)"/><text x="95.7294%" y="111.50"></text></g><g><title>exported_symbols (6,877,744 samples, 0.10%)</title><rect x="95.4955%" y="85" width="0.1029%" height="15" fill="rgb(230,116,27)"/><text x="95.7455%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (6,859,374 samples, 0.10%)</title><rect x="95.4958%" y="69" width="0.1027%" height="15" fill="rgb(228,99,48)"/><text x="95.7458%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (262,266,054 samples, 3.93%)</title><rect x="91.7304%" y="149" width="3.9255%" height="15" fill="rgb(253,11,6)"/><text x="91.9804%" y="159.50">mono..</text></g><g><title>monomorphization_collector (262,639,488 samples, 3.93%)</title><rect x="91.7304%" y="165" width="3.9311%" height="15" fill="rgb(247,143,39)"/><text x="91.9804%" y="175.50">mono..</text></g><g><title>assert_symbols_are_distinct (31,055,582 samples, 0.46%)</title><rect x="95.6616%" y="149" width="0.4648%" height="15" fill="rgb(236,97,10)"/><text x="95.9116%" y="159.50"></text></g><g><title>symbol_name (27,090,092 samples, 0.41%)</title><rect x="95.7209%" y="133" width="0.4055%" height="15" fill="rgb(233,208,19)"/><text x="95.9709%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (306,898,461 samples, 4.59%)</title><rect x="91.7281%" y="181" width="4.5936%" height="15" fill="rgb(216,164,2)"/><text x="91.9781%" y="191.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (44,106,882 samples, 0.66%)</title><rect x="95.6615%" y="165" width="0.6602%" height="15" fill="rgb(220,129,5)"/><text x="95.9115%" y="175.50"></text></g><g><title>cgu_partitioning (13,044,420 samples, 0.20%)</title><rect x="96.1264%" y="149" width="0.1952%" height="15" fill="rgb(242,17,10)"/><text x="96.3764%" y="159.50"></text></g><g><title>exported_symbols (309,181,565 samples, 4.63%)</title><rect x="91.7057%" y="197" width="4.6277%" height="15" fill="rgb(242,107,0)"/><text x="91.9557%" y="207.50">expor..</text></g><g><title>layout_of (11,031,933 samples, 0.17%)</title><rect x="96.7104%" y="149" width="0.1651%" height="15" fill="rgb(251,28,31)"/><text x="96.9604%" y="159.50"></text></g><g><title>layout_of (11,658,902 samples, 0.17%)</title><rect x="96.7019%" y="165" width="0.1745%" height="15" fill="rgb(233,223,10)"/><text x="96.9519%" y="175.50"></text></g><g><title>layout_of (14,592,153 samples, 0.22%)</title><rect x="96.6621%" y="181" width="0.2184%" height="15" fill="rgb(215,21,27)"/><text x="96.9121%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (31,220,919 samples, 0.47%)</title><rect x="96.8805%" y="181" width="0.4673%" height="15" fill="rgb(232,23,21)"/><text x="97.1305%" y="191.50"></text></g><g><title>optimized_mir (67,706,698 samples, 1.01%)</title><rect x="96.3420%" y="197" width="1.0134%" height="15" fill="rgb(244,5,23)"/><text x="96.5920%" y="207.50"></text></g><g><title>generate_crate_metadata (390,840,229 samples, 5.85%)</title><rect x="91.5217%" y="213" width="5.8500%" height="15" fill="rgb(226,81,46)"/><text x="91.7717%" y="223.50">generat..</text></g><g><title>hir_lowering (19,273,126 samples, 0.29%)</title><rect x="97.3717%" y="213" width="0.2885%" height="15" fill="rgb(247,70,30)"/><text x="97.6217%" y="223.50"></text></g><g><title>finish_ongoing_codegen (119,058,553 samples, 1.78%)</title><rect x="97.6604%" y="197" width="1.7820%" height="15" fill="rgb(212,68,19)"/><text x="97.9104%" y="207.50">f..</text></g><g><title>link_crate (22,132,377 samples, 0.33%)</title><rect x="99.4425%" y="197" width="0.3313%" height="15" fill="rgb(240,187,13)"/><text x="99.6925%" y="207.50"></text></g><g><title>link_binary (21,865,714 samples, 0.33%)</title><rect x="99.4465%" y="181" width="0.3273%" height="15" fill="rgb(223,113,26)"/><text x="99.6965%" y="191.50"></text></g><g><title>link_rlib (18,748,481 samples, 0.28%)</title><rect x="99.4931%" y="165" width="0.2806%" height="15" fill="rgb(206,192,2)"/><text x="99.7431%" y="175.50"></text></g><g><title>link (141,219,730 samples, 2.11%)</title><rect x="97.6601%" y="213" width="2.1137%" height="15" fill="rgb(241,108,4)"/><text x="97.9101%" y="223.50">l..</text></g><g><title>self_profile_alloc_query_strings (13,252,121 samples, 0.20%)</title><rect x="99.7850%" y="213" width="0.1984%" height="15" fill="rgb(247,173,49)"/><text x="100.0350%" y="223.50"></text></g><g><title>all (6,681,045,650 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (6,681,045,650 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>