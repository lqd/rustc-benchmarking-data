<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (93,974,354 samples, 18.69%)</title><rect x="0.1328%" y="149" width="18.6919%" height="15" fill="rgb(227,0,7)"/><text x="0.3828%" y="159.50">LLVM_passes</text></g><g><title>is_copy_raw (520,224 samples, 0.10%)</title><rect x="24.3120%" y="37" width="0.1035%" height="15" fill="rgb(217,0,24)"/><text x="24.5620%" y="47.50"></text></g><g><title>thir_body (2,611,108 samples, 0.52%)</title><rect x="24.4869%" y="37" width="0.5194%" height="15" fill="rgb(221,193,54)"/><text x="24.7369%" y="47.50"></text></g><g><title>mir_const (11,168,954 samples, 2.22%)</title><rect x="22.7858%" y="85" width="2.2216%" height="15" fill="rgb(248,212,6)"/><text x="23.0358%" y="95.50">m..</text></g><g><title>unsafety_check_result (9,916,592 samples, 1.97%)</title><rect x="23.0349%" y="69" width="1.9725%" height="15" fill="rgb(208,68,35)"/><text x="23.2849%" y="79.50">u..</text></g><g><title>mir_built (9,094,822 samples, 1.81%)</title><rect x="23.1984%" y="53" width="1.8090%" height="15" fill="rgb(232,128,0)"/><text x="23.4484%" y="63.50">m..</text></g><g><title>mir_promoted (12,555,038 samples, 2.50%)</title><rect x="22.5577%" y="101" width="2.4973%" height="15" fill="rgb(207,160,47)"/><text x="22.8077%" y="111.50">mi..</text></g><g><title>MIR_borrow_checking (31,355,379 samples, 6.24%)</title><rect x="18.9104%" y="133" width="6.2367%" height="15" fill="rgb(228,23,34)"/><text x="19.1604%" y="143.50">MIR_borr..</text></g><g><title>mir_borrowck (31,305,147 samples, 6.23%)</title><rect x="18.9204%" y="117" width="6.2267%" height="15" fill="rgb(218,30,26)"/><text x="19.1704%" y="127.50">mir_borr..</text></g><g><title>misc_checking_1 (921,619 samples, 0.18%)</title><rect x="25.2039%" y="133" width="0.1833%" height="15" fill="rgb(220,122,19)"/><text x="25.4539%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (629,996 samples, 0.13%)</title><rect x="25.3875%" y="117" width="0.1253%" height="15" fill="rgb(250,228,42)"/><text x="25.6375%" y="127.50"></text></g><g><title>misc_checking_2 (1,109,711 samples, 0.22%)</title><rect x="25.3872%" y="133" width="0.2207%" height="15" fill="rgb(240,193,28)"/><text x="25.6372%" y="143.50"></text></g><g><title>crate_lints (811,749 samples, 0.16%)</title><rect x="25.6881%" y="101" width="0.1615%" height="15" fill="rgb(216,20,37)"/><text x="25.9381%" y="111.50"></text></g><g><title>lint_checking (1,556,416 samples, 0.31%)</title><rect x="25.6877%" y="117" width="0.3096%" height="15" fill="rgb(206,188,39)"/><text x="25.9377%" y="127.50"></text></g><g><title>module_lints (742,947 samples, 0.15%)</title><rect x="25.8495%" y="101" width="0.1478%" height="15" fill="rgb(217,207,13)"/><text x="26.0995%" y="111.50"></text></g><g><title>lint_mod (740,907 samples, 0.15%)</title><rect x="25.8499%" y="85" width="0.1474%" height="15" fill="rgb(231,73,38)"/><text x="26.0999%" y="95.50"></text></g><g><title>privacy_checking_modules (779,488 samples, 0.16%)</title><rect x="26.0379%" y="117" width="0.1550%" height="15" fill="rgb(225,20,46)"/><text x="26.2879%" y="127.50"></text></g><g><title>check_mod_privacy (778,128 samples, 0.15%)</title><rect x="26.0381%" y="101" width="0.1548%" height="15" fill="rgb(210,31,41)"/><text x="26.2881%" y="111.50"></text></g><g><title>misc_checking_3 (2,950,260 samples, 0.59%)</title><rect x="25.6079%" y="133" width="0.5868%" height="15" fill="rgb(221,200,47)"/><text x="25.8579%" y="143.50"></text></g><g><title>associated_item (1,155,573 samples, 0.23%)</title><rect x="36.4729%" y="53" width="0.2298%" height="15" fill="rgb(226,26,5)"/><text x="36.7229%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (885,632 samples, 0.18%)</title><rect x="36.5266%" y="37" width="0.1762%" height="15" fill="rgb(249,33,26)"/><text x="36.7766%" y="47.50"></text></g><g><title>associated_items (1,562,716 samples, 0.31%)</title><rect x="36.3982%" y="69" width="0.3108%" height="15" fill="rgb(235,183,28)"/><text x="36.6482%" y="79.50"></text></g><g><title>predicates_of (644,056 samples, 0.13%)</title><rect x="37.5617%" y="53" width="0.1281%" height="15" fill="rgb(221,5,38)"/><text x="37.8117%" y="63.50"></text></g><g><title>specializes (1,458,214 samples, 0.29%)</title><rect x="37.6899%" y="53" width="0.2900%" height="15" fill="rgb(247,18,42)"/><text x="37.9399%" y="63.50"></text></g><g><title>param_env (1,037,180 samples, 0.21%)</title><rect x="37.7736%" y="37" width="0.2063%" height="15" fill="rgb(241,131,45)"/><text x="38.0236%" y="47.50"></text></g><g><title>evaluate_obligation (6,519,924 samples, 1.30%)</title><rect x="36.7409%" y="69" width="1.2968%" height="15" fill="rgb(249,31,29)"/><text x="36.9909%" y="79.50"></text></g><g><title>item_bodies_checking (60,829,618 samples, 12.10%)</title><rect x="26.2311%" y="117" width="12.0993%" height="15" fill="rgb(225,111,53)"/><text x="26.4811%" y="127.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (60,826,908 samples, 12.10%)</title><rect x="26.2316%" y="101" width="12.0987%" height="15" fill="rgb(238,160,17)"/><text x="26.4816%" y="111.50">typeck_item_bodies</text></g><g><title>typeck (60,792,238 samples, 12.09%)</title><rect x="26.2385%" y="85" width="12.0918%" height="15" fill="rgb(214,148,48)"/><text x="26.4885%" y="95.50">typeck</text></g><g><title>item_types_checking (596,556 samples, 0.12%)</title><rect x="38.3304%" y="117" width="0.1187%" height="15" fill="rgb(232,36,49)"/><text x="38.5804%" y="127.50"></text></g><g><title>check_mod_item_types (594,776 samples, 0.12%)</title><rect x="38.3307%" y="101" width="0.1183%" height="15" fill="rgb(209,103,24)"/><text x="38.5807%" y="111.50"></text></g><g><title>type_collecting (849,899 samples, 0.17%)</title><rect x="38.4492%" y="117" width="0.1690%" height="15" fill="rgb(229,88,8)"/><text x="38.6992%" y="127.50"></text></g><g><title>collect_mod_item_types (843,409 samples, 0.17%)</title><rect x="38.4505%" y="101" width="0.1678%" height="15" fill="rgb(213,181,19)"/><text x="38.7005%" y="111.50"></text></g><g><title>check_impl_item_well_formed (1,222,171 samples, 0.24%)</title><rect x="38.6409%" y="101" width="0.2431%" height="15" fill="rgb(254,191,54)"/><text x="38.8909%" y="111.50"></text></g><g><title>region_scope_tree (602,037 samples, 0.12%)</title><rect x="38.7643%" y="85" width="0.1197%" height="15" fill="rgb(241,83,37)"/><text x="39.0143%" y="95.50"></text></g><g><title>check_item_well_formed (767,418 samples, 0.15%)</title><rect x="38.8840%" y="101" width="0.1526%" height="15" fill="rgb(233,36,39)"/><text x="39.1340%" y="111.50"></text></g><g><title>analysis (101,871,914 samples, 20.26%)</title><rect x="18.8247%" y="149" width="20.2628%" height="15" fill="rgb(226,3,54)"/><text x="19.0747%" y="159.50">analysis</text></g><g><title>type_check_crate (64,818,718 samples, 12.89%)</title><rect x="26.1948%" y="133" width="12.8927%" height="15" fill="rgb(245,192,40)"/><text x="26.4448%" y="143.50">type_check_crate</text></g><g><title>wf_checking (2,356,864 samples, 0.47%)</title><rect x="38.6187%" y="117" width="0.4688%" height="15" fill="rgb(238,167,29)"/><text x="38.8687%" y="127.50"></text></g><g><title>const_caller_location (776,948 samples, 0.15%)</title><rect x="44.8873%" y="117" width="0.1545%" height="15" fill="rgb(232,182,51)"/><text x="45.1373%" y="127.50"></text></g><g><title>param_env (1,339,657 samples, 0.27%)</title><rect x="45.2696%" y="101" width="0.2665%" height="15" fill="rgb(231,60,39)"/><text x="45.5196%" y="111.50"></text></g><g><title>fn_abi_of_instance (2,860,274 samples, 0.57%)</title><rect x="45.0419%" y="117" width="0.5689%" height="15" fill="rgb(208,69,12)"/><text x="45.2919%" y="127.50"></text></g><g><title>codegen_module (31,426,569 samples, 6.25%)</title><rect x="39.4888%" y="133" width="6.2509%" height="15" fill="rgb(235,93,37)"/><text x="39.7388%" y="143.50">codegen_..</text></g><g><title>codegen_crate (33,462,979 samples, 6.66%)</title><rect x="39.0893%" y="149" width="6.6559%" height="15" fill="rgb(213,116,39)"/><text x="39.3393%" y="159.50">codegen_c..</text></g><g><title>LLVM_module_codegen (140,995,540 samples, 28.04%)</title><rect x="45.7705%" y="133" width="28.0446%" height="15" fill="rgb(222,207,29)"/><text x="46.0205%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (136,969,258 samples, 27.24%)</title><rect x="46.5713%" y="117" width="27.2438%" height="15" fill="rgb(206,96,30)"/><text x="46.8213%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (150,984,625 samples, 30.03%)</title><rect x="45.7452%" y="149" width="30.0315%" height="15" fill="rgb(218,138,4)"/><text x="45.9952%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,861,813 samples, 1.96%)</title><rect x="73.8151%" y="133" width="1.9616%" height="15" fill="rgb(250,191,14)"/><text x="74.0651%" y="143.50">L..</text></g><g><title>macro_expand_crate (13,176,653 samples, 2.62%)</title><rect x="75.8668%" y="133" width="2.6209%" height="15" fill="rgb(239,60,40)"/><text x="76.1168%" y="143.50">ma..</text></g><g><title>expand_crate (13,160,063 samples, 2.62%)</title><rect x="75.8701%" y="117" width="2.6176%" height="15" fill="rgb(206,27,48)"/><text x="76.1201%" y="127.50">ex..</text></g><g><title>late_resolve_crate (1,919,170 samples, 0.38%)</title><rect x="78.5616%" y="117" width="0.3817%" height="15" fill="rgb(225,35,8)"/><text x="78.8116%" y="127.50"></text></g><g><title>configure_and_expand (16,073,013 samples, 3.20%)</title><rect x="75.7767%" y="149" width="3.1970%" height="15" fill="rgb(250,213,24)"/><text x="76.0267%" y="159.50">con..</text></g><g><title>resolve_crate (2,221,872 samples, 0.44%)</title><rect x="78.5317%" y="133" width="0.4419%" height="15" fill="rgb(247,123,22)"/><text x="78.7817%" y="143.50"></text></g><g><title>early_lint_checks (574,346 samples, 0.11%)</title><rect x="79.0221%" y="149" width="0.1142%" height="15" fill="rgb(231,138,38)"/><text x="79.2721%" y="159.50"></text></g><g><title>free_global_ctxt (3,498,075 samples, 0.70%)</title><rect x="79.1363%" y="149" width="0.6958%" height="15" fill="rgb(231,145,46)"/><text x="79.3863%" y="159.50"></text></g><g><title>codegen_fn_attrs (515,104 samples, 0.10%)</title><rect x="80.1546%" y="69" width="0.1025%" height="15" fill="rgb(251,118,11)"/><text x="80.4046%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (589,474 samples, 0.12%)</title><rect x="81.6030%" y="53" width="0.1172%" height="15" fill="rgb(217,147,25)"/><text x="81.8530%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,930,134 samples, 1.38%)</title><rect x="81.7203%" y="53" width="1.3784%" height="15" fill="rgb(247,81,37)"/><text x="81.9703%" y="63.50"></text></g><g><title>optimized_mir (14,161,102 samples, 2.82%)</title><rect x="80.2851%" y="69" width="2.8167%" height="15" fill="rgb(209,12,38)"/><text x="80.5351%" y="79.50">op..</text></g><g><title>resolve_instance (697,309 samples, 0.14%)</title><rect x="83.1018%" y="69" width="0.1387%" height="15" fill="rgb(227,1,9)"/><text x="83.3518%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (16,843,572 samples, 3.35%)</title><rect x="79.9649%" y="85" width="3.3503%" height="15" fill="rgb(248,47,43)"/><text x="80.2149%" y="95.50">mon..</text></g><g><title>monomorphization_collector (16,892,952 samples, 3.36%)</title><rect x="79.9645%" y="101" width="3.3601%" height="15" fill="rgb(221,10,30)"/><text x="80.2145%" y="111.50">mon..</text></g><g><title>collect_and_partition_mono_items (17,636,439 samples, 3.51%)</title><rect x="79.9561%" y="117" width="3.5080%" height="15" fill="rgb(210,229,1)"/><text x="80.2061%" y="127.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (701,037 samples, 0.14%)</title><rect x="83.3246%" y="101" width="0.1394%" height="15" fill="rgb(222,148,37)"/><text x="83.5746%" y="111.50"></text></g><g><title>exported_symbols (17,701,890 samples, 3.52%)</title><rect x="79.9487%" y="133" width="3.5210%" height="15" fill="rgb(234,67,33)"/><text x="80.1987%" y="143.50">exp..</text></g><g><title>generate_crate_metadata (18,345,557 samples, 3.65%)</title><rect x="79.8321%" y="149" width="3.6490%" height="15" fill="rgb(247,98,35)"/><text x="80.0821%" y="159.50">gene..</text></g><g><title>hir_lowering (3,947,201 samples, 0.79%)</title><rect x="83.4811%" y="149" width="0.7851%" height="15" fill="rgb(247,138,52)"/><text x="83.7311%" y="159.50"></text></g><g><title>finish_ongoing_codegen (72,715,278 samples, 14.46%)</title><rect x="84.2692%" y="133" width="14.4634%" height="15" fill="rgb(213,79,30)"/><text x="84.5192%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,333,503 samples, 0.27%)</title><rect x="98.7326%" y="133" width="0.2652%" height="15" fill="rgb(246,177,23)"/><text x="98.9826%" y="143.50"></text></g><g><title>link_binary (1,323,263 samples, 0.26%)</title><rect x="98.7346%" y="117" width="0.2632%" height="15" fill="rgb(230,62,27)"/><text x="98.9846%" y="127.50"></text></g><g><title>link_rlib (873,999 samples, 0.17%)</title><rect x="98.8240%" y="101" width="0.1738%" height="15" fill="rgb(216,154,8)"/><text x="99.0740%" y="111.50"></text></g><g><title>link (74,074,582 samples, 14.73%)</title><rect x="84.2662%" y="149" width="14.7338%" height="15" fill="rgb(244,35,45)"/><text x="84.5162%" y="159.50">link</text></g><g><title>parse_crate (3,241,183 samples, 0.64%)</title><rect x="99.0000%" y="149" width="0.6447%" height="15" fill="rgb(251,115,12)"/><text x="99.2500%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (1,185,893 samples, 0.24%)</title><rect x="99.6834%" y="149" width="0.2359%" height="15" fill="rgb(240,54,50)"/><text x="99.9334%" y="159.50"></text></g><g><title>all (502,754,306 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(233,84,52)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (502,754,306 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>