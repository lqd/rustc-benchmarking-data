<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,256,153 samples, 13.25%)</title><rect x="0.5105%" y="261" width="13.2498%" height="15" fill="rgb(227,0,7)"/><text x="0.7605%" y="271.50">LLVM_passes</text></g><g><title>adt_drop_tys (261,862 samples, 0.21%)</title><rect x="16.4186%" y="133" width="0.2134%" height="15" fill="rgb(217,0,24)"/><text x="16.6686%" y="143.50"></text></g><g><title>needs_drop_raw (545,164 samples, 0.44%)</title><rect x="16.3990%" y="149" width="0.4443%" height="15" fill="rgb(221,193,54)"/><text x="16.6490%" y="159.50"></text></g><g><title>is_copy_raw (255,842 samples, 0.21%)</title><rect x="16.6348%" y="133" width="0.2085%" height="15" fill="rgb(248,212,6)"/><text x="16.8848%" y="143.50"></text></g><g><title>evaluate_obligation (222,161 samples, 0.18%)</title><rect x="16.6623%" y="117" width="0.1811%" height="15" fill="rgb(208,68,35)"/><text x="16.9123%" y="127.50"></text></g><g><title>specialization_graph_of (214,702 samples, 0.17%)</title><rect x="16.9160%" y="133" width="0.1750%" height="15" fill="rgb(232,128,0)"/><text x="17.1660%" y="143.50"></text></g><g><title>resolve_instance (321,914 samples, 0.26%)</title><rect x="16.8434%" y="149" width="0.2624%" height="15" fill="rgb(207,160,47)"/><text x="17.0934%" y="159.50"></text></g><g><title>mir_const (1,831,778 samples, 1.49%)</title><rect x="15.7152%" y="197" width="1.4930%" height="15" fill="rgb(228,23,34)"/><text x="15.9652%" y="207.50"></text></g><g><title>unsafety_check_result (1,536,584 samples, 1.25%)</title><rect x="15.9558%" y="181" width="1.2524%" height="15" fill="rgb(218,30,26)"/><text x="16.2058%" y="191.50"></text></g><g><title>mir_built (1,326,854 samples, 1.08%)</title><rect x="16.1267%" y="165" width="1.0815%" height="15" fill="rgb(220,122,19)"/><text x="16.3767%" y="175.50"></text></g><g><title>has_structural_eq_impls (336,743 samples, 0.27%)</title><rect x="17.3235%" y="181" width="0.2745%" height="15" fill="rgb(250,228,42)"/><text x="17.5735%" y="191.50"></text></g><g><title>evaluate_obligation (315,553 samples, 0.26%)</title><rect x="17.3408%" y="165" width="0.2572%" height="15" fill="rgb(240,193,28)"/><text x="17.5908%" y="175.50"></text></g><g><title>trait_impls_of (281,863 samples, 0.23%)</title><rect x="17.3683%" y="149" width="0.2297%" height="15" fill="rgb(216,20,37)"/><text x="17.6183%" y="159.50"></text></g><g><title>adt_drop_tys (136,771 samples, 0.11%)</title><rect x="17.7493%" y="165" width="0.1115%" height="15" fill="rgb(206,188,39)"/><text x="17.9993%" y="175.50"></text></g><g><title>needs_drop_raw (156,261 samples, 0.13%)</title><rect x="17.7424%" y="181" width="0.1274%" height="15" fill="rgb(217,207,13)"/><text x="17.9924%" y="191.50"></text></g><g><title>mir_promoted (2,836,798 samples, 2.31%)</title><rect x="15.5601%" y="213" width="2.3122%" height="15" fill="rgb(231,73,38)"/><text x="15.8101%" y="223.50">m..</text></g><g><title>mir_const_qualif (814,728 samples, 0.66%)</title><rect x="17.2082%" y="197" width="0.6641%" height="15" fill="rgb(225,20,46)"/><text x="17.4582%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (155,330 samples, 0.13%)</title><rect x="17.8781%" y="213" width="0.1266%" height="15" fill="rgb(210,31,41)"/><text x="18.1281%" y="223.50"></text></g><g><title>type_op_prove_predicate (653,435 samples, 0.53%)</title><rect x="18.0047%" y="213" width="0.5326%" height="15" fill="rgb(221,200,47)"/><text x="18.2547%" y="223.50"></text></g><g><title>MIR_borrow_checking (5,744,748 samples, 4.68%)</title><rect x="13.8655%" y="245" width="4.6823%" height="15" fill="rgb(226,26,5)"/><text x="14.1155%" y="255.50">MIR_b..</text></g><g><title>mir_borrowck (5,726,438 samples, 4.67%)</title><rect x="13.8805%" y="229" width="4.6674%" height="15" fill="rgb(249,33,26)"/><text x="14.1305%" y="239.50">mir_b..</text></g><g><title>MIR_effect_checking (172,542 samples, 0.14%)</title><rect x="18.5479%" y="245" width="0.1406%" height="15" fill="rgb(235,183,28)"/><text x="18.7979%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (145,692 samples, 0.12%)</title><rect x="18.5698%" y="229" width="0.1187%" height="15" fill="rgb(221,5,38)"/><text x="18.8198%" y="239.50"></text></g><g><title>codegen_fn_attrs (179,871 samples, 0.15%)</title><rect x="18.8494%" y="213" width="0.1466%" height="15" fill="rgb(247,18,42)"/><text x="19.0994%" y="223.50"></text></g><g><title>check_mod_attrs (242,643 samples, 0.20%)</title><rect x="18.7984%" y="229" width="0.1978%" height="15" fill="rgb(241,131,45)"/><text x="19.0484%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (205,472 samples, 0.17%)</title><rect x="19.0313%" y="229" width="0.1675%" height="15" fill="rgb(249,31,29)"/><text x="19.2813%" y="239.50"></text></g><g><title>misc_checking_1 (553,525 samples, 0.45%)</title><rect x="18.7795%" y="245" width="0.4512%" height="15" fill="rgb(225,111,53)"/><text x="19.0295%" y="255.50"></text></g><g><title>misc_checking_2 (234,682 samples, 0.19%)</title><rect x="19.2307%" y="245" width="0.1913%" height="15" fill="rgb(238,160,17)"/><text x="19.4807%" y="255.50"></text></g><g><title>match_checking (131,451 samples, 0.11%)</title><rect x="19.3148%" y="229" width="0.1071%" height="15" fill="rgb(214,148,48)"/><text x="19.5648%" y="239.50"></text></g><g><title>check_match (124,071 samples, 0.10%)</title><rect x="19.3208%" y="213" width="0.1011%" height="15" fill="rgb(232,36,49)"/><text x="19.5708%" y="223.50"></text></g><g><title>fn_abi_of_instance (185,672 samples, 0.15%)</title><rect x="19.7209%" y="165" width="0.1513%" height="15" fill="rgb(209,103,24)"/><text x="19.9709%" y="175.50"></text></g><g><title>eval_to_allocation_raw (568,576 samples, 0.46%)</title><rect x="19.5908%" y="197" width="0.4634%" height="15" fill="rgb(229,88,8)"/><text x="19.8408%" y="207.50"></text></g><g><title>eval_to_allocation_raw (565,906 samples, 0.46%)</title><rect x="19.5930%" y="181" width="0.4612%" height="15" fill="rgb(213,181,19)"/><text x="19.8430%" y="191.50"></text></g><g><title>crate_lints (756,938 samples, 0.62%)</title><rect x="19.5222%" y="213" width="0.6170%" height="15" fill="rgb(254,191,54)"/><text x="19.7722%" y="223.50"></text></g><g><title>lint_checking (821,479 samples, 0.67%)</title><rect x="19.5198%" y="229" width="0.6696%" height="15" fill="rgb(241,83,37)"/><text x="19.7698%" y="239.50"></text></g><g><title>misc_checking_3 (1,099,741 samples, 0.90%)</title><rect x="19.4219%" y="245" width="0.8964%" height="15" fill="rgb(233,36,39)"/><text x="19.6719%" y="255.50"></text></g><g><title>dropck_outlives (173,682 samples, 0.14%)</title><rect x="21.8874%" y="181" width="0.1416%" height="15" fill="rgb(226,3,54)"/><text x="22.1374%" y="191.50"></text></g><g><title>adt_dtorck_constraint (130,612 samples, 0.11%)</title><rect x="21.9225%" y="165" width="0.1065%" height="15" fill="rgb(245,192,40)"/><text x="22.1725%" y="175.50"></text></g><g><title>adt_def (124,171 samples, 0.10%)</title><rect x="22.1179%" y="149" width="0.1012%" height="15" fill="rgb(238,167,29)"/><text x="22.3679%" y="159.50"></text></g><g><title>adt_sized_constraint (131,271 samples, 0.11%)</title><rect x="22.2191%" y="149" width="0.1070%" height="15" fill="rgb(232,182,51)"/><text x="22.4691%" y="159.50"></text></g><g><title>adt_sized_constraint (294,453 samples, 0.24%)</title><rect x="22.1063%" y="165" width="0.2400%" height="15" fill="rgb(231,60,39)"/><text x="22.3563%" y="175.50"></text></g><g><title>evaluate_obligation (561,537 samples, 0.46%)</title><rect x="22.0290%" y="181" width="0.4577%" height="15" fill="rgb(208,69,12)"/><text x="22.2790%" y="191.50"></text></g><g><title>trait_impls_of (157,572 samples, 0.13%)</title><rect x="22.3583%" y="165" width="0.1284%" height="15" fill="rgb(235,93,37)"/><text x="22.6083%" y="175.50"></text></g><g><title>predicates_of (162,002 samples, 0.13%)</title><rect x="22.7065%" y="181" width="0.1320%" height="15" fill="rgb(213,116,39)"/><text x="22.9565%" y="191.50"></text></g><g><title>dropck_outlives (126,402 samples, 0.10%)</title><rect x="23.8720%" y="165" width="0.1030%" height="15" fill="rgb(222,207,29)"/><text x="24.1220%" y="175.50"></text></g><g><title>evaluate_obligation (476,626 samples, 0.39%)</title><rect x="23.9750%" y="165" width="0.3885%" height="15" fill="rgb(206,96,30)"/><text x="24.2250%" y="175.50"></text></g><g><title>trait_impls_of (144,933 samples, 0.12%)</title><rect x="24.2454%" y="149" width="0.1181%" height="15" fill="rgb(218,138,4)"/><text x="24.4954%" y="159.50"></text></g><g><title>is_copy_raw (271,663 samples, 0.22%)</title><rect x="24.4464%" y="165" width="0.2214%" height="15" fill="rgb(250,191,14)"/><text x="24.6964%" y="175.50"></text></g><g><title>evaluate_obligation (250,573 samples, 0.20%)</title><rect x="24.4636%" y="149" width="0.2042%" height="15" fill="rgb(239,60,40)"/><text x="24.7136%" y="159.50"></text></g><g><title>trait_impls_of (221,883 samples, 0.18%)</title><rect x="24.4869%" y="133" width="0.1808%" height="15" fill="rgb(206,27,48)"/><text x="24.7369%" y="143.50"></text></g><g><title>evaluate_obligation (193,432 samples, 0.16%)</title><rect x="24.9337%" y="149" width="0.1577%" height="15" fill="rgb(225,35,8)"/><text x="25.1837%" y="159.50"></text></g><g><title>layout_of (176,732 samples, 0.14%)</title><rect x="25.1134%" y="149" width="0.1440%" height="15" fill="rgb(250,213,24)"/><text x="25.3634%" y="159.50"></text></g><g><title>object_safety_violations (703,097 samples, 0.57%)</title><rect x="24.7739%" y="165" width="0.5731%" height="15" fill="rgb(247,123,22)"/><text x="25.0239%" y="175.50"></text></g><g><title>typeck (3,144,251 samples, 2.56%)</title><rect x="22.8991%" y="181" width="2.5628%" height="15" fill="rgb(231,138,38)"/><text x="23.1491%" y="191.50">ty..</text></g><g><title>item_bodies_checking (6,258,942 samples, 5.10%)</title><rect x="20.3828%" y="229" width="5.1014%" height="15" fill="rgb(231,145,46)"/><text x="20.6328%" y="239.50">item_b..</text></g><g><title>typeck_item_bodies (6,255,772 samples, 5.10%)</title><rect x="20.3854%" y="213" width="5.0988%" height="15" fill="rgb(251,118,11)"/><text x="20.6354%" y="223.50">typeck..</text></g><g><title>typeck (6,245,772 samples, 5.09%)</title><rect x="20.3935%" y="197" width="5.0907%" height="15" fill="rgb(217,147,25)"/><text x="20.6435%" y="207.50">typeck</text></g><g><title>layout_of (147,072 samples, 0.12%)</title><rect x="25.5101%" y="181" width="0.1199%" height="15" fill="rgb(247,81,37)"/><text x="25.7601%" y="191.50"></text></g><g><title>layout_of (165,332 samples, 0.13%)</title><rect x="25.5002%" y="197" width="0.1348%" height="15" fill="rgb(209,12,38)"/><text x="25.7502%" y="207.50"></text></g><g><title>adt_def (229,712 samples, 0.19%)</title><rect x="25.9358%" y="133" width="0.1872%" height="15" fill="rgb(227,1,9)"/><text x="26.1858%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (229,002 samples, 0.19%)</title><rect x="25.9364%" y="117" width="0.1867%" height="15" fill="rgb(248,47,43)"/><text x="26.1864%" y="127.50"></text></g><g><title>impl_parent (149,472 samples, 0.12%)</title><rect x="26.3457%" y="53" width="0.1218%" height="15" fill="rgb(221,10,30)"/><text x="26.5957%" y="63.50"></text></g><g><title>impl_trait_ref (571,945 samples, 0.47%)</title><rect x="26.4675%" y="53" width="0.4662%" height="15" fill="rgb(210,229,1)"/><text x="26.7175%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (520,683 samples, 0.42%)</title><rect x="26.5093%" y="37" width="0.4244%" height="15" fill="rgb(222,148,37)"/><text x="26.7593%" y="47.50"></text></g><g><title>coherent_trait (978,690 samples, 0.80%)</title><rect x="26.1806%" y="85" width="0.7977%" height="15" fill="rgb(234,67,33)"/><text x="26.4306%" y="95.50"></text></g><g><title>specialization_graph_of (973,270 samples, 0.79%)</title><rect x="26.1850%" y="69" width="0.7933%" height="15" fill="rgb(247,98,35)"/><text x="26.4350%" y="79.50"></text></g><g><title>adt_destructor (994,430 samples, 0.81%)</title><rect x="26.1744%" y="117" width="0.8105%" height="15" fill="rgb(247,138,52)"/><text x="26.4244%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (993,210 samples, 0.81%)</title><rect x="26.1754%" y="101" width="0.8095%" height="15" fill="rgb(213,79,30)"/><text x="26.4254%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,062,701 samples, 0.87%)</title><rect x="26.1263%" y="133" width="0.8662%" height="15" fill="rgb(246,177,23)"/><text x="26.3763%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,331,953 samples, 1.09%)</title><rect x="25.9253%" y="149" width="1.0856%" height="15" fill="rgb(230,62,27)"/><text x="26.1753%" y="159.50"></text></g><g><title>dropck_outlives (1,385,034 samples, 1.13%)</title><rect x="25.8939%" y="181" width="1.1289%" height="15" fill="rgb(216,154,8)"/><text x="26.1439%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,356,323 samples, 1.11%)</title><rect x="25.9173%" y="165" width="1.1055%" height="15" fill="rgb(244,35,45)"/><text x="26.1673%" y="175.50"></text></g><g><title>item_types_checking (2,004,310 samples, 1.63%)</title><rect x="25.4842%" y="229" width="1.6336%" height="15" fill="rgb(251,115,12)"/><text x="25.7342%" y="239.50"></text></g><g><title>check_mod_item_types (2,000,790 samples, 1.63%)</title><rect x="25.4871%" y="213" width="1.6308%" height="15" fill="rgb(240,54,50)"/><text x="25.7371%" y="223.50"></text></g><g><title>typeck (1,819,328 samples, 1.48%)</title><rect x="25.6350%" y="197" width="1.4829%" height="15" fill="rgb(233,84,52)"/><text x="25.8850%" y="207.50"></text></g><g><title>generics_of (177,361 samples, 0.14%)</title><rect x="27.2578%" y="197" width="0.1446%" height="15" fill="rgb(207,117,47)"/><text x="27.5078%" y="207.50"></text></g><g><title>type_collecting (427,425 samples, 0.35%)</title><rect x="27.1195%" y="229" width="0.3484%" height="15" fill="rgb(249,43,39)"/><text x="27.3695%" y="239.50"></text></g><g><title>collect_mod_item_types (417,705 samples, 0.34%)</title><rect x="27.1274%" y="213" width="0.3405%" height="15" fill="rgb(209,38,44)"/><text x="27.3774%" y="223.50"></text></g><g><title>evaluate_obligation (273,602 samples, 0.22%)</title><rect x="27.8694%" y="197" width="0.2230%" height="15" fill="rgb(236,212,23)"/><text x="28.1194%" y="207.50"></text></g><g><title>param_env (186,292 samples, 0.15%)</title><rect x="28.1886%" y="197" width="0.1518%" height="15" fill="rgb(242,79,21)"/><text x="28.4386%" y="207.50"></text></g><g><title>analysis (17,971,031 samples, 14.65%)</title><rect x="13.7602%" y="261" width="14.6475%" height="15" fill="rgb(211,96,35)"/><text x="14.0102%" y="271.50">analysis</text></g><g><title>type_check_crate (9,924,950 samples, 8.09%)</title><rect x="20.3183%" y="245" width="8.0894%" height="15" fill="rgb(253,215,40)"/><text x="20.5683%" y="255.50">type_check_..</text></g><g><title>wf_checking (1,151,792 samples, 0.94%)</title><rect x="27.4690%" y="229" width="0.9388%" height="15" fill="rgb(211,81,21)"/><text x="27.7190%" y="239.50"></text></g><g><title>check_item_well_formed (1,118,612 samples, 0.91%)</title><rect x="27.4960%" y="213" width="0.9117%" height="15" fill="rgb(208,190,38)"/><text x="27.7460%" y="223.50"></text></g><g><title>compute_debuginfo_type_name (298,122 samples, 0.24%)</title><rect x="37.6190%" y="229" width="0.2430%" height="15" fill="rgb(235,213,38)"/><text x="37.8690%" y="239.50"></text></g><g><title>codegen_fn_attrs (164,551 samples, 0.13%)</title><rect x="38.3517%" y="213" width="0.1341%" height="15" fill="rgb(237,122,38)"/><text x="38.6017%" y="223.50"></text></g><g><title>eval_to_const_value_raw (326,414 samples, 0.27%)</title><rect x="38.7082%" y="197" width="0.2660%" height="15" fill="rgb(244,218,35)"/><text x="38.9582%" y="207.50"></text></g><g><title>eval_to_const_value_raw (303,604 samples, 0.25%)</title><rect x="38.7268%" y="181" width="0.2475%" height="15" fill="rgb(240,68,47)"/><text x="38.9768%" y="191.50"></text></g><g><title>eval_to_allocation_raw (268,352 samples, 0.22%)</title><rect x="38.7555%" y="165" width="0.2187%" height="15" fill="rgb(210,16,53)"/><text x="39.0055%" y="175.50"></text></g><g><title>layout_of (233,493 samples, 0.19%)</title><rect x="39.0255%" y="197" width="0.1903%" height="15" fill="rgb(235,124,12)"/><text x="39.2755%" y="207.50"></text></g><g><title>param_env (248,873 samples, 0.20%)</title><rect x="39.2158%" y="197" width="0.2028%" height="15" fill="rgb(224,169,11)"/><text x="39.4658%" y="207.50"></text></g><g><title>layout_of (1,133,044 samples, 0.92%)</title><rect x="38.5057%" y="213" width="0.9235%" height="15" fill="rgb(250,166,2)"/><text x="38.7557%" y="223.50"></text></g><g><title>predicates_of (224,241 samples, 0.18%)</title><rect x="39.7015%" y="197" width="0.1828%" height="15" fill="rgb(242,216,29)"/><text x="39.9515%" y="207.50"></text></g><g><title>predicates_defined_on (167,111 samples, 0.14%)</title><rect x="39.7480%" y="181" width="0.1362%" height="15" fill="rgb(230,116,27)"/><text x="39.9980%" y="191.50"></text></g><g><title>param_env (561,264 samples, 0.46%)</title><rect x="39.4292%" y="213" width="0.4575%" height="15" fill="rgb(228,99,48)"/><text x="39.6792%" y="223.50"></text></g><g><title>fn_abi_of_instance (2,363,657 samples, 1.93%)</title><rect x="37.9664%" y="229" width="1.9265%" height="15" fill="rgb(253,11,6)"/><text x="38.2164%" y="239.50">f..</text></g><g><title>item_attrs (478,774 samples, 0.39%)</title><rect x="40.6125%" y="165" width="0.3902%" height="15" fill="rgb(247,143,39)"/><text x="40.8625%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (475,714 samples, 0.39%)</title><rect x="40.6150%" y="149" width="0.3877%" height="15" fill="rgb(236,97,10)"/><text x="40.8650%" y="159.50"></text></g><g><title>layout_of (217,612 samples, 0.18%)</title><rect x="41.1481%" y="133" width="0.1774%" height="15" fill="rgb(233,208,19)"/><text x="41.3981%" y="143.50"></text></g><g><title>layout_of (168,632 samples, 0.14%)</title><rect x="41.1880%" y="117" width="0.1374%" height="15" fill="rgb(216,164,2)"/><text x="41.4380%" y="127.50"></text></g><g><title>layout_of (394,255 samples, 0.32%)</title><rect x="41.0470%" y="149" width="0.3213%" height="15" fill="rgb(220,129,5)"/><text x="41.2970%" y="159.50"></text></g><g><title>eval_to_const_value_raw (237,582 samples, 0.19%)</title><rect x="41.4177%" y="133" width="0.1936%" height="15" fill="rgb(242,17,10)"/><text x="41.6677%" y="143.50"></text></g><g><title>eval_to_const_value_raw (234,802 samples, 0.19%)</title><rect x="41.4200%" y="117" width="0.1914%" height="15" fill="rgb(242,107,0)"/><text x="41.6700%" y="127.50"></text></g><g><title>eval_to_allocation_raw (231,212 samples, 0.19%)</title><rect x="41.4229%" y="101" width="0.1885%" height="15" fill="rgb(251,28,31)"/><text x="41.6729%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (263,852 samples, 0.22%)</title><rect x="41.4029%" y="149" width="0.2151%" height="15" fill="rgb(233,223,10)"/><text x="41.6529%" y="159.50"></text></g><g><title>layout_of (763,339 samples, 0.62%)</title><rect x="41.0028%" y="165" width="0.6222%" height="15" fill="rgb(215,21,27)"/><text x="41.2528%" y="175.50"></text></g><g><title>layout_of (1,494,914 samples, 1.22%)</title><rect x="40.5193%" y="181" width="1.2184%" height="15" fill="rgb(232,23,21)"/><text x="40.7693%" y="191.50"></text></g><g><title>layout_of (1,678,195 samples, 1.37%)</title><rect x="40.4054%" y="197" width="1.3678%" height="15" fill="rgb(244,5,23)"/><text x="40.6554%" y="207.50"></text></g><g><title>layout_of (2,060,481 samples, 1.68%)</title><rect x="40.2027%" y="213" width="1.6794%" height="15" fill="rgb(226,81,46)"/><text x="40.4527%" y="223.50"></text></g><g><title>layout_of (2,369,414 samples, 1.93%)</title><rect x="40.0320%" y="229" width="1.9312%" height="15" fill="rgb(247,70,30)"/><text x="40.2820%" y="239.50">l..</text></g><g><title>codegen_module (15,291,992 samples, 12.46%)</title><rect x="29.6396%" y="245" width="12.4639%" height="15" fill="rgb(212,68,19)"/><text x="29.8896%" y="255.50">codegen_module</text></g><g><title>symbol_name (143,671 samples, 0.12%)</title><rect x="41.9864%" y="229" width="0.1171%" height="15" fill="rgb(240,187,13)"/><text x="42.2364%" y="239.50"></text></g><g><title>codegen_crate (16,918,490 samples, 13.79%)</title><rect x="28.4211%" y="261" width="13.7896%" height="15" fill="rgb(223,113,26)"/><text x="28.6711%" y="271.50">codegen_crate</text></g><g><title>LLVM_module_codegen (37,210,763 samples, 30.33%)</title><rect x="42.2961%" y="245" width="30.3291%" height="15" fill="rgb(206,192,2)"/><text x="42.5461%" y="255.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (35,546,578 samples, 28.97%)</title><rect x="43.6525%" y="229" width="28.9726%" height="15" fill="rgb(241,108,4)"/><text x="43.9025%" y="239.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (39,121,173 samples, 31.89%)</title><rect x="42.2107%" y="261" width="31.8862%" height="15" fill="rgb(247,173,49)"/><text x="42.4607%" y="271.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,805,559 samples, 1.47%)</title><rect x="72.6252%" y="245" width="1.4716%" height="15" fill="rgb(224,114,35)"/><text x="72.8752%" y="255.50"></text></g><g><title>metadata_load_macro (175,972 samples, 0.14%)</title><rect x="82.5200%" y="213" width="0.1434%" height="15" fill="rgb(245,159,27)"/><text x="82.7700%" y="223.50"></text></g><g><title>macro_expand_crate (12,533,167 samples, 10.22%)</title><rect x="74.3538%" y="245" width="10.2153%" height="15" fill="rgb(245,172,44)"/><text x="74.6038%" y="255.50">macro_expand_cr..</text></g><g><title>expand_crate (12,512,236 samples, 10.20%)</title><rect x="74.3709%" y="229" width="10.1982%" height="15" fill="rgb(236,23,11)"/><text x="74.6209%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (2,338,164 samples, 1.91%)</title><rect x="82.6634%" y="213" width="1.9057%" height="15" fill="rgb(205,117,38)"/><text x="82.9134%" y="223.50">m..</text></g><g><title>metadata_register_crate (838,748 samples, 0.68%)</title><rect x="83.8855%" y="197" width="0.6836%" height="15" fill="rgb(237,72,25)"/><text x="84.1355%" y="207.50"></text></g><g><title>finalize_imports (272,253 samples, 0.22%)</title><rect x="84.6437%" y="229" width="0.2219%" height="15" fill="rgb(244,70,9)"/><text x="84.8937%" y="239.50"></text></g><g><title>late_resolve_crate (660,587 samples, 0.54%)</title><rect x="84.8803%" y="229" width="0.5384%" height="15" fill="rgb(217,125,39)"/><text x="85.1303%" y="239.50"></text></g><g><title>configure_and_expand (13,937,971 samples, 11.36%)</title><rect x="74.0968%" y="261" width="11.3603%" height="15" fill="rgb(235,36,10)"/><text x="74.3468%" y="271.50">configure_and_exp..</text></g><g><title>resolve_crate (1,006,320 samples, 0.82%)</title><rect x="84.6369%" y="245" width="0.8202%" height="15" fill="rgb(251,123,47)"/><text x="84.8869%" y="255.50"></text></g><g><title>free_global_ctxt (2,726,237 samples, 2.22%)</title><rect x="85.5792%" y="261" width="2.2221%" height="15" fill="rgb(221,13,13)"/><text x="85.8292%" y="271.50">f..</text></g><g><title>crate_hash (124,211 samples, 0.10%)</title><rect x="88.1197%" y="245" width="0.1012%" height="15" fill="rgb(238,131,9)"/><text x="88.3697%" y="255.50"></text></g><g><title>item_attrs (248,524 samples, 0.20%)</title><rect x="88.7292%" y="165" width="0.2026%" height="15" fill="rgb(211,50,8)"/><text x="88.9792%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (237,764 samples, 0.19%)</title><rect x="88.7380%" y="149" width="0.1938%" height="15" fill="rgb(245,182,24)"/><text x="88.9880%" y="159.50"></text></g><g><title>codegen_fn_attrs (388,275 samples, 0.32%)</title><rect x="88.6897%" y="181" width="0.3165%" height="15" fill="rgb(242,14,37)"/><text x="88.9397%" y="191.50"></text></g><g><title>is_reachable_non_generic (328,983 samples, 0.27%)</title><rect x="89.0763%" y="181" width="0.2681%" height="15" fill="rgb(246,228,12)"/><text x="89.3263%" y="191.50"></text></g><g><title>reachable_non_generics (316,183 samples, 0.26%)</title><rect x="89.0868%" y="165" width="0.2577%" height="15" fill="rgb(213,55,15)"/><text x="89.3368%" y="175.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (313,553 samples, 0.26%)</title><rect x="89.0889%" y="149" width="0.2556%" height="15" fill="rgb(209,9,3)"/><text x="89.3389%" y="159.50"></text></g><g><title>exported_symbols (158,371 samples, 0.13%)</title><rect x="89.2154%" y="133" width="0.1291%" height="15" fill="rgb(230,59,30)"/><text x="89.4654%" y="143.50"></text></g><g><title>metadata_decode_entry_exported_symbols (156,381 samples, 0.13%)</title><rect x="89.2170%" y="117" width="0.1275%" height="15" fill="rgb(209,121,21)"/><text x="89.4670%" y="127.50"></text></g><g><title>mir_shims (395,945 samples, 0.32%)</title><rect x="89.3445%" y="181" width="0.3227%" height="15" fill="rgb(220,109,13)"/><text x="89.5945%" y="191.50"></text></g><g><title>layout_of (236,973 samples, 0.19%)</title><rect x="90.0709%" y="133" width="0.1931%" height="15" fill="rgb(232,18,1)"/><text x="90.3209%" y="143.50"></text></g><g><title>layout_of (156,521 samples, 0.13%)</title><rect x="90.1365%" y="117" width="0.1276%" height="15" fill="rgb(215,41,42)"/><text x="90.3865%" y="127.50"></text></g><g><title>layout_of (334,443 samples, 0.27%)</title><rect x="90.0024%" y="149" width="0.2726%" height="15" fill="rgb(224,123,36)"/><text x="90.2524%" y="159.50"></text></g><g><title>layout_of (497,356 samples, 0.41%)</title><rect x="89.8922%" y="165" width="0.4054%" height="15" fill="rgb(240,125,3)"/><text x="90.1422%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (369,253 samples, 0.30%)</title><rect x="90.2976%" y="165" width="0.3010%" height="15" fill="rgb(205,98,50)"/><text x="90.5476%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (255,953 samples, 0.21%)</title><rect x="90.5986%" y="165" width="0.2086%" height="15" fill="rgb(205,185,37)"/><text x="90.8486%" y="175.50"></text></g><g><title>impl_parent (220,162 samples, 0.18%)</title><rect x="91.1628%" y="133" width="0.1794%" height="15" fill="rgb(238,207,15)"/><text x="91.4128%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (151,660 samples, 0.12%)</title><rect x="91.2187%" y="117" width="0.1236%" height="15" fill="rgb(213,199,42)"/><text x="91.4687%" y="127.50"></text></g><g><title>specialization_graph_of (1,223,852 samples, 1.00%)</title><rect x="90.9043%" y="149" width="0.9975%" height="15" fill="rgb(235,201,11)"/><text x="91.1543%" y="159.50"></text></g><g><title>impl_trait_ref (686,469 samples, 0.56%)</title><rect x="91.3423%" y="133" width="0.5595%" height="15" fill="rgb(207,46,11)"/><text x="91.5923%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (604,129 samples, 0.49%)</title><rect x="91.4094%" y="117" width="0.4924%" height="15" fill="rgb(241,35,35)"/><text x="91.6594%" y="127.50"></text></g><g><title>resolve_instance (1,347,594 samples, 1.10%)</title><rect x="90.8072%" y="165" width="1.0984%" height="15" fill="rgb(243,32,47)"/><text x="91.0572%" y="175.50"></text></g><g><title>optimized_mir (2,874,869 samples, 2.34%)</title><rect x="89.6672%" y="181" width="2.3432%" height="15" fill="rgb(247,202,23)"/><text x="89.9172%" y="191.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (128,592 samples, 0.10%)</title><rect x="91.9056%" y="165" width="0.1048%" height="15" fill="rgb(219,102,11)"/><text x="92.1556%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (259,854 samples, 0.21%)</title><rect x="92.1560%" y="165" width="0.2118%" height="15" fill="rgb(243,110,44)"/><text x="92.4060%" y="175.50"></text></g><g><title>impl_parent (378,997 samples, 0.31%)</title><rect x="93.0774%" y="149" width="0.3089%" height="15" fill="rgb(222,74,54)"/><text x="93.3274%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (192,565 samples, 0.16%)</title><rect x="93.2293%" y="133" width="0.1570%" height="15" fill="rgb(216,99,12)"/><text x="93.4793%" y="143.50"></text></g><g><title>specialization_graph_of (2,085,380 samples, 1.70%)</title><rect x="92.5220%" y="165" width="1.6997%" height="15" fill="rgb(226,22,26)"/><text x="92.7720%" y="175.50"></text></g><g><title>impl_trait_ref (1,024,909 samples, 0.84%)</title><rect x="93.3863%" y="149" width="0.8354%" height="15" fill="rgb(217,163,10)"/><text x="93.6363%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (822,489 samples, 0.67%)</title><rect x="93.5513%" y="133" width="0.6704%" height="15" fill="rgb(213,25,53)"/><text x="93.8013%" y="143.50"></text></g><g><title>resolve_instance (2,790,928 samples, 2.27%)</title><rect x="92.0104%" y="181" width="2.2748%" height="15" fill="rgb(252,105,26)"/><text x="92.2604%" y="191.50">r..</text></g><g><title>monomorphization_collector_graph_walk (7,640,837 samples, 6.23%)</title><rect x="88.3299%" y="197" width="6.2278%" height="15" fill="rgb(220,39,43)"/><text x="88.5799%" y="207.50">monomorp..</text></g><g><title>upstream_monomorphizations_for (209,032 samples, 0.17%)</title><rect x="94.3873%" y="181" width="0.1704%" height="15" fill="rgb(229,68,48)"/><text x="94.6373%" y="191.50"></text></g><g><title>upstream_monomorphizations (202,432 samples, 0.16%)</title><rect x="94.3927%" y="165" width="0.1650%" height="15" fill="rgb(252,8,32)"/><text x="94.6427%" y="175.50"></text></g><g><title>exported_symbols (125,221 samples, 0.10%)</title><rect x="94.4556%" y="149" width="0.1021%" height="15" fill="rgb(223,20,43)"/><text x="94.7056%" y="159.50"></text></g><g><title>monomorphization_collector (7,672,847 samples, 6.25%)</title><rect x="88.3264%" y="213" width="6.2538%" height="15" fill="rgb(229,81,49)"/><text x="88.5764%" y="223.50">monomorp..</text></g><g><title>assert_symbols_are_distinct (492,845 samples, 0.40%)</title><rect x="94.5979%" y="197" width="0.4017%" height="15" fill="rgb(236,28,36)"/><text x="94.8479%" y="207.50"></text></g><g><title>symbol_name (452,095 samples, 0.37%)</title><rect x="94.6311%" y="181" width="0.3685%" height="15" fill="rgb(249,185,26)"/><text x="94.8811%" y="191.50"></text></g><g><title>cgu_partitioning_place_roots (174,972 samples, 0.14%)</title><rect x="95.0884%" y="181" width="0.1426%" height="15" fill="rgb(249,174,33)"/><text x="95.3384%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (8,524,775 samples, 6.95%)</title><rect x="88.2901%" y="229" width="6.9482%" height="15" fill="rgb(233,201,37)"/><text x="88.5401%" y="239.50">collect_a..</text></g><g><title>partition_and_assert_distinct_symbols (807,338 samples, 0.66%)</title><rect x="94.5802%" y="213" width="0.6580%" height="15" fill="rgb(221,78,26)"/><text x="94.8302%" y="223.50"></text></g><g><title>cgu_partitioning (292,873 samples, 0.24%)</title><rect x="94.9996%" y="197" width="0.2387%" height="15" fill="rgb(250,127,30)"/><text x="95.2496%" y="207.50"></text></g><g><title>exported_symbols (8,610,287 samples, 7.02%)</title><rect x="88.2549%" y="245" width="7.0179%" height="15" fill="rgb(230,49,44)"/><text x="88.5049%" y="255.50">exported_..</text></g><g><title>layout_of (136,612 samples, 0.11%)</title><rect x="95.4704%" y="229" width="0.1113%" height="15" fill="rgb(229,67,23)"/><text x="95.7204%" y="239.50"></text></g><g><title>optimized_mir (566,575 samples, 0.46%)</title><rect x="95.2986%" y="245" width="0.4618%" height="15" fill="rgb(249,83,47)"/><text x="95.5486%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (219,133 samples, 0.18%)</title><rect x="95.5817%" y="229" width="0.1786%" height="15" fill="rgb(215,43,3)"/><text x="95.8317%" y="239.50"></text></g><g><title>generate_crate_metadata (9,786,169 samples, 7.98%)</title><rect x="87.8013%" y="261" width="7.9763%" height="15" fill="rgb(238,154,13)"/><text x="88.0513%" y="271.50">generate_cr..</text></g><g><title>hir_lowering (474,354 samples, 0.39%)</title><rect x="95.7776%" y="261" width="0.3866%" height="15" fill="rgb(219,56,2)"/><text x="96.0276%" y="271.50"></text></g><g><title>finish_ongoing_codegen (1,435,135 samples, 1.17%)</title><rect x="96.1748%" y="245" width="1.1697%" height="15" fill="rgb(233,0,4)"/><text x="96.4248%" y="255.50"></text></g><g><title>link_binary_remove_temps (173,652 samples, 0.14%)</title><rect x="97.5682%" y="213" width="0.1415%" height="15" fill="rgb(235,30,7)"/><text x="97.8182%" y="223.50"></text></g><g><title>link_crate (1,141,392 samples, 0.93%)</title><rect x="97.3445%" y="245" width="0.9303%" height="15" fill="rgb(250,79,13)"/><text x="97.5945%" y="255.50"></text></g><g><title>link_binary (1,126,162 samples, 0.92%)</title><rect x="97.3569%" y="229" width="0.9179%" height="15" fill="rgb(211,146,34)"/><text x="97.6069%" y="239.50"></text></g><g><title>link_rlib (693,228 samples, 0.57%)</title><rect x="97.7098%" y="213" width="0.5650%" height="15" fill="rgb(228,22,38)"/><text x="97.9598%" y="223.50"></text></g><g><title>link (2,596,977 samples, 2.12%)</title><rect x="96.1642%" y="261" width="2.1167%" height="15" fill="rgb(235,168,5)"/><text x="96.4142%" y="271.50">l..</text></g><g><title>parse_crate (757,298 samples, 0.62%)</title><rect x="98.2809%" y="261" width="0.6172%" height="15" fill="rgb(221,155,16)"/><text x="98.5309%" y="271.50"></text></g><g><title>prepare_outputs (293,593 samples, 0.24%)</title><rect x="98.9048%" y="261" width="0.2393%" height="15" fill="rgb(215,215,53)"/><text x="99.1548%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (468,945 samples, 0.38%)</title><rect x="99.1441%" y="261" width="0.3822%" height="15" fill="rgb(223,4,10)"/><text x="99.3941%" y="271.50"></text></g><g><title>all (122,690,143 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (122,690,143 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (472,464 samples, 0.39%)</title><rect x="99.6149%" y="261" width="0.3851%" height="15" fill="rgb(234,150,53)"/><text x="99.8649%" y="271.50"></text></g></svg></svg>