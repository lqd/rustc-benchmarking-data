<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (108,554,814 samples, 11.40%)</title><rect x="0.0734%" y="165" width="11.4027%" height="15" fill="rgb(227,0,7)"/><text x="0.3234%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,055,779 samples, 0.11%)</title><rect x="17.0955%" y="53" width="0.1109%" height="15" fill="rgb(217,0,24)"/><text x="17.3455%" y="63.50"></text></g><g><title>resolve_instance (1,507,848 samples, 0.16%)</title><rect x="17.2064%" y="53" width="0.1584%" height="15" fill="rgb(221,193,54)"/><text x="17.4564%" y="63.50"></text></g><g><title>thir_body (3,577,878 samples, 0.38%)</title><rect x="17.3721%" y="53" width="0.3758%" height="15" fill="rgb(248,212,6)"/><text x="17.6221%" y="63.50"></text></g><g><title>mir_const (19,769,905 samples, 2.08%)</title><rect x="15.6767%" y="101" width="2.0766%" height="15" fill="rgb(208,68,35)"/><text x="15.9267%" y="111.50">m..</text></g><g><title>unsafety_check_result (17,110,985 samples, 1.80%)</title><rect x="15.9560%" y="85" width="1.7974%" height="15" fill="rgb(232,128,0)"/><text x="16.2060%" y="95.50">u..</text></g><g><title>mir_built (15,498,966 samples, 1.63%)</title><rect x="16.1253%" y="69" width="1.6280%" height="15" fill="rgb(207,160,47)"/><text x="16.3753%" y="79.50"></text></g><g><title>mir_const_qualif (2,415,420 samples, 0.25%)</title><rect x="17.7533%" y="101" width="0.2537%" height="15" fill="rgb(228,23,34)"/><text x="18.0033%" y="111.50"></text></g><g><title>mir_const (1,871,543 samples, 0.20%)</title><rect x="17.8105%" y="85" width="0.1966%" height="15" fill="rgb(218,30,26)"/><text x="18.0605%" y="95.50"></text></g><g><title>unsafety_check_result (1,329,151 samples, 0.14%)</title><rect x="17.8674%" y="69" width="0.1396%" height="15" fill="rgb(220,122,19)"/><text x="18.1174%" y="79.50"></text></g><g><title>mir_built (1,158,369 samples, 0.12%)</title><rect x="17.8854%" y="53" width="0.1217%" height="15" fill="rgb(250,228,42)"/><text x="18.1354%" y="63.50"></text></g><g><title>mir_promoted (24,956,772 samples, 2.62%)</title><rect x="15.3865%" y="117" width="2.6215%" height="15" fill="rgb(240,193,28)"/><text x="15.6365%" y="127.50">mi..</text></g><g><title>type_op_prove_predicate (2,077,284 samples, 0.22%)</title><rect x="18.1771%" y="117" width="0.2182%" height="15" fill="rgb(216,20,37)"/><text x="18.4271%" y="127.50"></text></g><g><title>MIR_borrow_checking (65,163,023 samples, 6.84%)</title><rect x="11.5509%" y="149" width="6.8448%" height="15" fill="rgb(206,188,39)"/><text x="11.8009%" y="159.50">MIR_borro..</text></g><g><title>mir_borrowck (64,619,487 samples, 6.79%)</title><rect x="11.6080%" y="133" width="6.7877%" height="15" fill="rgb(217,207,13)"/><text x="11.8580%" y="143.50">mir_borro..</text></g><g><title>MIR_effect_checking (1,230,773 samples, 0.13%)</title><rect x="18.3957%" y="149" width="0.1293%" height="15" fill="rgb(231,73,38)"/><text x="18.6457%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,004,001 samples, 0.11%)</title><rect x="18.4195%" y="133" width="0.1055%" height="15" fill="rgb(225,20,46)"/><text x="18.6695%" y="143.50"></text></g><g><title>check_mod_attrs (1,302,485 samples, 0.14%)</title><rect x="18.5796%" y="133" width="0.1368%" height="15" fill="rgb(210,31,41)"/><text x="18.8296%" y="143.50"></text></g><g><title>misc_checking_1 (2,576,436 samples, 0.27%)</title><rect x="18.5747%" y="149" width="0.2706%" height="15" fill="rgb(221,200,47)"/><text x="18.8247%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (1,115,731 samples, 0.12%)</title><rect x="18.8455%" y="133" width="0.1172%" height="15" fill="rgb(226,26,5)"/><text x="19.0955%" y="143.50"></text></g><g><title>misc_checking_2 (2,651,966 samples, 0.28%)</title><rect x="18.8453%" y="149" width="0.2786%" height="15" fill="rgb(249,33,26)"/><text x="19.0953%" y="159.50"></text></g><g><title>match_checking (1,534,605 samples, 0.16%)</title><rect x="18.9627%" y="133" width="0.1612%" height="15" fill="rgb(235,183,28)"/><text x="19.2127%" y="143.50"></text></g><g><title>check_match (1,406,795 samples, 0.15%)</title><rect x="18.9761%" y="117" width="0.1478%" height="15" fill="rgb(221,5,38)"/><text x="19.2261%" y="127.50"></text></g><g><title>death_checking (1,097,551 samples, 0.12%)</title><rect x="19.1831%" y="133" width="0.1153%" height="15" fill="rgb(247,18,42)"/><text x="19.4331%" y="143.50"></text></g><g><title>crate_lints (3,142,612 samples, 0.33%)</title><rect x="19.2986%" y="117" width="0.3301%" height="15" fill="rgb(241,131,45)"/><text x="19.5486%" y="127.50"></text></g><g><title>lint_checking (4,522,976 samples, 0.48%)</title><rect x="19.2984%" y="133" width="0.4751%" height="15" fill="rgb(249,31,29)"/><text x="19.5484%" y="143.50"></text></g><g><title>module_lints (1,378,654 samples, 0.14%)</title><rect x="19.6287%" y="117" width="0.1448%" height="15" fill="rgb(225,111,53)"/><text x="19.8787%" y="127.50"></text></g><g><title>lint_mod (1,363,744 samples, 0.14%)</title><rect x="19.6302%" y="101" width="0.1432%" height="15" fill="rgb(238,160,17)"/><text x="19.8802%" y="111.50"></text></g><g><title>privacy_checking_modules (1,853,539 samples, 0.19%)</title><rect x="19.8459%" y="133" width="0.1947%" height="15" fill="rgb(214,148,48)"/><text x="20.0959%" y="143.50"></text></g><g><title>check_mod_privacy (1,842,709 samples, 0.19%)</title><rect x="19.8470%" y="117" width="0.1936%" height="15" fill="rgb(232,36,49)"/><text x="20.0970%" y="127.50"></text></g><g><title>misc_checking_3 (8,751,429 samples, 0.92%)</title><rect x="19.1239%" y="149" width="0.9193%" height="15" fill="rgb(209,103,24)"/><text x="19.3739%" y="159.50"></text></g><g><title>impl_trait_ref (1,671,834 samples, 0.18%)</title><rect x="20.2881%" y="85" width="0.1756%" height="15" fill="rgb(229,88,8)"/><text x="20.5381%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,154,340 samples, 0.12%)</title><rect x="20.3425%" y="69" width="0.1213%" height="15" fill="rgb(213,181,19)"/><text x="20.5925%" y="79.50"></text></g><g><title>coherent_trait (3,799,958 samples, 0.40%)</title><rect x="20.0926%" y="117" width="0.3992%" height="15" fill="rgb(254,191,54)"/><text x="20.3426%" y="127.50"></text></g><g><title>specialization_graph_of (3,777,138 samples, 0.40%)</title><rect x="20.0950%" y="101" width="0.3968%" height="15" fill="rgb(241,83,37)"/><text x="20.3450%" y="111.50"></text></g><g><title>coherence_checking (3,928,800 samples, 0.41%)</title><rect x="20.0909%" y="133" width="0.4127%" height="15" fill="rgb(233,36,39)"/><text x="20.3409%" y="143.50"></text></g><g><title>specializes (2,320,184 samples, 0.24%)</title><rect x="29.4308%" y="69" width="0.2437%" height="15" fill="rgb(226,3,54)"/><text x="29.6808%" y="79.50"></text></g><g><title>param_env (1,351,795 samples, 0.14%)</title><rect x="29.5326%" y="53" width="0.1420%" height="15" fill="rgb(245,192,40)"/><text x="29.7826%" y="63.50"></text></g><g><title>evaluate_obligation (9,558,743 samples, 1.00%)</title><rect x="28.6963%" y="85" width="1.0041%" height="15" fill="rgb(238,167,29)"/><text x="28.9463%" y="95.50"></text></g><g><title>param_env (991,998 samples, 0.10%)</title><rect x="29.8241%" y="85" width="0.1042%" height="15" fill="rgb(232,182,51)"/><text x="30.0741%" y="95.50"></text></g><g><title>typeck (7,368,003 samples, 0.77%)</title><rect x="30.0185%" y="85" width="0.7739%" height="15" fill="rgb(231,60,39)"/><text x="30.2685%" y="95.50"></text></g><g><title>item_bodies_checking (97,960,086 samples, 10.29%)</title><rect x="20.5138%" y="133" width="10.2898%" height="15" fill="rgb(208,69,12)"/><text x="20.7638%" y="143.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (97,956,616 samples, 10.29%)</title><rect x="20.5142%" y="117" width="10.2895%" height="15" fill="rgb(235,93,37)"/><text x="20.7642%" y="127.50">typeck_item_bod..</text></g><g><title>typeck (97,599,131 samples, 10.25%)</title><rect x="20.5517%" y="101" width="10.2519%" height="15" fill="rgb(213,116,39)"/><text x="20.8017%" y="111.50">typeck</text></g><g><title>eval_to_const_value_raw (1,675,497 samples, 0.18%)</title><rect x="31.1680%" y="85" width="0.1760%" height="15" fill="rgb(222,207,29)"/><text x="31.4180%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,639,057 samples, 0.17%)</title><rect x="31.1718%" y="69" width="0.1722%" height="15" fill="rgb(206,96,30)"/><text x="31.4218%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,602,277 samples, 0.17%)</title><rect x="31.1757%" y="53" width="0.1683%" height="15" fill="rgb(218,138,4)"/><text x="31.4257%" y="63.50"></text></g><g><title>evaluate_obligation (2,224,953 samples, 0.23%)</title><rect x="31.1257%" y="101" width="0.2337%" height="15" fill="rgb(250,191,14)"/><text x="31.3757%" y="111.50"></text></g><g><title>item_types_checking (6,077,572 samples, 0.64%)</title><rect x="30.8036%" y="133" width="0.6384%" height="15" fill="rgb(239,60,40)"/><text x="31.0536%" y="143.50"></text></g><g><title>check_mod_item_types (6,059,981 samples, 0.64%)</title><rect x="30.8055%" y="117" width="0.6365%" height="15" fill="rgb(206,27,48)"/><text x="31.0555%" y="127.50"></text></g><g><title>named_region_map (1,269,550 samples, 0.13%)</title><rect x="31.6122%" y="85" width="0.1334%" height="15" fill="rgb(225,35,8)"/><text x="31.8622%" y="95.50"></text></g><g><title>resolve_lifetimes (1,196,849 samples, 0.13%)</title><rect x="31.6198%" y="69" width="0.1257%" height="15" fill="rgb(250,213,24)"/><text x="31.8698%" y="79.50"></text></g><g><title>generics_of (1,592,814 samples, 0.17%)</title><rect x="31.5826%" y="101" width="0.1673%" height="15" fill="rgb(247,123,22)"/><text x="31.8326%" y="111.50"></text></g><g><title>type_collecting (4,029,271 samples, 0.42%)</title><rect x="31.4427%" y="133" width="0.4232%" height="15" fill="rgb(231,138,38)"/><text x="31.6927%" y="143.50"></text></g><g><title>collect_mod_item_types (4,000,801 samples, 0.42%)</title><rect x="31.4457%" y="117" width="0.4202%" height="15" fill="rgb(231,145,46)"/><text x="31.6957%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,180,018 samples, 0.75%)</title><rect x="31.9219%" y="117" width="0.7542%" height="15" fill="rgb(251,118,11)"/><text x="32.1719%" y="127.50"></text></g><g><title>region_scope_tree (1,240,405 samples, 0.13%)</title><rect x="32.5458%" y="101" width="0.1303%" height="15" fill="rgb(217,147,25)"/><text x="32.7958%" y="111.50"></text></g><g><title>evaluate_obligation (967,860 samples, 0.10%)</title><rect x="32.9038%" y="101" width="0.1017%" height="15" fill="rgb(247,81,37)"/><text x="33.1538%" y="111.50"></text></g><g><title>analysis (205,979,245 samples, 21.64%)</title><rect x="11.4761%" y="165" width="21.6362%" height="15" fill="rgb(209,12,38)"/><text x="11.7261%" y="175.50">analysis</text></g><g><title>type_check_crate (124,420,415 samples, 13.07%)</title><rect x="20.0431%" y="149" width="13.0692%" height="15" fill="rgb(227,1,9)"/><text x="20.2931%" y="159.50">type_check_crate</text></g><g><title>wf_checking (11,839,930 samples, 1.24%)</title><rect x="31.8687%" y="133" width="1.2437%" height="15" fill="rgb(248,47,43)"/><text x="32.1187%" y="143.50"></text></g><g><title>check_item_well_formed (4,153,697 samples, 0.44%)</title><rect x="32.6760%" y="117" width="0.4363%" height="15" fill="rgb(221,10,30)"/><text x="32.9260%" y="127.50"></text></g><g><title>const_caller_location (1,257,555 samples, 0.13%)</title><rect x="40.8652%" y="133" width="0.1321%" height="15" fill="rgb(210,229,1)"/><text x="41.1152%" y="143.50"></text></g><g><title>param_env (2,839,385 samples, 0.30%)</title><rect x="41.4765%" y="117" width="0.2983%" height="15" fill="rgb(222,148,37)"/><text x="41.7265%" y="127.50"></text></g><g><title>normalize_projection_ty (1,064,339 samples, 0.11%)</title><rect x="41.8671%" y="101" width="0.1118%" height="15" fill="rgb(234,67,33)"/><text x="42.1171%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,983,447 samples, 0.21%)</title><rect x="41.7748%" y="117" width="0.2083%" height="15" fill="rgb(247,98,35)"/><text x="42.0248%" y="127.50"></text></g><g><title>fn_abi_of_instance (9,402,487 samples, 0.99%)</title><rect x="40.9974%" y="133" width="0.9876%" height="15" fill="rgb(247,138,52)"/><text x="41.2474%" y="143.50"></text></g><g><title>layout_of (1,303,943 samples, 0.14%)</title><rect x="42.0247%" y="133" width="0.1370%" height="15" fill="rgb(213,79,30)"/><text x="42.2747%" y="143.50"></text></g><g><title>codegen_module (84,730,172 samples, 8.90%)</title><rect x="33.3377%" y="149" width="8.9001%" height="15" fill="rgb(246,177,23)"/><text x="33.5877%" y="159.50">codegen_module</text></g><g><title>codegen_crate (86,899,144 samples, 9.13%)</title><rect x="33.1130%" y="165" width="9.1280%" height="15" fill="rgb(230,62,27)"/><text x="33.3630%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (413,708,660 samples, 43.46%)</title><rect x="42.2643%" y="149" width="43.4563%" height="15" fill="rgb(216,154,8)"/><text x="42.5143%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (397,441,289 samples, 41.75%)</title><rect x="43.9731%" y="133" width="41.7476%" height="15" fill="rgb(244,35,45)"/><text x="44.2231%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (435,695,980 samples, 45.77%)</title><rect x="42.2410%" y="165" width="45.7659%" height="15" fill="rgb(251,115,12)"/><text x="42.4910%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (21,764,962 samples, 2.29%)</title><rect x="85.7207%" y="149" width="2.2862%" height="15" fill="rgb(240,54,50)"/><text x="85.9707%" y="159.50">L..</text></g><g><title>macro_expand_crate (19,909,182 samples, 2.09%)</title><rect x="88.0674%" y="149" width="2.0913%" height="15" fill="rgb(233,84,52)"/><text x="88.3174%" y="159.50">m..</text></g><g><title>expand_crate (19,892,542 samples, 2.09%)</title><rect x="88.0691%" y="133" width="2.0895%" height="15" fill="rgb(207,117,47)"/><text x="88.3191%" y="143.50">e..</text></g><g><title>late_resolve_crate (3,191,552 samples, 0.34%)</title><rect x="90.2262%" y="133" width="0.3352%" height="15" fill="rgb(249,43,39)"/><text x="90.4762%" y="143.50"></text></g><g><title>configure_and_expand (24,559,870 samples, 2.58%)</title><rect x="88.0069%" y="165" width="2.5798%" height="15" fill="rgb(209,38,44)"/><text x="88.2569%" y="175.50">co..</text></g><g><title>resolve_crate (4,005,991 samples, 0.42%)</title><rect x="90.1659%" y="149" width="0.4208%" height="15" fill="rgb(236,212,23)"/><text x="90.4159%" y="159.50"></text></g><g><title>early_lint_checks (997,940 samples, 0.10%)</title><rect x="90.6335%" y="165" width="0.1048%" height="15" fill="rgb(242,79,21)"/><text x="90.8835%" y="175.50"></text></g><g><title>free_global_ctxt (5,193,563 samples, 0.55%)</title><rect x="90.7383%" y="165" width="0.5455%" height="15" fill="rgb(211,96,35)"/><text x="90.9883%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,299,862 samples, 0.14%)</title><rect x="92.0233%" y="85" width="0.1365%" height="15" fill="rgb(253,215,40)"/><text x="92.2733%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,267,948 samples, 0.13%)</title><rect x="92.7817%" y="69" width="0.1332%" height="15" fill="rgb(211,81,21)"/><text x="93.0317%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,031,046 samples, 0.53%)</title><rect x="92.9149%" y="69" width="0.5285%" height="15" fill="rgb(208,190,38)"/><text x="93.1649%" y="79.50"></text></g><g><title>eval_to_const_value_raw (975,441 samples, 0.10%)</title><rect x="93.4518%" y="53" width="0.1025%" height="15" fill="rgb(235,213,38)"/><text x="93.7018%" y="63.50"></text></g><g><title>eval_to_const_value_raw (957,111 samples, 0.10%)</title><rect x="93.4538%" y="37" width="0.1005%" height="15" fill="rgb(237,122,38)"/><text x="93.7038%" y="47.50"></text></g><g><title>optimized_mir (13,007,987 samples, 1.37%)</title><rect x="92.1926%" y="85" width="1.3664%" height="15" fill="rgb(244,218,35)"/><text x="92.4426%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,100,051 samples, 0.12%)</title><rect x="93.4434%" y="69" width="0.1156%" height="15" fill="rgb(240,68,47)"/><text x="93.6934%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (3,788,525 samples, 0.40%)</title><rect x="93.6713%" y="69" width="0.3980%" height="15" fill="rgb(210,16,53)"/><text x="93.9213%" y="79.50"></text></g><g><title>specialization_graph_of (1,836,988 samples, 0.19%)</title><rect x="94.1552%" y="69" width="0.1930%" height="15" fill="rgb(235,124,12)"/><text x="94.4052%" y="79.50"></text></g><g><title>resolve_instance (7,777,306 samples, 0.82%)</title><rect x="93.5589%" y="85" width="0.8169%" height="15" fill="rgb(224,169,11)"/><text x="93.8089%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (26,458,160 samples, 2.78%)</title><rect x="91.7358%" y="101" width="2.7792%" height="15" fill="rgb(250,166,2)"/><text x="91.9858%" y="111.50">mo..</text></g><g><title>monomorphization_collector (26,620,091 samples, 2.80%)</title><rect x="91.7354%" y="117" width="2.7962%" height="15" fill="rgb(242,216,29)"/><text x="91.9854%" y="127.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,084,661 samples, 0.22%)</title><rect x="94.5322%" y="101" width="0.2190%" height="15" fill="rgb(230,116,27)"/><text x="94.7822%" y="111.50"></text></g><g><title>symbol_name (1,886,330 samples, 0.20%)</title><rect x="94.5531%" y="85" width="0.1981%" height="15" fill="rgb(228,99,48)"/><text x="94.8031%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (29,750,493 samples, 3.13%)</title><rect x="91.7299%" y="133" width="3.1250%" height="15" fill="rgb(253,11,6)"/><text x="91.9799%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,078,781 samples, 0.32%)</title><rect x="94.5316%" y="117" width="0.3234%" height="15" fill="rgb(247,143,39)"/><text x="94.7816%" y="127.50"></text></g><g><title>cgu_partitioning (987,660 samples, 0.10%)</title><rect x="94.7512%" y="101" width="0.1037%" height="15" fill="rgb(236,97,10)"/><text x="95.0012%" y="111.50"></text></g><g><title>exported_symbols (30,142,517 samples, 3.17%)</title><rect x="91.7187%" y="149" width="3.1662%" height="15" fill="rgb(233,208,19)"/><text x="91.9687%" y="159.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,402,763 samples, 0.46%)</title><rect x="95.5267%" y="133" width="0.4625%" height="15" fill="rgb(216,164,2)"/><text x="95.7767%" y="143.50"></text></g><g><title>optimized_mir (10,120,134 samples, 1.06%)</title><rect x="94.9275%" y="149" width="1.0630%" height="15" fill="rgb(220,129,5)"/><text x="95.1775%" y="159.50"></text></g><g><title>generate_crate_metadata (44,969,797 samples, 4.72%)</title><rect x="91.2839%" y="165" width="4.7237%" height="15" fill="rgb(242,17,10)"/><text x="91.5339%" y="175.50">genera..</text></g><g><title>hir_lowering (8,044,452 samples, 0.84%)</title><rect x="96.0075%" y="165" width="0.8450%" height="15" fill="rgb(242,107,0)"/><text x="96.2575%" y="175.50"></text></g><g><title>finish_ongoing_codegen (23,903,183 samples, 2.51%)</title><rect x="96.8558%" y="149" width="2.5108%" height="15" fill="rgb(251,28,31)"/><text x="97.1058%" y="159.50">fi..</text></g><g><title>link_crate (3,031,180 samples, 0.32%)</title><rect x="99.3666%" y="149" width="0.3184%" height="15" fill="rgb(233,223,10)"/><text x="99.6166%" y="159.50"></text></g><g><title>link_binary (2,958,900 samples, 0.31%)</title><rect x="99.3742%" y="133" width="0.3108%" height="15" fill="rgb(215,21,27)"/><text x="99.6242%" y="143.50"></text></g><g><title>link_rlib (2,282,343 samples, 0.24%)</title><rect x="99.4452%" y="117" width="0.2397%" height="15" fill="rgb(232,23,21)"/><text x="99.6952%" y="127.50"></text></g><g><title>link (26,975,624 samples, 2.83%)</title><rect x="96.8525%" y="165" width="2.8335%" height="15" fill="rgb(244,5,23)"/><text x="97.1025%" y="175.50">li..</text></g><g><title>self_profile_alloc_query_strings (1,808,958 samples, 0.19%)</title><rect x="99.7435%" y="165" width="0.1900%" height="15" fill="rgb(226,81,46)"/><text x="99.9935%" y="175.50"></text></g><g><title>all (952,010,210 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (952,010,210 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>