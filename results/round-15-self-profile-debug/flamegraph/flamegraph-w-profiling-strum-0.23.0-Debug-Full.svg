<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,203,167 samples, 11.79%)</title><rect x="0.6506%" y="181" width="11.7857%" height="15" fill="rgb(227,0,7)"/><text x="0.9006%" y="191.50">LLVM_passes</text></g><g><title>thir_body (79,932 samples, 0.11%)</title><rect x="15.1459%" y="69" width="0.1148%" height="15" fill="rgb(217,0,24)"/><text x="15.3959%" y="79.50"></text></g><g><title>mir_const (610,146 samples, 0.88%)</title><rect x="14.3877%" y="117" width="0.8766%" height="15" fill="rgb(221,193,54)"/><text x="14.6377%" y="127.50"></text></g><g><title>unsafety_check_result (476,995 samples, 0.69%)</title><rect x="14.5790%" y="101" width="0.6853%" height="15" fill="rgb(248,212,6)"/><text x="14.8290%" y="111.50"></text></g><g><title>mir_built (393,355 samples, 0.57%)</title><rect x="14.6992%" y="85" width="0.5651%" height="15" fill="rgb(208,68,35)"/><text x="14.9492%" y="95.50"></text></g><g><title>mir_promoted (769,737 samples, 1.11%)</title><rect x="14.1722%" y="133" width="1.1059%" height="15" fill="rgb(232,128,0)"/><text x="14.4222%" y="143.50"></text></g><g><title>type_op_prove_predicate (104,302 samples, 0.15%)</title><rect x="15.3469%" y="133" width="0.1499%" height="15" fill="rgb(207,160,47)"/><text x="15.5969%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,025,902 samples, 2.91%)</title><rect x="12.5890%" y="165" width="2.9107%" height="15" fill="rgb(228,23,34)"/><text x="12.8390%" y="175.50">MI..</text></g><g><title>mir_borrowck (2,011,742 samples, 2.89%)</title><rect x="12.6093%" y="149" width="2.8903%" height="15" fill="rgb(218,30,26)"/><text x="12.8593%" y="159.50">mi..</text></g><g><title>hir_module_items (84,401 samples, 0.12%)</title><rect x="15.5060%" y="165" width="0.1213%" height="15" fill="rgb(220,122,19)"/><text x="15.7560%" y="175.50"></text></g><g><title>should_inherit_track_caller (136,291 samples, 0.20%)</title><rect x="15.9002%" y="117" width="0.1958%" height="15" fill="rgb(250,228,42)"/><text x="16.1502%" y="127.50"></text></g><g><title>codegen_fn_attrs (250,612 samples, 0.36%)</title><rect x="15.7591%" y="133" width="0.3601%" height="15" fill="rgb(240,193,28)"/><text x="16.0091%" y="143.50"></text></g><g><title>check_mod_attrs (324,693 samples, 0.47%)</title><rect x="15.6530%" y="149" width="0.4665%" height="15" fill="rgb(216,20,37)"/><text x="15.9030%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (154,471 samples, 0.22%)</title><rect x="16.1855%" y="149" width="0.2219%" height="15" fill="rgb(206,188,39)"/><text x="16.4355%" y="159.50"></text></g><g><title>misc_checking_1 (567,556 samples, 0.82%)</title><rect x="15.6278%" y="165" width="0.8154%" height="15" fill="rgb(217,207,13)"/><text x="15.8778%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (70,150 samples, 0.10%)</title><rect x="16.4453%" y="149" width="0.1008%" height="15" fill="rgb(231,73,38)"/><text x="16.6953%" y="159.50"></text></g><g><title>misc_checking_2 (185,072 samples, 0.27%)</title><rect x="16.4432%" y="165" width="0.2659%" height="15" fill="rgb(225,20,46)"/><text x="16.6932%" y="175.50"></text></g><g><title>match_checking (113,462 samples, 0.16%)</title><rect x="16.5461%" y="149" width="0.1630%" height="15" fill="rgb(210,31,41)"/><text x="16.7961%" y="159.50"></text></g><g><title>check_match (108,192 samples, 0.16%)</title><rect x="16.5537%" y="133" width="0.1554%" height="15" fill="rgb(221,200,47)"/><text x="16.8037%" y="143.50"></text></g><g><title>death_checking (243,683 samples, 0.35%)</title><rect x="16.7867%" y="149" width="0.3501%" height="15" fill="rgb(226,26,5)"/><text x="17.0367%" y="159.50"></text></g><g><title>item_attrs (164,052 samples, 0.24%)</title><rect x="16.9011%" y="133" width="0.2357%" height="15" fill="rgb(249,33,26)"/><text x="17.1511%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (162,532 samples, 0.23%)</title><rect x="16.9033%" y="117" width="0.2335%" height="15" fill="rgb(235,183,28)"/><text x="17.1533%" y="127.50"></text></g><g><title>crate_lints (1,532,956 samples, 2.20%)</title><rect x="17.1388%" y="133" width="2.2024%" height="15" fill="rgb(221,5,38)"/><text x="17.3888%" y="143.50">c..</text></g><g><title>type_of (1,020,589 samples, 1.47%)</title><rect x="17.8749%" y="117" width="1.4663%" height="15" fill="rgb(247,18,42)"/><text x="18.1249%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (785,246 samples, 1.13%)</title><rect x="18.2131%" y="101" width="1.1282%" height="15" fill="rgb(241,131,45)"/><text x="18.4631%" y="111.50"></text></g><g><title>lint_checking (1,595,957 samples, 2.29%)</title><rect x="17.1368%" y="149" width="2.2930%" height="15" fill="rgb(249,31,29)"/><text x="17.3868%" y="159.50">l..</text></g><g><title>privacy_access_levels (77,631 samples, 0.11%)</title><rect x="19.4298%" y="149" width="0.1115%" height="15" fill="rgb(225,111,53)"/><text x="19.6798%" y="159.50"></text></g><g><title>privacy_checking_modules (125,981 samples, 0.18%)</title><rect x="19.5413%" y="149" width="0.1810%" height="15" fill="rgb(238,160,17)"/><text x="19.7913%" y="159.50"></text></g><g><title>check_mod_privacy (124,451 samples, 0.18%)</title><rect x="19.5435%" y="133" width="0.1788%" height="15" fill="rgb(214,148,48)"/><text x="19.7935%" y="143.50"></text></g><g><title>misc_checking_3 (2,111,732 samples, 3.03%)</title><rect x="16.7091%" y="165" width="3.0340%" height="15" fill="rgb(232,36,49)"/><text x="16.9591%" y="175.50">mis..</text></g><g><title>impl_trait_ref (140,102 samples, 0.20%)</title><rect x="20.3082%" y="69" width="0.2013%" height="15" fill="rgb(209,103,24)"/><text x="20.5582%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (121,232 samples, 0.17%)</title><rect x="20.3353%" y="53" width="0.1742%" height="15" fill="rgb(229,88,8)"/><text x="20.5853%" y="63.50"></text></g><g><title>adt_destructor (482,515 samples, 0.69%)</title><rect x="19.8512%" y="117" width="0.6932%" height="15" fill="rgb(213,181,19)"/><text x="20.1012%" y="127.50"></text></g><g><title>coherent_trait (475,325 samples, 0.68%)</title><rect x="19.8616%" y="101" width="0.6829%" height="15" fill="rgb(254,191,54)"/><text x="20.1116%" y="111.50"></text></g><g><title>specialization_graph_of (473,855 samples, 0.68%)</title><rect x="19.8637%" y="85" width="0.6808%" height="15" fill="rgb(241,83,37)"/><text x="20.1137%" y="95.50"></text></g><g><title>param_env (84,771 samples, 0.12%)</title><rect x="20.5445%" y="117" width="0.1218%" height="15" fill="rgb(233,36,39)"/><text x="20.7945%" y="127.50"></text></g><g><title>impl_parent (2,362,350 samples, 3.39%)</title><rect x="26.5719%" y="101" width="3.3941%" height="15" fill="rgb(226,3,54)"/><text x="26.8219%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,396,896 samples, 2.01%)</title><rect x="27.9590%" y="85" width="2.0070%" height="15" fill="rgb(245,192,40)"/><text x="28.2090%" y="95.50">m..</text></g><g><title>impl_trait_ref (5,118,500 samples, 7.35%)</title><rect x="29.9659%" y="101" width="7.3539%" height="15" fill="rgb(238,167,29)"/><text x="30.2159%" y="111.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,113,989 samples, 5.91%)</title><rect x="31.4091%" y="85" width="5.9107%" height="15" fill="rgb(232,182,51)"/><text x="31.6591%" y="95.50">metadata..</text></g><g><title>coherent_trait (13,047,117 samples, 18.75%)</title><rect x="19.7966%" y="133" width="18.7451%" height="15" fill="rgb(231,60,39)"/><text x="20.0466%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (12,441,830 samples, 17.88%)</title><rect x="20.6663%" y="117" width="17.8755%" height="15" fill="rgb(208,69,12)"/><text x="20.9163%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (848,586 samples, 1.22%)</title><rect x="37.3226%" y="101" width="1.2192%" height="15" fill="rgb(235,93,37)"/><text x="37.5726%" y="111.50"></text></g><g><title>implementations_of_trait (214,332 samples, 0.31%)</title><rect x="38.2338%" y="85" width="0.3079%" height="15" fill="rgb(213,116,39)"/><text x="38.4838%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (175,872 samples, 0.25%)</title><rect x="38.2891%" y="69" width="0.2527%" height="15" fill="rgb(222,207,29)"/><text x="38.5391%" y="79.50"></text></g><g><title>coherence_checking (13,100,698 samples, 18.82%)</title><rect x="19.7697%" y="149" width="18.8221%" height="15" fill="rgb(206,96,30)"/><text x="20.0197%" y="159.50">coherence_checking</text></g><g><title>dropck_outlives (80,081 samples, 0.12%)</title><rect x="40.4311%" y="101" width="0.1151%" height="15" fill="rgb(218,138,4)"/><text x="40.6811%" y="111.50"></text></g><g><title>item_bodies_checking (1,635,727 samples, 2.35%)</title><rect x="38.6114%" y="149" width="2.3501%" height="15" fill="rgb(250,191,14)"/><text x="38.8614%" y="159.50">i..</text></g><g><title>typeck_item_bodies (1,633,977 samples, 2.35%)</title><rect x="38.6139%" y="133" width="2.3476%" height="15" fill="rgb(239,60,40)"/><text x="38.8639%" y="143.50">t..</text></g><g><title>typeck (1,623,047 samples, 2.33%)</title><rect x="38.6296%" y="117" width="2.3319%" height="15" fill="rgb(206,27,48)"/><text x="38.8796%" y="127.50">t..</text></g><g><title>item_types_checking (320,864 samples, 0.46%)</title><rect x="40.9615%" y="149" width="0.4610%" height="15" fill="rgb(225,35,8)"/><text x="41.2115%" y="159.50"></text></g><g><title>check_mod_item_types (318,104 samples, 0.46%)</title><rect x="40.9655%" y="133" width="0.4570%" height="15" fill="rgb(250,213,24)"/><text x="41.2155%" y="143.50"></text></g><g><title>fn_sig (128,331 samples, 0.18%)</title><rect x="41.5771%" y="117" width="0.1844%" height="15" fill="rgb(247,123,22)"/><text x="41.8271%" y="127.50"></text></g><g><title>named_region_map (133,272 samples, 0.19%)</title><rect x="41.8243%" y="101" width="0.1915%" height="15" fill="rgb(231,138,38)"/><text x="42.0743%" y="111.50"></text></g><g><title>resolve_lifetimes (124,262 samples, 0.18%)</title><rect x="41.8372%" y="85" width="0.1785%" height="15" fill="rgb(231,145,46)"/><text x="42.0872%" y="95.50"></text></g><g><title>generics_of (191,063 samples, 0.27%)</title><rect x="41.7615%" y="117" width="0.2745%" height="15" fill="rgb(251,118,11)"/><text x="42.0115%" y="127.50"></text></g><g><title>late_bound_vars_map (89,651 samples, 0.13%)</title><rect x="42.2122%" y="85" width="0.1288%" height="15" fill="rgb(217,147,25)"/><text x="42.4622%" y="95.50"></text></g><g><title>resolve_lifetimes (87,141 samples, 0.13%)</title><rect x="42.2158%" y="69" width="0.1252%" height="15" fill="rgb(247,81,37)"/><text x="42.4658%" y="79.50"></text></g><g><title>explicit_item_bounds (122,341 samples, 0.18%)</title><rect x="42.1706%" y="101" width="0.1758%" height="15" fill="rgb(209,12,38)"/><text x="42.4206%" y="111.50"></text></g><g><title>item_bounds (170,511 samples, 0.24%)</title><rect x="42.1025%" y="117" width="0.2450%" height="15" fill="rgb(227,1,9)"/><text x="42.3525%" y="127.50"></text></g><g><title>predicates_of (140,302 samples, 0.20%)</title><rect x="42.3475%" y="117" width="0.2016%" height="15" fill="rgb(248,47,43)"/><text x="42.5975%" y="127.50"></text></g><g><title>predicates_defined_on (123,022 samples, 0.18%)</title><rect x="42.3723%" y="101" width="0.1767%" height="15" fill="rgb(221,10,30)"/><text x="42.6223%" y="111.50"></text></g><g><title>type_collecting (928,939 samples, 1.33%)</title><rect x="41.4234%" y="149" width="1.3346%" height="15" fill="rgb(210,229,1)"/><text x="41.6734%" y="159.50"></text></g><g><title>collect_mod_item_types (921,439 samples, 1.32%)</title><rect x="41.4341%" y="133" width="1.3239%" height="15" fill="rgb(222,148,37)"/><text x="41.6841%" y="143.50"></text></g><g><title>type_of (75,030 samples, 0.11%)</title><rect x="42.6502%" y="117" width="0.1078%" height="15" fill="rgb(234,67,33)"/><text x="42.9002%" y="127.50"></text></g><g><title>evaluate_obligation (156,072 samples, 0.22%)</title><rect x="43.2377%" y="117" width="0.2242%" height="15" fill="rgb(247,98,35)"/><text x="43.4877%" y="127.50"></text></g><g><title>check_impl_item_well_formed (596,386 samples, 0.86%)</title><rect x="42.8311%" y="133" width="0.8568%" height="15" fill="rgb(247,138,52)"/><text x="43.0811%" y="143.50"></text></g><g><title>evaluate_obligation (133,402 samples, 0.19%)</title><rect x="44.2249%" y="117" width="0.1917%" height="15" fill="rgb(213,79,30)"/><text x="44.4749%" y="127.50"></text></g><g><title>param_env (77,220 samples, 0.11%)</title><rect x="44.4753%" y="117" width="0.1109%" height="15" fill="rgb(246,177,23)"/><text x="44.7253%" y="127.50"></text></g><g><title>predicates_of (74,052 samples, 0.11%)</title><rect x="44.5862%" y="117" width="0.1064%" height="15" fill="rgb(230,62,27)"/><text x="44.8362%" y="127.50"></text></g><g><title>check_item_well_formed (751,709 samples, 1.08%)</title><rect x="43.6880%" y="133" width="1.0800%" height="15" fill="rgb(216,154,8)"/><text x="43.9380%" y="143.50"></text></g><g><title>analysis (23,119,923 samples, 33.22%)</title><rect x="12.4363%" y="181" width="33.2170%" height="15" fill="rgb(244,35,45)"/><text x="12.6863%" y="191.50">analysis</text></g><g><title>type_check_crate (18,034,179 samples, 25.91%)</title><rect x="19.7431%" y="165" width="25.9102%" height="15" fill="rgb(251,115,12)"/><text x="19.9931%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,014,321 samples, 2.89%)</title><rect x="42.7593%" y="149" width="2.8940%" height="15" fill="rgb(240,54,50)"/><text x="43.0093%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (616,186 samples, 0.89%)</title><rect x="44.7680%" y="133" width="0.8853%" height="15" fill="rgb(233,84,52)"/><text x="45.0180%" y="143.50"></text></g><g><title>const_caller_location (81,691 samples, 0.12%)</title><rect x="49.1621%" y="149" width="0.1174%" height="15" fill="rgb(207,117,47)"/><text x="49.4121%" y="159.50"></text></g><g><title>fn_abi_of_instance (184,732 samples, 0.27%)</title><rect x="49.2794%" y="149" width="0.2654%" height="15" fill="rgb(249,43,39)"/><text x="49.5294%" y="159.50"></text></g><g><title>layout_of (106,551 samples, 0.15%)</title><rect x="49.6181%" y="133" width="0.1531%" height="15" fill="rgb(209,38,44)"/><text x="49.8681%" y="143.50"></text></g><g><title>layout_of (169,343 samples, 0.24%)</title><rect x="49.5503%" y="149" width="0.2433%" height="15" fill="rgb(236,212,23)"/><text x="49.8003%" y="159.50"></text></g><g><title>codegen_module (2,279,734 samples, 3.28%)</title><rect x="46.5714%" y="165" width="3.2754%" height="15" fill="rgb(242,79,21)"/><text x="46.8214%" y="175.50">cod..</text></g><g><title>codegen_crate (2,993,851 samples, 4.30%)</title><rect x="45.6635%" y="181" width="4.3013%" height="15" fill="rgb(211,96,35)"/><text x="45.9135%" y="191.50">codeg..</text></g><g><title>LLVM_module_codegen (14,271,861 samples, 20.50%)</title><rect x="50.0315%" y="165" width="20.5048%" height="15" fill="rgb(253,215,40)"/><text x="50.2815%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (13,870,907 samples, 19.93%)</title><rect x="50.6075%" y="149" width="19.9287%" height="15" fill="rgb(211,81,21)"/><text x="50.8575%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (15,000,888 samples, 21.55%)</title><rect x="49.9648%" y="181" width="21.5522%" height="15" fill="rgb(208,190,38)"/><text x="50.2148%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (682,637 samples, 0.98%)</title><rect x="70.5362%" y="165" width="0.9808%" height="15" fill="rgb(235,213,38)"/><text x="70.7862%" y="175.50"></text></g><g><title>metadata_load_macro (198,981 samples, 0.29%)</title><rect x="79.3738%" y="133" width="0.2859%" height="15" fill="rgb(237,122,38)"/><text x="79.6238%" y="143.50"></text></g><g><title>metadata_register_crate (1,313,583 samples, 1.89%)</title><rect x="79.6597%" y="133" width="1.8873%" height="15" fill="rgb(244,218,35)"/><text x="79.9097%" y="143.50">m..</text></g><g><title>metadata_register_crate (495,655 samples, 0.71%)</title><rect x="80.8349%" y="117" width="0.7121%" height="15" fill="rgb(240,68,47)"/><text x="81.0849%" y="127.50"></text></g><g><title>macro_expand_crate (6,730,492 samples, 9.67%)</title><rect x="71.8836%" y="165" width="9.6699%" height="15" fill="rgb(210,16,53)"/><text x="72.1336%" y="175.50">macro_expand_c..</text></g><g><title>expand_crate (6,721,170 samples, 9.66%)</title><rect x="71.8970%" y="149" width="9.6565%" height="15" fill="rgb(235,124,12)"/><text x="72.1470%" y="159.50">expand_crate</text></g><g><title>finalize_macro_resolutions (170,432 samples, 0.24%)</title><rect x="81.6533%" y="149" width="0.2449%" height="15" fill="rgb(224,169,11)"/><text x="81.9033%" y="159.50"></text></g><g><title>late_resolve_crate (508,266 samples, 0.73%)</title><rect x="81.8982%" y="149" width="0.7302%" height="15" fill="rgb(250,166,2)"/><text x="82.1482%" y="159.50"></text></g><g><title>configure_and_expand (7,765,932 samples, 11.16%)</title><rect x="71.5170%" y="181" width="11.1575%" height="15" fill="rgb(242,216,29)"/><text x="71.7670%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (723,078 samples, 1.04%)</title><rect x="81.6356%" y="165" width="1.0389%" height="15" fill="rgb(230,116,27)"/><text x="81.8856%" y="175.50"></text></g><g><title>early_lint_checks (107,321 samples, 0.15%)</title><rect x="82.7464%" y="181" width="0.1542%" height="15" fill="rgb(228,99,48)"/><text x="82.9964%" y="191.50"></text></g><g><title>free_global_ctxt (2,893,310 samples, 4.16%)</title><rect x="82.9005%" y="181" width="4.1569%" height="15" fill="rgb(253,11,6)"/><text x="83.1505%" y="191.50">free_..</text></g><g><title>is_reachable_non_generic (74,060 samples, 0.11%)</title><rect x="87.9394%" y="101" width="0.1064%" height="15" fill="rgb(247,143,39)"/><text x="88.1894%" y="111.50"></text></g><g><title>reachable_non_generics (71,940 samples, 0.10%)</title><rect x="87.9424%" y="85" width="0.1034%" height="15" fill="rgb(236,97,10)"/><text x="88.1924%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (71,070 samples, 0.10%)</title><rect x="87.9437%" y="69" width="0.1021%" height="15" fill="rgb(233,208,19)"/><text x="88.1937%" y="79.50"></text></g><g><title>layout_of (124,451 samples, 0.18%)</title><rect x="88.2393%" y="85" width="0.1788%" height="15" fill="rgb(216,164,2)"/><text x="88.4893%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (120,331 samples, 0.17%)</title><rect x="88.4181%" y="85" width="0.1729%" height="15" fill="rgb(220,129,5)"/><text x="88.6681%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (94,132 samples, 0.14%)</title><rect x="88.5910%" y="85" width="0.1352%" height="15" fill="rgb(242,17,10)"/><text x="88.8410%" y="95.50"></text></g><g><title>eval_to_const_value_raw (137,901 samples, 0.20%)</title><rect x="88.7462%" y="69" width="0.1981%" height="15" fill="rgb(242,107,0)"/><text x="88.9962%" y="79.50"></text></g><g><title>eval_to_const_value_raw (134,811 samples, 0.19%)</title><rect x="88.7507%" y="53" width="0.1937%" height="15" fill="rgb(251,28,31)"/><text x="89.0007%" y="63.50"></text></g><g><title>eval_to_allocation_raw (128,541 samples, 0.18%)</title><rect x="88.7597%" y="37" width="0.1847%" height="15" fill="rgb(233,223,10)"/><text x="89.0097%" y="47.50"></text></g><g><title>optimized_mir (628,247 samples, 0.90%)</title><rect x="88.0458%" y="101" width="0.9026%" height="15" fill="rgb(215,21,27)"/><text x="88.2958%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (154,672 samples, 0.22%)</title><rect x="88.7262%" y="85" width="0.2222%" height="15" fill="rgb(232,23,21)"/><text x="88.9762%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (821,829 samples, 1.18%)</title><rect x="87.8541%" y="117" width="1.1807%" height="15" fill="rgb(244,5,23)"/><text x="88.1041%" y="127.50"></text></g><g><title>monomorphization_collector (846,649 samples, 1.22%)</title><rect x="87.8505%" y="133" width="1.2164%" height="15" fill="rgb(226,81,46)"/><text x="88.1005%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (73,440 samples, 0.11%)</title><rect x="89.0792%" y="117" width="0.1055%" height="15" fill="rgb(247,70,30)"/><text x="89.3292%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (1,000,290 samples, 1.44%)</title><rect x="87.8064%" y="149" width="1.4371%" height="15" fill="rgb(212,68,19)"/><text x="88.0564%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (122,941 samples, 0.18%)</title><rect x="89.0669%" y="133" width="0.1766%" height="15" fill="rgb(240,187,13)"/><text x="89.3169%" y="143.50"></text></g><g><title>exported_symbols (1,043,991 samples, 1.50%)</title><rect x="87.7905%" y="165" width="1.4999%" height="15" fill="rgb(223,113,26)"/><text x="88.0405%" y="175.50"></text></g><g><title>layout_of (86,982 samples, 0.12%)</title><rect x="89.6936%" y="149" width="0.1250%" height="15" fill="rgb(206,192,2)"/><text x="89.9436%" y="159.50"></text></g><g><title>optimized_mir (511,815 samples, 0.74%)</title><rect x="89.3449%" y="165" width="0.7353%" height="15" fill="rgb(241,108,4)"/><text x="89.5949%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (182,103 samples, 0.26%)</title><rect x="89.8186%" y="149" width="0.2616%" height="15" fill="rgb(247,173,49)"/><text x="90.0686%" y="159.50"></text></g><g><title>generate_crate_metadata (2,121,683 samples, 3.05%)</title><rect x="87.0574%" y="181" width="3.0483%" height="15" fill="rgb(224,114,35)"/><text x="87.3074%" y="191.50">gen..</text></g><g><title>hir_lowering (558,576 samples, 0.80%)</title><rect x="90.1057%" y="181" width="0.8025%" height="15" fill="rgb(245,159,27)"/><text x="90.3557%" y="191.50"></text></g><g><title>finish_ongoing_codegen (4,000,903 samples, 5.75%)</title><rect x="90.9270%" y="165" width="5.7482%" height="15" fill="rgb(245,172,44)"/><text x="91.1770%" y="175.50">finish_..</text></g><g><title>link_crate (682,937 samples, 0.98%)</title><rect x="96.6752%" y="165" width="0.9812%" height="15" fill="rgb(236,23,11)"/><text x="96.9252%" y="175.50"></text></g><g><title>link_binary (671,507 samples, 0.96%)</title><rect x="96.6916%" y="149" width="0.9648%" height="15" fill="rgb(205,117,38)"/><text x="96.9416%" y="159.50"></text></g><g><title>link_rlib (426,535 samples, 0.61%)</title><rect x="97.0436%" y="133" width="0.6128%" height="15" fill="rgb(237,72,25)"/><text x="97.2936%" y="143.50"></text></g><g><title>link (4,705,781 samples, 6.76%)</title><rect x="90.9082%" y="181" width="6.7609%" height="15" fill="rgb(244,70,9)"/><text x="91.1582%" y="191.50">link</text></g><g><title>parse_crate (539,726 samples, 0.78%)</title><rect x="97.6692%" y="181" width="0.7754%" height="15" fill="rgb(217,125,39)"/><text x="97.9192%" y="191.50"></text></g><g><title>prepare_outputs (180,752 samples, 0.26%)</title><rect x="98.4526%" y="181" width="0.2597%" height="15" fill="rgb(235,36,10)"/><text x="98.7026%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (525,836 samples, 0.76%)</title><rect x="98.7123%" y="181" width="0.7555%" height="15" fill="rgb(251,123,47)"/><text x="98.9623%" y="191.50"></text></g><g><title>setup_global_ctxt (75,181 samples, 0.11%)</title><rect x="99.4690%" y="181" width="0.1080%" height="15" fill="rgb(221,13,13)"/><text x="99.7190%" y="191.50"></text></g><g><title>all (69,602,675 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (69,602,675 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (294,403 samples, 0.42%)</title><rect x="99.5770%" y="181" width="0.4230%" height="15" fill="rgb(245,182,24)"/><text x="99.8270%" y="191.50"></text></g></svg></svg>