<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (72,553,487 samples, 13.06%)</title><rect x="0.1307%" y="197" width="13.0603%" height="15" fill="rgb(227,0,7)"/><text x="0.3807%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (975,940 samples, 0.18%)</title><rect x="16.5061%" y="85" width="0.1757%" height="15" fill="rgb(217,0,24)"/><text x="16.7561%" y="95.50"></text></g><g><title>is_copy_raw (636,578 samples, 0.11%)</title><rect x="16.5672%" y="69" width="0.1146%" height="15" fill="rgb(221,193,54)"/><text x="16.8172%" y="79.50"></text></g><g><title>specialization_graph_of (1,962,550 samples, 0.35%)</title><rect x="16.7191%" y="69" width="0.3533%" height="15" fill="rgb(248,212,6)"/><text x="16.9691%" y="79.50"></text></g><g><title>impl_trait_ref (1,080,179 samples, 0.19%)</title><rect x="16.8779%" y="53" width="0.1944%" height="15" fill="rgb(208,68,35)"/><text x="17.1279%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (970,867 samples, 0.17%)</title><rect x="16.8976%" y="37" width="0.1748%" height="15" fill="rgb(232,128,0)"/><text x="17.1476%" y="47.50"></text></g><g><title>resolve_instance (2,208,711 samples, 0.40%)</title><rect x="16.6818%" y="85" width="0.3976%" height="15" fill="rgb(207,160,47)"/><text x="16.9318%" y="95.50"></text></g><g><title>thir_body (1,049,108 samples, 0.19%)</title><rect x="17.0817%" y="85" width="0.1888%" height="15" fill="rgb(228,23,34)"/><text x="17.3317%" y="95.50"></text></g><g><title>mir_const (8,663,978 samples, 1.56%)</title><rect x="15.7136%" y="133" width="1.5596%" height="15" fill="rgb(218,30,26)"/><text x="15.9636%" y="143.50"></text></g><g><title>unsafety_check_result (7,794,736 samples, 1.40%)</title><rect x="15.8700%" y="117" width="1.4031%" height="15" fill="rgb(220,122,19)"/><text x="16.1200%" y="127.50"></text></g><g><title>mir_built (7,110,708 samples, 1.28%)</title><rect x="15.9932%" y="101" width="1.2800%" height="15" fill="rgb(250,228,42)"/><text x="16.2432%" y="111.50"></text></g><g><title>mir_promoted (9,423,976 samples, 1.70%)</title><rect x="15.5798%" y="149" width="1.6964%" height="15" fill="rgb(240,193,28)"/><text x="15.8298%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (673,846 samples, 0.12%)</title><rect x="17.2770%" y="149" width="0.1213%" height="15" fill="rgb(216,20,37)"/><text x="17.5270%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,108,632 samples, 0.38%)</title><rect x="17.4999%" y="149" width="0.3796%" height="15" fill="rgb(206,188,39)"/><text x="17.7499%" y="159.50"></text></g><g><title>MIR_borrow_checking (25,558,899 samples, 4.60%)</title><rect x="13.2800%" y="181" width="4.6008%" height="15" fill="rgb(217,207,13)"/><text x="13.5300%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (25,507,148 samples, 4.59%)</title><rect x="13.2893%" y="165" width="4.5915%" height="15" fill="rgb(231,73,38)"/><text x="13.5393%" y="175.50">mir_b..</text></g><g><title>check_mod_attrs (765,988 samples, 0.14%)</title><rect x="17.9305%" y="165" width="0.1379%" height="15" fill="rgb(225,20,46)"/><text x="18.1805%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (635,366 samples, 0.11%)</title><rect x="18.1178%" y="165" width="0.1144%" height="15" fill="rgb(210,31,41)"/><text x="18.3678%" y="175.50"></text></g><g><title>misc_checking_1 (1,763,548 samples, 0.32%)</title><rect x="17.9237%" y="181" width="0.3175%" height="15" fill="rgb(221,200,47)"/><text x="18.1737%" y="191.50"></text></g><g><title>misc_checking_2 (819,268 samples, 0.15%)</title><rect x="18.2412%" y="181" width="0.1475%" height="15" fill="rgb(226,26,5)"/><text x="18.4912%" y="191.50"></text></g><g><title>crate_lints (2,869,049 samples, 0.52%)</title><rect x="18.4448%" y="149" width="0.5165%" height="15" fill="rgb(249,33,26)"/><text x="18.6948%" y="159.50"></text></g><g><title>type_of (2,173,353 samples, 0.39%)</title><rect x="18.5701%" y="133" width="0.3912%" height="15" fill="rgb(235,183,28)"/><text x="18.8201%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,929,951 samples, 0.35%)</title><rect x="18.6139%" y="117" width="0.3474%" height="15" fill="rgb(221,5,38)"/><text x="18.8639%" y="127.50"></text></g><g><title>lint_checking (3,393,095 samples, 0.61%)</title><rect x="18.4446%" y="165" width="0.6108%" height="15" fill="rgb(247,18,42)"/><text x="18.6946%" y="175.50"></text></g><g><title>privacy_checking_modules (660,916 samples, 0.12%)</title><rect x="19.0793%" y="165" width="0.1190%" height="15" fill="rgb(241,131,45)"/><text x="19.3293%" y="175.50"></text></g><g><title>check_mod_privacy (659,006 samples, 0.12%)</title><rect x="19.0797%" y="149" width="0.1186%" height="15" fill="rgb(249,31,29)"/><text x="19.3297%" y="159.50"></text></g><g><title>misc_checking_3 (4,504,715 samples, 0.81%)</title><rect x="18.3886%" y="181" width="0.8109%" height="15" fill="rgb(225,111,53)"/><text x="18.6386%" y="191.50"></text></g><g><title>impl_trait_ref (678,813 samples, 0.12%)</title><rect x="19.2932%" y="117" width="0.1222%" height="15" fill="rgb(238,160,17)"/><text x="19.5432%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (620,033 samples, 0.11%)</title><rect x="19.3038%" y="101" width="0.1116%" height="15" fill="rgb(214,148,48)"/><text x="19.5538%" y="111.50"></text></g><g><title>coherent_trait (1,258,883 samples, 0.23%)</title><rect x="19.2092%" y="149" width="0.2266%" height="15" fill="rgb(232,36,49)"/><text x="19.4592%" y="159.50"></text></g><g><title>specialization_graph_of (1,248,223 samples, 0.22%)</title><rect x="19.2111%" y="133" width="0.2247%" height="15" fill="rgb(209,103,24)"/><text x="19.4611%" y="143.50"></text></g><g><title>coherence_checking (1,329,803 samples, 0.24%)</title><rect x="19.2060%" y="165" width="0.2394%" height="15" fill="rgb(229,88,8)"/><text x="19.4560%" y="175.50"></text></g><g><title>evaluate_obligation (1,511,797 samples, 0.27%)</title><rect x="22.1933%" y="117" width="0.2721%" height="15" fill="rgb(213,181,19)"/><text x="22.4433%" y="127.50"></text></g><g><title>evaluate_obligation (873,133 samples, 0.16%)</title><rect x="24.4332%" y="101" width="0.1572%" height="15" fill="rgb(254,191,54)"/><text x="24.6832%" y="111.50"></text></g><g><title>typeck (11,763,651 samples, 2.12%)</title><rect x="22.6915%" y="117" width="2.1176%" height="15" fill="rgb(241,83,37)"/><text x="22.9415%" y="127.50">t..</text></g><g><title>item_bodies_checking (29,812,463 samples, 5.37%)</title><rect x="19.4515%" y="165" width="5.3665%" height="15" fill="rgb(233,36,39)"/><text x="19.7015%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (29,810,343 samples, 5.37%)</title><rect x="19.4519%" y="149" width="5.3661%" height="15" fill="rgb(226,3,54)"/><text x="19.7019%" y="159.50">typeck_..</text></g><g><title>typeck (29,778,403 samples, 5.36%)</title><rect x="19.4576%" y="133" width="5.3604%" height="15" fill="rgb(245,192,40)"/><text x="19.7076%" y="143.50">typeck</text></g><g><title>item_types_checking (1,350,593 samples, 0.24%)</title><rect x="24.8180%" y="165" width="0.2431%" height="15" fill="rgb(238,167,29)"/><text x="25.0680%" y="175.50"></text></g><g><title>check_mod_item_types (1,347,733 samples, 0.24%)</title><rect x="24.8185%" y="149" width="0.2426%" height="15" fill="rgb(232,182,51)"/><text x="25.0685%" y="159.50"></text></g><g><title>is_late_bound_map (662,046 samples, 0.12%)</title><rect x="25.2408%" y="117" width="0.1192%" height="15" fill="rgb(231,60,39)"/><text x="25.4908%" y="127.50"></text></g><g><title>resolve_lifetimes (641,455 samples, 0.12%)</title><rect x="25.2445%" y="101" width="0.1155%" height="15" fill="rgb(208,69,12)"/><text x="25.4945%" y="111.50"></text></g><g><title>generics_of (850,758 samples, 0.15%)</title><rect x="25.2143%" y="133" width="0.1531%" height="15" fill="rgb(235,93,37)"/><text x="25.4643%" y="143.50"></text></g><g><title>predicates_of (602,716 samples, 0.11%)</title><rect x="25.3715%" y="133" width="0.1085%" height="15" fill="rgb(213,116,39)"/><text x="25.6215%" y="143.50"></text></g><g><title>predicates_defined_on (560,505 samples, 0.10%)</title><rect x="25.3791%" y="117" width="0.1009%" height="15" fill="rgb(222,207,29)"/><text x="25.6291%" y="127.50"></text></g><g><title>type_collecting (2,449,464 samples, 0.44%)</title><rect x="25.0614%" y="165" width="0.4409%" height="15" fill="rgb(206,96,30)"/><text x="25.3114%" y="175.50"></text></g><g><title>collect_mod_item_types (2,431,544 samples, 0.44%)</title><rect x="25.0647%" y="149" width="0.4377%" height="15" fill="rgb(218,138,4)"/><text x="25.3147%" y="159.50"></text></g><g><title>evaluate_obligation (2,077,061 samples, 0.37%)</title><rect x="25.9543%" y="133" width="0.3739%" height="15" fill="rgb(250,191,14)"/><text x="26.2043%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,761,530 samples, 1.04%)</title><rect x="25.5351%" y="149" width="1.0371%" height="15" fill="rgb(239,60,40)"/><text x="25.7851%" y="159.50"></text></g><g><title>analysis (75,876,220 samples, 13.66%)</title><rect x="13.1909%" y="197" width="13.6584%" height="15" fill="rgb(206,27,48)"/><text x="13.4409%" y="207.50">analysis</text></g><g><title>type_check_crate (42,496,842 samples, 7.65%)</title><rect x="19.1995%" y="181" width="7.6498%" height="15" fill="rgb(225,35,8)"/><text x="19.4495%" y="191.50">type_check..</text></g><g><title>wf_checking (7,480,987 samples, 1.35%)</title><rect x="25.5027%" y="165" width="1.3466%" height="15" fill="rgb(250,213,24)"/><text x="25.7527%" y="175.50"></text></g><g><title>check_item_well_formed (1,539,377 samples, 0.28%)</title><rect x="26.5723%" y="149" width="0.2771%" height="15" fill="rgb(247,123,22)"/><text x="26.8223%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (688,628 samples, 0.12%)</title><rect x="34.6153%" y="165" width="0.1240%" height="15" fill="rgb(231,138,38)"/><text x="34.8653%" y="175.50"></text></g><g><title>const_caller_location (579,657 samples, 0.10%)</title><rect x="34.7393%" y="165" width="0.1043%" height="15" fill="rgb(231,145,46)"/><text x="34.9893%" y="175.50"></text></g><g><title>item_attrs (586,236 samples, 0.11%)</title><rect x="35.3183%" y="133" width="0.1055%" height="15" fill="rgb(251,118,11)"/><text x="35.5683%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (562,816 samples, 0.10%)</title><rect x="35.3225%" y="117" width="0.1013%" height="15" fill="rgb(217,147,25)"/><text x="35.5725%" y="127.50"></text></g><g><title>codegen_fn_attrs (868,580 samples, 0.16%)</title><rect x="35.2877%" y="149" width="0.1564%" height="15" fill="rgb(247,81,37)"/><text x="35.5377%" y="159.50"></text></g><g><title>layout_of (1,409,952 samples, 0.25%)</title><rect x="35.4595%" y="149" width="0.2538%" height="15" fill="rgb(209,12,38)"/><text x="35.7095%" y="159.50"></text></g><g><title>predicates_of (1,073,484 samples, 0.19%)</title><rect x="36.0885%" y="133" width="0.1932%" height="15" fill="rgb(227,1,9)"/><text x="36.3385%" y="143.50"></text></g><g><title>predicates_defined_on (781,207 samples, 0.14%)</title><rect x="36.1411%" y="117" width="0.1406%" height="15" fill="rgb(248,47,43)"/><text x="36.3911%" y="127.50"></text></g><g><title>param_env (3,168,536 samples, 0.57%)</title><rect x="35.7133%" y="149" width="0.5704%" height="15" fill="rgb(221,10,30)"/><text x="35.9633%" y="159.50"></text></g><g><title>fn_abi_of_instance (8,474,462 samples, 1.53%)</title><rect x="34.8476%" y="165" width="1.5255%" height="15" fill="rgb(210,229,1)"/><text x="35.0976%" y="175.50"></text></g><g><title>layout_of (1,188,493 samples, 0.21%)</title><rect x="36.4350%" y="165" width="0.2139%" height="15" fill="rgb(222,148,37)"/><text x="36.6850%" y="175.50"></text></g><g><title>symbol_name (838,546 samples, 0.15%)</title><rect x="36.6524%" y="165" width="0.1509%" height="15" fill="rgb(234,67,33)"/><text x="36.9024%" y="175.50"></text></g><g><title>codegen_module (52,954,998 samples, 9.53%)</title><rect x="27.2780%" y="181" width="9.5324%" height="15" fill="rgb(247,98,35)"/><text x="27.5280%" y="191.50">codegen_module</text></g><g><title>codegen_crate (55,411,573 samples, 9.97%)</title><rect x="26.8508%" y="197" width="9.9746%" height="15" fill="rgb(247,138,52)"/><text x="27.1008%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (243,994,877 samples, 43.92%)</title><rect x="36.8643%" y="181" width="43.9213%" height="15" fill="rgb(213,79,30)"/><text x="37.1143%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (233,732,443 samples, 42.07%)</title><rect x="38.7116%" y="165" width="42.0740%" height="15" fill="rgb(246,177,23)"/><text x="38.9616%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (261,039,861 samples, 46.99%)</title><rect x="36.8253%" y="197" width="46.9896%" height="15" fill="rgb(230,62,27)"/><text x="37.0753%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (16,828,601 samples, 3.03%)</title><rect x="80.7856%" y="181" width="3.0293%" height="15" fill="rgb(216,154,8)"/><text x="81.0356%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (2,757,499 samples, 0.50%)</title><rect x="88.2245%" y="149" width="0.4964%" height="15" fill="rgb(244,35,45)"/><text x="88.4745%" y="159.50"></text></g><g><title>metadata_register_crate (1,054,061 samples, 0.19%)</title><rect x="88.5311%" y="133" width="0.1897%" height="15" fill="rgb(251,115,12)"/><text x="88.7811%" y="143.50"></text></g><g><title>macro_expand_crate (27,173,446 samples, 4.89%)</title><rect x="83.9119%" y="181" width="4.8915%" height="15" fill="rgb(240,54,50)"/><text x="84.1619%" y="191.50">macro_..</text></g><g><title>expand_crate (27,148,325 samples, 4.89%)</title><rect x="83.9164%" y="165" width="4.8869%" height="15" fill="rgb(233,84,52)"/><text x="84.1664%" y="175.50">expand..</text></g><g><title>late_resolve_crate (3,486,505 samples, 0.63%)</title><rect x="88.8933%" y="165" width="0.6276%" height="15" fill="rgb(207,117,47)"/><text x="89.1433%" y="175.50"></text></g><g><title>configure_and_expand (31,886,194 samples, 5.74%)</title><rect x="83.8149%" y="197" width="5.7398%" height="15" fill="rgb(249,43,39)"/><text x="84.0649%" y="207.50">configu..</text></g><g><title>resolve_crate (4,124,422 samples, 0.74%)</title><rect x="88.8123%" y="181" width="0.7424%" height="15" fill="rgb(209,38,44)"/><text x="89.0623%" y="191.50"></text></g><g><title>early_lint_checks (644,086 samples, 0.12%)</title><rect x="89.6234%" y="197" width="0.1159%" height="15" fill="rgb(236,212,23)"/><text x="89.8734%" y="207.50"></text></g><g><title>free_global_ctxt (4,748,198 samples, 0.85%)</title><rect x="89.7394%" y="197" width="0.8547%" height="15" fill="rgb(242,79,21)"/><text x="89.9894%" y="207.50"></text></g><g><title>item_attrs (889,969 samples, 0.16%)</title><rect x="91.1279%" y="101" width="0.1602%" height="15" fill="rgb(211,96,35)"/><text x="91.3779%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (853,319 samples, 0.15%)</title><rect x="91.1345%" y="85" width="0.1536%" height="15" fill="rgb(253,215,40)"/><text x="91.3845%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,431,306 samples, 0.26%)</title><rect x="91.0857%" y="117" width="0.2576%" height="15" fill="rgb(211,81,21)"/><text x="91.3357%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,624,296 samples, 0.29%)</title><rect x="91.7563%" y="101" width="0.2924%" height="15" fill="rgb(208,190,38)"/><text x="92.0063%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,430,283 samples, 0.26%)</title><rect x="92.0487%" y="101" width="0.2575%" height="15" fill="rgb(235,213,38)"/><text x="92.2987%" y="111.50"></text></g><g><title>optimized_mir (5,029,631 samples, 0.91%)</title><rect x="91.4995%" y="117" width="0.9054%" height="15" fill="rgb(237,122,38)"/><text x="91.7495%" y="127.50"></text></g><g><title>evaluate_obligation (633,787 samples, 0.11%)</title><rect x="92.7446%" y="85" width="0.1141%" height="15" fill="rgb(244,218,35)"/><text x="92.9946%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,326,832 samples, 0.42%)</title><rect x="92.5281%" y="101" width="0.4189%" height="15" fill="rgb(240,68,47)"/><text x="92.7781%" y="111.50"></text></g><g><title>specialization_graph_of (2,803,588 samples, 0.50%)</title><rect x="93.0344%" y="101" width="0.5047%" height="15" fill="rgb(210,16,53)"/><text x="93.2844%" y="111.50"></text></g><g><title>impl_trait_ref (1,316,426 samples, 0.24%)</title><rect x="93.3021%" y="85" width="0.2370%" height="15" fill="rgb(235,124,12)"/><text x="93.5521%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,087,442 samples, 0.20%)</title><rect x="93.3433%" y="69" width="0.1957%" height="15" fill="rgb(224,169,11)"/><text x="93.5933%" y="79.50"></text></g><g><title>resolve_instance (6,628,642 samples, 1.19%)</title><rect x="92.4049%" y="117" width="1.1932%" height="15" fill="rgb(250,166,2)"/><text x="92.6549%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,218,204 samples, 0.22%)</title><rect x="93.6205%" y="101" width="0.2193%" height="15" fill="rgb(242,216,29)"/><text x="93.8705%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,197,714 samples, 0.22%)</title><rect x="93.6242%" y="85" width="0.2156%" height="15" fill="rgb(230,116,27)"/><text x="93.8742%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,166,883 samples, 0.21%)</title><rect x="93.6297%" y="69" width="0.2100%" height="15" fill="rgb(228,99,48)"/><text x="93.8797%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,340,905 samples, 0.24%)</title><rect x="93.6070%" y="117" width="0.2414%" height="15" fill="rgb(253,11,6)"/><text x="93.8570%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (17,238,745 samples, 3.10%)</title><rect x="90.7923%" y="133" width="3.1031%" height="15" fill="rgb(247,143,39)"/><text x="91.0423%" y="143.50">mon..</text></g><g><title>monomorphization_collector (17,268,876 samples, 3.11%)</title><rect x="90.7919%" y="149" width="3.1086%" height="15" fill="rgb(236,97,10)"/><text x="91.0419%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,322,114 samples, 0.24%)</title><rect x="93.9023%" y="133" width="0.2380%" height="15" fill="rgb(233,208,19)"/><text x="94.1523%" y="143.50"></text></g><g><title>symbol_name (1,208,943 samples, 0.22%)</title><rect x="93.9227%" y="117" width="0.2176%" height="15" fill="rgb(216,164,2)"/><text x="94.1727%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (19,285,116 samples, 3.47%)</title><rect x="90.7862%" y="165" width="3.4715%" height="15" fill="rgb(220,129,5)"/><text x="91.0362%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,984,800 samples, 0.36%)</title><rect x="93.9004%" y="149" width="0.3573%" height="15" fill="rgb(242,17,10)"/><text x="94.1504%" y="159.50"></text></g><g><title>cgu_partitioning (652,186 samples, 0.12%)</title><rect x="94.1403%" y="133" width="0.1174%" height="15" fill="rgb(242,107,0)"/><text x="94.3903%" y="143.50"></text></g><g><title>exported_symbols (19,408,037 samples, 3.49%)</title><rect x="90.7754%" y="181" width="3.4936%" height="15" fill="rgb(251,28,31)"/><text x="91.0254%" y="191.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,193,560 samples, 0.39%)</title><rect x="94.6702%" y="165" width="0.3949%" height="15" fill="rgb(233,223,10)"/><text x="94.9202%" y="175.50"></text></g><g><title>optimized_mir (4,830,180 samples, 0.87%)</title><rect x="94.2806%" y="181" width="0.8695%" height="15" fill="rgb(215,21,27)"/><text x="94.5306%" y="191.50"></text></g><g><title>generate_crate_metadata (25,584,890 samples, 4.61%)</title><rect x="90.5941%" y="197" width="4.6055%" height="15" fill="rgb(232,23,21)"/><text x="90.8441%" y="207.50">gener..</text></g><g><title>hir_lowering (4,531,476 samples, 0.82%)</title><rect x="95.1996%" y="197" width="0.8157%" height="15" fill="rgb(244,5,23)"/><text x="95.4496%" y="207.50"></text></g><g><title>finish_ongoing_codegen (17,735,639 samples, 3.19%)</title><rect x="96.0181%" y="181" width="3.1926%" height="15" fill="rgb(226,81,46)"/><text x="96.2681%" y="191.50">fin..</text></g><g><title>link_crate (2,171,212 samples, 0.39%)</title><rect x="99.2107%" y="181" width="0.3908%" height="15" fill="rgb(247,70,30)"/><text x="99.4607%" y="191.50"></text></g><g><title>link_binary (2,126,851 samples, 0.38%)</title><rect x="99.2187%" y="165" width="0.3829%" height="15" fill="rgb(212,68,19)"/><text x="99.4687%" y="175.50"></text></g><g><title>link_rlib (1,507,616 samples, 0.27%)</title><rect x="99.3302%" y="149" width="0.2714%" height="15" fill="rgb(240,187,13)"/><text x="99.5802%" y="159.50"></text></g><g><title>link (19,931,822 samples, 3.59%)</title><rect x="96.0153%" y="197" width="3.5879%" height="15" fill="rgb(223,113,26)"/><text x="96.2653%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (1,083,091 samples, 0.19%)</title><rect x="99.7153%" y="197" width="0.1950%" height="15" fill="rgb(206,192,2)"/><text x="99.9653%" y="207.50"></text></g><g><title>all (555,527,402 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (555,527,402 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>