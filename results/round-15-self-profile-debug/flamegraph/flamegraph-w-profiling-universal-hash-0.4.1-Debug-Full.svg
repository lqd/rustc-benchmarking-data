<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,035,234 samples, 6.36%)</title><rect x="0.8176%" y="213" width="6.3567%" height="15" fill="rgb(227,0,7)"/><text x="1.0676%" y="223.50">LLVM_pas..</text></g><g><title>is_sized_raw (80,482 samples, 0.10%)</title><rect x="10.4795%" y="165" width="0.1016%" height="15" fill="rgb(217,0,24)"/><text x="10.7295%" y="175.50"></text></g><g><title>param_env (130,523 samples, 0.16%)</title><rect x="11.1514%" y="133" width="0.1648%" height="15" fill="rgb(221,193,54)"/><text x="11.4014%" y="143.50"></text></g><g><title>codegen_fn_attrs (112,821 samples, 0.14%)</title><rect x="11.4707%" y="117" width="0.1424%" height="15" fill="rgb(248,212,6)"/><text x="11.7207%" y="127.50"></text></g><g><title>is_copy_raw (458,957 samples, 0.58%)</title><rect x="12.4282%" y="85" width="0.5794%" height="15" fill="rgb(208,68,35)"/><text x="12.6782%" y="95.50"></text></g><g><title>evaluate_obligation (419,954 samples, 0.53%)</title><rect x="12.4775%" y="69" width="0.5302%" height="15" fill="rgb(232,128,0)"/><text x="12.7275%" y="79.50"></text></g><g><title>predicates_of (96,071 samples, 0.12%)</title><rect x="12.8864%" y="53" width="0.1213%" height="15" fill="rgb(207,160,47)"/><text x="13.1364%" y="63.50"></text></g><g><title>predicates_defined_on (85,401 samples, 0.11%)</title><rect x="12.8998%" y="37" width="0.1078%" height="15" fill="rgb(228,23,34)"/><text x="13.1498%" y="47.50"></text></g><g><title>needs_drop_raw (574,327 samples, 0.73%)</title><rect x="12.2938%" y="101" width="0.7251%" height="15" fill="rgb(218,30,26)"/><text x="12.5438%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (289,325 samples, 0.37%)</title><rect x="13.1347%" y="85" width="0.3653%" height="15" fill="rgb(220,122,19)"/><text x="13.3847%" y="95.50"></text></g><g><title>specialization_graph_of (347,313 samples, 0.44%)</title><rect x="13.5383%" y="85" width="0.4385%" height="15" fill="rgb(250,228,42)"/><text x="13.7883%" y="95.50"></text></g><g><title>impl_trait_ref (160,873 samples, 0.20%)</title><rect x="13.7737%" y="69" width="0.2031%" height="15" fill="rgb(240,193,28)"/><text x="14.0237%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (135,822 samples, 0.17%)</title><rect x="13.8053%" y="53" width="0.1715%" height="15" fill="rgb(216,20,37)"/><text x="14.0553%" y="63.50"></text></g><g><title>resolve_instance (783,308 samples, 0.99%)</title><rect x="13.0189%" y="101" width="0.9889%" height="15" fill="rgb(206,188,39)"/><text x="13.2689%" y="111.50"></text></g><g><title>thir_body (183,001 samples, 0.23%)</title><rect x="14.0166%" y="101" width="0.2310%" height="15" fill="rgb(217,207,13)"/><text x="14.2666%" y="111.50"></text></g><g><title>mir_const (2,711,097 samples, 3.42%)</title><rect x="10.8504%" y="149" width="3.4226%" height="15" fill="rgb(231,73,38)"/><text x="11.1004%" y="159.50">mir..</text></g><g><title>unsafety_check_result (2,342,104 samples, 2.96%)</title><rect x="11.3162%" y="133" width="2.9568%" height="15" fill="rgb(225,20,46)"/><text x="11.5662%" y="143.50">uns..</text></g><g><title>mir_built (2,106,891 samples, 2.66%)</title><rect x="11.6131%" y="117" width="2.6598%" height="15" fill="rgb(210,31,41)"/><text x="11.8631%" y="127.50">mi..</text></g><g><title>mir_promoted (2,937,918 samples, 3.71%)</title><rect x="10.5811%" y="165" width="3.7090%" height="15" fill="rgb(221,200,47)"/><text x="10.8311%" y="175.50">mir_..</text></g><g><title>type_op_ascribe_user_type (156,022 samples, 0.20%)</title><rect x="14.2901%" y="165" width="0.1970%" height="15" fill="rgb(226,26,5)"/><text x="14.5401%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (239,493 samples, 0.30%)</title><rect x="14.4871%" y="165" width="0.3023%" height="15" fill="rgb(249,33,26)"/><text x="14.7371%" y="175.50"></text></g><g><title>normalize_projection_ty (145,553 samples, 0.18%)</title><rect x="14.6057%" y="149" width="0.1838%" height="15" fill="rgb(235,183,28)"/><text x="14.8557%" y="159.50"></text></g><g><title>type_op_prove_predicate (763,998 samples, 0.96%)</title><rect x="14.9127%" y="165" width="0.9645%" height="15" fill="rgb(221,5,38)"/><text x="15.1627%" y="175.50"></text></g><g><title>MIR_borrow_checking (6,707,771 samples, 8.47%)</title><rect x="7.4108%" y="197" width="8.4682%" height="15" fill="rgb(247,18,42)"/><text x="7.6608%" y="207.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (6,677,490 samples, 8.43%)</title><rect x="7.4490%" y="181" width="8.4300%" height="15" fill="rgb(241,131,45)"/><text x="7.6990%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (152,842 samples, 0.19%)</title><rect x="15.8891%" y="197" width="0.1930%" height="15" fill="rgb(249,31,29)"/><text x="16.1391%" y="207.50"></text></g><g><title>item_attrs (86,251 samples, 0.11%)</title><rect x="16.6650%" y="117" width="0.1089%" height="15" fill="rgb(225,111,53)"/><text x="16.9150%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (81,321 samples, 0.10%)</title><rect x="16.6712%" y="101" width="0.1027%" height="15" fill="rgb(238,160,17)"/><text x="16.9212%" y="111.50"></text></g><g><title>codegen_fn_attrs (157,601 samples, 0.20%)</title><rect x="16.6336%" y="133" width="0.1990%" height="15" fill="rgb(214,148,48)"/><text x="16.8836%" y="143.50"></text></g><g><title>should_inherit_track_caller (271,683 samples, 0.34%)</title><rect x="16.4965%" y="149" width="0.3430%" height="15" fill="rgb(232,36,49)"/><text x="16.7465%" y="159.50"></text></g><g><title>codegen_fn_attrs (444,754 samples, 0.56%)</title><rect x="16.3126%" y="165" width="0.5615%" height="15" fill="rgb(209,103,24)"/><text x="16.5626%" y="175.50"></text></g><g><title>check_mod_attrs (605,647 samples, 0.76%)</title><rect x="16.1103%" y="181" width="0.7646%" height="15" fill="rgb(229,88,8)"/><text x="16.3603%" y="191.50"></text></g><g><title>lookup_deprecation_entry (98,082 samples, 0.12%)</title><rect x="17.1584%" y="165" width="0.1238%" height="15" fill="rgb(213,181,19)"/><text x="17.4084%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (269,823 samples, 0.34%)</title><rect x="17.0211%" y="181" width="0.3406%" height="15" fill="rgb(254,191,54)"/><text x="17.2711%" y="191.50"></text></g><g><title>misc_checking_1 (1,058,801 samples, 1.34%)</title><rect x="16.0826%" y="197" width="1.3367%" height="15" fill="rgb(241,83,37)"/><text x="16.3326%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (104,391 samples, 0.13%)</title><rect x="17.4209%" y="181" width="0.1318%" height="15" fill="rgb(233,36,39)"/><text x="17.6709%" y="191.50"></text></g><g><title>check_mod_liveness (81,401 samples, 0.10%)</title><rect x="17.4499%" y="165" width="0.1028%" height="15" fill="rgb(226,3,54)"/><text x="17.6999%" y="175.50"></text></g><g><title>misc_checking_2 (228,843 samples, 0.29%)</title><rect x="17.4193%" y="197" width="0.2889%" height="15" fill="rgb(245,192,40)"/><text x="17.6693%" y="207.50"></text></g><g><title>match_checking (123,232 samples, 0.16%)</title><rect x="17.5526%" y="181" width="0.1556%" height="15" fill="rgb(238,167,29)"/><text x="17.8026%" y="191.50"></text></g><g><title>check_match (113,722 samples, 0.14%)</title><rect x="17.5647%" y="165" width="0.1436%" height="15" fill="rgb(232,182,51)"/><text x="17.8147%" y="175.50"></text></g><g><title>death_checking (280,033 samples, 0.35%)</title><rect x="17.8124%" y="181" width="0.3535%" height="15" fill="rgb(231,60,39)"/><text x="18.0624%" y="191.50"></text></g><g><title>item_attrs (153,251 samples, 0.19%)</title><rect x="17.9725%" y="165" width="0.1935%" height="15" fill="rgb(208,69,12)"/><text x="18.2225%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,761 samples, 0.19%)</title><rect x="17.9743%" y="149" width="0.1916%" height="15" fill="rgb(235,93,37)"/><text x="18.2243%" y="159.50"></text></g><g><title>param_env (84,071 samples, 0.11%)</title><rect x="18.5257%" y="149" width="0.1061%" height="15" fill="rgb(213,116,39)"/><text x="18.7757%" y="159.50"></text></g><g><title>crate_lints (694,378 samples, 0.88%)</title><rect x="18.1676%" y="165" width="0.8766%" height="15" fill="rgb(222,207,29)"/><text x="18.4176%" y="175.50"></text></g><g><title>type_of (323,613 samples, 0.41%)</title><rect x="18.6357%" y="149" width="0.4085%" height="15" fill="rgb(206,96,30)"/><text x="18.8857%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (234,192 samples, 0.30%)</title><rect x="18.7486%" y="133" width="0.2957%" height="15" fill="rgb(218,138,4)"/><text x="18.9986%" y="143.50"></text></g><g><title>lint_checking (774,688 samples, 0.98%)</title><rect x="18.1659%" y="181" width="0.9780%" height="15" fill="rgb(250,191,14)"/><text x="18.4159%" y="191.50"></text></g><g><title>privacy_access_levels (102,441 samples, 0.13%)</title><rect x="19.1439%" y="181" width="0.1293%" height="15" fill="rgb(239,60,40)"/><text x="19.3939%" y="191.50"></text></g><g><title>privacy_checking_modules (230,973 samples, 0.29%)</title><rect x="19.2733%" y="181" width="0.2916%" height="15" fill="rgb(206,27,48)"/><text x="19.5233%" y="191.50"></text></g><g><title>check_mod_privacy (229,553 samples, 0.29%)</title><rect x="19.2751%" y="165" width="0.2898%" height="15" fill="rgb(225,35,8)"/><text x="19.5251%" y="175.50"></text></g><g><title>misc_checking_3 (1,478,136 samples, 1.87%)</title><rect x="17.7082%" y="197" width="1.8661%" height="15" fill="rgb(250,213,24)"/><text x="17.9582%" y="207.50">m..</text></g><g><title>adt_destructor (93,971 samples, 0.12%)</title><rect x="19.7228%" y="149" width="0.1186%" height="15" fill="rgb(247,123,22)"/><text x="19.9728%" y="159.50"></text></g><g><title>coherent_trait (90,361 samples, 0.11%)</title><rect x="19.7273%" y="133" width="0.1141%" height="15" fill="rgb(231,138,38)"/><text x="19.9773%" y="143.50"></text></g><g><title>specialization_graph_of (88,241 samples, 0.11%)</title><rect x="19.7300%" y="117" width="0.1114%" height="15" fill="rgb(231,145,46)"/><text x="19.9800%" y="127.50"></text></g><g><title>impl_parent (1,860,046 samples, 2.35%)</title><rect x="24.7769%" y="133" width="2.3482%" height="15" fill="rgb(251,118,11)"/><text x="25.0269%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (836,975 samples, 1.06%)</title><rect x="26.0684%" y="117" width="1.0566%" height="15" fill="rgb(217,147,25)"/><text x="26.3184%" y="127.50"></text></g><g><title>impl_trait_ref (4,143,987 samples, 5.23%)</title><rect x="27.1251%" y="133" width="5.2316%" height="15" fill="rgb(247,81,37)"/><text x="27.3751%" y="143.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,130,042 samples, 3.95%)</title><rect x="28.4051%" y="117" width="3.9515%" height="15" fill="rgb(209,12,38)"/><text x="28.6551%" y="127.50">meta..</text></g><g><title>trait_impls_of (815,218 samples, 1.03%)</title><rect x="32.4012%" y="133" width="1.0292%" height="15" fill="rgb(227,1,9)"/><text x="32.6512%" y="143.50"></text></g><g><title>implementations_of_trait (197,472 samples, 0.25%)</title><rect x="33.1811%" y="117" width="0.2493%" height="15" fill="rgb(248,47,43)"/><text x="33.4311%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (163,812 samples, 0.21%)</title><rect x="33.2235%" y="101" width="0.2068%" height="15" fill="rgb(221,10,30)"/><text x="33.4735%" y="111.50"></text></g><g><title>coherent_trait (10,909,016 samples, 13.77%)</title><rect x="19.6600%" y="165" width="13.7721%" height="15" fill="rgb(210,229,1)"/><text x="19.9100%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (10,725,904 samples, 13.54%)</title><rect x="19.8912%" y="149" width="13.5409%" height="15" fill="rgb(222,148,37)"/><text x="20.1412%" y="159.50">specialization_graph..</text></g><g><title>coherence_checking (10,998,687 samples, 13.89%)</title><rect x="19.6214%" y="181" width="13.8853%" height="15" fill="rgb(234,67,33)"/><text x="19.8714%" y="191.50">coherence_checking</text></g><g><title>associated_item (329,743 samples, 0.42%)</title><rect x="42.8448%" y="117" width="0.4163%" height="15" fill="rgb(247,98,35)"/><text x="43.0948%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (255,022 samples, 0.32%)</title><rect x="42.9392%" y="101" width="0.3220%" height="15" fill="rgb(247,138,52)"/><text x="43.1892%" y="111.50"></text></g><g><title>associated_items (917,839 samples, 1.16%)</title><rect x="42.1358%" y="133" width="1.1587%" height="15" fill="rgb(213,79,30)"/><text x="42.3858%" y="143.50"></text></g><g><title>dropck_outlives (249,492 samples, 0.31%)</title><rect x="43.3636%" y="133" width="0.3150%" height="15" fill="rgb(246,177,23)"/><text x="43.6136%" y="143.50"></text></g><g><title>adt_sized_constraint (90,140 samples, 0.11%)</title><rect x="44.6251%" y="117" width="0.1138%" height="15" fill="rgb(230,62,27)"/><text x="44.8751%" y="127.50"></text></g><g><title>predicates_of (130,033 samples, 0.16%)</title><rect x="44.8490%" y="117" width="0.1642%" height="15" fill="rgb(216,154,8)"/><text x="45.0990%" y="127.50"></text></g><g><title>predicates_defined_on (95,753 samples, 0.12%)</title><rect x="44.8922%" y="101" width="0.1209%" height="15" fill="rgb(244,35,45)"/><text x="45.1422%" y="111.50"></text></g><g><title>evaluate_obligation (1,219,725 samples, 1.54%)</title><rect x="43.6786%" y="133" width="1.5398%" height="15" fill="rgb(251,115,12)"/><text x="43.9286%" y="143.50"></text></g><g><title>trait_impls_of (155,930 samples, 0.20%)</title><rect x="45.0216%" y="117" width="0.1969%" height="15" fill="rgb(240,54,50)"/><text x="45.2716%" y="127.50"></text></g><g><title>fn_sig (196,461 samples, 0.25%)</title><rect x="45.2584%" y="133" width="0.2480%" height="15" fill="rgb(233,84,52)"/><text x="45.5084%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (183,561 samples, 0.23%)</title><rect x="45.2747%" y="117" width="0.2317%" height="15" fill="rgb(207,117,47)"/><text x="45.5247%" y="127.50"></text></g><g><title>generics_of (121,452 samples, 0.15%)</title><rect x="45.5065%" y="133" width="0.1533%" height="15" fill="rgb(249,43,39)"/><text x="45.7565%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (87,431 samples, 0.11%)</title><rect x="45.5494%" y="117" width="0.1104%" height="15" fill="rgb(209,38,44)"/><text x="45.7994%" y="127.50"></text></g><g><title>associated_item (127,102 samples, 0.16%)</title><rect x="45.7126%" y="101" width="0.1605%" height="15" fill="rgb(236,212,23)"/><text x="45.9626%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (114,682 samples, 0.14%)</title><rect x="45.7283%" y="85" width="0.1448%" height="15" fill="rgb(242,79,21)"/><text x="45.9783%" y="95.50"></text></g><g><title>impl_item_implementor_ids (182,352 samples, 0.23%)</title><rect x="45.6598%" y="133" width="0.2302%" height="15" fill="rgb(211,96,35)"/><text x="45.9098%" y="143.50"></text></g><g><title>associated_items (167,552 samples, 0.21%)</title><rect x="45.6785%" y="117" width="0.2115%" height="15" fill="rgb(253,215,40)"/><text x="45.9285%" y="127.50"></text></g><g><title>method_autoderef_steps (402,635 samples, 0.51%)</title><rect x="46.1387%" y="133" width="0.5083%" height="15" fill="rgb(211,81,21)"/><text x="46.3887%" y="143.50"></text></g><g><title>evaluate_obligation (199,652 samples, 0.25%)</title><rect x="46.3949%" y="117" width="0.2521%" height="15" fill="rgb(208,190,38)"/><text x="46.6449%" y="127.50"></text></g><g><title>explicit_predicates_of (92,011 samples, 0.12%)</title><rect x="46.9780%" y="101" width="0.1162%" height="15" fill="rgb(235,213,38)"/><text x="47.2280%" y="111.50"></text></g><g><title>predicates_of (341,223 samples, 0.43%)</title><rect x="46.7131%" y="133" width="0.4308%" height="15" fill="rgb(237,122,38)"/><text x="46.9631%" y="143.50"></text></g><g><title>predicates_defined_on (222,221 samples, 0.28%)</title><rect x="46.8633%" y="117" width="0.2805%" height="15" fill="rgb(244,218,35)"/><text x="47.1133%" y="127.50"></text></g><g><title>item_bodies_checking (10,910,807 samples, 13.77%)</title><rect x="33.5494%" y="181" width="13.7744%" height="15" fill="rgb(240,68,47)"/><text x="33.7994%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,908,177 samples, 13.77%)</title><rect x="33.5527%" y="165" width="13.7710%" height="15" fill="rgb(210,16,53)"/><text x="33.8027%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (10,880,787 samples, 13.74%)</title><rect x="33.5873%" y="149" width="13.7365%" height="15" fill="rgb(235,124,12)"/><text x="33.8373%" y="159.50">typeck</text></g><g><title>item_types_checking (809,169 samples, 1.02%)</title><rect x="47.3237%" y="181" width="1.0215%" height="15" fill="rgb(224,169,11)"/><text x="47.5737%" y="191.50"></text></g><g><title>check_mod_item_types (805,189 samples, 1.02%)</title><rect x="47.3287%" y="165" width="1.0165%" height="15" fill="rgb(250,166,2)"/><text x="47.5787%" y="175.50"></text></g><g><title>fn_sig (209,852 samples, 0.26%)</title><rect x="48.6428%" y="149" width="0.2649%" height="15" fill="rgb(242,216,29)"/><text x="48.8928%" y="159.50"></text></g><g><title>named_region_map (201,162 samples, 0.25%)</title><rect x="49.0717%" y="133" width="0.2540%" height="15" fill="rgb(230,116,27)"/><text x="49.3217%" y="143.50"></text></g><g><title>resolve_lifetimes (180,582 samples, 0.23%)</title><rect x="49.0977%" y="117" width="0.2280%" height="15" fill="rgb(228,99,48)"/><text x="49.3477%" y="127.50"></text></g><g><title>lint_levels (97,651 samples, 0.12%)</title><rect x="49.2024%" y="101" width="0.1233%" height="15" fill="rgb(253,11,6)"/><text x="49.4524%" y="111.50"></text></g><g><title>generics_of (348,812 samples, 0.44%)</title><rect x="48.9077%" y="149" width="0.4404%" height="15" fill="rgb(247,143,39)"/><text x="49.1577%" y="159.50"></text></g><g><title>impl_trait_ref (81,362 samples, 0.10%)</title><rect x="49.3481%" y="149" width="0.1027%" height="15" fill="rgb(236,97,10)"/><text x="49.5981%" y="159.50"></text></g><g><title>late_bound_vars_map (92,741 samples, 0.12%)</title><rect x="49.6122%" y="117" width="0.1171%" height="15" fill="rgb(233,208,19)"/><text x="49.8622%" y="127.50"></text></g><g><title>resolve_lifetimes (86,311 samples, 0.11%)</title><rect x="49.6203%" y="101" width="0.1090%" height="15" fill="rgb(216,164,2)"/><text x="49.8703%" y="111.50"></text></g><g><title>explicit_item_bounds (118,881 samples, 0.15%)</title><rect x="49.5809%" y="133" width="0.1501%" height="15" fill="rgb(220,129,5)"/><text x="49.8309%" y="143.50"></text></g><g><title>item_bounds (248,612 samples, 0.31%)</title><rect x="49.4508%" y="149" width="0.3139%" height="15" fill="rgb(242,17,10)"/><text x="49.7008%" y="159.50"></text></g><g><title>late_bound_vars_map (134,141 samples, 0.17%)</title><rect x="50.1433%" y="101" width="0.1693%" height="15" fill="rgb(242,107,0)"/><text x="50.3933%" y="111.50"></text></g><g><title>resolve_lifetimes (121,501 samples, 0.15%)</title><rect x="50.1592%" y="85" width="0.1534%" height="15" fill="rgb(251,28,31)"/><text x="50.4092%" y="95.50"></text></g><g><title>explicit_predicates_of (333,383 samples, 0.42%)</title><rect x="49.9224%" y="117" width="0.4209%" height="15" fill="rgb(233,223,10)"/><text x="50.1724%" y="127.50"></text></g><g><title>predicates_of (640,516 samples, 0.81%)</title><rect x="49.7647%" y="149" width="0.8086%" height="15" fill="rgb(215,21,27)"/><text x="50.0147%" y="159.50"></text></g><g><title>predicates_defined_on (595,766 samples, 0.75%)</title><rect x="49.8212%" y="133" width="0.7521%" height="15" fill="rgb(232,23,21)"/><text x="50.0712%" y="143.50"></text></g><g><title>inferred_outlives_of (182,181 samples, 0.23%)</title><rect x="50.3433%" y="117" width="0.2300%" height="15" fill="rgb(244,5,23)"/><text x="50.5933%" y="127.50"></text></g><g><title>inferred_outlives_crate (159,461 samples, 0.20%)</title><rect x="50.3720%" y="101" width="0.2013%" height="15" fill="rgb(226,81,46)"/><text x="50.6220%" y="111.50"></text></g><g><title>type_of (100,861 samples, 0.13%)</title><rect x="50.4460%" y="85" width="0.1273%" height="15" fill="rgb(247,70,30)"/><text x="50.6960%" y="95.50"></text></g><g><title>super_predicates_of (90,661 samples, 0.11%)</title><rect x="50.5733%" y="149" width="0.1145%" height="15" fill="rgb(212,68,19)"/><text x="50.8233%" y="159.50"></text></g><g><title>super_predicates_that_define_assoc_type (80,411 samples, 0.10%)</title><rect x="50.5862%" y="133" width="0.1015%" height="15" fill="rgb(240,187,13)"/><text x="50.8362%" y="143.50"></text></g><g><title>type_collecting (2,063,922 samples, 2.61%)</title><rect x="48.3467%" y="181" width="2.6056%" height="15" fill="rgb(223,113,26)"/><text x="48.5967%" y="191.50">ty..</text></g><g><title>collect_mod_item_types (2,055,182 samples, 2.59%)</title><rect x="48.3577%" y="165" width="2.5946%" height="15" fill="rgb(206,192,2)"/><text x="48.6077%" y="175.50">co..</text></g><g><title>type_of (209,551 samples, 0.26%)</title><rect x="50.6877%" y="149" width="0.2645%" height="15" fill="rgb(241,108,4)"/><text x="50.9377%" y="159.50"></text></g><g><title>evaluate_obligation (253,513 samples, 0.32%)</title><rect x="52.5222%" y="149" width="0.3200%" height="15" fill="rgb(247,173,49)"/><text x="52.7722%" y="159.50"></text></g><g><title>implied_outlives_bounds (107,432 samples, 0.14%)</title><rect x="52.8422%" y="149" width="0.1356%" height="15" fill="rgb(224,114,35)"/><text x="53.0922%" y="159.50"></text></g><g><title>param_env (180,452 samples, 0.23%)</title><rect x="52.9779%" y="149" width="0.2278%" height="15" fill="rgb(245,159,27)"/><text x="53.2279%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,758,928 samples, 2.22%)</title><rect x="51.1486%" y="165" width="2.2206%" height="15" fill="rgb(245,172,44)"/><text x="51.3986%" y="175.50">c..</text></g><g><title>region_scope_tree (107,551 samples, 0.14%)</title><rect x="53.2334%" y="149" width="0.1358%" height="15" fill="rgb(236,23,11)"/><text x="53.4834%" y="159.50"></text></g><g><title>evaluate_obligation (179,820 samples, 0.23%)</title><rect x="55.4397%" y="149" width="0.2270%" height="15" fill="rgb(205,117,38)"/><text x="55.6897%" y="159.50"></text></g><g><title>param_env (286,001 samples, 0.36%)</title><rect x="55.7719%" y="149" width="0.3611%" height="15" fill="rgb(237,72,25)"/><text x="56.0219%" y="159.50"></text></g><g><title>predicates_of (146,221 samples, 0.18%)</title><rect x="56.1329%" y="149" width="0.1846%" height="15" fill="rgb(244,70,9)"/><text x="56.3829%" y="159.50"></text></g><g><title>predicates_defined_on (99,710 samples, 0.13%)</title><rect x="56.1916%" y="133" width="0.1259%" height="15" fill="rgb(217,125,39)"/><text x="56.4416%" y="143.50"></text></g><g><title>check_item_well_formed (2,453,386 samples, 3.10%)</title><rect x="53.3691%" y="165" width="3.0973%" height="15" fill="rgb(235,36,10)"/><text x="53.6191%" y="175.50">che..</text></g><g><title>evaluate_obligation (176,611 samples, 0.22%)</title><rect x="57.6726%" y="149" width="0.2230%" height="15" fill="rgb(251,123,47)"/><text x="57.9226%" y="159.50"></text></g><g><title>implied_outlives_bounds (168,192 samples, 0.21%)</title><rect x="57.8956%" y="149" width="0.2123%" height="15" fill="rgb(221,13,13)"/><text x="58.1456%" y="159.50"></text></g><g><title>param_env (146,884 samples, 0.19%)</title><rect x="58.1097%" y="149" width="0.1854%" height="15" fill="rgb(238,131,9)"/><text x="58.3597%" y="159.50"></text></g><g><title>analysis (40,622,954 samples, 51.28%)</title><rect x="7.1743%" y="213" width="51.2845%" height="15" fill="rgb(211,50,8)"/><text x="7.4243%" y="223.50">analysis</text></g><g><title>type_check_crate (30,800,809 samples, 38.88%)</title><rect x="19.5743%" y="197" width="38.8845%" height="15" fill="rgb(245,182,24)"/><text x="19.8243%" y="207.50">type_check_crate</text></g><g><title>wf_checking (5,944,483 samples, 7.50%)</title><rect x="50.9542%" y="181" width="7.5046%" height="15" fill="rgb(242,14,37)"/><text x="51.2042%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,578,188 samples, 1.99%)</title><rect x="56.4664%" y="165" width="1.9924%" height="15" fill="rgb(246,228,12)"/><text x="56.7164%" y="175.50">c..</text></g><g><title>fn_abi_of_instance (100,721 samples, 0.13%)</title><rect x="59.9700%" y="181" width="0.1272%" height="15" fill="rgb(213,55,15)"/><text x="60.2200%" y="191.50"></text></g><g><title>codegen_module (897,549 samples, 1.13%)</title><rect x="59.0075%" y="197" width="1.1331%" height="15" fill="rgb(209,9,3)"/><text x="59.2575%" y="207.50"></text></g><g><title>codegen_crate (1,355,645 samples, 1.71%)</title><rect x="58.4695%" y="213" width="1.7114%" height="15" fill="rgb(230,59,30)"/><text x="58.7195%" y="223.50"></text></g><g><title>LLVM_module_codegen (4,475,078 samples, 5.65%)</title><rect x="60.2115%" y="197" width="5.6496%" height="15" fill="rgb(209,121,21)"/><text x="60.4615%" y="207.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (4,276,646 samples, 5.40%)</title><rect x="60.4620%" y="181" width="5.3991%" height="15" fill="rgb(220,109,13)"/><text x="60.7120%" y="191.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (4,846,722 samples, 6.12%)</title><rect x="60.1809%" y="213" width="6.1187%" height="15" fill="rgb(232,18,1)"/><text x="60.4309%" y="223.50">codegen_..</text></g><g><title>LLVM_module_optimize (347,444 samples, 0.44%)</title><rect x="65.8610%" y="197" width="0.4386%" height="15" fill="rgb(215,41,42)"/><text x="66.1110%" y="207.50"></text></g><g><title>AST_validation (112,171 samples, 0.14%)</title><rect x="66.5056%" y="197" width="0.1416%" height="15" fill="rgb(224,123,36)"/><text x="66.7556%" y="207.50"></text></g><g><title>metadata_load_macro (117,201 samples, 0.15%)</title><rect x="81.2935%" y="165" width="0.1480%" height="15" fill="rgb(240,125,3)"/><text x="81.5435%" y="175.50"></text></g><g><title>macro_expand_crate (11,967,798 samples, 15.11%)</title><rect x="66.7784%" y="197" width="15.1088%" height="15" fill="rgb(205,98,50)"/><text x="67.0284%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (11,944,037 samples, 15.08%)</title><rect x="66.8084%" y="181" width="15.0788%" height="15" fill="rgb(205,185,37)"/><text x="67.0584%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (353,024 samples, 0.45%)</title><rect x="81.4415%" y="165" width="0.4457%" height="15" fill="rgb(238,207,15)"/><text x="81.6915%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (127,501 samples, 0.16%)</title><rect x="81.8925%" y="197" width="0.1610%" height="15" fill="rgb(213,199,42)"/><text x="82.1425%" y="207.50"></text></g><g><title>finalize_macro_resolutions (230,302 samples, 0.29%)</title><rect x="82.1306%" y="181" width="0.2907%" height="15" fill="rgb(235,201,11)"/><text x="82.3806%" y="191.50"></text></g><g><title>late_resolve_crate (971,751 samples, 1.23%)</title><rect x="82.4213%" y="181" width="1.2268%" height="15" fill="rgb(207,46,11)"/><text x="82.6713%" y="191.50"></text></g><g><title>configure_and_expand (13,817,797 samples, 17.44%)</title><rect x="66.2997%" y="213" width="17.4443%" height="15" fill="rgb(241,35,35)"/><text x="66.5497%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,339,024 samples, 1.69%)</title><rect x="82.0535%" y="197" width="1.6905%" height="15" fill="rgb(243,32,47)"/><text x="82.3035%" y="207.50"></text></g><g><title>drop_ast (99,481 samples, 0.13%)</title><rect x="83.7439%" y="213" width="0.1256%" height="15" fill="rgb(247,202,23)"/><text x="83.9939%" y="223.50"></text></g><g><title>early_lint_checks (230,882 samples, 0.29%)</title><rect x="83.8882%" y="213" width="0.2915%" height="15" fill="rgb(219,102,11)"/><text x="84.1382%" y="223.50"></text></g><g><title>free_global_ctxt (1,400,825 samples, 1.77%)</title><rect x="84.1797%" y="213" width="1.7685%" height="15" fill="rgb(243,110,44)"/><text x="84.4297%" y="223.50"></text></g><g><title>optimized_mir (184,982 samples, 0.23%)</title><rect x="86.8000%" y="133" width="0.2335%" height="15" fill="rgb(222,74,54)"/><text x="87.0500%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (275,953 samples, 0.35%)</title><rect x="86.6882%" y="149" width="0.3484%" height="15" fill="rgb(216,99,12)"/><text x="86.9382%" y="159.50"></text></g><g><title>monomorphization_collector (293,483 samples, 0.37%)</title><rect x="86.6851%" y="165" width="0.3705%" height="15" fill="rgb(226,22,26)"/><text x="86.9351%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (389,495 samples, 0.49%)</title><rect x="86.6591%" y="181" width="0.4917%" height="15" fill="rgb(217,163,10)"/><text x="86.9091%" y="191.50"></text></g><g><title>exported_symbols (437,265 samples, 0.55%)</title><rect x="86.6419%" y="197" width="0.5520%" height="15" fill="rgb(213,25,53)"/><text x="86.8919%" y="207.50"></text></g><g><title>is_sized_raw (154,581 samples, 0.20%)</title><rect x="88.1809%" y="165" width="0.1952%" height="15" fill="rgb(252,105,26)"/><text x="88.4309%" y="175.50"></text></g><g><title>evaluate_obligation (136,221 samples, 0.17%)</title><rect x="88.2041%" y="149" width="0.1720%" height="15" fill="rgb(220,39,43)"/><text x="88.4541%" y="159.50"></text></g><g><title>layout_of (317,743 samples, 0.40%)</title><rect x="88.0371%" y="181" width="0.4011%" height="15" fill="rgb(229,68,48)"/><text x="88.2871%" y="191.50"></text></g><g><title>is_copy_raw (239,813 samples, 0.30%)</title><rect x="89.3368%" y="149" width="0.3028%" height="15" fill="rgb(252,8,32)"/><text x="89.5868%" y="159.50"></text></g><g><title>evaluate_obligation (205,283 samples, 0.26%)</title><rect x="89.3804%" y="133" width="0.2592%" height="15" fill="rgb(223,20,43)"/><text x="89.6304%" y="143.50"></text></g><g><title>needs_drop_raw (301,403 samples, 0.38%)</title><rect x="89.3061%" y="165" width="0.3805%" height="15" fill="rgb(229,81,49)"/><text x="89.5561%" y="175.50"></text></g><g><title>optimized_mir (2,009,612 samples, 2.54%)</title><rect x="87.2484%" y="197" width="2.5370%" height="15" fill="rgb(236,28,36)"/><text x="87.4984%" y="207.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,067,062 samples, 1.35%)</title><rect x="88.4383%" y="181" width="1.3471%" height="15" fill="rgb(249,185,26)"/><text x="88.6883%" y="191.50"></text></g><g><title>generate_crate_metadata (3,058,933 samples, 3.86%)</title><rect x="85.9482%" y="213" width="3.8618%" height="15" fill="rgb(249,174,33)"/><text x="86.1982%" y="223.50">gene..</text></g><g><title>hir_lowering (1,519,707 samples, 1.92%)</title><rect x="89.8099%" y="213" width="1.9186%" height="15" fill="rgb(233,201,37)"/><text x="90.0599%" y="223.50">h..</text></g><g><title>finish_ongoing_codegen (3,190,454 samples, 4.03%)</title><rect x="91.7406%" y="197" width="4.0278%" height="15" fill="rgb(221,78,26)"/><text x="91.9906%" y="207.50">fini..</text></g><g><title>link_crate (632,717 samples, 0.80%)</title><rect x="95.7684%" y="197" width="0.7988%" height="15" fill="rgb(250,127,30)"/><text x="96.0184%" y="207.50"></text></g><g><title>link_binary (628,187 samples, 0.79%)</title><rect x="95.7741%" y="181" width="0.7931%" height="15" fill="rgb(230,49,44)"/><text x="96.0241%" y="191.50"></text></g><g><title>link_rlib (375,244 samples, 0.47%)</title><rect x="96.0934%" y="165" width="0.4737%" height="15" fill="rgb(229,67,23)"/><text x="96.3434%" y="175.50"></text></g><g><title>link (3,838,821 samples, 4.85%)</title><rect x="91.7285%" y="213" width="4.8463%" height="15" fill="rgb(249,83,47)"/><text x="91.9785%" y="223.50">link</text></g><g><title>parse_crate (1,539,637 samples, 1.94%)</title><rect x="96.5748%" y="213" width="1.9437%" height="15" fill="rgb(215,43,3)"/><text x="96.8248%" y="223.50">p..</text></g><g><title>prepare_outputs (301,193 samples, 0.38%)</title><rect x="98.5274%" y="213" width="0.3802%" height="15" fill="rgb(238,154,13)"/><text x="98.7774%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (465,305 samples, 0.59%)</title><rect x="98.9077%" y="213" width="0.5874%" height="15" fill="rgb(219,56,2)"/><text x="99.1577%" y="223.50"></text></g><g><title>setup_global_ctxt (101,461 samples, 0.13%)</title><rect x="99.4958%" y="213" width="0.1281%" height="15" fill="rgb(233,0,4)"/><text x="99.7458%" y="223.50"></text></g><g><title>all (79,210,987 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (79,210,987 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (297,933 samples, 0.38%)</title><rect x="99.6239%" y="213" width="0.3761%" height="15" fill="rgb(211,146,34)"/><text x="99.8739%" y="223.50"></text></g></svg></svg>