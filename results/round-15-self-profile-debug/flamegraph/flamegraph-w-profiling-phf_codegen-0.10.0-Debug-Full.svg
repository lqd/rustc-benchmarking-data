<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,306,494 samples, 5.91%)</title><rect x="0.4622%" y="197" width="5.9056%" height="15" fill="rgb(227,0,7)"/><text x="0.7122%" y="207.50">LLVM_pas..</text></g><g><title>param_env (98,130 samples, 0.11%)</title><rect x="16.5309%" y="117" width="0.1092%" height="15" fill="rgb(217,0,24)"/><text x="16.7809%" y="127.50"></text></g><g><title>codegen_fn_attrs (133,631 samples, 0.15%)</title><rect x="16.9180%" y="101" width="0.1487%" height="15" fill="rgb(221,193,54)"/><text x="17.1680%" y="111.50"></text></g><g><title>adt_drop_tys (182,612 samples, 0.20%)</title><rect x="18.8851%" y="69" width="0.2032%" height="15" fill="rgb(248,212,6)"/><text x="19.1351%" y="79.50"></text></g><g><title>needs_drop_raw (1,023,291 samples, 1.14%)</title><rect x="18.7954%" y="85" width="1.1388%" height="15" fill="rgb(208,68,35)"/><text x="19.0454%" y="95.50"></text></g><g><title>is_copy_raw (760,078 samples, 0.85%)</title><rect x="19.0883%" y="69" width="0.8459%" height="15" fill="rgb(232,128,0)"/><text x="19.3383%" y="79.50"></text></g><g><title>evaluate_obligation (647,297 samples, 0.72%)</title><rect x="19.2138%" y="53" width="0.7204%" height="15" fill="rgb(207,160,47)"/><text x="19.4638%" y="63.50"></text></g><g><title>trait_impls_of (165,351 samples, 0.18%)</title><rect x="19.7502%" y="37" width="0.1840%" height="15" fill="rgb(228,23,34)"/><text x="20.0002%" y="47.50"></text></g><g><title>impl_parent (418,051 samples, 0.47%)</title><rect x="20.8725%" y="53" width="0.4653%" height="15" fill="rgb(218,30,26)"/><text x="21.1225%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (261,561 samples, 0.29%)</title><rect x="21.0466%" y="37" width="0.2911%" height="15" fill="rgb(220,122,19)"/><text x="21.2966%" y="47.50"></text></g><g><title>specialization_graph_of (2,507,714 samples, 2.79%)</title><rect x="20.1674%" y="69" width="2.7909%" height="15" fill="rgb(250,228,42)"/><text x="20.4174%" y="79.50">sp..</text></g><g><title>impl_trait_ref (1,456,157 samples, 1.62%)</title><rect x="21.3377%" y="53" width="1.6206%" height="15" fill="rgb(240,193,28)"/><text x="21.5877%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,092,262 samples, 1.22%)</title><rect x="21.7427%" y="37" width="1.2156%" height="15" fill="rgb(216,20,37)"/><text x="21.9927%" y="47.50"></text></g><g><title>resolve_instance (2,746,057 samples, 3.06%)</title><rect x="19.9342%" y="85" width="3.0561%" height="15" fill="rgb(206,188,39)"/><text x="20.1842%" y="95.50">res..</text></g><g><title>thir_body (572,313 samples, 0.64%)</title><rect x="23.0017%" y="85" width="0.6369%" height="15" fill="rgb(217,207,13)"/><text x="23.2517%" y="95.50"></text></g><g><title>mir_const (6,822,399 samples, 7.59%)</title><rect x="16.0520%" y="133" width="7.5927%" height="15" fill="rgb(231,73,38)"/><text x="16.3020%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (6,293,942 samples, 7.00%)</title><rect x="16.6401%" y="117" width="7.0046%" height="15" fill="rgb(225,20,46)"/><text x="16.8901%" y="127.50">unsafety_..</text></g><g><title>mir_built (5,910,630 samples, 6.58%)</title><rect x="17.0667%" y="101" width="6.5780%" height="15" fill="rgb(210,31,41)"/><text x="17.3167%" y="111.50">mir_built</text></g><g><title>mir_promoted (7,317,104 samples, 8.14%)</title><rect x="15.5225%" y="149" width="8.1433%" height="15" fill="rgb(221,200,47)"/><text x="15.7725%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (470,284 samples, 0.52%)</title><rect x="23.6657%" y="149" width="0.5234%" height="15" fill="rgb(226,26,5)"/><text x="23.9157%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (706,356 samples, 0.79%)</title><rect x="24.1891%" y="149" width="0.7861%" height="15" fill="rgb(249,33,26)"/><text x="24.4391%" y="159.50"></text></g><g><title>normalize_projection_ty (523,625 samples, 0.58%)</title><rect x="24.3925%" y="133" width="0.5827%" height="15" fill="rgb(235,183,28)"/><text x="24.6425%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,876,772 samples, 2.09%)</title><rect x="25.0200%" y="149" width="2.0887%" height="15" fill="rgb(221,5,38)"/><text x="25.2700%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (18,460,877 samples, 20.55%)</title><rect x="6.5752%" y="181" width="20.5452%" height="15" fill="rgb(247,18,42)"/><text x="6.8252%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,419,357 samples, 20.50%)</title><rect x="6.6214%" y="165" width="20.4990%" height="15" fill="rgb(241,131,45)"/><text x="6.8714%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (95,181 samples, 0.11%)</title><rect x="27.1330%" y="181" width="0.1059%" height="15" fill="rgb(249,31,29)"/><text x="27.3830%" y="191.50"></text></g><g><title>codegen_fn_attrs (210,612 samples, 0.23%)</title><rect x="27.4012%" y="149" width="0.2344%" height="15" fill="rgb(225,111,53)"/><text x="27.6512%" y="159.50"></text></g><g><title>check_mod_attrs (335,784 samples, 0.37%)</title><rect x="27.2620%" y="165" width="0.3737%" height="15" fill="rgb(238,160,17)"/><text x="27.5120%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (192,942 samples, 0.21%)</title><rect x="27.7408%" y="165" width="0.2147%" height="15" fill="rgb(214,148,48)"/><text x="27.9908%" y="175.50"></text></g><g><title>misc_checking_1 (671,027 samples, 0.75%)</title><rect x="27.2397%" y="181" width="0.7468%" height="15" fill="rgb(232,36,49)"/><text x="27.4897%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (309,453 samples, 0.34%)</title><rect x="27.9881%" y="165" width="0.3444%" height="15" fill="rgb(209,103,24)"/><text x="28.2381%" y="175.50"></text></g><g><title>check_mod_liveness (262,192 samples, 0.29%)</title><rect x="28.0407%" y="149" width="0.2918%" height="15" fill="rgb(229,88,8)"/><text x="28.2907%" y="159.50"></text></g><g><title>type_uninhabited_from (96,681 samples, 0.11%)</title><rect x="28.2249%" y="133" width="0.1076%" height="15" fill="rgb(213,181,19)"/><text x="28.4749%" y="143.50"></text></g><g><title>misc_checking_2 (549,146 samples, 0.61%)</title><rect x="27.9865%" y="181" width="0.6111%" height="15" fill="rgb(254,191,54)"/><text x="28.2365%" y="191.50"></text></g><g><title>match_checking (238,243 samples, 0.27%)</title><rect x="28.3325%" y="165" width="0.2651%" height="15" fill="rgb(241,83,37)"/><text x="28.5825%" y="175.50"></text></g><g><title>check_match (224,673 samples, 0.25%)</title><rect x="28.3476%" y="149" width="0.2500%" height="15" fill="rgb(233,36,39)"/><text x="28.5976%" y="159.50"></text></g><g><title>check_private_in_public (96,781 samples, 0.11%)</title><rect x="28.6086%" y="165" width="0.1077%" height="15" fill="rgb(226,3,54)"/><text x="28.8586%" y="175.50"></text></g><g><title>death_checking (256,632 samples, 0.29%)</title><rect x="28.7163%" y="165" width="0.2856%" height="15" fill="rgb(245,192,40)"/><text x="28.9663%" y="175.50"></text></g><g><title>lint_levels (106,541 samples, 0.12%)</title><rect x="28.8834%" y="149" width="0.1186%" height="15" fill="rgb(238,167,29)"/><text x="29.1334%" y="159.50"></text></g><g><title>crate_lints (2,854,909 samples, 3.18%)</title><rect x="29.0035%" y="149" width="3.1772%" height="15" fill="rgb(232,182,51)"/><text x="29.2535%" y="159.50">cra..</text></g><g><title>type_of (2,191,773 samples, 2.44%)</title><rect x="29.7415%" y="133" width="2.4392%" height="15" fill="rgb(231,60,39)"/><text x="29.9915%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (1,934,381 samples, 2.15%)</title><rect x="30.0279%" y="117" width="2.1528%" height="15" fill="rgb(208,69,12)"/><text x="30.2779%" y="127.50">m..</text></g><g><title>lint_checking (3,080,202 samples, 3.43%)</title><rect x="29.0020%" y="165" width="3.4280%" height="15" fill="rgb(235,93,37)"/><text x="29.2520%" y="175.50">lin..</text></g><g><title>module_lints (223,923 samples, 0.25%)</title><rect x="32.1807%" y="149" width="0.2492%" height="15" fill="rgb(213,116,39)"/><text x="32.4307%" y="159.50"></text></g><g><title>lint_mod (221,112 samples, 0.25%)</title><rect x="32.1838%" y="133" width="0.2461%" height="15" fill="rgb(222,207,29)"/><text x="32.4338%" y="143.50"></text></g><g><title>privacy_access_levels (127,332 samples, 0.14%)</title><rect x="32.4299%" y="165" width="0.1417%" height="15" fill="rgb(206,96,30)"/><text x="32.6799%" y="175.50"></text></g><g><title>privacy_checking_modules (422,624 samples, 0.47%)</title><rect x="32.5716%" y="165" width="0.4703%" height="15" fill="rgb(218,138,4)"/><text x="32.8216%" y="175.50"></text></g><g><title>check_mod_privacy (420,614 samples, 0.47%)</title><rect x="32.5739%" y="149" width="0.4681%" height="15" fill="rgb(250,191,14)"/><text x="32.8239%" y="159.50"></text></g><g><title>misc_checking_3 (4,003,961 samples, 4.46%)</title><rect x="28.5977%" y="181" width="4.4560%" height="15" fill="rgb(239,60,40)"/><text x="28.8477%" y="191.50">misc_..</text></g><g><title>impl_parent (148,100 samples, 0.16%)</title><rect x="33.3174%" y="117" width="0.1648%" height="15" fill="rgb(206,27,48)"/><text x="33.5674%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (115,520 samples, 0.13%)</title><rect x="33.3536%" y="101" width="0.1286%" height="15" fill="rgb(225,35,8)"/><text x="33.6036%" y="111.50"></text></g><g><title>impl_trait_ref (456,665 samples, 0.51%)</title><rect x="33.4822%" y="117" width="0.5082%" height="15" fill="rgb(250,213,24)"/><text x="33.7322%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (423,805 samples, 0.47%)</title><rect x="33.5188%" y="101" width="0.4717%" height="15" fill="rgb(247,123,22)"/><text x="33.7688%" y="111.50"></text></g><g><title>coherent_trait (863,019 samples, 0.96%)</title><rect x="33.1032%" y="149" width="0.9605%" height="15" fill="rgb(231,138,38)"/><text x="33.3532%" y="159.50"></text></g><g><title>specialization_graph_of (858,159 samples, 0.96%)</title><rect x="33.1086%" y="133" width="0.9551%" height="15" fill="rgb(231,145,46)"/><text x="33.3586%" y="143.50"></text></g><g><title>coherence_checking (916,049 samples, 1.02%)</title><rect x="33.0917%" y="165" width="1.0195%" height="15" fill="rgb(251,118,11)"/><text x="33.3417%" y="175.50"></text></g><g><title>adt_def (119,531 samples, 0.13%)</title><rect x="51.6614%" y="85" width="0.1330%" height="15" fill="rgb(217,147,25)"/><text x="51.9114%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (119,301 samples, 0.13%)</title><rect x="51.6616%" y="69" width="0.1328%" height="15" fill="rgb(247,81,37)"/><text x="51.9116%" y="79.50"></text></g><g><title>adt_sized_constraint (176,672 samples, 0.20%)</title><rect x="51.6602%" y="101" width="0.1966%" height="15" fill="rgb(209,12,38)"/><text x="51.9102%" y="111.50"></text></g><g><title>adt_sized_constraint (283,222 samples, 0.32%)</title><rect x="51.5528%" y="117" width="0.3152%" height="15" fill="rgb(227,1,9)"/><text x="51.8028%" y="127.50"></text></g><g><title>associated_item (375,275 samples, 0.42%)</title><rect x="52.0436%" y="101" width="0.4176%" height="15" fill="rgb(248,47,43)"/><text x="52.2936%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (286,573 samples, 0.32%)</title><rect x="52.1423%" y="85" width="0.3189%" height="15" fill="rgb(221,10,30)"/><text x="52.3923%" y="95.50"></text></g><g><title>associated_items (550,555 samples, 0.61%)</title><rect x="51.8797%" y="117" width="0.6127%" height="15" fill="rgb(210,229,1)"/><text x="52.1297%" y="127.50"></text></g><g><title>adt_dtorck_constraint (123,391 samples, 0.14%)</title><rect x="52.9317%" y="53" width="0.1373%" height="15" fill="rgb(222,148,37)"/><text x="53.1817%" y="63.50"></text></g><g><title>adt_dtorck_constraint (157,442 samples, 0.18%)</title><rect x="52.8994%" y="69" width="0.1752%" height="15" fill="rgb(234,67,33)"/><text x="53.1494%" y="79.50"></text></g><g><title>adt_dtorck_constraint (180,532 samples, 0.20%)</title><rect x="52.8798%" y="85" width="0.2009%" height="15" fill="rgb(247,98,35)"/><text x="53.1298%" y="95.50"></text></g><g><title>dropck_outlives (499,446 samples, 0.56%)</title><rect x="52.5480%" y="117" width="0.5558%" height="15" fill="rgb(247,138,52)"/><text x="52.7980%" y="127.50"></text></g><g><title>adt_dtorck_constraint (304,304 samples, 0.34%)</title><rect x="52.7652%" y="101" width="0.3387%" height="15" fill="rgb(213,79,30)"/><text x="53.0152%" y="111.50"></text></g><g><title>predicates_of (90,391 samples, 0.10%)</title><rect x="54.0466%" y="101" width="0.1006%" height="15" fill="rgb(246,177,23)"/><text x="54.2966%" y="111.50"></text></g><g><title>evaluate_obligation (1,539,755 samples, 1.71%)</title><rect x="53.1039%" y="117" width="1.7136%" height="15" fill="rgb(230,62,27)"/><text x="53.3539%" y="127.50"></text></g><g><title>trait_impls_of (533,554 samples, 0.59%)</title><rect x="54.2237%" y="101" width="0.5938%" height="15" fill="rgb(216,154,8)"/><text x="54.4737%" y="111.50"></text></g><g><title>implementations_of_trait (167,740 samples, 0.19%)</title><rect x="54.6308%" y="85" width="0.1867%" height="15" fill="rgb(244,35,45)"/><text x="54.8808%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (105,200 samples, 0.12%)</title><rect x="54.7004%" y="69" width="0.1171%" height="15" fill="rgb(251,115,12)"/><text x="54.9504%" y="79.50"></text></g><g><title>generics_of (291,526 samples, 0.32%)</title><rect x="54.9245%" y="117" width="0.3244%" height="15" fill="rgb(240,54,50)"/><text x="55.1745%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (266,506 samples, 0.30%)</title><rect x="54.9524%" y="101" width="0.2966%" height="15" fill="rgb(233,84,52)"/><text x="55.2024%" y="111.50"></text></g><g><title>impl_item_implementor_ids (99,380 samples, 0.11%)</title><rect x="55.2490%" y="117" width="0.1106%" height="15" fill="rgb(207,117,47)"/><text x="55.4990%" y="127.50"></text></g><g><title>evaluate_obligation (153,144 samples, 0.17%)</title><rect x="55.7861%" y="101" width="0.1704%" height="15" fill="rgb(249,43,39)"/><text x="56.0361%" y="111.50"></text></g><g><title>method_autoderef_steps (289,855 samples, 0.32%)</title><rect x="55.6460%" y="117" width="0.3226%" height="15" fill="rgb(209,38,44)"/><text x="55.8960%" y="127.50"></text></g><g><title>explicit_predicates_of (161,561 samples, 0.18%)</title><rect x="56.1698%" y="85" width="0.1798%" height="15" fill="rgb(236,212,23)"/><text x="56.4198%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (141,931 samples, 0.16%)</title><rect x="56.1916%" y="69" width="0.1580%" height="15" fill="rgb(242,79,21)"/><text x="56.4416%" y="79.50"></text></g><g><title>predicates_of (348,644 samples, 0.39%)</title><rect x="55.9997%" y="117" width="0.3880%" height="15" fill="rgb(211,96,35)"/><text x="56.2497%" y="127.50"></text></g><g><title>predicates_defined_on (257,364 samples, 0.29%)</title><rect x="56.1013%" y="101" width="0.2864%" height="15" fill="rgb(253,215,40)"/><text x="56.3513%" y="111.50"></text></g><g><title>type_of (92,060 samples, 0.10%)</title><rect x="56.4310%" y="117" width="0.1025%" height="15" fill="rgb(211,81,21)"/><text x="56.6810%" y="127.50"></text></g><g><title>item_bodies_checking (20,165,215 samples, 22.44%)</title><rect x="34.1338%" y="165" width="22.4420%" height="15" fill="rgb(208,190,38)"/><text x="34.3838%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,162,715 samples, 22.44%)</title><rect x="34.1365%" y="149" width="22.4392%" height="15" fill="rgb(235,213,38)"/><text x="34.3865%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (20,127,635 samples, 22.40%)</title><rect x="34.1756%" y="133" width="22.4002%" height="15" fill="rgb(237,122,38)"/><text x="34.4256%" y="143.50">typeck</text></g><g><title>impl_trait_ref (235,360 samples, 0.26%)</title><rect x="57.0829%" y="85" width="0.2619%" height="15" fill="rgb(244,218,35)"/><text x="57.3329%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (216,270 samples, 0.24%)</title><rect x="57.1041%" y="69" width="0.2407%" height="15" fill="rgb(240,68,47)"/><text x="57.3541%" y="79.50"></text></g><g><title>adt_destructor (426,014 samples, 0.47%)</title><rect x="56.9062%" y="133" width="0.4741%" height="15" fill="rgb(210,16,53)"/><text x="57.1562%" y="143.50"></text></g><g><title>coherent_trait (420,684 samples, 0.47%)</title><rect x="56.9121%" y="117" width="0.4682%" height="15" fill="rgb(235,124,12)"/><text x="57.1621%" y="127.50"></text></g><g><title>specialization_graph_of (419,324 samples, 0.47%)</title><rect x="56.9137%" y="101" width="0.4667%" height="15" fill="rgb(224,169,11)"/><text x="57.1637%" y="111.50"></text></g><g><title>item_types_checking (769,048 samples, 0.86%)</title><rect x="56.5758%" y="165" width="0.8559%" height="15" fill="rgb(250,166,2)"/><text x="56.8258%" y="175.50"></text></g><g><title>check_mod_item_types (767,168 samples, 0.85%)</title><rect x="56.5778%" y="149" width="0.8538%" height="15" fill="rgb(242,216,29)"/><text x="56.8278%" y="159.50"></text></g><g><title>generics_of (127,532 samples, 0.14%)</title><rect x="57.6614%" y="133" width="0.1419%" height="15" fill="rgb(230,116,27)"/><text x="57.9114%" y="143.50"></text></g><g><title>late_bound_vars_map (101,951 samples, 0.11%)</title><rect x="58.0310%" y="85" width="0.1135%" height="15" fill="rgb(228,99,48)"/><text x="58.2810%" y="95.50"></text></g><g><title>resolve_lifetimes (98,101 samples, 0.11%)</title><rect x="58.0353%" y="69" width="0.1092%" height="15" fill="rgb(253,11,6)"/><text x="58.2853%" y="79.50"></text></g><g><title>explicit_predicates_of (228,812 samples, 0.25%)</title><rect x="57.8965%" y="101" width="0.2546%" height="15" fill="rgb(247,143,39)"/><text x="58.1465%" y="111.50"></text></g><g><title>predicates_of (567,286 samples, 0.63%)</title><rect x="57.8251%" y="133" width="0.6313%" height="15" fill="rgb(236,97,10)"/><text x="58.0751%" y="143.50"></text></g><g><title>predicates_defined_on (544,645 samples, 0.61%)</title><rect x="57.8503%" y="117" width="0.6061%" height="15" fill="rgb(233,208,19)"/><text x="58.1003%" y="127.50"></text></g><g><title>inferred_outlives_of (274,313 samples, 0.31%)</title><rect x="58.1511%" y="101" width="0.3053%" height="15" fill="rgb(216,164,2)"/><text x="58.4011%" y="111.50"></text></g><g><title>inferred_outlives_crate (262,643 samples, 0.29%)</title><rect x="58.1641%" y="85" width="0.2923%" height="15" fill="rgb(220,129,5)"/><text x="58.4141%" y="95.50"></text></g><g><title>type_of (135,302 samples, 0.15%)</title><rect x="58.3058%" y="69" width="0.1506%" height="15" fill="rgb(242,17,10)"/><text x="58.5558%" y="79.50"></text></g><g><title>type_collecting (991,850 samples, 1.10%)</title><rect x="57.4330%" y="165" width="1.1038%" height="15" fill="rgb(242,107,0)"/><text x="57.6830%" y="175.50"></text></g><g><title>collect_mod_item_types (985,150 samples, 1.10%)</title><rect x="57.4404%" y="149" width="1.0964%" height="15" fill="rgb(251,28,31)"/><text x="57.6904%" y="159.50"></text></g><g><title>evaluate_obligation (363,395 samples, 0.40%)</title><rect x="59.6843%" y="133" width="0.4044%" height="15" fill="rgb(233,223,10)"/><text x="59.9343%" y="143.50"></text></g><g><title>implied_outlives_bounds (163,191 samples, 0.18%)</title><rect x="60.0888%" y="133" width="0.1816%" height="15" fill="rgb(215,21,27)"/><text x="60.3388%" y="143.50"></text></g><g><title>param_env (156,771 samples, 0.17%)</title><rect x="60.2704%" y="133" width="0.1745%" height="15" fill="rgb(232,23,21)"/><text x="60.5204%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,812,517 samples, 2.02%)</title><rect x="58.6312%" y="149" width="2.0172%" height="15" fill="rgb(244,5,23)"/><text x="58.8812%" y="159.50">c..</text></g><g><title>region_scope_tree (159,903 samples, 0.18%)</title><rect x="60.4704%" y="133" width="0.1780%" height="15" fill="rgb(226,81,46)"/><text x="60.7204%" y="143.50"></text></g><g><title>evaluate_obligation (123,971 samples, 0.14%)</title><rect x="61.5679%" y="133" width="0.1380%" height="15" fill="rgb(247,70,30)"/><text x="61.8179%" y="143.50"></text></g><g><title>implied_outlives_bounds (99,613 samples, 0.11%)</title><rect x="61.7100%" y="133" width="0.1109%" height="15" fill="rgb(212,68,19)"/><text x="61.9600%" y="143.50"></text></g><g><title>param_env (258,842 samples, 0.29%)</title><rect x="61.8216%" y="133" width="0.2881%" height="15" fill="rgb(240,187,13)"/><text x="62.0716%" y="143.50"></text></g><g><title>trait_impls_of (257,073 samples, 0.29%)</title><rect x="62.1629%" y="133" width="0.2861%" height="15" fill="rgb(223,113,26)"/><text x="62.4129%" y="143.50"></text></g><g><title>analysis (50,449,333 samples, 56.15%)</title><rect x="6.3678%" y="197" width="56.1454%" height="15" fill="rgb(206,192,2)"/><text x="6.6178%" y="207.50">analysis</text></g><g><title>type_check_crate (26,470,769 samples, 29.46%)</title><rect x="33.0537%" y="181" width="29.4595%" height="15" fill="rgb(241,108,4)"/><text x="33.3037%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,570,817 samples, 3.97%)</title><rect x="58.5392%" y="165" width="3.9740%" height="15" fill="rgb(247,173,49)"/><text x="58.7892%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (1,675,608 samples, 1.86%)</title><rect x="60.6484%" y="149" width="1.8648%" height="15" fill="rgb(224,114,35)"/><text x="60.8984%" y="159.50">c..</text></g><g><title>codegen_module (459,734 samples, 0.51%)</title><rect x="63.0131%" y="181" width="0.5116%" height="15" fill="rgb(245,159,27)"/><text x="63.2631%" y="191.50"></text></g><g><title>codegen_crate (1,009,191 samples, 1.12%)</title><rect x="62.5207%" y="197" width="1.1231%" height="15" fill="rgb(245,172,44)"/><text x="62.7707%" y="207.50"></text></g><g><title>LLVM_module_codegen (4,770,689 samples, 5.31%)</title><rect x="63.6631%" y="181" width="5.3093%" height="15" fill="rgb(236,23,11)"/><text x="63.9131%" y="191.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (4,634,967 samples, 5.16%)</title><rect x="63.8142%" y="165" width="5.1583%" height="15" fill="rgb(205,117,38)"/><text x="64.0642%" y="175.50">LLVM_m..</text></g><g><title>codegen_module_optimize (5,150,943 samples, 5.73%)</title><rect x="63.6438%" y="197" width="5.7325%" height="15" fill="rgb(237,72,25)"/><text x="63.8938%" y="207.50">codegen..</text></g><g><title>LLVM_module_optimize (362,944 samples, 0.40%)</title><rect x="68.9724%" y="181" width="0.4039%" height="15" fill="rgb(244,70,9)"/><text x="69.2224%" y="191.50"></text></g><g><title>metadata_load_macro (120,391 samples, 0.13%)</title><rect x="76.5101%" y="149" width="0.1340%" height="15" fill="rgb(217,125,39)"/><text x="76.7601%" y="159.50"></text></g><g><title>macro_expand_crate (7,863,229 samples, 8.75%)</title><rect x="69.7175%" y="181" width="8.7510%" height="15" fill="rgb(235,36,10)"/><text x="69.9675%" y="191.50">macro_expand..</text></g><g><title>expand_crate (7,849,009 samples, 8.74%)</title><rect x="69.7333%" y="165" width="8.7352%" height="15" fill="rgb(251,123,47)"/><text x="69.9833%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,639,308 samples, 1.82%)</title><rect x="76.6441%" y="149" width="1.8244%" height="15" fill="rgb(221,13,13)"/><text x="76.8941%" y="159.50">m..</text></g><g><title>metadata_register_crate (740,370 samples, 0.82%)</title><rect x="77.6445%" y="133" width="0.8240%" height="15" fill="rgb(238,131,9)"/><text x="77.8945%" y="143.50"></text></g><g><title>metadata_register_crate (224,454 samples, 0.25%)</title><rect x="78.2187%" y="117" width="0.2498%" height="15" fill="rgb(211,50,8)"/><text x="78.4687%" y="127.50"></text></g><g><title>metadata_register_crate (100,741 samples, 0.11%)</title><rect x="78.3564%" y="101" width="0.1121%" height="15" fill="rgb(245,182,24)"/><text x="78.6064%" y="111.50"></text></g><g><title>finalize_imports (141,292 samples, 0.16%)</title><rect x="78.5678%" y="165" width="0.1572%" height="15" fill="rgb(242,14,37)"/><text x="78.8178%" y="175.50"></text></g><g><title>late_resolve_crate (856,159 samples, 0.95%)</title><rect x="78.7473%" y="165" width="0.9528%" height="15" fill="rgb(246,228,12)"/><text x="78.9973%" y="175.50"></text></g><g><title>configure_and_expand (9,324,604 samples, 10.38%)</title><rect x="69.3764%" y="197" width="10.3774%" height="15" fill="rgb(213,55,15)"/><text x="69.6264%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (1,069,731 samples, 1.19%)</title><rect x="78.5633%" y="181" width="1.1905%" height="15" fill="rgb(209,9,3)"/><text x="78.8133%" y="191.50"></text></g><g><title>early_lint_checks (148,271 samples, 0.17%)</title><rect x="79.8582%" y="197" width="0.1650%" height="15" fill="rgb(230,59,30)"/><text x="80.1082%" y="207.50"></text></g><g><title>free_global_ctxt (3,235,303 samples, 3.60%)</title><rect x="80.0232%" y="197" width="3.6006%" height="15" fill="rgb(209,121,21)"/><text x="80.2732%" y="207.50">free..</text></g><g><title>collect_and_partition_mono_items (179,252 samples, 0.20%)</title><rect x="84.9788%" y="165" width="0.1995%" height="15" fill="rgb(220,109,13)"/><text x="85.2288%" y="175.50"></text></g><g><title>exported_symbols (260,123 samples, 0.29%)</title><rect x="84.9618%" y="181" width="0.2895%" height="15" fill="rgb(232,18,1)"/><text x="85.2118%" y="191.50"></text></g><g><title>layout_of (181,912 samples, 0.20%)</title><rect x="87.5689%" y="133" width="0.2025%" height="15" fill="rgb(215,41,42)"/><text x="87.8189%" y="143.50"></text></g><g><title>layout_of (344,894 samples, 0.38%)</title><rect x="87.4123%" y="149" width="0.3838%" height="15" fill="rgb(224,123,36)"/><text x="87.6623%" y="159.50"></text></g><g><title>layout_of (766,567 samples, 0.85%)</title><rect x="86.9738%" y="165" width="0.8531%" height="15" fill="rgb(240,125,3)"/><text x="87.2238%" y="175.50"></text></g><g><title>needs_drop_raw (105,822 samples, 0.12%)</title><rect x="89.8171%" y="149" width="0.1178%" height="15" fill="rgb(205,98,50)"/><text x="90.0671%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,911,330 samples, 2.13%)</title><rect x="87.8269%" y="165" width="2.1271%" height="15" fill="rgb(205,185,37)"/><text x="88.0769%" y="175.50">m..</text></g><g><title>codegen_fulfill_obligation (100,312 samples, 0.11%)</title><rect x="90.0097%" y="149" width="0.1116%" height="15" fill="rgb(238,207,15)"/><text x="90.2597%" y="159.50"></text></g><g><title>impl_parent (574,330 samples, 0.64%)</title><rect x="91.3260%" y="133" width="0.6392%" height="15" fill="rgb(213,199,42)"/><text x="91.5760%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (331,180 samples, 0.37%)</title><rect x="91.5966%" y="117" width="0.3686%" height="15" fill="rgb(235,201,11)"/><text x="91.8466%" y="127.50"></text></g><g><title>impl_trait_ref (907,489 samples, 1.01%)</title><rect x="91.9651%" y="133" width="1.0100%" height="15" fill="rgb(207,46,11)"/><text x="92.2151%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (650,496 samples, 0.72%)</title><rect x="92.2511%" y="117" width="0.7239%" height="15" fill="rgb(241,35,35)"/><text x="92.5011%" y="127.50"></text></g><g><title>specialization_graph_of (2,518,585 samples, 2.80%)</title><rect x="90.1736%" y="149" width="2.8029%" height="15" fill="rgb(243,32,47)"/><text x="90.4236%" y="159.50">sp..</text></g><g><title>optimized_mir (6,884,617 samples, 7.66%)</title><rect x="85.3238%" y="181" width="7.6619%" height="15" fill="rgb(247,202,23)"/><text x="85.5738%" y="191.50">optimized_..</text></g><g><title>resolve_instance (2,712,439 samples, 3.02%)</title><rect x="89.9670%" y="165" width="3.0187%" height="15" fill="rgb(219,102,11)"/><text x="90.2170%" y="175.50">res..</text></g><g><title>promoted_mir (243,754 samples, 0.27%)</title><rect x="92.9857%" y="181" width="0.2713%" height="15" fill="rgb(243,110,44)"/><text x="93.2357%" y="191.50"></text></g><g><title>generate_crate_metadata (8,671,548 samples, 9.65%)</title><rect x="83.6238%" y="197" width="9.6506%" height="15" fill="rgb(222,74,54)"/><text x="83.8738%" y="207.50">generate_crate..</text></g><g><title>hir_lowering (1,363,644 samples, 1.52%)</title><rect x="93.2744%" y="197" width="1.5176%" height="15" fill="rgb(216,99,12)"/><text x="93.5244%" y="207.50"></text></g><g><title>finish_ongoing_codegen (1,706,708 samples, 1.90%)</title><rect x="94.8056%" y="181" width="1.8994%" height="15" fill="rgb(226,22,26)"/><text x="95.0556%" y="191.50">f..</text></g><g><title>link_crate (666,437 samples, 0.74%)</title><rect x="96.7051%" y="181" width="0.7417%" height="15" fill="rgb(217,163,10)"/><text x="96.9551%" y="191.50"></text></g><g><title>link_binary (642,877 samples, 0.72%)</title><rect x="96.7313%" y="165" width="0.7155%" height="15" fill="rgb(213,25,53)"/><text x="96.9813%" y="175.50"></text></g><g><title>link_rlib (421,724 samples, 0.47%)</title><rect x="96.9774%" y="149" width="0.4693%" height="15" fill="rgb(252,105,26)"/><text x="97.2274%" y="159.50"></text></g><g><title>link (2,392,935 samples, 2.66%)</title><rect x="94.7920%" y="197" width="2.6631%" height="15" fill="rgb(220,39,43)"/><text x="95.0420%" y="207.50">li..</text></g><g><title>parse_crate (1,209,252 samples, 1.35%)</title><rect x="97.4551%" y="197" width="1.3458%" height="15" fill="rgb(229,68,48)"/><text x="97.7051%" y="207.50"></text></g><g><title>prepare_outputs (177,042 samples, 0.20%)</title><rect x="98.8073%" y="197" width="0.1970%" height="15" fill="rgb(252,8,32)"/><text x="99.0573%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (524,815 samples, 0.58%)</title><rect x="99.0043%" y="197" width="0.5841%" height="15" fill="rgb(223,20,43)"/><text x="99.2543%" y="207.50"></text></g><g><title>all (89,854,833 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (89,854,833 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (281,222 samples, 0.31%)</title><rect x="99.6870%" y="197" width="0.3130%" height="15" fill="rgb(249,185,26)"/><text x="99.9370%" y="207.50"></text></g></svg></svg>