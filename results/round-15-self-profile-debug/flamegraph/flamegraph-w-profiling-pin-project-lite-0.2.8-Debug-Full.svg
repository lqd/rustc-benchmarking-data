<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,036,871 samples, 4.77%)</title><rect x="2.1102%" y="181" width="4.7657%" height="15" fill="rgb(227,0,7)"/><text x="2.3602%" y="191.50">LLVM_p..</text></g><g><title>is_copy_raw (67,160 samples, 0.16%)</title><rect x="9.8895%" y="69" width="0.1571%" height="15" fill="rgb(217,0,24)"/><text x="10.1395%" y="79.50"></text></g><g><title>evaluate_obligation (60,570 samples, 0.14%)</title><rect x="9.9049%" y="53" width="0.1417%" height="15" fill="rgb(221,193,54)"/><text x="10.1549%" y="63.50"></text></g><g><title>needs_drop_raw (69,701 samples, 0.16%)</title><rect x="10.0466%" y="69" width="0.1631%" height="15" fill="rgb(248,212,6)"/><text x="10.2966%" y="79.50"></text></g><g><title>is_copy_raw (67,291 samples, 0.16%)</title><rect x="10.0523%" y="53" width="0.1574%" height="15" fill="rgb(208,68,35)"/><text x="10.3023%" y="63.50"></text></g><g><title>evaluate_obligation (62,931 samples, 0.15%)</title><rect x="10.0625%" y="37" width="0.1472%" height="15" fill="rgb(232,128,0)"/><text x="10.3125%" y="47.50"></text></g><g><title>specialization_graph_of (47,010 samples, 0.11%)</title><rect x="10.3462%" y="53" width="0.1100%" height="15" fill="rgb(207,160,47)"/><text x="10.5962%" y="63.50"></text></g><g><title>resolve_instance (110,621 samples, 0.26%)</title><rect x="10.2097%" y="69" width="0.2588%" height="15" fill="rgb(228,23,34)"/><text x="10.4597%" y="79.50"></text></g><g><title>mir_const (645,016 samples, 1.51%)</title><rect x="9.0419%" y="117" width="1.5092%" height="15" fill="rgb(218,30,26)"/><text x="9.2919%" y="127.50"></text></g><g><title>unsafety_check_result (508,326 samples, 1.19%)</title><rect x="9.3617%" y="101" width="1.1893%" height="15" fill="rgb(220,122,19)"/><text x="9.6117%" y="111.50"></text></g><g><title>mir_built (430,273 samples, 1.01%)</title><rect x="9.5443%" y="85" width="1.0067%" height="15" fill="rgb(250,228,42)"/><text x="9.7943%" y="95.50"></text></g><g><title>mir_promoted (742,157 samples, 1.74%)</title><rect x="8.8302%" y="133" width="1.7364%" height="15" fill="rgb(240,193,28)"/><text x="9.0802%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,545,035 samples, 3.61%)</title><rect x="7.2460%" y="165" width="3.6149%" height="15" fill="rgb(216,20,37)"/><text x="7.4960%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (1,537,565 samples, 3.60%)</title><rect x="7.2635%" y="149" width="3.5975%" height="15" fill="rgb(206,188,39)"/><text x="7.5135%" y="159.50">mir_..</text></g><g><title>type_op_prove_predicate (72,500 samples, 0.17%)</title><rect x="10.6913%" y="133" width="0.1696%" height="15" fill="rgb(217,207,13)"/><text x="10.9413%" y="143.50"></text></g><g><title>hir_module_items (137,572 samples, 0.32%)</title><rect x="10.8719%" y="165" width="0.3219%" height="15" fill="rgb(231,73,38)"/><text x="11.1219%" y="175.50"></text></g><g><title>get_lang_items (53,961 samples, 0.13%)</title><rect x="11.7286%" y="117" width="0.1263%" height="15" fill="rgb(225,20,46)"/><text x="11.9786%" y="127.50"></text></g><g><title>associated_item (44,601 samples, 0.10%)</title><rect x="11.9266%" y="101" width="0.1044%" height="15" fill="rgb(210,31,41)"/><text x="12.1766%" y="111.50"></text></g><g><title>should_inherit_track_caller (118,382 samples, 0.28%)</title><rect x="11.8549%" y="117" width="0.2770%" height="15" fill="rgb(221,200,47)"/><text x="12.1049%" y="127.50"></text></g><g><title>codegen_fn_attrs (273,093 samples, 0.64%)</title><rect x="11.5785%" y="133" width="0.6390%" height="15" fill="rgb(226,26,5)"/><text x="11.8285%" y="143.50"></text></g><g><title>check_mod_attrs (408,224 samples, 0.96%)</title><rect x="11.2631%" y="149" width="0.9551%" height="15" fill="rgb(249,33,26)"/><text x="11.5131%" y="159.50"></text></g><g><title>lookup_deprecation_entry (61,420 samples, 0.14%)</title><rect x="12.5130%" y="133" width="0.1437%" height="15" fill="rgb(235,183,28)"/><text x="12.7630%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (167,342 samples, 0.39%)</title><rect x="12.3706%" y="149" width="0.3915%" height="15" fill="rgb(221,5,38)"/><text x="12.6206%" y="159.50"></text></g><g><title>misc_checking_1 (722,137 samples, 1.69%)</title><rect x="11.1946%" y="165" width="1.6896%" height="15" fill="rgb(247,18,42)"/><text x="11.4446%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (56,031 samples, 0.13%)</title><rect x="12.8869%" y="149" width="0.1311%" height="15" fill="rgb(241,131,45)"/><text x="13.1369%" y="159.50"></text></g><g><title>check_mod_liveness (44,011 samples, 0.10%)</title><rect x="12.9150%" y="133" width="0.1030%" height="15" fill="rgb(249,31,29)"/><text x="13.1650%" y="143.50"></text></g><g><title>misc_checking_2 (129,782 samples, 0.30%)</title><rect x="12.8842%" y="165" width="0.3037%" height="15" fill="rgb(225,111,53)"/><text x="13.1342%" y="175.50"></text></g><g><title>match_checking (72,601 samples, 0.17%)</title><rect x="13.0180%" y="149" width="0.1699%" height="15" fill="rgb(238,160,17)"/><text x="13.2680%" y="159.50"></text></g><g><title>check_match (69,471 samples, 0.16%)</title><rect x="13.0253%" y="133" width="0.1625%" height="15" fill="rgb(214,148,48)"/><text x="13.2753%" y="143.50"></text></g><g><title>death_checking (135,012 samples, 0.32%)</title><rect x="13.2964%" y="149" width="0.3159%" height="15" fill="rgb(232,36,49)"/><text x="13.5464%" y="159.50"></text></g><g><title>lint_levels (53,991 samples, 0.13%)</title><rect x="13.4860%" y="133" width="0.1263%" height="15" fill="rgb(209,103,24)"/><text x="13.7360%" y="143.50"></text></g><g><title>param_env (74,551 samples, 0.17%)</title><rect x="14.6054%" y="117" width="0.1744%" height="15" fill="rgb(229,88,8)"/><text x="14.8554%" y="127.50"></text></g><g><title>trait_impls_of (62,000 samples, 0.15%)</title><rect x="14.7798%" y="117" width="0.1451%" height="15" fill="rgb(213,181,19)"/><text x="15.0298%" y="127.50"></text></g><g><title>crate_lints (1,447,964 samples, 3.39%)</title><rect x="13.6157%" y="133" width="3.3878%" height="15" fill="rgb(254,191,54)"/><text x="13.8657%" y="143.50">cra..</text></g><g><title>type_of (888,391 samples, 2.08%)</title><rect x="14.9249%" y="117" width="2.0786%" height="15" fill="rgb(241,83,37)"/><text x="15.1749%" y="127.50">t..</text></g><g><title>metadata_decode_entry_type_of (806,760 samples, 1.89%)</title><rect x="15.1159%" y="101" width="1.8876%" height="15" fill="rgb(233,36,39)"/><text x="15.3659%" y="111.50">m..</text></g><g><title>lint_checking (1,485,235 samples, 3.48%)</title><rect x="13.6123%" y="149" width="3.4750%" height="15" fill="rgb(226,3,54)"/><text x="13.8623%" y="159.50">lin..</text></g><g><title>privacy_access_levels (46,921 samples, 0.11%)</title><rect x="17.0873%" y="149" width="0.1098%" height="15" fill="rgb(245,192,40)"/><text x="17.3373%" y="159.50"></text></g><g><title>privacy_checking_modules (78,250 samples, 0.18%)</title><rect x="17.1971%" y="149" width="0.1831%" height="15" fill="rgb(238,167,29)"/><text x="17.4471%" y="159.50"></text></g><g><title>check_mod_privacy (77,050 samples, 0.18%)</title><rect x="17.1999%" y="133" width="0.1803%" height="15" fill="rgb(232,182,51)"/><text x="17.4499%" y="143.50"></text></g><g><title>misc_checking_3 (1,800,678 samples, 4.21%)</title><rect x="13.1879%" y="165" width="4.2131%" height="15" fill="rgb(231,60,39)"/><text x="13.4379%" y="175.50">misc_..</text></g><g><title>impl_trait_ref (115,310 samples, 0.27%)</title><rect x="17.7964%" y="101" width="0.2698%" height="15" fill="rgb(208,69,12)"/><text x="18.0464%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (107,880 samples, 0.25%)</title><rect x="17.8138%" y="85" width="0.2524%" height="15" fill="rgb(235,93,37)"/><text x="18.0638%" y="95.50"></text></g><g><title>coherent_trait (284,723 samples, 0.67%)</title><rect x="17.4809%" y="133" width="0.6662%" height="15" fill="rgb(213,116,39)"/><text x="17.7309%" y="143.50"></text></g><g><title>specialization_graph_of (276,143 samples, 0.65%)</title><rect x="17.5010%" y="117" width="0.6461%" height="15" fill="rgb(222,207,29)"/><text x="17.7510%" y="127.50"></text></g><g><title>coherence_checking (342,794 samples, 0.80%)</title><rect x="17.4464%" y="149" width="0.8020%" height="15" fill="rgb(206,96,30)"/><text x="17.6964%" y="159.50"></text></g><g><title>adt_sized_constraint (51,620 samples, 0.12%)</title><rect x="20.6825%" y="101" width="0.1208%" height="15" fill="rgb(218,138,4)"/><text x="20.9325%" y="111.50"></text></g><g><title>adt_sized_constraint (45,540 samples, 0.11%)</title><rect x="20.6967%" y="85" width="0.1066%" height="15" fill="rgb(250,191,14)"/><text x="20.9467%" y="95.50"></text></g><g><title>dropck_outlives (45,220 samples, 0.11%)</title><rect x="20.8697%" y="101" width="0.1058%" height="15" fill="rgb(239,60,40)"/><text x="21.1197%" y="111.50"></text></g><g><title>evaluate_obligation (54,861 samples, 0.13%)</title><rect x="20.9755%" y="101" width="0.1284%" height="15" fill="rgb(206,27,48)"/><text x="21.2255%" y="111.50"></text></g><g><title>item_attrs (68,472 samples, 0.16%)</title><rect x="21.2368%" y="101" width="0.1602%" height="15" fill="rgb(225,35,8)"/><text x="21.4868%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (66,062 samples, 0.15%)</title><rect x="21.2425%" y="85" width="0.1546%" height="15" fill="rgb(250,213,24)"/><text x="21.4925%" y="95.50"></text></g><g><title>predicates_of (47,720 samples, 0.11%)</title><rect x="21.4241%" y="101" width="0.1117%" height="15" fill="rgb(247,123,22)"/><text x="21.6741%" y="111.50"></text></g><g><title>item_bodies_checking (1,414,774 samples, 3.31%)</title><rect x="18.2976%" y="149" width="3.3102%" height="15" fill="rgb(231,138,38)"/><text x="18.5476%" y="159.50">ite..</text></g><g><title>typeck_item_bodies (1,413,024 samples, 3.31%)</title><rect x="18.3017%" y="133" width="3.3061%" height="15" fill="rgb(231,145,46)"/><text x="18.5517%" y="143.50">typ..</text></g><g><title>typeck (1,403,874 samples, 3.28%)</title><rect x="18.3231%" y="117" width="3.2847%" height="15" fill="rgb(251,118,11)"/><text x="18.5731%" y="127.50">typ..</text></g><g><title>item_types_checking (218,862 samples, 0.51%)</title><rect x="21.6077%" y="149" width="0.5121%" height="15" fill="rgb(217,147,25)"/><text x="21.8577%" y="159.50"></text></g><g><title>check_mod_item_types (215,552 samples, 0.50%)</title><rect x="21.6155%" y="133" width="0.5043%" height="15" fill="rgb(247,81,37)"/><text x="21.8655%" y="143.50"></text></g><g><title>fn_sig (85,592 samples, 0.20%)</title><rect x="22.3565%" y="117" width="0.2003%" height="15" fill="rgb(209,12,38)"/><text x="22.6065%" y="127.50"></text></g><g><title>late_bound_vars_map (58,161 samples, 0.14%)</title><rect x="22.4207%" y="101" width="0.1361%" height="15" fill="rgb(227,1,9)"/><text x="22.6707%" y="111.50"></text></g><g><title>resolve_lifetimes (50,531 samples, 0.12%)</title><rect x="22.4386%" y="85" width="0.1182%" height="15" fill="rgb(248,47,43)"/><text x="22.6886%" y="95.50"></text></g><g><title>generics_of (86,252 samples, 0.20%)</title><rect x="22.5568%" y="117" width="0.2018%" height="15" fill="rgb(221,10,30)"/><text x="22.8068%" y="127.50"></text></g><g><title>explicit_predicates_of (100,201 samples, 0.23%)</title><rect x="22.8951%" y="85" width="0.2344%" height="15" fill="rgb(210,229,1)"/><text x="23.1451%" y="95.50"></text></g><g><title>predicates_of (303,233 samples, 0.71%)</title><rect x="22.8093%" y="117" width="0.7095%" height="15" fill="rgb(222,148,37)"/><text x="23.0593%" y="127.50"></text></g><g><title>predicates_defined_on (290,243 samples, 0.68%)</title><rect x="22.8397%" y="101" width="0.6791%" height="15" fill="rgb(234,67,33)"/><text x="23.0897%" y="111.50"></text></g><g><title>inferred_outlives_of (166,382 samples, 0.39%)</title><rect x="23.1295%" y="85" width="0.3893%" height="15" fill="rgb(247,98,35)"/><text x="23.3795%" y="95.50"></text></g><g><title>inferred_outlives_crate (152,092 samples, 0.36%)</title><rect x="23.1630%" y="69" width="0.3559%" height="15" fill="rgb(247,138,52)"/><text x="23.4130%" y="79.50"></text></g><g><title>type_of (70,721 samples, 0.17%)</title><rect x="23.3533%" y="53" width="0.1655%" height="15" fill="rgb(213,79,30)"/><text x="23.6033%" y="63.50"></text></g><g><title>type_collecting (663,197 samples, 1.55%)</title><rect x="22.1219%" y="149" width="1.5517%" height="15" fill="rgb(246,177,23)"/><text x="22.3719%" y="159.50"></text></g><g><title>collect_mod_item_types (648,117 samples, 1.52%)</title><rect x="22.1572%" y="133" width="1.5164%" height="15" fill="rgb(230,62,27)"/><text x="22.4072%" y="143.50"></text></g><g><title>type_of (66,150 samples, 0.15%)</title><rect x="23.5188%" y="117" width="0.1548%" height="15" fill="rgb(216,154,8)"/><text x="23.7688%" y="127.50"></text></g><g><title>evaluate_obligation (133,081 samples, 0.31%)</title><rect x="24.2827%" y="117" width="0.3114%" height="15" fill="rgb(244,35,45)"/><text x="24.5327%" y="127.50"></text></g><g><title>implied_outlives_bounds (50,902 samples, 0.12%)</title><rect x="24.5940%" y="117" width="0.1191%" height="15" fill="rgb(251,115,12)"/><text x="24.8440%" y="127.50"></text></g><g><title>check_impl_item_well_formed (465,697 samples, 1.09%)</title><rect x="23.7658%" y="133" width="1.0896%" height="15" fill="rgb(240,54,50)"/><text x="24.0158%" y="143.50"></text></g><g><title>implied_outlives_bounds (77,210 samples, 0.18%)</title><rect x="26.0901%" y="117" width="0.1806%" height="15" fill="rgb(233,84,52)"/><text x="26.3401%" y="127.50"></text></g><g><title>param_env (179,022 samples, 0.42%)</title><rect x="26.2707%" y="117" width="0.4189%" height="15" fill="rgb(207,117,47)"/><text x="26.5207%" y="127.50"></text></g><g><title>analysis (8,570,796 samples, 20.05%)</title><rect x="6.8759%" y="181" width="20.0532%" height="15" fill="rgb(249,43,39)"/><text x="7.1259%" y="191.50">analysis</text></g><g><title>type_check_crate (4,072,351 samples, 9.53%)</title><rect x="17.4010%" y="165" width="9.5281%" height="15" fill="rgb(209,38,44)"/><text x="17.6510%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (1,390,954 samples, 3.25%)</title><rect x="23.6747%" y="149" width="3.2544%" height="15" fill="rgb(236,212,23)"/><text x="23.9247%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (886,317 samples, 2.07%)</title><rect x="24.8554%" y="133" width="2.0737%" height="15" fill="rgb(242,79,21)"/><text x="25.1054%" y="143.50">c..</text></g><g><title>variances_of (63,701 samples, 0.15%)</title><rect x="26.7800%" y="117" width="0.1490%" height="15" fill="rgb(211,96,35)"/><text x="27.0300%" y="127.50"></text></g><g><title>crate_variances (59,331 samples, 0.14%)</title><rect x="26.7903%" y="101" width="0.1388%" height="15" fill="rgb(253,215,40)"/><text x="27.0403%" y="111.50"></text></g><g><title>codegen_module (288,753 samples, 0.68%)</title><rect x="27.8690%" y="165" width="0.6756%" height="15" fill="rgb(211,81,21)"/><text x="28.1190%" y="175.50"></text></g><g><title>codegen_crate (692,647 samples, 1.62%)</title><rect x="26.9563%" y="181" width="1.6206%" height="15" fill="rgb(208,190,38)"/><text x="27.2063%" y="191.50"></text></g><g><title>LLVM_module_codegen (1,562,006 samples, 3.65%)</title><rect x="28.6398%" y="165" width="3.6546%" height="15" fill="rgb(235,213,38)"/><text x="28.8898%" y="175.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (1,500,475 samples, 3.51%)</title><rect x="28.7837%" y="149" width="3.5107%" height="15" fill="rgb(237,122,38)"/><text x="29.0337%" y="159.50">LLV..</text></g><g><title>codegen_module_optimize (1,846,689 samples, 4.32%)</title><rect x="28.5769%" y="181" width="4.3207%" height="15" fill="rgb(244,218,35)"/><text x="28.8269%" y="191.50">codeg..</text></g><g><title>LLVM_module_optimize (257,793 samples, 0.60%)</title><rect x="32.2944%" y="165" width="0.6032%" height="15" fill="rgb(240,68,47)"/><text x="32.5444%" y="175.50"></text></g><g><title>AST_validation (192,032 samples, 0.45%)</title><rect x="33.4106%" y="165" width="0.4493%" height="15" fill="rgb(210,16,53)"/><text x="33.6606%" y="175.50"></text></g><g><title>crate_injection (116,011 samples, 0.27%)</title><rect x="33.9556%" y="165" width="0.2714%" height="15" fill="rgb(235,124,12)"/><text x="34.2056%" y="175.50"></text></g><g><title>metadata_load_macro (43,260 samples, 0.10%)</title><rect x="58.6491%" y="133" width="0.1012%" height="15" fill="rgb(224,169,11)"/><text x="58.8991%" y="143.50"></text></g><g><title>macro_expand_crate (10,685,918 samples, 25.00%)</title><rect x="34.2270%" y="165" width="25.0020%" height="15" fill="rgb(250,166,2)"/><text x="34.4770%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (10,660,678 samples, 24.94%)</title><rect x="34.2861%" y="149" width="24.9429%" height="15" fill="rgb(242,216,29)"/><text x="34.5361%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (204,592 samples, 0.48%)</title><rect x="58.7503%" y="133" width="0.4787%" height="15" fill="rgb(230,116,27)"/><text x="59.0003%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (507,795 samples, 1.19%)</title><rect x="59.2398%" y="165" width="1.1881%" height="15" fill="rgb(228,99,48)"/><text x="59.4898%" y="175.50"></text></g><g><title>finalize_imports (198,122 samples, 0.46%)</title><rect x="60.4486%" y="149" width="0.4635%" height="15" fill="rgb(253,11,6)"/><text x="60.6986%" y="159.50"></text></g><g><title>late_resolve_crate (862,779 samples, 2.02%)</title><rect x="60.9651%" y="149" width="2.0187%" height="15" fill="rgb(247,143,39)"/><text x="61.2151%" y="159.50">l..</text></g><g><title>configure_and_expand (12,930,672 samples, 30.25%)</title><rect x="32.8976%" y="181" width="30.2541%" height="15" fill="rgb(236,97,10)"/><text x="33.1476%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,164,131 samples, 2.72%)</title><rect x="60.4279%" y="165" width="2.7237%" height="15" fill="rgb(233,208,19)"/><text x="60.6779%" y="175.50">re..</text></g><g><title>drop_ast (55,191 samples, 0.13%)</title><rect x="63.1516%" y="181" width="0.1291%" height="15" fill="rgb(216,164,2)"/><text x="63.4016%" y="191.50"></text></g><g><title>early_lint_checks (233,442 samples, 0.55%)</title><rect x="63.3191%" y="181" width="0.5462%" height="15" fill="rgb(220,129,5)"/><text x="63.5691%" y="191.50"></text></g><g><title>free_global_ctxt (1,297,833 samples, 3.04%)</title><rect x="63.8653%" y="181" width="3.0366%" height="15" fill="rgb(242,17,10)"/><text x="64.1153%" y="191.50">fre..</text></g><g><title>crate_hash (60,121 samples, 0.14%)</title><rect x="68.6952%" y="165" width="0.1407%" height="15" fill="rgb(242,107,0)"/><text x="68.9452%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (50,081 samples, 0.12%)</title><rect x="68.9001%" y="149" width="0.1172%" height="15" fill="rgb(251,28,31)"/><text x="69.1501%" y="159.50"></text></g><g><title>exported_symbols (86,381 samples, 0.20%)</title><rect x="68.8671%" y="165" width="0.2021%" height="15" fill="rgb(233,223,10)"/><text x="69.1171%" y="175.50"></text></g><g><title>layout_of (61,750 samples, 0.14%)</title><rect x="69.6842%" y="149" width="0.1445%" height="15" fill="rgb(215,21,27)"/><text x="69.9342%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (226,513 samples, 0.53%)</title><rect x="69.8287%" y="149" width="0.5300%" height="15" fill="rgb(232,23,21)"/><text x="70.0787%" y="159.50"></text></g><g><title>optimized_mir (528,686 samples, 1.24%)</title><rect x="69.1470%" y="165" width="1.2370%" height="15" fill="rgb(244,5,23)"/><text x="69.3970%" y="175.50"></text></g><g><title>generate_crate_metadata (1,502,315 samples, 3.51%)</title><rect x="66.9018%" y="181" width="3.5150%" height="15" fill="rgb(226,81,46)"/><text x="67.1518%" y="191.50">gen..</text></g><g><title>hir_lowering (4,637,237 samples, 10.85%)</title><rect x="70.4168%" y="181" width="10.8498%" height="15" fill="rgb(247,70,30)"/><text x="70.6668%" y="191.50">hir_lowering</text></g><g><title>finish_ongoing_codegen (470,425 samples, 1.10%)</title><rect x="81.3055%" y="165" width="1.1007%" height="15" fill="rgb(212,68,19)"/><text x="81.5555%" y="175.50"></text></g><g><title>link_crate (709,897 samples, 1.66%)</title><rect x="82.4062%" y="165" width="1.6610%" height="15" fill="rgb(240,187,13)"/><text x="82.6562%" y="175.50"></text></g><g><title>link_binary (688,447 samples, 1.61%)</title><rect x="82.4564%" y="149" width="1.6108%" height="15" fill="rgb(223,113,26)"/><text x="82.7064%" y="159.50"></text></g><g><title>link_rlib (483,515 samples, 1.13%)</title><rect x="82.9359%" y="133" width="1.1313%" height="15" fill="rgb(206,192,2)"/><text x="83.1859%" y="143.50"></text></g><g><title>link (1,202,673 samples, 2.81%)</title><rect x="81.2666%" y="181" width="2.8139%" height="15" fill="rgb(241,108,4)"/><text x="81.5166%" y="191.50">li..</text></g><g><title>parse_crate (5,621,937 samples, 13.15%)</title><rect x="84.0805%" y="181" width="13.1537%" height="15" fill="rgb(247,173,49)"/><text x="84.3305%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (365,484 samples, 0.86%)</title><rect x="97.2582%" y="181" width="0.8551%" height="15" fill="rgb(224,114,35)"/><text x="97.5082%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (322,103 samples, 0.75%)</title><rect x="98.1134%" y="181" width="0.7536%" height="15" fill="rgb(245,159,27)"/><text x="98.3634%" y="191.50"></text></g><g><title>setup_global_ctxt (155,972 samples, 0.36%)</title><rect x="98.8806%" y="181" width="0.3649%" height="15" fill="rgb(245,172,44)"/><text x="99.1306%" y="191.50"></text></g><g><title>all (42,740,285 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (42,740,285 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (322,453 samples, 0.75%)</title><rect x="99.2456%" y="181" width="0.7544%" height="15" fill="rgb(237,72,25)"/><text x="99.4956%" y="191.50"></text></g></svg></svg>