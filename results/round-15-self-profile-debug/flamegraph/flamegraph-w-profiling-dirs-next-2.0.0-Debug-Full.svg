<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (27,485,527 samples, 16.96%)</title><rect x="0.4436%" y="229" width="16.9647%" height="15" fill="rgb(227,0,7)"/><text x="0.6936%" y="239.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (172,922 samples, 0.11%)</title><rect x="21.9053%" y="133" width="0.1067%" height="15" fill="rgb(217,0,24)"/><text x="22.1553%" y="143.50"></text></g><g><title>adt_drop_tys (163,892 samples, 0.10%)</title><rect x="22.8664%" y="101" width="0.1012%" height="15" fill="rgb(221,193,54)"/><text x="23.1164%" y="111.50"></text></g><g><title>needs_drop_raw (333,924 samples, 0.21%)</title><rect x="22.8438%" y="117" width="0.2061%" height="15" fill="rgb(248,212,6)"/><text x="23.0938%" y="127.50"></text></g><g><title>thir_body (542,808 samples, 0.34%)</title><rect x="23.1433%" y="117" width="0.3350%" height="15" fill="rgb(208,68,35)"/><text x="23.3933%" y="127.50"></text></g><g><title>mir_const (3,725,187 samples, 2.30%)</title><rect x="21.1977%" y="165" width="2.2993%" height="15" fill="rgb(232,128,0)"/><text x="21.4477%" y="175.50">m..</text></g><g><title>unsafety_check_result (2,877,337 samples, 1.78%)</title><rect x="21.7210%" y="149" width="1.7760%" height="15" fill="rgb(207,160,47)"/><text x="21.9710%" y="159.50">u..</text></g><g><title>mir_built (2,405,802 samples, 1.48%)</title><rect x="22.0121%" y="133" width="1.4849%" height="15" fill="rgb(228,23,34)"/><text x="22.2621%" y="143.50"></text></g><g><title>mir_promoted (4,368,772 samples, 2.70%)</title><rect x="20.8284%" y="181" width="2.6965%" height="15" fill="rgb(218,30,26)"/><text x="21.0784%" y="191.50">mi..</text></g><g><title>MIR_borrow_checking (10,596,907 samples, 6.54%)</title><rect x="17.5294%" y="213" width="6.5407%" height="15" fill="rgb(220,122,19)"/><text x="17.7794%" y="223.50">MIR_borro..</text></g><g><title>mir_borrowck (10,481,355 samples, 6.47%)</title><rect x="17.6007%" y="197" width="6.4693%" height="15" fill="rgb(250,228,42)"/><text x="17.8507%" y="207.50">mir_borr..</text></g><g><title>type_op_prove_predicate (821,389 samples, 0.51%)</title><rect x="23.5631%" y="181" width="0.5070%" height="15" fill="rgb(240,193,28)"/><text x="23.8131%" y="191.50"></text></g><g><title>evaluate_obligation (345,296 samples, 0.21%)</title><rect x="23.8570%" y="165" width="0.2131%" height="15" fill="rgb(216,20,37)"/><text x="24.1070%" y="175.50"></text></g><g><title>codegen_fn_attrs (259,853 samples, 0.16%)</title><rect x="24.2770%" y="181" width="0.1604%" height="15" fill="rgb(206,188,39)"/><text x="24.5270%" y="191.50"></text></g><g><title>check_mod_attrs (399,615 samples, 0.25%)</title><rect x="24.1908%" y="197" width="0.2467%" height="15" fill="rgb(217,207,13)"/><text x="24.4408%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (236,132 samples, 0.15%)</title><rect x="24.5289%" y="197" width="0.1457%" height="15" fill="rgb(231,73,38)"/><text x="24.7789%" y="207.50"></text></g><g><title>misc_checking_1 (880,909 samples, 0.54%)</title><rect x="24.1717%" y="213" width="0.5437%" height="15" fill="rgb(225,20,46)"/><text x="24.4217%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (212,822 samples, 0.13%)</title><rect x="24.7172%" y="197" width="0.1314%" height="15" fill="rgb(210,31,41)"/><text x="24.9672%" y="207.50"></text></g><g><title>check_mod_liveness (164,172 samples, 0.10%)</title><rect x="24.7472%" y="181" width="0.1013%" height="15" fill="rgb(221,200,47)"/><text x="24.9972%" y="191.50"></text></g><g><title>misc_checking_2 (483,545 samples, 0.30%)</title><rect x="24.7154%" y="213" width="0.2985%" height="15" fill="rgb(226,26,5)"/><text x="24.9654%" y="223.50"></text></g><g><title>match_checking (267,893 samples, 0.17%)</title><rect x="24.8486%" y="197" width="0.1653%" height="15" fill="rgb(249,33,26)"/><text x="25.0986%" y="207.50"></text></g><g><title>check_match (234,433 samples, 0.14%)</title><rect x="24.8692%" y="181" width="0.1447%" height="15" fill="rgb(235,183,28)"/><text x="25.1192%" y="191.50"></text></g><g><title>lint_checking (213,222 samples, 0.13%)</title><rect x="25.0872%" y="197" width="0.1316%" height="15" fill="rgb(221,5,38)"/><text x="25.3372%" y="207.50"></text></g><g><title>misc_checking_3 (509,825 samples, 0.31%)</title><rect x="25.0139%" y="213" width="0.3147%" height="15" fill="rgb(247,18,42)"/><text x="25.2639%" y="223.50"></text></g><g><title>impl_parent (166,340 samples, 0.10%)</title><rect x="27.6294%" y="53" width="0.1027%" height="15" fill="rgb(241,131,45)"/><text x="27.8794%" y="63.50"></text></g><g><title>impl_trait_ref (638,658 samples, 0.39%)</title><rect x="27.7321%" y="53" width="0.3942%" height="15" fill="rgb(249,31,29)"/><text x="27.9821%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (587,807 samples, 0.36%)</title><rect x="27.7635%" y="37" width="0.3628%" height="15" fill="rgb(225,111,53)"/><text x="28.0135%" y="47.50"></text></g><g><title>coherent_trait (1,088,391 samples, 0.67%)</title><rect x="27.4936%" y="85" width="0.6718%" height="15" fill="rgb(238,160,17)"/><text x="27.7436%" y="95.50"></text></g><g><title>specialization_graph_of (1,081,861 samples, 0.67%)</title><rect x="27.4976%" y="69" width="0.6678%" height="15" fill="rgb(214,148,48)"/><text x="27.7476%" y="79.50"></text></g><g><title>adt_destructor (1,108,561 samples, 0.68%)</title><rect x="27.4831%" y="117" width="0.6842%" height="15" fill="rgb(232,36,49)"/><text x="27.7331%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,100,241 samples, 0.68%)</title><rect x="27.4882%" y="101" width="0.6791%" height="15" fill="rgb(209,103,24)"/><text x="27.7382%" y="111.50"></text></g><g><title>adt_dtorck_constraint (256,913 samples, 0.16%)</title><rect x="28.1858%" y="69" width="0.1586%" height="15" fill="rgb(229,88,8)"/><text x="28.4358%" y="79.50"></text></g><g><title>adt_dtorck_constraint (290,713 samples, 0.18%)</title><rect x="28.1747%" y="85" width="0.1794%" height="15" fill="rgb(213,181,19)"/><text x="28.4247%" y="95.50"></text></g><g><title>adt_dtorck_constraint (298,503 samples, 0.18%)</title><rect x="28.1707%" y="101" width="0.1842%" height="15" fill="rgb(254,191,54)"/><text x="28.4207%" y="111.50"></text></g><g><title>adt_dtorck_constraint (304,903 samples, 0.19%)</title><rect x="28.1673%" y="117" width="0.1882%" height="15" fill="rgb(241,83,37)"/><text x="28.4173%" y="127.50"></text></g><g><title>dropck_outlives (1,503,785 samples, 0.93%)</title><rect x="27.4310%" y="149" width="0.9282%" height="15" fill="rgb(233,36,39)"/><text x="27.6810%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,467,275 samples, 0.91%)</title><rect x="27.4535%" y="133" width="0.9056%" height="15" fill="rgb(226,3,54)"/><text x="27.7035%" y="143.50"></text></g><g><title>associated_item (285,273 samples, 0.18%)</title><rect x="32.1010%" y="117" width="0.1761%" height="15" fill="rgb(245,192,40)"/><text x="32.3510%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (194,822 samples, 0.12%)</title><rect x="32.1568%" y="101" width="0.1202%" height="15" fill="rgb(238,167,29)"/><text x="32.4068%" y="111.50"></text></g><g><title>associated_items (452,555 samples, 0.28%)</title><rect x="32.0062%" y="133" width="0.2793%" height="15" fill="rgb(232,182,51)"/><text x="32.2562%" y="143.50"></text></g><g><title>evaluate_obligation (446,085 samples, 0.28%)</title><rect x="32.3103%" y="133" width="0.2753%" height="15" fill="rgb(231,60,39)"/><text x="32.5603%" y="143.50"></text></g><g><title>is_copy_raw (873,088 samples, 0.54%)</title><rect x="32.7103%" y="133" width="0.5389%" height="15" fill="rgb(208,69,12)"/><text x="32.9603%" y="143.50"></text></g><g><title>evaluate_obligation (820,537 samples, 0.51%)</title><rect x="32.7427%" y="117" width="0.5065%" height="15" fill="rgb(235,93,37)"/><text x="32.9927%" y="127.50"></text></g><g><title>trait_impls_of (458,075 samples, 0.28%)</title><rect x="32.9664%" y="101" width="0.2827%" height="15" fill="rgb(213,116,39)"/><text x="33.2164%" y="111.50"></text></g><g><title>method_autoderef_steps (214,882 samples, 0.13%)</title><rect x="33.3302%" y="133" width="0.1326%" height="15" fill="rgb(222,207,29)"/><text x="33.5802%" y="143.50"></text></g><g><title>predicates_of (206,093 samples, 0.13%)</title><rect x="33.4715%" y="133" width="0.1272%" height="15" fill="rgb(206,96,30)"/><text x="33.7215%" y="143.50"></text></g><g><title>predicates_defined_on (164,321 samples, 0.10%)</title><rect x="33.4973%" y="117" width="0.1014%" height="15" fill="rgb(218,138,4)"/><text x="33.7473%" y="127.50"></text></g><g><title>typeck (8,301,114 samples, 5.12%)</title><rect x="28.5245%" y="149" width="5.1236%" height="15" fill="rgb(250,191,14)"/><text x="28.7745%" y="159.50">typeck</text></g><g><title>item_bodies_checking (13,398,226 samples, 8.27%)</title><rect x="25.4025%" y="197" width="8.2697%" height="15" fill="rgb(239,60,40)"/><text x="25.6525%" y="207.50">item_bodies_..</text></g><g><title>typeck_item_bodies (13,394,326 samples, 8.27%)</title><rect x="25.4049%" y="181" width="8.2673%" height="15" fill="rgb(206,27,48)"/><text x="25.6549%" y="191.50">typeck_item_..</text></g><g><title>typeck (13,315,804 samples, 8.22%)</title><rect x="25.4534%" y="165" width="8.2188%" height="15" fill="rgb(225,35,8)"/><text x="25.7034%" y="175.50">typeck</text></g><g><title>late_bound_vars_map (260,172 samples, 0.16%)</title><rect x="33.9081%" y="149" width="0.1606%" height="15" fill="rgb(250,213,24)"/><text x="34.1581%" y="159.50"></text></g><g><title>resolve_lifetimes (218,642 samples, 0.13%)</title><rect x="33.9337%" y="133" width="0.1350%" height="15" fill="rgb(247,123,22)"/><text x="34.1837%" y="143.50"></text></g><g><title>fn_sig (483,485 samples, 0.30%)</title><rect x="33.8004%" y="165" width="0.2984%" height="15" fill="rgb(231,138,38)"/><text x="34.0504%" y="175.50"></text></g><g><title>type_collecting (987,380 samples, 0.61%)</title><rect x="33.6783%" y="197" width="0.6094%" height="15" fill="rgb(231,145,46)"/><text x="33.9283%" y="207.50"></text></g><g><title>collect_mod_item_types (974,239 samples, 0.60%)</title><rect x="33.6864%" y="181" width="0.6013%" height="15" fill="rgb(251,118,11)"/><text x="33.9364%" y="191.50"></text></g><g><title>adt_sized_constraint (164,651 samples, 0.10%)</title><rect x="35.0213%" y="117" width="0.1016%" height="15" fill="rgb(217,147,25)"/><text x="35.2713%" y="127.50"></text></g><g><title>adt_sized_constraint (207,902 samples, 0.13%)</title><rect x="35.0006%" y="133" width="0.1283%" height="15" fill="rgb(247,81,37)"/><text x="35.2506%" y="143.50"></text></g><g><title>adt_sized_constraint (277,562 samples, 0.17%)</title><rect x="34.9651%" y="149" width="0.1713%" height="15" fill="rgb(209,12,38)"/><text x="35.2151%" y="159.50"></text></g><g><title>evaluate_obligation (394,344 samples, 0.24%)</title><rect x="34.8940%" y="165" width="0.2434%" height="15" fill="rgb(227,1,9)"/><text x="35.1440%" y="175.50"></text></g><g><title>param_env (426,154 samples, 0.26%)</title><rect x="35.1724%" y="165" width="0.2630%" height="15" fill="rgb(248,47,43)"/><text x="35.4224%" y="175.50"></text></g><g><title>analysis (29,404,746 samples, 18.15%)</title><rect x="17.4083%" y="229" width="18.1493%" height="15" fill="rgb(221,10,30)"/><text x="17.6583%" y="239.50">analysis</text></g><g><title>type_check_crate (16,572,717 samples, 10.23%)</title><rect x="25.3286%" y="213" width="10.2291%" height="15" fill="rgb(210,229,1)"/><text x="25.5786%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,050,840 samples, 1.27%)</title><rect x="34.2918%" y="197" width="1.2658%" height="15" fill="rgb(222,148,37)"/><text x="34.5418%" y="207.50"></text></g><g><title>check_item_well_formed (1,972,539 samples, 1.22%)</title><rect x="34.3402%" y="181" width="1.2175%" height="15" fill="rgb(234,67,33)"/><text x="34.5902%" y="191.50"></text></g><g><title>eval_to_const_value_raw (456,175 samples, 0.28%)</title><rect x="40.5813%" y="165" width="0.2816%" height="15" fill="rgb(247,98,35)"/><text x="40.8313%" y="175.50"></text></g><g><title>eval_to_const_value_raw (419,235 samples, 0.26%)</title><rect x="40.6041%" y="149" width="0.2588%" height="15" fill="rgb(247,138,52)"/><text x="40.8541%" y="159.50"></text></g><g><title>eval_to_allocation_raw (370,045 samples, 0.23%)</title><rect x="40.6345%" y="133" width="0.2284%" height="15" fill="rgb(213,79,30)"/><text x="40.8845%" y="143.50"></text></g><g><title>layout_of (235,083 samples, 0.15%)</title><rect x="40.8840%" y="165" width="0.1451%" height="15" fill="rgb(246,177,23)"/><text x="41.1340%" y="175.50"></text></g><g><title>param_env (247,872 samples, 0.15%)</title><rect x="41.0291%" y="165" width="0.1530%" height="15" fill="rgb(230,62,27)"/><text x="41.2791%" y="175.50"></text></g><g><title>layout_of (1,169,892 samples, 0.72%)</title><rect x="40.4652%" y="181" width="0.7221%" height="15" fill="rgb(216,154,8)"/><text x="40.7152%" y="191.50"></text></g><g><title>param_env (229,261 samples, 0.14%)</title><rect x="41.1873%" y="181" width="0.1415%" height="15" fill="rgb(244,35,45)"/><text x="41.4373%" y="191.50"></text></g><g><title>fn_abi_of_instance (1,751,996 samples, 1.08%)</title><rect x="40.2503%" y="197" width="1.0814%" height="15" fill="rgb(251,115,12)"/><text x="40.5003%" y="207.50"></text></g><g><title>symbol_name (266,974 samples, 0.16%)</title><rect x="41.4315%" y="197" width="0.1648%" height="15" fill="rgb(240,54,50)"/><text x="41.6815%" y="207.50"></text></g><g><title>codegen_module (8,300,003 samples, 5.12%)</title><rect x="36.4741%" y="213" width="5.1230%" height="15" fill="rgb(233,84,52)"/><text x="36.7241%" y="223.50">codege..</text></g><g><title>codegen_crate (9,852,459 samples, 6.08%)</title><rect x="35.5642%" y="229" width="6.0812%" height="15" fill="rgb(207,117,47)"/><text x="35.8142%" y="239.50">codegen_..</text></g><g><title>LLVM_module_codegen (45,907,732 samples, 28.34%)</title><rect x="41.6774%" y="213" width="28.3353%" height="15" fill="rgb(249,43,39)"/><text x="41.9274%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (44,795,249 samples, 27.65%)</title><rect x="42.3640%" y="197" width="27.6487%" height="15" fill="rgb(209,38,44)"/><text x="42.6140%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (47,584,979 samples, 29.37%)</title><rect x="41.6454%" y="229" width="29.3706%" height="15" fill="rgb(236,212,23)"/><text x="41.8954%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,625,487 samples, 1.00%)</title><rect x="70.0127%" y="213" width="1.0033%" height="15" fill="rgb(242,79,21)"/><text x="70.2627%" y="223.50"></text></g><g><title>metadata_register_crate (2,677,677 samples, 1.65%)</title><rect x="78.6410%" y="181" width="1.6527%" height="15" fill="rgb(211,96,35)"/><text x="78.8910%" y="191.50"></text></g><g><title>metadata_register_crate (972,860 samples, 0.60%)</title><rect x="79.6933%" y="165" width="0.6005%" height="15" fill="rgb(253,215,40)"/><text x="79.9433%" y="175.50"></text></g><g><title>macro_expand_crate (14,685,328 samples, 9.06%)</title><rect x="71.2643%" y="213" width="9.0641%" height="15" fill="rgb(211,81,21)"/><text x="71.5143%" y="223.50">macro_expand_..</text></g><g><title>expand_crate (14,659,428 samples, 9.05%)</title><rect x="71.2803%" y="197" width="9.0481%" height="15" fill="rgb(208,190,38)"/><text x="71.5303%" y="207.50">expand_crate</text></g><g><title>finalize_imports (344,833 samples, 0.21%)</title><rect x="80.4307%" y="197" width="0.2128%" height="15" fill="rgb(235,213,38)"/><text x="80.6807%" y="207.50"></text></g><g><title>late_resolve_crate (1,212,542 samples, 0.75%)</title><rect x="80.6588%" y="197" width="0.7484%" height="15" fill="rgb(237,122,38)"/><text x="80.9088%" y="207.50"></text></g><g><title>metadata_register_crate (165,711 samples, 0.10%)</title><rect x="81.3049%" y="181" width="0.1023%" height="15" fill="rgb(244,218,35)"/><text x="81.5549%" y="191.50"></text></g><g><title>configure_and_expand (16,908,161 samples, 10.44%)</title><rect x="71.0160%" y="229" width="10.4361%" height="15" fill="rgb(240,68,47)"/><text x="71.2660%" y="239.50">configure_and_e..</text></g><g><title>resolve_crate (1,663,806 samples, 1.03%)</title><rect x="80.4252%" y="213" width="1.0269%" height="15" fill="rgb(210,16,53)"/><text x="80.6752%" y="223.50"></text></g><g><title>early_lint_checks (190,642 samples, 0.12%)</title><rect x="81.5110%" y="229" width="0.1177%" height="15" fill="rgb(235,124,12)"/><text x="81.7610%" y="239.50"></text></g><g><title>free_global_ctxt (2,108,881 samples, 1.30%)</title><rect x="81.6287%" y="229" width="1.3017%" height="15" fill="rgb(224,169,11)"/><text x="81.8787%" y="239.50"></text></g><g><title>is_reachable_non_generic (405,563 samples, 0.25%)</title><rect x="83.4719%" y="149" width="0.2503%" height="15" fill="rgb(250,166,2)"/><text x="83.7219%" y="159.50"></text></g><g><title>reachable_non_generics (400,873 samples, 0.25%)</title><rect x="83.4748%" y="133" width="0.2474%" height="15" fill="rgb(242,216,29)"/><text x="83.7248%" y="143.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (397,763 samples, 0.25%)</title><rect x="83.4767%" y="117" width="0.2455%" height="15" fill="rgb(230,116,27)"/><text x="83.7267%" y="127.50"></text></g><g><title>exported_symbols (313,253 samples, 0.19%)</title><rect x="83.5288%" y="101" width="0.1933%" height="15" fill="rgb(228,99,48)"/><text x="83.7788%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (311,933 samples, 0.19%)</title><rect x="83.5297%" y="85" width="0.1925%" height="15" fill="rgb(253,11,6)"/><text x="83.7797%" y="95.50"></text></g><g><title>optimized_mir (1,573,896 samples, 0.97%)</title><rect x="83.7222%" y="149" width="0.9714%" height="15" fill="rgb(247,143,39)"/><text x="83.9722%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (709,658 samples, 0.44%)</title><rect x="84.2556%" y="133" width="0.4380%" height="15" fill="rgb(236,97,10)"/><text x="84.5056%" y="143.50"></text></g><g><title>specialization_graph_of (239,342 samples, 0.15%)</title><rect x="84.8955%" y="133" width="0.1477%" height="15" fill="rgb(233,208,19)"/><text x="85.1455%" y="143.50"></text></g><g><title>resolve_instance (577,557 samples, 0.36%)</title><rect x="84.6936%" y="149" width="0.3565%" height="15" fill="rgb(216,164,2)"/><text x="84.9436%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (3,126,201 samples, 1.93%)</title><rect x="83.2657%" y="165" width="1.9296%" height="15" fill="rgb(220,129,5)"/><text x="83.5157%" y="175.50">m..</text></g><g><title>upstream_monomorphizations_for (234,653 samples, 0.14%)</title><rect x="85.0504%" y="149" width="0.1448%" height="15" fill="rgb(242,17,10)"/><text x="85.3004%" y="159.50"></text></g><g><title>upstream_monomorphizations (231,023 samples, 0.14%)</title><rect x="85.0527%" y="133" width="0.1426%" height="15" fill="rgb(242,107,0)"/><text x="85.3027%" y="143.50"></text></g><g><title>monomorphization_collector (3,165,452 samples, 1.95%)</title><rect x="83.2643%" y="181" width="1.9538%" height="15" fill="rgb(251,28,31)"/><text x="83.5143%" y="191.50">m..</text></g><g><title>assert_symbols_are_distinct (187,311 samples, 0.12%)</title><rect x="85.2202%" y="165" width="0.1156%" height="15" fill="rgb(233,223,10)"/><text x="85.4702%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (3,527,356 samples, 2.18%)</title><rect x="83.2478%" y="197" width="2.1772%" height="15" fill="rgb(215,21,27)"/><text x="83.4978%" y="207.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (335,173 samples, 0.21%)</title><rect x="85.2181%" y="181" width="0.2069%" height="15" fill="rgb(232,23,21)"/><text x="85.4681%" y="191.50"></text></g><g><title>exported_symbols (3,579,636 samples, 2.21%)</title><rect x="83.2296%" y="213" width="2.2094%" height="15" fill="rgb(244,5,23)"/><text x="83.4796%" y="223.50">e..</text></g><g><title>layout_of (201,931 samples, 0.12%)</title><rect x="85.6995%" y="197" width="0.1246%" height="15" fill="rgb(226,81,46)"/><text x="85.9495%" y="207.50"></text></g><g><title>optimized_mir (995,759 samples, 0.61%)</title><rect x="85.4687%" y="213" width="0.6146%" height="15" fill="rgb(247,70,30)"/><text x="85.7187%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (419,805 samples, 0.26%)</title><rect x="85.8242%" y="197" width="0.2591%" height="15" fill="rgb(212,68,19)"/><text x="86.0742%" y="207.50"></text></g><g><title>generate_crate_metadata (5,138,182 samples, 3.17%)</title><rect x="82.9304%" y="229" width="3.1714%" height="15" fill="rgb(240,187,13)"/><text x="83.1804%" y="239.50">gen..</text></g><g><title>hir_lowering (1,194,852 samples, 0.74%)</title><rect x="86.1018%" y="229" width="0.7375%" height="15" fill="rgb(223,113,26)"/><text x="86.3518%" y="239.50"></text></g><g><title>finish_ongoing_codegen (17,772,289 samples, 10.97%)</title><rect x="86.8472%" y="213" width="10.9695%" height="15" fill="rgb(206,192,2)"/><text x="87.0972%" y="223.50">finish_ongoing_c..</text></g><g><title>link_crate (889,648 samples, 0.55%)</title><rect x="97.8167%" y="213" width="0.5491%" height="15" fill="rgb(241,108,4)"/><text x="98.0667%" y="223.50"></text></g><g><title>link_binary (877,378 samples, 0.54%)</title><rect x="97.8242%" y="197" width="0.5415%" height="15" fill="rgb(247,173,49)"/><text x="98.0742%" y="207.50"></text></g><g><title>link_rlib (588,316 samples, 0.36%)</title><rect x="98.0027%" y="181" width="0.3631%" height="15" fill="rgb(224,114,35)"/><text x="98.2527%" y="191.50"></text></g><g><title>link (18,682,238 samples, 11.53%)</title><rect x="86.8393%" y="229" width="11.5311%" height="15" fill="rgb(245,159,27)"/><text x="87.0893%" y="239.50">link</text></g><g><title>parse_crate (1,387,724 samples, 0.86%)</title><rect x="98.3704%" y="229" width="0.8565%" height="15" fill="rgb(245,172,44)"/><text x="98.6204%" y="239.50"></text></g><g><title>prepare_outputs (343,683 samples, 0.21%)</title><rect x="99.2333%" y="229" width="0.2121%" height="15" fill="rgb(236,23,11)"/><text x="99.4833%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (454,324 samples, 0.28%)</title><rect x="99.4454%" y="229" width="0.2804%" height="15" fill="rgb(205,117,38)"/><text x="99.6954%" y="239.50"></text></g><g><title>all (162,015,792 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (162,015,792 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (284,413 samples, 0.18%)</title><rect x="99.8245%" y="229" width="0.1755%" height="15" fill="rgb(217,125,39)"/><text x="100.0745%" y="239.50"></text></g></svg></svg>