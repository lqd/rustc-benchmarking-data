<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (46,352,112 samples, 11.42%)</title><rect x="0.1720%" y="181" width="11.4230%" height="15" fill="rgb(227,0,7)"/><text x="0.4220%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (590,786 samples, 0.15%)</title><rect x="16.7634%" y="53" width="0.1456%" height="15" fill="rgb(217,0,24)"/><text x="17.0134%" y="63.50"></text></g><g><title>evaluate_obligation (492,486 samples, 0.12%)</title><rect x="16.7876%" y="37" width="0.1214%" height="15" fill="rgb(221,193,54)"/><text x="17.0376%" y="47.50"></text></g><g><title>needs_drop_raw (775,639 samples, 0.19%)</title><rect x="16.7193%" y="69" width="0.1911%" height="15" fill="rgb(248,212,6)"/><text x="16.9693%" y="79.50"></text></g><g><title>specialization_graph_of (882,410 samples, 0.22%)</title><rect x="17.1037%" y="53" width="0.2175%" height="15" fill="rgb(208,68,35)"/><text x="17.3537%" y="63.50"></text></g><g><title>resolve_instance (1,701,204 samples, 0.42%)</title><rect x="16.9168%" y="69" width="0.4192%" height="15" fill="rgb(232,128,0)"/><text x="17.1668%" y="79.50"></text></g><g><title>thir_body (1,307,003 samples, 0.32%)</title><rect x="17.3453%" y="69" width="0.3221%" height="15" fill="rgb(207,160,47)"/><text x="17.5953%" y="79.50"></text></g><g><title>mir_const (9,426,439 samples, 2.32%)</title><rect x="15.3532%" y="117" width="2.3230%" height="15" fill="rgb(228,23,34)"/><text x="15.6032%" y="127.50">m..</text></g><g><title>unsafety_check_result (8,328,520 samples, 2.05%)</title><rect x="15.6237%" y="101" width="2.0525%" height="15" fill="rgb(218,30,26)"/><text x="15.8737%" y="111.50">u..</text></g><g><title>mir_built (7,687,507 samples, 1.89%)</title><rect x="15.7817%" y="85" width="1.8945%" height="15" fill="rgb(220,122,19)"/><text x="16.0317%" y="95.50">m..</text></g><g><title>mir_promoted (10,437,218 samples, 2.57%)</title><rect x="15.1194%" y="133" width="2.5721%" height="15" fill="rgb(250,228,42)"/><text x="15.3694%" y="143.50">mi..</text></g><g><title>type_op_prove_predicate (2,148,156 samples, 0.53%)</title><rect x="17.8131%" y="133" width="0.5294%" height="15" fill="rgb(240,193,28)"/><text x="18.0631%" y="143.50"></text></g><g><title>MIR_borrow_checking (26,991,915 samples, 6.65%)</title><rect x="11.6945%" y="165" width="6.6519%" height="15" fill="rgb(216,20,37)"/><text x="11.9445%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (26,822,603 samples, 6.61%)</title><rect x="11.7362%" y="149" width="6.6101%" height="15" fill="rgb(206,188,39)"/><text x="11.9862%" y="159.50">mir_borro..</text></g><g><title>codegen_fn_attrs (451,224 samples, 0.11%)</title><rect x="18.4886%" y="133" width="0.1112%" height="15" fill="rgb(217,207,13)"/><text x="18.7386%" y="143.50"></text></g><g><title>check_mod_attrs (747,908 samples, 0.18%)</title><rect x="18.4155%" y="149" width="0.1843%" height="15" fill="rgb(231,73,38)"/><text x="18.6655%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (426,284 samples, 0.11%)</title><rect x="18.6609%" y="149" width="0.1051%" height="15" fill="rgb(225,20,46)"/><text x="18.9109%" y="159.50"></text></g><g><title>misc_checking_1 (1,497,815 samples, 0.37%)</title><rect x="18.4109%" y="165" width="0.3691%" height="15" fill="rgb(210,31,41)"/><text x="18.6609%" y="175.50"></text></g><g><title>misc_checking_2 (1,073,021 samples, 0.26%)</title><rect x="18.7801%" y="165" width="0.2644%" height="15" fill="rgb(221,200,47)"/><text x="19.0301%" y="175.50"></text></g><g><title>match_checking (792,609 samples, 0.20%)</title><rect x="18.8492%" y="149" width="0.1953%" height="15" fill="rgb(226,26,5)"/><text x="19.0992%" y="159.50"></text></g><g><title>check_match (752,359 samples, 0.19%)</title><rect x="18.8591%" y="133" width="0.1854%" height="15" fill="rgb(249,33,26)"/><text x="19.1091%" y="143.50"></text></g><g><title>death_checking (663,827 samples, 0.16%)</title><rect x="19.1233%" y="149" width="0.1636%" height="15" fill="rgb(235,183,28)"/><text x="19.3733%" y="159.50"></text></g><g><title>crate_lints (2,088,412 samples, 0.51%)</title><rect x="19.2873%" y="133" width="0.5147%" height="15" fill="rgb(221,5,38)"/><text x="19.5373%" y="143.50"></text></g><g><title>type_of (1,112,061 samples, 0.27%)</title><rect x="19.5279%" y="117" width="0.2741%" height="15" fill="rgb(247,18,42)"/><text x="19.7779%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (861,828 samples, 0.21%)</title><rect x="19.5896%" y="101" width="0.2124%" height="15" fill="rgb(241,131,45)"/><text x="19.8396%" y="111.50"></text></g><g><title>lint_checking (2,610,247 samples, 0.64%)</title><rect x="19.2869%" y="149" width="0.6433%" height="15" fill="rgb(249,31,29)"/><text x="19.5369%" y="159.50"></text></g><g><title>module_lints (520,195 samples, 0.13%)</title><rect x="19.8020%" y="133" width="0.1282%" height="15" fill="rgb(225,111,53)"/><text x="20.0520%" y="143.50"></text></g><g><title>lint_mod (517,065 samples, 0.13%)</title><rect x="19.8027%" y="117" width="0.1274%" height="15" fill="rgb(238,160,17)"/><text x="20.0527%" y="127.50"></text></g><g><title>privacy_access_levels (436,944 samples, 0.11%)</title><rect x="19.9302%" y="149" width="0.1077%" height="15" fill="rgb(214,148,48)"/><text x="20.1802%" y="159.50"></text></g><g><title>privacy_checking_modules (1,099,211 samples, 0.27%)</title><rect x="20.0379%" y="149" width="0.2709%" height="15" fill="rgb(232,36,49)"/><text x="20.2879%" y="159.50"></text></g><g><title>check_mod_privacy (1,096,691 samples, 0.27%)</title><rect x="20.0385%" y="133" width="0.2703%" height="15" fill="rgb(209,103,24)"/><text x="20.2885%" y="143.50"></text></g><g><title>misc_checking_3 (5,143,352 samples, 1.27%)</title><rect x="19.0445%" y="165" width="1.2675%" height="15" fill="rgb(229,88,8)"/><text x="19.2945%" y="175.50"></text></g><g><title>impl_parent (2,666,910 samples, 0.66%)</title><rect x="21.6678%" y="101" width="0.6572%" height="15" fill="rgb(213,181,19)"/><text x="21.9178%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,555,879 samples, 0.38%)</title><rect x="21.9416%" y="85" width="0.3834%" height="15" fill="rgb(254,191,54)"/><text x="22.1916%" y="95.50"></text></g><g><title>impl_trait_ref (5,668,365 samples, 1.40%)</title><rect x="22.3250%" y="101" width="1.3969%" height="15" fill="rgb(241,83,37)"/><text x="22.5750%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,551,397 samples, 1.12%)</title><rect x="22.6003%" y="85" width="1.1216%" height="15" fill="rgb(233,36,39)"/><text x="22.8503%" y="95.50"></text></g><g><title>coherent_trait (14,676,669 samples, 3.62%)</title><rect x="20.3366%" y="133" width="3.6169%" height="15" fill="rgb(226,3,54)"/><text x="20.5866%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (13,912,812 samples, 3.43%)</title><rect x="20.5248%" y="117" width="3.4287%" height="15" fill="rgb(245,192,40)"/><text x="20.7748%" y="127.50">spe..</text></g><g><title>trait_impls_of (937,990 samples, 0.23%)</title><rect x="23.7223%" y="101" width="0.2312%" height="15" fill="rgb(238,167,29)"/><text x="23.9723%" y="111.50"></text></g><g><title>coherence_checking (14,807,831 samples, 3.65%)</title><rect x="20.3313%" y="149" width="3.6492%" height="15" fill="rgb(232,182,51)"/><text x="20.5813%" y="159.50">cohe..</text></g><g><title>associated_items (489,116 samples, 0.12%)</title><rect x="30.0693%" y="101" width="0.1205%" height="15" fill="rgb(231,60,39)"/><text x="30.3193%" y="111.50"></text></g><g><title>dropck_outlives (436,693 samples, 0.11%)</title><rect x="30.1973%" y="101" width="0.1076%" height="15" fill="rgb(208,69,12)"/><text x="30.4473%" y="111.50"></text></g><g><title>evaluate_obligation (1,631,947 samples, 0.40%)</title><rect x="30.3049%" y="101" width="0.4022%" height="15" fill="rgb(235,93,37)"/><text x="30.5549%" y="111.50"></text></g><g><title>item_bodies_checking (28,365,448 samples, 6.99%)</title><rect x="23.9956%" y="149" width="6.9904%" height="15" fill="rgb(213,116,39)"/><text x="24.2456%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (28,362,258 samples, 6.99%)</title><rect x="23.9964%" y="133" width="6.9896%" height="15" fill="rgb(222,207,29)"/><text x="24.2464%" y="143.50">typeck_it..</text></g><g><title>typeck (28,238,848 samples, 6.96%)</title><rect x="24.0268%" y="117" width="6.9592%" height="15" fill="rgb(206,96,30)"/><text x="24.2768%" y="127.50">typeck</text></g><g><title>item_types_checking (1,823,109 samples, 0.45%)</title><rect x="30.9860%" y="149" width="0.4493%" height="15" fill="rgb(218,138,4)"/><text x="31.2360%" y="159.50"></text></g><g><title>check_mod_item_types (1,819,488 samples, 0.45%)</title><rect x="30.9869%" y="133" width="0.4484%" height="15" fill="rgb(250,191,14)"/><text x="31.2369%" y="143.50"></text></g><g><title>fn_sig (483,607 samples, 0.12%)</title><rect x="31.5426%" y="117" width="0.1192%" height="15" fill="rgb(239,60,40)"/><text x="31.7926%" y="127.50"></text></g><g><title>late_bound_vars_map (692,015 samples, 0.17%)</title><rect x="31.9326%" y="69" width="0.1705%" height="15" fill="rgb(206,27,48)"/><text x="32.1826%" y="79.50"></text></g><g><title>resolve_lifetimes (646,565 samples, 0.16%)</title><rect x="31.9438%" y="53" width="0.1593%" height="15" fill="rgb(225,35,8)"/><text x="32.1938%" y="63.50"></text></g><g><title>explicit_predicates_of (1,104,531 samples, 0.27%)</title><rect x="31.8363%" y="85" width="0.2722%" height="15" fill="rgb(250,213,24)"/><text x="32.0863%" y="95.50"></text></g><g><title>predicates_of (1,657,536 samples, 0.41%)</title><rect x="31.7752%" y="117" width="0.4085%" height="15" fill="rgb(247,123,22)"/><text x="32.0252%" y="127.50"></text></g><g><title>predicates_defined_on (1,563,845 samples, 0.39%)</title><rect x="31.7983%" y="101" width="0.3854%" height="15" fill="rgb(231,138,38)"/><text x="32.0483%" y="111.50"></text></g><g><title>type_collecting (3,230,404 samples, 0.80%)</title><rect x="31.4357%" y="149" width="0.7961%" height="15" fill="rgb(231,145,46)"/><text x="31.6857%" y="159.50"></text></g><g><title>collect_mod_item_types (3,223,334 samples, 0.79%)</title><rect x="31.4374%" y="133" width="0.7944%" height="15" fill="rgb(251,118,11)"/><text x="31.6874%" y="143.50"></text></g><g><title>evaluate_obligation (1,251,824 samples, 0.31%)</title><rect x="33.2091%" y="117" width="0.3085%" height="15" fill="rgb(217,147,25)"/><text x="33.4591%" y="127.50"></text></g><g><title>implied_outlives_bounds (538,513 samples, 0.13%)</title><rect x="33.5205%" y="117" width="0.1327%" height="15" fill="rgb(247,81,37)"/><text x="33.7705%" y="127.50"></text></g><g><title>param_env (528,625 samples, 0.13%)</title><rect x="33.6711%" y="117" width="0.1303%" height="15" fill="rgb(209,12,38)"/><text x="33.9211%" y="127.50"></text></g><g><title>region_scope_tree (610,122 samples, 0.15%)</title><rect x="33.8145%" y="117" width="0.1504%" height="15" fill="rgb(227,1,9)"/><text x="34.0645%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,803,451 samples, 1.68%)</title><rect x="32.3176%" y="133" width="1.6766%" height="15" fill="rgb(248,47,43)"/><text x="32.5676%" y="143.50"></text></g><g><title>param_env (627,297 samples, 0.15%)</title><rect x="34.9993%" y="117" width="0.1546%" height="15" fill="rgb(221,10,30)"/><text x="35.2493%" y="127.50"></text></g><g><title>analysis (95,830,465 samples, 23.62%)</title><rect x="11.5950%" y="181" width="23.6164%" height="15" fill="rgb(210,229,1)"/><text x="11.8450%" y="191.50">analysis</text></g><g><title>type_check_crate (60,458,395 samples, 14.90%)</title><rect x="20.3120%" y="165" width="14.8993%" height="15" fill="rgb(222,148,37)"/><text x="20.5620%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,083,343 samples, 2.98%)</title><rect x="32.2335%" y="149" width="2.9778%" height="15" fill="rgb(234,67,33)"/><text x="32.4835%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (4,938,661 samples, 1.22%)</title><rect x="33.9943%" y="133" width="1.2171%" height="15" fill="rgb(247,98,35)"/><text x="34.2443%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (413,841 samples, 0.10%)</title><rect x="42.0474%" y="149" width="0.1020%" height="15" fill="rgb(247,138,52)"/><text x="42.2974%" y="159.50"></text></g><g><title>item_attrs (470,944 samples, 0.12%)</title><rect x="42.7212%" y="117" width="0.1161%" height="15" fill="rgb(213,79,30)"/><text x="42.9712%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (454,424 samples, 0.11%)</title><rect x="42.7253%" y="101" width="0.1120%" height="15" fill="rgb(246,177,23)"/><text x="42.9753%" y="111.50"></text></g><g><title>codegen_fn_attrs (662,349 samples, 0.16%)</title><rect x="42.6927%" y="133" width="0.1632%" height="15" fill="rgb(230,62,27)"/><text x="42.9427%" y="143.50"></text></g><g><title>layout_of (1,006,722 samples, 0.25%)</title><rect x="42.8675%" y="133" width="0.2481%" height="15" fill="rgb(216,154,8)"/><text x="43.1175%" y="143.50"></text></g><g><title>predicates_of (794,751 samples, 0.20%)</title><rect x="43.5149%" y="117" width="0.1959%" height="15" fill="rgb(244,35,45)"/><text x="43.7649%" y="127.50"></text></g><g><title>predicates_defined_on (588,009 samples, 0.14%)</title><rect x="43.5658%" y="101" width="0.1449%" height="15" fill="rgb(251,115,12)"/><text x="43.8158%" y="111.50"></text></g><g><title>param_env (2,421,413 samples, 0.60%)</title><rect x="43.1156%" y="133" width="0.5967%" height="15" fill="rgb(240,54,50)"/><text x="43.3656%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,290,952 samples, 1.55%)</title><rect x="42.2182%" y="149" width="1.5503%" height="15" fill="rgb(233,84,52)"/><text x="42.4682%" y="159.50"></text></g><g><title>layout_of (989,089 samples, 0.24%)</title><rect x="43.8618%" y="149" width="0.2438%" height="15" fill="rgb(207,117,47)"/><text x="44.1118%" y="159.50"></text></g><g><title>symbol_name (567,045 samples, 0.14%)</title><rect x="44.1104%" y="149" width="0.1397%" height="15" fill="rgb(249,43,39)"/><text x="44.3604%" y="159.50"></text></g><g><title>codegen_module (34,085,066 samples, 8.40%)</title><rect x="35.8653%" y="165" width="8.3999%" height="15" fill="rgb(209,38,44)"/><text x="36.1153%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (36,800,444 samples, 9.07%)</title><rect x="35.2144%" y="181" width="9.0691%" height="15" fill="rgb(236,212,23)"/><text x="35.4644%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (140,357,196 samples, 34.59%)</title><rect x="44.3334%" y="165" width="34.5895%" height="15" fill="rgb(242,79,21)"/><text x="44.5834%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (133,270,144 samples, 32.84%)</title><rect x="46.0799%" y="149" width="32.8430%" height="15" fill="rgb(211,96,35)"/><text x="46.3299%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (148,720,201 samples, 36.65%)</title><rect x="44.2835%" y="181" width="36.6505%" height="15" fill="rgb(253,215,40)"/><text x="44.5335%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,160,453 samples, 2.01%)</title><rect x="78.9229%" y="165" width="2.0111%" height="15" fill="rgb(211,81,21)"/><text x="79.1729%" y="175.50">L..</text></g><g><title>metadata_register_crate (2,774,019 samples, 0.68%)</title><rect x="86.0369%" y="133" width="0.6836%" height="15" fill="rgb(208,190,38)"/><text x="86.2869%" y="143.50"></text></g><g><title>metadata_register_crate (1,015,310 samples, 0.25%)</title><rect x="86.4703%" y="117" width="0.2502%" height="15" fill="rgb(235,213,38)"/><text x="86.7203%" y="127.50"></text></g><g><title>macro_expand_crate (22,746,291 samples, 5.61%)</title><rect x="81.1224%" y="165" width="5.6056%" height="15" fill="rgb(237,122,38)"/><text x="81.3724%" y="175.50">macro_e..</text></g><g><title>expand_crate (22,729,191 samples, 5.60%)</title><rect x="81.1266%" y="149" width="5.6014%" height="15" fill="rgb(244,218,35)"/><text x="81.3766%" y="159.50">expand_..</text></g><g><title>finalize_macro_resolutions (451,545 samples, 0.11%)</title><rect x="86.8004%" y="149" width="0.1113%" height="15" fill="rgb(240,68,47)"/><text x="87.0504%" y="159.50"></text></g><g><title>late_resolve_crate (4,127,012 samples, 1.02%)</title><rect x="86.9117%" y="149" width="1.0171%" height="15" fill="rgb(210,16,53)"/><text x="87.1617%" y="159.50"></text></g><g><title>configure_and_expand (28,617,431 samples, 7.05%)</title><rect x="80.9340%" y="181" width="7.0525%" height="15" fill="rgb(235,124,12)"/><text x="81.1840%" y="191.50">configure..</text></g><g><title>resolve_crate (4,887,740 samples, 1.20%)</title><rect x="86.7819%" y="165" width="1.2045%" height="15" fill="rgb(224,169,11)"/><text x="87.0319%" y="175.50"></text></g><g><title>early_lint_checks (468,955 samples, 0.12%)</title><rect x="88.0461%" y="181" width="0.1156%" height="15" fill="rgb(250,166,2)"/><text x="88.2961%" y="191.50"></text></g><g><title>free_global_ctxt (5,863,030 samples, 1.44%)</title><rect x="88.1617%" y="181" width="1.4449%" height="15" fill="rgb(242,216,29)"/><text x="88.4117%" y="191.50"></text></g><g><title>item_attrs (959,550 samples, 0.24%)</title><rect x="90.4169%" y="85" width="0.2365%" height="15" fill="rgb(230,116,27)"/><text x="90.6669%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (935,800 samples, 0.23%)</title><rect x="90.4228%" y="69" width="0.2306%" height="15" fill="rgb(228,99,48)"/><text x="90.6728%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,334,651 samples, 0.33%)</title><rect x="90.3805%" y="101" width="0.3289%" height="15" fill="rgb(253,11,6)"/><text x="90.6305%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (846,687 samples, 0.21%)</title><rect x="91.0652%" y="85" width="0.2087%" height="15" fill="rgb(247,143,39)"/><text x="91.3152%" y="95.50"></text></g><g><title>optimized_mir (2,727,946 samples, 0.67%)</title><rect x="90.8130%" y="101" width="0.6723%" height="15" fill="rgb(236,97,10)"/><text x="91.0630%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (858,106 samples, 0.21%)</title><rect x="91.2738%" y="85" width="0.2115%" height="15" fill="rgb(233,208,19)"/><text x="91.5238%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,327,833 samples, 0.33%)</title><rect x="91.5918%" y="85" width="0.3272%" height="15" fill="rgb(216,164,2)"/><text x="91.8418%" y="95.50"></text></g><g><title>impl_trait_ref (1,025,103 samples, 0.25%)</title><rect x="92.3271%" y="69" width="0.2526%" height="15" fill="rgb(220,129,5)"/><text x="92.5771%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (905,521 samples, 0.22%)</title><rect x="92.3566%" y="53" width="0.2232%" height="15" fill="rgb(242,17,10)"/><text x="92.6066%" y="63.50"></text></g><g><title>specialization_graph_of (2,182,403 samples, 0.54%)</title><rect x="92.0421%" y="85" width="0.5378%" height="15" fill="rgb(242,107,0)"/><text x="92.2921%" y="95.50"></text></g><g><title>resolve_instance (4,682,599 samples, 1.15%)</title><rect x="91.4853%" y="101" width="1.1540%" height="15" fill="rgb(251,28,31)"/><text x="91.7353%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (661,126 samples, 0.16%)</title><rect x="92.7869%" y="69" width="0.1629%" height="15" fill="rgb(233,223,10)"/><text x="93.0369%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (11,311,095 samples, 2.79%)</title><rect x="90.1643%" y="117" width="2.7875%" height="15" fill="rgb(215,21,27)"/><text x="90.4143%" y="127.50">mo..</text></g><g><title>vtable_entries (795,600 samples, 0.20%)</title><rect x="92.7558%" y="101" width="0.1961%" height="15" fill="rgb(232,23,21)"/><text x="93.0058%" y="111.50"></text></g><g><title>resolve_instance (707,737 samples, 0.17%)</title><rect x="92.7774%" y="85" width="0.1744%" height="15" fill="rgb(244,5,23)"/><text x="93.0274%" y="95.50"></text></g><g><title>monomorphization_collector (11,368,605 samples, 2.80%)</title><rect x="90.1634%" y="133" width="2.8017%" height="15" fill="rgb(226,81,46)"/><text x="90.4134%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (898,369 samples, 0.22%)</title><rect x="92.9661%" y="117" width="0.2214%" height="15" fill="rgb(247,70,30)"/><text x="93.2161%" y="127.50"></text></g><g><title>symbol_name (818,758 samples, 0.20%)</title><rect x="92.9857%" y="101" width="0.2018%" height="15" fill="rgb(212,68,19)"/><text x="93.2357%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (12,835,260 samples, 3.16%)</title><rect x="90.1546%" y="149" width="3.1631%" height="15" fill="rgb(240,187,13)"/><text x="90.4046%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,430,964 samples, 0.35%)</title><rect x="92.9651%" y="133" width="0.3526%" height="15" fill="rgb(223,113,26)"/><text x="93.2151%" y="143.50"></text></g><g><title>cgu_partitioning (528,475 samples, 0.13%)</title><rect x="93.1875%" y="117" width="0.1302%" height="15" fill="rgb(206,192,2)"/><text x="93.4375%" y="127.50"></text></g><g><title>exported_symbols (13,030,903 samples, 3.21%)</title><rect x="90.1420%" y="165" width="3.2113%" height="15" fill="rgb(241,108,4)"/><text x="90.3920%" y="175.50">exp..</text></g><g><title>layout_of (598,034 samples, 0.15%)</title><rect x="94.1606%" y="149" width="0.1474%" height="15" fill="rgb(247,173,49)"/><text x="94.4106%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,573,269 samples, 0.88%)</title><rect x="94.3079%" y="149" width="0.8806%" height="15" fill="rgb(224,114,35)"/><text x="94.5579%" y="159.50"></text></g><g><title>optimized_mir (7,322,172 samples, 1.80%)</title><rect x="93.3879%" y="165" width="1.8045%" height="15" fill="rgb(245,159,27)"/><text x="93.6379%" y="175.50">o..</text></g><g><title>generate_crate_metadata (22,748,031 samples, 5.61%)</title><rect x="89.6065%" y="181" width="5.6060%" height="15" fill="rgb(245,172,44)"/><text x="89.8565%" y="191.50">generat..</text></g><g><title>hir_lowering (4,179,052 samples, 1.03%)</title><rect x="95.2125%" y="181" width="1.0299%" height="15" fill="rgb(236,23,11)"/><text x="95.4625%" y="191.50"></text></g><g><title>finish_ongoing_codegen (6,779,869 samples, 1.67%)</title><rect x="96.2464%" y="165" width="1.6708%" height="15" fill="rgb(205,117,38)"/><text x="96.4964%" y="175.50"></text></g><g><title>link_crate (2,039,751 samples, 0.50%)</title><rect x="97.9172%" y="165" width="0.5027%" height="15" fill="rgb(237,72,25)"/><text x="98.1672%" y="175.50"></text></g><g><title>link_binary (2,019,741 samples, 0.50%)</title><rect x="97.9222%" y="149" width="0.4977%" height="15" fill="rgb(244,70,9)"/><text x="98.1722%" y="159.50"></text></g><g><title>link_rlib (1,402,785 samples, 0.35%)</title><rect x="98.0742%" y="133" width="0.3457%" height="15" fill="rgb(217,125,39)"/><text x="98.3242%" y="143.50"></text></g><g><title>link (8,847,010 samples, 2.18%)</title><rect x="96.2424%" y="181" width="2.1803%" height="15" fill="rgb(235,36,10)"/><text x="96.4924%" y="191.50">l..</text></g><g><title>parse_crate (4,093,152 samples, 1.01%)</title><rect x="98.4227%" y="181" width="1.0087%" height="15" fill="rgb(251,123,47)"/><text x="98.6727%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,635,556 samples, 0.40%)</title><rect x="99.4802%" y="181" width="0.4031%" height="15" fill="rgb(221,13,13)"/><text x="99.7302%" y="191.50"></text></g><g><title>all (405,779,396 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (405,779,396 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>