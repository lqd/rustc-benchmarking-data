<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,934,210 samples, 0.71%)</title><rect x="0.3195%" y="181" width="0.7056%" height="15" fill="rgb(227,0,7)"/><text x="0.5695%" y="191.50"></text></g><g><title>is_sized_raw (297,072 samples, 0.11%)</title><rect x="12.0292%" y="133" width="0.1084%" height="15" fill="rgb(217,0,24)"/><text x="12.2792%" y="143.50"></text></g><g><title>param_env (639,209 samples, 0.23%)</title><rect x="13.6632%" y="101" width="0.2332%" height="15" fill="rgb(221,193,54)"/><text x="13.9132%" y="111.50"></text></g><g><title>item_attrs (469,157 samples, 0.17%)</title><rect x="14.4250%" y="69" width="0.1711%" height="15" fill="rgb(248,212,6)"/><text x="14.6750%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (452,417 samples, 0.17%)</title><rect x="14.4311%" y="53" width="0.1650%" height="15" fill="rgb(208,68,35)"/><text x="14.6811%" y="63.50"></text></g><g><title>codegen_fn_attrs (680,438 samples, 0.25%)</title><rect x="14.3578%" y="85" width="0.2482%" height="15" fill="rgb(232,128,0)"/><text x="14.6078%" y="95.50"></text></g><g><title>adt_drop_tys (376,115 samples, 0.14%)</title><rect x="17.2296%" y="53" width="0.1372%" height="15" fill="rgb(207,160,47)"/><text x="17.4796%" y="63.50"></text></g><g><title>needs_drop_raw (2,292,178 samples, 0.84%)</title><rect x="17.1491%" y="69" width="0.8361%" height="15" fill="rgb(228,23,34)"/><text x="17.3991%" y="79.50"></text></g><g><title>is_copy_raw (1,695,440 samples, 0.62%)</title><rect x="17.3668%" y="53" width="0.6185%" height="15" fill="rgb(218,30,26)"/><text x="17.6168%" y="63.50"></text></g><g><title>evaluate_obligation (1,382,906 samples, 0.50%)</title><rect x="17.4808%" y="37" width="0.5045%" height="15" fill="rgb(220,122,19)"/><text x="17.7308%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,118,975 samples, 0.41%)</title><rect x="18.2469%" y="53" width="0.4082%" height="15" fill="rgb(250,228,42)"/><text x="18.4969%" y="63.50"></text></g><g><title>resolve_instance (2,282,981 samples, 0.83%)</title><rect x="17.9948%" y="69" width="0.8328%" height="15" fill="rgb(240,193,28)"/><text x="18.2448%" y="79.50"></text></g><g><title>thir_body (2,662,123 samples, 0.97%)</title><rect x="18.8573%" y="69" width="0.9711%" height="15" fill="rgb(216,20,37)"/><text x="19.1073%" y="79.50"></text></g><g><title>mir_const (19,140,082 samples, 6.98%)</title><rect x="12.8675%" y="117" width="6.9819%" height="15" fill="rgb(206,188,39)"/><text x="13.1175%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (16,319,347 samples, 5.95%)</title><rect x="13.8964%" y="101" width="5.9529%" height="15" fill="rgb(217,207,13)"/><text x="14.1464%" y="111.50">unsafety..</text></g><g><title>mir_built (14,373,947 samples, 5.24%)</title><rect x="14.6060%" y="85" width="5.2433%" height="15" fill="rgb(231,73,38)"/><text x="14.8560%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (21,264,120 samples, 7.76%)</title><rect x="12.1375%" y="133" width="7.7567%" height="15" fill="rgb(225,20,46)"/><text x="12.3875%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,137,993 samples, 0.42%)</title><rect x="19.8942%" y="133" width="0.4151%" height="15" fill="rgb(210,31,41)"/><text x="20.1442%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,471,924 samples, 0.54%)</title><rect x="20.3093%" y="133" width="0.5369%" height="15" fill="rgb(221,200,47)"/><text x="20.5593%" y="143.50"></text></g><g><title>normalize_projection_ty (973,286 samples, 0.36%)</title><rect x="20.4912%" y="117" width="0.3550%" height="15" fill="rgb(226,26,5)"/><text x="20.7412%" y="127.50"></text></g><g><title>type_op_normalize_ty (411,283 samples, 0.15%)</title><rect x="20.9377%" y="133" width="0.1500%" height="15" fill="rgb(249,33,26)"/><text x="21.1877%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,854,613 samples, 2.14%)</title><rect x="21.0877%" y="133" width="2.1356%" height="15" fill="rgb(235,183,28)"/><text x="21.3377%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (60,291,916 samples, 21.99%)</title><rect x="1.2327%" y="165" width="21.9931%" height="15" fill="rgb(221,5,38)"/><text x="1.4827%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (59,947,288 samples, 21.87%)</title><rect x="1.3584%" y="149" width="21.8674%" height="15" fill="rgb(247,18,42)"/><text x="1.6084%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (377,482 samples, 0.14%)</title><rect x="23.2656%" y="165" width="0.1377%" height="15" fill="rgb(241,131,45)"/><text x="23.5156%" y="175.50"></text></g><g><title>should_inherit_track_caller (481,465 samples, 0.18%)</title><rect x="23.6832%" y="117" width="0.1756%" height="15" fill="rgb(249,31,29)"/><text x="23.9332%" y="127.50"></text></g><g><title>codegen_fn_attrs (777,477 samples, 0.28%)</title><rect x="23.5810%" y="133" width="0.2836%" height="15" fill="rgb(225,111,53)"/><text x="23.8310%" y="143.50"></text></g><g><title>check_mod_attrs (1,229,040 samples, 0.45%)</title><rect x="23.4163%" y="149" width="0.4483%" height="15" fill="rgb(238,160,17)"/><text x="23.6663%" y="159.50"></text></g><g><title>check_mod_const_bodies (280,624 samples, 0.10%)</title><rect x="23.8647%" y="149" width="0.1024%" height="15" fill="rgb(214,148,48)"/><text x="24.1147%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (948,597 samples, 0.35%)</title><rect x="24.0296%" y="149" width="0.3460%" height="15" fill="rgb(232,36,49)"/><text x="24.2796%" y="159.50"></text></g><g><title>misc_checking_1 (2,750,738 samples, 1.00%)</title><rect x="23.4036%" y="165" width="1.0034%" height="15" fill="rgb(209,103,24)"/><text x="23.6536%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,003,720 samples, 0.37%)</title><rect x="24.4077%" y="149" width="0.3661%" height="15" fill="rgb(229,88,8)"/><text x="24.6577%" y="159.50"></text></g><g><title>check_mod_liveness (797,517 samples, 0.29%)</title><rect x="24.4829%" y="133" width="0.2909%" height="15" fill="rgb(213,181,19)"/><text x="24.7329%" y="143.50"></text></g><g><title>misc_checking_2 (2,182,252 samples, 0.80%)</title><rect x="24.4070%" y="165" width="0.7960%" height="15" fill="rgb(254,191,54)"/><text x="24.6570%" y="175.50"></text></g><g><title>match_checking (1,176,462 samples, 0.43%)</title><rect x="24.7739%" y="149" width="0.4291%" height="15" fill="rgb(241,83,37)"/><text x="25.0239%" y="159.50"></text></g><g><title>check_match (1,100,920 samples, 0.40%)</title><rect x="24.8014%" y="133" width="0.4016%" height="15" fill="rgb(233,36,39)"/><text x="25.0514%" y="143.50"></text></g><g><title>check_private_in_public (492,845 samples, 0.18%)</title><rect x="25.2067%" y="149" width="0.1798%" height="15" fill="rgb(226,3,54)"/><text x="25.4567%" y="159.50"></text></g><g><title>death_checking (997,940 samples, 0.36%)</title><rect x="25.3865%" y="149" width="0.3640%" height="15" fill="rgb(245,192,40)"/><text x="25.6365%" y="159.50"></text></g><g><title>param_env (549,548 samples, 0.20%)</title><rect x="26.0509%" y="117" width="0.2005%" height="15" fill="rgb(238,167,29)"/><text x="26.3009%" y="127.50"></text></g><g><title>crate_lints (1,818,869 samples, 0.66%)</title><rect x="25.7510%" y="133" width="0.6635%" height="15" fill="rgb(232,182,51)"/><text x="26.0010%" y="143.50"></text></g><g><title>type_of (440,575 samples, 0.16%)</title><rect x="26.2538%" y="117" width="0.1607%" height="15" fill="rgb(231,60,39)"/><text x="26.5038%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (351,234 samples, 0.13%)</title><rect x="26.2864%" y="101" width="0.1281%" height="15" fill="rgb(208,69,12)"/><text x="26.5364%" y="111.50"></text></g><g><title>lint_checking (2,630,407 samples, 0.96%)</title><rect x="25.7505%" y="149" width="0.9595%" height="15" fill="rgb(235,93,37)"/><text x="26.0005%" y="159.50"></text></g><g><title>module_lints (810,198 samples, 0.30%)</title><rect x="26.4145%" y="133" width="0.2955%" height="15" fill="rgb(213,116,39)"/><text x="26.6645%" y="143.50"></text></g><g><title>lint_mod (800,388 samples, 0.29%)</title><rect x="26.4181%" y="117" width="0.2920%" height="15" fill="rgb(222,207,29)"/><text x="26.6681%" y="127.50"></text></g><g><title>privacy_access_levels (898,789 samples, 0.33%)</title><rect x="26.7100%" y="149" width="0.3279%" height="15" fill="rgb(206,96,30)"/><text x="26.9600%" y="159.50"></text></g><g><title>privacy_checking_modules (1,702,598 samples, 0.62%)</title><rect x="27.0379%" y="149" width="0.6211%" height="15" fill="rgb(218,138,4)"/><text x="27.2879%" y="159.50"></text></g><g><title>check_mod_privacy (1,693,558 samples, 0.62%)</title><rect x="27.0412%" y="133" width="0.6178%" height="15" fill="rgb(250,191,14)"/><text x="27.2912%" y="143.50"></text></g><g><title>misc_checking_3 (6,751,619 samples, 2.46%)</title><rect x="25.2030%" y="165" width="2.4628%" height="15" fill="rgb(239,60,40)"/><text x="25.4530%" y="175.50">mi..</text></g><g><title>impl_parent (1,544,404 samples, 0.56%)</title><rect x="28.9133%" y="101" width="0.5634%" height="15" fill="rgb(206,27,48)"/><text x="29.1633%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (764,155 samples, 0.28%)</title><rect x="29.1980%" y="85" width="0.2787%" height="15" fill="rgb(225,35,8)"/><text x="29.4480%" y="95.50"></text></g><g><title>impl_trait_ref (2,716,281 samples, 0.99%)</title><rect x="29.4770%" y="101" width="0.9908%" height="15" fill="rgb(250,213,24)"/><text x="29.7270%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,164,785 samples, 0.79%)</title><rect x="29.6782%" y="85" width="0.7897%" height="15" fill="rgb(247,123,22)"/><text x="29.9282%" y="95.50"></text></g><g><title>trait_impls_of (476,386 samples, 0.17%)</title><rect x="30.5463%" y="101" width="0.1738%" height="15" fill="rgb(231,138,38)"/><text x="30.7963%" y="111.50"></text></g><g><title>coherent_trait (8,207,532 samples, 2.99%)</title><rect x="27.7320%" y="133" width="2.9939%" height="15" fill="rgb(231,145,46)"/><text x="27.9820%" y="143.50">coh..</text></g><g><title>specialization_graph_of (7,836,817 samples, 2.86%)</title><rect x="27.8672%" y="117" width="2.8587%" height="15" fill="rgb(251,118,11)"/><text x="28.1172%" y="127.50">sp..</text></g><g><title>coherence_checking (8,334,504 samples, 3.04%)</title><rect x="27.7230%" y="149" width="3.0402%" height="15" fill="rgb(217,147,25)"/><text x="27.9730%" y="159.50">coh..</text></g><g><title>associated_item (667,538 samples, 0.24%)</title><rect x="49.1209%" y="85" width="0.2435%" height="15" fill="rgb(247,81,37)"/><text x="49.3709%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (544,298 samples, 0.20%)</title><rect x="49.1659%" y="69" width="0.1985%" height="15" fill="rgb(209,12,38)"/><text x="49.4159%" y="79.50"></text></g><g><title>associated_items (956,749 samples, 0.35%)</title><rect x="49.0393%" y="101" width="0.3490%" height="15" fill="rgb(227,1,9)"/><text x="49.2893%" y="111.50"></text></g><g><title>dropck_outlives (750,380 samples, 0.27%)</title><rect x="49.4351%" y="101" width="0.2737%" height="15" fill="rgb(248,47,43)"/><text x="49.6851%" y="111.50"></text></g><g><title>generics_of (804,277 samples, 0.29%)</title><rect x="52.2501%" y="85" width="0.2934%" height="15" fill="rgb(221,10,30)"/><text x="52.5001%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (599,816 samples, 0.22%)</title><rect x="52.3247%" y="69" width="0.2188%" height="15" fill="rgb(210,229,1)"/><text x="52.5747%" y="79.50"></text></g><g><title>impl_trait_ref (1,141,216 samples, 0.42%)</title><rect x="52.6152%" y="85" width="0.4163%" height="15" fill="rgb(222,148,37)"/><text x="52.8652%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (955,625 samples, 0.35%)</title><rect x="52.6829%" y="69" width="0.3486%" height="15" fill="rgb(234,67,33)"/><text x="52.9329%" y="79.50"></text></g><g><title>predicates_of (956,644 samples, 0.35%)</title><rect x="53.0568%" y="85" width="0.3490%" height="15" fill="rgb(247,98,35)"/><text x="53.3068%" y="95.50"></text></g><g><title>predicates_defined_on (550,987 samples, 0.20%)</title><rect x="53.2048%" y="69" width="0.2010%" height="15" fill="rgb(247,138,52)"/><text x="53.4548%" y="79.50"></text></g><g><title>specializes (2,318,140 samples, 0.85%)</title><rect x="53.4057%" y="85" width="0.8456%" height="15" fill="rgb(213,79,30)"/><text x="53.6557%" y="95.50"></text></g><g><title>param_env (1,386,883 samples, 0.51%)</title><rect x="53.7455%" y="69" width="0.5059%" height="15" fill="rgb(246,177,23)"/><text x="53.9955%" y="79.50"></text></g><g><title>def_span (634,567 samples, 0.23%)</title><rect x="54.0199%" y="53" width="0.2315%" height="15" fill="rgb(230,62,27)"/><text x="54.2699%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (565,356 samples, 0.21%)</title><rect x="54.0451%" y="37" width="0.2062%" height="15" fill="rgb(216,154,8)"/><text x="54.2951%" y="47.50"></text></g><g><title>trait_impls_of (316,445 samples, 0.12%)</title><rect x="54.2593%" y="85" width="0.1154%" height="15" fill="rgb(244,35,45)"/><text x="54.5093%" y="95.50"></text></g><g><title>evaluate_obligation (12,811,287 samples, 4.67%)</title><rect x="49.7088%" y="101" width="4.6733%" height="15" fill="rgb(251,115,12)"/><text x="49.9588%" y="111.50">evalu..</text></g><g><title>evaluate_obligation (384,507 samples, 0.14%)</title><rect x="54.8835%" y="85" width="0.1403%" height="15" fill="rgb(240,54,50)"/><text x="55.1335%" y="95.50"></text></g><g><title>method_autoderef_steps (772,251 samples, 0.28%)</title><rect x="54.7458%" y="101" width="0.2817%" height="15" fill="rgb(233,84,52)"/><text x="54.9958%" y="111.50"></text></g><g><title>predicates_of (632,845 samples, 0.23%)</title><rect x="55.1254%" y="101" width="0.2308%" height="15" fill="rgb(207,117,47)"/><text x="55.3754%" y="111.50"></text></g><g><title>predicates_defined_on (425,012 samples, 0.16%)</title><rect x="55.2012%" y="85" width="0.1550%" height="15" fill="rgb(249,43,39)"/><text x="55.4512%" y="95.50"></text></g><g><title>evaluate_obligation (1,279,536 samples, 0.47%)</title><rect x="58.2814%" y="85" width="0.4667%" height="15" fill="rgb(209,38,44)"/><text x="58.5314%" y="95.50"></text></g><g><title>method_autoderef_steps (409,534 samples, 0.15%)</title><rect x="58.8931%" y="85" width="0.1494%" height="15" fill="rgb(236,212,23)"/><text x="59.1431%" y="95.50"></text></g><g><title>typeck (10,068,061 samples, 3.67%)</title><rect x="55.4238%" y="101" width="3.6726%" height="15" fill="rgb(242,79,21)"/><text x="55.6738%" y="111.50">type..</text></g><g><title>item_bodies_checking (77,692,071 samples, 28.34%)</title><rect x="30.7931%" y="149" width="28.3403%" height="15" fill="rgb(211,96,35)"/><text x="31.0431%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (77,688,341 samples, 28.34%)</title><rect x="30.7945%" y="133" width="28.3389%" height="15" fill="rgb(253,215,40)"/><text x="31.0445%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (77,446,409 samples, 28.25%)</title><rect x="30.8827%" y="117" width="28.2507%" height="15" fill="rgb(211,81,21)"/><text x="31.1327%" y="127.50">typeck</text></g><g><title>item_types_checking (3,650,927 samples, 1.33%)</title><rect x="59.1334%" y="149" width="1.3318%" height="15" fill="rgb(208,190,38)"/><text x="59.3834%" y="159.50"></text></g><g><title>check_mod_item_types (3,639,827 samples, 1.33%)</title><rect x="59.1374%" y="133" width="1.3277%" height="15" fill="rgb(235,213,38)"/><text x="59.3874%" y="143.50"></text></g><g><title>fn_sig (686,847 samples, 0.25%)</title><rect x="60.6996%" y="117" width="0.2505%" height="15" fill="rgb(237,122,38)"/><text x="60.9496%" y="127.50"></text></g><g><title>generics_of (499,415 samples, 0.18%)</title><rect x="60.9502%" y="117" width="0.1822%" height="15" fill="rgb(244,218,35)"/><text x="61.2002%" y="127.50"></text></g><g><title>late_bound_vars_map (868,550 samples, 0.32%)</title><rect x="61.4724%" y="69" width="0.3168%" height="15" fill="rgb(240,68,47)"/><text x="61.7224%" y="79.50"></text></g><g><title>resolve_lifetimes (820,520 samples, 0.30%)</title><rect x="61.4899%" y="53" width="0.2993%" height="15" fill="rgb(210,16,53)"/><text x="61.7399%" y="63.50"></text></g><g><title>explicit_predicates_of (1,410,666 samples, 0.51%)</title><rect x="61.2889%" y="85" width="0.5146%" height="15" fill="rgb(235,124,12)"/><text x="61.5389%" y="95.50"></text></g><g><title>predicates_of (2,154,655 samples, 0.79%)</title><rect x="61.1686%" y="117" width="0.7860%" height="15" fill="rgb(224,169,11)"/><text x="61.4186%" y="127.50"></text></g><g><title>predicates_defined_on (2,033,873 samples, 0.74%)</title><rect x="61.2127%" y="101" width="0.7419%" height="15" fill="rgb(250,166,2)"/><text x="61.4627%" y="111.50"></text></g><g><title>inferred_outlives_of (414,353 samples, 0.15%)</title><rect x="61.8034%" y="85" width="0.1511%" height="15" fill="rgb(242,216,29)"/><text x="62.0534%" y="95.50"></text></g><g><title>inferred_outlives_crate (365,723 samples, 0.13%)</title><rect x="61.8212%" y="69" width="0.1334%" height="15" fill="rgb(230,116,27)"/><text x="62.0712%" y="79.50"></text></g><g><title>type_collecting (4,440,434 samples, 1.62%)</title><rect x="60.4670%" y="149" width="1.6198%" height="15" fill="rgb(228,99,48)"/><text x="60.7170%" y="159.50"></text></g><g><title>collect_mod_item_types (4,421,924 samples, 1.61%)</title><rect x="60.4738%" y="133" width="1.6130%" height="15" fill="rgb(253,11,6)"/><text x="60.7238%" y="143.50"></text></g><g><title>evaluate_obligation (958,201 samples, 0.35%)</title><rect x="65.0985%" y="117" width="0.3495%" height="15" fill="rgb(247,143,39)"/><text x="65.3485%" y="127.50"></text></g><g><title>implied_outlives_bounds (780,286 samples, 0.28%)</title><rect x="65.4594%" y="117" width="0.2846%" height="15" fill="rgb(236,97,10)"/><text x="65.7094%" y="127.50"></text></g><g><title>param_env (1,614,525 samples, 0.59%)</title><rect x="65.7441%" y="117" width="0.5889%" height="15" fill="rgb(233,208,19)"/><text x="65.9941%" y="127.50"></text></g><g><title>region_scope_tree (938,698 samples, 0.34%)</title><rect x="66.3486%" y="117" width="0.3424%" height="15" fill="rgb(216,164,2)"/><text x="66.5986%" y="127.50"></text></g><g><title>check_impl_item_well_formed (11,910,596 samples, 4.34%)</title><rect x="62.3559%" y="133" width="4.3447%" height="15" fill="rgb(220,129,5)"/><text x="62.6059%" y="143.50">check..</text></g><g><title>param_env (805,481 samples, 0.29%)</title><rect x="68.4605%" y="117" width="0.2938%" height="15" fill="rgb(242,17,10)"/><text x="68.7105%" y="127.50"></text></g><g><title>check_item_well_formed (5,982,882 samples, 2.18%)</title><rect x="66.7006%" y="133" width="2.1824%" height="15" fill="rgb(242,107,0)"/><text x="66.9506%" y="143.50">c..</text></g><g><title>analysis (186,365,393 samples, 67.98%)</title><rect x="1.0250%" y="181" width="67.9818%" height="15" fill="rgb(251,28,31)"/><text x="1.2750%" y="191.50">analysis</text></g><g><title>type_check_crate (113,332,308 samples, 41.34%)</title><rect x="27.6658%" y="165" width="41.3410%" height="15" fill="rgb(233,223,10)"/><text x="27.9158%" y="175.50">type_check_crate</text></g><g><title>wf_checking (18,955,820 samples, 6.91%)</title><rect x="62.0922%" y="149" width="6.9146%" height="15" fill="rgb(215,21,27)"/><text x="62.3422%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (339,384 samples, 0.12%)</title><rect x="68.8831%" y="133" width="0.1238%" height="15" fill="rgb(232,23,21)"/><text x="69.1331%" y="143.50"></text></g><g><title>codegen_module (290,593 samples, 0.11%)</title><rect x="69.1971%" y="165" width="0.1060%" height="15" fill="rgb(244,5,23)"/><text x="69.4471%" y="175.50"></text></g><g><title>codegen_crate (829,808 samples, 0.30%)</title><rect x="69.0110%" y="181" width="0.3027%" height="15" fill="rgb(226,81,46)"/><text x="69.2610%" y="191.50"></text></g><g><title>LLVM_module_codegen (1,435,965 samples, 0.52%)</title><rect x="69.3295%" y="165" width="0.5238%" height="15" fill="rgb(247,70,30)"/><text x="69.5795%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,381,214 samples, 0.50%)</title><rect x="69.3495%" y="149" width="0.5038%" height="15" fill="rgb(212,68,19)"/><text x="69.5995%" y="159.50"></text></g><g><title>codegen_module_optimize (1,736,497 samples, 0.63%)</title><rect x="69.3137%" y="181" width="0.6334%" height="15" fill="rgb(240,187,13)"/><text x="69.5637%" y="191.50"></text></g><g><title>macro_expand_crate (38,237,834 samples, 13.95%)</title><rect x="70.1961%" y="165" width="13.9483%" height="15" fill="rgb(223,113,26)"/><text x="70.4461%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (38,223,424 samples, 13.94%)</title><rect x="70.2013%" y="149" width="13.9430%" height="15" fill="rgb(206,192,2)"/><text x="70.4513%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,324,193 samples, 0.48%)</title><rect x="83.6613%" y="133" width="0.4830%" height="15" fill="rgb(241,108,4)"/><text x="83.9113%" y="143.50"></text></g><g><title>late_resolve_crate (3,004,531 samples, 1.10%)</title><rect x="84.3023%" y="149" width="1.0960%" height="15" fill="rgb(247,173,49)"/><text x="84.5523%" y="159.50"></text></g><g><title>configure_and_expand (42,583,077 samples, 15.53%)</title><rect x="69.9471%" y="181" width="15.5333%" height="15" fill="rgb(224,114,35)"/><text x="70.1971%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,444,505 samples, 1.26%)</title><rect x="84.2240%" y="165" width="1.2565%" height="15" fill="rgb(245,159,27)"/><text x="84.4740%" y="175.50"></text></g><g><title>drop_ast (472,105 samples, 0.17%)</title><rect x="85.4804%" y="181" width="0.1722%" height="15" fill="rgb(245,172,44)"/><text x="85.7304%" y="191.50"></text></g><g><title>early_lint_checks (699,727 samples, 0.26%)</title><rect x="85.6581%" y="181" width="0.2552%" height="15" fill="rgb(236,23,11)"/><text x="85.9081%" y="191.50"></text></g><g><title>free_global_ctxt (3,531,385 samples, 1.29%)</title><rect x="85.9133%" y="181" width="1.2882%" height="15" fill="rgb(205,117,38)"/><text x="86.1633%" y="191.50"></text></g><g><title>exported_symbols (419,074 samples, 0.15%)</title><rect x="88.6666%" y="165" width="0.1529%" height="15" fill="rgb(237,72,25)"/><text x="88.9166%" y="175.50"></text></g><g><title>reachable_non_generics (332,083 samples, 0.12%)</title><rect x="88.6983%" y="149" width="0.1211%" height="15" fill="rgb(244,70,9)"/><text x="88.9483%" y="159.50"></text></g><g><title>reachable_set (304,423 samples, 0.11%)</title><rect x="88.7084%" y="133" width="0.1110%" height="15" fill="rgb(217,125,39)"/><text x="88.9584%" y="143.50"></text></g><g><title>is_sized_raw (284,064 samples, 0.10%)</title><rect x="92.0926%" y="133" width="0.1036%" height="15" fill="rgb(235,36,10)"/><text x="92.3426%" y="143.50"></text></g><g><title>layout_of (314,917 samples, 0.11%)</title><rect x="92.2831%" y="117" width="0.1149%" height="15" fill="rgb(251,123,47)"/><text x="92.5331%" y="127.50"></text></g><g><title>layout_of (592,718 samples, 0.22%)</title><rect x="92.1962%" y="133" width="0.2162%" height="15" fill="rgb(221,13,13)"/><text x="92.4462%" y="143.50"></text></g><g><title>layout_of (1,773,270 samples, 0.65%)</title><rect x="91.7896%" y="149" width="0.6468%" height="15" fill="rgb(238,131,9)"/><text x="92.0396%" y="159.50"></text></g><g><title>is_copy_raw (441,032 samples, 0.16%)</title><rect x="95.3735%" y="117" width="0.1609%" height="15" fill="rgb(211,50,8)"/><text x="95.6235%" y="127.50"></text></g><g><title>evaluate_obligation (333,851 samples, 0.12%)</title><rect x="95.4126%" y="101" width="0.1218%" height="15" fill="rgb(245,182,24)"/><text x="95.6626%" y="111.50"></text></g><g><title>needs_drop_raw (497,822 samples, 0.18%)</title><rect x="95.3531%" y="133" width="0.1816%" height="15" fill="rgb(242,14,37)"/><text x="95.6031%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,611,329 samples, 3.14%)</title><rect x="92.4364%" y="149" width="3.1412%" height="15" fill="rgb(246,228,12)"/><text x="92.6864%" y="159.50">mir..</text></g><g><title>optimized_mir (18,398,808 samples, 6.71%)</title><rect x="88.9113%" y="165" width="6.7115%" height="15" fill="rgb(213,55,15)"/><text x="89.1613%" y="175.50">optimized..</text></g><g><title>promoted_mir (294,151 samples, 0.11%)</title><rect x="95.6228%" y="165" width="0.1073%" height="15" fill="rgb(209,9,3)"/><text x="95.8728%" y="175.50"></text></g><g><title>generate_crate_metadata (23,441,774 samples, 8.55%)</title><rect x="87.2015%" y="181" width="8.5510%" height="15" fill="rgb(230,59,30)"/><text x="87.4515%" y="191.50">generate_cra..</text></g><g><title>hir_lowering (6,324,155 samples, 2.31%)</title><rect x="95.7525%" y="181" width="2.3069%" height="15" fill="rgb(209,121,21)"/><text x="96.0025%" y="191.50">h..</text></g><g><title>link_crate (1,250,032 samples, 0.46%)</title><rect x="98.0685%" y="165" width="0.4560%" height="15" fill="rgb(220,109,13)"/><text x="98.3185%" y="175.50"></text></g><g><title>link_binary (1,224,632 samples, 0.45%)</title><rect x="98.0778%" y="149" width="0.4467%" height="15" fill="rgb(232,18,1)"/><text x="98.3278%" y="159.50"></text></g><g><title>link_rlib (896,799 samples, 0.33%)</title><rect x="98.1974%" y="133" width="0.3271%" height="15" fill="rgb(215,41,42)"/><text x="98.4474%" y="143.50"></text></g><g><title>link (1,282,763 samples, 0.47%)</title><rect x="98.0594%" y="181" width="0.4679%" height="15" fill="rgb(224,123,36)"/><text x="98.3094%" y="191.50"></text></g><g><title>parse_crate (1,900,909 samples, 0.69%)</title><rect x="98.5273%" y="181" width="0.6934%" height="15" fill="rgb(240,125,3)"/><text x="98.7773%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,290,884 samples, 0.47%)</title><rect x="99.3105%" y="181" width="0.4709%" height="15" fill="rgb(205,98,50)"/><text x="99.5605%" y="191.50"></text></g><g><title>all (274,140,104 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (274,140,104 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (505,236 samples, 0.18%)</title><rect x="99.8157%" y="181" width="0.1843%" height="15" fill="rgb(213,199,42)"/><text x="100.0657%" y="191.50"></text></g></svg></svg>