<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (306,949,983 samples, 15.73%)</title><rect x="0.0430%" y="229" width="15.7331%" height="15" fill="rgb(227,0,7)"/><text x="0.2930%" y="239.50">LLVM_passes</text></g><g><title>is_copy_raw (2,545,425 samples, 0.13%)</title><rect x="19.9119%" y="101" width="0.1305%" height="15" fill="rgb(217,0,24)"/><text x="20.1619%" y="111.50"></text></g><g><title>evaluate_obligation (2,120,691 samples, 0.11%)</title><rect x="19.9337%" y="85" width="0.1087%" height="15" fill="rgb(221,193,54)"/><text x="20.1837%" y="95.50"></text></g><g><title>needs_drop_raw (3,862,733 samples, 0.20%)</title><rect x="19.8460%" y="117" width="0.1980%" height="15" fill="rgb(248,212,6)"/><text x="20.0960%" y="127.50"></text></g><g><title>thir_body (5,218,811 samples, 0.27%)</title><rect x="20.1491%" y="117" width="0.2675%" height="15" fill="rgb(208,68,35)"/><text x="20.3991%" y="127.50"></text></g><g><title>mir_const (32,456,481 samples, 1.66%)</title><rect x="18.7566%" y="165" width="1.6636%" height="15" fill="rgb(232,128,0)"/><text x="19.0066%" y="175.50"></text></g><g><title>unsafety_check_result (28,261,218 samples, 1.45%)</title><rect x="18.9717%" y="149" width="1.4486%" height="15" fill="rgb(207,160,47)"/><text x="19.2217%" y="159.50"></text></g><g><title>mir_built (25,412,325 samples, 1.30%)</title><rect x="19.1177%" y="133" width="1.3025%" height="15" fill="rgb(228,23,34)"/><text x="19.3677%" y="143.50"></text></g><g><title>mir_promoted (37,110,122 samples, 1.90%)</title><rect x="18.5680%" y="181" width="1.9021%" height="15" fill="rgb(218,30,26)"/><text x="18.8180%" y="191.50">m..</text></g><g><title>type_op_prove_predicate (6,800,709 samples, 0.35%)</title><rect x="20.6413%" y="181" width="0.3486%" height="15" fill="rgb(220,122,19)"/><text x="20.8913%" y="191.50"></text></g><g><title>MIR_borrow_checking (100,835,313 samples, 5.17%)</title><rect x="15.8230%" y="213" width="5.1685%" height="15" fill="rgb(250,228,42)"/><text x="16.0730%" y="223.50">MIR_bo..</text></g><g><title>mir_borrowck (100,385,191 samples, 5.15%)</title><rect x="15.8461%" y="197" width="5.1454%" height="15" fill="rgb(240,193,28)"/><text x="16.0961%" y="207.50">mir_bo..</text></g><g><title>misc_checking_1 (3,311,413 samples, 0.17%)</title><rect x="21.0374%" y="213" width="0.1697%" height="15" fill="rgb(216,20,37)"/><text x="21.2874%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (2,014,990 samples, 0.10%)</title><rect x="21.2072%" y="197" width="0.1033%" height="15" fill="rgb(206,188,39)"/><text x="21.4572%" y="207.50"></text></g><g><title>misc_checking_2 (4,785,518 samples, 0.25%)</title><rect x="21.2071%" y="213" width="0.2453%" height="15" fill="rgb(217,207,13)"/><text x="21.4571%" y="223.50"></text></g><g><title>match_checking (2,768,428 samples, 0.14%)</title><rect x="21.3105%" y="197" width="0.1419%" height="15" fill="rgb(231,73,38)"/><text x="21.5605%" y="207.50"></text></g><g><title>check_match (2,657,756 samples, 0.14%)</title><rect x="21.3162%" y="181" width="0.1362%" height="15" fill="rgb(225,20,46)"/><text x="21.5662%" y="191.50"></text></g><g><title>crate_lints (5,214,662 samples, 0.27%)</title><rect x="21.5718%" y="181" width="0.2673%" height="15" fill="rgb(210,31,41)"/><text x="21.8218%" y="191.50"></text></g><g><title>lint_checking (7,346,054 samples, 0.38%)</title><rect x="21.5716%" y="197" width="0.3765%" height="15" fill="rgb(221,200,47)"/><text x="21.8216%" y="207.50"></text></g><g><title>module_lints (2,128,842 samples, 0.11%)</title><rect x="21.8390%" y="181" width="0.1091%" height="15" fill="rgb(226,26,5)"/><text x="22.0890%" y="191.50"></text></g><g><title>lint_mod (2,119,531 samples, 0.11%)</title><rect x="21.8395%" y="165" width="0.1086%" height="15" fill="rgb(249,33,26)"/><text x="22.0895%" y="175.50"></text></g><g><title>privacy_checking_modules (3,103,891 samples, 0.16%)</title><rect x="22.0060%" y="197" width="0.1591%" height="15" fill="rgb(235,183,28)"/><text x="22.2560%" y="207.50"></text></g><g><title>check_mod_privacy (3,098,471 samples, 0.16%)</title><rect x="22.0063%" y="181" width="0.1588%" height="15" fill="rgb(221,5,38)"/><text x="22.2563%" y="191.50"></text></g><g><title>misc_checking_3 (13,934,880 samples, 0.71%)</title><rect x="21.4524%" y="213" width="0.7143%" height="15" fill="rgb(247,18,42)"/><text x="21.7024%" y="223.50"></text></g><g><title>impl_parent (3,255,882 samples, 0.17%)</title><rect x="22.5214%" y="149" width="0.1669%" height="15" fill="rgb(241,131,45)"/><text x="22.7714%" y="159.50"></text></g><g><title>impl_trait_ref (6,472,006 samples, 0.33%)</title><rect x="22.6883%" y="149" width="0.3317%" height="15" fill="rgb(249,31,29)"/><text x="22.9383%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,070,722 samples, 0.26%)</title><rect x="22.7601%" y="133" width="0.2599%" height="15" fill="rgb(225,111,53)"/><text x="23.0101%" y="143.50"></text></g><g><title>coherent_trait (17,709,288 samples, 0.91%)</title><rect x="22.1779%" y="181" width="0.9077%" height="15" fill="rgb(238,160,17)"/><text x="22.4279%" y="191.50"></text></g><g><title>specialization_graph_of (17,032,912 samples, 0.87%)</title><rect x="22.2126%" y="165" width="0.8730%" height="15" fill="rgb(214,148,48)"/><text x="22.4626%" y="175.50"></text></g><g><title>coherence_checking (17,821,310 samples, 0.91%)</title><rect x="22.1765%" y="197" width="0.9135%" height="15" fill="rgb(232,36,49)"/><text x="22.4265%" y="207.50"></text></g><g><title>evaluate_obligation (5,272,912 samples, 0.27%)</title><rect x="25.8346%" y="149" width="0.2703%" height="15" fill="rgb(209,103,24)"/><text x="26.0846%" y="159.50"></text></g><g><title>evaluate_obligation (2,234,297 samples, 0.11%)</title><rect x="28.8587%" y="133" width="0.1145%" height="15" fill="rgb(229,88,8)"/><text x="29.1087%" y="143.50"></text></g><g><title>typeck (54,159,835 samples, 2.78%)</title><rect x="26.2764%" y="149" width="2.7760%" height="15" fill="rgb(213,181,19)"/><text x="26.5264%" y="159.50">ty..</text></g><g><title>item_bodies_checking (116,411,368 samples, 5.97%)</title><rect x="23.0933%" y="197" width="5.9668%" height="15" fill="rgb(254,191,54)"/><text x="23.3433%" y="207.50">item_bod..</text></g><g><title>typeck_item_bodies (116,407,768 samples, 5.97%)</title><rect x="23.0935%" y="181" width="5.9666%" height="15" fill="rgb(241,83,37)"/><text x="23.3435%" y="191.50">typeck_i..</text></g><g><title>typeck (116,124,864 samples, 5.95%)</title><rect x="23.1080%" y="165" width="5.9521%" height="15" fill="rgb(233,36,39)"/><text x="23.3580%" y="175.50">typeck</text></g><g><title>item_types_checking (5,909,801 samples, 0.30%)</title><rect x="29.0601%" y="197" width="0.3029%" height="15" fill="rgb(226,3,54)"/><text x="29.3101%" y="207.50"></text></g><g><title>check_mod_item_types (5,901,181 samples, 0.30%)</title><rect x="29.0606%" y="181" width="0.3025%" height="15" fill="rgb(245,192,40)"/><text x="29.3106%" y="191.50"></text></g><g><title>typeck (3,817,830 samples, 0.20%)</title><rect x="29.1673%" y="165" width="0.1957%" height="15" fill="rgb(238,167,29)"/><text x="29.4173%" y="175.50"></text></g><g><title>type_collecting (5,071,981 samples, 0.26%)</title><rect x="29.3633%" y="197" width="0.2600%" height="15" fill="rgb(232,182,51)"/><text x="29.6133%" y="207.50"></text></g><g><title>collect_mod_item_types (5,054,911 samples, 0.26%)</title><rect x="29.3641%" y="181" width="0.2591%" height="15" fill="rgb(231,60,39)"/><text x="29.6141%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,948,589 samples, 0.36%)</title><rect x="29.6505%" y="181" width="0.3562%" height="15" fill="rgb(208,69,12)"/><text x="29.9005%" y="191.50"></text></g><g><title>evaluate_obligation (2,404,450 samples, 0.12%)</title><rect x="30.1465%" y="165" width="0.1232%" height="15" fill="rgb(235,93,37)"/><text x="30.3965%" y="175.50"></text></g><g><title>analysis (285,030,493 samples, 14.61%)</title><rect x="15.7762%" y="229" width="14.6096%" height="15" fill="rgb(213,116,39)"/><text x="16.0262%" y="239.50">analysis</text></g><g><title>type_check_crate (160,353,860 samples, 8.22%)</title><rect x="22.1667%" y="213" width="8.2192%" height="15" fill="rgb(222,207,29)"/><text x="22.4167%" y="223.50">type_check_..</text></g><g><title>wf_checking (14,855,898 samples, 0.76%)</title><rect x="29.6243%" y="197" width="0.7615%" height="15" fill="rgb(206,96,30)"/><text x="29.8743%" y="207.50"></text></g><g><title>check_item_well_formed (7,397,625 samples, 0.38%)</title><rect x="30.0066%" y="181" width="0.3792%" height="15" fill="rgb(218,138,4)"/><text x="30.2566%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (7,094,994 samples, 0.36%)</title><rect x="41.3452%" y="197" width="0.3637%" height="15" fill="rgb(250,191,14)"/><text x="41.5952%" y="207.50"></text></g><g><title>const_caller_location (3,227,143 samples, 0.17%)</title><rect x="41.7089%" y="197" width="0.1654%" height="15" fill="rgb(239,60,40)"/><text x="41.9589%" y="207.50"></text></g><g><title>layout_of (4,317,295 samples, 0.22%)</title><rect x="42.5199%" y="181" width="0.2213%" height="15" fill="rgb(206,27,48)"/><text x="42.7699%" y="191.50"></text></g><g><title>predicates_of (3,586,844 samples, 0.18%)</title><rect x="43.0947%" y="165" width="0.1838%" height="15" fill="rgb(225,35,8)"/><text x="43.3447%" y="175.50"></text></g><g><title>predicates_defined_on (2,620,283 samples, 0.13%)</title><rect x="43.1442%" y="149" width="0.1343%" height="15" fill="rgb(250,213,24)"/><text x="43.3942%" y="159.50"></text></g><g><title>param_env (10,497,798 samples, 0.54%)</title><rect x="42.7412%" y="181" width="0.5381%" height="15" fill="rgb(247,123,22)"/><text x="42.9912%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,667,828 samples, 0.14%)</title><rect x="43.2793%" y="181" width="0.1367%" height="15" fill="rgb(231,138,38)"/><text x="43.5293%" y="191.50"></text></g><g><title>normalize_projection_ty (2,038,133 samples, 0.10%)</title><rect x="43.3116%" y="165" width="0.1045%" height="15" fill="rgb(231,145,46)"/><text x="43.5616%" y="175.50"></text></g><g><title>fn_abi_of_instance (30,133,780 samples, 1.54%)</title><rect x="41.8773%" y="197" width="1.5445%" height="15" fill="rgb(251,118,11)"/><text x="42.1273%" y="207.50"></text></g><g><title>layout_of (2,099,705 samples, 0.11%)</title><rect x="43.6875%" y="181" width="0.1076%" height="15" fill="rgb(217,147,25)"/><text x="43.9375%" y="191.50"></text></g><g><title>layout_of (5,780,080 samples, 0.30%)</title><rect x="43.5098%" y="197" width="0.2963%" height="15" fill="rgb(247,81,37)"/><text x="43.7598%" y="207.50"></text></g><g><title>symbol_name (2,503,858 samples, 0.13%)</title><rect x="43.8073%" y="197" width="0.1283%" height="15" fill="rgb(209,12,38)"/><text x="44.0573%" y="207.50"></text></g><g><title>codegen_module (261,551,939 samples, 13.41%)</title><rect x="30.5593%" y="213" width="13.4062%" height="15" fill="rgb(227,1,9)"/><text x="30.8093%" y="223.50">codegen_module</text></g><g><title>codegen_crate (265,023,361 samples, 13.58%)</title><rect x="30.3861%" y="229" width="13.5841%" height="15" fill="rgb(248,47,43)"/><text x="30.6361%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (819,874,824 samples, 42.02%)</title><rect x="43.9859%" y="213" width="42.0238%" height="15" fill="rgb(221,10,30)"/><text x="44.2359%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (785,088,526 samples, 40.24%)</title><rect x="45.7689%" y="197" width="40.2408%" height="15" fill="rgb(210,229,1)"/><text x="46.0189%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (858,879,517 samples, 44.02%)</title><rect x="43.9702%" y="229" width="44.0230%" height="15" fill="rgb(222,148,37)"/><text x="44.2202%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (38,698,880 samples, 1.98%)</title><rect x="86.0097%" y="213" width="1.9836%" height="15" fill="rgb(234,67,33)"/><text x="86.2597%" y="223.50">L..</text></g><g><title>macro_expand_crate (24,928,589 samples, 1.28%)</title><rect x="88.0283%" y="213" width="1.2777%" height="15" fill="rgb(247,98,35)"/><text x="88.2783%" y="223.50"></text></g><g><title>expand_crate (24,918,799 samples, 1.28%)</title><rect x="88.0288%" y="197" width="1.2772%" height="15" fill="rgb(247,138,52)"/><text x="88.2788%" y="207.50"></text></g><g><title>late_resolve_crate (7,776,579 samples, 0.40%)</title><rect x="89.3284%" y="197" width="0.3986%" height="15" fill="rgb(213,79,30)"/><text x="89.5784%" y="207.50"></text></g><g><title>configure_and_expand (34,159,533 samples, 1.75%)</title><rect x="87.9933%" y="229" width="1.7509%" height="15" fill="rgb(246,177,23)"/><text x="88.2433%" y="239.50"></text></g><g><title>resolve_crate (8,511,596 samples, 0.44%)</title><rect x="89.3079%" y="213" width="0.4363%" height="15" fill="rgb(230,62,27)"/><text x="89.5579%" y="223.50"></text></g><g><title>free_global_ctxt (12,003,311 samples, 0.62%)</title><rect x="89.8311%" y="229" width="0.6152%" height="15" fill="rgb(216,154,8)"/><text x="90.0811%" y="239.50"></text></g><g><title>item_attrs (2,320,713 samples, 0.12%)</title><rect x="91.1988%" y="133" width="0.1190%" height="15" fill="rgb(244,35,45)"/><text x="91.4488%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,199,792 samples, 0.11%)</title><rect x="91.2050%" y="117" width="0.1128%" height="15" fill="rgb(251,115,12)"/><text x="91.4550%" y="127.50"></text></g><g><title>codegen_fn_attrs (4,075,143 samples, 0.21%)</title><rect x="91.1628%" y="149" width="0.2089%" height="15" fill="rgb(240,54,50)"/><text x="91.4128%" y="159.50"></text></g><g><title>mir_shims (2,254,764 samples, 0.12%)</title><rect x="91.4157%" y="149" width="0.1156%" height="15" fill="rgb(233,84,52)"/><text x="91.6657%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,000,206 samples, 0.31%)</title><rect x="91.9122%" y="133" width="0.3075%" height="15" fill="rgb(207,117,47)"/><text x="92.1622%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,022,339 samples, 0.46%)</title><rect x="92.2198%" y="133" width="0.4625%" height="15" fill="rgb(249,43,39)"/><text x="92.4698%" y="143.50"></text></g><g><title>optimized_mir (23,280,256 samples, 1.19%)</title><rect x="91.5313%" y="149" width="1.1933%" height="15" fill="rgb(209,38,44)"/><text x="91.7813%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (7,528,659 samples, 0.39%)</title><rect x="92.8935%" y="133" width="0.3859%" height="15" fill="rgb(236,212,23)"/><text x="93.1435%" y="143.50"></text></g><g><title>needs_drop_raw (2,265,134 samples, 0.12%)</title><rect x="93.3599%" y="133" width="0.1161%" height="15" fill="rgb(242,79,21)"/><text x="93.6099%" y="143.50"></text></g><g><title>specialization_graph_of (2,760,651 samples, 0.14%)</title><rect x="93.4770%" y="133" width="0.1415%" height="15" fill="rgb(211,96,35)"/><text x="93.7270%" y="143.50"></text></g><g><title>resolve_instance (18,453,580 samples, 0.95%)</title><rect x="92.7246%" y="149" width="0.9459%" height="15" fill="rgb(253,215,40)"/><text x="92.9746%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,657,466 samples, 0.19%)</title><rect x="93.8119%" y="69" width="0.1875%" height="15" fill="rgb(211,81,21)"/><text x="94.0619%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,654,406 samples, 0.19%)</title><rect x="93.8121%" y="53" width="0.1873%" height="15" fill="rgb(208,190,38)"/><text x="94.0621%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,647,246 samples, 0.19%)</title><rect x="93.8124%" y="37" width="0.1869%" height="15" fill="rgb(235,213,38)"/><text x="94.0624%" y="47.50"></text></g><g><title>eval_to_const_value_raw (5,654,486 samples, 0.29%)</title><rect x="93.7100%" y="133" width="0.2898%" height="15" fill="rgb(237,122,38)"/><text x="93.9600%" y="143.50"></text></g><g><title>eval_to_const_value_raw (5,620,865 samples, 0.29%)</title><rect x="93.7117%" y="117" width="0.2881%" height="15" fill="rgb(244,218,35)"/><text x="93.9617%" y="127.50"></text></g><g><title>eval_to_allocation_raw (5,557,474 samples, 0.28%)</title><rect x="93.7149%" y="101" width="0.2849%" height="15" fill="rgb(240,68,47)"/><text x="93.9649%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,678,847 samples, 0.19%)</title><rect x="93.8112%" y="85" width="0.1886%" height="15" fill="rgb(210,16,53)"/><text x="94.0612%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,133,621 samples, 0.31%)</title><rect x="93.6962%" y="149" width="0.3144%" height="15" fill="rgb(235,124,12)"/><text x="93.9462%" y="159.50"></text></g><g><title>upstream_monomorphizations_for (3,095,601 samples, 0.16%)</title><rect x="94.0118%" y="149" width="0.1587%" height="15" fill="rgb(224,169,11)"/><text x="94.2618%" y="159.50"></text></g><g><title>upstream_monomorphizations (3,019,320 samples, 0.15%)</title><rect x="94.0157%" y="133" width="0.1548%" height="15" fill="rgb(250,166,2)"/><text x="94.2657%" y="143.50"></text></g><g><title>exported_symbols (2,646,937 samples, 0.14%)</title><rect x="94.0348%" y="117" width="0.1357%" height="15" fill="rgb(242,216,29)"/><text x="94.2848%" y="127.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,641,036 samples, 0.14%)</title><rect x="94.0351%" y="101" width="0.1354%" height="15" fill="rgb(230,116,27)"/><text x="94.2851%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (69,419,257 samples, 3.56%)</title><rect x="90.7160%" y="165" width="3.5582%" height="15" fill="rgb(228,99,48)"/><text x="90.9660%" y="175.50">mono..</text></g><g><title>vtable_entries (2,022,908 samples, 0.10%)</title><rect x="94.1705%" y="149" width="0.1037%" height="15" fill="rgb(253,11,6)"/><text x="94.4205%" y="159.50"></text></g><g><title>monomorphization_collector (69,559,749 samples, 3.57%)</title><rect x="90.7157%" y="181" width="3.5654%" height="15" fill="rgb(247,143,39)"/><text x="90.9657%" y="191.50">mono..</text></g><g><title>assert_symbols_are_distinct (7,729,469 samples, 0.40%)</title><rect x="94.2818%" y="165" width="0.3962%" height="15" fill="rgb(236,97,10)"/><text x="94.5318%" y="175.50"></text></g><g><title>symbol_name (6,944,948 samples, 0.36%)</title><rect x="94.3220%" y="149" width="0.3560%" height="15" fill="rgb(233,208,19)"/><text x="94.5720%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (80,584,750 samples, 4.13%)</title><rect x="90.7122%" y="197" width="4.1305%" height="15" fill="rgb(216,164,2)"/><text x="90.9622%" y="207.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (10,956,861 samples, 0.56%)</title><rect x="94.2811%" y="181" width="0.5616%" height="15" fill="rgb(220,129,5)"/><text x="94.5311%" y="191.50"></text></g><g><title>cgu_partitioning (3,213,962 samples, 0.16%)</title><rect x="94.6780%" y="165" width="0.1647%" height="15" fill="rgb(242,17,10)"/><text x="94.9280%" y="175.50"></text></g><g><title>exported_symbols (81,277,827 samples, 4.17%)</title><rect x="90.6958%" y="213" width="4.1660%" height="15" fill="rgb(242,107,0)"/><text x="90.9458%" y="223.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (10,310,260 samples, 0.53%)</title><rect x="95.3844%" y="197" width="0.5285%" height="15" fill="rgb(251,28,31)"/><text x="95.6344%" y="207.50"></text></g><g><title>optimized_mir (20,309,962 samples, 1.04%)</title><rect x="94.8817%" y="213" width="1.0410%" height="15" fill="rgb(233,223,10)"/><text x="95.1317%" y="223.50"></text></g><g><title>generate_crate_metadata (107,782,753 samples, 5.52%)</title><rect x="90.4463%" y="229" width="5.5246%" height="15" fill="rgb(215,21,27)"/><text x="90.6963%" y="239.50">generat..</text></g><g><title>hir_lowering (9,583,906 samples, 0.49%)</title><rect x="95.9709%" y="229" width="0.4912%" height="15" fill="rgb(232,23,21)"/><text x="96.2209%" y="239.50"></text></g><g><title>finish_ongoing_codegen (57,165,624 samples, 2.93%)</title><rect x="96.4629%" y="213" width="2.9301%" height="15" fill="rgb(244,5,23)"/><text x="96.7129%" y="223.50">fi..</text></g><g><title>link_crate (7,887,489 samples, 0.40%)</title><rect x="99.3930%" y="213" width="0.4043%" height="15" fill="rgb(226,81,46)"/><text x="99.6430%" y="223.50"></text></g><g><title>link_binary (7,820,808 samples, 0.40%)</title><rect x="99.3964%" y="197" width="0.4009%" height="15" fill="rgb(247,70,30)"/><text x="99.6464%" y="207.50"></text></g><g><title>link_rlib (6,507,566 samples, 0.33%)</title><rect x="99.4637%" y="181" width="0.3336%" height="15" fill="rgb(212,68,19)"/><text x="99.7137%" y="191.50"></text></g><g><title>link (65,081,644 samples, 3.34%)</title><rect x="96.4621%" y="229" width="3.3358%" height="15" fill="rgb(240,187,13)"/><text x="96.7121%" y="239.50">link</text></g><g><title>self_profile_alloc_query_strings (2,853,139 samples, 0.15%)</title><rect x="99.8194%" y="229" width="0.1462%" height="15" fill="rgb(223,113,26)"/><text x="100.0694%" y="239.50"></text></g><g><title>all (1,950,977,736 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (1,950,977,736 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>