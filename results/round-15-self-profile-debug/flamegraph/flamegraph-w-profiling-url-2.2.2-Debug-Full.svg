<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (225,774,572 samples, 10.76%)</title><rect x="0.0317%" y="181" width="10.7553%" height="15" fill="rgb(227,0,7)"/><text x="0.2817%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (2,996,289 samples, 0.14%)</title><rect x="17.3321%" y="53" width="0.1427%" height="15" fill="rgb(217,0,24)"/><text x="17.5821%" y="63.50"></text></g><g><title>evaluate_obligation (2,486,685 samples, 0.12%)</title><rect x="17.3564%" y="37" width="0.1185%" height="15" fill="rgb(221,193,54)"/><text x="17.6064%" y="47.50"></text></g><g><title>needs_drop_raw (4,039,940 samples, 0.19%)</title><rect x="17.2853%" y="69" width="0.1925%" height="15" fill="rgb(248,212,6)"/><text x="17.5353%" y="79.50"></text></g><g><title>resolve_instance (2,691,609 samples, 0.13%)</title><rect x="17.4792%" y="69" width="0.1282%" height="15" fill="rgb(208,68,35)"/><text x="17.7292%" y="79.50"></text></g><g><title>thir_body (9,103,097 samples, 0.43%)</title><rect x="17.6147%" y="69" width="0.4336%" height="15" fill="rgb(232,128,0)"/><text x="17.8647%" y="79.50"></text></g><g><title>mir_const (49,498,929 samples, 2.36%)</title><rect x="15.6951%" y="117" width="2.3580%" height="15" fill="rgb(207,160,47)"/><text x="15.9451%" y="127.50">m..</text></g><g><title>unsafety_check_result (42,928,958 samples, 2.05%)</title><rect x="16.0081%" y="101" width="2.0450%" height="15" fill="rgb(228,23,34)"/><text x="16.2581%" y="111.50">u..</text></g><g><title>mir_built (38,408,205 samples, 1.83%)</title><rect x="16.2235%" y="85" width="1.8297%" height="15" fill="rgb(218,30,26)"/><text x="16.4735%" y="95.50">m..</text></g><g><title>mir_promoted (56,123,523 samples, 2.67%)</title><rect x="15.4205%" y="133" width="2.6736%" height="15" fill="rgb(220,122,19)"/><text x="15.6705%" y="143.50">mi..</text></g><g><title>type_op_normalize_fn_sig (2,411,889 samples, 0.11%)</title><rect x="18.1696%" y="133" width="0.1149%" height="15" fill="rgb(250,228,42)"/><text x="18.4196%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,954,190 samples, 0.43%)</title><rect x="18.3389%" y="133" width="0.4266%" height="15" fill="rgb(240,193,28)"/><text x="18.5889%" y="143.50"></text></g><g><title>MIR_borrow_checking (166,032,443 samples, 7.91%)</title><rect x="10.8580%" y="165" width="7.9093%" height="15" fill="rgb(216,20,37)"/><text x="11.1080%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (165,460,108 samples, 7.88%)</title><rect x="10.8853%" y="149" width="7.8821%" height="15" fill="rgb(206,188,39)"/><text x="11.1353%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,148,043 samples, 0.10%)</title><rect x="18.8283%" y="149" width="0.1023%" height="15" fill="rgb(217,207,13)"/><text x="19.0783%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,314,064 samples, 0.11%)</title><rect x="18.9760%" y="149" width="0.1102%" height="15" fill="rgb(231,73,38)"/><text x="19.2260%" y="159.50"></text></g><g><title>misc_checking_1 (5,568,630 samples, 0.27%)</title><rect x="18.8267%" y="165" width="0.2653%" height="15" fill="rgb(225,20,46)"/><text x="19.0767%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,317,046 samples, 0.16%)</title><rect x="19.0920%" y="149" width="0.1580%" height="15" fill="rgb(210,31,41)"/><text x="19.3420%" y="159.50"></text></g><g><title>check_mod_liveness (2,692,119 samples, 0.13%)</title><rect x="19.1218%" y="133" width="0.1282%" height="15" fill="rgb(221,200,47)"/><text x="19.3718%" y="143.50"></text></g><g><title>misc_checking_2 (8,014,066 samples, 0.38%)</title><rect x="19.0919%" y="165" width="0.3818%" height="15" fill="rgb(226,26,5)"/><text x="19.3419%" y="175.50"></text></g><g><title>match_checking (4,695,090 samples, 0.22%)</title><rect x="19.2500%" y="149" width="0.2237%" height="15" fill="rgb(249,33,26)"/><text x="19.5000%" y="159.50"></text></g><g><title>check_match (4,544,129 samples, 0.22%)</title><rect x="19.2572%" y="133" width="0.2165%" height="15" fill="rgb(235,183,28)"/><text x="19.5072%" y="143.50"></text></g><g><title>crate_lints (6,171,387 samples, 0.29%)</title><rect x="19.6047%" y="133" width="0.2940%" height="15" fill="rgb(221,5,38)"/><text x="19.8547%" y="143.50"></text></g><g><title>lint_checking (9,639,994 samples, 0.46%)</title><rect x="19.6046%" y="149" width="0.4592%" height="15" fill="rgb(247,18,42)"/><text x="19.8546%" y="159.50"></text></g><g><title>module_lints (3,466,377 samples, 0.17%)</title><rect x="19.8987%" y="133" width="0.1651%" height="15" fill="rgb(241,131,45)"/><text x="20.1487%" y="143.50"></text></g><g><title>lint_mod (3,457,427 samples, 0.16%)</title><rect x="19.8992%" y="117" width="0.1647%" height="15" fill="rgb(249,31,29)"/><text x="20.1492%" y="127.50"></text></g><g><title>privacy_checking_modules (5,640,399 samples, 0.27%)</title><rect x="20.1246%" y="149" width="0.2687%" height="15" fill="rgb(225,111,53)"/><text x="20.3746%" y="159.50"></text></g><g><title>check_mod_privacy (5,634,259 samples, 0.27%)</title><rect x="20.1249%" y="133" width="0.2684%" height="15" fill="rgb(238,160,17)"/><text x="20.3749%" y="143.50"></text></g><g><title>misc_checking_3 (19,335,346 samples, 0.92%)</title><rect x="19.4737%" y="165" width="0.9211%" height="15" fill="rgb(214,148,48)"/><text x="19.7237%" y="175.50"></text></g><g><title>impl_parent (3,696,022 samples, 0.18%)</title><rect x="20.6957%" y="101" width="0.1761%" height="15" fill="rgb(232,36,49)"/><text x="20.9457%" y="111.50"></text></g><g><title>impl_trait_ref (6,448,108 samples, 0.31%)</title><rect x="20.8718%" y="101" width="0.3072%" height="15" fill="rgb(209,103,24)"/><text x="21.1218%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,124,708 samples, 0.24%)</title><rect x="20.9349%" y="85" width="0.2441%" height="15" fill="rgb(229,88,8)"/><text x="21.1849%" y="95.50"></text></g><g><title>coherent_trait (17,566,648 samples, 0.84%)</title><rect x="20.4074%" y="133" width="0.8368%" height="15" fill="rgb(213,181,19)"/><text x="20.6574%" y="143.50"></text></g><g><title>specialization_graph_of (16,820,710 samples, 0.80%)</title><rect x="20.4430%" y="117" width="0.8013%" height="15" fill="rgb(254,191,54)"/><text x="20.6930%" y="127.50"></text></g><g><title>coherence_checking (17,724,040 samples, 0.84%)</title><rect x="20.4062%" y="149" width="0.8443%" height="15" fill="rgb(241,83,37)"/><text x="20.6562%" y="159.50"></text></g><g><title>evaluate_obligation (9,539,391 samples, 0.45%)</title><rect x="26.2448%" y="101" width="0.4544%" height="15" fill="rgb(233,36,39)"/><text x="26.4948%" y="111.50"></text></g><g><title>evaluate_obligation (6,820,427 samples, 0.32%)</title><rect x="30.8872%" y="85" width="0.3249%" height="15" fill="rgb(226,3,54)"/><text x="31.1372%" y="95.50"></text></g><g><title>typeck (93,333,658 samples, 4.45%)</title><rect x="26.8897%" y="101" width="4.4462%" height="15" fill="rgb(245,192,40)"/><text x="27.1397%" y="111.50">typeck</text></g><g><title>item_bodies_checking (212,006,255 samples, 10.10%)</title><rect x="21.2545%" y="149" width="10.0994%" height="15" fill="rgb(238,167,29)"/><text x="21.5045%" y="159.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (212,003,725 samples, 10.10%)</title><rect x="21.2546%" y="133" width="10.0993%" height="15" fill="rgb(232,182,51)"/><text x="21.5046%" y="143.50">typeck_item_bod..</text></g><g><title>typeck (211,650,820 samples, 10.08%)</title><rect x="21.2714%" y="117" width="10.0825%" height="15" fill="rgb(231,60,39)"/><text x="21.5214%" y="127.50">typeck</text></g><g><title>item_types_checking (3,688,800 samples, 0.18%)</title><rect x="31.3539%" y="149" width="0.1757%" height="15" fill="rgb(208,69,12)"/><text x="31.6039%" y="159.50"></text></g><g><title>check_mod_item_types (3,680,750 samples, 0.18%)</title><rect x="31.3543%" y="133" width="0.1753%" height="15" fill="rgb(235,93,37)"/><text x="31.6043%" y="143.50"></text></g><g><title>type_collecting (5,986,923 samples, 0.29%)</title><rect x="31.5300%" y="149" width="0.2852%" height="15" fill="rgb(213,116,39)"/><text x="31.7800%" y="159.50"></text></g><g><title>collect_mod_item_types (5,976,693 samples, 0.28%)</title><rect x="31.5305%" y="133" width="0.2847%" height="15" fill="rgb(222,207,29)"/><text x="31.7805%" y="143.50"></text></g><g><title>region_scope_tree (2,263,036 samples, 0.11%)</title><rect x="32.2687%" y="117" width="0.1078%" height="15" fill="rgb(206,96,30)"/><text x="32.5187%" y="127.50"></text></g><g><title>check_impl_item_well_formed (11,084,937 samples, 0.53%)</title><rect x="31.8519%" y="133" width="0.5281%" height="15" fill="rgb(218,138,4)"/><text x="32.1019%" y="143.50"></text></g><g><title>check_item_well_formed (6,125,938 samples, 0.29%)</title><rect x="32.3799%" y="133" width="0.2918%" height="15" fill="rgb(250,191,14)"/><text x="32.6299%" y="143.50"></text></g><g><title>analysis (459,517,309 samples, 21.89%)</title><rect x="10.7870%" y="181" width="21.8902%" height="15" fill="rgb(239,60,40)"/><text x="11.0370%" y="191.50">analysis</text></g><g><title>type_check_crate (257,830,464 samples, 12.28%)</title><rect x="20.3948%" y="165" width="12.2824%" height="15" fill="rgb(206,27,48)"/><text x="20.6448%" y="175.50">type_check_crate</text></g><g><title>wf_checking (18,068,403 samples, 0.86%)</title><rect x="31.8164%" y="149" width="0.8607%" height="15" fill="rgb(225,35,8)"/><text x="32.0664%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (2,754,113 samples, 0.13%)</title><rect x="41.7563%" y="149" width="0.1312%" height="15" fill="rgb(250,213,24)"/><text x="42.0063%" y="159.50"></text></g><g><title>const_caller_location (5,153,276 samples, 0.25%)</title><rect x="41.8875%" y="149" width="0.2455%" height="15" fill="rgb(247,123,22)"/><text x="42.1375%" y="159.50"></text></g><g><title>layout_of (2,359,326 samples, 0.11%)</title><rect x="42.7057%" y="133" width="0.1124%" height="15" fill="rgb(231,138,38)"/><text x="42.9557%" y="143.50"></text></g><g><title>predicates_of (3,049,000 samples, 0.15%)</title><rect x="43.1081%" y="117" width="0.1452%" height="15" fill="rgb(231,145,46)"/><text x="43.3581%" y="127.50"></text></g><g><title>predicates_defined_on (2,214,142 samples, 0.11%)</title><rect x="43.1479%" y="101" width="0.1055%" height="15" fill="rgb(251,118,11)"/><text x="43.3979%" y="111.50"></text></g><g><title>param_env (9,156,755 samples, 0.44%)</title><rect x="42.8181%" y="133" width="0.4362%" height="15" fill="rgb(217,147,25)"/><text x="43.0681%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,365,486 samples, 0.11%)</title><rect x="43.2543%" y="133" width="0.1127%" height="15" fill="rgb(247,81,37)"/><text x="43.5043%" y="143.50"></text></g><g><title>fn_abi_of_instance (25,983,874 samples, 1.24%)</title><rect x="42.1366%" y="149" width="1.2378%" height="15" fill="rgb(209,12,38)"/><text x="42.3866%" y="159.50"></text></g><g><title>layout_of (3,170,912 samples, 0.15%)</title><rect x="43.4349%" y="149" width="0.1511%" height="15" fill="rgb(227,1,9)"/><text x="43.6849%" y="159.50"></text></g><g><title>symbol_name (2,727,533 samples, 0.13%)</title><rect x="43.5872%" y="149" width="0.1299%" height="15" fill="rgb(248,47,43)"/><text x="43.8372%" y="159.50"></text></g><g><title>codegen_module (228,769,453 samples, 10.90%)</title><rect x="32.8549%" y="165" width="10.8980%" height="15" fill="rgb(221,10,30)"/><text x="33.1049%" y="175.50">codegen_module</text></g><g><title>codegen_crate (232,749,597 samples, 11.09%)</title><rect x="32.6778%" y="181" width="11.0876%" height="15" fill="rgb(210,229,1)"/><text x="32.9278%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (898,789,519 samples, 42.82%)</title><rect x="43.7772%" y="165" width="42.8159%" height="15" fill="rgb(222,148,37)"/><text x="44.0272%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (843,263,427 samples, 40.17%)</title><rect x="46.4223%" y="149" width="40.1708%" height="15" fill="rgb(234,67,33)"/><text x="46.6723%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (933,399,022 samples, 44.46%)</title><rect x="43.7653%" y="181" width="44.4646%" height="15" fill="rgb(247,98,35)"/><text x="44.0153%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (34,359,659 samples, 1.64%)</title><rect x="86.5931%" y="165" width="1.6368%" height="15" fill="rgb(247,138,52)"/><text x="86.8431%" y="175.50"></text></g><g><title>macro_expand_crate (50,113,636 samples, 2.39%)</title><rect x="88.2882%" y="165" width="2.3873%" height="15" fill="rgb(213,79,30)"/><text x="88.5382%" y="175.50">ma..</text></g><g><title>expand_crate (50,094,075 samples, 2.39%)</title><rect x="88.2891%" y="149" width="2.3863%" height="15" fill="rgb(246,177,23)"/><text x="88.5391%" y="159.50">ex..</text></g><g><title>late_resolve_crate (8,363,369 samples, 0.40%)</title><rect x="90.7545%" y="149" width="0.3984%" height="15" fill="rgb(230,62,27)"/><text x="91.0045%" y="159.50"></text></g><g><title>configure_and_expand (62,089,773 samples, 2.96%)</title><rect x="88.2300%" y="181" width="2.9578%" height="15" fill="rgb(216,154,8)"/><text x="88.4800%" y="191.50">con..</text></g><g><title>resolve_crate (9,731,633 samples, 0.46%)</title><rect x="90.7242%" y="165" width="0.4636%" height="15" fill="rgb(244,35,45)"/><text x="90.9742%" y="175.50"></text></g><g><title>early_lint_checks (2,711,840 samples, 0.13%)</title><rect x="91.2672%" y="181" width="0.1292%" height="15" fill="rgb(251,115,12)"/><text x="91.5172%" y="191.50"></text></g><g><title>free_global_ctxt (22,803,434 samples, 1.09%)</title><rect x="91.3964%" y="181" width="1.0863%" height="15" fill="rgb(240,54,50)"/><text x="91.6464%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,836,007 samples, 0.14%)</title><rect x="93.1399%" y="101" width="0.1351%" height="15" fill="rgb(233,84,52)"/><text x="93.3899%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,053,777 samples, 0.19%)</title><rect x="94.2491%" y="85" width="0.1931%" height="15" fill="rgb(207,117,47)"/><text x="94.4991%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (21,332,760 samples, 1.02%)</title><rect x="94.4422%" y="85" width="1.0162%" height="15" fill="rgb(249,43,39)"/><text x="94.6922%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,804,190 samples, 0.18%)</title><rect x="95.4993%" y="69" width="0.1812%" height="15" fill="rgb(209,38,44)"/><text x="95.7493%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,681,670 samples, 0.18%)</title><rect x="95.5052%" y="53" width="0.1754%" height="15" fill="rgb(236,212,23)"/><text x="95.7552%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,525,709 samples, 0.17%)</title><rect x="95.5126%" y="37" width="0.1680%" height="15" fill="rgb(242,79,21)"/><text x="95.7626%" y="47.50"></text></g><g><title>optimized_mir (48,949,168 samples, 2.33%)</title><rect x="93.3495%" y="101" width="2.3318%" height="15" fill="rgb(211,96,35)"/><text x="93.5995%" y="111.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,159,395 samples, 0.20%)</title><rect x="95.4831%" y="85" width="0.1981%" height="15" fill="rgb(253,215,40)"/><text x="95.7331%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (8,170,053 samples, 0.39%)</title><rect x="95.8156%" y="85" width="0.3892%" height="15" fill="rgb(211,81,21)"/><text x="96.0656%" y="95.50"></text></g><g><title>specialization_graph_of (2,125,553 samples, 0.10%)</title><rect x="96.3227%" y="85" width="0.1013%" height="15" fill="rgb(208,190,38)"/><text x="96.5727%" y="95.50"></text></g><g><title>resolve_instance (16,169,855 samples, 0.77%)</title><rect x="95.6813%" y="101" width="0.7703%" height="15" fill="rgb(235,213,38)"/><text x="95.9313%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,181,252 samples, 0.10%)</title><rect x="96.5062%" y="101" width="0.1039%" height="15" fill="rgb(237,122,38)"/><text x="96.7562%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (83,470,762 samples, 3.98%)</title><rect x="92.7421%" y="117" width="3.9763%" height="15" fill="rgb(244,218,35)"/><text x="92.9921%" y="127.50">mono..</text></g><g><title>monomorphization_collector (83,655,474 samples, 3.99%)</title><rect x="92.7419%" y="133" width="3.9851%" height="15" fill="rgb(240,68,47)"/><text x="92.9919%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (4,893,803 samples, 0.23%)</title><rect x="96.7273%" y="117" width="0.2331%" height="15" fill="rgb(210,16,53)"/><text x="96.9773%" y="127.50"></text></g><g><title>symbol_name (4,413,441 samples, 0.21%)</title><rect x="96.7502%" y="101" width="0.2102%" height="15" fill="rgb(235,124,12)"/><text x="97.0002%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (90,959,412 samples, 4.33%)</title><rect x="92.7391%" y="149" width="4.3331%" height="15" fill="rgb(224,169,11)"/><text x="92.9891%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (7,245,208 samples, 0.35%)</title><rect x="96.7270%" y="133" width="0.3451%" height="15" fill="rgb(250,166,2)"/><text x="96.9770%" y="143.50"></text></g><g><title>cgu_partitioning (2,345,485 samples, 0.11%)</title><rect x="96.9605%" y="117" width="0.1117%" height="15" fill="rgb(242,216,29)"/><text x="97.2105%" y="127.50"></text></g><g><title>exported_symbols (91,426,307 samples, 4.36%)</title><rect x="92.7302%" y="165" width="4.3553%" height="15" fill="rgb(230,116,27)"/><text x="92.9802%" y="175.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (7,548,824 samples, 0.36%)</title><rect x="97.4930%" y="149" width="0.3596%" height="15" fill="rgb(228,99,48)"/><text x="97.7430%" y="159.50"></text></g><g><title>optimized_mir (16,140,847 samples, 0.77%)</title><rect x="97.0955%" y="165" width="0.7689%" height="15" fill="rgb(253,11,6)"/><text x="97.3455%" y="175.50"></text></g><g><title>generate_crate_metadata (113,325,911 samples, 5.40%)</title><rect x="92.4827%" y="181" width="5.3985%" height="15" fill="rgb(247,143,39)"/><text x="92.7327%" y="191.50">generat..</text></g><g><title>hir_lowering (16,628,647 samples, 0.79%)</title><rect x="97.8812%" y="181" width="0.7921%" height="15" fill="rgb(236,97,10)"/><text x="98.1312%" y="191.50"></text></g><g><title>link_crate (5,054,964 samples, 0.24%)</title><rect x="98.7240%" y="165" width="0.2408%" height="15" fill="rgb(233,208,19)"/><text x="98.9740%" y="175.50"></text></g><g><title>link_binary (4,951,103 samples, 0.24%)</title><rect x="98.7290%" y="149" width="0.2359%" height="15" fill="rgb(216,164,2)"/><text x="98.9790%" y="159.50"></text></g><g><title>link_rlib (4,018,323 samples, 0.19%)</title><rect x="98.7734%" y="133" width="0.1914%" height="15" fill="rgb(220,129,5)"/><text x="99.0234%" y="143.50"></text></g><g><title>link (6,128,855 samples, 0.29%)</title><rect x="98.6734%" y="181" width="0.2920%" height="15" fill="rgb(242,17,10)"/><text x="98.9234%" y="191.50"></text></g><g><title>parse_crate (16,562,727 samples, 0.79%)</title><rect x="98.9654%" y="181" width="0.7890%" height="15" fill="rgb(242,107,0)"/><text x="99.2154%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,180,465 samples, 0.20%)</title><rect x="99.7670%" y="181" width="0.1991%" height="15" fill="rgb(251,28,31)"/><text x="100.0170%" y="191.50"></text></g><g><title>all (2,099,194,586 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,099,194,586 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>