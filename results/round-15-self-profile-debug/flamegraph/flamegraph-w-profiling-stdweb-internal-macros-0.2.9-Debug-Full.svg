<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (580,084,089 samples, 14.21%)</title><rect x="0.0305%" y="165" width="14.2134%" height="15" fill="rgb(227,0,7)"/><text x="0.2805%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (5,547,029 samples, 0.14%)</title><rect x="16.3054%" y="53" width="0.1359%" height="15" fill="rgb(217,0,24)"/><text x="16.5554%" y="63.50"></text></g><g><title>resolve_instance (4,412,170 samples, 0.11%)</title><rect x="16.4413%" y="53" width="0.1081%" height="15" fill="rgb(221,193,54)"/><text x="16.6913%" y="63.50"></text></g><g><title>thir_body (5,274,330 samples, 0.13%)</title><rect x="16.5506%" y="53" width="0.1292%" height="15" fill="rgb(248,212,6)"/><text x="16.8006%" y="63.50"></text></g><g><title>mir_const (37,166,725 samples, 0.91%)</title><rect x="15.7738%" y="101" width="0.9107%" height="15" fill="rgb(208,68,35)"/><text x="16.0238%" y="111.50"></text></g><g><title>unsafety_check_result (33,597,036 samples, 0.82%)</title><rect x="15.8613%" y="85" width="0.8232%" height="15" fill="rgb(232,128,0)"/><text x="16.1113%" y="95.50"></text></g><g><title>mir_built (30,965,053 samples, 0.76%)</title><rect x="15.9258%" y="69" width="0.7587%" height="15" fill="rgb(207,160,47)"/><text x="16.1758%" y="79.50"></text></g><g><title>mir_promoted (41,440,185 samples, 1.02%)</title><rect x="15.6948%" y="117" width="1.0154%" height="15" fill="rgb(228,23,34)"/><text x="15.9448%" y="127.50"></text></g><g><title>type_op_prove_predicate (7,212,457 samples, 0.18%)</title><rect x="16.8487%" y="117" width="0.1767%" height="15" fill="rgb(218,30,26)"/><text x="17.0987%" y="127.50"></text></g><g><title>MIR_borrow_checking (112,423,246 samples, 2.75%)</title><rect x="14.2711%" y="149" width="2.7546%" height="15" fill="rgb(220,122,19)"/><text x="14.5211%" y="159.50">MI..</text></g><g><title>mir_borrowck (112,138,512 samples, 2.75%)</title><rect x="14.2781%" y="133" width="2.7477%" height="15" fill="rgb(250,228,42)"/><text x="14.5281%" y="143.50">mi..</text></g><g><title>misc_checking_2 (5,494,188 samples, 0.13%)</title><rect x="17.1202%" y="149" width="0.1346%" height="15" fill="rgb(240,193,28)"/><text x="17.3702%" y="159.50"></text></g><g><title>lint_checking (8,286,948 samples, 0.20%)</title><rect x="17.2934%" y="133" width="0.2030%" height="15" fill="rgb(216,20,37)"/><text x="17.5434%" y="143.50"></text></g><g><title>module_lints (4,294,676 samples, 0.11%)</title><rect x="17.3913%" y="117" width="0.1052%" height="15" fill="rgb(206,188,39)"/><text x="17.6413%" y="127.50"></text></g><g><title>lint_mod (4,282,076 samples, 0.10%)</title><rect x="17.3916%" y="101" width="0.1049%" height="15" fill="rgb(217,207,13)"/><text x="17.6416%" y="111.50"></text></g><g><title>misc_checking_3 (14,245,301 samples, 0.35%)</title><rect x="17.2548%" y="149" width="0.3490%" height="15" fill="rgb(231,73,38)"/><text x="17.5048%" y="159.50"></text></g><g><title>impl_trait_ref (5,803,371 samples, 0.14%)</title><rect x="17.7581%" y="85" width="0.1422%" height="15" fill="rgb(225,20,46)"/><text x="18.0081%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,761,325 samples, 0.12%)</title><rect x="17.7836%" y="69" width="0.1167%" height="15" fill="rgb(210,31,41)"/><text x="18.0336%" y="79.50"></text></g><g><title>coherent_trait (12,646,913 samples, 0.31%)</title><rect x="17.6082%" y="117" width="0.3099%" height="15" fill="rgb(221,200,47)"/><text x="17.8582%" y="127.50"></text></g><g><title>specialization_graph_of (12,185,528 samples, 0.30%)</title><rect x="17.6195%" y="101" width="0.2986%" height="15" fill="rgb(226,26,5)"/><text x="17.8695%" y="111.50"></text></g><g><title>coherence_checking (12,754,274 samples, 0.31%)</title><rect x="17.6077%" y="133" width="0.3125%" height="15" fill="rgb(249,33,26)"/><text x="17.8577%" y="143.50"></text></g><g><title>evaluate_obligation (5,086,843 samples, 0.12%)</title><rect x="19.9831%" y="85" width="0.1246%" height="15" fill="rgb(235,183,28)"/><text x="20.2331%" y="95.50"></text></g><g><title>typeck (39,864,110 samples, 0.98%)</title><rect x="20.2041%" y="85" width="0.9768%" height="15" fill="rgb(221,5,38)"/><text x="20.4541%" y="95.50"></text></g><g><title>item_bodies_checking (133,137,004 samples, 3.26%)</title><rect x="17.9214%" y="133" width="3.2622%" height="15" fill="rgb(247,18,42)"/><text x="18.1714%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (133,132,904 samples, 3.26%)</title><rect x="17.9215%" y="117" width="3.2621%" height="15" fill="rgb(241,131,45)"/><text x="18.1715%" y="127.50">typ..</text></g><g><title>typeck (132,966,141 samples, 3.26%)</title><rect x="17.9256%" y="101" width="3.2580%" height="15" fill="rgb(249,31,29)"/><text x="18.1756%" y="111.50">typ..</text></g><g><title>mir_const (4,406,397 samples, 0.11%)</title><rect x="21.3198%" y="53" width="0.1080%" height="15" fill="rgb(225,111,53)"/><text x="21.5698%" y="63.50"></text></g><g><title>unsafety_check_result (4,299,525 samples, 0.11%)</title><rect x="21.3225%" y="37" width="0.1053%" height="15" fill="rgb(238,160,17)"/><text x="21.5725%" y="47.50"></text></g><g><title>mir_promoted (4,472,977 samples, 0.11%)</title><rect x="21.3184%" y="69" width="0.1096%" height="15" fill="rgb(214,148,48)"/><text x="21.5684%" y="79.50"></text></g><g><title>type_of (5,982,734 samples, 0.15%)</title><rect x="21.2840%" y="101" width="0.1466%" height="15" fill="rgb(232,36,49)"/><text x="21.5340%" y="111.50"></text></g><g><title>mir_borrowck (5,750,470 samples, 0.14%)</title><rect x="21.2897%" y="85" width="0.1409%" height="15" fill="rgb(209,103,24)"/><text x="21.5397%" y="95.50"></text></g><g><title>item_types_checking (11,609,333 samples, 0.28%)</title><rect x="21.1836%" y="133" width="0.2845%" height="15" fill="rgb(229,88,8)"/><text x="21.4336%" y="143.50"></text></g><g><title>check_mod_item_types (11,596,743 samples, 0.28%)</title><rect x="21.1839%" y="117" width="0.2841%" height="15" fill="rgb(213,181,19)"/><text x="21.4339%" y="127.50"></text></g><g><title>type_collecting (4,914,572 samples, 0.12%)</title><rect x="21.4682%" y="133" width="0.1204%" height="15" fill="rgb(254,191,54)"/><text x="21.7182%" y="143.50"></text></g><g><title>collect_mod_item_types (4,894,211 samples, 0.12%)</title><rect x="21.4687%" y="117" width="0.1199%" height="15" fill="rgb(241,83,37)"/><text x="21.7187%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,776,785 samples, 0.14%)</title><rect x="21.5998%" y="117" width="0.1415%" height="15" fill="rgb(233,36,39)"/><text x="21.8498%" y="127.50"></text></g><g><title>analysis (311,511,116 samples, 7.63%)</title><rect x="14.2439%" y="165" width="7.6327%" height="15" fill="rgb(226,3,54)"/><text x="14.4939%" y="175.50">analysis</text></g><g><title>type_check_crate (174,382,370 samples, 4.27%)</title><rect x="17.6039%" y="149" width="4.2728%" height="15" fill="rgb(245,192,40)"/><text x="17.8539%" y="159.50">type_..</text></g><g><title>wf_checking (11,743,234 samples, 0.29%)</title><rect x="21.5889%" y="133" width="0.2877%" height="15" fill="rgb(238,167,29)"/><text x="21.8389%" y="143.50"></text></g><g><title>check_item_well_formed (5,520,397 samples, 0.14%)</title><rect x="21.7414%" y="117" width="0.1353%" height="15" fill="rgb(232,182,51)"/><text x="21.9914%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (12,611,814 samples, 0.31%)</title><rect x="32.7860%" y="133" width="0.3090%" height="15" fill="rgb(231,60,39)"/><text x="33.0360%" y="143.50"></text></g><g><title>layout_of (4,772,025 samples, 0.12%)</title><rect x="33.6332%" y="117" width="0.1169%" height="15" fill="rgb(208,69,12)"/><text x="33.8832%" y="127.50"></text></g><g><title>predicates_of (4,744,265 samples, 0.12%)</title><rect x="33.9467%" y="101" width="0.1162%" height="15" fill="rgb(235,93,37)"/><text x="34.1967%" y="111.50"></text></g><g><title>param_env (12,790,146 samples, 0.31%)</title><rect x="33.7502%" y="117" width="0.3134%" height="15" fill="rgb(213,116,39)"/><text x="34.0002%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,354,556 samples, 0.11%)</title><rect x="34.0636%" y="117" width="0.1067%" height="15" fill="rgb(222,207,29)"/><text x="34.3136%" y="127.50"></text></g><g><title>fn_abi_of_instance (40,155,383 samples, 0.98%)</title><rect x="33.1915%" y="133" width="0.9839%" height="15" fill="rgb(206,96,30)"/><text x="33.4415%" y="143.50"></text></g><g><title>layout_of (8,389,321 samples, 0.21%)</title><rect x="34.2245%" y="133" width="0.2056%" height="15" fill="rgb(218,138,4)"/><text x="34.4745%" y="143.50"></text></g><g><title>symbol_name (5,933,828 samples, 0.15%)</title><rect x="34.4309%" y="133" width="0.1454%" height="15" fill="rgb(250,191,14)"/><text x="34.6809%" y="143.50"></text></g><g><title>codegen_module (513,947,370 samples, 12.59%)</title><rect x="22.0073%" y="149" width="12.5929%" height="15" fill="rgb(239,60,40)"/><text x="22.2573%" y="159.50">codegen_module</text></g><g><title>codegen_fn_attrs (5,886,001 samples, 0.14%)</title><rect x="34.9679%" y="101" width="0.1442%" height="15" fill="rgb(206,27,48)"/><text x="35.2179%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (7,731,764 samples, 0.19%)</title><rect x="35.5764%" y="85" width="0.1894%" height="15" fill="rgb(225,35,8)"/><text x="35.8264%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (19,977,436 samples, 0.49%)</title><rect x="35.7658%" y="85" width="0.4895%" height="15" fill="rgb(250,213,24)"/><text x="36.0158%" y="95.50"></text></g><g><title>optimized_mir (43,736,829 samples, 1.07%)</title><rect x="35.2283%" y="101" width="1.0717%" height="15" fill="rgb(247,123,22)"/><text x="35.4783%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (19,831,642 samples, 0.49%)</title><rect x="36.4398%" y="85" width="0.4859%" height="15" fill="rgb(231,138,38)"/><text x="36.6898%" y="95.50"></text></g><g><title>specialization_graph_of (6,635,309 samples, 0.16%)</title><rect x="37.0237%" y="85" width="0.1626%" height="15" fill="rgb(231,145,46)"/><text x="37.2737%" y="95.50"></text></g><g><title>resolve_instance (37,314,867 samples, 0.91%)</title><rect x="36.3000%" y="101" width="0.9143%" height="15" fill="rgb(251,118,11)"/><text x="36.5500%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,662,806 samples, 0.11%)</title><rect x="37.2636%" y="101" width="0.1142%" height="15" fill="rgb(217,147,25)"/><text x="37.5136%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (5,731,150 samples, 0.14%)</title><rect x="37.3790%" y="101" width="0.1404%" height="15" fill="rgb(247,81,37)"/><text x="37.6290%" y="111.50"></text></g><g><title>upstream_monomorphizations (5,618,628 samples, 0.14%)</title><rect x="37.3818%" y="85" width="0.1377%" height="15" fill="rgb(209,12,38)"/><text x="37.6318%" y="95.50"></text></g><g><title>exported_symbols (4,990,782 samples, 0.12%)</title><rect x="37.3971%" y="69" width="0.1223%" height="15" fill="rgb(227,1,9)"/><text x="37.6471%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (4,982,692 samples, 0.12%)</title><rect x="37.3973%" y="53" width="0.1221%" height="15" fill="rgb(248,47,43)"/><text x="37.6473%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (122,404,951 samples, 3.00%)</title><rect x="34.6031%" y="117" width="2.9992%" height="15" fill="rgb(221,10,30)"/><text x="34.8531%" y="127.50">mon..</text></g><g><title>monomorphization_collector (122,469,342 samples, 3.00%)</title><rect x="34.6031%" y="133" width="3.0008%" height="15" fill="rgb(210,229,1)"/><text x="34.8531%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (11,026,067 samples, 0.27%)</title><rect x="37.6043%" y="117" width="0.2702%" height="15" fill="rgb(222,148,37)"/><text x="37.8543%" y="127.50"></text></g><g><title>symbol_name (9,761,395 samples, 0.24%)</title><rect x="37.6353%" y="101" width="0.2392%" height="15" fill="rgb(234,67,33)"/><text x="37.8853%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (138,268,758 samples, 3.39%)</title><rect x="34.6006%" y="149" width="3.3879%" height="15" fill="rgb(247,98,35)"/><text x="34.8506%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (15,697,686 samples, 0.38%)</title><rect x="37.6038%" y="133" width="0.3846%" height="15" fill="rgb(247,138,52)"/><text x="37.8538%" y="143.50"></text></g><g><title>cgu_partitioning (4,652,459 samples, 0.11%)</title><rect x="37.8745%" y="117" width="0.1140%" height="15" fill="rgb(213,79,30)"/><text x="38.1245%" y="127.50"></text></g><g><title>codegen_crate (658,070,881 samples, 16.12%)</title><rect x="21.8769%" y="165" width="16.1242%" height="15" fill="rgb(246,177,23)"/><text x="22.1269%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,362,074,956 samples, 33.37%)</title><rect x="38.0083%" y="149" width="33.3740%" height="15" fill="rgb(230,62,27)"/><text x="38.2583%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,227,924,678 samples, 30.09%)</title><rect x="41.2953%" y="133" width="30.0870%" height="15" fill="rgb(216,154,8)"/><text x="41.5453%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,434,326,280 samples, 35.14%)</title><rect x="38.0011%" y="165" width="35.1443%" height="15" fill="rgb(244,35,45)"/><text x="38.2511%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (71,957,988 samples, 1.76%)</title><rect x="71.3823%" y="149" width="1.7631%" height="15" fill="rgb(251,115,12)"/><text x="71.6323%" y="159.50"></text></g><g><title>metadata_register_crate (6,332,677 samples, 0.16%)</title><rect x="76.7053%" y="117" width="0.1552%" height="15" fill="rgb(240,54,50)"/><text x="76.9553%" y="127.50"></text></g><g><title>macro_expand_crate (151,353,616 samples, 3.71%)</title><rect x="73.1702%" y="149" width="3.7085%" height="15" fill="rgb(233,84,52)"/><text x="73.4202%" y="159.50">macr..</text></g><g><title>expand_crate (151,325,396 samples, 3.71%)</title><rect x="73.1709%" y="133" width="3.7078%" height="15" fill="rgb(207,117,47)"/><text x="73.4209%" y="143.50">expa..</text></g><g><title>late_resolve_crate (8,544,340 samples, 0.21%)</title><rect x="76.9370%" y="133" width="0.2094%" height="15" fill="rgb(249,43,39)"/><text x="77.1870%" y="143.50"></text></g><g><title>configure_and_expand (163,827,578 samples, 4.01%)</title><rect x="73.1454%" y="165" width="4.0142%" height="15" fill="rgb(209,38,44)"/><text x="73.3954%" y="175.50">conf..</text></g><g><title>resolve_crate (10,749,183 samples, 0.26%)</title><rect x="76.8962%" y="149" width="0.2634%" height="15" fill="rgb(236,212,23)"/><text x="77.1462%" y="159.50"></text></g><g><title>free_global_ctxt (34,959,688 samples, 0.86%)</title><rect x="77.2315%" y="165" width="0.8566%" height="15" fill="rgb(242,79,21)"/><text x="77.4815%" y="175.50"></text></g><g><title>hir_lowering (11,264,729 samples, 0.28%)</title><rect x="78.1049%" y="165" width="0.2760%" height="15" fill="rgb(211,96,35)"/><text x="78.3549%" y="175.50"></text></g><g><title>finish_ongoing_codegen (57,775,469 samples, 1.42%)</title><rect x="78.3815%" y="149" width="1.4156%" height="15" fill="rgb(253,215,40)"/><text x="78.6315%" y="159.50"></text></g><g><title>link_crate (814,684,793 samples, 19.96%)</title><rect x="79.7971%" y="149" width="19.9616%" height="15" fill="rgb(211,81,21)"/><text x="80.0471%" y="159.50">link_crate</text></g><g><title>link_binary (814,456,300 samples, 19.96%)</title><rect x="79.8027%" y="133" width="19.9560%" height="15" fill="rgb(208,190,38)"/><text x="80.0527%" y="143.50">link_binary</text></g><g><title>run_linker (810,799,362 samples, 19.87%)</title><rect x="79.8923%" y="117" width="19.8664%" height="15" fill="rgb(235,213,38)"/><text x="80.1423%" y="127.50">run_linker</text></g><g><title>link (872,494,903 samples, 21.38%)</title><rect x="78.3809%" y="165" width="21.3781%" height="15" fill="rgb(237,122,38)"/><text x="78.6309%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (8,069,976 samples, 0.20%)</title><rect x="99.7993%" y="165" width="0.1977%" height="15" fill="rgb(244,218,35)"/><text x="100.0493%" y="175.50"></text></g><g><title>all (4,081,250,999 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (4,081,250,999 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>