<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (43,008,896 samples, 8.73%)</title><rect x="0.1577%" y="261" width="8.7333%" height="15" fill="rgb(227,0,7)"/><text x="0.4077%" y="271.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (585,256 samples, 0.12%)</title><rect x="15.4858%" y="165" width="0.1188%" height="15" fill="rgb(217,0,24)"/><text x="15.7358%" y="175.50"></text></g><g><title>needs_drop_raw (1,254,490 samples, 0.25%)</title><rect x="17.0858%" y="149" width="0.2547%" height="15" fill="rgb(221,193,54)"/><text x="17.3358%" y="159.50"></text></g><g><title>is_copy_raw (922,726 samples, 0.19%)</title><rect x="17.1532%" y="133" width="0.1874%" height="15" fill="rgb(248,212,6)"/><text x="17.4032%" y="143.50"></text></g><g><title>evaluate_obligation (725,705 samples, 0.15%)</title><rect x="17.1932%" y="117" width="0.1474%" height="15" fill="rgb(208,68,35)"/><text x="17.4432%" y="127.50"></text></g><g><title>specialization_graph_of (885,980 samples, 0.18%)</title><rect x="17.5003%" y="133" width="0.1799%" height="15" fill="rgb(232,128,0)"/><text x="17.7503%" y="143.50"></text></g><g><title>resolve_instance (1,785,616 samples, 0.36%)</title><rect x="17.3470%" y="149" width="0.3626%" height="15" fill="rgb(207,160,47)"/><text x="17.5970%" y="159.50"></text></g><g><title>thir_body (2,686,717 samples, 0.55%)</title><rect x="17.7207%" y="149" width="0.5456%" height="15" fill="rgb(228,23,34)"/><text x="17.9707%" y="159.50"></text></g><g><title>mir_const (17,026,340 samples, 3.46%)</title><rect x="14.8171%" y="197" width="3.4573%" height="15" fill="rgb(218,30,26)"/><text x="15.0671%" y="207.50">mir..</text></g><g><title>unsafety_check_result (14,681,079 samples, 2.98%)</title><rect x="15.2934%" y="181" width="2.9811%" height="15" fill="rgb(220,122,19)"/><text x="15.5434%" y="191.50">uns..</text></g><g><title>mir_built (13,148,125 samples, 2.67%)</title><rect x="15.6046%" y="165" width="2.6698%" height="15" fill="rgb(250,228,42)"/><text x="15.8546%" y="175.50">mi..</text></g><g><title>thir_body (1,479,084 samples, 0.30%)</title><rect x="18.6915%" y="133" width="0.3003%" height="15" fill="rgb(240,193,28)"/><text x="18.9415%" y="143.50"></text></g><g><title>mir_const (3,133,624 samples, 0.64%)</title><rect x="18.3590%" y="181" width="0.6363%" height="15" fill="rgb(216,20,37)"/><text x="18.6090%" y="191.50"></text></g><g><title>unsafety_check_result (2,809,371 samples, 0.57%)</title><rect x="18.4248%" y="165" width="0.5705%" height="15" fill="rgb(206,188,39)"/><text x="18.6748%" y="175.50"></text></g><g><title>mir_built (2,684,388 samples, 0.55%)</title><rect x="18.4502%" y="149" width="0.5451%" height="15" fill="rgb(217,207,13)"/><text x="18.7002%" y="159.50"></text></g><g><title>mir_const_qualif (3,551,127 samples, 0.72%)</title><rect x="18.2745%" y="197" width="0.7211%" height="15" fill="rgb(231,73,38)"/><text x="18.5245%" y="207.50"></text></g><g><title>mir_promoted (22,513,211 samples, 4.57%)</title><rect x="14.4243%" y="213" width="4.5715%" height="15" fill="rgb(225,20,46)"/><text x="14.6743%" y="223.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (1,667,894 samples, 0.34%)</title><rect x="18.9975%" y="213" width="0.3387%" height="15" fill="rgb(210,31,41)"/><text x="19.2475%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (1,211,668 samples, 0.25%)</title><rect x="19.3361%" y="213" width="0.2460%" height="15" fill="rgb(221,200,47)"/><text x="19.5861%" y="223.50"></text></g><g><title>normalize_projection_ty (833,447 samples, 0.17%)</title><rect x="19.4129%" y="197" width="0.1692%" height="15" fill="rgb(226,26,5)"/><text x="19.6629%" y="207.50"></text></g><g><title>type_op_prove_predicate (3,074,464 samples, 0.62%)</title><rect x="19.6210%" y="213" width="0.6243%" height="15" fill="rgb(249,33,26)"/><text x="19.8710%" y="223.50"></text></g><g><title>MIR_borrow_checking (55,284,391 samples, 11.23%)</title><rect x="9.0202%" y="245" width="11.2260%" height="15" fill="rgb(235,183,28)"/><text x="9.2702%" y="255.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (54,991,728 samples, 11.17%)</title><rect x="9.0797%" y="229" width="11.1665%" height="15" fill="rgb(221,5,38)"/><text x="9.3297%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,330,323 samples, 0.27%)</title><rect x="20.2462%" y="245" width="0.2701%" height="15" fill="rgb(247,18,42)"/><text x="20.4962%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,115,862 samples, 0.23%)</title><rect x="20.2897%" y="229" width="0.2266%" height="15" fill="rgb(241,131,45)"/><text x="20.5397%" y="239.50"></text></g><g><title>codegen_fn_attrs (516,527 samples, 0.10%)</title><rect x="20.7246%" y="213" width="0.1049%" height="15" fill="rgb(249,31,29)"/><text x="20.9746%" y="223.50"></text></g><g><title>check_mod_attrs (1,133,184 samples, 0.23%)</title><rect x="20.5994%" y="229" width="0.2301%" height="15" fill="rgb(225,111,53)"/><text x="20.8494%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (690,635 samples, 0.14%)</title><rect x="20.9178%" y="229" width="0.1402%" height="15" fill="rgb(238,160,17)"/><text x="21.1678%" y="239.50"></text></g><g><title>misc_checking_1 (2,375,474 samples, 0.48%)</title><rect x="20.5914%" y="245" width="0.4824%" height="15" fill="rgb(214,148,48)"/><text x="20.8414%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (1,158,162 samples, 0.24%)</title><rect x="21.0741%" y="229" width="0.2352%" height="15" fill="rgb(232,36,49)"/><text x="21.3241%" y="239.50"></text></g><g><title>check_mod_liveness (908,500 samples, 0.18%)</title><rect x="21.1248%" y="213" width="0.1845%" height="15" fill="rgb(209,103,24)"/><text x="21.3748%" y="223.50"></text></g><g><title>misc_checking_2 (2,455,295 samples, 0.50%)</title><rect x="21.0737%" y="245" width="0.4986%" height="15" fill="rgb(229,88,8)"/><text x="21.3237%" y="255.50"></text></g><g><title>match_checking (1,295,513 samples, 0.26%)</title><rect x="21.3092%" y="229" width="0.2631%" height="15" fill="rgb(213,181,19)"/><text x="21.5592%" y="239.50"></text></g><g><title>check_match (1,220,881 samples, 0.25%)</title><rect x="21.3244%" y="213" width="0.2479%" height="15" fill="rgb(254,191,54)"/><text x="21.5744%" y="223.50"></text></g><g><title>death_checking (827,598 samples, 0.17%)</title><rect x="21.6466%" y="229" width="0.1681%" height="15" fill="rgb(241,83,37)"/><text x="21.8966%" y="239.50"></text></g><g><title>eval_to_allocation_raw (1,802,898 samples, 0.37%)</title><rect x="22.1305%" y="197" width="0.3661%" height="15" fill="rgb(233,36,39)"/><text x="22.3805%" y="207.50"></text></g><g><title>eval_to_allocation_raw (1,799,518 samples, 0.37%)</title><rect x="22.1312%" y="181" width="0.3654%" height="15" fill="rgb(226,3,54)"/><text x="22.3812%" y="191.50"></text></g><g><title>crate_lints (5,189,883 samples, 1.05%)</title><rect x="21.8152%" y="213" width="1.0538%" height="15" fill="rgb(245,192,40)"/><text x="22.0652%" y="223.50"></text></g><g><title>type_of (1,128,877 samples, 0.23%)</title><rect x="22.6398%" y="197" width="0.2292%" height="15" fill="rgb(238,167,29)"/><text x="22.8898%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (899,655 samples, 0.18%)</title><rect x="22.6863%" y="181" width="0.1827%" height="15" fill="rgb(232,182,51)"/><text x="22.9363%" y="191.50"></text></g><g><title>lint_checking (6,537,676 samples, 1.33%)</title><rect x="21.8146%" y="229" width="1.3275%" height="15" fill="rgb(231,60,39)"/><text x="22.0646%" y="239.50"></text></g><g><title>module_lints (1,345,143 samples, 0.27%)</title><rect x="22.8690%" y="213" width="0.2731%" height="15" fill="rgb(208,69,12)"/><text x="23.1190%" y="223.50"></text></g><g><title>lint_mod (1,331,373 samples, 0.27%)</title><rect x="22.8718%" y="197" width="0.2703%" height="15" fill="rgb(235,93,37)"/><text x="23.1218%" y="207.50"></text></g><g><title>privacy_access_levels (586,856 samples, 0.12%)</title><rect x="23.1422%" y="229" width="0.1192%" height="15" fill="rgb(213,116,39)"/><text x="23.3922%" y="239.50"></text></g><g><title>privacy_checking_modules (1,490,226 samples, 0.30%)</title><rect x="23.2613%" y="229" width="0.3026%" height="15" fill="rgb(222,207,29)"/><text x="23.5113%" y="239.50"></text></g><g><title>check_mod_privacy (1,480,936 samples, 0.30%)</title><rect x="23.2632%" y="213" width="0.3007%" height="15" fill="rgb(206,96,30)"/><text x="23.5132%" y="223.50"></text></g><g><title>misc_checking_3 (9,831,330 samples, 2.00%)</title><rect x="21.5723%" y="245" width="1.9963%" height="15" fill="rgb(218,138,4)"/><text x="21.8223%" y="255.50">m..</text></g><g><title>impl_parent (2,780,768 samples, 0.56%)</title><rect x="24.5548%" y="181" width="0.5647%" height="15" fill="rgb(250,191,14)"/><text x="24.8048%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,543,235 samples, 0.31%)</title><rect x="24.8061%" y="165" width="0.3134%" height="15" fill="rgb(239,60,40)"/><text x="25.0561%" y="175.50"></text></g><g><title>impl_trait_ref (5,540,237 samples, 1.12%)</title><rect x="25.1195%" y="181" width="1.1250%" height="15" fill="rgb(206,27,48)"/><text x="25.3695%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,507,538 samples, 0.92%)</title><rect x="25.3291%" y="165" width="0.9153%" height="15" fill="rgb(225,35,8)"/><text x="25.5791%" y="175.50"></text></g><g><title>coherent_trait (13,887,361 samples, 2.82%)</title><rect x="23.6014%" y="213" width="2.8199%" height="15" fill="rgb(250,213,24)"/><text x="23.8514%" y="223.50">co..</text></g><g><title>specialization_graph_of (13,309,095 samples, 2.70%)</title><rect x="23.7188%" y="197" width="2.7025%" height="15" fill="rgb(247,123,22)"/><text x="23.9688%" y="207.50">sp..</text></g><g><title>trait_impls_of (868,958 samples, 0.18%)</title><rect x="26.2449%" y="181" width="0.1764%" height="15" fill="rgb(231,138,38)"/><text x="26.4949%" y="191.50"></text></g><g><title>coherence_checking (13,981,272 samples, 2.84%)</title><rect x="23.5969%" y="229" width="2.8390%" height="15" fill="rgb(231,145,46)"/><text x="23.8469%" y="239.50">co..</text></g><g><title>associated_item (735,046 samples, 0.15%)</title><rect x="36.7148%" y="165" width="0.1493%" height="15" fill="rgb(251,118,11)"/><text x="36.9648%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (591,595 samples, 0.12%)</title><rect x="36.7440%" y="149" width="0.1201%" height="15" fill="rgb(217,147,25)"/><text x="36.9940%" y="159.50"></text></g><g><title>associated_items (1,028,329 samples, 0.21%)</title><rect x="36.6646%" y="181" width="0.2088%" height="15" fill="rgb(247,81,37)"/><text x="36.9146%" y="191.50"></text></g><g><title>generics_of (2,100,954 samples, 0.43%)</title><rect x="39.3705%" y="165" width="0.4266%" height="15" fill="rgb(209,12,38)"/><text x="39.6205%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (1,451,988 samples, 0.29%)</title><rect x="39.5023%" y="149" width="0.2948%" height="15" fill="rgb(227,1,9)"/><text x="39.7523%" y="159.50"></text></g><g><title>impl_trait_ref (1,630,346 samples, 0.33%)</title><rect x="39.8773%" y="165" width="0.3311%" height="15" fill="rgb(248,47,43)"/><text x="40.1273%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,336,042 samples, 0.27%)</title><rect x="39.9370%" y="149" width="0.2713%" height="15" fill="rgb(221,10,30)"/><text x="40.1870%" y="159.50"></text></g><g><title>predicates_of (1,453,957 samples, 0.30%)</title><rect x="40.2258%" y="165" width="0.2952%" height="15" fill="rgb(210,229,1)"/><text x="40.4758%" y="175.50"></text></g><g><title>predicates_defined_on (801,362 samples, 0.16%)</title><rect x="40.3583%" y="149" width="0.1627%" height="15" fill="rgb(222,148,37)"/><text x="40.6083%" y="159.50"></text></g><g><title>specializes (3,855,903 samples, 0.78%)</title><rect x="40.5211%" y="165" width="0.7830%" height="15" fill="rgb(234,67,33)"/><text x="40.7711%" y="175.50"></text></g><g><title>param_env (2,237,384 samples, 0.45%)</title><rect x="40.8497%" y="149" width="0.4543%" height="15" fill="rgb(247,98,35)"/><text x="41.0997%" y="159.50"></text></g><g><title>def_span (982,942 samples, 0.20%)</title><rect x="41.1044%" y="133" width="0.1996%" height="15" fill="rgb(247,138,52)"/><text x="41.3544%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (869,110 samples, 0.18%)</title><rect x="41.1276%" y="117" width="0.1765%" height="15" fill="rgb(213,79,30)"/><text x="41.3776%" y="127.50"></text></g><g><title>trait_impls_of (540,793 samples, 0.11%)</title><rect x="41.3075%" y="165" width="0.1098%" height="15" fill="rgb(246,177,23)"/><text x="41.5575%" y="175.50"></text></g><g><title>evaluate_obligation (21,552,124 samples, 4.38%)</title><rect x="37.0521%" y="181" width="4.3763%" height="15" fill="rgb(230,62,27)"/><text x="37.3021%" y="191.50">evalu..</text></g><g><title>predicates_of (515,445 samples, 0.10%)</title><rect x="41.8489%" y="181" width="0.1047%" height="15" fill="rgb(216,154,8)"/><text x="42.0989%" y="191.50"></text></g><g><title>evaluate_obligation (1,283,534 samples, 0.26%)</title><rect x="42.7968%" y="165" width="0.2606%" height="15" fill="rgb(244,35,45)"/><text x="43.0468%" y="175.50"></text></g><g><title>typeck (5,257,833 samples, 1.07%)</title><rect x="42.0429%" y="181" width="1.0676%" height="15" fill="rgb(251,115,12)"/><text x="42.2929%" y="191.50"></text></g><g><title>item_bodies_checking (82,174,253 samples, 16.69%)</title><rect x="26.4448%" y="229" width="16.6862%" height="15" fill="rgb(240,54,50)"/><text x="26.6948%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (82,170,423 samples, 16.69%)</title><rect x="26.4455%" y="213" width="16.6854%" height="15" fill="rgb(233,84,52)"/><text x="26.6955%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (81,970,563 samples, 16.64%)</title><rect x="26.4861%" y="197" width="16.6448%" height="15" fill="rgb(207,117,47)"/><text x="26.7361%" y="207.50">typeck</text></g><g><title>item_types_checking (3,371,634 samples, 0.68%)</title><rect x="43.1309%" y="229" width="0.6846%" height="15" fill="rgb(249,43,39)"/><text x="43.3809%" y="239.50"></text></g><g><title>check_mod_item_types (3,361,854 samples, 0.68%)</title><rect x="43.1329%" y="213" width="0.6827%" height="15" fill="rgb(209,38,44)"/><text x="43.3829%" y="223.50"></text></g><g><title>typeck (2,470,144 samples, 0.50%)</title><rect x="43.3140%" y="197" width="0.5016%" height="15" fill="rgb(236,212,23)"/><text x="43.5640%" y="207.50"></text></g><g><title>is_late_bound_map (632,747 samples, 0.13%)</title><rect x="44.0485%" y="181" width="0.1285%" height="15" fill="rgb(242,79,21)"/><text x="44.2985%" y="191.50"></text></g><g><title>resolve_lifetimes (625,617 samples, 0.13%)</title><rect x="44.0500%" y="165" width="0.1270%" height="15" fill="rgb(211,96,35)"/><text x="44.3000%" y="175.50"></text></g><g><title>generics_of (1,148,765 samples, 0.23%)</title><rect x="44.0116%" y="197" width="0.2333%" height="15" fill="rgb(253,215,40)"/><text x="44.2616%" y="207.50"></text></g><g><title>predicates_of (847,368 samples, 0.17%)</title><rect x="44.2589%" y="197" width="0.1721%" height="15" fill="rgb(211,81,21)"/><text x="44.5089%" y="207.50"></text></g><g><title>predicates_defined_on (759,133 samples, 0.15%)</title><rect x="44.2768%" y="181" width="0.1541%" height="15" fill="rgb(208,190,38)"/><text x="44.5268%" y="191.50"></text></g><g><title>type_collecting (3,397,315 samples, 0.69%)</title><rect x="43.8164%" y="229" width="0.6899%" height="15" fill="rgb(235,213,38)"/><text x="44.0664%" y="239.50"></text></g><g><title>collect_mod_item_types (3,369,945 samples, 0.68%)</title><rect x="43.8220%" y="213" width="0.6843%" height="15" fill="rgb(237,122,38)"/><text x="44.0720%" y="223.50"></text></g><g><title>check_impl_item_well_formed (2,708,825 samples, 0.55%)</title><rect x="44.5805%" y="213" width="0.5500%" height="15" fill="rgb(244,218,35)"/><text x="44.8305%" y="223.50"></text></g><g><title>mir_for_ctfe (629,997 samples, 0.13%)</title><rect x="45.8225%" y="149" width="0.1279%" height="15" fill="rgb(240,68,47)"/><text x="46.0725%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (578,666 samples, 0.12%)</title><rect x="45.8329%" y="133" width="0.1175%" height="15" fill="rgb(210,16,53)"/><text x="46.0829%" y="143.50"></text></g><g><title>eval_to_const_value_raw (678,078 samples, 0.14%)</title><rect x="46.0435%" y="69" width="0.1377%" height="15" fill="rgb(235,124,12)"/><text x="46.2935%" y="79.50"></text></g><g><title>eval_to_const_value_raw (674,328 samples, 0.14%)</title><rect x="46.0443%" y="53" width="0.1369%" height="15" fill="rgb(224,169,11)"/><text x="46.2943%" y="63.50"></text></g><g><title>eval_to_allocation_raw (664,848 samples, 0.14%)</title><rect x="46.0462%" y="37" width="0.1350%" height="15" fill="rgb(250,166,2)"/><text x="46.2962%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (708,758 samples, 0.14%)</title><rect x="46.0393%" y="85" width="0.1439%" height="15" fill="rgb(242,216,29)"/><text x="46.2893%" y="95.50"></text></g><g><title>evaluate_obligation (536,704 samples, 0.11%)</title><rect x="46.2348%" y="69" width="0.1090%" height="15" fill="rgb(230,116,27)"/><text x="46.4848%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,956,410 samples, 0.40%)</title><rect x="45.9526%" y="133" width="0.3973%" height="15" fill="rgb(228,99,48)"/><text x="46.2026%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,954,840 samples, 0.40%)</title><rect x="45.9529%" y="117" width="0.3969%" height="15" fill="rgb(253,11,6)"/><text x="46.2029%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,952,820 samples, 0.40%)</title><rect x="45.9534%" y="101" width="0.3965%" height="15" fill="rgb(247,143,39)"/><text x="46.2034%" y="111.50"></text></g><g><title>typeck (820,689 samples, 0.17%)</title><rect x="46.1832%" y="85" width="0.1666%" height="15" fill="rgb(236,97,10)"/><text x="46.4332%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,974,070 samples, 0.40%)</title><rect x="45.9505%" y="149" width="0.4009%" height="15" fill="rgb(233,208,19)"/><text x="46.2005%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,117,621 samples, 0.63%)</title><rect x="45.7492%" y="197" width="0.6331%" height="15" fill="rgb(216,164,2)"/><text x="45.9992%" y="207.50"></text></g><g><title>eval_to_const_value_raw (3,096,721 samples, 0.63%)</title><rect x="45.7534%" y="181" width="0.6288%" height="15" fill="rgb(220,129,5)"/><text x="46.0034%" y="191.50"></text></g><g><title>eval_to_allocation_raw (3,092,601 samples, 0.63%)</title><rect x="45.7543%" y="165" width="0.6280%" height="15" fill="rgb(242,17,10)"/><text x="46.0043%" y="175.50"></text></g><g><title>evaluate_obligation (988,848 samples, 0.20%)</title><rect x="46.3822%" y="197" width="0.2008%" height="15" fill="rgb(242,107,0)"/><text x="46.6322%" y="207.50"></text></g><g><title>param_env (605,181 samples, 0.12%)</title><rect x="46.6268%" y="197" width="0.1229%" height="15" fill="rgb(251,28,31)"/><text x="46.8768%" y="207.50"></text></g><g><title>region_scope_tree (863,526 samples, 0.18%)</title><rect x="46.7777%" y="197" width="0.1753%" height="15" fill="rgb(233,223,10)"/><text x="47.0277%" y="207.50"></text></g><g><title>check_item_well_formed (9,419,207 samples, 1.91%)</title><rect x="45.1306%" y="213" width="1.9126%" height="15" fill="rgb(215,21,27)"/><text x="45.3806%" y="223.50">c..</text></g><g><title>analysis (189,063,538 samples, 38.39%)</title><rect x="8.8911%" y="261" width="38.3909%" height="15" fill="rgb(232,23,21)"/><text x="9.1411%" y="271.50">analysis</text></g><g><title>type_check_crate (116,780,985 samples, 23.71%)</title><rect x="23.5686%" y="245" width="23.7133%" height="15" fill="rgb(244,5,23)"/><text x="23.8186%" y="255.50">type_check_crate</text></g><g><title>wf_checking (13,652,839 samples, 2.77%)</title><rect x="44.5097%" y="229" width="2.7723%" height="15" fill="rgb(226,81,46)"/><text x="44.7597%" y="239.50">wf..</text></g><g><title>check_trait_item_well_formed (1,175,753 samples, 0.24%)</title><rect x="47.0432%" y="213" width="0.2387%" height="15" fill="rgb(247,70,30)"/><text x="47.2932%" y="223.50"></text></g><g><title>const_caller_location (1,160,404 samples, 0.24%)</title><rect x="54.0706%" y="229" width="0.2356%" height="15" fill="rgb(212,68,19)"/><text x="54.3206%" y="239.50"></text></g><g><title>layout_of (627,567 samples, 0.13%)</title><rect x="54.7056%" y="213" width="0.1274%" height="15" fill="rgb(240,187,13)"/><text x="54.9556%" y="223.50"></text></g><g><title>param_env (1,691,066 samples, 0.34%)</title><rect x="54.8330%" y="213" width="0.3434%" height="15" fill="rgb(223,113,26)"/><text x="55.0830%" y="223.50"></text></g><g><title>predicates_of (555,196 samples, 0.11%)</title><rect x="55.0636%" y="197" width="0.1127%" height="15" fill="rgb(206,192,2)"/><text x="55.3136%" y="207.50"></text></g><g><title>fn_abi_of_instance (4,771,347 samples, 0.97%)</title><rect x="54.3066%" y="229" width="0.9689%" height="15" fill="rgb(241,108,4)"/><text x="54.5566%" y="239.50"></text></g><g><title>layout_of (504,888 samples, 0.10%)</title><rect x="55.3287%" y="229" width="0.1025%" height="15" fill="rgb(247,173,49)"/><text x="55.5787%" y="239.50"></text></g><g><title>codegen_module (38,226,827 samples, 7.76%)</title><rect x="47.7666%" y="245" width="7.7623%" height="15" fill="rgb(224,114,35)"/><text x="48.0166%" y="255.50">codegen_mod..</text></g><g><title>codegen_crate (40,681,422 samples, 8.26%)</title><rect x="47.2841%" y="261" width="8.2607%" height="15" fill="rgb(245,159,27)"/><text x="47.5341%" y="271.50">codegen_crate</text></g><g><title>LLVM_module_codegen (115,864,547 samples, 23.53%)</title><rect x="55.5761%" y="245" width="23.5273%" height="15" fill="rgb(245,172,44)"/><text x="55.8261%" y="255.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (109,278,279 samples, 22.19%)</title><rect x="56.9135%" y="229" width="22.1899%" height="15" fill="rgb(236,23,11)"/><text x="57.1635%" y="239.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (126,380,983 samples, 25.66%)</title><rect x="55.5448%" y="261" width="25.6627%" height="15" fill="rgb(205,117,38)"/><text x="55.7948%" y="271.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,362,376 samples, 2.10%)</title><rect x="79.1034%" y="245" width="2.1042%" height="15" fill="rgb(237,72,25)"/><text x="79.3534%" y="255.50">L..</text></g><g><title>metadata_register_crate (1,251,732 samples, 0.25%)</title><rect x="88.8144%" y="213" width="0.2542%" height="15" fill="rgb(244,70,9)"/><text x="89.0644%" y="223.50"></text></g><g><title>macro_expand_crate (39,186,107 samples, 7.96%)</title><rect x="81.3724%" y="245" width="7.9571%" height="15" fill="rgb(217,125,39)"/><text x="81.6224%" y="255.50">macro_expan..</text></g><g><title>expand_crate (39,172,457 samples, 7.95%)</title><rect x="81.3751%" y="229" width="7.9543%" height="15" fill="rgb(235,36,10)"/><text x="81.6251%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,284,360 samples, 0.26%)</title><rect x="89.0686%" y="213" width="0.2608%" height="15" fill="rgb(251,123,47)"/><text x="89.3186%" y="223.50"></text></g><g><title>late_resolve_crate (3,095,461 samples, 0.63%)</title><rect x="89.4180%" y="229" width="0.6286%" height="15" fill="rgb(221,13,13)"/><text x="89.6680%" y="239.50"></text></g><g><title>configure_and_expand (43,789,684 samples, 8.89%)</title><rect x="81.2075%" y="261" width="8.8919%" height="15" fill="rgb(238,131,9)"/><text x="81.4575%" y="271.50">configure_and..</text></g><g><title>resolve_crate (3,726,618 samples, 0.76%)</title><rect x="89.3427%" y="245" width="0.7567%" height="15" fill="rgb(211,50,8)"/><text x="89.5927%" y="255.50"></text></g><g><title>drop_ast (643,927 samples, 0.13%)</title><rect x="90.0994%" y="261" width="0.1308%" height="15" fill="rgb(245,182,24)"/><text x="90.3494%" y="271.50"></text></g><g><title>early_lint_checks (1,015,950 samples, 0.21%)</title><rect x="90.2335%" y="261" width="0.2063%" height="15" fill="rgb(242,14,37)"/><text x="90.4835%" y="271.50"></text></g><g><title>free_global_ctxt (6,106,322 samples, 1.24%)</title><rect x="90.4398%" y="261" width="1.2399%" height="15" fill="rgb(246,228,12)"/><text x="90.6898%" y="271.50"></text></g><g><title>codegen_fn_attrs (677,083 samples, 0.14%)</title><rect x="92.6555%" y="181" width="0.1375%" height="15" fill="rgb(213,55,15)"/><text x="92.9055%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (742,213 samples, 0.15%)</title><rect x="93.0444%" y="165" width="0.1507%" height="15" fill="rgb(209,9,3)"/><text x="93.2944%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,043,371 samples, 0.21%)</title><rect x="93.1951%" y="165" width="0.2119%" height="15" fill="rgb(230,59,30)"/><text x="93.4451%" y="175.50"></text></g><g><title>optimized_mir (2,896,084 samples, 0.59%)</title><rect x="92.8368%" y="181" width="0.5881%" height="15" fill="rgb(209,121,21)"/><text x="93.0868%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (867,569 samples, 0.18%)</title><rect x="93.4926%" y="165" width="0.1762%" height="15" fill="rgb(220,109,13)"/><text x="93.7426%" y="175.50"></text></g><g><title>specialization_graph_of (535,634 samples, 0.11%)</title><rect x="93.7165%" y="165" width="0.1088%" height="15" fill="rgb(232,18,1)"/><text x="93.9665%" y="175.50"></text></g><g><title>resolve_instance (2,106,499 samples, 0.43%)</title><rect x="93.4248%" y="181" width="0.4277%" height="15" fill="rgb(215,41,42)"/><text x="93.6748%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (7,150,882 samples, 1.45%)</title><rect x="92.4968%" y="197" width="1.4520%" height="15" fill="rgb(224,123,36)"/><text x="92.7468%" y="207.50"></text></g><g><title>monomorphization_collector (7,223,113 samples, 1.47%)</title><rect x="92.4961%" y="213" width="1.4667%" height="15" fill="rgb(240,125,3)"/><text x="92.7461%" y="223.50"></text></g><g><title>assert_symbols_are_distinct (783,268 samples, 0.16%)</title><rect x="93.9635%" y="197" width="0.1590%" height="15" fill="rgb(205,98,50)"/><text x="94.2135%" y="207.50"></text></g><g><title>symbol_name (712,107 samples, 0.14%)</title><rect x="93.9779%" y="181" width="0.1446%" height="15" fill="rgb(205,185,37)"/><text x="94.2279%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (8,448,516 samples, 1.72%)</title><rect x="92.4884%" y="229" width="1.7155%" height="15" fill="rgb(238,207,15)"/><text x="92.7384%" y="239.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,187,743 samples, 0.24%)</title><rect x="93.9628%" y="213" width="0.2412%" height="15" fill="rgb(213,199,42)"/><text x="94.2128%" y="223.50"></text></g><g><title>exported_symbols (8,832,510 samples, 1.79%)</title><rect x="92.4798%" y="245" width="1.7935%" height="15" fill="rgb(235,201,11)"/><text x="92.7298%" y="255.50">e..</text></g><g><title>mir_for_ctfe (522,866 samples, 0.11%)</title><rect x="94.2803%" y="245" width="0.1062%" height="15" fill="rgb(207,46,11)"/><text x="94.5303%" y="255.50"></text></g><g><title>layout_of (867,891 samples, 0.18%)</title><rect x="95.7623%" y="229" width="0.1762%" height="15" fill="rgb(241,35,35)"/><text x="96.0123%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,130,448 samples, 1.45%)</title><rect x="95.9385%" y="229" width="1.4479%" height="15" fill="rgb(243,32,47)"/><text x="96.1885%" y="239.50"></text></g><g><title>optimized_mir (14,976,751 samples, 3.04%)</title><rect x="94.3983%" y="245" width="3.0412%" height="15" fill="rgb(247,202,23)"/><text x="94.6483%" y="255.50">opt..</text></g><g><title>generate_crate_metadata (28,508,929 samples, 5.79%)</title><rect x="91.6797%" y="261" width="5.7890%" height="15" fill="rgb(219,102,11)"/><text x="91.9297%" y="271.50">generat..</text></g><g><title>hir_lowering (6,339,864 samples, 1.29%)</title><rect x="97.4687%" y="261" width="1.2874%" height="15" fill="rgb(243,110,44)"/><text x="97.7187%" y="271.50"></text></g><g><title>link_crate (2,325,404 samples, 0.47%)</title><rect x="98.7610%" y="245" width="0.4722%" height="15" fill="rgb(222,74,54)"/><text x="99.0110%" y="255.50"></text></g><g><title>link_binary (2,084,012 samples, 0.42%)</title><rect x="98.8100%" y="229" width="0.4232%" height="15" fill="rgb(216,99,12)"/><text x="99.0600%" y="239.50"></text></g><g><title>link_rlib (1,533,686 samples, 0.31%)</title><rect x="98.9217%" y="213" width="0.3114%" height="15" fill="rgb(226,22,26)"/><text x="99.1717%" y="223.50"></text></g><g><title>link (2,359,564 samples, 0.48%)</title><rect x="98.7561%" y="261" width="0.4791%" height="15" fill="rgb(217,163,10)"/><text x="99.0061%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (2,532,896 samples, 0.51%)</title><rect x="99.3592%" y="261" width="0.5143%" height="15" fill="rgb(213,25,53)"/><text x="99.6092%" y="271.50"></text></g><g><title>all (492,469,395 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (492,469,395 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (524,006 samples, 0.11%)</title><rect x="99.8936%" y="261" width="0.1064%" height="15" fill="rgb(229,68,48)"/><text x="100.1436%" y="271.50"></text></g></svg></svg>