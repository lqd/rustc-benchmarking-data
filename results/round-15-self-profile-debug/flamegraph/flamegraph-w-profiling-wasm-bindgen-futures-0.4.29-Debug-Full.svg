<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (102,054,909 samples, 16.76%)</title><rect x="0.0791%" y="197" width="16.7555%" height="15" fill="rgb(227,0,7)"/><text x="0.3291%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (824,220 samples, 0.14%)</title><rect x="18.4163%" y="85" width="0.1353%" height="15" fill="rgb(217,0,24)"/><text x="18.6663%" y="95.50"></text></g><g><title>impl_parent (663,536 samples, 0.11%)</title><rect x="18.8084%" y="53" width="0.1089%" height="15" fill="rgb(221,193,54)"/><text x="19.0584%" y="63.50"></text></g><g><title>specialization_graph_of (3,048,232 samples, 0.50%)</title><rect x="18.6028%" y="69" width="0.5005%" height="15" fill="rgb(248,212,6)"/><text x="18.8528%" y="79.50"></text></g><g><title>impl_trait_ref (1,132,669 samples, 0.19%)</title><rect x="18.9173%" y="53" width="0.1860%" height="15" fill="rgb(208,68,35)"/><text x="19.1673%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (892,207 samples, 0.15%)</title><rect x="18.9568%" y="37" width="0.1465%" height="15" fill="rgb(232,128,0)"/><text x="19.2068%" y="47.50"></text></g><g><title>resolve_instance (3,431,177 samples, 0.56%)</title><rect x="18.5517%" y="85" width="0.5633%" height="15" fill="rgb(207,160,47)"/><text x="18.8017%" y="95.50"></text></g><g><title>mir_const (7,427,169 samples, 1.22%)</title><rect x="17.9847%" y="133" width="1.2194%" height="15" fill="rgb(228,23,34)"/><text x="18.2347%" y="143.50"></text></g><g><title>unsafety_check_result (6,696,832 samples, 1.10%)</title><rect x="18.1046%" y="117" width="1.0995%" height="15" fill="rgb(218,30,26)"/><text x="18.3546%" y="127.50"></text></g><g><title>mir_built (6,166,725 samples, 1.01%)</title><rect x="18.1916%" y="101" width="1.0125%" height="15" fill="rgb(220,122,19)"/><text x="18.4416%" y="111.50"></text></g><g><title>mir_const_qualif (725,427 samples, 0.12%)</title><rect x="19.2041%" y="133" width="0.1191%" height="15" fill="rgb(250,228,42)"/><text x="19.4541%" y="143.50"></text></g><g><title>mir_promoted (8,637,594 samples, 1.42%)</title><rect x="17.9051%" y="149" width="1.4181%" height="15" fill="rgb(240,193,28)"/><text x="18.1551%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,420,515 samples, 0.23%)</title><rect x="19.4795%" y="149" width="0.2332%" height="15" fill="rgb(216,20,37)"/><text x="19.7295%" y="159.50"></text></g><g><title>MIR_borrow_checking (17,367,685 samples, 2.85%)</title><rect x="16.8620%" y="181" width="2.8515%" height="15" fill="rgb(206,188,39)"/><text x="17.1120%" y="191.50">MI..</text></g><g><title>mir_borrowck (17,312,215 samples, 2.84%)</title><rect x="16.8711%" y="165" width="2.8423%" height="15" fill="rgb(217,207,13)"/><text x="17.1211%" y="175.50">mi..</text></g><g><title>misc_checking_1 (745,258 samples, 0.12%)</title><rect x="19.7807%" y="181" width="0.1224%" height="15" fill="rgb(231,73,38)"/><text x="20.0307%" y="191.50"></text></g><g><title>crate_lints (2,612,128 samples, 0.43%)</title><rect x="20.0445%" y="149" width="0.4289%" height="15" fill="rgb(225,20,46)"/><text x="20.2945%" y="159.50"></text></g><g><title>type_of (1,115,645 samples, 0.18%)</title><rect x="20.2902%" y="133" width="0.1832%" height="15" fill="rgb(210,31,41)"/><text x="20.5402%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (869,980 samples, 0.14%)</title><rect x="20.3305%" y="117" width="0.1428%" height="15" fill="rgb(221,200,47)"/><text x="20.5805%" y="127.50"></text></g><g><title>lint_checking (2,823,840 samples, 0.46%)</title><rect x="20.0442%" y="165" width="0.4636%" height="15" fill="rgb(226,26,5)"/><text x="20.2942%" y="175.50"></text></g><g><title>misc_checking_3 (3,759,940 samples, 0.62%)</title><rect x="19.9968%" y="181" width="0.6173%" height="15" fill="rgb(249,33,26)"/><text x="20.2468%" y="191.50"></text></g><g><title>impl_parent (1,113,940 samples, 0.18%)</title><rect x="20.9049%" y="117" width="0.1829%" height="15" fill="rgb(235,183,28)"/><text x="21.1549%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (713,496 samples, 0.12%)</title><rect x="20.9706%" y="101" width="0.1171%" height="15" fill="rgb(221,5,38)"/><text x="21.2206%" y="111.50"></text></g><g><title>impl_trait_ref (3,316,343 samples, 0.54%)</title><rect x="21.0878%" y="117" width="0.5445%" height="15" fill="rgb(247,18,42)"/><text x="21.3378%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,906,130 samples, 0.48%)</title><rect x="21.1551%" y="101" width="0.4771%" height="15" fill="rgb(241,131,45)"/><text x="21.4051%" y="111.50"></text></g><g><title>coherent_trait (6,444,559 samples, 1.06%)</title><rect x="20.6241%" y="149" width="1.0581%" height="15" fill="rgb(249,31,29)"/><text x="20.8741%" y="159.50"></text></g><g><title>specialization_graph_of (6,437,099 samples, 1.06%)</title><rect x="20.6253%" y="133" width="1.0569%" height="15" fill="rgb(225,111,53)"/><text x="20.8753%" y="143.50"></text></g><g><title>coherence_checking (6,495,770 samples, 1.07%)</title><rect x="20.6214%" y="165" width="1.0665%" height="15" fill="rgb(238,160,17)"/><text x="20.8714%" y="175.50"></text></g><g><title>evaluate_obligation (651,508 samples, 0.11%)</title><rect x="22.7865%" y="117" width="0.1070%" height="15" fill="rgb(214,148,48)"/><text x="23.0365%" y="127.50"></text></g><g><title>evaluate_obligation (1,234,702 samples, 0.20%)</title><rect x="24.0853%" y="101" width="0.2027%" height="15" fill="rgb(232,36,49)"/><text x="24.3353%" y="111.50"></text></g><g><title>typeck (8,253,219 samples, 1.36%)</title><rect x="23.1227%" y="117" width="1.3550%" height="15" fill="rgb(209,103,24)"/><text x="23.3727%" y="127.50"></text></g><g><title>item_bodies_checking (17,016,102 samples, 2.79%)</title><rect x="21.6907%" y="165" width="2.7937%" height="15" fill="rgb(229,88,8)"/><text x="21.9407%" y="175.50">it..</text></g><g><title>typeck_item_bodies (17,012,262 samples, 2.79%)</title><rect x="21.6913%" y="149" width="2.7931%" height="15" fill="rgb(213,181,19)"/><text x="21.9413%" y="159.50">ty..</text></g><g><title>typeck (16,982,882 samples, 2.79%)</title><rect x="21.6962%" y="133" width="2.7883%" height="15" fill="rgb(254,191,54)"/><text x="21.9462%" y="143.50">ty..</text></g><g><title>typeck (883,900 samples, 0.15%)</title><rect x="24.6591%" y="133" width="0.1451%" height="15" fill="rgb(241,83,37)"/><text x="24.9091%" y="143.50"></text></g><g><title>item_types_checking (1,953,981 samples, 0.32%)</title><rect x="24.4844%" y="165" width="0.3208%" height="15" fill="rgb(233,36,39)"/><text x="24.7344%" y="175.50"></text></g><g><title>check_mod_item_types (1,949,781 samples, 0.32%)</title><rect x="24.4851%" y="149" width="0.3201%" height="15" fill="rgb(226,3,54)"/><text x="24.7351%" y="159.50"></text></g><g><title>predicates_of (815,080 samples, 0.13%)</title><rect x="24.8892%" y="133" width="0.1338%" height="15" fill="rgb(245,192,40)"/><text x="25.1392%" y="143.50"></text></g><g><title>predicates_defined_on (794,668 samples, 0.13%)</title><rect x="24.8926%" y="117" width="0.1305%" height="15" fill="rgb(238,167,29)"/><text x="25.1426%" y="127.50"></text></g><g><title>type_collecting (1,385,765 samples, 0.23%)</title><rect x="24.8057%" y="165" width="0.2275%" height="15" fill="rgb(232,182,51)"/><text x="25.0557%" y="175.50"></text></g><g><title>collect_mod_item_types (1,373,095 samples, 0.23%)</title><rect x="24.8078%" y="149" width="0.2254%" height="15" fill="rgb(231,60,39)"/><text x="25.0578%" y="159.50"></text></g><g><title>check_impl_item_well_formed (873,117 samples, 0.14%)</title><rect x="25.0462%" y="149" width="0.1433%" height="15" fill="rgb(208,69,12)"/><text x="25.2962%" y="159.50"></text></g><g><title>evaluate_obligation (619,698 samples, 0.10%)</title><rect x="25.2819%" y="133" width="0.1017%" height="15" fill="rgb(235,93,37)"/><text x="25.5319%" y="143.50"></text></g><g><title>analysis (52,906,905 samples, 8.69%)</title><rect x="16.8346%" y="197" width="8.6863%" height="15" fill="rgb(213,116,39)"/><text x="17.0846%" y="207.50">analysis</text></g><g><title>type_check_crate (29,886,829 samples, 4.91%)</title><rect x="20.6141%" y="181" width="4.9069%" height="15" fill="rgb(222,207,29)"/><text x="20.8641%" y="191.50">type_c..</text></g><g><title>wf_checking (2,968,171 samples, 0.49%)</title><rect x="25.0336%" y="165" width="0.4873%" height="15" fill="rgb(206,96,30)"/><text x="25.2836%" y="175.50"></text></g><g><title>check_item_well_formed (2,018,853 samples, 0.33%)</title><rect x="25.1895%" y="149" width="0.3315%" height="15" fill="rgb(218,138,4)"/><text x="25.4395%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (2,051,779 samples, 0.34%)</title><rect x="35.6316%" y="165" width="0.3369%" height="15" fill="rgb(250,191,14)"/><text x="35.8816%" y="175.50"></text></g><g><title>const_caller_location (846,629 samples, 0.14%)</title><rect x="35.9684%" y="165" width="0.1390%" height="15" fill="rgb(239,60,40)"/><text x="36.2184%" y="175.50"></text></g><g><title>codegen_fn_attrs (682,830 samples, 0.11%)</title><rect x="36.6754%" y="149" width="0.1121%" height="15" fill="rgb(206,27,48)"/><text x="36.9254%" y="159.50"></text></g><g><title>layout_of (1,619,649 samples, 0.27%)</title><rect x="36.8014%" y="149" width="0.2659%" height="15" fill="rgb(225,35,8)"/><text x="37.0514%" y="159.50"></text></g><g><title>predicates_of (1,110,988 samples, 0.18%)</title><rect x="37.4157%" y="133" width="0.1824%" height="15" fill="rgb(250,213,24)"/><text x="37.6657%" y="143.50"></text></g><g><title>predicates_defined_on (801,036 samples, 0.13%)</title><rect x="37.4666%" y="117" width="0.1315%" height="15" fill="rgb(247,123,22)"/><text x="37.7166%" y="127.50"></text></g><g><title>param_env (3,254,613 samples, 0.53%)</title><rect x="37.0673%" y="149" width="0.5343%" height="15" fill="rgb(231,138,38)"/><text x="37.3173%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,196,641 samples, 0.20%)</title><rect x="37.6017%" y="149" width="0.1965%" height="15" fill="rgb(231,145,46)"/><text x="37.8517%" y="159.50"></text></g><g><title>normalize_projection_ty (965,760 samples, 0.16%)</title><rect x="37.6396%" y="133" width="0.1586%" height="15" fill="rgb(251,118,11)"/><text x="37.8896%" y="143.50"></text></g><g><title>fn_abi_of_instance (10,750,889 samples, 1.77%)</title><rect x="36.1121%" y="165" width="1.7651%" height="15" fill="rgb(217,147,25)"/><text x="36.3621%" y="175.50"></text></g><g><title>layout_of (1,482,595 samples, 0.24%)</title><rect x="37.9774%" y="165" width="0.2434%" height="15" fill="rgb(247,81,37)"/><text x="38.2274%" y="175.50"></text></g><g><title>symbol_name (730,799 samples, 0.12%)</title><rect x="38.2241%" y="165" width="0.1200%" height="15" fill="rgb(209,12,38)"/><text x="38.4741%" y="175.50"></text></g><g><title>codegen_module (74,917,320 samples, 12.30%)</title><rect x="26.0536%" y="181" width="12.3000%" height="15" fill="rgb(227,1,9)"/><text x="26.3036%" y="191.50">codegen_module</text></g><g><title>codegen_crate (78,241,255 samples, 12.85%)</title><rect x="25.5221%" y="197" width="12.8458%" height="15" fill="rgb(248,47,43)"/><text x="25.7721%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (275,656,323 samples, 45.26%)</title><rect x="38.3972%" y="181" width="45.2577%" height="15" fill="rgb(221,10,30)"/><text x="38.6472%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (262,350,700 samples, 43.07%)</title><rect x="40.5817%" y="165" width="43.0731%" height="15" fill="rgb(210,229,1)"/><text x="40.8317%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (294,918,138 samples, 48.42%)</title><rect x="38.3679%" y="197" width="48.4201%" height="15" fill="rgb(222,148,37)"/><text x="38.6179%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (19,083,583 samples, 3.13%)</title><rect x="83.6549%" y="181" width="3.1332%" height="15" fill="rgb(234,67,33)"/><text x="83.9049%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (6,673,952 samples, 1.10%)</title><rect x="88.1674%" y="149" width="1.0957%" height="15" fill="rgb(247,98,35)"/><text x="88.4174%" y="159.50"></text></g><g><title>metadata_register_crate (5,748,081 samples, 0.94%)</title><rect x="88.3194%" y="133" width="0.9437%" height="15" fill="rgb(247,138,52)"/><text x="88.5694%" y="143.50"></text></g><g><title>metadata_register_crate (4,907,693 samples, 0.81%)</title><rect x="88.4574%" y="117" width="0.8058%" height="15" fill="rgb(213,79,30)"/><text x="88.7074%" y="127.50"></text></g><g><title>macro_expand_crate (14,845,008 samples, 2.44%)</title><rect x="86.8353%" y="181" width="2.4373%" height="15" fill="rgb(246,177,23)"/><text x="87.0853%" y="191.50">ma..</text></g><g><title>expand_crate (14,829,538 samples, 2.43%)</title><rect x="86.8379%" y="165" width="2.4347%" height="15" fill="rgb(230,62,27)"/><text x="87.0879%" y="175.50">ex..</text></g><g><title>late_resolve_crate (953,491 samples, 0.16%)</title><rect x="89.3098%" y="165" width="0.1565%" height="15" fill="rgb(216,154,8)"/><text x="89.5598%" y="175.50"></text></g><g><title>configure_and_expand (16,366,395 samples, 2.69%)</title><rect x="86.7880%" y="197" width="2.6871%" height="15" fill="rgb(244,35,45)"/><text x="87.0380%" y="207.50">co..</text></g><g><title>resolve_crate (1,133,862 samples, 0.19%)</title><rect x="89.2889%" y="181" width="0.1862%" height="15" fill="rgb(251,115,12)"/><text x="89.5389%" y="191.50"></text></g><g><title>free_global_ctxt (5,104,625 samples, 0.84%)</title><rect x="89.5194%" y="197" width="0.8381%" height="15" fill="rgb(240,54,50)"/><text x="89.7694%" y="207.50"></text></g><g><title>item_attrs (1,309,852 samples, 0.22%)</title><rect x="90.9963%" y="101" width="0.2151%" height="15" fill="rgb(233,84,52)"/><text x="91.2463%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,265,272 samples, 0.21%)</title><rect x="91.0037%" y="85" width="0.2077%" height="15" fill="rgb(207,117,47)"/><text x="91.2537%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,930,289 samples, 0.32%)</title><rect x="90.9506%" y="117" width="0.3169%" height="15" fill="rgb(249,43,39)"/><text x="91.2006%" y="127.50"></text></g><g><title>mir_shims (1,204,585 samples, 0.20%)</title><rect x="91.3519%" y="117" width="0.1978%" height="15" fill="rgb(209,38,44)"/><text x="91.6019%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,821,488 samples, 0.30%)</title><rect x="91.8475%" y="101" width="0.2991%" height="15" fill="rgb(236,212,23)"/><text x="92.0975%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,767,051 samples, 0.29%)</title><rect x="92.1466%" y="101" width="0.2901%" height="15" fill="rgb(242,79,21)"/><text x="92.3966%" y="111.50"></text></g><g><title>optimized_mir (5,620,767 samples, 0.92%)</title><rect x="91.5500%" y="117" width="0.9228%" height="15" fill="rgb(211,96,35)"/><text x="91.8000%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,239,489 samples, 0.37%)</title><rect x="92.6537%" y="101" width="0.3677%" height="15" fill="rgb(253,215,40)"/><text x="92.9037%" y="111.50"></text></g><g><title>specialization_graph_of (1,359,016 samples, 0.22%)</title><rect x="93.1309%" y="101" width="0.2231%" height="15" fill="rgb(211,81,21)"/><text x="93.3809%" y="111.50"></text></g><g><title>resolve_instance (5,707,925 samples, 0.94%)</title><rect x="92.4728%" y="117" width="0.9371%" height="15" fill="rgb(208,190,38)"/><text x="92.7228%" y="127.50"></text></g><g><title>eval_to_const_value_raw (778,590 samples, 0.13%)</title><rect x="93.4509%" y="101" width="0.1278%" height="15" fill="rgb(235,213,38)"/><text x="93.7009%" y="111.50"></text></g><g><title>eval_to_const_value_raw (758,150 samples, 0.12%)</title><rect x="93.4543%" y="85" width="0.1245%" height="15" fill="rgb(237,122,38)"/><text x="93.7043%" y="95.50"></text></g><g><title>eval_to_allocation_raw (723,459 samples, 0.12%)</title><rect x="93.4600%" y="69" width="0.1188%" height="15" fill="rgb(244,218,35)"/><text x="93.7100%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (905,382 samples, 0.15%)</title><rect x="93.4372%" y="117" width="0.1486%" height="15" fill="rgb(240,68,47)"/><text x="93.6872%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (19,642,750 samples, 3.22%)</title><rect x="90.5102%" y="133" width="3.2250%" height="15" fill="rgb(210,16,53)"/><text x="90.7602%" y="143.50">mon..</text></g><g><title>monomorphization_collector (19,680,370 samples, 3.23%)</title><rect x="90.5098%" y="149" width="3.2312%" height="15" fill="rgb(235,124,12)"/><text x="90.7598%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,159,043 samples, 0.35%)</title><rect x="93.7416%" y="133" width="0.3545%" height="15" fill="rgb(224,169,11)"/><text x="93.9916%" y="143.50"></text></g><g><title>symbol_name (1,912,631 samples, 0.31%)</title><rect x="93.7821%" y="117" width="0.3140%" height="15" fill="rgb(250,166,2)"/><text x="94.0321%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (22,906,625 samples, 3.76%)</title><rect x="90.5021%" y="165" width="3.7608%" height="15" fill="rgb(242,216,29)"/><text x="90.7521%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (3,179,554 samples, 0.52%)</title><rect x="93.7409%" y="149" width="0.5220%" height="15" fill="rgb(230,116,27)"/><text x="93.9909%" y="159.50"></text></g><g><title>cgu_partitioning (1,016,191 samples, 0.17%)</title><rect x="94.0961%" y="133" width="0.1668%" height="15" fill="rgb(228,99,48)"/><text x="94.3461%" y="143.50"></text></g><g><title>exported_symbols (23,055,897 samples, 3.79%)</title><rect x="90.4849%" y="181" width="3.7854%" height="15" fill="rgb(253,11,6)"/><text x="90.7349%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,035,051 samples, 0.17%)</title><rect x="94.4433%" y="165" width="0.1699%" height="15" fill="rgb(247,143,39)"/><text x="94.6933%" y="175.50"></text></g><g><title>optimized_mir (2,048,671 samples, 0.34%)</title><rect x="94.2769%" y="181" width="0.3364%" height="15" fill="rgb(236,97,10)"/><text x="94.5269%" y="191.50"></text></g><g><title>generate_crate_metadata (25,946,367 samples, 4.26%)</title><rect x="90.3574%" y="197" width="4.2599%" height="15" fill="rgb(233,208,19)"/><text x="90.6074%" y="207.50">gener..</text></g><g><title>hir_lowering (1,230,082 samples, 0.20%)</title><rect x="94.6174%" y="197" width="0.2020%" height="15" fill="rgb(216,164,2)"/><text x="94.8674%" y="207.50"></text></g><g><title>finish_ongoing_codegen (26,836,066 samples, 4.41%)</title><rect x="94.8224%" y="181" width="4.4060%" height="15" fill="rgb(220,129,5)"/><text x="95.0724%" y="191.50">finis..</text></g><g><title>link_crate (2,219,574 samples, 0.36%)</title><rect x="99.2284%" y="181" width="0.3644%" height="15" fill="rgb(242,17,10)"/><text x="99.4784%" y="191.50"></text></g><g><title>link_binary (2,191,204 samples, 0.36%)</title><rect x="99.2330%" y="165" width="0.3598%" height="15" fill="rgb(242,107,0)"/><text x="99.4830%" y="175.50"></text></g><g><title>link_rlib (1,604,307 samples, 0.26%)</title><rect x="99.3294%" y="149" width="0.2634%" height="15" fill="rgb(251,28,31)"/><text x="99.5794%" y="159.50"></text></g><g><title>link (29,084,360 samples, 4.78%)</title><rect x="94.8193%" y="197" width="4.7751%" height="15" fill="rgb(233,223,10)"/><text x="95.0693%" y="207.50">link</text></g><g><title>parse_crate (803,009 samples, 0.13%)</title><rect x="99.5944%" y="197" width="0.1318%" height="15" fill="rgb(215,21,27)"/><text x="99.8444%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,085,472 samples, 0.18%)</title><rect x="99.7569%" y="197" width="0.1782%" height="15" fill="rgb(232,23,21)"/><text x="100.0069%" y="207.50"></text></g><g><title>all (609,081,930 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (609,081,930 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>