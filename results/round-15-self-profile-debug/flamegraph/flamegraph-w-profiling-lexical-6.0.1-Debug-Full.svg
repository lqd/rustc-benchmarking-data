<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,296,714 samples, 6.25%)</title><rect x="2.7061%" y="277" width="6.2527%" height="15" fill="rgb(227,0,7)"/><text x="2.9561%" y="287.50">LLVM_pas..</text></g><g><title>implied_outlives_bounds (73,810 samples, 0.20%)</title><rect x="13.4482%" y="229" width="0.2009%" height="15" fill="rgb(217,0,24)"/><text x="13.6982%" y="239.50"></text></g><g><title>mir_promoted (137,601 samples, 0.37%)</title><rect x="14.1277%" y="213" width="0.3746%" height="15" fill="rgb(221,193,54)"/><text x="14.3777%" y="223.50"></text></g><g><title>mir_const_qualif_const_arg (120,491 samples, 0.33%)</title><rect x="14.1743%" y="197" width="0.3280%" height="15" fill="rgb(248,212,6)"/><text x="14.4243%" y="207.50"></text></g><g><title>mir_const (97,441 samples, 0.27%)</title><rect x="14.2370%" y="181" width="0.2653%" height="15" fill="rgb(208,68,35)"/><text x="14.4870%" y="191.50"></text></g><g><title>unsafety_check_result_for_const_arg (52,740 samples, 0.14%)</title><rect x="14.3587%" y="165" width="0.1436%" height="15" fill="rgb(232,128,0)"/><text x="14.6087%" y="175.50"></text></g><g><title>mir_built (45,130 samples, 0.12%)</title><rect x="14.3794%" y="149" width="0.1229%" height="15" fill="rgb(207,160,47)"/><text x="14.6294%" y="159.50"></text></g><g><title>mir_borrowck_const_arg (297,243 samples, 0.81%)</title><rect x="13.6959%" y="229" width="0.8092%" height="15" fill="rgb(228,23,34)"/><text x="13.9459%" y="239.50"></text></g><g><title>param_env (192,080 samples, 0.52%)</title><rect x="15.3168%" y="197" width="0.5229%" height="15" fill="rgb(218,30,26)"/><text x="15.5668%" y="207.50"></text></g><g><title>item_attrs (48,480 samples, 0.13%)</title><rect x="16.1493%" y="165" width="0.1320%" height="15" fill="rgb(220,122,19)"/><text x="16.3993%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,900 samples, 0.13%)</title><rect x="16.1536%" y="149" width="0.1277%" height="15" fill="rgb(250,228,42)"/><text x="16.4036%" y="159.50"></text></g><g><title>codegen_fn_attrs (78,891 samples, 0.21%)</title><rect x="16.0757%" y="181" width="0.2148%" height="15" fill="rgb(240,193,28)"/><text x="16.3257%" y="191.50"></text></g><g><title>is_copy_raw (221,862 samples, 0.60%)</title><rect x="17.2702%" y="165" width="0.6040%" height="15" fill="rgb(216,20,37)"/><text x="17.5202%" y="175.50"></text></g><g><title>evaluate_obligation (210,101 samples, 0.57%)</title><rect x="17.3023%" y="149" width="0.5720%" height="15" fill="rgb(206,188,39)"/><text x="17.5523%" y="159.50"></text></g><g><title>trait_impls_of (122,801 samples, 0.33%)</title><rect x="17.5399%" y="133" width="0.3343%" height="15" fill="rgb(217,207,13)"/><text x="17.7899%" y="143.50"></text></g><g><title>needs_drop_raw (80,211 samples, 0.22%)</title><rect x="17.9718%" y="165" width="0.2184%" height="15" fill="rgb(231,73,38)"/><text x="18.2218%" y="175.50"></text></g><g><title>is_copy_raw (70,611 samples, 0.19%)</title><rect x="17.9979%" y="149" width="0.1922%" height="15" fill="rgb(225,20,46)"/><text x="18.2479%" y="159.50"></text></g><g><title>evaluate_obligation (44,511 samples, 0.12%)</title><rect x="18.0690%" y="133" width="0.1212%" height="15" fill="rgb(210,31,41)"/><text x="18.3190%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (51,851 samples, 0.14%)</title><rect x="18.2932%" y="149" width="0.1412%" height="15" fill="rgb(221,200,47)"/><text x="18.5432%" y="159.50"></text></g><g><title>resolve_instance (108,372 samples, 0.30%)</title><rect x="18.1902%" y="165" width="0.2950%" height="15" fill="rgb(226,26,5)"/><text x="18.4402%" y="175.50"></text></g><g><title>thir_body (90,461 samples, 0.25%)</title><rect x="18.4950%" y="165" width="0.2463%" height="15" fill="rgb(249,33,26)"/><text x="18.7450%" y="175.50"></text></g><g><title>mir_const (1,447,963 samples, 3.94%)</title><rect x="14.8616%" y="213" width="3.9420%" height="15" fill="rgb(235,183,28)"/><text x="15.1116%" y="223.50">mir_..</text></g><g><title>unsafety_check_result (1,088,692 samples, 2.96%)</title><rect x="15.8397%" y="197" width="2.9639%" height="15" fill="rgb(221,5,38)"/><text x="16.0897%" y="207.50">uns..</text></g><g><title>mir_built (923,100 samples, 2.51%)</title><rect x="16.2905%" y="181" width="2.5131%" height="15" fill="rgb(247,18,42)"/><text x="16.5405%" y="191.50">mi..</text></g><g><title>mir_promoted (1,588,064 samples, 4.32%)</title><rect x="14.5051%" y="229" width="4.3234%" height="15" fill="rgb(241,131,45)"/><text x="14.7551%" y="239.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (96,631 samples, 0.26%)</title><rect x="18.8285%" y="229" width="0.2631%" height="15" fill="rgb(249,31,29)"/><text x="19.0785%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (48,710 samples, 0.13%)</title><rect x="19.0916%" y="229" width="0.1326%" height="15" fill="rgb(225,111,53)"/><text x="19.3416%" y="239.50"></text></g><g><title>MIR_borrow_checking (4,033,491 samples, 10.98%)</title><rect x="9.2279%" y="261" width="10.9810%" height="15" fill="rgb(238,160,17)"/><text x="9.4779%" y="271.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (4,015,440 samples, 10.93%)</title><rect x="9.2771%" y="245" width="10.9319%" height="15" fill="rgb(214,148,48)"/><text x="9.5271%" y="255.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (329,825 samples, 0.90%)</title><rect x="19.3110%" y="229" width="0.8979%" height="15" fill="rgb(232,36,49)"/><text x="19.5610%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (130,641 samples, 0.36%)</title><rect x="20.2621%" y="245" width="0.3557%" height="15" fill="rgb(209,103,24)"/><text x="20.5121%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (128,161 samples, 0.35%)</title><rect x="20.2688%" y="229" width="0.3489%" height="15" fill="rgb(229,88,8)"/><text x="20.5188%" y="239.50"></text></g><g><title>MIR_effect_checking (151,502 samples, 0.41%)</title><rect x="20.2089%" y="261" width="0.4125%" height="15" fill="rgb(213,181,19)"/><text x="20.4589%" y="271.50"></text></g><g><title>hir_module_items (89,221 samples, 0.24%)</title><rect x="20.6214%" y="261" width="0.2429%" height="15" fill="rgb(254,191,54)"/><text x="20.8714%" y="271.50"></text></g><g><title>get_lang_items (53,090 samples, 0.14%)</title><rect x="21.1994%" y="213" width="0.1445%" height="15" fill="rgb(241,83,37)"/><text x="21.4494%" y="223.50"></text></g><g><title>codegen_fn_attrs (121,322 samples, 0.33%)</title><rect x="21.0895%" y="229" width="0.3303%" height="15" fill="rgb(233,36,39)"/><text x="21.3395%" y="239.50"></text></g><g><title>check_mod_attrs (191,492 samples, 0.52%)</title><rect x="20.8987%" y="245" width="0.5213%" height="15" fill="rgb(226,3,54)"/><text x="21.1487%" y="255.50"></text></g><g><title>lookup_deprecation_entry (39,891 samples, 0.11%)</title><rect x="21.6906%" y="229" width="0.1086%" height="15" fill="rgb(245,192,40)"/><text x="21.9406%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (125,081 samples, 0.34%)</title><rect x="21.5376%" y="245" width="0.3405%" height="15" fill="rgb(238,167,29)"/><text x="21.7876%" y="255.50"></text></g><g><title>misc_checking_1 (409,535 samples, 1.11%)</title><rect x="20.8656%" y="261" width="1.1149%" height="15" fill="rgb(232,182,51)"/><text x="21.1156%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (96,871 samples, 0.26%)</title><rect x="21.9839%" y="245" width="0.2637%" height="15" fill="rgb(231,60,39)"/><text x="22.2339%" y="255.50"></text></g><g><title>check_mod_liveness (79,851 samples, 0.22%)</title><rect x="22.0302%" y="229" width="0.2174%" height="15" fill="rgb(208,69,12)"/><text x="22.2802%" y="239.50"></text></g><g><title>misc_checking_2 (186,122 samples, 0.51%)</title><rect x="21.9805%" y="261" width="0.5067%" height="15" fill="rgb(235,93,37)"/><text x="22.2305%" y="271.50"></text></g><g><title>match_checking (88,031 samples, 0.24%)</title><rect x="22.2476%" y="245" width="0.2397%" height="15" fill="rgb(213,116,39)"/><text x="22.4976%" y="255.50"></text></g><g><title>check_match (80,101 samples, 0.22%)</title><rect x="22.2692%" y="229" width="0.2181%" height="15" fill="rgb(222,207,29)"/><text x="22.5192%" y="239.50"></text></g><g><title>check_private_in_public (39,691 samples, 0.11%)</title><rect x="22.5073%" y="245" width="0.1081%" height="15" fill="rgb(206,96,30)"/><text x="22.7573%" y="255.50"></text></g><g><title>death_checking (122,981 samples, 0.33%)</title><rect x="22.6153%" y="245" width="0.3348%" height="15" fill="rgb(218,138,4)"/><text x="22.8653%" y="255.50"></text></g><g><title>explicit_predicates_of (37,830 samples, 0.10%)</title><rect x="24.2972%" y="165" width="0.1030%" height="15" fill="rgb(250,191,14)"/><text x="24.5472%" y="175.50"></text></g><g><title>crate_lints (534,585 samples, 1.46%)</title><rect x="22.9534%" y="229" width="1.4554%" height="15" fill="rgb(239,60,40)"/><text x="23.2034%" y="239.50"></text></g><g><title>param_env (161,582 samples, 0.44%)</title><rect x="23.9689%" y="213" width="0.4399%" height="15" fill="rgb(206,27,48)"/><text x="24.2189%" y="223.50"></text></g><g><title>predicates_of (70,481 samples, 0.19%)</title><rect x="24.2169%" y="197" width="0.1919%" height="15" fill="rgb(225,35,8)"/><text x="24.4669%" y="207.50"></text></g><g><title>predicates_defined_on (57,911 samples, 0.16%)</title><rect x="24.2512%" y="181" width="0.1577%" height="15" fill="rgb(250,213,24)"/><text x="24.5012%" y="191.50"></text></g><g><title>lint_checking (591,876 samples, 1.61%)</title><rect x="22.9501%" y="245" width="1.6114%" height="15" fill="rgb(247,123,22)"/><text x="23.2001%" y="255.50"></text></g><g><title>module_lints (56,071 samples, 0.15%)</title><rect x="24.4088%" y="229" width="0.1527%" height="15" fill="rgb(231,138,38)"/><text x="24.6588%" y="239.50"></text></g><g><title>lint_mod (54,341 samples, 0.15%)</title><rect x="24.4135%" y="213" width="0.1479%" height="15" fill="rgb(231,145,46)"/><text x="24.6635%" y="223.50"></text></g><g><title>privacy_access_levels (47,110 samples, 0.13%)</title><rect x="24.5615%" y="245" width="0.1283%" height="15" fill="rgb(251,118,11)"/><text x="24.8115%" y="255.50"></text></g><g><title>privacy_checking_modules (162,802 samples, 0.44%)</title><rect x="24.6897%" y="245" width="0.4432%" height="15" fill="rgb(217,147,25)"/><text x="24.9397%" y="255.50"></text></g><g><title>check_mod_privacy (161,752 samples, 0.44%)</title><rect x="24.6926%" y="229" width="0.4404%" height="15" fill="rgb(247,81,37)"/><text x="24.9426%" y="239.50"></text></g><g><title>misc_checking_3 (988,150 samples, 2.69%)</title><rect x="22.4872%" y="261" width="2.6902%" height="15" fill="rgb(209,12,38)"/><text x="22.7372%" y="271.50">mi..</text></g><g><title>associated_item (196,651 samples, 0.54%)</title><rect x="29.7873%" y="181" width="0.5354%" height="15" fill="rgb(227,1,9)"/><text x="30.0373%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (155,221 samples, 0.42%)</title><rect x="29.9000%" y="165" width="0.4226%" height="15" fill="rgb(248,47,43)"/><text x="30.1500%" y="175.50"></text></g><g><title>associated_items (268,131 samples, 0.73%)</title><rect x="29.6194%" y="197" width="0.7300%" height="15" fill="rgb(221,10,30)"/><text x="29.8694%" y="207.50"></text></g><g><title>impl_parent (82,221 samples, 0.22%)</title><rect x="30.9670%" y="53" width="0.2238%" height="15" fill="rgb(210,229,1)"/><text x="31.2170%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (63,211 samples, 0.17%)</title><rect x="31.0187%" y="37" width="0.1721%" height="15" fill="rgb(222,148,37)"/><text x="31.2687%" y="47.50"></text></g><g><title>impl_trait_ref (279,131 samples, 0.76%)</title><rect x="31.1908%" y="53" width="0.7599%" height="15" fill="rgb(234,67,33)"/><text x="31.4408%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (258,201 samples, 0.70%)</title><rect x="31.2478%" y="37" width="0.7029%" height="15" fill="rgb(247,98,35)"/><text x="31.4978%" y="47.50"></text></g><g><title>coherent_trait (480,205 samples, 1.31%)</title><rect x="30.7216%" y="85" width="1.3073%" height="15" fill="rgb(247,138,52)"/><text x="30.9716%" y="95.50"></text></g><g><title>specialization_graph_of (476,415 samples, 1.30%)</title><rect x="30.7319%" y="69" width="1.2970%" height="15" fill="rgb(213,79,30)"/><text x="30.9819%" y="79.50"></text></g><g><title>adt_destructor (486,715 samples, 1.33%)</title><rect x="30.7082%" y="117" width="1.3251%" height="15" fill="rgb(246,177,23)"/><text x="30.9582%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (486,105 samples, 1.32%)</title><rect x="30.7098%" y="101" width="1.3234%" height="15" fill="rgb(230,62,27)"/><text x="30.9598%" y="111.50"></text></g><g><title>adt_dtorck_constraint (541,155 samples, 1.47%)</title><rect x="30.6459%" y="133" width="1.4733%" height="15" fill="rgb(216,154,8)"/><text x="30.8959%" y="143.50"></text></g><g><title>adt_dtorck_constraint (574,895 samples, 1.57%)</title><rect x="30.5758%" y="149" width="1.5651%" height="15" fill="rgb(244,35,45)"/><text x="30.8258%" y="159.50"></text></g><g><title>adt_dtorck_constraint (583,255 samples, 1.59%)</title><rect x="30.5636%" y="165" width="1.5879%" height="15" fill="rgb(251,115,12)"/><text x="30.8136%" y="175.50"></text></g><g><title>dropck_outlives (649,887 samples, 1.77%)</title><rect x="30.3919%" y="197" width="1.7693%" height="15" fill="rgb(240,54,50)"/><text x="30.6419%" y="207.50"></text></g><g><title>adt_dtorck_constraint (605,146 samples, 1.65%)</title><rect x="30.5137%" y="181" width="1.6475%" height="15" fill="rgb(233,84,52)"/><text x="30.7637%" y="191.50"></text></g><g><title>adt_def (37,260 samples, 0.10%)</title><rect x="32.3819%" y="165" width="0.1014%" height="15" fill="rgb(207,117,47)"/><text x="32.6319%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (36,880 samples, 0.10%)</title><rect x="32.3830%" y="149" width="0.1004%" height="15" fill="rgb(249,43,39)"/><text x="32.6330%" y="159.50"></text></g><g><title>adt_def (43,431 samples, 0.12%)</title><rect x="32.4868%" y="149" width="0.1182%" height="15" fill="rgb(209,38,44)"/><text x="32.7368%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (43,171 samples, 0.12%)</title><rect x="32.4875%" y="133" width="0.1175%" height="15" fill="rgb(236,212,23)"/><text x="32.7375%" y="143.50"></text></g><g><title>item_attrs (40,701 samples, 0.11%)</title><rect x="32.4942%" y="117" width="0.1108%" height="15" fill="rgb(242,79,21)"/><text x="32.7442%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (40,421 samples, 0.11%)</title><rect x="32.4950%" y="101" width="0.1100%" height="15" fill="rgb(211,96,35)"/><text x="32.7450%" y="111.50"></text></g><g><title>adt_sized_constraint (45,121 samples, 0.12%)</title><rect x="32.4834%" y="165" width="0.1228%" height="15" fill="rgb(253,215,40)"/><text x="32.7334%" y="175.50"></text></g><g><title>adt_sized_constraint (92,391 samples, 0.25%)</title><rect x="32.3757%" y="181" width="0.2515%" height="15" fill="rgb(211,81,21)"/><text x="32.6257%" y="191.50"></text></g><g><title>evaluate_obligation (211,172 samples, 0.57%)</title><rect x="32.1612%" y="197" width="0.5749%" height="15" fill="rgb(208,190,38)"/><text x="32.4112%" y="207.50"></text></g><g><title>fn_sig (65,540 samples, 0.18%)</title><rect x="32.7524%" y="197" width="0.1784%" height="15" fill="rgb(235,213,38)"/><text x="33.0024%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (61,110 samples, 0.17%)</title><rect x="32.7645%" y="181" width="0.1664%" height="15" fill="rgb(237,122,38)"/><text x="33.0145%" y="191.50"></text></g><g><title>item_attrs (49,062 samples, 0.13%)</title><rect x="33.0760%" y="197" width="0.1336%" height="15" fill="rgb(244,218,35)"/><text x="33.3260%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,802 samples, 0.13%)</title><rect x="33.0821%" y="181" width="0.1274%" height="15" fill="rgb(240,68,47)"/><text x="33.3321%" y="191.50"></text></g><g><title>evaluate_obligation (138,012 samples, 0.38%)</title><rect x="33.5200%" y="181" width="0.3757%" height="15" fill="rgb(210,16,53)"/><text x="33.7700%" y="191.50"></text></g><g><title>method_autoderef_steps (256,303 samples, 0.70%)</title><rect x="33.2449%" y="197" width="0.6978%" height="15" fill="rgb(235,124,12)"/><text x="33.4949%" y="207.50"></text></g><g><title>evaluate_obligation (85,980 samples, 0.23%)</title><rect x="37.5286%" y="165" width="0.2341%" height="15" fill="rgb(224,169,11)"/><text x="37.7786%" y="175.50"></text></g><g><title>item_attrs (40,511 samples, 0.11%)</title><rect x="37.8459%" y="165" width="0.1103%" height="15" fill="rgb(250,166,2)"/><text x="38.0959%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (39,071 samples, 0.11%)</title><rect x="37.8498%" y="149" width="0.1064%" height="15" fill="rgb(242,216,29)"/><text x="38.0998%" y="159.50"></text></g><g><title>method_autoderef_steps (120,200 samples, 0.33%)</title><rect x="37.9605%" y="165" width="0.3272%" height="15" fill="rgb(230,116,27)"/><text x="38.2105%" y="175.50"></text></g><g><title>evaluate_obligation (62,450 samples, 0.17%)</title><rect x="38.1177%" y="149" width="0.1700%" height="15" fill="rgb(228,99,48)"/><text x="38.3677%" y="159.50"></text></g><g><title>trait_impls_of (49,370 samples, 0.13%)</title><rect x="38.3591%" y="165" width="0.1344%" height="15" fill="rgb(253,11,6)"/><text x="38.6091%" y="175.50"></text></g><g><title>opt_const_param_of (1,683,038 samples, 4.58%)</title><rect x="33.9427%" y="197" width="4.5820%" height="15" fill="rgb(247,143,39)"/><text x="34.1927%" y="207.50">opt_c..</text></g><g><title>typeck (1,672,417 samples, 4.55%)</title><rect x="33.9716%" y="181" width="4.5531%" height="15" fill="rgb(236,97,10)"/><text x="34.2216%" y="191.50">typeck</text></g><g><title>predicates_of (68,302 samples, 0.19%)</title><rect x="38.5411%" y="197" width="0.1859%" height="15" fill="rgb(233,208,19)"/><text x="38.7911%" y="207.50"></text></g><g><title>predicates_defined_on (47,720 samples, 0.13%)</title><rect x="38.5972%" y="181" width="0.1299%" height="15" fill="rgb(216,164,2)"/><text x="38.8472%" y="191.50"></text></g><g><title>type_of (39,730 samples, 0.11%)</title><rect x="38.8089%" y="197" width="0.1082%" height="15" fill="rgb(220,129,5)"/><text x="39.0589%" y="207.50"></text></g><g><title>param_env (46,031 samples, 0.13%)</title><rect x="39.1981%" y="181" width="0.1253%" height="15" fill="rgb(242,17,10)"/><text x="39.4481%" y="191.50"></text></g><g><title>typeck_const_arg (164,682 samples, 0.45%)</title><rect x="38.9171%" y="197" width="0.4483%" height="15" fill="rgb(242,107,0)"/><text x="39.1671%" y="207.50"></text></g><g><title>item_bodies_checking (5,184,252 samples, 14.11%)</title><rect x="25.3009%" y="245" width="14.1139%" height="15" fill="rgb(251,28,31)"/><text x="25.5509%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (5,182,562 samples, 14.11%)</title><rect x="25.3055%" y="229" width="14.1093%" height="15" fill="rgb(233,223,10)"/><text x="25.5555%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (5,171,272 samples, 14.08%)</title><rect x="25.3362%" y="213" width="14.0786%" height="15" fill="rgb(215,21,27)"/><text x="25.5862%" y="223.50">typeck</text></g><g><title>associated_item (42,490 samples, 0.12%)</title><rect x="40.0733%" y="181" width="0.1157%" height="15" fill="rgb(232,23,21)"/><text x="40.3233%" y="191.50"></text></g><g><title>associated_items (73,810 samples, 0.20%)</title><rect x="40.0168%" y="197" width="0.2009%" height="15" fill="rgb(244,5,23)"/><text x="40.2668%" y="207.50"></text></g><g><title>super_predicates_that_define_assoc_type (62,301 samples, 0.17%)</title><rect x="40.2289%" y="197" width="0.1696%" height="15" fill="rgb(226,81,46)"/><text x="40.4789%" y="207.50"></text></g><g><title>super_predicates_of (50,111 samples, 0.14%)</title><rect x="40.2621%" y="181" width="0.1364%" height="15" fill="rgb(247,70,30)"/><text x="40.5121%" y="191.50"></text></g><g><title>metadata_decode_entry_super_predicates_of (45,161 samples, 0.12%)</title><rect x="40.2756%" y="165" width="0.1229%" height="15" fill="rgb(212,68,19)"/><text x="40.5256%" y="175.50"></text></g><g><title>fn_sig (423,934 samples, 1.15%)</title><rect x="39.5750%" y="213" width="1.1541%" height="15" fill="rgb(240,187,13)"/><text x="39.8250%" y="223.50"></text></g><g><title>type_param_predicates (88,030 samples, 0.24%)</title><rect x="40.4895%" y="197" width="0.2397%" height="15" fill="rgb(223,113,26)"/><text x="40.7395%" y="207.50"></text></g><g><title>named_region_map (72,532 samples, 0.20%)</title><rect x="40.8318%" y="197" width="0.1975%" height="15" fill="rgb(206,192,2)"/><text x="41.0818%" y="207.50"></text></g><g><title>resolve_lifetimes (67,482 samples, 0.18%)</title><rect x="40.8455%" y="181" width="0.1837%" height="15" fill="rgb(241,108,4)"/><text x="41.0955%" y="191.50"></text></g><g><title>generics_of (119,302 samples, 0.32%)</title><rect x="40.7292%" y="213" width="0.3248%" height="15" fill="rgb(247,173,49)"/><text x="40.9792%" y="223.50"></text></g><g><title>explicit_predicates_of (120,641 samples, 0.33%)</title><rect x="41.0985%" y="181" width="0.3284%" height="15" fill="rgb(224,114,35)"/><text x="41.3485%" y="191.50"></text></g><g><title>predicates_of (142,981 samples, 0.39%)</title><rect x="41.0540%" y="213" width="0.3893%" height="15" fill="rgb(245,159,27)"/><text x="41.3040%" y="223.50"></text></g><g><title>predicates_defined_on (137,181 samples, 0.37%)</title><rect x="41.0698%" y="197" width="0.3735%" height="15" fill="rgb(245,172,44)"/><text x="41.3198%" y="207.50"></text></g><g><title>type_collecting (760,307 samples, 2.07%)</title><rect x="39.4292%" y="245" width="2.0699%" height="15" fill="rgb(236,23,11)"/><text x="39.6792%" y="255.50">t..</text></g><g><title>collect_mod_item_types (753,737 samples, 2.05%)</title><rect x="39.4471%" y="229" width="2.0520%" height="15" fill="rgb(205,117,38)"/><text x="39.6971%" y="239.50">c..</text></g><g><title>adt_def (46,240 samples, 0.13%)</title><rect x="43.8145%" y="181" width="0.1259%" height="15" fill="rgb(237,72,25)"/><text x="44.0645%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (45,220 samples, 0.12%)</title><rect x="43.8173%" y="165" width="0.1231%" height="15" fill="rgb(244,70,9)"/><text x="44.0673%" y="175.50"></text></g><g><title>adt_sized_constraint (64,590 samples, 0.18%)</title><rect x="43.7864%" y="197" width="0.1758%" height="15" fill="rgb(217,125,39)"/><text x="44.0364%" y="207.50"></text></g><g><title>evaluate_obligation (197,191 samples, 0.54%)</title><rect x="43.5287%" y="213" width="0.5368%" height="15" fill="rgb(235,36,10)"/><text x="43.7787%" y="223.50"></text></g><g><title>implied_outlives_bounds (163,722 samples, 0.45%)</title><rect x="44.0655%" y="213" width="0.4457%" height="15" fill="rgb(251,123,47)"/><text x="44.3155%" y="223.50"></text></g><g><title>param_env (291,936 samples, 0.79%)</title><rect x="44.5756%" y="213" width="0.7948%" height="15" fill="rgb(221,13,13)"/><text x="44.8256%" y="223.50"></text></g><g><title>predicates_of (77,471 samples, 0.21%)</title><rect x="45.3704%" y="213" width="0.2109%" height="15" fill="rgb(238,131,9)"/><text x="45.6204%" y="223.50"></text></g><g><title>predicates_defined_on (58,700 samples, 0.16%)</title><rect x="45.4215%" y="197" width="0.1598%" height="15" fill="rgb(211,50,8)"/><text x="45.6715%" y="207.50"></text></g><g><title>region_scope_tree (38,570 samples, 0.11%)</title><rect x="45.5813%" y="213" width="0.1050%" height="15" fill="rgb(245,182,24)"/><text x="45.8313%" y="223.50"></text></g><g><title>analysis (13,604,908 samples, 37.04%)</title><rect x="8.9588%" y="277" width="37.0388%" height="15" fill="rgb(242,14,37)"/><text x="9.2088%" y="287.50">analysis</text></g><g><title>type_check_crate (7,647,557 samples, 20.82%)</title><rect x="25.1774%" y="261" width="20.8202%" height="15" fill="rgb(246,228,12)"/><text x="25.4274%" y="271.50">type_check_crate</text></g><g><title>wf_checking (1,651,367 samples, 4.50%)</title><rect x="41.5018%" y="245" width="4.4958%" height="15" fill="rgb(213,55,15)"/><text x="41.7518%" y="255.50">wf_ch..</text></g><g><title>check_item_well_formed (1,616,377 samples, 4.40%)</title><rect x="41.5971%" y="229" width="4.4005%" height="15" fill="rgb(209,9,3)"/><text x="41.8471%" y="239.50">check..</text></g><g><title>trait_impls_of (114,331 samples, 0.31%)</title><rect x="45.6863%" y="213" width="0.3113%" height="15" fill="rgb(230,59,30)"/><text x="45.9363%" y="223.50"></text></g><g><title>implementations_of_trait (57,191 samples, 0.16%)</title><rect x="45.8419%" y="197" width="0.1557%" height="15" fill="rgb(209,121,21)"/><text x="46.0919%" y="207.50"></text></g><g><title>codegen_module (292,423 samples, 0.80%)</title><rect x="47.1032%" y="261" width="0.7961%" height="15" fill="rgb(220,109,13)"/><text x="47.3532%" y="271.50"></text></g><g><title>codegen_crate (777,998 samples, 2.12%)</title><rect x="46.0233%" y="277" width="2.1181%" height="15" fill="rgb(232,18,1)"/><text x="46.2733%" y="287.50">c..</text></g><g><title>LLVM_module_codegen (1,849,419 samples, 5.03%)</title><rect x="48.1684%" y="261" width="5.0350%" height="15" fill="rgb(215,41,42)"/><text x="48.4184%" y="271.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (1,801,478 samples, 4.90%)</title><rect x="48.2990%" y="245" width="4.9044%" height="15" fill="rgb(224,123,36)"/><text x="48.5490%" y="255.50">LLVM_m..</text></g><g><title>codegen_module_optimize (2,041,091 samples, 5.56%)</title><rect x="48.1413%" y="277" width="5.5568%" height="15" fill="rgb(240,125,3)"/><text x="48.3913%" y="287.50">codegen..</text></g><g><title>LLVM_module_optimize (181,712 samples, 0.49%)</title><rect x="53.2034%" y="261" width="0.4947%" height="15" fill="rgb(205,98,50)"/><text x="53.4534%" y="271.50"></text></g><g><title>AST_validation (109,091 samples, 0.30%)</title><rect x="54.5555%" y="261" width="0.2970%" height="15" fill="rgb(205,185,37)"/><text x="54.8055%" y="271.50"></text></g><g><title>crate_injection (59,911 samples, 0.16%)</title><rect x="54.9060%" y="261" width="0.1631%" height="15" fill="rgb(238,207,15)"/><text x="55.1560%" y="271.50"></text></g><g><title>macro_expand_crate (7,663,018 samples, 20.86%)</title><rect x="55.0691%" y="261" width="20.8622%" height="15" fill="rgb(213,199,42)"/><text x="55.3191%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (7,650,668 samples, 20.83%)</title><rect x="55.1027%" y="245" width="20.8286%" height="15" fill="rgb(235,201,11)"/><text x="55.3527%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,358,454 samples, 6.42%)</title><rect x="69.5106%" y="229" width="6.4208%" height="15" fill="rgb(207,46,11)"/><text x="69.7606%" y="239.50">metadata..</text></g><g><title>metadata_register_crate (968,929 samples, 2.64%)</title><rect x="73.2935%" y="213" width="2.6379%" height="15" fill="rgb(241,35,35)"/><text x="73.5435%" y="223.50">me..</text></g><g><title>metadata_register_crate (127,761 samples, 0.35%)</title><rect x="75.5835%" y="197" width="0.3478%" height="15" fill="rgb(243,32,47)"/><text x="75.8335%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (110,481 samples, 0.30%)</title><rect x="75.9424%" y="261" width="0.3008%" height="15" fill="rgb(247,202,23)"/><text x="76.1924%" y="271.50"></text></g><g><title>finalize_imports (158,541 samples, 0.43%)</title><rect x="76.2556%" y="245" width="0.4316%" height="15" fill="rgb(219,102,11)"/><text x="76.5056%" y="255.50"></text></g><g><title>late_resolve_crate (637,026 samples, 1.73%)</title><rect x="76.7290%" y="245" width="1.7343%" height="15" fill="rgb(243,110,44)"/><text x="76.9790%" y="255.50"></text></g><g><title>configure_and_expand (9,142,693 samples, 24.89%)</title><rect x="53.6981%" y="277" width="24.8906%" height="15" fill="rgb(222,74,54)"/><text x="53.9481%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (861,568 samples, 2.35%)</title><rect x="76.2431%" y="261" width="2.3456%" height="15" fill="rgb(216,99,12)"/><text x="76.4931%" y="271.50">r..</text></g><g><title>drop_ast (44,561 samples, 0.12%)</title><rect x="78.5887%" y="277" width="0.1213%" height="15" fill="rgb(226,22,26)"/><text x="78.8387%" y="287.50"></text></g><g><title>early_lint_checks (115,411 samples, 0.31%)</title><rect x="78.7724%" y="277" width="0.3142%" height="15" fill="rgb(217,163,10)"/><text x="79.0224%" y="287.50"></text></g><g><title>free_global_ctxt (1,941,860 samples, 5.29%)</title><rect x="79.0866%" y="277" width="5.2866%" height="15" fill="rgb(213,25,53)"/><text x="79.3366%" y="287.50">free_g..</text></g><g><title>crate_hash (69,561 samples, 0.19%)</title><rect x="85.6566%" y="261" width="0.1894%" height="15" fill="rgb(252,105,26)"/><text x="85.9066%" y="271.50"></text></g><g><title>collect_and_partition_mono_items (45,950 samples, 0.13%)</title><rect x="85.9756%" y="245" width="0.1251%" height="15" fill="rgb(220,39,43)"/><text x="86.2256%" y="255.50"></text></g><g><title>exported_symbols (86,891 samples, 0.24%)</title><rect x="85.9492%" y="261" width="0.2366%" height="15" fill="rgb(229,68,48)"/><text x="86.1992%" y="271.50"></text></g><g><title>is_sized_raw (79,751 samples, 0.22%)</title><rect x="87.5994%" y="229" width="0.2171%" height="15" fill="rgb(252,8,32)"/><text x="87.8494%" y="239.50"></text></g><g><title>evaluate_obligation (54,220 samples, 0.15%)</title><rect x="87.6689%" y="213" width="0.1476%" height="15" fill="rgb(223,20,43)"/><text x="87.9189%" y="223.50"></text></g><g><title>layout_of (65,170 samples, 0.18%)</title><rect x="87.8165%" y="229" width="0.1774%" height="15" fill="rgb(229,81,49)"/><text x="88.0665%" y="239.50"></text></g><g><title>layout_of (244,772 samples, 0.67%)</title><rect x="87.4487%" y="245" width="0.6664%" height="15" fill="rgb(236,28,36)"/><text x="87.6987%" y="255.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (38,130 samples, 0.10%)</title><rect x="88.0113%" y="229" width="0.1038%" height="15" fill="rgb(249,185,26)"/><text x="88.2613%" y="239.50"></text></g><g><title>needs_drop_raw (38,380 samples, 0.10%)</title><rect x="89.0699%" y="229" width="0.1045%" height="15" fill="rgb(249,174,33)"/><text x="89.3199%" y="239.50"></text></g><g><title>optimized_mir (1,050,139 samples, 2.86%)</title><rect x="86.3480%" y="261" width="2.8590%" height="15" fill="rgb(233,201,37)"/><text x="86.5980%" y="271.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (401,075 samples, 1.09%)</title><rect x="88.1151%" y="245" width="1.0919%" height="15" fill="rgb(221,78,26)"/><text x="88.3651%" y="255.50"></text></g><g><title>generate_crate_metadata (1,815,618 samples, 4.94%)</title><rect x="84.3733%" y="277" width="4.9429%" height="15" fill="rgb(250,127,30)"/><text x="84.6233%" y="287.50">genera..</text></g><g><title>hir_lowering (579,046 samples, 1.58%)</title><rect x="89.3162%" y="277" width="1.5764%" height="15" fill="rgb(230,49,44)"/><text x="89.5662%" y="287.50"></text></g><g><title>link_crate (617,207 samples, 1.68%)</title><rect x="90.9680%" y="261" width="1.6803%" height="15" fill="rgb(229,67,23)"/><text x="91.2180%" y="271.50"></text></g><g><title>link_binary (601,477 samples, 1.64%)</title><rect x="91.0108%" y="245" width="1.6375%" height="15" fill="rgb(249,83,47)"/><text x="91.2608%" y="255.50"></text></g><g><title>link_rlib (399,734 samples, 1.09%)</title><rect x="91.5601%" y="229" width="1.0883%" height="15" fill="rgb(215,43,3)"/><text x="91.8101%" y="239.50"></text></g><g><title>link (651,877 samples, 1.77%)</title><rect x="90.8926%" y="277" width="1.7747%" height="15" fill="rgb(238,154,13)"/><text x="91.1426%" y="287.50">l..</text></g><g><title>parse_crate (1,745,667 samples, 4.75%)</title><rect x="92.6673%" y="277" width="4.7525%" height="15" fill="rgb(219,56,2)"/><text x="92.9173%" y="287.50">parse_..</text></g><g><title>prepare_outputs (169,001 samples, 0.46%)</title><rect x="97.4452%" y="277" width="0.4601%" height="15" fill="rgb(233,0,4)"/><text x="97.6952%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (370,134 samples, 1.01%)</title><rect x="97.9053%" y="277" width="1.0077%" height="15" fill="rgb(235,30,7)"/><text x="98.1553%" y="287.50"></text></g><g><title>setup_global_ctxt (86,881 samples, 0.24%)</title><rect x="98.9155%" y="277" width="0.2365%" height="15" fill="rgb(250,79,13)"/><text x="99.1655%" y="287.50"></text></g><g><title>all (36,731,513 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (36,731,513 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (311,473 samples, 0.85%)</title><rect x="99.1520%" y="277" width="0.8480%" height="15" fill="rgb(235,168,5)"/><text x="99.4020%" y="287.50"></text></g></svg></svg>