<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,001,133 samples, 6.52%)</title><rect x="0.3654%" y="181" width="6.5216%" height="15" fill="rgb(227,0,7)"/><text x="0.6154%" y="191.50">LLVM_pass..</text></g><g><title>item_attrs (296,982 samples, 0.14%)</title><rect x="13.2456%" y="69" width="0.1383%" height="15" fill="rgb(217,0,24)"/><text x="13.4956%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (287,882 samples, 0.13%)</title><rect x="13.2499%" y="53" width="0.1341%" height="15" fill="rgb(221,193,54)"/><text x="13.4999%" y="63.50"></text></g><g><title>codegen_fn_attrs (419,774 samples, 0.20%)</title><rect x="13.2002%" y="85" width="0.1955%" height="15" fill="rgb(248,212,6)"/><text x="13.4502%" y="95.50"></text></g><g><title>is_copy_raw (240,902 samples, 0.11%)</title><rect x="14.4860%" y="69" width="0.1122%" height="15" fill="rgb(208,68,35)"/><text x="14.7360%" y="79.50"></text></g><g><title>adt_drop_tys (251,302 samples, 0.12%)</title><rect x="14.6447%" y="53" width="0.1171%" height="15" fill="rgb(232,128,0)"/><text x="14.8947%" y="63.50"></text></g><g><title>is_copy_raw (709,596 samples, 0.33%)</title><rect x="14.7618%" y="53" width="0.3305%" height="15" fill="rgb(207,160,47)"/><text x="15.0118%" y="63.50"></text></g><g><title>evaluate_obligation (608,954 samples, 0.28%)</title><rect x="14.8086%" y="37" width="0.2836%" height="15" fill="rgb(228,23,34)"/><text x="15.0586%" y="47.50"></text></g><g><title>needs_drop_raw (1,062,920 samples, 0.50%)</title><rect x="14.5983%" y="69" width="0.4951%" height="15" fill="rgb(218,30,26)"/><text x="14.8483%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (332,263 samples, 0.15%)</title><rect x="15.1891%" y="53" width="0.1548%" height="15" fill="rgb(220,122,19)"/><text x="15.4391%" y="63.50"></text></g><g><title>specialization_graph_of (343,502 samples, 0.16%)</title><rect x="15.3661%" y="53" width="0.1600%" height="15" fill="rgb(250,228,42)"/><text x="15.6161%" y="63.50"></text></g><g><title>resolve_instance (1,016,390 samples, 0.47%)</title><rect x="15.0933%" y="69" width="0.4734%" height="15" fill="rgb(240,193,28)"/><text x="15.3433%" y="79.50"></text></g><g><title>thir_body (962,818 samples, 0.45%)</title><rect x="15.5756%" y="69" width="0.4485%" height="15" fill="rgb(216,20,37)"/><text x="15.8256%" y="79.50"></text></g><g><title>mir_const (7,504,469 samples, 3.50%)</title><rect x="12.5650%" y="117" width="3.4955%" height="15" fill="rgb(206,188,39)"/><text x="12.8150%" y="127.50">mir..</text></g><g><title>unsafety_check_result (6,592,465 samples, 3.07%)</title><rect x="12.9898%" y="101" width="3.0707%" height="15" fill="rgb(217,207,13)"/><text x="13.2398%" y="111.50">uns..</text></g><g><title>mir_built (5,720,955 samples, 2.66%)</title><rect x="13.3958%" y="85" width="2.6648%" height="15" fill="rgb(231,73,38)"/><text x="13.6458%" y="95.50">mi..</text></g><g><title>mir_promoted (8,574,299 samples, 3.99%)</title><rect x="12.2187%" y="133" width="3.9938%" height="15" fill="rgb(225,20,46)"/><text x="12.4687%" y="143.50">mir_..</text></g><g><title>mir_const_qualif (326,323 samples, 0.15%)</title><rect x="16.0605%" y="117" width="0.1520%" height="15" fill="rgb(210,31,41)"/><text x="16.3105%" y="127.50"></text></g><g><title>mir_const (237,102 samples, 0.11%)</title><rect x="16.1021%" y="101" width="0.1104%" height="15" fill="rgb(221,200,47)"/><text x="16.3521%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (289,523 samples, 0.13%)</title><rect x="16.2134%" y="133" width="0.1349%" height="15" fill="rgb(226,26,5)"/><text x="16.4634%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,206,932 samples, 0.56%)</title><rect x="16.3482%" y="133" width="0.5622%" height="15" fill="rgb(249,33,26)"/><text x="16.5982%" y="143.50"></text></g><g><title>normalize_projection_ty (804,808 samples, 0.37%)</title><rect x="16.5355%" y="117" width="0.3749%" height="15" fill="rgb(235,183,28)"/><text x="16.7855%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,349,963 samples, 1.09%)</title><rect x="17.0114%" y="133" width="1.0946%" height="15" fill="rgb(221,5,38)"/><text x="17.2614%" y="143.50"></text></g><g><title>MIR_borrow_checking (23,679,021 samples, 11.03%)</title><rect x="7.0781%" y="165" width="11.0295%" height="15" fill="rgb(247,18,42)"/><text x="7.3281%" y="175.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (23,579,171 samples, 10.98%)</title><rect x="7.1247%" y="149" width="10.9829%" height="15" fill="rgb(241,131,45)"/><text x="7.3747%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (268,902 samples, 0.13%)</title><rect x="18.1076%" y="165" width="0.1253%" height="15" fill="rgb(249,31,29)"/><text x="18.3576%" y="175.50"></text></g><g><title>hir_module_items (264,813 samples, 0.12%)</title><rect x="18.2328%" y="165" width="0.1233%" height="15" fill="rgb(225,111,53)"/><text x="18.4828%" y="175.50"></text></g><g><title>codegen_fn_attrs (384,215 samples, 0.18%)</title><rect x="18.4707%" y="133" width="0.1790%" height="15" fill="rgb(238,160,17)"/><text x="18.7207%" y="143.50"></text></g><g><title>check_mod_attrs (601,546 samples, 0.28%)</title><rect x="18.3695%" y="149" width="0.2802%" height="15" fill="rgb(214,148,48)"/><text x="18.6195%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (262,694 samples, 0.12%)</title><rect x="18.7296%" y="149" width="0.1224%" height="15" fill="rgb(232,36,49)"/><text x="18.9796%" y="159.50"></text></g><g><title>misc_checking_1 (1,125,221 samples, 0.52%)</title><rect x="18.3564%" y="165" width="0.5241%" height="15" fill="rgb(209,103,24)"/><text x="18.6064%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (441,525 samples, 0.21%)</title><rect x="18.8812%" y="149" width="0.2057%" height="15" fill="rgb(229,88,8)"/><text x="19.1312%" y="159.50"></text></g><g><title>check_mod_liveness (357,805 samples, 0.17%)</title><rect x="18.9202%" y="133" width="0.1667%" height="15" fill="rgb(213,181,19)"/><text x="19.1702%" y="143.50"></text></g><g><title>misc_checking_2 (825,079 samples, 0.38%)</title><rect x="18.8805%" y="165" width="0.3843%" height="15" fill="rgb(254,191,54)"/><text x="19.1305%" y="175.50"></text></g><g><title>match_checking (381,964 samples, 0.18%)</title><rect x="19.0869%" y="149" width="0.1779%" height="15" fill="rgb(241,83,37)"/><text x="19.3369%" y="159.50"></text></g><g><title>check_match (356,774 samples, 0.17%)</title><rect x="19.0986%" y="133" width="0.1662%" height="15" fill="rgb(233,36,39)"/><text x="19.3486%" y="143.50"></text></g><g><title>death_checking (303,444 samples, 0.14%)</title><rect x="19.3494%" y="149" width="0.1413%" height="15" fill="rgb(226,3,54)"/><text x="19.5994%" y="159.50"></text></g><g><title>crate_lints (1,166,641 samples, 0.54%)</title><rect x="19.4914%" y="133" width="0.5434%" height="15" fill="rgb(245,192,40)"/><text x="19.7414%" y="143.50"></text></g><g><title>type_of (336,192 samples, 0.16%)</title><rect x="19.8782%" y="117" width="0.1566%" height="15" fill="rgb(238,167,29)"/><text x="20.1282%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (259,341 samples, 0.12%)</title><rect x="19.9140%" y="101" width="0.1208%" height="15" fill="rgb(232,182,51)"/><text x="20.1640%" y="111.50"></text></g><g><title>lint_checking (1,498,725 samples, 0.70%)</title><rect x="19.4908%" y="149" width="0.6981%" height="15" fill="rgb(231,60,39)"/><text x="19.7408%" y="159.50"></text></g><g><title>module_lints (330,644 samples, 0.15%)</title><rect x="20.0348%" y="133" width="0.1540%" height="15" fill="rgb(208,69,12)"/><text x="20.2848%" y="143.50"></text></g><g><title>lint_mod (325,914 samples, 0.15%)</title><rect x="20.0370%" y="117" width="0.1518%" height="15" fill="rgb(235,93,37)"/><text x="20.2870%" y="127.50"></text></g><g><title>privacy_access_levels (222,193 samples, 0.10%)</title><rect x="20.1888%" y="149" width="0.1035%" height="15" fill="rgb(213,116,39)"/><text x="20.4388%" y="159.50"></text></g><g><title>privacy_checking_modules (630,376 samples, 0.29%)</title><rect x="20.2923%" y="149" width="0.2936%" height="15" fill="rgb(222,207,29)"/><text x="20.5423%" y="159.50"></text></g><g><title>check_mod_privacy (626,656 samples, 0.29%)</title><rect x="20.2941%" y="133" width="0.2919%" height="15" fill="rgb(206,96,30)"/><text x="20.5441%" y="143.50"></text></g><g><title>misc_checking_3 (2,857,839 samples, 1.33%)</title><rect x="19.2648%" y="165" width="1.3312%" height="15" fill="rgb(218,138,4)"/><text x="19.5148%" y="175.50"></text></g><g><title>impl_parent (501,415 samples, 0.23%)</title><rect x="21.0513%" y="101" width="0.2336%" height="15" fill="rgb(250,191,14)"/><text x="21.3013%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (298,332 samples, 0.14%)</title><rect x="21.1458%" y="85" width="0.1390%" height="15" fill="rgb(239,60,40)"/><text x="21.3958%" y="95.50"></text></g><g><title>impl_trait_ref (1,212,853 samples, 0.56%)</title><rect x="21.2848%" y="101" width="0.5649%" height="15" fill="rgb(206,27,48)"/><text x="21.5348%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,014,940 samples, 0.47%)</title><rect x="21.3770%" y="85" width="0.4727%" height="15" fill="rgb(225,35,8)"/><text x="21.6270%" y="95.50"></text></g><g><title>coherent_trait (2,804,019 samples, 1.31%)</title><rect x="20.6296%" y="133" width="1.3061%" height="15" fill="rgb(250,213,24)"/><text x="20.8796%" y="143.50"></text></g><g><title>specialization_graph_of (2,791,919 samples, 1.30%)</title><rect x="20.6352%" y="117" width="1.3004%" height="15" fill="rgb(247,123,22)"/><text x="20.8852%" y="127.50"></text></g><g><title>coherence_checking (2,861,239 samples, 1.33%)</title><rect x="20.6234%" y="149" width="1.3327%" height="15" fill="rgb(231,138,38)"/><text x="20.8734%" y="159.50"></text></g><g><title>adt_sized_constraint (215,752 samples, 0.10%)</title><rect x="32.0252%" y="85" width="0.1005%" height="15" fill="rgb(231,145,46)"/><text x="32.2752%" y="95.50"></text></g><g><title>adt_def (215,152 samples, 0.10%)</title><rect x="32.0255%" y="69" width="0.1002%" height="15" fill="rgb(251,118,11)"/><text x="32.2755%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (214,932 samples, 0.10%)</title><rect x="32.0256%" y="53" width="0.1001%" height="15" fill="rgb(217,147,25)"/><text x="32.2756%" y="63.50"></text></g><g><title>adt_sized_constraint (347,803 samples, 0.16%)</title><rect x="31.9681%" y="101" width="0.1620%" height="15" fill="rgb(247,81,37)"/><text x="32.2181%" y="111.50"></text></g><g><title>associated_item (375,074 samples, 0.17%)</title><rect x="32.2011%" y="85" width="0.1747%" height="15" fill="rgb(209,12,38)"/><text x="32.4511%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (299,322 samples, 0.14%)</title><rect x="32.2364%" y="69" width="0.1394%" height="15" fill="rgb(227,1,9)"/><text x="32.4864%" y="79.50"></text></g><g><title>associated_items (547,945 samples, 0.26%)</title><rect x="32.1335%" y="101" width="0.2552%" height="15" fill="rgb(248,47,43)"/><text x="32.3835%" y="111.50"></text></g><g><title>dropck_outlives (479,423 samples, 0.22%)</title><rect x="32.4245%" y="101" width="0.2233%" height="15" fill="rgb(221,10,30)"/><text x="32.6745%" y="111.50"></text></g><g><title>eval_to_const_value_raw (301,732 samples, 0.14%)</title><rect x="32.6478%" y="101" width="0.1405%" height="15" fill="rgb(210,229,1)"/><text x="32.8978%" y="111.50"></text></g><g><title>eval_to_const_value_raw (283,982 samples, 0.13%)</title><rect x="32.6561%" y="85" width="0.1323%" height="15" fill="rgb(222,148,37)"/><text x="32.9061%" y="95.50"></text></g><g><title>eval_to_allocation_raw (272,932 samples, 0.13%)</title><rect x="32.6612%" y="69" width="0.1271%" height="15" fill="rgb(234,67,33)"/><text x="32.9112%" y="79.50"></text></g><g><title>generics_of (1,058,833 samples, 0.49%)</title><rect x="35.5105%" y="85" width="0.4932%" height="15" fill="rgb(247,98,35)"/><text x="35.7605%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (797,261 samples, 0.37%)</title><rect x="35.6323%" y="69" width="0.3714%" height="15" fill="rgb(247,138,52)"/><text x="35.8823%" y="79.50"></text></g><g><title>impl_trait_ref (1,384,533 samples, 0.64%)</title><rect x="36.0953%" y="85" width="0.6449%" height="15" fill="rgb(213,79,30)"/><text x="36.3453%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,112,918 samples, 0.52%)</title><rect x="36.2218%" y="69" width="0.5184%" height="15" fill="rgb(246,177,23)"/><text x="36.4718%" y="79.50"></text></g><g><title>predicates_of (929,483 samples, 0.43%)</title><rect x="36.7654%" y="85" width="0.4329%" height="15" fill="rgb(230,62,27)"/><text x="37.0154%" y="95.50"></text></g><g><title>predicates_defined_on (530,369 samples, 0.25%)</title><rect x="36.9513%" y="69" width="0.2470%" height="15" fill="rgb(216,154,8)"/><text x="37.2013%" y="79.50"></text></g><g><title>specializes (2,475,834 samples, 1.15%)</title><rect x="37.1983%" y="85" width="1.1532%" height="15" fill="rgb(244,35,45)"/><text x="37.4483%" y="95.50"></text></g><g><title>param_env (1,445,434 samples, 0.67%)</title><rect x="37.6783%" y="69" width="0.6733%" height="15" fill="rgb(251,115,12)"/><text x="37.9283%" y="79.50"></text></g><g><title>def_span (657,728 samples, 0.31%)</title><rect x="38.0452%" y="53" width="0.3064%" height="15" fill="rgb(240,54,50)"/><text x="38.2952%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (584,926 samples, 0.27%)</title><rect x="38.0791%" y="37" width="0.2725%" height="15" fill="rgb(233,84,52)"/><text x="38.3291%" y="47.50"></text></g><g><title>trait_impls_of (322,133 samples, 0.15%)</title><rect x="38.3589%" y="85" width="0.1500%" height="15" fill="rgb(207,117,47)"/><text x="38.6089%" y="95.50"></text></g><g><title>evaluate_obligation (12,309,387 samples, 5.73%)</title><rect x="32.7883%" y="101" width="5.7336%" height="15" fill="rgb(249,43,39)"/><text x="33.0383%" y="111.50">evaluat..</text></g><g><title>generics_of (389,074 samples, 0.18%)</title><rect x="38.6083%" y="101" width="0.1812%" height="15" fill="rgb(209,38,44)"/><text x="38.8583%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (300,083 samples, 0.14%)</title><rect x="38.6498%" y="85" width="0.1398%" height="15" fill="rgb(236,212,23)"/><text x="38.8998%" y="95.50"></text></g><g><title>impl_item_implementor_ids (239,322 samples, 0.11%)</title><rect x="38.7900%" y="101" width="0.1115%" height="15" fill="rgb(242,79,21)"/><text x="39.0400%" y="111.50"></text></g><g><title>impl_trait_ref (496,556 samples, 0.23%)</title><rect x="38.9083%" y="101" width="0.2313%" height="15" fill="rgb(211,96,35)"/><text x="39.1583%" y="111.50"></text></g><g><title>method_autoderef_steps (472,339 samples, 0.22%)</title><rect x="39.2656%" y="101" width="0.2200%" height="15" fill="rgb(253,215,40)"/><text x="39.5156%" y="111.50"></text></g><g><title>evaluate_obligation (225,134 samples, 0.10%)</title><rect x="39.3808%" y="85" width="0.1049%" height="15" fill="rgb(211,81,21)"/><text x="39.6308%" y="95.50"></text></g><g><title>param_env (302,673 samples, 0.14%)</title><rect x="39.5632%" y="101" width="0.1410%" height="15" fill="rgb(208,190,38)"/><text x="39.8132%" y="111.50"></text></g><g><title>predicates_of (264,463 samples, 0.12%)</title><rect x="39.5810%" y="85" width="0.1232%" height="15" fill="rgb(235,213,38)"/><text x="39.8310%" y="95.50"></text></g><g><title>predicates_defined_on (260,642 samples, 0.12%)</title><rect x="39.5828%" y="69" width="0.1214%" height="15" fill="rgb(237,122,38)"/><text x="39.8328%" y="79.50"></text></g><g><title>predicates_of (467,236 samples, 0.22%)</title><rect x="39.7123%" y="101" width="0.2176%" height="15" fill="rgb(244,218,35)"/><text x="39.9623%" y="111.50"></text></g><g><title>predicates_defined_on (325,645 samples, 0.15%)</title><rect x="39.7782%" y="85" width="0.1517%" height="15" fill="rgb(240,68,47)"/><text x="40.0282%" y="95.50"></text></g><g><title>specializes (217,113 samples, 0.10%)</title><rect x="39.9466%" y="101" width="0.1011%" height="15" fill="rgb(210,16,53)"/><text x="40.1966%" y="111.50"></text></g><g><title>specializes (320,364 samples, 0.15%)</title><rect x="41.3422%" y="69" width="0.1492%" height="15" fill="rgb(235,124,12)"/><text x="41.5922%" y="79.50"></text></g><g><title>param_env (224,602 samples, 0.10%)</title><rect x="41.3868%" y="53" width="0.1046%" height="15" fill="rgb(224,169,11)"/><text x="41.6368%" y="63.50"></text></g><g><title>evaluate_obligation (1,006,932 samples, 0.47%)</title><rect x="41.0942%" y="85" width="0.4690%" height="15" fill="rgb(250,166,2)"/><text x="41.3442%" y="95.50"></text></g><g><title>typeck (3,471,154 samples, 1.62%)</title><rect x="40.1177%" y="101" width="1.6168%" height="15" fill="rgb(242,216,29)"/><text x="40.3677%" y="111.50"></text></g><g><title>item_bodies_checking (42,494,722 samples, 19.79%)</title><rect x="21.9697%" y="149" width="19.7936%" height="15" fill="rgb(230,116,27)"/><text x="22.2197%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,491,422 samples, 19.79%)</title><rect x="21.9713%" y="133" width="19.7921%" height="15" fill="rgb(228,99,48)"/><text x="22.2213%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (42,418,272 samples, 19.76%)</title><rect x="22.0053%" y="117" width="19.7580%" height="15" fill="rgb(253,11,6)"/><text x="22.2553%" y="127.50">typeck</text></g><g><title>item_types_checking (1,002,521 samples, 0.47%)</title><rect x="41.7633%" y="149" width="0.4670%" height="15" fill="rgb(247,143,39)"/><text x="42.0133%" y="159.50"></text></g><g><title>check_mod_item_types (997,950 samples, 0.46%)</title><rect x="41.7655%" y="133" width="0.4648%" height="15" fill="rgb(236,97,10)"/><text x="42.0155%" y="143.50"></text></g><g><title>typeck (228,702 samples, 0.11%)</title><rect x="42.1238%" y="117" width="0.1065%" height="15" fill="rgb(233,208,19)"/><text x="42.3738%" y="127.50"></text></g><g><title>fn_sig (326,974 samples, 0.15%)</title><rect x="42.3347%" y="117" width="0.1523%" height="15" fill="rgb(216,164,2)"/><text x="42.5847%" y="127.50"></text></g><g><title>generics_of (388,615 samples, 0.18%)</title><rect x="42.4870%" y="117" width="0.1810%" height="15" fill="rgb(220,129,5)"/><text x="42.7370%" y="127.50"></text></g><g><title>explicit_predicates_of (361,322 samples, 0.17%)</title><rect x="42.7873%" y="85" width="0.1683%" height="15" fill="rgb(242,17,10)"/><text x="43.0373%" y="95.50"></text></g><g><title>predicates_of (568,374 samples, 0.26%)</title><rect x="42.7399%" y="117" width="0.2647%" height="15" fill="rgb(242,107,0)"/><text x="42.9899%" y="127.50"></text></g><g><title>predicates_defined_on (530,094 samples, 0.25%)</title><rect x="42.7577%" y="101" width="0.2469%" height="15" fill="rgb(251,28,31)"/><text x="43.0077%" y="111.50"></text></g><g><title>type_collecting (1,819,509 samples, 0.85%)</title><rect x="42.2312%" y="149" width="0.8475%" height="15" fill="rgb(233,223,10)"/><text x="42.4812%" y="159.50"></text></g><g><title>collect_mod_item_types (1,809,459 samples, 0.84%)</title><rect x="42.2358%" y="133" width="0.8428%" height="15" fill="rgb(215,21,27)"/><text x="42.4858%" y="143.50"></text></g><g><title>evaluate_obligation (386,134 samples, 0.18%)</title><rect x="43.8035%" y="117" width="0.1799%" height="15" fill="rgb(232,23,21)"/><text x="44.0535%" y="127.50"></text></g><g><title>param_env (273,392 samples, 0.13%)</title><rect x="44.0671%" y="117" width="0.1273%" height="15" fill="rgb(244,5,23)"/><text x="44.3171%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,460,577 samples, 1.15%)</title><rect x="43.1531%" y="133" width="1.1461%" height="15" fill="rgb(226,81,46)"/><text x="43.4031%" y="143.50"></text></g><g><title>param_env (261,552 samples, 0.12%)</title><rect x="44.9162%" y="117" width="0.1218%" height="15" fill="rgb(247,70,30)"/><text x="45.1662%" y="127.50"></text></g><g><title>check_item_well_formed (1,769,635 samples, 0.82%)</title><rect x="44.2992%" y="133" width="0.8243%" height="15" fill="rgb(212,68,19)"/><text x="44.5492%" y="143.50"></text></g><g><title>analysis (82,876,902 samples, 38.60%)</title><rect x="6.8870%" y="181" width="38.6032%" height="15" fill="rgb(240,187,13)"/><text x="7.1370%" y="191.50">analysis</text></g><g><title>type_check_crate (53,445,263 samples, 24.89%)</title><rect x="20.5960%" y="165" width="24.8943%" height="15" fill="rgb(223,113,26)"/><text x="20.8460%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,171,982 samples, 2.41%)</title><rect x="43.0812%" y="149" width="2.4091%" height="15" fill="rgb(206,192,2)"/><text x="43.3312%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (787,258 samples, 0.37%)</title><rect x="45.1235%" y="133" width="0.3667%" height="15" fill="rgb(241,108,4)"/><text x="45.3735%" y="143.50"></text></g><g><title>param_env (344,943 samples, 0.16%)</title><rect x="50.0375%" y="133" width="0.1607%" height="15" fill="rgb(247,173,49)"/><text x="50.2875%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,142,998 samples, 0.53%)</title><rect x="49.7641%" y="149" width="0.5324%" height="15" fill="rgb(224,114,35)"/><text x="50.0141%" y="159.50"></text></g><g><title>codegen_module (9,370,046 samples, 4.36%)</title><rect x="46.0483%" y="165" width="4.3645%" height="15" fill="rgb(245,159,27)"/><text x="46.2983%" y="175.50">codeg..</text></g><g><title>codegen_crate (10,575,628 samples, 4.93%)</title><rect x="45.4958%" y="181" width="4.9260%" height="15" fill="rgb(245,172,44)"/><text x="45.7458%" y="191.50">codege..</text></g><g><title>LLVM_module_codegen (52,637,534 samples, 24.52%)</title><rect x="50.4995%" y="165" width="24.5180%" height="15" fill="rgb(236,23,11)"/><text x="50.7495%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (49,577,693 samples, 23.09%)</title><rect x="51.9248%" y="149" width="23.0928%" height="15" fill="rgb(205,117,38)"/><text x="52.1748%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (55,563,415 samples, 25.88%)</title><rect x="50.4218%" y="181" width="25.8809%" height="15" fill="rgb(237,72,25)"/><text x="50.6718%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,759,009 samples, 1.29%)</title><rect x="75.0176%" y="165" width="1.2851%" height="15" fill="rgb(244,70,9)"/><text x="75.2676%" y="175.50"></text></g><g><title>AST_validation (356,924 samples, 0.17%)</title><rect x="76.4115%" y="165" width="0.1663%" height="15" fill="rgb(217,125,39)"/><text x="76.6615%" y="175.50"></text></g><g><title>metadata_load_macro (232,892 samples, 0.11%)</title><rect x="85.0844%" y="133" width="0.1085%" height="15" fill="rgb(235,36,10)"/><text x="85.3344%" y="143.50"></text></g><g><title>macro_expand_crate (18,852,221 samples, 8.78%)</title><rect x="76.6817%" y="165" width="8.7812%" height="15" fill="rgb(251,123,47)"/><text x="76.9317%" y="175.50">macro_expand..</text></g><g><title>expand_crate (18,825,691 samples, 8.77%)</title><rect x="76.6940%" y="149" width="8.7688%" height="15" fill="rgb(221,13,13)"/><text x="76.9440%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (377,134 samples, 0.18%)</title><rect x="85.2872%" y="133" width="0.1757%" height="15" fill="rgb(238,131,9)"/><text x="85.5372%" y="143.50"></text></g><g><title>late_resolve_crate (3,114,242 samples, 1.45%)</title><rect x="85.6404%" y="149" width="1.4506%" height="15" fill="rgb(211,50,8)"/><text x="85.8904%" y="159.50"></text></g><g><title>configure_and_expand (23,397,688 samples, 10.90%)</title><rect x="76.3027%" y="181" width="10.8984%" height="15" fill="rgb(245,182,24)"/><text x="76.5527%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (3,539,316 samples, 1.65%)</title><rect x="85.5525%" y="165" width="1.6486%" height="15" fill="rgb(242,14,37)"/><text x="85.8025%" y="175.50"></text></g><g><title>drop_ast (286,583 samples, 0.13%)</title><rect x="87.2011%" y="181" width="0.1335%" height="15" fill="rgb(246,228,12)"/><text x="87.4511%" y="191.50"></text></g><g><title>early_lint_checks (542,835 samples, 0.25%)</title><rect x="87.3415%" y="181" width="0.2528%" height="15" fill="rgb(213,55,15)"/><text x="87.5915%" y="191.50"></text></g><g><title>free_global_ctxt (3,114,481 samples, 1.45%)</title><rect x="87.5943%" y="181" width="1.4507%" height="15" fill="rgb(209,9,3)"/><text x="87.8443%" y="191.50"></text></g><g><title>layout_of (286,223 samples, 0.13%)</title><rect x="90.1143%" y="85" width="0.1333%" height="15" fill="rgb(230,59,30)"/><text x="90.3643%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (490,625 samples, 0.23%)</title><rect x="90.3254%" y="85" width="0.2285%" height="15" fill="rgb(209,121,21)"/><text x="90.5754%" y="95.50"></text></g><g><title>optimized_mir (1,581,117 samples, 0.74%)</title><rect x="89.9093%" y="101" width="0.7365%" height="15" fill="rgb(220,109,13)"/><text x="90.1593%" y="111.50"></text></g><g><title>impl_parent (321,084 samples, 0.15%)</title><rect x="90.7715%" y="69" width="0.1496%" height="15" fill="rgb(232,18,1)"/><text x="91.0215%" y="79.50"></text></g><g><title>specialization_graph_of (532,266 samples, 0.25%)</title><rect x="90.7156%" y="85" width="0.2479%" height="15" fill="rgb(215,41,42)"/><text x="90.9656%" y="95.50"></text></g><g><title>resolve_instance (705,097 samples, 0.33%)</title><rect x="90.6457%" y="101" width="0.3284%" height="15" fill="rgb(224,123,36)"/><text x="90.8957%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (2,781,978 samples, 1.30%)</title><rect x="89.7219%" y="117" width="1.2958%" height="15" fill="rgb(240,125,3)"/><text x="89.9719%" y="127.50"></text></g><g><title>monomorphization_collector (2,815,689 samples, 1.31%)</title><rect x="89.7207%" y="133" width="1.3115%" height="15" fill="rgb(205,98,50)"/><text x="89.9707%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (3,137,822 samples, 1.46%)</title><rect x="89.7075%" y="149" width="1.4616%" height="15" fill="rgb(205,185,37)"/><text x="89.9575%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (293,863 samples, 0.14%)</title><rect x="91.0322%" y="133" width="0.1369%" height="15" fill="rgb(238,207,15)"/><text x="91.2822%" y="143.50"></text></g><g><title>exported_symbols (3,262,573 samples, 1.52%)</title><rect x="89.6973%" y="165" width="1.5197%" height="15" fill="rgb(213,199,42)"/><text x="89.9473%" y="175.50"></text></g><g><title>is_sized_raw (293,093 samples, 0.14%)</title><rect x="92.5248%" y="133" width="0.1365%" height="15" fill="rgb(235,201,11)"/><text x="92.7748%" y="143.50"></text></g><g><title>evaluate_obligation (234,540 samples, 0.11%)</title><rect x="92.5521%" y="117" width="0.1092%" height="15" fill="rgb(207,46,11)"/><text x="92.8021%" y="127.50"></text></g><g><title>layout_of (848,647 samples, 0.40%)</title><rect x="92.3578%" y="149" width="0.3953%" height="15" fill="rgb(241,35,35)"/><text x="92.6078%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,893,112 samples, 1.35%)</title><rect x="92.7531%" y="149" width="1.3476%" height="15" fill="rgb(243,32,47)"/><text x="93.0031%" y="159.50"></text></g><g><title>optimized_mir (6,092,931 samples, 2.84%)</title><rect x="91.2767%" y="165" width="2.8380%" height="15" fill="rgb(247,202,23)"/><text x="91.5267%" y="175.50">op..</text></g><g><title>generate_crate_metadata (10,935,382 samples, 5.09%)</title><rect x="89.0450%" y="181" width="5.0936%" height="15" fill="rgb(219,102,11)"/><text x="89.2950%" y="191.50">genera..</text></g><g><title>hir_lowering (4,738,868 samples, 2.21%)</title><rect x="94.1386%" y="181" width="2.2073%" height="15" fill="rgb(243,110,44)"/><text x="94.3886%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (1,046,501 samples, 0.49%)</title><rect x="96.3545%" y="165" width="0.4874%" height="15" fill="rgb(222,74,54)"/><text x="96.6045%" y="175.50"></text></g><g><title>link_crate (1,380,564 samples, 0.64%)</title><rect x="96.8419%" y="165" width="0.6431%" height="15" fill="rgb(216,99,12)"/><text x="97.0919%" y="175.50"></text></g><g><title>link_binary (1,350,104 samples, 0.63%)</title><rect x="96.8561%" y="149" width="0.6289%" height="15" fill="rgb(226,22,26)"/><text x="97.1061%" y="159.50"></text></g><g><title>link_rlib (828,618 samples, 0.39%)</title><rect x="97.0990%" y="133" width="0.3860%" height="15" fill="rgb(217,163,10)"/><text x="97.3490%" y="143.50"></text></g><g><title>link (2,453,585 samples, 1.14%)</title><rect x="96.3459%" y="181" width="1.1429%" height="15" fill="rgb(213,25,53)"/><text x="96.5959%" y="191.50"></text></g><g><title>parse_crate (2,832,719 samples, 1.32%)</title><rect x="97.4888%" y="181" width="1.3195%" height="15" fill="rgb(252,105,26)"/><text x="97.7388%" y="191.50"></text></g><g><title>prepare_outputs (360,593 samples, 0.17%)</title><rect x="98.8127%" y="181" width="0.1680%" height="15" fill="rgb(220,39,43)"/><text x="99.0627%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,701,217 samples, 0.79%)</title><rect x="98.9806%" y="181" width="0.7924%" height="15" fill="rgb(229,68,48)"/><text x="99.2306%" y="191.50"></text></g><g><title>all (214,689,043 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (214,689,043 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (378,233 samples, 0.18%)</title><rect x="99.8238%" y="181" width="0.1762%" height="15" fill="rgb(229,81,49)"/><text x="100.0738%" y="191.50"></text></g></svg></svg>