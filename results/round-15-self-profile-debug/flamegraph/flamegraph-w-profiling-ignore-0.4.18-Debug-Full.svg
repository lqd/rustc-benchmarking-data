<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (891,599,818 samples, 18.86%)</title><rect x="0.0250%" y="165" width="18.8600%" height="15" fill="rgb(227,0,7)"/><text x="0.2750%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (6,201,392 samples, 0.13%)</title><rect x="21.5329%" y="53" width="0.1312%" height="15" fill="rgb(217,0,24)"/><text x="21.7829%" y="63.50"></text></g><g><title>thir_body (8,675,193 samples, 0.18%)</title><rect x="21.7674%" y="53" width="0.1835%" height="15" fill="rgb(221,193,54)"/><text x="22.0174%" y="63.50"></text></g><g><title>mir_const (49,302,169 samples, 1.04%)</title><rect x="20.9107%" y="101" width="1.0429%" height="15" fill="rgb(248,212,6)"/><text x="21.1607%" y="111.50"></text></g><g><title>unsafety_check_result (42,745,401 samples, 0.90%)</title><rect x="21.0494%" y="85" width="0.9042%" height="15" fill="rgb(208,68,35)"/><text x="21.2994%" y="95.50"></text></g><g><title>mir_built (37,704,086 samples, 0.80%)</title><rect x="21.1561%" y="69" width="0.7976%" height="15" fill="rgb(232,128,0)"/><text x="21.4061%" y="79.50"></text></g><g><title>mir_promoted (57,979,165 samples, 1.23%)</title><rect x="20.7878%" y="117" width="1.2264%" height="15" fill="rgb(207,160,47)"/><text x="21.0378%" y="127.50"></text></g><g><title>type_op_prove_predicate (14,857,756 samples, 0.31%)</title><rect x="22.1591%" y="117" width="0.3143%" height="15" fill="rgb(228,23,34)"/><text x="22.4091%" y="127.50"></text></g><g><title>MIR_borrow_checking (168,409,674 samples, 3.56%)</title><rect x="18.9117%" y="149" width="3.5624%" height="15" fill="rgb(218,30,26)"/><text x="19.1617%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (167,701,470 samples, 3.55%)</title><rect x="18.9267%" y="133" width="3.5474%" height="15" fill="rgb(220,122,19)"/><text x="19.1767%" y="143.50">mir_..</text></g><g><title>misc_checking_1 (5,065,392 samples, 0.11%)</title><rect x="22.5008%" y="149" width="0.1071%" height="15" fill="rgb(250,228,42)"/><text x="22.7508%" y="159.50"></text></g><g><title>misc_checking_2 (6,378,444 samples, 0.13%)</title><rect x="22.6079%" y="149" width="0.1349%" height="15" fill="rgb(240,193,28)"/><text x="22.8579%" y="159.50"></text></g><g><title>crate_lints (11,233,684 samples, 0.24%)</title><rect x="22.8108%" y="117" width="0.2376%" height="15" fill="rgb(216,20,37)"/><text x="23.0608%" y="127.50"></text></g><g><title>lint_checking (14,474,926 samples, 0.31%)</title><rect x="22.8107%" y="133" width="0.3062%" height="15" fill="rgb(206,188,39)"/><text x="23.0607%" y="143.50"></text></g><g><title>privacy_checking_modules (5,291,504 samples, 0.11%)</title><rect x="23.1397%" y="133" width="0.1119%" height="15" fill="rgb(217,207,13)"/><text x="23.3897%" y="143.50"></text></g><g><title>check_mod_privacy (5,284,344 samples, 0.11%)</title><rect x="23.1399%" y="117" width="0.1118%" height="15" fill="rgb(231,73,38)"/><text x="23.3899%" y="127.50"></text></g><g><title>misc_checking_3 (24,099,404 samples, 0.51%)</title><rect x="22.7429%" y="149" width="0.5098%" height="15" fill="rgb(225,20,46)"/><text x="22.9929%" y="159.50"></text></g><g><title>impl_trait_ref (7,324,055 samples, 0.15%)</title><rect x="23.4547%" y="85" width="0.1549%" height="15" fill="rgb(210,31,41)"/><text x="23.7047%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,740,074 samples, 0.12%)</title><rect x="23.4882%" y="69" width="0.1214%" height="15" fill="rgb(221,200,47)"/><text x="23.7382%" y="79.50"></text></g><g><title>coherent_trait (17,748,059 samples, 0.38%)</title><rect x="23.2594%" y="117" width="0.3754%" height="15" fill="rgb(226,26,5)"/><text x="23.5094%" y="127.50"></text></g><g><title>specialization_graph_of (17,243,444 samples, 0.36%)</title><rect x="23.2701%" y="101" width="0.3648%" height="15" fill="rgb(249,33,26)"/><text x="23.5201%" y="111.50"></text></g><g><title>coherence_checking (17,956,441 samples, 0.38%)</title><rect x="23.2588%" y="133" width="0.3798%" height="15" fill="rgb(235,183,28)"/><text x="23.5088%" y="143.50"></text></g><g><title>evaluate_obligation (6,099,508 samples, 0.13%)</title><rect x="25.5224%" y="85" width="0.1290%" height="15" fill="rgb(221,5,38)"/><text x="25.7724%" y="95.50"></text></g><g><title>evaluate_obligation (7,744,008 samples, 0.16%)</title><rect x="27.0835%" y="69" width="0.1638%" height="15" fill="rgb(247,18,42)"/><text x="27.3335%" y="79.50"></text></g><g><title>typeck (77,053,949 samples, 1.63%)</title><rect x="25.7403%" y="85" width="1.6299%" height="15" fill="rgb(241,131,45)"/><text x="25.9903%" y="95.50"></text></g><g><title>item_bodies_checking (176,489,875 samples, 3.73%)</title><rect x="23.6409%" y="133" width="3.7333%" height="15" fill="rgb(249,31,29)"/><text x="23.8909%" y="143.50">item..</text></g><g><title>typeck_item_bodies (176,484,975 samples, 3.73%)</title><rect x="23.6410%" y="117" width="3.7332%" height="15" fill="rgb(225,111,53)"/><text x="23.8910%" y="127.50">type..</text></g><g><title>typeck (176,067,120 samples, 3.72%)</title><rect x="23.6498%" y="101" width="3.7243%" height="15" fill="rgb(238,160,17)"/><text x="23.8998%" y="111.50">type..</text></g><g><title>item_types_checking (12,656,877 samples, 0.27%)</title><rect x="27.3742%" y="133" width="0.2677%" height="15" fill="rgb(214,148,48)"/><text x="27.6242%" y="143.50"></text></g><g><title>check_mod_item_types (12,644,927 samples, 0.27%)</title><rect x="27.3744%" y="117" width="0.2675%" height="15" fill="rgb(232,36,49)"/><text x="27.6244%" y="127.50"></text></g><g><title>typeck (9,677,068 samples, 0.20%)</title><rect x="27.4372%" y="101" width="0.2047%" height="15" fill="rgb(209,103,24)"/><text x="27.6872%" y="111.50"></text></g><g><title>type_collecting (7,149,802 samples, 0.15%)</title><rect x="27.6421%" y="133" width="0.1512%" height="15" fill="rgb(229,88,8)"/><text x="27.8921%" y="143.50"></text></g><g><title>collect_mod_item_types (7,134,482 samples, 0.15%)</title><rect x="27.6425%" y="117" width="0.1509%" height="15" fill="rgb(213,181,19)"/><text x="27.8925%" y="127.50"></text></g><g><title>check_impl_item_well_formed (12,525,675 samples, 0.26%)</title><rect x="27.8110%" y="117" width="0.2650%" height="15" fill="rgb(254,191,54)"/><text x="28.0610%" y="127.50"></text></g><g><title>check_item_well_formed (8,934,951 samples, 0.19%)</title><rect x="28.0759%" y="117" width="0.1890%" height="15" fill="rgb(241,83,37)"/><text x="28.3259%" y="127.50"></text></g><g><title>analysis (443,780,599 samples, 9.39%)</title><rect x="18.8850%" y="165" width="9.3873%" height="15" fill="rgb(233,36,39)"/><text x="19.1350%" y="175.50">analysis</text></g><g><title>type_check_crate (237,304,530 samples, 5.02%)</title><rect x="23.2526%" y="149" width="5.0197%" height="15" fill="rgb(226,3,54)"/><text x="23.5026%" y="159.50">type_c..</text></g><g><title>wf_checking (22,608,280 samples, 0.48%)</title><rect x="27.7941%" y="133" width="0.4782%" height="15" fill="rgb(245,192,40)"/><text x="28.0441%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (23,598,637 samples, 0.50%)</title><rect x="42.1660%" y="133" width="0.4992%" height="15" fill="rgb(238,167,29)"/><text x="42.4160%" y="143.50"></text></g><g><title>layout_of (9,585,410 samples, 0.20%)</title><rect x="43.5349%" y="117" width="0.2028%" height="15" fill="rgb(232,182,51)"/><text x="43.7849%" y="127.50"></text></g><g><title>predicates_of (7,187,764 samples, 0.15%)</title><rect x="44.0057%" y="101" width="0.1520%" height="15" fill="rgb(231,60,39)"/><text x="44.2557%" y="111.50"></text></g><g><title>predicates_defined_on (5,105,010 samples, 0.11%)</title><rect x="44.0498%" y="85" width="0.1080%" height="15" fill="rgb(208,69,12)"/><text x="44.2998%" y="95.50"></text></g><g><title>param_env (19,899,799 samples, 0.42%)</title><rect x="43.7377%" y="117" width="0.4209%" height="15" fill="rgb(235,93,37)"/><text x="43.9877%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (6,511,699 samples, 0.14%)</title><rect x="44.1586%" y="117" width="0.1377%" height="15" fill="rgb(213,116,39)"/><text x="44.4086%" y="127.50"></text></g><g><title>normalize_projection_ty (5,213,875 samples, 0.11%)</title><rect x="44.1860%" y="101" width="0.1103%" height="15" fill="rgb(222,207,29)"/><text x="44.4360%" y="111.50"></text></g><g><title>fn_abi_of_instance (72,653,140 samples, 1.54%)</title><rect x="42.7661%" y="133" width="1.5368%" height="15" fill="rgb(206,96,30)"/><text x="43.0161%" y="143.50"></text></g><g><title>layout_of (14,107,636 samples, 0.30%)</title><rect x="44.3994%" y="133" width="0.2984%" height="15" fill="rgb(218,138,4)"/><text x="44.6494%" y="143.50"></text></g><g><title>symbol_name (7,491,724 samples, 0.16%)</title><rect x="44.6996%" y="133" width="0.1585%" height="15" fill="rgb(250,191,14)"/><text x="44.9496%" y="143.50"></text></g><g><title>codegen_module (780,970,210 samples, 16.52%)</title><rect x="28.3710%" y="149" width="16.5199%" height="15" fill="rgb(239,60,40)"/><text x="28.6210%" y="159.50">codegen_module</text></g><g><title>codegen_crate (785,755,258 samples, 16.62%)</title><rect x="28.2725%" y="165" width="16.6211%" height="15" fill="rgb(206,27,48)"/><text x="28.5225%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,034,813,350 samples, 43.04%)</title><rect x="44.8995%" y="149" width="43.0424%" height="15" fill="rgb(225,35,8)"/><text x="45.1495%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,877,395,019 samples, 39.71%)</title><rect x="48.2294%" y="133" width="39.7125%" height="15" fill="rgb(250,213,24)"/><text x="48.4794%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,165,657,486 samples, 45.81%)</title><rect x="44.8936%" y="165" width="45.8102%" height="15" fill="rgb(247,123,22)"/><text x="45.1436%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (130,562,620 samples, 2.76%)</title><rect x="87.9419%" y="149" width="2.7618%" height="15" fill="rgb(231,138,38)"/><text x="88.1919%" y="159.50">LL..</text></g><g><title>macro_expand_crate (37,203,927 samples, 0.79%)</title><rect x="90.7249%" y="149" width="0.7870%" height="15" fill="rgb(231,145,46)"/><text x="90.9749%" y="159.50"></text></g><g><title>expand_crate (37,184,927 samples, 0.79%)</title><rect x="90.7253%" y="133" width="0.7866%" height="15" fill="rgb(251,118,11)"/><text x="90.9753%" y="143.50"></text></g><g><title>late_resolve_crate (6,814,259 samples, 0.14%)</title><rect x="91.5269%" y="133" width="0.1441%" height="15" fill="rgb(217,147,25)"/><text x="91.7769%" y="143.50"></text></g><g><title>configure_and_expand (46,309,148 samples, 0.98%)</title><rect x="90.7037%" y="165" width="0.9796%" height="15" fill="rgb(247,81,37)"/><text x="90.9537%" y="175.50"></text></g><g><title>resolve_crate (7,951,830 samples, 0.17%)</title><rect x="91.5151%" y="149" width="0.1682%" height="15" fill="rgb(209,12,38)"/><text x="91.7651%" y="159.50"></text></g><g><title>free_global_ctxt (30,235,186 samples, 0.64%)</title><rect x="91.7466%" y="165" width="0.6396%" height="15" fill="rgb(227,1,9)"/><text x="91.9966%" y="175.50"></text></g><g><title>codegen_fn_attrs (6,472,615 samples, 0.14%)</title><rect x="93.1075%" y="85" width="0.1369%" height="15" fill="rgb(248,47,43)"/><text x="93.3575%" y="95.50"></text></g><g><title>mir_shims (7,513,551 samples, 0.16%)</title><rect x="93.2851%" y="85" width="0.1589%" height="15" fill="rgb(221,10,30)"/><text x="93.5351%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (11,493,218 samples, 0.24%)</title><rect x="93.8126%" y="69" width="0.2431%" height="15" fill="rgb(210,229,1)"/><text x="94.0626%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (20,240,391 samples, 0.43%)</title><rect x="94.0557%" y="69" width="0.4281%" height="15" fill="rgb(222,148,37)"/><text x="94.3057%" y="79.50"></text></g><g><title>optimized_mir (50,761,218 samples, 1.07%)</title><rect x="93.4441%" y="85" width="1.0738%" height="15" fill="rgb(234,67,33)"/><text x="93.6941%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (27,683,881 samples, 0.59%)</title><rect x="94.7123%" y="69" width="0.5856%" height="15" fill="rgb(247,98,35)"/><text x="94.9623%" y="79.50"></text></g><g><title>resolve_instance (49,439,562 samples, 1.05%)</title><rect x="94.5178%" y="85" width="1.0458%" height="15" fill="rgb(247,138,52)"/><text x="94.7678%" y="95.50"></text></g><g><title>eval_to_const_value_raw (5,484,096 samples, 0.12%)</title><rect x="95.6359%" y="69" width="0.1160%" height="15" fill="rgb(213,79,30)"/><text x="95.8859%" y="79.50"></text></g><g><title>eval_to_const_value_raw (5,378,893 samples, 0.11%)</title><rect x="95.6382%" y="53" width="0.1138%" height="15" fill="rgb(246,177,23)"/><text x="95.8882%" y="63.50"></text></g><g><title>eval_to_allocation_raw (5,179,560 samples, 0.11%)</title><rect x="95.6424%" y="37" width="0.1096%" height="15" fill="rgb(230,62,27)"/><text x="95.8924%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,595,876 samples, 0.14%)</title><rect x="95.6162%" y="85" width="0.1395%" height="15" fill="rgb(216,154,8)"/><text x="95.8662%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (5,392,525 samples, 0.11%)</title><rect x="95.7576%" y="85" width="0.1141%" height="15" fill="rgb(244,35,45)"/><text x="96.0076%" y="95.50"></text></g><g><title>upstream_monomorphizations (5,232,093 samples, 0.11%)</title><rect x="95.7610%" y="69" width="0.1107%" height="15" fill="rgb(251,115,12)"/><text x="96.0110%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (160,777,076 samples, 3.40%)</title><rect x="92.5578%" y="101" width="3.4009%" height="15" fill="rgb(240,54,50)"/><text x="92.8078%" y="111.50">mon..</text></g><g><title>monomorphization_collector (161,071,379 samples, 3.41%)</title><rect x="92.5577%" y="117" width="3.4071%" height="15" fill="rgb(233,84,52)"/><text x="92.8077%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (19,348,336 samples, 0.41%)</title><rect x="95.9649%" y="101" width="0.4093%" height="15" fill="rgb(207,117,47)"/><text x="96.2149%" y="111.50"></text></g><g><title>symbol_name (16,746,650 samples, 0.35%)</title><rect x="96.0200%" y="85" width="0.3542%" height="15" fill="rgb(249,43,39)"/><text x="96.2700%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (188,640,158 samples, 3.99%)</title><rect x="92.5551%" y="133" width="3.9903%" height="15" fill="rgb(209,38,44)"/><text x="92.8051%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (27,448,758 samples, 0.58%)</title><rect x="95.9648%" y="117" width="0.5806%" height="15" fill="rgb(236,212,23)"/><text x="96.2148%" y="127.50"></text></g><g><title>cgu_partitioning (8,094,132 samples, 0.17%)</title><rect x="96.3742%" y="101" width="0.1712%" height="15" fill="rgb(242,79,21)"/><text x="96.6242%" y="111.50"></text></g><g><title>exported_symbols (189,945,801 samples, 4.02%)</title><rect x="92.5349%" y="149" width="4.0179%" height="15" fill="rgb(211,96,35)"/><text x="92.7849%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (12,089,346 samples, 0.26%)</title><rect x="96.7987%" y="133" width="0.2557%" height="15" fill="rgb(253,215,40)"/><text x="97.0487%" y="143.50"></text></g><g><title>optimized_mir (23,548,081 samples, 0.50%)</title><rect x="96.5583%" y="149" width="0.4981%" height="15" fill="rgb(211,81,21)"/><text x="96.8083%" y="159.50"></text></g><g><title>generate_crate_metadata (221,032,996 samples, 4.68%)</title><rect x="92.3862%" y="165" width="4.6755%" height="15" fill="rgb(208,190,38)"/><text x="92.6362%" y="175.50">gener..</text></g><g><title>hir_lowering (13,509,516 samples, 0.29%)</title><rect x="97.0617%" y="165" width="0.2858%" height="15" fill="rgb(235,213,38)"/><text x="97.3117%" y="175.50"></text></g><g><title>finish_ongoing_codegen (100,619,408 samples, 2.13%)</title><rect x="97.3479%" y="149" width="2.1284%" height="15" fill="rgb(237,122,38)"/><text x="97.5979%" y="159.50">f..</text></g><g><title>link_crate (13,400,026 samples, 0.28%)</title><rect x="99.4763%" y="149" width="0.2835%" height="15" fill="rgb(244,218,35)"/><text x="99.7263%" y="159.50"></text></g><g><title>link_binary (13,078,683 samples, 0.28%)</title><rect x="99.4831%" y="133" width="0.2767%" height="15" fill="rgb(240,68,47)"/><text x="99.7331%" y="143.50"></text></g><g><title>link_rlib (10,955,411 samples, 0.23%)</title><rect x="99.5280%" y="117" width="0.2317%" height="15" fill="rgb(210,16,53)"/><text x="99.7780%" y="127.50"></text></g><g><title>link (114,049,304 samples, 2.41%)</title><rect x="97.3475%" y="165" width="2.4125%" height="15" fill="rgb(235,124,12)"/><text x="97.5975%" y="175.50">li..</text></g><g><title>self_profile_alloc_query_strings (8,293,174 samples, 0.18%)</title><rect x="99.8090%" y="165" width="0.1754%" height="15" fill="rgb(224,169,11)"/><text x="100.0590%" y="175.50"></text></g><g><title>all (4,727,462,077 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (4,727,462,077 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>