<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,158,174 samples, 6.09%)</title><rect x="1.3983%" y="229" width="6.0876%" height="15" fill="rgb(227,0,7)"/><text x="1.6483%" y="239.50">LLVM_pas..</text></g><g><title>implied_outlives_bounds (54,051 samples, 0.10%)</title><rect x="12.8299%" y="181" width="0.1042%" height="15" fill="rgb(217,0,24)"/><text x="13.0799%" y="191.50"></text></g><g><title>param_env (171,922 samples, 0.33%)</title><rect x="14.1448%" y="149" width="0.3314%" height="15" fill="rgb(221,193,54)"/><text x="14.3948%" y="159.50"></text></g><g><title>codegen_fn_attrs (87,312 samples, 0.17%)</title><rect x="14.8227%" y="133" width="0.1683%" height="15" fill="rgb(248,212,6)"/><text x="15.0727%" y="143.50"></text></g><g><title>is_copy_raw (115,221 samples, 0.22%)</title><rect x="16.0620%" y="117" width="0.2221%" height="15" fill="rgb(208,68,35)"/><text x="16.3120%" y="127.50"></text></g><g><title>evaluate_obligation (83,971 samples, 0.16%)</title><rect x="16.1223%" y="101" width="0.1619%" height="15" fill="rgb(232,128,0)"/><text x="16.3723%" y="111.50"></text></g><g><title>needs_drop_raw (325,753 samples, 0.63%)</title><rect x="16.2841%" y="117" width="0.6279%" height="15" fill="rgb(207,160,47)"/><text x="16.5341%" y="127.50"></text></g><g><title>is_copy_raw (287,193 samples, 0.55%)</title><rect x="16.3585%" y="101" width="0.5536%" height="15" fill="rgb(228,23,34)"/><text x="16.6085%" y="111.50"></text></g><g><title>evaluate_obligation (248,413 samples, 0.48%)</title><rect x="16.4332%" y="85" width="0.4788%" height="15" fill="rgb(218,30,26)"/><text x="16.6832%" y="95.50"></text></g><g><title>trait_impls_of (83,651 samples, 0.16%)</title><rect x="16.7508%" y="69" width="0.1612%" height="15" fill="rgb(220,122,19)"/><text x="17.0008%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (138,461 samples, 0.27%)</title><rect x="17.1163%" y="101" width="0.2669%" height="15" fill="rgb(250,228,42)"/><text x="17.3663%" y="111.50"></text></g><g><title>impl_parent (449,525 samples, 0.87%)</title><rect x="18.9044%" y="85" width="0.8665%" height="15" fill="rgb(240,193,28)"/><text x="19.1544%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (277,612 samples, 0.54%)</title><rect x="19.2358%" y="69" width="0.5351%" height="15" fill="rgb(216,20,37)"/><text x="19.4858%" y="79.50"></text></g><g><title>specialization_graph_of (2,750,540 samples, 5.30%)</title><rect x="17.4455%" y="101" width="5.3018%" height="15" fill="rgb(206,188,39)"/><text x="17.6955%" y="111.50">specia..</text></g><g><title>impl_trait_ref (1,544,153 samples, 2.98%)</title><rect x="19.7709%" y="85" width="2.9765%" height="15" fill="rgb(217,207,13)"/><text x="20.0209%" y="95.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,371,433 samples, 2.64%)</title><rect x="20.1038%" y="69" width="2.6435%" height="15" fill="rgb(231,73,38)"/><text x="20.3538%" y="79.50">me..</text></g><g><title>resolve_instance (3,056,943 samples, 5.89%)</title><rect x="16.9120%" y="117" width="5.8924%" height="15" fill="rgb(225,20,46)"/><text x="17.1620%" y="127.50">resolve..</text></g><g><title>thir_body (182,282 samples, 0.35%)</title><rect x="22.8155%" y="117" width="0.3514%" height="15" fill="rgb(210,31,41)"/><text x="23.0655%" y="127.50"></text></g><g><title>mir_const (4,959,613 samples, 9.56%)</title><rect x="13.6259%" y="165" width="9.5600%" height="15" fill="rgb(221,200,47)"/><text x="13.8759%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (4,518,509 samples, 8.71%)</title><rect x="14.4762%" y="149" width="8.7097%" height="15" fill="rgb(226,26,5)"/><text x="14.7262%" y="159.50">unsafety_che..</text></g><g><title>mir_built (4,251,415 samples, 8.19%)</title><rect x="14.9910%" y="133" width="8.1949%" height="15" fill="rgb(249,33,26)"/><text x="15.2410%" y="143.50">mir_built</text></g><g><title>has_structural_eq_impls (202,882 samples, 0.39%)</title><rect x="23.4948%" y="149" width="0.3911%" height="15" fill="rgb(235,183,28)"/><text x="23.7448%" y="159.50"></text></g><g><title>evaluate_obligation (175,592 samples, 0.34%)</title><rect x="23.5474%" y="133" width="0.3385%" height="15" fill="rgb(221,5,38)"/><text x="23.7974%" y="143.50"></text></g><g><title>trait_impls_of (109,912 samples, 0.21%)</title><rect x="23.6740%" y="117" width="0.2119%" height="15" fill="rgb(247,18,42)"/><text x="23.9240%" y="127.50"></text></g><g><title>is_freeze_raw (94,541 samples, 0.18%)</title><rect x="23.8901%" y="149" width="0.1822%" height="15" fill="rgb(241,131,45)"/><text x="24.1401%" y="159.50"></text></g><g><title>evaluate_obligation (88,651 samples, 0.17%)</title><rect x="23.9014%" y="133" width="0.1709%" height="15" fill="rgb(249,31,29)"/><text x="24.1514%" y="143.50"></text></g><g><title>mir_const (102,421 samples, 0.20%)</title><rect x="24.0990%" y="149" width="0.1974%" height="15" fill="rgb(225,111,53)"/><text x="24.3490%" y="159.50"></text></g><g><title>unsafety_check_result (71,341 samples, 0.14%)</title><rect x="24.1589%" y="133" width="0.1375%" height="15" fill="rgb(238,160,17)"/><text x="24.4089%" y="143.50"></text></g><g><title>mir_built (56,691 samples, 0.11%)</title><rect x="24.1871%" y="117" width="0.1093%" height="15" fill="rgb(214,148,48)"/><text x="24.4371%" y="127.50"></text></g><g><title>mir_const_qualif (607,437 samples, 1.17%)</title><rect x="23.1859%" y="165" width="1.1709%" height="15" fill="rgb(232,36,49)"/><text x="23.4359%" y="175.50"></text></g><g><title>mir_promoted (5,885,964 samples, 11.35%)</title><rect x="13.0124%" y="181" width="11.3456%" height="15" fill="rgb(209,103,24)"/><text x="13.2624%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (577,096 samples, 1.11%)</title><rect x="24.3600%" y="181" width="1.1124%" height="15" fill="rgb(229,88,8)"/><text x="24.6100%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (167,902 samples, 0.32%)</title><rect x="25.4724%" y="181" width="0.3236%" height="15" fill="rgb(213,181,19)"/><text x="25.7224%" y="191.50"></text></g><g><title>normalize_projection_ty (74,402 samples, 0.14%)</title><rect x="25.6526%" y="165" width="0.1434%" height="15" fill="rgb(254,191,54)"/><text x="25.9026%" y="175.50"></text></g><g><title>MIR_borrow_checking (9,600,412 samples, 18.51%)</title><rect x="7.8362%" y="213" width="18.5054%" height="15" fill="rgb(241,83,37)"/><text x="8.0862%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,573,852 samples, 18.45%)</title><rect x="7.8874%" y="197" width="18.4542%" height="15" fill="rgb(233,36,39)"/><text x="8.1374%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (283,023 samples, 0.55%)</title><rect x="25.7961%" y="181" width="0.5455%" height="15" fill="rgb(226,3,54)"/><text x="26.0461%" y="191.50"></text></g><g><title>lint_levels (66,510 samples, 0.13%)</title><rect x="26.4519%" y="197" width="0.1282%" height="15" fill="rgb(245,192,40)"/><text x="26.7019%" y="207.50"></text></g><g><title>MIR_effect_checking (311,003 samples, 0.60%)</title><rect x="26.3416%" y="213" width="0.5995%" height="15" fill="rgb(238,167,29)"/><text x="26.5916%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (187,282 samples, 0.36%)</title><rect x="26.5801%" y="197" width="0.3610%" height="15" fill="rgb(232,182,51)"/><text x="26.8301%" y="207.50"></text></g><g><title>hir_module_items (135,301 samples, 0.26%)</title><rect x="26.9411%" y="213" width="0.2608%" height="15" fill="rgb(231,60,39)"/><text x="27.1911%" y="223.50"></text></g><g><title>get_lang_items (54,141 samples, 0.10%)</title><rect x="27.5755%" y="165" width="0.1044%" height="15" fill="rgb(208,69,12)"/><text x="27.8255%" y="175.50"></text></g><g><title>codegen_fn_attrs (202,752 samples, 0.39%)</title><rect x="27.4307%" y="181" width="0.3908%" height="15" fill="rgb(235,93,37)"/><text x="27.6807%" y="191.50"></text></g><g><title>check_mod_attrs (291,014 samples, 0.56%)</title><rect x="27.2609%" y="197" width="0.5609%" height="15" fill="rgb(213,116,39)"/><text x="27.5109%" y="207.50"></text></g><g><title>lookup_deprecation_entry (94,002 samples, 0.18%)</title><rect x="28.1279%" y="181" width="0.1812%" height="15" fill="rgb(222,207,29)"/><text x="28.3779%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (234,172 samples, 0.45%)</title><rect x="27.9919%" y="197" width="0.4514%" height="15" fill="rgb(206,96,30)"/><text x="28.2419%" y="207.50"></text></g><g><title>misc_checking_1 (696,008 samples, 1.34%)</title><rect x="27.2035%" y="213" width="1.3416%" height="15" fill="rgb(218,138,4)"/><text x="27.4535%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (137,901 samples, 0.27%)</title><rect x="28.5504%" y="197" width="0.2658%" height="15" fill="rgb(250,191,14)"/><text x="28.8004%" y="207.50"></text></g><g><title>check_mod_liveness (109,641 samples, 0.21%)</title><rect x="28.6048%" y="181" width="0.2113%" height="15" fill="rgb(239,60,40)"/><text x="28.8548%" y="191.50"></text></g><g><title>misc_checking_2 (275,843 samples, 0.53%)</title><rect x="28.5451%" y="213" width="0.5317%" height="15" fill="rgb(206,27,48)"/><text x="28.7951%" y="223.50"></text></g><g><title>match_checking (135,192 samples, 0.26%)</title><rect x="28.8162%" y="197" width="0.2606%" height="15" fill="rgb(225,35,8)"/><text x="29.0662%" y="207.50"></text></g><g><title>check_match (126,582 samples, 0.24%)</title><rect x="28.8328%" y="181" width="0.2440%" height="15" fill="rgb(250,213,24)"/><text x="29.0828%" y="191.50"></text></g><g><title>check_private_in_public (72,021 samples, 0.14%)</title><rect x="29.1016%" y="197" width="0.1388%" height="15" fill="rgb(247,123,22)"/><text x="29.3516%" y="207.50"></text></g><g><title>death_checking (132,741 samples, 0.26%)</title><rect x="29.2404%" y="197" width="0.2559%" height="15" fill="rgb(231,138,38)"/><text x="29.4904%" y="207.50"></text></g><g><title>crate_lints (283,023 samples, 0.55%)</title><rect x="29.5020%" y="181" width="0.5455%" height="15" fill="rgb(231,145,46)"/><text x="29.7520%" y="191.50"></text></g><g><title>param_env (176,752 samples, 0.34%)</title><rect x="29.7068%" y="165" width="0.3407%" height="15" fill="rgb(251,118,11)"/><text x="29.9568%" y="175.50"></text></g><g><title>predicates_of (91,091 samples, 0.18%)</title><rect x="29.8719%" y="149" width="0.1756%" height="15" fill="rgb(217,147,25)"/><text x="30.1219%" y="159.50"></text></g><g><title>predicates_defined_on (73,011 samples, 0.14%)</title><rect x="29.9068%" y="133" width="0.1407%" height="15" fill="rgb(247,81,37)"/><text x="30.1568%" y="143.50"></text></g><g><title>lint_checking (369,184 samples, 0.71%)</title><rect x="29.4963%" y="197" width="0.7116%" height="15" fill="rgb(209,12,38)"/><text x="29.7463%" y="207.50"></text></g><g><title>module_lints (83,211 samples, 0.16%)</title><rect x="30.0475%" y="181" width="0.1604%" height="15" fill="rgb(227,1,9)"/><text x="30.2975%" y="191.50"></text></g><g><title>lint_mod (75,221 samples, 0.14%)</title><rect x="30.0629%" y="165" width="0.1450%" height="15" fill="rgb(248,47,43)"/><text x="30.3129%" y="175.50"></text></g><g><title>privacy_access_levels (60,480 samples, 0.12%)</title><rect x="30.2079%" y="197" width="0.1166%" height="15" fill="rgb(221,10,30)"/><text x="30.4579%" y="207.50"></text></g><g><title>privacy_checking_modules (157,931 samples, 0.30%)</title><rect x="30.3245%" y="197" width="0.3044%" height="15" fill="rgb(210,229,1)"/><text x="30.5745%" y="207.50"></text></g><g><title>check_mod_privacy (155,321 samples, 0.30%)</title><rect x="30.3295%" y="181" width="0.2994%" height="15" fill="rgb(222,148,37)"/><text x="30.5795%" y="191.50"></text></g><g><title>misc_checking_3 (821,788 samples, 1.58%)</title><rect x="29.0768%" y="213" width="1.5840%" height="15" fill="rgb(234,67,33)"/><text x="29.3268%" y="223.50"></text></g><g><title>adt_def (173,521 samples, 0.33%)</title><rect x="41.0054%" y="133" width="0.3345%" height="15" fill="rgb(247,98,35)"/><text x="41.2554%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (168,801 samples, 0.33%)</title><rect x="41.0145%" y="117" width="0.3254%" height="15" fill="rgb(247,138,52)"/><text x="41.2645%" y="127.50"></text></g><g><title>item_attrs (150,161 samples, 0.29%)</title><rect x="41.0504%" y="101" width="0.2894%" height="15" fill="rgb(213,79,30)"/><text x="41.3004%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (147,951 samples, 0.29%)</title><rect x="41.0547%" y="85" width="0.2852%" height="15" fill="rgb(246,177,23)"/><text x="41.3047%" y="95.50"></text></g><g><title>adt_sized_constraint (88,581 samples, 0.17%)</title><rect x="41.3399%" y="133" width="0.1707%" height="15" fill="rgb(230,62,27)"/><text x="41.5899%" y="143.50"></text></g><g><title>adt_def (87,171 samples, 0.17%)</title><rect x="41.3426%" y="117" width="0.1680%" height="15" fill="rgb(216,154,8)"/><text x="41.5926%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (86,591 samples, 0.17%)</title><rect x="41.3437%" y="101" width="0.1669%" height="15" fill="rgb(244,35,45)"/><text x="41.5937%" y="111.50"></text></g><g><title>item_attrs (80,981 samples, 0.16%)</title><rect x="41.3545%" y="85" width="0.1561%" height="15" fill="rgb(251,115,12)"/><text x="41.6045%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (80,361 samples, 0.15%)</title><rect x="41.3557%" y="69" width="0.1549%" height="15" fill="rgb(240,54,50)"/><text x="41.6057%" y="79.50"></text></g><g><title>adt_sized_constraint (273,603 samples, 0.53%)</title><rect x="40.9854%" y="149" width="0.5274%" height="15" fill="rgb(233,84,52)"/><text x="41.2354%" y="159.50"></text></g><g><title>associated_item (114,901 samples, 0.22%)</title><rect x="41.6475%" y="133" width="0.2215%" height="15" fill="rgb(207,117,47)"/><text x="41.8975%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (89,691 samples, 0.17%)</title><rect x="41.6961%" y="117" width="0.1729%" height="15" fill="rgb(249,43,39)"/><text x="41.9461%" y="127.50"></text></g><g><title>associated_items (210,351 samples, 0.41%)</title><rect x="41.5128%" y="149" width="0.4055%" height="15" fill="rgb(209,38,44)"/><text x="41.7628%" y="159.50"></text></g><g><title>adt_def (312,024 samples, 0.60%)</title><rect x="42.3950%" y="101" width="0.6014%" height="15" fill="rgb(236,212,23)"/><text x="42.6450%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (310,734 samples, 0.60%)</title><rect x="42.3974%" y="85" width="0.5990%" height="15" fill="rgb(242,79,21)"/><text x="42.6474%" y="95.50"></text></g><g><title>adt_def (75,040 samples, 0.14%)</title><rect x="43.0330%" y="85" width="0.1446%" height="15" fill="rgb(211,96,35)"/><text x="43.2830%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (74,350 samples, 0.14%)</title><rect x="43.0343%" y="69" width="0.1433%" height="15" fill="rgb(253,215,40)"/><text x="43.2843%" y="79.50"></text></g><g><title>item_attrs (67,370 samples, 0.13%)</title><rect x="43.0478%" y="53" width="0.1299%" height="15" fill="rgb(211,81,21)"/><text x="43.2978%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (66,670 samples, 0.13%)</title><rect x="43.0491%" y="37" width="0.1285%" height="15" fill="rgb(208,190,38)"/><text x="43.2991%" y="47.50"></text></g><g><title>adt_dtorck_constraint (88,961 samples, 0.17%)</title><rect x="43.0218%" y="101" width="0.1715%" height="15" fill="rgb(235,213,38)"/><text x="43.2718%" y="111.50"></text></g><g><title>adt_dtorck_constraint (477,356 samples, 0.92%)</title><rect x="42.3310%" y="117" width="0.9201%" height="15" fill="rgb(237,122,38)"/><text x="42.5810%" y="127.50"></text></g><g><title>dropck_outlives (695,867 samples, 1.34%)</title><rect x="41.9619%" y="149" width="1.3413%" height="15" fill="rgb(244,218,35)"/><text x="42.2119%" y="159.50"></text></g><g><title>adt_dtorck_constraint (597,157 samples, 1.15%)</title><rect x="42.1521%" y="133" width="1.1511%" height="15" fill="rgb(240,68,47)"/><text x="42.4021%" y="143.50"></text></g><g><title>adt_sized_constraint (76,691 samples, 0.15%)</title><rect x="44.3926%" y="133" width="0.1478%" height="15" fill="rgb(210,16,53)"/><text x="44.6426%" y="143.50"></text></g><g><title>evaluate_obligation (865,139 samples, 1.67%)</title><rect x="43.3032%" y="149" width="1.6676%" height="15" fill="rgb(235,124,12)"/><text x="43.5532%" y="159.50"></text></g><g><title>trait_impls_of (152,852 samples, 0.29%)</title><rect x="44.6762%" y="133" width="0.2946%" height="15" fill="rgb(224,169,11)"/><text x="44.9262%" y="143.50"></text></g><g><title>fn_sig (72,790 samples, 0.14%)</title><rect x="45.0120%" y="149" width="0.1403%" height="15" fill="rgb(250,166,2)"/><text x="45.2620%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (62,530 samples, 0.12%)</title><rect x="45.0318%" y="133" width="0.1205%" height="15" fill="rgb(242,216,29)"/><text x="45.2818%" y="143.50"></text></g><g><title>generics_of (62,170 samples, 0.12%)</title><rect x="45.1523%" y="149" width="0.1198%" height="15" fill="rgb(230,116,27)"/><text x="45.4023%" y="159.50"></text></g><g><title>impl_trait_ref (52,270 samples, 0.10%)</title><rect x="45.2857%" y="149" width="0.1008%" height="15" fill="rgb(228,99,48)"/><text x="45.5357%" y="159.50"></text></g><g><title>item_attrs (236,143 samples, 0.46%)</title><rect x="45.4682%" y="149" width="0.4552%" height="15" fill="rgb(253,11,6)"/><text x="45.7182%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (228,573 samples, 0.44%)</title><rect x="45.4828%" y="133" width="0.4406%" height="15" fill="rgb(247,143,39)"/><text x="45.7328%" y="143.50"></text></g><g><title>evaluate_obligation (145,172 samples, 0.28%)</title><rect x="46.2065%" y="133" width="0.2798%" height="15" fill="rgb(236,97,10)"/><text x="46.4565%" y="143.50"></text></g><g><title>method_autoderef_steps (299,984 samples, 0.58%)</title><rect x="45.9811%" y="149" width="0.5782%" height="15" fill="rgb(233,208,19)"/><text x="46.2311%" y="159.50"></text></g><g><title>explicit_predicates_of (72,060 samples, 0.14%)</title><rect x="46.8129%" y="117" width="0.1389%" height="15" fill="rgb(216,164,2)"/><text x="47.0629%" y="127.50"></text></g><g><title>predicates_of (220,441 samples, 0.42%)</title><rect x="46.5973%" y="149" width="0.4249%" height="15" fill="rgb(220,129,5)"/><text x="46.8473%" y="159.50"></text></g><g><title>predicates_defined_on (156,800 samples, 0.30%)</title><rect x="46.7200%" y="133" width="0.3022%" height="15" fill="rgb(242,17,10)"/><text x="46.9700%" y="143.50"></text></g><g><title>type_of (92,490 samples, 0.18%)</title><rect x="47.0761%" y="149" width="0.1783%" height="15" fill="rgb(242,107,0)"/><text x="47.3261%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (78,340 samples, 0.15%)</title><rect x="47.1034%" y="133" width="0.1510%" height="15" fill="rgb(251,28,31)"/><text x="47.3534%" y="143.50"></text></g><g><title>item_bodies_checking (8,557,922 samples, 16.50%)</title><rect x="30.8638%" y="197" width="16.4959%" height="15" fill="rgb(233,223,10)"/><text x="31.1138%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,554,482 samples, 16.49%)</title><rect x="30.8705%" y="181" width="16.4893%" height="15" fill="rgb(215,21,27)"/><text x="31.1205%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (8,533,442 samples, 16.45%)</title><rect x="30.9110%" y="165" width="16.4487%" height="15" fill="rgb(232,23,21)"/><text x="31.1610%" y="175.50">typeck</text></g><g><title>impl_parent (68,630 samples, 0.13%)</title><rect x="47.7023%" y="117" width="0.1323%" height="15" fill="rgb(244,5,23)"/><text x="47.9523%" y="127.50"></text></g><g><title>impl_trait_ref (339,155 samples, 0.65%)</title><rect x="47.8346%" y="117" width="0.6537%" height="15" fill="rgb(226,81,46)"/><text x="48.0846%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (314,274 samples, 0.61%)</title><rect x="47.8826%" y="101" width="0.6058%" height="15" fill="rgb(247,70,30)"/><text x="48.1326%" y="111.50"></text></g><g><title>item_types_checking (613,157 samples, 1.18%)</title><rect x="47.3598%" y="197" width="1.1819%" height="15" fill="rgb(212,68,19)"/><text x="47.6098%" y="207.50"></text></g><g><title>check_mod_item_types (609,517 samples, 1.17%)</title><rect x="47.3668%" y="181" width="1.1749%" height="15" fill="rgb(240,187,13)"/><text x="47.6168%" y="191.50"></text></g><g><title>adt_destructor (591,807 samples, 1.14%)</title><rect x="47.4009%" y="165" width="1.1407%" height="15" fill="rgb(223,113,26)"/><text x="47.6509%" y="175.50"></text></g><g><title>coherent_trait (577,427 samples, 1.11%)</title><rect x="47.4286%" y="149" width="1.1130%" height="15" fill="rgb(206,192,2)"/><text x="47.6786%" y="159.50"></text></g><g><title>specialization_graph_of (567,487 samples, 1.09%)</title><rect x="47.4478%" y="133" width="1.0939%" height="15" fill="rgb(241,108,4)"/><text x="47.6978%" y="143.50"></text></g><g><title>fn_sig (63,131 samples, 0.12%)</title><rect x="48.7566%" y="165" width="0.1217%" height="15" fill="rgb(247,173,49)"/><text x="49.0066%" y="175.50"></text></g><g><title>generics_of (81,551 samples, 0.16%)</title><rect x="48.8783%" y="165" width="0.1572%" height="15" fill="rgb(224,114,35)"/><text x="49.1283%" y="175.50"></text></g><g><title>late_bound_vars_map (117,881 samples, 0.23%)</title><rect x="49.8479%" y="117" width="0.2272%" height="15" fill="rgb(245,159,27)"/><text x="50.0979%" y="127.50"></text></g><g><title>resolve_lifetimes (102,531 samples, 0.20%)</title><rect x="49.8775%" y="101" width="0.1976%" height="15" fill="rgb(245,172,44)"/><text x="50.1275%" y="111.50"></text></g><g><title>explicit_predicates_of (554,036 samples, 1.07%)</title><rect x="49.1006%" y="133" width="1.0679%" height="15" fill="rgb(236,23,11)"/><text x="49.3506%" y="143.50"></text></g><g><title>predicates_of (631,956 samples, 1.22%)</title><rect x="49.0367%" y="165" width="1.2181%" height="15" fill="rgb(205,117,38)"/><text x="49.2867%" y="175.50"></text></g><g><title>predicates_defined_on (619,606 samples, 1.19%)</title><rect x="49.0605%" y="149" width="1.1943%" height="15" fill="rgb(237,72,25)"/><text x="49.3105%" y="159.50"></text></g><g><title>type_collecting (966,570 samples, 1.86%)</title><rect x="48.5465%" y="197" width="1.8631%" height="15" fill="rgb(244,70,9)"/><text x="48.7965%" y="207.50">t..</text></g><g><title>collect_mod_item_types (948,420 samples, 1.83%)</title><rect x="48.5814%" y="181" width="1.8281%" height="15" fill="rgb(217,125,39)"/><text x="48.8314%" y="191.50">c..</text></g><g><title>type_of (80,300 samples, 0.15%)</title><rect x="50.2548%" y="165" width="0.1548%" height="15" fill="rgb(235,36,10)"/><text x="50.5048%" y="175.50"></text></g><g><title>param_env (112,120 samples, 0.22%)</title><rect x="51.2700%" y="165" width="0.2161%" height="15" fill="rgb(251,123,47)"/><text x="51.5200%" y="175.50"></text></g><g><title>check_impl_item_well_formed (591,046 samples, 1.14%)</title><rect x="50.4985%" y="181" width="1.1393%" height="15" fill="rgb(221,13,13)"/><text x="50.7485%" y="191.50"></text></g><g><title>evaluate_obligation (78,990 samples, 0.15%)</title><rect x="52.8022%" y="165" width="0.1523%" height="15" fill="rgb(238,131,9)"/><text x="53.0522%" y="175.50"></text></g><g><title>implied_outlives_bounds (108,052 samples, 0.21%)</title><rect x="52.9565%" y="165" width="0.2083%" height="15" fill="rgb(211,50,8)"/><text x="53.2065%" y="175.50"></text></g><g><title>param_env (259,192 samples, 0.50%)</title><rect x="53.1665%" y="165" width="0.4996%" height="15" fill="rgb(245,182,24)"/><text x="53.4165%" y="175.50"></text></g><g><title>predicates_of (81,111 samples, 0.16%)</title><rect x="53.6661%" y="165" width="0.1563%" height="15" fill="rgb(242,14,37)"/><text x="53.9161%" y="175.50"></text></g><g><title>predicates_defined_on (58,810 samples, 0.11%)</title><rect x="53.7091%" y="149" width="0.1134%" height="15" fill="rgb(246,228,12)"/><text x="53.9591%" y="159.50"></text></g><g><title>trait_impls_of (105,311 samples, 0.20%)</title><rect x="53.8851%" y="165" width="0.2030%" height="15" fill="rgb(213,55,15)"/><text x="54.1351%" y="175.50"></text></g><g><title>analysis (24,223,068 samples, 46.69%)</title><rect x="7.4859%" y="229" width="46.6915%" height="15" fill="rgb(209,9,3)"/><text x="7.7359%" y="239.50">analysis</text></g><g><title>type_check_crate (12,200,150 samples, 23.52%)</title><rect x="30.6608%" y="213" width="23.5166%" height="15" fill="rgb(230,59,30)"/><text x="30.9108%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,953,440 samples, 3.77%)</title><rect x="50.4120%" y="197" width="3.7654%" height="15" fill="rgb(209,121,21)"/><text x="50.6620%" y="207.50">wf_c..</text></g><g><title>check_item_well_formed (1,317,494 samples, 2.54%)</title><rect x="51.6378%" y="181" width="2.5396%" height="15" fill="rgb(220,109,13)"/><text x="51.8878%" y="191.50">ch..</text></g><g><title>codegen_module (534,225 samples, 1.03%)</title><rect x="55.6333%" y="213" width="1.0298%" height="15" fill="rgb(232,18,1)"/><text x="55.8833%" y="223.50"></text></g><g><title>codegen_crate (1,329,534 samples, 2.56%)</title><rect x="54.2007%" y="229" width="2.5628%" height="15" fill="rgb(215,41,42)"/><text x="54.4507%" y="239.50">co..</text></g><g><title>LLVM_module_codegen (2,687,409 samples, 5.18%)</title><rect x="56.8088%" y="213" width="5.1801%" height="15" fill="rgb(224,123,36)"/><text x="57.0588%" y="223.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (2,637,378 samples, 5.08%)</title><rect x="56.9052%" y="197" width="5.0837%" height="15" fill="rgb(240,125,3)"/><text x="57.1552%" y="207.50">LLVM_m..</text></g><g><title>codegen_module_optimize (2,996,512 samples, 5.78%)</title><rect x="56.7635%" y="229" width="5.7760%" height="15" fill="rgb(205,98,50)"/><text x="57.0135%" y="239.50">codegen..</text></g><g><title>LLVM_module_optimize (285,613 samples, 0.55%)</title><rect x="61.9889%" y="213" width="0.5505%" height="15" fill="rgb(205,185,37)"/><text x="62.2389%" y="223.50"></text></g><g><title>AST_validation (92,651 samples, 0.18%)</title><rect x="62.9820%" y="213" width="0.1786%" height="15" fill="rgb(238,207,15)"/><text x="63.2320%" y="223.50"></text></g><g><title>crate_injection (113,892 samples, 0.22%)</title><rect x="63.2124%" y="213" width="0.2195%" height="15" fill="rgb(213,199,42)"/><text x="63.4624%" y="223.50"></text></g><g><title>macro_expand_crate (8,128,487 samples, 15.67%)</title><rect x="63.4320%" y="213" width="15.6682%" height="15" fill="rgb(235,201,11)"/><text x="63.6820%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (8,111,977 samples, 15.64%)</title><rect x="63.4638%" y="197" width="15.6363%" height="15" fill="rgb(207,46,11)"/><text x="63.7138%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (233,803 samples, 0.45%)</title><rect x="78.6495%" y="181" width="0.4507%" height="15" fill="rgb(241,35,35)"/><text x="78.8995%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (158,122 samples, 0.30%)</title><rect x="79.1091%" y="213" width="0.3048%" height="15" fill="rgb(243,32,47)"/><text x="79.3591%" y="223.50"></text></g><g><title>finalize_imports (241,823 samples, 0.47%)</title><rect x="79.4307%" y="197" width="0.4661%" height="15" fill="rgb(247,202,23)"/><text x="79.6807%" y="207.50"></text></g><g><title>late_resolve_crate (810,098 samples, 1.56%)</title><rect x="79.9127%" y="197" width="1.5615%" height="15" fill="rgb(219,102,11)"/><text x="80.1627%" y="207.50"></text></g><g><title>configure_and_expand (9,873,476 samples, 19.03%)</title><rect x="62.5395%" y="229" width="19.0317%" height="15" fill="rgb(243,110,44)"/><text x="62.7895%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,119,202 samples, 2.16%)</title><rect x="79.4139%" y="213" width="2.1573%" height="15" fill="rgb(222,74,54)"/><text x="79.6639%" y="223.50">r..</text></g><g><title>drop_ast (60,520 samples, 0.12%)</title><rect x="81.5712%" y="229" width="0.1167%" height="15" fill="rgb(216,99,12)"/><text x="81.8212%" y="239.50"></text></g><g><title>early_lint_checks (141,732 samples, 0.27%)</title><rect x="81.7142%" y="229" width="0.2732%" height="15" fill="rgb(226,22,26)"/><text x="81.9642%" y="239.50"></text></g><g><title>free_global_ctxt (1,982,611 samples, 3.82%)</title><rect x="81.9874%" y="229" width="3.8216%" height="15" fill="rgb(217,163,10)"/><text x="82.2374%" y="239.50">free..</text></g><g><title>crate_hash (131,681 samples, 0.25%)</title><rect x="87.0068%" y="213" width="0.2538%" height="15" fill="rgb(213,25,53)"/><text x="87.2568%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (84,631 samples, 0.16%)</title><rect x="87.3657%" y="197" width="0.1631%" height="15" fill="rgb(252,105,26)"/><text x="87.6157%" y="207.50"></text></g><g><title>exported_symbols (152,642 samples, 0.29%)</title><rect x="87.3170%" y="213" width="0.2942%" height="15" fill="rgb(220,39,43)"/><text x="87.5670%" y="223.50"></text></g><g><title>mir_for_ctfe (55,600 samples, 0.11%)</title><rect x="87.6368%" y="213" width="0.1072%" height="15" fill="rgb(229,68,48)"/><text x="87.8868%" y="223.50"></text></g><g><title>is_sized_raw (64,081 samples, 0.12%)</title><rect x="89.1515%" y="181" width="0.1235%" height="15" fill="rgb(252,8,32)"/><text x="89.4015%" y="191.50"></text></g><g><title>layout_of (101,061 samples, 0.19%)</title><rect x="89.3953%" y="165" width="0.1948%" height="15" fill="rgb(223,20,43)"/><text x="89.6453%" y="175.50"></text></g><g><title>layout_of (191,301 samples, 0.37%)</title><rect x="89.2750%" y="181" width="0.3687%" height="15" fill="rgb(229,81,49)"/><text x="89.5250%" y="191.50"></text></g><g><title>layout_of (362,113 samples, 0.70%)</title><rect x="89.0081%" y="197" width="0.6980%" height="15" fill="rgb(236,28,36)"/><text x="89.2581%" y="207.50"></text></g><g><title>needs_drop_raw (72,381 samples, 0.14%)</title><rect x="90.8100%" y="181" width="0.1395%" height="15" fill="rgb(249,185,26)"/><text x="91.0600%" y="191.50"></text></g><g><title>is_copy_raw (62,971 samples, 0.12%)</title><rect x="90.8282%" y="165" width="0.1214%" height="15" fill="rgb(249,174,33)"/><text x="91.0782%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (653,868 samples, 1.26%)</title><rect x="89.7061%" y="197" width="1.2604%" height="15" fill="rgb(233,201,37)"/><text x="89.9561%" y="207.50"></text></g><g><title>optimized_mir (1,652,217 samples, 3.18%)</title><rect x="87.8257%" y="213" width="3.1848%" height="15" fill="rgb(221,78,26)"/><text x="88.0757%" y="223.50">opt..</text></g><g><title>promoted_mir (105,161 samples, 0.20%)</title><rect x="91.0105%" y="213" width="0.2027%" height="15" fill="rgb(250,127,30)"/><text x="91.2605%" y="223.50"></text></g><g><title>generate_crate_metadata (2,819,561 samples, 5.43%)</title><rect x="85.8090%" y="229" width="5.4349%" height="15" fill="rgb(230,49,44)"/><text x="86.0590%" y="239.50">generat..</text></g><g><title>hir_lowering (738,778 samples, 1.42%)</title><rect x="91.2439%" y="229" width="1.4240%" height="15" fill="rgb(229,67,23)"/><text x="91.4939%" y="239.50"></text></g><g><title>finish_ongoing_codegen (377,724 samples, 0.73%)</title><rect x="92.7008%" y="213" width="0.7281%" height="15" fill="rgb(249,83,47)"/><text x="92.9508%" y="223.50"></text></g><g><title>link_crate (750,798 samples, 1.45%)</title><rect x="93.4289%" y="213" width="1.4472%" height="15" fill="rgb(215,43,3)"/><text x="93.6789%" y="223.50"></text></g><g><title>link_binary (745,698 samples, 1.44%)</title><rect x="93.4388%" y="197" width="1.4374%" height="15" fill="rgb(238,154,13)"/><text x="93.6888%" y="207.50"></text></g><g><title>link_rlib (495,835 samples, 0.96%)</title><rect x="93.9204%" y="181" width="0.9558%" height="15" fill="rgb(219,56,2)"/><text x="94.1704%" y="191.50"></text></g><g><title>link (1,154,703 samples, 2.23%)</title><rect x="92.6679%" y="229" width="2.2258%" height="15" fill="rgb(233,0,4)"/><text x="92.9179%" y="239.50">l..</text></g><g><title>parse_crate (966,541 samples, 1.86%)</title><rect x="94.8937%" y="229" width="1.8631%" height="15" fill="rgb(235,30,7)"/><text x="95.1437%" y="239.50">p..</text></g><g><title>prepare_outputs (353,484 samples, 0.68%)</title><rect x="96.7725%" y="229" width="0.6814%" height="15" fill="rgb(250,79,13)"/><text x="97.0225%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (620,447 samples, 1.20%)</title><rect x="97.4539%" y="229" width="1.1960%" height="15" fill="rgb(211,146,34)"/><text x="97.7039%" y="239.50"></text></g><g><title>setup_global_ctxt (158,892 samples, 0.31%)</title><rect x="98.6528%" y="229" width="0.3063%" height="15" fill="rgb(228,22,38)"/><text x="98.9028%" y="239.50"></text></g><g><title>all (51,878,985 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (51,878,985 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (540,015 samples, 1.04%)</title><rect x="98.9591%" y="229" width="1.0409%" height="15" fill="rgb(215,215,53)"/><text x="99.2091%" y="239.50"></text></g></svg></svg>