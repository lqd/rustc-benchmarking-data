<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (69,620,134 samples, 13.14%)</title><rect x="0.1267%" y="197" width="13.1429%" height="15" fill="rgb(227,0,7)"/><text x="0.3767%" y="207.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (565,038 samples, 0.11%)</title><rect x="17.1280%" y="101" width="0.1067%" height="15" fill="rgb(217,0,24)"/><text x="17.3780%" y="111.50"></text></g><g><title>adt_drop_tys (675,497 samples, 0.13%)</title><rect x="17.9432%" y="69" width="0.1275%" height="15" fill="rgb(221,193,54)"/><text x="18.1932%" y="79.50"></text></g><g><title>is_copy_raw (1,238,104 samples, 0.23%)</title><rect x="18.0707%" y="69" width="0.2337%" height="15" fill="rgb(248,212,6)"/><text x="18.3207%" y="79.50"></text></g><g><title>evaluate_obligation (987,733 samples, 0.19%)</title><rect x="18.1180%" y="53" width="0.1865%" height="15" fill="rgb(208,68,35)"/><text x="18.3680%" y="63.50"></text></g><g><title>needs_drop_raw (2,188,562 samples, 0.41%)</title><rect x="17.9048%" y="85" width="0.4132%" height="15" fill="rgb(232,128,0)"/><text x="18.1548%" y="95.50"></text></g><g><title>impl_parent (1,438,512 samples, 0.27%)</title><rect x="18.7548%" y="53" width="0.2716%" height="15" fill="rgb(207,160,47)"/><text x="19.0048%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (802,164 samples, 0.15%)</title><rect x="18.8749%" y="37" width="0.1514%" height="15" fill="rgb(228,23,34)"/><text x="19.1249%" y="47.50"></text></g><g><title>specialization_graph_of (6,675,421 samples, 1.26%)</title><rect x="18.4342%" y="69" width="1.2602%" height="15" fill="rgb(218,30,26)"/><text x="18.6842%" y="79.50"></text></g><g><title>impl_trait_ref (3,538,835 samples, 0.67%)</title><rect x="19.0263%" y="53" width="0.6681%" height="15" fill="rgb(220,122,19)"/><text x="19.2763%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,091,690 samples, 0.58%)</title><rect x="19.1107%" y="37" width="0.5836%" height="15" fill="rgb(250,228,42)"/><text x="19.3607%" y="47.50"></text></g><g><title>resolve_instance (7,409,220 samples, 1.40%)</title><rect x="18.3179%" y="85" width="1.3987%" height="15" fill="rgb(240,193,28)"/><text x="18.5679%" y="95.50"></text></g><g><title>thir_body (1,251,026 samples, 0.24%)</title><rect x="19.7253%" y="85" width="0.2362%" height="15" fill="rgb(216,20,37)"/><text x="19.9753%" y="95.50"></text></g><g><title>mir_const (17,094,332 samples, 3.23%)</title><rect x="16.7427%" y="133" width="3.2271%" height="15" fill="rgb(206,188,39)"/><text x="16.9927%" y="143.50">mir..</text></g><g><title>unsafety_check_result (15,619,513 samples, 2.95%)</title><rect x="17.0211%" y="117" width="2.9487%" height="15" fill="rgb(217,207,13)"/><text x="17.2711%" y="127.50">un..</text></g><g><title>mir_built (14,488,181 samples, 2.74%)</title><rect x="17.2346%" y="101" width="2.7351%" height="15" fill="rgb(231,73,38)"/><text x="17.4846%" y="111.50">mi..</text></g><g><title>mir_promoted (18,087,491 samples, 3.41%)</title><rect x="16.5620%" y="149" width="3.4146%" height="15" fill="rgb(225,20,46)"/><text x="16.8120%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (1,040,981 samples, 0.20%)</title><rect x="19.9784%" y="149" width="0.1965%" height="15" fill="rgb(210,31,41)"/><text x="20.2284%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,502,693 samples, 0.66%)</title><rect x="20.2185%" y="149" width="0.6612%" height="15" fill="rgb(221,200,47)"/><text x="20.4685%" y="159.50"></text></g><g><title>MIR_borrow_checking (40,017,159 samples, 7.55%)</title><rect x="13.3281%" y="181" width="7.5544%" height="15" fill="rgb(226,26,5)"/><text x="13.5781%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (39,892,145 samples, 7.53%)</title><rect x="13.3517%" y="165" width="7.5308%" height="15" fill="rgb(249,33,26)"/><text x="13.6017%" y="175.50">mir_borrow..</text></g><g><title>check_mod_attrs (558,996 samples, 0.11%)</title><rect x="20.9298%" y="165" width="0.1055%" height="15" fill="rgb(235,183,28)"/><text x="21.1798%" y="175.50"></text></g><g><title>misc_checking_1 (1,200,753 samples, 0.23%)</title><rect x="20.9251%" y="181" width="0.2267%" height="15" fill="rgb(221,5,38)"/><text x="21.1751%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (635,376 samples, 0.12%)</title><rect x="21.1522%" y="165" width="0.1199%" height="15" fill="rgb(247,18,42)"/><text x="21.4022%" y="175.50"></text></g><g><title>check_mod_liveness (541,754 samples, 0.10%)</title><rect x="21.1699%" y="149" width="0.1023%" height="15" fill="rgb(241,131,45)"/><text x="21.4199%" y="159.50"></text></g><g><title>mir_borrowck (536,295 samples, 0.10%)</title><rect x="21.4739%" y="53" width="0.1012%" height="15" fill="rgb(249,31,29)"/><text x="21.7239%" y="63.50"></text></g><g><title>eval_to_const_value_raw (983,261 samples, 0.19%)</title><rect x="21.3898%" y="133" width="0.1856%" height="15" fill="rgb(225,111,53)"/><text x="21.6398%" y="143.50"></text></g><g><title>eval_to_const_value_raw (973,500 samples, 0.18%)</title><rect x="21.3917%" y="117" width="0.1838%" height="15" fill="rgb(238,160,17)"/><text x="21.6417%" y="127.50"></text></g><g><title>eval_to_allocation_raw (961,850 samples, 0.18%)</title><rect x="21.3939%" y="101" width="0.1816%" height="15" fill="rgb(214,148,48)"/><text x="21.6439%" y="111.50"></text></g><g><title>mir_for_ctfe (757,758 samples, 0.14%)</title><rect x="21.4324%" y="85" width="0.1430%" height="15" fill="rgb(232,36,49)"/><text x="21.6824%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (690,307 samples, 0.13%)</title><rect x="21.4451%" y="69" width="0.1303%" height="15" fill="rgb(209,103,24)"/><text x="21.6951%" y="79.50"></text></g><g><title>misc_checking_2 (2,615,348 samples, 0.49%)</title><rect x="21.1518%" y="181" width="0.4937%" height="15" fill="rgb(229,88,8)"/><text x="21.4018%" y="191.50"></text></g><g><title>match_checking (1,978,002 samples, 0.37%)</title><rect x="21.2721%" y="165" width="0.3734%" height="15" fill="rgb(213,181,19)"/><text x="21.5221%" y="175.50"></text></g><g><title>check_match (1,944,402 samples, 0.37%)</title><rect x="21.2785%" y="149" width="0.3671%" height="15" fill="rgb(254,191,54)"/><text x="21.5285%" y="159.50"></text></g><g><title>crate_lints (3,319,316 samples, 0.63%)</title><rect x="21.7854%" y="149" width="0.6266%" height="15" fill="rgb(241,83,37)"/><text x="22.0354%" y="159.50"></text></g><g><title>type_of (1,881,803 samples, 0.36%)</title><rect x="22.0568%" y="133" width="0.3552%" height="15" fill="rgb(233,36,39)"/><text x="22.3068%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,523,608 samples, 0.29%)</title><rect x="22.1244%" y="117" width="0.2876%" height="15" fill="rgb(226,3,54)"/><text x="22.3744%" y="127.50"></text></g><g><title>lint_checking (3,733,220 samples, 0.70%)</title><rect x="21.7852%" y="165" width="0.7048%" height="15" fill="rgb(245,192,40)"/><text x="22.0352%" y="175.50"></text></g><g><title>privacy_checking_modules (1,090,482 samples, 0.21%)</title><rect x="22.5280%" y="165" width="0.2059%" height="15" fill="rgb(238,167,29)"/><text x="22.7780%" y="175.50"></text></g><g><title>check_mod_privacy (1,087,502 samples, 0.21%)</title><rect x="22.5286%" y="149" width="0.2053%" height="15" fill="rgb(232,182,51)"/><text x="22.7786%" y="159.50"></text></g><g><title>misc_checking_3 (5,780,282 samples, 1.09%)</title><rect x="21.6456%" y="181" width="1.0912%" height="15" fill="rgb(231,60,39)"/><text x="21.8956%" y="191.50"></text></g><g><title>impl_trait_ref (905,938 samples, 0.17%)</title><rect x="22.9160%" y="117" width="0.1710%" height="15" fill="rgb(208,69,12)"/><text x="23.1660%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (826,328 samples, 0.16%)</title><rect x="22.9310%" y="101" width="0.1560%" height="15" fill="rgb(235,93,37)"/><text x="23.1810%" y="111.50"></text></g><g><title>coherent_trait (1,995,702 samples, 0.38%)</title><rect x="22.7539%" y="149" width="0.3767%" height="15" fill="rgb(213,116,39)"/><text x="23.0039%" y="159.50"></text></g><g><title>specialization_graph_of (1,986,822 samples, 0.38%)</title><rect x="22.7556%" y="133" width="0.3751%" height="15" fill="rgb(222,207,29)"/><text x="23.0056%" y="143.50"></text></g><g><title>coherence_checking (2,045,932 samples, 0.39%)</title><rect x="22.7514%" y="165" width="0.3862%" height="15" fill="rgb(206,96,30)"/><text x="23.0014%" y="175.50"></text></g><g><title>associated_item (753,306 samples, 0.14%)</title><rect x="27.2531%" y="101" width="0.1422%" height="15" fill="rgb(218,138,4)"/><text x="27.5031%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (585,174 samples, 0.11%)</title><rect x="27.2849%" y="85" width="0.1105%" height="15" fill="rgb(250,191,14)"/><text x="27.5349%" y="95.50"></text></g><g><title>associated_items (1,344,442 samples, 0.25%)</title><rect x="27.1530%" y="117" width="0.2538%" height="15" fill="rgb(239,60,40)"/><text x="27.4030%" y="127.50"></text></g><g><title>dropck_outlives (994,461 samples, 0.19%)</title><rect x="27.4288%" y="117" width="0.1877%" height="15" fill="rgb(206,27,48)"/><text x="27.6788%" y="127.50"></text></g><g><title>trait_impls_of (1,023,139 samples, 0.19%)</title><rect x="28.2442%" y="101" width="0.1931%" height="15" fill="rgb(225,35,8)"/><text x="28.4942%" y="111.50"></text></g><g><title>evaluate_obligation (4,354,107 samples, 0.82%)</title><rect x="27.6171%" y="117" width="0.8220%" height="15" fill="rgb(250,213,24)"/><text x="27.8671%" y="127.50"></text></g><g><title>evaluate_obligation (542,407 samples, 0.10%)</title><rect x="28.6804%" y="101" width="0.1024%" height="15" fill="rgb(247,123,22)"/><text x="28.9304%" y="111.50"></text></g><g><title>method_autoderef_steps (1,074,284 samples, 0.20%)</title><rect x="28.5842%" y="117" width="0.2028%" height="15" fill="rgb(231,138,38)"/><text x="28.8342%" y="127.50"></text></g><g><title>predicates_of (619,108 samples, 0.12%)</title><rect x="28.8462%" y="117" width="0.1169%" height="15" fill="rgb(231,145,46)"/><text x="29.0962%" y="127.50"></text></g><g><title>dropck_outlives (613,818 samples, 0.12%)</title><rect x="30.6512%" y="101" width="0.1159%" height="15" fill="rgb(251,118,11)"/><text x="30.9012%" y="111.50"></text></g><g><title>evaluate_obligation (1,483,573 samples, 0.28%)</title><rect x="30.7673%" y="101" width="0.2801%" height="15" fill="rgb(217,147,25)"/><text x="31.0173%" y="111.50"></text></g><g><title>typeck (12,210,730 samples, 2.31%)</title><rect x="29.0289%" y="117" width="2.3051%" height="15" fill="rgb(247,81,37)"/><text x="29.2789%" y="127.50">t..</text></g><g><title>item_bodies_checking (43,443,985 samples, 8.20%)</title><rect x="23.1424%" y="165" width="8.2014%" height="15" fill="rgb(209,12,38)"/><text x="23.3924%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (43,439,814 samples, 8.20%)</title><rect x="23.1431%" y="149" width="8.2006%" height="15" fill="rgb(227,1,9)"/><text x="23.3931%" y="159.50">typeck_item..</text></g><g><title>typeck (43,371,704 samples, 8.19%)</title><rect x="23.1560%" y="133" width="8.1877%" height="15" fill="rgb(248,47,43)"/><text x="23.4060%" y="143.50">typeck</text></g><g><title>adt_destructor (645,048 samples, 0.12%)</title><rect x="31.4791%" y="133" width="0.1218%" height="15" fill="rgb(221,10,30)"/><text x="31.7291%" y="143.50"></text></g><g><title>coherent_trait (639,047 samples, 0.12%)</title><rect x="31.4802%" y="117" width="0.1206%" height="15" fill="rgb(210,229,1)"/><text x="31.7302%" y="127.50"></text></g><g><title>specialization_graph_of (637,037 samples, 0.12%)</title><rect x="31.4806%" y="101" width="0.1203%" height="15" fill="rgb(222,148,37)"/><text x="31.7306%" y="111.50"></text></g><g><title>item_types_checking (1,729,268 samples, 0.33%)</title><rect x="31.3437%" y="165" width="0.3265%" height="15" fill="rgb(234,67,33)"/><text x="31.5937%" y="175.50"></text></g><g><title>check_mod_item_types (1,724,158 samples, 0.33%)</title><rect x="31.3447%" y="149" width="0.3255%" height="15" fill="rgb(247,98,35)"/><text x="31.5947%" y="159.50"></text></g><g><title>predicates_of (1,021,960 samples, 0.19%)</title><rect x="31.8303%" y="133" width="0.1929%" height="15" fill="rgb(247,138,52)"/><text x="32.0803%" y="143.50"></text></g><g><title>predicates_defined_on (988,860 samples, 0.19%)</title><rect x="31.8366%" y="117" width="0.1867%" height="15" fill="rgb(213,79,30)"/><text x="32.0866%" y="127.50"></text></g><g><title>type_collecting (2,024,762 samples, 0.38%)</title><rect x="31.6709%" y="165" width="0.3822%" height="15" fill="rgb(246,177,23)"/><text x="31.9209%" y="175.50"></text></g><g><title>collect_mod_item_types (2,009,222 samples, 0.38%)</title><rect x="31.6739%" y="149" width="0.3793%" height="15" fill="rgb(230,62,27)"/><text x="31.9239%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,774,741 samples, 0.52%)</title><rect x="32.0832%" y="149" width="0.5238%" height="15" fill="rgb(216,154,8)"/><text x="32.3332%" y="159.50"></text></g><g><title>check_item_well_formed (2,450,247 samples, 0.46%)</title><rect x="32.6070%" y="149" width="0.4626%" height="15" fill="rgb(244,35,45)"/><text x="32.8570%" y="159.50"></text></g><g><title>evaluate_obligation (537,445 samples, 0.10%)</title><rect x="33.1142%" y="133" width="0.1015%" height="15" fill="rgb(251,115,12)"/><text x="33.3642%" y="143.50"></text></g><g><title>analysis (105,741,141 samples, 19.96%)</title><rect x="13.2696%" y="197" width="19.9618%" height="15" fill="rgb(240,54,50)"/><text x="13.5196%" y="207.50">analysis</text></g><g><title>type_check_crate (55,591,964 samples, 10.49%)</title><rect x="22.7368%" y="181" width="10.4946%" height="15" fill="rgb(233,84,52)"/><text x="22.9868%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,236,617 samples, 1.18%)</title><rect x="32.0541%" y="165" width="1.1773%" height="15" fill="rgb(207,117,47)"/><text x="32.3041%" y="175.50"></text></g><g><title>check_trait_item_well_formed (857,379 samples, 0.16%)</title><rect x="33.0695%" y="149" width="0.1619%" height="15" fill="rgb(249,43,39)"/><text x="33.3195%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,529,400 samples, 0.29%)</title><rect x="42.4302%" y="165" width="0.2887%" height="15" fill="rgb(209,38,44)"/><text x="42.6802%" y="175.50"></text></g><g><title>codegen_fn_attrs (809,380 samples, 0.15%)</title><rect x="43.2389%" y="149" width="0.1528%" height="15" fill="rgb(236,212,23)"/><text x="43.4889%" y="159.50"></text></g><g><title>layout_of (590,427 samples, 0.11%)</title><rect x="43.5544%" y="133" width="0.1115%" height="15" fill="rgb(242,79,21)"/><text x="43.8044%" y="143.50"></text></g><g><title>layout_of (1,501,487 samples, 0.28%)</title><rect x="43.4210%" y="149" width="0.2835%" height="15" fill="rgb(211,96,35)"/><text x="43.6710%" y="159.50"></text></g><g><title>predicates_of (1,032,425 samples, 0.19%)</title><rect x="43.9891%" y="133" width="0.1949%" height="15" fill="rgb(253,215,40)"/><text x="44.2391%" y="143.50"></text></g><g><title>predicates_defined_on (811,938 samples, 0.15%)</title><rect x="44.0307%" y="117" width="0.1533%" height="15" fill="rgb(211,81,21)"/><text x="44.2807%" y="127.50"></text></g><g><title>param_env (2,562,070 samples, 0.48%)</title><rect x="43.7044%" y="149" width="0.4837%" height="15" fill="rgb(208,190,38)"/><text x="43.9544%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,296,505 samples, 0.43%)</title><rect x="44.1881%" y="149" width="0.4335%" height="15" fill="rgb(235,213,38)"/><text x="44.4381%" y="159.50"></text></g><g><title>normalize_projection_ty (2,079,562 samples, 0.39%)</title><rect x="44.2290%" y="133" width="0.3926%" height="15" fill="rgb(237,122,38)"/><text x="44.4790%" y="143.50"></text></g><g><title>fn_abi_of_instance (9,650,129 samples, 1.82%)</title><rect x="42.8137%" y="165" width="1.8218%" height="15" fill="rgb(244,218,35)"/><text x="43.0637%" y="175.50">f..</text></g><g><title>layout_of (576,066 samples, 0.11%)</title><rect x="44.9158%" y="117" width="0.1087%" height="15" fill="rgb(240,68,47)"/><text x="45.1658%" y="127.50"></text></g><g><title>layout_of (807,287 samples, 0.15%)</title><rect x="44.8860%" y="133" width="0.1524%" height="15" fill="rgb(210,16,53)"/><text x="45.1360%" y="143.50"></text></g><g><title>layout_of (1,291,684 samples, 0.24%)</title><rect x="44.8515%" y="149" width="0.2438%" height="15" fill="rgb(235,124,12)"/><text x="45.1015%" y="159.50"></text></g><g><title>layout_of (2,303,446 samples, 0.43%)</title><rect x="44.6913%" y="165" width="0.4348%" height="15" fill="rgb(224,169,11)"/><text x="44.9413%" y="175.50"></text></g><g><title>symbol_name (1,513,276 samples, 0.29%)</title><rect x="45.1303%" y="165" width="0.2857%" height="15" fill="rgb(250,166,2)"/><text x="45.3803%" y="175.50"></text></g><g><title>codegen_module (61,717,177 samples, 11.65%)</title><rect x="33.7736%" y="181" width="11.6510%" height="15" fill="rgb(242,216,29)"/><text x="34.0236%" y="191.50">codegen_module</text></g><g><title>codegen_crate (64,754,583 samples, 12.22%)</title><rect x="33.2332%" y="197" width="12.2244%" height="15" fill="rgb(230,116,27)"/><text x="33.4832%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (182,964,354 samples, 34.54%)</title><rect x="45.4911%" y="181" width="34.5400%" height="15" fill="rgb(228,99,48)"/><text x="45.7411%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (174,635,006 samples, 32.97%)</title><rect x="47.0635%" y="165" width="32.9676%" height="15" fill="rgb(253,11,6)"/><text x="47.3135%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (190,454,904 samples, 35.95%)</title><rect x="45.4576%" y="197" width="35.9541%" height="15" fill="rgb(247,143,39)"/><text x="45.7076%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,313,069 samples, 1.38%)</title><rect x="80.0310%" y="181" width="1.3806%" height="15" fill="rgb(236,97,10)"/><text x="80.2810%" y="191.50"></text></g><g><title>metadata_register_crate (18,535,079 samples, 3.50%)</title><rect x="85.0148%" y="149" width="3.4991%" height="15" fill="rgb(233,208,19)"/><text x="85.2648%" y="159.50">met..</text></g><g><title>metadata_register_crate (16,098,522 samples, 3.04%)</title><rect x="85.4748%" y="133" width="3.0391%" height="15" fill="rgb(216,164,2)"/><text x="85.7248%" y="143.50">met..</text></g><g><title>metadata_register_crate (10,529,791 samples, 1.99%)</title><rect x="86.5260%" y="117" width="1.9878%" height="15" fill="rgb(220,129,5)"/><text x="86.7760%" y="127.50">m..</text></g><g><title>metadata_register_crate (3,324,905 samples, 0.63%)</title><rect x="87.8862%" y="101" width="0.6277%" height="15" fill="rgb(242,17,10)"/><text x="88.1362%" y="111.50"></text></g><g><title>macro_expand_crate (37,576,831 samples, 7.09%)</title><rect x="81.5065%" y="181" width="7.0938%" height="15" fill="rgb(242,107,0)"/><text x="81.7565%" y="191.50">macro_expa..</text></g><g><title>expand_crate (37,562,251 samples, 7.09%)</title><rect x="81.5092%" y="165" width="7.0910%" height="15" fill="rgb(251,28,31)"/><text x="81.7592%" y="175.50">expand_cra..</text></g><g><title>late_resolve_crate (1,844,979 samples, 0.35%)</title><rect x="88.6630%" y="165" width="0.3483%" height="15" fill="rgb(233,223,10)"/><text x="88.9130%" y="175.50"></text></g><g><title>configure_and_expand (40,368,421 samples, 7.62%)</title><rect x="81.4116%" y="197" width="7.6207%" height="15" fill="rgb(215,21,27)"/><text x="81.6616%" y="207.50">configure_..</text></g><g><title>resolve_crate (2,199,443 samples, 0.42%)</title><rect x="88.6171%" y="181" width="0.4152%" height="15" fill="rgb(232,23,21)"/><text x="88.8671%" y="191.50"></text></g><g><title>free_global_ctxt (5,473,369 samples, 1.03%)</title><rect x="89.1386%" y="197" width="1.0333%" height="15" fill="rgb(244,5,23)"/><text x="89.3886%" y="207.50"></text></g><g><title>codegen_fn_attrs (747,451 samples, 0.14%)</title><rect x="90.7178%" y="117" width="0.1411%" height="15" fill="rgb(226,81,46)"/><text x="90.9678%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (820,231 samples, 0.15%)</title><rect x="91.4526%" y="101" width="0.1548%" height="15" fill="rgb(247,70,30)"/><text x="91.7026%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,310,985 samples, 0.44%)</title><rect x="91.6074%" y="101" width="0.4363%" height="15" fill="rgb(212,68,19)"/><text x="91.8574%" y="111.50"></text></g><g><title>impl_parent (863,924 samples, 0.16%)</title><rect x="92.3191%" y="69" width="0.1631%" height="15" fill="rgb(240,187,13)"/><text x="92.5691%" y="79.50"></text></g><g><title>specialization_graph_of (3,566,118 samples, 0.67%)</title><rect x="92.0563%" y="85" width="0.6732%" height="15" fill="rgb(223,113,26)"/><text x="92.3063%" y="95.50"></text></g><g><title>impl_trait_ref (1,309,966 samples, 0.25%)</title><rect x="92.4822%" y="69" width="0.2473%" height="15" fill="rgb(206,192,2)"/><text x="92.7322%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (949,874 samples, 0.18%)</title><rect x="92.5502%" y="53" width="0.1793%" height="15" fill="rgb(241,108,4)"/><text x="92.8002%" y="63.50"></text></g><g><title>resolve_instance (3,635,299 samples, 0.69%)</title><rect x="92.0437%" y="101" width="0.6863%" height="15" fill="rgb(247,173,49)"/><text x="92.2937%" y="111.50"></text></g><g><title>optimized_mir (9,442,162 samples, 1.78%)</title><rect x="91.0116%" y="117" width="1.7825%" height="15" fill="rgb(224,114,35)"/><text x="91.2616%" y="127.50">o..</text></g><g><title>evaluate_obligation (679,176 samples, 0.13%)</title><rect x="93.1550%" y="85" width="0.1282%" height="15" fill="rgb(245,159,27)"/><text x="93.4050%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,280,704 samples, 0.43%)</title><rect x="92.9133%" y="101" width="0.4306%" height="15" fill="rgb(245,172,44)"/><text x="93.1633%" y="111.50"></text></g><g><title>impl_parent (811,104 samples, 0.15%)</title><rect x="93.8161%" y="85" width="0.1531%" height="15" fill="rgb(236,23,11)"/><text x="94.0661%" y="95.50"></text></g><g><title>impl_trait_ref (2,747,698 samples, 0.52%)</title><rect x="93.9692%" y="85" width="0.5187%" height="15" fill="rgb(205,117,38)"/><text x="94.2192%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,190,682 samples, 0.41%)</title><rect x="94.0744%" y="69" width="0.4136%" height="15" fill="rgb(237,72,25)"/><text x="94.3244%" y="79.50"></text></g><g><title>specialization_graph_of (5,186,844 samples, 0.98%)</title><rect x="93.5089%" y="101" width="0.9792%" height="15" fill="rgb(244,70,9)"/><text x="93.7589%" y="111.50"></text></g><g><title>resolve_instance (9,156,614 samples, 1.73%)</title><rect x="92.7941%" y="117" width="1.7286%" height="15" fill="rgb(217,125,39)"/><text x="93.0441%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (4,555,129 samples, 0.86%)</title><rect x="94.6187%" y="117" width="0.8599%" height="15" fill="rgb(235,36,10)"/><text x="94.8687%" y="127.50"></text></g><g><title>upstream_monomorphizations (4,534,799 samples, 0.86%)</title><rect x="94.6226%" y="101" width="0.8561%" height="15" fill="rgb(251,123,47)"/><text x="94.8726%" y="111.50"></text></g><g><title>exported_symbols (3,776,552 samples, 0.71%)</title><rect x="94.7657%" y="85" width="0.7129%" height="15" fill="rgb(221,13,13)"/><text x="95.0157%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,763,092 samples, 0.71%)</title><rect x="94.7683%" y="69" width="0.7104%" height="15" fill="rgb(238,131,9)"/><text x="95.0183%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (27,022,529 samples, 5.10%)</title><rect x="90.4695%" y="133" width="5.1013%" height="15" fill="rgb(211,50,8)"/><text x="90.7195%" y="143.50">monomo..</text></g><g><title>monomorphization_collector (27,076,619 samples, 5.11%)</title><rect x="90.4688%" y="149" width="5.1115%" height="15" fill="rgb(245,182,24)"/><text x="90.7188%" y="159.50">monomo..</text></g><g><title>assert_symbols_are_distinct (1,361,255 samples, 0.26%)</title><rect x="95.5812%" y="133" width="0.2570%" height="15" fill="rgb(242,14,37)"/><text x="95.8312%" y="143.50"></text></g><g><title>symbol_name (1,279,034 samples, 0.24%)</title><rect x="95.5967%" y="117" width="0.2415%" height="15" fill="rgb(246,228,12)"/><text x="95.8467%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (28,993,810 samples, 5.47%)</title><rect x="90.4630%" y="165" width="5.4734%" height="15" fill="rgb(213,55,15)"/><text x="90.7130%" y="175.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (1,886,581 samples, 0.36%)</title><rect x="95.5803%" y="149" width="0.3561%" height="15" fill="rgb(209,9,3)"/><text x="95.8303%" y="159.50"></text></g><g><title>exported_symbols (29,127,351 samples, 5.50%)</title><rect x="90.4523%" y="181" width="5.4987%" height="15" fill="rgb(230,59,30)"/><text x="90.7023%" y="191.50">exporte..</text></g><g><title>layout_of (533,166 samples, 0.10%)</title><rect x="96.6088%" y="117" width="0.1007%" height="15" fill="rgb(209,121,21)"/><text x="96.8588%" y="127.50"></text></g><g><title>layout_of (744,947 samples, 0.14%)</title><rect x="96.5718%" y="133" width="0.1406%" height="15" fill="rgb(220,109,13)"/><text x="96.8218%" y="143.50"></text></g><g><title>layout_of (935,520 samples, 0.18%)</title><rect x="96.5369%" y="149" width="0.1766%" height="15" fill="rgb(232,18,1)"/><text x="96.7869%" y="159.50"></text></g><g><title>layout_of (1,586,208 samples, 0.30%)</title><rect x="96.4251%" y="165" width="0.2994%" height="15" fill="rgb(215,41,42)"/><text x="96.6751%" y="175.50"></text></g><g><title>needs_drop_raw (637,627 samples, 0.12%)</title><rect x="97.2312%" y="149" width="0.1204%" height="15" fill="rgb(224,123,36)"/><text x="97.4812%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,359,836 samples, 0.63%)</title><rect x="96.7245%" y="165" width="0.6343%" height="15" fill="rgb(240,125,3)"/><text x="96.9745%" y="175.50"></text></g><g><title>optimized_mir (7,390,869 samples, 1.40%)</title><rect x="95.9662%" y="181" width="1.3952%" height="15" fill="rgb(205,98,50)"/><text x="96.2162%" y="191.50"></text></g><g><title>generate_crate_metadata (38,154,548 samples, 7.20%)</title><rect x="90.1719%" y="197" width="7.2028%" height="15" fill="rgb(205,185,37)"/><text x="90.4219%" y="207.50">generate_c..</text></g><g><title>hir_lowering (2,467,657 samples, 0.47%)</title><rect x="97.3747%" y="197" width="0.4658%" height="15" fill="rgb(238,207,15)"/><text x="97.6247%" y="207.50"></text></g><g><title>finish_ongoing_codegen (6,689,170 samples, 1.26%)</title><rect x="97.8449%" y="181" width="1.2628%" height="15" fill="rgb(213,199,42)"/><text x="98.0949%" y="191.50"></text></g><g><title>link_crate (2,219,984 samples, 0.42%)</title><rect x="99.1077%" y="181" width="0.4191%" height="15" fill="rgb(235,201,11)"/><text x="99.3577%" y="191.50"></text></g><g><title>link_binary (2,193,933 samples, 0.41%)</title><rect x="99.1126%" y="165" width="0.4142%" height="15" fill="rgb(207,46,11)"/><text x="99.3626%" y="175.50"></text></g><g><title>link_rlib (1,552,787 samples, 0.29%)</title><rect x="99.2336%" y="149" width="0.2931%" height="15" fill="rgb(241,35,35)"/><text x="99.4836%" y="159.50"></text></g><g><title>link (8,943,825 samples, 1.69%)</title><rect x="97.8405%" y="197" width="1.6884%" height="15" fill="rgb(243,32,47)"/><text x="98.0905%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,461,346 samples, 0.28%)</title><rect x="99.6334%" y="197" width="0.2759%" height="15" fill="rgb(247,202,23)"/><text x="99.8834%" y="207.50"></text></g><g><title>all (529,717,401 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (529,717,401 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>