<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (127,124,266 samples, 8.94%)</title><rect x="0.1092%" y="181" width="8.9390%" height="15" fill="rgb(227,0,7)"/><text x="0.3592%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (1,586,919 samples, 0.11%)</title><rect x="16.0270%" y="85" width="0.1116%" height="15" fill="rgb(217,0,24)"/><text x="16.2770%" y="95.50"></text></g><g><title>needs_drop_raw (3,514,982 samples, 0.25%)</title><rect x="17.4419%" y="69" width="0.2472%" height="15" fill="rgb(221,193,54)"/><text x="17.6919%" y="79.50"></text></g><g><title>is_copy_raw (2,579,395 samples, 0.18%)</title><rect x="17.5077%" y="53" width="0.1814%" height="15" fill="rgb(248,212,6)"/><text x="17.7577%" y="63.50"></text></g><g><title>evaluate_obligation (2,082,961 samples, 0.15%)</title><rect x="17.5426%" y="37" width="0.1465%" height="15" fill="rgb(208,68,35)"/><text x="17.7926%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,899,450 samples, 0.13%)</title><rect x="17.7873%" y="53" width="0.1336%" height="15" fill="rgb(232,128,0)"/><text x="18.0373%" y="63.50"></text></g><g><title>resolve_instance (4,260,419 samples, 0.30%)</title><rect x="17.6892%" y="69" width="0.2996%" height="15" fill="rgb(207,160,47)"/><text x="17.9392%" y="79.50"></text></g><g><title>thir_body (7,089,123 samples, 0.50%)</title><rect x="18.0029%" y="69" width="0.4985%" height="15" fill="rgb(228,23,34)"/><text x="18.2529%" y="79.50"></text></g><g><title>mir_const (45,204,317 samples, 3.18%)</title><rect x="15.3333%" y="117" width="3.1786%" height="15" fill="rgb(218,30,26)"/><text x="15.5833%" y="127.50">mir..</text></g><g><title>unsafety_check_result (38,537,184 samples, 2.71%)</title><rect x="15.8021%" y="101" width="2.7098%" height="15" fill="rgb(220,122,19)"/><text x="16.0521%" y="111.50">un..</text></g><g><title>mir_built (33,751,336 samples, 2.37%)</title><rect x="16.1386%" y="85" width="2.3733%" height="15" fill="rgb(250,228,42)"/><text x="16.3886%" y="95.50">mi..</text></g><g><title>mir_const (2,166,749 samples, 0.15%)</title><rect x="18.6425%" y="101" width="0.1524%" height="15" fill="rgb(240,193,28)"/><text x="18.8925%" y="111.50"></text></g><g><title>unsafety_check_result (1,892,577 samples, 0.13%)</title><rect x="18.6618%" y="85" width="0.1331%" height="15" fill="rgb(216,20,37)"/><text x="18.9118%" y="95.50"></text></g><g><title>mir_built (1,789,966 samples, 0.13%)</title><rect x="18.6690%" y="69" width="0.1259%" height="15" fill="rgb(206,188,39)"/><text x="18.9190%" y="79.50"></text></g><g><title>mir_const_qualif (4,405,228 samples, 0.31%)</title><rect x="18.5119%" y="117" width="0.3098%" height="15" fill="rgb(217,207,13)"/><text x="18.7619%" y="127.50"></text></g><g><title>mir_promoted (56,055,100 samples, 3.94%)</title><rect x="14.8803%" y="133" width="3.9416%" height="15" fill="rgb(231,73,38)"/><text x="15.1303%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (2,364,558 samples, 0.17%)</title><rect x="18.8222%" y="133" width="0.1663%" height="15" fill="rgb(225,20,46)"/><text x="19.0722%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,706,545 samples, 0.19%)</title><rect x="18.9885%" y="133" width="0.1903%" height="15" fill="rgb(210,31,41)"/><text x="19.2385%" y="143.50"></text></g><g><title>normalize_projection_ty (1,691,646 samples, 0.12%)</title><rect x="19.0599%" y="117" width="0.1190%" height="15" fill="rgb(221,200,47)"/><text x="19.3099%" y="127.50"></text></g><g><title>type_op_prove_predicate (10,215,512 samples, 0.72%)</title><rect x="19.1961%" y="133" width="0.7183%" height="15" fill="rgb(226,26,5)"/><text x="19.4461%" y="143.50"></text></g><g><title>MIR_borrow_checking (153,120,167 samples, 10.77%)</title><rect x="9.1498%" y="165" width="10.7669%" height="15" fill="rgb(249,33,26)"/><text x="9.3998%" y="175.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (152,090,929 samples, 10.69%)</title><rect x="9.2222%" y="149" width="10.6945%" height="15" fill="rgb(235,183,28)"/><text x="9.4722%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,722,770 samples, 0.19%)</title><rect x="20.0816%" y="149" width="0.1915%" height="15" fill="rgb(221,5,38)"/><text x="20.3316%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,562,081 samples, 0.18%)</title><rect x="20.3611%" y="149" width="0.1802%" height="15" fill="rgb(247,18,42)"/><text x="20.6111%" y="159.50"></text></g><g><title>misc_checking_1 (6,834,108 samples, 0.48%)</title><rect x="20.0769%" y="165" width="0.4806%" height="15" fill="rgb(241,131,45)"/><text x="20.3269%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,929,010 samples, 0.21%)</title><rect x="20.5576%" y="149" width="0.2060%" height="15" fill="rgb(249,31,29)"/><text x="20.8076%" y="159.50"></text></g><g><title>check_mod_liveness (2,352,372 samples, 0.17%)</title><rect x="20.5981%" y="133" width="0.1654%" height="15" fill="rgb(225,111,53)"/><text x="20.8481%" y="143.50"></text></g><g><title>misc_checking_2 (6,040,071 samples, 0.42%)</title><rect x="20.5574%" y="165" width="0.4247%" height="15" fill="rgb(238,160,17)"/><text x="20.8074%" y="175.50"></text></g><g><title>match_checking (3,108,641 samples, 0.22%)</title><rect x="20.7635%" y="149" width="0.2186%" height="15" fill="rgb(214,148,48)"/><text x="21.0135%" y="159.50"></text></g><g><title>check_match (2,865,380 samples, 0.20%)</title><rect x="20.7806%" y="133" width="0.2015%" height="15" fill="rgb(232,36,49)"/><text x="21.0306%" y="143.50"></text></g><g><title>death_checking (2,265,182 samples, 0.16%)</title><rect x="21.0711%" y="149" width="0.1593%" height="15" fill="rgb(209,103,24)"/><text x="21.3211%" y="159.50"></text></g><g><title>eval_to_allocation_raw (15,042,913 samples, 1.06%)</title><rect x="21.4442%" y="117" width="1.0578%" height="15" fill="rgb(229,88,8)"/><text x="21.6942%" y="127.50"></text></g><g><title>eval_to_allocation_raw (15,023,723 samples, 1.06%)</title><rect x="21.4455%" y="101" width="1.0564%" height="15" fill="rgb(213,181,19)"/><text x="21.6955%" y="111.50"></text></g><g><title>crate_lints (21,099,751 samples, 1.48%)</title><rect x="21.2306%" y="133" width="1.4837%" height="15" fill="rgb(254,191,54)"/><text x="21.4806%" y="143.50"></text></g><g><title>lint_checking (24,082,791 samples, 1.69%)</title><rect x="21.2304%" y="149" width="1.6934%" height="15" fill="rgb(241,83,37)"/><text x="21.4804%" y="159.50"></text></g><g><title>module_lints (2,979,619 samples, 0.21%)</title><rect x="22.7143%" y="133" width="0.2095%" height="15" fill="rgb(233,36,39)"/><text x="22.9643%" y="143.50"></text></g><g><title>lint_mod (2,958,328 samples, 0.21%)</title><rect x="22.7158%" y="117" width="0.2080%" height="15" fill="rgb(226,3,54)"/><text x="22.9658%" y="127.50"></text></g><g><title>privacy_access_levels (2,376,244 samples, 0.17%)</title><rect x="22.9238%" y="149" width="0.1671%" height="15" fill="rgb(245,192,40)"/><text x="23.1738%" y="159.50"></text></g><g><title>privacy_checking_modules (5,350,394 samples, 0.38%)</title><rect x="23.0909%" y="149" width="0.3762%" height="15" fill="rgb(238,167,29)"/><text x="23.3409%" y="159.50"></text></g><g><title>check_mod_privacy (5,334,644 samples, 0.38%)</title><rect x="23.0920%" y="133" width="0.3751%" height="15" fill="rgb(232,182,51)"/><text x="23.3420%" y="143.50"></text></g><g><title>misc_checking_3 (35,422,475 samples, 2.49%)</title><rect x="20.9821%" y="165" width="2.4908%" height="15" fill="rgb(231,60,39)"/><text x="21.2321%" y="175.50">mi..</text></g><g><title>impl_parent (3,235,523 samples, 0.23%)</title><rect x="23.8741%" y="101" width="0.2275%" height="15" fill="rgb(208,69,12)"/><text x="24.1241%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,809,013 samples, 0.13%)</title><rect x="23.9744%" y="85" width="0.1272%" height="15" fill="rgb(235,93,37)"/><text x="24.2244%" y="95.50"></text></g><g><title>impl_trait_ref (6,620,933 samples, 0.47%)</title><rect x="24.1016%" y="101" width="0.4656%" height="15" fill="rgb(213,116,39)"/><text x="24.3516%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,159,060 samples, 0.36%)</title><rect x="24.2044%" y="85" width="0.3628%" height="15" fill="rgb(222,207,29)"/><text x="24.4544%" y="95.50"></text></g><g><title>coherent_trait (16,827,350 samples, 1.18%)</title><rect x="23.5041%" y="133" width="1.1832%" height="15" fill="rgb(206,96,30)"/><text x="23.7541%" y="143.50"></text></g><g><title>specialization_graph_of (16,769,820 samples, 1.18%)</title><rect x="23.5081%" y="117" width="1.1792%" height="15" fill="rgb(218,138,4)"/><text x="23.7581%" y="127.50"></text></g><g><title>coherence_checking (17,205,213 samples, 1.21%)</title><rect x="23.5017%" y="149" width="1.2098%" height="15" fill="rgb(250,191,14)"/><text x="23.7517%" y="159.50"></text></g><g><title>associated_items (1,604,704 samples, 0.11%)</title><rect x="34.3508%" y="101" width="0.1128%" height="15" fill="rgb(239,60,40)"/><text x="34.6008%" y="111.50"></text></g><g><title>dropck_outlives (1,918,248 samples, 0.13%)</title><rect x="34.4848%" y="101" width="0.1349%" height="15" fill="rgb(206,27,48)"/><text x="34.7348%" y="111.50"></text></g><g><title>generics_of (1,682,853 samples, 0.12%)</title><rect x="35.4255%" y="85" width="0.1183%" height="15" fill="rgb(225,35,8)"/><text x="35.6755%" y="95.50"></text></g><g><title>impl_trait_ref (1,762,859 samples, 0.12%)</title><rect x="35.5669%" y="85" width="0.1240%" height="15" fill="rgb(250,213,24)"/><text x="35.8169%" y="95.50"></text></g><g><title>predicates_of (1,642,167 samples, 0.12%)</title><rect x="35.6966%" y="85" width="0.1155%" height="15" fill="rgb(247,123,22)"/><text x="35.9466%" y="95.50"></text></g><g><title>specializes (2,789,442 samples, 0.20%)</title><rect x="35.8121%" y="85" width="0.1961%" height="15" fill="rgb(231,138,38)"/><text x="36.0621%" y="95.50"></text></g><g><title>param_env (1,679,177 samples, 0.12%)</title><rect x="35.8902%" y="69" width="0.1181%" height="15" fill="rgb(231,145,46)"/><text x="36.1402%" y="79.50"></text></g><g><title>evaluate_obligation (20,474,501 samples, 1.44%)</title><rect x="34.6197%" y="101" width="1.4397%" height="15" fill="rgb(251,118,11)"/><text x="34.8697%" y="111.50"></text></g><g><title>generics_of (1,737,370 samples, 0.12%)</title><rect x="36.0950%" y="101" width="0.1222%" height="15" fill="rgb(217,147,25)"/><text x="36.3450%" y="111.50"></text></g><g><title>method_autoderef_steps (2,339,774 samples, 0.16%)</title><rect x="36.3543%" y="101" width="0.1645%" height="15" fill="rgb(247,81,37)"/><text x="36.6043%" y="111.50"></text></g><g><title>typeck (13,737,198 samples, 0.97%)</title><rect x="36.7024%" y="101" width="0.9660%" height="15" fill="rgb(209,12,38)"/><text x="36.9524%" y="111.50"></text></g><g><title>item_bodies_checking (184,358,999 samples, 12.96%)</title><rect x="24.7261%" y="149" width="12.9635%" height="15" fill="rgb(227,1,9)"/><text x="24.9761%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (184,354,949 samples, 12.96%)</title><rect x="24.7264%" y="133" width="12.9632%" height="15" fill="rgb(248,47,43)"/><text x="24.9764%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (183,437,511 samples, 12.90%)</title><rect x="24.7909%" y="117" width="12.8987%" height="15" fill="rgb(221,10,30)"/><text x="25.0409%" y="127.50">typeck</text></g><g><title>evaluate_obligation (1,761,881 samples, 0.12%)</title><rect x="38.5217%" y="101" width="0.1239%" height="15" fill="rgb(210,229,1)"/><text x="38.7717%" y="111.50"></text></g><g><title>item_types_checking (13,782,769 samples, 0.97%)</title><rect x="37.6896%" y="149" width="0.9692%" height="15" fill="rgb(222,148,37)"/><text x="37.9396%" y="159.50"></text></g><g><title>check_mod_item_types (13,757,409 samples, 0.97%)</title><rect x="37.6914%" y="133" width="0.9674%" height="15" fill="rgb(234,67,33)"/><text x="37.9414%" y="143.50"></text></g><g><title>typeck (5,219,702 samples, 0.37%)</title><rect x="38.2918%" y="117" width="0.3670%" height="15" fill="rgb(247,98,35)"/><text x="38.5418%" y="127.50"></text></g><g><title>fn_sig (1,450,049 samples, 0.10%)</title><rect x="38.7754%" y="117" width="0.1020%" height="15" fill="rgb(247,138,52)"/><text x="39.0254%" y="127.50"></text></g><g><title>is_late_bound_map (1,783,296 samples, 0.13%)</title><rect x="38.9305%" y="101" width="0.1254%" height="15" fill="rgb(213,79,30)"/><text x="39.1805%" y="111.50"></text></g><g><title>resolve_lifetimes (1,615,176 samples, 0.11%)</title><rect x="38.9423%" y="85" width="0.1136%" height="15" fill="rgb(246,177,23)"/><text x="39.1923%" y="95.50"></text></g><g><title>generics_of (3,855,588 samples, 0.27%)</title><rect x="38.8774%" y="117" width="0.2711%" height="15" fill="rgb(230,62,27)"/><text x="39.1274%" y="127.50"></text></g><g><title>predicates_of (3,000,721 samples, 0.21%)</title><rect x="39.1736%" y="117" width="0.2110%" height="15" fill="rgb(216,154,8)"/><text x="39.4236%" y="127.50"></text></g><g><title>predicates_defined_on (2,661,026 samples, 0.19%)</title><rect x="39.1975%" y="101" width="0.1871%" height="15" fill="rgb(244,35,45)"/><text x="39.4475%" y="111.50"></text></g><g><title>type_collecting (11,111,522 samples, 0.78%)</title><rect x="38.6595%" y="149" width="0.7813%" height="15" fill="rgb(251,115,12)"/><text x="38.9095%" y="159.50"></text></g><g><title>collect_mod_item_types (11,075,412 samples, 0.78%)</title><rect x="38.6620%" y="133" width="0.7788%" height="15" fill="rgb(240,54,50)"/><text x="38.9120%" y="143.50"></text></g><g><title>evaluate_obligation (1,725,741 samples, 0.12%)</title><rect x="40.1602%" y="117" width="0.1213%" height="15" fill="rgb(233,84,52)"/><text x="40.4102%" y="127.50"></text></g><g><title>region_scope_tree (1,538,460 samples, 0.11%)</title><rect x="40.4237%" y="117" width="0.1082%" height="15" fill="rgb(207,117,47)"/><text x="40.6737%" y="127.50"></text></g><g><title>check_impl_item_well_formed (14,135,865 samples, 0.99%)</title><rect x="39.5391%" y="133" width="0.9940%" height="15" fill="rgb(249,43,39)"/><text x="39.7891%" y="143.50"></text></g><g><title>evaluate_obligation (1,948,500 samples, 0.14%)</title><rect x="41.2804%" y="117" width="0.1370%" height="15" fill="rgb(209,38,44)"/><text x="41.5304%" y="127.50"></text></g><g><title>param_env (1,642,831 samples, 0.12%)</title><rect x="41.4567%" y="117" width="0.1155%" height="15" fill="rgb(236,212,23)"/><text x="41.7067%" y="127.50"></text></g><g><title>check_item_well_formed (16,270,964 samples, 1.14%)</title><rect x="40.5331%" y="133" width="1.1441%" height="15" fill="rgb(242,79,21)"/><text x="40.7831%" y="143.50"></text></g><g><title>analysis (470,472,350 samples, 33.08%)</title><rect x="9.0482%" y="181" width="33.0821%" height="15" fill="rgb(211,96,35)"/><text x="9.2982%" y="191.50">analysis</text></g><g><title>type_check_crate (265,332,402 samples, 18.66%)</title><rect x="23.4729%" y="165" width="18.6573%" height="15" fill="rgb(253,215,40)"/><text x="23.7229%" y="175.50">type_check_crate</text></g><g><title>wf_checking (38,202,243 samples, 2.69%)</title><rect x="39.4440%" y="149" width="2.6863%" height="15" fill="rgb(211,81,21)"/><text x="39.6940%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (6,443,074 samples, 0.45%)</title><rect x="41.6772%" y="133" width="0.4531%" height="15" fill="rgb(208,190,38)"/><text x="41.9272%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (2,150,017 samples, 0.15%)</title><rect x="49.6251%" y="149" width="0.1512%" height="15" fill="rgb(235,213,38)"/><text x="49.8751%" y="159.50"></text></g><g><title>const_caller_location (2,247,827 samples, 0.16%)</title><rect x="49.7763%" y="149" width="0.1581%" height="15" fill="rgb(237,122,38)"/><text x="50.0263%" y="159.50"></text></g><g><title>layout_of (1,763,253 samples, 0.12%)</title><rect x="50.4190%" y="133" width="0.1240%" height="15" fill="rgb(244,218,35)"/><text x="50.6690%" y="143.50"></text></g><g><title>param_env (4,041,186 samples, 0.28%)</title><rect x="50.5430%" y="133" width="0.2842%" height="15" fill="rgb(240,68,47)"/><text x="50.7930%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,476,877 samples, 0.10%)</title><rect x="50.8272%" y="133" width="0.1038%" height="15" fill="rgb(210,16,53)"/><text x="51.0772%" y="143.50"></text></g><g><title>fn_abi_of_instance (14,206,344 samples, 1.00%)</title><rect x="49.9364%" y="149" width="0.9989%" height="15" fill="rgb(235,124,12)"/><text x="50.1864%" y="159.50"></text></g><g><title>layout_of (2,033,085 samples, 0.14%)</title><rect x="51.0032%" y="149" width="0.1430%" height="15" fill="rgb(224,169,11)"/><text x="51.2532%" y="159.50"></text></g><g><title>codegen_module (128,382,799 samples, 9.03%)</title><rect x="42.2906%" y="165" width="9.0275%" height="15" fill="rgb(250,166,2)"/><text x="42.5406%" y="175.50">codegen_module</text></g><g><title>codegen_crate (130,751,752 samples, 9.19%)</title><rect x="42.1307%" y="181" width="9.1940%" height="15" fill="rgb(242,216,29)"/><text x="42.3807%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (455,769,627 samples, 32.05%)</title><rect x="51.3404%" y="165" width="32.0482%" height="15" fill="rgb(230,116,27)"/><text x="51.5904%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (431,812,021 samples, 30.36%)</title><rect x="53.0250%" y="149" width="30.3636%" height="15" fill="rgb(228,99,48)"/><text x="53.2750%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (481,411,147 samples, 33.85%)</title><rect x="51.3247%" y="181" width="33.8513%" height="15" fill="rgb(253,11,6)"/><text x="51.5747%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (25,418,807 samples, 1.79%)</title><rect x="83.3886%" y="165" width="1.7874%" height="15" fill="rgb(247,143,39)"/><text x="83.6386%" y="175.50">L..</text></g><g><title>macro_expand_crate (64,043,702 samples, 4.50%)</title><rect x="85.2681%" y="165" width="4.5033%" height="15" fill="rgb(236,97,10)"/><text x="85.5181%" y="175.50">macro..</text></g><g><title>expand_crate (64,031,462 samples, 4.50%)</title><rect x="85.2689%" y="149" width="4.5025%" height="15" fill="rgb(233,208,19)"/><text x="85.5189%" y="159.50">expan..</text></g><g><title>late_resolve_crate (8,903,099 samples, 0.63%)</title><rect x="89.8343%" y="149" width="0.6260%" height="15" fill="rgb(216,164,2)"/><text x="90.0843%" y="159.50"></text></g><g><title>configure_and_expand (75,983,292 samples, 5.34%)</title><rect x="85.1760%" y="181" width="5.3429%" height="15" fill="rgb(220,129,5)"/><text x="85.4260%" y="191.50">configu..</text></g><g><title>resolve_crate (10,579,256 samples, 0.74%)</title><rect x="89.7750%" y="165" width="0.7439%" height="15" fill="rgb(242,17,10)"/><text x="90.0250%" y="175.50"></text></g><g><title>drop_ast (1,641,356 samples, 0.12%)</title><rect x="90.5189%" y="181" width="0.1154%" height="15" fill="rgb(242,107,0)"/><text x="90.7689%" y="191.50"></text></g><g><title>early_lint_checks (2,632,667 samples, 0.19%)</title><rect x="90.6359%" y="181" width="0.1851%" height="15" fill="rgb(251,28,31)"/><text x="90.8859%" y="191.50"></text></g><g><title>free_global_ctxt (11,451,215 samples, 0.81%)</title><rect x="90.8210%" y="181" width="0.8052%" height="15" fill="rgb(233,223,10)"/><text x="91.0710%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,922,080 samples, 0.14%)</title><rect x="93.3037%" y="85" width="0.1352%" height="15" fill="rgb(215,21,27)"/><text x="93.5537%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,433,482 samples, 0.38%)</title><rect x="93.4389%" y="85" width="0.3821%" height="15" fill="rgb(232,23,21)"/><text x="93.6889%" y="95.50"></text></g><g><title>optimized_mir (13,687,560 samples, 0.96%)</title><rect x="92.9021%" y="101" width="0.9625%" height="15" fill="rgb(244,5,23)"/><text x="93.1521%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,281,335 samples, 0.23%)</title><rect x="93.9650%" y="85" width="0.2307%" height="15" fill="rgb(226,81,46)"/><text x="94.2150%" y="95.50"></text></g><g><title>resolve_instance (6,999,639 samples, 0.49%)</title><rect x="93.8646%" y="101" width="0.4922%" height="15" fill="rgb(247,70,30)"/><text x="94.1146%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (30,199,253 samples, 2.12%)</title><rect x="92.4448%" y="117" width="2.1235%" height="15" fill="rgb(212,68,19)"/><text x="92.6948%" y="127.50">m..</text></g><g><title>vtable_entries (1,473,794 samples, 0.10%)</title><rect x="94.4647%" y="101" width="0.1036%" height="15" fill="rgb(240,187,13)"/><text x="94.7147%" y="111.50"></text></g><g><title>monomorphization_collector (30,491,226 samples, 2.14%)</title><rect x="92.4445%" y="133" width="2.1440%" height="15" fill="rgb(223,113,26)"/><text x="92.6945%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (3,554,606 samples, 0.25%)</title><rect x="94.5889%" y="117" width="0.2499%" height="15" fill="rgb(206,192,2)"/><text x="94.8389%" y="127.50"></text></g><g><title>symbol_name (3,181,122 samples, 0.22%)</title><rect x="94.6151%" y="101" width="0.2237%" height="15" fill="rgb(241,108,4)"/><text x="94.8651%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (35,578,787 samples, 2.50%)</title><rect x="92.4413%" y="149" width="2.5018%" height="15" fill="rgb(247,173,49)"/><text x="92.6913%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (5,041,690 samples, 0.35%)</title><rect x="94.5885%" y="133" width="0.3545%" height="15" fill="rgb(224,114,35)"/><text x="94.8385%" y="143.50"></text></g><g><title>cgu_partitioning (1,482,354 samples, 0.10%)</title><rect x="94.8388%" y="117" width="0.1042%" height="15" fill="rgb(245,159,27)"/><text x="95.0888%" y="127.50"></text></g><g><title>exported_symbols (36,643,648 samples, 2.58%)</title><rect x="92.4304%" y="165" width="2.5767%" height="15" fill="rgb(245,172,44)"/><text x="92.6804%" y="175.50">ex..</text></g><g><title>layout_of (3,249,894 samples, 0.23%)</title><rect x="96.2120%" y="149" width="0.2285%" height="15" fill="rgb(236,23,11)"/><text x="96.4620%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,957,393 samples, 1.26%)</title><rect x="96.4405%" y="149" width="1.2627%" height="15" fill="rgb(205,117,38)"/><text x="96.6905%" y="159.50"></text></g><g><title>optimized_mir (39,103,927 samples, 2.75%)</title><rect x="95.0375%" y="165" width="2.7497%" height="15" fill="rgb(237,72,25)"/><text x="95.2875%" y="175.50">op..</text></g><g><title>generate_crate_metadata (88,033,714 samples, 6.19%)</title><rect x="91.6263%" y="181" width="6.1902%" height="15" fill="rgb(244,70,9)"/><text x="91.8763%" y="191.50">generate..</text></g><g><title>hir_lowering (18,448,116 samples, 1.30%)</title><rect x="97.8165%" y="181" width="1.2972%" height="15" fill="rgb(217,125,39)"/><text x="98.0665%" y="191.50"></text></g><g><title>link_crate (7,240,933 samples, 0.51%)</title><rect x="99.1155%" y="165" width="0.5092%" height="15" fill="rgb(235,36,10)"/><text x="99.3655%" y="175.50"></text></g><g><title>link_binary (7,062,961 samples, 0.50%)</title><rect x="99.1280%" y="149" width="0.4966%" height="15" fill="rgb(251,123,47)"/><text x="99.3780%" y="159.50"></text></g><g><title>link_rlib (5,990,130 samples, 0.42%)</title><rect x="99.2035%" y="133" width="0.4212%" height="15" fill="rgb(221,13,13)"/><text x="99.4535%" y="143.50"></text></g><g><title>link (7,279,553 samples, 0.51%)</title><rect x="99.1137%" y="181" width="0.5119%" height="15" fill="rgb(238,131,9)"/><text x="99.3637%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,259,072 samples, 0.23%)</title><rect x="99.6780%" y="181" width="0.2292%" height="15" fill="rgb(211,50,8)"/><text x="99.9280%" y="191.50"></text></g><g><title>all (1,422,136,945 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,422,136,945 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>