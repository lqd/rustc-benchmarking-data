<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (41,523,103 samples, 11.15%)</title><rect x="0.2049%" y="181" width="11.1544%" height="15" fill="rgb(227,0,7)"/><text x="0.4549%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (969,883 samples, 0.26%)</title><rect x="14.5139%" y="69" width="0.2605%" height="15" fill="rgb(217,0,24)"/><text x="14.7639%" y="79.50"></text></g><g><title>is_copy_raw (740,821 samples, 0.20%)</title><rect x="14.5754%" y="53" width="0.1990%" height="15" fill="rgb(221,193,54)"/><text x="14.8254%" y="63.50"></text></g><g><title>evaluate_obligation (640,239 samples, 0.17%)</title><rect x="14.6024%" y="37" width="0.1720%" height="15" fill="rgb(248,212,6)"/><text x="14.8524%" y="47.50"></text></g><g><title>resolve_instance (401,806 samples, 0.11%)</title><rect x="14.7744%" y="69" width="0.1079%" height="15" fill="rgb(208,68,35)"/><text x="15.0244%" y="79.50"></text></g><g><title>thir_body (677,309 samples, 0.18%)</title><rect x="14.8855%" y="69" width="0.1819%" height="15" fill="rgb(232,128,0)"/><text x="15.1355%" y="79.50"></text></g><g><title>mir_const (5,132,496 samples, 1.38%)</title><rect x="13.6909%" y="117" width="1.3787%" height="15" fill="rgb(207,160,47)"/><text x="13.9409%" y="127.50"></text></g><g><title>unsafety_check_result (4,489,770 samples, 1.21%)</title><rect x="13.8636%" y="101" width="1.2061%" height="15" fill="rgb(228,23,34)"/><text x="14.1136%" y="111.50"></text></g><g><title>mir_built (3,906,914 samples, 1.05%)</title><rect x="14.0202%" y="85" width="1.0495%" height="15" fill="rgb(218,30,26)"/><text x="14.2702%" y="95.50"></text></g><g><title>mir_promoted (5,780,371 samples, 1.55%)</title><rect x="13.5414%" y="133" width="1.5528%" height="15" fill="rgb(220,122,19)"/><text x="13.7914%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,558,897 samples, 0.42%)</title><rect x="15.2600%" y="133" width="0.4188%" height="15" fill="rgb(250,228,42)"/><text x="15.5100%" y="143.50"></text></g><g><title>MIR_borrow_checking (15,630,906 samples, 4.20%)</title><rect x="11.4842%" y="165" width="4.1989%" height="15" fill="rgb(240,193,28)"/><text x="11.7342%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (15,578,316 samples, 4.18%)</title><rect x="11.4983%" y="149" width="4.1848%" height="15" fill="rgb(216,20,37)"/><text x="11.7483%" y="159.50">mir_b..</text></g><g><title>codegen_fn_attrs (583,007 samples, 0.16%)</title><rect x="15.8929%" y="133" width="0.1566%" height="15" fill="rgb(206,188,39)"/><text x="16.1429%" y="143.50"></text></g><g><title>check_mod_attrs (930,540 samples, 0.25%)</title><rect x="15.7996%" y="149" width="0.2500%" height="15" fill="rgb(217,207,13)"/><text x="16.0496%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (641,487 samples, 0.17%)</title><rect x="16.1273%" y="149" width="0.1723%" height="15" fill="rgb(231,73,38)"/><text x="16.3773%" y="159.50"></text></g><g><title>misc_checking_1 (1,975,731 samples, 0.53%)</title><rect x="15.7893%" y="165" width="0.5307%" height="15" fill="rgb(225,20,46)"/><text x="16.0393%" y="175.50"></text></g><g><title>misc_checking_2 (730,388 samples, 0.20%)</title><rect x="16.3201%" y="165" width="0.1962%" height="15" fill="rgb(210,31,41)"/><text x="16.5701%" y="175.50"></text></g><g><title>match_checking (409,354 samples, 0.11%)</title><rect x="16.4063%" y="149" width="0.1100%" height="15" fill="rgb(221,200,47)"/><text x="16.6563%" y="159.50"></text></g><g><title>check_match (393,644 samples, 0.11%)</title><rect x="16.4105%" y="133" width="0.1057%" height="15" fill="rgb(226,26,5)"/><text x="16.6605%" y="143.50"></text></g><g><title>crate_lints (1,933,271 samples, 0.52%)</title><rect x="16.6282%" y="133" width="0.5193%" height="15" fill="rgb(249,33,26)"/><text x="16.8782%" y="143.50"></text></g><g><title>type_of (1,042,281 samples, 0.28%)</title><rect x="16.8676%" y="117" width="0.2800%" height="15" fill="rgb(235,183,28)"/><text x="17.1176%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (811,488 samples, 0.22%)</title><rect x="16.9296%" y="101" width="0.2180%" height="15" fill="rgb(221,5,38)"/><text x="17.1796%" y="111.50"></text></g><g><title>lint_checking (2,371,616 samples, 0.64%)</title><rect x="16.6279%" y="149" width="0.6371%" height="15" fill="rgb(247,18,42)"/><text x="16.8779%" y="159.50"></text></g><g><title>module_lints (436,925 samples, 0.12%)</title><rect x="17.1476%" y="133" width="0.1174%" height="15" fill="rgb(241,131,45)"/><text x="17.3976%" y="143.50"></text></g><g><title>lint_mod (432,895 samples, 0.12%)</title><rect x="17.1487%" y="117" width="0.1163%" height="15" fill="rgb(249,31,29)"/><text x="17.3987%" y="127.50"></text></g><g><title>privacy_checking_modules (585,096 samples, 0.16%)</title><rect x="17.3081%" y="149" width="0.1572%" height="15" fill="rgb(225,111,53)"/><text x="17.5581%" y="159.50"></text></g><g><title>check_mod_privacy (582,236 samples, 0.16%)</title><rect x="17.3088%" y="133" width="0.1564%" height="15" fill="rgb(238,160,17)"/><text x="17.5588%" y="143.50"></text></g><g><title>misc_checking_3 (3,549,038 samples, 0.95%)</title><rect x="16.5163%" y="165" width="0.9534%" height="15" fill="rgb(214,148,48)"/><text x="16.7663%" y="175.50"></text></g><g><title>adt_destructor (672,377 samples, 0.18%)</title><rect x="17.5068%" y="117" width="0.1806%" height="15" fill="rgb(232,36,49)"/><text x="17.7568%" y="127.50"></text></g><g><title>coherent_trait (666,957 samples, 0.18%)</title><rect x="17.5082%" y="101" width="0.1792%" height="15" fill="rgb(209,103,24)"/><text x="17.7582%" y="111.50"></text></g><g><title>specialization_graph_of (662,337 samples, 0.18%)</title><rect x="17.5095%" y="85" width="0.1779%" height="15" fill="rgb(229,88,8)"/><text x="17.7595%" y="95.50"></text></g><g><title>is_copy_raw (465,715 samples, 0.13%)</title><rect x="17.6874%" y="117" width="0.1251%" height="15" fill="rgb(213,181,19)"/><text x="17.9374%" y="127.50"></text></g><g><title>evaluate_obligation (398,974 samples, 0.11%)</title><rect x="17.7053%" y="101" width="0.1072%" height="15" fill="rgb(254,191,54)"/><text x="17.9553%" y="111.50"></text></g><g><title>impl_parent (3,487,733 samples, 0.94%)</title><rect x="19.5527%" y="101" width="0.9369%" height="15" fill="rgb(241,83,37)"/><text x="19.8027%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,908,593 samples, 0.51%)</title><rect x="19.9769%" y="85" width="0.5127%" height="15" fill="rgb(233,36,39)"/><text x="20.2269%" y="95.50"></text></g><g><title>impl_trait_ref (9,258,262 samples, 2.49%)</title><rect x="20.4897%" y="101" width="2.4870%" height="15" fill="rgb(226,3,54)"/><text x="20.7397%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,641,840 samples, 2.05%)</title><rect x="20.9239%" y="85" width="2.0528%" height="15" fill="rgb(245,192,40)"/><text x="21.1739%" y="95.50">m..</text></g><g><title>coherent_trait (21,615,180 samples, 5.81%)</title><rect x="17.4881%" y="133" width="5.8065%" height="15" fill="rgb(238,167,29)"/><text x="17.7381%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (20,288,396 samples, 5.45%)</title><rect x="17.8445%" y="117" width="5.4501%" height="15" fill="rgb(232,182,51)"/><text x="18.0945%" y="127.50">special..</text></g><g><title>trait_impls_of (1,179,523 samples, 0.32%)</title><rect x="22.9777%" y="101" width="0.3169%" height="15" fill="rgb(231,60,39)"/><text x="23.2277%" y="111.50"></text></g><g><title>coherence_checking (21,715,452 samples, 5.83%)</title><rect x="17.4808%" y="149" width="5.8334%" height="15" fill="rgb(208,69,12)"/><text x="17.7308%" y="159.50">coheren..</text></g><g><title>associated_item (395,943 samples, 0.11%)</title><rect x="27.6939%" y="85" width="0.1064%" height="15" fill="rgb(235,93,37)"/><text x="27.9439%" y="95.50"></text></g><g><title>associated_items (547,728 samples, 0.15%)</title><rect x="27.6585%" y="101" width="0.1471%" height="15" fill="rgb(213,116,39)"/><text x="27.9085%" y="111.50"></text></g><g><title>dropck_outlives (506,629 samples, 0.14%)</title><rect x="27.8181%" y="101" width="0.1361%" height="15" fill="rgb(222,207,29)"/><text x="28.0681%" y="111.50"></text></g><g><title>evaluate_obligation (1,565,608 samples, 0.42%)</title><rect x="27.9542%" y="101" width="0.4206%" height="15" fill="rgb(206,96,30)"/><text x="28.2042%" y="111.50"></text></g><g><title>generics_of (909,249 samples, 0.24%)</title><rect x="28.4196%" y="101" width="0.2443%" height="15" fill="rgb(218,138,4)"/><text x="28.6696%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (728,386 samples, 0.20%)</title><rect x="28.4682%" y="85" width="0.1957%" height="15" fill="rgb(250,191,14)"/><text x="28.7182%" y="95.50"></text></g><g><title>typeck (1,103,022 samples, 0.30%)</title><rect x="29.0243%" y="101" width="0.2963%" height="15" fill="rgb(239,60,40)"/><text x="29.2743%" y="111.50"></text></g><g><title>item_bodies_checking (22,363,339 samples, 6.01%)</title><rect x="23.3274%" y="149" width="6.0075%" height="15" fill="rgb(206,27,48)"/><text x="23.5774%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (22,360,159 samples, 6.01%)</title><rect x="23.3283%" y="133" width="6.0066%" height="15" fill="rgb(225,35,8)"/><text x="23.5783%" y="143.50">typeck_i..</text></g><g><title>typeck (22,325,099 samples, 6.00%)</title><rect x="23.3377%" y="117" width="5.9972%" height="15" fill="rgb(250,213,24)"/><text x="23.5877%" y="127.50">typeck</text></g><g><title>item_types_checking (470,795 samples, 0.13%)</title><rect x="29.3349%" y="149" width="0.1265%" height="15" fill="rgb(247,123,22)"/><text x="29.5849%" y="159.50"></text></g><g><title>check_mod_item_types (466,945 samples, 0.13%)</title><rect x="29.3359%" y="133" width="0.1254%" height="15" fill="rgb(231,138,38)"/><text x="29.5859%" y="143.50"></text></g><g><title>fn_sig (594,996 samples, 0.16%)</title><rect x="29.5675%" y="117" width="0.1598%" height="15" fill="rgb(231,145,46)"/><text x="29.8175%" y="127.50"></text></g><g><title>is_late_bound_map (585,296 samples, 0.16%)</title><rect x="29.7741%" y="101" width="0.1572%" height="15" fill="rgb(251,118,11)"/><text x="30.0241%" y="111.50"></text></g><g><title>resolve_lifetimes (555,516 samples, 0.15%)</title><rect x="29.7821%" y="85" width="0.1492%" height="15" fill="rgb(217,147,25)"/><text x="30.0321%" y="95.50"></text></g><g><title>generics_of (877,510 samples, 0.24%)</title><rect x="29.7273%" y="117" width="0.2357%" height="15" fill="rgb(247,81,37)"/><text x="29.9773%" y="127.50"></text></g><g><title>explicit_predicates_of (620,006 samples, 0.17%)</title><rect x="30.0325%" y="85" width="0.1666%" height="15" fill="rgb(209,12,38)"/><text x="30.2825%" y="95.50"></text></g><g><title>predicates_of (1,149,830 samples, 0.31%)</title><rect x="29.9836%" y="117" width="0.3089%" height="15" fill="rgb(227,1,9)"/><text x="30.2336%" y="127.50"></text></g><g><title>predicates_defined_on (1,072,230 samples, 0.29%)</title><rect x="30.0044%" y="101" width="0.2880%" height="15" fill="rgb(248,47,43)"/><text x="30.2544%" y="111.50"></text></g><g><title>type_collecting (3,335,145 samples, 0.90%)</title><rect x="29.4618%" y="149" width="0.8959%" height="15" fill="rgb(221,10,30)"/><text x="29.7118%" y="159.50"></text></g><g><title>collect_mod_item_types (3,318,345 samples, 0.89%)</title><rect x="29.4663%" y="133" width="0.8914%" height="15" fill="rgb(210,229,1)"/><text x="29.7163%" y="143.50"></text></g><g><title>adt_sized_constraint (476,225 samples, 0.13%)</title><rect x="30.9462%" y="101" width="0.1279%" height="15" fill="rgb(222,148,37)"/><text x="31.1962%" y="111.50"></text></g><g><title>evaluate_obligation (872,360 samples, 0.23%)</title><rect x="30.8592%" y="117" width="0.2343%" height="15" fill="rgb(234,67,33)"/><text x="31.1092%" y="127.50"></text></g><g><title>object_safety_violations (811,389 samples, 0.22%)</title><rect x="31.1584%" y="117" width="0.2180%" height="15" fill="rgb(247,98,35)"/><text x="31.4084%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,316,206 samples, 1.16%)</title><rect x="30.4103%" y="133" width="1.1595%" height="15" fill="rgb(247,138,52)"/><text x="30.6603%" y="143.50"></text></g><g><title>region_scope_tree (429,495 samples, 0.12%)</title><rect x="31.4543%" y="117" width="0.1154%" height="15" fill="rgb(213,79,30)"/><text x="31.7043%" y="127.50"></text></g><g><title>analysis (77,626,559 samples, 20.85%)</title><rect x="11.3592%" y="181" width="20.8528%" height="15" fill="rgb(246,177,23)"/><text x="11.6092%" y="191.50">analysis</text></g><g><title>type_check_crate (54,879,926 samples, 14.74%)</title><rect x="17.4696%" y="165" width="14.7424%" height="15" fill="rgb(230,62,27)"/><text x="17.7196%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,900,383 samples, 1.85%)</title><rect x="30.3584%" y="149" width="1.8537%" height="15" fill="rgb(216,154,8)"/><text x="30.6084%" y="159.50">w..</text></g><g><title>check_item_well_formed (2,391,142 samples, 0.64%)</title><rect x="31.5697%" y="133" width="0.6423%" height="15" fill="rgb(244,35,45)"/><text x="31.8197%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (500,037 samples, 0.13%)</title><rect x="39.8011%" y="149" width="0.1343%" height="15" fill="rgb(251,115,12)"/><text x="40.0511%" y="159.50"></text></g><g><title>codegen_fn_attrs (488,926 samples, 0.13%)</title><rect x="40.4472%" y="133" width="0.1313%" height="15" fill="rgb(240,54,50)"/><text x="40.6972%" y="143.50"></text></g><g><title>layout_of (599,186 samples, 0.16%)</title><rect x="40.7430%" y="117" width="0.1610%" height="15" fill="rgb(233,84,52)"/><text x="40.9930%" y="127.50"></text></g><g><title>layout_of (1,375,455 samples, 0.37%)</title><rect x="40.5958%" y="133" width="0.3695%" height="15" fill="rgb(207,117,47)"/><text x="40.8458%" y="143.50"></text></g><g><title>predicates_of (690,869 samples, 0.19%)</title><rect x="41.3132%" y="117" width="0.1856%" height="15" fill="rgb(249,43,39)"/><text x="41.5632%" y="127.50"></text></g><g><title>predicates_defined_on (498,386 samples, 0.13%)</title><rect x="41.3649%" y="101" width="0.1339%" height="15" fill="rgb(209,38,44)"/><text x="41.6149%" y="111.50"></text></g><g><title>param_env (1,992,592 samples, 0.54%)</title><rect x="40.9653%" y="133" width="0.5353%" height="15" fill="rgb(236,212,23)"/><text x="41.2153%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (669,717 samples, 0.18%)</title><rect x="41.5005%" y="133" width="0.1799%" height="15" fill="rgb(242,79,21)"/><text x="41.7505%" y="143.50"></text></g><g><title>normalize_projection_ty (551,896 samples, 0.15%)</title><rect x="41.5322%" y="117" width="0.1483%" height="15" fill="rgb(211,96,35)"/><text x="41.7822%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,142,620 samples, 1.65%)</title><rect x="40.0335%" y="149" width="1.6501%" height="15" fill="rgb(253,215,40)"/><text x="40.2835%" y="159.50"></text></g><g><title>layout_of (514,454 samples, 0.14%)</title><rect x="41.9859%" y="101" width="0.1382%" height="15" fill="rgb(211,81,21)"/><text x="42.2359%" y="111.50"></text></g><g><title>layout_of (643,516 samples, 0.17%)</title><rect x="41.9600%" y="117" width="0.1729%" height="15" fill="rgb(208,190,38)"/><text x="42.2100%" y="127.50"></text></g><g><title>layout_of (971,459 samples, 0.26%)</title><rect x="41.8932%" y="133" width="0.2610%" height="15" fill="rgb(235,213,38)"/><text x="42.1432%" y="143.50"></text></g><g><title>layout_of (1,575,308 samples, 0.42%)</title><rect x="41.7563%" y="149" width="0.4232%" height="15" fill="rgb(237,122,38)"/><text x="42.0063%" y="159.50"></text></g><g><title>symbol_name (412,634 samples, 0.11%)</title><rect x="42.1849%" y="149" width="0.1108%" height="15" fill="rgb(244,218,35)"/><text x="42.4349%" y="159.50"></text></g><g><title>codegen_module (35,662,371 samples, 9.58%)</title><rect x="32.7522%" y="165" width="9.5800%" height="15" fill="rgb(240,68,47)"/><text x="33.0022%" y="175.50">codegen_module</text></g><g><title>codegen_crate (37,733,673 samples, 10.14%)</title><rect x="32.2153%" y="181" width="10.1364%" height="15" fill="rgb(210,16,53)"/><text x="32.4653%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (146,822,816 samples, 39.44%)</title><rect x="42.4110%" y="165" width="39.4410%" height="15" fill="rgb(235,124,12)"/><text x="42.6610%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (138,641,311 samples, 37.24%)</title><rect x="44.6088%" y="149" width="37.2432%" height="15" fill="rgb(224,169,11)"/><text x="44.8588%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (155,893,436 samples, 41.88%)</title><rect x="42.3517%" y="181" width="41.8777%" height="15" fill="rgb(250,166,2)"/><text x="42.6017%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,849,906 samples, 2.38%)</title><rect x="81.8520%" y="165" width="2.3774%" height="15" fill="rgb(242,216,29)"/><text x="82.1020%" y="175.50">LL..</text></g><g><title>metadata_register_crate (2,639,568 samples, 0.71%)</title><rect x="88.5929%" y="133" width="0.7091%" height="15" fill="rgb(230,116,27)"/><text x="88.8429%" y="143.50"></text></g><g><title>metadata_register_crate (956,290 samples, 0.26%)</title><rect x="89.0450%" y="117" width="0.2569%" height="15" fill="rgb(228,99,48)"/><text x="89.2950%" y="127.50"></text></g><g><title>macro_expand_crate (18,406,297 samples, 4.94%)</title><rect x="84.3933%" y="165" width="4.9445%" height="15" fill="rgb(253,11,6)"/><text x="84.6433%" y="175.50">macro_..</text></g><g><title>expand_crate (18,378,917 samples, 4.94%)</title><rect x="84.4006%" y="149" width="4.9371%" height="15" fill="rgb(247,143,39)"/><text x="84.6506%" y="159.50">expand..</text></g><g><title>late_resolve_crate (3,075,853 samples, 0.83%)</title><rect x="89.4409%" y="149" width="0.8263%" height="15" fill="rgb(236,97,10)"/><text x="89.6909%" y="159.50"></text></g><g><title>configure_and_expand (22,651,392 samples, 6.08%)</title><rect x="84.2294%" y="181" width="6.0848%" height="15" fill="rgb(233,208,19)"/><text x="84.4794%" y="191.50">configur..</text></g><g><title>resolve_crate (3,488,297 samples, 0.94%)</title><rect x="89.3772%" y="165" width="0.9371%" height="15" fill="rgb(216,164,2)"/><text x="89.6272%" y="175.50"></text></g><g><title>early_lint_checks (552,356 samples, 0.15%)</title><rect x="90.3910%" y="181" width="0.1484%" height="15" fill="rgb(220,129,5)"/><text x="90.6410%" y="191.50"></text></g><g><title>free_global_ctxt (5,067,424 samples, 1.36%)</title><rect x="90.5394%" y="181" width="1.3613%" height="15" fill="rgb(242,17,10)"/><text x="90.7894%" y="191.50"></text></g><g><title>item_attrs (853,158 samples, 0.23%)</title><rect x="92.4320%" y="85" width="0.2292%" height="15" fill="rgb(242,107,0)"/><text x="92.6820%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (833,648 samples, 0.22%)</title><rect x="92.4372%" y="69" width="0.2239%" height="15" fill="rgb(251,28,31)"/><text x="92.6872%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,171,852 samples, 0.31%)</title><rect x="92.3982%" y="101" width="0.3148%" height="15" fill="rgb(233,223,10)"/><text x="92.6482%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (758,717 samples, 0.20%)</title><rect x="93.2768%" y="85" width="0.2038%" height="15" fill="rgb(215,21,27)"/><text x="93.5268%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,098,521 samples, 0.30%)</title><rect x="93.4806%" y="85" width="0.2951%" height="15" fill="rgb(232,23,21)"/><text x="93.7306%" y="95.50"></text></g><g><title>eval_to_const_value_raw (493,095 samples, 0.13%)</title><rect x="93.8263%" y="69" width="0.1325%" height="15" fill="rgb(244,5,23)"/><text x="94.0763%" y="79.50"></text></g><g><title>eval_to_const_value_raw (486,235 samples, 0.13%)</title><rect x="93.8281%" y="53" width="0.1306%" height="15" fill="rgb(226,81,46)"/><text x="94.0781%" y="63.50"></text></g><g><title>eval_to_allocation_raw (474,035 samples, 0.13%)</title><rect x="93.8314%" y="37" width="0.1273%" height="15" fill="rgb(247,70,30)"/><text x="94.0814%" y="47.50"></text></g><g><title>optimized_mir (4,134,772 samples, 1.11%)</title><rect x="92.8498%" y="101" width="1.1107%" height="15" fill="rgb(212,68,19)"/><text x="93.0998%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (526,656 samples, 0.14%)</title><rect x="93.8191%" y="85" width="0.1415%" height="15" fill="rgb(240,187,13)"/><text x="94.0691%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (859,547 samples, 0.23%)</title><rect x="94.0657%" y="85" width="0.2309%" height="15" fill="rgb(223,113,26)"/><text x="94.3157%" y="95.50"></text></g><g><title>impl_parent (484,303 samples, 0.13%)</title><rect x="94.7006%" y="69" width="0.1301%" height="15" fill="rgb(206,192,2)"/><text x="94.9506%" y="79.50"></text></g><g><title>specialization_graph_of (2,985,232 samples, 0.80%)</title><rect x="94.3905%" y="85" width="0.8019%" height="15" fill="rgb(241,108,4)"/><text x="94.6405%" y="95.50"></text></g><g><title>impl_trait_ref (1,346,366 samples, 0.36%)</title><rect x="94.8307%" y="69" width="0.3617%" height="15" fill="rgb(247,173,49)"/><text x="95.0807%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,142,593 samples, 0.31%)</title><rect x="94.8855%" y="53" width="0.3069%" height="15" fill="rgb(224,114,35)"/><text x="95.1355%" y="63.50"></text></g><g><title>resolve_instance (4,760,755 samples, 1.28%)</title><rect x="93.9605%" y="101" width="1.2789%" height="15" fill="rgb(245,159,27)"/><text x="94.2105%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (12,224,541 samples, 3.28%)</title><rect x="92.1593%" y="117" width="3.2839%" height="15" fill="rgb(245,172,44)"/><text x="92.4093%" y="127.50">mon..</text></g><g><title>vtable_entries (443,345 samples, 0.12%)</title><rect x="95.3240%" y="101" width="0.1191%" height="15" fill="rgb(236,23,11)"/><text x="95.5740%" y="111.50"></text></g><g><title>monomorphization_collector (12,263,511 samples, 3.29%)</title><rect x="92.1585%" y="133" width="3.2943%" height="15" fill="rgb(205,117,38)"/><text x="92.4085%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (879,409 samples, 0.24%)</title><rect x="95.4542%" y="117" width="0.2362%" height="15" fill="rgb(237,72,25)"/><text x="95.7042%" y="127.50"></text></g><g><title>symbol_name (807,878 samples, 0.22%)</title><rect x="95.4734%" y="101" width="0.2170%" height="15" fill="rgb(244,70,9)"/><text x="95.7234%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (13,638,035 samples, 3.66%)</title><rect x="92.1461%" y="149" width="3.6636%" height="15" fill="rgb(217,125,39)"/><text x="92.3961%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (1,328,274 samples, 0.36%)</title><rect x="95.4529%" y="133" width="0.3568%" height="15" fill="rgb(235,36,10)"/><text x="95.7029%" y="143.50"></text></g><g><title>cgu_partitioning (444,015 samples, 0.12%)</title><rect x="95.6904%" y="117" width="0.1193%" height="15" fill="rgb(251,123,47)"/><text x="95.9404%" y="127.50"></text></g><g><title>exported_symbols (13,744,797 samples, 3.69%)</title><rect x="92.1343%" y="165" width="3.6923%" height="15" fill="rgb(221,13,13)"/><text x="92.3843%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,345,036 samples, 0.36%)</title><rect x="96.1601%" y="149" width="0.3613%" height="15" fill="rgb(238,131,9)"/><text x="96.4101%" y="159.50"></text></g><g><title>optimized_mir (2,565,789 samples, 0.69%)</title><rect x="95.8383%" y="165" width="0.6892%" height="15" fill="rgb(211,50,8)"/><text x="96.0883%" y="175.50"></text></g><g><title>generate_crate_metadata (17,257,544 samples, 4.64%)</title><rect x="91.9007%" y="181" width="4.6359%" height="15" fill="rgb(245,182,24)"/><text x="92.1507%" y="191.50">gener..</text></g><g><title>hir_lowering (4,027,843 samples, 1.08%)</title><rect x="96.5366%" y="181" width="1.0820%" height="15" fill="rgb(242,14,37)"/><text x="96.7866%" y="191.50"></text></g><g><title>finish_ongoing_codegen (2,600,858 samples, 0.70%)</title><rect x="97.6227%" y="165" width="0.6987%" height="15" fill="rgb(246,228,12)"/><text x="97.8727%" y="175.50"></text></g><g><title>link_crate (1,539,807 samples, 0.41%)</title><rect x="98.3214%" y="165" width="0.4136%" height="15" fill="rgb(213,55,15)"/><text x="98.5714%" y="175.50"></text></g><g><title>link_binary (1,521,026 samples, 0.41%)</title><rect x="98.3264%" y="149" width="0.4086%" height="15" fill="rgb(209,9,3)"/><text x="98.5764%" y="159.50"></text></g><g><title>link_rlib (991,591 samples, 0.27%)</title><rect x="98.4687%" y="133" width="0.2664%" height="15" fill="rgb(230,59,30)"/><text x="98.7187%" y="143.50"></text></g><g><title>link (4,165,765 samples, 1.12%)</title><rect x="97.6186%" y="181" width="1.1191%" height="15" fill="rgb(209,121,21)"/><text x="97.8686%" y="191.50"></text></g><g><title>parse_crate (2,060,342 samples, 0.55%)</title><rect x="98.7376%" y="181" width="0.5535%" height="15" fill="rgb(220,109,13)"/><text x="98.9876%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,860,299 samples, 0.50%)</title><rect x="99.3878%" y="181" width="0.4997%" height="15" fill="rgb(232,18,1)"/><text x="99.6378%" y="191.50"></text></g><g><title>all (372,259,057 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (372,259,057 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>