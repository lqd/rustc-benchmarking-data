<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,198,863 samples, 7.01%)</title><rect x="1.3872%" y="197" width="7.0141%" height="15" fill="rgb(227,0,7)"/><text x="1.6372%" y="207.50">LLVM_pass..</text></g><g><title>mir_promoted (231,172 samples, 0.39%)</title><rect x="11.7918%" y="133" width="0.3862%" height="15" fill="rgb(217,0,24)"/><text x="12.0418%" y="143.50"></text></g><g><title>mir_const_qualif_const_arg (189,011 samples, 0.32%)</title><rect x="11.8622%" y="117" width="0.3157%" height="15" fill="rgb(221,193,54)"/><text x="12.1122%" y="127.50"></text></g><g><title>mir_const (147,471 samples, 0.25%)</title><rect x="11.9316%" y="101" width="0.2463%" height="15" fill="rgb(248,212,6)"/><text x="12.1816%" y="111.50"></text></g><g><title>unsafety_check_result_for_const_arg (87,191 samples, 0.15%)</title><rect x="12.0323%" y="85" width="0.1456%" height="15" fill="rgb(208,68,35)"/><text x="12.2823%" y="95.50"></text></g><g><title>mir_borrowck_const_arg (571,145 samples, 0.95%)</title><rect x="11.2252%" y="149" width="0.9541%" height="15" fill="rgb(232,128,0)"/><text x="11.4752%" y="159.50"></text></g><g><title>param_env (88,610 samples, 0.15%)</title><rect x="12.5724%" y="117" width="0.1480%" height="15" fill="rgb(207,160,47)"/><text x="12.8224%" y="127.50"></text></g><g><title>item_attrs (96,781 samples, 0.16%)</title><rect x="12.8813%" y="85" width="0.1617%" height="15" fill="rgb(228,23,34)"/><text x="13.1313%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (93,601 samples, 0.16%)</title><rect x="12.8866%" y="69" width="0.1564%" height="15" fill="rgb(218,30,26)"/><text x="13.1366%" y="79.50"></text></g><g><title>codegen_fn_attrs (135,342 samples, 0.23%)</title><rect x="12.8229%" y="101" width="0.2261%" height="15" fill="rgb(220,122,19)"/><text x="13.0729%" y="111.50"></text></g><g><title>is_copy_raw (70,030 samples, 0.12%)</title><rect x="13.7407%" y="85" width="0.1170%" height="15" fill="rgb(250,228,42)"/><text x="13.9907%" y="95.50"></text></g><g><title>evaluate_obligation (60,300 samples, 0.10%)</title><rect x="13.7570%" y="69" width="0.1007%" height="15" fill="rgb(240,193,28)"/><text x="14.0070%" y="79.50"></text></g><g><title>needs_drop_raw (65,491 samples, 0.11%)</title><rect x="13.8577%" y="85" width="0.1094%" height="15" fill="rgb(216,20,37)"/><text x="14.1077%" y="95.50"></text></g><g><title>is_copy_raw (61,121 samples, 0.10%)</title><rect x="13.8650%" y="69" width="0.1021%" height="15" fill="rgb(206,188,39)"/><text x="14.1150%" y="79.50"></text></g><g><title>resolve_instance (197,083 samples, 0.33%)</title><rect x="13.9671%" y="85" width="0.3292%" height="15" fill="rgb(217,207,13)"/><text x="14.2171%" y="95.50"></text></g><g><title>thir_body (185,222 samples, 0.31%)</title><rect x="14.3000%" y="85" width="0.3094%" height="15" fill="rgb(231,73,38)"/><text x="14.5500%" y="95.50"></text></g><g><title>mir_const (1,367,563 samples, 2.28%)</title><rect x="12.3273%" y="133" width="2.2845%" height="15" fill="rgb(225,20,46)"/><text x="12.5773%" y="143.50">m..</text></g><g><title>unsafety_check_result (1,132,221 samples, 1.89%)</title><rect x="12.7204%" y="117" width="1.8913%" height="15" fill="rgb(210,31,41)"/><text x="12.9704%" y="127.50">u..</text></g><g><title>mir_built (935,489 samples, 1.56%)</title><rect x="13.0490%" y="101" width="1.5627%" height="15" fill="rgb(221,200,47)"/><text x="13.2990%" y="111.50"></text></g><g><title>mir_promoted (1,458,746 samples, 2.44%)</title><rect x="12.1793%" y="149" width="2.4368%" height="15" fill="rgb(226,26,5)"/><text x="12.4293%" y="159.50">mi..</text></g><g><title>type_op_normalize_fn_sig (109,711 samples, 0.18%)</title><rect x="14.6161%" y="149" width="0.1833%" height="15" fill="rgb(249,33,26)"/><text x="14.8661%" y="159.50"></text></g><g><title>normalize_projection_ty (63,610 samples, 0.11%)</title><rect x="14.6931%" y="133" width="0.1063%" height="15" fill="rgb(235,183,28)"/><text x="14.9431%" y="143.50"></text></g><g><title>MIR_borrow_checking (3,944,971 samples, 6.59%)</title><rect x="8.7310%" y="181" width="6.5900%" height="15" fill="rgb(221,5,38)"/><text x="8.9810%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (3,933,891 samples, 6.57%)</title><rect x="8.7495%" y="165" width="6.5714%" height="15" fill="rgb(247,18,42)"/><text x="8.9995%" y="175.50">mir_borro..</text></g><g><title>type_op_prove_predicate (312,281 samples, 0.52%)</title><rect x="14.7993%" y="149" width="0.5217%" height="15" fill="rgb(241,131,45)"/><text x="15.0493%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (91,971 samples, 0.15%)</title><rect x="15.3365%" y="165" width="0.1536%" height="15" fill="rgb(249,31,29)"/><text x="15.5865%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (90,361 samples, 0.15%)</title><rect x="15.3392%" y="149" width="0.1509%" height="15" fill="rgb(225,111,53)"/><text x="15.5892%" y="159.50"></text></g><g><title>MIR_effect_checking (102,201 samples, 0.17%)</title><rect x="15.3210%" y="181" width="0.1707%" height="15" fill="rgb(238,160,17)"/><text x="15.5710%" y="191.50"></text></g><g><title>hir_module_items (142,041 samples, 0.24%)</title><rect x="15.4917%" y="181" width="0.2373%" height="15" fill="rgb(214,148,48)"/><text x="15.7417%" y="191.50"></text></g><g><title>get_lang_items (71,240 samples, 0.12%)</title><rect x="16.1316%" y="133" width="0.1190%" height="15" fill="rgb(232,36,49)"/><text x="16.3816%" y="143.50"></text></g><g><title>should_inherit_track_caller (127,341 samples, 0.21%)</title><rect x="16.2507%" y="133" width="0.2127%" height="15" fill="rgb(209,103,24)"/><text x="16.5007%" y="143.50"></text></g><g><title>codegen_fn_attrs (326,233 samples, 0.54%)</title><rect x="15.9771%" y="149" width="0.5450%" height="15" fill="rgb(229,88,8)"/><text x="16.2271%" y="159.50"></text></g><g><title>check_mod_attrs (447,284 samples, 0.75%)</title><rect x="15.7753%" y="165" width="0.7472%" height="15" fill="rgb(213,181,19)"/><text x="16.0253%" y="175.50"></text></g><g><title>lookup_stability (84,301 samples, 0.14%)</title><rect x="16.8723%" y="149" width="0.1408%" height="15" fill="rgb(254,191,54)"/><text x="17.1223%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (218,393 samples, 0.36%)</title><rect x="16.6750%" y="165" width="0.3648%" height="15" fill="rgb(241,83,37)"/><text x="16.9250%" y="175.50"></text></g><g><title>misc_checking_1 (821,658 samples, 1.37%)</title><rect x="15.7296%" y="181" width="1.3726%" height="15" fill="rgb(233,36,39)"/><text x="15.9796%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (102,671 samples, 0.17%)</title><rect x="17.1042%" y="165" width="0.1715%" height="15" fill="rgb(226,3,54)"/><text x="17.3542%" y="175.50"></text></g><g><title>check_mod_liveness (79,711 samples, 0.13%)</title><rect x="17.1426%" y="149" width="0.1332%" height="15" fill="rgb(245,192,40)"/><text x="17.3926%" y="159.50"></text></g><g><title>misc_checking_2 (182,931 samples, 0.31%)</title><rect x="17.1021%" y="181" width="0.3056%" height="15" fill="rgb(238,167,29)"/><text x="17.3521%" y="191.50"></text></g><g><title>match_checking (79,020 samples, 0.13%)</title><rect x="17.2757%" y="165" width="0.1320%" height="15" fill="rgb(232,182,51)"/><text x="17.5257%" y="175.50"></text></g><g><title>check_match (74,550 samples, 0.12%)</title><rect x="17.2832%" y="149" width="0.1245%" height="15" fill="rgb(231,60,39)"/><text x="17.5332%" y="159.50"></text></g><g><title>death_checking (98,611 samples, 0.16%)</title><rect x="17.4923%" y="165" width="0.1647%" height="15" fill="rgb(208,69,12)"/><text x="17.7423%" y="175.50"></text></g><g><title>crate_lints (114,641 samples, 0.19%)</title><rect x="17.6593%" y="149" width="0.1915%" height="15" fill="rgb(235,93,37)"/><text x="17.9093%" y="159.50"></text></g><g><title>lint_checking (189,422 samples, 0.32%)</title><rect x="17.6571%" y="165" width="0.3164%" height="15" fill="rgb(213,116,39)"/><text x="17.9071%" y="175.50"></text></g><g><title>module_lints (73,431 samples, 0.12%)</title><rect x="17.8508%" y="149" width="0.1227%" height="15" fill="rgb(222,207,29)"/><text x="18.1008%" y="159.50"></text></g><g><title>lint_mod (72,081 samples, 0.12%)</title><rect x="17.8531%" y="133" width="0.1204%" height="15" fill="rgb(206,96,30)"/><text x="18.1031%" y="143.50"></text></g><g><title>privacy_checking_modules (143,521 samples, 0.24%)</title><rect x="18.0712%" y="165" width="0.2397%" height="15" fill="rgb(218,138,4)"/><text x="18.3212%" y="175.50"></text></g><g><title>check_mod_privacy (142,291 samples, 0.24%)</title><rect x="18.0732%" y="149" width="0.2377%" height="15" fill="rgb(250,191,14)"/><text x="18.3232%" y="159.50"></text></g><g><title>misc_checking_3 (547,945 samples, 0.92%)</title><rect x="17.4077%" y="181" width="0.9153%" height="15" fill="rgb(239,60,40)"/><text x="17.6577%" y="191.50"></text></g><g><title>impl_parent (61,361 samples, 0.10%)</title><rect x="18.7762%" y="117" width="0.1025%" height="15" fill="rgb(206,27,48)"/><text x="19.0262%" y="127.50"></text></g><g><title>impl_trait_ref (372,475 samples, 0.62%)</title><rect x="18.8787%" y="117" width="0.6222%" height="15" fill="rgb(225,35,8)"/><text x="19.1287%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (341,525 samples, 0.57%)</title><rect x="18.9304%" y="101" width="0.5705%" height="15" fill="rgb(250,213,24)"/><text x="19.1804%" y="111.50"></text></g><g><title>coherent_trait (702,258 samples, 1.17%)</title><rect x="18.4090%" y="149" width="1.1731%" height="15" fill="rgb(247,123,22)"/><text x="18.6590%" y="159.50"></text></g><g><title>specialization_graph_of (690,827 samples, 1.15%)</title><rect x="18.4281%" y="133" width="1.1540%" height="15" fill="rgb(231,138,38)"/><text x="18.6781%" y="143.50"></text></g><g><title>coherence_checking (771,138 samples, 1.29%)</title><rect x="18.3777%" y="165" width="1.2882%" height="15" fill="rgb(231,145,46)"/><text x="18.6277%" y="175.50"></text></g><g><title>associated_item (285,143 samples, 0.48%)</title><rect x="29.2588%" y="101" width="0.4763%" height="15" fill="rgb(251,118,11)"/><text x="29.5088%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (192,872 samples, 0.32%)</title><rect x="29.4129%" y="85" width="0.3222%" height="15" fill="rgb(217,147,25)"/><text x="29.6629%" y="95.50"></text></g><g><title>associated_items (450,236 samples, 0.75%)</title><rect x="29.0114%" y="117" width="0.7521%" height="15" fill="rgb(247,81,37)"/><text x="29.2614%" y="127.50"></text></g><g><title>generics_of (537,447 samples, 0.90%)</title><rect x="32.6022%" y="101" width="0.8978%" height="15" fill="rgb(209,12,38)"/><text x="32.8522%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (447,607 samples, 0.75%)</title><rect x="32.7523%" y="85" width="0.7477%" height="15" fill="rgb(227,1,9)"/><text x="33.0023%" y="95.50"></text></g><g><title>impl_trait_ref (778,124 samples, 1.30%)</title><rect x="33.5706%" y="101" width="1.2998%" height="15" fill="rgb(248,47,43)"/><text x="33.8206%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (685,184 samples, 1.14%)</title><rect x="33.7259%" y="85" width="1.1446%" height="15" fill="rgb(221,10,30)"/><text x="33.9759%" y="95.50"></text></g><g><title>predicates_of (161,582 samples, 0.27%)</title><rect x="34.9235%" y="101" width="0.2699%" height="15" fill="rgb(210,229,1)"/><text x="35.1735%" y="111.50"></text></g><g><title>predicates_defined_on (93,022 samples, 0.16%)</title><rect x="35.0381%" y="85" width="0.1554%" height="15" fill="rgb(222,148,37)"/><text x="35.2881%" y="95.50"></text></g><g><title>specializes (445,665 samples, 0.74%)</title><rect x="35.1934%" y="101" width="0.7445%" height="15" fill="rgb(234,67,33)"/><text x="35.4434%" y="111.50"></text></g><g><title>param_env (294,724 samples, 0.49%)</title><rect x="35.4456%" y="85" width="0.4923%" height="15" fill="rgb(247,98,35)"/><text x="35.6956%" y="95.50"></text></g><g><title>def_span (147,092 samples, 0.25%)</title><rect x="35.6922%" y="69" width="0.2457%" height="15" fill="rgb(247,138,52)"/><text x="35.9422%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (135,362 samples, 0.23%)</title><rect x="35.7118%" y="53" width="0.2261%" height="15" fill="rgb(213,79,30)"/><text x="35.9618%" y="63.50"></text></g><g><title>trait_impls_of (209,902 samples, 0.35%)</title><rect x="35.9606%" y="101" width="0.3506%" height="15" fill="rgb(246,177,23)"/><text x="36.2106%" y="111.50"></text></g><g><title>implementations_of_trait (67,220 samples, 0.11%)</title><rect x="36.1990%" y="85" width="0.1123%" height="15" fill="rgb(230,62,27)"/><text x="36.4490%" y="95.50"></text></g><g><title>evaluate_obligation (3,897,837 samples, 6.51%)</title><rect x="29.8193%" y="117" width="6.5112%" height="15" fill="rgb(216,154,8)"/><text x="30.0693%" y="127.50">evaluate_..</text></g><g><title>fn_sig (96,410 samples, 0.16%)</title><rect x="36.3505%" y="117" width="0.1611%" height="15" fill="rgb(244,35,45)"/><text x="36.6005%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (84,450 samples, 0.14%)</title><rect x="36.3705%" y="101" width="0.1411%" height="15" fill="rgb(251,115,12)"/><text x="36.6205%" y="111.50"></text></g><g><title>generics_of (526,584 samples, 0.88%)</title><rect x="36.5116%" y="117" width="0.8796%" height="15" fill="rgb(240,54,50)"/><text x="36.7616%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (399,834 samples, 0.67%)</title><rect x="36.7233%" y="101" width="0.6679%" height="15" fill="rgb(233,84,52)"/><text x="36.9733%" y="111.50"></text></g><g><title>impl_trait_ref (652,127 samples, 1.09%)</title><rect x="37.4177%" y="117" width="1.0894%" height="15" fill="rgb(207,117,47)"/><text x="37.6677%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (552,196 samples, 0.92%)</title><rect x="37.5846%" y="101" width="0.9224%" height="15" fill="rgb(249,43,39)"/><text x="37.8346%" y="111.50"></text></g><g><title>item_attrs (152,901 samples, 0.26%)</title><rect x="38.5165%" y="117" width="0.2554%" height="15" fill="rgb(209,38,44)"/><text x="38.7665%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (149,501 samples, 0.25%)</title><rect x="38.5222%" y="101" width="0.2497%" height="15" fill="rgb(236,212,23)"/><text x="38.7722%" y="111.50"></text></g><g><title>method_autoderef_steps (315,453 samples, 0.53%)</title><rect x="38.8155%" y="117" width="0.5270%" height="15" fill="rgb(242,79,21)"/><text x="39.0655%" y="127.50"></text></g><g><title>evaluate_obligation (165,681 samples, 0.28%)</title><rect x="39.0657%" y="101" width="0.2768%" height="15" fill="rgb(211,96,35)"/><text x="39.3157%" y="111.50"></text></g><g><title>associated_item (355,082 samples, 0.59%)</title><rect x="42.9290%" y="69" width="0.5932%" height="15" fill="rgb(253,215,40)"/><text x="43.1790%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (264,651 samples, 0.44%)</title><rect x="43.0801%" y="53" width="0.4421%" height="15" fill="rgb(211,81,21)"/><text x="43.3301%" y="63.50"></text></g><g><title>associated_items (496,625 samples, 0.83%)</title><rect x="42.7219%" y="85" width="0.8296%" height="15" fill="rgb(208,190,38)"/><text x="42.9719%" y="95.50"></text></g><g><title>evaluate_obligation (473,535 samples, 0.79%)</title><rect x="43.6513%" y="85" width="0.7910%" height="15" fill="rgb(235,213,38)"/><text x="43.9013%" y="95.50"></text></g><g><title>trait_impls_of (201,393 samples, 0.34%)</title><rect x="44.1059%" y="69" width="0.3364%" height="15" fill="rgb(237,122,38)"/><text x="44.3559%" y="79.50"></text></g><g><title>implementations_of_trait (66,900 samples, 0.11%)</title><rect x="44.3306%" y="53" width="0.1118%" height="15" fill="rgb(244,218,35)"/><text x="44.5806%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (60,020 samples, 0.10%)</title><rect x="44.3421%" y="37" width="0.1003%" height="15" fill="rgb(240,68,47)"/><text x="44.5921%" y="47.50"></text></g><g><title>associated_item (121,211 samples, 0.20%)</title><rect x="44.6010%" y="53" width="0.2025%" height="15" fill="rgb(210,16,53)"/><text x="44.8510%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (120,001 samples, 0.20%)</title><rect x="44.6030%" y="37" width="0.2005%" height="15" fill="rgb(235,124,12)"/><text x="44.8530%" y="47.50"></text></g><g><title>impl_item_implementor_ids (127,541 samples, 0.21%)</title><rect x="44.5924%" y="85" width="0.2131%" height="15" fill="rgb(224,169,11)"/><text x="44.8424%" y="95.50"></text></g><g><title>associated_items (125,201 samples, 0.21%)</title><rect x="44.5963%" y="69" width="0.2091%" height="15" fill="rgb(250,166,2)"/><text x="44.8463%" y="79.50"></text></g><g><title>evaluate_obligation (115,701 samples, 0.19%)</title><rect x="45.1352%" y="69" width="0.1933%" height="15" fill="rgb(242,216,29)"/><text x="45.3852%" y="79.50"></text></g><g><title>method_autoderef_steps (235,982 samples, 0.39%)</title><rect x="44.9971%" y="85" width="0.3942%" height="15" fill="rgb(230,116,27)"/><text x="45.2471%" y="95.50"></text></g><g><title>predicates_of (92,640 samples, 0.15%)</title><rect x="45.4026%" y="85" width="0.1548%" height="15" fill="rgb(228,99,48)"/><text x="45.6526%" y="95.50"></text></g><g><title>opt_const_param_of (3,814,338 samples, 6.37%)</title><rect x="39.3425%" y="117" width="6.3717%" height="15" fill="rgb(253,11,6)"/><text x="39.5925%" y="127.50">opt_cons..</text></g><g><title>typeck (3,799,438 samples, 6.35%)</title><rect x="39.3674%" y="101" width="6.3468%" height="15" fill="rgb(247,143,39)"/><text x="39.6174%" y="111.50">typeck</text></g><g><title>metadata_decode_entry_explicit_predicates_of (64,421 samples, 0.11%)</title><rect x="46.0117%" y="69" width="0.1076%" height="15" fill="rgb(236,97,10)"/><text x="46.2617%" y="79.50"></text></g><g><title>explicit_predicates_of (85,621 samples, 0.14%)</title><rect x="45.9771%" y="85" width="0.1430%" height="15" fill="rgb(233,208,19)"/><text x="46.2271%" y="95.50"></text></g><g><title>predicates_of (261,362 samples, 0.44%)</title><rect x="45.7264%" y="117" width="0.4366%" height="15" fill="rgb(216,164,2)"/><text x="45.9764%" y="127.50"></text></g><g><title>predicates_defined_on (181,921 samples, 0.30%)</title><rect x="45.8592%" y="101" width="0.3039%" height="15" fill="rgb(220,129,5)"/><text x="46.1092%" y="111.50"></text></g><g><title>specializes (81,561 samples, 0.14%)</title><rect x="46.1630%" y="117" width="0.1362%" height="15" fill="rgb(242,17,10)"/><text x="46.4130%" y="127.50"></text></g><g><title>typeck_const_arg (174,472 samples, 0.29%)</title><rect x="46.3642%" y="117" width="0.2915%" height="15" fill="rgb(242,107,0)"/><text x="46.6142%" y="127.50"></text></g><g><title>item_bodies_checking (16,138,763 samples, 26.96%)</title><rect x="19.7105%" y="165" width="26.9593%" height="15" fill="rgb(251,28,31)"/><text x="19.9605%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,135,803 samples, 26.95%)</title><rect x="19.7154%" y="149" width="26.9544%" height="15" fill="rgb(233,223,10)"/><text x="19.9654%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (16,119,543 samples, 26.93%)</title><rect x="19.7426%" y="133" width="26.9272%" height="15" fill="rgb(215,21,27)"/><text x="19.9926%" y="143.50">typeck</text></g><g><title>item_types_checking (561,176 samples, 0.94%)</title><rect x="46.6698%" y="165" width="0.9374%" height="15" fill="rgb(232,23,21)"/><text x="46.9198%" y="175.50"></text></g><g><title>check_mod_item_types (556,796 samples, 0.93%)</title><rect x="46.6771%" y="149" width="0.9301%" height="15" fill="rgb(244,5,23)"/><text x="46.9271%" y="159.50"></text></g><g><title>is_late_bound_map (95,752 samples, 0.16%)</title><rect x="48.0662%" y="117" width="0.1600%" height="15" fill="rgb(226,81,46)"/><text x="48.3162%" y="127.50"></text></g><g><title>resolve_lifetimes (79,982 samples, 0.13%)</title><rect x="48.0926%" y="101" width="0.1336%" height="15" fill="rgb(247,70,30)"/><text x="48.3426%" y="111.50"></text></g><g><title>named_region_map (134,591 samples, 0.22%)</title><rect x="48.2262%" y="117" width="0.2248%" height="15" fill="rgb(212,68,19)"/><text x="48.4762%" y="127.50"></text></g><g><title>resolve_lifetimes (124,311 samples, 0.21%)</title><rect x="48.2434%" y="101" width="0.2077%" height="15" fill="rgb(240,187,13)"/><text x="48.4934%" y="111.50"></text></g><g><title>generics_of (328,563 samples, 0.55%)</title><rect x="47.9257%" y="133" width="0.5489%" height="15" fill="rgb(223,113,26)"/><text x="48.1757%" y="143.50"></text></g><g><title>trait_explicit_predicates_and_bounds (78,901 samples, 0.13%)</title><rect x="49.2078%" y="85" width="0.1318%" height="15" fill="rgb(206,192,2)"/><text x="49.4578%" y="95.50"></text></g><g><title>explicit_predicates_of (450,794 samples, 0.75%)</title><rect x="48.5882%" y="101" width="0.7530%" height="15" fill="rgb(241,108,4)"/><text x="48.8382%" y="111.50"></text></g><g><title>predicates_of (652,566 samples, 1.09%)</title><rect x="48.5081%" y="133" width="1.0901%" height="15" fill="rgb(247,173,49)"/><text x="48.7581%" y="143.50"></text></g><g><title>predicates_defined_on (634,526 samples, 1.06%)</title><rect x="48.5382%" y="117" width="1.0600%" height="15" fill="rgb(224,114,35)"/><text x="48.7882%" y="127.50"></text></g><g><title>inferred_outlives_of (153,802 samples, 0.26%)</title><rect x="49.3412%" y="101" width="0.2569%" height="15" fill="rgb(245,159,27)"/><text x="49.5912%" y="111.50"></text></g><g><title>inferred_outlives_crate (135,642 samples, 0.23%)</title><rect x="49.3716%" y="85" width="0.2266%" height="15" fill="rgb(245,172,44)"/><text x="49.6216%" y="95.50"></text></g><g><title>type_collecting (1,384,345 samples, 2.31%)</title><rect x="47.6089%" y="165" width="2.3125%" height="15" fill="rgb(236,23,11)"/><text x="47.8589%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,372,934 samples, 2.29%)</title><rect x="47.6279%" y="149" width="2.2934%" height="15" fill="rgb(205,117,38)"/><text x="47.8779%" y="159.50">c..</text></g><g><title>type_of (150,742 samples, 0.25%)</title><rect x="49.6696%" y="133" width="0.2518%" height="15" fill="rgb(237,72,25)"/><text x="49.9196%" y="143.50"></text></g><g><title>evaluate_obligation (161,462 samples, 0.27%)</title><rect x="50.6944%" y="133" width="0.2697%" height="15" fill="rgb(244,70,9)"/><text x="50.9444%" y="143.50"></text></g><g><title>implied_outlives_bounds (83,961 samples, 0.14%)</title><rect x="50.9641%" y="133" width="0.1403%" height="15" fill="rgb(217,125,39)"/><text x="51.2141%" y="143.50"></text></g><g><title>param_env (71,221 samples, 0.12%)</title><rect x="51.1043%" y="133" width="0.1190%" height="15" fill="rgb(235,36,10)"/><text x="51.3543%" y="143.50"></text></g><g><title>check_impl_item_well_formed (813,479 samples, 1.36%)</title><rect x="50.0431%" y="149" width="1.3589%" height="15" fill="rgb(251,123,47)"/><text x="50.2931%" y="159.50"></text></g><g><title>region_scope_tree (106,972 samples, 0.18%)</title><rect x="51.2233%" y="133" width="0.1787%" height="15" fill="rgb(221,13,13)"/><text x="51.4733%" y="143.50"></text></g><g><title>evaluate_obligation (143,721 samples, 0.24%)</title><rect x="52.7481%" y="133" width="0.2401%" height="15" fill="rgb(238,131,9)"/><text x="52.9981%" y="143.50"></text></g><g><title>implied_outlives_bounds (73,900 samples, 0.12%)</title><rect x="52.9936%" y="133" width="0.1234%" height="15" fill="rgb(211,50,8)"/><text x="53.2436%" y="143.50"></text></g><g><title>param_env (236,793 samples, 0.40%)</title><rect x="53.1171%" y="133" width="0.3956%" height="15" fill="rgb(245,182,24)"/><text x="53.3671%" y="143.50"></text></g><g><title>check_item_well_formed (1,411,634 samples, 2.36%)</title><rect x="51.4020%" y="149" width="2.3581%" height="15" fill="rgb(242,14,37)"/><text x="51.6520%" y="159.50">c..</text></g><g><title>evaluate_obligation (185,552 samples, 0.31%)</title><rect x="54.1524%" y="133" width="0.3100%" height="15" fill="rgb(246,228,12)"/><text x="54.4024%" y="143.50"></text></g><g><title>implied_outlives_bounds (66,721 samples, 0.11%)</title><rect x="54.4623%" y="133" width="0.1115%" height="15" fill="rgb(213,55,15)"/><text x="54.7123%" y="143.50"></text></g><g><title>analysis (27,701,121 samples, 46.27%)</title><rect x="8.4013%" y="197" width="46.2739%" height="15" fill="rgb(209,9,3)"/><text x="8.6513%" y="207.50">analysis</text></g><g><title>type_check_crate (21,761,622 samples, 36.35%)</title><rect x="18.3230%" y="181" width="36.3521%" height="15" fill="rgb(230,59,30)"/><text x="18.5730%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,844,849 samples, 4.75%)</title><rect x="49.9229%" y="165" width="4.7522%" height="15" fill="rgb(209,121,21)"/><text x="50.1729%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (547,806 samples, 0.92%)</title><rect x="53.7601%" y="149" width="0.9151%" height="15" fill="rgb(220,109,13)"/><text x="54.0101%" y="159.50"></text></g><g><title>codegen_module (289,303 samples, 0.48%)</title><rect x="55.6910%" y="181" width="0.4833%" height="15" fill="rgb(232,18,1)"/><text x="55.9410%" y="191.50"></text></g><g><title>codegen_crate (901,300 samples, 1.51%)</title><rect x="54.6944%" y="197" width="1.5056%" height="15" fill="rgb(215,41,42)"/><text x="54.9444%" y="207.50"></text></g><g><title>LLVM_module_codegen (3,646,337 samples, 6.09%)</title><rect x="56.3188%" y="181" width="6.0911%" height="15" fill="rgb(224,123,36)"/><text x="56.5688%" y="191.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (3,538,436 samples, 5.91%)</title><rect x="56.4991%" y="165" width="5.9109%" height="15" fill="rgb(240,125,3)"/><text x="56.7491%" y="175.50">LLVM_mod..</text></g><g><title>codegen_module_optimize (4,006,041 samples, 6.69%)</title><rect x="56.2000%" y="197" width="6.6920%" height="15" fill="rgb(205,98,50)"/><text x="56.4500%" y="207.50">codegen_m..</text></g><g><title>LLVM_module_optimize (288,603 samples, 0.48%)</title><rect x="62.4099%" y="181" width="0.4821%" height="15" fill="rgb(205,185,37)"/><text x="62.6599%" y="191.50"></text></g><g><title>AST_validation (139,411 samples, 0.23%)</title><rect x="63.2576%" y="181" width="0.2329%" height="15" fill="rgb(238,207,15)"/><text x="63.5076%" y="191.50"></text></g><g><title>crate_injection (76,561 samples, 0.13%)</title><rect x="63.5409%" y="181" width="0.1279%" height="15" fill="rgb(213,199,42)"/><text x="63.7909%" y="191.50"></text></g><g><title>macro_expand_crate (8,563,308 samples, 14.30%)</title><rect x="63.6688%" y="181" width="14.3048%" height="15" fill="rgb(235,201,11)"/><text x="63.9188%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (8,538,998 samples, 14.26%)</title><rect x="63.7094%" y="165" width="14.2641%" height="15" fill="rgb(207,46,11)"/><text x="63.9594%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (262,853 samples, 0.44%)</title><rect x="77.5345%" y="149" width="0.4391%" height="15" fill="rgb(241,35,35)"/><text x="77.7845%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (124,781 samples, 0.21%)</title><rect x="77.9824%" y="181" width="0.2084%" height="15" fill="rgb(243,32,47)"/><text x="78.2324%" y="191.50"></text></g><g><title>finalize_macro_resolutions (203,672 samples, 0.34%)</title><rect x="78.2514%" y="165" width="0.3402%" height="15" fill="rgb(247,202,23)"/><text x="78.5014%" y="175.50"></text></g><g><title>late_resolve_crate (1,216,982 samples, 2.03%)</title><rect x="78.5916%" y="165" width="2.0329%" height="15" fill="rgb(219,102,11)"/><text x="78.8416%" y="175.50">l..</text></g><g><title>configure_and_expand (10,682,099 samples, 17.84%)</title><rect x="62.8920%" y="197" width="17.8441%" height="15" fill="rgb(243,110,44)"/><text x="63.1420%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,523,676 samples, 2.55%)</title><rect x="78.1909%" y="181" width="2.5453%" height="15" fill="rgb(222,74,54)"/><text x="78.4409%" y="191.50">re..</text></g><g><title>drop_ast (89,421 samples, 0.15%)</title><rect x="80.7361%" y="197" width="0.1494%" height="15" fill="rgb(216,99,12)"/><text x="80.9861%" y="207.50"></text></g><g><title>early_lint_checks (176,642 samples, 0.30%)</title><rect x="80.9267%" y="197" width="0.2951%" height="15" fill="rgb(226,22,26)"/><text x="81.1767%" y="207.50"></text></g><g><title>free_global_ctxt (3,013,161 samples, 5.03%)</title><rect x="81.2218%" y="197" width="5.0334%" height="15" fill="rgb(217,163,10)"/><text x="81.4718%" y="207.50">free_g..</text></g><g><title>crate_hash (63,300 samples, 0.11%)</title><rect x="86.8742%" y="181" width="0.1057%" height="15" fill="rgb(213,25,53)"/><text x="87.1242%" y="191.50"></text></g><g><title>exported_symbols (89,191 samples, 0.15%)</title><rect x="87.0050%" y="181" width="0.1490%" height="15" fill="rgb(252,105,26)"/><text x="87.2550%" y="191.50"></text></g><g><title>adt_sized_constraint (72,441 samples, 0.12%)</title><rect x="88.2450%" y="133" width="0.1210%" height="15" fill="rgb(220,39,43)"/><text x="88.4950%" y="143.50"></text></g><g><title>adt_def (69,311 samples, 0.12%)</title><rect x="88.2502%" y="117" width="0.1158%" height="15" fill="rgb(229,68,48)"/><text x="88.5002%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (68,821 samples, 0.11%)</title><rect x="88.2511%" y="101" width="0.1150%" height="15" fill="rgb(252,8,32)"/><text x="88.5011%" y="111.50"></text></g><g><title>item_attrs (63,421 samples, 0.11%)</title><rect x="88.2601%" y="85" width="0.1059%" height="15" fill="rgb(223,20,43)"/><text x="88.5101%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (62,971 samples, 0.11%)</title><rect x="88.2608%" y="69" width="0.1052%" height="15" fill="rgb(229,81,49)"/><text x="88.5108%" y="79.50"></text></g><g><title>layout_of (216,531 samples, 0.36%)</title><rect x="88.0230%" y="165" width="0.3617%" height="15" fill="rgb(236,28,36)"/><text x="88.2730%" y="175.50"></text></g><g><title>layout_of (87,881 samples, 0.15%)</title><rect x="88.2379%" y="149" width="0.1468%" height="15" fill="rgb(249,185,26)"/><text x="88.4879%" y="159.50"></text></g><g><title>optimized_mir (1,161,992 samples, 1.94%)</title><rect x="87.2758%" y="181" width="1.9411%" height="15" fill="rgb(249,174,33)"/><text x="87.5258%" y="191.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (498,166 samples, 0.83%)</title><rect x="88.3847%" y="165" width="0.8322%" height="15" fill="rgb(233,201,37)"/><text x="88.6347%" y="175.50"></text></g><g><title>generate_crate_metadata (1,788,928 samples, 2.99%)</title><rect x="86.2552%" y="197" width="2.9884%" height="15" fill="rgb(221,78,26)"/><text x="86.5052%" y="207.50">gen..</text></g><g><title>hir_lowering (1,234,242 samples, 2.06%)</title><rect x="89.2435%" y="197" width="2.0618%" height="15" fill="rgb(250,127,30)"/><text x="89.4935%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (450,985 samples, 0.75%)</title><rect x="91.3460%" y="181" width="0.7534%" height="15" fill="rgb(230,49,44)"/><text x="91.5960%" y="191.50"></text></g><g><title>link_crate (1,126,792 samples, 1.88%)</title><rect x="92.0994%" y="181" width="1.8823%" height="15" fill="rgb(229,67,23)"/><text x="92.3494%" y="191.50">l..</text></g><g><title>link_binary (1,110,401 samples, 1.85%)</title><rect x="92.1268%" y="165" width="1.8549%" height="15" fill="rgb(249,83,47)"/><text x="92.3768%" y="175.50">l..</text></g><g><title>link_rlib (695,217 samples, 1.16%)</title><rect x="92.8203%" y="149" width="1.1613%" height="15" fill="rgb(215,43,3)"/><text x="93.0703%" y="159.50"></text></g><g><title>link (1,614,757 samples, 2.70%)</title><rect x="91.3053%" y="197" width="2.6974%" height="15" fill="rgb(238,154,13)"/><text x="91.5553%" y="207.50">li..</text></g><g><title>parse_crate (1,758,367 samples, 2.94%)</title><rect x="94.0027%" y="197" width="2.9373%" height="15" fill="rgb(219,56,2)"/><text x="94.2527%" y="207.50">pa..</text></g><g><title>prepare_outputs (354,083 samples, 0.59%)</title><rect x="96.9573%" y="197" width="0.5915%" height="15" fill="rgb(233,0,4)"/><text x="97.2073%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,008,060 samples, 1.68%)</title><rect x="97.5488%" y="197" width="1.6839%" height="15" fill="rgb(235,30,7)"/><text x="97.7988%" y="207.50"></text></g><g><title>setup_global_ctxt (148,152 samples, 0.25%)</title><rect x="99.2362%" y="197" width="0.2475%" height="15" fill="rgb(250,79,13)"/><text x="99.4862%" y="207.50"></text></g><g><title>all (59,863,379 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (59,863,379 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (309,113 samples, 0.52%)</title><rect x="99.4836%" y="197" width="0.5164%" height="15" fill="rgb(235,168,5)"/><text x="99.7336%" y="207.50"></text></g></svg></svg>