<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,466,037 samples, 5.24%)</title><rect x="1.0490%" y="261" width="5.2438%" height="15" fill="rgb(227,0,7)"/><text x="1.2990%" y="271.50">LLVM_p..</text></g><g><title>param_env (85,182 samples, 0.13%)</title><rect x="10.1868%" y="181" width="0.1289%" height="15" fill="rgb(217,0,24)"/><text x="10.4368%" y="191.50"></text></g><g><title>item_attrs (73,601 samples, 0.11%)</title><rect x="10.5259%" y="149" width="0.1114%" height="15" fill="rgb(221,193,54)"/><text x="10.7759%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (70,461 samples, 0.11%)</title><rect x="10.5307%" y="133" width="0.1066%" height="15" fill="rgb(248,212,6)"/><text x="10.7807%" y="143.50"></text></g><g><title>codegen_fn_attrs (114,271 samples, 0.17%)</title><rect x="10.4798%" y="165" width="0.1729%" height="15" fill="rgb(208,68,35)"/><text x="10.7298%" y="175.50"></text></g><g><title>adt_drop_tys (82,240 samples, 0.12%)</title><rect x="11.5251%" y="117" width="0.1244%" height="15" fill="rgb(232,128,0)"/><text x="11.7751%" y="127.50"></text></g><g><title>is_copy_raw (105,172 samples, 0.16%)</title><rect x="11.6495%" y="117" width="0.1591%" height="15" fill="rgb(207,160,47)"/><text x="11.8995%" y="127.50"></text></g><g><title>evaluate_obligation (86,722 samples, 0.13%)</title><rect x="11.6774%" y="101" width="0.1312%" height="15" fill="rgb(228,23,34)"/><text x="11.9274%" y="111.50"></text></g><g><title>param_env (89,230 samples, 0.13%)</title><rect x="11.8086%" y="117" width="0.1350%" height="15" fill="rgb(218,30,26)"/><text x="12.0586%" y="127.50"></text></g><g><title>adt_drop_tys (315,272 samples, 0.48%)</title><rect x="11.4751%" y="133" width="0.4770%" height="15" fill="rgb(220,122,19)"/><text x="11.7251%" y="143.50"></text></g><g><title>needs_drop_raw (865,569 samples, 1.31%)</title><rect x="11.4091%" y="149" width="1.3095%" height="15" fill="rgb(250,228,42)"/><text x="11.6591%" y="159.50"></text></g><g><title>is_copy_raw (506,695 samples, 0.77%)</title><rect x="11.9521%" y="133" width="0.7666%" height="15" fill="rgb(240,193,28)"/><text x="12.2021%" y="143.50"></text></g><g><title>evaluate_obligation (456,995 samples, 0.69%)</title><rect x="12.0272%" y="117" width="0.6914%" height="15" fill="rgb(216,20,37)"/><text x="12.2772%" y="127.50"></text></g><g><title>trait_impls_of (130,052 samples, 0.20%)</title><rect x="12.5219%" y="101" width="0.1968%" height="15" fill="rgb(206,188,39)"/><text x="12.7719%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (83,061 samples, 0.13%)</title><rect x="12.8202%" y="133" width="0.1257%" height="15" fill="rgb(217,207,13)"/><text x="13.0702%" y="143.50"></text></g><g><title>impl_parent (230,331 samples, 0.35%)</title><rect x="13.4446%" y="117" width="0.3485%" height="15" fill="rgb(231,73,38)"/><text x="13.6946%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (166,720 samples, 0.25%)</title><rect x="13.5409%" y="101" width="0.2522%" height="15" fill="rgb(225,20,46)"/><text x="13.7909%" y="111.50"></text></g><g><title>specialization_graph_of (1,354,105 samples, 2.05%)</title><rect x="13.0028%" y="133" width="2.0486%" height="15" fill="rgb(210,31,41)"/><text x="13.2528%" y="143.50">s..</text></g><g><title>impl_trait_ref (831,758 samples, 1.26%)</title><rect x="13.7931%" y="117" width="1.2584%" height="15" fill="rgb(221,200,47)"/><text x="14.0431%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (765,538 samples, 1.16%)</title><rect x="13.8933%" y="101" width="1.1582%" height="15" fill="rgb(226,26,5)"/><text x="14.1433%" y="111.50"></text></g><g><title>resolve_instance (1,565,967 samples, 2.37%)</title><rect x="12.7186%" y="149" width="2.3692%" height="15" fill="rgb(249,33,26)"/><text x="12.9686%" y="159.50">re..</text></g><g><title>thir_body (158,201 samples, 0.24%)</title><rect x="15.0958%" y="149" width="0.2393%" height="15" fill="rgb(235,183,28)"/><text x="15.3458%" y="159.50"></text></g><g><title>mir_const (3,616,967 samples, 5.47%)</title><rect x="9.8670%" y="197" width="5.4721%" height="15" fill="rgb(221,5,38)"/><text x="10.1170%" y="207.50">mir_con..</text></g><g><title>unsafety_check_result (3,320,394 samples, 5.02%)</title><rect x="10.3157%" y="181" width="5.0234%" height="15" fill="rgb(247,18,42)"/><text x="10.5657%" y="191.50">unsafe..</text></g><g><title>mir_built (3,097,663 samples, 4.69%)</title><rect x="10.6527%" y="165" width="4.6865%" height="15" fill="rgb(241,131,45)"/><text x="10.9027%" y="175.50">mir_b..</text></g><g><title>mir_promoted (3,813,269 samples, 5.77%)</title><rect x="9.5848%" y="213" width="5.7691%" height="15" fill="rgb(249,31,29)"/><text x="9.8348%" y="223.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (130,621 samples, 0.20%)</title><rect x="15.3539%" y="213" width="0.1976%" height="15" fill="rgb(225,111,53)"/><text x="15.6039%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (109,942 samples, 0.17%)</title><rect x="15.5515%" y="213" width="0.1663%" height="15" fill="rgb(238,160,17)"/><text x="15.8015%" y="223.50"></text></g><g><title>normalize_projection_ty (69,271 samples, 0.10%)</title><rect x="15.6130%" y="197" width="0.1048%" height="15" fill="rgb(214,148,48)"/><text x="15.8630%" y="207.50"></text></g><g><title>type_op_prove_predicate (448,662 samples, 0.68%)</title><rect x="15.7887%" y="213" width="0.6788%" height="15" fill="rgb(232,36,49)"/><text x="16.0387%" y="223.50"></text></g><g><title>MIR_borrow_checking (6,529,729 samples, 9.88%)</title><rect x="6.5909%" y="245" width="9.8788%" height="15" fill="rgb(209,103,24)"/><text x="6.8409%" y="255.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (6,512,289 samples, 9.85%)</title><rect x="6.6173%" y="229" width="9.8524%" height="15" fill="rgb(229,88,8)"/><text x="6.8673%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (139,561 samples, 0.21%)</title><rect x="16.4775%" y="245" width="0.2111%" height="15" fill="rgb(213,181,19)"/><text x="16.7275%" y="255.50"></text></g><g><title>get_lang_items (97,861 samples, 0.15%)</title><rect x="17.0095%" y="197" width="0.1481%" height="15" fill="rgb(254,191,54)"/><text x="17.2595%" y="207.50"></text></g><g><title>codegen_fn_attrs (103,581 samples, 0.16%)</title><rect x="17.2651%" y="181" width="0.1567%" height="15" fill="rgb(241,83,37)"/><text x="17.5151%" y="191.50"></text></g><g><title>should_inherit_track_caller (178,002 samples, 0.27%)</title><rect x="17.1575%" y="197" width="0.2693%" height="15" fill="rgb(233,36,39)"/><text x="17.4075%" y="207.50"></text></g><g><title>codegen_fn_attrs (375,464 samples, 0.57%)</title><rect x="16.9122%" y="213" width="0.5680%" height="15" fill="rgb(226,3,54)"/><text x="17.1622%" y="223.50"></text></g><g><title>check_mod_attrs (494,355 samples, 0.75%)</title><rect x="16.7327%" y="229" width="0.7479%" height="15" fill="rgb(245,192,40)"/><text x="16.9827%" y="239.50"></text></g><g><title>lookup_deprecation_entry (100,451 samples, 0.15%)</title><rect x="17.8145%" y="213" width="0.1520%" height="15" fill="rgb(238,167,29)"/><text x="18.0645%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (303,103 samples, 0.46%)</title><rect x="17.6455%" y="229" width="0.4586%" height="15" fill="rgb(232,182,51)"/><text x="17.8955%" y="239.50"></text></g><g><title>misc_checking_1 (989,590 samples, 1.50%)</title><rect x="16.6895%" y="245" width="1.4972%" height="15" fill="rgb(231,60,39)"/><text x="16.9395%" y="255.50"></text></g><g><title>eval_to_const_value_raw (66,120 samples, 0.10%)</title><rect x="18.4054%" y="149" width="0.1000%" height="15" fill="rgb(208,69,12)"/><text x="18.6554%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (266,023 samples, 0.40%)</title><rect x="18.1885%" y="229" width="0.4025%" height="15" fill="rgb(235,93,37)"/><text x="18.4385%" y="239.50"></text></g><g><title>check_mod_liveness (245,413 samples, 0.37%)</title><rect x="18.2197%" y="213" width="0.3713%" height="15" fill="rgb(213,116,39)"/><text x="18.4697%" y="223.50"></text></g><g><title>type_uninhabited_from (173,272 samples, 0.26%)</title><rect x="18.3289%" y="197" width="0.2621%" height="15" fill="rgb(222,207,29)"/><text x="18.5789%" y="207.50"></text></g><g><title>type_uninhabited_from (158,192 samples, 0.24%)</title><rect x="18.3517%" y="181" width="0.2393%" height="15" fill="rgb(206,96,30)"/><text x="18.6017%" y="191.50"></text></g><g><title>type_uninhabited_from (138,091 samples, 0.21%)</title><rect x="18.3821%" y="165" width="0.2089%" height="15" fill="rgb(218,138,4)"/><text x="18.6321%" y="175.50"></text></g><g><title>misc_checking_2 (384,344 samples, 0.58%)</title><rect x="18.1866%" y="245" width="0.5815%" height="15" fill="rgb(250,191,14)"/><text x="18.4366%" y="255.50"></text></g><g><title>match_checking (117,041 samples, 0.18%)</title><rect x="18.5910%" y="229" width="0.1771%" height="15" fill="rgb(239,60,40)"/><text x="18.8410%" y="239.50"></text></g><g><title>check_match (111,251 samples, 0.17%)</title><rect x="18.5998%" y="213" width="0.1683%" height="15" fill="rgb(206,27,48)"/><text x="18.8498%" y="223.50"></text></g><g><title>death_checking (124,901 samples, 0.19%)</title><rect x="18.8612%" y="229" width="0.1890%" height="15" fill="rgb(225,35,8)"/><text x="19.1112%" y="239.50"></text></g><g><title>param_env (66,540 samples, 0.10%)</title><rect x="19.7193%" y="197" width="0.1007%" height="15" fill="rgb(250,213,24)"/><text x="19.9693%" y="207.50"></text></g><g><title>trait_impls_of (221,463 samples, 0.34%)</title><rect x="19.8200%" y="197" width="0.3351%" height="15" fill="rgb(247,123,22)"/><text x="20.0700%" y="207.50"></text></g><g><title>crate_lints (3,191,704 samples, 4.83%)</title><rect x="19.0528%" y="213" width="4.8287%" height="15" fill="rgb(231,138,38)"/><text x="19.3028%" y="223.50">crate_..</text></g><g><title>type_of (2,459,366 samples, 3.72%)</title><rect x="20.1607%" y="197" width="3.7208%" height="15" fill="rgb(231,145,46)"/><text x="20.4107%" y="207.50">type..</text></g><g><title>metadata_decode_entry_type_of (2,203,433 samples, 3.33%)</title><rect x="20.5479%" y="181" width="3.3336%" height="15" fill="rgb(251,118,11)"/><text x="20.7979%" y="191.50">met..</text></g><g><title>lint_checking (3,272,165 samples, 4.95%)</title><rect x="19.0501%" y="229" width="4.9505%" height="15" fill="rgb(217,147,25)"/><text x="19.3001%" y="239.50">lint_c..</text></g><g><title>module_lints (78,731 samples, 0.12%)</title><rect x="23.8815%" y="213" width="0.1191%" height="15" fill="rgb(247,81,37)"/><text x="24.1315%" y="223.50"></text></g><g><title>lint_mod (76,431 samples, 0.12%)</title><rect x="23.8850%" y="197" width="0.1156%" height="15" fill="rgb(209,12,38)"/><text x="24.1350%" y="207.50"></text></g><g><title>privacy_checking_modules (177,021 samples, 0.27%)</title><rect x="24.0830%" y="229" width="0.2678%" height="15" fill="rgb(227,1,9)"/><text x="24.3330%" y="239.50"></text></g><g><title>check_mod_privacy (175,511 samples, 0.27%)</title><rect x="24.0853%" y="213" width="0.2655%" height="15" fill="rgb(248,47,43)"/><text x="24.3353%" y="223.50"></text></g><g><title>misc_checking_3 (3,697,828 samples, 5.59%)</title><rect x="18.7681%" y="245" width="5.5944%" height="15" fill="rgb(221,10,30)"/><text x="19.0181%" y="255.50">misc_ch..</text></g><g><title>impl_trait_ref (136,261 samples, 0.21%)</title><rect x="24.7847%" y="181" width="0.2061%" height="15" fill="rgb(210,229,1)"/><text x="25.0347%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (120,480 samples, 0.18%)</title><rect x="24.8085%" y="165" width="0.1823%" height="15" fill="rgb(222,148,37)"/><text x="25.0585%" y="175.50"></text></g><g><title>coherent_trait (456,154 samples, 0.69%)</title><rect x="24.4522%" y="213" width="0.6901%" height="15" fill="rgb(234,67,33)"/><text x="24.7022%" y="223.50"></text></g><g><title>specialization_graph_of (445,794 samples, 0.67%)</title><rect x="24.4678%" y="197" width="0.6744%" height="15" fill="rgb(247,98,35)"/><text x="24.7178%" y="207.50"></text></g><g><title>trait_impls_of (100,111 samples, 0.15%)</title><rect x="24.9908%" y="181" width="0.1515%" height="15" fill="rgb(247,138,52)"/><text x="25.2408%" y="191.50"></text></g><g><title>coherence_checking (539,826 samples, 0.82%)</title><rect x="24.4132%" y="229" width="0.8167%" height="15" fill="rgb(213,79,30)"/><text x="24.6632%" y="239.50"></text></g><g><title>adt_def (90,290 samples, 0.14%)</title><rect x="31.5178%" y="165" width="0.1366%" height="15" fill="rgb(246,177,23)"/><text x="31.7678%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (88,310 samples, 0.13%)</title><rect x="31.5208%" y="149" width="0.1336%" height="15" fill="rgb(230,62,27)"/><text x="31.7708%" y="159.50"></text></g><g><title>adt_sized_constraint (106,040 samples, 0.16%)</title><rect x="31.5045%" y="181" width="0.1604%" height="15" fill="rgb(216,154,8)"/><text x="31.7545%" y="191.50"></text></g><g><title>associated_item (341,463 samples, 0.52%)</title><rect x="31.8966%" y="165" width="0.5166%" height="15" fill="rgb(244,35,45)"/><text x="32.1466%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (256,143 samples, 0.39%)</title><rect x="32.0257%" y="149" width="0.3875%" height="15" fill="rgb(251,115,12)"/><text x="32.2757%" y="159.50"></text></g><g><title>associated_items (504,505 samples, 0.76%)</title><rect x="31.6899%" y="181" width="0.7633%" height="15" fill="rgb(240,54,50)"/><text x="31.9399%" y="191.50"></text></g><g><title>adt_def (92,262 samples, 0.14%)</title><rect x="33.1208%" y="85" width="0.1396%" height="15" fill="rgb(233,84,52)"/><text x="33.3708%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (91,822 samples, 0.14%)</title><rect x="33.1215%" y="69" width="0.1389%" height="15" fill="rgb(207,117,47)"/><text x="33.3715%" y="79.50"></text></g><g><title>item_attrs (86,802 samples, 0.13%)</title><rect x="33.1291%" y="53" width="0.1313%" height="15" fill="rgb(249,43,39)"/><text x="33.3791%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (86,192 samples, 0.13%)</title><rect x="33.1300%" y="37" width="0.1304%" height="15" fill="rgb(209,38,44)"/><text x="33.3800%" y="47.50"></text></g><g><title>adt_dtorck_constraint (98,272 samples, 0.15%)</title><rect x="33.1161%" y="101" width="0.1487%" height="15" fill="rgb(236,212,23)"/><text x="33.3661%" y="111.50"></text></g><g><title>adt_dtorck_constraint (138,852 samples, 0.21%)</title><rect x="33.0620%" y="117" width="0.2101%" height="15" fill="rgb(242,79,21)"/><text x="33.3120%" y="127.50"></text></g><g><title>adt_dtorck_constraint (211,322 samples, 0.32%)</title><rect x="32.9676%" y="133" width="0.3197%" height="15" fill="rgb(211,96,35)"/><text x="33.2176%" y="143.50"></text></g><g><title>adt_dtorck_constraint (267,413 samples, 0.40%)</title><rect x="32.8908%" y="149" width="0.4046%" height="15" fill="rgb(253,215,40)"/><text x="33.1408%" y="159.50"></text></g><g><title>adt_dtorck_constraint (383,643 samples, 0.58%)</title><rect x="32.7617%" y="165" width="0.5804%" height="15" fill="rgb(211,81,21)"/><text x="33.0117%" y="175.50"></text></g><g><title>eval_to_const_value_raw (66,421 samples, 0.10%)</title><rect x="33.4749%" y="101" width="0.1005%" height="15" fill="rgb(208,190,38)"/><text x="33.7249%" y="111.50"></text></g><g><title>eval_to_const_value_raw (159,212 samples, 0.24%)</title><rect x="33.3421%" y="165" width="0.2409%" height="15" fill="rgb(235,213,38)"/><text x="33.5921%" y="175.50"></text></g><g><title>eval_to_const_value_raw (145,001 samples, 0.22%)</title><rect x="33.3636%" y="149" width="0.2194%" height="15" fill="rgb(237,122,38)"/><text x="33.6136%" y="159.50"></text></g><g><title>eval_to_allocation_raw (143,471 samples, 0.22%)</title><rect x="33.3659%" y="133" width="0.2171%" height="15" fill="rgb(244,218,35)"/><text x="33.6159%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (76,291 samples, 0.12%)</title><rect x="33.4675%" y="117" width="0.1154%" height="15" fill="rgb(240,68,47)"/><text x="33.7175%" y="127.50"></text></g><g><title>normalize_projection_ty (432,305 samples, 0.65%)</title><rect x="33.5857%" y="165" width="0.6540%" height="15" fill="rgb(210,16,53)"/><text x="33.8357%" y="175.50"></text></g><g><title>dropck_outlives (1,136,332 samples, 1.72%)</title><rect x="32.5266%" y="181" width="1.7192%" height="15" fill="rgb(235,124,12)"/><text x="32.7766%" y="191.50"></text></g><g><title>adt_sized_constraint (105,341 samples, 0.16%)</title><rect x="34.8765%" y="165" width="0.1594%" height="15" fill="rgb(224,169,11)"/><text x="35.1265%" y="175.50"></text></g><g><title>evaluate_obligation (947,178 samples, 1.43%)</title><rect x="34.2458%" y="181" width="1.4330%" height="15" fill="rgb(250,166,2)"/><text x="34.4958%" y="191.50"></text></g><g><title>trait_impls_of (346,553 samples, 0.52%)</title><rect x="35.1545%" y="165" width="0.5243%" height="15" fill="rgb(242,216,29)"/><text x="35.4045%" y="175.50"></text></g><g><title>implementations_of_trait (119,801 samples, 0.18%)</title><rect x="35.4975%" y="149" width="0.1812%" height="15" fill="rgb(230,116,27)"/><text x="35.7475%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (79,711 samples, 0.12%)</title><rect x="35.5582%" y="133" width="0.1206%" height="15" fill="rgb(228,99,48)"/><text x="35.8082%" y="143.50"></text></g><g><title>fn_sig (108,021 samples, 0.16%)</title><rect x="35.7066%" y="181" width="0.1634%" height="15" fill="rgb(253,11,6)"/><text x="35.9566%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (98,841 samples, 0.15%)</title><rect x="35.7205%" y="165" width="0.1495%" height="15" fill="rgb(247,143,39)"/><text x="35.9705%" y="175.50"></text></g><g><title>generics_of (71,600 samples, 0.11%)</title><rect x="35.8700%" y="181" width="0.1083%" height="15" fill="rgb(236,97,10)"/><text x="36.1200%" y="191.50"></text></g><g><title>item_attrs (101,041 samples, 0.15%)</title><rect x="36.1598%" y="181" width="0.1529%" height="15" fill="rgb(233,208,19)"/><text x="36.4098%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,351 samples, 0.15%)</title><rect x="36.1669%" y="165" width="0.1458%" height="15" fill="rgb(216,164,2)"/><text x="36.4169%" y="175.50"></text></g><g><title>method_autoderef_steps (117,560 samples, 0.18%)</title><rect x="36.3743%" y="181" width="0.1779%" height="15" fill="rgb(220,129,5)"/><text x="36.6243%" y="191.50"></text></g><g><title>evaluate_obligation (81,420 samples, 0.12%)</title><rect x="36.4290%" y="165" width="0.1232%" height="15" fill="rgb(242,17,10)"/><text x="36.6790%" y="175.50"></text></g><g><title>explicit_predicates_of (123,862 samples, 0.19%)</title><rect x="36.8132%" y="149" width="0.1874%" height="15" fill="rgb(242,107,0)"/><text x="37.0632%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (106,442 samples, 0.16%)</title><rect x="36.8396%" y="133" width="0.1610%" height="15" fill="rgb(251,28,31)"/><text x="37.0896%" y="143.50"></text></g><g><title>predicates_of (304,744 samples, 0.46%)</title><rect x="36.5980%" y="181" width="0.4610%" height="15" fill="rgb(233,223,10)"/><text x="36.8480%" y="191.50"></text></g><g><title>predicates_defined_on (220,624 samples, 0.33%)</title><rect x="36.7253%" y="165" width="0.3338%" height="15" fill="rgb(215,21,27)"/><text x="36.9753%" y="175.50"></text></g><g><title>type_of (80,310 samples, 0.12%)</title><rect x="37.1148%" y="181" width="0.1215%" height="15" fill="rgb(232,23,21)"/><text x="37.3648%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (68,810 samples, 0.10%)</title><rect x="37.1322%" y="165" width="0.1041%" height="15" fill="rgb(244,5,23)"/><text x="37.3822%" y="175.50"></text></g><g><title>item_bodies_checking (7,944,195 samples, 12.02%)</title><rect x="25.2761%" y="229" width="12.0188%" height="15" fill="rgb(226,81,46)"/><text x="25.5261%" y="239.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (7,941,525 samples, 12.01%)</title><rect x="25.2801%" y="213" width="12.0147%" height="15" fill="rgb(247,70,30)"/><text x="25.5301%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (7,926,294 samples, 11.99%)</title><rect x="25.3032%" y="197" width="11.9917%" height="15" fill="rgb(212,68,19)"/><text x="25.5532%" y="207.50">typeck</text></g><g><title>impl_parent (134,390 samples, 0.20%)</title><rect x="38.0342%" y="149" width="0.2033%" height="15" fill="rgb(240,187,13)"/><text x="38.2842%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (93,200 samples, 0.14%)</title><rect x="38.0965%" y="133" width="0.1410%" height="15" fill="rgb(223,113,26)"/><text x="38.3465%" y="143.50"></text></g><g><title>impl_trait_ref (497,085 samples, 0.75%)</title><rect x="38.2375%" y="149" width="0.7520%" height="15" fill="rgb(206,192,2)"/><text x="38.4875%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (456,445 samples, 0.69%)</title><rect x="38.2990%" y="133" width="0.6906%" height="15" fill="rgb(241,108,4)"/><text x="38.5490%" y="143.50"></text></g><g><title>adt_destructor (861,339 samples, 1.30%)</title><rect x="37.7613%" y="197" width="1.3031%" height="15" fill="rgb(247,173,49)"/><text x="38.0113%" y="207.50"></text></g><g><title>coherent_trait (854,099 samples, 1.29%)</title><rect x="37.7722%" y="181" width="1.2922%" height="15" fill="rgb(224,114,35)"/><text x="38.0222%" y="191.50"></text></g><g><title>specialization_graph_of (851,499 samples, 1.29%)</title><rect x="37.7762%" y="165" width="1.2882%" height="15" fill="rgb(245,159,27)"/><text x="38.0262%" y="175.50"></text></g><g><title>item_types_checking (1,318,763 samples, 2.00%)</title><rect x="37.2948%" y="229" width="1.9952%" height="15" fill="rgb(245,172,44)"/><text x="37.5448%" y="239.50">i..</text></g><g><title>check_mod_item_types (1,315,793 samples, 1.99%)</title><rect x="37.2993%" y="213" width="1.9907%" height="15" fill="rgb(236,23,11)"/><text x="37.5493%" y="223.50">c..</text></g><g><title>type_of (67,870 samples, 0.10%)</title><rect x="39.1873%" y="197" width="0.1027%" height="15" fill="rgb(205,117,38)"/><text x="39.4373%" y="207.50"></text></g><g><title>fn_sig (154,052 samples, 0.23%)</title><rect x="39.5337%" y="197" width="0.2331%" height="15" fill="rgb(237,72,25)"/><text x="39.7837%" y="207.50"></text></g><g><title>generics_of (105,051 samples, 0.16%)</title><rect x="39.7668%" y="197" width="0.1589%" height="15" fill="rgb(244,70,9)"/><text x="40.0168%" y="207.50"></text></g><g><title>late_bound_vars_map (213,044 samples, 0.32%)</title><rect x="40.3201%" y="149" width="0.3223%" height="15" fill="rgb(217,125,39)"/><text x="40.5701%" y="159.50"></text></g><g><title>resolve_lifetimes (198,874 samples, 0.30%)</title><rect x="40.3416%" y="133" width="0.3009%" height="15" fill="rgb(235,36,10)"/><text x="40.5916%" y="143.50"></text></g><g><title>explicit_predicates_of (417,415 samples, 0.63%)</title><rect x="40.0267%" y="165" width="0.6315%" height="15" fill="rgb(251,123,47)"/><text x="40.2767%" y="175.50"></text></g><g><title>predicates_of (723,939 samples, 1.10%)</title><rect x="39.9432%" y="197" width="1.0952%" height="15" fill="rgb(221,13,13)"/><text x="40.1932%" y="207.50"></text></g><g><title>predicates_defined_on (704,608 samples, 1.07%)</title><rect x="39.9725%" y="181" width="1.0660%" height="15" fill="rgb(238,131,9)"/><text x="40.2225%" y="191.50"></text></g><g><title>inferred_outlives_of (251,383 samples, 0.38%)</title><rect x="40.6582%" y="165" width="0.3803%" height="15" fill="rgb(211,50,8)"/><text x="40.9082%" y="175.50"></text></g><g><title>inferred_outlives_crate (239,153 samples, 0.36%)</title><rect x="40.6767%" y="149" width="0.3618%" height="15" fill="rgb(245,182,24)"/><text x="40.9267%" y="159.50"></text></g><g><title>type_of (117,731 samples, 0.18%)</title><rect x="40.8604%" y="133" width="0.1781%" height="15" fill="rgb(242,14,37)"/><text x="41.1104%" y="143.50"></text></g><g><title>type_of (84,951 samples, 0.13%)</title><rect x="40.9100%" y="117" width="0.1285%" height="15" fill="rgb(246,228,12)"/><text x="41.1600%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (74,391 samples, 0.11%)</title><rect x="40.9259%" y="101" width="0.1125%" height="15" fill="rgb(213,55,15)"/><text x="41.1759%" y="111.50"></text></g><g><title>type_collecting (1,230,873 samples, 1.86%)</title><rect x="39.2919%" y="229" width="1.8622%" height="15" fill="rgb(209,9,3)"/><text x="39.5419%" y="239.50">t..</text></g><g><title>collect_mod_item_types (1,214,493 samples, 1.84%)</title><rect x="39.3167%" y="213" width="1.8374%" height="15" fill="rgb(230,59,30)"/><text x="39.5667%" y="223.50">c..</text></g><g><title>type_of (76,431 samples, 0.12%)</title><rect x="41.0385%" y="197" width="0.1156%" height="15" fill="rgb(209,121,21)"/><text x="41.2885%" y="207.50"></text></g><g><title>evaluate_obligation (180,743 samples, 0.27%)</title><rect x="42.1096%" y="197" width="0.2734%" height="15" fill="rgb(220,109,13)"/><text x="42.3596%" y="207.50"></text></g><g><title>implied_outlives_bounds (90,411 samples, 0.14%)</title><rect x="42.3830%" y="197" width="0.1368%" height="15" fill="rgb(232,18,1)"/><text x="42.6330%" y="207.50"></text></g><g><title>param_env (83,630 samples, 0.13%)</title><rect x="42.5198%" y="197" width="0.1265%" height="15" fill="rgb(215,41,42)"/><text x="42.7698%" y="207.50"></text></g><g><title>check_impl_item_well_formed (986,511 samples, 1.49%)</title><rect x="41.2662%" y="213" width="1.4925%" height="15" fill="rgb(224,123,36)"/><text x="41.5162%" y="223.50"></text></g><g><title>adt_def (67,690 samples, 0.10%)</title><rect x="43.9873%" y="165" width="0.1024%" height="15" fill="rgb(240,125,3)"/><text x="44.2373%" y="175.50"></text></g><g><title>adt_sized_constraint (78,900 samples, 0.12%)</title><rect x="43.9746%" y="181" width="0.1194%" height="15" fill="rgb(205,98,50)"/><text x="44.2246%" y="191.50"></text></g><g><title>adt_sized_constraint (151,911 samples, 0.23%)</title><rect x="43.8662%" y="197" width="0.2298%" height="15" fill="rgb(205,185,37)"/><text x="44.1162%" y="207.50"></text></g><g><title>adt_def (147,041 samples, 0.22%)</title><rect x="44.3042%" y="165" width="0.2225%" height="15" fill="rgb(238,207,15)"/><text x="44.5542%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (145,021 samples, 0.22%)</title><rect x="44.3073%" y="149" width="0.2194%" height="15" fill="rgb(213,199,42)"/><text x="44.5573%" y="159.50"></text></g><g><title>item_attrs (124,171 samples, 0.19%)</title><rect x="44.3388%" y="133" width="0.1879%" height="15" fill="rgb(235,201,11)"/><text x="44.5888%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (121,941 samples, 0.18%)</title><rect x="44.3422%" y="117" width="0.1845%" height="15" fill="rgb(207,46,11)"/><text x="44.5922%" y="127.50"></text></g><g><title>adt_sized_constraint (75,151 samples, 0.11%)</title><rect x="44.5536%" y="149" width="0.1137%" height="15" fill="rgb(241,35,35)"/><text x="44.8036%" y="159.50"></text></g><g><title>adt_sized_constraint (126,061 samples, 0.19%)</title><rect x="44.5267%" y="165" width="0.1907%" height="15" fill="rgb(243,32,47)"/><text x="44.7767%" y="175.50"></text></g><g><title>adt_sized_constraint (291,262 samples, 0.44%)</title><rect x="44.2909%" y="181" width="0.4407%" height="15" fill="rgb(247,202,23)"/><text x="44.5409%" y="191.50"></text></g><g><title>evaluate_obligation (478,095 samples, 0.72%)</title><rect x="44.0960%" y="197" width="0.7233%" height="15" fill="rgb(219,102,11)"/><text x="44.3460%" y="207.50"></text></g><g><title>implied_outlives_bounds (77,182 samples, 0.12%)</title><rect x="44.8242%" y="197" width="0.1168%" height="15" fill="rgb(243,110,44)"/><text x="45.0742%" y="207.50"></text></g><g><title>param_env (307,334 samples, 0.46%)</title><rect x="44.9409%" y="197" width="0.4650%" height="15" fill="rgb(222,74,54)"/><text x="45.1909%" y="207.50"></text></g><g><title>predicates_of (104,140 samples, 0.16%)</title><rect x="45.4059%" y="197" width="0.1576%" height="15" fill="rgb(216,99,12)"/><text x="45.6559%" y="207.50"></text></g><g><title>predicates_defined_on (75,530 samples, 0.11%)</title><rect x="45.4492%" y="181" width="0.1143%" height="15" fill="rgb(226,22,26)"/><text x="45.6992%" y="191.50"></text></g><g><title>analysis (26,149,525 samples, 39.56%)</title><rect x="6.2927%" y="261" width="39.5616%" height="15" fill="rgb(217,163,10)"/><text x="6.5427%" y="271.50">analysis</text></g><g><title>type_check_crate (14,205,720 samples, 21.49%)</title><rect x="24.3625%" y="245" width="21.4918%" height="15" fill="rgb(213,25,53)"/><text x="24.6125%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,105,883 samples, 4.70%)</title><rect x="41.1555%" y="229" width="4.6989%" height="15" fill="rgb(252,105,26)"/><text x="41.4055%" y="239.50">wf_ch..</text></g><g><title>check_item_well_formed (2,046,142 samples, 3.10%)</title><rect x="42.7587%" y="213" width="3.0956%" height="15" fill="rgb(220,39,43)"/><text x="43.0087%" y="223.50">che..</text></g><g><title>variances_of (97,521 samples, 0.15%)</title><rect x="45.7068%" y="197" width="0.1475%" height="15" fill="rgb(229,68,48)"/><text x="45.9568%" y="207.50"></text></g><g><title>crate_variances (91,841 samples, 0.14%)</title><rect x="45.7154%" y="181" width="0.1389%" height="15" fill="rgb(252,8,32)"/><text x="45.9654%" y="191.50"></text></g><g><title>codegen_module (262,463 samples, 0.40%)</title><rect x="46.5687%" y="245" width="0.3971%" height="15" fill="rgb(223,20,43)"/><text x="46.8187%" y="255.50"></text></g><g><title>codegen_crate (806,449 samples, 1.22%)</title><rect x="45.8707%" y="261" width="1.2201%" height="15" fill="rgb(229,81,49)"/><text x="46.1207%" y="271.50"></text></g><g><title>LLVM_module_codegen (2,979,631 samples, 4.51%)</title><rect x="47.1259%" y="245" width="4.5079%" height="15" fill="rgb(236,28,36)"/><text x="47.3759%" y="255.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,916,081 samples, 4.41%)</title><rect x="47.2220%" y="229" width="4.4117%" height="15" fill="rgb(249,185,26)"/><text x="47.4720%" y="239.50">LLVM_..</text></g><g><title>codegen_module_optimize (3,297,024 samples, 4.99%)</title><rect x="47.0908%" y="261" width="4.9881%" height="15" fill="rgb(249,174,33)"/><text x="47.3408%" y="271.50">codege..</text></g><g><title>LLVM_module_optimize (294,173 samples, 0.45%)</title><rect x="51.6338%" y="245" width="0.4451%" height="15" fill="rgb(233,201,37)"/><text x="51.8838%" y="255.50"></text></g><g><title>AST_validation (72,420 samples, 0.11%)</title><rect x="52.4072%" y="245" width="0.1096%" height="15" fill="rgb(221,78,26)"/><text x="52.6572%" y="255.50"></text></g><g><title>crate_injection (89,481 samples, 0.14%)</title><rect x="52.5705%" y="245" width="0.1354%" height="15" fill="rgb(250,127,30)"/><text x="52.8205%" y="255.50"></text></g><g><title>metadata_load_macro (157,021 samples, 0.24%)</title><rect x="69.5214%" y="213" width="0.2376%" height="15" fill="rgb(230,49,44)"/><text x="69.7714%" y="223.50"></text></g><g><title>macro_expand_crate (16,594,735 samples, 25.11%)</title><rect x="52.7059%" y="245" width="25.1062%" height="15" fill="rgb(229,67,23)"/><text x="52.9559%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (16,566,775 samples, 25.06%)</title><rect x="52.7482%" y="229" width="25.0639%" height="15" fill="rgb(249,83,47)"/><text x="52.9982%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (5,322,916 samples, 8.05%)</title><rect x="69.7590%" y="213" width="8.0530%" height="15" fill="rgb(215,43,3)"/><text x="70.0090%" y="223.50">metadata_re..</text></g><g><title>metadata_register_crate (2,924,761 samples, 4.42%)</title><rect x="73.3872%" y="197" width="4.4249%" height="15" fill="rgb(238,154,13)"/><text x="73.6372%" y="207.50">metad..</text></g><g><title>metadata_register_crate (75,792 samples, 0.11%)</title><rect x="77.6974%" y="181" width="0.1147%" height="15" fill="rgb(219,56,2)"/><text x="77.9474%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (121,331 samples, 0.18%)</title><rect x="77.8296%" y="245" width="0.1836%" height="15" fill="rgb(233,0,4)"/><text x="78.0796%" y="255.50"></text></g><g><title>finalize_macro_resolutions (316,353 samples, 0.48%)</title><rect x="78.0938%" y="229" width="0.4786%" height="15" fill="rgb(235,30,7)"/><text x="78.3438%" y="239.50"></text></g><g><title>late_resolve_crate (910,210 samples, 1.38%)</title><rect x="78.5724%" y="229" width="1.3771%" height="15" fill="rgb(250,79,13)"/><text x="78.8224%" y="239.50"></text></g><g><title>configure_and_expand (18,475,415 samples, 27.95%)</title><rect x="52.0788%" y="261" width="27.9514%" height="15" fill="rgb(211,146,34)"/><text x="52.3288%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,333,275 samples, 2.02%)</title><rect x="78.0132%" y="245" width="2.0171%" height="15" fill="rgb(228,22,38)"/><text x="78.2632%" y="255.50">r..</text></g><g><title>drop_ast (67,031 samples, 0.10%)</title><rect x="80.0303%" y="261" width="0.1014%" height="15" fill="rgb(235,168,5)"/><text x="80.2803%" y="271.50"></text></g><g><title>early_lint_checks (171,322 samples, 0.26%)</title><rect x="80.1726%" y="261" width="0.2592%" height="15" fill="rgb(221,155,16)"/><text x="80.4226%" y="271.50"></text></g><g><title>free_global_ctxt (2,667,488 samples, 4.04%)</title><rect x="80.4318%" y="261" width="4.0356%" height="15" fill="rgb(215,215,53)"/><text x="80.6818%" y="271.50">free..</text></g><g><title>crate_hash (70,071 samples, 0.11%)</title><rect x="85.4509%" y="245" width="0.1060%" height="15" fill="rgb(223,4,10)"/><text x="85.7009%" y="255.50"></text></g><g><title>collect_and_partition_mono_items (81,081 samples, 0.12%)</title><rect x="85.6284%" y="229" width="0.1227%" height="15" fill="rgb(234,103,6)"/><text x="85.8784%" y="239.50"></text></g><g><title>exported_symbols (126,151 samples, 0.19%)</title><rect x="85.6049%" y="245" width="0.1909%" height="15" fill="rgb(227,97,0)"/><text x="85.8549%" y="255.50"></text></g><g><title>eval_to_const_value_raw (187,132 samples, 0.28%)</title><rect x="87.2300%" y="181" width="0.2831%" height="15" fill="rgb(234,150,53)"/><text x="87.4800%" y="191.50"></text></g><g><title>eval_to_const_value_raw (177,092 samples, 0.27%)</title><rect x="87.2452%" y="165" width="0.2679%" height="15" fill="rgb(228,201,54)"/><text x="87.4952%" y="175.50"></text></g><g><title>eval_to_allocation_raw (156,922 samples, 0.24%)</title><rect x="87.2758%" y="149" width="0.2374%" height="15" fill="rgb(222,22,37)"/><text x="87.5258%" y="159.50"></text></g><g><title>eval_to_const_value_raw (85,051 samples, 0.13%)</title><rect x="87.6402%" y="165" width="0.1287%" height="15" fill="rgb(237,53,32)"/><text x="87.8902%" y="175.50"></text></g><g><title>eval_to_const_value_raw (76,761 samples, 0.12%)</title><rect x="87.6528%" y="149" width="0.1161%" height="15" fill="rgb(233,25,53)"/><text x="87.9028%" y="159.50"></text></g><g><title>layout_of (105,400 samples, 0.16%)</title><rect x="87.9882%" y="149" width="0.1595%" height="15" fill="rgb(210,40,34)"/><text x="88.2382%" y="159.50"></text></g><g><title>layout_of (304,083 samples, 0.46%)</title><rect x="87.8707%" y="165" width="0.4600%" height="15" fill="rgb(241,220,44)"/><text x="88.1207%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (110,021 samples, 0.17%)</title><rect x="88.1643%" y="149" width="0.1665%" height="15" fill="rgb(235,28,35)"/><text x="88.4143%" y="159.50"></text></g><g><title>normalize_projection_ty (104,381 samples, 0.16%)</title><rect x="88.1729%" y="133" width="0.1579%" height="15" fill="rgb(210,56,17)"/><text x="88.4229%" y="143.50"></text></g><g><title>param_env (74,550 samples, 0.11%)</title><rect x="88.3308%" y="165" width="0.1128%" height="15" fill="rgb(224,130,29)"/><text x="88.5808%" y="175.50"></text></g><g><title>layout_of (591,794 samples, 0.90%)</title><rect x="87.5509%" y="181" width="0.8953%" height="15" fill="rgb(235,212,8)"/><text x="87.8009%" y="191.50"></text></g><g><title>param_env (113,461 samples, 0.17%)</title><rect x="88.4463%" y="181" width="0.1717%" height="15" fill="rgb(223,33,50)"/><text x="88.6963%" y="191.50"></text></g><g><title>layout_of (1,018,289 samples, 1.54%)</title><rect x="87.0945%" y="197" width="1.5406%" height="15" fill="rgb(219,149,13)"/><text x="87.3445%" y="207.50"></text></g><g><title>layout_of (1,092,880 samples, 1.65%)</title><rect x="86.9934%" y="213" width="1.6534%" height="15" fill="rgb(250,156,29)"/><text x="87.2434%" y="223.50"></text></g><g><title>layout_of (1,263,622 samples, 1.91%)</title><rect x="86.7656%" y="229" width="1.9117%" height="15" fill="rgb(216,193,19)"/><text x="87.0156%" y="239.50">l..</text></g><g><title>needs_drop_raw (238,164 samples, 0.36%)</title><rect x="89.9467%" y="213" width="0.3603%" height="15" fill="rgb(216,135,14)"/><text x="90.1967%" y="223.50"></text></g><g><title>is_copy_raw (210,364 samples, 0.32%)</title><rect x="89.9888%" y="197" width="0.3183%" height="15" fill="rgb(241,47,5)"/><text x="90.2388%" y="207.50"></text></g><g><title>evaluate_obligation (181,504 samples, 0.27%)</title><rect x="90.0324%" y="181" width="0.2746%" height="15" fill="rgb(233,42,35)"/><text x="90.2824%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,080,301 samples, 1.63%)</title><rect x="88.6773%" y="229" width="1.6344%" height="15" fill="rgb(231,13,6)"/><text x="88.9273%" y="239.50"></text></g><g><title>impl_parent (90,991 samples, 0.14%)</title><rect x="90.5635%" y="197" width="0.1377%" height="15" fill="rgb(207,181,40)"/><text x="90.8135%" y="207.50"></text></g><g><title>specialization_graph_of (336,224 samples, 0.51%)</title><rect x="90.3703%" y="213" width="0.5087%" height="15" fill="rgb(254,173,49)"/><text x="90.6203%" y="223.50"></text></g><g><title>impl_trait_ref (117,531 samples, 0.18%)</title><rect x="90.7012%" y="197" width="0.1778%" height="15" fill="rgb(221,1,38)"/><text x="90.9512%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (84,891 samples, 0.13%)</title><rect x="90.7506%" y="181" width="0.1284%" height="15" fill="rgb(206,124,46)"/><text x="91.0006%" y="191.50"></text></g><g><title>optimized_mir (3,312,696 samples, 5.01%)</title><rect x="85.8704%" y="245" width="5.0118%" height="15" fill="rgb(249,21,11)"/><text x="86.1204%" y="255.50">optimi..</text></g><g><title>resolve_instance (377,074 samples, 0.57%)</title><rect x="90.3117%" y="229" width="0.5705%" height="15" fill="rgb(222,201,40)"/><text x="90.5617%" y="239.50"></text></g><g><title>generate_crate_metadata (4,299,756 samples, 6.51%)</title><rect x="84.4674%" y="261" width="6.5051%" height="15" fill="rgb(235,61,29)"/><text x="84.7174%" y="271.50">generate_..</text></g><g><title>hir_lowering (1,220,503 samples, 1.85%)</title><rect x="90.9725%" y="261" width="1.8465%" height="15" fill="rgb(219,207,3)"/><text x="91.2225%" y="271.50">h..</text></g><g><title>finish_ongoing_codegen (514,966 samples, 0.78%)</title><rect x="92.8437%" y="245" width="0.7791%" height="15" fill="rgb(222,56,46)"/><text x="93.0937%" y="255.50"></text></g><g><title>link_crate (1,092,271 samples, 1.65%)</title><rect x="93.6228%" y="245" width="1.6525%" height="15" fill="rgb(239,76,54)"/><text x="93.8728%" y="255.50"></text></g><g><title>link_binary (1,072,331 samples, 1.62%)</title><rect x="93.6529%" y="229" width="1.6223%" height="15" fill="rgb(231,124,27)"/><text x="93.9029%" y="239.50"></text></g><g><title>link_rlib (662,917 samples, 1.00%)</title><rect x="94.2723%" y="213" width="1.0029%" height="15" fill="rgb(249,195,6)"/><text x="94.5223%" y="223.50"></text></g><g><title>link (1,634,967 samples, 2.47%)</title><rect x="92.8190%" y="261" width="2.4735%" height="15" fill="rgb(237,174,47)"/><text x="93.0690%" y="271.50">li..</text></g><g><title>parse_crate (1,830,520 samples, 2.77%)</title><rect x="95.2926%" y="261" width="2.7694%" height="15" fill="rgb(206,201,31)"/><text x="95.5426%" y="271.50">pa..</text></g><g><title>prepare_outputs (369,104 samples, 0.56%)</title><rect x="98.0749%" y="261" width="0.5584%" height="15" fill="rgb(231,57,52)"/><text x="98.3249%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (446,275 samples, 0.68%)</title><rect x="98.6333%" y="261" width="0.6752%" height="15" fill="rgb(248,177,22)"/><text x="98.8833%" y="271.50"></text></g><g><title>setup_global_ctxt (158,881 samples, 0.24%)</title><rect x="99.3098%" y="261" width="0.2404%" height="15" fill="rgb(215,211,37)"/><text x="99.5598%" y="271.50"></text></g><g><title>all (66,098,248 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(241,128,51)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (66,098,248 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(227,165,31)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (297,323 samples, 0.45%)</title><rect x="99.5502%" y="261" width="0.4498%" height="15" fill="rgb(228,167,24)"/><text x="99.8002%" y="271.50"></text></g></svg></svg>