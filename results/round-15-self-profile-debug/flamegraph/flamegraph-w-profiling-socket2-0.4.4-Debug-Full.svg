<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (144,020,760 samples, 12.04%)</title><rect x="0.0668%" y="181" width="12.0433%" height="15" fill="rgb(227,0,7)"/><text x="0.3168%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,989,375 samples, 0.17%)</title><rect x="15.8128%" y="69" width="0.1664%" height="15" fill="rgb(217,0,24)"/><text x="16.0628%" y="79.50"></text></g><g><title>is_copy_raw (1,513,812 samples, 0.13%)</title><rect x="15.8526%" y="53" width="0.1266%" height="15" fill="rgb(221,193,54)"/><text x="16.1026%" y="63.50"></text></g><g><title>evaluate_obligation (1,240,841 samples, 0.10%)</title><rect x="15.8754%" y="37" width="0.1038%" height="15" fill="rgb(248,212,6)"/><text x="16.1254%" y="47.50"></text></g><g><title>specialization_graph_of (1,334,613 samples, 0.11%)</title><rect x="16.0484%" y="53" width="0.1116%" height="15" fill="rgb(208,68,35)"/><text x="16.2984%" y="63.50"></text></g><g><title>resolve_instance (2,342,746 samples, 0.20%)</title><rect x="15.9792%" y="69" width="0.1959%" height="15" fill="rgb(232,128,0)"/><text x="16.2292%" y="79.50"></text></g><g><title>thir_body (2,918,848 samples, 0.24%)</title><rect x="16.1842%" y="69" width="0.2441%" height="15" fill="rgb(207,160,47)"/><text x="16.4342%" y="79.50"></text></g><g><title>mir_const (19,518,900 samples, 1.63%)</title><rect x="14.8027%" y="117" width="1.6322%" height="15" fill="rgb(228,23,34)"/><text x="15.0527%" y="127.50"></text></g><g><title>unsafety_check_result (16,739,056 samples, 1.40%)</title><rect x="15.0351%" y="101" width="1.3998%" height="15" fill="rgb(218,30,26)"/><text x="15.2851%" y="111.50"></text></g><g><title>mir_built (14,915,359 samples, 1.25%)</title><rect x="15.1876%" y="85" width="1.2473%" height="15" fill="rgb(220,122,19)"/><text x="15.4376%" y="95.50"></text></g><g><title>mir_const_qualif (1,421,147 samples, 0.12%)</title><rect x="16.4349%" y="117" width="0.1188%" height="15" fill="rgb(250,228,42)"/><text x="16.6849%" y="127.50"></text></g><g><title>mir_promoted (23,274,206 samples, 1.95%)</title><rect x="14.6077%" y="133" width="1.9462%" height="15" fill="rgb(240,193,28)"/><text x="14.8577%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (3,131,550 samples, 0.26%)</title><rect x="16.6667%" y="133" width="0.2619%" height="15" fill="rgb(216,20,37)"/><text x="16.9167%" y="143.50"></text></g><g><title>MIR_borrow_checking (57,009,102 samples, 4.77%)</title><rect x="12.1622%" y="165" width="4.7672%" height="15" fill="rgb(206,188,39)"/><text x="12.4122%" y="175.50">MIR_bo..</text></g><g><title>mir_borrowck (56,544,123 samples, 4.73%)</title><rect x="12.2011%" y="149" width="4.7283%" height="15" fill="rgb(217,207,13)"/><text x="12.4511%" y="159.50">mir_bo..</text></g><g><title>check_mod_attrs (1,338,554 samples, 0.11%)</title><rect x="17.0200%" y="149" width="0.1119%" height="15" fill="rgb(231,73,38)"/><text x="17.2700%" y="159.50"></text></g><g><title>misc_checking_1 (2,770,479 samples, 0.23%)</title><rect x="17.0179%" y="165" width="0.2317%" height="15" fill="rgb(225,20,46)"/><text x="17.2679%" y="175.50"></text></g><g><title>misc_checking_2 (3,043,102 samples, 0.25%)</title><rect x="17.2496%" y="165" width="0.2545%" height="15" fill="rgb(210,31,41)"/><text x="17.4996%" y="175.50"></text></g><g><title>match_checking (1,870,530 samples, 0.16%)</title><rect x="17.3476%" y="149" width="0.1564%" height="15" fill="rgb(221,200,47)"/><text x="17.5976%" y="159.50"></text></g><g><title>check_match (1,760,999 samples, 0.15%)</title><rect x="17.3568%" y="133" width="0.1473%" height="15" fill="rgb(226,26,5)"/><text x="17.6068%" y="143.50"></text></g><g><title>crate_lints (3,715,629 samples, 0.31%)</title><rect x="17.6453%" y="133" width="0.3107%" height="15" fill="rgb(249,33,26)"/><text x="17.8953%" y="143.50"></text></g><g><title>lint_checking (4,749,030 samples, 0.40%)</title><rect x="17.6451%" y="149" width="0.3971%" height="15" fill="rgb(235,183,28)"/><text x="17.8951%" y="159.50"></text></g><g><title>privacy_checking_modules (1,829,179 samples, 0.15%)</title><rect x="18.0977%" y="149" width="0.1530%" height="15" fill="rgb(221,5,38)"/><text x="18.3477%" y="159.50"></text></g><g><title>check_mod_privacy (1,824,629 samples, 0.15%)</title><rect x="18.0980%" y="133" width="0.1526%" height="15" fill="rgb(247,18,42)"/><text x="18.3480%" y="143.50"></text></g><g><title>misc_checking_3 (8,953,724 samples, 0.75%)</title><rect x="17.5041%" y="165" width="0.7487%" height="15" fill="rgb(241,131,45)"/><text x="17.7541%" y="175.50"></text></g><g><title>impl_parent (2,635,825 samples, 0.22%)</title><rect x="18.7001%" y="101" width="0.2204%" height="15" fill="rgb(249,31,29)"/><text x="18.9501%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,531,772 samples, 0.13%)</title><rect x="18.7924%" y="85" width="0.1281%" height="15" fill="rgb(225,111,53)"/><text x="19.0424%" y="95.50"></text></g><g><title>impl_trait_ref (5,727,200 samples, 0.48%)</title><rect x="18.9205%" y="101" width="0.4789%" height="15" fill="rgb(238,160,17)"/><text x="19.1705%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,456,286 samples, 0.37%)</title><rect x="19.0267%" y="85" width="0.3726%" height="15" fill="rgb(214,148,48)"/><text x="19.2767%" y="95.50"></text></g><g><title>coherent_trait (14,461,673 samples, 1.21%)</title><rect x="18.2737%" y="133" width="1.2093%" height="15" fill="rgb(232,36,49)"/><text x="18.5237%" y="143.50"></text></g><g><title>specialization_graph_of (13,999,058 samples, 1.17%)</title><rect x="18.3124%" y="117" width="1.1706%" height="15" fill="rgb(209,103,24)"/><text x="18.5624%" y="127.50"></text></g><g><title>coherence_checking (14,643,364 samples, 1.22%)</title><rect x="18.2716%" y="149" width="1.2245%" height="15" fill="rgb(229,88,8)"/><text x="18.5216%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,766,428 samples, 0.15%)</title><rect x="22.4326%" y="85" width="0.1477%" height="15" fill="rgb(213,181,19)"/><text x="22.6826%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,725,218 samples, 0.14%)</title><rect x="22.4361%" y="69" width="0.1443%" height="15" fill="rgb(254,191,54)"/><text x="22.6861%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,682,988 samples, 0.14%)</title><rect x="22.4396%" y="53" width="0.1407%" height="15" fill="rgb(241,83,37)"/><text x="22.6896%" y="63.50"></text></g><g><title>evaluate_obligation (5,184,233 samples, 0.43%)</title><rect x="22.2452%" y="101" width="0.4335%" height="15" fill="rgb(233,36,39)"/><text x="22.4952%" y="111.50"></text></g><g><title>typeck (21,127,574 samples, 1.77%)</title><rect x="22.8865%" y="101" width="1.7667%" height="15" fill="rgb(226,3,54)"/><text x="23.1365%" y="111.50"></text></g><g><title>item_bodies_checking (61,723,922 samples, 5.16%)</title><rect x="19.5021%" y="149" width="5.1615%" height="15" fill="rgb(245,192,40)"/><text x="19.7521%" y="159.50">item_b..</text></g><g><title>typeck_item_bodies (61,719,732 samples, 5.16%)</title><rect x="19.5024%" y="133" width="5.1611%" height="15" fill="rgb(238,167,29)"/><text x="19.7524%" y="143.50">typeck..</text></g><g><title>typeck (61,428,871 samples, 5.14%)</title><rect x="19.5268%" y="117" width="5.1368%" height="15" fill="rgb(232,182,51)"/><text x="19.7768%" y="127.50">typeck</text></g><g><title>item_types_checking (2,027,931 samples, 0.17%)</title><rect x="24.6636%" y="149" width="0.1696%" height="15" fill="rgb(231,60,39)"/><text x="24.9136%" y="159.50"></text></g><g><title>check_mod_item_types (2,021,361 samples, 0.17%)</title><rect x="24.6641%" y="133" width="0.1690%" height="15" fill="rgb(208,69,12)"/><text x="24.9141%" y="143.50"></text></g><g><title>generics_of (1,311,306 samples, 0.11%)</title><rect x="24.9735%" y="117" width="0.1097%" height="15" fill="rgb(235,93,37)"/><text x="25.2235%" y="127.50"></text></g><g><title>type_collecting (4,192,034 samples, 0.35%)</title><rect x="24.8340%" y="149" width="0.3505%" height="15" fill="rgb(213,116,39)"/><text x="25.0840%" y="159.50"></text></g><g><title>collect_mod_item_types (4,177,454 samples, 0.35%)</title><rect x="24.8353%" y="133" width="0.3493%" height="15" fill="rgb(222,207,29)"/><text x="25.0853%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,689,493 samples, 0.56%)</title><rect x="25.2256%" y="133" width="0.5594%" height="15" fill="rgb(206,96,30)"/><text x="25.4756%" y="143.50"></text></g><g><title>analysis (167,676,358 samples, 14.02%)</title><rect x="12.1101%" y="181" width="14.0214%" height="15" fill="rgb(218,138,4)"/><text x="12.3601%" y="191.50">analysis</text></g><g><title>type_check_crate (94,218,744 samples, 7.88%)</title><rect x="18.2528%" y="165" width="7.8788%" height="15" fill="rgb(250,191,14)"/><text x="18.5028%" y="175.50">type_check_..</text></g><g><title>wf_checking (11,305,260 samples, 0.95%)</title><rect x="25.1862%" y="149" width="0.9454%" height="15" fill="rgb(239,60,40)"/><text x="25.4362%" y="159.50"></text></g><g><title>check_item_well_formed (4,144,472 samples, 0.35%)</title><rect x="25.7850%" y="133" width="0.3466%" height="15" fill="rgb(206,27,48)"/><text x="26.0350%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,998,712 samples, 0.17%)</title><rect x="34.3150%" y="149" width="0.1671%" height="15" fill="rgb(225,35,8)"/><text x="34.5650%" y="159.50"></text></g><g><title>layout_of (2,165,608 samples, 0.18%)</title><rect x="35.0407%" y="133" width="0.1811%" height="15" fill="rgb(250,213,24)"/><text x="35.2907%" y="143.50"></text></g><g><title>predicates_of (1,411,255 samples, 0.12%)</title><rect x="35.4580%" y="117" width="0.1180%" height="15" fill="rgb(247,123,22)"/><text x="35.7080%" y="127.50"></text></g><g><title>param_env (4,246,097 samples, 0.36%)</title><rect x="35.2218%" y="133" width="0.3551%" height="15" fill="rgb(231,138,38)"/><text x="35.4718%" y="143.50"></text></g><g><title>fn_abi_of_instance (13,227,119 samples, 1.11%)</title><rect x="34.5407%" y="149" width="1.1061%" height="15" fill="rgb(231,145,46)"/><text x="34.7907%" y="159.50"></text></g><g><title>layout_of (1,354,625 samples, 0.11%)</title><rect x="35.8044%" y="133" width="0.1133%" height="15" fill="rgb(251,118,11)"/><text x="36.0544%" y="143.50"></text></g><g><title>layout_of (2,692,439 samples, 0.23%)</title><rect x="35.6996%" y="149" width="0.2251%" height="15" fill="rgb(217,147,25)"/><text x="35.9496%" y="159.50"></text></g><g><title>codegen_module (115,808,792 samples, 9.68%)</title><rect x="26.3445%" y="165" width="9.6842%" height="15" fill="rgb(247,81,37)"/><text x="26.5945%" y="175.50">codegen_module</text></g><g><title>codegen_crate (118,427,050 samples, 9.90%)</title><rect x="26.1326%" y="181" width="9.9031%" height="15" fill="rgb(209,12,38)"/><text x="26.3826%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (567,802,397 samples, 47.48%)</title><rect x="36.0577%" y="165" width="47.4807%" height="15" fill="rgb(227,1,9)"/><text x="36.3077%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (546,795,131 samples, 45.72%)</title><rect x="37.8144%" y="149" width="45.7241%" height="15" fill="rgb(248,47,43)"/><text x="38.0644%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (596,899,326 samples, 49.91%)</title><rect x="36.0357%" y="181" width="49.9139%" height="15" fill="rgb(221,10,30)"/><text x="36.2857%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (28,833,384 samples, 2.41%)</title><rect x="83.5384%" y="165" width="2.4111%" height="15" fill="rgb(210,229,1)"/><text x="83.7884%" y="175.50">LL..</text></g><g><title>metadata_register_crate (2,627,758 samples, 0.22%)</title><rect x="90.3126%" y="133" width="0.2197%" height="15" fill="rgb(222,148,37)"/><text x="90.5626%" y="143.50"></text></g><g><title>macro_expand_crate (54,966,450 samples, 4.60%)</title><rect x="86.0359%" y="165" width="4.5964%" height="15" fill="rgb(234,67,33)"/><text x="86.2859%" y="175.50">macro..</text></g><g><title>expand_crate (54,953,210 samples, 4.60%)</title><rect x="86.0370%" y="149" width="4.5953%" height="15" fill="rgb(247,98,35)"/><text x="86.2870%" y="159.50">expan..</text></g><g><title>late_resolve_crate (3,684,368 samples, 0.31%)</title><rect x="90.6820%" y="149" width="0.3081%" height="15" fill="rgb(247,138,52)"/><text x="90.9320%" y="159.50"></text></g><g><title>configure_and_expand (60,521,538 samples, 5.06%)</title><rect x="85.9495%" y="181" width="5.0609%" height="15" fill="rgb(213,79,30)"/><text x="86.1995%" y="191.50">config..</text></g><g><title>resolve_crate (4,317,656 samples, 0.36%)</title><rect x="90.6494%" y="165" width="0.3611%" height="15" fill="rgb(246,177,23)"/><text x="90.8994%" y="175.50"></text></g><g><title>free_global_ctxt (7,666,731 samples, 0.64%)</title><rect x="91.1636%" y="181" width="0.6411%" height="15" fill="rgb(230,62,27)"/><text x="91.4136%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,461,562 samples, 0.12%)</title><rect x="92.4143%" y="101" width="0.1222%" height="15" fill="rgb(216,154,8)"/><text x="92.6643%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,799,929 samples, 0.15%)</title><rect x="93.4360%" y="85" width="0.1505%" height="15" fill="rgb(244,35,45)"/><text x="93.6860%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,089,635 samples, 0.68%)</title><rect x="93.5865%" y="85" width="0.6765%" height="15" fill="rgb(251,115,12)"/><text x="93.8365%" y="95.50"></text></g><g><title>optimized_mir (20,545,072 samples, 1.72%)</title><rect x="92.6320%" y="101" width="1.7180%" height="15" fill="rgb(240,54,50)"/><text x="92.8820%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,142,105 samples, 0.26%)</title><rect x="94.4695%" y="85" width="0.2627%" height="15" fill="rgb(233,84,52)"/><text x="94.7195%" y="95.50"></text></g><g><title>specialization_graph_of (3,029,073 samples, 0.25%)</title><rect x="94.8640%" y="85" width="0.2533%" height="15" fill="rgb(207,117,47)"/><text x="95.1140%" y="95.50"></text></g><g><title>impl_trait_ref (1,254,352 samples, 0.10%)</title><rect x="95.0124%" y="69" width="0.1049%" height="15" fill="rgb(249,43,39)"/><text x="95.2624%" y="79.50"></text></g><g><title>resolve_instance (10,210,333 samples, 0.85%)</title><rect x="94.3501%" y="101" width="0.8538%" height="15" fill="rgb(209,38,44)"/><text x="94.6001%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (39,952,431 samples, 3.34%)</title><rect x="92.0848%" y="117" width="3.3409%" height="15" fill="rgb(236,212,23)"/><text x="92.3348%" y="127.50">mon..</text></g><g><title>vtable_entries (1,569,417 samples, 0.13%)</title><rect x="95.2945%" y="101" width="0.1312%" height="15" fill="rgb(242,79,21)"/><text x="95.5445%" y="111.50"></text></g><g><title>monomorphization_collector (40,192,423 samples, 3.36%)</title><rect x="92.0844%" y="133" width="3.3610%" height="15" fill="rgb(211,96,35)"/><text x="92.3344%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,962,971 samples, 0.25%)</title><rect x="95.4458%" y="117" width="0.2478%" height="15" fill="rgb(253,215,40)"/><text x="95.6958%" y="127.50"></text></g><g><title>symbol_name (2,604,529 samples, 0.22%)</title><rect x="95.4758%" y="101" width="0.2178%" height="15" fill="rgb(211,81,21)"/><text x="95.7258%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (44,768,232 samples, 3.74%)</title><rect x="92.0807%" y="149" width="3.7436%" height="15" fill="rgb(208,190,38)"/><text x="92.3307%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (4,531,478 samples, 0.38%)</title><rect x="95.4454%" y="133" width="0.3789%" height="15" fill="rgb(235,213,38)"/><text x="95.6954%" y="143.50"></text></g><g><title>cgu_partitioning (1,563,887 samples, 0.13%)</title><rect x="95.6936%" y="117" width="0.1308%" height="15" fill="rgb(237,122,38)"/><text x="95.9436%" y="127.50"></text></g><g><title>exported_symbols (45,101,235 samples, 3.77%)</title><rect x="92.0692%" y="165" width="3.7715%" height="15" fill="rgb(244,218,35)"/><text x="92.3192%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,160,250 samples, 0.18%)</title><rect x="96.0954%" y="149" width="0.1806%" height="15" fill="rgb(240,68,47)"/><text x="96.3454%" y="159.50"></text></g><g><title>optimized_mir (4,927,740 samples, 0.41%)</title><rect x="95.8667%" y="165" width="0.4121%" height="15" fill="rgb(210,16,53)"/><text x="96.1167%" y="175.50"></text></g><g><title>generate_crate_metadata (53,621,605 samples, 4.48%)</title><rect x="91.8047%" y="181" width="4.4839%" height="15" fill="rgb(235,124,12)"/><text x="92.0547%" y="191.50">gener..</text></g><g><title>hir_lowering (7,145,135 samples, 0.60%)</title><rect x="96.2886%" y="181" width="0.5975%" height="15" fill="rgb(224,169,11)"/><text x="96.5386%" y="191.50"></text></g><g><title>finish_ongoing_codegen (26,573,920 samples, 2.22%)</title><rect x="96.8874%" y="165" width="2.2222%" height="15" fill="rgb(250,166,2)"/><text x="97.1374%" y="175.50">f..</text></g><g><title>link_crate (3,104,092 samples, 0.26%)</title><rect x="99.1096%" y="165" width="0.2596%" height="15" fill="rgb(242,216,29)"/><text x="99.3596%" y="175.50"></text></g><g><title>link_binary (3,063,402 samples, 0.26%)</title><rect x="99.1130%" y="149" width="0.2562%" height="15" fill="rgb(230,116,27)"/><text x="99.3630%" y="159.50"></text></g><g><title>link_rlib (2,388,355 samples, 0.20%)</title><rect x="99.1695%" y="133" width="0.1997%" height="15" fill="rgb(228,99,48)"/><text x="99.4195%" y="143.50"></text></g><g><title>link (29,704,933 samples, 2.48%)</title><rect x="96.8861%" y="181" width="2.4840%" height="15" fill="rgb(253,11,6)"/><text x="97.1361%" y="191.50">li..</text></g><g><title>parse_crate (2,594,737 samples, 0.22%)</title><rect x="99.3701%" y="181" width="0.2170%" height="15" fill="rgb(247,143,39)"/><text x="99.6201%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,131,743 samples, 0.35%)</title><rect x="99.6073%" y="181" width="0.3455%" height="15" fill="rgb(236,97,10)"/><text x="99.8573%" y="191.50"></text></g><g><title>all (1,195,858,485 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,195,858,485 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>