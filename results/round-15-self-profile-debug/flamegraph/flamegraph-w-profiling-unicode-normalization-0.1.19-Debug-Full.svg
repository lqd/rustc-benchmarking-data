<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (137,976,033 samples, 8.53%)</title><rect x="0.0413%" y="213" width="8.5309%" height="15" fill="rgb(227,0,7)"/><text x="0.2913%" y="223.50">LLVM_passes</text></g><g><title>thir_body (4,293,607 samples, 0.27%)</title><rect x="30.2667%" y="101" width="0.2655%" height="15" fill="rgb(217,0,24)"/><text x="30.5167%" y="111.50"></text></g><g><title>mir_const (152,108,695 samples, 9.40%)</title><rect x="21.1297%" y="149" width="9.4047%" height="15" fill="rgb(221,193,54)"/><text x="21.3797%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (149,525,394 samples, 9.24%)</title><rect x="21.2894%" y="133" width="9.2449%" height="15" fill="rgb(248,212,6)"/><text x="21.5394%" y="143.50">unsafety_chec..</text></g><g><title>mir_built (148,152,151 samples, 9.16%)</title><rect x="21.3743%" y="117" width="9.1600%" height="15" fill="rgb(208,68,35)"/><text x="21.6243%" y="127.50">mir_built</text></g><g><title>thir_body (30,177,313 samples, 1.87%)</title><rect x="32.7842%" y="85" width="1.8658%" height="15" fill="rgb(232,128,0)"/><text x="33.0342%" y="95.50">t..</text></g><g><title>lit_to_const (3,076,173 samples, 0.19%)</title><rect x="34.4598%" y="69" width="0.1902%" height="15" fill="rgb(207,160,47)"/><text x="34.7098%" y="79.50"></text></g><g><title>mir_const_qualif (66,568,919 samples, 4.12%)</title><rect x="30.5343%" y="149" width="4.1159%" height="15" fill="rgb(228,23,34)"/><text x="30.7843%" y="159.50">mir_..</text></g><g><title>mir_const (64,874,632 samples, 4.01%)</title><rect x="30.6391%" y="133" width="4.0111%" height="15" fill="rgb(218,30,26)"/><text x="30.8891%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (62,176,996 samples, 3.84%)</title><rect x="30.8059%" y="117" width="3.8443%" height="15" fill="rgb(220,122,19)"/><text x="31.0559%" y="127.50">unsa..</text></g><g><title>mir_built (60,195,793 samples, 3.72%)</title><rect x="30.9284%" y="101" width="3.7218%" height="15" fill="rgb(250,228,42)"/><text x="31.1784%" y="111.50">mir_..</text></g><g><title>mir_promoted (247,023,816 samples, 15.27%)</title><rect x="19.3773%" y="165" width="15.2731%" height="15" fill="rgb(240,193,28)"/><text x="19.6273%" y="175.50">mir_promoted</text></g><g><title>type_op_prove_predicate (4,134,540 samples, 0.26%)</title><rect x="34.7646%" y="165" width="0.2556%" height="15" fill="rgb(216,20,37)"/><text x="35.0146%" y="175.50"></text></g><g><title>MIR_borrow_checking (424,760,199 samples, 26.26%)</title><rect x="8.7583%" y="197" width="26.2623%" height="15" fill="rgb(206,188,39)"/><text x="9.0083%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (424,475,765 samples, 26.24%)</title><rect x="8.7759%" y="181" width="26.2447%" height="15" fill="rgb(217,207,13)"/><text x="9.0259%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,810,690 samples, 0.11%)</title><rect x="35.0206%" y="197" width="0.1120%" height="15" fill="rgb(231,73,38)"/><text x="35.2706%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,658,927 samples, 0.10%)</title><rect x="35.0300%" y="181" width="0.1026%" height="15" fill="rgb(225,20,46)"/><text x="35.2800%" y="191.50"></text></g><g><title>check_mod_attrs (3,853,230 samples, 0.24%)</title><rect x="35.1782%" y="181" width="0.2382%" height="15" fill="rgb(210,31,41)"/><text x="35.4282%" y="191.50"></text></g><g><title>misc_checking_1 (6,035,195 samples, 0.37%)</title><rect x="35.1753%" y="197" width="0.3731%" height="15" fill="rgb(221,200,47)"/><text x="35.4253%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (2,767,569 samples, 0.17%)</title><rect x="35.5487%" y="181" width="0.1711%" height="15" fill="rgb(226,26,5)"/><text x="35.7987%" y="191.50"></text></g><g><title>check_mod_liveness (1,803,330 samples, 0.11%)</title><rect x="35.6083%" y="165" width="0.1115%" height="15" fill="rgb(249,33,26)"/><text x="35.8583%" y="175.50"></text></g><g><title>eval_to_const_value_raw (2,277,845 samples, 0.14%)</title><rect x="36.2476%" y="149" width="0.1408%" height="15" fill="rgb(235,183,28)"/><text x="36.4976%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,266,365 samples, 0.14%)</title><rect x="36.2483%" y="133" width="0.1401%" height="15" fill="rgb(221,5,38)"/><text x="36.4983%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,251,335 samples, 0.14%)</title><rect x="36.2493%" y="117" width="0.1392%" height="15" fill="rgb(247,18,42)"/><text x="36.4993%" y="127.50"></text></g><g><title>misc_checking_2 (14,426,114 samples, 0.89%)</title><rect x="35.5485%" y="197" width="0.8919%" height="15" fill="rgb(241,131,45)"/><text x="35.7985%" y="207.50"></text></g><g><title>match_checking (11,654,865 samples, 0.72%)</title><rect x="35.7198%" y="181" width="0.7206%" height="15" fill="rgb(249,31,29)"/><text x="35.9698%" y="191.50"></text></g><g><title>check_match (11,592,415 samples, 0.72%)</title><rect x="35.7237%" y="165" width="0.7167%" height="15" fill="rgb(225,111,53)"/><text x="35.9737%" y="175.50"></text></g><g><title>eval_to_const_value_raw (75,880,071 samples, 4.69%)</title><rect x="37.9209%" y="85" width="4.6916%" height="15" fill="rgb(238,160,17)"/><text x="38.1709%" y="95.50">eval_..</text></g><g><title>eval_to_const_value_raw (75,867,461 samples, 4.69%)</title><rect x="37.9216%" y="69" width="4.6908%" height="15" fill="rgb(214,148,48)"/><text x="38.1716%" y="79.50">eval_..</text></g><g><title>eval_to_allocation_raw (75,830,679 samples, 4.69%)</title><rect x="37.9239%" y="53" width="4.6885%" height="15" fill="rgb(232,36,49)"/><text x="38.1739%" y="63.50">eval_..</text></g><g><title>promoted_mir (15,575,476 samples, 0.96%)</title><rect x="41.6494%" y="37" width="0.9630%" height="15" fill="rgb(209,103,24)"/><text x="41.8994%" y="47.50"></text></g><g><title>eval_to_const_value_raw (92,720,452 samples, 5.73%)</title><rect x="36.8813%" y="149" width="5.7328%" height="15" fill="rgb(229,88,8)"/><text x="37.1313%" y="159.50">eval_to..</text></g><g><title>eval_to_const_value_raw (92,701,912 samples, 5.73%)</title><rect x="36.8824%" y="133" width="5.7316%" height="15" fill="rgb(213,181,19)"/><text x="37.1324%" y="143.50">eval_to..</text></g><g><title>eval_to_allocation_raw (92,653,470 samples, 5.73%)</title><rect x="36.8854%" y="117" width="5.7286%" height="15" fill="rgb(254,191,54)"/><text x="37.1354%" y="127.50">eval_to..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (76,022,523 samples, 4.70%)</title><rect x="37.9137%" y="101" width="4.7004%" height="15" fill="rgb(241,83,37)"/><text x="38.1637%" y="111.50">try_n..</text></g><g><title>crate_lints (99,554,904 samples, 6.16%)</title><rect x="36.5737%" y="165" width="6.1553%" height="15" fill="rgb(233,36,39)"/><text x="36.8237%" y="175.50">crate_li..</text></g><g><title>lint_checking (110,012,696 samples, 6.80%)</title><rect x="36.5735%" y="181" width="6.8019%" height="15" fill="rgb(226,3,54)"/><text x="36.8235%" y="191.50">lint_chec..</text></g><g><title>module_lints (10,454,272 samples, 0.65%)</title><rect x="42.7291%" y="165" width="0.6464%" height="15" fill="rgb(245,192,40)"/><text x="42.9791%" y="175.50"></text></g><g><title>lint_mod (10,440,510 samples, 0.65%)</title><rect x="42.7299%" y="149" width="0.6455%" height="15" fill="rgb(238,167,29)"/><text x="42.9799%" y="159.50"></text></g><g><title>privacy_checking_modules (8,171,348 samples, 0.51%)</title><rect x="43.4409%" y="181" width="0.5052%" height="15" fill="rgb(232,182,51)"/><text x="43.6909%" y="191.50"></text></g><g><title>check_mod_privacy (8,158,448 samples, 0.50%)</title><rect x="43.4417%" y="165" width="0.5044%" height="15" fill="rgb(231,60,39)"/><text x="43.6917%" y="175.50"></text></g><g><title>misc_checking_3 (121,413,028 samples, 7.51%)</title><rect x="36.4404%" y="197" width="7.5068%" height="15" fill="rgb(208,69,12)"/><text x="36.6904%" y="207.50">misc_check..</text></g><g><title>impl_parent (2,367,172 samples, 0.15%)</title><rect x="44.1529%" y="133" width="0.1464%" height="15" fill="rgb(235,93,37)"/><text x="44.4029%" y="143.50"></text></g><g><title>impl_trait_ref (5,049,510 samples, 0.31%)</title><rect x="44.2993%" y="133" width="0.3122%" height="15" fill="rgb(213,116,39)"/><text x="44.5493%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,021,820 samples, 0.25%)</title><rect x="44.3628%" y="117" width="0.2487%" height="15" fill="rgb(222,207,29)"/><text x="44.6128%" y="127.50"></text></g><g><title>coherent_trait (11,240,059 samples, 0.69%)</title><rect x="43.9565%" y="165" width="0.6950%" height="15" fill="rgb(206,96,30)"/><text x="44.2065%" y="175.50"></text></g><g><title>specialization_graph_of (11,222,159 samples, 0.69%)</title><rect x="43.9576%" y="149" width="0.6938%" height="15" fill="rgb(218,138,4)"/><text x="44.2076%" y="159.50"></text></g><g><title>coherence_checking (11,331,031 samples, 0.70%)</title><rect x="43.9552%" y="181" width="0.7006%" height="15" fill="rgb(250,191,14)"/><text x="44.2052%" y="191.50"></text></g><g><title>evaluate_obligation (6,438,277 samples, 0.40%)</title><rect x="46.3788%" y="133" width="0.3981%" height="15" fill="rgb(239,60,40)"/><text x="46.6288%" y="143.50"></text></g><g><title>typeck (6,084,225 samples, 0.38%)</title><rect x="46.8958%" y="133" width="0.3762%" height="15" fill="rgb(206,27,48)"/><text x="47.1458%" y="143.50"></text></g><g><title>item_bodies_checking (42,330,052 samples, 2.62%)</title><rect x="44.6589%" y="181" width="2.6172%" height="15" fill="rgb(225,35,8)"/><text x="44.9089%" y="191.50">it..</text></g><g><title>typeck_item_bodies (42,326,222 samples, 2.62%)</title><rect x="44.6591%" y="165" width="2.6170%" height="15" fill="rgb(250,213,24)"/><text x="44.9091%" y="175.50">ty..</text></g><g><title>typeck (42,196,902 samples, 2.61%)</title><rect x="44.6671%" y="149" width="2.6090%" height="15" fill="rgb(247,123,22)"/><text x="44.9171%" y="159.50">ty..</text></g><g><title>item_types_checking (140,890,196 samples, 8.71%)</title><rect x="47.2761%" y="181" width="8.7110%" height="15" fill="rgb(231,138,38)"/><text x="47.5261%" y="191.50">item_types_c..</text></g><g><title>check_mod_item_types (140,873,946 samples, 8.71%)</title><rect x="47.2771%" y="165" width="8.7100%" height="15" fill="rgb(231,145,46)"/><text x="47.5271%" y="175.50">check_mod_it..</text></g><g><title>typeck (139,312,660 samples, 8.61%)</title><rect x="47.3736%" y="149" width="8.6135%" height="15" fill="rgb(251,118,11)"/><text x="47.6236%" y="159.50">typeck</text></g><g><title>late_bound_vars_map (2,555,216 samples, 0.16%)</title><rect x="56.1242%" y="101" width="0.1580%" height="15" fill="rgb(217,147,25)"/><text x="56.3742%" y="111.50"></text></g><g><title>resolve_lifetimes (2,537,606 samples, 0.16%)</title><rect x="56.1253%" y="85" width="0.1569%" height="15" fill="rgb(247,81,37)"/><text x="56.3753%" y="95.50"></text></g><g><title>lint_levels (2,274,284 samples, 0.14%)</title><rect x="56.1416%" y="69" width="0.1406%" height="15" fill="rgb(209,12,38)"/><text x="56.3916%" y="79.50"></text></g><g><title>explicit_predicates_of (3,153,243 samples, 0.19%)</title><rect x="56.1026%" y="117" width="0.1950%" height="15" fill="rgb(227,1,9)"/><text x="56.3526%" y="127.50"></text></g><g><title>predicates_of (3,566,780 samples, 0.22%)</title><rect x="56.0908%" y="149" width="0.2205%" height="15" fill="rgb(248,47,43)"/><text x="56.3408%" y="159.50"></text></g><g><title>predicates_defined_on (3,495,698 samples, 0.22%)</title><rect x="56.0952%" y="133" width="0.2161%" height="15" fill="rgb(221,10,30)"/><text x="56.3452%" y="143.50"></text></g><g><title>type_collecting (5,980,644 samples, 0.37%)</title><rect x="55.9873%" y="181" width="0.3698%" height="15" fill="rgb(210,229,1)"/><text x="56.2373%" y="191.50"></text></g><g><title>collect_mod_item_types (5,961,213 samples, 0.37%)</title><rect x="55.9885%" y="165" width="0.3686%" height="15" fill="rgb(222,148,37)"/><text x="56.2385%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,189,092 samples, 0.14%)</title><rect x="56.3895%" y="165" width="0.1353%" height="15" fill="rgb(234,67,33)"/><text x="56.6395%" y="175.50"></text></g><g><title>region_scope_tree (4,355,149 samples, 0.27%)</title><rect x="56.7678%" y="149" width="0.2693%" height="15" fill="rgb(247,98,35)"/><text x="57.0178%" y="159.50"></text></g><g><title>check_item_well_formed (8,531,662 samples, 0.53%)</title><rect x="56.5249%" y="165" width="0.5275%" height="15" fill="rgb(247,138,52)"/><text x="56.7749%" y="175.50"></text></g><g><title>analysis (784,326,372 samples, 48.49%)</title><rect x="8.5721%" y="213" width="48.4937%" height="15" fill="rgb(213,79,30)"/><text x="8.8221%" y="223.50">analysis</text></g><g><title>type_check_crate (212,178,377 samples, 13.12%)</title><rect x="43.9472%" y="197" width="13.1187%" height="15" fill="rgb(246,177,23)"/><text x="44.1972%" y="207.50">type_check_crate</text></g><g><title>wf_checking (11,453,873 samples, 0.71%)</title><rect x="56.3577%" y="181" width="0.7082%" height="15" fill="rgb(230,62,27)"/><text x="56.6077%" y="191.50"></text></g><g><title>param_env (2,993,767 samples, 0.19%)</title><rect x="61.0161%" y="165" width="0.1851%" height="15" fill="rgb(216,154,8)"/><text x="61.2661%" y="175.50"></text></g><g><title>fn_abi_of_instance (7,747,361 samples, 0.48%)</title><rect x="60.7678%" y="181" width="0.4790%" height="15" fill="rgb(244,35,45)"/><text x="61.0178%" y="191.50"></text></g><g><title>codegen_module (66,899,085 samples, 4.14%)</title><rect x="57.2479%" y="197" width="4.1363%" height="15" fill="rgb(251,115,12)"/><text x="57.4979%" y="207.50">codeg..</text></g><g><title>codegen_crate (69,964,138 samples, 4.33%)</title><rect x="57.0665%" y="213" width="4.3258%" height="15" fill="rgb(240,54,50)"/><text x="57.3165%" y="223.50">codeg..</text></g><g><title>LLVM_module_codegen (281,652,371 samples, 17.41%)</title><rect x="61.4071%" y="197" width="17.4142%" height="15" fill="rgb(233,84,52)"/><text x="61.6571%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (260,335,152 samples, 16.10%)</title><rect x="62.7251%" y="181" width="16.0961%" height="15" fill="rgb(207,117,47)"/><text x="62.9751%" y="191.50">LLVM_module_codegen_emit_..</text></g><g><title>codegen_module_optimize (304,841,295 samples, 18.85%)</title><rect x="61.3922%" y="213" width="18.8479%" height="15" fill="rgb(249,43,39)"/><text x="61.6422%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (22,948,523 samples, 1.42%)</title><rect x="78.8213%" y="197" width="1.4189%" height="15" fill="rgb(209,38,44)"/><text x="79.0713%" y="207.50"></text></g><g><title>metadata_register_crate (2,500,746 samples, 0.15%)</title><rect x="86.1416%" y="165" width="0.1546%" height="15" fill="rgb(236,212,23)"/><text x="86.3916%" y="175.50"></text></g><g><title>macro_expand_crate (99,464,213 samples, 6.15%)</title><rect x="80.3845%" y="197" width="6.1497%" height="15" fill="rgb(242,79,21)"/><text x="80.6345%" y="207.50">macro_ex..</text></g><g><title>expand_crate (99,449,003 samples, 6.15%)</title><rect x="80.3854%" y="181" width="6.1488%" height="15" fill="rgb(211,96,35)"/><text x="80.6354%" y="191.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (3,848,872 samples, 0.24%)</title><rect x="86.2963%" y="165" width="0.2380%" height="15" fill="rgb(253,215,40)"/><text x="86.5463%" y="175.50"></text></g><g><title>late_resolve_crate (5,092,234 samples, 0.31%)</title><rect x="86.5593%" y="181" width="0.3148%" height="15" fill="rgb(211,81,21)"/><text x="86.8093%" y="191.50"></text></g><g><title>configure_and_expand (109,557,430 samples, 6.77%)</title><rect x="80.2401%" y="213" width="6.7738%" height="15" fill="rgb(208,190,38)"/><text x="80.4901%" y="223.50">configure..</text></g><g><title>resolve_crate (7,655,242 samples, 0.47%)</title><rect x="86.5406%" y="197" width="0.4733%" height="15" fill="rgb(235,213,38)"/><text x="86.7906%" y="207.50"></text></g><g><title>drop_ast (4,302,797 samples, 0.27%)</title><rect x="87.0139%" y="213" width="0.2660%" height="15" fill="rgb(237,122,38)"/><text x="87.2639%" y="223.50"></text></g><g><title>early_lint_checks (6,151,786 samples, 0.38%)</title><rect x="87.2822%" y="213" width="0.3804%" height="15" fill="rgb(244,218,35)"/><text x="87.5322%" y="223.50"></text></g><g><title>free_global_ctxt (22,519,720 samples, 1.39%)</title><rect x="87.6626%" y="213" width="1.3924%" height="15" fill="rgb(240,68,47)"/><text x="87.9126%" y="223.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,806,791 samples, 0.11%)</title><rect x="91.8520%" y="117" width="0.1117%" height="15" fill="rgb(210,16,53)"/><text x="92.1020%" y="127.50"></text></g><g><title>optimized_mir (4,431,698 samples, 0.27%)</title><rect x="91.7380%" y="133" width="0.2740%" height="15" fill="rgb(235,124,12)"/><text x="91.9880%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,902,391 samples, 0.12%)</title><rect x="92.0700%" y="117" width="0.1176%" height="15" fill="rgb(224,169,11)"/><text x="92.3200%" y="127.50"></text></g><g><title>specialization_graph_of (1,962,040 samples, 0.12%)</title><rect x="92.2323%" y="117" width="0.1213%" height="15" fill="rgb(250,166,2)"/><text x="92.4823%" y="127.50"></text></g><g><title>resolve_instance (5,851,222 samples, 0.36%)</title><rect x="92.0120%" y="133" width="0.3618%" height="15" fill="rgb(242,216,29)"/><text x="92.2620%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (15,553,916 samples, 0.96%)</title><rect x="91.4965%" y="149" width="0.9617%" height="15" fill="rgb(230,116,27)"/><text x="91.7465%" y="159.50"></text></g><g><title>monomorphization_collector (15,877,249 samples, 0.98%)</title><rect x="91.4962%" y="165" width="0.9817%" height="15" fill="rgb(228,99,48)"/><text x="91.7462%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (18,602,808 samples, 1.15%)</title><rect x="91.4934%" y="181" width="1.1502%" height="15" fill="rgb(253,11,6)"/><text x="91.7434%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (2,680,459 samples, 0.17%)</title><rect x="92.4778%" y="165" width="0.1657%" height="15" fill="rgb(247,143,39)"/><text x="92.7278%" y="175.50"></text></g><g><title>exported_symbols (19,013,993 samples, 1.18%)</title><rect x="91.4891%" y="197" width="1.1756%" height="15" fill="rgb(236,97,10)"/><text x="91.7391%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,106,984 samples, 0.81%)</title><rect x="93.5095%" y="181" width="0.8104%" height="15" fill="rgb(233,208,19)"/><text x="93.7595%" y="191.50"></text></g><g><title>optimized_mir (26,693,916 samples, 1.65%)</title><rect x="92.6728%" y="197" width="1.6504%" height="15" fill="rgb(216,164,2)"/><text x="92.9228%" y="207.50"></text></g><g><title>generate_crate_metadata (85,316,651 samples, 5.28%)</title><rect x="89.0549%" y="213" width="5.2750%" height="15" fill="rgb(220,129,5)"/><text x="89.3049%" y="223.50">genera..</text></g><g><title>hir_lowering (19,503,578 samples, 1.21%)</title><rect x="94.3299%" y="213" width="1.2059%" height="15" fill="rgb(242,17,10)"/><text x="94.5799%" y="223.50"></text></g><g><title>finish_ongoing_codegen (50,540,500 samples, 3.12%)</title><rect x="95.5373%" y="197" width="3.1248%" height="15" fill="rgb(242,107,0)"/><text x="95.7873%" y="207.50">fin..</text></g><g><title>link_crate (15,417,485 samples, 0.95%)</title><rect x="98.6622%" y="197" width="0.9532%" height="15" fill="rgb(251,28,31)"/><text x="98.9122%" y="207.50"></text></g><g><title>link_binary (15,334,125 samples, 0.95%)</title><rect x="98.6673%" y="181" width="0.9481%" height="15" fill="rgb(233,223,10)"/><text x="98.9173%" y="191.50"></text></g><g><title>link_rlib (13,206,642 samples, 0.82%)</title><rect x="98.7989%" y="165" width="0.8165%" height="15" fill="rgb(215,21,27)"/><text x="99.0489%" y="175.50"></text></g><g><title>link (65,997,776 samples, 4.08%)</title><rect x="95.5358%" y="213" width="4.0805%" height="15" fill="rgb(232,23,21)"/><text x="95.7858%" y="223.50">link</text></g><g><title>self_profile_alloc_query_strings (1,976,252 samples, 0.12%)</title><rect x="99.7059%" y="213" width="0.1222%" height="15" fill="rgb(244,5,23)"/><text x="99.9559%" y="223.50"></text></g><g><title>all (1,617,376,290 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,617,376,290 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (2,692,869 samples, 0.17%)</title><rect x="99.8335%" y="213" width="0.1665%" height="15" fill="rgb(212,68,19)"/><text x="100.0835%" y="223.50"></text></g></svg></svg>