<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,853,039 samples, 2.79%)</title><rect x="0.2359%" y="197" width="2.7890%" height="15" fill="rgb(227,0,7)"/><text x="0.4859%" y="207.50">LL..</text></g><g><title>implied_outlives_bounds (487,534 samples, 0.14%)</title><rect x="13.5396%" y="149" width="0.1380%" height="15" fill="rgb(217,0,24)"/><text x="13.7896%" y="159.50"></text></g><g><title>param_env (423,142 samples, 0.12%)</title><rect x="14.9611%" y="117" width="0.1198%" height="15" fill="rgb(221,193,54)"/><text x="15.2111%" y="127.50"></text></g><g><title>codegen_fn_attrs (414,722 samples, 0.12%)</title><rect x="15.5310%" y="101" width="0.1174%" height="15" fill="rgb(248,212,6)"/><text x="15.7810%" y="111.50"></text></g><g><title>is_copy_raw (1,836,790 samples, 0.52%)</title><rect x="18.1216%" y="69" width="0.5199%" height="15" fill="rgb(208,68,35)"/><text x="18.3716%" y="79.50"></text></g><g><title>evaluate_obligation (1,499,403 samples, 0.42%)</title><rect x="18.2171%" y="53" width="0.4244%" height="15" fill="rgb(232,128,0)"/><text x="18.4671%" y="63.50"></text></g><g><title>needs_drop_raw (2,252,774 samples, 0.64%)</title><rect x="18.0143%" y="85" width="0.6377%" height="15" fill="rgb(207,160,47)"/><text x="18.2643%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (768,013 samples, 0.22%)</title><rect x="18.7725%" y="69" width="0.2174%" height="15" fill="rgb(228,23,34)"/><text x="19.0225%" y="79.50"></text></g><g><title>specialization_graph_of (382,864 samples, 0.11%)</title><rect x="19.0153%" y="69" width="0.1084%" height="15" fill="rgb(218,30,26)"/><text x="19.2653%" y="79.50"></text></g><g><title>resolve_instance (1,783,453 samples, 0.50%)</title><rect x="18.6520%" y="85" width="0.5048%" height="15" fill="rgb(220,122,19)"/><text x="18.9020%" y="95.50"></text></g><g><title>thir_body (3,371,353 samples, 0.95%)</title><rect x="19.1844%" y="85" width="0.9543%" height="15" fill="rgb(250,228,42)"/><text x="19.4344%" y="95.50"></text></g><g><title>mir_const (20,594,594 samples, 5.83%)</title><rect x="14.3376%" y="133" width="5.8295%" height="15" fill="rgb(240,193,28)"/><text x="14.5876%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (17,968,511 samples, 5.09%)</title><rect x="15.0809%" y="117" width="5.0862%" height="15" fill="rgb(216,20,37)"/><text x="15.3309%" y="127.50">unsafe..</text></g><g><title>mir_built (15,963,631 samples, 4.52%)</title><rect x="15.6484%" y="101" width="4.5187%" height="15" fill="rgb(206,188,39)"/><text x="15.8984%" y="111.50">mir_b..</text></g><g><title>mir_promoted (22,756,194 samples, 6.44%)</title><rect x="13.7543%" y="149" width="6.4414%" height="15" fill="rgb(217,207,13)"/><text x="14.0043%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (984,601 samples, 0.28%)</title><rect x="20.1957%" y="149" width="0.2787%" height="15" fill="rgb(231,73,38)"/><text x="20.4457%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,899,603 samples, 0.54%)</title><rect x="20.4744%" y="149" width="0.5377%" height="15" fill="rgb(225,20,46)"/><text x="20.7244%" y="159.50"></text></g><g><title>normalize_projection_ty (1,056,912 samples, 0.30%)</title><rect x="20.7129%" y="133" width="0.2992%" height="15" fill="rgb(210,31,41)"/><text x="20.9629%" y="143.50"></text></g><g><title>type_op_normalize_ty (471,074 samples, 0.13%)</title><rect x="21.1073%" y="149" width="0.1333%" height="15" fill="rgb(221,200,47)"/><text x="21.3573%" y="159.50"></text></g><g><title>type_op_prove_predicate (7,038,235 samples, 1.99%)</title><rect x="21.2406%" y="149" width="1.9922%" height="15" fill="rgb(226,26,5)"/><text x="21.4906%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (70,777,552 samples, 20.03%)</title><rect x="3.2006%" y="181" width="20.0343%" height="15" fill="rgb(249,33,26)"/><text x="3.4506%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (70,478,806 samples, 19.95%)</title><rect x="3.2852%" y="165" width="19.9497%" height="15" fill="rgb(235,183,28)"/><text x="3.5352%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (356,654 samples, 0.10%)</title><rect x="23.2588%" y="181" width="0.1010%" height="15" fill="rgb(221,5,38)"/><text x="23.5088%" y="191.50"></text></g><g><title>codegen_fn_attrs (566,405 samples, 0.16%)</title><rect x="23.5070%" y="149" width="0.1603%" height="15" fill="rgb(247,18,42)"/><text x="23.7570%" y="159.50"></text></g><g><title>check_mod_attrs (1,062,200 samples, 0.30%)</title><rect x="23.3667%" y="165" width="0.3007%" height="15" fill="rgb(241,131,45)"/><text x="23.6167%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (883,590 samples, 0.25%)</title><rect x="23.7933%" y="165" width="0.2501%" height="15" fill="rgb(249,31,29)"/><text x="24.0433%" y="175.50"></text></g><g><title>misc_checking_1 (2,485,694 samples, 0.70%)</title><rect x="23.3599%" y="181" width="0.7036%" height="15" fill="rgb(225,111,53)"/><text x="23.6099%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,398,424 samples, 0.40%)</title><rect x="24.0639%" y="165" width="0.3958%" height="15" fill="rgb(238,160,17)"/><text x="24.3139%" y="175.50"></text></g><g><title>check_mod_liveness (1,147,072 samples, 0.32%)</title><rect x="24.1351%" y="149" width="0.3247%" height="15" fill="rgb(214,148,48)"/><text x="24.3851%" y="159.50"></text></g><g><title>misc_checking_2 (2,968,100 samples, 0.84%)</title><rect x="24.0635%" y="181" width="0.8401%" height="15" fill="rgb(232,36,49)"/><text x="24.3135%" y="191.50"></text></g><g><title>match_checking (1,568,116 samples, 0.44%)</title><rect x="24.4598%" y="165" width="0.4439%" height="15" fill="rgb(209,103,24)"/><text x="24.7098%" y="175.50"></text></g><g><title>check_match (1,485,956 samples, 0.42%)</title><rect x="24.4830%" y="149" width="0.4206%" height="15" fill="rgb(229,88,8)"/><text x="24.7330%" y="159.50"></text></g><g><title>check_private_in_public (478,785 samples, 0.14%)</title><rect x="24.9059%" y="165" width="0.1355%" height="15" fill="rgb(213,181,19)"/><text x="25.1559%" y="175.50"></text></g><g><title>death_checking (897,239 samples, 0.25%)</title><rect x="25.0414%" y="165" width="0.2540%" height="15" fill="rgb(254,191,54)"/><text x="25.2914%" y="175.50"></text></g><g><title>param_env (397,896 samples, 0.11%)</title><rect x="25.5667%" y="133" width="0.1126%" height="15" fill="rgb(241,83,37)"/><text x="25.8167%" y="143.50"></text></g><g><title>crate_lints (1,755,908 samples, 0.50%)</title><rect x="25.2958%" y="149" width="0.4970%" height="15" fill="rgb(233,36,39)"/><text x="25.5458%" y="159.50"></text></g><g><title>type_of (390,725 samples, 0.11%)</title><rect x="25.6822%" y="133" width="0.1106%" height="15" fill="rgb(226,3,54)"/><text x="25.9322%" y="143.50"></text></g><g><title>lint_checking (2,959,410 samples, 0.84%)</title><rect x="25.2954%" y="165" width="0.8377%" height="15" fill="rgb(245,192,40)"/><text x="25.5454%" y="175.50"></text></g><g><title>module_lints (1,201,952 samples, 0.34%)</title><rect x="25.7928%" y="149" width="0.3402%" height="15" fill="rgb(238,167,29)"/><text x="26.0428%" y="159.50"></text></g><g><title>lint_mod (1,195,082 samples, 0.34%)</title><rect x="25.7948%" y="133" width="0.3383%" height="15" fill="rgb(232,182,51)"/><text x="26.0448%" y="143.50"></text></g><g><title>privacy_access_levels (474,515 samples, 0.13%)</title><rect x="26.1331%" y="165" width="0.1343%" height="15" fill="rgb(231,60,39)"/><text x="26.3831%" y="175.50"></text></g><g><title>privacy_checking_modules (2,303,743 samples, 0.65%)</title><rect x="26.2674%" y="165" width="0.6521%" height="15" fill="rgb(208,69,12)"/><text x="26.5174%" y="175.50"></text></g><g><title>check_mod_privacy (2,297,833 samples, 0.65%)</title><rect x="26.2690%" y="149" width="0.6504%" height="15" fill="rgb(235,93,37)"/><text x="26.5190%" y="159.50"></text></g><g><title>misc_checking_3 (7,138,292 samples, 2.02%)</title><rect x="24.9036%" y="181" width="2.0206%" height="15" fill="rgb(213,116,39)"/><text x="25.1536%" y="191.50">m..</text></g><g><title>mir_for_ctfe (466,845 samples, 0.13%)</title><rect x="27.1541%" y="85" width="0.1321%" height="15" fill="rgb(222,207,29)"/><text x="27.4041%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (433,755 samples, 0.12%)</title><rect x="27.1635%" y="69" width="0.1228%" height="15" fill="rgb(206,96,30)"/><text x="27.4135%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,413,444 samples, 0.40%)</title><rect x="27.0491%" y="133" width="0.4001%" height="15" fill="rgb(218,138,4)"/><text x="27.2991%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,402,204 samples, 0.40%)</title><rect x="27.0523%" y="117" width="0.3969%" height="15" fill="rgb(250,191,14)"/><text x="27.3023%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,399,194 samples, 0.40%)</title><rect x="27.0531%" y="101" width="0.3961%" height="15" fill="rgb(239,60,40)"/><text x="27.3031%" y="111.50"></text></g><g><title>typeck (391,724 samples, 0.11%)</title><rect x="27.3383%" y="85" width="0.1109%" height="15" fill="rgb(206,27,48)"/><text x="27.5883%" y="95.50"></text></g><g><title>impl_parent (928,628 samples, 0.26%)</title><rect x="28.0021%" y="117" width="0.2629%" height="15" fill="rgb(225,35,8)"/><text x="28.2521%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (526,606 samples, 0.15%)</title><rect x="28.1159%" y="101" width="0.1491%" height="15" fill="rgb(250,213,24)"/><text x="28.3659%" y="111.50"></text></g><g><title>impl_trait_ref (2,203,371 samples, 0.62%)</title><rect x="28.2649%" y="117" width="0.6237%" height="15" fill="rgb(247,123,22)"/><text x="28.5149%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,555,115 samples, 0.44%)</title><rect x="28.4484%" y="101" width="0.4402%" height="15" fill="rgb(231,138,38)"/><text x="28.6984%" y="111.50"></text></g><g><title>coherent_trait (7,166,772 samples, 2.03%)</title><rect x="26.9690%" y="149" width="2.0286%" height="15" fill="rgb(231,145,46)"/><text x="27.2190%" y="159.50">c..</text></g><g><title>specialization_graph_of (5,193,952 samples, 1.47%)</title><rect x="27.5274%" y="133" width="1.4702%" height="15" fill="rgb(251,118,11)"/><text x="27.7774%" y="143.50"></text></g><g><title>trait_impls_of (355,152 samples, 0.10%)</title><rect x="28.8971%" y="117" width="0.1005%" height="15" fill="rgb(217,147,25)"/><text x="29.1471%" y="127.50"></text></g><g><title>coherence_checking (7,249,413 samples, 2.05%)</title><rect x="26.9630%" y="165" width="2.0520%" height="15" fill="rgb(247,81,37)"/><text x="27.2130%" y="175.50">c..</text></g><g><title>associated_items (473,896 samples, 0.13%)</title><rect x="47.1645%" y="117" width="0.1341%" height="15" fill="rgb(209,12,38)"/><text x="47.4145%" y="127.50"></text></g><g><title>dropck_outlives (917,515 samples, 0.26%)</title><rect x="47.3208%" y="117" width="0.2597%" height="15" fill="rgb(227,1,9)"/><text x="47.5708%" y="127.50"></text></g><g><title>eval_to_allocation_raw (454,645 samples, 0.13%)</title><rect x="47.5853%" y="101" width="0.1287%" height="15" fill="rgb(248,47,43)"/><text x="47.8353%" y="111.50"></text></g><g><title>mir_borrowck (484,487 samples, 0.14%)</title><rect x="47.8810%" y="37" width="0.1371%" height="15" fill="rgb(221,10,30)"/><text x="48.1310%" y="47.50"></text></g><g><title>mir_for_ctfe (716,697 samples, 0.20%)</title><rect x="47.8158%" y="69" width="0.2029%" height="15" fill="rgb(210,229,1)"/><text x="48.0658%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (654,957 samples, 0.19%)</title><rect x="47.8333%" y="53" width="0.1854%" height="15" fill="rgb(222,148,37)"/><text x="48.0833%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,553,735 samples, 0.44%)</title><rect x="47.5816%" y="117" width="0.4398%" height="15" fill="rgb(234,67,33)"/><text x="47.8316%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,085,940 samples, 0.31%)</title><rect x="47.7140%" y="101" width="0.3074%" height="15" fill="rgb(247,98,35)"/><text x="47.9640%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,073,890 samples, 0.30%)</title><rect x="47.7175%" y="85" width="0.3040%" height="15" fill="rgb(247,138,52)"/><text x="47.9675%" y="95.50"></text></g><g><title>evaluate_obligation (6,000,116 samples, 1.70%)</title><rect x="48.0214%" y="117" width="1.6984%" height="15" fill="rgb(213,79,30)"/><text x="48.2714%" y="127.50"></text></g><g><title>impl_trait_ref (562,495 samples, 0.16%)</title><rect x="49.8595%" y="117" width="0.1592%" height="15" fill="rgb(246,177,23)"/><text x="50.1095%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (498,644 samples, 0.14%)</title><rect x="49.8775%" y="101" width="0.1411%" height="15" fill="rgb(230,62,27)"/><text x="50.1275%" y="111.50"></text></g><g><title>method_autoderef_steps (790,509 samples, 0.22%)</title><rect x="50.0745%" y="117" width="0.2238%" height="15" fill="rgb(216,154,8)"/><text x="50.3245%" y="127.50"></text></g><g><title>evaluate_obligation (423,185 samples, 0.12%)</title><rect x="50.1785%" y="101" width="0.1198%" height="15" fill="rgb(244,35,45)"/><text x="50.4285%" y="111.50"></text></g><g><title>predicates_of (374,250 samples, 0.11%)</title><rect x="50.3771%" y="117" width="0.1059%" height="15" fill="rgb(251,115,12)"/><text x="50.6271%" y="127.50"></text></g><g><title>evaluate_obligation (1,217,908 samples, 0.34%)</title><rect x="55.9965%" y="101" width="0.3447%" height="15" fill="rgb(240,54,50)"/><text x="56.2465%" y="111.50"></text></g><g><title>is_copy_raw (458,392 samples, 0.13%)</title><rect x="56.4125%" y="101" width="0.1298%" height="15" fill="rgb(233,84,52)"/><text x="56.6625%" y="111.50"></text></g><g><title>evaluate_obligation (358,482 samples, 0.10%)</title><rect x="56.4408%" y="85" width="0.1015%" height="15" fill="rgb(207,117,47)"/><text x="56.6908%" y="95.50"></text></g><g><title>method_autoderef_steps (383,314 samples, 0.11%)</title><rect x="56.5512%" y="101" width="0.1085%" height="15" fill="rgb(249,43,39)"/><text x="56.8012%" y="111.50"></text></g><g><title>typeck (21,715,980 samples, 6.15%)</title><rect x="50.5798%" y="117" width="6.1469%" height="15" fill="rgb(209,38,44)"/><text x="50.8298%" y="127.50">typeck</text></g><g><title>item_bodies_checking (97,912,394 samples, 27.72%)</title><rect x="29.0306%" y="165" width="27.7150%" height="15" fill="rgb(236,212,23)"/><text x="29.2806%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (97,909,694 samples, 27.71%)</title><rect x="29.0314%" y="149" width="27.7143%" height="15" fill="rgb(242,79,21)"/><text x="29.2814%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (97,708,413 samples, 27.66%)</title><rect x="29.0883%" y="133" width="27.6573%" height="15" fill="rgb(211,96,35)"/><text x="29.3383%" y="143.50">typeck</text></g><g><title>item_types_checking (1,704,788 samples, 0.48%)</title><rect x="56.7456%" y="165" width="0.4826%" height="15" fill="rgb(253,215,40)"/><text x="56.9956%" y="175.50"></text></g><g><title>check_mod_item_types (1,698,378 samples, 0.48%)</title><rect x="56.7474%" y="149" width="0.4807%" height="15" fill="rgb(211,81,21)"/><text x="56.9974%" y="159.50"></text></g><g><title>fn_sig (692,785 samples, 0.20%)</title><rect x="57.3801%" y="133" width="0.1961%" height="15" fill="rgb(208,190,38)"/><text x="57.6301%" y="143.50"></text></g><g><title>generics_of (522,177 samples, 0.15%)</title><rect x="57.5762%" y="133" width="0.1478%" height="15" fill="rgb(235,213,38)"/><text x="57.8262%" y="143.50"></text></g><g><title>late_bound_vars_map (519,997 samples, 0.15%)</title><rect x="57.9348%" y="85" width="0.1472%" height="15" fill="rgb(237,122,38)"/><text x="58.1848%" y="95.50"></text></g><g><title>resolve_lifetimes (499,947 samples, 0.14%)</title><rect x="57.9405%" y="69" width="0.1415%" height="15" fill="rgb(244,218,35)"/><text x="58.1905%" y="79.50"></text></g><g><title>explicit_predicates_of (906,491 samples, 0.26%)</title><rect x="57.8439%" y="101" width="0.2566%" height="15" fill="rgb(240,68,47)"/><text x="58.0939%" y="111.50"></text></g><g><title>predicates_of (1,682,369 samples, 0.48%)</title><rect x="57.7705%" y="133" width="0.4762%" height="15" fill="rgb(210,16,53)"/><text x="58.0205%" y="143.50"></text></g><g><title>predicates_defined_on (1,584,848 samples, 0.45%)</title><rect x="57.7981%" y="117" width="0.4486%" height="15" fill="rgb(235,124,12)"/><text x="58.0481%" y="127.50"></text></g><g><title>inferred_outlives_of (516,545 samples, 0.15%)</title><rect x="58.1005%" y="101" width="0.1462%" height="15" fill="rgb(224,169,11)"/><text x="58.3505%" y="111.50"></text></g><g><title>inferred_outlives_crate (482,095 samples, 0.14%)</title><rect x="58.1103%" y="85" width="0.1365%" height="15" fill="rgb(250,166,2)"/><text x="58.3603%" y="95.50"></text></g><g><title>type_collecting (3,799,349 samples, 1.08%)</title><rect x="57.2296%" y="165" width="1.0754%" height="15" fill="rgb(242,216,29)"/><text x="57.4796%" y="175.50"></text></g><g><title>collect_mod_item_types (3,787,418 samples, 1.07%)</title><rect x="57.2330%" y="149" width="1.0721%" height="15" fill="rgb(230,116,27)"/><text x="57.4830%" y="159.50"></text></g><g><title>mir_for_ctfe (468,764 samples, 0.13%)</title><rect x="60.0853%" y="85" width="0.1327%" height="15" fill="rgb(228,99,48)"/><text x="60.3353%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (429,094 samples, 0.12%)</title><rect x="60.0965%" y="69" width="0.1215%" height="15" fill="rgb(253,11,6)"/><text x="60.3465%" y="79.50"></text></g><g><title>evaluate_obligation (1,203,822 samples, 0.34%)</title><rect x="60.3214%" y="69" width="0.3408%" height="15" fill="rgb(247,143,39)"/><text x="60.5714%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,319,933 samples, 0.66%)</title><rect x="60.0199%" y="133" width="0.6567%" height="15" fill="rgb(236,97,10)"/><text x="60.2699%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,316,453 samples, 0.66%)</title><rect x="60.0209%" y="117" width="0.6557%" height="15" fill="rgb(233,208,19)"/><text x="60.2709%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,308,212 samples, 0.65%)</title><rect x="60.0232%" y="101" width="0.6534%" height="15" fill="rgb(216,164,2)"/><text x="60.2732%" y="111.50"></text></g><g><title>typeck (1,619,466 samples, 0.46%)</title><rect x="60.2182%" y="85" width="0.4584%" height="15" fill="rgb(220,129,5)"/><text x="60.4682%" y="95.50"></text></g><g><title>evaluate_obligation (628,269 samples, 0.18%)</title><rect x="60.6766%" y="133" width="0.1778%" height="15" fill="rgb(242,17,10)"/><text x="60.9266%" y="143.50"></text></g><g><title>implied_outlives_bounds (615,574 samples, 0.17%)</title><rect x="60.8586%" y="133" width="0.1742%" height="15" fill="rgb(242,107,0)"/><text x="61.1086%" y="143.50"></text></g><g><title>param_env (926,657 samples, 0.26%)</title><rect x="61.0715%" y="133" width="0.2623%" height="15" fill="rgb(251,28,31)"/><text x="61.3215%" y="143.50"></text></g><g><title>region_scope_tree (1,051,386 samples, 0.30%)</title><rect x="61.3397%" y="133" width="0.2976%" height="15" fill="rgb(233,223,10)"/><text x="61.5897%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,332,012 samples, 3.21%)</title><rect x="58.4363%" y="149" width="3.2076%" height="15" fill="rgb(215,21,27)"/><text x="58.6863%" y="159.50">che..</text></g><g><title>eval_to_const_value_raw (494,484 samples, 0.14%)</title><rect x="62.3471%" y="133" width="0.1400%" height="15" fill="rgb(232,23,21)"/><text x="62.5971%" y="143.50"></text></g><g><title>eval_to_const_value_raw (492,254 samples, 0.14%)</title><rect x="62.3477%" y="117" width="0.1393%" height="15" fill="rgb(244,5,23)"/><text x="62.5977%" y="127.50"></text></g><g><title>eval_to_allocation_raw (488,034 samples, 0.14%)</title><rect x="62.3489%" y="101" width="0.1381%" height="15" fill="rgb(226,81,46)"/><text x="62.5989%" y="111.50"></text></g><g><title>param_env (434,145 samples, 0.12%)</title><rect x="62.6161%" y="133" width="0.1229%" height="15" fill="rgb(247,70,30)"/><text x="62.8661%" y="143.50"></text></g><g><title>check_item_well_formed (4,224,921 samples, 1.20%)</title><rect x="61.6439%" y="149" width="1.1959%" height="15" fill="rgb(212,68,19)"/><text x="61.8939%" y="159.50"></text></g><g><title>analysis (211,864,499 samples, 59.97%)</title><rect x="3.0249%" y="197" width="59.9703%" height="15" fill="rgb(240,187,13)"/><text x="3.2749%" y="207.50">analysis</text></g><g><title>type_check_crate (127,432,421 samples, 36.07%)</title><rect x="26.9242%" y="181" width="36.0710%" height="15" fill="rgb(223,113,26)"/><text x="27.1742%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,555,405 samples, 4.69%)</title><rect x="58.3090%" y="165" width="4.6862%" height="15" fill="rgb(206,192,2)"/><text x="58.5590%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (548,796 samples, 0.16%)</title><rect x="62.8398%" y="149" width="0.1553%" height="15" fill="rgb(241,108,4)"/><text x="63.0898%" y="159.50"></text></g><g><title>codegen_module (3,051,992 samples, 0.86%)</title><rect x="63.2093%" y="181" width="0.8639%" height="15" fill="rgb(247,173,49)"/><text x="63.4593%" y="191.50"></text></g><g><title>codegen_crate (3,817,199 samples, 1.08%)</title><rect x="62.9981%" y="197" width="1.0805%" height="15" fill="rgb(224,114,35)"/><text x="63.2481%" y="207.50"></text></g><g><title>LLVM_module_codegen (26,740,758 samples, 7.57%)</title><rect x="64.0956%" y="181" width="7.5692%" height="15" fill="rgb(245,159,27)"/><text x="64.3456%" y="191.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (25,777,399 samples, 7.30%)</title><rect x="64.3683%" y="165" width="7.2965%" height="15" fill="rgb(245,172,44)"/><text x="64.6183%" y="175.50">LLVM_modul..</text></g><g><title>codegen_module_optimize (27,870,759 samples, 7.89%)</title><rect x="64.0786%" y="197" width="7.8891%" height="15" fill="rgb(236,23,11)"/><text x="64.3286%" y="207.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (1,069,861 samples, 0.30%)</title><rect x="71.6649%" y="181" width="0.3028%" height="15" fill="rgb(205,117,38)"/><text x="71.9149%" y="191.50"></text></g><g><title>metadata_load_macro (499,835 samples, 0.14%)</title><rect x="85.1068%" y="149" width="0.1415%" height="15" fill="rgb(237,72,25)"/><text x="85.3568%" y="159.50"></text></g><g><title>metadata_register_crate (412,374 samples, 0.12%)</title><rect x="85.2483%" y="149" width="0.1167%" height="15" fill="rgb(244,70,9)"/><text x="85.4983%" y="159.50"></text></g><g><title>macro_expand_crate (48,309,306 samples, 13.67%)</title><rect x="72.1514%" y="181" width="13.6744%" height="15" fill="rgb(217,125,39)"/><text x="72.4014%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (48,293,075 samples, 13.67%)</title><rect x="72.1560%" y="165" width="13.6698%" height="15" fill="rgb(235,36,10)"/><text x="72.4060%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,627,946 samples, 0.46%)</title><rect x="85.3650%" y="149" width="0.4608%" height="15" fill="rgb(251,123,47)"/><text x="85.6150%" y="159.50"></text></g><g><title>late_resolve_crate (3,249,962 samples, 0.92%)</title><rect x="85.9298%" y="165" width="0.9199%" height="15" fill="rgb(221,13,13)"/><text x="86.1798%" y="175.50"></text></g><g><title>configure_and_expand (52,839,321 samples, 14.96%)</title><rect x="71.9677%" y="197" width="14.9567%" height="15" fill="rgb(238,131,9)"/><text x="72.2177%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,720,647 samples, 1.05%)</title><rect x="85.8712%" y="181" width="1.0532%" height="15" fill="rgb(211,50,8)"/><text x="86.1212%" y="191.50"></text></g><g><title>drop_ast (505,185 samples, 0.14%)</title><rect x="86.9244%" y="197" width="0.1430%" height="15" fill="rgb(245,182,24)"/><text x="87.1744%" y="207.50"></text></g><g><title>early_lint_checks (813,348 samples, 0.23%)</title><rect x="87.0721%" y="197" width="0.2302%" height="15" fill="rgb(242,14,37)"/><text x="87.3221%" y="207.50"></text></g><g><title>free_global_ctxt (4,946,720 samples, 1.40%)</title><rect x="87.3023%" y="197" width="1.4002%" height="15" fill="rgb(246,228,12)"/><text x="87.5523%" y="207.50"></text></g><g><title>optimized_mir (793,979 samples, 0.22%)</title><rect x="89.9203%" y="117" width="0.2247%" height="15" fill="rgb(213,55,15)"/><text x="90.1703%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,185,582 samples, 0.34%)</title><rect x="89.8603%" y="133" width="0.3356%" height="15" fill="rgb(209,9,3)"/><text x="90.1103%" y="143.50"></text></g><g><title>monomorphization_collector (1,228,562 samples, 0.35%)</title><rect x="89.8593%" y="149" width="0.3478%" height="15" fill="rgb(230,59,30)"/><text x="90.1093%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,406,764 samples, 0.40%)</title><rect x="89.8542%" y="165" width="0.3982%" height="15" fill="rgb(209,121,21)"/><text x="90.1042%" y="175.50"></text></g><g><title>exported_symbols (1,732,797 samples, 0.49%)</title><rect x="89.8483%" y="181" width="0.4905%" height="15" fill="rgb(220,109,13)"/><text x="90.0983%" y="191.50"></text></g><g><title>is_sized_raw (470,635 samples, 0.13%)</title><rect x="93.1119%" y="149" width="0.1332%" height="15" fill="rgb(232,18,1)"/><text x="93.3619%" y="159.50"></text></g><g><title>evaluate_obligation (386,935 samples, 0.11%)</title><rect x="93.1356%" y="133" width="0.1095%" height="15" fill="rgb(215,41,42)"/><text x="93.3856%" y="143.50"></text></g><g><title>layout_of (588,205 samples, 0.17%)</title><rect x="93.2451%" y="149" width="0.1665%" height="15" fill="rgb(224,123,36)"/><text x="93.4951%" y="159.50"></text></g><g><title>layout_of (2,198,731 samples, 0.62%)</title><rect x="92.8448%" y="165" width="0.6224%" height="15" fill="rgb(240,125,3)"/><text x="93.0948%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,920,606 samples, 2.53%)</title><rect x="93.4671%" y="165" width="2.5251%" height="15" fill="rgb(205,98,50)"/><text x="93.7171%" y="175.50">mi..</text></g><g><title>optimized_mir (20,005,904 samples, 5.66%)</title><rect x="90.3723%" y="181" width="5.6629%" height="15" fill="rgb(205,185,37)"/><text x="90.6223%" y="191.50">optimiz..</text></g><g><title>promoted_mir (370,043 samples, 0.10%)</title><rect x="96.0352%" y="181" width="0.1047%" height="15" fill="rgb(238,207,15)"/><text x="96.2852%" y="191.50"></text></g><g><title>generate_crate_metadata (26,333,595 samples, 7.45%)</title><rect x="88.7026%" y="197" width="7.4540%" height="15" fill="rgb(213,199,42)"/><text x="88.9526%" y="207.50">generate_c..</text></g><g><title>hir_lowering (6,280,293 samples, 1.78%)</title><rect x="96.1565%" y="197" width="1.7777%" height="15" fill="rgb(235,201,11)"/><text x="96.4065%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (1,704,307 samples, 0.48%)</title><rect x="97.9380%" y="181" width="0.4824%" height="15" fill="rgb(207,46,11)"/><text x="98.1880%" y="191.50"></text></g><g><title>link_crate (1,597,946 samples, 0.45%)</title><rect x="98.4204%" y="181" width="0.4523%" height="15" fill="rgb(241,35,35)"/><text x="98.6704%" y="191.50"></text></g><g><title>link_binary (1,557,106 samples, 0.44%)</title><rect x="98.4320%" y="165" width="0.4408%" height="15" fill="rgb(243,32,47)"/><text x="98.6820%" y="175.50"></text></g><g><title>link_rlib (1,168,541 samples, 0.33%)</title><rect x="98.5420%" y="149" width="0.3308%" height="15" fill="rgb(247,202,23)"/><text x="98.7920%" y="159.50"></text></g><g><title>link (3,322,703 samples, 0.94%)</title><rect x="97.9342%" y="197" width="0.9405%" height="15" fill="rgb(219,102,11)"/><text x="98.1842%" y="207.50"></text></g><g><title>parse_crate (1,750,358 samples, 0.50%)</title><rect x="98.8747%" y="197" width="0.4955%" height="15" fill="rgb(243,110,44)"/><text x="99.1247%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,361,013 samples, 0.39%)</title><rect x="99.4354%" y="197" width="0.3852%" height="15" fill="rgb(222,74,54)"/><text x="99.6854%" y="207.50"></text></g><g><title>all (353,282,569 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (353,282,569 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (562,585 samples, 0.16%)</title><rect x="99.8408%" y="197" width="0.1592%" height="15" fill="rgb(217,163,10)"/><text x="100.0908%" y="207.50"></text></g></svg></svg>