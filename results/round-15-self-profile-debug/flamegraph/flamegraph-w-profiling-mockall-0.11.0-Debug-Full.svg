<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (36,775,253 samples, 11.25%)</title><rect x="0.3025%" y="165" width="11.2463%" height="15" fill="rgb(227,0,7)"/><text x="0.5525%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (368,652 samples, 0.11%)</title><rect x="14.3589%" y="37" width="0.1127%" height="15" fill="rgb(217,0,24)"/><text x="14.6089%" y="47.50"></text></g><g><title>needs_drop_raw (569,845 samples, 0.17%)</title><rect x="14.2978%" y="53" width="0.1743%" height="15" fill="rgb(221,193,54)"/><text x="14.5478%" y="63.50"></text></g><g><title>specialization_graph_of (729,127 samples, 0.22%)</title><rect x="14.5905%" y="37" width="0.2230%" height="15" fill="rgb(248,212,6)"/><text x="14.8405%" y="47.50"></text></g><g><title>resolve_instance (1,171,721 samples, 0.36%)</title><rect x="14.4720%" y="53" width="0.3583%" height="15" fill="rgb(208,68,35)"/><text x="14.7220%" y="63.50"></text></g><g><title>thir_body (506,765 samples, 0.15%)</title><rect x="14.8358%" y="53" width="0.1550%" height="15" fill="rgb(232,128,0)"/><text x="15.0858%" y="63.50"></text></g><g><title>mir_const (4,738,777 samples, 1.45%)</title><rect x="13.5447%" y="101" width="1.4492%" height="15" fill="rgb(207,160,47)"/><text x="13.7947%" y="111.50"></text></g><g><title>unsafety_check_result (4,127,978 samples, 1.26%)</title><rect x="13.7315%" y="85" width="1.2624%" height="15" fill="rgb(228,23,34)"/><text x="13.9815%" y="95.50"></text></g><g><title>mir_built (3,698,615 samples, 1.13%)</title><rect x="13.8628%" y="69" width="1.1311%" height="15" fill="rgb(218,30,26)"/><text x="14.1128%" y="79.50"></text></g><g><title>mir_promoted (5,248,251 samples, 1.60%)</title><rect x="13.3979%" y="117" width="1.6050%" height="15" fill="rgb(220,122,19)"/><text x="13.6479%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (448,984 samples, 0.14%)</title><rect x="15.0029%" y="117" width="0.1373%" height="15" fill="rgb(250,228,42)"/><text x="15.2529%" y="127.50"></text></g><g><title>type_op_prove_predicate (996,288 samples, 0.30%)</title><rect x="15.1553%" y="117" width="0.3047%" height="15" fill="rgb(240,193,28)"/><text x="15.4053%" y="127.50"></text></g><g><title>MIR_borrow_checking (12,618,428 samples, 3.86%)</title><rect x="11.6045%" y="149" width="3.8589%" height="15" fill="rgb(216,20,37)"/><text x="11.8545%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (12,536,467 samples, 3.83%)</title><rect x="11.6295%" y="133" width="3.8338%" height="15" fill="rgb(206,188,39)"/><text x="11.8795%" y="143.50">mir_..</text></g><g><title>check_mod_attrs (493,275 samples, 0.15%)</title><rect x="15.5166%" y="133" width="0.1508%" height="15" fill="rgb(217,207,13)"/><text x="15.7666%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (337,313 samples, 0.10%)</title><rect x="15.7031%" y="133" width="0.1032%" height="15" fill="rgb(231,73,38)"/><text x="15.9531%" y="143.50"></text></g><g><title>misc_checking_1 (1,005,120 samples, 0.31%)</title><rect x="15.5125%" y="149" width="0.3074%" height="15" fill="rgb(225,20,46)"/><text x="15.7625%" y="159.50"></text></g><g><title>misc_checking_2 (428,255 samples, 0.13%)</title><rect x="15.8198%" y="149" width="0.1310%" height="15" fill="rgb(210,31,41)"/><text x="16.0698%" y="159.50"></text></g><g><title>death_checking (406,914 samples, 0.12%)</title><rect x="15.9995%" y="133" width="0.1244%" height="15" fill="rgb(221,200,47)"/><text x="16.2495%" y="143.50"></text></g><g><title>crate_lints (3,690,587 samples, 1.13%)</title><rect x="16.1244%" y="117" width="1.1286%" height="15" fill="rgb(226,26,5)"/><text x="16.3744%" y="127.50"></text></g><g><title>type_of (1,610,756 samples, 0.49%)</title><rect x="16.7605%" y="101" width="0.4926%" height="15" fill="rgb(249,33,26)"/><text x="17.0105%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (1,065,382 samples, 0.33%)</title><rect x="16.9272%" y="85" width="0.3258%" height="15" fill="rgb(235,183,28)"/><text x="17.1772%" y="95.50"></text></g><g><title>lint_checking (3,920,909 samples, 1.20%)</title><rect x="16.1239%" y="133" width="1.1991%" height="15" fill="rgb(221,5,38)"/><text x="16.3739%" y="143.50"></text></g><g><title>privacy_checking_modules (432,755 samples, 0.13%)</title><rect x="17.3777%" y="133" width="0.1323%" height="15" fill="rgb(247,18,42)"/><text x="17.6277%" y="143.50"></text></g><g><title>check_mod_privacy (431,245 samples, 0.13%)</title><rect x="17.3781%" y="117" width="0.1319%" height="15" fill="rgb(241,131,45)"/><text x="17.6281%" y="127.50"></text></g><g><title>misc_checking_3 (5,124,042 samples, 1.57%)</title><rect x="15.9508%" y="149" width="1.5670%" height="15" fill="rgb(249,31,29)"/><text x="16.2008%" y="159.50"></text></g><g><title>adt_destructor (334,114 samples, 0.10%)</title><rect x="17.5510%" y="101" width="0.1022%" height="15" fill="rgb(225,111,53)"/><text x="17.8010%" y="111.50"></text></g><g><title>object_safety_violations (887,278 samples, 0.27%)</title><rect x="17.6632%" y="101" width="0.2713%" height="15" fill="rgb(238,160,17)"/><text x="17.9132%" y="111.50"></text></g><g><title>impl_parent (3,389,467 samples, 1.04%)</title><rect x="19.8544%" y="85" width="1.0365%" height="15" fill="rgb(214,148,48)"/><text x="20.1044%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,984,099 samples, 0.61%)</title><rect x="20.2842%" y="69" width="0.6068%" height="15" fill="rgb(232,36,49)"/><text x="20.5342%" y="79.50"></text></g><g><title>impl_trait_ref (7,077,517 samples, 2.16%)</title><rect x="20.8909%" y="85" width="2.1644%" height="15" fill="rgb(209,103,24)"/><text x="21.1409%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,641,792 samples, 1.73%)</title><rect x="21.3300%" y="69" width="1.7253%" height="15" fill="rgb(229,88,8)"/><text x="21.5800%" y="79.50"></text></g><g><title>trait_impls_of (1,217,851 samples, 0.37%)</title><rect x="23.0603%" y="85" width="0.3724%" height="15" fill="rgb(213,181,19)"/><text x="23.3103%" y="95.50"></text></g><g><title>implementations_of_trait (349,505 samples, 0.11%)</title><rect x="23.3259%" y="69" width="0.1069%" height="15" fill="rgb(254,191,54)"/><text x="23.5759%" y="79.50"></text></g><g><title>coherent_trait (19,277,476 samples, 5.90%)</title><rect x="17.5377%" y="117" width="5.8953%" height="15" fill="rgb(241,83,37)"/><text x="17.7877%" y="127.50">coheren..</text></g><g><title>specialization_graph_of (17,966,202 samples, 5.49%)</title><rect x="17.9387%" y="101" width="5.4943%" height="15" fill="rgb(233,36,39)"/><text x="18.1887%" y="111.50">special..</text></g><g><title>coherence_checking (19,401,037 samples, 5.93%)</title><rect x="17.5318%" y="133" width="5.9331%" height="15" fill="rgb(226,3,54)"/><text x="17.7818%" y="143.50">coherenc..</text></g><g><title>associated_items (401,793 samples, 0.12%)</title><rect x="26.4871%" y="85" width="0.1229%" height="15" fill="rgb(245,192,40)"/><text x="26.7371%" y="95.50"></text></g><g><title>dropck_outlives (438,214 samples, 0.13%)</title><rect x="26.6264%" y="85" width="0.1340%" height="15" fill="rgb(238,167,29)"/><text x="26.8764%" y="95.50"></text></g><g><title>evaluate_obligation (1,193,763 samples, 0.37%)</title><rect x="26.7604%" y="85" width="0.3651%" height="15" fill="rgb(232,182,51)"/><text x="27.0104%" y="95.50"></text></g><g><title>item_bodies_checking (13,212,124 samples, 4.04%)</title><rect x="23.4732%" y="133" width="4.0404%" height="15" fill="rgb(231,60,39)"/><text x="23.7232%" y="143.50">item..</text></g><g><title>typeck_item_bodies (13,209,864 samples, 4.04%)</title><rect x="23.4739%" y="117" width="4.0397%" height="15" fill="rgb(208,69,12)"/><text x="23.7239%" y="127.50">type..</text></g><g><title>typeck (13,150,924 samples, 4.02%)</title><rect x="23.4919%" y="101" width="4.0217%" height="15" fill="rgb(235,93,37)"/><text x="23.7419%" y="111.50">type..</text></g><g><title>item_types_checking (502,495 samples, 0.15%)</title><rect x="27.5136%" y="133" width="0.1537%" height="15" fill="rgb(213,116,39)"/><text x="27.7636%" y="143.50"></text></g><g><title>check_mod_item_types (500,645 samples, 0.15%)</title><rect x="27.5142%" y="117" width="0.1531%" height="15" fill="rgb(222,207,29)"/><text x="27.7642%" y="127.50"></text></g><g><title>generics_of (366,483 samples, 0.11%)</title><rect x="27.8055%" y="101" width="0.1121%" height="15" fill="rgb(206,96,30)"/><text x="28.0555%" y="111.50"></text></g><g><title>predicates_of (423,655 samples, 0.13%)</title><rect x="27.9369%" y="101" width="0.1296%" height="15" fill="rgb(218,138,4)"/><text x="28.1869%" y="111.50"></text></g><g><title>predicates_defined_on (383,365 samples, 0.12%)</title><rect x="27.9493%" y="85" width="0.1172%" height="15" fill="rgb(250,191,14)"/><text x="28.1993%" y="95.50"></text></g><g><title>type_collecting (1,712,337 samples, 0.52%)</title><rect x="27.6679%" y="133" width="0.5237%" height="15" fill="rgb(239,60,40)"/><text x="27.9179%" y="143.50"></text></g><g><title>collect_mod_item_types (1,705,507 samples, 0.52%)</title><rect x="27.6700%" y="117" width="0.5216%" height="15" fill="rgb(206,27,48)"/><text x="27.9200%" y="127.50"></text></g><g><title>evaluate_obligation (689,496 samples, 0.21%)</title><rect x="28.6845%" y="101" width="0.2109%" height="15" fill="rgb(225,35,8)"/><text x="28.9345%" y="111.50"></text></g><g><title>check_impl_item_well_formed (2,911,716 samples, 0.89%)</title><rect x="28.2367%" y="117" width="0.8904%" height="15" fill="rgb(250,213,24)"/><text x="28.4867%" y="127.50"></text></g><g><title>evaluate_obligation (585,597 samples, 0.18%)</title><rect x="29.3993%" y="101" width="0.1791%" height="15" fill="rgb(247,123,22)"/><text x="29.6493%" y="111.50"></text></g><g><title>check_item_well_formed (2,040,574 samples, 0.62%)</title><rect x="29.1271%" y="117" width="0.6240%" height="15" fill="rgb(231,138,38)"/><text x="29.3771%" y="127.50"></text></g><g><title>analysis (59,678,136 samples, 18.25%)</title><rect x="11.5488%" y="165" width="18.2503%" height="15" fill="rgb(231,145,46)"/><text x="11.7988%" y="175.50">analysis</text></g><g><title>type_check_crate (40,159,607 samples, 12.28%)</title><rect x="17.5178%" y="149" width="12.2813%" height="15" fill="rgb(251,118,11)"/><text x="17.7678%" y="159.50">type_check_crate</text></g><g><title>wf_checking (5,253,083 samples, 1.61%)</title><rect x="28.1926%" y="133" width="1.6065%" height="15" fill="rgb(217,147,25)"/><text x="28.4426%" y="143.50"></text></g><g><title>const_caller_location (348,811 samples, 0.11%)</title><rect x="35.4008%" y="133" width="0.1067%" height="15" fill="rgb(247,81,37)"/><text x="35.6508%" y="143.50"></text></g><g><title>codegen_fn_attrs (531,964 samples, 0.16%)</title><rect x="35.8341%" y="117" width="0.1627%" height="15" fill="rgb(209,12,38)"/><text x="36.0841%" y="127.50"></text></g><g><title>layout_of (791,266 samples, 0.24%)</title><rect x="36.0149%" y="117" width="0.2420%" height="15" fill="rgb(227,1,9)"/><text x="36.2649%" y="127.50"></text></g><g><title>predicates_of (555,255 samples, 0.17%)</title><rect x="36.5461%" y="101" width="0.1698%" height="15" fill="rgb(248,47,43)"/><text x="36.7961%" y="111.50"></text></g><g><title>predicates_defined_on (387,084 samples, 0.12%)</title><rect x="36.5975%" y="85" width="0.1184%" height="15" fill="rgb(221,10,30)"/><text x="36.8475%" y="95.50"></text></g><g><title>param_env (1,502,671 samples, 0.46%)</title><rect x="36.2569%" y="117" width="0.4595%" height="15" fill="rgb(210,229,1)"/><text x="36.5069%" y="127.50"></text></g><g><title>fn_abi_of_instance (4,067,420 samples, 1.24%)</title><rect x="35.5100%" y="133" width="1.2439%" height="15" fill="rgb(222,148,37)"/><text x="35.7600%" y="143.50"></text></g><g><title>layout_of (361,525 samples, 0.11%)</title><rect x="36.9016%" y="117" width="0.1106%" height="15" fill="rgb(234,67,33)"/><text x="37.1516%" y="127.50"></text></g><g><title>layout_of (725,200 samples, 0.22%)</title><rect x="36.7972%" y="133" width="0.2218%" height="15" fill="rgb(247,98,35)"/><text x="37.0472%" y="143.50"></text></g><g><title>symbol_name (511,834 samples, 0.16%)</title><rect x="37.0247%" y="133" width="0.1565%" height="15" fill="rgb(247,138,52)"/><text x="37.2747%" y="143.50"></text></g><g><title>codegen_module (22,323,778 samples, 6.83%)</title><rect x="30.3603%" y="149" width="6.8269%" height="15" fill="rgb(213,79,30)"/><text x="30.6103%" y="159.50">codegen_m..</text></g><g><title>codegen_crate (24,260,366 samples, 7.42%)</title><rect x="29.8020%" y="165" width="7.4191%" height="15" fill="rgb(246,177,23)"/><text x="30.0520%" y="175.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (122,341,800 samples, 37.41%)</title><rect x="37.2900%" y="149" width="37.4136%" height="15" fill="rgb(230,62,27)"/><text x="37.5400%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (117,290,571 samples, 35.87%)</title><rect x="38.8347%" y="133" width="35.8688%" height="15" fill="rgb(216,154,8)"/><text x="39.0847%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (128,416,424 samples, 39.27%)</title><rect x="37.2211%" y="165" width="39.2713%" height="15" fill="rgb(244,35,45)"/><text x="37.4711%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,849,369 samples, 1.79%)</title><rect x="74.7036%" y="149" width="1.7888%" height="15" fill="rgb(251,115,12)"/><text x="74.9536%" y="159.50">L..</text></g><g><title>metadata_load_macro (630,639 samples, 0.19%)</title><rect x="81.9165%" y="117" width="0.1929%" height="15" fill="rgb(240,54,50)"/><text x="82.1665%" y="127.50"></text></g><g><title>macro_expand_crate (29,587,950 samples, 9.05%)</title><rect x="76.6545%" y="149" width="9.0483%" height="15" fill="rgb(233,84,52)"/><text x="76.9045%" y="159.50">macro_expand_..</text></g><g><title>expand_crate (29,560,960 samples, 9.04%)</title><rect x="76.6628%" y="133" width="9.0401%" height="15" fill="rgb(207,117,47)"/><text x="76.9128%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (11,750,939 samples, 3.59%)</title><rect x="82.1093%" y="117" width="3.5936%" height="15" fill="rgb(249,43,39)"/><text x="82.3593%" y="127.50">meta..</text></g><g><title>metadata_register_crate (1,564,716 samples, 0.48%)</title><rect x="85.2244%" y="101" width="0.4785%" height="15" fill="rgb(209,38,44)"/><text x="85.4744%" y="111.50"></text></g><g><title>late_resolve_crate (1,192,192 samples, 0.36%)</title><rect x="85.8604%" y="133" width="0.3646%" height="15" fill="rgb(236,212,23)"/><text x="86.1104%" y="143.50"></text></g><g><title>configure_and_expand (31,914,434 samples, 9.76%)</title><rect x="76.4924%" y="165" width="9.7598%" height="15" fill="rgb(242,79,21)"/><text x="76.7424%" y="175.50">configure_and_..</text></g><g><title>resolve_crate (1,595,696 samples, 0.49%)</title><rect x="85.7642%" y="149" width="0.4880%" height="15" fill="rgb(211,96,35)"/><text x="86.0142%" y="159.50"></text></g><g><title>free_global_ctxt (5,336,385 samples, 1.63%)</title><rect x="86.4017%" y="165" width="1.6319%" height="15" fill="rgb(253,215,40)"/><text x="86.6517%" y="175.50"></text></g><g><title>item_attrs (383,554 samples, 0.12%)</title><rect x="88.6188%" y="69" width="0.1173%" height="15" fill="rgb(211,81,21)"/><text x="88.8688%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (368,503 samples, 0.11%)</title><rect x="88.6234%" y="53" width="0.1127%" height="15" fill="rgb(208,190,38)"/><text x="88.8734%" y="63.50"></text></g><g><title>codegen_fn_attrs (578,995 samples, 0.18%)</title><rect x="88.5891%" y="85" width="0.1771%" height="15" fill="rgb(235,213,38)"/><text x="88.8391%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (599,488 samples, 0.18%)</title><rect x="89.3789%" y="69" width="0.1833%" height="15" fill="rgb(237,122,38)"/><text x="89.6289%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,106,926 samples, 0.34%)</title><rect x="89.5623%" y="69" width="0.3385%" height="15" fill="rgb(244,218,35)"/><text x="89.8123%" y="79.50"></text></g><g><title>specialization_graph_of (468,214 samples, 0.14%)</title><rect x="89.9230%" y="53" width="0.1432%" height="15" fill="rgb(240,68,47)"/><text x="90.1730%" y="63.50"></text></g><g><title>resolve_instance (545,376 samples, 0.17%)</title><rect x="89.9008%" y="69" width="0.1668%" height="15" fill="rgb(210,16,53)"/><text x="90.1508%" y="79.50"></text></g><g><title>optimized_mir (4,012,523 samples, 1.23%)</title><rect x="88.8973%" y="85" width="1.2271%" height="15" fill="rgb(235,124,12)"/><text x="89.1473%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (787,889 samples, 0.24%)</title><rect x="90.2181%" y="69" width="0.2409%" height="15" fill="rgb(224,169,11)"/><text x="90.4681%" y="79.50"></text></g><g><title>resolve_instance (1,674,127 samples, 0.51%)</title><rect x="90.1244%" y="85" width="0.5120%" height="15" fill="rgb(250,166,2)"/><text x="90.3744%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (355,824 samples, 0.11%)</title><rect x="90.6363%" y="85" width="0.1088%" height="15" fill="rgb(242,216,29)"/><text x="90.8863%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (5,200,553 samples, 1.59%)</title><rect x="90.7455%" y="85" width="1.5904%" height="15" fill="rgb(230,116,27)"/><text x="90.9955%" y="95.50"></text></g><g><title>upstream_monomorphizations (5,186,043 samples, 1.59%)</title><rect x="90.7500%" y="69" width="1.5860%" height="15" fill="rgb(228,99,48)"/><text x="91.0000%" y="79.50"></text></g><g><title>exported_symbols (4,400,183 samples, 1.35%)</title><rect x="90.9903%" y="53" width="1.3456%" height="15" fill="rgb(253,11,6)"/><text x="91.2403%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (4,390,693 samples, 1.34%)</title><rect x="90.9932%" y="37" width="1.3427%" height="15" fill="rgb(247,143,39)"/><text x="91.2432%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (13,141,074 samples, 4.02%)</title><rect x="88.3748%" y="101" width="4.0187%" height="15" fill="rgb(236,97,10)"/><text x="88.6248%" y="111.50">mono..</text></g><g><title>monomorphization_collector (13,196,054 samples, 4.04%)</title><rect x="88.3738%" y="117" width="4.0355%" height="15" fill="rgb(233,208,19)"/><text x="88.6238%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (606,786 samples, 0.19%)</title><rect x="92.4103%" y="101" width="0.1856%" height="15" fill="rgb(216,164,2)"/><text x="92.6603%" y="111.50"></text></g><g><title>symbol_name (552,406 samples, 0.17%)</title><rect x="92.4269%" y="85" width="0.1689%" height="15" fill="rgb(220,129,5)"/><text x="92.6769%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (14,147,613 samples, 4.33%)</title><rect x="88.3649%" y="133" width="4.3265%" height="15" fill="rgb(242,17,10)"/><text x="88.6149%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (922,659 samples, 0.28%)</title><rect x="92.4093%" y="117" width="0.2822%" height="15" fill="rgb(242,107,0)"/><text x="92.6593%" y="127.50"></text></g><g><title>exported_symbols (14,250,184 samples, 4.36%)</title><rect x="88.3529%" y="149" width="4.3579%" height="15" fill="rgb(251,28,31)"/><text x="88.6029%" y="159.50">expor..</text></g><g><title>layout_of (429,823 samples, 0.13%)</title><rect x="92.9321%" y="133" width="0.1314%" height="15" fill="rgb(233,223,10)"/><text x="93.1821%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (613,726 samples, 0.19%)</title><rect x="93.0635%" y="133" width="0.1877%" height="15" fill="rgb(215,21,27)"/><text x="93.3135%" y="143.50"></text></g><g><title>optimized_mir (1,707,118 samples, 0.52%)</title><rect x="92.7357%" y="149" width="0.5221%" height="15" fill="rgb(232,23,21)"/><text x="92.9857%" y="159.50"></text></g><g><title>generate_crate_metadata (17,141,284 samples, 5.24%)</title><rect x="88.0336%" y="165" width="5.2420%" height="15" fill="rgb(244,5,23)"/><text x="88.2836%" y="175.50">genera..</text></g><g><title>hir_lowering (1,845,399 samples, 0.56%)</title><rect x="93.2757%" y="165" width="0.5643%" height="15" fill="rgb(226,81,46)"/><text x="93.5257%" y="175.50"></text></g><g><title>finish_ongoing_codegen (12,509,637 samples, 3.83%)</title><rect x="93.8463%" y="149" width="3.8256%" height="15" fill="rgb(247,70,30)"/><text x="94.0963%" y="159.50">fini..</text></g><g><title>link_crate (1,630,857 samples, 0.50%)</title><rect x="97.6719%" y="149" width="0.4987%" height="15" fill="rgb(212,68,19)"/><text x="97.9219%" y="159.50"></text></g><g><title>link_binary (1,605,976 samples, 0.49%)</title><rect x="97.6795%" y="133" width="0.4911%" height="15" fill="rgb(240,187,13)"/><text x="97.9295%" y="143.50"></text></g><g><title>link_rlib (1,061,551 samples, 0.32%)</title><rect x="97.8460%" y="117" width="0.3246%" height="15" fill="rgb(223,113,26)"/><text x="98.0960%" y="127.50"></text></g><g><title>link (14,169,194 samples, 4.33%)</title><rect x="93.8400%" y="165" width="4.3331%" height="15" fill="rgb(206,192,2)"/><text x="94.0900%" y="175.50">link</text></g><g><title>parse_crate (3,876,379 samples, 1.19%)</title><rect x="98.1731%" y="165" width="1.1854%" height="15" fill="rgb(241,108,4)"/><text x="98.4231%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,415,634 samples, 0.43%)</title><rect x="99.4226%" y="165" width="0.4329%" height="15" fill="rgb(247,173,49)"/><text x="99.6726%" y="175.50"></text></g><g><title>all (326,998,418 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (326,998,418 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (401,084 samples, 0.12%)</title><rect x="99.8773%" y="165" width="0.1227%" height="15" fill="rgb(245,172,44)"/><text x="100.1273%" y="175.50"></text></g></svg></svg>