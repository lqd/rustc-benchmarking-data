<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (527,514,366 samples, 10.72%)</title><rect x="0.0326%" y="181" width="10.7244%" height="15" fill="rgb(227,0,7)"/><text x="0.2826%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (8,395,523 samples, 0.17%)</title><rect x="17.4291%" y="53" width="0.1707%" height="15" fill="rgb(217,0,24)"/><text x="17.6791%" y="63.50"></text></g><g><title>evaluate_obligation (6,615,945 samples, 0.13%)</title><rect x="17.4653%" y="37" width="0.1345%" height="15" fill="rgb(221,193,54)"/><text x="17.7153%" y="47.50"></text></g><g><title>needs_drop_raw (10,299,801 samples, 0.21%)</title><rect x="17.3906%" y="69" width="0.2094%" height="15" fill="rgb(248,212,6)"/><text x="17.6406%" y="79.50"></text></g><g><title>resolve_instance (8,165,731 samples, 0.17%)</title><rect x="17.5999%" y="69" width="0.1660%" height="15" fill="rgb(208,68,35)"/><text x="17.8499%" y="79.50"></text></g><g><title>thir_body (21,964,382 samples, 0.45%)</title><rect x="17.7724%" y="69" width="0.4465%" height="15" fill="rgb(232,128,0)"/><text x="18.0224%" y="79.50"></text></g><g><title>mir_const (117,403,954 samples, 2.39%)</title><rect x="15.8370%" y="117" width="2.3868%" height="15" fill="rgb(207,160,47)"/><text x="16.0870%" y="127.50">mi..</text></g><g><title>unsafety_check_result (103,737,931 samples, 2.11%)</title><rect x="16.1148%" y="101" width="2.1090%" height="15" fill="rgb(228,23,34)"/><text x="16.3648%" y="111.50">u..</text></g><g><title>mir_built (94,711,539 samples, 1.93%)</title><rect x="16.2983%" y="85" width="1.9255%" height="15" fill="rgb(218,30,26)"/><text x="16.5483%" y="95.50">m..</text></g><g><title>mir_promoted (131,459,431 samples, 2.67%)</title><rect x="15.5734%" y="133" width="2.6726%" height="15" fill="rgb(220,122,19)"/><text x="15.8234%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (5,336,997 samples, 0.11%)</title><rect x="18.2462%" y="133" width="0.1085%" height="15" fill="rgb(250,228,42)"/><text x="18.4962%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (6,319,891 samples, 0.13%)</title><rect x="18.3547%" y="133" width="0.1285%" height="15" fill="rgb(240,193,28)"/><text x="18.6047%" y="143.50"></text></g><g><title>type_op_prove_predicate (20,206,487 samples, 0.41%)</title><rect x="18.5775%" y="133" width="0.4108%" height="15" fill="rgb(216,20,37)"/><text x="18.8275%" y="143.50"></text></g><g><title>MIR_borrow_checking (400,956,481 samples, 8.15%)</title><rect x="10.8374%" y="165" width="8.1515%" height="15" fill="rgb(206,188,39)"/><text x="11.0874%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (398,209,125 samples, 8.10%)</title><rect x="10.8932%" y="149" width="8.0956%" height="15" fill="rgb(217,207,13)"/><text x="11.1432%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (6,083,485 samples, 0.12%)</title><rect x="19.0689%" y="149" width="0.1237%" height="15" fill="rgb(231,73,38)"/><text x="19.3189%" y="159.50"></text></g><g><title>misc_checking_1 (13,376,946 samples, 0.27%)</title><rect x="19.0672%" y="165" width="0.2720%" height="15" fill="rgb(225,20,46)"/><text x="19.3172%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (7,617,417 samples, 0.15%)</title><rect x="19.3392%" y="149" width="0.1549%" height="15" fill="rgb(210,31,41)"/><text x="19.5892%" y="159.50"></text></g><g><title>check_mod_liveness (6,052,777 samples, 0.12%)</title><rect x="19.3710%" y="133" width="0.1231%" height="15" fill="rgb(221,200,47)"/><text x="19.6210%" y="143.50"></text></g><g><title>mir_borrowck (7,817,489 samples, 0.16%)</title><rect x="19.9993%" y="37" width="0.1589%" height="15" fill="rgb(226,26,5)"/><text x="20.2493%" y="47.50"></text></g><g><title>eval_to_const_value_raw (14,924,454 samples, 0.30%)</title><rect x="19.8558%" y="117" width="0.3034%" height="15" fill="rgb(249,33,26)"/><text x="20.1058%" y="127.50"></text></g><g><title>eval_to_const_value_raw (14,556,430 samples, 0.30%)</title><rect x="19.8633%" y="101" width="0.2959%" height="15" fill="rgb(235,183,28)"/><text x="20.1133%" y="111.50"></text></g><g><title>eval_to_allocation_raw (14,237,956 samples, 0.29%)</title><rect x="19.8697%" y="85" width="0.2895%" height="15" fill="rgb(221,5,38)"/><text x="20.1197%" y="95.50"></text></g><g><title>mir_for_ctfe (12,282,176 samples, 0.25%)</title><rect x="19.9095%" y="69" width="0.2497%" height="15" fill="rgb(247,18,42)"/><text x="20.1595%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,209,355 samples, 0.23%)</title><rect x="19.9313%" y="53" width="0.2279%" height="15" fill="rgb(241,131,45)"/><text x="20.1813%" y="63.50"></text></g><g><title>misc_checking_2 (44,511,302 samples, 0.90%)</title><rect x="19.3391%" y="165" width="0.9049%" height="15" fill="rgb(249,31,29)"/><text x="19.5891%" y="175.50"></text></g><g><title>match_checking (36,889,895 samples, 0.75%)</title><rect x="19.4941%" y="149" width="0.7500%" height="15" fill="rgb(225,111,53)"/><text x="19.7441%" y="159.50"></text></g><g><title>check_match (36,321,182 samples, 0.74%)</title><rect x="19.5056%" y="133" width="0.7384%" height="15" fill="rgb(238,160,17)"/><text x="19.7556%" y="143.50"></text></g><g><title>death_checking (6,579,967 samples, 0.13%)</title><rect x="20.3238%" y="149" width="0.1338%" height="15" fill="rgb(214,148,48)"/><text x="20.5738%" y="159.50"></text></g><g><title>crate_lints (11,727,999 samples, 0.24%)</title><rect x="20.4576%" y="133" width="0.2384%" height="15" fill="rgb(232,36,49)"/><text x="20.7076%" y="143.50"></text></g><g><title>lint_checking (22,107,345 samples, 0.45%)</title><rect x="20.4575%" y="149" width="0.4494%" height="15" fill="rgb(209,103,24)"/><text x="20.7075%" y="159.50"></text></g><g><title>module_lints (10,375,555 samples, 0.21%)</title><rect x="20.6960%" y="133" width="0.2109%" height="15" fill="rgb(229,88,8)"/><text x="20.9460%" y="143.50"></text></g><g><title>lint_mod (10,345,325 samples, 0.21%)</title><rect x="20.6967%" y="117" width="0.2103%" height="15" fill="rgb(213,181,19)"/><text x="20.9467%" y="127.50"></text></g><g><title>privacy_access_levels (7,556,896 samples, 0.15%)</title><rect x="20.9070%" y="149" width="0.1536%" height="15" fill="rgb(254,191,54)"/><text x="21.1570%" y="159.50"></text></g><g><title>privacy_checking_modules (16,384,796 samples, 0.33%)</title><rect x="21.0606%" y="149" width="0.3331%" height="15" fill="rgb(241,83,37)"/><text x="21.3106%" y="159.50"></text></g><g><title>check_mod_privacy (16,360,016 samples, 0.33%)</title><rect x="21.0611%" y="133" width="0.3326%" height="15" fill="rgb(233,36,39)"/><text x="21.3111%" y="143.50"></text></g><g><title>misc_checking_3 (56,706,155 samples, 1.15%)</title><rect x="20.2440%" y="165" width="1.1528%" height="15" fill="rgb(226,3,54)"/><text x="20.4940%" y="175.50"></text></g><g><title>impl_trait_ref (6,094,454 samples, 0.12%)</title><rect x="21.5986%" y="101" width="0.1239%" height="15" fill="rgb(245,192,40)"/><text x="21.8486%" y="111.50"></text></g><g><title>coherent_trait (16,604,419 samples, 0.34%)</title><rect x="21.4139%" y="133" width="0.3376%" height="15" fill="rgb(238,167,29)"/><text x="21.6639%" y="143.50"></text></g><g><title>specialization_graph_of (15,733,430 samples, 0.32%)</title><rect x="21.4316%" y="117" width="0.3199%" height="15" fill="rgb(232,182,51)"/><text x="21.6816%" y="127.50"></text></g><g><title>coherence_checking (17,214,214 samples, 0.35%)</title><rect x="21.4133%" y="149" width="0.3500%" height="15" fill="rgb(231,60,39)"/><text x="21.6633%" y="159.50"></text></g><g><title>evaluate_obligation (26,502,023 samples, 0.54%)</title><rect x="29.5419%" y="101" width="0.5388%" height="15" fill="rgb(208,69,12)"/><text x="29.7919%" y="111.50"></text></g><g><title>typeck (102,138,327 samples, 2.08%)</title><rect x="30.2632%" y="101" width="2.0765%" height="15" fill="rgb(235,93,37)"/><text x="30.5132%" y="111.50">t..</text></g><g><title>item_bodies_checking (520,056,311 samples, 10.57%)</title><rect x="21.7736%" y="149" width="10.5728%" height="15" fill="rgb(213,116,39)"/><text x="22.0236%" y="159.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (520,052,231 samples, 10.57%)</title><rect x="21.7737%" y="133" width="10.5727%" height="15" fill="rgb(222,207,29)"/><text x="22.0237%" y="143.50">typeck_item_bod..</text></g><g><title>typeck (518,870,386 samples, 10.55%)</title><rect x="21.7977%" y="117" width="10.5486%" height="15" fill="rgb(206,96,30)"/><text x="22.0477%" y="127.50">typeck</text></g><g><title>item_types_checking (20,402,026 samples, 0.41%)</title><rect x="32.3463%" y="149" width="0.4148%" height="15" fill="rgb(218,138,4)"/><text x="32.5963%" y="159.50"></text></g><g><title>check_mod_item_types (20,373,096 samples, 0.41%)</title><rect x="32.3469%" y="133" width="0.4142%" height="15" fill="rgb(250,191,14)"/><text x="32.5969%" y="143.50"></text></g><g><title>named_region_map (8,387,601 samples, 0.17%)</title><rect x="32.9444%" y="101" width="0.1705%" height="15" fill="rgb(239,60,40)"/><text x="33.1944%" y="111.50"></text></g><g><title>resolve_lifetimes (8,154,716 samples, 0.17%)</title><rect x="32.9491%" y="85" width="0.1658%" height="15" fill="rgb(206,27,48)"/><text x="33.1991%" y="95.50"></text></g><g><title>generics_of (10,029,865 samples, 0.20%)</title><rect x="32.9140%" y="117" width="0.2039%" height="15" fill="rgb(225,35,8)"/><text x="33.1640%" y="127.50"></text></g><g><title>predicates_of (6,139,410 samples, 0.12%)</title><rect x="33.1275%" y="117" width="0.1248%" height="15" fill="rgb(250,213,24)"/><text x="33.3775%" y="127.50"></text></g><g><title>predicates_defined_on (5,385,504 samples, 0.11%)</title><rect x="33.1429%" y="101" width="0.1095%" height="15" fill="rgb(247,123,22)"/><text x="33.3929%" y="111.50"></text></g><g><title>type_collecting (25,150,195 samples, 0.51%)</title><rect x="32.7615%" y="149" width="0.5113%" height="15" fill="rgb(231,138,38)"/><text x="33.0115%" y="159.50"></text></g><g><title>collect_mod_item_types (25,101,025 samples, 0.51%)</title><rect x="32.7625%" y="133" width="0.5103%" height="15" fill="rgb(231,145,46)"/><text x="33.0125%" y="143.50"></text></g><g><title>region_scope_tree (7,052,763 samples, 0.14%)</title><rect x="33.9601%" y="117" width="0.1434%" height="15" fill="rgb(251,118,11)"/><text x="34.2101%" y="127.50"></text></g><g><title>check_impl_item_well_formed (38,179,919 samples, 0.78%)</title><rect x="33.3284%" y="133" width="0.7762%" height="15" fill="rgb(217,147,25)"/><text x="33.5784%" y="143.50"></text></g><g><title>check_item_well_formed (20,732,292 samples, 0.42%)</title><rect x="34.1046%" y="133" width="0.4215%" height="15" fill="rgb(247,81,37)"/><text x="34.3546%" y="143.50"></text></g><g><title>analysis (1,169,669,735 samples, 23.78%)</title><rect x="10.7570%" y="181" width="23.7794%" height="15" fill="rgb(209,12,38)"/><text x="11.0070%" y="191.50">analysis</text></g><g><title>type_check_crate (646,311,702 samples, 13.14%)</title><rect x="21.3969%" y="165" width="13.1395%" height="15" fill="rgb(227,1,9)"/><text x="21.6469%" y="175.50">type_check_crate</text></g><g><title>wf_checking (62,050,221 samples, 1.26%)</title><rect x="33.2749%" y="149" width="1.2615%" height="15" fill="rgb(248,47,43)"/><text x="33.5249%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (9,089,864 samples, 0.18%)</title><rect x="43.2522%" y="149" width="0.1848%" height="15" fill="rgb(221,10,30)"/><text x="43.5022%" y="159.50"></text></g><g><title>const_caller_location (5,958,291 samples, 0.12%)</title><rect x="43.4370%" y="149" width="0.1211%" height="15" fill="rgb(210,229,1)"/><text x="43.6870%" y="159.50"></text></g><g><title>param_env (6,521,276 samples, 0.13%)</title><rect x="43.9686%" y="133" width="0.1326%" height="15" fill="rgb(222,148,37)"/><text x="44.2186%" y="143.50"></text></g><g><title>fn_abi_of_instance (29,671,197 samples, 0.60%)</title><rect x="43.5593%" y="149" width="0.6032%" height="15" fill="rgb(234,67,33)"/><text x="43.8093%" y="159.50"></text></g><g><title>layout_of (5,416,414 samples, 0.11%)</title><rect x="44.1974%" y="149" width="0.1101%" height="15" fill="rgb(247,98,35)"/><text x="44.4474%" y="159.50"></text></g><g><title>codegen_module (479,478,937 samples, 9.75%)</title><rect x="34.6077%" y="165" width="9.7478%" height="15" fill="rgb(247,138,52)"/><text x="34.8577%" y="175.50">codegen_module</text></g><g><title>codegen_crate (483,074,095 samples, 9.82%)</title><rect x="34.5366%" y="181" width="9.8209%" height="15" fill="rgb(213,79,30)"/><text x="34.7866%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,055,424,405 samples, 41.79%)</title><rect x="44.3639%" y="165" width="41.7868%" height="15" fill="rgb(246,177,23)"/><text x="44.6139%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,938,865,321 samples, 39.42%)</title><rect x="46.7335%" y="149" width="39.4172%" height="15" fill="rgb(230,62,27)"/><text x="46.9835%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,166,214,000 samples, 44.04%)</title><rect x="44.3575%" y="181" width="44.0392%" height="15" fill="rgb(216,154,8)"/><text x="44.6075%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (110,476,311 samples, 2.25%)</title><rect x="86.1507%" y="165" width="2.2460%" height="15" fill="rgb(244,35,45)"/><text x="86.4007%" y="175.50">L..</text></g><g><title>macro_expand_crate (96,102,566 samples, 1.95%)</title><rect x="88.4626%" y="165" width="1.9538%" height="15" fill="rgb(251,115,12)"/><text x="88.7126%" y="175.50">m..</text></g><g><title>expand_crate (96,085,126 samples, 1.95%)</title><rect x="88.4629%" y="149" width="1.9534%" height="15" fill="rgb(240,54,50)"/><text x="88.7129%" y="159.50">e..</text></g><g><title>late_resolve_crate (20,773,711 samples, 0.42%)</title><rect x="90.4476%" y="149" width="0.4223%" height="15" fill="rgb(233,84,52)"/><text x="90.6976%" y="159.50"></text></g><g><title>configure_and_expand (124,497,285 samples, 2.53%)</title><rect x="88.3967%" y="181" width="2.5310%" height="15" fill="rgb(207,117,47)"/><text x="88.6467%" y="191.50">co..</text></g><g><title>resolve_crate (25,075,956 samples, 0.51%)</title><rect x="90.4179%" y="165" width="0.5098%" height="15" fill="rgb(249,43,39)"/><text x="90.6679%" y="175.50"></text></g><g><title>early_lint_checks (5,925,140 samples, 0.12%)</title><rect x="91.0145%" y="181" width="0.1205%" height="15" fill="rgb(209,38,44)"/><text x="91.2645%" y="191.50"></text></g><g><title>free_global_ctxt (36,838,474 samples, 0.75%)</title><rect x="91.1350%" y="181" width="0.7489%" height="15" fill="rgb(236,212,23)"/><text x="91.3850%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,680,086 samples, 0.38%)</title><rect x="93.2923%" y="85" width="0.3798%" height="15" fill="rgb(242,79,21)"/><text x="93.5423%" y="95.50"></text></g><g><title>eval_to_const_value_raw (6,637,062 samples, 0.13%)</title><rect x="93.7052%" y="69" width="0.1349%" height="15" fill="rgb(211,96,35)"/><text x="93.9552%" y="79.50"></text></g><g><title>eval_to_const_value_raw (6,361,130 samples, 0.13%)</title><rect x="93.7108%" y="53" width="0.1293%" height="15" fill="rgb(253,215,40)"/><text x="93.9608%" y="63.50"></text></g><g><title>eval_to_allocation_raw (6,029,675 samples, 0.12%)</title><rect x="93.7175%" y="37" width="0.1226%" height="15" fill="rgb(211,81,21)"/><text x="93.9675%" y="47.50"></text></g><g><title>optimized_mir (48,635,410 samples, 0.99%)</title><rect x="92.8516%" y="101" width="0.9888%" height="15" fill="rgb(208,190,38)"/><text x="93.1016%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,017,765 samples, 0.16%)</title><rect x="93.6773%" y="85" width="0.1630%" height="15" fill="rgb(235,213,38)"/><text x="93.9273%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (15,931,168 samples, 0.32%)</title><rect x="93.9468%" y="85" width="0.3239%" height="15" fill="rgb(237,122,38)"/><text x="94.1968%" y="95.50"></text></g><g><title>resolve_instance (25,561,418 samples, 0.52%)</title><rect x="93.8403%" y="101" width="0.5197%" height="15" fill="rgb(244,218,35)"/><text x="94.0903%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (107,511,201 samples, 2.19%)</title><rect x="92.3430%" y="117" width="2.1857%" height="15" fill="rgb(240,68,47)"/><text x="92.5930%" y="127.50">m..</text></g><g><title>monomorphization_collector (108,121,637 samples, 2.20%)</title><rect x="92.3429%" y="133" width="2.1981%" height="15" fill="rgb(210,16,53)"/><text x="92.5929%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (12,205,694 samples, 0.25%)</title><rect x="94.5413%" y="117" width="0.2481%" height="15" fill="rgb(235,124,12)"/><text x="94.7913%" y="127.50"></text></g><g><title>symbol_name (10,610,263 samples, 0.22%)</title><rect x="94.5738%" y="101" width="0.2157%" height="15" fill="rgb(224,169,11)"/><text x="94.8238%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (125,586,316 samples, 2.55%)</title><rect x="92.3411%" y="149" width="2.5532%" height="15" fill="rgb(250,166,2)"/><text x="92.5911%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (17,377,156 samples, 0.35%)</title><rect x="94.5410%" y="133" width="0.3533%" height="15" fill="rgb(242,216,29)"/><text x="94.7910%" y="143.50"></text></g><g><title>cgu_partitioning (5,154,672 samples, 0.10%)</title><rect x="94.7895%" y="117" width="0.1048%" height="15" fill="rgb(230,116,27)"/><text x="95.0395%" y="127.50"></text></g><g><title>exported_symbols (128,663,386 samples, 2.62%)</title><rect x="92.3253%" y="165" width="2.6157%" height="15" fill="rgb(228,99,48)"/><text x="92.5753%" y="175.50">ex..</text></g><g><title>layout_of (6,143,434 samples, 0.12%)</title><rect x="95.7777%" y="149" width="0.1249%" height="15" fill="rgb(253,11,6)"/><text x="96.0277%" y="159.50"></text></g><g><title>needs_drop_raw (5,095,782 samples, 0.10%)</title><rect x="97.3125%" y="133" width="0.1036%" height="15" fill="rgb(247,143,39)"/><text x="97.5625%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (74,782,744 samples, 1.52%)</title><rect x="95.9026%" y="149" width="1.5203%" height="15" fill="rgb(236,97,10)"/><text x="96.1526%" y="159.50"></text></g><g><title>optimized_mir (121,811,836 samples, 2.48%)</title><rect x="94.9611%" y="165" width="2.4764%" height="15" fill="rgb(233,208,19)"/><text x="95.2111%" y="175.50">op..</text></g><g><title>generate_crate_metadata (274,179,684 samples, 5.57%)</title><rect x="91.8839%" y="181" width="5.5741%" height="15" fill="rgb(216,164,2)"/><text x="92.1339%" y="191.50">generat..</text></g><g><title>hir_lowering (45,570,282 samples, 0.93%)</title><rect x="97.4580%" y="181" width="0.9264%" height="15" fill="rgb(220,129,5)"/><text x="97.7080%" y="191.50"></text></g><g><title>finish_ongoing_codegen (57,484,703 samples, 1.17%)</title><rect x="98.3849%" y="165" width="1.1687%" height="15" fill="rgb(242,17,10)"/><text x="98.6349%" y="175.50"></text></g><g><title>link_crate (13,118,013 samples, 0.27%)</title><rect x="99.5536%" y="165" width="0.2667%" height="15" fill="rgb(242,107,0)"/><text x="99.8036%" y="175.50"></text></g><g><title>link_binary (12,735,039 samples, 0.26%)</title><rect x="99.5614%" y="149" width="0.2589%" height="15" fill="rgb(251,28,31)"/><text x="99.8114%" y="159.50"></text></g><g><title>link_rlib (10,911,410 samples, 0.22%)</title><rect x="99.5984%" y="133" width="0.2218%" height="15" fill="rgb(233,223,10)"/><text x="99.8484%" y="143.50"></text></g><g><title>link (70,640,867 samples, 1.44%)</title><rect x="98.3844%" y="181" width="1.4361%" height="15" fill="rgb(215,21,27)"/><text x="98.6344%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (6,576,657 samples, 0.13%)</title><rect x="99.8316%" y="181" width="0.1337%" height="15" fill="rgb(232,23,21)"/><text x="100.0816%" y="191.50"></text></g><g><title>all (4,918,835,218 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (4,918,835,218 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>