<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,863,959 samples, 7.67%)</title><rect x="0.4730%" y="197" width="7.6672%" height="15" fill="rgb(227,0,7)"/><text x="0.7230%" y="207.50">LLVM_passes</text></g><g><title>param_env (188,714 samples, 0.16%)</title><rect x="13.6700%" y="117" width="0.1632%" height="15" fill="rgb(217,0,24)"/><text x="13.9200%" y="127.50"></text></g><g><title>item_attrs (556,397 samples, 0.48%)</title><rect x="14.1205%" y="85" width="0.4813%" height="15" fill="rgb(221,193,54)"/><text x="14.3705%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (548,967 samples, 0.47%)</title><rect x="14.1269%" y="69" width="0.4748%" height="15" fill="rgb(248,212,6)"/><text x="14.3769%" y="79.50"></text></g><g><title>codegen_fn_attrs (640,967 samples, 0.55%)</title><rect x="14.0596%" y="101" width="0.5544%" height="15" fill="rgb(208,68,35)"/><text x="14.3096%" y="111.50"></text></g><g><title>adt_drop_tys (171,062 samples, 0.15%)</title><rect x="15.9071%" y="69" width="0.1480%" height="15" fill="rgb(232,128,0)"/><text x="16.1571%" y="79.50"></text></g><g><title>needs_drop_raw (679,908 samples, 0.59%)</title><rect x="15.8546%" y="85" width="0.5881%" height="15" fill="rgb(207,160,47)"/><text x="16.1046%" y="95.50"></text></g><g><title>is_copy_raw (448,176 samples, 0.39%)</title><rect x="16.0551%" y="69" width="0.3877%" height="15" fill="rgb(228,23,34)"/><text x="16.3051%" y="79.50"></text></g><g><title>evaluate_obligation (381,475 samples, 0.33%)</title><rect x="16.1128%" y="53" width="0.3300%" height="15" fill="rgb(218,30,26)"/><text x="16.3628%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (291,623 samples, 0.25%)</title><rect x="16.5264%" y="69" width="0.2522%" height="15" fill="rgb(220,122,19)"/><text x="16.7764%" y="79.50"></text></g><g><title>impl_parent (307,513 samples, 0.27%)</title><rect x="17.2351%" y="53" width="0.2660%" height="15" fill="rgb(250,228,42)"/><text x="17.4851%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (208,903 samples, 0.18%)</title><rect x="17.3204%" y="37" width="0.1807%" height="15" fill="rgb(240,193,28)"/><text x="17.5704%" y="47.50"></text></g><g><title>specialization_graph_of (1,382,615 samples, 1.20%)</title><rect x="16.8115%" y="69" width="1.1959%" height="15" fill="rgb(216,20,37)"/><text x="17.0615%" y="79.50"></text></g><g><title>impl_trait_ref (585,306 samples, 0.51%)</title><rect x="17.5011%" y="53" width="0.5063%" height="15" fill="rgb(206,188,39)"/><text x="17.7511%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (485,625 samples, 0.42%)</title><rect x="17.5874%" y="37" width="0.4201%" height="15" fill="rgb(217,207,13)"/><text x="17.8374%" y="47.50"></text></g><g><title>resolve_instance (1,853,638 samples, 1.60%)</title><rect x="16.4427%" y="85" width="1.6034%" height="15" fill="rgb(231,73,38)"/><text x="16.6927%" y="95.50"></text></g><g><title>thir_body (527,317 samples, 0.46%)</title><rect x="18.0560%" y="85" width="0.4561%" height="15" fill="rgb(225,20,46)"/><text x="18.3060%" y="95.50"></text></g><g><title>mir_const (6,066,900 samples, 5.25%)</title><rect x="13.2716%" y="133" width="5.2478%" height="15" fill="rgb(210,31,41)"/><text x="13.5216%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (5,417,645 samples, 4.69%)</title><rect x="13.8332%" y="117" width="4.6862%" height="15" fill="rgb(221,200,47)"/><text x="14.0832%" y="127.50">unsaf..</text></g><g><title>mir_built (4,514,975 samples, 3.91%)</title><rect x="14.6140%" y="101" width="3.9054%" height="15" fill="rgb(226,26,5)"/><text x="14.8640%" y="111.50">mir_..</text></g><g><title>mir_promoted (6,599,773 samples, 5.71%)</title><rect x="12.8674%" y="149" width="5.7087%" height="15" fill="rgb(249,33,26)"/><text x="13.1174%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (207,452 samples, 0.18%)</title><rect x="18.5761%" y="149" width="0.1794%" height="15" fill="rgb(235,183,28)"/><text x="18.8261%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (315,560 samples, 0.27%)</title><rect x="18.7555%" y="149" width="0.2730%" height="15" fill="rgb(221,5,38)"/><text x="19.0055%" y="159.50"></text></g><g><title>normalize_projection_ty (226,170 samples, 0.20%)</title><rect x="18.8328%" y="133" width="0.1956%" height="15" fill="rgb(247,18,42)"/><text x="19.0828%" y="143.50"></text></g><g><title>type_op_prove_predicate (864,886 samples, 0.75%)</title><rect x="19.0971%" y="149" width="0.7481%" height="15" fill="rgb(241,131,45)"/><text x="19.3471%" y="159.50"></text></g><g><title>MIR_borrow_checking (13,382,515 samples, 11.58%)</title><rect x="8.2745%" y="181" width="11.5757%" height="15" fill="rgb(249,31,29)"/><text x="8.5245%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (13,338,925 samples, 11.54%)</title><rect x="8.3122%" y="165" width="11.5379%" height="15" fill="rgb(225,111,53)"/><text x="8.5622%" y="175.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (150,311 samples, 0.13%)</title><rect x="20.2264%" y="133" width="0.1300%" height="15" fill="rgb(238,160,17)"/><text x="20.4764%" y="143.50"></text></g><g><title>codegen_fn_attrs (253,862 samples, 0.22%)</title><rect x="20.1538%" y="149" width="0.2196%" height="15" fill="rgb(214,148,48)"/><text x="20.4038%" y="159.50"></text></g><g><title>check_mod_attrs (378,673 samples, 0.33%)</title><rect x="20.0459%" y="165" width="0.3275%" height="15" fill="rgb(232,36,49)"/><text x="20.2959%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (383,345 samples, 0.33%)</title><rect x="20.4529%" y="165" width="0.3316%" height="15" fill="rgb(209,103,24)"/><text x="20.7029%" y="175.50"></text></g><g><title>misc_checking_1 (904,359 samples, 0.78%)</title><rect x="20.0261%" y="181" width="0.7823%" height="15" fill="rgb(229,88,8)"/><text x="20.2761%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (473,805 samples, 0.41%)</title><rect x="20.8095%" y="165" width="0.4098%" height="15" fill="rgb(213,181,19)"/><text x="21.0595%" y="175.50"></text></g><g><title>check_mod_liveness (424,365 samples, 0.37%)</title><rect x="20.8523%" y="149" width="0.3671%" height="15" fill="rgb(254,191,54)"/><text x="21.1023%" y="159.50"></text></g><g><title>misc_checking_2 (780,848 samples, 0.68%)</title><rect x="20.8084%" y="181" width="0.6754%" height="15" fill="rgb(241,83,37)"/><text x="21.0584%" y="191.50"></text></g><g><title>match_checking (305,683 samples, 0.26%)</title><rect x="21.2194%" y="165" width="0.2644%" height="15" fill="rgb(233,36,39)"/><text x="21.4694%" y="175.50"></text></g><g><title>check_match (293,063 samples, 0.25%)</title><rect x="21.2303%" y="149" width="0.2535%" height="15" fill="rgb(226,3,54)"/><text x="21.4803%" y="159.50"></text></g><g><title>death_checking (193,622 samples, 0.17%)</title><rect x="21.5662%" y="165" width="0.1675%" height="15" fill="rgb(245,192,40)"/><text x="21.8162%" y="175.50"></text></g><g><title>eval_to_const_value_raw (227,562 samples, 0.20%)</title><rect x="22.2191%" y="133" width="0.1968%" height="15" fill="rgb(238,167,29)"/><text x="22.4691%" y="143.50"></text></g><g><title>eval_to_const_value_raw (219,352 samples, 0.19%)</title><rect x="22.2262%" y="117" width="0.1897%" height="15" fill="rgb(232,182,51)"/><text x="22.4762%" y="127.50"></text></g><g><title>eval_to_allocation_raw (215,612 samples, 0.19%)</title><rect x="22.2294%" y="101" width="0.1865%" height="15" fill="rgb(231,60,39)"/><text x="22.4794%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (116,921 samples, 0.10%)</title><rect x="22.3148%" y="85" width="0.1011%" height="15" fill="rgb(208,69,12)"/><text x="22.5648%" y="95.50"></text></g><g><title>param_env (116,551 samples, 0.10%)</title><rect x="22.4159%" y="133" width="0.1008%" height="15" fill="rgb(235,93,37)"/><text x="22.6659%" y="143.50"></text></g><g><title>crate_lints (1,927,139 samples, 1.67%)</title><rect x="21.7348%" y="149" width="1.6669%" height="15" fill="rgb(213,116,39)"/><text x="21.9848%" y="159.50"></text></g><g><title>type_of (1,016,422 samples, 0.88%)</title><rect x="22.5226%" y="133" width="0.8792%" height="15" fill="rgb(222,207,29)"/><text x="22.7726%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (785,826 samples, 0.68%)</title><rect x="22.7220%" y="117" width="0.6797%" height="15" fill="rgb(206,96,30)"/><text x="22.9720%" y="127.50"></text></g><g><title>lint_checking (2,116,931 samples, 1.83%)</title><rect x="21.7336%" y="165" width="1.8311%" height="15" fill="rgb(218,138,4)"/><text x="21.9836%" y="175.50">l..</text></g><g><title>module_lints (188,452 samples, 0.16%)</title><rect x="23.4017%" y="149" width="0.1630%" height="15" fill="rgb(250,191,14)"/><text x="23.6517%" y="159.50"></text></g><g><title>lint_mod (185,282 samples, 0.16%)</title><rect x="23.4045%" y="133" width="0.1603%" height="15" fill="rgb(239,60,40)"/><text x="23.6545%" y="143.50"></text></g><g><title>privacy_checking_modules (374,214 samples, 0.32%)</title><rect x="23.6443%" y="165" width="0.3237%" height="15" fill="rgb(206,27,48)"/><text x="23.8943%" y="175.50"></text></g><g><title>check_mod_privacy (372,004 samples, 0.32%)</title><rect x="23.6462%" y="149" width="0.3218%" height="15" fill="rgb(225,35,8)"/><text x="23.8962%" y="159.50"></text></g><g><title>misc_checking_3 (2,881,759 samples, 2.49%)</title><rect x="21.4838%" y="181" width="2.4927%" height="15" fill="rgb(250,213,24)"/><text x="21.7338%" y="191.50">mi..</text></g><g><title>impl_trait_ref (152,852 samples, 0.13%)</title><rect x="24.1527%" y="85" width="0.1322%" height="15" fill="rgb(247,123,22)"/><text x="24.4027%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (132,882 samples, 0.11%)</title><rect x="24.1700%" y="69" width="0.1149%" height="15" fill="rgb(231,138,38)"/><text x="24.4200%" y="79.50"></text></g><g><title>adt_destructor (315,563 samples, 0.27%)</title><rect x="24.0332%" y="133" width="0.2730%" height="15" fill="rgb(231,145,46)"/><text x="24.2832%" y="143.50"></text></g><g><title>coherent_trait (309,473 samples, 0.27%)</title><rect x="24.0385%" y="117" width="0.2677%" height="15" fill="rgb(251,118,11)"/><text x="24.2885%" y="127.50"></text></g><g><title>specialization_graph_of (307,803 samples, 0.27%)</title><rect x="24.0400%" y="101" width="0.2662%" height="15" fill="rgb(217,147,25)"/><text x="24.2900%" y="111.50"></text></g><g><title>impl_parent (1,671,046 samples, 1.45%)</title><rect x="26.7404%" y="117" width="1.4454%" height="15" fill="rgb(247,81,37)"/><text x="26.9904%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,005,099 samples, 0.87%)</title><rect x="27.3165%" y="101" width="0.8694%" height="15" fill="rgb(209,12,38)"/><text x="27.5665%" y="111.50"></text></g><g><title>impl_trait_ref (4,173,934 samples, 3.61%)</title><rect x="28.1859%" y="117" width="3.6104%" height="15" fill="rgb(227,1,9)"/><text x="28.4359%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,492,115 samples, 3.02%)</title><rect x="28.7756%" y="101" width="3.0206%" height="15" fill="rgb(248,47,43)"/><text x="29.0256%" y="111.50">met..</text></g><g><title>coherent_trait (9,552,475 samples, 8.26%)</title><rect x="24.0166%" y="149" width="8.2627%" height="15" fill="rgb(221,10,30)"/><text x="24.2666%" y="159.50">coherent_tra..</text></g><g><title>specialization_graph_of (9,106,921 samples, 7.88%)</title><rect x="24.4020%" y="133" width="7.8773%" height="15" fill="rgb(210,229,1)"/><text x="24.6520%" y="143.50">specializat..</text></g><g><title>trait_impls_of (556,415 samples, 0.48%)</title><rect x="31.7981%" y="117" width="0.4813%" height="15" fill="rgb(222,148,37)"/><text x="32.0481%" y="127.50"></text></g><g><title>implementations_of_trait (139,931 samples, 0.12%)</title><rect x="32.1583%" y="101" width="0.1210%" height="15" fill="rgb(234,67,33)"/><text x="32.4083%" y="111.50"></text></g><g><title>coherence_checking (9,605,627 samples, 8.31%)</title><rect x="24.0022%" y="165" width="8.3087%" height="15" fill="rgb(247,98,35)"/><text x="24.2522%" y="175.50">coherence_ch..</text></g><g><title>dropck_outlives (143,223 samples, 0.12%)</title><rect x="39.5809%" y="117" width="0.1239%" height="15" fill="rgb(247,138,52)"/><text x="39.8309%" y="127.50"></text></g><g><title>trait_impls_of (363,223 samples, 0.31%)</title><rect x="40.6568%" y="101" width="0.3142%" height="15" fill="rgb(213,79,30)"/><text x="40.9068%" y="111.50"></text></g><g><title>implementations_of_trait (134,032 samples, 0.12%)</title><rect x="40.8550%" y="85" width="0.1159%" height="15" fill="rgb(246,177,23)"/><text x="41.1050%" y="95.50"></text></g><g><title>evaluate_obligation (1,464,790 samples, 1.27%)</title><rect x="39.7048%" y="117" width="1.2670%" height="15" fill="rgb(230,62,27)"/><text x="39.9548%" y="127.50"></text></g><g><title>method_autoderef_steps (130,191 samples, 0.11%)</title><rect x="41.2755%" y="117" width="0.1126%" height="15" fill="rgb(216,154,8)"/><text x="41.5255%" y="127.50"></text></g><g><title>predicates_of (157,771 samples, 0.14%)</title><rect x="41.4106%" y="117" width="0.1365%" height="15" fill="rgb(244,35,45)"/><text x="41.6606%" y="127.50"></text></g><g><title>associated_item (538,337 samples, 0.47%)</title><rect x="44.0203%" y="85" width="0.4657%" height="15" fill="rgb(251,115,12)"/><text x="44.2703%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (434,236 samples, 0.38%)</title><rect x="44.1103%" y="69" width="0.3756%" height="15" fill="rgb(240,54,50)"/><text x="44.3603%" y="79.50"></text></g><g><title>associated_items (711,949 samples, 0.62%)</title><rect x="43.8878%" y="101" width="0.6158%" height="15" fill="rgb(233,84,52)"/><text x="44.1378%" y="111.50"></text></g><g><title>adt_dtorck_constraint (125,281 samples, 0.11%)</title><rect x="44.6257%" y="69" width="0.1084%" height="15" fill="rgb(207,117,47)"/><text x="44.8757%" y="79.50"></text></g><g><title>dropck_outlives (258,632 samples, 0.22%)</title><rect x="44.5201%" y="101" width="0.2237%" height="15" fill="rgb(249,43,39)"/><text x="44.7701%" y="111.50"></text></g><g><title>adt_dtorck_constraint (202,921 samples, 0.18%)</title><rect x="44.5683%" y="85" width="0.1755%" height="15" fill="rgb(209,38,44)"/><text x="44.8183%" y="95.50"></text></g><g><title>adt_def (132,820 samples, 0.11%)</title><rect x="45.1134%" y="69" width="0.1149%" height="15" fill="rgb(236,212,23)"/><text x="45.3634%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (131,290 samples, 0.11%)</title><rect x="45.1148%" y="53" width="0.1136%" height="15" fill="rgb(242,79,21)"/><text x="45.3648%" y="63.50"></text></g><g><title>adt_sized_constraint (175,921 samples, 0.15%)</title><rect x="45.1059%" y="85" width="0.1522%" height="15" fill="rgb(211,96,35)"/><text x="45.3559%" y="95.50"></text></g><g><title>evaluate_obligation (1,049,743 samples, 0.91%)</title><rect x="44.7438%" y="101" width="0.9080%" height="15" fill="rgb(253,215,40)"/><text x="44.9938%" y="111.50"></text></g><g><title>trait_impls_of (323,133 samples, 0.28%)</title><rect x="45.3723%" y="85" width="0.2795%" height="15" fill="rgb(211,81,21)"/><text x="45.6223%" y="95.50"></text></g><g><title>is_copy_raw (121,540 samples, 0.11%)</title><rect x="45.7964%" y="101" width="0.1051%" height="15" fill="rgb(208,190,38)"/><text x="46.0464%" y="111.50"></text></g><g><title>evaluate_obligation (128,470 samples, 0.11%)</title><rect x="46.0887%" y="85" width="0.1111%" height="15" fill="rgb(235,213,38)"/><text x="46.3387%" y="95.50"></text></g><g><title>method_autoderef_steps (232,401 samples, 0.20%)</title><rect x="46.0126%" y="101" width="0.2010%" height="15" fill="rgb(237,122,38)"/><text x="46.2626%" y="111.50"></text></g><g><title>predicates_of (184,784 samples, 0.16%)</title><rect x="46.2227%" y="101" width="0.1598%" height="15" fill="rgb(244,218,35)"/><text x="46.4727%" y="111.50"></text></g><g><title>predicates_defined_on (133,473 samples, 0.12%)</title><rect x="46.2671%" y="85" width="0.1155%" height="15" fill="rgb(240,68,47)"/><text x="46.5171%" y="95.50"></text></g><g><title>typeck (5,610,536 samples, 4.85%)</title><rect x="41.5945%" y="117" width="4.8530%" height="15" fill="rgb(210,16,53)"/><text x="41.8445%" y="127.50">typeck</text></g><g><title>item_bodies_checking (16,352,924 samples, 14.15%)</title><rect x="32.3267%" y="165" width="14.1450%" height="15" fill="rgb(235,124,12)"/><text x="32.5767%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,350,054 samples, 14.14%)</title><rect x="32.3292%" y="149" width="14.1425%" height="15" fill="rgb(224,169,11)"/><text x="32.5792%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (16,322,114 samples, 14.12%)</title><rect x="32.3534%" y="133" width="14.1184%" height="15" fill="rgb(250,166,2)"/><text x="32.6034%" y="143.50">typeck</text></g><g><title>item_types_checking (523,755 samples, 0.45%)</title><rect x="46.4718%" y="165" width="0.4530%" height="15" fill="rgb(242,216,29)"/><text x="46.7218%" y="175.50"></text></g><g><title>check_mod_item_types (520,505 samples, 0.45%)</title><rect x="46.4746%" y="149" width="0.4502%" height="15" fill="rgb(230,116,27)"/><text x="46.7246%" y="159.50"></text></g><g><title>typeck (128,441 samples, 0.11%)</title><rect x="46.8137%" y="133" width="0.1111%" height="15" fill="rgb(228,99,48)"/><text x="47.0637%" y="143.50"></text></g><g><title>late_bound_vars_map (132,561 samples, 0.11%)</title><rect x="47.3698%" y="85" width="0.1147%" height="15" fill="rgb(253,11,6)"/><text x="47.6198%" y="95.50"></text></g><g><title>resolve_lifetimes (122,111 samples, 0.11%)</title><rect x="47.3789%" y="69" width="0.1056%" height="15" fill="rgb(247,143,39)"/><text x="47.6289%" y="79.50"></text></g><g><title>explicit_predicates_of (244,503 samples, 0.21%)</title><rect x="47.2785%" y="101" width="0.2115%" height="15" fill="rgb(236,97,10)"/><text x="47.5285%" y="111.50"></text></g><g><title>predicates_of (420,845 samples, 0.36%)</title><rect x="47.2369%" y="133" width="0.3640%" height="15" fill="rgb(233,208,19)"/><text x="47.4869%" y="143.50"></text></g><g><title>predicates_defined_on (404,605 samples, 0.35%)</title><rect x="47.2510%" y="117" width="0.3500%" height="15" fill="rgb(216,164,2)"/><text x="47.5010%" y="127.50"></text></g><g><title>inferred_outlives_of (128,291 samples, 0.11%)</title><rect x="47.4900%" y="101" width="0.1110%" height="15" fill="rgb(220,129,5)"/><text x="47.7400%" y="111.50"></text></g><g><title>inferred_outlives_crate (115,961 samples, 0.10%)</title><rect x="47.5006%" y="85" width="0.1003%" height="15" fill="rgb(242,17,10)"/><text x="47.7506%" y="95.50"></text></g><g><title>type_collecting (843,558 samples, 0.73%)</title><rect x="46.9257%" y="165" width="0.7297%" height="15" fill="rgb(242,107,0)"/><text x="47.1757%" y="175.50"></text></g><g><title>collect_mod_item_types (831,788 samples, 0.72%)</title><rect x="46.9359%" y="149" width="0.7195%" height="15" fill="rgb(251,28,31)"/><text x="47.1859%" y="159.50"></text></g><g><title>evaluate_obligation (284,692 samples, 0.25%)</title><rect x="48.3164%" y="133" width="0.2463%" height="15" fill="rgb(233,223,10)"/><text x="48.5664%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,367,026 samples, 1.18%)</title><rect x="47.7184%" y="149" width="1.1825%" height="15" fill="rgb(215,21,27)"/><text x="47.9684%" y="159.50"></text></g><g><title>region_scope_tree (168,522 samples, 0.15%)</title><rect x="48.7551%" y="133" width="0.1458%" height="15" fill="rgb(232,23,21)"/><text x="49.0051%" y="143.50"></text></g><g><title>evaluate_obligation (197,792 samples, 0.17%)</title><rect x="49.3016%" y="133" width="0.1711%" height="15" fill="rgb(244,5,23)"/><text x="49.5516%" y="143.50"></text></g><g><title>analysis (48,083,383 samples, 41.59%)</title><rect x="8.1402%" y="197" width="41.5913%" height="15" fill="rgb(226,81,46)"/><text x="8.3902%" y="207.50">analysis</text></g><g><title>type_check_crate (29,775,258 samples, 25.76%)</title><rect x="23.9764%" y="181" width="25.7551%" height="15" fill="rgb(247,70,30)"/><text x="24.2264%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,398,354 samples, 2.07%)</title><rect x="47.6570%" y="165" width="2.0745%" height="15" fill="rgb(212,68,19)"/><text x="47.9070%" y="175.50">w..</text></g><g><title>check_item_well_formed (960,307 samples, 0.83%)</title><rect x="48.9009%" y="149" width="0.8306%" height="15" fill="rgb(240,187,13)"/><text x="49.1509%" y="159.50"></text></g><g><title>fn_abi_of_instance (145,171 samples, 0.13%)</title><rect x="51.8043%" y="165" width="0.1256%" height="15" fill="rgb(223,113,26)"/><text x="52.0543%" y="175.50"></text></g><g><title>layout_of (116,400 samples, 0.10%)</title><rect x="51.9754%" y="149" width="0.1007%" height="15" fill="rgb(206,192,2)"/><text x="52.2254%" y="159.50"></text></g><g><title>layout_of (181,641 samples, 0.16%)</title><rect x="51.9338%" y="165" width="0.1571%" height="15" fill="rgb(241,108,4)"/><text x="52.1838%" y="175.50"></text></g><g><title>codegen_module (2,204,122 samples, 1.91%)</title><rect x="50.2154%" y="181" width="1.9065%" height="15" fill="rgb(247,173,49)"/><text x="50.4654%" y="191.50">c..</text></g><g><title>codegen_crate (2,821,339 samples, 2.44%)</title><rect x="49.7394%" y="197" width="2.4404%" height="15" fill="rgb(224,114,35)"/><text x="49.9894%" y="207.50">co..</text></g><g><title>LLVM_module_codegen (15,590,086 samples, 13.49%)</title><rect x="52.2118%" y="181" width="13.4852%" height="15" fill="rgb(245,159,27)"/><text x="52.4618%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (14,971,540 samples, 12.95%)</title><rect x="52.7468%" y="165" width="12.9501%" height="15" fill="rgb(245,172,44)"/><text x="52.9968%" y="175.50">LLVM_module_codegen..</text></g><g><title>codegen_module_optimize (16,332,894 samples, 14.13%)</title><rect x="52.1798%" y="197" width="14.1277%" height="15" fill="rgb(236,23,11)"/><text x="52.4298%" y="207.50">codegen_module_optimi..</text></g><g><title>LLVM_module_optimize (705,887 samples, 0.61%)</title><rect x="65.6969%" y="181" width="0.6106%" height="15" fill="rgb(205,117,38)"/><text x="65.9469%" y="191.50"></text></g><g><title>metadata_load_macro (327,004 samples, 0.28%)</title><rect x="80.2876%" y="149" width="0.2829%" height="15" fill="rgb(237,72,25)"/><text x="80.5376%" y="159.50"></text></g><g><title>metadata_register_crate (2,682,757 samples, 2.32%)</title><rect x="80.5705%" y="149" width="2.3205%" height="15" fill="rgb(244,70,9)"/><text x="80.8205%" y="159.50">m..</text></g><g><title>metadata_register_crate (992,280 samples, 0.86%)</title><rect x="82.0327%" y="133" width="0.8583%" height="15" fill="rgb(217,125,39)"/><text x="82.2827%" y="143.50"></text></g><g><title>macro_expand_crate (18,971,381 samples, 16.41%)</title><rect x="66.6673%" y="181" width="16.4099%" height="15" fill="rgb(235,36,10)"/><text x="66.9173%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (18,948,691 samples, 16.39%)</title><rect x="66.6869%" y="165" width="16.3903%" height="15" fill="rgb(251,123,47)"/><text x="66.9369%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (215,273 samples, 0.19%)</title><rect x="82.8910%" y="149" width="0.1862%" height="15" fill="rgb(221,13,13)"/><text x="83.1410%" y="159.50"></text></g><g><title>late_resolve_crate (1,222,012 samples, 1.06%)</title><rect x="83.2648%" y="165" width="1.0570%" height="15" fill="rgb(238,131,9)"/><text x="83.5148%" y="175.50"></text></g><g><title>configure_and_expand (20,874,230 samples, 18.06%)</title><rect x="66.3075%" y="197" width="18.0559%" height="15" fill="rgb(211,50,8)"/><text x="66.5575%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,431,294 samples, 1.24%)</title><rect x="83.1253%" y="181" width="1.2380%" height="15" fill="rgb(245,182,24)"/><text x="83.3753%" y="191.50"></text></g><g><title>early_lint_checks (145,732 samples, 0.13%)</title><rect x="84.4449%" y="197" width="0.1261%" height="15" fill="rgb(242,14,37)"/><text x="84.6949%" y="207.50"></text></g><g><title>free_global_ctxt (3,423,574 samples, 2.96%)</title><rect x="84.5710%" y="197" width="2.9613%" height="15" fill="rgb(246,228,12)"/><text x="84.8210%" y="207.50">fre..</text></g><g><title>optimized_mir (406,364 samples, 0.35%)</title><rect x="88.3581%" y="117" width="0.3515%" height="15" fill="rgb(213,55,15)"/><text x="88.6081%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (576,956 samples, 0.50%)</title><rect x="88.2631%" y="133" width="0.4991%" height="15" fill="rgb(209,9,3)"/><text x="88.5131%" y="143.50"></text></g><g><title>monomorphization_collector (599,916 samples, 0.52%)</title><rect x="88.2608%" y="149" width="0.5189%" height="15" fill="rgb(230,59,30)"/><text x="88.5108%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (748,958 samples, 0.65%)</title><rect x="88.2368%" y="165" width="0.6478%" height="15" fill="rgb(209,121,21)"/><text x="88.4868%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (121,261 samples, 0.10%)</title><rect x="88.7797%" y="149" width="0.1049%" height="15" fill="rgb(220,109,13)"/><text x="89.0297%" y="159.50"></text></g><g><title>exported_symbols (823,589 samples, 0.71%)</title><rect x="88.2217%" y="181" width="0.7124%" height="15" fill="rgb(232,18,1)"/><text x="88.4717%" y="191.50"></text></g><g><title>layout_of (172,450 samples, 0.15%)</title><rect x="90.4997%" y="133" width="0.1492%" height="15" fill="rgb(215,41,42)"/><text x="90.7497%" y="143.50"></text></g><g><title>layout_of (246,961 samples, 0.21%)</title><rect x="90.4424%" y="149" width="0.2136%" height="15" fill="rgb(224,123,36)"/><text x="90.6924%" y="159.50"></text></g><g><title>layout_of (537,866 samples, 0.47%)</title><rect x="90.2182%" y="165" width="0.4652%" height="15" fill="rgb(240,125,3)"/><text x="90.4682%" y="175.50"></text></g><g><title>needs_drop_raw (247,833 samples, 0.21%)</title><rect x="92.6065%" y="149" width="0.2144%" height="15" fill="rgb(205,98,50)"/><text x="92.8565%" y="159.50"></text></g><g><title>is_copy_raw (219,973 samples, 0.19%)</title><rect x="92.6306%" y="133" width="0.1903%" height="15" fill="rgb(205,185,37)"/><text x="92.8806%" y="143.50"></text></g><g><title>evaluate_obligation (185,483 samples, 0.16%)</title><rect x="92.6605%" y="117" width="0.1604%" height="15" fill="rgb(238,207,15)"/><text x="92.9105%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,476,825 samples, 2.14%)</title><rect x="90.6834%" y="165" width="2.1424%" height="15" fill="rgb(213,199,42)"/><text x="90.9334%" y="175.50">m..</text></g><g><title>resolve_instance (127,741 samples, 0.11%)</title><rect x="92.8258%" y="165" width="0.1105%" height="15" fill="rgb(235,201,11)"/><text x="93.0758%" y="175.50"></text></g><g><title>optimized_mir (4,600,909 samples, 3.98%)</title><rect x="88.9597%" y="181" width="3.9797%" height="15" fill="rgb(207,46,11)"/><text x="89.2097%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (6,318,933 samples, 5.47%)</title><rect x="87.5323%" y="197" width="5.4658%" height="15" fill="rgb(241,35,35)"/><text x="87.7823%" y="207.50">generat..</text></g><g><title>hir_lowering (1,147,581 samples, 0.99%)</title><rect x="92.9981%" y="197" width="0.9926%" height="15" fill="rgb(243,32,47)"/><text x="93.2481%" y="207.50"></text></g><g><title>finish_ongoing_codegen (4,028,301 samples, 3.48%)</title><rect x="94.0084%" y="181" width="3.4844%" height="15" fill="rgb(247,202,23)"/><text x="94.2584%" y="191.50">fin..</text></g><g><title>link_crate (1,245,703 samples, 1.08%)</title><rect x="97.4928%" y="181" width="1.0775%" height="15" fill="rgb(219,102,11)"/><text x="97.7428%" y="191.50"></text></g><g><title>link_binary (1,219,082 samples, 1.05%)</title><rect x="97.5158%" y="165" width="1.0545%" height="15" fill="rgb(243,110,44)"/><text x="97.7658%" y="175.50"></text></g><g><title>link_rlib (759,418 samples, 0.66%)</title><rect x="97.9134%" y="149" width="0.6569%" height="15" fill="rgb(222,74,54)"/><text x="98.1634%" y="159.50"></text></g><g><title>link (5,304,394 samples, 4.59%)</title><rect x="93.9907%" y="197" width="4.5882%" height="15" fill="rgb(216,99,12)"/><text x="94.2407%" y="207.50">link</text></g><g><title>parse_crate (285,632 samples, 0.25%)</title><rect x="98.5789%" y="197" width="0.2471%" height="15" fill="rgb(226,22,26)"/><text x="98.8289%" y="207.50"></text></g><g><title>prepare_outputs (197,692 samples, 0.17%)</title><rect x="98.8346%" y="197" width="0.1710%" height="15" fill="rgb(217,163,10)"/><text x="99.0846%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (737,587 samples, 0.64%)</title><rect x="99.0056%" y="197" width="0.6380%" height="15" fill="rgb(213,25,53)"/><text x="99.2556%" y="207.50"></text></g><g><title>all (115,609,170 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (115,609,170 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (331,263 samples, 0.29%)</title><rect x="99.7135%" y="197" width="0.2865%" height="15" fill="rgb(229,68,48)"/><text x="99.9635%" y="207.50"></text></g></svg></svg>