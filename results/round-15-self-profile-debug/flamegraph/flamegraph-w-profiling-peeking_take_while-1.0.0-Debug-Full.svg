<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,319,583 samples, 5.17%)</title><rect x="1.3124%" y="197" width="5.1691%" height="15" fill="rgb(227,0,7)"/><text x="1.5624%" y="207.50">LLVM_p..</text></g><g><title>param_env (120,751 samples, 0.27%)</title><rect x="12.3726%" y="117" width="0.2691%" height="15" fill="rgb(217,0,24)"/><text x="12.6226%" y="127.50"></text></g><g><title>item_attrs (80,321 samples, 0.18%)</title><rect x="12.9049%" y="85" width="0.1790%" height="15" fill="rgb(221,193,54)"/><text x="13.1549%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (76,871 samples, 0.17%)</title><rect x="12.9126%" y="69" width="0.1713%" height="15" fill="rgb(248,212,6)"/><text x="13.1626%" y="79.50"></text></g><g><title>codegen_fn_attrs (103,821 samples, 0.23%)</title><rect x="12.8581%" y="101" width="0.2314%" height="15" fill="rgb(208,68,35)"/><text x="13.1081%" y="111.50"></text></g><g><title>is_copy_raw (95,911 samples, 0.21%)</title><rect x="14.2394%" y="53" width="0.2137%" height="15" fill="rgb(232,128,0)"/><text x="14.4894%" y="63.50"></text></g><g><title>evaluate_obligation (88,641 samples, 0.20%)</title><rect x="14.2556%" y="37" width="0.1975%" height="15" fill="rgb(207,160,47)"/><text x="14.5056%" y="47.50"></text></g><g><title>adt_drop_tys (125,741 samples, 0.28%)</title><rect x="14.2177%" y="69" width="0.2802%" height="15" fill="rgb(228,23,34)"/><text x="14.4677%" y="79.50"></text></g><g><title>predicates_of (52,360 samples, 0.12%)</title><rect x="15.0272%" y="37" width="0.1167%" height="15" fill="rgb(218,30,26)"/><text x="15.2772%" y="47.50"></text></g><g><title>needs_drop_raw (529,474 samples, 1.18%)</title><rect x="14.1395%" y="85" width="1.1799%" height="15" fill="rgb(220,122,19)"/><text x="14.3895%" y="95.50"></text></g><g><title>is_copy_raw (368,652 samples, 0.82%)</title><rect x="14.4979%" y="69" width="0.8215%" height="15" fill="rgb(250,228,42)"/><text x="14.7479%" y="79.50"></text></g><g><title>evaluate_obligation (328,142 samples, 0.73%)</title><rect x="14.5882%" y="53" width="0.7312%" height="15" fill="rgb(240,193,28)"/><text x="14.8382%" y="63.50"></text></g><g><title>trait_impls_of (74,030 samples, 0.16%)</title><rect x="15.1544%" y="37" width="0.1650%" height="15" fill="rgb(216,20,37)"/><text x="15.4044%" y="47.50"></text></g><g><title>resolve_instance (129,721 samples, 0.29%)</title><rect x="15.3194%" y="85" width="0.2891%" height="15" fill="rgb(206,188,39)"/><text x="15.5694%" y="95.50"></text></g><g><title>thir_body (146,473 samples, 0.33%)</title><rect x="15.6189%" y="85" width="0.3264%" height="15" fill="rgb(217,207,13)"/><text x="15.8689%" y="95.50"></text></g><g><title>mir_const (1,843,609 samples, 4.11%)</title><rect x="11.8627%" y="133" width="4.1084%" height="15" fill="rgb(231,73,38)"/><text x="12.1127%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (1,494,075 samples, 3.33%)</title><rect x="12.6417%" y="117" width="3.3295%" height="15" fill="rgb(225,20,46)"/><text x="12.8917%" y="127.50">uns..</text></g><g><title>mir_built (1,293,124 samples, 2.88%)</title><rect x="13.0895%" y="101" width="2.8817%" height="15" fill="rgb(210,31,41)"/><text x="13.3395%" y="111.50">mi..</text></g><g><title>mir_promoted (2,046,262 samples, 4.56%)</title><rect x="11.4373%" y="149" width="4.5600%" height="15" fill="rgb(221,200,47)"/><text x="11.6873%" y="159.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (53,610 samples, 0.12%)</title><rect x="15.9973%" y="149" width="0.1195%" height="15" fill="rgb(226,26,5)"/><text x="16.2473%" y="159.50"></text></g><g><title>type_op_normalize_predicate (66,252 samples, 0.15%)</title><rect x="16.1167%" y="149" width="0.1476%" height="15" fill="rgb(249,33,26)"/><text x="16.3667%" y="159.50"></text></g><g><title>type_op_normalize_ty (155,163 samples, 0.35%)</title><rect x="16.2644%" y="149" width="0.3458%" height="15" fill="rgb(235,183,28)"/><text x="16.5144%" y="159.50"></text></g><g><title>normalize_projection_ty (102,711 samples, 0.23%)</title><rect x="16.3812%" y="133" width="0.2289%" height="15" fill="rgb(221,5,38)"/><text x="16.6312%" y="143.50"></text></g><g><title>type_op_prove_predicate (748,549 samples, 1.67%)</title><rect x="16.6101%" y="149" width="1.6681%" height="15" fill="rgb(247,18,42)"/><text x="16.8601%" y="159.50"></text></g><g><title>MIR_borrow_checking (5,143,613 samples, 11.46%)</title><rect x="6.8203%" y="181" width="11.4623%" height="15" fill="rgb(241,131,45)"/><text x="7.0703%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (5,126,413 samples, 11.42%)</title><rect x="6.8586%" y="165" width="11.4239%" height="15" fill="rgb(249,31,29)"/><text x="7.1086%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (98,301 samples, 0.22%)</title><rect x="18.2913%" y="181" width="0.2191%" height="15" fill="rgb(225,111,53)"/><text x="18.5413%" y="191.50"></text></g><g><title>get_lang_items (58,291 samples, 0.13%)</title><rect x="18.8828%" y="133" width="0.1299%" height="15" fill="rgb(238,160,17)"/><text x="19.1328%" y="143.50"></text></g><g><title>associated_item (54,161 samples, 0.12%)</title><rect x="19.0502%" y="117" width="0.1207%" height="15" fill="rgb(214,148,48)"/><text x="19.3002%" y="127.50"></text></g><g><title>item_attrs (113,381 samples, 0.25%)</title><rect x="19.2162%" y="101" width="0.2527%" height="15" fill="rgb(232,36,49)"/><text x="19.4662%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (104,561 samples, 0.23%)</title><rect x="19.2358%" y="85" width="0.2330%" height="15" fill="rgb(209,103,24)"/><text x="19.4858%" y="95.50"></text></g><g><title>codegen_fn_attrs (157,112 samples, 0.35%)</title><rect x="19.1709%" y="117" width="0.3501%" height="15" fill="rgb(229,88,8)"/><text x="19.4209%" y="127.50"></text></g><g><title>should_inherit_track_caller (230,743 samples, 0.51%)</title><rect x="19.0127%" y="133" width="0.5142%" height="15" fill="rgb(213,181,19)"/><text x="19.2627%" y="143.50"></text></g><g><title>codegen_fn_attrs (373,184 samples, 0.83%)</title><rect x="18.7620%" y="149" width="0.8316%" height="15" fill="rgb(254,191,54)"/><text x="19.0120%" y="159.50"></text></g><g><title>check_mod_attrs (463,015 samples, 1.03%)</title><rect x="18.5629%" y="165" width="1.0318%" height="15" fill="rgb(241,83,37)"/><text x="18.8129%" y="175.50"></text></g><g><title>lookup_deprecation_entry (73,870 samples, 0.16%)</title><rect x="19.9374%" y="149" width="0.1646%" height="15" fill="rgb(233,36,39)"/><text x="20.1874%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (200,042 samples, 0.45%)</title><rect x="19.7547%" y="165" width="0.4458%" height="15" fill="rgb(226,3,54)"/><text x="20.0047%" y="175.50"></text></g><g><title>misc_checking_1 (797,718 samples, 1.78%)</title><rect x="18.5116%" y="181" width="1.7777%" height="15" fill="rgb(245,192,40)"/><text x="18.7616%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (109,161 samples, 0.24%)</title><rect x="20.2950%" y="165" width="0.2433%" height="15" fill="rgb(238,167,29)"/><text x="20.5450%" y="175.50"></text></g><g><title>check_mod_liveness (84,181 samples, 0.19%)</title><rect x="20.3507%" y="149" width="0.1876%" height="15" fill="rgb(232,182,51)"/><text x="20.6007%" y="159.50"></text></g><g><title>misc_checking_2 (288,863 samples, 0.64%)</title><rect x="20.2893%" y="181" width="0.6437%" height="15" fill="rgb(231,60,39)"/><text x="20.5393%" y="191.50"></text></g><g><title>match_checking (177,122 samples, 0.39%)</title><rect x="20.5383%" y="165" width="0.3947%" height="15" fill="rgb(208,69,12)"/><text x="20.7883%" y="175.50"></text></g><g><title>check_match (169,832 samples, 0.38%)</title><rect x="20.5545%" y="149" width="0.3785%" height="15" fill="rgb(235,93,37)"/><text x="20.8045%" y="159.50"></text></g><g><title>death_checking (109,691 samples, 0.24%)</title><rect x="21.0363%" y="165" width="0.2444%" height="15" fill="rgb(213,116,39)"/><text x="21.2863%" y="175.50"></text></g><g><title>lint_levels (52,321 samples, 0.12%)</title><rect x="21.1641%" y="149" width="0.1166%" height="15" fill="rgb(222,207,29)"/><text x="21.4141%" y="159.50"></text></g><g><title>crate_lints (547,976 samples, 1.22%)</title><rect x="21.2837%" y="149" width="1.2211%" height="15" fill="rgb(206,96,30)"/><text x="21.5337%" y="159.50"></text></g><g><title>type_of (312,105 samples, 0.70%)</title><rect x="21.8094%" y="133" width="0.6955%" height="15" fill="rgb(218,138,4)"/><text x="22.0594%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (232,113 samples, 0.52%)</title><rect x="21.9876%" y="117" width="0.5173%" height="15" fill="rgb(250,191,14)"/><text x="22.2376%" y="127.50"></text></g><g><title>lint_checking (591,096 samples, 1.32%)</title><rect x="21.2807%" y="165" width="1.3172%" height="15" fill="rgb(239,60,40)"/><text x="21.5307%" y="175.50"></text></g><g><title>privacy_access_levels (62,061 samples, 0.14%)</title><rect x="22.5979%" y="165" width="0.1383%" height="15" fill="rgb(206,27,48)"/><text x="22.8479%" y="175.50"></text></g><g><title>privacy_checking_modules (146,962 samples, 0.33%)</title><rect x="22.7362%" y="165" width="0.3275%" height="15" fill="rgb(225,35,8)"/><text x="22.9862%" y="175.50"></text></g><g><title>check_mod_privacy (145,772 samples, 0.32%)</title><rect x="22.7389%" y="149" width="0.3248%" height="15" fill="rgb(250,213,24)"/><text x="22.9889%" y="159.50"></text></g><g><title>misc_checking_3 (970,530 samples, 2.16%)</title><rect x="20.9330%" y="181" width="2.1628%" height="15" fill="rgb(247,123,22)"/><text x="21.1830%" y="191.50">m..</text></g><g><title>impl_parent (576,267 samples, 1.28%)</title><rect x="25.4000%" y="117" width="1.2842%" height="15" fill="rgb(231,138,38)"/><text x="25.6500%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (333,073 samples, 0.74%)</title><rect x="25.9420%" y="101" width="0.7422%" height="15" fill="rgb(231,145,46)"/><text x="26.1920%" y="111.50"></text></g><g><title>impl_trait_ref (1,823,432 samples, 4.06%)</title><rect x="26.6842%" y="117" width="4.0634%" height="15" fill="rgb(251,118,11)"/><text x="26.9342%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,585,207 samples, 3.53%)</title><rect x="27.2151%" y="101" width="3.5325%" height="15" fill="rgb(217,147,25)"/><text x="27.4651%" y="111.50">met..</text></g><g><title>coherent_trait (3,581,556 samples, 7.98%)</title><rect x="23.2251%" y="149" width="7.9813%" height="15" fill="rgb(247,81,37)"/><text x="23.4751%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (3,570,066 samples, 7.96%)</title><rect x="23.2507%" y="133" width="7.9557%" height="15" fill="rgb(209,12,38)"/><text x="23.5007%" y="143.50">specializat..</text></g><g><title>trait_impls_of (203,531 samples, 0.45%)</title><rect x="30.7528%" y="117" width="0.4536%" height="15" fill="rgb(227,1,9)"/><text x="31.0028%" y="127.50"></text></g><g><title>coherence_checking (3,640,237 samples, 8.11%)</title><rect x="23.1728%" y="165" width="8.1121%" height="15" fill="rgb(248,47,43)"/><text x="23.4228%" y="175.50">coherence_c..</text></g><g><title>associated_item (59,521 samples, 0.13%)</title><rect x="39.4756%" y="101" width="0.1326%" height="15" fill="rgb(221,10,30)"/><text x="39.7256%" y="111.50"></text></g><g><title>associated_items (102,572 samples, 0.23%)</title><rect x="39.3939%" y="117" width="0.2286%" height="15" fill="rgb(210,229,1)"/><text x="39.6439%" y="127.50"></text></g><g><title>adt_def (46,590 samples, 0.10%)</title><rect x="39.9656%" y="85" width="0.1038%" height="15" fill="rgb(222,148,37)"/><text x="40.2156%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (45,870 samples, 0.10%)</title><rect x="39.9672%" y="69" width="0.1022%" height="15" fill="rgb(234,67,33)"/><text x="40.2172%" y="79.50"></text></g><g><title>adt_dtorck_constraint (107,782 samples, 0.24%)</title><rect x="39.8961%" y="101" width="0.2402%" height="15" fill="rgb(247,98,35)"/><text x="40.1461%" y="111.50"></text></g><g><title>dropck_outlives (243,402 samples, 0.54%)</title><rect x="39.6582%" y="117" width="0.5424%" height="15" fill="rgb(247,138,52)"/><text x="39.9082%" y="127.50"></text></g><g><title>evaluate_obligation (324,054 samples, 0.72%)</title><rect x="40.2006%" y="117" width="0.7221%" height="15" fill="rgb(213,79,30)"/><text x="40.4506%" y="127.50"></text></g><g><title>method_autoderef_steps (166,772 samples, 0.37%)</title><rect x="41.3562%" y="117" width="0.3716%" height="15" fill="rgb(246,177,23)"/><text x="41.6062%" y="127.50"></text></g><g><title>evaluate_obligation (81,590 samples, 0.18%)</title><rect x="41.5460%" y="101" width="0.1818%" height="15" fill="rgb(230,62,27)"/><text x="41.7960%" y="111.50"></text></g><g><title>evaluate_obligation (92,271 samples, 0.21%)</title><rect x="41.8682%" y="101" width="0.2056%" height="15" fill="rgb(216,154,8)"/><text x="42.1182%" y="111.50"></text></g><g><title>layout_of (63,171 samples, 0.14%)</title><rect x="42.0739%" y="101" width="0.1408%" height="15" fill="rgb(244,35,45)"/><text x="42.3239%" y="111.50"></text></g><g><title>object_safety_violations (240,612 samples, 0.54%)</title><rect x="41.7278%" y="117" width="0.5362%" height="15" fill="rgb(251,115,12)"/><text x="41.9778%" y="127.50"></text></g><g><title>explicit_predicates_of (180,821 samples, 0.40%)</title><rect x="42.4562%" y="85" width="0.4029%" height="15" fill="rgb(240,54,50)"/><text x="42.7062%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (170,841 samples, 0.38%)</title><rect x="42.4784%" y="69" width="0.3807%" height="15" fill="rgb(233,84,52)"/><text x="42.7284%" y="79.50"></text></g><g><title>predicates_of (268,711 samples, 0.60%)</title><rect x="42.3071%" y="117" width="0.5988%" height="15" fill="rgb(207,117,47)"/><text x="42.5571%" y="127.50"></text></g><g><title>predicates_defined_on (230,841 samples, 0.51%)</title><rect x="42.3914%" y="101" width="0.5144%" height="15" fill="rgb(249,43,39)"/><text x="42.6414%" y="111.50"></text></g><g><title>item_bodies_checking (5,268,033 samples, 11.74%)</title><rect x="31.3370%" y="165" width="11.7395%" height="15" fill="rgb(209,38,44)"/><text x="31.5870%" y="175.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (5,264,913 samples, 11.73%)</title><rect x="31.3440%" y="149" width="11.7326%" height="15" fill="rgb(236,212,23)"/><text x="31.5940%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (5,248,493 samples, 11.70%)</title><rect x="31.3806%" y="133" width="11.6960%" height="15" fill="rgb(242,79,21)"/><text x="31.6306%" y="143.50">typeck</text></g><g><title>adt_destructor (86,911 samples, 0.19%)</title><rect x="45.4092%" y="133" width="0.1937%" height="15" fill="rgb(211,96,35)"/><text x="45.6592%" y="143.50"></text></g><g><title>coherent_trait (81,871 samples, 0.18%)</title><rect x="45.4205%" y="117" width="0.1824%" height="15" fill="rgb(253,215,40)"/><text x="45.6705%" y="127.50"></text></g><g><title>specialization_graph_of (78,921 samples, 0.18%)</title><rect x="45.4270%" y="101" width="0.1759%" height="15" fill="rgb(211,81,21)"/><text x="45.6770%" y="111.50"></text></g><g><title>item_types_checking (1,265,043 samples, 2.82%)</title><rect x="43.0766%" y="165" width="2.8191%" height="15" fill="rgb(208,190,38)"/><text x="43.3266%" y="175.50">it..</text></g><g><title>check_mod_item_types (1,261,013 samples, 2.81%)</title><rect x="43.0855%" y="149" width="2.8101%" height="15" fill="rgb(235,213,38)"/><text x="43.3355%" y="159.50">ch..</text></g><g><title>fn_sig (104,571 samples, 0.23%)</title><rect x="46.2055%" y="133" width="0.2330%" height="15" fill="rgb(237,122,38)"/><text x="46.4555%" y="143.50"></text></g><g><title>is_late_bound_map (114,600 samples, 0.26%)</title><rect x="46.5900%" y="117" width="0.2554%" height="15" fill="rgb(244,218,35)"/><text x="46.8400%" y="127.50"></text></g><g><title>resolve_lifetimes (106,120 samples, 0.24%)</title><rect x="46.6089%" y="101" width="0.2365%" height="15" fill="rgb(240,68,47)"/><text x="46.8589%" y="111.50"></text></g><g><title>generics_of (233,351 samples, 0.52%)</title><rect x="46.4385%" y="133" width="0.5200%" height="15" fill="rgb(210,16,53)"/><text x="46.6885%" y="143.50"></text></g><g><title>late_bound_vars_map (59,900 samples, 0.13%)</title><rect x="47.8859%" y="85" width="0.1335%" height="15" fill="rgb(235,124,12)"/><text x="48.1359%" y="95.50"></text></g><g><title>resolve_lifetimes (54,470 samples, 0.12%)</title><rect x="47.8980%" y="69" width="0.1214%" height="15" fill="rgb(224,169,11)"/><text x="48.1480%" y="79.50"></text></g><g><title>associated_item (72,011 samples, 0.16%)</title><rect x="48.3469%" y="53" width="0.1605%" height="15" fill="rgb(250,166,2)"/><text x="48.5969%" y="63.50"></text></g><g><title>associated_items (130,501 samples, 0.29%)</title><rect x="48.2291%" y="69" width="0.2908%" height="15" fill="rgb(242,216,29)"/><text x="48.4791%" y="79.50"></text></g><g><title>type_param_predicates (213,322 samples, 0.48%)</title><rect x="48.1151%" y="85" width="0.4754%" height="15" fill="rgb(230,116,27)"/><text x="48.3651%" y="95.50"></text></g><g><title>explicit_predicates_of (672,687 samples, 1.50%)</title><rect x="47.0934%" y="101" width="1.4990%" height="15" fill="rgb(228,99,48)"/><text x="47.3434%" y="111.50"></text></g><g><title>predicates_of (854,131 samples, 1.90%)</title><rect x="46.9870%" y="133" width="1.9034%" height="15" fill="rgb(253,11,6)"/><text x="47.2370%" y="143.50">p..</text></g><g><title>predicates_defined_on (835,589 samples, 1.86%)</title><rect x="47.0283%" y="117" width="1.8621%" height="15" fill="rgb(247,143,39)"/><text x="47.2783%" y="127.50">p..</text></g><g><title>inferred_outlives_of (133,682 samples, 0.30%)</title><rect x="48.5925%" y="101" width="0.2979%" height="15" fill="rgb(236,97,10)"/><text x="48.8425%" y="111.50"></text></g><g><title>inferred_outlives_crate (118,141 samples, 0.26%)</title><rect x="48.6271%" y="85" width="0.2633%" height="15" fill="rgb(233,208,19)"/><text x="48.8771%" y="95.50"></text></g><g><title>super_predicates_of (145,641 samples, 0.32%)</title><rect x="48.8904%" y="133" width="0.3246%" height="15" fill="rgb(216,164,2)"/><text x="49.1404%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (139,991 samples, 0.31%)</title><rect x="48.9030%" y="117" width="0.3120%" height="15" fill="rgb(220,129,5)"/><text x="49.1530%" y="127.50"></text></g><g><title>type_collecting (1,600,036 samples, 3.57%)</title><rect x="45.8982%" y="165" width="3.5656%" height="15" fill="rgb(242,17,10)"/><text x="46.1482%" y="175.50">type..</text></g><g><title>collect_mod_item_types (1,585,416 samples, 3.53%)</title><rect x="45.9308%" y="149" width="3.5330%" height="15" fill="rgb(242,107,0)"/><text x="46.1808%" y="159.50">col..</text></g><g><title>type_of (109,500 samples, 0.24%)</title><rect x="49.2198%" y="133" width="0.2440%" height="15" fill="rgb(251,28,31)"/><text x="49.4698%" y="143.50"></text></g><g><title>evaluate_obligation (276,113 samples, 0.62%)</title><rect x="51.9172%" y="133" width="0.6153%" height="15" fill="rgb(233,223,10)"/><text x="52.1672%" y="143.50"></text></g><g><title>implied_outlives_bounds (167,042 samples, 0.37%)</title><rect x="52.5466%" y="133" width="0.3722%" height="15" fill="rgb(215,21,27)"/><text x="52.7966%" y="143.50"></text></g><g><title>param_env (347,181 samples, 0.77%)</title><rect x="52.9188%" y="133" width="0.7737%" height="15" fill="rgb(232,23,21)"/><text x="53.1688%" y="143.50"></text></g><g><title>predicates_of (48,191 samples, 0.11%)</title><rect x="53.6925%" y="133" width="0.1074%" height="15" fill="rgb(244,5,23)"/><text x="53.9425%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,936,439 samples, 4.32%)</title><rect x="49.6060%" y="149" width="4.3152%" height="15" fill="rgb(226,81,46)"/><text x="49.8560%" y="159.50">check..</text></g><g><title>region_scope_tree (54,460 samples, 0.12%)</title><rect x="53.7999%" y="133" width="0.1214%" height="15" fill="rgb(247,70,30)"/><text x="54.0499%" y="143.50"></text></g><g><title>implied_outlives_bounds (47,961 samples, 0.11%)</title><rect x="55.7668%" y="133" width="0.1069%" height="15" fill="rgb(212,68,19)"/><text x="56.0168%" y="143.50"></text></g><g><title>param_env (257,563 samples, 0.57%)</title><rect x="55.9352%" y="133" width="0.5740%" height="15" fill="rgb(240,187,13)"/><text x="56.1852%" y="143.50"></text></g><g><title>predicates_of (50,651 samples, 0.11%)</title><rect x="56.5092%" y="133" width="0.1129%" height="15" fill="rgb(223,113,26)"/><text x="56.7592%" y="143.50"></text></g><g><title>check_item_well_formed (1,320,894 samples, 2.94%)</title><rect x="53.9213%" y="149" width="2.9435%" height="15" fill="rgb(206,192,2)"/><text x="54.1713%" y="159.50">ch..</text></g><g><title>variances_of (70,590 samples, 0.16%)</title><rect x="56.7075%" y="133" width="0.1573%" height="15" fill="rgb(241,108,4)"/><text x="56.9575%" y="143.50"></text></g><g><title>crate_variances (66,100 samples, 0.15%)</title><rect x="56.7175%" y="117" width="0.1473%" height="15" fill="rgb(247,173,49)"/><text x="56.9675%" y="127.50"></text></g><g><title>evaluate_obligation (164,972 samples, 0.37%)</title><rect x="57.3897%" y="133" width="0.3676%" height="15" fill="rgb(224,114,35)"/><text x="57.6397%" y="143.50"></text></g><g><title>implied_outlives_bounds (84,011 samples, 0.19%)</title><rect x="57.7573%" y="133" width="0.1872%" height="15" fill="rgb(245,159,27)"/><text x="58.0073%" y="143.50"></text></g><g><title>param_env (58,931 samples, 0.13%)</title><rect x="57.9445%" y="133" width="0.1313%" height="15" fill="rgb(245,172,44)"/><text x="58.1945%" y="143.50"></text></g><g><title>analysis (23,176,256 samples, 51.65%)</title><rect x="6.4814%" y="197" width="51.6470%" height="15" fill="rgb(236,23,11)"/><text x="6.7314%" y="207.50">analysis</text></g><g><title>type_check_crate (15,720,679 samples, 35.03%)</title><rect x="23.0958%" y="181" width="35.0326%" height="15" fill="rgb(205,117,38)"/><text x="23.3458%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,887,039 samples, 8.66%)</title><rect x="49.4664%" y="165" width="8.6620%" height="15" fill="rgb(237,72,25)"/><text x="49.7164%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (567,036 samples, 1.26%)</title><rect x="56.8648%" y="149" width="1.2636%" height="15" fill="rgb(244,70,9)"/><text x="57.1148%" y="159.50"></text></g><g><title>codegen_module (290,933 samples, 0.65%)</title><rect x="59.7692%" y="181" width="0.6483%" height="15" fill="rgb(217,125,39)"/><text x="60.0192%" y="191.50"></text></g><g><title>codegen_crate (1,041,171 samples, 2.32%)</title><rect x="58.1498%" y="197" width="2.3202%" height="15" fill="rgb(235,36,10)"/><text x="58.3998%" y="207.50">c..</text></g><g><title>LLVM_module_codegen (1,634,716 samples, 3.64%)</title><rect x="60.5212%" y="181" width="3.6429%" height="15" fill="rgb(251,123,47)"/><text x="60.7712%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (1,564,265 samples, 3.49%)</title><rect x="60.6782%" y="165" width="3.4859%" height="15" fill="rgb(221,13,13)"/><text x="60.9282%" y="175.50">LLV..</text></g><g><title>codegen_module_optimize (1,944,869 samples, 4.33%)</title><rect x="60.4700%" y="197" width="4.3340%" height="15" fill="rgb(238,131,9)"/><text x="60.7200%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (287,172 samples, 0.64%)</title><rect x="64.1641%" y="181" width="0.6399%" height="15" fill="rgb(211,50,8)"/><text x="64.4141%" y="191.50"></text></g><g><title>AST_validation (96,831 samples, 0.22%)</title><rect x="65.2319%" y="181" width="0.2158%" height="15" fill="rgb(245,182,24)"/><text x="65.4819%" y="191.50"></text></g><g><title>crate_injection (84,481 samples, 0.19%)</title><rect x="65.5104%" y="181" width="0.1883%" height="15" fill="rgb(242,14,37)"/><text x="65.7604%" y="191.50"></text></g><g><title>macro_expand_crate (5,789,250 samples, 12.90%)</title><rect x="65.6986%" y="181" width="12.9010%" height="15" fill="rgb(246,228,12)"/><text x="65.9486%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (5,768,579 samples, 12.85%)</title><rect x="65.7447%" y="165" width="12.8550%" height="15" fill="rgb(213,55,15)"/><text x="65.9947%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (186,102 samples, 0.41%)</title><rect x="78.1849%" y="149" width="0.4147%" height="15" fill="rgb(209,9,3)"/><text x="78.4349%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (170,522 samples, 0.38%)</title><rect x="78.6090%" y="181" width="0.3800%" height="15" fill="rgb(230,59,30)"/><text x="78.8590%" y="191.50"></text></g><g><title>finalize_imports (259,872 samples, 0.58%)</title><rect x="79.0055%" y="165" width="0.5791%" height="15" fill="rgb(209,121,21)"/><text x="79.2555%" y="175.50"></text></g><g><title>late_resolve_crate (1,113,581 samples, 2.48%)</title><rect x="79.6145%" y="165" width="2.4816%" height="15" fill="rgb(220,109,13)"/><text x="79.8645%" y="175.50">la..</text></g><g><title>configure_and_expand (7,810,340 samples, 17.40%)</title><rect x="64.8040%" y="197" width="17.4049%" height="15" fill="rgb(232,18,1)"/><text x="65.0540%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,444,934 samples, 3.22%)</title><rect x="78.9890%" y="181" width="3.2200%" height="15" fill="rgb(215,41,42)"/><text x="79.2390%" y="191.50">res..</text></g><g><title>drop_ast (60,331 samples, 0.13%)</title><rect x="82.2089%" y="197" width="0.1344%" height="15" fill="rgb(224,123,36)"/><text x="82.4589%" y="207.50"></text></g><g><title>early_lint_checks (152,851 samples, 0.34%)</title><rect x="82.3760%" y="197" width="0.3406%" height="15" fill="rgb(240,125,3)"/><text x="82.6260%" y="207.50"></text></g><g><title>free_global_ctxt (1,209,912 samples, 2.70%)</title><rect x="82.7166%" y="197" width="2.6962%" height="15" fill="rgb(205,98,50)"/><text x="82.9666%" y="207.50">fr..</text></g><g><title>crate_hash (61,421 samples, 0.14%)</title><rect x="86.1016%" y="181" width="0.1369%" height="15" fill="rgb(205,185,37)"/><text x="86.3516%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (52,641 samples, 0.12%)</title><rect x="86.2903%" y="165" width="0.1173%" height="15" fill="rgb(238,207,15)"/><text x="86.5403%" y="175.50"></text></g><g><title>exported_symbols (91,331 samples, 0.20%)</title><rect x="86.2704%" y="181" width="0.2035%" height="15" fill="rgb(213,199,42)"/><text x="86.5204%" y="191.50"></text></g><g><title>layout_of (179,484 samples, 0.40%)</title><rect x="87.2971%" y="165" width="0.4000%" height="15" fill="rgb(235,201,11)"/><text x="87.5471%" y="175.50"></text></g><g><title>needs_drop_raw (79,611 samples, 0.18%)</title><rect x="88.5896%" y="149" width="0.1774%" height="15" fill="rgb(207,46,11)"/><text x="88.8396%" y="159.50"></text></g><g><title>is_copy_raw (69,440 samples, 0.15%)</title><rect x="88.6122%" y="133" width="0.1547%" height="15" fill="rgb(241,35,35)"/><text x="88.8622%" y="143.50"></text></g><g><title>evaluate_obligation (57,420 samples, 0.13%)</title><rect x="88.6390%" y="117" width="0.1280%" height="15" fill="rgb(243,32,47)"/><text x="88.8890%" y="127.50"></text></g><g><title>optimized_mir (1,019,260 samples, 2.27%)</title><rect x="86.5484%" y="181" width="2.2714%" height="15" fill="rgb(247,202,23)"/><text x="86.7984%" y="191.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (503,784 samples, 1.12%)</title><rect x="87.6971%" y="165" width="1.1227%" height="15" fill="rgb(219,102,11)"/><text x="87.9471%" y="175.50"></text></g><g><title>generate_crate_metadata (1,541,176 samples, 3.43%)</title><rect x="85.4128%" y="197" width="3.4344%" height="15" fill="rgb(243,110,44)"/><text x="85.6628%" y="207.50">gen..</text></g><g><title>hir_lowering (782,158 samples, 1.74%)</title><rect x="88.8473%" y="197" width="1.7430%" height="15" fill="rgb(222,74,54)"/><text x="89.0973%" y="207.50"></text></g><g><title>finish_ongoing_codegen (850,878 samples, 1.90%)</title><rect x="90.6189%" y="181" width="1.8961%" height="15" fill="rgb(216,99,12)"/><text x="90.8689%" y="191.50">f..</text></g><g><title>link_crate (648,296 samples, 1.44%)</title><rect x="92.5151%" y="181" width="1.4447%" height="15" fill="rgb(226,22,26)"/><text x="92.7651%" y="191.50"></text></g><g><title>link_binary (638,036 samples, 1.42%)</title><rect x="92.5379%" y="165" width="1.4218%" height="15" fill="rgb(217,163,10)"/><text x="92.7879%" y="175.50"></text></g><g><title>link_rlib (407,004 samples, 0.91%)</title><rect x="93.0528%" y="149" width="0.9070%" height="15" fill="rgb(213,25,53)"/><text x="93.3028%" y="159.50"></text></g><g><title>link (1,517,885 samples, 3.38%)</title><rect x="90.5903%" y="197" width="3.3825%" height="15" fill="rgb(252,105,26)"/><text x="90.8403%" y="207.50">link</text></g><g><title>parse_crate (1,551,536 samples, 3.46%)</title><rect x="93.9728%" y="197" width="3.4575%" height="15" fill="rgb(220,39,43)"/><text x="94.2228%" y="207.50">par..</text></g><g><title>prepare_outputs (295,483 samples, 0.66%)</title><rect x="97.4482%" y="197" width="0.6585%" height="15" fill="rgb(229,68,48)"/><text x="97.6982%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (392,514 samples, 0.87%)</title><rect x="98.1067%" y="197" width="0.8747%" height="15" fill="rgb(252,8,32)"/><text x="98.3567%" y="207.50"></text></g><g><title>setup_global_ctxt (117,731 samples, 0.26%)</title><rect x="98.9833%" y="197" width="0.2624%" height="15" fill="rgb(223,20,43)"/><text x="99.2333%" y="207.50"></text></g><g><title>all (44,874,374 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (44,874,374 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (338,513 samples, 0.75%)</title><rect x="99.2456%" y="197" width="0.7544%" height="15" fill="rgb(249,185,26)"/><text x="99.4956%" y="207.50"></text></g></svg></svg>