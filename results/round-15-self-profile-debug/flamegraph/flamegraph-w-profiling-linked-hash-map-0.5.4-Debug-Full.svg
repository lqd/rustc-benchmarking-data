<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,219,093 samples, 2.02%)</title><rect x="0.4105%" y="181" width="2.0165%" height="15" fill="rgb(227,0,7)"/><text x="0.6605%" y="191.50">L..</text></g><g><title>param_env (663,017 samples, 0.32%)</title><rect x="12.1588%" y="101" width="0.3169%" height="15" fill="rgb(217,0,24)"/><text x="12.4088%" y="111.50"></text></g><g><title>item_attrs (602,886 samples, 0.29%)</title><rect x="12.8883%" y="69" width="0.2882%" height="15" fill="rgb(221,193,54)"/><text x="13.1383%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (591,996 samples, 0.28%)</title><rect x="12.8935%" y="53" width="0.2829%" height="15" fill="rgb(248,212,6)"/><text x="13.1435%" y="63.50"></text></g><g><title>codegen_fn_attrs (749,536 samples, 0.36%)</title><rect x="12.8254%" y="85" width="0.3582%" height="15" fill="rgb(208,68,35)"/><text x="13.0754%" y="95.50"></text></g><g><title>is_copy_raw (345,531 samples, 0.17%)</title><rect x="14.9531%" y="69" width="0.1651%" height="15" fill="rgb(232,128,0)"/><text x="15.2031%" y="79.50"></text></g><g><title>evaluate_obligation (284,340 samples, 0.14%)</title><rect x="14.9824%" y="53" width="0.1359%" height="15" fill="rgb(207,160,47)"/><text x="15.2324%" y="63.50"></text></g><g><title>adt_drop_tys (434,825 samples, 0.21%)</title><rect x="15.2112%" y="53" width="0.2078%" height="15" fill="rgb(228,23,34)"/><text x="15.4612%" y="63.50"></text></g><g><title>needs_drop_raw (2,121,936 samples, 1.01%)</title><rect x="15.1198%" y="69" width="1.0142%" height="15" fill="rgb(218,30,26)"/><text x="15.3698%" y="79.50"></text></g><g><title>is_copy_raw (1,495,940 samples, 0.71%)</title><rect x="15.4190%" y="53" width="0.7150%" height="15" fill="rgb(220,122,19)"/><text x="15.6690%" y="63.50"></text></g><g><title>evaluate_obligation (936,281 samples, 0.45%)</title><rect x="15.6865%" y="37" width="0.4475%" height="15" fill="rgb(250,228,42)"/><text x="15.9365%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (348,153 samples, 0.17%)</title><rect x="16.2864%" y="53" width="0.1664%" height="15" fill="rgb(240,193,28)"/><text x="16.5364%" y="63.50"></text></g><g><title>resolve_instance (790,957 samples, 0.38%)</title><rect x="16.1340%" y="69" width="0.3780%" height="15" fill="rgb(216,20,37)"/><text x="16.3840%" y="79.50"></text></g><g><title>thir_body (1,413,495 samples, 0.68%)</title><rect x="16.5333%" y="69" width="0.6756%" height="15" fill="rgb(206,188,39)"/><text x="16.7833%" y="79.50"></text></g><g><title>mir_const (11,874,107 samples, 5.68%)</title><rect x="11.5550%" y="117" width="5.6752%" height="15" fill="rgb(217,207,13)"/><text x="11.8050%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (9,947,833 samples, 4.75%)</title><rect x="12.4757%" y="101" width="4.7546%" height="15" fill="rgb(231,73,38)"/><text x="12.7257%" y="111.50">unsafe..</text></g><g><title>mir_built (8,466,707 samples, 4.05%)</title><rect x="13.1836%" y="85" width="4.0467%" height="15" fill="rgb(225,20,46)"/><text x="13.4336%" y="95.50">mir_..</text></g><g><title>mir_promoted (13,057,439 samples, 6.24%)</title><rect x="11.0229%" y="133" width="6.2408%" height="15" fill="rgb(210,31,41)"/><text x="11.2729%" y="143.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (609,114 samples, 0.29%)</title><rect x="17.2637%" y="133" width="0.2911%" height="15" fill="rgb(221,200,47)"/><text x="17.5137%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (300,224 samples, 0.14%)</title><rect x="17.5548%" y="133" width="0.1435%" height="15" fill="rgb(226,26,5)"/><text x="17.8048%" y="143.50"></text></g><g><title>type_op_normalize_predicate (264,772 samples, 0.13%)</title><rect x="17.6983%" y="133" width="0.1265%" height="15" fill="rgb(249,33,26)"/><text x="17.9483%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,212,624 samples, 2.01%)</title><rect x="17.8385%" y="133" width="2.0134%" height="15" fill="rgb(235,183,28)"/><text x="18.0885%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (35,562,350 samples, 17.00%)</title><rect x="2.8555%" y="165" width="16.9971%" height="15" fill="rgb(221,5,38)"/><text x="3.1055%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (35,354,256 samples, 16.90%)</title><rect x="2.9550%" y="149" width="16.8976%" height="15" fill="rgb(247,18,42)"/><text x="3.2050%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (478,555 samples, 0.23%)</title><rect x="19.8826%" y="165" width="0.2287%" height="15" fill="rgb(241,131,45)"/><text x="20.1326%" y="175.50"></text></g><g><title>get_lang_items (245,422 samples, 0.12%)</title><rect x="20.5505%" y="117" width="0.1173%" height="15" fill="rgb(249,31,29)"/><text x="20.8005%" y="127.50"></text></g><g><title>item_attrs (300,962 samples, 0.14%)</title><rect x="20.9114%" y="85" width="0.1438%" height="15" fill="rgb(225,111,53)"/><text x="21.1614%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (276,102 samples, 0.13%)</title><rect x="20.9233%" y="69" width="0.1320%" height="15" fill="rgb(238,160,17)"/><text x="21.1733%" y="79.50"></text></g><g><title>codegen_fn_attrs (540,782 samples, 0.26%)</title><rect x="20.8470%" y="101" width="0.2585%" height="15" fill="rgb(214,148,48)"/><text x="21.0970%" y="111.50"></text></g><g><title>should_inherit_track_caller (941,369 samples, 0.45%)</title><rect x="20.6678%" y="117" width="0.4499%" height="15" fill="rgb(232,36,49)"/><text x="20.9178%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,420,263 samples, 0.68%)</title><rect x="20.4547%" y="133" width="0.6788%" height="15" fill="rgb(209,103,24)"/><text x="20.7047%" y="143.50"></text></g><g><title>check_mod_attrs (2,097,742 samples, 1.00%)</title><rect x="20.1311%" y="149" width="1.0026%" height="15" fill="rgb(229,88,8)"/><text x="20.3811%" y="159.50"></text></g><g><title>check_mod_const_bodies (395,424 samples, 0.19%)</title><rect x="21.1338%" y="149" width="0.1890%" height="15" fill="rgb(213,181,19)"/><text x="21.3838%" y="159.50"></text></g><g><title>lookup_deprecation_entry (482,587 samples, 0.23%)</title><rect x="21.7396%" y="133" width="0.2307%" height="15" fill="rgb(254,191,54)"/><text x="21.9896%" y="143.50"></text></g><g><title>stability_index (324,454 samples, 0.16%)</title><rect x="21.8152%" y="117" width="0.1551%" height="15" fill="rgb(241,83,37)"/><text x="22.0652%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,339,394 samples, 0.64%)</title><rect x="21.4401%" y="149" width="0.6402%" height="15" fill="rgb(233,36,39)"/><text x="21.6901%" y="159.50"></text></g><g><title>misc_checking_1 (4,221,413 samples, 2.02%)</title><rect x="20.1118%" y="165" width="2.0176%" height="15" fill="rgb(226,3,54)"/><text x="20.3618%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (720,907 samples, 0.34%)</title><rect x="22.1302%" y="149" width="0.3446%" height="15" fill="rgb(245,192,40)"/><text x="22.3802%" y="159.50"></text></g><g><title>check_mod_liveness (563,475 samples, 0.27%)</title><rect x="22.2054%" y="133" width="0.2693%" height="15" fill="rgb(238,167,29)"/><text x="22.4554%" y="143.50"></text></g><g><title>misc_checking_2 (1,459,095 samples, 0.70%)</title><rect x="22.1294%" y="165" width="0.6974%" height="15" fill="rgb(232,182,51)"/><text x="22.3794%" y="175.50"></text></g><g><title>match_checking (736,498 samples, 0.35%)</title><rect x="22.4747%" y="149" width="0.3520%" height="15" fill="rgb(231,60,39)"/><text x="22.7247%" y="159.50"></text></g><g><title>check_match (681,808 samples, 0.33%)</title><rect x="22.5009%" y="133" width="0.3259%" height="15" fill="rgb(208,69,12)"/><text x="22.7509%" y="143.50"></text></g><g><title>check_private_in_public (310,423 samples, 0.15%)</title><rect x="22.8315%" y="149" width="0.1484%" height="15" fill="rgb(235,93,37)"/><text x="23.0815%" y="159.50"></text></g><g><title>death_checking (561,156 samples, 0.27%)</title><rect x="22.9799%" y="149" width="0.2682%" height="15" fill="rgb(213,116,39)"/><text x="23.2299%" y="159.50"></text></g><g><title>crate_lints (2,157,372 samples, 1.03%)</title><rect x="23.2487%" y="133" width="1.0311%" height="15" fill="rgb(222,207,29)"/><text x="23.4987%" y="143.50"></text></g><g><title>type_of (1,315,322 samples, 0.63%)</title><rect x="23.6512%" y="117" width="0.6287%" height="15" fill="rgb(206,96,30)"/><text x="23.9012%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (859,768 samples, 0.41%)</title><rect x="23.8689%" y="101" width="0.4109%" height="15" fill="rgb(218,138,4)"/><text x="24.1189%" y="111.50"></text></g><g><title>lint_checking (2,765,498 samples, 1.32%)</title><rect x="23.2481%" y="149" width="1.3218%" height="15" fill="rgb(250,191,14)"/><text x="23.4981%" y="159.50"></text></g><g><title>module_lints (606,796 samples, 0.29%)</title><rect x="24.2799%" y="133" width="0.2900%" height="15" fill="rgb(239,60,40)"/><text x="24.5299%" y="143.50"></text></g><g><title>lint_mod (604,066 samples, 0.29%)</title><rect x="24.2812%" y="117" width="0.2887%" height="15" fill="rgb(206,27,48)"/><text x="24.5312%" y="127.50"></text></g><g><title>privacy_access_levels (433,105 samples, 0.21%)</title><rect x="24.5699%" y="149" width="0.2070%" height="15" fill="rgb(225,35,8)"/><text x="24.8199%" y="159.50"></text></g><g><title>privacy_checking_modules (1,271,103 samples, 0.61%)</title><rect x="24.7769%" y="149" width="0.6075%" height="15" fill="rgb(250,213,24)"/><text x="25.0269%" y="159.50"></text></g><g><title>check_mod_privacy (1,268,813 samples, 0.61%)</title><rect x="24.7780%" y="133" width="0.6064%" height="15" fill="rgb(247,123,22)"/><text x="25.0280%" y="143.50"></text></g><g><title>misc_checking_3 (5,366,625 samples, 2.56%)</title><rect x="22.8268%" y="165" width="2.5650%" height="15" fill="rgb(231,138,38)"/><text x="23.0768%" y="175.50">mi..</text></g><g><title>impl_parent (3,156,001 samples, 1.51%)</title><rect x="28.4000%" y="101" width="1.5084%" height="15" fill="rgb(231,145,46)"/><text x="28.6500%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,848,067 samples, 0.88%)</title><rect x="29.0252%" y="85" width="0.8833%" height="15" fill="rgb(251,118,11)"/><text x="29.2752%" y="95.50"></text></g><g><title>impl_trait_ref (7,464,268 samples, 3.57%)</title><rect x="29.9093%" y="101" width="3.5676%" height="15" fill="rgb(217,147,25)"/><text x="30.1593%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,147,077 samples, 2.94%)</title><rect x="30.5388%" y="85" width="2.9380%" height="15" fill="rgb(247,81,37)"/><text x="30.7888%" y="95.50">me..</text></g><g><title>predicates_of (224,614 samples, 0.11%)</title><rect x="33.5347%" y="101" width="0.1074%" height="15" fill="rgb(209,12,38)"/><text x="33.7847%" y="111.50"></text></g><g><title>trait_impls_of (1,331,054 samples, 0.64%)</title><rect x="33.6431%" y="101" width="0.6362%" height="15" fill="rgb(227,1,9)"/><text x="33.8931%" y="111.50"></text></g><g><title>implementations_of_trait (363,494 samples, 0.17%)</title><rect x="34.1055%" y="85" width="0.1737%" height="15" fill="rgb(248,47,43)"/><text x="34.3555%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (270,553 samples, 0.13%)</title><rect x="34.1499%" y="69" width="0.1293%" height="15" fill="rgb(221,10,30)"/><text x="34.3999%" y="79.50"></text></g><g><title>coherent_trait (18,483,797 samples, 8.83%)</title><rect x="25.4559%" y="133" width="8.8344%" height="15" fill="rgb(210,229,1)"/><text x="25.7059%" y="143.50">coherent_tra..</text></g><g><title>specialization_graph_of (18,444,666 samples, 8.82%)</title><rect x="25.4746%" y="117" width="8.8156%" height="15" fill="rgb(222,148,37)"/><text x="25.7246%" y="127.50">specializati..</text></g><g><title>coherence_checking (18,682,280 samples, 8.93%)</title><rect x="25.4404%" y="149" width="8.9292%" height="15" fill="rgb(234,67,33)"/><text x="25.6904%" y="159.50">coherence_che..</text></g><g><title>associated_items (274,055 samples, 0.13%)</title><rect x="46.4279%" y="101" width="0.1310%" height="15" fill="rgb(247,98,35)"/><text x="46.6779%" y="111.50"></text></g><g><title>adt_dtorck_constraint (302,684 samples, 0.14%)</title><rect x="46.8044%" y="85" width="0.1447%" height="15" fill="rgb(247,138,52)"/><text x="47.0544%" y="95.50"></text></g><g><title>dropck_outlives (768,087 samples, 0.37%)</title><rect x="46.6027%" y="101" width="0.3671%" height="15" fill="rgb(213,79,30)"/><text x="46.8527%" y="111.50"></text></g><g><title>evaluate_obligation (1,793,607 samples, 0.86%)</title><rect x="46.9698%" y="101" width="0.8573%" height="15" fill="rgb(246,177,23)"/><text x="47.2198%" y="111.50"></text></g><g><title>item_attrs (280,631 samples, 0.13%)</title><rect x="48.0228%" y="101" width="0.1341%" height="15" fill="rgb(230,62,27)"/><text x="48.2728%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (273,081 samples, 0.13%)</title><rect x="48.0264%" y="85" width="0.1305%" height="15" fill="rgb(216,154,8)"/><text x="48.2764%" y="95.50"></text></g><g><title>method_autoderef_steps (583,707 samples, 0.28%)</title><rect x="48.1996%" y="101" width="0.2790%" height="15" fill="rgb(244,35,45)"/><text x="48.4496%" y="111.50"></text></g><g><title>evaluate_obligation (284,614 samples, 0.14%)</title><rect x="48.3425%" y="85" width="0.1360%" height="15" fill="rgb(251,115,12)"/><text x="48.5925%" y="95.50"></text></g><g><title>predicates_of (375,114 samples, 0.18%)</title><rect x="48.5186%" y="101" width="0.1793%" height="15" fill="rgb(240,54,50)"/><text x="48.7686%" y="111.50"></text></g><g><title>predicates_defined_on (294,153 samples, 0.14%)</title><rect x="48.5573%" y="85" width="0.1406%" height="15" fill="rgb(233,84,52)"/><text x="48.8073%" y="95.50"></text></g><g><title>evaluate_obligation (397,063 samples, 0.19%)</title><rect x="52.0627%" y="85" width="0.1898%" height="15" fill="rgb(207,117,47)"/><text x="52.3127%" y="95.50"></text></g><g><title>typeck (7,864,132 samples, 3.76%)</title><rect x="48.7461%" y="101" width="3.7587%" height="15" fill="rgb(249,43,39)"/><text x="48.9961%" y="111.50">type..</text></g><g><title>item_bodies_checking (37,865,433 samples, 18.10%)</title><rect x="34.4419%" y="149" width="18.0978%" height="15" fill="rgb(209,38,44)"/><text x="34.6919%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (37,861,513 samples, 18.10%)</title><rect x="34.4437%" y="133" width="18.0960%" height="15" fill="rgb(236,212,23)"/><text x="34.6937%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (37,712,890 samples, 18.02%)</title><rect x="34.5148%" y="117" width="18.0249%" height="15" fill="rgb(242,79,21)"/><text x="34.7648%" y="127.50">typeck</text></g><g><title>generics_of (241,582 samples, 0.12%)</title><rect x="54.0295%" y="117" width="0.1155%" height="15" fill="rgb(211,96,35)"/><text x="54.2795%" y="127.50"></text></g><g><title>item_types_checking (3,536,636 samples, 1.69%)</title><rect x="52.5397%" y="149" width="1.6903%" height="15" fill="rgb(253,215,40)"/><text x="52.7897%" y="159.50"></text></g><g><title>check_mod_item_types (3,533,425 samples, 1.69%)</title><rect x="52.5412%" y="133" width="1.6888%" height="15" fill="rgb(211,81,21)"/><text x="52.7912%" y="143.50"></text></g><g><title>fn_sig (679,050 samples, 0.32%)</title><rect x="54.7281%" y="117" width="0.3246%" height="15" fill="rgb(208,190,38)"/><text x="54.9781%" y="127.50"></text></g><g><title>is_late_bound_map (827,239 samples, 0.40%)</title><rect x="55.3142%" y="101" width="0.3954%" height="15" fill="rgb(235,213,38)"/><text x="55.5642%" y="111.50"></text></g><g><title>resolve_lifetimes (753,739 samples, 0.36%)</title><rect x="55.3493%" y="85" width="0.3603%" height="15" fill="rgb(237,122,38)"/><text x="55.5993%" y="95.50"></text></g><g><title>generics_of (1,631,582 samples, 0.78%)</title><rect x="55.0527%" y="117" width="0.7798%" height="15" fill="rgb(244,218,35)"/><text x="55.3027%" y="127.50"></text></g><g><title>impl_trait_ref (249,632 samples, 0.12%)</title><rect x="55.8325%" y="117" width="0.1193%" height="15" fill="rgb(240,68,47)"/><text x="56.0825%" y="127.50"></text></g><g><title>late_bound_vars_map (1,195,412 samples, 0.57%)</title><rect x="56.7489%" y="69" width="0.5713%" height="15" fill="rgb(210,16,53)"/><text x="56.9989%" y="79.50"></text></g><g><title>resolve_lifetimes (1,139,220 samples, 0.54%)</title><rect x="56.7758%" y="53" width="0.5445%" height="15" fill="rgb(235,124,12)"/><text x="57.0258%" y="63.50"></text></g><g><title>lint_levels (355,893 samples, 0.17%)</title><rect x="57.1502%" y="37" width="0.1701%" height="15" fill="rgb(224,169,11)"/><text x="57.4002%" y="47.50"></text></g><g><title>explicit_predicates_of (2,339,703 samples, 1.12%)</title><rect x="56.2263%" y="85" width="1.1183%" height="15" fill="rgb(250,166,2)"/><text x="56.4763%" y="95.50"></text></g><g><title>predicates_of (3,878,133 samples, 1.85%)</title><rect x="55.9518%" y="117" width="1.8536%" height="15" fill="rgb(242,216,29)"/><text x="56.2018%" y="127.50">p..</text></g><g><title>predicates_defined_on (3,660,389 samples, 1.75%)</title><rect x="56.0559%" y="101" width="1.7495%" height="15" fill="rgb(230,116,27)"/><text x="56.3059%" y="111.50"></text></g><g><title>inferred_outlives_of (964,111 samples, 0.46%)</title><rect x="57.3445%" y="85" width="0.4608%" height="15" fill="rgb(228,99,48)"/><text x="57.5945%" y="95.50"></text></g><g><title>inferred_outlives_crate (890,939 samples, 0.43%)</title><rect x="57.3795%" y="69" width="0.4258%" height="15" fill="rgb(253,11,6)"/><text x="57.6295%" y="79.50"></text></g><g><title>type_of (469,714 samples, 0.22%)</title><rect x="57.5808%" y="53" width="0.2245%" height="15" fill="rgb(247,143,39)"/><text x="57.8308%" y="63.50"></text></g><g><title>type_collecting (8,093,912 samples, 3.87%)</title><rect x="54.2309%" y="149" width="3.8685%" height="15" fill="rgb(236,97,10)"/><text x="54.4809%" y="159.50">type..</text></g><g><title>collect_mod_item_types (8,081,482 samples, 3.86%)</title><rect x="54.2368%" y="133" width="3.8626%" height="15" fill="rgb(233,208,19)"/><text x="54.4868%" y="143.50">coll..</text></g><g><title>type_of (615,155 samples, 0.29%)</title><rect x="57.8053%" y="117" width="0.2940%" height="15" fill="rgb(216,164,2)"/><text x="58.0553%" y="127.50"></text></g><g><title>evaluate_obligation (846,185 samples, 0.40%)</title><rect x="60.7560%" y="117" width="0.4044%" height="15" fill="rgb(220,129,5)"/><text x="61.0060%" y="127.50"></text></g><g><title>implied_outlives_bounds (692,732 samples, 0.33%)</title><rect x="61.1610%" y="117" width="0.3311%" height="15" fill="rgb(242,17,10)"/><text x="61.4110%" y="127.50"></text></g><g><title>param_env (857,198 samples, 0.41%)</title><rect x="61.4921%" y="117" width="0.4097%" height="15" fill="rgb(242,107,0)"/><text x="61.7421%" y="127.50"></text></g><g><title>region_scope_tree (613,488 samples, 0.29%)</title><rect x="61.9444%" y="117" width="0.2932%" height="15" fill="rgb(251,28,31)"/><text x="62.1944%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,346,196 samples, 3.99%)</title><rect x="58.2719%" y="133" width="3.9891%" height="15" fill="rgb(233,223,10)"/><text x="58.5219%" y="143.50">chec..</text></g><g><title>implied_outlives_bounds (313,233 samples, 0.15%)</title><rect x="64.3995%" y="117" width="0.1497%" height="15" fill="rgb(215,21,27)"/><text x="64.6495%" y="127.50"></text></g><g><title>param_env (654,137 samples, 0.31%)</title><rect x="64.5493%" y="117" width="0.3126%" height="15" fill="rgb(232,23,21)"/><text x="64.7993%" y="127.50"></text></g><g><title>analysis (131,141,310 samples, 62.68%)</title><rect x="2.4271%" y="181" width="62.6791%" height="15" fill="rgb(244,5,23)"/><text x="2.6771%" y="191.50">analysis</text></g><g><title>type_check_crate (83,093,122 samples, 39.71%)</title><rect x="25.3917%" y="165" width="39.7144%" height="15" fill="rgb(226,81,46)"/><text x="25.6417%" y="175.50">type_check_crate</text></g><g><title>wf_checking (14,651,409 samples, 7.00%)</title><rect x="58.1035%" y="149" width="7.0027%" height="15" fill="rgb(247,70,30)"/><text x="58.3535%" y="159.50">wf_checki..</text></g><g><title>check_item_well_formed (5,952,903 samples, 2.85%)</title><rect x="62.2610%" y="133" width="2.8452%" height="15" fill="rgb(212,68,19)"/><text x="62.5110%" y="143.50">ch..</text></g><g><title>codegen_module (282,553 samples, 0.14%)</title><rect x="65.3644%" y="165" width="0.1350%" height="15" fill="rgb(240,187,13)"/><text x="65.6144%" y="175.50"></text></g><g><title>codegen_crate (893,229 samples, 0.43%)</title><rect x="65.1122%" y="181" width="0.4269%" height="15" fill="rgb(223,113,26)"/><text x="65.3622%" y="191.50"></text></g><g><title>LLVM_module_codegen (3,591,326 samples, 1.72%)</title><rect x="65.5509%" y="165" width="1.7165%" height="15" fill="rgb(206,192,2)"/><text x="65.8009%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (3,501,595 samples, 1.67%)</title><rect x="65.5937%" y="149" width="1.6736%" height="15" fill="rgb(241,108,4)"/><text x="65.8437%" y="159.50"></text></g><g><title>codegen_module_optimize (3,898,669 samples, 1.86%)</title><rect x="65.5391%" y="181" width="1.8634%" height="15" fill="rgb(247,173,49)"/><text x="65.7891%" y="191.50">c..</text></g><g><title>LLVM_module_optimize (282,843 samples, 0.14%)</title><rect x="67.2673%" y="165" width="0.1352%" height="15" fill="rgb(224,114,35)"/><text x="67.5173%" y="175.50"></text></g><g><title>AST_validation (377,064 samples, 0.18%)</title><rect x="67.5097%" y="165" width="0.1802%" height="15" fill="rgb(245,159,27)"/><text x="67.7597%" y="175.50"></text></g><g><title>complete_gated_feature_checking (215,302 samples, 0.10%)</title><rect x="67.6900%" y="165" width="0.1029%" height="15" fill="rgb(245,172,44)"/><text x="67.9400%" y="175.50"></text></g><g><title>macro_expand_crate (14,907,021 samples, 7.12%)</title><rect x="67.8335%" y="165" width="7.1248%" height="15" fill="rgb(236,23,11)"/><text x="68.0835%" y="175.50">macro_expa..</text></g><g><title>expand_crate (14,879,321 samples, 7.11%)</title><rect x="67.8467%" y="149" width="7.1116%" height="15" fill="rgb(205,117,38)"/><text x="68.0967%" y="159.50">expand_cra..</text></g><g><title>metadata_register_crate (2,647,777 samples, 1.27%)</title><rect x="73.6928%" y="133" width="1.2655%" height="15" fill="rgb(237,72,25)"/><text x="73.9428%" y="143.50"></text></g><g><title>metadata_register_crate (977,909 samples, 0.47%)</title><rect x="74.4909%" y="117" width="0.4674%" height="15" fill="rgb(244,70,9)"/><text x="74.7409%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (603,466 samples, 0.29%)</title><rect x="74.9612%" y="165" width="0.2884%" height="15" fill="rgb(217,125,39)"/><text x="75.2112%" y="175.50"></text></g><g><title>late_resolve_crate (5,718,468 samples, 2.73%)</title><rect x="75.3155%" y="149" width="2.7331%" height="15" fill="rgb(235,36,10)"/><text x="75.5655%" y="159.50">la..</text></g><g><title>configure_and_expand (22,610,149 samples, 10.81%)</title><rect x="67.4025%" y="181" width="10.8065%" height="15" fill="rgb(251,123,47)"/><text x="67.6525%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (6,191,983 samples, 2.96%)</title><rect x="75.2496%" y="165" width="2.9595%" height="15" fill="rgb(221,13,13)"/><text x="75.4996%" y="175.50">res..</text></g><g><title>drop_ast (828,849 samples, 0.40%)</title><rect x="78.2091%" y="181" width="0.3961%" height="15" fill="rgb(238,131,9)"/><text x="78.4591%" y="191.50"></text></g><g><title>early_lint_checks (1,086,310 samples, 0.52%)</title><rect x="78.6122%" y="181" width="0.5192%" height="15" fill="rgb(211,50,8)"/><text x="78.8622%" y="191.50"></text></g><g><title>free_global_ctxt (3,943,139 samples, 1.88%)</title><rect x="79.1314%" y="181" width="1.8846%" height="15" fill="rgb(245,182,24)"/><text x="79.3814%" y="191.50">f..</text></g><g><title>exported_symbols (267,863 samples, 0.13%)</title><rect x="82.2939%" y="165" width="0.1280%" height="15" fill="rgb(242,14,37)"/><text x="82.5439%" y="175.50"></text></g><g><title>is_sized_raw (382,992 samples, 0.18%)</title><rect x="85.0012%" y="133" width="0.1831%" height="15" fill="rgb(246,228,12)"/><text x="85.2512%" y="143.50"></text></g><g><title>evaluate_obligation (297,652 samples, 0.14%)</title><rect x="85.0420%" y="117" width="0.1423%" height="15" fill="rgb(213,55,15)"/><text x="85.2920%" y="127.50"></text></g><g><title>layout_of (509,995 samples, 0.24%)</title><rect x="85.1843%" y="133" width="0.2438%" height="15" fill="rgb(209,9,3)"/><text x="85.4343%" y="143.50"></text></g><g><title>layout_of (1,609,195 samples, 0.77%)</title><rect x="84.6820%" y="149" width="0.7691%" height="15" fill="rgb(230,59,30)"/><text x="84.9320%" y="159.50"></text></g><g><title>needs_drop_raw (473,788 samples, 0.23%)</title><rect x="87.7626%" y="133" width="0.2264%" height="15" fill="rgb(209,121,21)"/><text x="88.0126%" y="143.50"></text></g><g><title>is_copy_raw (387,587 samples, 0.19%)</title><rect x="87.8038%" y="117" width="0.1852%" height="15" fill="rgb(220,109,13)"/><text x="88.0538%" y="127.50"></text></g><g><title>evaluate_obligation (276,155 samples, 0.13%)</title><rect x="87.8570%" y="101" width="0.1320%" height="15" fill="rgb(232,18,1)"/><text x="88.1070%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,480,231 samples, 2.62%)</title><rect x="85.4511%" y="149" width="2.6193%" height="15" fill="rgb(215,41,42)"/><text x="85.7011%" y="159.50">mi..</text></g><g><title>optimized_mir (11,638,752 samples, 5.56%)</title><rect x="82.5201%" y="165" width="5.5628%" height="15" fill="rgb(224,123,36)"/><text x="82.7701%" y="175.50">optimiz..</text></g><g><title>generate_crate_metadata (14,889,861 samples, 7.12%)</title><rect x="81.0161%" y="181" width="7.1166%" height="15" fill="rgb(240,125,3)"/><text x="81.2661%" y="191.50">generate_c..</text></g><g><title>hir_lowering (9,729,369 samples, 4.65%)</title><rect x="88.1327%" y="181" width="4.6502%" height="15" fill="rgb(205,98,50)"/><text x="88.3827%" y="191.50">hir_l..</text></g><g><title>link_crate (1,013,230 samples, 0.48%)</title><rect x="92.7931%" y="165" width="0.4843%" height="15" fill="rgb(205,185,37)"/><text x="93.0431%" y="175.50"></text></g><g><title>link_binary (979,930 samples, 0.47%)</title><rect x="92.8090%" y="149" width="0.4684%" height="15" fill="rgb(238,207,15)"/><text x="93.0590%" y="159.50"></text></g><g><title>link_rlib (688,137 samples, 0.33%)</title><rect x="92.9485%" y="133" width="0.3289%" height="15" fill="rgb(213,199,42)"/><text x="93.1985%" y="143.50"></text></g><g><title>link (1,041,970 samples, 0.50%)</title><rect x="92.7829%" y="181" width="0.4980%" height="15" fill="rgb(235,201,11)"/><text x="93.0329%" y="191.50"></text></g><g><title>parse_crate (12,190,023 samples, 5.83%)</title><rect x="93.2809%" y="181" width="5.8262%" height="15" fill="rgb(207,46,11)"/><text x="93.5309%" y="191.50">parse_c..</text></g><g><title>prepare_outputs (380,284 samples, 0.18%)</title><rect x="99.1118%" y="181" width="0.1818%" height="15" fill="rgb(241,35,35)"/><text x="99.3618%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (925,030 samples, 0.44%)</title><rect x="99.2935%" y="181" width="0.4421%" height="15" fill="rgb(243,32,47)"/><text x="99.5435%" y="191.50"></text></g><g><title>all (209,226,430 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (209,226,430 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (407,544 samples, 0.19%)</title><rect x="99.8052%" y="181" width="0.1948%" height="15" fill="rgb(243,110,44)"/><text x="100.0552%" y="191.50"></text></g></svg></svg>