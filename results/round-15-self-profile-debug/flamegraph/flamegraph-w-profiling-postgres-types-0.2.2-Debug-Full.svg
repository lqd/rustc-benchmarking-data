<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (156,521,090 samples, 11.86%)</title><rect x="0.0528%" y="197" width="11.8581%" height="15" fill="rgb(227,0,7)"/><text x="0.3028%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (1,654,615 samples, 0.13%)</title><rect x="17.1556%" y="69" width="0.1254%" height="15" fill="rgb(217,0,24)"/><text x="17.4056%" y="79.50"></text></g><g><title>evaluate_obligation (1,374,063 samples, 0.10%)</title><rect x="17.1768%" y="53" width="0.1041%" height="15" fill="rgb(221,193,54)"/><text x="17.4268%" y="63.50"></text></g><g><title>needs_drop_raw (2,427,813 samples, 0.18%)</title><rect x="17.0986%" y="85" width="0.1839%" height="15" fill="rgb(248,212,6)"/><text x="17.3486%" y="95.50"></text></g><g><title>specialization_graph_of (3,277,374 samples, 0.25%)</title><rect x="17.3853%" y="69" width="0.2483%" height="15" fill="rgb(208,68,35)"/><text x="17.6353%" y="79.50"></text></g><g><title>impl_trait_ref (2,252,451 samples, 0.17%)</title><rect x="17.4629%" y="53" width="0.1706%" height="15" fill="rgb(232,128,0)"/><text x="17.7129%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,107,801 samples, 0.16%)</title><rect x="17.4739%" y="37" width="0.1597%" height="15" fill="rgb(207,160,47)"/><text x="17.7239%" y="47.50"></text></g><g><title>resolve_instance (4,756,223 samples, 0.36%)</title><rect x="17.2846%" y="85" width="0.3603%" height="15" fill="rgb(228,23,34)"/><text x="17.5346%" y="95.50"></text></g><g><title>thir_body (4,404,186 samples, 0.33%)</title><rect x="17.6508%" y="85" width="0.3337%" height="15" fill="rgb(218,30,26)"/><text x="17.9008%" y="95.50"></text></g><g><title>mir_const (27,158,091 samples, 2.06%)</title><rect x="15.9314%" y="133" width="2.0575%" height="15" fill="rgb(220,122,19)"/><text x="16.1814%" y="143.50">m..</text></g><g><title>unsafety_check_result (24,118,707 samples, 1.83%)</title><rect x="16.1617%" y="117" width="1.8272%" height="15" fill="rgb(250,228,42)"/><text x="16.4117%" y="127.50">u..</text></g><g><title>mir_built (22,183,273 samples, 1.68%)</title><rect x="16.3083%" y="101" width="1.6806%" height="15" fill="rgb(240,193,28)"/><text x="16.5583%" y="111.50"></text></g><g><title>mir_const_qualif (7,592,265 samples, 0.58%)</title><rect x="17.9889%" y="133" width="0.5752%" height="15" fill="rgb(216,20,37)"/><text x="18.2389%" y="143.50"></text></g><g><title>mir_const (3,355,728 samples, 0.25%)</title><rect x="18.3099%" y="117" width="0.2542%" height="15" fill="rgb(206,188,39)"/><text x="18.5599%" y="127.50"></text></g><g><title>unsafety_check_result (2,494,559 samples, 0.19%)</title><rect x="18.3751%" y="101" width="0.1890%" height="15" fill="rgb(217,207,13)"/><text x="18.6251%" y="111.50"></text></g><g><title>mir_built (2,147,856 samples, 0.16%)</title><rect x="18.4014%" y="85" width="0.1627%" height="15" fill="rgb(231,73,38)"/><text x="18.6514%" y="95.50"></text></g><g><title>mir_promoted (38,474,248 samples, 2.91%)</title><rect x="15.6493%" y="149" width="2.9148%" height="15" fill="rgb(225,20,46)"/><text x="15.8993%" y="159.50">mi..</text></g><g><title>type_op_prove_predicate (7,100,960 samples, 0.54%)</title><rect x="18.8033%" y="149" width="0.5380%" height="15" fill="rgb(210,31,41)"/><text x="19.0533%" y="159.50"></text></g><g><title>MIR_borrow_checking (97,041,375 samples, 7.35%)</title><rect x="11.9906%" y="181" width="7.3519%" height="15" fill="rgb(221,200,47)"/><text x="12.2406%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (96,452,717 samples, 7.31%)</title><rect x="12.0352%" y="165" width="7.3073%" height="15" fill="rgb(226,26,5)"/><text x="12.2852%" y="175.50">mir_borrow..</text></g><g><title>MIR_effect_checking (2,264,093 samples, 0.17%)</title><rect x="19.3425%" y="181" width="0.1715%" height="15" fill="rgb(249,33,26)"/><text x="19.5925%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,995,472 samples, 0.15%)</title><rect x="19.3628%" y="165" width="0.1512%" height="15" fill="rgb(235,183,28)"/><text x="19.6128%" y="175.50"></text></g><g><title>check_mod_attrs (1,520,875 samples, 0.12%)</title><rect x="19.5661%" y="165" width="0.1152%" height="15" fill="rgb(221,5,38)"/><text x="19.8161%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,483,064 samples, 0.11%)</title><rect x="19.7244%" y="165" width="0.1124%" height="15" fill="rgb(247,18,42)"/><text x="19.9744%" y="175.50"></text></g><g><title>misc_checking_1 (3,692,518 samples, 0.28%)</title><rect x="19.5639%" y="181" width="0.2797%" height="15" fill="rgb(241,131,45)"/><text x="19.8139%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,449,935 samples, 0.11%)</title><rect x="19.8440%" y="165" width="0.1098%" height="15" fill="rgb(249,31,29)"/><text x="20.0940%" y="175.50"></text></g><g><title>mir_borrowck (1,443,874 samples, 0.11%)</title><rect x="20.7026%" y="53" width="0.1094%" height="15" fill="rgb(225,111,53)"/><text x="20.9526%" y="63.50"></text></g><g><title>mir_for_ctfe (2,650,857 samples, 0.20%)</title><rect x="20.6127%" y="85" width="0.2008%" height="15" fill="rgb(238,160,17)"/><text x="20.8627%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,048,908 samples, 0.16%)</title><rect x="20.6583%" y="69" width="0.1552%" height="15" fill="rgb(214,148,48)"/><text x="20.9083%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,559,938 samples, 0.27%)</title><rect x="20.5561%" y="133" width="0.2697%" height="15" fill="rgb(232,36,49)"/><text x="20.8061%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,538,317 samples, 0.27%)</title><rect x="20.5578%" y="117" width="0.2681%" height="15" fill="rgb(209,103,24)"/><text x="20.8078%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,494,596 samples, 0.26%)</title><rect x="20.5611%" y="101" width="0.2648%" height="15" fill="rgb(229,88,8)"/><text x="20.8111%" y="111.50"></text></g><g><title>mir_const_qualif (1,420,623 samples, 0.11%)</title><rect x="20.8344%" y="133" width="0.1076%" height="15" fill="rgb(213,181,19)"/><text x="21.0844%" y="143.50"></text></g><g><title>misc_checking_2 (19,224,365 samples, 1.46%)</title><rect x="19.8437%" y="181" width="1.4564%" height="15" fill="rgb(254,191,54)"/><text x="20.0937%" y="191.50"></text></g><g><title>match_checking (17,770,770 samples, 1.35%)</title><rect x="19.9538%" y="165" width="1.3463%" height="15" fill="rgb(241,83,37)"/><text x="20.2038%" y="175.50"></text></g><g><title>check_match (17,579,479 samples, 1.33%)</title><rect x="19.9683%" y="149" width="1.3318%" height="15" fill="rgb(233,36,39)"/><text x="20.2183%" y="159.50"></text></g><g><title>visible_parent_map (4,553,056 samples, 0.34%)</title><rect x="20.9552%" y="133" width="0.3449%" height="15" fill="rgb(226,3,54)"/><text x="21.2052%" y="143.50"></text></g><g><title>module_children (4,098,688 samples, 0.31%)</title><rect x="20.9896%" y="117" width="0.3105%" height="15" fill="rgb(245,192,40)"/><text x="21.2396%" y="127.50"></text></g><g><title>metadata_decode_entry_module_children (4,034,808 samples, 0.31%)</title><rect x="20.9945%" y="101" width="0.3057%" height="15" fill="rgb(238,167,29)"/><text x="21.2445%" y="111.50"></text></g><g><title>death_checking (1,438,665 samples, 0.11%)</title><rect x="21.3514%" y="165" width="0.1090%" height="15" fill="rgb(232,182,51)"/><text x="21.6014%" y="175.50"></text></g><g><title>crate_lints (3,590,406 samples, 0.27%)</title><rect x="21.4606%" y="149" width="0.2720%" height="15" fill="rgb(231,60,39)"/><text x="21.7106%" y="159.50"></text></g><g><title>type_of (1,340,991 samples, 0.10%)</title><rect x="21.6310%" y="133" width="0.1016%" height="15" fill="rgb(208,69,12)"/><text x="21.8810%" y="143.50"></text></g><g><title>lint_checking (5,375,965 samples, 0.41%)</title><rect x="21.4604%" y="165" width="0.4073%" height="15" fill="rgb(235,93,37)"/><text x="21.7104%" y="175.50"></text></g><g><title>module_lints (1,783,148 samples, 0.14%)</title><rect x="21.7326%" y="149" width="0.1351%" height="15" fill="rgb(213,116,39)"/><text x="21.9826%" y="159.50"></text></g><g><title>lint_mod (1,776,018 samples, 0.13%)</title><rect x="21.7332%" y="133" width="0.1346%" height="15" fill="rgb(222,207,29)"/><text x="21.9832%" y="143.50"></text></g><g><title>privacy_access_levels (1,484,596 samples, 0.11%)</title><rect x="21.8677%" y="165" width="0.1125%" height="15" fill="rgb(206,96,30)"/><text x="22.1177%" y="175.50"></text></g><g><title>privacy_checking_modules (4,850,829 samples, 0.37%)</title><rect x="21.9802%" y="165" width="0.3675%" height="15" fill="rgb(218,138,4)"/><text x="22.2302%" y="175.50"></text></g><g><title>check_mod_privacy (4,844,879 samples, 0.37%)</title><rect x="21.9806%" y="149" width="0.3670%" height="15" fill="rgb(250,191,14)"/><text x="22.2306%" y="159.50"></text></g><g><title>misc_checking_3 (13,851,071 samples, 1.05%)</title><rect x="21.3001%" y="181" width="1.0494%" height="15" fill="rgb(239,60,40)"/><text x="21.5501%" y="191.50"></text></g><g><title>impl_parent (3,446,745 samples, 0.26%)</title><rect x="22.8733%" y="117" width="0.2611%" height="15" fill="rgb(206,27,48)"/><text x="23.1233%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,014,869 samples, 0.15%)</title><rect x="22.9818%" y="101" width="0.1526%" height="15" fill="rgb(225,35,8)"/><text x="23.2318%" y="111.50"></text></g><g><title>impl_trait_ref (7,163,431 samples, 0.54%)</title><rect x="23.1344%" y="117" width="0.5427%" height="15" fill="rgb(250,213,24)"/><text x="23.3844%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,723,781 samples, 0.43%)</title><rect x="23.2435%" y="101" width="0.4336%" height="15" fill="rgb(247,123,22)"/><text x="23.4935%" y="111.50"></text></g><g><title>coherent_trait (18,621,769 samples, 1.41%)</title><rect x="22.3682%" y="149" width="1.4108%" height="15" fill="rgb(231,138,38)"/><text x="22.6182%" y="159.50"></text></g><g><title>specialization_graph_of (18,052,942 samples, 1.37%)</title><rect x="22.4113%" y="133" width="1.3677%" height="15" fill="rgb(231,145,46)"/><text x="22.6613%" y="143.50"></text></g><g><title>coherence_checking (18,788,031 samples, 1.42%)</title><rect x="22.3662%" y="165" width="1.4234%" height="15" fill="rgb(251,118,11)"/><text x="22.6162%" y="175.50"></text></g><g><title>evaluate_obligation (5,242,059 samples, 0.40%)</title><rect x="29.4903%" y="117" width="0.3971%" height="15" fill="rgb(217,147,25)"/><text x="29.7403%" y="127.50"></text></g><g><title>evaluate_obligation (3,085,693 samples, 0.23%)</title><rect x="30.9749%" y="101" width="0.2338%" height="15" fill="rgb(247,81,37)"/><text x="31.2249%" y="111.50"></text></g><g><title>typeck (15,933,642 samples, 1.21%)</title><rect x="30.1262%" y="117" width="1.2071%" height="15" fill="rgb(209,12,38)"/><text x="30.3762%" y="127.50"></text></g><g><title>item_bodies_checking (99,265,508 samples, 7.52%)</title><rect x="23.8238%" y="165" width="7.5204%" height="15" fill="rgb(227,1,9)"/><text x="24.0738%" y="175.50">item_bodie..</text></g><g><title>typeck_item_bodies (99,251,408 samples, 7.52%)</title><rect x="23.8248%" y="149" width="7.5193%" height="15" fill="rgb(248,47,43)"/><text x="24.0748%" y="159.50">typeck_ite..</text></g><g><title>typeck (98,852,264 samples, 7.49%)</title><rect x="23.8551%" y="133" width="7.4891%" height="15" fill="rgb(221,10,30)"/><text x="24.1051%" y="143.50">typeck</text></g><g><title>item_types_checking (4,202,553 samples, 0.32%)</title><rect x="31.3442%" y="165" width="0.3184%" height="15" fill="rgb(210,229,1)"/><text x="31.5942%" y="175.50"></text></g><g><title>check_mod_item_types (4,196,023 samples, 0.32%)</title><rect x="31.3447%" y="149" width="0.3179%" height="15" fill="rgb(222,148,37)"/><text x="31.5947%" y="159.50"></text></g><g><title>fn_sig (1,678,828 samples, 0.13%)</title><rect x="31.7415%" y="133" width="0.1272%" height="15" fill="rgb(234,67,33)"/><text x="31.9915%" y="143.50"></text></g><g><title>generics_of (1,683,450 samples, 0.13%)</title><rect x="31.8687%" y="133" width="0.1275%" height="15" fill="rgb(247,98,35)"/><text x="32.1187%" y="143.50"></text></g><g><title>predicates_of (1,543,762 samples, 0.12%)</title><rect x="32.0047%" y="133" width="0.1170%" height="15" fill="rgb(247,138,52)"/><text x="32.2547%" y="143.50"></text></g><g><title>type_collecting (6,484,156 samples, 0.49%)</title><rect x="31.6629%" y="165" width="0.4912%" height="15" fill="rgb(213,79,30)"/><text x="31.9129%" y="175.50"></text></g><g><title>collect_mod_item_types (6,472,766 samples, 0.49%)</title><rect x="31.6637%" y="149" width="0.4904%" height="15" fill="rgb(246,177,23)"/><text x="31.9137%" y="159.50"></text></g><g><title>region_scope_tree (1,734,921 samples, 0.13%)</title><rect x="32.9303%" y="133" width="0.1314%" height="15" fill="rgb(230,62,27)"/><text x="33.1803%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,290,538 samples, 0.86%)</title><rect x="32.2083%" y="149" width="0.8554%" height="15" fill="rgb(216,154,8)"/><text x="32.4583%" y="159.50"></text></g><g><title>evaluate_obligation (1,428,563 samples, 0.11%)</title><rect x="33.3720%" y="133" width="0.1082%" height="15" fill="rgb(244,35,45)"/><text x="33.6220%" y="143.50"></text></g><g><title>check_item_well_formed (7,564,237 samples, 0.57%)</title><rect x="33.0637%" y="149" width="0.5731%" height="15" fill="rgb(251,115,12)"/><text x="33.3137%" y="159.50"></text></g><g><title>analysis (287,465,250 samples, 21.78%)</title><rect x="11.9109%" y="197" width="21.7785%" height="15" fill="rgb(240,54,50)"/><text x="12.1609%" y="207.50">analysis</text></g><g><title>type_check_crate (149,680,400 samples, 11.34%)</title><rect x="22.3495%" y="181" width="11.3398%" height="15" fill="rgb(233,84,52)"/><text x="22.5995%" y="191.50">type_check_crate</text></g><g><title>wf_checking (20,238,516 samples, 1.53%)</title><rect x="32.1561%" y="165" width="1.5333%" height="15" fill="rgb(207,117,47)"/><text x="32.4061%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (1,652,954 samples, 0.13%)</title><rect x="41.3707%" y="165" width="0.1252%" height="15" fill="rgb(249,43,39)"/><text x="41.6207%" y="175.50"></text></g><g><title>const_caller_location (1,628,882 samples, 0.12%)</title><rect x="41.4959%" y="165" width="0.1234%" height="15" fill="rgb(209,38,44)"/><text x="41.7459%" y="175.50"></text></g><g><title>layout_of (1,960,174 samples, 0.15%)</title><rect x="42.0832%" y="149" width="0.1485%" height="15" fill="rgb(236,212,23)"/><text x="42.3332%" y="159.50"></text></g><g><title>predicates_of (1,980,268 samples, 0.15%)</title><rect x="42.5011%" y="133" width="0.1500%" height="15" fill="rgb(242,79,21)"/><text x="42.7511%" y="143.50"></text></g><g><title>predicates_defined_on (1,539,833 samples, 0.12%)</title><rect x="42.5344%" y="117" width="0.1167%" height="15" fill="rgb(211,96,35)"/><text x="42.7844%" y="127.50"></text></g><g><title>param_env (5,561,082 samples, 0.42%)</title><rect x="42.2317%" y="149" width="0.4213%" height="15" fill="rgb(253,215,40)"/><text x="42.4817%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,278,102 samples, 0.17%)</title><rect x="42.6530%" y="149" width="0.1726%" height="15" fill="rgb(211,81,21)"/><text x="42.9030%" y="159.50"></text></g><g><title>fn_abi_of_instance (15,884,884 samples, 1.20%)</title><rect x="41.6252%" y="165" width="1.2034%" height="15" fill="rgb(208,190,38)"/><text x="41.8752%" y="175.50"></text></g><g><title>layout_of (2,577,453 samples, 0.20%)</title><rect x="42.8864%" y="165" width="0.1953%" height="15" fill="rgb(235,213,38)"/><text x="43.1364%" y="175.50"></text></g><g><title>symbol_name (1,543,088 samples, 0.12%)</title><rect x="43.0838%" y="165" width="0.1169%" height="15" fill="rgb(237,122,38)"/><text x="43.3338%" y="175.50"></text></g><g><title>codegen_module (123,148,379 samples, 9.33%)</title><rect x="33.8860%" y="181" width="9.3298%" height="15" fill="rgb(244,218,35)"/><text x="34.1360%" y="191.50">codegen_module</text></g><g><title>codegen_crate (125,874,309 samples, 9.54%)</title><rect x="33.6902%" y="197" width="9.5363%" height="15" fill="rgb(240,68,47)"/><text x="33.9402%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (541,338,549 samples, 41.01%)</title><rect x="43.2438%" y="181" width="41.0120%" height="15" fill="rgb(210,16,53)"/><text x="43.4938%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (514,216,490 samples, 38.96%)</title><rect x="45.2986%" y="165" width="38.9572%" height="15" fill="rgb(235,124,12)"/><text x="45.5486%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (567,581,247 samples, 43.00%)</title><rect x="43.2265%" y="197" width="43.0002%" height="15" fill="rgb(224,169,11)"/><text x="43.4765%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (26,014,256 samples, 1.97%)</title><rect x="84.2558%" y="181" width="1.9708%" height="15" fill="rgb(250,166,2)"/><text x="84.5058%" y="191.50">L..</text></g><g><title>metadata_register_crate (3,753,308 samples, 0.28%)</title><rect x="88.7277%" y="149" width="0.2844%" height="15" fill="rgb(242,216,29)"/><text x="88.9777%" y="159.50"></text></g><g><title>metadata_register_crate (1,783,355 samples, 0.14%)</title><rect x="88.8770%" y="133" width="0.1351%" height="15" fill="rgb(230,116,27)"/><text x="89.1270%" y="143.50"></text></g><g><title>macro_expand_crate (36,648,382 samples, 2.78%)</title><rect x="86.2869%" y="181" width="2.7765%" height="15" fill="rgb(228,99,48)"/><text x="86.5369%" y="191.50">ma..</text></g><g><title>expand_crate (36,627,472 samples, 2.77%)</title><rect x="86.2884%" y="165" width="2.7749%" height="15" fill="rgb(253,11,6)"/><text x="86.5384%" y="175.50">ex..</text></g><g><title>late_resolve_crate (6,182,703 samples, 0.47%)</title><rect x="89.1261%" y="165" width="0.4684%" height="15" fill="rgb(247,143,39)"/><text x="89.3761%" y="175.50"></text></g><g><title>configure_and_expand (44,785,754 samples, 3.39%)</title><rect x="86.2267%" y="197" width="3.3930%" height="15" fill="rgb(236,97,10)"/><text x="86.4767%" y="207.50">con..</text></g><g><title>resolve_crate (6,886,730 samples, 0.52%)</title><rect x="89.0979%" y="181" width="0.5217%" height="15" fill="rgb(233,208,19)"/><text x="89.3479%" y="191.50"></text></g><g><title>early_lint_checks (1,461,755 samples, 0.11%)</title><rect x="89.6871%" y="197" width="0.1107%" height="15" fill="rgb(216,164,2)"/><text x="89.9371%" y="207.50"></text></g><g><title>free_global_ctxt (12,677,268 samples, 0.96%)</title><rect x="89.7979%" y="197" width="0.9604%" height="15" fill="rgb(220,129,5)"/><text x="90.0479%" y="207.50"></text></g><g><title>item_attrs (1,737,414 samples, 0.13%)</title><rect x="91.4999%" y="101" width="0.1316%" height="15" fill="rgb(242,17,10)"/><text x="91.7499%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,674,144 samples, 0.13%)</title><rect x="91.5047%" y="85" width="0.1268%" height="15" fill="rgb(242,107,0)"/><text x="91.7547%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,734,992 samples, 0.21%)</title><rect x="91.4671%" y="117" width="0.2072%" height="15" fill="rgb(251,28,31)"/><text x="91.7171%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,987,466 samples, 0.23%)</title><rect x="92.4249%" y="101" width="0.2263%" height="15" fill="rgb(233,223,10)"/><text x="92.6749%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,473,175 samples, 0.57%)</title><rect x="92.6512%" y="101" width="0.5662%" height="15" fill="rgb(215,21,27)"/><text x="92.9012%" y="111.50"></text></g><g><title>promoted_mir (1,608,885 samples, 0.12%)</title><rect x="93.4341%" y="37" width="0.1219%" height="15" fill="rgb(232,23,21)"/><text x="93.6841%" y="47.50"></text></g><g><title>eval_to_const_value_raw (4,068,217 samples, 0.31%)</title><rect x="93.2479%" y="85" width="0.3082%" height="15" fill="rgb(244,5,23)"/><text x="93.4979%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,940,126 samples, 0.30%)</title><rect x="93.2576%" y="69" width="0.2985%" height="15" fill="rgb(226,81,46)"/><text x="93.5076%" y="79.50"></text></g><g><title>eval_to_allocation_raw (3,781,253 samples, 0.29%)</title><rect x="93.2696%" y="53" width="0.2865%" height="15" fill="rgb(247,70,30)"/><text x="93.5196%" y="63.50"></text></g><g><title>optimized_mir (23,627,743 samples, 1.79%)</title><rect x="91.7670%" y="117" width="1.7900%" height="15" fill="rgb(212,68,19)"/><text x="92.0170%" y="127.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,347,849 samples, 0.33%)</title><rect x="93.2276%" y="101" width="0.3294%" height="15" fill="rgb(240,187,13)"/><text x="93.4776%" y="111.50"></text></g><g><title>evaluate_obligation (1,363,212 samples, 0.10%)</title><rect x="93.9637%" y="85" width="0.1033%" height="15" fill="rgb(223,113,26)"/><text x="94.2137%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (5,781,293 samples, 0.44%)</title><rect x="93.6766%" y="101" width="0.4380%" height="15" fill="rgb(206,192,2)"/><text x="93.9266%" y="111.50"></text></g><g><title>specialization_graph_of (1,856,498 samples, 0.14%)</title><rect x="94.1801%" y="101" width="0.1406%" height="15" fill="rgb(241,108,4)"/><text x="94.4301%" y="111.50"></text></g><g><title>resolve_instance (10,558,477 samples, 0.80%)</title><rect x="93.5570%" y="117" width="0.7999%" height="15" fill="rgb(247,173,49)"/><text x="93.8070%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,392,183 samples, 0.11%)</title><rect x="94.3711%" y="117" width="0.1055%" height="15" fill="rgb(224,114,35)"/><text x="94.6211%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (1,991,140 samples, 0.15%)</title><rect x="94.4770%" y="117" width="0.1508%" height="15" fill="rgb(245,159,27)"/><text x="94.7270%" y="127.50"></text></g><g><title>upstream_monomorphizations (1,957,380 samples, 0.15%)</title><rect x="94.4795%" y="101" width="0.1483%" height="15" fill="rgb(245,172,44)"/><text x="94.7295%" y="111.50"></text></g><g><title>exported_symbols (1,651,925 samples, 0.13%)</title><rect x="94.5027%" y="85" width="0.1252%" height="15" fill="rgb(236,23,11)"/><text x="94.7527%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,641,915 samples, 0.12%)</title><rect x="94.5034%" y="69" width="0.1244%" height="15" fill="rgb(205,117,38)"/><text x="94.7534%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (46,014,418 samples, 3.49%)</title><rect x="91.1886%" y="133" width="3.4861%" height="15" fill="rgb(237,72,25)"/><text x="91.4386%" y="143.50">mon..</text></g><g><title>monomorphization_collector (46,198,359 samples, 3.50%)</title><rect x="91.1881%" y="149" width="3.5000%" height="15" fill="rgb(244,70,9)"/><text x="91.4381%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,206,672 samples, 0.24%)</title><rect x="94.6891%" y="133" width="0.2429%" height="15" fill="rgb(217,125,39)"/><text x="94.9391%" y="143.50"></text></g><g><title>symbol_name (2,910,141 samples, 0.22%)</title><rect x="94.7116%" y="117" width="0.2205%" height="15" fill="rgb(235,36,10)"/><text x="94.9616%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (50,911,767 samples, 3.86%)</title><rect x="91.1842%" y="165" width="3.8571%" height="15" fill="rgb(251,123,47)"/><text x="91.4342%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (4,661,867 samples, 0.35%)</title><rect x="94.6881%" y="149" width="0.3532%" height="15" fill="rgb(221,13,13)"/><text x="94.9381%" y="159.50"></text></g><g><title>cgu_partitioning (1,441,735 samples, 0.11%)</title><rect x="94.9321%" y="133" width="0.1092%" height="15" fill="rgb(238,131,9)"/><text x="95.1821%" y="143.50"></text></g><g><title>exported_symbols (51,412,672 samples, 3.90%)</title><rect x="91.1733%" y="181" width="3.8950%" height="15" fill="rgb(211,50,8)"/><text x="91.4233%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,407,941 samples, 0.41%)</title><rect x="95.6007%" y="165" width="0.4097%" height="15" fill="rgb(245,182,24)"/><text x="95.8507%" y="175.50"></text></g><g><title>optimized_mir (10,964,783 samples, 0.83%)</title><rect x="95.1849%" y="181" width="0.8307%" height="15" fill="rgb(242,14,37)"/><text x="95.4349%" y="191.50"></text></g><g><title>generate_crate_metadata (69,741,169 samples, 5.28%)</title><rect x="90.7583%" y="197" width="5.2836%" height="15" fill="rgb(246,228,12)"/><text x="91.0083%" y="207.50">genera..</text></g><g><title>hir_lowering (11,498,856 samples, 0.87%)</title><rect x="96.0419%" y="197" width="0.8712%" height="15" fill="rgb(213,55,15)"/><text x="96.2919%" y="207.50"></text></g><g><title>finish_ongoing_codegen (24,660,860 samples, 1.87%)</title><rect x="96.9148%" y="181" width="1.8683%" height="15" fill="rgb(209,9,3)"/><text x="97.1648%" y="191.50">f..</text></g><g><title>link_crate (4,778,698 samples, 0.36%)</title><rect x="98.7831%" y="181" width="0.3620%" height="15" fill="rgb(230,59,30)"/><text x="99.0331%" y="191.50"></text></g><g><title>link_binary (4,717,447 samples, 0.36%)</title><rect x="98.7878%" y="165" width="0.3574%" height="15" fill="rgb(209,121,21)"/><text x="99.0378%" y="175.50"></text></g><g><title>link_rlib (3,646,817 samples, 0.28%)</title><rect x="98.8689%" y="149" width="0.2763%" height="15" fill="rgb(220,109,13)"/><text x="99.1189%" y="159.50"></text></g><g><title>link (29,475,119 samples, 2.23%)</title><rect x="96.9131%" y="197" width="2.2330%" height="15" fill="rgb(232,18,1)"/><text x="97.1631%" y="207.50">l..</text></g><g><title>parse_crate (8,102,252 samples, 0.61%)</title><rect x="99.1461%" y="197" width="0.6138%" height="15" fill="rgb(215,41,42)"/><text x="99.3961%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,347,484 samples, 0.18%)</title><rect x="99.7779%" y="197" width="0.1778%" height="15" fill="rgb(224,123,36)"/><text x="100.0279%" y="207.50"></text></g><g><title>all (1,319,951,539 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,319,951,539 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>