<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (289,889,825 samples, 11.70%)</title><rect x="0.0767%" y="197" width="11.7036%" height="15" fill="rgb(227,0,7)"/><text x="0.3267%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (5,195,439 samples, 0.21%)</title><rect x="18.9388%" y="69" width="0.2098%" height="15" fill="rgb(217,0,24)"/><text x="19.1888%" y="79.50"></text></g><g><title>evaluate_obligation (4,337,821 samples, 0.18%)</title><rect x="18.9734%" y="53" width="0.1751%" height="15" fill="rgb(221,193,54)"/><text x="19.2234%" y="63.50"></text></g><g><title>needs_drop_raw (6,804,532 samples, 0.27%)</title><rect x="18.8749%" y="85" width="0.2747%" height="15" fill="rgb(248,212,6)"/><text x="19.1249%" y="95.50"></text></g><g><title>resolve_instance (3,736,337 samples, 0.15%)</title><rect x="19.1533%" y="85" width="0.1508%" height="15" fill="rgb(208,68,35)"/><text x="19.4033%" y="95.50"></text></g><g><title>thir_body (11,800,960 samples, 0.48%)</title><rect x="19.3116%" y="85" width="0.4764%" height="15" fill="rgb(232,128,0)"/><text x="19.5616%" y="95.50"></text></g><g><title>mir_const (66,564,400 samples, 2.69%)</title><rect x="17.1060%" y="133" width="2.6874%" height="15" fill="rgb(207,160,47)"/><text x="17.3560%" y="143.50">mi..</text></g><g><title>unsafety_check_result (57,887,525 samples, 2.34%)</title><rect x="17.4563%" y="117" width="2.3371%" height="15" fill="rgb(228,23,34)"/><text x="17.7063%" y="127.50">u..</text></g><g><title>mir_built (52,178,954 samples, 2.11%)</title><rect x="17.6867%" y="101" width="2.1066%" height="15" fill="rgb(218,30,26)"/><text x="17.9367%" y="111.50">m..</text></g><g><title>mir_promoted (76,052,022 samples, 3.07%)</title><rect x="16.8025%" y="149" width="3.0704%" height="15" fill="rgb(220,122,19)"/><text x="17.0525%" y="159.50">mir..</text></g><g><title>type_op_normalize_fn_sig (4,155,459 samples, 0.17%)</title><rect x="19.9495%" y="149" width="0.1678%" height="15" fill="rgb(250,228,42)"/><text x="20.1995%" y="159.50"></text></g><g><title>normalize_projection_ty (2,965,841 samples, 0.12%)</title><rect x="19.9976%" y="133" width="0.1197%" height="15" fill="rgb(240,193,28)"/><text x="20.2476%" y="143.50"></text></g><g><title>type_op_prove_predicate (13,455,343 samples, 0.54%)</title><rect x="20.1718%" y="149" width="0.5432%" height="15" fill="rgb(216,20,37)"/><text x="20.4218%" y="159.50"></text></g><g><title>MIR_borrow_checking (219,203,447 samples, 8.85%)</title><rect x="11.8660%" y="181" width="8.8498%" height="15" fill="rgb(206,188,39)"/><text x="12.1160%" y="191.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (218,219,988 samples, 8.81%)</title><rect x="11.9057%" y="165" width="8.8101%" height="15" fill="rgb(217,207,13)"/><text x="12.1557%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (3,319,335 samples, 0.13%)</title><rect x="20.8183%" y="165" width="0.1340%" height="15" fill="rgb(231,73,38)"/><text x="21.0683%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (3,775,786 samples, 0.15%)</title><rect x="21.0135%" y="165" width="0.1524%" height="15" fill="rgb(225,20,46)"/><text x="21.2635%" y="175.50"></text></g><g><title>misc_checking_1 (8,878,650 samples, 0.36%)</title><rect x="20.8166%" y="181" width="0.3585%" height="15" fill="rgb(210,31,41)"/><text x="21.0666%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (4,696,548 samples, 0.19%)</title><rect x="21.1751%" y="165" width="0.1896%" height="15" fill="rgb(221,200,47)"/><text x="21.4251%" y="175.50"></text></g><g><title>check_mod_liveness (3,815,199 samples, 0.15%)</title><rect x="21.2107%" y="149" width="0.1540%" height="15" fill="rgb(226,26,5)"/><text x="21.4607%" y="159.50"></text></g><g><title>misc_checking_2 (13,944,741 samples, 0.56%)</title><rect x="21.1750%" y="181" width="0.5630%" height="15" fill="rgb(249,33,26)"/><text x="21.4250%" y="191.50"></text></g><g><title>match_checking (9,245,923 samples, 0.37%)</title><rect x="21.3647%" y="165" width="0.3733%" height="15" fill="rgb(235,183,28)"/><text x="21.6147%" y="175.50"></text></g><g><title>check_match (8,929,100 samples, 0.36%)</title><rect x="21.3775%" y="149" width="0.3605%" height="15" fill="rgb(221,5,38)"/><text x="21.6275%" y="159.50"></text></g><g><title>death_checking (4,316,933 samples, 0.17%)</title><rect x="21.8012%" y="165" width="0.1743%" height="15" fill="rgb(247,18,42)"/><text x="22.0512%" y="175.50"></text></g><g><title>crate_lints (7,381,555 samples, 0.30%)</title><rect x="21.9755%" y="149" width="0.2980%" height="15" fill="rgb(241,131,45)"/><text x="22.2255%" y="159.50"></text></g><g><title>lint_checking (13,000,303 samples, 0.52%)</title><rect x="21.9754%" y="165" width="0.5249%" height="15" fill="rgb(249,31,29)"/><text x="22.2254%" y="175.50"></text></g><g><title>module_lints (5,616,598 samples, 0.23%)</title><rect x="22.2735%" y="149" width="0.2268%" height="15" fill="rgb(225,111,53)"/><text x="22.5235%" y="159.50"></text></g><g><title>lint_mod (5,602,838 samples, 0.23%)</title><rect x="22.2741%" y="133" width="0.2262%" height="15" fill="rgb(238,160,17)"/><text x="22.5241%" y="143.50"></text></g><g><title>privacy_access_levels (2,939,090 samples, 0.12%)</title><rect x="22.5003%" y="165" width="0.1187%" height="15" fill="rgb(214,148,48)"/><text x="22.7503%" y="175.50"></text></g><g><title>privacy_checking_modules (8,267,513 samples, 0.33%)</title><rect x="22.6189%" y="165" width="0.3338%" height="15" fill="rgb(232,36,49)"/><text x="22.8689%" y="175.50"></text></g><g><title>check_mod_privacy (8,257,523 samples, 0.33%)</title><rect x="22.6194%" y="149" width="0.3334%" height="15" fill="rgb(209,103,24)"/><text x="22.8694%" y="159.50"></text></g><g><title>misc_checking_3 (30,167,176 samples, 1.22%)</title><rect x="21.7380%" y="181" width="1.2179%" height="15" fill="rgb(229,88,8)"/><text x="21.9880%" y="191.50"></text></g><g><title>impl_parent (3,940,286 samples, 0.16%)</title><rect x="23.2654%" y="117" width="0.1591%" height="15" fill="rgb(213,181,19)"/><text x="23.5154%" y="127.50"></text></g><g><title>impl_trait_ref (7,917,860 samples, 0.32%)</title><rect x="23.4244%" y="117" width="0.3197%" height="15" fill="rgb(254,191,54)"/><text x="23.6744%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,120,613 samples, 0.25%)</title><rect x="23.4970%" y="101" width="0.2471%" height="15" fill="rgb(241,83,37)"/><text x="23.7470%" y="111.50"></text></g><g><title>coherent_trait (20,637,660 samples, 0.83%)</title><rect x="22.9763%" y="149" width="0.8332%" height="15" fill="rgb(233,36,39)"/><text x="23.2263%" y="159.50"></text></g><g><title>specialization_graph_of (19,927,711 samples, 0.80%)</title><rect x="23.0050%" y="133" width="0.8045%" height="15" fill="rgb(226,3,54)"/><text x="23.2550%" y="143.50"></text></g><g><title>coherence_checking (21,148,505 samples, 0.85%)</title><rect x="22.9749%" y="165" width="0.8538%" height="15" fill="rgb(245,192,40)"/><text x="23.2249%" y="175.50"></text></g><g><title>evaluate_obligation (17,316,776 samples, 0.70%)</title><rect x="32.9501%" y="117" width="0.6991%" height="15" fill="rgb(238,167,29)"/><text x="33.2001%" y="127.50"></text></g><g><title>evaluate_obligation (4,559,935 samples, 0.18%)</title><rect x="35.4926%" y="101" width="0.1841%" height="15" fill="rgb(232,182,51)"/><text x="35.7426%" y="111.50"></text></g><g><title>typeck (44,940,975 samples, 1.81%)</title><rect x="33.9452%" y="117" width="1.8144%" height="15" fill="rgb(231,60,39)"/><text x="34.1952%" y="127.50">t..</text></g><g><title>item_bodies_checking (295,551,572 samples, 11.93%)</title><rect x="23.8376%" y="165" width="11.9322%" height="15" fill="rgb(208,69,12)"/><text x="24.0876%" y="175.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (295,548,422 samples, 11.93%)</title><rect x="23.8377%" y="149" width="11.9320%" height="15" fill="rgb(235,93,37)"/><text x="24.0877%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (294,872,609 samples, 11.90%)</title><rect x="23.8650%" y="133" width="11.9048%" height="15" fill="rgb(213,116,39)"/><text x="24.1150%" y="143.50">typeck</text></g><g><title>mir_built (4,163,463 samples, 0.17%)</title><rect x="36.0311%" y="53" width="0.1681%" height="15" fill="rgb(222,207,29)"/><text x="36.2811%" y="63.50"></text></g><g><title>typeck (3,989,831 samples, 0.16%)</title><rect x="36.0381%" y="37" width="0.1611%" height="15" fill="rgb(206,96,30)"/><text x="36.2881%" y="47.50"></text></g><g><title>mir_const (4,440,855 samples, 0.18%)</title><rect x="36.0257%" y="85" width="0.1793%" height="15" fill="rgb(218,138,4)"/><text x="36.2757%" y="95.50"></text></g><g><title>unsafety_check_result (4,363,435 samples, 0.18%)</title><rect x="36.0288%" y="69" width="0.1762%" height="15" fill="rgb(250,191,14)"/><text x="36.2788%" y="79.50"></text></g><g><title>mir_promoted (4,458,346 samples, 0.18%)</title><rect x="36.0250%" y="101" width="0.1800%" height="15" fill="rgb(239,60,40)"/><text x="36.2750%" y="111.50"></text></g><g><title>type_of (5,353,806 samples, 0.22%)</title><rect x="35.9946%" y="133" width="0.2161%" height="15" fill="rgb(206,27,48)"/><text x="36.2446%" y="143.50"></text></g><g><title>mir_borrowck (5,269,244 samples, 0.21%)</title><rect x="35.9980%" y="117" width="0.2127%" height="15" fill="rgb(225,35,8)"/><text x="36.2480%" y="127.50"></text></g><g><title>item_types_checking (14,092,123 samples, 0.57%)</title><rect x="35.7698%" y="165" width="0.5689%" height="15" fill="rgb(250,213,24)"/><text x="36.0198%" y="175.50"></text></g><g><title>check_mod_item_types (14,078,383 samples, 0.57%)</title><rect x="35.7703%" y="149" width="0.5684%" height="15" fill="rgb(247,123,22)"/><text x="36.0203%" y="159.50"></text></g><g><title>typeck (3,170,153 samples, 0.13%)</title><rect x="36.2107%" y="133" width="0.1280%" height="15" fill="rgb(231,138,38)"/><text x="36.4607%" y="143.50"></text></g><g><title>mir_for_ctfe (2,616,194 samples, 0.11%)</title><rect x="36.4940%" y="85" width="0.1056%" height="15" fill="rgb(231,145,46)"/><text x="36.7440%" y="95.50"></text></g><g><title>eval_to_const_value_raw (5,320,015 samples, 0.21%)</title><rect x="36.4280%" y="133" width="0.2148%" height="15" fill="rgb(251,118,11)"/><text x="36.6780%" y="143.50"></text></g><g><title>eval_to_const_value_raw (5,281,665 samples, 0.21%)</title><rect x="36.4296%" y="117" width="0.2132%" height="15" fill="rgb(217,147,25)"/><text x="36.6796%" y="127.50"></text></g><g><title>eval_to_allocation_raw (5,218,505 samples, 0.21%)</title><rect x="36.4321%" y="101" width="0.2107%" height="15" fill="rgb(247,81,37)"/><text x="36.6821%" y="111.50"></text></g><g><title>generics_of (2,766,265 samples, 0.11%)</title><rect x="36.7137%" y="133" width="0.1117%" height="15" fill="rgb(209,12,38)"/><text x="36.9637%" y="143.50"></text></g><g><title>predicates_of (3,519,764 samples, 0.14%)</title><rect x="36.8522%" y="133" width="0.1421%" height="15" fill="rgb(227,1,9)"/><text x="37.1022%" y="143.50"></text></g><g><title>predicates_defined_on (3,126,578 samples, 0.13%)</title><rect x="36.8681%" y="117" width="0.1262%" height="15" fill="rgb(248,47,43)"/><text x="37.1181%" y="127.50"></text></g><g><title>type_collecting (16,666,339 samples, 0.67%)</title><rect x="36.3392%" y="165" width="0.6729%" height="15" fill="rgb(221,10,30)"/><text x="36.5892%" y="175.50"></text></g><g><title>collect_mod_item_types (16,645,139 samples, 0.67%)</title><rect x="36.3400%" y="149" width="0.6720%" height="15" fill="rgb(210,229,1)"/><text x="36.5900%" y="159.50"></text></g><g><title>region_scope_tree (3,577,716 samples, 0.14%)</title><rect x="37.7167%" y="133" width="0.1444%" height="15" fill="rgb(222,148,37)"/><text x="37.9667%" y="143.50"></text></g><g><title>check_impl_item_well_formed (19,722,801 samples, 0.80%)</title><rect x="37.0686%" y="149" width="0.7963%" height="15" fill="rgb(234,67,33)"/><text x="37.3186%" y="159.50"></text></g><g><title>check_item_well_formed (10,956,255 samples, 0.44%)</title><rect x="37.8648%" y="149" width="0.4423%" height="15" fill="rgb(247,98,35)"/><text x="38.1148%" y="159.50"></text></g><g><title>analysis (657,468,228 samples, 26.54%)</title><rect x="11.7803%" y="197" width="26.5437%" height="15" fill="rgb(247,138,52)"/><text x="12.0303%" y="207.50">analysis</text></g><g><title>type_check_crate (380,655,727 samples, 15.37%)</title><rect x="22.9559%" y="181" width="15.3680%" height="15" fill="rgb(213,79,30)"/><text x="23.2059%" y="191.50">type_check_crate</text></g><g><title>wf_checking (32,441,059 samples, 1.31%)</title><rect x="37.0142%" y="165" width="1.3097%" height="15" fill="rgb(246,177,23)"/><text x="37.2642%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (4,144,790 samples, 0.17%)</title><rect x="47.5206%" y="165" width="0.1673%" height="15" fill="rgb(230,62,27)"/><text x="47.7706%" y="175.50"></text></g><g><title>const_caller_location (5,331,106 samples, 0.22%)</title><rect x="47.6879%" y="165" width="0.2152%" height="15" fill="rgb(216,154,8)"/><text x="47.9379%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,893,902 samples, 0.12%)</title><rect x="48.3625%" y="149" width="0.1168%" height="15" fill="rgb(244,35,45)"/><text x="48.6125%" y="159.50"></text></g><g><title>predicates_of (2,665,377 samples, 0.11%)</title><rect x="48.7975%" y="133" width="0.1076%" height="15" fill="rgb(251,115,12)"/><text x="49.0475%" y="143.50"></text></g><g><title>param_env (8,038,629 samples, 0.32%)</title><rect x="48.5808%" y="149" width="0.3245%" height="15" fill="rgb(240,54,50)"/><text x="48.8308%" y="159.50"></text></g><g><title>fn_abi_of_instance (27,324,616 samples, 1.10%)</title><rect x="47.9068%" y="165" width="1.1032%" height="15" fill="rgb(233,84,52)"/><text x="48.1568%" y="175.50"></text></g><g><title>layout_of (4,631,876 samples, 0.19%)</title><rect x="49.0521%" y="165" width="0.1870%" height="15" fill="rgb(207,117,47)"/><text x="49.3021%" y="175.50"></text></g><g><title>symbol_name (3,546,276 samples, 0.14%)</title><rect x="49.2399%" y="165" width="0.1432%" height="15" fill="rgb(249,43,39)"/><text x="49.4899%" y="175.50"></text></g><g><title>codegen_module (271,815,880 samples, 10.97%)</title><rect x="38.4538%" y="181" width="10.9739%" height="15" fill="rgb(209,38,44)"/><text x="38.7038%" y="191.50">codegen_module</text></g><g><title>codegen_crate (275,135,395 samples, 11.11%)</title><rect x="38.3244%" y="197" width="11.1079%" height="15" fill="rgb(236,212,23)"/><text x="38.5744%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (876,823,477 samples, 35.40%)</title><rect x="49.4406%" y="181" width="35.3996%" height="15" fill="rgb(242,79,21)"/><text x="49.6906%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (819,366,054 samples, 33.08%)</title><rect x="51.7603%" y="165" width="33.0799%" height="15" fill="rgb(211,96,35)"/><text x="52.0103%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (917,385,598 samples, 37.04%)</title><rect x="49.4323%" y="197" width="37.0372%" height="15" fill="rgb(253,215,40)"/><text x="49.6823%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (40,354,890 samples, 1.63%)</title><rect x="84.8402%" y="181" width="1.6292%" height="15" fill="rgb(211,81,21)"/><text x="85.0902%" y="191.50"></text></g><g><title>macro_expand_crate (78,342,846 samples, 3.16%)</title><rect x="86.5335%" y="181" width="3.1629%" height="15" fill="rgb(208,190,38)"/><text x="86.7835%" y="191.50">mac..</text></g><g><title>expand_crate (78,321,545 samples, 3.16%)</title><rect x="86.5344%" y="165" width="3.1620%" height="15" fill="rgb(235,213,38)"/><text x="86.7844%" y="175.50">exp..</text></g><g><title>late_resolve_crate (12,031,682 samples, 0.49%)</title><rect x="89.7334%" y="165" width="0.4857%" height="15" fill="rgb(237,122,38)"/><text x="89.9834%" y="175.50"></text></g><g><title>configure_and_expand (94,201,317 samples, 3.80%)</title><rect x="86.4694%" y="197" width="3.8031%" height="15" fill="rgb(244,218,35)"/><text x="86.7194%" y="207.50">conf..</text></g><g><title>resolve_crate (14,188,504 samples, 0.57%)</title><rect x="89.6998%" y="181" width="0.5728%" height="15" fill="rgb(240,68,47)"/><text x="89.9498%" y="191.50"></text></g><g><title>early_lint_checks (3,601,847 samples, 0.15%)</title><rect x="90.3422%" y="197" width="0.1454%" height="15" fill="rgb(210,16,53)"/><text x="90.5922%" y="207.50"></text></g><g><title>free_global_ctxt (34,898,725 samples, 1.41%)</title><rect x="90.4876%" y="197" width="1.4089%" height="15" fill="rgb(235,124,12)"/><text x="90.7376%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,943,002 samples, 0.16%)</title><rect x="93.6535%" y="101" width="0.1592%" height="15" fill="rgb(224,169,11)"/><text x="93.9035%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (22,579,946 samples, 0.91%)</title><rect x="93.8127%" y="101" width="0.9116%" height="15" fill="rgb(250,166,2)"/><text x="94.0627%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,494,683 samples, 0.10%)</title><rect x="94.7528%" y="85" width="0.1007%" height="15" fill="rgb(242,216,29)"/><text x="95.0028%" y="95.50"></text></g><g><title>optimized_mir (49,404,324 samples, 1.99%)</title><rect x="92.8598%" y="117" width="1.9946%" height="15" fill="rgb(230,116,27)"/><text x="93.1098%" y="127.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,752,885 samples, 0.11%)</title><rect x="94.7433%" y="101" width="0.1111%" height="15" fill="rgb(228,99,48)"/><text x="94.9933%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (12,120,110 samples, 0.49%)</title><rect x="94.9890%" y="101" width="0.4893%" height="15" fill="rgb(253,11,6)"/><text x="95.2390%" y="111.50"></text></g><g><title>resolve_instance (19,392,731 samples, 0.78%)</title><rect x="94.8544%" y="117" width="0.7829%" height="15" fill="rgb(247,143,39)"/><text x="95.1044%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (89,387,518 samples, 3.61%)</title><rect x="92.3296%" y="133" width="3.6088%" height="15" fill="rgb(236,97,10)"/><text x="92.5796%" y="143.50">mono..</text></g><g><title>vtable_entries (2,482,576 samples, 0.10%)</title><rect x="95.8382%" y="117" width="0.1002%" height="15" fill="rgb(233,208,19)"/><text x="96.0882%" y="127.50"></text></g><g><title>monomorphization_collector (89,697,431 samples, 3.62%)</title><rect x="92.3295%" y="149" width="3.6213%" height="15" fill="rgb(216,164,2)"/><text x="92.5795%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (5,610,256 samples, 0.23%)</title><rect x="95.9510%" y="133" width="0.2265%" height="15" fill="rgb(220,129,5)"/><text x="96.2010%" y="143.50"></text></g><g><title>symbol_name (5,005,928 samples, 0.20%)</title><rect x="95.9754%" y="117" width="0.2021%" height="15" fill="rgb(242,17,10)"/><text x="96.2254%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (98,085,586 samples, 3.96%)</title><rect x="92.3272%" y="165" width="3.9600%" height="15" fill="rgb(242,107,0)"/><text x="92.5772%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (8,332,644 samples, 0.34%)</title><rect x="95.9508%" y="149" width="0.3364%" height="15" fill="rgb(251,28,31)"/><text x="96.2008%" y="159.50"></text></g><g><title>cgu_partitioning (2,717,887 samples, 0.11%)</title><rect x="96.1775%" y="133" width="0.1097%" height="15" fill="rgb(233,223,10)"/><text x="96.4275%" y="143.50"></text></g><g><title>exported_symbols (99,160,007 samples, 4.00%)</title><rect x="92.3170%" y="181" width="4.0033%" height="15" fill="rgb(215,21,27)"/><text x="92.5670%" y="191.50">expo..</text></g><g><title>layout_of (2,781,987 samples, 0.11%)</title><rect x="96.9857%" y="165" width="0.1123%" height="15" fill="rgb(232,23,21)"/><text x="97.2357%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (20,550,238 samples, 0.83%)</title><rect x="97.0980%" y="165" width="0.8297%" height="15" fill="rgb(244,5,23)"/><text x="97.3480%" y="175.50"></text></g><g><title>optimized_mir (40,236,648 samples, 1.62%)</title><rect x="96.3440%" y="181" width="1.6245%" height="15" fill="rgb(226,81,46)"/><text x="96.5940%" y="191.50"></text></g><g><title>generate_crate_metadata (151,148,246 samples, 6.10%)</title><rect x="91.8966%" y="197" width="6.1022%" height="15" fill="rgb(247,70,30)"/><text x="92.1466%" y="207.50">generate..</text></g><g><title>hir_lowering (24,844,672 samples, 1.00%)</title><rect x="97.9988%" y="197" width="1.0030%" height="15" fill="rgb(212,68,19)"/><text x="98.2488%" y="207.50"></text></g><g><title>link_crate (6,761,878 samples, 0.27%)</title><rect x="99.0032%" y="181" width="0.2730%" height="15" fill="rgb(240,187,13)"/><text x="99.2532%" y="191.50"></text></g><g><title>link_binary (6,632,277 samples, 0.27%)</title><rect x="99.0085%" y="165" width="0.2678%" height="15" fill="rgb(223,113,26)"/><text x="99.2585%" y="175.50"></text></g><g><title>link_rlib (5,429,484 samples, 0.22%)</title><rect x="99.0570%" y="149" width="0.2192%" height="15" fill="rgb(206,192,2)"/><text x="99.3070%" y="159.50"></text></g><g><title>link (6,806,919 samples, 0.27%)</title><rect x="99.0018%" y="197" width="0.2748%" height="15" fill="rgb(241,108,4)"/><text x="99.2518%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (16,144,064 samples, 0.65%)</title><rect x="99.3079%" y="197" width="0.6518%" height="15" fill="rgb(247,173,49)"/><text x="99.5579%" y="207.50"></text></g><g><title>all (2,476,932,000 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,476,932,000 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>