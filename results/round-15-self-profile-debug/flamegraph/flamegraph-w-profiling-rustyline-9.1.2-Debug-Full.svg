<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (513,470,306 samples, 12.76%)</title><rect x="0.0697%" y="229" width="12.7607%" height="15" fill="rgb(227,0,7)"/><text x="0.3197%" y="239.50">LLVM_passes</text></g><g><title>is_copy_raw (6,614,317 samples, 0.16%)</title><rect x="19.4047%" y="101" width="0.1644%" height="15" fill="rgb(217,0,24)"/><text x="19.6547%" y="111.50"></text></g><g><title>evaluate_obligation (5,447,366 samples, 0.14%)</title><rect x="19.4337%" y="85" width="0.1354%" height="15" fill="rgb(221,193,54)"/><text x="19.6837%" y="95.50"></text></g><g><title>needs_drop_raw (9,641,682 samples, 0.24%)</title><rect x="19.3301%" y="117" width="0.2396%" height="15" fill="rgb(248,212,6)"/><text x="19.5801%" y="127.50"></text></g><g><title>resolve_instance (5,909,029 samples, 0.15%)</title><rect x="19.5945%" y="117" width="0.1469%" height="15" fill="rgb(208,68,35)"/><text x="19.8445%" y="127.50"></text></g><g><title>thir_body (18,018,617 samples, 0.45%)</title><rect x="19.7491%" y="117" width="0.4478%" height="15" fill="rgb(232,128,0)"/><text x="19.9991%" y="127.50"></text></g><g><title>mir_const (105,020,248 samples, 2.61%)</title><rect x="17.5924%" y="165" width="2.6100%" height="15" fill="rgb(207,160,47)"/><text x="17.8424%" y="175.50">mi..</text></g><g><title>unsafety_check_result (92,089,207 samples, 2.29%)</title><rect x="17.9137%" y="149" width="2.2886%" height="15" fill="rgb(228,23,34)"/><text x="18.1637%" y="159.50">u..</text></g><g><title>mir_built (82,762,020 samples, 2.06%)</title><rect x="18.1455%" y="133" width="2.0568%" height="15" fill="rgb(218,30,26)"/><text x="18.3955%" y="143.50">m..</text></g><g><title>mir_promoted (119,483,869 samples, 2.97%)</title><rect x="17.3090%" y="181" width="2.9694%" height="15" fill="rgb(220,122,19)"/><text x="17.5590%" y="191.50">mir..</text></g><g><title>type_op_normalize_fn_sig (5,656,285 samples, 0.14%)</title><rect x="20.3339%" y="181" width="0.1406%" height="15" fill="rgb(250,228,42)"/><text x="20.5839%" y="191.50"></text></g><g><title>type_op_prove_predicate (18,444,821 samples, 0.46%)</title><rect x="20.5183%" y="181" width="0.4584%" height="15" fill="rgb(240,193,28)"/><text x="20.7683%" y="191.50"></text></g><g><title>MIR_borrow_checking (324,668,735 samples, 8.07%)</title><rect x="12.9088%" y="213" width="8.0686%" height="15" fill="rgb(216,20,37)"/><text x="13.1588%" y="223.50">MIR_borrow_..</text></g><g><title>mir_borrowck (323,242,018 samples, 8.03%)</title><rect x="12.9443%" y="197" width="8.0332%" height="15" fill="rgb(206,188,39)"/><text x="13.1943%" y="207.50">mir_borrowck</text></g><g><title>check_mod_attrs (4,980,101 samples, 0.12%)</title><rect x="21.0943%" y="197" width="0.1238%" height="15" fill="rgb(217,207,13)"/><text x="21.3443%" y="207.50"></text></g><g><title>misc_checking_1 (10,790,249 samples, 0.27%)</title><rect x="21.0930%" y="213" width="0.2682%" height="15" fill="rgb(231,73,38)"/><text x="21.3430%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (6,913,290 samples, 0.17%)</title><rect x="21.3612%" y="197" width="0.1718%" height="15" fill="rgb(225,20,46)"/><text x="21.6112%" y="207.50"></text></g><g><title>check_mod_liveness (5,605,446 samples, 0.14%)</title><rect x="21.3937%" y="181" width="0.1393%" height="15" fill="rgb(210,31,41)"/><text x="21.6437%" y="191.50"></text></g><g><title>misc_checking_2 (24,000,204 samples, 0.60%)</title><rect x="21.3611%" y="213" width="0.5965%" height="15" fill="rgb(221,200,47)"/><text x="21.6111%" y="223.50"></text></g><g><title>match_checking (17,084,434 samples, 0.42%)</title><rect x="21.5330%" y="197" width="0.4246%" height="15" fill="rgb(226,26,5)"/><text x="21.7830%" y="207.50"></text></g><g><title>check_match (16,656,237 samples, 0.41%)</title><rect x="21.5437%" y="181" width="0.4139%" height="15" fill="rgb(249,33,26)"/><text x="21.7937%" y="191.50"></text></g><g><title>death_checking (5,765,649 samples, 0.14%)</title><rect x="22.0256%" y="197" width="0.1433%" height="15" fill="rgb(235,183,28)"/><text x="22.2756%" y="207.50"></text></g><g><title>crate_lints (12,913,961 samples, 0.32%)</title><rect x="22.1689%" y="181" width="0.3209%" height="15" fill="rgb(221,5,38)"/><text x="22.4189%" y="191.50"></text></g><g><title>lint_checking (21,770,171 samples, 0.54%)</title><rect x="22.1689%" y="197" width="0.5410%" height="15" fill="rgb(247,18,42)"/><text x="22.4189%" y="207.50"></text></g><g><title>module_lints (8,853,820 samples, 0.22%)</title><rect x="22.4899%" y="181" width="0.2200%" height="15" fill="rgb(241,131,45)"/><text x="22.7399%" y="191.50"></text></g><g><title>lint_mod (8,824,880 samples, 0.22%)</title><rect x="22.4906%" y="165" width="0.2193%" height="15" fill="rgb(249,31,29)"/><text x="22.7406%" y="175.50"></text></g><g><title>privacy_access_levels (4,225,623 samples, 0.11%)</title><rect x="22.7099%" y="197" width="0.1050%" height="15" fill="rgb(225,111,53)"/><text x="22.9599%" y="207.50"></text></g><g><title>privacy_checking_modules (12,683,579 samples, 0.32%)</title><rect x="22.8149%" y="197" width="0.3152%" height="15" fill="rgb(238,160,17)"/><text x="23.0649%" y="207.50"></text></g><g><title>check_mod_privacy (12,664,549 samples, 0.31%)</title><rect x="22.8154%" y="181" width="0.3147%" height="15" fill="rgb(214,148,48)"/><text x="23.0654%" y="191.50"></text></g><g><title>misc_checking_3 (47,296,991 samples, 1.18%)</title><rect x="21.9576%" y="213" width="1.1754%" height="15" fill="rgb(232,36,49)"/><text x="22.2076%" y="223.50"></text></g><g><title>impl_parent (6,904,154 samples, 0.17%)</title><rect x="23.4564%" y="149" width="0.1716%" height="15" fill="rgb(209,103,24)"/><text x="23.7064%" y="159.50"></text></g><g><title>impl_trait_ref (12,323,807 samples, 0.31%)</title><rect x="23.6280%" y="149" width="0.3063%" height="15" fill="rgb(229,88,8)"/><text x="23.8780%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (9,181,123 samples, 0.23%)</title><rect x="23.7061%" y="133" width="0.2282%" height="15" fill="rgb(213,181,19)"/><text x="23.9561%" y="143.50"></text></g><g><title>coherent_trait (34,933,986 samples, 0.87%)</title><rect x="23.1501%" y="181" width="0.8682%" height="15" fill="rgb(254,191,54)"/><text x="23.4001%" y="191.50"></text></g><g><title>specialization_graph_of (34,160,849 samples, 0.85%)</title><rect x="23.1693%" y="165" width="0.8490%" height="15" fill="rgb(241,83,37)"/><text x="23.4193%" y="175.50"></text></g><g><title>coherence_checking (35,500,862 samples, 0.88%)</title><rect x="23.1489%" y="197" width="0.8823%" height="15" fill="rgb(233,36,39)"/><text x="23.3989%" y="207.50"></text></g><g><title>evaluate_obligation (25,260,144 samples, 0.63%)</title><rect x="31.1386%" y="149" width="0.6278%" height="15" fill="rgb(226,3,54)"/><text x="31.3886%" y="159.50"></text></g><g><title>method_autoderef_steps (4,107,499 samples, 0.10%)</title><rect x="31.8444%" y="149" width="0.1021%" height="15" fill="rgb(245,192,40)"/><text x="32.0944%" y="159.50"></text></g><g><title>typeck (48,244,013 samples, 1.20%)</title><rect x="32.0185%" y="149" width="1.1990%" height="15" fill="rgb(238,167,29)"/><text x="32.2685%" y="159.50"></text></g><g><title>item_bodies_checking (369,741,293 samples, 9.19%)</title><rect x="24.0383%" y="197" width="9.1888%" height="15" fill="rgb(232,182,51)"/><text x="24.2883%" y="207.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (369,738,453 samples, 9.19%)</title><rect x="24.0383%" y="181" width="9.1887%" height="15" fill="rgb(231,60,39)"/><text x="24.2883%" y="191.50">typeck_item_b..</text></g><g><title>typeck (368,602,963 samples, 9.16%)</title><rect x="24.0666%" y="165" width="9.1605%" height="15" fill="rgb(208,69,12)"/><text x="24.3166%" y="175.50">typeck</text></g><g><title>item_types_checking (11,651,939 samples, 0.29%)</title><rect x="33.2270%" y="197" width="0.2896%" height="15" fill="rgb(235,93,37)"/><text x="33.4770%" y="207.50"></text></g><g><title>check_mod_item_types (11,631,509 samples, 0.29%)</title><rect x="33.2276%" y="181" width="0.2891%" height="15" fill="rgb(213,116,39)"/><text x="33.4776%" y="191.50"></text></g><g><title>generics_of (7,193,470 samples, 0.18%)</title><rect x="33.6493%" y="165" width="0.1788%" height="15" fill="rgb(222,207,29)"/><text x="33.8993%" y="175.50"></text></g><g><title>type_collecting (17,880,621 samples, 0.44%)</title><rect x="33.5172%" y="197" width="0.4444%" height="15" fill="rgb(206,96,30)"/><text x="33.7672%" y="207.50"></text></g><g><title>collect_mod_item_types (17,856,221 samples, 0.44%)</title><rect x="33.5178%" y="181" width="0.4438%" height="15" fill="rgb(218,138,4)"/><text x="33.7678%" y="191.50"></text></g><g><title>region_scope_tree (4,732,348 samples, 0.12%)</title><rect x="34.5897%" y="165" width="0.1176%" height="15" fill="rgb(250,191,14)"/><text x="34.8397%" y="175.50"></text></g><g><title>check_impl_item_well_formed (27,836,444 samples, 0.69%)</title><rect x="34.0181%" y="181" width="0.6918%" height="15" fill="rgb(239,60,40)"/><text x="34.2681%" y="191.50"></text></g><g><title>check_item_well_formed (15,571,110 samples, 0.39%)</title><rect x="34.7099%" y="181" width="0.3870%" height="15" fill="rgb(206,27,48)"/><text x="34.9599%" y="191.50"></text></g><g><title>analysis (900,220,522 samples, 22.37%)</title><rect x="12.8304%" y="229" width="22.3722%" height="15" fill="rgb(225,35,8)"/><text x="13.0804%" y="239.50">analysis</text></g><g><title>type_check_crate (485,658,313 samples, 12.07%)</title><rect x="23.1330%" y="213" width="12.0695%" height="15" fill="rgb(250,213,24)"/><text x="23.3830%" y="223.50">type_check_crate</text></g><g><title>wf_checking (49,873,387 samples, 1.24%)</title><rect x="33.9631%" y="197" width="1.2394%" height="15" fill="rgb(247,123,22)"/><text x="34.2131%" y="207.50"></text></g><g><title>check_trait_item_well_formed (4,250,791 samples, 0.11%)</title><rect x="35.0969%" y="181" width="0.1056%" height="15" fill="rgb(231,138,38)"/><text x="35.3469%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (7,160,859 samples, 0.18%)</title><rect x="45.2777%" y="197" width="0.1780%" height="15" fill="rgb(231,145,46)"/><text x="45.5277%" y="207.50"></text></g><g><title>const_caller_location (8,885,270 samples, 0.22%)</title><rect x="45.4557%" y="197" width="0.2208%" height="15" fill="rgb(251,118,11)"/><text x="45.7057%" y="207.50"></text></g><g><title>layout_of (4,726,183 samples, 0.12%)</title><rect x="46.2645%" y="181" width="0.1175%" height="15" fill="rgb(217,147,25)"/><text x="46.5145%" y="191.50"></text></g><g><title>predicates_of (5,750,151 samples, 0.14%)</title><rect x="46.6580%" y="165" width="0.1429%" height="15" fill="rgb(247,81,37)"/><text x="46.9080%" y="175.50"></text></g><g><title>predicates_defined_on (4,259,093 samples, 0.11%)</title><rect x="46.6951%" y="149" width="0.1058%" height="15" fill="rgb(209,12,38)"/><text x="46.9451%" y="159.50"></text></g><g><title>param_env (16,877,226 samples, 0.42%)</title><rect x="46.3820%" y="181" width="0.4194%" height="15" fill="rgb(227,1,9)"/><text x="46.6320%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,203,844 samples, 0.10%)</title><rect x="46.8014%" y="181" width="0.1045%" height="15" fill="rgb(248,47,43)"/><text x="47.0514%" y="191.50"></text></g><g><title>fn_abi_of_instance (49,541,588 samples, 1.23%)</title><rect x="45.6803%" y="197" width="1.2312%" height="15" fill="rgb(221,10,30)"/><text x="45.9303%" y="207.50"></text></g><g><title>layout_of (7,076,790 samples, 0.18%)</title><rect x="46.9689%" y="197" width="0.1759%" height="15" fill="rgb(210,229,1)"/><text x="47.2189%" y="207.50"></text></g><g><title>symbol_name (4,974,625 samples, 0.12%)</title><rect x="47.1462%" y="197" width="0.1236%" height="15" fill="rgb(222,148,37)"/><text x="47.3962%" y="207.50"></text></g><g><title>codegen_module (482,704,693 samples, 12.00%)</title><rect x="35.3014%" y="213" width="11.9961%" height="15" fill="rgb(234,67,33)"/><text x="35.5514%" y="223.50">codegen_module</text></g><g><title>codegen_crate (486,813,534 samples, 12.10%)</title><rect x="35.2027%" y="229" width="12.0982%" height="15" fill="rgb(247,98,35)"/><text x="35.4527%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,531,801,762 samples, 38.07%)</title><rect x="47.3068%" y="213" width="38.0682%" height="15" fill="rgb(247,138,52)"/><text x="47.5568%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,416,698,339 samples, 35.21%)</title><rect x="50.1673%" y="197" width="35.2076%" height="15" fill="rgb(213,79,30)"/><text x="50.4173%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,614,780,148 samples, 40.13%)</title><rect x="47.3009%" y="229" width="40.1303%" height="15" fill="rgb(246,177,23)"/><text x="47.5509%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (82,743,072 samples, 2.06%)</title><rect x="85.3749%" y="213" width="2.0563%" height="15" fill="rgb(230,62,27)"/><text x="85.6249%" y="223.50">L..</text></g><g><title>macro_expand_crate (79,940,163 samples, 1.99%)</title><rect x="87.4974%" y="213" width="1.9867%" height="15" fill="rgb(216,154,8)"/><text x="87.7474%" y="223.50">m..</text></g><g><title>expand_crate (79,930,423 samples, 1.99%)</title><rect x="87.4976%" y="197" width="1.9864%" height="15" fill="rgb(244,35,45)"/><text x="87.7476%" y="207.50">e..</text></g><g><title>late_resolve_crate (20,787,992 samples, 0.52%)</title><rect x="89.5216%" y="197" width="0.5166%" height="15" fill="rgb(251,115,12)"/><text x="89.7716%" y="207.50"></text></g><g><title>configure_and_expand (107,213,571 samples, 2.66%)</title><rect x="87.4312%" y="229" width="2.6645%" height="15" fill="rgb(240,54,50)"/><text x="87.6812%" y="239.50">co..</text></g><g><title>resolve_crate (24,386,288 samples, 0.61%)</title><rect x="89.4897%" y="213" width="0.6060%" height="15" fill="rgb(233,84,52)"/><text x="89.7397%" y="223.50"></text></g><g><title>early_lint_checks (5,204,354 samples, 0.13%)</title><rect x="90.1672%" y="229" width="0.1293%" height="15" fill="rgb(207,117,47)"/><text x="90.4172%" y="239.50"></text></g><g><title>free_global_ctxt (47,703,155 samples, 1.19%)</title><rect x="90.2965%" y="229" width="1.1855%" height="15" fill="rgb(249,43,39)"/><text x="90.5465%" y="239.50"></text></g><g><title>codegen_fn_attrs (6,120,419 samples, 0.15%)</title><rect x="92.3076%" y="149" width="0.1521%" height="15" fill="rgb(209,38,44)"/><text x="92.5576%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (12,046,801 samples, 0.30%)</title><rect x="93.3299%" y="133" width="0.2994%" height="15" fill="rgb(236,212,23)"/><text x="93.5799%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (30,775,629 samples, 0.76%)</title><rect x="93.6293%" y="133" width="0.7648%" height="15" fill="rgb(242,79,21)"/><text x="93.8793%" y="143.50"></text></g><g><title>eval_to_const_value_raw (5,017,973 samples, 0.12%)</title><rect x="94.4148%" y="117" width="0.1247%" height="15" fill="rgb(211,96,35)"/><text x="94.6648%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,908,013 samples, 0.12%)</title><rect x="94.4176%" y="101" width="0.1220%" height="15" fill="rgb(253,215,40)"/><text x="94.6676%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,701,537 samples, 0.12%)</title><rect x="94.4227%" y="85" width="0.1168%" height="15" fill="rgb(211,81,21)"/><text x="94.6727%" y="95.50"></text></g><g><title>optimized_mir (78,637,890 samples, 1.95%)</title><rect x="92.5869%" y="149" width="1.9543%" height="15" fill="rgb(208,190,38)"/><text x="92.8369%" y="159.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (5,585,857 samples, 0.14%)</title><rect x="94.4024%" y="133" width="0.1388%" height="15" fill="rgb(235,213,38)"/><text x="94.6524%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (17,591,182 samples, 0.44%)</title><rect x="94.7131%" y="133" width="0.4372%" height="15" fill="rgb(237,122,38)"/><text x="94.9631%" y="143.50"></text></g><g><title>resolve_instance (33,761,360 samples, 0.84%)</title><rect x="94.5412%" y="149" width="0.8390%" height="15" fill="rgb(244,218,35)"/><text x="94.7912%" y="159.50"></text></g><g><title>eval_to_const_value_raw (4,867,503 samples, 0.12%)</title><rect x="95.5848%" y="69" width="0.1210%" height="15" fill="rgb(240,68,47)"/><text x="95.8348%" y="79.50"></text></g><g><title>eval_to_const_value_raw (4,853,403 samples, 0.12%)</title><rect x="95.5852%" y="53" width="0.1206%" height="15" fill="rgb(210,16,53)"/><text x="95.8352%" y="63.50"></text></g><g><title>eval_to_allocation_raw (4,828,873 samples, 0.12%)</title><rect x="95.5858%" y="37" width="0.1200%" height="15" fill="rgb(235,124,12)"/><text x="95.8358%" y="47.50"></text></g><g><title>eval_to_const_value_raw (9,707,597 samples, 0.24%)</title><rect x="95.4657%" y="133" width="0.2413%" height="15" fill="rgb(224,169,11)"/><text x="95.7157%" y="143.50"></text></g><g><title>eval_to_const_value_raw (9,570,147 samples, 0.24%)</title><rect x="95.4692%" y="117" width="0.2378%" height="15" fill="rgb(250,166,2)"/><text x="95.7192%" y="127.50"></text></g><g><title>eval_to_allocation_raw (9,357,202 samples, 0.23%)</title><rect x="95.4744%" y="101" width="0.2325%" height="15" fill="rgb(242,216,29)"/><text x="95.7244%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,981,826 samples, 0.12%)</title><rect x="95.5832%" y="85" width="0.1238%" height="15" fill="rgb(230,116,27)"/><text x="95.8332%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (11,114,932 samples, 0.28%)</title><rect x="95.4395%" y="149" width="0.2762%" height="15" fill="rgb(228,99,48)"/><text x="95.6895%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (160,460,292 samples, 3.99%)</title><rect x="91.8597%" y="165" width="3.9877%" height="15" fill="rgb(253,11,6)"/><text x="92.1097%" y="175.50">mono..</text></g><g><title>monomorphization_collector (160,946,287 samples, 4.00%)</title><rect x="91.8596%" y="181" width="3.9998%" height="15" fill="rgb(247,143,39)"/><text x="92.1096%" y="191.50">mono..</text></g><g><title>assert_symbols_are_distinct (12,723,059 samples, 0.32%)</title><rect x="95.8595%" y="165" width="0.3162%" height="15" fill="rgb(236,97,10)"/><text x="96.1095%" y="175.50"></text></g><g><title>symbol_name (11,354,607 samples, 0.28%)</title><rect x="95.8935%" y="149" width="0.2822%" height="15" fill="rgb(233,208,19)"/><text x="96.1435%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (179,566,757 samples, 4.46%)</title><rect x="91.8573%" y="197" width="4.4626%" height="15" fill="rgb(216,164,2)"/><text x="92.1073%" y="207.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (18,528,149 samples, 0.46%)</title><rect x="95.8594%" y="181" width="0.4605%" height="15" fill="rgb(220,129,5)"/><text x="96.1094%" y="191.50"></text></g><g><title>cgu_partitioning (5,799,860 samples, 0.14%)</title><rect x="96.1757%" y="165" width="0.1441%" height="15" fill="rgb(242,17,10)"/><text x="96.4257%" y="175.50"></text></g><g><title>exported_symbols (181,363,116 samples, 4.51%)</title><rect x="91.8442%" y="213" width="4.5072%" height="15" fill="rgb(242,107,0)"/><text x="92.0942%" y="223.50">expor..</text></g><g><title>layout_of (6,157,079 samples, 0.15%)</title><rect x="96.9573%" y="197" width="0.1530%" height="15" fill="rgb(251,28,31)"/><text x="97.2073%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (34,194,986 samples, 0.85%)</title><rect x="97.1103%" y="197" width="0.8498%" height="15" fill="rgb(233,223,10)"/><text x="97.3603%" y="207.50"></text></g><g><title>optimized_mir (64,347,312 samples, 1.60%)</title><rect x="96.3794%" y="213" width="1.5992%" height="15" fill="rgb(215,21,27)"/><text x="96.6294%" y="223.50"></text></g><g><title>generate_crate_metadata (262,902,336 samples, 6.53%)</title><rect x="91.4820%" y="229" width="6.5336%" height="15" fill="rgb(232,23,21)"/><text x="91.7320%" y="239.50">generate_..</text></g><g><title>hir_lowering (35,381,090 samples, 0.88%)</title><rect x="98.0156%" y="229" width="0.8793%" height="15" fill="rgb(244,5,23)"/><text x="98.2656%" y="239.50"></text></g><g><title>finish_ongoing_codegen (21,113,346 samples, 0.52%)</title><rect x="98.8955%" y="213" width="0.5247%" height="15" fill="rgb(226,81,46)"/><text x="99.1455%" y="223.50"></text></g><g><title>link_crate (9,623,998 samples, 0.24%)</title><rect x="99.4202%" y="213" width="0.2392%" height="15" fill="rgb(247,70,30)"/><text x="99.6702%" y="223.50"></text></g><g><title>link_binary (9,407,246 samples, 0.23%)</title><rect x="99.4256%" y="197" width="0.2338%" height="15" fill="rgb(212,68,19)"/><text x="99.6756%" y="207.50"></text></g><g><title>link_rlib (7,911,080 samples, 0.20%)</title><rect x="99.4628%" y="181" width="0.1966%" height="15" fill="rgb(240,187,13)"/><text x="99.7128%" y="191.50"></text></g><g><title>link (30,773,594 samples, 0.76%)</title><rect x="98.8949%" y="229" width="0.7648%" height="15" fill="rgb(223,113,26)"/><text x="99.1449%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (8,419,325 samples, 0.21%)</title><rect x="99.7588%" y="229" width="0.2092%" height="15" fill="rgb(206,192,2)"/><text x="100.0088%" y="239.50"></text></g><g><title>all (4,023,839,347 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (4,023,839,347 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>