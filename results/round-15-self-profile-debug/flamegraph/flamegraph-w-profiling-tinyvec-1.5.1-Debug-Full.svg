<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,608,261 samples, 0.68%)</title><rect x="0.0766%" y="181" width="0.6764%" height="15" fill="rgb(227,0,7)"/><text x="0.3266%" y="191.50"></text></g><g><title>is_copy_raw (3,740,432 samples, 0.38%)</title><rect x="39.3865%" y="53" width="0.3829%" height="15" fill="rgb(217,0,24)"/><text x="39.6365%" y="63.50"></text></g><g><title>evaluate_obligation (3,227,756 samples, 0.33%)</title><rect x="39.4390%" y="37" width="0.3304%" height="15" fill="rgb(221,193,54)"/><text x="39.6890%" y="47.50"></text></g><g><title>needs_drop_raw (4,414,521 samples, 0.45%)</title><rect x="39.3190%" y="69" width="0.4519%" height="15" fill="rgb(248,212,6)"/><text x="39.5690%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,786,025 samples, 0.18%)</title><rect x="39.8547%" y="53" width="0.1828%" height="15" fill="rgb(208,68,35)"/><text x="40.1047%" y="63.50"></text></g><g><title>resolve_instance (2,966,515 samples, 0.30%)</title><rect x="39.7709%" y="69" width="0.3036%" height="15" fill="rgb(232,128,0)"/><text x="40.0209%" y="79.50"></text></g><g><title>thir_body (11,205,809 samples, 1.15%)</title><rect x="40.0866%" y="69" width="1.1470%" height="15" fill="rgb(207,160,47)"/><text x="40.3366%" y="79.50"></text></g><g><title>mir_const (258,738,158 samples, 26.48%)</title><rect x="14.7761%" y="117" width="26.4840%" height="15" fill="rgb(228,23,34)"/><text x="15.0261%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (251,150,152 samples, 25.71%)</title><rect x="15.5528%" y="101" width="25.7073%" height="15" fill="rgb(218,30,26)"/><text x="15.8028%" y="111.50">unsafety_check_result</text></g><g><title>mir_built (246,781,022 samples, 25.26%)</title><rect x="16.0000%" y="85" width="25.2601%" height="15" fill="rgb(220,122,19)"/><text x="16.2500%" y="95.50">mir_built</text></g><g><title>mir_const (1,528,084 samples, 0.16%)</title><rect x="41.3267%" y="101" width="0.1564%" height="15" fill="rgb(250,228,42)"/><text x="41.5767%" y="111.50"></text></g><g><title>unsafety_check_result (1,086,038 samples, 0.11%)</title><rect x="41.3719%" y="85" width="0.1112%" height="15" fill="rgb(240,193,28)"/><text x="41.6219%" y="95.50"></text></g><g><title>mir_const_qualif (2,180,659 samples, 0.22%)</title><rect x="41.2601%" y="117" width="0.2232%" height="15" fill="rgb(216,20,37)"/><text x="41.5101%" y="127.50"></text></g><g><title>mir_promoted (269,759,561 samples, 27.61%)</title><rect x="13.8712%" y="133" width="27.6122%" height="15" fill="rgb(206,188,39)"/><text x="14.1212%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,349,508 samples, 0.14%)</title><rect x="41.4850%" y="133" width="0.1381%" height="15" fill="rgb(217,207,13)"/><text x="41.7350%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,424,671 samples, 0.56%)</title><rect x="41.6232%" y="133" width="0.5553%" height="15" fill="rgb(231,73,38)"/><text x="41.8732%" y="143.50"></text></g><g><title>normalize_projection_ty (3,479,032 samples, 0.36%)</title><rect x="41.8223%" y="117" width="0.3561%" height="15" fill="rgb(225,20,46)"/><text x="42.0723%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,312,624 samples, 0.13%)</title><rect x="42.1784%" y="133" width="0.1344%" height="15" fill="rgb(210,31,41)"/><text x="42.4284%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,068,251 samples, 0.11%)</title><rect x="42.3128%" y="133" width="0.1093%" height="15" fill="rgb(221,200,47)"/><text x="42.5628%" y="143.50"></text></g><g><title>type_op_prove_predicate (15,298,661 samples, 1.57%)</title><rect x="42.4221%" y="133" width="1.5659%" height="15" fill="rgb(226,26,5)"/><text x="42.6721%" y="143.50"></text></g><g><title>MIR_borrow_checking (419,832,779 samples, 42.97%)</title><rect x="1.0157%" y="165" width="42.9734%" height="15" fill="rgb(249,33,26)"/><text x="1.2657%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (419,181,831 samples, 42.91%)</title><rect x="1.0824%" y="149" width="42.9068%" height="15" fill="rgb(235,183,28)"/><text x="1.3324%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,157,563 samples, 0.12%)</title><rect x="43.9891%" y="165" width="0.1185%" height="15" fill="rgb(221,5,38)"/><text x="44.2391%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,240,633 samples, 0.13%)</title><rect x="44.3910%" y="133" width="0.1270%" height="15" fill="rgb(247,18,42)"/><text x="44.6410%" y="143.50"></text></g><g><title>check_mod_attrs (3,003,420 samples, 0.31%)</title><rect x="44.2105%" y="149" width="0.3074%" height="15" fill="rgb(241,131,45)"/><text x="44.4605%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,601,467 samples, 0.16%)</title><rect x="44.6304%" y="149" width="0.1639%" height="15" fill="rgb(249,31,29)"/><text x="44.8804%" y="159.50"></text></g><g><title>misc_checking_1 (5,839,164 samples, 0.60%)</title><rect x="44.2068%" y="165" width="0.5977%" height="15" fill="rgb(225,111,53)"/><text x="44.4568%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,657,909 samples, 0.37%)</title><rect x="44.8048%" y="149" width="0.3744%" height="15" fill="rgb(238,160,17)"/><text x="45.0548%" y="159.50"></text></g><g><title>check_mod_liveness (2,686,538 samples, 0.27%)</title><rect x="44.9042%" y="133" width="0.2750%" height="15" fill="rgb(214,148,48)"/><text x="45.1542%" y="143.50"></text></g><g><title>misc_checking_2 (5,822,652 samples, 0.60%)</title><rect x="44.8045%" y="165" width="0.5960%" height="15" fill="rgb(232,36,49)"/><text x="45.0545%" y="175.50"></text></g><g><title>match_checking (2,161,883 samples, 0.22%)</title><rect x="45.1792%" y="149" width="0.2213%" height="15" fill="rgb(209,103,24)"/><text x="45.4292%" y="159.50"></text></g><g><title>check_match (2,014,013 samples, 0.21%)</title><rect x="45.1943%" y="133" width="0.2062%" height="15" fill="rgb(229,88,8)"/><text x="45.4443%" y="143.50"></text></g><g><title>death_checking (2,187,673 samples, 0.22%)</title><rect x="45.5004%" y="149" width="0.2239%" height="15" fill="rgb(213,181,19)"/><text x="45.7504%" y="159.50"></text></g><g><title>crate_lints (3,961,552 samples, 0.41%)</title><rect x="45.7246%" y="133" width="0.4055%" height="15" fill="rgb(254,191,54)"/><text x="45.9746%" y="143.50"></text></g><g><title>lint_checking (8,663,843 samples, 0.89%)</title><rect x="45.7243%" y="149" width="0.8868%" height="15" fill="rgb(241,83,37)"/><text x="45.9743%" y="159.50"></text></g><g><title>module_lints (4,699,811 samples, 0.48%)</title><rect x="46.1301%" y="133" width="0.4811%" height="15" fill="rgb(233,36,39)"/><text x="46.3801%" y="143.50"></text></g><g><title>lint_mod (4,690,751 samples, 0.48%)</title><rect x="46.1310%" y="117" width="0.4801%" height="15" fill="rgb(226,3,54)"/><text x="46.3810%" y="127.50"></text></g><g><title>privacy_access_levels (1,556,986 samples, 0.16%)</title><rect x="46.6111%" y="149" width="0.1594%" height="15" fill="rgb(245,192,40)"/><text x="46.8611%" y="159.50"></text></g><g><title>privacy_checking_modules (6,952,195 samples, 0.71%)</title><rect x="46.7705%" y="149" width="0.7116%" height="15" fill="rgb(238,167,29)"/><text x="47.0205%" y="159.50"></text></g><g><title>check_mod_privacy (6,944,805 samples, 0.71%)</title><rect x="46.7713%" y="133" width="0.7109%" height="15" fill="rgb(232,182,51)"/><text x="47.0213%" y="143.50"></text></g><g><title>misc_checking_3 (20,382,709 samples, 2.09%)</title><rect x="45.4005%" y="165" width="2.0863%" height="15" fill="rgb(231,60,39)"/><text x="45.6505%" y="175.50">m..</text></g><g><title>impl_parent (1,305,537 samples, 0.13%)</title><rect x="48.0992%" y="101" width="0.1336%" height="15" fill="rgb(208,69,12)"/><text x="48.3492%" y="111.50"></text></g><g><title>impl_trait_ref (2,570,326 samples, 0.26%)</title><rect x="48.2331%" y="101" width="0.2631%" height="15" fill="rgb(235,93,37)"/><text x="48.4831%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,792,630 samples, 0.18%)</title><rect x="48.3127%" y="85" width="0.1835%" height="15" fill="rgb(213,116,39)"/><text x="48.5627%" y="95.50"></text></g><g><title>coherent_trait (10,271,920 samples, 1.05%)</title><rect x="47.5175%" y="133" width="1.0514%" height="15" fill="rgb(222,207,29)"/><text x="47.7675%" y="143.50"></text></g><g><title>specialization_graph_of (9,902,516 samples, 1.01%)</title><rect x="47.5553%" y="117" width="1.0136%" height="15" fill="rgb(206,96,30)"/><text x="47.8053%" y="127.50"></text></g><g><title>coherence_checking (10,503,303 samples, 1.08%)</title><rect x="47.5138%" y="149" width="1.0751%" height="15" fill="rgb(218,138,4)"/><text x="47.7638%" y="159.50"></text></g><g><title>dropck_outlives (1,423,906 samples, 0.15%)</title><rect x="67.6997%" y="101" width="0.1457%" height="15" fill="rgb(250,191,14)"/><text x="67.9497%" y="111.50"></text></g><g><title>evaluate_obligation (7,961,246 samples, 0.81%)</title><rect x="67.8455%" y="101" width="0.8149%" height="15" fill="rgb(239,60,40)"/><text x="68.0955%" y="111.50"></text></g><g><title>method_autoderef_steps (3,152,109 samples, 0.32%)</title><rect x="68.7482%" y="101" width="0.3226%" height="15" fill="rgb(206,27,48)"/><text x="68.9982%" y="111.50"></text></g><g><title>evaluate_obligation (1,395,129 samples, 0.14%)</title><rect x="68.9281%" y="85" width="0.1428%" height="15" fill="rgb(225,35,8)"/><text x="69.1781%" y="95.50"></text></g><g><title>typeck (3,724,440 samples, 0.38%)</title><rect x="69.2347%" y="101" width="0.3812%" height="15" fill="rgb(250,213,24)"/><text x="69.4847%" y="111.50"></text></g><g><title>item_bodies_checking (205,408,777 samples, 21.03%)</title><rect x="48.6074%" y="149" width="21.0253%" height="15" fill="rgb(247,123,22)"/><text x="48.8574%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (205,404,667 samples, 21.02%)</title><rect x="48.6078%" y="133" width="21.0249%" height="15" fill="rgb(231,138,38)"/><text x="48.8578%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (204,973,581 samples, 20.98%)</title><rect x="48.6519%" y="117" width="20.9808%" height="15" fill="rgb(231,145,46)"/><text x="48.9019%" y="127.50">typeck</text></g><g><title>item_types_checking (10,616,744 samples, 1.09%)</title><rect x="69.6327%" y="149" width="1.0867%" height="15" fill="rgb(251,118,11)"/><text x="69.8827%" y="159.50"></text></g><g><title>check_mod_item_types (10,609,724 samples, 1.09%)</title><rect x="69.6334%" y="133" width="1.0860%" height="15" fill="rgb(217,147,25)"/><text x="69.8834%" y="143.50"></text></g><g><title>is_late_bound_map (2,222,037 samples, 0.23%)</title><rect x="70.9804%" y="101" width="0.2274%" height="15" fill="rgb(247,81,37)"/><text x="71.2304%" y="111.50"></text></g><g><title>resolve_lifetimes (2,163,196 samples, 0.22%)</title><rect x="70.9864%" y="85" width="0.2214%" height="15" fill="rgb(209,12,38)"/><text x="71.2364%" y="95.50"></text></g><g><title>lint_levels (1,474,036 samples, 0.15%)</title><rect x="71.0570%" y="69" width="0.1509%" height="15" fill="rgb(227,1,9)"/><text x="71.3070%" y="79.50"></text></g><g><title>generics_of (2,851,849 samples, 0.29%)</title><rect x="70.9336%" y="117" width="0.2919%" height="15" fill="rgb(248,47,43)"/><text x="71.1836%" y="127.50"></text></g><g><title>late_bound_vars_map (1,318,275 samples, 0.13%)</title><rect x="71.4441%" y="69" width="0.1349%" height="15" fill="rgb(221,10,30)"/><text x="71.6941%" y="79.50"></text></g><g><title>resolve_lifetimes (1,262,013 samples, 0.13%)</title><rect x="71.4499%" y="53" width="0.1292%" height="15" fill="rgb(210,229,1)"/><text x="71.6999%" y="63.50"></text></g><g><title>explicit_predicates_of (2,537,037 samples, 0.26%)</title><rect x="71.3461%" y="85" width="0.2597%" height="15" fill="rgb(222,148,37)"/><text x="71.5961%" y="95.50"></text></g><g><title>predicates_of (3,703,708 samples, 0.38%)</title><rect x="71.2672%" y="117" width="0.3791%" height="15" fill="rgb(234,67,33)"/><text x="71.5172%" y="127.50"></text></g><g><title>predicates_defined_on (3,264,434 samples, 0.33%)</title><rect x="71.3121%" y="101" width="0.3341%" height="15" fill="rgb(247,98,35)"/><text x="71.5621%" y="111.50"></text></g><g><title>type_collecting (9,646,673 samples, 0.99%)</title><rect x="70.7199%" y="149" width="0.9874%" height="15" fill="rgb(247,138,52)"/><text x="70.9699%" y="159.50"></text></g><g><title>collect_mod_item_types (9,631,873 samples, 0.99%)</title><rect x="70.7214%" y="133" width="0.9859%" height="15" fill="rgb(213,79,30)"/><text x="70.9714%" y="143.50"></text></g><g><title>evaluate_obligation (2,760,537 samples, 0.28%)</title><rect x="73.0245%" y="117" width="0.2826%" height="15" fill="rgb(246,177,23)"/><text x="73.2745%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,536,800 samples, 0.16%)</title><rect x="73.3130%" y="117" width="0.1573%" height="15" fill="rgb(230,62,27)"/><text x="73.5630%" y="127.50"></text></g><g><title>param_env (2,459,785 samples, 0.25%)</title><rect x="73.4720%" y="117" width="0.2518%" height="15" fill="rgb(216,154,8)"/><text x="73.7220%" y="127.50"></text></g><g><title>region_scope_tree (2,858,778 samples, 0.29%)</title><rect x="73.7336%" y="117" width="0.2926%" height="15" fill="rgb(244,35,45)"/><text x="73.9836%" y="127.50"></text></g><g><title>check_impl_item_well_formed (21,609,705 samples, 2.21%)</title><rect x="71.8166%" y="133" width="2.2119%" height="15" fill="rgb(251,115,12)"/><text x="72.0666%" y="143.50">c..</text></g><g><title>param_env (1,068,810 samples, 0.11%)</title><rect x="74.9092%" y="117" width="0.1094%" height="15" fill="rgb(240,54,50)"/><text x="75.1592%" y="127.50"></text></g><g><title>check_item_well_formed (10,215,657 samples, 1.05%)</title><rect x="74.0286%" y="133" width="1.0457%" height="15" fill="rgb(233,84,52)"/><text x="74.2786%" y="143.50"></text></g><g><title>analysis (726,509,444 samples, 74.36%)</title><rect x="0.7530%" y="181" width="74.3643%" height="15" fill="rgb(207,117,47)"/><text x="1.0030%" y="191.50">analysis</text></g><g><title>type_check_crate (269,938,639 samples, 27.63%)</title><rect x="47.4868%" y="165" width="27.6305%" height="15" fill="rgb(249,43,39)"/><text x="47.7368%" y="175.50">type_check_crate</text></g><g><title>wf_checking (33,283,897 samples, 3.41%)</title><rect x="71.7104%" y="149" width="3.4069%" height="15" fill="rgb(209,38,44)"/><text x="71.9604%" y="159.50">wf_..</text></g><g><title>codegen_module (2,020,461 samples, 0.21%)</title><rect x="75.1813%" y="165" width="0.2068%" height="15" fill="rgb(236,212,23)"/><text x="75.4313%" y="175.50"></text></g><g><title>codegen_crate (2,655,849 samples, 0.27%)</title><rect x="75.1179%" y="181" width="0.2718%" height="15" fill="rgb(242,79,21)"/><text x="75.3679%" y="191.50"></text></g><g><title>LLVM_module_codegen (15,984,241 samples, 1.64%)</title><rect x="75.3949%" y="165" width="1.6361%" height="15" fill="rgb(211,96,35)"/><text x="75.6449%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (14,702,548 samples, 1.50%)</title><rect x="75.5261%" y="149" width="1.5049%" height="15" fill="rgb(253,215,40)"/><text x="75.7761%" y="159.50"></text></g><g><title>codegen_module_optimize (16,848,550 samples, 1.72%)</title><rect x="75.3898%" y="181" width="1.7246%" height="15" fill="rgb(211,81,21)"/><text x="75.6398%" y="191.50"></text></g><g><title>macro_expand_crate (48,059,317 samples, 4.92%)</title><rect x="77.2531%" y="165" width="4.9193%" height="15" fill="rgb(208,190,38)"/><text x="77.5031%" y="175.50">macro_..</text></g><g><title>expand_crate (48,049,526 samples, 4.92%)</title><rect x="77.2541%" y="149" width="4.9183%" height="15" fill="rgb(235,213,38)"/><text x="77.5041%" y="159.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (1,915,442 samples, 0.20%)</title><rect x="81.9763%" y="133" width="0.1961%" height="15" fill="rgb(237,122,38)"/><text x="82.2263%" y="143.50"></text></g><g><title>late_resolve_crate (16,192,484 samples, 1.66%)</title><rect x="82.2223%" y="149" width="1.6574%" height="15" fill="rgb(244,218,35)"/><text x="82.4723%" y="159.50"></text></g><g><title>configure_and_expand (66,928,769 samples, 6.85%)</title><rect x="77.1144%" y="181" width="6.8507%" height="15" fill="rgb(240,68,47)"/><text x="77.3644%" y="191.50">configure..</text></g><g><title>resolve_crate (17,450,077 samples, 1.79%)</title><rect x="82.1789%" y="165" width="1.7862%" height="15" fill="rgb(210,16,53)"/><text x="82.4289%" y="175.50">r..</text></g><g><title>drop_ast (1,964,531 samples, 0.20%)</title><rect x="83.9651%" y="181" width="0.2011%" height="15" fill="rgb(235,124,12)"/><text x="84.2151%" y="191.50"></text></g><g><title>early_lint_checks (3,599,999 samples, 0.37%)</title><rect x="84.1680%" y="181" width="0.3685%" height="15" fill="rgb(224,169,11)"/><text x="84.4180%" y="191.50"></text></g><g><title>free_global_ctxt (6,831,753 samples, 0.70%)</title><rect x="84.5365%" y="181" width="0.6993%" height="15" fill="rgb(250,166,2)"/><text x="84.7865%" y="191.50"></text></g><g><title>exported_symbols (2,092,702 samples, 0.21%)</title><rect x="86.3245%" y="165" width="0.2142%" height="15" fill="rgb(242,216,29)"/><text x="86.5745%" y="175.50"></text></g><g><title>reachable_non_generics (1,109,252 samples, 0.11%)</title><rect x="86.4251%" y="149" width="0.1135%" height="15" fill="rgb(230,116,27)"/><text x="86.6751%" y="159.50"></text></g><g><title>reachable_set (1,043,721 samples, 0.11%)</title><rect x="86.4318%" y="133" width="0.1068%" height="15" fill="rgb(228,99,48)"/><text x="86.6818%" y="143.50"></text></g><g><title>layout_of (1,204,230 samples, 0.12%)</title><rect x="89.6360%" y="133" width="0.1233%" height="15" fill="rgb(253,11,6)"/><text x="89.8860%" y="143.50"></text></g><g><title>layout_of (3,864,551 samples, 0.40%)</title><rect x="89.4169%" y="149" width="0.3956%" height="15" fill="rgb(247,143,39)"/><text x="89.6669%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (66,274,446 samples, 6.78%)</title><rect x="89.8125%" y="149" width="6.7837%" height="15" fill="rgb(236,97,10)"/><text x="90.0625%" y="159.50">mir_drops..</text></g><g><title>optimized_mir (97,471,999 samples, 9.98%)</title><rect x="86.6424%" y="165" width="9.9771%" height="15" fill="rgb(233,208,19)"/><text x="86.8924%" y="175.50">optimized_mir</text></g><g><title>promoted_mir (1,861,625 samples, 0.19%)</title><rect x="96.6194%" y="165" width="0.1906%" height="15" fill="rgb(216,164,2)"/><text x="96.8694%" y="175.50"></text></g><g><title>generate_crate_metadata (113,192,256 samples, 11.59%)</title><rect x="85.2358%" y="181" width="11.5862%" height="15" fill="rgb(220,129,5)"/><text x="85.4858%" y="191.50">generate_crate_me..</text></g><g><title>hir_lowering (24,645,844 samples, 2.52%)</title><rect x="96.8220%" y="181" width="2.5227%" height="15" fill="rgb(242,17,10)"/><text x="97.0720%" y="191.50">hi..</text></g><g><title>link_crate (3,038,353 samples, 0.31%)</title><rect x="99.3476%" y="165" width="0.3110%" height="15" fill="rgb(242,107,0)"/><text x="99.5976%" y="175.50"></text></g><g><title>link_binary (3,030,112 samples, 0.31%)</title><rect x="99.3485%" y="149" width="0.3102%" height="15" fill="rgb(251,28,31)"/><text x="99.5985%" y="159.50"></text></g><g><title>link_rlib (2,524,497 samples, 0.26%)</title><rect x="99.4002%" y="133" width="0.2584%" height="15" fill="rgb(233,223,10)"/><text x="99.6502%" y="143.50"></text></g><g><title>link (3,079,293 samples, 0.32%)</title><rect x="99.3447%" y="181" width="0.3152%" height="15" fill="rgb(215,21,27)"/><text x="99.5947%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,491,876 samples, 0.15%)</title><rect x="99.7204%" y="181" width="0.1527%" height="15" fill="rgb(232,23,21)"/><text x="99.9704%" y="191.50"></text></g><g><title>all (976,959,492 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (976,959,492 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,155,392 samples, 0.12%)</title><rect x="99.8817%" y="181" width="0.1183%" height="15" fill="rgb(247,70,30)"/><text x="100.1317%" y="191.50"></text></g></svg></svg>