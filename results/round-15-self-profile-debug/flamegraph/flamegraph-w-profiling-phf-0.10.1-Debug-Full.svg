<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,906,869 samples, 2.53%)</title><rect x="0.4843%" y="181" width="2.5258%" height="15" fill="rgb(227,0,7)"/><text x="0.7343%" y="191.50">LL..</text></g><g><title>implied_outlives_bounds (236,862 samples, 0.15%)</title><rect x="13.1592%" y="133" width="0.1531%" height="15" fill="rgb(217,0,24)"/><text x="13.4092%" y="143.50"></text></g><g><title>param_env (232,032 samples, 0.15%)</title><rect x="14.5385%" y="101" width="0.1500%" height="15" fill="rgb(221,193,54)"/><text x="14.7885%" y="111.50"></text></g><g><title>item_attrs (180,303 samples, 0.12%)</title><rect x="15.0461%" y="69" width="0.1166%" height="15" fill="rgb(248,212,6)"/><text x="15.2961%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (173,933 samples, 0.11%)</title><rect x="15.0502%" y="53" width="0.1125%" height="15" fill="rgb(208,68,35)"/><text x="15.3002%" y="63.50"></text></g><g><title>codegen_fn_attrs (232,284 samples, 0.15%)</title><rect x="15.0164%" y="85" width="0.1502%" height="15" fill="rgb(232,128,0)"/><text x="15.2664%" y="95.50"></text></g><g><title>adt_drop_tys (256,942 samples, 0.17%)</title><rect x="16.8306%" y="53" width="0.1661%" height="15" fill="rgb(207,160,47)"/><text x="17.0806%" y="63.50"></text></g><g><title>needs_drop_raw (1,229,151 samples, 0.79%)</title><rect x="16.7460%" y="69" width="0.7947%" height="15" fill="rgb(228,23,34)"/><text x="16.9960%" y="79.50"></text></g><g><title>is_copy_raw (841,468 samples, 0.54%)</title><rect x="16.9967%" y="53" width="0.5440%" height="15" fill="rgb(218,30,26)"/><text x="17.2467%" y="63.50"></text></g><g><title>evaluate_obligation (658,565 samples, 0.43%)</title><rect x="17.1149%" y="37" width="0.4258%" height="15" fill="rgb(220,122,19)"/><text x="17.3649%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (458,772 samples, 0.30%)</title><rect x="17.7683%" y="53" width="0.2966%" height="15" fill="rgb(250,228,42)"/><text x="18.0183%" y="63.50"></text></g><g><title>resolve_instance (904,559 samples, 0.58%)</title><rect x="17.5407%" y="69" width="0.5848%" height="15" fill="rgb(240,193,28)"/><text x="17.7907%" y="79.50"></text></g><g><title>thir_body (750,028 samples, 0.48%)</title><rect x="18.1544%" y="69" width="0.4849%" height="15" fill="rgb(216,20,37)"/><text x="18.4044%" y="79.50"></text></g><g><title>mir_const (7,301,081 samples, 4.72%)</title><rect x="13.9431%" y="117" width="4.7202%" height="15" fill="rgb(206,188,39)"/><text x="14.1931%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (6,148,087 samples, 3.97%)</title><rect x="14.6885%" y="101" width="3.9748%" height="15" fill="rgb(217,207,13)"/><text x="14.9385%" y="111.50">unsa..</text></g><g><title>mir_built (5,408,658 samples, 3.50%)</title><rect x="15.1666%" y="85" width="3.4968%" height="15" fill="rgb(231,73,38)"/><text x="15.4166%" y="95.50">mir..</text></g><g><title>mir_promoted (8,812,020 samples, 5.70%)</title><rect x="13.3683%" y="133" width="5.6971%" height="15" fill="rgb(225,20,46)"/><text x="13.6183%" y="143.50">mir_pro..</text></g><g><title>mir_const_qualif (621,825 samples, 0.40%)</title><rect x="18.6634%" y="117" width="0.4020%" height="15" fill="rgb(210,31,41)"/><text x="18.9134%" y="127.50"></text></g><g><title>mir_const (349,672 samples, 0.23%)</title><rect x="18.8393%" y="101" width="0.2261%" height="15" fill="rgb(221,200,47)"/><text x="19.0893%" y="111.50"></text></g><g><title>unsafety_check_result (281,802 samples, 0.18%)</title><rect x="18.8832%" y="85" width="0.1822%" height="15" fill="rgb(226,26,5)"/><text x="19.1332%" y="95.50"></text></g><g><title>mir_built (236,512 samples, 0.15%)</title><rect x="18.9125%" y="69" width="0.1529%" height="15" fill="rgb(249,33,26)"/><text x="19.1625%" y="79.50"></text></g><g><title>type_op_ascribe_user_type (194,870 samples, 0.13%)</title><rect x="19.0654%" y="133" width="0.1260%" height="15" fill="rgb(235,183,28)"/><text x="19.3154%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (220,904 samples, 0.14%)</title><rect x="19.1914%" y="133" width="0.1428%" height="15" fill="rgb(221,5,38)"/><text x="19.4414%" y="143.50"></text></g><g><title>type_op_normalize_predicate (305,144 samples, 0.20%)</title><rect x="19.3342%" y="133" width="0.1973%" height="15" fill="rgb(247,18,42)"/><text x="19.5842%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,517,748 samples, 2.92%)</title><rect x="19.5315%" y="133" width="2.9208%" height="15" fill="rgb(241,131,45)"/><text x="19.7815%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (29,793,173 samples, 19.26%)</title><rect x="3.1932%" y="165" width="19.2617%" height="15" fill="rgb(249,31,29)"/><text x="3.4432%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (29,583,380 samples, 19.13%)</title><rect x="3.3289%" y="149" width="19.1261%" height="15" fill="rgb(225,111,53)"/><text x="3.5789%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (276,633 samples, 0.18%)</title><rect x="22.4549%" y="165" width="0.1788%" height="15" fill="rgb(238,160,17)"/><text x="22.7049%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (206,792 samples, 0.13%)</title><rect x="22.5001%" y="149" width="0.1337%" height="15" fill="rgb(214,148,48)"/><text x="22.7501%" y="159.50"></text></g><g><title>hir_module_items (204,853 samples, 0.13%)</title><rect x="22.6338%" y="165" width="0.1324%" height="15" fill="rgb(232,36,49)"/><text x="22.8838%" y="175.50"></text></g><g><title>codegen_fn_attrs (226,082 samples, 0.15%)</title><rect x="23.0530%" y="101" width="0.1462%" height="15" fill="rgb(209,103,24)"/><text x="23.3030%" y="111.50"></text></g><g><title>codegen_fn_attrs (434,504 samples, 0.28%)</title><rect x="22.9256%" y="133" width="0.2809%" height="15" fill="rgb(229,88,8)"/><text x="23.1756%" y="143.50"></text></g><g><title>should_inherit_track_caller (365,864 samples, 0.24%)</title><rect x="22.9699%" y="117" width="0.2365%" height="15" fill="rgb(213,181,19)"/><text x="23.2199%" y="127.50"></text></g><g><title>check_mod_attrs (654,807 samples, 0.42%)</title><rect x="22.7832%" y="149" width="0.4233%" height="15" fill="rgb(254,191,54)"/><text x="23.0332%" y="159.50"></text></g><g><title>lookup_deprecation_entry (192,072 samples, 0.12%)</title><rect x="23.4794%" y="133" width="0.1242%" height="15" fill="rgb(241,83,37)"/><text x="23.7294%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (460,646 samples, 0.30%)</title><rect x="23.3465%" y="149" width="0.2978%" height="15" fill="rgb(233,36,39)"/><text x="23.5965%" y="159.50"></text></g><g><title>misc_checking_1 (1,412,934 samples, 0.91%)</title><rect x="22.7665%" y="165" width="0.9135%" height="15" fill="rgb(226,3,54)"/><text x="23.0165%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (449,064 samples, 0.29%)</title><rect x="23.6810%" y="149" width="0.2903%" height="15" fill="rgb(245,192,40)"/><text x="23.9310%" y="159.50"></text></g><g><title>check_mod_liveness (373,434 samples, 0.24%)</title><rect x="23.7299%" y="133" width="0.2414%" height="15" fill="rgb(238,167,29)"/><text x="23.9799%" y="143.50"></text></g><g><title>misc_checking_2 (981,239 samples, 0.63%)</title><rect x="23.6800%" y="165" width="0.6344%" height="15" fill="rgb(232,182,51)"/><text x="23.9300%" y="175.50"></text></g><g><title>match_checking (530,535 samples, 0.34%)</title><rect x="23.9713%" y="149" width="0.3430%" height="15" fill="rgb(231,60,39)"/><text x="24.2213%" y="159.50"></text></g><g><title>check_match (481,604 samples, 0.31%)</title><rect x="24.0030%" y="133" width="0.3114%" height="15" fill="rgb(208,69,12)"/><text x="24.2530%" y="143.50"></text></g><g><title>param_env (163,722 samples, 0.11%)</title><rect x="24.2085%" y="117" width="0.1058%" height="15" fill="rgb(235,93,37)"/><text x="24.4585%" y="127.50"></text></g><g><title>check_private_in_public (267,243 samples, 0.17%)</title><rect x="24.3209%" y="149" width="0.1728%" height="15" fill="rgb(213,116,39)"/><text x="24.5709%" y="159.50"></text></g><g><title>death_checking (381,654 samples, 0.25%)</title><rect x="24.4936%" y="149" width="0.2467%" height="15" fill="rgb(222,207,29)"/><text x="24.7436%" y="159.50"></text></g><g><title>param_env (251,393 samples, 0.16%)</title><rect x="25.1977%" y="117" width="0.1625%" height="15" fill="rgb(206,96,30)"/><text x="25.4477%" y="127.50"></text></g><g><title>crate_lints (2,058,841 samples, 1.33%)</title><rect x="24.7413%" y="133" width="1.3311%" height="15" fill="rgb(218,138,4)"/><text x="24.9913%" y="143.50"></text></g><g><title>type_of (1,098,968 samples, 0.71%)</title><rect x="25.3618%" y="117" width="0.7105%" height="15" fill="rgb(250,191,14)"/><text x="25.6118%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (864,967 samples, 0.56%)</title><rect x="25.5131%" y="101" width="0.5592%" height="15" fill="rgb(239,60,40)"/><text x="25.7631%" y="111.50"></text></g><g><title>lint_checking (2,374,905 samples, 1.54%)</title><rect x="24.7404%" y="149" width="1.5354%" height="15" fill="rgb(206,27,48)"/><text x="24.9904%" y="159.50"></text></g><g><title>module_lints (314,704 samples, 0.20%)</title><rect x="26.0723%" y="133" width="0.2035%" height="15" fill="rgb(225,35,8)"/><text x="26.3223%" y="143.50"></text></g><g><title>lint_mod (310,154 samples, 0.20%)</title><rect x="26.0753%" y="117" width="0.2005%" height="15" fill="rgb(250,213,24)"/><text x="26.3253%" y="127.50"></text></g><g><title>privacy_access_levels (337,493 samples, 0.22%)</title><rect x="26.2758%" y="149" width="0.2182%" height="15" fill="rgb(247,123,22)"/><text x="26.5258%" y="159.50"></text></g><g><title>privacy_checking_modules (916,189 samples, 0.59%)</title><rect x="26.4940%" y="149" width="0.5923%" height="15" fill="rgb(231,138,38)"/><text x="26.7440%" y="159.50"></text></g><g><title>check_mod_privacy (912,509 samples, 0.59%)</title><rect x="26.4964%" y="133" width="0.5899%" height="15" fill="rgb(231,145,46)"/><text x="26.7464%" y="143.50"></text></g><g><title>misc_checking_3 (4,309,914 samples, 2.79%)</title><rect x="24.3143%" y="165" width="2.7864%" height="15" fill="rgb(251,118,11)"/><text x="24.5643%" y="175.50">mi..</text></g><g><title>impl_parent (1,911,587 samples, 1.24%)</title><rect x="29.1749%" y="101" width="1.2359%" height="15" fill="rgb(217,147,25)"/><text x="29.4249%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,085,262 samples, 0.70%)</title><rect x="29.7091%" y="85" width="0.7016%" height="15" fill="rgb(247,81,37)"/><text x="29.9591%" y="95.50"></text></g><g><title>impl_trait_ref (4,507,603 samples, 2.91%)</title><rect x="30.4108%" y="101" width="2.9142%" height="15" fill="rgb(209,12,38)"/><text x="30.6608%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,912,520 samples, 2.53%)</title><rect x="30.7955%" y="85" width="2.5295%" height="15" fill="rgb(227,1,9)"/><text x="31.0455%" y="95.50">me..</text></g><g><title>predicates_of (193,253 samples, 0.12%)</title><rect x="33.3920%" y="101" width="0.1249%" height="15" fill="rgb(248,47,43)"/><text x="33.6420%" y="111.50"></text></g><g><title>predicates_defined_on (169,843 samples, 0.11%)</title><rect x="33.4071%" y="85" width="0.1098%" height="15" fill="rgb(221,10,30)"/><text x="33.6571%" y="95.50"></text></g><g><title>trait_impls_of (569,024 samples, 0.37%)</title><rect x="33.5179%" y="101" width="0.3679%" height="15" fill="rgb(210,229,1)"/><text x="33.7679%" y="111.50"></text></g><g><title>coherent_trait (10,413,346 samples, 6.73%)</title><rect x="27.1657%" y="133" width="6.7324%" height="15" fill="rgb(222,148,37)"/><text x="27.4157%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (10,389,616 samples, 6.72%)</title><rect x="27.1810%" y="117" width="6.7170%" height="15" fill="rgb(234,67,33)"/><text x="27.4310%" y="127.50">specializ..</text></g><g><title>coherence_checking (10,525,557 samples, 6.80%)</title><rect x="27.1540%" y="149" width="6.8049%" height="15" fill="rgb(247,98,35)"/><text x="27.4040%" y="159.50">coherence..</text></g><g><title>associated_item (256,702 samples, 0.17%)</title><rect x="43.5353%" y="85" width="0.1660%" height="15" fill="rgb(247,138,52)"/><text x="43.7853%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (215,431 samples, 0.14%)</title><rect x="43.5620%" y="69" width="0.1393%" height="15" fill="rgb(213,79,30)"/><text x="43.8120%" y="79.50"></text></g><g><title>associated_items (348,183 samples, 0.23%)</title><rect x="43.4861%" y="101" width="0.2251%" height="15" fill="rgb(246,177,23)"/><text x="43.7361%" y="111.50"></text></g><g><title>def_ident_span (253,263 samples, 0.16%)</title><rect x="43.7112%" y="101" width="0.1637%" height="15" fill="rgb(230,62,27)"/><text x="43.9612%" y="111.50"></text></g><g><title>dropck_outlives (497,775 samples, 0.32%)</title><rect x="43.8791%" y="101" width="0.3218%" height="15" fill="rgb(216,154,8)"/><text x="44.1291%" y="111.50"></text></g><g><title>adt_dtorck_constraint (192,582 samples, 0.12%)</title><rect x="44.0764%" y="85" width="0.1245%" height="15" fill="rgb(244,35,45)"/><text x="44.3264%" y="95.50"></text></g><g><title>evaluate_obligation (1,087,070 samples, 0.70%)</title><rect x="44.2009%" y="101" width="0.7028%" height="15" fill="rgb(251,115,12)"/><text x="44.4509%" y="111.50"></text></g><g><title>method_autoderef_steps (709,137 samples, 0.46%)</title><rect x="45.0644%" y="101" width="0.4585%" height="15" fill="rgb(240,54,50)"/><text x="45.3144%" y="111.50"></text></g><g><title>evaluate_obligation (337,123 samples, 0.22%)</title><rect x="45.3049%" y="85" width="0.2180%" height="15" fill="rgb(233,84,52)"/><text x="45.5549%" y="95.50"></text></g><g><title>explicit_predicates_of (164,480 samples, 0.11%)</title><rect x="45.6057%" y="69" width="0.1063%" height="15" fill="rgb(207,117,47)"/><text x="45.8557%" y="79.50"></text></g><g><title>predicates_of (253,513 samples, 0.16%)</title><rect x="45.5609%" y="101" width="0.1639%" height="15" fill="rgb(249,43,39)"/><text x="45.8109%" y="111.50"></text></g><g><title>predicates_defined_on (214,311 samples, 0.14%)</title><rect x="45.5862%" y="85" width="0.1386%" height="15" fill="rgb(209,38,44)"/><text x="45.8362%" y="95.50"></text></g><g><title>evaluate_obligation (713,444 samples, 0.46%)</title><rect x="51.5795%" y="85" width="0.4613%" height="15" fill="rgb(236,212,23)"/><text x="51.8295%" y="95.50"></text></g><g><title>trait_impls_of (196,812 samples, 0.13%)</title><rect x="51.9135%" y="69" width="0.1272%" height="15" fill="rgb(242,79,21)"/><text x="52.1635%" y="79.50"></text></g><g><title>method_autoderef_steps (166,072 samples, 0.11%)</title><rect x="52.1928%" y="85" width="0.1074%" height="15" fill="rgb(211,96,35)"/><text x="52.4428%" y="95.50"></text></g><g><title>typeck (10,257,798 samples, 6.63%)</title><rect x="45.7547%" y="101" width="6.6318%" height="15" fill="rgb(253,215,40)"/><text x="46.0047%" y="111.50">typeck</text></g><g><title>item_bodies_checking (28,474,230 samples, 18.41%)</title><rect x="33.9981%" y="149" width="18.4090%" height="15" fill="rgb(211,81,21)"/><text x="34.2481%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,470,670 samples, 18.41%)</title><rect x="34.0004%" y="133" width="18.4067%" height="15" fill="rgb(208,190,38)"/><text x="34.2504%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (28,336,099 samples, 18.32%)</title><rect x="34.0874%" y="117" width="18.3197%" height="15" fill="rgb(235,213,38)"/><text x="34.3374%" y="127.50">typeck</text></g><g><title>impl_trait_ref (187,161 samples, 0.12%)</title><rect x="54.4491%" y="69" width="0.1210%" height="15" fill="rgb(237,122,38)"/><text x="54.6991%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (168,151 samples, 0.11%)</title><rect x="54.4614%" y="53" width="0.1087%" height="15" fill="rgb(244,218,35)"/><text x="54.7114%" y="63.50"></text></g><g><title>adt_destructor (367,233 samples, 0.24%)</title><rect x="54.3547%" y="117" width="0.2374%" height="15" fill="rgb(240,68,47)"/><text x="54.6047%" y="127.50"></text></g><g><title>coherent_trait (357,923 samples, 0.23%)</title><rect x="54.3607%" y="101" width="0.2314%" height="15" fill="rgb(210,16,53)"/><text x="54.6107%" y="111.50"></text></g><g><title>specialization_graph_of (355,963 samples, 0.23%)</title><rect x="54.3620%" y="85" width="0.2301%" height="15" fill="rgb(235,124,12)"/><text x="54.6120%" y="95.50"></text></g><g><title>item_types_checking (3,624,647 samples, 2.34%)</title><rect x="52.4071%" y="149" width="2.3434%" height="15" fill="rgb(224,169,11)"/><text x="52.6571%" y="159.50">i..</text></g><g><title>check_mod_item_types (3,618,316 samples, 2.34%)</title><rect x="52.4112%" y="133" width="2.3393%" height="15" fill="rgb(250,166,2)"/><text x="52.6612%" y="143.50">c..</text></g><g><title>fn_sig (275,552 samples, 0.18%)</title><rect x="55.0090%" y="117" width="0.1781%" height="15" fill="rgb(242,216,29)"/><text x="55.2590%" y="127.50"></text></g><g><title>is_late_bound_map (592,207 samples, 0.38%)</title><rect x="55.3279%" y="101" width="0.3829%" height="15" fill="rgb(230,116,27)"/><text x="55.5779%" y="111.50"></text></g><g><title>resolve_lifetimes (536,867 samples, 0.35%)</title><rect x="55.3637%" y="85" width="0.3471%" height="15" fill="rgb(228,99,48)"/><text x="55.6137%" y="95.50"></text></g><g><title>named_region_map (161,532 samples, 0.10%)</title><rect x="55.7108%" y="101" width="0.1044%" height="15" fill="rgb(253,11,6)"/><text x="55.9608%" y="111.50"></text></g><g><title>generics_of (998,930 samples, 0.65%)</title><rect x="55.1872%" y="117" width="0.6458%" height="15" fill="rgb(247,143,39)"/><text x="55.4372%" y="127.50"></text></g><g><title>explicit_predicates_of (472,955 samples, 0.31%)</title><rect x="55.9996%" y="85" width="0.3058%" height="15" fill="rgb(236,97,10)"/><text x="56.2496%" y="95.50"></text></g><g><title>predicates_of (1,015,052 samples, 0.66%)</title><rect x="55.8741%" y="117" width="0.6562%" height="15" fill="rgb(233,208,19)"/><text x="56.1241%" y="127.50"></text></g><g><title>predicates_defined_on (942,421 samples, 0.61%)</title><rect x="55.9210%" y="101" width="0.6093%" height="15" fill="rgb(216,164,2)"/><text x="56.1710%" y="111.50"></text></g><g><title>inferred_outlives_of (347,933 samples, 0.22%)</title><rect x="56.3054%" y="85" width="0.2249%" height="15" fill="rgb(220,129,5)"/><text x="56.5554%" y="95.50"></text></g><g><title>inferred_outlives_crate (316,893 samples, 0.20%)</title><rect x="56.3254%" y="69" width="0.2049%" height="15" fill="rgb(242,17,10)"/><text x="56.5754%" y="79.50"></text></g><g><title>type_collecting (3,003,701 samples, 1.94%)</title><rect x="54.7525%" y="149" width="1.9419%" height="15" fill="rgb(242,107,0)"/><text x="55.0025%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,989,191 samples, 1.93%)</title><rect x="54.7619%" y="133" width="1.9326%" height="15" fill="rgb(251,28,31)"/><text x="55.0119%" y="143.50">c..</text></g><g><title>type_of (253,931 samples, 0.16%)</title><rect x="56.5303%" y="117" width="0.1642%" height="15" fill="rgb(233,223,10)"/><text x="56.7803%" y="127.50"></text></g><g><title>evaluate_obligation (861,240 samples, 0.56%)</title><rect x="59.9265%" y="117" width="0.5568%" height="15" fill="rgb(215,21,27)"/><text x="60.1765%" y="127.50"></text></g><g><title>implied_outlives_bounds (609,485 samples, 0.39%)</title><rect x="60.4833%" y="117" width="0.3940%" height="15" fill="rgb(232,23,21)"/><text x="60.7333%" y="127.50"></text></g><g><title>param_env (683,158 samples, 0.44%)</title><rect x="60.8773%" y="117" width="0.4417%" height="15" fill="rgb(244,5,23)"/><text x="61.1273%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,240,801 samples, 4.68%)</title><rect x="56.9093%" y="133" width="4.6813%" height="15" fill="rgb(226,81,46)"/><text x="57.1593%" y="143.50">check..</text></g><g><title>region_scope_tree (365,425 samples, 0.24%)</title><rect x="61.3543%" y="117" width="0.2363%" height="15" fill="rgb(247,70,30)"/><text x="61.6043%" y="127.50"></text></g><g><title>implied_outlives_bounds (236,055 samples, 0.15%)</title><rect x="64.0860%" y="117" width="0.1526%" height="15" fill="rgb(212,68,19)"/><text x="64.3360%" y="127.50"></text></g><g><title>param_env (535,450 samples, 0.35%)</title><rect x="64.2392%" y="117" width="0.3462%" height="15" fill="rgb(240,187,13)"/><text x="64.4892%" y="127.50"></text></g><g><title>trait_impls_of (205,592 samples, 0.13%)</title><rect x="64.6665%" y="117" width="0.1329%" height="15" fill="rgb(223,113,26)"/><text x="64.9165%" y="127.50"></text></g><g><title>analysis (95,709,272 samples, 61.88%)</title><rect x="3.0102%" y="181" width="61.8773%" height="15" fill="rgb(206,192,2)"/><text x="3.2602%" y="191.50">analysis</text></g><g><title>type_check_crate (58,446,954 samples, 37.79%)</title><rect x="27.1008%" y="165" width="37.7867%" height="15" fill="rgb(241,108,4)"/><text x="27.3508%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,665,108 samples, 8.19%)</title><rect x="56.6993%" y="149" width="8.1882%" height="15" fill="rgb(247,173,49)"/><text x="56.9493%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (5,099,542 samples, 3.30%)</title><rect x="61.5906%" y="133" width="3.2969%" height="15" fill="rgb(224,114,35)"/><text x="61.8406%" y="143.50">che..</text></g><g><title>codegen_module (278,642 samples, 0.18%)</title><rect x="65.1730%" y="165" width="0.1801%" height="15" fill="rgb(245,159,27)"/><text x="65.4230%" y="175.50"></text></g><g><title>codegen_crate (792,507 samples, 0.51%)</title><rect x="64.8943%" y="181" width="0.5124%" height="15" fill="rgb(245,172,44)"/><text x="65.1443%" y="191.50"></text></g><g><title>LLVM_module_codegen (3,401,804 samples, 2.20%)</title><rect x="65.4215%" y="165" width="2.1993%" height="15" fill="rgb(236,23,11)"/><text x="65.6715%" y="175.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (3,330,324 samples, 2.15%)</title><rect x="65.4677%" y="149" width="2.1531%" height="15" fill="rgb(205,117,38)"/><text x="65.7177%" y="159.50">L..</text></g><g><title>codegen_module_optimize (3,719,768 samples, 2.40%)</title><rect x="65.4067%" y="181" width="2.4049%" height="15" fill="rgb(237,72,25)"/><text x="65.6567%" y="191.50">co..</text></g><g><title>LLVM_module_optimize (294,963 samples, 0.19%)</title><rect x="67.6208%" y="165" width="0.1907%" height="15" fill="rgb(244,70,9)"/><text x="67.8708%" y="175.50"></text></g><g><title>AST_validation (369,394 samples, 0.24%)</title><rect x="67.9532%" y="165" width="0.2388%" height="15" fill="rgb(217,125,39)"/><text x="68.2032%" y="175.50"></text></g><g><title>metadata_register_crate (2,888,689 samples, 1.87%)</title><rect x="81.1291%" y="133" width="1.8676%" height="15" fill="rgb(235,36,10)"/><text x="81.3791%" y="143.50">m..</text></g><g><title>metadata_register_crate (1,000,850 samples, 0.65%)</title><rect x="82.3497%" y="117" width="0.6471%" height="15" fill="rgb(251,123,47)"/><text x="82.5997%" y="127.50"></text></g><g><title>macro_expand_crate (23,117,764 samples, 14.95%)</title><rect x="68.3149%" y="165" width="14.9459%" height="15" fill="rgb(221,13,13)"/><text x="68.5649%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (23,100,194 samples, 14.93%)</title><rect x="68.3262%" y="149" width="14.9346%" height="15" fill="rgb(238,131,9)"/><text x="68.5762%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (408,505 samples, 0.26%)</title><rect x="82.9967%" y="133" width="0.2641%" height="15" fill="rgb(211,50,8)"/><text x="83.2467%" y="143.50"></text></g><g><title>finalize_imports (396,394 samples, 0.26%)</title><rect x="83.3229%" y="149" width="0.2563%" height="15" fill="rgb(245,182,24)"/><text x="83.5729%" y="159.50"></text></g><g><title>late_resolve_crate (3,352,434 samples, 2.17%)</title><rect x="83.6128%" y="149" width="2.1674%" height="15" fill="rgb(242,14,37)"/><text x="83.8628%" y="159.50">l..</text></g><g><title>configure_and_expand (27,984,594 samples, 18.09%)</title><rect x="67.8115%" y="181" width="18.0924%" height="15" fill="rgb(246,228,12)"/><text x="68.0615%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,002,041 samples, 2.59%)</title><rect x="83.3166%" y="165" width="2.5874%" height="15" fill="rgb(213,55,15)"/><text x="83.5666%" y="175.50">re..</text></g><g><title>drop_ast (180,381 samples, 0.12%)</title><rect x="85.9040%" y="181" width="0.1166%" height="15" fill="rgb(209,9,3)"/><text x="86.1540%" y="191.50"></text></g><g><title>early_lint_checks (282,553 samples, 0.18%)</title><rect x="86.0307%" y="181" width="0.1827%" height="15" fill="rgb(230,59,30)"/><text x="86.2807%" y="191.50"></text></g><g><title>free_global_ctxt (3,687,678 samples, 2.38%)</title><rect x="86.2134%" y="181" width="2.3841%" height="15" fill="rgb(209,121,21)"/><text x="86.4634%" y="191.50">fr..</text></g><g><title>exported_symbols (231,162 samples, 0.15%)</title><rect x="90.2678%" y="165" width="0.1494%" height="15" fill="rgb(220,109,13)"/><text x="90.5178%" y="175.50"></text></g><g><title>reachable_non_generics (161,262 samples, 0.10%)</title><rect x="90.3130%" y="149" width="0.1043%" height="15" fill="rgb(232,18,1)"/><text x="90.5630%" y="159.50"></text></g><g><title>layout_of (437,033 samples, 0.28%)</title><rect x="93.0554%" y="133" width="0.2825%" height="15" fill="rgb(215,41,42)"/><text x="93.3054%" y="143.50"></text></g><g><title>layout_of (281,742 samples, 0.18%)</title><rect x="93.1558%" y="117" width="0.1821%" height="15" fill="rgb(224,123,36)"/><text x="93.4058%" y="127.50"></text></g><g><title>layout_of (208,611 samples, 0.13%)</title><rect x="93.2031%" y="101" width="0.1349%" height="15" fill="rgb(240,125,3)"/><text x="93.4531%" y="111.50"></text></g><g><title>layout_of (1,082,732 samples, 0.70%)</title><rect x="92.6668%" y="149" width="0.7000%" height="15" fill="rgb(205,98,50)"/><text x="92.9168%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,692,476 samples, 1.74%)</title><rect x="93.3668%" y="149" width="1.7407%" height="15" fill="rgb(205,185,37)"/><text x="93.6168%" y="159.50"></text></g><g><title>optimized_mir (7,097,891 samples, 4.59%)</title><rect x="90.5269%" y="165" width="4.5889%" height="15" fill="rgb(238,207,15)"/><text x="90.7769%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (10,173,443 samples, 6.58%)</title><rect x="88.5975%" y="181" width="6.5773%" height="15" fill="rgb(213,199,42)"/><text x="88.8475%" y="191.50">generate_..</text></g><g><title>hir_lowering (4,376,225 samples, 2.83%)</title><rect x="95.1748%" y="181" width="2.8293%" height="15" fill="rgb(235,201,11)"/><text x="95.4248%" y="191.50">hi..</text></g><g><title>link_crate (940,250 samples, 0.61%)</title><rect x="98.0161%" y="165" width="0.6079%" height="15" fill="rgb(207,46,11)"/><text x="98.2661%" y="175.50"></text></g><g><title>link_binary (909,940 samples, 0.59%)</title><rect x="98.0356%" y="149" width="0.5883%" height="15" fill="rgb(241,35,35)"/><text x="98.2856%" y="159.50"></text></g><g><title>link_rlib (649,847 samples, 0.42%)</title><rect x="98.2038%" y="133" width="0.4201%" height="15" fill="rgb(243,32,47)"/><text x="98.4538%" y="143.50"></text></g><g><title>link (966,190 samples, 0.62%)</title><rect x="98.0041%" y="181" width="0.6247%" height="15" fill="rgb(247,202,23)"/><text x="98.2541%" y="191.50"></text></g><g><title>parse_crate (593,666 samples, 0.38%)</title><rect x="98.6287%" y="181" width="0.3838%" height="15" fill="rgb(219,102,11)"/><text x="98.8787%" y="191.50"></text></g><g><title>prepare_outputs (272,273 samples, 0.18%)</title><rect x="99.0185%" y="181" width="0.1760%" height="15" fill="rgb(243,110,44)"/><text x="99.2685%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (765,227 samples, 0.49%)</title><rect x="99.1945%" y="181" width="0.4947%" height="15" fill="rgb(222,74,54)"/><text x="99.4445%" y="191.50"></text></g><g><title>all (154,675,840 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (154,675,840 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (403,864 samples, 0.26%)</title><rect x="99.7389%" y="181" width="0.2611%" height="15" fill="rgb(217,163,10)"/><text x="99.9889%" y="191.50"></text></g></svg></svg>