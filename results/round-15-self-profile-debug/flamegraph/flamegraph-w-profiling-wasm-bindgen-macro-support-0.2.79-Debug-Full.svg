<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (567,916,379 samples, 16.79%)</title><rect x="0.0276%" y="165" width="16.7868%" height="15" fill="rgb(227,0,7)"/><text x="0.2776%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (4,326,936 samples, 0.13%)</title><rect x="19.2622%" y="53" width="0.1279%" height="15" fill="rgb(217,0,24)"/><text x="19.5122%" y="63.50"></text></g><g><title>specialization_graph_of (4,767,881 samples, 0.14%)</title><rect x="19.4948%" y="37" width="0.1409%" height="15" fill="rgb(221,193,54)"/><text x="19.7448%" y="47.50"></text></g><g><title>resolve_instance (8,423,181 samples, 0.25%)</title><rect x="19.3901%" y="53" width="0.2490%" height="15" fill="rgb(248,212,6)"/><text x="19.6401%" y="63.50"></text></g><g><title>thir_body (4,877,973 samples, 0.14%)</title><rect x="19.6417%" y="53" width="0.1442%" height="15" fill="rgb(208,68,35)"/><text x="19.8917%" y="63.50"></text></g><g><title>mir_const (38,021,864 samples, 1.12%)</title><rect x="18.6647%" y="101" width="1.1239%" height="15" fill="rgb(232,128,0)"/><text x="18.9147%" y="111.50"></text></g><g><title>unsafety_check_result (33,977,532 samples, 1.00%)</title><rect x="18.7842%" y="85" width="1.0043%" height="15" fill="rgb(207,160,47)"/><text x="19.0342%" y="95.50"></text></g><g><title>mir_built (30,746,969 samples, 0.91%)</title><rect x="18.8797%" y="69" width="0.9088%" height="15" fill="rgb(228,23,34)"/><text x="19.1297%" y="79.50"></text></g><g><title>mir_promoted (42,135,835 samples, 1.25%)</title><rect x="18.5605%" y="117" width="1.2455%" height="15" fill="rgb(218,30,26)"/><text x="18.8105%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (4,566,819 samples, 0.13%)</title><rect x="19.8462%" y="117" width="0.1350%" height="15" fill="rgb(220,122,19)"/><text x="20.0962%" y="127.50"></text></g><g><title>type_op_prove_predicate (13,992,693 samples, 0.41%)</title><rect x="20.0576%" y="117" width="0.4136%" height="15" fill="rgb(250,228,42)"/><text x="20.3076%" y="127.50"></text></g><g><title>MIR_borrow_checking (122,999,932 samples, 3.64%)</title><rect x="16.8358%" y="149" width="3.6357%" height="15" fill="rgb(240,193,28)"/><text x="17.0858%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (122,668,860 samples, 3.63%)</title><rect x="16.8455%" y="133" width="3.6259%" height="15" fill="rgb(216,20,37)"/><text x="17.0955%" y="143.50">mir_..</text></g><g><title>misc_checking_2 (5,154,515 samples, 0.15%)</title><rect x="20.5554%" y="149" width="0.1524%" height="15" fill="rgb(206,188,39)"/><text x="20.8054%" y="159.50"></text></g><g><title>crate_lints (4,091,763 samples, 0.12%)</title><rect x="20.7431%" y="117" width="0.1209%" height="15" fill="rgb(217,207,13)"/><text x="20.9931%" y="127.50"></text></g><g><title>lint_checking (7,503,720 samples, 0.22%)</title><rect x="20.7430%" y="133" width="0.2218%" height="15" fill="rgb(231,73,38)"/><text x="20.9930%" y="143.50"></text></g><g><title>module_lints (3,409,777 samples, 0.10%)</title><rect x="20.8640%" y="117" width="0.1008%" height="15" fill="rgb(225,20,46)"/><text x="21.1140%" y="127.50"></text></g><g><title>lint_mod (3,404,837 samples, 0.10%)</title><rect x="20.8642%" y="101" width="0.1006%" height="15" fill="rgb(210,31,41)"/><text x="21.1142%" y="111.50"></text></g><g><title>misc_checking_3 (12,305,261 samples, 0.36%)</title><rect x="20.7078%" y="149" width="0.3637%" height="15" fill="rgb(221,200,47)"/><text x="20.9578%" y="159.50"></text></g><g><title>evaluate_obligation (6,884,948 samples, 0.20%)</title><rect x="22.2075%" y="85" width="0.2035%" height="15" fill="rgb(226,26,5)"/><text x="22.4575%" y="95.50"></text></g><g><title>dropck_outlives (7,987,655 samples, 0.24%)</title><rect x="24.6385%" y="69" width="0.2361%" height="15" fill="rgb(249,33,26)"/><text x="24.8885%" y="79.50"></text></g><g><title>evaluate_obligation (9,952,273 samples, 0.29%)</title><rect x="24.8746%" y="69" width="0.2942%" height="15" fill="rgb(235,183,28)"/><text x="25.1246%" y="79.50"></text></g><g><title>typeck (99,550,063 samples, 2.94%)</title><rect x="22.4641%" y="85" width="2.9426%" height="15" fill="rgb(221,5,38)"/><text x="22.7141%" y="95.50">ty..</text></g><g><title>item_bodies_checking (144,517,892 samples, 4.27%)</title><rect x="21.1360%" y="133" width="4.2717%" height="15" fill="rgb(247,18,42)"/><text x="21.3860%" y="143.50">item_..</text></g><g><title>typeck_item_bodies (144,513,952 samples, 4.27%)</title><rect x="21.1361%" y="117" width="4.2716%" height="15" fill="rgb(241,131,45)"/><text x="21.3861%" y="127.50">typec..</text></g><g><title>typeck (144,381,962 samples, 4.27%)</title><rect x="21.1400%" y="101" width="4.2677%" height="15" fill="rgb(249,31,29)"/><text x="21.3900%" y="111.50">typeck</text></g><g><title>check_item_well_formed (3,397,907 samples, 0.10%)</title><rect x="25.6827%" y="117" width="0.1004%" height="15" fill="rgb(225,111,53)"/><text x="25.9327%" y="127.50"></text></g><g><title>analysis (303,594,128 samples, 8.97%)</title><rect x="16.8143%" y="165" width="8.9738%" height="15" fill="rgb(238,160,17)"/><text x="17.0643%" y="175.50">analysis</text></g><g><title>type_check_crate (159,569,772 samples, 4.72%)</title><rect x="21.0715%" y="149" width="4.7166%" height="15" fill="rgb(214,148,48)"/><text x="21.3215%" y="159.50">type_..</text></g><g><title>wf_checking (6,823,903 samples, 0.20%)</title><rect x="25.5864%" y="133" width="0.2017%" height="15" fill="rgb(232,36,49)"/><text x="25.8364%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (13,491,876 samples, 0.40%)</title><rect x="39.7239%" y="133" width="0.3988%" height="15" fill="rgb(209,103,24)"/><text x="39.9739%" y="143.50"></text></g><g><title>const_caller_location (3,658,530 samples, 0.11%)</title><rect x="40.1227%" y="133" width="0.1081%" height="15" fill="rgb(229,88,8)"/><text x="40.3727%" y="143.50"></text></g><g><title>layout_of (3,743,950 samples, 0.11%)</title><rect x="40.8459%" y="117" width="0.1107%" height="15" fill="rgb(213,181,19)"/><text x="41.0959%" y="127.50"></text></g><g><title>predicates_of (4,658,907 samples, 0.14%)</title><rect x="41.2716%" y="101" width="0.1377%" height="15" fill="rgb(254,191,54)"/><text x="41.5216%" y="111.50"></text></g><g><title>predicates_defined_on (3,505,882 samples, 0.10%)</title><rect x="41.3057%" y="85" width="0.1036%" height="15" fill="rgb(241,83,37)"/><text x="41.5557%" y="95.50"></text></g><g><title>param_env (15,334,768 samples, 0.45%)</title><rect x="40.9565%" y="117" width="0.4533%" height="15" fill="rgb(233,36,39)"/><text x="41.2065%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,921,901 samples, 0.12%)</title><rect x="41.4098%" y="117" width="0.1159%" height="15" fill="rgb(226,3,54)"/><text x="41.6598%" y="127.50"></text></g><g><title>fn_abi_of_instance (43,909,604 samples, 1.30%)</title><rect x="40.2341%" y="133" width="1.2979%" height="15" fill="rgb(245,192,40)"/><text x="40.4841%" y="143.50"></text></g><g><title>layout_of (8,132,222 samples, 0.24%)</title><rect x="41.6023%" y="133" width="0.2404%" height="15" fill="rgb(238,167,29)"/><text x="41.8523%" y="143.50"></text></g><g><title>symbol_name (6,032,284 samples, 0.18%)</title><rect x="41.8435%" y="133" width="0.1783%" height="15" fill="rgb(232,182,51)"/><text x="42.0935%" y="143.50"></text></g><g><title>codegen_module (546,587,432 samples, 16.16%)</title><rect x="25.8984%" y="149" width="16.1563%" height="15" fill="rgb(231,60,39)"/><text x="26.1484%" y="159.50">codegen_module</text></g><g><title>codegen_crate (550,414,272 samples, 16.27%)</title><rect x="25.7884%" y="165" width="16.2694%" height="15" fill="rgb(208,69,12)"/><text x="26.0384%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,570,181,039 samples, 46.41%)</title><rect x="42.0653%" y="149" width="46.4122%" height="15" fill="rgb(235,93,37)"/><text x="42.3153%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,472,027,774 samples, 43.51%)</title><rect x="44.9666%" y="133" width="43.5110%" height="15" fill="rgb(213,116,39)"/><text x="45.2166%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,644,941,770 samples, 48.62%)</title><rect x="42.0578%" y="165" width="48.6221%" height="15" fill="rgb(222,207,29)"/><text x="42.3078%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (74,507,058 samples, 2.20%)</title><rect x="88.4776%" y="149" width="2.2023%" height="15" fill="rgb(206,96,30)"/><text x="88.7276%" y="159.50">L..</text></g><g><title>macro_expand_crate (44,985,830 samples, 1.33%)</title><rect x="90.7012%" y="149" width="1.3297%" height="15" fill="rgb(218,138,4)"/><text x="90.9512%" y="159.50"></text></g><g><title>expand_crate (44,967,480 samples, 1.33%)</title><rect x="90.7017%" y="133" width="1.3292%" height="15" fill="rgb(250,191,14)"/><text x="90.9517%" y="143.50"></text></g><g><title>late_resolve_crate (5,619,590 samples, 0.17%)</title><rect x="92.0431%" y="133" width="0.1661%" height="15" fill="rgb(239,60,40)"/><text x="92.2931%" y="143.50"></text></g><g><title>configure_and_expand (52,012,564 samples, 1.54%)</title><rect x="90.6799%" y="165" width="1.5374%" height="15" fill="rgb(206,27,48)"/><text x="90.9299%" y="175.50"></text></g><g><title>resolve_crate (6,211,786 samples, 0.18%)</title><rect x="92.0337%" y="149" width="0.1836%" height="15" fill="rgb(225,35,8)"/><text x="92.2837%" y="159.50"></text></g><g><title>free_global_ctxt (12,971,538 samples, 0.38%)</title><rect x="92.2632%" y="165" width="0.3834%" height="15" fill="rgb(250,213,24)"/><text x="92.5132%" y="175.50"></text></g><g><title>codegen_fn_attrs (4,655,633 samples, 0.14%)</title><rect x="93.2795%" y="85" width="0.1376%" height="15" fill="rgb(247,123,22)"/><text x="93.5295%" y="95.50"></text></g><g><title>mir_shims (3,859,803 samples, 0.11%)</title><rect x="93.4595%" y="85" width="0.1141%" height="15" fill="rgb(231,138,38)"/><text x="93.7095%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (10,662,346 samples, 0.32%)</title><rect x="94.0141%" y="69" width="0.3152%" height="15" fill="rgb(231,145,46)"/><text x="94.2641%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (21,103,013 samples, 0.62%)</title><rect x="94.3293%" y="69" width="0.6238%" height="15" fill="rgb(251,118,11)"/><text x="94.5793%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,445,358 samples, 0.10%)</title><rect x="94.9875%" y="53" width="0.1018%" height="15" fill="rgb(217,147,25)"/><text x="95.2375%" y="63.50"></text></g><g><title>optimized_mir (51,321,560 samples, 1.52%)</title><rect x="93.5737%" y="85" width="1.5170%" height="15" fill="rgb(247,81,37)"/><text x="93.8237%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,837,092 samples, 0.11%)</title><rect x="94.9773%" y="69" width="0.1134%" height="15" fill="rgb(209,12,38)"/><text x="95.2273%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (23,018,657 samples, 0.68%)</title><rect x="95.2975%" y="69" width="0.6804%" height="15" fill="rgb(227,1,9)"/><text x="95.5475%" y="79.50"></text></g><g><title>specialization_graph_of (4,659,839 samples, 0.14%)</title><rect x="96.1052%" y="69" width="0.1377%" height="15" fill="rgb(248,47,43)"/><text x="96.3552%" y="79.50"></text></g><g><title>resolve_instance (40,629,026 samples, 1.20%)</title><rect x="95.0907%" y="85" width="1.2009%" height="15" fill="rgb(221,10,30)"/><text x="95.3407%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,609,629 samples, 0.11%)</title><rect x="96.3910%" y="69" width="0.1067%" height="15" fill="rgb(210,229,1)"/><text x="96.6410%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,525,119 samples, 0.10%)</title><rect x="96.3935%" y="53" width="0.1042%" height="15" fill="rgb(222,148,37)"/><text x="96.6435%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,424,628 samples, 0.13%)</title><rect x="96.3699%" y="85" width="0.1308%" height="15" fill="rgb(234,67,33)"/><text x="96.6199%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (4,647,790 samples, 0.14%)</title><rect x="96.5025%" y="85" width="0.1374%" height="15" fill="rgb(247,98,35)"/><text x="96.7525%" y="95.50"></text></g><g><title>upstream_monomorphizations (4,521,938 samples, 0.13%)</title><rect x="96.5062%" y="69" width="0.1337%" height="15" fill="rgb(247,138,52)"/><text x="96.7562%" y="79.50"></text></g><g><title>exported_symbols (3,865,541 samples, 0.11%)</title><rect x="96.5256%" y="53" width="0.1143%" height="15" fill="rgb(213,79,30)"/><text x="96.7756%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,858,541 samples, 0.11%)</title><rect x="96.5258%" y="37" width="0.1141%" height="15" fill="rgb(246,177,23)"/><text x="96.7758%" y="47.50"></text></g><g><title>specialization_graph_of (4,714,551 samples, 0.14%)</title><rect x="96.7421%" y="53" width="0.1394%" height="15" fill="rgb(230,62,27)"/><text x="96.9921%" y="63.50"></text></g><g><title>resolve_instance (6,328,719 samples, 0.19%)</title><rect x="96.6954%" y="69" width="0.1871%" height="15" fill="rgb(216,154,8)"/><text x="96.9454%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (139,602,819 samples, 4.13%)</title><rect x="92.7564%" y="101" width="4.1265%" height="15" fill="rgb(244,35,45)"/><text x="93.0064%" y="111.50">mono..</text></g><g><title>vtable_entries (8,218,419 samples, 0.24%)</title><rect x="96.6399%" y="85" width="0.2429%" height="15" fill="rgb(251,115,12)"/><text x="96.8899%" y="95.50"></text></g><g><title>monomorphization_collector (139,676,020 samples, 4.13%)</title><rect x="92.7562%" y="117" width="4.1286%" height="15" fill="rgb(240,54,50)"/><text x="93.0062%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (13,039,819 samples, 0.39%)</title><rect x="96.8850%" y="101" width="0.3854%" height="15" fill="rgb(233,84,52)"/><text x="97.1350%" y="111.50"></text></g><g><title>symbol_name (11,654,164 samples, 0.34%)</title><rect x="96.9260%" y="85" width="0.3445%" height="15" fill="rgb(207,117,47)"/><text x="97.1760%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (157,724,163 samples, 4.66%)</title><rect x="92.7529%" y="133" width="4.6621%" height="15" fill="rgb(249,43,39)"/><text x="93.0029%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (17,935,651 samples, 0.53%)</title><rect x="96.8849%" y="117" width="0.5302%" height="15" fill="rgb(209,38,44)"/><text x="97.1349%" y="127.50"></text></g><g><title>cgu_partitioning (4,890,172 samples, 0.14%)</title><rect x="97.2705%" y="101" width="0.1445%" height="15" fill="rgb(236,212,23)"/><text x="97.5205%" y="111.50"></text></g><g><title>exported_symbols (158,397,930 samples, 4.68%)</title><rect x="92.7352%" y="149" width="4.6820%" height="15" fill="rgb(242,79,21)"/><text x="92.9852%" y="159.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,074,538 samples, 0.12%)</title><rect x="97.5788%" y="133" width="0.1204%" height="15" fill="rgb(211,96,35)"/><text x="97.8288%" y="143.50"></text></g><g><title>optimized_mir (9,514,804 samples, 0.28%)</title><rect x="97.4208%" y="149" width="0.2812%" height="15" fill="rgb(253,215,40)"/><text x="97.6708%" y="159.50"></text></g><g><title>generate_crate_metadata (171,330,598 samples, 5.06%)</title><rect x="92.6466%" y="165" width="5.0643%" height="15" fill="rgb(211,81,21)"/><text x="92.8966%" y="175.50">genera..</text></g><g><title>hir_lowering (7,899,475 samples, 0.23%)</title><rect x="97.7109%" y="165" width="0.2335%" height="15" fill="rgb(208,190,38)"/><text x="97.9609%" y="175.50"></text></g><g><title>finish_ongoing_codegen (54,660,843 samples, 1.62%)</title><rect x="97.9451%" y="149" width="1.6157%" height="15" fill="rgb(235,213,38)"/><text x="98.1951%" y="159.50"></text></g><g><title>link_crate (9,441,171 samples, 0.28%)</title><rect x="99.5608%" y="149" width="0.2791%" height="15" fill="rgb(237,122,38)"/><text x="99.8108%" y="159.50"></text></g><g><title>link_binary (8,598,422 samples, 0.25%)</title><rect x="99.5857%" y="133" width="0.2542%" height="15" fill="rgb(244,218,35)"/><text x="99.8357%" y="143.50"></text></g><g><title>link_rlib (7,049,706 samples, 0.21%)</title><rect x="99.6314%" y="117" width="0.2084%" height="15" fill="rgb(240,68,47)"/><text x="99.8814%" y="127.50"></text></g><g><title>link (64,138,254 samples, 1.90%)</title><rect x="97.9444%" y="165" width="1.8958%" height="15" fill="rgb(210,16,53)"/><text x="98.1944%" y="175.50">l..</text></g><g><title>all (3,383,118,104 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,383,118,104 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>