<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (69,937,925 samples, 11.82%)</title><rect x="0.1156%" y="197" width="11.8178%" height="15" fill="rgb(227,0,7)"/><text x="0.3656%" y="207.50">LLVM_passes</text></g><g><title>param_env (650,354 samples, 0.11%)</title><rect x="17.4512%" y="117" width="0.1099%" height="15" fill="rgb(217,0,24)"/><text x="17.7012%" y="127.50"></text></g><g><title>is_copy_raw (2,862,385 samples, 0.48%)</title><rect x="19.2207%" y="69" width="0.4837%" height="15" fill="rgb(221,193,54)"/><text x="19.4707%" y="79.50"></text></g><g><title>evaluate_obligation (2,298,708 samples, 0.39%)</title><rect x="19.3160%" y="53" width="0.3884%" height="15" fill="rgb(248,212,6)"/><text x="19.5660%" y="63.50"></text></g><g><title>needs_drop_raw (3,800,194 samples, 0.64%)</title><rect x="19.0668%" y="85" width="0.6421%" height="15" fill="rgb(208,68,35)"/><text x="19.3168%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,015,088 samples, 0.17%)</title><rect x="19.8290%" y="69" width="0.1715%" height="15" fill="rgb(232,128,0)"/><text x="20.0790%" y="79.50"></text></g><g><title>specialization_graph_of (2,120,204 samples, 0.36%)</title><rect x="20.0084%" y="69" width="0.3583%" height="15" fill="rgb(207,160,47)"/><text x="20.2584%" y="79.50"></text></g><g><title>impl_trait_ref (1,275,225 samples, 0.22%)</title><rect x="20.1512%" y="53" width="0.2155%" height="15" fill="rgb(228,23,34)"/><text x="20.4012%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,166,894 samples, 0.20%)</title><rect x="20.1695%" y="37" width="0.1972%" height="15" fill="rgb(218,30,26)"/><text x="20.4195%" y="47.50"></text></g><g><title>resolve_instance (4,102,295 samples, 0.69%)</title><rect x="19.7090%" y="85" width="0.6932%" height="15" fill="rgb(220,122,19)"/><text x="19.9590%" y="95.50"></text></g><g><title>thir_body (2,243,522 samples, 0.38%)</title><rect x="20.4139%" y="85" width="0.3791%" height="15" fill="rgb(250,228,42)"/><text x="20.6639%" y="95.50"></text></g><g><title>mir_const (21,947,224 samples, 3.71%)</title><rect x="17.0926%" y="133" width="3.7085%" height="15" fill="rgb(240,193,28)"/><text x="17.3426%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (19,174,844 samples, 3.24%)</title><rect x="17.5611%" y="117" width="3.2401%" height="15" fill="rgb(216,20,37)"/><text x="17.8111%" y="127.50">uns..</text></g><g><title>mir_built (17,515,584 samples, 2.96%)</title><rect x="17.8414%" y="101" width="2.9597%" height="15" fill="rgb(206,188,39)"/><text x="18.0914%" y="111.50">mir..</text></g><g><title>mir_promoted (24,012,657 samples, 4.06%)</title><rect x="16.7637%" y="149" width="4.0575%" height="15" fill="rgb(217,207,13)"/><text x="17.0137%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (1,704,710 samples, 0.29%)</title><rect x="20.8213%" y="149" width="0.2881%" height="15" fill="rgb(231,73,38)"/><text x="21.0713%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,017,444 samples, 0.17%)</title><rect x="21.1093%" y="149" width="0.1719%" height="15" fill="rgb(225,20,46)"/><text x="21.3593%" y="159.50"></text></g><g><title>normalize_projection_ty (667,742 samples, 0.11%)</title><rect x="21.1684%" y="133" width="0.1128%" height="15" fill="rgb(210,31,41)"/><text x="21.4184%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,058,301 samples, 0.18%)</title><rect x="21.2812%" y="149" width="0.1788%" height="15" fill="rgb(221,200,47)"/><text x="21.5312%" y="159.50"></text></g><g><title>normalize_projection_ty (731,398 samples, 0.12%)</title><rect x="21.3365%" y="133" width="0.1236%" height="15" fill="rgb(226,26,5)"/><text x="21.5865%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,744,890 samples, 1.14%)</title><rect x="21.4623%" y="149" width="1.1397%" height="15" fill="rgb(249,33,26)"/><text x="21.7123%" y="159.50"></text></g><g><title>MIR_borrow_checking (62,698,718 samples, 10.59%)</title><rect x="12.0111%" y="181" width="10.5945%" height="15" fill="rgb(235,183,28)"/><text x="12.2611%" y="191.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (62,366,103 samples, 10.54%)</title><rect x="12.0673%" y="165" width="10.5383%" height="15" fill="rgb(221,5,38)"/><text x="12.3173%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (957,430 samples, 0.16%)</title><rect x="22.6758%" y="165" width="0.1618%" height="15" fill="rgb(247,18,42)"/><text x="22.9258%" y="175.50"></text></g><g><title>misc_checking_1 (1,974,991 samples, 0.33%)</title><rect x="22.6702%" y="181" width="0.3337%" height="15" fill="rgb(241,131,45)"/><text x="22.9202%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,511,426 samples, 0.26%)</title><rect x="23.0042%" y="165" width="0.2554%" height="15" fill="rgb(249,31,29)"/><text x="23.2542%" y="175.50"></text></g><g><title>check_mod_liveness (1,332,763 samples, 0.23%)</title><rect x="23.0344%" y="149" width="0.2252%" height="15" fill="rgb(225,111,53)"/><text x="23.2844%" y="159.50"></text></g><g><title>type_uninhabited_from (602,107 samples, 0.10%)</title><rect x="23.1578%" y="133" width="0.1017%" height="15" fill="rgb(238,160,17)"/><text x="23.4078%" y="143.50"></text></g><g><title>misc_checking_2 (2,634,598 samples, 0.45%)</title><rect x="23.0039%" y="181" width="0.4452%" height="15" fill="rgb(214,148,48)"/><text x="23.2539%" y="191.50"></text></g><g><title>match_checking (1,121,772 samples, 0.19%)</title><rect x="23.2596%" y="165" width="0.1896%" height="15" fill="rgb(232,36,49)"/><text x="23.5096%" y="175.50"></text></g><g><title>check_match (1,053,312 samples, 0.18%)</title><rect x="23.2711%" y="149" width="0.1780%" height="15" fill="rgb(209,103,24)"/><text x="23.5211%" y="159.50"></text></g><g><title>death_checking (723,178 samples, 0.12%)</title><rect x="23.5198%" y="165" width="0.1222%" height="15" fill="rgb(229,88,8)"/><text x="23.7698%" y="175.50"></text></g><g><title>crate_lints (4,393,227 samples, 0.74%)</title><rect x="23.6423%" y="149" width="0.7423%" height="15" fill="rgb(213,181,19)"/><text x="23.8923%" y="159.50"></text></g><g><title>type_of (2,516,295 samples, 0.43%)</title><rect x="23.9595%" y="133" width="0.4252%" height="15" fill="rgb(254,191,54)"/><text x="24.2095%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (2,266,892 samples, 0.38%)</title><rect x="24.0016%" y="117" width="0.3830%" height="15" fill="rgb(241,83,37)"/><text x="24.2516%" y="127.50"></text></g><g><title>lint_checking (5,250,506 samples, 0.89%)</title><rect x="23.6420%" y="165" width="0.8872%" height="15" fill="rgb(233,36,39)"/><text x="23.8920%" y="175.50"></text></g><g><title>module_lints (855,469 samples, 0.14%)</title><rect x="24.3847%" y="149" width="0.1446%" height="15" fill="rgb(226,3,54)"/><text x="24.6347%" y="159.50"></text></g><g><title>lint_mod (844,869 samples, 0.14%)</title><rect x="24.3865%" y="133" width="0.1428%" height="15" fill="rgb(245,192,40)"/><text x="24.6365%" y="143.50"></text></g><g><title>privacy_checking_modules (1,851,510 samples, 0.31%)</title><rect x="24.6213%" y="165" width="0.3129%" height="15" fill="rgb(238,167,29)"/><text x="24.8713%" y="175.50"></text></g><g><title>check_mod_privacy (1,842,980 samples, 0.31%)</title><rect x="24.6228%" y="149" width="0.3114%" height="15" fill="rgb(232,182,51)"/><text x="24.8728%" y="159.50"></text></g><g><title>misc_checking_3 (8,809,314 samples, 1.49%)</title><rect x="23.4491%" y="181" width="1.4886%" height="15" fill="rgb(231,60,39)"/><text x="23.6991%" y="191.50"></text></g><g><title>impl_trait_ref (833,989 samples, 0.14%)</title><rect x="25.0709%" y="117" width="0.1409%" height="15" fill="rgb(208,69,12)"/><text x="25.3209%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (757,329 samples, 0.13%)</title><rect x="25.0838%" y="101" width="0.1280%" height="15" fill="rgb(235,93,37)"/><text x="25.3338%" y="111.50"></text></g><g><title>coherent_trait (1,588,747 samples, 0.27%)</title><rect x="24.9629%" y="149" width="0.2685%" height="15" fill="rgb(213,116,39)"/><text x="25.2129%" y="159.50"></text></g><g><title>specialization_graph_of (1,580,627 samples, 0.27%)</title><rect x="24.9643%" y="133" width="0.2671%" height="15" fill="rgb(222,207,29)"/><text x="25.2143%" y="143.50"></text></g><g><title>coherence_checking (1,675,147 samples, 0.28%)</title><rect x="24.9612%" y="165" width="0.2831%" height="15" fill="rgb(206,96,30)"/><text x="25.2112%" y="175.50"></text></g><g><title>associated_item (719,509 samples, 0.12%)</title><rect x="32.9803%" y="101" width="0.1216%" height="15" fill="rgb(218,138,4)"/><text x="33.2303%" y="111.50"></text></g><g><title>associated_items (1,236,134 samples, 0.21%)</title><rect x="32.9011%" y="117" width="0.2089%" height="15" fill="rgb(250,191,14)"/><text x="33.1511%" y="127.50"></text></g><g><title>adt_dtorck_constraint (615,277 samples, 0.10%)</title><rect x="33.3063%" y="101" width="0.1040%" height="15" fill="rgb(239,60,40)"/><text x="33.5563%" y="111.50"></text></g><g><title>dropck_outlives (1,658,931 samples, 0.28%)</title><rect x="33.1307%" y="117" width="0.2803%" height="15" fill="rgb(206,27,48)"/><text x="33.3807%" y="127.50"></text></g><g><title>trait_impls_of (634,250 samples, 0.11%)</title><rect x="34.2115%" y="101" width="0.1072%" height="15" fill="rgb(225,35,8)"/><text x="34.4615%" y="111.50"></text></g><g><title>evaluate_obligation (5,381,354 samples, 0.91%)</title><rect x="33.4110%" y="117" width="0.9093%" height="15" fill="rgb(250,213,24)"/><text x="33.6610%" y="127.50"></text></g><g><title>method_autoderef_steps (1,190,732 samples, 0.20%)</title><rect x="34.4882%" y="117" width="0.2012%" height="15" fill="rgb(247,123,22)"/><text x="34.7382%" y="127.50"></text></g><g><title>predicates_of (627,539 samples, 0.11%)</title><rect x="34.7138%" y="117" width="0.1060%" height="15" fill="rgb(231,138,38)"/><text x="34.9638%" y="127.50"></text></g><g><title>evaluate_obligation (1,208,182 samples, 0.20%)</title><rect x="35.9935%" y="101" width="0.2042%" height="15" fill="rgb(231,145,46)"/><text x="36.2435%" y="111.50"></text></g><g><title>typeck (8,824,555 samples, 1.49%)</title><rect x="34.8526%" y="117" width="1.4911%" height="15" fill="rgb(251,118,11)"/><text x="35.1026%" y="127.50"></text></g><g><title>item_bodies_checking (65,718,270 samples, 11.10%)</title><rect x="25.2537%" y="165" width="11.1048%" height="15" fill="rgb(217,147,25)"/><text x="25.5037%" y="175.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (65,715,980 samples, 11.10%)</title><rect x="25.2541%" y="149" width="11.1044%" height="15" fill="rgb(247,81,37)"/><text x="25.5041%" y="159.50">typeck_item_bodi..</text></g><g><title>typeck (65,489,018 samples, 11.07%)</title><rect x="25.2924%" y="133" width="11.0660%" height="15" fill="rgb(209,12,38)"/><text x="25.5424%" y="143.50">typeck</text></g><g><title>item_types_checking (846,369 samples, 0.14%)</title><rect x="36.3584%" y="165" width="0.1430%" height="15" fill="rgb(227,1,9)"/><text x="36.6084%" y="175.50"></text></g><g><title>check_mod_item_types (838,079 samples, 0.14%)</title><rect x="36.3598%" y="149" width="0.1416%" height="15" fill="rgb(248,47,43)"/><text x="36.6098%" y="159.50"></text></g><g><title>is_late_bound_map (811,309 samples, 0.14%)</title><rect x="36.7280%" y="117" width="0.1371%" height="15" fill="rgb(221,10,30)"/><text x="36.9780%" y="127.50"></text></g><g><title>resolve_lifetimes (780,358 samples, 0.13%)</title><rect x="36.7332%" y="101" width="0.1319%" height="15" fill="rgb(210,229,1)"/><text x="36.9832%" y="111.50"></text></g><g><title>generics_of (1,213,006 samples, 0.20%)</title><rect x="36.6854%" y="133" width="0.2050%" height="15" fill="rgb(222,148,37)"/><text x="36.9354%" y="143.50"></text></g><g><title>explicit_predicates_of (608,204 samples, 0.10%)</title><rect x="36.9359%" y="101" width="0.1028%" height="15" fill="rgb(234,67,33)"/><text x="37.1859%" y="111.50"></text></g><g><title>predicates_of (1,213,750 samples, 0.21%)</title><rect x="36.8941%" y="133" width="0.2051%" height="15" fill="rgb(247,98,35)"/><text x="37.1441%" y="143.50"></text></g><g><title>predicates_defined_on (1,118,329 samples, 0.19%)</title><rect x="36.9102%" y="117" width="0.1890%" height="15" fill="rgb(247,138,52)"/><text x="37.1602%" y="127.50"></text></g><g><title>type_collecting (3,964,483 samples, 0.67%)</title><rect x="36.5022%" y="165" width="0.6699%" height="15" fill="rgb(213,79,30)"/><text x="36.7522%" y="175.50"></text></g><g><title>collect_mod_item_types (3,948,423 samples, 0.67%)</title><rect x="36.5049%" y="149" width="0.6672%" height="15" fill="rgb(246,177,23)"/><text x="36.7549%" y="159.50"></text></g><g><title>evaluate_obligation (1,167,387 samples, 0.20%)</title><rect x="38.1668%" y="133" width="0.1973%" height="15" fill="rgb(230,62,27)"/><text x="38.4168%" y="143.50"></text></g><g><title>implied_outlives_bounds (799,874 samples, 0.14%)</title><rect x="38.3640%" y="133" width="0.1352%" height="15" fill="rgb(216,154,8)"/><text x="38.6140%" y="143.50"></text></g><g><title>param_env (839,900 samples, 0.14%)</title><rect x="38.4998%" y="133" width="0.1419%" height="15" fill="rgb(244,35,45)"/><text x="38.7498%" y="143.50"></text></g><g><title>region_scope_tree (650,997 samples, 0.11%)</title><rect x="38.6461%" y="133" width="0.1100%" height="15" fill="rgb(251,115,12)"/><text x="38.8961%" y="143.50"></text></g><g><title>check_impl_item_well_formed (8,973,722 samples, 1.52%)</title><rect x="37.2426%" y="149" width="1.5163%" height="15" fill="rgb(240,54,50)"/><text x="37.4926%" y="159.50"></text></g><g><title>check_item_well_formed (4,017,457 samples, 0.68%)</title><rect x="38.7589%" y="149" width="0.6789%" height="15" fill="rgb(233,84,52)"/><text x="39.0089%" y="159.50"></text></g><g><title>analysis (163,161,798 samples, 27.57%)</title><rect x="11.9334%" y="197" width="27.5703%" height="15" fill="rgb(207,117,47)"/><text x="12.1834%" y="207.50">analysis</text></g><g><title>type_check_crate (86,202,199 samples, 14.57%)</title><rect x="24.9377%" y="181" width="14.5660%" height="15" fill="rgb(249,43,39)"/><text x="25.1877%" y="191.50">type_check_crate</text></g><g><title>wf_checking (13,785,877 samples, 2.33%)</title><rect x="37.1742%" y="165" width="2.3295%" height="15" fill="rgb(209,38,44)"/><text x="37.4242%" y="175.50">w..</text></g><g><title>compute_debuginfo_type_name (774,898 samples, 0.13%)</title><rect x="47.1682%" y="165" width="0.1309%" height="15" fill="rgb(236,212,23)"/><text x="47.4182%" y="175.50"></text></g><g><title>const_caller_location (739,049 samples, 0.12%)</title><rect x="47.2991%" y="165" width="0.1249%" height="15" fill="rgb(242,79,21)"/><text x="47.5491%" y="175.50"></text></g><g><title>codegen_fn_attrs (676,429 samples, 0.11%)</title><rect x="47.7822%" y="149" width="0.1143%" height="15" fill="rgb(211,96,35)"/><text x="48.0322%" y="159.50"></text></g><g><title>layout_of (752,201 samples, 0.13%)</title><rect x="48.0334%" y="133" width="0.1271%" height="15" fill="rgb(253,215,40)"/><text x="48.2834%" y="143.50"></text></g><g><title>layout_of (1,705,019 samples, 0.29%)</title><rect x="47.9170%" y="149" width="0.2881%" height="15" fill="rgb(211,81,21)"/><text x="48.1670%" y="159.50"></text></g><g><title>predicates_of (841,997 samples, 0.14%)</title><rect x="48.4610%" y="133" width="0.1423%" height="15" fill="rgb(208,190,38)"/><text x="48.7110%" y="143.50"></text></g><g><title>param_env (2,359,645 samples, 0.40%)</title><rect x="48.2051%" y="149" width="0.3987%" height="15" fill="rgb(235,213,38)"/><text x="48.4551%" y="159.50"></text></g><g><title>fn_abi_of_instance (7,363,977 samples, 1.24%)</title><rect x="47.4266%" y="165" width="1.2443%" height="15" fill="rgb(237,122,38)"/><text x="47.6766%" y="175.50"></text></g><g><title>layout_of (636,847 samples, 0.11%)</title><rect x="48.8969%" y="117" width="0.1076%" height="15" fill="rgb(244,218,35)"/><text x="49.1469%" y="127.50"></text></g><g><title>layout_of (805,488 samples, 0.14%)</title><rect x="48.8755%" y="133" width="0.1361%" height="15" fill="rgb(240,68,47)"/><text x="49.1255%" y="143.50"></text></g><g><title>layout_of (1,279,213 samples, 0.22%)</title><rect x="48.8189%" y="149" width="0.2162%" height="15" fill="rgb(210,16,53)"/><text x="49.0689%" y="159.50"></text></g><g><title>layout_of (2,269,232 samples, 0.38%)</title><rect x="48.7189%" y="165" width="0.3834%" height="15" fill="rgb(235,124,12)"/><text x="48.9689%" y="175.50"></text></g><g><title>symbol_name (794,945 samples, 0.13%)</title><rect x="49.1054%" y="165" width="0.1343%" height="15" fill="rgb(224,169,11)"/><text x="49.3554%" y="175.50"></text></g><g><title>codegen_module (54,493,552 samples, 9.21%)</title><rect x="40.0491%" y="181" width="9.2081%" height="15" fill="rgb(250,166,2)"/><text x="40.2991%" y="191.50">codegen_module</text></g><g><title>codegen_crate (57,790,086 samples, 9.77%)</title><rect x="39.5054%" y="197" width="9.7651%" height="15" fill="rgb(242,216,29)"/><text x="39.7554%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (180,065,719 samples, 30.43%)</title><rect x="49.2964%" y="181" width="30.4267%" height="15" fill="rgb(230,116,27)"/><text x="49.5464%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (171,849,990 samples, 29.04%)</title><rect x="50.6847%" y="165" width="29.0384%" height="15" fill="rgb(228,99,48)"/><text x="50.9347%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (187,299,825 samples, 31.65%)</title><rect x="49.2705%" y="197" width="31.6491%" height="15" fill="rgb(253,11,6)"/><text x="49.5205%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,080,896 samples, 1.20%)</title><rect x="79.7231%" y="181" width="1.1965%" height="15" fill="rgb(247,143,39)"/><text x="79.9731%" y="191.50"></text></g><g><title>metadata_register_crate (2,827,371 samples, 0.48%)</title><rect x="86.5726%" y="149" width="0.4778%" height="15" fill="rgb(236,97,10)"/><text x="86.8226%" y="159.50"></text></g><g><title>metadata_register_crate (988,061 samples, 0.17%)</title><rect x="86.8834%" y="133" width="0.1670%" height="15" fill="rgb(233,208,19)"/><text x="87.1334%" y="143.50"></text></g><g><title>macro_expand_crate (36,218,576 samples, 6.12%)</title><rect x="81.0735%" y="181" width="6.1200%" height="15" fill="rgb(216,164,2)"/><text x="81.3235%" y="191.50">macro_ex..</text></g><g><title>expand_crate (36,203,936 samples, 6.12%)</title><rect x="81.0759%" y="165" width="6.1176%" height="15" fill="rgb(220,129,5)"/><text x="81.3259%" y="175.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (847,020 samples, 0.14%)</title><rect x="87.0504%" y="149" width="0.1431%" height="15" fill="rgb(242,17,10)"/><text x="87.3004%" y="159.50"></text></g><g><title>late_resolve_crate (6,286,717 samples, 1.06%)</title><rect x="87.2754%" y="165" width="1.0623%" height="15" fill="rgb(242,107,0)"/><text x="87.5254%" y="175.50"></text></g><g><title>configure_and_expand (44,361,402 samples, 7.50%)</title><rect x="80.9196%" y="197" width="7.4960%" height="15" fill="rgb(251,28,31)"/><text x="81.1696%" y="207.50">configure_..</text></g><g><title>resolve_crate (7,107,965 samples, 1.20%)</title><rect x="87.2145%" y="181" width="1.2011%" height="15" fill="rgb(233,223,10)"/><text x="87.4645%" y="191.50"></text></g><g><title>free_global_ctxt (5,422,497 samples, 0.92%)</title><rect x="88.5443%" y="197" width="0.9163%" height="15" fill="rgb(215,21,27)"/><text x="88.7943%" y="207.50"></text></g><g><title>codegen_fn_attrs (856,628 samples, 0.14%)</title><rect x="90.2124%" y="117" width="0.1447%" height="15" fill="rgb(232,23,21)"/><text x="90.4624%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (950,373 samples, 0.16%)</title><rect x="90.9591%" y="101" width="0.1606%" height="15" fill="rgb(244,5,23)"/><text x="91.2091%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,869,893 samples, 0.65%)</title><rect x="91.1197%" y="101" width="0.6539%" height="15" fill="rgb(226,81,46)"/><text x="91.3697%" y="111.50"></text></g><g><title>optimized_mir (8,010,136 samples, 1.35%)</title><rect x="90.4574%" y="117" width="1.3535%" height="15" fill="rgb(247,70,30)"/><text x="90.7074%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,370,156 samples, 0.23%)</title><rect x="91.8994%" y="101" width="0.2315%" height="15" fill="rgb(212,68,19)"/><text x="92.1494%" y="111.50"></text></g><g><title>specialization_graph_of (1,444,877 samples, 0.24%)</title><rect x="92.2029%" y="101" width="0.2441%" height="15" fill="rgb(240,187,13)"/><text x="92.4529%" y="111.50"></text></g><g><title>impl_trait_ref (619,983 samples, 0.10%)</title><rect x="92.3423%" y="85" width="0.1048%" height="15" fill="rgb(223,113,26)"/><text x="92.5923%" y="95.50"></text></g><g><title>resolve_instance (3,935,438 samples, 0.66%)</title><rect x="91.8110%" y="117" width="0.6650%" height="15" fill="rgb(206,192,2)"/><text x="92.0610%" y="127.50"></text></g><g><title>impl_parent (908,993 samples, 0.15%)</title><rect x="92.8586%" y="69" width="0.1536%" height="15" fill="rgb(241,108,4)"/><text x="93.1086%" y="79.50"></text></g><g><title>impl_trait_ref (1,102,737 samples, 0.19%)</title><rect x="93.0122%" y="69" width="0.1863%" height="15" fill="rgb(247,173,49)"/><text x="93.2622%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (809,753 samples, 0.14%)</title><rect x="93.0617%" y="53" width="0.1368%" height="15" fill="rgb(224,114,35)"/><text x="93.3117%" y="63.50"></text></g><g><title>specialization_graph_of (3,105,604 samples, 0.52%)</title><rect x="92.6739%" y="85" width="0.5248%" height="15" fill="rgb(245,159,27)"/><text x="92.9239%" y="95.50"></text></g><g><title>resolve_instance (3,273,596 samples, 0.55%)</title><rect x="92.6469%" y="101" width="0.5532%" height="15" fill="rgb(245,172,44)"/><text x="92.8969%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (18,954,121 samples, 3.20%)</title><rect x="89.9978%" y="133" width="3.2028%" height="15" fill="rgb(236,23,11)"/><text x="90.2478%" y="143.50">mon..</text></g><g><title>vtable_entries (3,852,040 samples, 0.65%)</title><rect x="92.5497%" y="117" width="0.6509%" height="15" fill="rgb(205,117,38)"/><text x="92.7997%" y="127.50"></text></g><g><title>monomorphization_collector (19,054,643 samples, 3.22%)</title><rect x="89.9973%" y="149" width="3.2198%" height="15" fill="rgb(237,72,25)"/><text x="90.2473%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,196,053 samples, 0.20%)</title><rect x="93.2188%" y="133" width="0.2021%" height="15" fill="rgb(244,70,9)"/><text x="93.4688%" y="143.50"></text></g><g><title>symbol_name (1,095,323 samples, 0.19%)</title><rect x="93.2358%" y="117" width="0.1851%" height="15" fill="rgb(217,125,39)"/><text x="93.4858%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (20,869,872 samples, 3.53%)</title><rect x="89.9925%" y="165" width="3.5265%" height="15" fill="rgb(235,36,10)"/><text x="90.2425%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,787,059 samples, 0.30%)</title><rect x="93.2171%" y="149" width="0.3020%" height="15" fill="rgb(251,123,47)"/><text x="93.4671%" y="159.50"></text></g><g><title>exported_symbols (21,144,145 samples, 3.57%)</title><rect x="89.9822%" y="181" width="3.5728%" height="15" fill="rgb(221,13,13)"/><text x="90.2322%" y="191.50">expo..</text></g><g><title>layout_of (719,905 samples, 0.12%)</title><rect x="94.6775%" y="149" width="0.1216%" height="15" fill="rgb(238,131,9)"/><text x="94.9275%" y="159.50"></text></g><g><title>layout_of (1,690,873 samples, 0.29%)</title><rect x="94.5199%" y="165" width="0.2857%" height="15" fill="rgb(211,50,8)"/><text x="94.7699%" y="175.50"></text></g><g><title>needs_drop_raw (1,156,556 samples, 0.20%)</title><rect x="96.0449%" y="149" width="0.1954%" height="15" fill="rgb(245,182,24)"/><text x="96.2949%" y="159.50"></text></g><g><title>is_copy_raw (994,654 samples, 0.17%)</title><rect x="96.0722%" y="133" width="0.1681%" height="15" fill="rgb(242,14,37)"/><text x="96.3222%" y="143.50"></text></g><g><title>evaluate_obligation (773,893 samples, 0.13%)</title><rect x="96.1095%" y="117" width="0.1308%" height="15" fill="rgb(246,228,12)"/><text x="96.3595%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,562,070 samples, 1.45%)</title><rect x="94.8056%" y="165" width="1.4468%" height="15" fill="rgb(213,55,15)"/><text x="95.0556%" y="175.50"></text></g><g><title>optimized_mir (15,741,266 samples, 2.66%)</title><rect x="93.5934%" y="181" width="2.6599%" height="15" fill="rgb(209,9,3)"/><text x="93.8434%" y="191.50">op..</text></g><g><title>generate_crate_metadata (40,398,010 samples, 6.83%)</title><rect x="89.4606%" y="197" width="6.8263%" height="15" fill="rgb(230,59,30)"/><text x="89.7106%" y="207.50">generate_..</text></g><g><title>hir_lowering (7,638,032 samples, 1.29%)</title><rect x="96.2868%" y="197" width="1.2906%" height="15" fill="rgb(209,121,21)"/><text x="96.5368%" y="207.50"></text></g><g><title>finish_ongoing_codegen (8,837,194 samples, 1.49%)</title><rect x="97.5794%" y="181" width="1.4933%" height="15" fill="rgb(220,109,13)"/><text x="97.8294%" y="191.50"></text></g><g><title>link_crate (2,208,353 samples, 0.37%)</title><rect x="99.0727%" y="181" width="0.3732%" height="15" fill="rgb(232,18,1)"/><text x="99.3227%" y="191.50"></text></g><g><title>link_binary (2,159,843 samples, 0.36%)</title><rect x="99.0809%" y="165" width="0.3650%" height="15" fill="rgb(215,41,42)"/><text x="99.3309%" y="175.50"></text></g><g><title>link_rlib (1,566,367 samples, 0.26%)</title><rect x="99.1812%" y="149" width="0.2647%" height="15" fill="rgb(224,123,36)"/><text x="99.4312%" y="159.50"></text></g><g><title>link (11,065,978 samples, 1.87%)</title><rect x="97.5775%" y="197" width="1.8699%" height="15" fill="rgb(240,125,3)"/><text x="97.8275%" y="207.50">l..</text></g><g><title>parse_crate (850,889 samples, 0.14%)</title><rect x="99.4474%" y="197" width="0.1438%" height="15" fill="rgb(205,98,50)"/><text x="99.6974%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,459,676 samples, 0.25%)</title><rect x="99.6606%" y="197" width="0.2466%" height="15" fill="rgb(205,185,37)"/><text x="99.9106%" y="207.50"></text></g><g><title>all (591,802,263 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (591,802,263 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>