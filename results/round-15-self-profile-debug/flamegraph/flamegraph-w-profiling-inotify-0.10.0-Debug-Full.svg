<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (86,568,346 samples, 9.80%)</title><rect x="0.1292%" y="181" width="9.7964%" height="15" fill="rgb(227,0,7)"/><text x="0.3792%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,667,815 samples, 0.19%)</title><rect x="15.3222%" y="69" width="0.1887%" height="15" fill="rgb(217,0,24)"/><text x="15.5722%" y="79.50"></text></g><g><title>is_copy_raw (1,134,289 samples, 0.13%)</title><rect x="15.3826%" y="53" width="0.1284%" height="15" fill="rgb(221,193,54)"/><text x="15.6326%" y="63.50"></text></g><g><title>evaluate_obligation (959,507 samples, 0.11%)</title><rect x="15.4023%" y="37" width="0.1086%" height="15" fill="rgb(248,212,6)"/><text x="15.6523%" y="47.50"></text></g><g><title>resolve_instance (1,308,536 samples, 0.15%)</title><rect x="15.5148%" y="69" width="0.1481%" height="15" fill="rgb(208,68,35)"/><text x="15.7648%" y="79.50"></text></g><g><title>thir_body (2,749,681 samples, 0.31%)</title><rect x="15.6707%" y="69" width="0.3112%" height="15" fill="rgb(232,128,0)"/><text x="15.9207%" y="79.50"></text></g><g><title>mir_const (17,758,577 samples, 2.01%)</title><rect x="13.9776%" y="117" width="2.0096%" height="15" fill="rgb(207,160,47)"/><text x="14.2276%" y="127.50">m..</text></g><g><title>unsafety_check_result (15,257,635 samples, 1.73%)</title><rect x="14.2607%" y="101" width="1.7266%" height="15" fill="rgb(228,23,34)"/><text x="14.5107%" y="111.50"></text></g><g><title>mir_built (13,729,792 samples, 1.55%)</title><rect x="14.4335%" y="85" width="1.5537%" height="15" fill="rgb(218,30,26)"/><text x="14.6835%" y="95.50"></text></g><g><title>mir_const (3,018,581 samples, 0.34%)</title><rect x="16.1021%" y="101" width="0.3416%" height="15" fill="rgb(220,122,19)"/><text x="16.3521%" y="111.50"></text></g><g><title>unsafety_check_result (2,305,004 samples, 0.26%)</title><rect x="16.1828%" y="85" width="0.2608%" height="15" fill="rgb(250,228,42)"/><text x="16.4328%" y="95.50"></text></g><g><title>mir_built (2,016,989 samples, 0.23%)</title><rect x="16.2154%" y="69" width="0.2283%" height="15" fill="rgb(240,193,28)"/><text x="16.4654%" y="79.50"></text></g><g><title>mir_promoted (24,551,723 samples, 2.78%)</title><rect x="13.6686%" y="133" width="2.7784%" height="15" fill="rgb(216,20,37)"/><text x="13.9186%" y="143.50">mi..</text></g><g><title>mir_const_qualif (4,061,993 samples, 0.46%)</title><rect x="15.9873%" y="117" width="0.4597%" height="15" fill="rgb(206,188,39)"/><text x="16.2373%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (1,161,640 samples, 0.13%)</title><rect x="16.4494%" y="133" width="0.1315%" height="15" fill="rgb(217,207,13)"/><text x="16.6994%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,817,614 samples, 0.32%)</title><rect x="16.6709%" y="133" width="0.3189%" height="15" fill="rgb(231,73,38)"/><text x="16.9209%" y="143.50"></text></g><g><title>MIR_borrow_checking (61,754,356 samples, 6.99%)</title><rect x="10.0031%" y="165" width="6.9884%" height="15" fill="rgb(225,20,46)"/><text x="10.2531%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (61,256,011 samples, 6.93%)</title><rect x="10.0595%" y="149" width="6.9320%" height="15" fill="rgb(210,31,41)"/><text x="10.3095%" y="159.50">mir_borro..</text></g><g><title>MIR_effect_checking (1,819,228 samples, 0.21%)</title><rect x="16.9915%" y="165" width="0.2059%" height="15" fill="rgb(221,200,47)"/><text x="17.2415%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,560,267 samples, 0.18%)</title><rect x="17.0208%" y="149" width="0.1766%" height="15" fill="rgb(226,26,5)"/><text x="17.2708%" y="159.50"></text></g><g><title>check_mod_attrs (1,625,998 samples, 0.18%)</title><rect x="17.2622%" y="149" width="0.1840%" height="15" fill="rgb(249,33,26)"/><text x="17.5122%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (930,149 samples, 0.11%)</title><rect x="17.5039%" y="149" width="0.1053%" height="15" fill="rgb(235,183,28)"/><text x="17.7539%" y="159.50"></text></g><g><title>misc_checking_1 (3,183,732 samples, 0.36%)</title><rect x="17.2587%" y="165" width="0.3603%" height="15" fill="rgb(221,5,38)"/><text x="17.5087%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,154,902 samples, 0.13%)</title><rect x="17.6191%" y="149" width="0.1307%" height="15" fill="rgb(247,18,42)"/><text x="17.8691%" y="159.50"></text></g><g><title>check_mod_liveness (914,679 samples, 0.10%)</title><rect x="17.6463%" y="133" width="0.1035%" height="15" fill="rgb(241,131,45)"/><text x="17.8963%" y="143.50"></text></g><g><title>misc_checking_2 (2,646,386 samples, 0.30%)</title><rect x="17.6189%" y="165" width="0.2995%" height="15" fill="rgb(249,31,29)"/><text x="17.8689%" y="175.50"></text></g><g><title>match_checking (1,489,744 samples, 0.17%)</title><rect x="17.7498%" y="149" width="0.1686%" height="15" fill="rgb(225,111,53)"/><text x="17.9998%" y="159.50"></text></g><g><title>check_match (1,377,133 samples, 0.16%)</title><rect x="17.7626%" y="133" width="0.1558%" height="15" fill="rgb(238,160,17)"/><text x="18.0126%" y="143.50"></text></g><g><title>death_checking (1,251,503 samples, 0.14%)</title><rect x="17.9790%" y="149" width="0.1416%" height="15" fill="rgb(214,148,48)"/><text x="18.2290%" y="159.50"></text></g><g><title>crate_lints (4,222,693 samples, 0.48%)</title><rect x="18.1208%" y="133" width="0.4779%" height="15" fill="rgb(232,36,49)"/><text x="18.3708%" y="143.50"></text></g><g><title>type_of (1,306,181 samples, 0.15%)</title><rect x="18.4509%" y="117" width="0.1478%" height="15" fill="rgb(209,103,24)"/><text x="18.7009%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,043,681 samples, 0.12%)</title><rect x="18.4806%" y="101" width="0.1181%" height="15" fill="rgb(229,88,8)"/><text x="18.7306%" y="111.50"></text></g><g><title>lint_checking (5,385,344 samples, 0.61%)</title><rect x="18.1206%" y="149" width="0.6094%" height="15" fill="rgb(213,181,19)"/><text x="18.3706%" y="159.50"></text></g><g><title>module_lints (1,160,531 samples, 0.13%)</title><rect x="18.5987%" y="133" width="0.1313%" height="15" fill="rgb(254,191,54)"/><text x="18.8487%" y="143.50"></text></g><g><title>lint_mod (1,151,641 samples, 0.13%)</title><rect x="18.5997%" y="117" width="0.1303%" height="15" fill="rgb(241,83,37)"/><text x="18.8497%" y="127.50"></text></g><g><title>privacy_checking_modules (1,928,950 samples, 0.22%)</title><rect x="18.8063%" y="149" width="0.2183%" height="15" fill="rgb(233,36,39)"/><text x="19.0563%" y="159.50"></text></g><g><title>check_mod_privacy (1,923,270 samples, 0.22%)</title><rect x="18.8069%" y="133" width="0.2176%" height="15" fill="rgb(226,3,54)"/><text x="19.0569%" y="143.50"></text></g><g><title>misc_checking_3 (9,806,769 samples, 1.11%)</title><rect x="17.9184%" y="165" width="1.1098%" height="15" fill="rgb(245,192,40)"/><text x="18.1684%" y="175.50"></text></g><g><title>impl_parent (3,727,945 samples, 0.42%)</title><rect x="19.8654%" y="101" width="0.4219%" height="15" fill="rgb(238,167,29)"/><text x="20.1154%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,121,728 samples, 0.24%)</title><rect x="20.0472%" y="85" width="0.2401%" height="15" fill="rgb(232,182,51)"/><text x="20.2972%" y="95.50"></text></g><g><title>impl_trait_ref (7,611,637 samples, 0.86%)</title><rect x="20.2873%" y="101" width="0.8614%" height="15" fill="rgb(231,60,39)"/><text x="20.5373%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,804,185 samples, 0.66%)</title><rect x="20.4918%" y="85" width="0.6568%" height="15" fill="rgb(208,69,12)"/><text x="20.7418%" y="95.50"></text></g><g><title>coherent_trait (20,181,105 samples, 2.28%)</title><rect x="19.0551%" y="133" width="2.2838%" height="15" fill="rgb(235,93,37)"/><text x="19.3051%" y="143.50">c..</text></g><g><title>specialization_graph_of (19,437,316 samples, 2.20%)</title><rect x="19.1392%" y="117" width="2.1996%" height="15" fill="rgb(213,116,39)"/><text x="19.3892%" y="127.50">s..</text></g><g><title>trait_impls_of (1,678,475 samples, 0.19%)</title><rect x="21.1489%" y="101" width="0.1899%" height="15" fill="rgb(222,207,29)"/><text x="21.3989%" y="111.50"></text></g><g><title>coherence_checking (20,512,008 samples, 2.32%)</title><rect x="19.0508%" y="149" width="2.3212%" height="15" fill="rgb(206,96,30)"/><text x="19.3008%" y="159.50">c..</text></g><g><title>associated_items (891,322 samples, 0.10%)</title><rect x="27.7764%" y="101" width="0.1009%" height="15" fill="rgb(218,138,4)"/><text x="28.0264%" y="111.50"></text></g><g><title>evaluate_obligation (4,271,164 samples, 0.48%)</title><rect x="27.9820%" y="101" width="0.4833%" height="15" fill="rgb(250,191,14)"/><text x="28.2320%" y="111.50"></text></g><g><title>typeck (4,364,224 samples, 0.49%)</title><rect x="28.7462%" y="101" width="0.4939%" height="15" fill="rgb(239,60,40)"/><text x="28.9962%" y="111.50"></text></g><g><title>item_bodies_checking (69,563,984 samples, 7.87%)</title><rect x="21.3831%" y="149" width="7.8722%" height="15" fill="rgb(206,27,48)"/><text x="21.6331%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (69,560,114 samples, 7.87%)</title><rect x="21.3836%" y="133" width="7.8717%" height="15" fill="rgb(225,35,8)"/><text x="21.6336%" y="143.50">typeck_item..</text></g><g><title>typeck (69,219,320 samples, 7.83%)</title><rect x="21.4221%" y="117" width="7.8331%" height="15" fill="rgb(250,213,24)"/><text x="21.6721%" y="127.50">typeck</text></g><g><title>item_types_checking (3,116,891 samples, 0.35%)</title><rect x="29.2553%" y="149" width="0.3527%" height="15" fill="rgb(247,123,22)"/><text x="29.5053%" y="159.50"></text></g><g><title>check_mod_item_types (3,109,411 samples, 0.35%)</title><rect x="29.2561%" y="133" width="0.3519%" height="15" fill="rgb(231,138,38)"/><text x="29.5061%" y="143.50"></text></g><g><title>generics_of (1,681,620 samples, 0.19%)</title><rect x="29.7865%" y="117" width="0.1903%" height="15" fill="rgb(231,145,46)"/><text x="30.0365%" y="127.50"></text></g><g><title>predicates_of (1,124,320 samples, 0.13%)</title><rect x="29.9924%" y="117" width="0.1272%" height="15" fill="rgb(251,118,11)"/><text x="30.2424%" y="127.50"></text></g><g><title>predicates_defined_on (969,760 samples, 0.11%)</title><rect x="30.0099%" y="101" width="0.1097%" height="15" fill="rgb(217,147,25)"/><text x="30.2599%" y="111.50"></text></g><g><title>type_collecting (4,746,057 samples, 0.54%)</title><rect x="29.6087%" y="149" width="0.5371%" height="15" fill="rgb(247,81,37)"/><text x="29.8587%" y="159.50"></text></g><g><title>collect_mod_item_types (4,729,367 samples, 0.54%)</title><rect x="29.6106%" y="133" width="0.5352%" height="15" fill="rgb(209,12,38)"/><text x="29.8606%" y="143.50"></text></g><g><title>evaluate_obligation (939,027 samples, 0.11%)</title><rect x="30.6768%" y="117" width="0.1063%" height="15" fill="rgb(227,1,9)"/><text x="30.9268%" y="127.50"></text></g><g><title>region_scope_tree (1,157,200 samples, 0.13%)</title><rect x="30.9188%" y="117" width="0.1310%" height="15" fill="rgb(248,47,43)"/><text x="31.1688%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,518,699 samples, 0.85%)</title><rect x="30.2097%" y="133" width="0.8508%" height="15" fill="rgb(221,10,30)"/><text x="30.4597%" y="143.50"></text></g><g><title>check_item_well_formed (3,472,463 samples, 0.39%)</title><rect x="31.0605%" y="133" width="0.3930%" height="15" fill="rgb(210,229,1)"/><text x="31.3105%" y="143.50"></text></g><g><title>analysis (191,848,921 samples, 21.71%)</title><rect x="9.9256%" y="181" width="21.7104%" height="15" fill="rgb(222,148,37)"/><text x="10.1756%" y="191.50">analysis</text></g><g><title>type_check_crate (111,412,078 samples, 12.61%)</title><rect x="19.0282%" y="165" width="12.6079%" height="15" fill="rgb(234,67,33)"/><text x="19.2782%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,147,703 samples, 1.49%)</title><rect x="30.1482%" y="149" width="1.4878%" height="15" fill="rgb(247,98,35)"/><text x="30.3982%" y="159.50"></text></g><g><title>check_trait_item_well_formed (1,613,327 samples, 0.18%)</title><rect x="31.4535%" y="133" width="0.1826%" height="15" fill="rgb(247,138,52)"/><text x="31.7035%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,213,686 samples, 0.14%)</title><rect x="38.2913%" y="149" width="0.1373%" height="15" fill="rgb(213,79,30)"/><text x="38.5413%" y="159.50"></text></g><g><title>codegen_fn_attrs (945,857 samples, 0.11%)</title><rect x="38.8626%" y="133" width="0.1070%" height="15" fill="rgb(246,177,23)"/><text x="39.1126%" y="143.50"></text></g><g><title>layout_of (1,654,596 samples, 0.19%)</title><rect x="38.9882%" y="133" width="0.1872%" height="15" fill="rgb(230,62,27)"/><text x="39.2382%" y="143.50"></text></g><g><title>predicates_of (1,319,900 samples, 0.15%)</title><rect x="39.4810%" y="117" width="0.1494%" height="15" fill="rgb(216,154,8)"/><text x="39.7310%" y="127.50"></text></g><g><title>predicates_defined_on (947,817 samples, 0.11%)</title><rect x="39.5231%" y="101" width="0.1073%" height="15" fill="rgb(244,35,45)"/><text x="39.7731%" y="111.50"></text></g><g><title>param_env (4,039,209 samples, 0.46%)</title><rect x="39.1754%" y="133" width="0.4571%" height="15" fill="rgb(251,115,12)"/><text x="39.4254%" y="143.50"></text></g><g><title>fn_abi_of_instance (10,613,200 samples, 1.20%)</title><rect x="38.5119%" y="149" width="1.2010%" height="15" fill="rgb(240,54,50)"/><text x="38.7619%" y="159.50"></text></g><g><title>layout_of (1,198,514 samples, 0.14%)</title><rect x="39.9041%" y="101" width="0.1356%" height="15" fill="rgb(233,84,52)"/><text x="40.1541%" y="111.50"></text></g><g><title>layout_of (1,416,825 samples, 0.16%)</title><rect x="39.8893%" y="117" width="0.1603%" height="15" fill="rgb(207,117,47)"/><text x="40.1393%" y="127.50"></text></g><g><title>layout_of (1,735,530 samples, 0.20%)</title><rect x="39.8680%" y="133" width="0.1964%" height="15" fill="rgb(249,43,39)"/><text x="40.1180%" y="143.50"></text></g><g><title>layout_of (2,786,501 samples, 0.32%)</title><rect x="39.7627%" y="149" width="0.3153%" height="15" fill="rgb(209,38,44)"/><text x="40.0127%" y="159.50"></text></g><g><title>symbol_name (1,216,066 samples, 0.14%)</title><rect x="40.0808%" y="149" width="0.1376%" height="15" fill="rgb(236,212,23)"/><text x="40.3308%" y="159.50"></text></g><g><title>codegen_module (73,605,434 samples, 8.33%)</title><rect x="31.8955%" y="165" width="8.3295%" height="15" fill="rgb(242,79,21)"/><text x="32.1455%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (75,993,159 samples, 8.60%)</title><rect x="31.6373%" y="181" width="8.5997%" height="15" fill="rgb(211,96,35)"/><text x="31.8873%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (326,843,797 samples, 36.99%)</title><rect x="40.2689%" y="165" width="36.9870%" height="15" fill="rgb(253,215,40)"/><text x="40.5189%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (311,829,044 samples, 35.29%)</title><rect x="41.9680%" y="149" width="35.2879%" height="15" fill="rgb(211,81,21)"/><text x="42.2180%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (339,878,749 samples, 38.46%)</title><rect x="40.2370%" y="181" width="38.4621%" height="15" fill="rgb(208,190,38)"/><text x="40.4870%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,752,881 samples, 1.44%)</title><rect x="77.2559%" y="165" width="1.4432%" height="15" fill="rgb(235,213,38)"/><text x="77.5059%" y="175.50"></text></g><g><title>metadata_register_crate (8,736,728 samples, 0.99%)</title><rect x="89.0456%" y="133" width="0.9887%" height="15" fill="rgb(237,122,38)"/><text x="89.2956%" y="143.50"></text></g><g><title>metadata_register_crate (6,166,703 samples, 0.70%)</title><rect x="89.3364%" y="117" width="0.6978%" height="15" fill="rgb(244,218,35)"/><text x="89.5864%" y="127.50"></text></g><g><title>macro_expand_crate (99,617,878 samples, 11.27%)</title><rect x="78.8080%" y="165" width="11.2732%" height="15" fill="rgb(240,68,47)"/><text x="79.0580%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (99,602,408 samples, 11.27%)</title><rect x="78.8097%" y="149" width="11.2714%" height="15" fill="rgb(210,16,53)"/><text x="79.0597%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (3,419,454 samples, 0.39%)</title><rect x="90.1788%" y="149" width="0.3870%" height="15" fill="rgb(235,124,12)"/><text x="90.4288%" y="159.50"></text></g><g><title>configure_and_expand (105,099,093 samples, 11.89%)</title><rect x="78.6991%" y="181" width="11.8935%" height="15" fill="rgb(224,169,11)"/><text x="78.9491%" y="191.50">configure_and_expa..</text></g><g><title>resolve_crate (4,417,594 samples, 0.50%)</title><rect x="90.0926%" y="165" width="0.4999%" height="15" fill="rgb(250,166,2)"/><text x="90.3426%" y="175.50"></text></g><g><title>early_lint_checks (896,899 samples, 0.10%)</title><rect x="90.6749%" y="181" width="0.1015%" height="15" fill="rgb(242,216,29)"/><text x="90.9249%" y="191.50"></text></g><g><title>free_global_ctxt (8,271,894 samples, 0.94%)</title><rect x="90.7764%" y="181" width="0.9361%" height="15" fill="rgb(230,116,27)"/><text x="91.0264%" y="191.50"></text></g><g><title>item_attrs (1,467,492 samples, 0.17%)</title><rect x="92.5024%" y="85" width="0.1661%" height="15" fill="rgb(228,99,48)"/><text x="92.7524%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,435,062 samples, 0.16%)</title><rect x="92.5061%" y="69" width="0.1624%" height="15" fill="rgb(253,11,6)"/><text x="92.7561%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,924,516 samples, 0.22%)</title><rect x="92.4772%" y="101" width="0.2178%" height="15" fill="rgb(247,143,39)"/><text x="92.7272%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,564,834 samples, 0.18%)</title><rect x="93.3029%" y="85" width="0.1771%" height="15" fill="rgb(236,97,10)"/><text x="93.5529%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,091,692 samples, 0.58%)</title><rect x="93.4800%" y="85" width="0.5762%" height="15" fill="rgb(233,208,19)"/><text x="93.7300%" y="95.50"></text></g><g><title>optimized_mir (11,998,302 samples, 1.36%)</title><rect x="92.7862%" y="101" width="1.3578%" height="15" fill="rgb(216,164,2)"/><text x="93.0362%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,301,171 samples, 0.26%)</title><rect x="94.2358%" y="85" width="0.2604%" height="15" fill="rgb(220,129,5)"/><text x="94.4858%" y="95.50"></text></g><g><title>specialization_graph_of (1,240,051 samples, 0.14%)</title><rect x="94.5548%" y="85" width="0.1403%" height="15" fill="rgb(242,17,10)"/><text x="94.8048%" y="95.50"></text></g><g><title>resolve_instance (5,181,524 samples, 0.59%)</title><rect x="94.1440%" y="101" width="0.5864%" height="15" fill="rgb(242,107,0)"/><text x="94.3940%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (4,314,724 samples, 0.49%)</title><rect x="94.8191%" y="101" width="0.4883%" height="15" fill="rgb(251,28,31)"/><text x="95.0691%" y="111.50"></text></g><g><title>upstream_monomorphizations (4,288,744 samples, 0.49%)</title><rect x="94.8220%" y="85" width="0.4853%" height="15" fill="rgb(233,223,10)"/><text x="95.0720%" y="95.50"></text></g><g><title>exported_symbols (3,923,748 samples, 0.44%)</title><rect x="94.8633%" y="69" width="0.4440%" height="15" fill="rgb(215,21,27)"/><text x="95.1133%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,916,738 samples, 0.44%)</title><rect x="94.8641%" y="53" width="0.4432%" height="15" fill="rgb(232,23,21)"/><text x="95.1141%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (27,241,716 samples, 3.08%)</title><rect x="92.2589%" y="117" width="3.0828%" height="15" fill="rgb(244,5,23)"/><text x="92.5089%" y="127.50">mon..</text></g><g><title>monomorphization_collector (27,365,627 samples, 3.10%)</title><rect x="92.2584%" y="133" width="3.0968%" height="15" fill="rgb(226,81,46)"/><text x="92.5084%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,876,898 samples, 0.21%)</title><rect x="95.3566%" y="117" width="0.2124%" height="15" fill="rgb(247,70,30)"/><text x="95.6066%" y="127.50"></text></g><g><title>symbol_name (1,736,343 samples, 0.20%)</title><rect x="95.3725%" y="101" width="0.1965%" height="15" fill="rgb(212,68,19)"/><text x="95.6225%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (30,079,204 samples, 3.40%)</title><rect x="92.2540%" y="149" width="3.4039%" height="15" fill="rgb(240,187,13)"/><text x="92.5040%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,674,906 samples, 0.30%)</title><rect x="95.3552%" y="133" width="0.3027%" height="15" fill="rgb(223,113,26)"/><text x="95.6052%" y="143.50"></text></g><g><title>exported_symbols (30,515,988 samples, 3.45%)</title><rect x="92.2463%" y="165" width="3.4533%" height="15" fill="rgb(206,192,2)"/><text x="92.4963%" y="175.50">exp..</text></g><g><title>mir_for_ctfe (1,215,352 samples, 0.14%)</title><rect x="95.7051%" y="165" width="0.1375%" height="15" fill="rgb(241,108,4)"/><text x="95.9551%" y="175.50"></text></g><g><title>layout_of (1,160,780 samples, 0.13%)</title><rect x="96.4741%" y="149" width="0.1314%" height="15" fill="rgb(247,173,49)"/><text x="96.7241%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,742,269 samples, 0.54%)</title><rect x="96.6055%" y="149" width="0.5367%" height="15" fill="rgb(224,114,35)"/><text x="96.8555%" y="159.50"></text></g><g><title>mir_for_ctfe (1,110,403 samples, 0.13%)</title><rect x="97.1949%" y="85" width="0.1257%" height="15" fill="rgb(245,159,27)"/><text x="97.4449%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,465,315 samples, 0.17%)</title><rect x="97.1595%" y="133" width="0.1658%" height="15" fill="rgb(245,172,44)"/><text x="97.4095%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,446,985 samples, 0.16%)</title><rect x="97.1615%" y="117" width="0.1637%" height="15" fill="rgb(236,23,11)"/><text x="97.4115%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,413,474 samples, 0.16%)</title><rect x="97.1653%" y="101" width="0.1600%" height="15" fill="rgb(205,117,38)"/><text x="97.4153%" y="111.50"></text></g><g><title>optimized_mir (13,183,877 samples, 1.49%)</title><rect x="95.8509%" y="165" width="1.4919%" height="15" fill="rgb(237,72,25)"/><text x="96.1009%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,690,297 samples, 0.19%)</title><rect x="97.1516%" y="149" width="0.1913%" height="15" fill="rgb(244,70,9)"/><text x="97.4016%" y="159.50"></text></g><g><title>generate_crate_metadata (49,947,385 samples, 5.65%)</title><rect x="91.7125%" y="181" width="5.6523%" height="15" fill="rgb(217,125,39)"/><text x="91.9625%" y="191.50">generat..</text></g><g><title>hir_lowering (8,438,435 samples, 0.95%)</title><rect x="97.3647%" y="181" width="0.9549%" height="15" fill="rgb(235,36,10)"/><text x="97.6147%" y="191.50"></text></g><g><title>finish_ongoing_codegen (7,636,058 samples, 0.86%)</title><rect x="98.3214%" y="165" width="0.8641%" height="15" fill="rgb(251,123,47)"/><text x="98.5714%" y="175.50"></text></g><g><title>link_crate (2,686,517 samples, 0.30%)</title><rect x="99.1856%" y="165" width="0.3040%" height="15" fill="rgb(221,13,13)"/><text x="99.4356%" y="175.50"></text></g><g><title>link_binary (2,652,947 samples, 0.30%)</title><rect x="99.1894%" y="149" width="0.3002%" height="15" fill="rgb(238,131,9)"/><text x="99.4394%" y="159.50"></text></g><g><title>link_rlib (2,011,901 samples, 0.23%)</title><rect x="99.2619%" y="133" width="0.2277%" height="15" fill="rgb(211,50,8)"/><text x="99.5119%" y="143.50"></text></g><g><title>link (10,351,185 samples, 1.17%)</title><rect x="98.3196%" y="181" width="1.1714%" height="15" fill="rgb(245,182,24)"/><text x="98.5696%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,161,961 samples, 0.36%)</title><rect x="99.5704%" y="181" width="0.3578%" height="15" fill="rgb(242,14,37)"/><text x="99.8204%" y="191.50"></text></g><g><title>all (883,671,872 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (883,671,872 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>