<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (25,720,159 samples, 12.71%)</title><rect x="0.2834%" y="181" width="12.7061%" height="15" fill="rgb(227,0,7)"/><text x="0.5334%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (426,614 samples, 0.21%)</title><rect x="20.2466%" y="69" width="0.2108%" height="15" fill="rgb(217,0,24)"/><text x="20.4966%" y="79.50"></text></g><g><title>is_copy_raw (319,932 samples, 0.16%)</title><rect x="20.2993%" y="53" width="0.1581%" height="15" fill="rgb(221,193,54)"/><text x="20.5493%" y="63.50"></text></g><g><title>evaluate_obligation (282,782 samples, 0.14%)</title><rect x="20.3176%" y="37" width="0.1397%" height="15" fill="rgb(248,212,6)"/><text x="20.5676%" y="47.50"></text></g><g><title>specialization_graph_of (289,324 samples, 0.14%)</title><rect x="20.5543%" y="53" width="0.1429%" height="15" fill="rgb(208,68,35)"/><text x="20.8043%" y="63.50"></text></g><g><title>resolve_instance (530,135 samples, 0.26%)</title><rect x="20.4573%" y="69" width="0.2619%" height="15" fill="rgb(232,128,0)"/><text x="20.7073%" y="79.50"></text></g><g><title>thir_body (1,128,930 samples, 0.56%)</title><rect x="20.7263%" y="69" width="0.5577%" height="15" fill="rgb(207,160,47)"/><text x="20.9763%" y="79.50"></text></g><g><title>mir_const (6,376,372 samples, 3.15%)</title><rect x="18.1381%" y="117" width="3.1500%" height="15" fill="rgb(228,23,34)"/><text x="18.3881%" y="127.50">mir..</text></g><g><title>unsafety_check_result (5,552,990 samples, 2.74%)</title><rect x="18.5449%" y="101" width="2.7432%" height="15" fill="rgb(218,30,26)"/><text x="18.7949%" y="111.50">un..</text></g><g><title>mir_built (5,007,607 samples, 2.47%)</title><rect x="18.8143%" y="85" width="2.4738%" height="15" fill="rgb(220,122,19)"/><text x="19.0643%" y="95.50">mi..</text></g><g><title>thir_body (293,281 samples, 0.14%)</title><rect x="21.5549%" y="53" width="0.1449%" height="15" fill="rgb(250,228,42)"/><text x="21.8049%" y="63.50"></text></g><g><title>mir_promoted (8,006,185 samples, 3.96%)</title><rect x="17.7474%" y="133" width="3.9552%" height="15" fill="rgb(240,193,28)"/><text x="17.9974%" y="143.50">mir_..</text></g><g><title>mir_const_qualif (838,860 samples, 0.41%)</title><rect x="21.2881%" y="117" width="0.4144%" height="15" fill="rgb(216,20,37)"/><text x="21.5381%" y="127.50"></text></g><g><title>mir_const (717,629 samples, 0.35%)</title><rect x="21.3480%" y="101" width="0.3545%" height="15" fill="rgb(206,188,39)"/><text x="21.5980%" y="111.50"></text></g><g><title>unsafety_check_result (594,155 samples, 0.29%)</title><rect x="21.4090%" y="85" width="0.2935%" height="15" fill="rgb(217,207,13)"/><text x="21.6590%" y="95.50"></text></g><g><title>mir_built (553,104 samples, 0.27%)</title><rect x="21.4293%" y="69" width="0.2732%" height="15" fill="rgb(231,73,38)"/><text x="21.6793%" y="79.50"></text></g><g><title>type_op_prove_predicate (498,926 samples, 0.25%)</title><rect x="21.8776%" y="133" width="0.2465%" height="15" fill="rgb(225,20,46)"/><text x="22.1276%" y="143.50"></text></g><g><title>MIR_borrow_checking (18,201,673 samples, 8.99%)</title><rect x="13.1335%" y="165" width="8.9918%" height="15" fill="rgb(210,31,41)"/><text x="13.3835%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (18,097,102 samples, 8.94%)</title><rect x="13.1852%" y="149" width="8.9402%" height="15" fill="rgb(221,200,47)"/><text x="13.4352%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (338,604 samples, 0.17%)</title><rect x="22.1254%" y="165" width="0.1673%" height="15" fill="rgb(226,26,5)"/><text x="22.3754%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (256,213 samples, 0.13%)</title><rect x="22.1661%" y="149" width="0.1266%" height="15" fill="rgb(249,33,26)"/><text x="22.4161%" y="159.50"></text></g><g><title>codegen_fn_attrs (233,244 samples, 0.12%)</title><rect x="22.4921%" y="133" width="0.1152%" height="15" fill="rgb(235,183,28)"/><text x="22.7421%" y="143.50"></text></g><g><title>check_mod_attrs (474,685 samples, 0.23%)</title><rect x="22.3728%" y="149" width="0.2345%" height="15" fill="rgb(221,5,38)"/><text x="22.6228%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (241,952 samples, 0.12%)</title><rect x="22.6956%" y="149" width="0.1195%" height="15" fill="rgb(247,18,42)"/><text x="22.9456%" y="159.50"></text></g><g><title>misc_checking_1 (954,239 samples, 0.47%)</title><rect x="22.3635%" y="165" width="0.4714%" height="15" fill="rgb(241,131,45)"/><text x="22.6135%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (461,195 samples, 0.23%)</title><rect x="22.8355%" y="149" width="0.2278%" height="15" fill="rgb(249,31,29)"/><text x="23.0855%" y="159.50"></text></g><g><title>check_mod_liveness (349,424 samples, 0.17%)</title><rect x="22.8908%" y="133" width="0.1726%" height="15" fill="rgb(225,111,53)"/><text x="23.1408%" y="143.50"></text></g><g><title>misc_checking_2 (854,238 samples, 0.42%)</title><rect x="22.8349%" y="165" width="0.4220%" height="15" fill="rgb(238,160,17)"/><text x="23.0849%" y="175.50"></text></g><g><title>match_checking (391,773 samples, 0.19%)</title><rect x="23.0634%" y="149" width="0.1935%" height="15" fill="rgb(214,148,48)"/><text x="23.3134%" y="159.50"></text></g><g><title>check_match (366,593 samples, 0.18%)</title><rect x="23.0758%" y="133" width="0.1811%" height="15" fill="rgb(232,36,49)"/><text x="23.3258%" y="143.50"></text></g><g><title>death_checking (289,023 samples, 0.14%)</title><rect x="23.3289%" y="149" width="0.1428%" height="15" fill="rgb(209,103,24)"/><text x="23.5789%" y="159.50"></text></g><g><title>eval_to_const_value_raw (248,862 samples, 0.12%)</title><rect x="23.8212%" y="117" width="0.1229%" height="15" fill="rgb(229,88,8)"/><text x="24.0712%" y="127.50"></text></g><g><title>eval_to_const_value_raw (236,572 samples, 0.12%)</title><rect x="23.8272%" y="101" width="0.1169%" height="15" fill="rgb(213,181,19)"/><text x="24.0772%" y="111.50"></text></g><g><title>eval_to_allocation_raw (223,082 samples, 0.11%)</title><rect x="23.8339%" y="85" width="0.1102%" height="15" fill="rgb(254,191,54)"/><text x="24.0839%" y="95.50"></text></g><g><title>crate_lints (1,368,033 samples, 0.68%)</title><rect x="23.4724%" y="133" width="0.6758%" height="15" fill="rgb(241,83,37)"/><text x="23.7224%" y="143.50"></text></g><g><title>type_of (296,354 samples, 0.15%)</title><rect x="24.0019%" y="117" width="0.1464%" height="15" fill="rgb(233,36,39)"/><text x="24.2519%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (218,264 samples, 0.11%)</title><rect x="24.0404%" y="101" width="0.1078%" height="15" fill="rgb(226,3,54)"/><text x="24.2904%" y="111.50"></text></g><g><title>lint_checking (1,818,318 samples, 0.90%)</title><rect x="23.4717%" y="149" width="0.8983%" height="15" fill="rgb(245,192,40)"/><text x="23.7217%" y="159.50"></text></g><g><title>module_lints (448,835 samples, 0.22%)</title><rect x="24.1483%" y="133" width="0.2217%" height="15" fill="rgb(238,167,29)"/><text x="24.3983%" y="143.50"></text></g><g><title>lint_mod (444,305 samples, 0.22%)</title><rect x="24.1505%" y="117" width="0.2195%" height="15" fill="rgb(232,182,51)"/><text x="24.4005%" y="127.50"></text></g><g><title>privacy_checking_modules (466,844 samples, 0.23%)</title><rect x="24.4414%" y="149" width="0.2306%" height="15" fill="rgb(231,60,39)"/><text x="24.6914%" y="159.50"></text></g><g><title>check_mod_privacy (463,584 samples, 0.23%)</title><rect x="24.4430%" y="133" width="0.2290%" height="15" fill="rgb(208,69,12)"/><text x="24.6930%" y="143.50"></text></g><g><title>misc_checking_3 (2,873,168 samples, 1.42%)</title><rect x="23.2569%" y="165" width="1.4194%" height="15" fill="rgb(235,93,37)"/><text x="23.5069%" y="175.50"></text></g><g><title>impl_parent (595,283 samples, 0.29%)</title><rect x="25.3259%" y="101" width="0.2941%" height="15" fill="rgb(213,116,39)"/><text x="25.5759%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (306,581 samples, 0.15%)</title><rect x="25.4686%" y="85" width="0.1515%" height="15" fill="rgb(222,207,29)"/><text x="25.7186%" y="95.50"></text></g><g><title>impl_trait_ref (1,478,810 samples, 0.73%)</title><rect x="25.6200%" y="101" width="0.7306%" height="15" fill="rgb(206,96,30)"/><text x="25.8700%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,198,139 samples, 0.59%)</title><rect x="25.7587%" y="85" width="0.5919%" height="15" fill="rgb(218,138,4)"/><text x="26.0087%" y="95.50"></text></g><g><title>coherent_trait (3,530,755 samples, 1.74%)</title><rect x="24.7072%" y="133" width="1.7442%" height="15" fill="rgb(250,191,14)"/><text x="24.9572%" y="143.50"></text></g><g><title>specialization_graph_of (3,293,272 samples, 1.63%)</title><rect x="24.8245%" y="117" width="1.6269%" height="15" fill="rgb(239,60,40)"/><text x="25.0745%" y="127.50"></text></g><g><title>trait_impls_of (203,032 samples, 0.10%)</title><rect x="26.3512%" y="101" width="0.1003%" height="15" fill="rgb(206,27,48)"/><text x="26.6012%" y="111.50"></text></g><g><title>coherence_checking (3,603,397 samples, 1.78%)</title><rect x="24.7011%" y="149" width="1.7801%" height="15" fill="rgb(225,35,8)"/><text x="24.9511%" y="159.50">c..</text></g><g><title>associated_item (530,594 samples, 0.26%)</title><rect x="37.5645%" y="85" width="0.2621%" height="15" fill="rgb(250,213,24)"/><text x="37.8145%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (409,684 samples, 0.20%)</title><rect x="37.6242%" y="69" width="0.2024%" height="15" fill="rgb(247,123,22)"/><text x="37.8742%" y="79.50"></text></g><g><title>associated_items (752,048 samples, 0.37%)</title><rect x="37.4665%" y="101" width="0.3715%" height="15" fill="rgb(231,138,38)"/><text x="37.7165%" y="111.50"></text></g><g><title>generics_of (1,119,869 samples, 0.55%)</title><rect x="40.9447%" y="85" width="0.5532%" height="15" fill="rgb(231,145,46)"/><text x="41.1947%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (802,476 samples, 0.40%)</title><rect x="41.1015%" y="69" width="0.3964%" height="15" fill="rgb(251,118,11)"/><text x="41.3515%" y="79.50"></text></g><g><title>impl_polarity (207,877 samples, 0.10%)</title><rect x="41.5763%" y="85" width="0.1027%" height="15" fill="rgb(217,147,25)"/><text x="41.8263%" y="95.50"></text></g><g><title>impl_trait_ref (1,144,601 samples, 0.57%)</title><rect x="41.6790%" y="85" width="0.5654%" height="15" fill="rgb(247,81,37)"/><text x="41.9290%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (876,299 samples, 0.43%)</title><rect x="41.8115%" y="69" width="0.4329%" height="15" fill="rgb(209,12,38)"/><text x="42.0615%" y="79.50"></text></g><g><title>opt_def_kind (204,713 samples, 0.10%)</title><rect x="42.4482%" y="69" width="0.1011%" height="15" fill="rgb(227,1,9)"/><text x="42.6982%" y="79.50"></text></g><g><title>explicit_predicates_of (208,882 samples, 0.10%)</title><rect x="42.7093%" y="53" width="0.1032%" height="15" fill="rgb(248,47,43)"/><text x="42.9593%" y="63.50"></text></g><g><title>predicates_of (1,227,541 samples, 0.61%)</title><rect x="42.2886%" y="85" width="0.6064%" height="15" fill="rgb(221,10,30)"/><text x="42.5386%" y="95.50"></text></g><g><title>predicates_defined_on (699,826 samples, 0.35%)</title><rect x="42.5493%" y="69" width="0.3457%" height="15" fill="rgb(210,229,1)"/><text x="42.7993%" y="79.50"></text></g><g><title>specializes (4,211,171 samples, 2.08%)</title><rect x="42.8950%" y="85" width="2.0804%" height="15" fill="rgb(222,148,37)"/><text x="43.1450%" y="95.50">s..</text></g><g><title>param_env (2,361,515 samples, 1.17%)</title><rect x="43.8088%" y="69" width="1.1666%" height="15" fill="rgb(234,67,33)"/><text x="44.0588%" y="79.50"></text></g><g><title>def_span (878,251 samples, 0.43%)</title><rect x="44.5416%" y="53" width="0.4339%" height="15" fill="rgb(247,98,35)"/><text x="44.7916%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (765,121 samples, 0.38%)</title><rect x="44.5974%" y="37" width="0.3780%" height="15" fill="rgb(247,138,52)"/><text x="44.8474%" y="47.50"></text></g><g><title>trait_impls_of (377,305 samples, 0.19%)</title><rect x="44.9845%" y="85" width="0.1864%" height="15" fill="rgb(213,79,30)"/><text x="45.2345%" y="95.50"></text></g><g><title>evaluate_obligation (14,722,421 samples, 7.27%)</title><rect x="37.9213%" y="101" width="7.2731%" height="15" fill="rgb(246,177,23)"/><text x="38.1713%" y="111.50">evaluate_o..</text></g><g><title>generics_of (312,423 samples, 0.15%)</title><rect x="45.2548%" y="101" width="0.1543%" height="15" fill="rgb(230,62,27)"/><text x="45.5048%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (233,402 samples, 0.12%)</title><rect x="45.2939%" y="85" width="0.1153%" height="15" fill="rgb(216,154,8)"/><text x="45.5439%" y="95.50"></text></g><g><title>item_attrs (359,822 samples, 0.18%)</title><rect x="45.5656%" y="101" width="0.1778%" height="15" fill="rgb(244,35,45)"/><text x="45.8156%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (355,192 samples, 0.18%)</title><rect x="45.5679%" y="85" width="0.1755%" height="15" fill="rgb(251,115,12)"/><text x="45.8179%" y="95.50"></text></g><g><title>predicates_of (290,610 samples, 0.14%)</title><rect x="45.9603%" y="101" width="0.1436%" height="15" fill="rgb(240,54,50)"/><text x="46.2103%" y="111.50"></text></g><g><title>specializes (366,225 samples, 0.18%)</title><rect x="46.1150%" y="101" width="0.1809%" height="15" fill="rgb(233,84,52)"/><text x="46.3650%" y="111.50"></text></g><g><title>item_bodies_checking (40,228,826 samples, 19.87%)</title><rect x="26.4919%" y="149" width="19.8735%" height="15" fill="rgb(207,117,47)"/><text x="26.7419%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,226,746 samples, 19.87%)</title><rect x="26.4929%" y="133" width="19.8725%" height="15" fill="rgb(249,43,39)"/><text x="26.7429%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (40,162,176 samples, 19.84%)</title><rect x="26.5248%" y="117" width="19.8406%" height="15" fill="rgb(209,38,44)"/><text x="26.7748%" y="127.50">typeck</text></g><g><title>item_types_checking (1,136,861 samples, 0.56%)</title><rect x="46.3654%" y="149" width="0.5616%" height="15" fill="rgb(236,212,23)"/><text x="46.6154%" y="159.50"></text></g><g><title>check_mod_item_types (1,133,501 samples, 0.56%)</title><rect x="46.3671%" y="133" width="0.5600%" height="15" fill="rgb(242,79,21)"/><text x="46.6171%" y="143.50"></text></g><g><title>typeck (658,906 samples, 0.33%)</title><rect x="46.6015%" y="117" width="0.3255%" height="15" fill="rgb(211,96,35)"/><text x="46.8515%" y="127.50"></text></g><g><title>fn_sig (273,843 samples, 0.14%)</title><rect x="47.0256%" y="117" width="0.1353%" height="15" fill="rgb(253,215,40)"/><text x="47.2756%" y="127.50"></text></g><g><title>late_bound_vars_map (233,603 samples, 0.12%)</title><rect x="47.3121%" y="69" width="0.1154%" height="15" fill="rgb(211,81,21)"/><text x="47.5621%" y="79.50"></text></g><g><title>resolve_lifetimes (230,863 samples, 0.11%)</title><rect x="47.3135%" y="53" width="0.1140%" height="15" fill="rgb(208,190,38)"/><text x="47.5635%" y="63.50"></text></g><g><title>explicit_predicates_of (340,223 samples, 0.17%)</title><rect x="47.2648%" y="85" width="0.1681%" height="15" fill="rgb(235,213,38)"/><text x="47.5148%" y="95.50"></text></g><g><title>predicates_of (536,194 samples, 0.26%)</title><rect x="47.2235%" y="117" width="0.2649%" height="15" fill="rgb(237,122,38)"/><text x="47.4735%" y="127.50"></text></g><g><title>predicates_defined_on (506,144 samples, 0.25%)</title><rect x="47.2384%" y="101" width="0.2500%" height="15" fill="rgb(244,218,35)"/><text x="47.4884%" y="111.50"></text></g><g><title>type_collecting (1,296,973 samples, 0.64%)</title><rect x="46.9276%" y="149" width="0.6407%" height="15" fill="rgb(240,68,47)"/><text x="47.1776%" y="159.50"></text></g><g><title>collect_mod_item_types (1,287,343 samples, 0.64%)</title><rect x="46.9323%" y="133" width="0.6360%" height="15" fill="rgb(210,16,53)"/><text x="47.1823%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,081,923 samples, 0.53%)</title><rect x="47.6367%" y="133" width="0.5345%" height="15" fill="rgb(235,124,12)"/><text x="47.8867%" y="143.50"></text></g><g><title>evaluate_obligation (318,202 samples, 0.16%)</title><rect x="48.6296%" y="117" width="0.1572%" height="15" fill="rgb(224,169,11)"/><text x="48.8796%" y="127.50"></text></g><g><title>region_scope_tree (297,213 samples, 0.15%)</title><rect x="48.9494%" y="117" width="0.1468%" height="15" fill="rgb(250,166,2)"/><text x="49.1994%" y="127.50"></text></g><g><title>check_item_well_formed (1,913,436 samples, 0.95%)</title><rect x="48.1712%" y="133" width="0.9453%" height="15" fill="rgb(242,216,29)"/><text x="48.4212%" y="143.50"></text></g><g><title>analysis (73,235,777 samples, 36.18%)</title><rect x="12.9894%" y="181" width="36.1794%" height="15" fill="rgb(230,116,27)"/><text x="13.2394%" y="191.50">analysis</text></g><g><title>type_check_crate (49,578,730 samples, 24.49%)</title><rect x="24.6763%" y="165" width="24.4925%" height="15" fill="rgb(228,99,48)"/><text x="24.9263%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,234,052 samples, 1.60%)</title><rect x="47.5711%" y="149" width="1.5977%" height="15" fill="rgb(253,11,6)"/><text x="47.8211%" y="159.50"></text></g><g><title>codegen_module (3,467,685 samples, 1.71%)</title><rect x="49.6230%" y="165" width="1.7131%" height="15" fill="rgb(247,143,39)"/><text x="49.8730%" y="175.50"></text></g><g><title>codegen_crate (4,392,724 samples, 2.17%)</title><rect x="49.1738%" y="181" width="2.1701%" height="15" fill="rgb(236,97,10)"/><text x="49.4238%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (37,210,336 samples, 18.38%)</title><rect x="51.3705%" y="165" width="18.3824%" height="15" fill="rgb(233,208,19)"/><text x="51.6205%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (35,057,594 samples, 17.32%)</title><rect x="52.4339%" y="149" width="17.3189%" height="15" fill="rgb(216,164,2)"/><text x="52.6839%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (38,374,867 samples, 18.96%)</title><rect x="51.3439%" y="181" width="18.9576%" height="15" fill="rgb(220,129,5)"/><text x="51.5939%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,110,738 samples, 0.55%)</title><rect x="69.7528%" y="165" width="0.5487%" height="15" fill="rgb(242,17,10)"/><text x="70.0028%" y="175.50"></text></g><g><title>macro_expand_crate (15,709,058 samples, 7.76%)</title><rect x="70.5185%" y="165" width="7.7605%" height="15" fill="rgb(242,107,0)"/><text x="70.7685%" y="175.50">macro_expan..</text></g><g><title>expand_crate (15,698,178 samples, 7.76%)</title><rect x="70.5239%" y="149" width="7.7551%" height="15" fill="rgb(251,28,31)"/><text x="70.7739%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (231,652 samples, 0.11%)</title><rect x="78.1646%" y="133" width="0.1144%" height="15" fill="rgb(233,223,10)"/><text x="78.4146%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (298,733 samples, 0.15%)</title><rect x="78.2800%" y="165" width="0.1476%" height="15" fill="rgb(215,21,27)"/><text x="78.5300%" y="175.50"></text></g><g><title>late_resolve_crate (1,682,197 samples, 0.83%)</title><rect x="78.4835%" y="149" width="0.8310%" height="15" fill="rgb(232,23,21)"/><text x="78.7335%" y="159.50"></text></g><g><title>configure_and_expand (18,348,574 samples, 9.06%)</title><rect x="70.3015%" y="181" width="9.0644%" height="15" fill="rgb(244,5,23)"/><text x="70.5515%" y="191.50">configure_and..</text></g><g><title>resolve_crate (1,899,529 samples, 0.94%)</title><rect x="78.4276%" y="165" width="0.9384%" height="15" fill="rgb(226,81,46)"/><text x="78.6776%" y="175.50"></text></g><g><title>early_lint_checks (420,604 samples, 0.21%)</title><rect x="79.4642%" y="181" width="0.2078%" height="15" fill="rgb(247,70,30)"/><text x="79.7142%" y="191.50"></text></g><g><title>free_global_ctxt (2,857,819 samples, 1.41%)</title><rect x="79.6720%" y="181" width="1.4118%" height="15" fill="rgb(212,68,19)"/><text x="79.9220%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (795,289 samples, 0.39%)</title><rect x="82.4581%" y="85" width="0.3929%" height="15" fill="rgb(240,187,13)"/><text x="82.7081%" y="95.50"></text></g><g><title>optimized_mir (1,778,287 samples, 0.88%)</title><rect x="81.9835%" y="101" width="0.8785%" height="15" fill="rgb(223,113,26)"/><text x="82.2335%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,989,160 samples, 0.98%)</title><rect x="81.8905%" y="117" width="0.9827%" height="15" fill="rgb(206,192,2)"/><text x="82.1405%" y="127.50"></text></g><g><title>monomorphization_collector (2,035,331 samples, 1.01%)</title><rect x="81.8892%" y="133" width="1.0055%" height="15" fill="rgb(241,108,4)"/><text x="82.1392%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (2,265,123 samples, 1.12%)</title><rect x="81.8778%" y="149" width="1.1190%" height="15" fill="rgb(247,173,49)"/><text x="82.1278%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (206,702 samples, 0.10%)</title><rect x="82.8947%" y="133" width="0.1021%" height="15" fill="rgb(224,114,35)"/><text x="83.1447%" y="143.50"></text></g><g><title>exported_symbols (2,389,414 samples, 1.18%)</title><rect x="81.8666%" y="165" width="1.1804%" height="15" fill="rgb(245,159,27)"/><text x="82.1166%" y="175.50"></text></g><g><title>layout_of (302,143 samples, 0.15%)</title><rect x="84.3013%" y="149" width="0.1493%" height="15" fill="rgb(245,172,44)"/><text x="84.5513%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,716,074 samples, 1.34%)</title><rect x="84.4506%" y="149" width="1.3418%" height="15" fill="rgb(236,23,11)"/><text x="84.7006%" y="159.50"></text></g><g><title>optimized_mir (5,510,707 samples, 2.72%)</title><rect x="83.0784%" y="165" width="2.7224%" height="15" fill="rgb(205,117,38)"/><text x="83.3284%" y="175.50">op..</text></g><g><title>generate_crate_metadata (9,585,636 samples, 4.74%)</title><rect x="81.0838%" y="181" width="4.7354%" height="15" fill="rgb(237,72,25)"/><text x="81.3338%" y="191.50">genera..</text></g><g><title>hir_lowering (2,897,720 samples, 1.43%)</title><rect x="85.8192%" y="181" width="1.4315%" height="15" fill="rgb(244,70,9)"/><text x="86.0692%" y="191.50"></text></g><g><title>finish_ongoing_codegen (20,135,984 samples, 9.95%)</title><rect x="87.2567%" y="165" width="9.9474%" height="15" fill="rgb(217,125,39)"/><text x="87.5067%" y="175.50">finish_ongoing..</text></g><g><title>link_crate (1,009,170 samples, 0.50%)</title><rect x="97.2041%" y="165" width="0.4985%" height="15" fill="rgb(235,36,10)"/><text x="97.4541%" y="175.50"></text></g><g><title>link_binary (978,870 samples, 0.48%)</title><rect x="97.2191%" y="149" width="0.4836%" height="15" fill="rgb(251,123,47)"/><text x="97.4691%" y="159.50"></text></g><g><title>link_rlib (673,127 samples, 0.33%)</title><rect x="97.3701%" y="133" width="0.3325%" height="15" fill="rgb(221,13,13)"/><text x="97.6201%" y="143.50"></text></g><g><title>link (21,162,584 samples, 10.45%)</title><rect x="87.2507%" y="181" width="10.4546%" height="15" fill="rgb(238,131,9)"/><text x="87.5007%" y="191.50">link</text></g><g><title>parse_crate (2,517,895 samples, 1.24%)</title><rect x="97.7053%" y="181" width="1.2439%" height="15" fill="rgb(211,50,8)"/><text x="97.9553%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,528,495 samples, 0.76%)</title><rect x="99.0507%" y="181" width="0.7551%" height="15" fill="rgb(245,182,24)"/><text x="99.3007%" y="191.50"></text></g><g><title>all (202,424,200 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (202,424,200 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (321,964 samples, 0.16%)</title><rect x="99.8409%" y="181" width="0.1591%" height="15" fill="rgb(213,55,15)"/><text x="100.0909%" y="191.50"></text></g></svg></svg>