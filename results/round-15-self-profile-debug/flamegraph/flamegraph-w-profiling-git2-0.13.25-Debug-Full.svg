<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (886,135,086 samples, 11.34%)</title><rect x="0.0203%" y="181" width="11.3362%" height="15" fill="rgb(227,0,7)"/><text x="0.2703%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (12,275,855 samples, 0.16%)</title><rect x="19.4539%" y="53" width="0.1570%" height="15" fill="rgb(217,0,24)"/><text x="19.7039%" y="63.50"></text></g><g><title>evaluate_obligation (9,762,956 samples, 0.12%)</title><rect x="19.4861%" y="37" width="0.1249%" height="15" fill="rgb(221,193,54)"/><text x="19.7361%" y="47.50"></text></g><g><title>needs_drop_raw (15,399,062 samples, 0.20%)</title><rect x="19.4146%" y="69" width="0.1970%" height="15" fill="rgb(248,212,6)"/><text x="19.6646%" y="79.50"></text></g><g><title>resolve_instance (9,062,277 samples, 0.12%)</title><rect x="19.6121%" y="69" width="0.1159%" height="15" fill="rgb(208,68,35)"/><text x="19.8621%" y="79.50"></text></g><g><title>thir_body (40,532,638 samples, 0.52%)</title><rect x="19.7422%" y="69" width="0.5185%" height="15" fill="rgb(232,128,0)"/><text x="19.9922%" y="79.50"></text></g><g><title>mir_const (220,439,012 samples, 2.82%)</title><rect x="17.4505%" y="117" width="2.8200%" height="15" fill="rgb(207,160,47)"/><text x="17.7005%" y="127.50">mi..</text></g><g><title>unsafety_check_result (189,452,690 samples, 2.42%)</title><rect x="17.8469%" y="101" width="2.4236%" height="15" fill="rgb(228,23,34)"/><text x="18.0969%" y="111.50">un..</text></g><g><title>mir_built (169,311,942 samples, 2.17%)</title><rect x="18.1045%" y="85" width="2.1660%" height="15" fill="rgb(218,30,26)"/><text x="18.3545%" y="95.50">m..</text></g><g><title>mir_const (18,105,580 samples, 0.23%)</title><rect x="20.3596%" y="101" width="0.2316%" height="15" fill="rgb(220,122,19)"/><text x="20.6096%" y="111.50"></text></g><g><title>unsafety_check_result (13,637,553 samples, 0.17%)</title><rect x="20.4167%" y="85" width="0.1745%" height="15" fill="rgb(250,228,42)"/><text x="20.6667%" y="95.50"></text></g><g><title>mir_built (12,121,096 samples, 0.16%)</title><rect x="20.4361%" y="69" width="0.1551%" height="15" fill="rgb(240,193,28)"/><text x="20.6861%" y="79.50"></text></g><g><title>mir_const_qualif (25,633,175 samples, 0.33%)</title><rect x="20.2705%" y="117" width="0.3279%" height="15" fill="rgb(216,20,37)"/><text x="20.5205%" y="127.50"></text></g><g><title>mir_promoted (276,377,068 samples, 3.54%)</title><rect x="17.0629%" y="133" width="3.5357%" height="15" fill="rgb(206,188,39)"/><text x="17.3129%" y="143.50">mir..</text></g><g><title>type_op_prove_predicate (48,978,841 samples, 0.63%)</title><rect x="20.8177%" y="133" width="0.6266%" height="15" fill="rgb(217,207,13)"/><text x="21.0677%" y="143.50"></text></g><g><title>MIR_borrow_checking (780,822,123 samples, 9.99%)</title><rect x="11.4561%" y="165" width="9.9889%" height="15" fill="rgb(231,73,38)"/><text x="11.7061%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (774,680,437 samples, 9.91%)</title><rect x="11.5346%" y="149" width="9.9104%" height="15" fill="rgb(225,20,46)"/><text x="11.7846%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (11,080,172 samples, 0.14%)</title><rect x="21.4450%" y="165" width="0.1417%" height="15" fill="rgb(210,31,41)"/><text x="21.6950%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,210,973 samples, 0.11%)</title><rect x="21.4817%" y="149" width="0.1050%" height="15" fill="rgb(221,200,47)"/><text x="21.7317%" y="159.50"></text></g><g><title>codegen_fn_attrs (7,984,001 samples, 0.10%)</title><rect x="21.7831%" y="133" width="0.1021%" height="15" fill="rgb(226,26,5)"/><text x="22.0331%" y="143.50"></text></g><g><title>check_mod_attrs (17,049,288 samples, 0.22%)</title><rect x="21.6671%" y="149" width="0.2181%" height="15" fill="rgb(249,33,26)"/><text x="21.9171%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (9,425,200 samples, 0.12%)</title><rect x="21.9927%" y="149" width="0.1206%" height="15" fill="rgb(235,183,28)"/><text x="22.2427%" y="159.50"></text></g><g><title>misc_checking_1 (36,313,907 samples, 0.46%)</title><rect x="21.6653%" y="165" width="0.4646%" height="15" fill="rgb(221,5,38)"/><text x="21.9153%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (21,780,270 samples, 0.28%)</title><rect x="22.1299%" y="149" width="0.2786%" height="15" fill="rgb(247,18,42)"/><text x="22.3799%" y="159.50"></text></g><g><title>check_mod_liveness (18,256,296 samples, 0.23%)</title><rect x="22.1750%" y="133" width="0.2336%" height="15" fill="rgb(241,131,45)"/><text x="22.4250%" y="143.50"></text></g><g><title>misc_checking_2 (46,770,292 samples, 0.60%)</title><rect x="22.1299%" y="165" width="0.5983%" height="15" fill="rgb(249,31,29)"/><text x="22.3799%" y="175.50"></text></g><g><title>match_checking (24,987,482 samples, 0.32%)</title><rect x="22.4085%" y="149" width="0.3197%" height="15" fill="rgb(225,111,53)"/><text x="22.6585%" y="159.50"></text></g><g><title>check_match (23,065,012 samples, 0.30%)</title><rect x="22.4331%" y="133" width="0.2951%" height="15" fill="rgb(238,160,17)"/><text x="22.6831%" y="143.50"></text></g><g><title>check_private_in_public (11,864,390 samples, 0.15%)</title><rect x="22.7284%" y="149" width="0.1518%" height="15" fill="rgb(214,148,48)"/><text x="22.9784%" y="159.50"></text></g><g><title>death_checking (17,150,793 samples, 0.22%)</title><rect x="22.8802%" y="149" width="0.2194%" height="15" fill="rgb(232,36,49)"/><text x="23.1302%" y="159.50"></text></g><g><title>crate_lints (25,052,063 samples, 0.32%)</title><rect x="23.0997%" y="133" width="0.3205%" height="15" fill="rgb(209,103,24)"/><text x="23.3497%" y="143.50"></text></g><g><title>lint_checking (44,907,063 samples, 0.57%)</title><rect x="23.0996%" y="149" width="0.5745%" height="15" fill="rgb(229,88,8)"/><text x="23.3496%" y="159.50"></text></g><g><title>module_lints (19,851,810 samples, 0.25%)</title><rect x="23.4202%" y="133" width="0.2540%" height="15" fill="rgb(213,181,19)"/><text x="23.6702%" y="143.50"></text></g><g><title>lint_mod (19,795,368 samples, 0.25%)</title><rect x="23.4209%" y="117" width="0.2532%" height="15" fill="rgb(254,191,54)"/><text x="23.6709%" y="127.50"></text></g><g><title>privacy_access_levels (19,644,428 samples, 0.25%)</title><rect x="23.6741%" y="149" width="0.2513%" height="15" fill="rgb(241,83,37)"/><text x="23.9241%" y="159.50"></text></g><g><title>privacy_checking_modules (34,133,245 samples, 0.44%)</title><rect x="23.9254%" y="149" width="0.4367%" height="15" fill="rgb(233,36,39)"/><text x="24.1754%" y="159.50"></text></g><g><title>check_mod_privacy (34,081,415 samples, 0.44%)</title><rect x="23.9261%" y="133" width="0.4360%" height="15" fill="rgb(226,3,54)"/><text x="24.1761%" y="143.50"></text></g><g><title>misc_checking_3 (128,092,143 samples, 1.64%)</title><rect x="22.7282%" y="165" width="1.6387%" height="15" fill="rgb(245,192,40)"/><text x="22.9782%" y="175.50"></text></g><g><title>impl_trait_ref (8,756,364 samples, 0.11%)</title><rect x="24.5908%" y="101" width="0.1120%" height="15" fill="rgb(238,167,29)"/><text x="24.8408%" y="111.50"></text></g><g><title>coherent_trait (25,760,928 samples, 0.33%)</title><rect x="24.4107%" y="133" width="0.3296%" height="15" fill="rgb(232,182,51)"/><text x="24.6607%" y="143.50"></text></g><g><title>specialization_graph_of (24,647,318 samples, 0.32%)</title><rect x="24.4250%" y="117" width="0.3153%" height="15" fill="rgb(231,60,39)"/><text x="24.6750%" y="127.50"></text></g><g><title>coherence_checking (27,274,615 samples, 0.35%)</title><rect x="24.4099%" y="149" width="0.3489%" height="15" fill="rgb(208,69,12)"/><text x="24.6599%" y="159.50"></text></g><g><title>evaluate_obligation (23,778,673 samples, 0.30%)</title><rect x="32.9192%" y="101" width="0.3042%" height="15" fill="rgb(235,93,37)"/><text x="33.1692%" y="111.50"></text></g><g><title>evaluate_obligation (11,849,870 samples, 0.15%)</title><rect x="35.4301%" y="85" width="0.1516%" height="15" fill="rgb(213,116,39)"/><text x="35.6801%" y="95.50"></text></g><g><title>typeck (173,472,142 samples, 2.22%)</title><rect x="33.4703%" y="101" width="2.2192%" height="15" fill="rgb(222,207,29)"/><text x="33.7203%" y="111.50">t..</text></g><g><title>item_bodies_checking (853,653,258 samples, 10.92%)</title><rect x="24.7819%" y="149" width="10.9207%" height="15" fill="rgb(206,96,30)"/><text x="25.0319%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (853,650,478 samples, 10.92%)</title><rect x="24.7820%" y="133" width="10.9206%" height="15" fill="rgb(218,138,4)"/><text x="25.0320%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (846,937,493 samples, 10.83%)</title><rect x="24.8678%" y="117" width="10.8348%" height="15" fill="rgb(250,191,14)"/><text x="25.1178%" y="127.50">typeck</text></g><g><title>item_types_checking (29,527,528 samples, 0.38%)</title><rect x="35.7026%" y="149" width="0.3777%" height="15" fill="rgb(239,60,40)"/><text x="35.9526%" y="159.50"></text></g><g><title>check_mod_item_types (29,469,947 samples, 0.38%)</title><rect x="35.7033%" y="133" width="0.3770%" height="15" fill="rgb(206,27,48)"/><text x="35.9533%" y="143.50"></text></g><g><title>fn_sig (9,582,773 samples, 0.12%)</title><rect x="36.2710%" y="117" width="0.1226%" height="15" fill="rgb(225,35,8)"/><text x="36.5210%" y="127.50"></text></g><g><title>named_region_map (14,037,292 samples, 0.18%)</title><rect x="36.5089%" y="101" width="0.1796%" height="15" fill="rgb(250,213,24)"/><text x="36.7589%" y="111.50"></text></g><g><title>resolve_lifetimes (12,985,523 samples, 0.17%)</title><rect x="36.5223%" y="85" width="0.1661%" height="15" fill="rgb(247,123,22)"/><text x="36.7723%" y="95.50"></text></g><g><title>lint_levels (8,499,606 samples, 0.11%)</title><rect x="36.5797%" y="69" width="0.1087%" height="15" fill="rgb(231,138,38)"/><text x="36.8297%" y="79.50"></text></g><g><title>generics_of (23,490,445 samples, 0.30%)</title><rect x="36.3936%" y="117" width="0.3005%" height="15" fill="rgb(231,145,46)"/><text x="36.6436%" y="127.50"></text></g><g><title>predicates_of (15,199,447 samples, 0.19%)</title><rect x="36.7076%" y="117" width="0.1944%" height="15" fill="rgb(251,118,11)"/><text x="36.9576%" y="127.50"></text></g><g><title>predicates_defined_on (13,218,342 samples, 0.17%)</title><rect x="36.7329%" y="101" width="0.1691%" height="15" fill="rgb(217,147,25)"/><text x="36.9829%" y="111.50"></text></g><g><title>type_collecting (66,892,645 samples, 0.86%)</title><rect x="36.0811%" y="149" width="0.8557%" height="15" fill="rgb(247,81,37)"/><text x="36.3311%" y="159.50"></text></g><g><title>collect_mod_item_types (66,829,215 samples, 0.85%)</title><rect x="36.0819%" y="133" width="0.8549%" height="15" fill="rgb(209,12,38)"/><text x="36.3319%" y="143.50"></text></g><g><title>param_env (10,682,258 samples, 0.14%)</title><rect x="37.9789%" y="117" width="0.1367%" height="15" fill="rgb(227,1,9)"/><text x="38.2289%" y="127.50"></text></g><g><title>region_scope_tree (14,417,049 samples, 0.18%)</title><rect x="38.1166%" y="117" width="0.1844%" height="15" fill="rgb(248,47,43)"/><text x="38.3666%" y="127.50"></text></g><g><title>check_impl_item_well_formed (99,044,581 samples, 1.27%)</title><rect x="37.0347%" y="133" width="1.2671%" height="15" fill="rgb(221,10,30)"/><text x="37.2847%" y="143.50"></text></g><g><title>evaluate_obligation (8,003,083 samples, 0.10%)</title><rect x="38.6260%" y="117" width="0.1024%" height="15" fill="rgb(210,229,1)"/><text x="38.8760%" y="127.50"></text></g><g><title>check_item_well_formed (43,931,578 samples, 0.56%)</title><rect x="38.3018%" y="133" width="0.5620%" height="15" fill="rgb(222,148,37)"/><text x="38.5518%" y="143.50"></text></g><g><title>analysis (2,156,508,872 samples, 27.59%)</title><rect x="11.3565%" y="181" width="27.5879%" height="15" fill="rgb(234,67,33)"/><text x="11.6065%" y="191.50">analysis</text></g><g><title>type_check_crate (1,139,505,964 samples, 14.58%)</title><rect x="24.3669%" y="165" width="14.5775%" height="15" fill="rgb(247,98,35)"/><text x="24.6169%" y="175.50">type_check_crate</text></g><g><title>wf_checking (156,547,961 samples, 2.00%)</title><rect x="36.9417%" y="149" width="2.0027%" height="15" fill="rgb(247,138,52)"/><text x="37.1917%" y="159.50">w..</text></g><g><title>compute_debuginfo_type_name (19,286,496 samples, 0.25%)</title><rect x="47.6755%" y="149" width="0.2467%" height="15" fill="rgb(213,79,30)"/><text x="47.9255%" y="159.50"></text></g><g><title>param_env (12,656,966 samples, 0.16%)</title><rect x="48.5754%" y="133" width="0.1619%" height="15" fill="rgb(246,177,23)"/><text x="48.8254%" y="143.50"></text></g><g><title>fn_abi_of_instance (60,322,164 samples, 0.77%)</title><rect x="48.0173%" y="149" width="0.7717%" height="15" fill="rgb(230,62,27)"/><text x="48.2673%" y="159.50"></text></g><g><title>layout_of (9,259,633 samples, 0.12%)</title><rect x="48.8300%" y="149" width="0.1185%" height="15" fill="rgb(216,154,8)"/><text x="49.0800%" y="159.50"></text></g><g><title>codegen_module (781,102,785 samples, 9.99%)</title><rect x="39.0165%" y="165" width="9.9925%" height="15" fill="rgb(244,35,45)"/><text x="39.2665%" y="175.50">codegen_module</text></g><g><title>codegen_crate (786,882,784 samples, 10.07%)</title><rect x="38.9445%" y="181" width="10.0665%" height="15" fill="rgb(251,115,12)"/><text x="39.1945%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,677,474,912 samples, 34.25%)</title><rect x="49.0143%" y="165" width="34.2526%" height="15" fill="rgb(240,54,50)"/><text x="49.2643%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,514,610,016 samples, 32.17%)</title><rect x="51.0978%" y="149" width="32.1691%" height="15" fill="rgb(233,84,52)"/><text x="51.3478%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,833,223,342 samples, 36.25%)</title><rect x="49.0110%" y="181" width="36.2450%" height="15" fill="rgb(207,117,47)"/><text x="49.2610%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (155,484,039 samples, 1.99%)</title><rect x="83.2669%" y="165" width="1.9891%" height="15" fill="rgb(249,43,39)"/><text x="83.5169%" y="175.50">L..</text></g><g><title>macro_expand_crate (218,305,104 samples, 2.79%)</title><rect x="85.3886%" y="165" width="2.7927%" height="15" fill="rgb(209,38,44)"/><text x="85.6386%" y="175.50">ma..</text></g><g><title>expand_crate (218,293,194 samples, 2.79%)</title><rect x="85.3887%" y="149" width="2.7926%" height="15" fill="rgb(236,212,23)"/><text x="85.6387%" y="159.50">ex..</text></g><g><title>late_resolve_crate (47,007,615 samples, 0.60%)</title><rect x="88.2264%" y="149" width="0.6014%" height="15" fill="rgb(242,79,21)"/><text x="88.4764%" y="159.50"></text></g><g><title>configure_and_expand (286,451,342 samples, 3.66%)</title><rect x="85.2560%" y="181" width="3.6645%" height="15" fill="rgb(211,96,35)"/><text x="85.5060%" y="191.50">conf..</text></g><g><title>resolve_crate (57,596,701 samples, 0.74%)</title><rect x="88.1837%" y="165" width="0.7368%" height="15" fill="rgb(253,215,40)"/><text x="88.4337%" y="175.50"></text></g><g><title>drop_ast (12,475,646 samples, 0.16%)</title><rect x="88.9205%" y="181" width="0.1596%" height="15" fill="rgb(211,81,21)"/><text x="89.1705%" y="191.50"></text></g><g><title>early_lint_checks (13,461,436 samples, 0.17%)</title><rect x="89.0811%" y="181" width="0.1722%" height="15" fill="rgb(208,190,38)"/><text x="89.3311%" y="191.50"></text></g><g><title>free_global_ctxt (43,825,812 samples, 0.56%)</title><rect x="89.2533%" y="181" width="0.5607%" height="15" fill="rgb(235,213,38)"/><text x="89.5033%" y="191.50"></text></g><g><title>layout_of (7,894,997 samples, 0.10%)</title><rect x="92.1158%" y="85" width="0.1010%" height="15" fill="rgb(237,122,38)"/><text x="92.3658%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (114,307,957 samples, 1.46%)</title><rect x="92.2824%" y="85" width="1.4623%" height="15" fill="rgb(244,218,35)"/><text x="92.5324%" y="95.50"></text></g><g><title>optimized_mir (223,888,052 samples, 2.86%)</title><rect x="90.9831%" y="101" width="2.8642%" height="15" fill="rgb(240,68,47)"/><text x="91.2331%" y="111.50">op..</text></g><g><title>codegen_fulfill_obligation (31,920,862 samples, 0.41%)</title><rect x="93.9815%" y="85" width="0.4084%" height="15" fill="rgb(210,16,53)"/><text x="94.2315%" y="95.50"></text></g><g><title>resolve_instance (50,894,755 samples, 0.65%)</title><rect x="93.8473%" y="101" width="0.6511%" height="15" fill="rgb(235,124,12)"/><text x="94.0973%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (334,821,190 samples, 4.28%)</title><rect x="90.3754%" y="117" width="4.2833%" height="15" fill="rgb(224,169,11)"/><text x="90.6254%" y="127.50">monom..</text></g><g><title>monomorphization_collector (337,475,267 samples, 4.32%)</title><rect x="90.3753%" y="133" width="4.3173%" height="15" fill="rgb(250,166,2)"/><text x="90.6253%" y="143.50">monom..</text></g><g><title>assert_symbols_are_distinct (25,741,911 samples, 0.33%)</title><rect x="94.6931%" y="117" width="0.3293%" height="15" fill="rgb(242,216,29)"/><text x="94.9431%" y="127.50"></text></g><g><title>symbol_name (22,307,569 samples, 0.29%)</title><rect x="94.7371%" y="101" width="0.2854%" height="15" fill="rgb(230,116,27)"/><text x="94.9871%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (376,487,151 samples, 4.82%)</title><rect x="90.3730%" y="149" width="4.8163%" height="15" fill="rgb(228,99,48)"/><text x="90.6230%" y="159.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (38,832,273 samples, 0.50%)</title><rect x="94.6926%" y="133" width="0.4968%" height="15" fill="rgb(253,11,6)"/><text x="94.9426%" y="143.50"></text></g><g><title>cgu_partitioning (13,048,192 samples, 0.17%)</title><rect x="95.0225%" y="117" width="0.1669%" height="15" fill="rgb(247,143,39)"/><text x="95.2725%" y="127.50"></text></g><g><title>exported_symbols (382,974,007 samples, 4.90%)</title><rect x="90.3518%" y="165" width="4.8993%" height="15" fill="rgb(236,97,10)"/><text x="90.6018%" y="175.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (41,840,093 samples, 0.54%)</title><rect x="95.9937%" y="149" width="0.5353%" height="15" fill="rgb(233,208,19)"/><text x="96.2437%" y="159.50"></text></g><g><title>optimized_mir (99,151,152 samples, 1.27%)</title><rect x="95.3395%" y="165" width="1.2684%" height="15" fill="rgb(216,164,2)"/><text x="95.5895%" y="175.50"></text></g><g><title>generate_crate_metadata (533,153,393 samples, 6.82%)</title><rect x="89.8140%" y="181" width="6.8206%" height="15" fill="rgb(220,129,5)"/><text x="90.0640%" y="191.50">generate_..</text></g><g><title>hir_lowering (105,144,092 samples, 1.35%)</title><rect x="96.6345%" y="181" width="1.3451%" height="15" fill="rgb(242,17,10)"/><text x="96.8845%" y="191.50"></text></g><g><title>finish_ongoing_codegen (103,271,703 samples, 1.32%)</title><rect x="97.9798%" y="165" width="1.3211%" height="15" fill="rgb(242,107,0)"/><text x="98.2298%" y="175.50"></text></g><g><title>link_crate (33,409,917 samples, 0.43%)</title><rect x="99.3010%" y="165" width="0.4274%" height="15" fill="rgb(251,28,31)"/><text x="99.5510%" y="175.50"></text></g><g><title>link_binary (32,616,219 samples, 0.42%)</title><rect x="99.3111%" y="149" width="0.4173%" height="15" fill="rgb(233,223,10)"/><text x="99.5611%" y="159.50"></text></g><g><title>link_rlib (28,239,295 samples, 0.36%)</title><rect x="99.3671%" y="133" width="0.3613%" height="15" fill="rgb(215,21,27)"/><text x="99.6171%" y="143.50"></text></g><g><title>link (136,705,530 samples, 1.75%)</title><rect x="97.9796%" y="181" width="1.7489%" height="15" fill="rgb(232,23,21)"/><text x="98.2296%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (15,061,073 samples, 0.19%)</title><rect x="99.7696%" y="181" width="0.1927%" height="15" fill="rgb(244,5,23)"/><text x="100.0196%" y="191.50"></text></g><g><title>all (7,816,859,245 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (7,816,859,245 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>