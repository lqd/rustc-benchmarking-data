<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (153,173,491 samples, 9.52%)</title><rect x="0.0751%" y="181" width="9.5185%" height="15" fill="rgb(227,0,7)"/><text x="0.3251%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (7,057,022 samples, 0.44%)</title><rect x="17.5304%" y="53" width="0.4385%" height="15" fill="rgb(217,0,24)"/><text x="17.7804%" y="63.50"></text></g><g><title>evaluate_obligation (5,883,364 samples, 0.37%)</title><rect x="17.6033%" y="37" width="0.3656%" height="15" fill="rgb(221,193,54)"/><text x="17.8533%" y="47.50"></text></g><g><title>needs_drop_raw (8,704,349 samples, 0.54%)</title><rect x="17.4326%" y="69" width="0.5409%" height="15" fill="rgb(248,212,6)"/><text x="17.6826%" y="79.50"></text></g><g><title>resolve_instance (3,692,634 samples, 0.23%)</title><rect x="17.9736%" y="69" width="0.2295%" height="15" fill="rgb(208,68,35)"/><text x="18.2236%" y="79.50"></text></g><g><title>thir_body (6,807,604 samples, 0.42%)</title><rect x="18.2179%" y="69" width="0.4230%" height="15" fill="rgb(232,128,0)"/><text x="18.4679%" y="79.50"></text></g><g><title>mir_const (51,329,952 samples, 3.19%)</title><rect x="15.4697%" y="117" width="3.1897%" height="15" fill="rgb(207,160,47)"/><text x="15.7197%" y="127.50">mir..</text></g><g><title>unsafety_check_result (44,147,632 samples, 2.74%)</title><rect x="15.9160%" y="101" width="2.7434%" height="15" fill="rgb(228,23,34)"/><text x="16.1660%" y="111.50">un..</text></g><g><title>mir_built (39,259,411 samples, 2.44%)</title><rect x="16.2197%" y="85" width="2.4397%" height="15" fill="rgb(218,30,26)"/><text x="16.4697%" y="95.50">mi..</text></g><g><title>mir_promoted (57,182,122 samples, 3.55%)</title><rect x="15.1309%" y="133" width="3.5534%" height="15" fill="rgb(220,122,19)"/><text x="15.3809%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (1,888,948 samples, 0.12%)</title><rect x="18.6843%" y="133" width="0.1174%" height="15" fill="rgb(250,228,42)"/><text x="18.9343%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,728,405 samples, 0.23%)</title><rect x="18.8017%" y="133" width="0.2317%" height="15" fill="rgb(240,193,28)"/><text x="19.0517%" y="143.50"></text></g><g><title>normalize_projection_ty (2,095,218 samples, 0.13%)</title><rect x="18.9032%" y="117" width="0.1302%" height="15" fill="rgb(216,20,37)"/><text x="19.1532%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,639,819 samples, 0.10%)</title><rect x="19.0334%" y="133" width="0.1019%" height="15" fill="rgb(206,188,39)"/><text x="19.2834%" y="143.50"></text></g><g><title>type_op_normalize_ty (3,145,986 samples, 0.20%)</title><rect x="19.1353%" y="133" width="0.1955%" height="15" fill="rgb(217,207,13)"/><text x="19.3853%" y="143.50"></text></g><g><title>normalize_projection_ty (1,958,665 samples, 0.12%)</title><rect x="19.2090%" y="117" width="0.1217%" height="15" fill="rgb(231,73,38)"/><text x="19.4590%" y="127.50"></text></g><g><title>type_op_prove_predicate (14,993,915 samples, 0.93%)</title><rect x="19.3308%" y="133" width="0.9318%" height="15" fill="rgb(225,20,46)"/><text x="19.5808%" y="143.50"></text></g><g><title>MIR_borrow_checking (170,335,053 samples, 10.58%)</title><rect x="9.6790%" y="165" width="10.5849%" height="15" fill="rgb(210,31,41)"/><text x="9.9290%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (169,295,562 samples, 10.52%)</title><rect x="9.7436%" y="149" width="10.5204%" height="15" fill="rgb(221,200,47)"/><text x="9.9936%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (2,080,623 samples, 0.13%)</title><rect x="20.4406%" y="133" width="0.1293%" height="15" fill="rgb(226,26,5)"/><text x="20.6906%" y="143.50"></text></g><g><title>check_mod_attrs (3,331,964 samples, 0.21%)</title><rect x="20.3628%" y="149" width="0.2071%" height="15" fill="rgb(249,33,26)"/><text x="20.6128%" y="159.50"></text></g><g><title>misc_checking_1 (6,140,792 samples, 0.38%)</title><rect x="20.3603%" y="165" width="0.3816%" height="15" fill="rgb(235,183,28)"/><text x="20.6103%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,188,292 samples, 0.20%)</title><rect x="20.7421%" y="149" width="0.1981%" height="15" fill="rgb(221,5,38)"/><text x="20.9921%" y="159.50"></text></g><g><title>check_mod_liveness (2,697,119 samples, 0.17%)</title><rect x="20.7726%" y="133" width="0.1676%" height="15" fill="rgb(247,18,42)"/><text x="21.0226%" y="143.50"></text></g><g><title>misc_checking_2 (6,979,360 samples, 0.43%)</title><rect x="20.7419%" y="165" width="0.4337%" height="15" fill="rgb(241,131,45)"/><text x="20.9919%" y="175.50"></text></g><g><title>match_checking (3,788,878 samples, 0.24%)</title><rect x="20.9402%" y="149" width="0.2354%" height="15" fill="rgb(249,31,29)"/><text x="21.1902%" y="159.50"></text></g><g><title>check_match (3,540,247 samples, 0.22%)</title><rect x="20.9556%" y="133" width="0.2200%" height="15" fill="rgb(225,111,53)"/><text x="21.2056%" y="143.50"></text></g><g><title>death_checking (2,113,922 samples, 0.13%)</title><rect x="21.2540%" y="149" width="0.1314%" height="15" fill="rgb(238,160,17)"/><text x="21.5040%" y="159.50"></text></g><g><title>crate_lints (5,417,124 samples, 0.34%)</title><rect x="21.3855%" y="133" width="0.3366%" height="15" fill="rgb(214,148,48)"/><text x="21.6355%" y="143.50"></text></g><g><title>lint_checking (8,323,784 samples, 0.52%)</title><rect x="21.3854%" y="149" width="0.5173%" height="15" fill="rgb(232,36,49)"/><text x="21.6354%" y="159.50"></text></g><g><title>module_lints (2,903,659 samples, 0.18%)</title><rect x="21.7222%" y="133" width="0.1804%" height="15" fill="rgb(209,103,24)"/><text x="21.9722%" y="143.50"></text></g><g><title>lint_mod (2,890,259 samples, 0.18%)</title><rect x="21.7230%" y="117" width="0.1796%" height="15" fill="rgb(229,88,8)"/><text x="21.9730%" y="127.50"></text></g><g><title>privacy_access_levels (1,758,618 samples, 0.11%)</title><rect x="21.9026%" y="149" width="0.1093%" height="15" fill="rgb(213,181,19)"/><text x="22.1526%" y="159.50"></text></g><g><title>privacy_checking_modules (6,274,402 samples, 0.39%)</title><rect x="22.0119%" y="149" width="0.3899%" height="15" fill="rgb(254,191,54)"/><text x="22.2619%" y="159.50"></text></g><g><title>check_mod_privacy (6,264,842 samples, 0.39%)</title><rect x="22.0125%" y="133" width="0.3893%" height="15" fill="rgb(241,83,37)"/><text x="22.2625%" y="143.50"></text></g><g><title>misc_checking_3 (19,798,528 samples, 1.23%)</title><rect x="21.1756%" y="165" width="1.2303%" height="15" fill="rgb(233,36,39)"/><text x="21.4256%" y="175.50"></text></g><g><title>impl_parent (3,384,292 samples, 0.21%)</title><rect x="22.8422%" y="101" width="0.2103%" height="15" fill="rgb(226,3,54)"/><text x="23.0922%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,843,886 samples, 0.11%)</title><rect x="22.9379%" y="85" width="0.1146%" height="15" fill="rgb(245,192,40)"/><text x="23.1879%" y="95.50"></text></g><g><title>impl_trait_ref (7,298,365 samples, 0.45%)</title><rect x="23.0525%" y="101" width="0.4535%" height="15" fill="rgb(238,167,29)"/><text x="23.3025%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,784,775 samples, 0.36%)</title><rect x="23.1465%" y="85" width="0.3595%" height="15" fill="rgb(232,182,51)"/><text x="23.3965%" y="95.50"></text></g><g><title>coherent_trait (18,720,848 samples, 1.16%)</title><rect x="22.4500%" y="133" width="1.1633%" height="15" fill="rgb(231,60,39)"/><text x="22.7000%" y="143.50"></text></g><g><title>specialization_graph_of (18,227,064 samples, 1.13%)</title><rect x="22.4806%" y="117" width="1.1327%" height="15" fill="rgb(208,69,12)"/><text x="22.7306%" y="127.50"></text></g><g><title>coherence_checking (18,983,161 samples, 1.18%)</title><rect x="22.4476%" y="149" width="1.1797%" height="15" fill="rgb(235,93,37)"/><text x="22.6976%" y="159.50"></text></g><g><title>dropck_outlives (2,217,539 samples, 0.14%)</title><rect x="31.3286%" y="101" width="0.1378%" height="15" fill="rgb(213,116,39)"/><text x="31.5786%" y="111.50"></text></g><g><title>predicates_of (1,693,743 samples, 0.11%)</title><rect x="32.2857%" y="85" width="0.1053%" height="15" fill="rgb(222,207,29)"/><text x="32.5357%" y="95.50"></text></g><g><title>specializes (2,552,444 samples, 0.16%)</title><rect x="32.3909%" y="85" width="0.1586%" height="15" fill="rgb(206,96,30)"/><text x="32.6409%" y="95.50"></text></g><g><title>evaluate_obligation (18,112,783 samples, 1.13%)</title><rect x="31.4664%" y="101" width="1.1256%" height="15" fill="rgb(218,138,4)"/><text x="31.7164%" y="111.50"></text></g><g><title>evaluate_obligation (3,329,761 samples, 0.21%)</title><rect x="35.0432%" y="85" width="0.2069%" height="15" fill="rgb(250,191,14)"/><text x="35.2932%" y="95.50"></text></g><g><title>typeck (41,449,027 samples, 2.58%)</title><rect x="32.9033%" y="101" width="2.5757%" height="15" fill="rgb(239,60,40)"/><text x="33.1533%" y="111.50">ty..</text></g><g><title>item_bodies_checking (190,749,788 samples, 11.85%)</title><rect x="23.6390%" y="149" width="11.8536%" height="15" fill="rgb(206,27,48)"/><text x="23.8890%" y="159.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (190,745,588 samples, 11.85%)</title><rect x="23.6392%" y="133" width="11.8533%" height="15" fill="rgb(225,35,8)"/><text x="23.8892%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (190,075,740 samples, 11.81%)</title><rect x="23.6808%" y="117" width="11.8117%" height="15" fill="rgb(250,213,24)"/><text x="23.9308%" y="127.50">typeck</text></g><g><title>item_types_checking (13,973,610 samples, 0.87%)</title><rect x="35.4925%" y="149" width="0.8683%" height="15" fill="rgb(247,123,22)"/><text x="35.7425%" y="159.50"></text></g><g><title>check_mod_item_types (13,961,900 samples, 0.87%)</title><rect x="35.4932%" y="133" width="0.8676%" height="15" fill="rgb(231,138,38)"/><text x="35.7432%" y="143.50"></text></g><g><title>fn_sig (2,883,715 samples, 0.18%)</title><rect x="36.4599%" y="117" width="0.1792%" height="15" fill="rgb(231,145,46)"/><text x="36.7099%" y="127.50"></text></g><g><title>named_region_map (1,672,868 samples, 0.10%)</title><rect x="36.7517%" y="101" width="0.1040%" height="15" fill="rgb(251,118,11)"/><text x="37.0017%" y="111.50"></text></g><g><title>generics_of (3,559,545 samples, 0.22%)</title><rect x="36.6391%" y="117" width="0.2212%" height="15" fill="rgb(217,147,25)"/><text x="36.8891%" y="127.50"></text></g><g><title>predicates_of (3,250,249 samples, 0.20%)</title><rect x="36.8734%" y="117" width="0.2020%" height="15" fill="rgb(247,81,37)"/><text x="37.1234%" y="127.50"></text></g><g><title>predicates_defined_on (2,903,713 samples, 0.18%)</title><rect x="36.8950%" y="101" width="0.1804%" height="15" fill="rgb(209,12,38)"/><text x="37.1450%" y="111.50"></text></g><g><title>type_collecting (12,015,701 samples, 0.75%)</title><rect x="36.3615%" y="149" width="0.7467%" height="15" fill="rgb(227,1,9)"/><text x="36.6115%" y="159.50"></text></g><g><title>collect_mod_item_types (11,997,061 samples, 0.75%)</title><rect x="36.3627%" y="133" width="0.7455%" height="15" fill="rgb(248,47,43)"/><text x="36.6127%" y="143.50"></text></g><g><title>evaluate_obligation (2,024,845 samples, 0.13%)</title><rect x="38.4288%" y="117" width="0.1258%" height="15" fill="rgb(221,10,30)"/><text x="38.6788%" y="127.50"></text></g><g><title>param_env (2,829,061 samples, 0.18%)</title><rect x="38.6727%" y="117" width="0.1758%" height="15" fill="rgb(210,229,1)"/><text x="38.9227%" y="127.50"></text></g><g><title>region_scope_tree (2,539,816 samples, 0.16%)</title><rect x="38.8604%" y="117" width="0.1578%" height="15" fill="rgb(222,148,37)"/><text x="39.1104%" y="127.50"></text></g><g><title>check_impl_item_well_formed (29,460,137 samples, 1.83%)</title><rect x="37.1932%" y="133" width="1.8307%" height="15" fill="rgb(234,67,33)"/><text x="37.4432%" y="143.50">c..</text></g><g><title>check_item_well_formed (9,790,564 samples, 0.61%)</title><rect x="39.0239%" y="133" width="0.6084%" height="15" fill="rgb(247,98,35)"/><text x="39.2739%" y="143.50"></text></g><g><title>analysis (484,160,169 samples, 30.09%)</title><rect x="9.5936%" y="181" width="30.0866%" height="15" fill="rgb(247,138,52)"/><text x="9.8436%" y="191.50">analysis</text></g><g><title>type_check_crate (277,980,956 samples, 17.27%)</title><rect x="22.4060%" y="165" width="17.2743%" height="15" fill="rgb(213,79,30)"/><text x="22.6560%" y="175.50">type_check_crate</text></g><g><title>wf_checking (41,334,726 samples, 2.57%)</title><rect x="37.1116%" y="149" width="2.5686%" height="15" fill="rgb(246,177,23)"/><text x="37.3616%" y="159.50">wf..</text></g><g><title>compute_debuginfo_type_name (1,785,695 samples, 0.11%)</title><rect x="46.0171%" y="149" width="0.1110%" height="15" fill="rgb(230,62,27)"/><text x="46.2671%" y="159.50"></text></g><g><title>layout_of (2,494,245 samples, 0.15%)</title><rect x="46.6751%" y="133" width="0.1550%" height="15" fill="rgb(216,154,8)"/><text x="46.9251%" y="143.50"></text></g><g><title>predicates_of (1,772,272 samples, 0.11%)</title><rect x="47.0624%" y="117" width="0.1101%" height="15" fill="rgb(244,35,45)"/><text x="47.3124%" y="127.50"></text></g><g><title>param_env (5,533,020 samples, 0.34%)</title><rect x="46.8301%" y="133" width="0.3438%" height="15" fill="rgb(251,115,12)"/><text x="47.0801%" y="143.50"></text></g><g><title>fn_abi_of_instance (16,904,297 samples, 1.05%)</title><rect x="46.2226%" y="149" width="1.0505%" height="15" fill="rgb(240,54,50)"/><text x="46.4726%" y="159.50"></text></g><g><title>layout_of (2,950,088 samples, 0.18%)</title><rect x="47.3191%" y="149" width="0.1833%" height="15" fill="rgb(233,84,52)"/><text x="47.5691%" y="159.50"></text></g><g><title>symbol_name (1,886,689 samples, 0.12%)</title><rect x="47.5038%" y="149" width="0.1172%" height="15" fill="rgb(207,117,47)"/><text x="47.7538%" y="159.50"></text></g><g><title>codegen_module (125,626,664 samples, 7.81%)</title><rect x="39.8397%" y="165" width="7.8067%" height="15" fill="rgb(249,43,39)"/><text x="40.0897%" y="175.50">codegen_mod..</text></g><g><title>codegen_crate (128,281,471 samples, 7.97%)</title><rect x="39.6808%" y="181" width="7.9717%" height="15" fill="rgb(209,38,44)"/><text x="39.9308%" y="191.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (575,334,006 samples, 35.75%)</title><rect x="47.6677%" y="165" width="35.7524%" height="15" fill="rgb(236,212,23)"/><text x="47.9177%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (551,760,116 samples, 34.29%)</title><rect x="49.1326%" y="149" width="34.2874%" height="15" fill="rgb(242,79,21)"/><text x="49.3826%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (606,134,556 samples, 37.67%)</title><rect x="47.6525%" y="181" width="37.6664%" height="15" fill="rgb(211,96,35)"/><text x="47.9025%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (30,556,248 samples, 1.90%)</title><rect x="83.4200%" y="165" width="1.8988%" height="15" fill="rgb(253,215,40)"/><text x="83.6700%" y="175.50">L..</text></g><g><title>metadata_register_crate (4,816,188 samples, 0.30%)</title><rect x="88.7931%" y="133" width="0.2993%" height="15" fill="rgb(211,81,21)"/><text x="89.0431%" y="143.50"></text></g><g><title>metadata_register_crate (3,386,922 samples, 0.21%)</title><rect x="88.8819%" y="117" width="0.2105%" height="15" fill="rgb(208,190,38)"/><text x="89.1319%" y="127.50"></text></g><g><title>macro_expand_crate (61,114,455 samples, 3.80%)</title><rect x="85.3895%" y="165" width="3.7978%" height="15" fill="rgb(235,213,38)"/><text x="85.6395%" y="175.50">macr..</text></g><g><title>expand_crate (61,093,655 samples, 3.80%)</title><rect x="85.3908%" y="149" width="3.7965%" height="15" fill="rgb(237,122,38)"/><text x="85.6408%" y="159.50">expa..</text></g><g><title>late_resolve_crate (8,061,851 samples, 0.50%)</title><rect x="89.2307%" y="149" width="0.5010%" height="15" fill="rgb(244,218,35)"/><text x="89.4807%" y="159.50"></text></g><g><title>configure_and_expand (71,674,272 samples, 4.45%)</title><rect x="85.3189%" y="181" width="4.4540%" height="15" fill="rgb(240,68,47)"/><text x="85.5689%" y="191.50">confi..</text></g><g><title>resolve_crate (9,301,714 samples, 0.58%)</title><rect x="89.1948%" y="165" width="0.5780%" height="15" fill="rgb(210,16,53)"/><text x="89.4448%" y="175.50"></text></g><g><title>early_lint_checks (2,129,201 samples, 0.13%)</title><rect x="89.8418%" y="181" width="0.1323%" height="15" fill="rgb(235,124,12)"/><text x="90.0918%" y="191.50"></text></g><g><title>free_global_ctxt (9,341,465 samples, 0.58%)</title><rect x="89.9741%" y="181" width="0.5805%" height="15" fill="rgb(224,169,11)"/><text x="90.2241%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,949,674 samples, 0.12%)</title><rect x="91.5652%" y="101" width="0.1212%" height="15" fill="rgb(250,166,2)"/><text x="91.8152%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,877,042 samples, 0.18%)</title><rect x="92.0948%" y="85" width="0.1788%" height="15" fill="rgb(242,216,29)"/><text x="92.3448%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,718,608 samples, 0.29%)</title><rect x="92.2736%" y="85" width="0.2932%" height="15" fill="rgb(230,116,27)"/><text x="92.5236%" y="95.50"></text></g><g><title>optimized_mir (13,840,395 samples, 0.86%)</title><rect x="91.7727%" y="101" width="0.8601%" height="15" fill="rgb(228,99,48)"/><text x="92.0227%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (5,203,736 samples, 0.32%)</title><rect x="92.7676%" y="85" width="0.3234%" height="15" fill="rgb(253,11,6)"/><text x="93.0176%" y="95.50"></text></g><g><title>resolve_instance (10,407,576 samples, 0.65%)</title><rect x="92.6328%" y="101" width="0.6467%" height="15" fill="rgb(247,143,39)"/><text x="92.8828%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (37,615,179 samples, 2.34%)</title><rect x="91.1926%" y="117" width="2.3375%" height="15" fill="rgb(236,97,10)"/><text x="91.4426%" y="127.50">m..</text></g><g><title>monomorphization_collector (37,855,571 samples, 2.35%)</title><rect x="91.1923%" y="133" width="2.3524%" height="15" fill="rgb(233,208,19)"/><text x="91.4423%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (3,311,743 samples, 0.21%)</title><rect x="93.5455%" y="117" width="0.2058%" height="15" fill="rgb(216,164,2)"/><text x="93.7955%" y="127.50"></text></g><g><title>symbol_name (2,952,482 samples, 0.18%)</title><rect x="93.5678%" y="101" width="0.1835%" height="15" fill="rgb(220,129,5)"/><text x="93.8178%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (42,921,462 samples, 2.67%)</title><rect x="91.1889%" y="149" width="2.6672%" height="15" fill="rgb(242,17,10)"/><text x="91.4389%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (5,010,840 samples, 0.31%)</title><rect x="93.5447%" y="133" width="0.3114%" height="15" fill="rgb(242,107,0)"/><text x="93.7947%" y="143.50"></text></g><g><title>cgu_partitioning (1,686,607 samples, 0.10%)</title><rect x="93.7513%" y="117" width="0.1048%" height="15" fill="rgb(251,28,31)"/><text x="94.0013%" y="127.50"></text></g><g><title>exported_symbols (43,962,692 samples, 2.73%)</title><rect x="91.1794%" y="165" width="2.7319%" height="15" fill="rgb(233,223,10)"/><text x="91.4294%" y="175.50">ex..</text></g><g><title>layout_of (3,843,869 samples, 0.24%)</title><rect x="95.0705%" y="149" width="0.2389%" height="15" fill="rgb(215,21,27)"/><text x="95.3205%" y="159.50"></text></g><g><title>is_copy_raw (2,421,167 samples, 0.15%)</title><rect x="96.6527%" y="117" width="0.1505%" height="15" fill="rgb(232,23,21)"/><text x="96.9027%" y="127.50"></text></g><g><title>evaluate_obligation (1,974,185 samples, 0.12%)</title><rect x="96.6805%" y="101" width="0.1227%" height="15" fill="rgb(244,5,23)"/><text x="96.9305%" y="111.50"></text></g><g><title>needs_drop_raw (2,750,490 samples, 0.17%)</title><rect x="96.6353%" y="133" width="0.1709%" height="15" fill="rgb(226,81,46)"/><text x="96.8853%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (24,472,688 samples, 1.52%)</title><rect x="95.3093%" y="149" width="1.5208%" height="15" fill="rgb(247,70,30)"/><text x="95.5593%" y="159.50"></text></g><g><title>optimized_mir (46,557,472 samples, 2.89%)</title><rect x="93.9480%" y="165" width="2.8932%" height="15" fill="rgb(212,68,19)"/><text x="94.1980%" y="175.50">op..</text></g><g><title>generate_crate_metadata (101,855,944 samples, 6.33%)</title><rect x="90.5546%" y="181" width="6.3295%" height="15" fill="rgb(240,187,13)"/><text x="90.8046%" y="191.50">generate..</text></g><g><title>hir_lowering (17,318,765 samples, 1.08%)</title><rect x="96.8841%" y="181" width="1.0762%" height="15" fill="rgb(223,113,26)"/><text x="97.1341%" y="191.50"></text></g><g><title>finish_ongoing_codegen (21,191,753 samples, 1.32%)</title><rect x="97.9615%" y="165" width="1.3169%" height="15" fill="rgb(206,192,2)"/><text x="98.2115%" y="175.50"></text></g><g><title>link_crate (5,083,801 samples, 0.32%)</title><rect x="99.2784%" y="165" width="0.3159%" height="15" fill="rgb(241,108,4)"/><text x="99.5284%" y="175.50"></text></g><g><title>link_binary (4,964,160 samples, 0.31%)</title><rect x="99.2858%" y="149" width="0.3085%" height="15" fill="rgb(247,173,49)"/><text x="99.5358%" y="159.50"></text></g><g><title>link_rlib (4,031,270 samples, 0.25%)</title><rect x="99.3438%" y="133" width="0.2505%" height="15" fill="rgb(224,114,35)"/><text x="99.5938%" y="143.50"></text></g><g><title>link (26,305,264 samples, 1.63%)</title><rect x="97.9603%" y="181" width="1.6347%" height="15" fill="rgb(245,159,27)"/><text x="98.2103%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,002,230 samples, 0.25%)</title><rect x="99.6906%" y="181" width="0.2487%" height="15" fill="rgb(245,172,44)"/><text x="99.9406%" y="191.50"></text></g><g><title>all (1,609,219,695 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,609,219,695 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>