<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (96,604,823 samples, 6.62%)</title><rect x="0.1599%" y="213" width="6.6173%" height="15" fill="rgb(227,0,7)"/><text x="0.4099%" y="223.50">LLVM_pass..</text></g><g><title>item_attrs (1,473,753 samples, 0.10%)</title><rect x="14.4312%" y="101" width="0.1009%" height="15" fill="rgb(217,0,24)"/><text x="14.6812%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,998,468 samples, 0.14%)</title><rect x="14.4003%" y="117" width="0.1369%" height="15" fill="rgb(221,193,54)"/><text x="14.6503%" y="127.50"></text></g><g><title>is_copy_raw (1,518,123 samples, 0.10%)</title><rect x="16.0207%" y="101" width="0.1040%" height="15" fill="rgb(248,212,6)"/><text x="16.2707%" y="111.50"></text></g><g><title>is_copy_raw (4,607,036 samples, 0.32%)</title><rect x="16.2107%" y="85" width="0.3156%" height="15" fill="rgb(208,68,35)"/><text x="16.4607%" y="95.50"></text></g><g><title>evaluate_obligation (3,632,976 samples, 0.25%)</title><rect x="16.2774%" y="69" width="0.2489%" height="15" fill="rgb(232,128,0)"/><text x="16.5274%" y="79.50"></text></g><g><title>needs_drop_raw (5,873,529 samples, 0.40%)</title><rect x="16.1251%" y="101" width="0.4023%" height="15" fill="rgb(207,160,47)"/><text x="16.3751%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,644,199 samples, 0.18%)</title><rect x="16.6220%" y="85" width="0.1811%" height="15" fill="rgb(228,23,34)"/><text x="16.8720%" y="95.50"></text></g><g><title>resolve_instance (5,117,104 samples, 0.35%)</title><rect x="16.5275%" y="101" width="0.3505%" height="15" fill="rgb(218,30,26)"/><text x="16.7775%" y="111.50"></text></g><g><title>thir_body (8,875,770 samples, 0.61%)</title><rect x="16.8908%" y="101" width="0.6080%" height="15" fill="rgb(220,122,19)"/><text x="17.1408%" y="111.50"></text></g><g><title>mir_const (56,655,066 samples, 3.88%)</title><rect x="13.6311%" y="149" width="3.8808%" height="15" fill="rgb(250,228,42)"/><text x="13.8811%" y="159.50">mir_..</text></g><g><title>unsafety_check_result (49,046,639 samples, 3.36%)</title><rect x="14.1523%" y="133" width="3.3596%" height="15" fill="rgb(240,193,28)"/><text x="14.4023%" y="143.50">uns..</text></g><g><title>mir_built (43,426,578 samples, 2.97%)</title><rect x="14.5372%" y="117" width="2.9747%" height="15" fill="rgb(216,20,37)"/><text x="14.7872%" y="127.50">mir..</text></g><g><title>mir_const_qualif (1,565,130 samples, 0.11%)</title><rect x="17.5119%" y="149" width="0.1072%" height="15" fill="rgb(206,188,39)"/><text x="17.7619%" y="159.50"></text></g><g><title>mir_promoted (64,058,638 samples, 4.39%)</title><rect x="13.2312%" y="165" width="4.3879%" height="15" fill="rgb(217,207,13)"/><text x="13.4812%" y="175.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (4,990,032 samples, 0.34%)</title><rect x="17.6192%" y="165" width="0.3418%" height="15" fill="rgb(231,73,38)"/><text x="17.8692%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (5,654,040 samples, 0.39%)</title><rect x="17.9611%" y="165" width="0.3873%" height="15" fill="rgb(225,20,46)"/><text x="18.2111%" y="175.50"></text></g><g><title>normalize_projection_ty (3,540,126 samples, 0.24%)</title><rect x="18.1059%" y="149" width="0.2425%" height="15" fill="rgb(210,31,41)"/><text x="18.3559%" y="159.50"></text></g><g><title>type_op_normalize_ty (1,492,242 samples, 0.10%)</title><rect x="18.4034%" y="165" width="0.1022%" height="15" fill="rgb(221,200,47)"/><text x="18.6534%" y="175.50"></text></g><g><title>type_op_prove_predicate (16,390,242 samples, 1.12%)</title><rect x="18.5056%" y="165" width="1.1227%" height="15" fill="rgb(226,26,5)"/><text x="18.7556%" y="175.50"></text></g><g><title>MIR_borrow_checking (185,573,116 samples, 12.71%)</title><rect x="6.9180%" y="197" width="12.7115%" height="15" fill="rgb(249,33,26)"/><text x="7.1680%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (184,584,440 samples, 12.64%)</title><rect x="6.9858%" y="181" width="12.6437%" height="15" fill="rgb(235,183,28)"/><text x="7.2358%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (1,561,005 samples, 0.11%)</title><rect x="19.6899%" y="197" width="0.1069%" height="15" fill="rgb(221,5,38)"/><text x="19.9399%" y="207.50"></text></g><g><title>codegen_fn_attrs (1,641,285 samples, 0.11%)</title><rect x="19.9192%" y="165" width="0.1124%" height="15" fill="rgb(247,18,42)"/><text x="20.1692%" y="175.50"></text></g><g><title>check_mod_attrs (3,354,376 samples, 0.23%)</title><rect x="19.8018%" y="181" width="0.2298%" height="15" fill="rgb(241,131,45)"/><text x="20.0518%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (3,336,712 samples, 0.23%)</title><rect x="20.1330%" y="181" width="0.2286%" height="15" fill="rgb(249,31,29)"/><text x="20.3830%" y="191.50"></text></g><g><title>misc_checking_1 (8,503,827 samples, 0.58%)</title><rect x="19.7968%" y="197" width="0.5825%" height="15" fill="rgb(225,111,53)"/><text x="20.0468%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (3,830,998 samples, 0.26%)</title><rect x="20.3795%" y="181" width="0.2624%" height="15" fill="rgb(238,160,17)"/><text x="20.6295%" y="191.50"></text></g><g><title>check_mod_liveness (3,127,881 samples, 0.21%)</title><rect x="20.4277%" y="165" width="0.2143%" height="15" fill="rgb(214,148,48)"/><text x="20.6777%" y="175.50"></text></g><g><title>misc_checking_2 (7,660,808 samples, 0.52%)</title><rect x="20.3793%" y="197" width="0.5248%" height="15" fill="rgb(232,36,49)"/><text x="20.6293%" y="207.50"></text></g><g><title>match_checking (3,827,589 samples, 0.26%)</title><rect x="20.6419%" y="181" width="0.2622%" height="15" fill="rgb(209,103,24)"/><text x="20.8919%" y="191.50"></text></g><g><title>check_match (3,543,267 samples, 0.24%)</title><rect x="20.6614%" y="165" width="0.2427%" height="15" fill="rgb(229,88,8)"/><text x="20.9114%" y="175.50"></text></g><g><title>check_private_in_public (1,574,476 samples, 0.11%)</title><rect x="20.9050%" y="181" width="0.1078%" height="15" fill="rgb(213,181,19)"/><text x="21.1550%" y="191.50"></text></g><g><title>death_checking (2,783,528 samples, 0.19%)</title><rect x="21.0128%" y="181" width="0.1907%" height="15" fill="rgb(254,191,54)"/><text x="21.2628%" y="191.50"></text></g><g><title>param_env (1,565,727 samples, 0.11%)</title><rect x="21.5551%" y="149" width="0.1072%" height="15" fill="rgb(241,83,37)"/><text x="21.8051%" y="159.50"></text></g><g><title>crate_lints (8,007,042 samples, 0.55%)</title><rect x="21.2037%" y="165" width="0.5485%" height="15" fill="rgb(233,36,39)"/><text x="21.4537%" y="175.50"></text></g><g><title>lint_checking (12,126,464 samples, 0.83%)</title><rect x="21.2035%" y="181" width="0.8306%" height="15" fill="rgb(226,3,54)"/><text x="21.4535%" y="191.50"></text></g><g><title>module_lints (4,115,862 samples, 0.28%)</title><rect x="21.7522%" y="165" width="0.2819%" height="15" fill="rgb(245,192,40)"/><text x="22.0022%" y="175.50"></text></g><g><title>lint_mod (4,093,252 samples, 0.28%)</title><rect x="21.7538%" y="149" width="0.2804%" height="15" fill="rgb(238,167,29)"/><text x="22.0038%" y="159.50"></text></g><g><title>privacy_access_levels (2,587,647 samples, 0.18%)</title><rect x="22.0341%" y="181" width="0.1772%" height="15" fill="rgb(232,182,51)"/><text x="22.2841%" y="191.50"></text></g><g><title>privacy_checking_modules (8,033,481 samples, 0.55%)</title><rect x="22.2114%" y="181" width="0.5503%" height="15" fill="rgb(231,60,39)"/><text x="22.4614%" y="191.50"></text></g><g><title>check_mod_privacy (8,015,231 samples, 0.55%)</title><rect x="22.2126%" y="165" width="0.5490%" height="15" fill="rgb(208,69,12)"/><text x="22.4626%" y="175.50"></text></g><g><title>misc_checking_3 (27,203,287 samples, 1.86%)</title><rect x="20.9041%" y="197" width="1.8634%" height="15" fill="rgb(235,93,37)"/><text x="21.1541%" y="207.50">m..</text></g><g><title>mir_const_qualif (5,878,752 samples, 0.40%)</title><rect x="24.0023%" y="85" width="0.4027%" height="15" fill="rgb(213,116,39)"/><text x="24.2523%" y="95.50"></text></g><g><title>mir_const (5,469,916 samples, 0.37%)</title><rect x="24.0303%" y="69" width="0.3747%" height="15" fill="rgb(222,207,29)"/><text x="24.2803%" y="79.50"></text></g><g><title>unsafety_check_result (4,575,247 samples, 0.31%)</title><rect x="24.0916%" y="53" width="0.3134%" height="15" fill="rgb(206,96,30)"/><text x="24.3416%" y="63.50"></text></g><g><title>mir_built (4,297,144 samples, 0.29%)</title><rect x="24.1106%" y="37" width="0.2943%" height="15" fill="rgb(218,138,4)"/><text x="24.3606%" y="47.50"></text></g><g><title>mir_borrowck (10,885,948 samples, 0.75%)</title><rect x="24.8432%" y="53" width="0.7457%" height="15" fill="rgb(250,191,14)"/><text x="25.0932%" y="63.50"></text></g><g><title>mir_for_ctfe (17,311,504 samples, 1.19%)</title><rect x="24.4050%" y="85" width="1.1858%" height="15" fill="rgb(239,60,40)"/><text x="24.6550%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (15,671,111 samples, 1.07%)</title><rect x="24.5174%" y="69" width="1.0734%" height="15" fill="rgb(206,27,48)"/><text x="24.7674%" y="79.50"></text></g><g><title>evaluate_obligation (2,819,130 samples, 0.19%)</title><rect x="27.6677%" y="69" width="0.1931%" height="15" fill="rgb(225,35,8)"/><text x="27.9177%" y="79.50"></text></g><g><title>eval_to_const_value_raw (60,324,587 samples, 4.13%)</title><rect x="23.8179%" y="133" width="4.1321%" height="15" fill="rgb(250,213,24)"/><text x="24.0679%" y="143.50">eval_..</text></g><g><title>eval_to_const_value_raw (60,245,057 samples, 4.13%)</title><rect x="23.8234%" y="117" width="4.1267%" height="15" fill="rgb(247,123,22)"/><text x="24.0734%" y="127.50">eval..</text></g><g><title>eval_to_allocation_raw (60,102,736 samples, 4.12%)</title><rect x="23.8331%" y="101" width="4.1169%" height="15" fill="rgb(231,138,38)"/><text x="24.0831%" y="111.50">eval..</text></g><g><title>typeck (34,427,882 samples, 2.36%)</title><rect x="25.5918%" y="85" width="2.3583%" height="15" fill="rgb(231,145,46)"/><text x="25.8418%" y="95.50">t..</text></g><g><title>impl_parent (3,440,365 samples, 0.24%)</title><rect x="27.9503%" y="133" width="0.2357%" height="15" fill="rgb(251,118,11)"/><text x="28.2003%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,855,665 samples, 0.13%)</title><rect x="28.0589%" y="117" width="0.1271%" height="15" fill="rgb(217,147,25)"/><text x="28.3089%" y="127.50"></text></g><g><title>impl_trait_ref (6,627,316 samples, 0.45%)</title><rect x="28.1860%" y="133" width="0.4540%" height="15" fill="rgb(247,81,37)"/><text x="28.4360%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,260,694 samples, 0.36%)</title><rect x="28.2796%" y="117" width="0.3603%" height="15" fill="rgb(209,12,38)"/><text x="28.5296%" y="127.50"></text></g><g><title>coherent_trait (86,578,941 samples, 5.93%)</title><rect x="22.8051%" y="165" width="5.9305%" height="15" fill="rgb(227,1,9)"/><text x="23.0551%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (85,789,963 samples, 5.88%)</title><rect x="22.8591%" y="149" width="5.8765%" height="15" fill="rgb(248,47,43)"/><text x="23.1091%" y="159.50">special..</text></g><g><title>coherence_checking (86,923,494 samples, 5.95%)</title><rect x="22.8022%" y="181" width="5.9541%" height="15" fill="rgb(221,10,30)"/><text x="23.0522%" y="191.50">coherenc..</text></g><g><title>associated_item (1,821,744 samples, 0.12%)</title><rect x="40.7687%" y="117" width="0.1248%" height="15" fill="rgb(210,229,1)"/><text x="41.0187%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (1,468,186 samples, 0.10%)</title><rect x="40.7929%" y="101" width="0.1006%" height="15" fill="rgb(222,148,37)"/><text x="41.0429%" y="111.50"></text></g><g><title>associated_items (2,473,955 samples, 0.17%)</title><rect x="40.7294%" y="133" width="0.1695%" height="15" fill="rgb(234,67,33)"/><text x="40.9794%" y="143.50"></text></g><g><title>dropck_outlives (1,982,208 samples, 0.14%)</title><rect x="40.9153%" y="133" width="0.1358%" height="15" fill="rgb(247,98,35)"/><text x="41.1653%" y="143.50"></text></g><g><title>specializes (1,709,634 samples, 0.12%)</title><rect x="42.7135%" y="117" width="0.1171%" height="15" fill="rgb(247,138,52)"/><text x="42.9635%" y="127.50"></text></g><g><title>evaluate_obligation (26,331,411 samples, 1.80%)</title><rect x="41.0511%" y="133" width="1.8037%" height="15" fill="rgb(213,79,30)"/><text x="41.3011%" y="143.50">e..</text></g><g><title>evaluate_obligation (1,551,423 samples, 0.11%)</title><rect x="43.1345%" y="117" width="0.1063%" height="15" fill="rgb(246,177,23)"/><text x="43.3845%" y="127.50"></text></g><g><title>method_autoderef_steps (3,098,355 samples, 0.21%)</title><rect x="43.0298%" y="133" width="0.2122%" height="15" fill="rgb(230,62,27)"/><text x="43.2798%" y="143.50"></text></g><g><title>evaluate_obligation (3,061,364 samples, 0.21%)</title><rect x="44.3397%" y="117" width="0.2097%" height="15" fill="rgb(216,154,8)"/><text x="44.5897%" y="127.50"></text></g><g><title>typeck (18,925,073 samples, 1.30%)</title><rect x="43.3835%" y="133" width="1.2963%" height="15" fill="rgb(244,35,45)"/><text x="43.6335%" y="143.50"></text></g><g><title>item_bodies_checking (232,443,672 samples, 15.92%)</title><rect x="28.7755%" y="181" width="15.9220%" height="15" fill="rgb(251,115,12)"/><text x="29.0255%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (232,439,402 samples, 15.92%)</title><rect x="28.7758%" y="165" width="15.9217%" height="15" fill="rgb(240,54,50)"/><text x="29.0258%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (231,731,385 samples, 15.87%)</title><rect x="28.8243%" y="149" width="15.8732%" height="15" fill="rgb(233,84,52)"/><text x="29.0743%" y="159.50">typeck</text></g><g><title>eval_to_const_value_raw (1,550,786 samples, 0.11%)</title><rect x="45.5055%" y="133" width="0.1062%" height="15" fill="rgb(207,117,47)"/><text x="45.7555%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,525,356 samples, 0.10%)</title><rect x="45.5072%" y="117" width="0.1045%" height="15" fill="rgb(249,43,39)"/><text x="45.7572%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,482,786 samples, 0.10%)</title><rect x="45.5101%" y="101" width="0.1016%" height="15" fill="rgb(209,38,44)"/><text x="45.7601%" y="111.50"></text></g><g><title>evaluate_obligation (2,026,720 samples, 0.14%)</title><rect x="45.4815%" y="149" width="0.1388%" height="15" fill="rgb(236,212,23)"/><text x="45.7315%" y="159.50"></text></g><g><title>impl_trait_ref (1,686,687 samples, 0.12%)</title><rect x="46.1994%" y="117" width="0.1155%" height="15" fill="rgb(242,79,21)"/><text x="46.4494%" y="127.50"></text></g><g><title>specializes (2,387,053 samples, 0.16%)</title><rect x="46.3919%" y="117" width="0.1635%" height="15" fill="rgb(211,96,35)"/><text x="46.6419%" y="127.50"></text></g><g><title>param_env (1,481,384 samples, 0.10%)</title><rect x="46.4540%" y="101" width="0.1015%" height="15" fill="rgb(253,215,40)"/><text x="46.7040%" y="111.50"></text></g><g><title>evaluate_obligation (10,011,662 samples, 0.69%)</title><rect x="45.8889%" y="133" width="0.6858%" height="15" fill="rgb(211,81,21)"/><text x="46.1389%" y="143.50"></text></g><g><title>item_types_checking (27,697,512 samples, 1.90%)</title><rect x="44.6976%" y="181" width="1.8972%" height="15" fill="rgb(208,190,38)"/><text x="44.9476%" y="191.50">i..</text></g><g><title>check_mod_item_types (27,670,711 samples, 1.90%)</title><rect x="44.6994%" y="165" width="1.8954%" height="15" fill="rgb(235,213,38)"/><text x="44.9494%" y="175.50">c..</text></g><g><title>typeck (13,362,873 samples, 0.92%)</title><rect x="45.6795%" y="149" width="0.9153%" height="15" fill="rgb(237,122,38)"/><text x="45.9295%" y="159.50"></text></g><g><title>fn_sig (1,996,956 samples, 0.14%)</title><rect x="46.7291%" y="149" width="0.1368%" height="15" fill="rgb(244,218,35)"/><text x="46.9791%" y="159.50"></text></g><g><title>generics_of (2,817,760 samples, 0.19%)</title><rect x="46.8658%" y="149" width="0.1930%" height="15" fill="rgb(240,68,47)"/><text x="47.1158%" y="159.50"></text></g><g><title>late_bound_vars_map (2,035,856 samples, 0.14%)</title><rect x="47.3259%" y="101" width="0.1395%" height="15" fill="rgb(210,16,53)"/><text x="47.5759%" y="111.50"></text></g><g><title>resolve_lifetimes (1,893,781 samples, 0.13%)</title><rect x="47.3356%" y="85" width="0.1297%" height="15" fill="rgb(235,124,12)"/><text x="47.5856%" y="95.50"></text></g><g><title>explicit_predicates_of (4,604,927 samples, 0.32%)</title><rect x="47.1631%" y="117" width="0.3154%" height="15" fill="rgb(224,169,11)"/><text x="47.4131%" y="127.50"></text></g><g><title>predicates_of (6,496,372 samples, 0.44%)</title><rect x="47.0938%" y="149" width="0.4450%" height="15" fill="rgb(250,166,2)"/><text x="47.3438%" y="159.50"></text></g><g><title>predicates_defined_on (6,105,608 samples, 0.42%)</title><rect x="47.1206%" y="133" width="0.4182%" height="15" fill="rgb(242,216,29)"/><text x="47.3706%" y="143.50"></text></g><g><title>type_collecting (14,638,858 samples, 1.00%)</title><rect x="46.5956%" y="181" width="1.0027%" height="15" fill="rgb(230,116,27)"/><text x="46.8456%" y="191.50"></text></g><g><title>collect_mod_item_types (14,609,698 samples, 1.00%)</title><rect x="46.5976%" y="165" width="1.0007%" height="15" fill="rgb(228,99,48)"/><text x="46.8476%" y="175.50"></text></g><g><title>mir_const_qualif (2,804,043 samples, 0.19%)</title><rect x="49.1396%" y="101" width="0.1921%" height="15" fill="rgb(253,11,6)"/><text x="49.3896%" y="111.50"></text></g><g><title>mir_const (2,614,662 samples, 0.18%)</title><rect x="49.1525%" y="85" width="0.1791%" height="15" fill="rgb(247,143,39)"/><text x="49.4025%" y="95.50"></text></g><g><title>unsafety_check_result (2,205,413 samples, 0.15%)</title><rect x="49.1806%" y="69" width="0.1511%" height="15" fill="rgb(236,97,10)"/><text x="49.4306%" y="79.50"></text></g><g><title>mir_built (2,080,621 samples, 0.14%)</title><rect x="49.1891%" y="53" width="0.1425%" height="15" fill="rgb(233,208,19)"/><text x="49.4391%" y="63.50"></text></g><g><title>mir_borrowck (5,036,909 samples, 0.35%)</title><rect x="49.5391%" y="69" width="0.3450%" height="15" fill="rgb(216,164,2)"/><text x="49.7891%" y="79.50"></text></g><g><title>mir_for_ctfe (8,077,879 samples, 0.55%)</title><rect x="49.3316%" y="101" width="0.5533%" height="15" fill="rgb(220,129,5)"/><text x="49.5816%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,300,315 samples, 0.50%)</title><rect x="49.3849%" y="85" width="0.5001%" height="15" fill="rgb(242,17,10)"/><text x="49.6349%" y="95.50"></text></g><g><title>eval_to_const_value_raw (26,622,402 samples, 1.82%)</title><rect x="49.0719%" y="149" width="1.8236%" height="15" fill="rgb(242,107,0)"/><text x="49.3219%" y="159.50">e..</text></g><g><title>eval_to_const_value_raw (26,595,011 samples, 1.82%)</title><rect x="49.0738%" y="133" width="1.8217%" height="15" fill="rgb(251,28,31)"/><text x="49.3238%" y="143.50">e..</text></g><g><title>eval_to_allocation_raw (26,533,849 samples, 1.82%)</title><rect x="49.0779%" y="117" width="1.8175%" height="15" fill="rgb(233,223,10)"/><text x="49.3279%" y="127.50">e..</text></g><g><title>typeck (14,745,899 samples, 1.01%)</title><rect x="49.8854%" y="101" width="1.0101%" height="15" fill="rgb(215,21,27)"/><text x="50.1354%" y="111.50"></text></g><g><title>evaluate_obligation (3,583,069 samples, 0.25%)</title><rect x="50.8955%" y="149" width="0.2454%" height="15" fill="rgb(232,23,21)"/><text x="51.1455%" y="159.50"></text></g><g><title>implied_outlives_bounds (2,252,843 samples, 0.15%)</title><rect x="51.1441%" y="149" width="0.1543%" height="15" fill="rgb(244,5,23)"/><text x="51.3941%" y="159.50"></text></g><g><title>param_env (3,569,218 samples, 0.24%)</title><rect x="51.3278%" y="149" width="0.2445%" height="15" fill="rgb(226,81,46)"/><text x="51.5778%" y="159.50"></text></g><g><title>region_scope_tree (2,947,220 samples, 0.20%)</title><rect x="51.5766%" y="149" width="0.2019%" height="15" fill="rgb(247,70,30)"/><text x="51.8266%" y="159.50"></text></g><g><title>check_impl_item_well_formed (59,002,605 samples, 4.04%)</title><rect x="47.7425%" y="165" width="4.0416%" height="15" fill="rgb(212,68,19)"/><text x="47.9925%" y="175.50">chec..</text></g><g><title>evaluate_obligation (2,980,185 samples, 0.20%)</title><rect x="52.9875%" y="149" width="0.2041%" height="15" fill="rgb(240,187,13)"/><text x="53.2375%" y="159.50"></text></g><g><title>param_env (2,206,548 samples, 0.15%)</title><rect x="53.2588%" y="149" width="0.1511%" height="15" fill="rgb(223,113,26)"/><text x="53.5088%" y="159.50"></text></g><g><title>check_item_well_formed (24,965,590 samples, 1.71%)</title><rect x="51.7841%" y="165" width="1.7101%" height="15" fill="rgb(206,192,2)"/><text x="52.0341%" y="175.50"></text></g><g><title>analysis (686,147,414 samples, 47.00%)</title><rect x="6.7772%" y="213" width="47.0000%" height="15" fill="rgb(241,108,4)"/><text x="7.0272%" y="223.50">analysis</text></g><g><title>type_check_crate (452,707,831 samples, 31.01%)</title><rect x="22.7675%" y="197" width="31.0098%" height="15" fill="rgb(247,173,49)"/><text x="23.0175%" y="207.50">type_check_crate</text></g><g><title>wf_checking (90,140,556 samples, 6.17%)</title><rect x="47.6028%" y="181" width="6.1745%" height="15" fill="rgb(224,114,35)"/><text x="47.8528%" y="191.50">wf_check..</text></g><g><title>check_trait_item_well_formed (4,132,623 samples, 0.28%)</title><rect x="53.4942%" y="165" width="0.2831%" height="15" fill="rgb(245,159,27)"/><text x="53.7442%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (1,722,153 samples, 0.12%)</title><rect x="58.1992%" y="181" width="0.1180%" height="15" fill="rgb(245,172,44)"/><text x="58.4492%" y="191.50"></text></g><g><title>layout_of (1,776,850 samples, 0.12%)</title><rect x="58.8378%" y="165" width="0.1217%" height="15" fill="rgb(236,23,11)"/><text x="59.0878%" y="175.50"></text></g><g><title>predicates_of (1,528,363 samples, 0.10%)</title><rect x="59.1478%" y="149" width="0.1047%" height="15" fill="rgb(205,117,38)"/><text x="59.3978%" y="159.50"></text></g><g><title>param_env (4,293,420 samples, 0.29%)</title><rect x="58.9595%" y="165" width="0.2941%" height="15" fill="rgb(237,72,25)"/><text x="59.2095%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,849,480 samples, 0.13%)</title><rect x="59.2536%" y="165" width="0.1267%" height="15" fill="rgb(244,70,9)"/><text x="59.5036%" y="175.50"></text></g><g><title>fn_abi_of_instance (14,680,454 samples, 1.01%)</title><rect x="58.3779%" y="181" width="1.0056%" height="15" fill="rgb(217,125,39)"/><text x="58.6279%" y="191.50"></text></g><g><title>layout_of (2,160,656 samples, 0.15%)</title><rect x="59.4259%" y="181" width="0.1480%" height="15" fill="rgb(235,36,10)"/><text x="59.6759%" y="191.50"></text></g><g><title>codegen_module (84,019,774 samples, 5.76%)</title><rect x="53.9224%" y="197" width="5.7552%" height="15" fill="rgb(251,123,47)"/><text x="54.1724%" y="207.50">codegen..</text></g><g><title>codegen_crate (86,227,137 samples, 5.91%)</title><rect x="53.7777%" y="213" width="5.9064%" height="15" fill="rgb(221,13,13)"/><text x="54.0277%" y="223.50">codegen_..</text></g><g><title>LLVM_module_codegen (305,168,753 samples, 20.90%)</title><rect x="59.6994%" y="197" width="20.9036%" height="15" fill="rgb(238,131,9)"/><text x="59.9494%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (286,931,595 samples, 19.65%)</title><rect x="60.9486%" y="181" width="19.6544%" height="15" fill="rgb(211,50,8)"/><text x="61.1986%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (323,456,249 samples, 22.16%)</title><rect x="59.6842%" y="213" width="22.1563%" height="15" fill="rgb(245,182,24)"/><text x="59.9342%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (18,064,884 samples, 1.24%)</title><rect x="80.6030%" y="197" width="1.2374%" height="15" fill="rgb(242,14,37)"/><text x="80.8530%" y="207.50"></text></g><g><title>macro_expand_crate (71,889,041 samples, 4.92%)</title><rect x="81.9910%" y="197" width="4.9243%" height="15" fill="rgb(246,228,12)"/><text x="82.2410%" y="207.50">macro_..</text></g><g><title>expand_crate (71,871,771 samples, 4.92%)</title><rect x="81.9922%" y="181" width="4.9231%" height="15" fill="rgb(213,55,15)"/><text x="82.2422%" y="191.50">expand..</text></g><g><title>late_resolve_crate (15,486,627 samples, 1.06%)</title><rect x="86.9905%" y="181" width="1.0608%" height="15" fill="rgb(209,9,3)"/><text x="87.2405%" y="191.50"></text></g><g><title>configure_and_expand (92,450,540 samples, 6.33%)</title><rect x="81.8404%" y="213" width="6.3327%" height="15" fill="rgb(230,59,30)"/><text x="82.0904%" y="223.50">configur..</text></g><g><title>resolve_crate (18,238,385 samples, 1.25%)</title><rect x="86.9238%" y="197" width="1.2493%" height="15" fill="rgb(209,121,21)"/><text x="87.1738%" y="207.50"></text></g><g><title>drop_ast (2,678,037 samples, 0.18%)</title><rect x="88.1731%" y="213" width="0.1834%" height="15" fill="rgb(220,109,13)"/><text x="88.4231%" y="223.50"></text></g><g><title>early_lint_checks (3,833,038 samples, 0.26%)</title><rect x="88.3584%" y="213" width="0.2626%" height="15" fill="rgb(232,18,1)"/><text x="88.6084%" y="223.50"></text></g><g><title>free_global_ctxt (17,421,936 samples, 1.19%)</title><rect x="88.6209%" y="213" width="1.1934%" height="15" fill="rgb(215,41,42)"/><text x="88.8709%" y="223.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,023,275 samples, 0.14%)</title><rect x="91.4739%" y="117" width="0.1386%" height="15" fill="rgb(224,123,36)"/><text x="91.7239%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,697,358 samples, 0.12%)</title><rect x="91.6125%" y="117" width="0.1163%" height="15" fill="rgb(240,125,3)"/><text x="91.8625%" y="127.50"></text></g><g><title>optimized_mir (5,964,763 samples, 0.41%)</title><rect x="91.3420%" y="133" width="0.4086%" height="15" fill="rgb(205,98,50)"/><text x="91.5920%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (3,025,737 samples, 0.21%)</title><rect x="91.8212%" y="117" width="0.2073%" height="15" fill="rgb(205,185,37)"/><text x="92.0712%" y="127.50"></text></g><g><title>resolve_instance (5,598,020 samples, 0.38%)</title><rect x="91.7506%" y="133" width="0.3835%" height="15" fill="rgb(238,207,15)"/><text x="92.0006%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (18,978,543 samples, 1.30%)</title><rect x="91.0172%" y="149" width="1.3000%" height="15" fill="rgb(213,199,42)"/><text x="91.2672%" y="159.50"></text></g><g><title>monomorphization_collector (19,157,464 samples, 1.31%)</title><rect x="91.0168%" y="165" width="1.3123%" height="15" fill="rgb(235,201,11)"/><text x="91.2668%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (2,182,542 samples, 0.15%)</title><rect x="92.3300%" y="149" width="0.1495%" height="15" fill="rgb(207,46,11)"/><text x="92.5800%" y="159.50"></text></g><g><title>symbol_name (1,991,520 samples, 0.14%)</title><rect x="92.3431%" y="133" width="0.1364%" height="15" fill="rgb(241,35,35)"/><text x="92.5931%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (22,421,027 samples, 1.54%)</title><rect x="91.0140%" y="181" width="1.5358%" height="15" fill="rgb(243,32,47)"/><text x="91.2640%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,222,273 samples, 0.22%)</title><rect x="92.3291%" y="165" width="0.2207%" height="15" fill="rgb(247,202,23)"/><text x="92.5791%" y="175.50"></text></g><g><title>exported_symbols (23,646,380 samples, 1.62%)</title><rect x="91.0075%" y="197" width="1.6197%" height="15" fill="rgb(219,102,11)"/><text x="91.2575%" y="207.50"></text></g><g><title>is_sized_raw (1,767,181 samples, 0.12%)</title><rect x="94.5055%" y="165" width="0.1210%" height="15" fill="rgb(243,110,44)"/><text x="94.7555%" y="175.50"></text></g><g><title>layout_of (5,725,811 samples, 0.39%)</title><rect x="94.3172%" y="181" width="0.3922%" height="15" fill="rgb(222,74,54)"/><text x="94.5672%" y="191.50"></text></g><g><title>is_copy_raw (1,743,197 samples, 0.12%)</title><rect x="96.6790%" y="149" width="0.1194%" height="15" fill="rgb(216,99,12)"/><text x="96.9290%" y="159.50"></text></g><g><title>needs_drop_raw (2,139,362 samples, 0.15%)</title><rect x="96.6589%" y="165" width="0.1465%" height="15" fill="rgb(226,22,26)"/><text x="96.9089%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (30,939,606 samples, 2.12%)</title><rect x="94.7094%" y="181" width="2.1193%" height="15" fill="rgb(217,163,10)"/><text x="94.9594%" y="191.50">m..</text></g><g><title>optimized_mir (61,550,279 samples, 4.22%)</title><rect x="92.6743%" y="197" width="4.2161%" height="15" fill="rgb(213,25,53)"/><text x="92.9243%" y="207.50">optim..</text></g><g><title>generate_crate_metadata (103,937,907 samples, 7.12%)</title><rect x="89.8143%" y="213" width="7.1196%" height="15" fill="rgb(252,105,26)"/><text x="90.0643%" y="223.50">generate_c..</text></g><g><title>hir_lowering (28,886,774 samples, 1.98%)</title><rect x="96.9339%" y="213" width="1.9787%" height="15" fill="rgb(220,39,43)"/><text x="97.1839%" y="223.50">h..</text></g><g><title>link_crate (5,184,072 samples, 0.36%)</title><rect x="98.9148%" y="197" width="0.3551%" height="15" fill="rgb(229,68,48)"/><text x="99.1648%" y="207.50"></text></g><g><title>link_binary (5,059,971 samples, 0.35%)</title><rect x="98.9233%" y="181" width="0.3466%" height="15" fill="rgb(252,8,32)"/><text x="99.1733%" y="191.50"></text></g><g><title>link_rlib (4,210,103 samples, 0.29%)</title><rect x="98.9816%" y="165" width="0.2884%" height="15" fill="rgb(223,20,43)"/><text x="99.2316%" y="175.50"></text></g><g><title>link (5,227,553 samples, 0.36%)</title><rect x="98.9126%" y="213" width="0.3581%" height="15" fill="rgb(229,81,49)"/><text x="99.1626%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (8,449,456 samples, 0.58%)</title><rect x="99.3255%" y="213" width="0.5788%" height="15" fill="rgb(236,28,36)"/><text x="99.5755%" y="223.50"></text></g><g><title>all (1,459,887,042 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,459,887,042 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>