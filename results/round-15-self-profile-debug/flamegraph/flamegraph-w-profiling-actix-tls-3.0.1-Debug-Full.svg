<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (75,990,230 samples, 11.54%)</title><rect x="0.1302%" y="213" width="11.5407%" height="15" fill="rgb(227,0,7)"/><text x="0.3802%" y="223.50">LLVM_passes</text></g><g><title>is_copy_raw (1,626,206 samples, 0.25%)</title><rect x="16.5423%" y="85" width="0.2470%" height="15" fill="rgb(217,0,24)"/><text x="16.7923%" y="95.50"></text></g><g><title>evaluate_obligation (1,331,331 samples, 0.20%)</title><rect x="16.5871%" y="69" width="0.2022%" height="15" fill="rgb(221,193,54)"/><text x="16.8371%" y="79.50"></text></g><g><title>needs_drop_raw (2,370,355 samples, 0.36%)</title><rect x="16.4319%" y="101" width="0.3600%" height="15" fill="rgb(248,212,6)"/><text x="16.6819%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (681,106 samples, 0.10%)</title><rect x="16.8374%" y="85" width="0.1034%" height="15" fill="rgb(208,68,35)"/><text x="17.0874%" y="95.50"></text></g><g><title>specialization_graph_of (853,548 samples, 0.13%)</title><rect x="16.9575%" y="85" width="0.1296%" height="15" fill="rgb(232,128,0)"/><text x="17.2075%" y="95.50"></text></g><g><title>resolve_instance (2,049,611 samples, 0.31%)</title><rect x="16.7919%" y="101" width="0.3113%" height="15" fill="rgb(207,160,47)"/><text x="17.0419%" y="111.50"></text></g><g><title>thir_body (1,614,365 samples, 0.25%)</title><rect x="17.1105%" y="101" width="0.2452%" height="15" fill="rgb(228,23,34)"/><text x="17.3605%" y="111.50"></text></g><g><title>mir_const (13,494,215 samples, 2.05%)</title><rect x="15.3116%" y="149" width="2.0494%" height="15" fill="rgb(218,30,26)"/><text x="15.5616%" y="159.50">m..</text></g><g><title>unsafety_check_result (11,832,627 samples, 1.80%)</title><rect x="15.5639%" y="133" width="1.7970%" height="15" fill="rgb(220,122,19)"/><text x="15.8139%" y="143.50">u..</text></g><g><title>mir_built (10,657,694 samples, 1.62%)</title><rect x="15.7423%" y="117" width="1.6186%" height="15" fill="rgb(250,228,42)"/><text x="15.9923%" y="127.50"></text></g><g><title>mir_const_qualif (729,728 samples, 0.11%)</title><rect x="17.3609%" y="149" width="0.1108%" height="15" fill="rgb(240,193,28)"/><text x="17.6109%" y="159.50"></text></g><g><title>mir_promoted (15,618,403 samples, 2.37%)</title><rect x="15.1000%" y="165" width="2.3720%" height="15" fill="rgb(216,20,37)"/><text x="15.3500%" y="175.50">mi..</text></g><g><title>type_op_ascribe_user_type (1,369,353 samples, 0.21%)</title><rect x="17.4720%" y="165" width="0.2080%" height="15" fill="rgb(206,188,39)"/><text x="17.7220%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (704,566 samples, 0.11%)</title><rect x="17.6800%" y="165" width="0.1070%" height="15" fill="rgb(217,207,13)"/><text x="17.9300%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,801,506 samples, 0.73%)</title><rect x="17.8591%" y="165" width="0.7292%" height="15" fill="rgb(231,73,38)"/><text x="18.1091%" y="175.50"></text></g><g><title>MIR_borrow_checking (45,103,351 samples, 6.85%)</title><rect x="11.7416%" y="197" width="6.8499%" height="15" fill="rgb(225,20,46)"/><text x="11.9916%" y="207.50">MIR_borro..</text></g><g><title>mir_borrowck (44,888,690 samples, 6.82%)</title><rect x="11.7742%" y="181" width="6.8173%" height="15" fill="rgb(210,31,41)"/><text x="12.0242%" y="191.50">mir_borro..</text></g><g><title>check_mod_attrs (973,452 samples, 0.15%)</title><rect x="18.6974%" y="181" width="0.1478%" height="15" fill="rgb(221,200,47)"/><text x="18.9474%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (730,938 samples, 0.11%)</title><rect x="18.8989%" y="181" width="0.1110%" height="15" fill="rgb(226,26,5)"/><text x="19.1489%" y="191.50"></text></g><g><title>misc_checking_1 (2,203,712 samples, 0.33%)</title><rect x="18.6910%" y="197" width="0.3347%" height="15" fill="rgb(249,33,26)"/><text x="18.9410%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (823,808 samples, 0.13%)</title><rect x="19.0260%" y="181" width="0.1251%" height="15" fill="rgb(235,183,28)"/><text x="19.2760%" y="191.50"></text></g><g><title>misc_checking_2 (1,902,939 samples, 0.29%)</title><rect x="19.0257%" y="197" width="0.2890%" height="15" fill="rgb(221,5,38)"/><text x="19.2757%" y="207.50"></text></g><g><title>match_checking (1,077,171 samples, 0.16%)</title><rect x="19.1511%" y="181" width="0.1636%" height="15" fill="rgb(247,18,42)"/><text x="19.4011%" y="191.50"></text></g><g><title>check_match (1,022,479 samples, 0.16%)</title><rect x="19.1594%" y="165" width="0.1553%" height="15" fill="rgb(241,131,45)"/><text x="19.4094%" y="175.50"></text></g><g><title>death_checking (968,770 samples, 0.15%)</title><rect x="19.3849%" y="181" width="0.1471%" height="15" fill="rgb(249,31,29)"/><text x="19.6349%" y="191.50"></text></g><g><title>param_env (780,249 samples, 0.12%)</title><rect x="19.8356%" y="149" width="0.1185%" height="15" fill="rgb(225,111,53)"/><text x="20.0856%" y="159.50"></text></g><g><title>crate_lints (4,494,605 samples, 0.68%)</title><rect x="19.5323%" y="165" width="0.6826%" height="15" fill="rgb(238,160,17)"/><text x="19.7823%" y="175.50"></text></g><g><title>type_of (1,624,027 samples, 0.25%)</title><rect x="19.9683%" y="149" width="0.2466%" height="15" fill="rgb(214,148,48)"/><text x="20.2183%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,085,861 samples, 0.16%)</title><rect x="20.0500%" y="133" width="0.1649%" height="15" fill="rgb(232,36,49)"/><text x="20.3000%" y="143.50"></text></g><g><title>lint_checking (5,627,817 samples, 0.85%)</title><rect x="19.5320%" y="181" width="0.8547%" height="15" fill="rgb(209,103,24)"/><text x="19.7820%" y="191.50"></text></g><g><title>module_lints (1,131,062 samples, 0.17%)</title><rect x="20.2149%" y="165" width="0.1718%" height="15" fill="rgb(229,88,8)"/><text x="20.4649%" y="175.50"></text></g><g><title>lint_mod (1,117,502 samples, 0.17%)</title><rect x="20.2170%" y="149" width="0.1697%" height="15" fill="rgb(213,181,19)"/><text x="20.4670%" y="159.50"></text></g><g><title>privacy_access_levels (728,157 samples, 0.11%)</title><rect x="20.3867%" y="181" width="0.1106%" height="15" fill="rgb(254,191,54)"/><text x="20.6367%" y="191.50"></text></g><g><title>privacy_checking_modules (1,791,928 samples, 0.27%)</title><rect x="20.4973%" y="181" width="0.2721%" height="15" fill="rgb(241,83,37)"/><text x="20.7473%" y="191.50"></text></g><g><title>check_mod_privacy (1,782,338 samples, 0.27%)</title><rect x="20.4987%" y="165" width="0.2707%" height="15" fill="rgb(233,36,39)"/><text x="20.7487%" y="175.50"></text></g><g><title>misc_checking_3 (9,597,656 samples, 1.46%)</title><rect x="19.3147%" y="197" width="1.4576%" height="15" fill="rgb(226,3,54)"/><text x="19.5647%" y="207.50"></text></g><g><title>impl_parent (3,723,260 samples, 0.57%)</title><rect x="21.9086%" y="133" width="0.5655%" height="15" fill="rgb(245,192,40)"/><text x="22.1586%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,228,136 samples, 0.34%)</title><rect x="22.1356%" y="117" width="0.3384%" height="15" fill="rgb(238,167,29)"/><text x="22.3856%" y="127.50"></text></g><g><title>impl_trait_ref (8,303,776 samples, 1.26%)</title><rect x="22.4740%" y="133" width="1.2611%" height="15" fill="rgb(232,182,51)"/><text x="22.7240%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,400,869 samples, 0.97%)</title><rect x="22.7630%" y="117" width="0.9721%" height="15" fill="rgb(231,60,39)"/><text x="23.0130%" y="127.50"></text></g><g><title>trait_impls_of (1,585,307 samples, 0.24%)</title><rect x="23.7435%" y="133" width="0.2408%" height="15" fill="rgb(208,69,12)"/><text x="23.9935%" y="143.50"></text></g><g><title>coherent_trait (20,969,669 samples, 3.18%)</title><rect x="20.7998%" y="165" width="3.1847%" height="15" fill="rgb(235,93,37)"/><text x="21.0498%" y="175.50">coh..</text></g><g><title>specialization_graph_of (20,259,822 samples, 3.08%)</title><rect x="20.9076%" y="149" width="3.0769%" height="15" fill="rgb(213,116,39)"/><text x="21.1576%" y="159.50">spe..</text></g><g><title>coherence_checking (21,106,420 samples, 3.21%)</title><rect x="20.7955%" y="181" width="3.2055%" height="15" fill="rgb(222,207,29)"/><text x="21.0455%" y="191.50">coh..</text></g><g><title>dropck_outlives (800,186 samples, 0.12%)</title><rect x="27.9233%" y="133" width="0.1215%" height="15" fill="rgb(206,96,30)"/><text x="28.1733%" y="143.50"></text></g><g><title>evaluate_obligation (2,793,583 samples, 0.42%)</title><rect x="28.0449%" y="133" width="0.4243%" height="15" fill="rgb(218,138,4)"/><text x="28.2949%" y="143.50"></text></g><g><title>evaluate_obligation (2,307,582 samples, 0.35%)</title><rect x="30.8652%" y="117" width="0.3505%" height="15" fill="rgb(250,191,14)"/><text x="31.1152%" y="127.50"></text></g><g><title>typeck (18,150,082 samples, 2.76%)</title><rect x="28.7180%" y="133" width="2.7565%" height="15" fill="rgb(239,60,40)"/><text x="28.9680%" y="143.50">ty..</text></g><g><title>item_bodies_checking (49,193,413 samples, 7.47%)</title><rect x="24.0112%" y="181" width="7.4711%" height="15" fill="rgb(206,27,48)"/><text x="24.2612%" y="191.50">item_bodie..</text></g><g><title>typeck_item_bodies (49,188,923 samples, 7.47%)</title><rect x="24.0119%" y="165" width="7.4704%" height="15" fill="rgb(225,35,8)"/><text x="24.2619%" y="175.50">typeck_ite..</text></g><g><title>typeck (49,048,132 samples, 7.45%)</title><rect x="24.0333%" y="149" width="7.4490%" height="15" fill="rgb(250,213,24)"/><text x="24.2833%" y="159.50">typeck</text></g><g><title>mir_borrowck (1,617,856 samples, 0.25%)</title><rect x="32.2576%" y="117" width="0.2457%" height="15" fill="rgb(247,123,22)"/><text x="32.5076%" y="127.50"></text></g><g><title>evaluate_obligation (895,811 samples, 0.14%)</title><rect x="33.2306%" y="37" width="0.1360%" height="15" fill="rgb(231,138,38)"/><text x="33.4806%" y="47.50"></text></g><g><title>mir_built (6,384,815 samples, 0.97%)</title><rect x="32.5577%" y="69" width="0.9697%" height="15" fill="rgb(231,145,46)"/><text x="32.8077%" y="79.50"></text></g><g><title>typeck (5,938,960 samples, 0.90%)</title><rect x="32.6254%" y="53" width="0.9020%" height="15" fill="rgb(251,118,11)"/><text x="32.8754%" y="63.50"></text></g><g><title>mir_built (699,087 samples, 0.11%)</title><rect x="33.5426%" y="53" width="0.1062%" height="15" fill="rgb(217,147,25)"/><text x="33.7926%" y="63.50"></text></g><g><title>mir_const (7,446,824 samples, 1.13%)</title><rect x="32.5179%" y="101" width="1.1310%" height="15" fill="rgb(247,81,37)"/><text x="32.7679%" y="111.50"></text></g><g><title>unsafety_check_result (7,279,633 samples, 1.11%)</title><rect x="32.5433%" y="85" width="1.1056%" height="15" fill="rgb(209,12,38)"/><text x="32.7933%" y="95.50"></text></g><g><title>unsafety_check_result (799,638 samples, 0.12%)</title><rect x="33.5274%" y="69" width="0.1214%" height="15" fill="rgb(227,1,9)"/><text x="33.7774%" y="79.50"></text></g><g><title>mir_promoted (7,551,715 samples, 1.15%)</title><rect x="32.5033%" y="117" width="1.1469%" height="15" fill="rgb(248,47,43)"/><text x="32.7533%" y="127.50"></text></g><g><title>type_of (10,502,865 samples, 1.60%)</title><rect x="32.0821%" y="149" width="1.5951%" height="15" fill="rgb(221,10,30)"/><text x="32.3321%" y="159.50"></text></g><g><title>mir_borrowck (10,412,334 samples, 1.58%)</title><rect x="32.0959%" y="133" width="1.5813%" height="15" fill="rgb(210,229,1)"/><text x="32.3459%" y="143.50"></text></g><g><title>item_types_checking (15,271,003 samples, 2.32%)</title><rect x="31.4823%" y="181" width="2.3192%" height="15" fill="rgb(222,148,37)"/><text x="31.7323%" y="191.50">i..</text></g><g><title>check_mod_item_types (15,256,263 samples, 2.32%)</title><rect x="31.4845%" y="165" width="2.3170%" height="15" fill="rgb(234,67,33)"/><text x="31.7345%" y="175.50">c..</text></g><g><title>typeck (818,318 samples, 0.12%)</title><rect x="33.6772%" y="149" width="0.1243%" height="15" fill="rgb(247,98,35)"/><text x="33.9272%" y="159.50"></text></g><g><title>fn_sig (668,205 samples, 0.10%)</title><rect x="33.8865%" y="149" width="0.1015%" height="15" fill="rgb(247,138,52)"/><text x="34.1365%" y="159.50"></text></g><g><title>explicit_predicates_of (947,140 samples, 0.14%)</title><rect x="34.1253%" y="117" width="0.1438%" height="15" fill="rgb(213,79,30)"/><text x="34.3753%" y="127.50"></text></g><g><title>predicates_of (2,000,815 samples, 0.30%)</title><rect x="34.0829%" y="149" width="0.3039%" height="15" fill="rgb(246,177,23)"/><text x="34.3329%" y="159.50"></text></g><g><title>predicates_defined_on (1,895,361 samples, 0.29%)</title><rect x="34.0989%" y="133" width="0.2879%" height="15" fill="rgb(230,62,27)"/><text x="34.3489%" y="143.50"></text></g><g><title>inferred_outlives_of (774,568 samples, 0.12%)</title><rect x="34.2691%" y="117" width="0.1176%" height="15" fill="rgb(216,154,8)"/><text x="34.5191%" y="127.50"></text></g><g><title>inferred_outlives_crate (731,178 samples, 0.11%)</title><rect x="34.2757%" y="101" width="0.1110%" height="15" fill="rgb(244,35,45)"/><text x="34.5257%" y="111.50"></text></g><g><title>type_collecting (4,169,602 samples, 0.63%)</title><rect x="33.8028%" y="181" width="0.6332%" height="15" fill="rgb(251,115,12)"/><text x="34.0528%" y="191.50"></text></g><g><title>collect_mod_item_types (4,145,561 samples, 0.63%)</title><rect x="33.8065%" y="165" width="0.6296%" height="15" fill="rgb(240,54,50)"/><text x="34.0565%" y="175.50"></text></g><g><title>evaluate_obligation (1,364,875 samples, 0.21%)</title><rect x="35.1589%" y="149" width="0.2073%" height="15" fill="rgb(233,84,52)"/><text x="35.4089%" y="159.50"></text></g><g><title>param_env (759,581 samples, 0.12%)</title><rect x="35.5233%" y="149" width="0.1154%" height="15" fill="rgb(207,117,47)"/><text x="35.7733%" y="159.50"></text></g><g><title>region_scope_tree (671,876 samples, 0.10%)</title><rect x="35.6499%" y="149" width="0.1020%" height="15" fill="rgb(249,43,39)"/><text x="35.8999%" y="159.50"></text></g><g><title>check_impl_item_well_formed (8,314,123 samples, 1.26%)</title><rect x="34.5024%" y="165" width="1.2627%" height="15" fill="rgb(209,38,44)"/><text x="34.7524%" y="175.50"></text></g><g><title>evaluate_obligation (993,529 samples, 0.15%)</title><rect x="36.1963%" y="149" width="0.1509%" height="15" fill="rgb(236,212,23)"/><text x="36.4463%" y="159.50"></text></g><g><title>check_item_well_formed (5,122,722 samples, 0.78%)</title><rect x="35.7651%" y="165" width="0.7780%" height="15" fill="rgb(242,79,21)"/><text x="36.0151%" y="175.50"></text></g><g><title>analysis (164,392,745 samples, 24.97%)</title><rect x="11.6710%" y="213" width="24.9666%" height="15" fill="rgb(211,96,35)"/><text x="11.9210%" y="223.50">analysis</text></g><g><title>type_check_crate (104,464,635 samples, 15.87%)</title><rect x="20.7723%" y="197" width="15.8652%" height="15" fill="rgb(253,215,40)"/><text x="21.0223%" y="207.50">type_check_crate</text></g><g><title>wf_checking (14,486,555 samples, 2.20%)</title><rect x="34.4374%" y="181" width="2.2001%" height="15" fill="rgb(211,81,21)"/><text x="34.6874%" y="191.50">w..</text></g><g><title>compute_debuginfo_type_name (1,163,032 samples, 0.18%)</title><rect x="44.5958%" y="181" width="0.1766%" height="15" fill="rgb(208,190,38)"/><text x="44.8458%" y="191.50"></text></g><g><title>const_caller_location (885,520 samples, 0.13%)</title><rect x="44.7724%" y="181" width="0.1345%" height="15" fill="rgb(235,213,38)"/><text x="45.0224%" y="191.50"></text></g><g><title>codegen_fn_attrs (915,874 samples, 0.14%)</title><rect x="45.3254%" y="165" width="0.1391%" height="15" fill="rgb(237,122,38)"/><text x="45.5754%" y="175.50"></text></g><g><title>layout_of (1,383,993 samples, 0.21%)</title><rect x="45.4948%" y="165" width="0.2102%" height="15" fill="rgb(244,218,35)"/><text x="45.7448%" y="175.50"></text></g><g><title>predicates_of (1,164,946 samples, 0.18%)</title><rect x="46.0816%" y="149" width="0.1769%" height="15" fill="rgb(240,68,47)"/><text x="46.3316%" y="159.50"></text></g><g><title>predicates_defined_on (839,983 samples, 0.13%)</title><rect x="46.1310%" y="133" width="0.1276%" height="15" fill="rgb(210,16,53)"/><text x="46.3810%" y="143.50"></text></g><g><title>param_env (3,669,020 samples, 0.56%)</title><rect x="45.7050%" y="165" width="0.5572%" height="15" fill="rgb(235,124,12)"/><text x="45.9550%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,551,824 samples, 0.24%)</title><rect x="46.2622%" y="165" width="0.2357%" height="15" fill="rgb(224,169,11)"/><text x="46.5122%" y="175.50"></text></g><g><title>normalize_projection_ty (1,309,820 samples, 0.20%)</title><rect x="46.2990%" y="149" width="0.1989%" height="15" fill="rgb(250,166,2)"/><text x="46.5490%" y="159.50"></text></g><g><title>fn_abi_of_instance (10,479,169 samples, 1.59%)</title><rect x="44.9121%" y="181" width="1.5915%" height="15" fill="rgb(242,216,29)"/><text x="45.1621%" y="191.50"></text></g><g><title>layout_of (940,038 samples, 0.14%)</title><rect x="46.9390%" y="69" width="0.1428%" height="15" fill="rgb(230,116,27)"/><text x="47.1890%" y="79.50"></text></g><g><title>layout_of (1,044,670 samples, 0.16%)</title><rect x="46.9270%" y="85" width="0.1587%" height="15" fill="rgb(228,99,48)"/><text x="47.1770%" y="95.50"></text></g><g><title>layout_of (1,278,483 samples, 0.19%)</title><rect x="46.9025%" y="101" width="0.1942%" height="15" fill="rgb(253,11,6)"/><text x="47.1525%" y="111.50"></text></g><g><title>layout_of (1,716,968 samples, 0.26%)</title><rect x="46.8636%" y="117" width="0.2608%" height="15" fill="rgb(247,143,39)"/><text x="47.1136%" y="127.50"></text></g><g><title>layout_of (2,312,834 samples, 0.35%)</title><rect x="46.8210%" y="133" width="0.3513%" height="15" fill="rgb(236,97,10)"/><text x="47.0710%" y="143.50"></text></g><g><title>layout_of (2,709,208 samples, 0.41%)</title><rect x="46.7831%" y="149" width="0.4115%" height="15" fill="rgb(233,208,19)"/><text x="47.0331%" y="159.50"></text></g><g><title>layout_of (3,018,919 samples, 0.46%)</title><rect x="46.7529%" y="165" width="0.4585%" height="15" fill="rgb(216,164,2)"/><text x="47.0029%" y="175.50"></text></g><g><title>layout_of (4,378,643 samples, 0.66%)</title><rect x="46.5749%" y="181" width="0.6650%" height="15" fill="rgb(220,129,5)"/><text x="46.8249%" y="191.50"></text></g><g><title>symbol_name (1,186,067 samples, 0.18%)</title><rect x="47.2464%" y="181" width="0.1801%" height="15" fill="rgb(242,17,10)"/><text x="47.4964%" y="191.50"></text></g><g><title>codegen_module (67,956,713 samples, 10.32%)</title><rect x="37.1310%" y="197" width="10.3207%" height="15" fill="rgb(242,107,0)"/><text x="37.3810%" y="207.50">codegen_module</text></g><g><title>codegen_crate (71,330,393 samples, 10.83%)</title><rect x="36.6391%" y="213" width="10.8331%" height="15" fill="rgb(251,28,31)"/><text x="36.8891%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (204,472,026 samples, 31.05%)</title><rect x="47.5789%" y="197" width="31.0535%" height="15" fill="rgb(233,223,10)"/><text x="47.8289%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (192,023,270 samples, 29.16%)</title><rect x="49.4695%" y="181" width="29.1629%" height="15" fill="rgb(215,21,27)"/><text x="49.7195%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (216,851,427 samples, 32.93%)</title><rect x="47.4722%" y="213" width="32.9335%" height="15" fill="rgb(232,23,21)"/><text x="47.7222%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,676,516 samples, 1.77%)</title><rect x="78.6324%" y="197" width="1.7733%" height="15" fill="rgb(244,5,23)"/><text x="78.8824%" y="207.50">L..</text></g><g><title>metadata_register_crate (10,972,191 samples, 1.67%)</title><rect x="87.6149%" y="165" width="1.6664%" height="15" fill="rgb(226,81,46)"/><text x="87.8649%" y="175.50"></text></g><g><title>metadata_register_crate (2,148,931 samples, 0.33%)</title><rect x="88.9549%" y="149" width="0.3264%" height="15" fill="rgb(247,70,30)"/><text x="89.2049%" y="159.50"></text></g><g><title>macro_expand_crate (58,345,803 samples, 8.86%)</title><rect x="80.5047%" y="197" width="8.8611%" height="15" fill="rgb(212,68,19)"/><text x="80.7547%" y="207.50">macro_expand_..</text></g><g><title>expand_crate (58,332,173 samples, 8.86%)</title><rect x="80.5068%" y="181" width="8.8590%" height="15" fill="rgb(240,187,13)"/><text x="80.7568%" y="191.50">expand_crate</text></g><g><title>late_resolve_crate (3,150,191 samples, 0.48%)</title><rect x="89.4532%" y="181" width="0.4784%" height="15" fill="rgb(223,113,26)"/><text x="89.7032%" y="191.50"></text></g><g><title>configure_and_expand (62,927,399 samples, 9.56%)</title><rect x="80.4057%" y="213" width="9.5569%" height="15" fill="rgb(206,192,2)"/><text x="80.6557%" y="223.50">configure_and_..</text></g><g><title>resolve_crate (3,796,748 samples, 0.58%)</title><rect x="89.3860%" y="197" width="0.5766%" height="15" fill="rgb(241,108,4)"/><text x="89.6360%" y="207.50"></text></g><g><title>free_global_ctxt (10,030,231 samples, 1.52%)</title><rect x="90.1051%" y="213" width="1.5233%" height="15" fill="rgb(247,173,49)"/><text x="90.3551%" y="223.50"></text></g><g><title>item_attrs (835,686 samples, 0.13%)</title><rect x="92.4623%" y="117" width="0.1269%" height="15" fill="rgb(224,114,35)"/><text x="92.7123%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (802,716 samples, 0.12%)</title><rect x="92.4673%" y="101" width="0.1219%" height="15" fill="rgb(245,159,27)"/><text x="92.7173%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,357,960 samples, 0.21%)</title><rect x="92.4283%" y="133" width="0.2062%" height="15" fill="rgb(245,172,44)"/><text x="92.6783%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,620,162 samples, 0.25%)</title><rect x="92.9807%" y="117" width="0.2461%" height="15" fill="rgb(236,23,11)"/><text x="93.2307%" y="127.50"></text></g><g><title>optimized_mir (4,290,689 samples, 0.65%)</title><rect x="92.7543%" y="133" width="0.6516%" height="15" fill="rgb(205,117,38)"/><text x="93.0043%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,179,242 samples, 0.18%)</title><rect x="93.2268%" y="117" width="0.1791%" height="15" fill="rgb(237,72,25)"/><text x="93.4768%" y="127.50"></text></g><g><title>evaluate_obligation (730,058 samples, 0.11%)</title><rect x="93.7123%" y="101" width="0.1109%" height="15" fill="rgb(244,70,9)"/><text x="93.9623%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,428,467 samples, 0.37%)</title><rect x="93.5201%" y="117" width="0.3688%" height="15" fill="rgb(217,125,39)"/><text x="93.7701%" y="127.50"></text></g><g><title>specialization_graph_of (682,066 samples, 0.10%)</title><rect x="93.9933%" y="117" width="0.1036%" height="15" fill="rgb(235,36,10)"/><text x="94.2433%" y="127.50"></text></g><g><title>resolve_instance (4,862,527 samples, 0.74%)</title><rect x="93.4059%" y="133" width="0.7385%" height="15" fill="rgb(251,123,47)"/><text x="93.6559%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (6,023,630 samples, 0.91%)</title><rect x="94.2602%" y="133" width="0.9148%" height="15" fill="rgb(221,13,13)"/><text x="94.5102%" y="143.50"></text></g><g><title>upstream_monomorphizations (5,991,080 samples, 0.91%)</title><rect x="94.2652%" y="117" width="0.9099%" height="15" fill="rgb(238,131,9)"/><text x="94.5152%" y="127.50"></text></g><g><title>exported_symbols (5,340,325 samples, 0.81%)</title><rect x="94.3640%" y="101" width="0.8110%" height="15" fill="rgb(211,50,8)"/><text x="94.6140%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (5,328,935 samples, 0.81%)</title><rect x="94.3657%" y="85" width="0.8093%" height="15" fill="rgb(245,182,24)"/><text x="94.6157%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (20,075,100 samples, 3.05%)</title><rect x="92.1904%" y="149" width="3.0488%" height="15" fill="rgb(242,14,37)"/><text x="92.4404%" y="159.50">mon..</text></g><g><title>monomorphization_collector (20,150,930 samples, 3.06%)</title><rect x="92.1898%" y="165" width="3.0604%" height="15" fill="rgb(246,228,12)"/><text x="92.4398%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,457,465 samples, 0.22%)</title><rect x="95.2508%" y="149" width="0.2213%" height="15" fill="rgb(213,55,15)"/><text x="95.5008%" y="159.50"></text></g><g><title>symbol_name (1,336,343 samples, 0.20%)</title><rect x="95.2692%" y="133" width="0.2030%" height="15" fill="rgb(209,9,3)"/><text x="95.5192%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (22,328,813 samples, 3.39%)</title><rect x="92.1850%" y="181" width="3.3911%" height="15" fill="rgb(230,59,30)"/><text x="92.4350%" y="191.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,146,422 samples, 0.33%)</title><rect x="95.2502%" y="165" width="0.3260%" height="15" fill="rgb(209,121,21)"/><text x="95.5002%" y="175.50"></text></g><g><title>cgu_partitioning (684,627 samples, 0.10%)</title><rect x="95.4722%" y="149" width="0.1040%" height="15" fill="rgb(220,109,13)"/><text x="95.7222%" y="159.50"></text></g><g><title>exported_symbols (22,674,307 samples, 3.44%)</title><rect x="92.1744%" y="197" width="3.4436%" height="15" fill="rgb(232,18,1)"/><text x="92.4244%" y="207.50">exp..</text></g><g><title>layout_of (843,127 samples, 0.13%)</title><rect x="96.5681%" y="133" width="0.1280%" height="15" fill="rgb(215,41,42)"/><text x="96.8181%" y="143.50"></text></g><g><title>layout_of (791,687 samples, 0.12%)</title><rect x="96.5759%" y="117" width="0.1202%" height="15" fill="rgb(224,123,36)"/><text x="96.8259%" y="127.50"></text></g><g><title>layout_of (712,437 samples, 0.11%)</title><rect x="96.5880%" y="101" width="0.1082%" height="15" fill="rgb(240,125,3)"/><text x="96.8380%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (856,348 samples, 0.13%)</title><rect x="96.8477%" y="117" width="0.1301%" height="15" fill="rgb(205,98,50)"/><text x="97.0977%" y="127.50"></text></g><g><title>optimized_mir (1,856,218 samples, 0.28%)</title><rect x="96.6962%" y="133" width="0.2819%" height="15" fill="rgb(205,185,37)"/><text x="96.9462%" y="143.50"></text></g><g><title>layout_of (2,882,146 samples, 0.44%)</title><rect x="96.5430%" y="149" width="0.4377%" height="15" fill="rgb(238,207,15)"/><text x="96.7930%" y="159.50"></text></g><g><title>layout_of (3,026,508 samples, 0.46%)</title><rect x="96.5227%" y="165" width="0.4596%" height="15" fill="rgb(213,199,42)"/><text x="96.7727%" y="175.50"></text></g><g><title>layout_of (4,091,350 samples, 0.62%)</title><rect x="96.3751%" y="181" width="0.6214%" height="15" fill="rgb(235,201,11)"/><text x="96.6251%" y="191.50"></text></g><g><title>is_copy_raw (836,967 samples, 0.13%)</title><rect x="97.8793%" y="149" width="0.1271%" height="15" fill="rgb(207,46,11)"/><text x="98.1293%" y="159.50"></text></g><g><title>evaluate_obligation (660,817 samples, 0.10%)</title><rect x="97.9060%" y="133" width="0.1004%" height="15" fill="rgb(241,35,35)"/><text x="98.1560%" y="143.50"></text></g><g><title>needs_drop_raw (1,024,540 samples, 0.16%)</title><rect x="97.8561%" y="165" width="0.1556%" height="15" fill="rgb(243,32,47)"/><text x="98.1061%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,802,343 samples, 1.03%)</title><rect x="96.9965%" y="181" width="1.0331%" height="15" fill="rgb(247,202,23)"/><text x="97.2465%" y="191.50"></text></g><g><title>optimized_mir (16,222,942 samples, 2.46%)</title><rect x="95.6537%" y="197" width="2.4638%" height="15" fill="rgb(219,102,11)"/><text x="95.9037%" y="207.50">op..</text></g><g><title>generate_crate_metadata (43,222,362 samples, 6.56%)</title><rect x="91.6284%" y="213" width="6.5642%" height="15" fill="rgb(243,110,44)"/><text x="91.8784%" y="223.50">generate_..</text></g><g><title>hir_lowering (5,218,332 samples, 0.79%)</title><rect x="98.1926%" y="213" width="0.7925%" height="15" fill="rgb(222,74,54)"/><text x="98.4426%" y="223.50"></text></g><g><title>link_crate (2,378,804 samples, 0.36%)</title><rect x="98.9887%" y="197" width="0.3613%" height="15" fill="rgb(216,99,12)"/><text x="99.2387%" y="207.50"></text></g><g><title>link_binary (2,319,053 samples, 0.35%)</title><rect x="98.9978%" y="181" width="0.3522%" height="15" fill="rgb(226,22,26)"/><text x="99.2478%" y="191.50"></text></g><g><title>link_rlib (1,690,007 samples, 0.26%)</title><rect x="99.0933%" y="165" width="0.2567%" height="15" fill="rgb(217,163,10)"/><text x="99.3433%" y="175.50"></text></g><g><title>link (2,415,134 samples, 0.37%)</title><rect x="98.9851%" y="213" width="0.3668%" height="15" fill="rgb(213,25,53)"/><text x="99.2351%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (3,064,801 samples, 0.47%)</title><rect x="99.4420%" y="213" width="0.4655%" height="15" fill="rgb(252,105,26)"/><text x="99.6920%" y="223.50"></text></g><g><title>all (658,451,553 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (658,451,553 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>