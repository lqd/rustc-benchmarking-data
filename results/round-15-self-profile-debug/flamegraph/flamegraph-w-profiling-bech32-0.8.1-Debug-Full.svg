<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (105,047,603 samples, 12.92%)</title><rect x="0.1336%" y="181" width="12.9199%" height="15" fill="rgb(227,0,7)"/><text x="0.3836%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,063,721 samples, 0.13%)</title><rect x="15.8314%" y="53" width="0.1308%" height="15" fill="rgb(217,0,24)"/><text x="16.0814%" y="63.50"></text></g><g><title>evaluate_obligation (922,280 samples, 0.11%)</title><rect x="15.8488%" y="37" width="0.1134%" height="15" fill="rgb(221,193,54)"/><text x="16.0988%" y="47.50"></text></g><g><title>needs_drop_raw (1,389,532 samples, 0.17%)</title><rect x="15.7920%" y="69" width="0.1709%" height="15" fill="rgb(248,212,6)"/><text x="16.0420%" y="79.50"></text></g><g><title>specialization_graph_of (2,072,260 samples, 0.25%)</title><rect x="16.0641%" y="53" width="0.2549%" height="15" fill="rgb(208,68,35)"/><text x="16.3141%" y="63.50"></text></g><g><title>impl_trait_ref (862,537 samples, 0.11%)</title><rect x="16.2129%" y="37" width="0.1061%" height="15" fill="rgb(232,128,0)"/><text x="16.4629%" y="47.50"></text></g><g><title>resolve_instance (2,951,229 samples, 0.36%)</title><rect x="15.9660%" y="69" width="0.3630%" height="15" fill="rgb(207,160,47)"/><text x="16.2160%" y="79.50"></text></g><g><title>thir_body (1,473,711 samples, 0.18%)</title><rect x="16.3323%" y="69" width="0.1813%" height="15" fill="rgb(228,23,34)"/><text x="16.5823%" y="79.50"></text></g><g><title>mir_const (12,241,764 samples, 1.51%)</title><rect x="15.0111%" y="117" width="1.5056%" height="15" fill="rgb(218,30,26)"/><text x="15.2611%" y="127.50"></text></g><g><title>unsafety_check_result (10,948,802 samples, 1.35%)</title><rect x="15.1701%" y="101" width="1.3466%" height="15" fill="rgb(220,122,19)"/><text x="15.4201%" y="111.50"></text></g><g><title>mir_built (9,979,988 samples, 1.23%)</title><rect x="15.2893%" y="85" width="1.2274%" height="15" fill="rgb(250,228,42)"/><text x="15.5393%" y="95.50"></text></g><g><title>mir_promoted (13,541,915 samples, 1.67%)</title><rect x="14.8903%" y="133" width="1.6655%" height="15" fill="rgb(240,193,28)"/><text x="15.1403%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (843,968 samples, 0.10%)</title><rect x="16.6299%" y="133" width="0.1038%" height="15" fill="rgb(216,20,37)"/><text x="16.8799%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,264,437 samples, 0.28%)</title><rect x="16.7793%" y="133" width="0.2785%" height="15" fill="rgb(206,188,39)"/><text x="17.0293%" y="143.50"></text></g><g><title>MIR_borrow_checking (31,877,699 samples, 3.92%)</title><rect x="13.1396%" y="165" width="3.9207%" height="15" fill="rgb(217,207,13)"/><text x="13.3896%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (31,749,636 samples, 3.90%)</title><rect x="13.1553%" y="149" width="3.9049%" height="15" fill="rgb(231,73,38)"/><text x="13.4053%" y="159.50">mir_..</text></g><g><title>check_mod_attrs (1,437,664 samples, 0.18%)</title><rect x="17.1250%" y="149" width="0.1768%" height="15" fill="rgb(225,20,46)"/><text x="17.3750%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (814,018 samples, 0.10%)</title><rect x="17.3533%" y="149" width="0.1001%" height="15" fill="rgb(210,31,41)"/><text x="17.6033%" y="159.50"></text></g><g><title>misc_checking_1 (2,778,368 samples, 0.34%)</title><rect x="17.1219%" y="165" width="0.3417%" height="15" fill="rgb(221,200,47)"/><text x="17.3719%" y="175.50"></text></g><g><title>misc_checking_2 (2,270,013 samples, 0.28%)</title><rect x="17.4636%" y="165" width="0.2792%" height="15" fill="rgb(226,26,5)"/><text x="17.7136%" y="175.50"></text></g><g><title>match_checking (1,715,957 samples, 0.21%)</title><rect x="17.5317%" y="149" width="0.2110%" height="15" fill="rgb(249,33,26)"/><text x="17.7817%" y="159.50"></text></g><g><title>check_match (1,681,617 samples, 0.21%)</title><rect x="17.5360%" y="133" width="0.2068%" height="15" fill="rgb(235,183,28)"/><text x="17.7860%" y="143.50"></text></g><g><title>crate_lints (2,298,903 samples, 0.28%)</title><rect x="17.8439%" y="133" width="0.2827%" height="15" fill="rgb(221,5,38)"/><text x="18.0939%" y="143.50"></text></g><g><title>type_of (1,094,674 samples, 0.13%)</title><rect x="17.9920%" y="117" width="0.1346%" height="15" fill="rgb(247,18,42)"/><text x="18.2420%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (860,731 samples, 0.11%)</title><rect x="18.0207%" y="101" width="0.1059%" height="15" fill="rgb(241,131,45)"/><text x="18.2707%" y="111.50"></text></g><g><title>lint_checking (2,874,429 samples, 0.35%)</title><rect x="17.8436%" y="149" width="0.3535%" height="15" fill="rgb(249,31,29)"/><text x="18.0936%" y="159.50"></text></g><g><title>privacy_checking_modules (1,063,831 samples, 0.13%)</title><rect x="18.2376%" y="149" width="0.1308%" height="15" fill="rgb(225,111,53)"/><text x="18.4876%" y="159.50"></text></g><g><title>check_mod_privacy (1,062,271 samples, 0.13%)</title><rect x="18.2378%" y="133" width="0.1306%" height="15" fill="rgb(238,160,17)"/><text x="18.4878%" y="143.50"></text></g><g><title>misc_checking_3 (5,107,571 samples, 0.63%)</title><rect x="17.7428%" y="165" width="0.6282%" height="15" fill="rgb(214,148,48)"/><text x="17.9928%" y="175.50"></text></g><g><title>impl_parent (2,699,148 samples, 0.33%)</title><rect x="18.9898%" y="101" width="0.3320%" height="15" fill="rgb(232,36,49)"/><text x="19.2398%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,572,437 samples, 0.19%)</title><rect x="19.1284%" y="85" width="0.1934%" height="15" fill="rgb(209,103,24)"/><text x="19.3784%" y="95.50"></text></g><g><title>impl_trait_ref (5,831,601 samples, 0.72%)</title><rect x="19.3218%" y="101" width="0.7172%" height="15" fill="rgb(229,88,8)"/><text x="19.5718%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,276,781 samples, 0.53%)</title><rect x="19.5130%" y="85" width="0.5260%" height="15" fill="rgb(213,181,19)"/><text x="19.7630%" y="95.50"></text></g><g><title>trait_impls_of (1,080,555 samples, 0.13%)</title><rect x="20.0464%" y="101" width="0.1329%" height="15" fill="rgb(254,191,54)"/><text x="20.2964%" y="111.50"></text></g><g><title>coherent_trait (14,613,696 samples, 1.80%)</title><rect x="18.3820%" y="133" width="1.7973%" height="15" fill="rgb(241,83,37)"/><text x="18.6320%" y="143.50">c..</text></g><g><title>specialization_graph_of (14,128,422 samples, 1.74%)</title><rect x="18.4417%" y="117" width="1.7377%" height="15" fill="rgb(233,36,39)"/><text x="18.6917%" y="127.50"></text></g><g><title>coherence_checking (14,685,477 samples, 1.81%)</title><rect x="18.3790%" y="149" width="1.8062%" height="15" fill="rgb(226,3,54)"/><text x="18.6290%" y="159.50">c..</text></g><g><title>dropck_outlives (839,459 samples, 0.10%)</title><rect x="23.3652%" y="101" width="0.1032%" height="15" fill="rgb(245,192,40)"/><text x="23.6152%" y="111.50"></text></g><g><title>generics_of (1,115,476 samples, 0.14%)</title><rect x="24.2754%" y="85" width="0.1372%" height="15" fill="rgb(238,167,29)"/><text x="24.5254%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (813,330 samples, 0.10%)</title><rect x="24.3126%" y="69" width="0.1000%" height="15" fill="rgb(232,182,51)"/><text x="24.5626%" y="79.50"></text></g><g><title>impl_trait_ref (1,968,123 samples, 0.24%)</title><rect x="24.4512%" y="85" width="0.2421%" height="15" fill="rgb(231,60,39)"/><text x="24.7012%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,679,183 samples, 0.21%)</title><rect x="24.4868%" y="69" width="0.2065%" height="15" fill="rgb(208,69,12)"/><text x="24.7368%" y="79.50"></text></g><g><title>predicates_of (1,310,311 samples, 0.16%)</title><rect x="24.7044%" y="85" width="0.1612%" height="15" fill="rgb(235,93,37)"/><text x="24.9544%" y="95.50"></text></g><g><title>specializes (3,456,216 samples, 0.43%)</title><rect x="24.8655%" y="85" width="0.4251%" height="15" fill="rgb(213,116,39)"/><text x="25.1155%" y="95.50"></text></g><g><title>param_env (1,990,361 samples, 0.24%)</title><rect x="25.0458%" y="69" width="0.2448%" height="15" fill="rgb(222,207,29)"/><text x="25.2958%" y="79.50"></text></g><g><title>def_span (905,758 samples, 0.11%)</title><rect x="25.1792%" y="53" width="0.1114%" height="15" fill="rgb(206,96,30)"/><text x="25.4292%" y="63.50"></text></g><g><title>evaluate_obligation (15,537,595 samples, 1.91%)</title><rect x="23.4688%" y="101" width="1.9110%" height="15" fill="rgb(218,138,4)"/><text x="23.7188%" y="111.50">e..</text></g><g><title>evaluate_obligation (1,163,030 samples, 0.14%)</title><rect x="26.3331%" y="85" width="0.1430%" height="15" fill="rgb(250,191,14)"/><text x="26.5831%" y="95.50"></text></g><g><title>typeck (7,339,644 samples, 0.90%)</title><rect x="25.6754%" y="101" width="0.9027%" height="15" fill="rgb(239,60,40)"/><text x="25.9254%" y="111.50"></text></g><g><title>item_bodies_checking (52,015,071 samples, 6.40%)</title><rect x="20.1887%" y="149" width="6.3974%" height="15" fill="rgb(206,27,48)"/><text x="20.4387%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (52,012,241 samples, 6.40%)</title><rect x="20.1890%" y="133" width="6.3970%" height="15" fill="rgb(225,35,8)"/><text x="20.4390%" y="143.50">typeck_i..</text></g><g><title>typeck (51,925,281 samples, 6.39%)</title><rect x="20.1997%" y="117" width="6.3863%" height="15" fill="rgb(250,213,24)"/><text x="20.4497%" y="127.50">typeck</text></g><g><title>item_types_checking (1,676,667 samples, 0.21%)</title><rect x="26.5861%" y="149" width="0.2062%" height="15" fill="rgb(247,123,22)"/><text x="26.8361%" y="159.50"></text></g><g><title>check_mod_item_types (1,674,307 samples, 0.21%)</title><rect x="26.5864%" y="133" width="0.2059%" height="15" fill="rgb(231,138,38)"/><text x="26.8364%" y="143.50"></text></g><g><title>generics_of (888,787 samples, 0.11%)</title><rect x="26.9316%" y="117" width="0.1093%" height="15" fill="rgb(231,145,46)"/><text x="27.1816%" y="127.50"></text></g><g><title>predicates_of (1,502,334 samples, 0.18%)</title><rect x="27.0657%" y="117" width="0.1848%" height="15" fill="rgb(251,118,11)"/><text x="27.3157%" y="127.50"></text></g><g><title>predicates_defined_on (1,388,941 samples, 0.17%)</title><rect x="27.0797%" y="101" width="0.1708%" height="15" fill="rgb(217,147,25)"/><text x="27.3297%" y="111.50"></text></g><g><title>inferred_outlives_of (911,519 samples, 0.11%)</title><rect x="27.1384%" y="85" width="0.1121%" height="15" fill="rgb(247,81,37)"/><text x="27.3884%" y="95.50"></text></g><g><title>inferred_outlives_crate (873,429 samples, 0.11%)</title><rect x="27.1431%" y="69" width="0.1074%" height="15" fill="rgb(209,12,38)"/><text x="27.3931%" y="79.50"></text></g><g><title>type_collecting (4,074,721 samples, 0.50%)</title><rect x="26.7924%" y="149" width="0.5012%" height="15" fill="rgb(227,1,9)"/><text x="27.0424%" y="159.50"></text></g><g><title>collect_mod_item_types (4,065,341 samples, 0.50%)</title><rect x="26.7935%" y="133" width="0.5000%" height="15" fill="rgb(248,47,43)"/><text x="27.0435%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,696,752 samples, 0.33%)</title><rect x="27.3203%" y="133" width="0.3317%" height="15" fill="rgb(221,10,30)"/><text x="27.5703%" y="143.50"></text></g><g><title>check_item_well_formed (3,212,445 samples, 0.40%)</title><rect x="27.6519%" y="133" width="0.3951%" height="15" fill="rgb(210,229,1)"/><text x="27.9019%" y="143.50"></text></g><g><title>analysis (122,603,139 samples, 15.08%)</title><rect x="13.0535%" y="181" width="15.0790%" height="15" fill="rgb(222,148,37)"/><text x="13.3035%" y="191.50">analysis</text></g><g><title>type_check_crate (79,368,036 samples, 9.76%)</title><rect x="18.3710%" y="165" width="9.7615%" height="15" fill="rgb(234,67,33)"/><text x="18.6210%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (6,815,128 samples, 0.84%)</title><rect x="27.2943%" y="149" width="0.8382%" height="15" fill="rgb(247,98,35)"/><text x="27.5443%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,154,060 samples, 0.14%)</title><rect x="36.5654%" y="149" width="0.1419%" height="15" fill="rgb(247,138,52)"/><text x="36.8154%" y="159.50"></text></g><g><title>const_caller_location (1,278,165 samples, 0.16%)</title><rect x="36.7074%" y="149" width="0.1572%" height="15" fill="rgb(213,79,30)"/><text x="36.9574%" y="159.50"></text></g><g><title>layout_of (1,701,885 samples, 0.21%)</title><rect x="37.4240%" y="133" width="0.2093%" height="15" fill="rgb(246,177,23)"/><text x="37.6740%" y="143.50"></text></g><g><title>predicates_of (1,616,281 samples, 0.20%)</title><rect x="38.0585%" y="117" width="0.1988%" height="15" fill="rgb(230,62,27)"/><text x="38.3085%" y="127.50"></text></g><g><title>predicates_defined_on (1,229,746 samples, 0.15%)</title><rect x="38.1061%" y="101" width="0.1512%" height="15" fill="rgb(216,154,8)"/><text x="38.3561%" y="111.50"></text></g><g><title>param_env (5,084,071 samples, 0.63%)</title><rect x="37.6333%" y="133" width="0.6253%" height="15" fill="rgb(244,35,45)"/><text x="37.8833%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,366,713 samples, 0.17%)</title><rect x="38.2586%" y="133" width="0.1681%" height="15" fill="rgb(251,115,12)"/><text x="38.5086%" y="143.50"></text></g><g><title>normalize_projection_ty (1,082,121 samples, 0.13%)</title><rect x="38.2936%" y="117" width="0.1331%" height="15" fill="rgb(240,54,50)"/><text x="38.5436%" y="127.50"></text></g><g><title>fn_abi_of_instance (12,673,839 samples, 1.56%)</title><rect x="36.8709%" y="149" width="1.5588%" height="15" fill="rgb(233,84,52)"/><text x="37.1209%" y="159.50"></text></g><g><title>layout_of (1,402,474 samples, 0.17%)</title><rect x="38.5101%" y="149" width="0.1725%" height="15" fill="rgb(207,117,47)"/><text x="38.7601%" y="159.50"></text></g><g><title>codegen_module (83,947,649 samples, 10.32%)</title><rect x="28.4480%" y="165" width="10.3248%" height="15" fill="rgb(249,43,39)"/><text x="28.6980%" y="175.50">codegen_module</text></g><g><title>codegen_crate (86,580,708 samples, 10.65%)</title><rect x="28.1338%" y="181" width="10.6486%" height="15" fill="rgb(209,38,44)"/><text x="28.3838%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (366,404,994 samples, 45.06%)</title><rect x="38.8099%" y="165" width="45.0644%" height="15" fill="rgb(236,212,23)"/><text x="39.0599%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (351,102,771 samples, 43.18%)</title><rect x="40.6919%" y="149" width="43.1824%" height="15" fill="rgb(242,79,21)"/><text x="40.9419%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (387,293,564 samples, 47.63%)</title><rect x="38.7824%" y="181" width="47.6335%" height="15" fill="rgb(211,96,35)"/><text x="39.0324%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (20,665,657 samples, 2.54%)</title><rect x="83.8742%" y="165" width="2.5417%" height="15" fill="rgb(253,215,40)"/><text x="84.1242%" y="175.50">LL..</text></g><g><title>macro_expand_crate (16,658,948 samples, 2.05%)</title><rect x="86.5048%" y="165" width="2.0489%" height="15" fill="rgb(211,81,21)"/><text x="86.7548%" y="175.50">m..</text></g><g><title>expand_crate (16,644,618 samples, 2.05%)</title><rect x="86.5066%" y="149" width="2.0471%" height="15" fill="rgb(208,190,38)"/><text x="86.7566%" y="159.50">e..</text></g><g><title>metadata_register_crate (2,318,333 samples, 0.29%)</title><rect x="88.2686%" y="133" width="0.2851%" height="15" fill="rgb(235,213,38)"/><text x="88.5186%" y="143.50"></text></g><g><title>metadata_register_crate (867,939 samples, 0.11%)</title><rect x="88.4470%" y="117" width="0.1067%" height="15" fill="rgb(237,122,38)"/><text x="88.6970%" y="127.50"></text></g><g><title>late_resolve_crate (4,411,724 samples, 0.54%)</title><rect x="88.6621%" y="149" width="0.5426%" height="15" fill="rgb(244,218,35)"/><text x="88.9121%" y="159.50"></text></g><g><title>configure_and_expand (22,948,431 samples, 2.82%)</title><rect x="86.4159%" y="181" width="2.8224%" height="15" fill="rgb(240,68,47)"/><text x="86.6659%" y="191.50">co..</text></g><g><title>resolve_crate (5,118,761 samples, 0.63%)</title><rect x="88.6088%" y="165" width="0.6296%" height="15" fill="rgb(210,16,53)"/><text x="88.8588%" y="175.50"></text></g><g><title>early_lint_checks (987,450 samples, 0.12%)</title><rect x="89.2945%" y="181" width="0.1214%" height="15" fill="rgb(235,124,12)"/><text x="89.5445%" y="191.50"></text></g><g><title>free_global_ctxt (5,982,000 samples, 0.74%)</title><rect x="89.4160%" y="181" width="0.7357%" height="15" fill="rgb(224,169,11)"/><text x="89.6660%" y="191.50"></text></g><g><title>item_attrs (1,397,051 samples, 0.17%)</title><rect x="90.7880%" y="85" width="0.1718%" height="15" fill="rgb(250,166,2)"/><text x="91.0380%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,334,731 samples, 0.16%)</title><rect x="90.7957%" y="69" width="0.1642%" height="15" fill="rgb(242,216,29)"/><text x="91.0457%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,357,342 samples, 0.29%)</title><rect x="90.7391%" y="101" width="0.2899%" height="15" fill="rgb(230,116,27)"/><text x="90.9891%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,976,060 samples, 0.37%)</title><rect x="91.4753%" y="85" width="0.3660%" height="15" fill="rgb(228,99,48)"/><text x="91.7253%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,424,305 samples, 0.30%)</title><rect x="91.8414%" y="85" width="0.2982%" height="15" fill="rgb(253,11,6)"/><text x="92.0914%" y="95.50"></text></g><g><title>optimized_mir (8,546,127 samples, 1.05%)</title><rect x="91.1442%" y="101" width="1.0511%" height="15" fill="rgb(247,143,39)"/><text x="91.3942%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,843,355 samples, 0.60%)</title><rect x="92.3619%" y="85" width="0.5957%" height="15" fill="rgb(236,97,10)"/><text x="92.6119%" y="95.50"></text></g><g><title>specialization_graph_of (1,240,600 samples, 0.15%)</title><rect x="93.0907%" y="85" width="0.1526%" height="15" fill="rgb(233,208,19)"/><text x="93.3407%" y="95.50"></text></g><g><title>resolve_instance (9,030,365 samples, 1.11%)</title><rect x="92.1953%" y="101" width="1.1107%" height="15" fill="rgb(216,164,2)"/><text x="92.4453%" y="111.50"></text></g><g><title>eval_to_const_value_raw (956,519 samples, 0.12%)</title><rect x="93.3882%" y="85" width="0.1176%" height="15" fill="rgb(220,129,5)"/><text x="93.6382%" y="95.50"></text></g><g><title>eval_to_const_value_raw (933,979 samples, 0.11%)</title><rect x="93.3910%" y="69" width="0.1149%" height="15" fill="rgb(242,17,10)"/><text x="93.6410%" y="79.50"></text></g><g><title>eval_to_allocation_raw (888,948 samples, 0.11%)</title><rect x="93.3966%" y="53" width="0.1093%" height="15" fill="rgb(242,107,0)"/><text x="93.6466%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,186,422 samples, 0.15%)</title><rect x="93.3709%" y="101" width="0.1459%" height="15" fill="rgb(251,28,31)"/><text x="93.6209%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (26,508,716 samples, 3.26%)</title><rect x="90.3787%" y="117" width="3.2603%" height="15" fill="rgb(233,223,10)"/><text x="90.6287%" y="127.50">mon..</text></g><g><title>vtable_entries (824,279 samples, 0.10%)</title><rect x="93.5376%" y="101" width="0.1014%" height="15" fill="rgb(215,21,27)"/><text x="93.7876%" y="111.50"></text></g><g><title>monomorphization_collector (26,569,777 samples, 3.27%)</title><rect x="90.3783%" y="133" width="3.2678%" height="15" fill="rgb(232,23,21)"/><text x="90.6283%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,886,359 samples, 0.35%)</title><rect x="93.6468%" y="117" width="0.3550%" height="15" fill="rgb(244,5,23)"/><text x="93.8968%" y="127.50"></text></g><g><title>symbol_name (2,441,515 samples, 0.30%)</title><rect x="93.7015%" y="101" width="0.3003%" height="15" fill="rgb(226,81,46)"/><text x="93.9515%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (30,744,779 samples, 3.78%)</title><rect x="90.3731%" y="149" width="3.7813%" height="15" fill="rgb(247,70,30)"/><text x="90.6231%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (4,132,361 samples, 0.51%)</title><rect x="93.6462%" y="133" width="0.5082%" height="15" fill="rgb(212,68,19)"/><text x="93.8962%" y="143.50"></text></g><g><title>cgu_partitioning (1,240,862 samples, 0.15%)</title><rect x="94.0018%" y="117" width="0.1526%" height="15" fill="rgb(240,187,13)"/><text x="94.2518%" y="127.50"></text></g><g><title>exported_symbols (30,967,881 samples, 3.81%)</title><rect x="90.3605%" y="165" width="3.8088%" height="15" fill="rgb(223,113,26)"/><text x="90.6105%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,035,910 samples, 0.37%)</title><rect x="94.5199%" y="149" width="0.3734%" height="15" fill="rgb(206,192,2)"/><text x="94.7699%" y="159.50"></text></g><g><title>optimized_mir (5,852,450 samples, 0.72%)</title><rect x="94.1766%" y="165" width="0.7198%" height="15" fill="rgb(241,108,4)"/><text x="94.4266%" y="175.50"></text></g><g><title>generate_crate_metadata (38,635,788 samples, 4.75%)</title><rect x="90.1517%" y="181" width="4.7518%" height="15" fill="rgb(247,173,49)"/><text x="90.4017%" y="191.50">genera..</text></g><g><title>hir_lowering (7,109,382 samples, 0.87%)</title><rect x="94.9036%" y="181" width="0.8744%" height="15" fill="rgb(224,114,35)"/><text x="95.1536%" y="191.50"></text></g><g><title>finish_ongoing_codegen (21,788,059 samples, 2.68%)</title><rect x="95.7813%" y="165" width="2.6797%" height="15" fill="rgb(245,159,27)"/><text x="96.0313%" y="175.50">fi..</text></g><g><title>link_crate (2,212,342 samples, 0.27%)</title><rect x="98.4610%" y="165" width="0.2721%" height="15" fill="rgb(245,172,44)"/><text x="98.7110%" y="175.50"></text></g><g><title>link_binary (2,169,442 samples, 0.27%)</title><rect x="98.4663%" y="149" width="0.2668%" height="15" fill="rgb(236,23,11)"/><text x="98.7163%" y="159.50"></text></g><g><title>link_rlib (1,630,597 samples, 0.20%)</title><rect x="98.5326%" y="133" width="0.2005%" height="15" fill="rgb(205,117,38)"/><text x="98.7826%" y="143.50"></text></g><g><title>link (24,039,891 samples, 2.96%)</title><rect x="95.7779%" y="181" width="2.9567%" height="15" fill="rgb(237,72,25)"/><text x="96.0279%" y="191.50">link</text></g><g><title>parse_crate (7,717,817 samples, 0.95%)</title><rect x="98.7346%" y="181" width="0.9492%" height="15" fill="rgb(244,70,9)"/><text x="98.9846%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,848,678 samples, 0.23%)</title><rect x="99.7221%" y="181" width="0.2274%" height="15" fill="rgb(217,125,39)"/><text x="99.9721%" y="191.50"></text></g><g><title>all (813,070,062 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (813,070,062 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>