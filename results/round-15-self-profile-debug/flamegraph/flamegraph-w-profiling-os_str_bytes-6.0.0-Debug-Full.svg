<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (33,891,304 samples, 8.77%)</title><rect x="0.2261%" y="277" width="8.7688%" height="15" fill="rgb(227,0,7)"/><text x="0.4761%" y="287.50">LLVM_passes</text></g><g><title>param_env (471,986 samples, 0.12%)</title><rect x="14.9367%" y="197" width="0.1221%" height="15" fill="rgb(217,0,24)"/><text x="15.1867%" y="207.50"></text></g><g><title>item_attrs (396,483 samples, 0.10%)</title><rect x="15.3195%" y="165" width="0.1026%" height="15" fill="rgb(221,193,54)"/><text x="15.5695%" y="175.50"></text></g><g><title>codegen_fn_attrs (582,505 samples, 0.15%)</title><rect x="15.2787%" y="181" width="0.1507%" height="15" fill="rgb(248,212,6)"/><text x="15.5287%" y="191.50"></text></g><g><title>adt_drop_tys (481,003 samples, 0.12%)</title><rect x="16.6440%" y="149" width="0.1245%" height="15" fill="rgb(208,68,35)"/><text x="16.8940%" y="159.50"></text></g><g><title>is_copy_raw (1,176,743 samples, 0.30%)</title><rect x="16.7684%" y="149" width="0.3045%" height="15" fill="rgb(232,128,0)"/><text x="17.0184%" y="159.50"></text></g><g><title>evaluate_obligation (990,069 samples, 0.26%)</title><rect x="16.8167%" y="133" width="0.2562%" height="15" fill="rgb(207,160,47)"/><text x="17.0667%" y="143.50"></text></g><g><title>needs_drop_raw (1,825,508 samples, 0.47%)</title><rect x="16.6037%" y="165" width="0.4723%" height="15" fill="rgb(228,23,34)"/><text x="16.8537%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (950,788 samples, 0.25%)</title><rect x="17.2197%" y="149" width="0.2460%" height="15" fill="rgb(218,30,26)"/><text x="17.4697%" y="159.50"></text></g><g><title>resolve_instance (1,939,723 samples, 0.50%)</title><rect x="17.0827%" y="165" width="0.5019%" height="15" fill="rgb(220,122,19)"/><text x="17.3327%" y="175.50"></text></g><g><title>thir_body (1,577,346 samples, 0.41%)</title><rect x="17.5998%" y="165" width="0.4081%" height="15" fill="rgb(250,228,42)"/><text x="17.8498%" y="175.50"></text></g><g><title>mir_const (13,349,531 samples, 3.45%)</title><rect x="14.5653%" y="213" width="3.4539%" height="15" fill="rgb(240,193,28)"/><text x="14.8153%" y="223.50">mir..</text></g><g><title>unsafety_check_result (11,442,456 samples, 2.96%)</title><rect x="15.0588%" y="197" width="2.9605%" height="15" fill="rgb(216,20,37)"/><text x="15.3088%" y="207.50">uns..</text></g><g><title>mir_built (10,010,029 samples, 2.59%)</title><rect x="15.4294%" y="181" width="2.5899%" height="15" fill="rgb(206,188,39)"/><text x="15.6794%" y="191.50">mi..</text></g><g><title>mir_promoted (15,051,742 samples, 3.89%)</title><rect x="14.2064%" y="229" width="3.8944%" height="15" fill="rgb(217,207,13)"/><text x="14.4564%" y="239.50">mir_..</text></g><g><title>type_op_ascribe_user_type (398,094 samples, 0.10%)</title><rect x="18.1010%" y="229" width="0.1030%" height="15" fill="rgb(231,73,38)"/><text x="18.3510%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (692,760 samples, 0.18%)</title><rect x="18.2040%" y="229" width="0.1792%" height="15" fill="rgb(225,20,46)"/><text x="18.4540%" y="239.50"></text></g><g><title>normalize_projection_ty (399,844 samples, 0.10%)</title><rect x="18.2798%" y="213" width="0.1035%" height="15" fill="rgb(210,31,41)"/><text x="18.5298%" y="223.50"></text></g><g><title>type_op_prove_predicate (3,981,834 samples, 1.03%)</title><rect x="18.5153%" y="229" width="1.0302%" height="15" fill="rgb(221,200,47)"/><text x="18.7653%" y="239.50"></text></g><g><title>MIR_borrow_checking (40,397,131 samples, 10.45%)</title><rect x="9.0956%" y="261" width="10.4520%" height="15" fill="rgb(226,26,5)"/><text x="9.3456%" y="271.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (40,138,236 samples, 10.39%)</title><rect x="9.1626%" y="245" width="10.3850%" height="15" fill="rgb(249,33,26)"/><text x="9.4126%" y="255.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (424,806 samples, 0.11%)</title><rect x="19.9356%" y="213" width="0.1099%" height="15" fill="rgb(235,183,28)"/><text x="20.1856%" y="223.50"></text></g><g><title>codegen_fn_attrs (979,951 samples, 0.25%)</title><rect x="19.7961%" y="229" width="0.2535%" height="15" fill="rgb(221,5,38)"/><text x="20.0461%" y="239.50"></text></g><g><title>check_mod_attrs (1,363,997 samples, 0.35%)</title><rect x="19.6968%" y="245" width="0.3529%" height="15" fill="rgb(247,18,42)"/><text x="19.9468%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (595,305 samples, 0.15%)</title><rect x="20.1317%" y="245" width="0.1540%" height="15" fill="rgb(241,131,45)"/><text x="20.3817%" y="255.50"></text></g><g><title>misc_checking_1 (2,383,585 samples, 0.62%)</title><rect x="19.6891%" y="261" width="0.6167%" height="15" fill="rgb(249,31,29)"/><text x="19.9391%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (715,117 samples, 0.19%)</title><rect x="20.3063%" y="245" width="0.1850%" height="15" fill="rgb(225,111,53)"/><text x="20.5563%" y="255.50"></text></g><g><title>check_mod_liveness (546,876 samples, 0.14%)</title><rect x="20.3498%" y="229" width="0.1415%" height="15" fill="rgb(238,160,17)"/><text x="20.5998%" y="239.50"></text></g><g><title>misc_checking_2 (1,830,598 samples, 0.47%)</title><rect x="20.3058%" y="261" width="0.4736%" height="15" fill="rgb(214,148,48)"/><text x="20.5558%" y="271.50"></text></g><g><title>match_checking (1,113,711 samples, 0.29%)</title><rect x="20.4913%" y="245" width="0.2882%" height="15" fill="rgb(232,36,49)"/><text x="20.7413%" y="255.50"></text></g><g><title>check_match (1,053,061 samples, 0.27%)</title><rect x="20.5070%" y="229" width="0.2725%" height="15" fill="rgb(209,103,24)"/><text x="20.7570%" y="239.50"></text></g><g><title>death_checking (815,918 samples, 0.21%)</title><rect x="20.8798%" y="245" width="0.2111%" height="15" fill="rgb(229,88,8)"/><text x="21.1298%" y="255.50"></text></g><g><title>param_env (419,444 samples, 0.11%)</title><rect x="21.3874%" y="213" width="0.1085%" height="15" fill="rgb(213,181,19)"/><text x="21.6374%" y="223.50"></text></g><g><title>crate_lints (2,709,727 samples, 0.70%)</title><rect x="21.0913%" y="229" width="0.7011%" height="15" fill="rgb(254,191,54)"/><text x="21.3413%" y="239.50"></text></g><g><title>type_of (1,136,094 samples, 0.29%)</title><rect x="21.4984%" y="213" width="0.2939%" height="15" fill="rgb(241,83,37)"/><text x="21.7484%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (901,821 samples, 0.23%)</title><rect x="21.5591%" y="197" width="0.2333%" height="15" fill="rgb(233,36,39)"/><text x="21.8091%" y="207.50"></text></g><g><title>lint_checking (3,331,094 samples, 0.86%)</title><rect x="21.0909%" y="245" width="0.8619%" height="15" fill="rgb(226,3,54)"/><text x="21.3409%" y="255.50"></text></g><g><title>module_lints (619,897 samples, 0.16%)</title><rect x="21.7924%" y="229" width="0.1604%" height="15" fill="rgb(245,192,40)"/><text x="22.0424%" y="239.50"></text></g><g><title>lint_mod (612,047 samples, 0.16%)</title><rect x="21.7944%" y="213" width="0.1584%" height="15" fill="rgb(238,167,29)"/><text x="22.0444%" y="223.50"></text></g><g><title>privacy_access_levels (632,017 samples, 0.16%)</title><rect x="21.9528%" y="245" width="0.1635%" height="15" fill="rgb(232,182,51)"/><text x="22.2028%" y="255.50"></text></g><g><title>privacy_checking_modules (1,291,843 samples, 0.33%)</title><rect x="22.1163%" y="245" width="0.3342%" height="15" fill="rgb(231,60,39)"/><text x="22.3663%" y="255.50"></text></g><g><title>check_mod_privacy (1,286,293 samples, 0.33%)</title><rect x="22.1177%" y="229" width="0.3328%" height="15" fill="rgb(208,69,12)"/><text x="22.3677%" y="239.50"></text></g><g><title>misc_checking_3 (6,486,836 samples, 1.68%)</title><rect x="20.7795%" y="261" width="1.6784%" height="15" fill="rgb(235,93,37)"/><text x="21.0295%" y="271.50"></text></g><g><title>impl_parent (2,982,123 samples, 0.77%)</title><rect x="23.7971%" y="197" width="0.7716%" height="15" fill="rgb(213,116,39)"/><text x="24.0471%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,759,180 samples, 0.46%)</title><rect x="24.1135%" y="181" width="0.4552%" height="15" fill="rgb(222,207,29)"/><text x="24.3635%" y="191.50"></text></g><g><title>impl_trait_ref (6,650,760 samples, 1.72%)</title><rect x="24.5687%" y="197" width="1.7208%" height="15" fill="rgb(206,96,30)"/><text x="24.8187%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,034,206 samples, 1.30%)</title><rect x="24.9870%" y="181" width="1.3025%" height="15" fill="rgb(218,138,4)"/><text x="25.2370%" y="191.50"></text></g><g><title>trait_impls_of (1,090,610 samples, 0.28%)</title><rect x="26.3319%" y="197" width="0.2822%" height="15" fill="rgb(250,191,14)"/><text x="26.5819%" y="207.50"></text></g><g><title>coherent_trait (15,939,092 samples, 4.12%)</title><rect x="22.4953%" y="229" width="4.1239%" height="15" fill="rgb(239,60,40)"/><text x="22.7453%" y="239.50">cohe..</text></g><g><title>specialization_graph_of (15,895,182 samples, 4.11%)</title><rect x="22.5067%" y="213" width="4.1126%" height="15" fill="rgb(206,27,48)"/><text x="22.7567%" y="223.50">spec..</text></g><g><title>coherence_checking (16,091,533 samples, 4.16%)</title><rect x="22.4881%" y="245" width="4.1634%" height="15" fill="rgb(225,35,8)"/><text x="22.7381%" y="255.50">coher..</text></g><g><title>associated_item (467,994 samples, 0.12%)</title><rect x="32.9648%" y="181" width="0.1211%" height="15" fill="rgb(250,213,24)"/><text x="33.2148%" y="191.50"></text></g><g><title>associated_items (679,597 samples, 0.18%)</title><rect x="32.9187%" y="197" width="0.1758%" height="15" fill="rgb(247,123,22)"/><text x="33.1687%" y="207.50"></text></g><g><title>adt_def (394,904 samples, 0.10%)</title><rect x="33.2669%" y="85" width="0.1022%" height="15" fill="rgb(231,138,38)"/><text x="33.5169%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (394,654 samples, 0.10%)</title><rect x="33.2670%" y="69" width="0.1021%" height="15" fill="rgb(231,145,46)"/><text x="33.5170%" y="79.50"></text></g><g><title>item_attrs (392,654 samples, 0.10%)</title><rect x="33.2675%" y="53" width="0.1016%" height="15" fill="rgb(251,118,11)"/><text x="33.5175%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (392,234 samples, 0.10%)</title><rect x="33.2676%" y="37" width="0.1015%" height="15" fill="rgb(217,147,25)"/><text x="33.5176%" y="47.50"></text></g><g><title>adt_dtorck_constraint (404,084 samples, 0.10%)</title><rect x="33.2652%" y="101" width="0.1045%" height="15" fill="rgb(247,81,37)"/><text x="33.5152%" y="111.50"></text></g><g><title>adt_dtorck_constraint (423,214 samples, 0.11%)</title><rect x="33.2603%" y="117" width="0.1095%" height="15" fill="rgb(209,12,38)"/><text x="33.5103%" y="127.50"></text></g><g><title>adt_dtorck_constraint (457,075 samples, 0.12%)</title><rect x="33.2526%" y="133" width="0.1183%" height="15" fill="rgb(227,1,9)"/><text x="33.5026%" y="143.50"></text></g><g><title>adt_dtorck_constraint (481,965 samples, 0.12%)</title><rect x="33.2493%" y="149" width="0.1247%" height="15" fill="rgb(248,47,43)"/><text x="33.4993%" y="159.50"></text></g><g><title>adt_dtorck_constraint (517,506 samples, 0.13%)</title><rect x="33.2407%" y="165" width="0.1339%" height="15" fill="rgb(221,10,30)"/><text x="33.4907%" y="175.50"></text></g><g><title>adt_dtorck_constraint (714,857 samples, 0.18%)</title><rect x="33.1985%" y="181" width="0.1850%" height="15" fill="rgb(210,229,1)"/><text x="33.4485%" y="191.50"></text></g><g><title>dropck_outlives (1,111,742 samples, 0.29%)</title><rect x="33.1226%" y="197" width="0.2876%" height="15" fill="rgb(222,148,37)"/><text x="33.3726%" y="207.50"></text></g><g><title>evaluate_obligation (3,262,615 samples, 0.84%)</title><rect x="33.4103%" y="197" width="0.8441%" height="15" fill="rgb(234,67,33)"/><text x="33.6603%" y="207.50"></text></g><g><title>method_autoderef_steps (491,355 samples, 0.13%)</title><rect x="34.5105%" y="197" width="0.1271%" height="15" fill="rgb(247,98,35)"/><text x="34.7605%" y="207.50"></text></g><g><title>predicates_of (492,584 samples, 0.13%)</title><rect x="34.7027%" y="197" width="0.1274%" height="15" fill="rgb(247,138,52)"/><text x="34.9527%" y="207.50"></text></g><g><title>dropck_outlives (434,243 samples, 0.11%)</title><rect x="36.9278%" y="181" width="0.1124%" height="15" fill="rgb(213,79,30)"/><text x="37.1778%" y="191.50"></text></g><g><title>evaluate_obligation (1,301,564 samples, 0.34%)</title><rect x="37.0402%" y="181" width="0.3368%" height="15" fill="rgb(246,177,23)"/><text x="37.2902%" y="191.50"></text></g><g><title>typeck (10,554,357 samples, 2.73%)</title><rect x="34.8660%" y="197" width="2.7307%" height="15" fill="rgb(230,62,27)"/><text x="35.1160%" y="207.50">ty..</text></g><g><title>item_bodies_checking (42,350,070 samples, 10.96%)</title><rect x="26.6683%" y="245" width="10.9573%" height="15" fill="rgb(216,154,8)"/><text x="26.9183%" y="255.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (42,346,310 samples, 10.96%)</title><rect x="26.6693%" y="229" width="10.9563%" height="15" fill="rgb(244,35,45)"/><text x="26.9193%" y="239.50">typeck_item_bodi..</text></g><g><title>typeck (42,174,927 samples, 10.91%)</title><rect x="26.7137%" y="213" width="10.9120%" height="15" fill="rgb(251,115,12)"/><text x="26.9637%" y="223.50">typeck</text></g><g><title>generics_of (682,229 samples, 0.18%)</title><rect x="39.2500%" y="181" width="0.1765%" height="15" fill="rgb(240,54,50)"/><text x="39.5000%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (500,756 samples, 0.13%)</title><rect x="39.2970%" y="165" width="0.1296%" height="15" fill="rgb(233,84,52)"/><text x="39.5470%" y="175.50"></text></g><g><title>impl_trait_ref (902,569 samples, 0.23%)</title><rect x="39.4591%" y="181" width="0.2335%" height="15" fill="rgb(207,117,47)"/><text x="39.7091%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (726,257 samples, 0.19%)</title><rect x="39.5048%" y="165" width="0.1879%" height="15" fill="rgb(249,43,39)"/><text x="39.7548%" y="175.50"></text></g><g><title>predicates_of (683,438 samples, 0.18%)</title><rect x="39.7035%" y="181" width="0.1768%" height="15" fill="rgb(209,38,44)"/><text x="39.9535%" y="191.50"></text></g><g><title>specializes (2,054,571 samples, 0.53%)</title><rect x="39.8803%" y="181" width="0.5316%" height="15" fill="rgb(236,212,23)"/><text x="40.1303%" y="191.50"></text></g><g><title>param_env (1,199,113 samples, 0.31%)</title><rect x="40.1016%" y="165" width="0.3102%" height="15" fill="rgb(242,79,21)"/><text x="40.3516%" y="175.50"></text></g><g><title>def_span (565,426 samples, 0.15%)</title><rect x="40.2656%" y="149" width="0.1463%" height="15" fill="rgb(211,96,35)"/><text x="40.5156%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (502,684 samples, 0.13%)</title><rect x="40.2818%" y="133" width="0.1301%" height="15" fill="rgb(253,215,40)"/><text x="40.5318%" y="143.50"></text></g><g><title>evaluate_obligation (7,506,816 samples, 1.94%)</title><rect x="38.4993%" y="197" width="1.9423%" height="15" fill="rgb(211,81,21)"/><text x="38.7493%" y="207.50">e..</text></g><g><title>item_types_checking (11,001,521 samples, 2.85%)</title><rect x="37.6256%" y="245" width="2.8464%" height="15" fill="rgb(208,190,38)"/><text x="37.8756%" y="255.50">it..</text></g><g><title>check_mod_item_types (10,991,661 samples, 2.84%)</title><rect x="37.6282%" y="229" width="2.8439%" height="15" fill="rgb(235,213,38)"/><text x="37.8782%" y="239.50">ch..</text></g><g><title>typeck (8,221,173 samples, 2.13%)</title><rect x="38.3450%" y="213" width="2.1271%" height="15" fill="rgb(237,122,38)"/><text x="38.5950%" y="223.50">t..</text></g><g><title>fn_sig (624,076 samples, 0.16%)</title><rect x="40.5938%" y="213" width="0.1615%" height="15" fill="rgb(244,218,35)"/><text x="40.8438%" y="223.50"></text></g><g><title>named_region_map (562,028 samples, 0.15%)</title><rect x="40.8743%" y="197" width="0.1454%" height="15" fill="rgb(240,68,47)"/><text x="41.1243%" y="207.50"></text></g><g><title>resolve_lifetimes (516,618 samples, 0.13%)</title><rect x="40.8860%" y="181" width="0.1337%" height="15" fill="rgb(210,16,53)"/><text x="41.1360%" y="191.50"></text></g><g><title>generics_of (1,046,044 samples, 0.27%)</title><rect x="40.7553%" y="213" width="0.2706%" height="15" fill="rgb(235,124,12)"/><text x="41.0053%" y="223.50"></text></g><g><title>predicates_of (844,537 samples, 0.22%)</title><rect x="41.0700%" y="213" width="0.2185%" height="15" fill="rgb(224,169,11)"/><text x="41.3200%" y="223.50"></text></g><g><title>predicates_defined_on (746,515 samples, 0.19%)</title><rect x="41.0954%" y="197" width="0.1931%" height="15" fill="rgb(250,166,2)"/><text x="41.3454%" y="207.50"></text></g><g><title>type_collecting (3,365,994 samples, 0.87%)</title><rect x="40.4733%" y="245" width="0.8709%" height="15" fill="rgb(242,216,29)"/><text x="40.7233%" y="255.50"></text></g><g><title>collect_mod_item_types (3,353,674 samples, 0.87%)</title><rect x="40.4764%" y="229" width="0.8677%" height="15" fill="rgb(230,116,27)"/><text x="40.7264%" y="239.50"></text></g><g><title>evaluate_obligation (654,044 samples, 0.17%)</title><rect x="42.3709%" y="213" width="0.1692%" height="15" fill="rgb(228,99,48)"/><text x="42.6209%" y="223.50"></text></g><g><title>param_env (555,288 samples, 0.14%)</title><rect x="42.6172%" y="213" width="0.1437%" height="15" fill="rgb(253,11,6)"/><text x="42.8672%" y="223.50"></text></g><g><title>region_scope_tree (596,133 samples, 0.15%)</title><rect x="42.7662%" y="213" width="0.1542%" height="15" fill="rgb(247,143,39)"/><text x="43.0162%" y="223.50"></text></g><g><title>check_impl_item_well_formed (5,736,568 samples, 1.48%)</title><rect x="41.4399%" y="229" width="1.4842%" height="15" fill="rgb(236,97,10)"/><text x="41.6899%" y="239.50"></text></g><g><title>evaluate_obligation (841,422 samples, 0.22%)</title><rect x="43.5853%" y="213" width="0.2177%" height="15" fill="rgb(233,208,19)"/><text x="43.8353%" y="223.50"></text></g><g><title>param_env (462,225 samples, 0.12%)</title><rect x="43.8575%" y="213" width="0.1196%" height="15" fill="rgb(216,164,2)"/><text x="44.1075%" y="223.50"></text></g><g><title>check_item_well_formed (4,467,546 samples, 1.16%)</title><rect x="42.9241%" y="229" width="1.1559%" height="15" fill="rgb(220,129,5)"/><text x="43.1741%" y="239.50"></text></g><g><title>analysis (136,251,654 samples, 35.25%)</title><rect x="8.9948%" y="277" width="35.2526%" height="15" fill="rgb(242,17,10)"/><text x="9.2448%" y="287.50">analysis</text></g><g><title>type_check_crate (84,217,185 samples, 21.79%)</title><rect x="22.4578%" y="261" width="21.7897%" height="15" fill="rgb(242,107,0)"/><text x="22.7078%" y="271.50">type_check_crate</text></g><g><title>wf_checking (11,209,974 samples, 2.90%)</title><rect x="41.3471%" y="245" width="2.9004%" height="15" fill="rgb(251,28,31)"/><text x="41.5971%" y="255.50">wf..</text></g><g><title>check_trait_item_well_formed (647,277 samples, 0.17%)</title><rect x="44.0800%" y="229" width="0.1675%" height="15" fill="rgb(233,223,10)"/><text x="44.3300%" y="239.50"></text></g><g><title>const_caller_location (425,908 samples, 0.11%)</title><rect x="50.6219%" y="245" width="0.1102%" height="15" fill="rgb(215,21,27)"/><text x="50.8719%" y="255.50"></text></g><g><title>layout_of (709,028 samples, 0.18%)</title><rect x="51.1614%" y="229" width="0.1834%" height="15" fill="rgb(232,23,21)"/><text x="51.4114%" y="239.50"></text></g><g><title>predicates_of (392,775 samples, 0.10%)</title><rect x="51.6037%" y="213" width="0.1016%" height="15" fill="rgb(244,5,23)"/><text x="51.8537%" y="223.50"></text></g><g><title>param_env (1,394,538 samples, 0.36%)</title><rect x="51.3449%" y="229" width="0.3608%" height="15" fill="rgb(226,81,46)"/><text x="51.5949%" y="239.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (481,665 samples, 0.12%)</title><rect x="51.7057%" y="229" width="0.1246%" height="15" fill="rgb(247,70,30)"/><text x="51.9557%" y="239.50"></text></g><g><title>fn_abi_of_instance (4,264,215 samples, 1.10%)</title><rect x="50.7358%" y="245" width="1.1033%" height="15" fill="rgb(212,68,19)"/><text x="50.9858%" y="255.50"></text></g><g><title>symbol_name (552,803 samples, 0.14%)</title><rect x="51.9646%" y="245" width="0.1430%" height="15" fill="rgb(240,187,13)"/><text x="52.2146%" y="255.50"></text></g><g><title>codegen_module (27,708,489 samples, 7.17%)</title><rect x="44.9443%" y="261" width="7.1691%" height="15" fill="rgb(223,113,26)"/><text x="45.1943%" y="271.50">codegen_mo..</text></g><g><title>codegen_crate (30,463,089 samples, 7.88%)</title><rect x="44.2506%" y="277" width="7.8818%" height="15" fill="rgb(206,192,2)"/><text x="44.5006%" y="287.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (95,055,204 samples, 24.59%)</title><rect x="52.1814%" y="261" width="24.5938%" height="15" fill="rgb(241,108,4)"/><text x="52.4314%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (89,350,267 samples, 23.12%)</title><rect x="53.6575%" y="245" width="23.1177%" height="15" fill="rgb(247,173,49)"/><text x="53.9075%" y="255.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (101,533,392 samples, 26.27%)</title><rect x="52.1323%" y="277" width="26.2699%" height="15" fill="rgb(224,114,35)"/><text x="52.3823%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,288,566 samples, 1.63%)</title><rect x="76.7752%" y="261" width="1.6271%" height="15" fill="rgb(245,159,27)"/><text x="77.0252%" y="271.50"></text></g><g><title>AST_validation (490,575 samples, 0.13%)</title><rect x="78.4612%" y="261" width="0.1269%" height="15" fill="rgb(245,172,44)"/><text x="78.7112%" y="271.50"></text></g><g><title>metadata_load_macro (525,178 samples, 0.14%)</title><rect x="86.8931%" y="229" width="0.1359%" height="15" fill="rgb(236,23,11)"/><text x="87.1431%" y="239.50"></text></g><g><title>metadata_register_crate (2,736,748 samples, 0.71%)</title><rect x="87.0290%" y="229" width="0.7081%" height="15" fill="rgb(205,117,38)"/><text x="87.2790%" y="239.50"></text></g><g><title>metadata_register_crate (981,430 samples, 0.25%)</title><rect x="87.4832%" y="213" width="0.2539%" height="15" fill="rgb(237,72,25)"/><text x="87.7332%" y="223.50"></text></g><g><title>macro_expand_crate (35,564,792 samples, 9.20%)</title><rect x="78.6524%" y="261" width="9.2017%" height="15" fill="rgb(244,70,9)"/><text x="78.9024%" y="271.50">macro_expand_..</text></g><g><title>expand_crate (35,547,792 samples, 9.20%)</title><rect x="78.6568%" y="245" width="9.1973%" height="15" fill="rgb(217,125,39)"/><text x="78.9068%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (452,304 samples, 0.12%)</title><rect x="87.7371%" y="229" width="0.1170%" height="15" fill="rgb(235,36,10)"/><text x="87.9871%" y="239.50"></text></g><g><title>finalize_macro_resolutions (479,055 samples, 0.12%)</title><rect x="87.9636%" y="245" width="0.1239%" height="15" fill="rgb(251,123,47)"/><text x="88.2136%" y="255.50"></text></g><g><title>late_resolve_crate (5,108,391 samples, 1.32%)</title><rect x="88.0875%" y="245" width="1.3217%" height="15" fill="rgb(221,13,13)"/><text x="88.3375%" y="255.50"></text></g><g><title>configure_and_expand (42,820,875 samples, 11.08%)</title><rect x="78.4023%" y="277" width="11.0791%" height="15" fill="rgb(238,131,9)"/><text x="78.6523%" y="287.50">configure_and_ex..</text></g><g><title>resolve_crate (6,137,222 samples, 1.59%)</title><rect x="87.8935%" y="261" width="1.5879%" height="15" fill="rgb(211,50,8)"/><text x="88.1435%" y="271.50"></text></g><g><title>early_lint_checks (482,175 samples, 0.12%)</title><rect x="89.5654%" y="277" width="0.1248%" height="15" fill="rgb(245,182,24)"/><text x="89.8154%" y="287.50"></text></g><g><title>free_global_ctxt (5,782,569 samples, 1.50%)</title><rect x="89.6902%" y="277" width="1.4961%" height="15" fill="rgb(242,14,37)"/><text x="89.9402%" y="287.50"></text></g><g><title>codegen_fn_attrs (410,523 samples, 0.11%)</title><rect x="92.1480%" y="197" width="0.1062%" height="15" fill="rgb(246,228,12)"/><text x="92.3980%" y="207.50"></text></g><g><title>layout_of (467,564 samples, 0.12%)</title><rect x="92.5882%" y="181" width="0.1210%" height="15" fill="rgb(213,55,15)"/><text x="92.8382%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (578,298 samples, 0.15%)</title><rect x="92.7092%" y="181" width="0.1496%" height="15" fill="rgb(209,9,3)"/><text x="92.9592%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,008,111 samples, 0.26%)</title><rect x="92.8588%" y="181" width="0.2608%" height="15" fill="rgb(230,59,30)"/><text x="93.1088%" y="191.50"></text></g><g><title>optimized_mir (3,460,360 samples, 0.90%)</title><rect x="92.3357%" y="197" width="0.8953%" height="15" fill="rgb(209,121,21)"/><text x="92.5857%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (938,879 samples, 0.24%)</title><rect x="93.3078%" y="181" width="0.2429%" height="15" fill="rgb(220,109,13)"/><text x="93.5578%" y="191.50"></text></g><g><title>specialization_graph_of (415,066 samples, 0.11%)</title><rect x="93.6126%" y="181" width="0.1074%" height="15" fill="rgb(232,18,1)"/><text x="93.8626%" y="191.50"></text></g><g><title>resolve_instance (1,990,751 samples, 0.52%)</title><rect x="93.2310%" y="197" width="0.5151%" height="15" fill="rgb(215,41,42)"/><text x="93.4810%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (7,497,686 samples, 1.94%)</title><rect x="91.9888%" y="213" width="1.9399%" height="15" fill="rgb(224,123,36)"/><text x="92.2388%" y="223.50">m..</text></g><g><title>monomorphization_collector (7,573,577 samples, 1.96%)</title><rect x="91.9879%" y="229" width="1.9595%" height="15" fill="rgb(240,125,3)"/><text x="92.2379%" y="239.50">m..</text></g><g><title>assert_symbols_are_distinct (564,976 samples, 0.15%)</title><rect x="93.9502%" y="213" width="0.1462%" height="15" fill="rgb(205,98,50)"/><text x="94.2002%" y="223.50"></text></g><g><title>symbol_name (522,496 samples, 0.14%)</title><rect x="93.9612%" y="197" width="0.1352%" height="15" fill="rgb(205,185,37)"/><text x="94.2112%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (8,453,646 samples, 2.19%)</title><rect x="91.9800%" y="245" width="2.1872%" height="15" fill="rgb(238,207,15)"/><text x="92.2300%" y="255.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (849,609 samples, 0.22%)</title><rect x="93.9474%" y="229" width="0.2198%" height="15" fill="rgb(213,199,42)"/><text x="94.1974%" y="239.50"></text></g><g><title>exported_symbols (8,713,879 samples, 2.25%)</title><rect x="91.9723%" y="261" width="2.2546%" height="15" fill="rgb(235,201,11)"/><text x="92.2223%" y="271.50">e..</text></g><g><title>layout_of (925,588 samples, 0.24%)</title><rect x="95.3391%" y="245" width="0.2395%" height="15" fill="rgb(207,46,11)"/><text x="95.5891%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,616,202 samples, 1.19%)</title><rect x="95.5785%" y="245" width="1.1944%" height="15" fill="rgb(241,35,35)"/><text x="95.8285%" y="255.50"></text></g><g><title>optimized_mir (9,723,741 samples, 2.52%)</title><rect x="94.2631%" y="261" width="2.5158%" height="15" fill="rgb(243,32,47)"/><text x="94.5131%" y="271.50">op..</text></g><g><title>generate_crate_metadata (21,762,461 samples, 5.63%)</title><rect x="91.1863%" y="277" width="5.6306%" height="15" fill="rgb(247,202,23)"/><text x="91.4363%" y="287.50">generat..</text></g><g><title>hir_lowering (5,360,634 samples, 1.39%)</title><rect x="96.8170%" y="277" width="1.3870%" height="15" fill="rgb(219,102,11)"/><text x="97.0670%" y="287.50"></text></g><g><title>link_crate (2,112,302 samples, 0.55%)</title><rect x="98.2100%" y="261" width="0.5465%" height="15" fill="rgb(243,110,44)"/><text x="98.4600%" y="271.50"></text></g><g><title>link_binary (2,092,221 samples, 0.54%)</title><rect x="98.2152%" y="245" width="0.5413%" height="15" fill="rgb(222,74,54)"/><text x="98.4652%" y="255.50"></text></g><g><title>link_rlib (1,420,035 samples, 0.37%)</title><rect x="98.3891%" y="229" width="0.3674%" height="15" fill="rgb(216,99,12)"/><text x="98.6391%" y="239.50"></text></g><g><title>link (2,146,002 samples, 0.56%)</title><rect x="98.2039%" y="277" width="0.5552%" height="15" fill="rgb(226,22,26)"/><text x="98.4539%" y="287.50"></text></g><g><title>parse_crate (1,969,850 samples, 0.51%)</title><rect x="98.7592%" y="277" width="0.5097%" height="15" fill="rgb(217,163,10)"/><text x="99.0092%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (1,953,360 samples, 0.51%)</title><rect x="99.3470%" y="277" width="0.5054%" height="15" fill="rgb(213,25,53)"/><text x="99.5970%" y="287.50"></text></g><g><title>all (386,500,715 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (386,500,715 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (490,675 samples, 0.13%)</title><rect x="99.8730%" y="277" width="0.1270%" height="15" fill="rgb(229,68,48)"/><text x="100.1230%" y="287.50"></text></g></svg></svg>