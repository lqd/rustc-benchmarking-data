<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (181,425,531 samples, 13.66%)</title><rect x="0.0662%" y="165" width="13.6550%" height="15" fill="rgb(227,0,7)"/><text x="0.3162%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,317,528 samples, 0.17%)</title><rect x="19.5536%" y="53" width="0.1744%" height="15" fill="rgb(217,0,24)"/><text x="19.8036%" y="63.50"></text></g><g><title>is_copy_raw (1,636,892 samples, 0.12%)</title><rect x="19.6048%" y="37" width="0.1232%" height="15" fill="rgb(221,193,54)"/><text x="19.8548%" y="47.50"></text></g><g><title>resolve_instance (2,559,080 samples, 0.19%)</title><rect x="19.7281%" y="53" width="0.1926%" height="15" fill="rgb(248,212,6)"/><text x="19.9781%" y="63.50"></text></g><g><title>thir_body (3,932,664 samples, 0.30%)</title><rect x="19.9331%" y="53" width="0.2960%" height="15" fill="rgb(208,68,35)"/><text x="20.1831%" y="63.50"></text></g><g><title>mir_const (26,933,202 samples, 2.03%)</title><rect x="18.2098%" y="101" width="2.0271%" height="15" fill="rgb(232,128,0)"/><text x="18.4598%" y="111.50">m..</text></g><g><title>unsafety_check_result (22,821,595 samples, 1.72%)</title><rect x="18.5193%" y="85" width="1.7177%" height="15" fill="rgb(207,160,47)"/><text x="18.7693%" y="95.50"></text></g><g><title>mir_built (19,695,113 samples, 1.48%)</title><rect x="18.7546%" y="69" width="1.4824%" height="15" fill="rgb(228,23,34)"/><text x="19.0046%" y="79.50"></text></g><g><title>mir_const_qualif (2,573,257 samples, 0.19%)</title><rect x="20.2370%" y="101" width="0.1937%" height="15" fill="rgb(218,30,26)"/><text x="20.4870%" y="111.50"></text></g><g><title>mir_promoted (33,001,518 samples, 2.48%)</title><rect x="17.9468%" y="117" width="2.4839%" height="15" fill="rgb(220,122,19)"/><text x="18.1968%" y="127.50">mi..</text></g><g><title>type_op_prove_predicate (8,125,307 samples, 0.61%)</title><rect x="20.6489%" y="117" width="0.6116%" height="15" fill="rgb(250,228,42)"/><text x="20.8989%" y="127.50"></text></g><g><title>MIR_borrow_checking (99,319,982 samples, 7.48%)</title><rect x="13.7862%" y="149" width="7.4753%" height="15" fill="rgb(240,193,28)"/><text x="14.0362%" y="159.50">MIR_borrow..</text></g><g><title>mir_borrowck (98,534,974 samples, 7.42%)</title><rect x="13.8453%" y="133" width="7.4162%" height="15" fill="rgb(216,20,37)"/><text x="14.0953%" y="143.50">mir_borrow..</text></g><g><title>check_mod_attrs (1,849,639 samples, 0.14%)</title><rect x="21.3962%" y="133" width="0.1392%" height="15" fill="rgb(206,188,39)"/><text x="21.6462%" y="143.50"></text></g><g><title>misc_checking_1 (3,926,342 samples, 0.30%)</title><rect x="21.3935%" y="149" width="0.2955%" height="15" fill="rgb(217,207,13)"/><text x="21.6435%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (1,591,757 samples, 0.12%)</title><rect x="21.6892%" y="133" width="0.1198%" height="15" fill="rgb(231,73,38)"/><text x="21.9392%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,787,311 samples, 0.13%)</title><rect x="22.0570%" y="37" width="0.1345%" height="15" fill="rgb(225,20,46)"/><text x="22.3070%" y="47.50"></text></g><g><title>mir_for_ctfe (2,353,707 samples, 0.18%)</title><rect x="22.0163%" y="53" width="0.1772%" height="15" fill="rgb(210,31,41)"/><text x="22.2663%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,879,993 samples, 0.22%)</title><rect x="21.9784%" y="101" width="0.2168%" height="15" fill="rgb(221,200,47)"/><text x="22.2284%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,864,523 samples, 0.22%)</title><rect x="21.9796%" y="85" width="0.2156%" height="15" fill="rgb(226,26,5)"/><text x="22.2296%" y="95.50"></text></g><g><title>eval_to_allocation_raw (2,827,522 samples, 0.21%)</title><rect x="21.9824%" y="69" width="0.2128%" height="15" fill="rgb(249,33,26)"/><text x="22.2324%" y="79.50"></text></g><g><title>misc_checking_2 (7,978,416 samples, 0.60%)</title><rect x="21.6890%" y="149" width="0.6005%" height="15" fill="rgb(235,183,28)"/><text x="21.9390%" y="159.50"></text></g><g><title>match_checking (6,384,479 samples, 0.48%)</title><rect x="21.8090%" y="133" width="0.4805%" height="15" fill="rgb(221,5,38)"/><text x="22.0590%" y="143.50"></text></g><g><title>check_match (6,163,056 samples, 0.46%)</title><rect x="21.8256%" y="117" width="0.4639%" height="15" fill="rgb(247,18,42)"/><text x="22.0756%" y="127.50"></text></g><g><title>death_checking (1,643,858 samples, 0.12%)</title><rect x="22.3574%" y="133" width="0.1237%" height="15" fill="rgb(241,131,45)"/><text x="22.6074%" y="143.50"></text></g><g><title>crate_lints (5,187,205 samples, 0.39%)</title><rect x="22.4813%" y="117" width="0.3904%" height="15" fill="rgb(249,31,29)"/><text x="22.7313%" y="127.50"></text></g><g><title>lint_checking (6,733,022 samples, 0.51%)</title><rect x="22.4812%" y="133" width="0.5068%" height="15" fill="rgb(225,111,53)"/><text x="22.7312%" y="143.50"></text></g><g><title>module_lints (1,543,897 samples, 0.12%)</title><rect x="22.8717%" y="117" width="0.1162%" height="15" fill="rgb(238,160,17)"/><text x="23.1217%" y="127.50"></text></g><g><title>lint_mod (1,531,917 samples, 0.12%)</title><rect x="22.8726%" y="101" width="0.1153%" height="15" fill="rgb(214,148,48)"/><text x="23.1226%" y="111.50"></text></g><g><title>privacy_checking_modules (4,290,576 samples, 0.32%)</title><rect x="23.0826%" y="133" width="0.3229%" height="15" fill="rgb(232,36,49)"/><text x="23.3326%" y="143.50"></text></g><g><title>check_mod_privacy (4,281,276 samples, 0.32%)</title><rect x="23.0833%" y="117" width="0.3222%" height="15" fill="rgb(209,103,24)"/><text x="23.3333%" y="127.50"></text></g><g><title>misc_checking_3 (14,866,529 samples, 1.12%)</title><rect x="22.2895%" y="149" width="1.1189%" height="15" fill="rgb(229,88,8)"/><text x="22.5395%" y="159.50"></text></g><g><title>impl_parent (2,995,690 samples, 0.23%)</title><rect x="24.1579%" y="85" width="0.2255%" height="15" fill="rgb(213,181,19)"/><text x="24.4079%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,721,232 samples, 0.13%)</title><rect x="24.2539%" y="69" width="0.1295%" height="15" fill="rgb(254,191,54)"/><text x="24.5039%" y="79.50"></text></g><g><title>impl_trait_ref (6,398,879 samples, 0.48%)</title><rect x="24.3834%" y="85" width="0.4816%" height="15" fill="rgb(241,83,37)"/><text x="24.6334%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,131,550 samples, 0.39%)</title><rect x="24.4788%" y="69" width="0.3862%" height="15" fill="rgb(233,36,39)"/><text x="24.7288%" y="79.50"></text></g><g><title>coherent_trait (20,527,638 samples, 1.55%)</title><rect x="23.4342%" y="117" width="1.5450%" height="15" fill="rgb(226,3,54)"/><text x="23.6842%" y="127.50"></text></g><g><title>specialization_graph_of (19,491,277 samples, 1.47%)</title><rect x="23.5122%" y="101" width="1.4670%" height="15" fill="rgb(245,192,40)"/><text x="23.7622%" y="111.50"></text></g><g><title>coherence_checking (20,822,372 samples, 1.57%)</title><rect x="23.4321%" y="133" width="1.5672%" height="15" fill="rgb(238,167,29)"/><text x="23.6821%" y="143.50"></text></g><g><title>evaluate_obligation (2,244,459 samples, 0.17%)</title><rect x="29.5871%" y="85" width="0.1689%" height="15" fill="rgb(232,182,51)"/><text x="29.8371%" y="95.50"></text></g><g><title>evaluate_obligation (2,170,062 samples, 0.16%)</title><rect x="31.5304%" y="69" width="0.1633%" height="15" fill="rgb(231,60,39)"/><text x="31.7804%" y="79.50"></text></g><g><title>typeck (25,653,154 samples, 1.93%)</title><rect x="29.9607%" y="85" width="1.9308%" height="15" fill="rgb(208,69,12)"/><text x="30.2107%" y="95.50">t..</text></g><g><title>item_bodies_checking (91,539,109 samples, 6.89%)</title><rect x="25.0131%" y="133" width="6.8897%" height="15" fill="rgb(235,93,37)"/><text x="25.2631%" y="143.50">item_bodi..</text></g><g><title>typeck_item_bodies (91,536,549 samples, 6.89%)</title><rect x="25.0133%" y="117" width="6.8895%" height="15" fill="rgb(213,116,39)"/><text x="25.2633%" y="127.50">typeck_it..</text></g><g><title>typeck (91,025,533 samples, 6.85%)</title><rect x="25.0517%" y="101" width="6.8510%" height="15" fill="rgb(222,207,29)"/><text x="25.3017%" y="111.50">typeck</text></g><g><title>item_types_checking (6,862,273 samples, 0.52%)</title><rect x="31.9028%" y="133" width="0.5165%" height="15" fill="rgb(206,96,30)"/><text x="32.1528%" y="143.50"></text></g><g><title>check_mod_item_types (6,851,353 samples, 0.52%)</title><rect x="31.9036%" y="117" width="0.5157%" height="15" fill="rgb(218,138,4)"/><text x="32.1536%" y="127.50"></text></g><g><title>typeck (1,619,835 samples, 0.12%)</title><rect x="32.2974%" y="101" width="0.1219%" height="15" fill="rgb(250,191,14)"/><text x="32.5474%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,933,263 samples, 0.15%)</title><rect x="32.5147%" y="101" width="0.1455%" height="15" fill="rgb(239,60,40)"/><text x="32.7647%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,916,293 samples, 0.14%)</title><rect x="32.5160%" y="85" width="0.1442%" height="15" fill="rgb(206,27,48)"/><text x="32.7660%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,898,451 samples, 0.14%)</title><rect x="32.5173%" y="69" width="0.1429%" height="15" fill="rgb(225,35,8)"/><text x="32.7673%" y="79.50"></text></g><g><title>generics_of (2,933,619 samples, 0.22%)</title><rect x="32.7596%" y="101" width="0.2208%" height="15" fill="rgb(250,213,24)"/><text x="33.0096%" y="111.50"></text></g><g><title>predicates_of (2,619,467 samples, 0.20%)</title><rect x="33.0089%" y="101" width="0.1972%" height="15" fill="rgb(247,123,22)"/><text x="33.2589%" y="111.50"></text></g><g><title>predicates_defined_on (2,340,604 samples, 0.18%)</title><rect x="33.0299%" y="85" width="0.1762%" height="15" fill="rgb(231,138,38)"/><text x="33.2799%" y="95.50"></text></g><g><title>type_collecting (11,559,224 samples, 0.87%)</title><rect x="32.4198%" y="133" width="0.8700%" height="15" fill="rgb(231,145,46)"/><text x="32.6698%" y="143.50"></text></g><g><title>collect_mod_item_types (11,538,264 samples, 0.87%)</title><rect x="32.4214%" y="117" width="0.8684%" height="15" fill="rgb(251,118,11)"/><text x="32.6714%" y="127.50"></text></g><g><title>evaluate_obligation (1,664,264 samples, 0.13%)</title><rect x="34.0690%" y="101" width="0.1253%" height="15" fill="rgb(217,147,25)"/><text x="34.3190%" y="111.50"></text></g><g><title>region_scope_tree (1,486,977 samples, 0.11%)</title><rect x="34.3666%" y="101" width="0.1119%" height="15" fill="rgb(247,81,37)"/><text x="34.6166%" y="111.50"></text></g><g><title>check_impl_item_well_formed (14,845,055 samples, 1.12%)</title><rect x="33.3668%" y="117" width="1.1173%" height="15" fill="rgb(209,12,38)"/><text x="33.6168%" y="127.50"></text></g><g><title>evaluate_obligation (2,031,562 samples, 0.15%)</title><rect x="35.3134%" y="101" width="0.1529%" height="15" fill="rgb(227,1,9)"/><text x="35.5634%" y="111.50"></text></g><g><title>check_item_well_formed (16,233,723 samples, 1.22%)</title><rect x="34.4841%" y="117" width="1.2218%" height="15" fill="rgb(248,47,43)"/><text x="34.7341%" y="127.50"></text></g><g><title>analysis (293,238,568 samples, 22.07%)</title><rect x="13.7212%" y="165" width="22.0706%" height="15" fill="rgb(221,10,30)"/><text x="13.9712%" y="175.50">analysis</text></g><g><title>type_check_crate (164,530,260 samples, 12.38%)</title><rect x="23.4084%" y="149" width="12.3834%" height="15" fill="rgb(210,229,1)"/><text x="23.6584%" y="159.50">type_check_crate</text></g><g><title>wf_checking (33,208,205 samples, 2.50%)</title><rect x="33.2924%" y="133" width="2.4994%" height="15" fill="rgb(222,148,37)"/><text x="33.5424%" y="143.50">wf..</text></g><g><title>compute_debuginfo_type_name (3,171,605 samples, 0.24%)</title><rect x="45.4208%" y="133" width="0.2387%" height="15" fill="rgb(234,67,33)"/><text x="45.6708%" y="143.50"></text></g><g><title>layout_of (2,510,575 samples, 0.19%)</title><rect x="46.4548%" y="117" width="0.1890%" height="15" fill="rgb(247,98,35)"/><text x="46.7048%" y="127.50"></text></g><g><title>predicates_of (2,549,358 samples, 0.19%)</title><rect x="46.9941%" y="101" width="0.1919%" height="15" fill="rgb(247,138,52)"/><text x="47.2441%" y="111.50"></text></g><g><title>predicates_defined_on (1,876,131 samples, 0.14%)</title><rect x="47.0448%" y="85" width="0.1412%" height="15" fill="rgb(213,79,30)"/><text x="47.2948%" y="95.50"></text></g><g><title>param_env (7,208,968 samples, 0.54%)</title><rect x="46.6438%" y="117" width="0.5426%" height="15" fill="rgb(246,177,23)"/><text x="46.8938%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,370,607 samples, 0.10%)</title><rect x="47.1864%" y="117" width="0.1032%" height="15" fill="rgb(230,62,27)"/><text x="47.4364%" y="127.50"></text></g><g><title>fn_abi_of_instance (20,498,919 samples, 1.54%)</title><rect x="45.7505%" y="133" width="1.5429%" height="15" fill="rgb(216,154,8)"/><text x="46.0005%" y="143.50"></text></g><g><title>layout_of (2,715,758 samples, 0.20%)</title><rect x="47.3863%" y="133" width="0.2044%" height="15" fill="rgb(244,35,45)"/><text x="47.6363%" y="143.50"></text></g><g><title>codegen_module (154,879,777 samples, 11.66%)</title><rect x="36.0176%" y="149" width="11.6570%" height="15" fill="rgb(251,115,12)"/><text x="36.2676%" y="159.50">codegen_module</text></g><g><title>codegen_crate (157,954,310 samples, 11.89%)</title><rect x="35.7923%" y="165" width="11.8884%" height="15" fill="rgb(240,54,50)"/><text x="36.0423%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (498,981,039 samples, 37.56%)</title><rect x="47.6935%" y="149" width="37.5559%" height="15" fill="rgb(233,84,52)"/><text x="47.9435%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (474,947,572 samples, 35.75%)</title><rect x="49.5024%" y="133" width="35.7470%" height="15" fill="rgb(207,117,47)"/><text x="49.7524%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (523,392,728 samples, 39.39%)</title><rect x="47.6808%" y="165" width="39.3932%" height="15" fill="rgb(249,43,39)"/><text x="47.9308%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (24,242,038 samples, 1.82%)</title><rect x="85.2494%" y="149" width="1.8246%" height="15" fill="rgb(209,38,44)"/><text x="85.4994%" y="159.50">L..</text></g><g><title>macro_expand_crate (40,223,020 samples, 3.03%)</title><rect x="87.1415%" y="149" width="3.0274%" height="15" fill="rgb(236,212,23)"/><text x="87.3915%" y="159.50">mac..</text></g><g><title>expand_crate (40,213,270 samples, 3.03%)</title><rect x="87.1422%" y="133" width="3.0267%" height="15" fill="rgb(242,79,21)"/><text x="87.3922%" y="143.50">exp..</text></g><g><title>late_resolve_crate (4,910,573 samples, 0.37%)</title><rect x="90.2163%" y="133" width="0.3696%" height="15" fill="rgb(211,96,35)"/><text x="90.4663%" y="143.50"></text></g><g><title>configure_and_expand (47,043,744 samples, 3.54%)</title><rect x="87.0740%" y="165" width="3.5408%" height="15" fill="rgb(253,215,40)"/><text x="87.3240%" y="175.50">conf..</text></g><g><title>resolve_crate (5,815,892 samples, 0.44%)</title><rect x="90.1770%" y="149" width="0.4377%" height="15" fill="rgb(211,81,21)"/><text x="90.4270%" y="159.50"></text></g><g><title>early_lint_checks (1,373,035 samples, 0.10%)</title><rect x="90.6708%" y="165" width="0.1033%" height="15" fill="rgb(208,190,38)"/><text x="90.9208%" y="175.50"></text></g><g><title>free_global_ctxt (11,478,453 samples, 0.86%)</title><rect x="90.7742%" y="165" width="0.8639%" height="15" fill="rgb(235,213,38)"/><text x="91.0242%" y="175.50"></text></g><g><title>item_attrs (1,521,005 samples, 0.11%)</title><rect x="92.6104%" y="69" width="0.1145%" height="15" fill="rgb(237,122,38)"/><text x="92.8604%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,455,434 samples, 0.11%)</title><rect x="92.6154%" y="53" width="0.1095%" height="15" fill="rgb(244,218,35)"/><text x="92.8654%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,384,815 samples, 0.18%)</title><rect x="92.5796%" y="85" width="0.1795%" height="15" fill="rgb(240,68,47)"/><text x="92.8296%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,469,657 samples, 0.26%)</title><rect x="93.4692%" y="69" width="0.2611%" height="15" fill="rgb(210,16,53)"/><text x="93.7192%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,955,659 samples, 0.45%)</title><rect x="93.7303%" y="69" width="0.4483%" height="15" fill="rgb(235,124,12)"/><text x="93.9803%" y="79.50"></text></g><g><title>optimized_mir (18,609,364 samples, 1.40%)</title><rect x="92.8997%" y="85" width="1.4006%" height="15" fill="rgb(224,169,11)"/><text x="93.1497%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,374,308 samples, 0.33%)</title><rect x="94.4775%" y="69" width="0.3292%" height="15" fill="rgb(250,166,2)"/><text x="94.7275%" y="79.50"></text></g><g><title>resolve_instance (9,472,032 samples, 0.71%)</title><rect x="94.3004%" y="85" width="0.7129%" height="15" fill="rgb(242,216,29)"/><text x="94.5504%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,509,298 samples, 0.11%)</title><rect x="95.0710%" y="69" width="0.1136%" height="15" fill="rgb(230,116,27)"/><text x="95.3210%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,463,304 samples, 0.11%)</title><rect x="95.0745%" y="53" width="0.1101%" height="15" fill="rgb(228,99,48)"/><text x="95.3245%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,386,444 samples, 0.10%)</title><rect x="95.0803%" y="37" width="0.1044%" height="15" fill="rgb(253,11,6)"/><text x="95.3303%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,909,921 samples, 0.14%)</title><rect x="95.0442%" y="85" width="0.1438%" height="15" fill="rgb(247,143,39)"/><text x="95.2942%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (42,532,966 samples, 3.20%)</title><rect x="92.1184%" y="101" width="3.2012%" height="15" fill="rgb(236,97,10)"/><text x="92.3684%" y="111.50">mon..</text></g><g><title>vtable_entries (1,586,405 samples, 0.12%)</title><rect x="95.2002%" y="85" width="0.1194%" height="15" fill="rgb(233,208,19)"/><text x="95.4502%" y="95.50"></text></g><g><title>monomorphization_collector (42,822,939 samples, 3.22%)</title><rect x="92.1181%" y="117" width="3.2231%" height="15" fill="rgb(216,164,2)"/><text x="92.3681%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,449,258 samples, 0.33%)</title><rect x="95.3415%" y="101" width="0.3349%" height="15" fill="rgb(220,129,5)"/><text x="95.5915%" y="111.50"></text></g><g><title>symbol_name (3,962,592 samples, 0.30%)</title><rect x="95.3781%" y="85" width="0.2982%" height="15" fill="rgb(242,17,10)"/><text x="95.6281%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (49,503,070 samples, 3.73%)</title><rect x="92.1141%" y="133" width="3.7259%" height="15" fill="rgb(242,107,0)"/><text x="92.3641%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (6,626,951 samples, 0.50%)</title><rect x="95.3412%" y="117" width="0.4988%" height="15" fill="rgb(251,28,31)"/><text x="95.5912%" y="127.50"></text></g><g><title>cgu_partitioning (2,173,563 samples, 0.16%)</title><rect x="95.6764%" y="101" width="0.1636%" height="15" fill="rgb(233,223,10)"/><text x="95.9264%" y="111.50"></text></g><g><title>exported_symbols (50,129,927 samples, 3.77%)</title><rect x="92.0993%" y="149" width="3.7730%" height="15" fill="rgb(215,21,27)"/><text x="92.3493%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (7,133,162 samples, 0.54%)</title><rect x="96.5487%" y="133" width="0.5369%" height="15" fill="rgb(232,23,21)"/><text x="96.7987%" y="143.50"></text></g><g><title>optimized_mir (16,165,750 samples, 1.22%)</title><rect x="95.8999%" y="149" width="1.2167%" height="15" fill="rgb(244,5,23)"/><text x="96.1499%" y="159.50"></text></g><g><title>generate_crate_metadata (73,153,183 samples, 5.51%)</title><rect x="91.6381%" y="165" width="5.5059%" height="15" fill="rgb(226,81,46)"/><text x="91.8881%" y="175.50">generat..</text></g><g><title>hir_lowering (10,831,956 samples, 0.82%)</title><rect x="97.1440%" y="165" width="0.8153%" height="15" fill="rgb(247,70,30)"/><text x="97.3940%" y="175.50"></text></g><g><title>finish_ongoing_codegen (17,474,467 samples, 1.32%)</title><rect x="97.9605%" y="149" width="1.3152%" height="15" fill="rgb(212,68,19)"/><text x="98.2105%" y="159.50"></text></g><g><title>link_crate (4,609,489 samples, 0.35%)</title><rect x="99.2758%" y="149" width="0.3469%" height="15" fill="rgb(240,187,13)"/><text x="99.5258%" y="159.50"></text></g><g><title>link_binary (4,473,008 samples, 0.34%)</title><rect x="99.2860%" y="133" width="0.3367%" height="15" fill="rgb(223,113,26)"/><text x="99.5360%" y="143.50"></text></g><g><title>link_rlib (3,563,918 samples, 0.27%)</title><rect x="99.3544%" y="117" width="0.2682%" height="15" fill="rgb(206,192,2)"/><text x="99.6044%" y="127.50"></text></g><g><title>link (22,109,396 samples, 1.66%)</title><rect x="97.9592%" y="165" width="1.6641%" height="15" fill="rgb(241,108,4)"/><text x="98.2092%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (3,301,115 samples, 0.25%)</title><rect x="99.6942%" y="165" width="0.2485%" height="15" fill="rgb(247,173,49)"/><text x="99.9442%" y="175.50"></text></g><g><title>all (1,328,636,823 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,328,636,823 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>