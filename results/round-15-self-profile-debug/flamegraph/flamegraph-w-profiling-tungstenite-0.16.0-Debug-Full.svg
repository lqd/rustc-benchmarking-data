<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (383,034,384 samples, 14.63%)</title><rect x="0.0494%" y="181" width="14.6261%" height="15" fill="rgb(227,0,7)"/><text x="0.2994%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (6,882,135 samples, 0.26%)</title><rect x="19.7067%" y="53" width="0.2628%" height="15" fill="rgb(217,0,24)"/><text x="19.9567%" y="63.50"></text></g><g><title>evaluate_obligation (5,763,826 samples, 0.22%)</title><rect x="19.7494%" y="37" width="0.2201%" height="15" fill="rgb(221,193,54)"/><text x="19.9994%" y="47.50"></text></g><g><title>needs_drop_raw (9,711,437 samples, 0.37%)</title><rect x="19.6027%" y="69" width="0.3708%" height="15" fill="rgb(248,212,6)"/><text x="19.8527%" y="79.50"></text></g><g><title>specialization_graph_of (3,605,536 samples, 0.14%)</title><rect x="20.0800%" y="53" width="0.1377%" height="15" fill="rgb(208,68,35)"/><text x="20.3300%" y="63.50"></text></g><g><title>resolve_instance (6,743,029 samples, 0.26%)</title><rect x="19.9735%" y="69" width="0.2575%" height="15" fill="rgb(232,128,0)"/><text x="20.2235%" y="79.50"></text></g><g><title>thir_body (8,239,524 samples, 0.31%)</title><rect x="20.2357%" y="69" width="0.3146%" height="15" fill="rgb(207,160,47)"/><text x="20.4857%" y="79.50"></text></g><g><title>mir_const (56,919,908 samples, 2.17%)</title><rect x="18.3811%" y="117" width="2.1735%" height="15" fill="rgb(228,23,34)"/><text x="18.6311%" y="127.50">m..</text></g><g><title>unsafety_check_result (50,359,591 samples, 1.92%)</title><rect x="18.6316%" y="101" width="1.9230%" height="15" fill="rgb(218,30,26)"/><text x="18.8816%" y="111.50">u..</text></g><g><title>mir_built (45,169,534 samples, 1.72%)</title><rect x="18.8297%" y="85" width="1.7248%" height="15" fill="rgb(220,122,19)"/><text x="19.0797%" y="95.50"></text></g><g><title>mir_promoted (63,229,502 samples, 2.41%)</title><rect x="18.1658%" y="133" width="2.4144%" height="15" fill="rgb(250,228,42)"/><text x="18.4158%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (3,283,314 samples, 0.13%)</title><rect x="20.5803%" y="133" width="0.1254%" height="15" fill="rgb(240,193,28)"/><text x="20.8303%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,626,739 samples, 0.10%)</title><rect x="20.7057%" y="133" width="0.1003%" height="15" fill="rgb(216,20,37)"/><text x="20.9557%" y="143.50"></text></g><g><title>type_op_prove_predicate (15,119,074 samples, 0.58%)</title><rect x="20.8838%" y="133" width="0.5773%" height="15" fill="rgb(206,188,39)"/><text x="21.1338%" y="143.50"></text></g><g><title>MIR_borrow_checking (176,319,374 samples, 6.73%)</title><rect x="14.7295%" y="165" width="6.7327%" height="15" fill="rgb(217,207,13)"/><text x="14.9795%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (175,554,318 samples, 6.70%)</title><rect x="14.7587%" y="149" width="6.7035%" height="15" fill="rgb(231,73,38)"/><text x="15.0087%" y="159.50">mir_borro..</text></g><g><title>misc_checking_1 (5,092,274 samples, 0.19%)</title><rect x="21.5267%" y="165" width="0.1944%" height="15" fill="rgb(225,20,46)"/><text x="21.7767%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,442,697 samples, 0.13%)</title><rect x="21.7213%" y="149" width="0.1315%" height="15" fill="rgb(210,31,41)"/><text x="21.9713%" y="159.50"></text></g><g><title>check_mod_liveness (2,824,599 samples, 0.11%)</title><rect x="21.7449%" y="133" width="0.1079%" height="15" fill="rgb(221,200,47)"/><text x="21.9949%" y="143.50"></text></g><g><title>misc_checking_2 (8,332,299 samples, 0.32%)</title><rect x="21.7212%" y="165" width="0.3182%" height="15" fill="rgb(226,26,5)"/><text x="21.9712%" y="175.50"></text></g><g><title>match_checking (4,887,432 samples, 0.19%)</title><rect x="21.8527%" y="149" width="0.1866%" height="15" fill="rgb(249,33,26)"/><text x="22.1027%" y="159.50"></text></g><g><title>check_match (4,686,110 samples, 0.18%)</title><rect x="21.8604%" y="133" width="0.1789%" height="15" fill="rgb(235,183,28)"/><text x="22.1104%" y="143.50"></text></g><g><title>death_checking (2,681,929 samples, 0.10%)</title><rect x="22.0920%" y="149" width="0.1024%" height="15" fill="rgb(221,5,38)"/><text x="22.3420%" y="159.50"></text></g><g><title>crate_lints (7,567,891 samples, 0.29%)</title><rect x="22.1945%" y="133" width="0.2890%" height="15" fill="rgb(247,18,42)"/><text x="22.4445%" y="143.50"></text></g><g><title>lint_checking (11,901,107 samples, 0.45%)</title><rect x="22.1944%" y="149" width="0.4544%" height="15" fill="rgb(241,131,45)"/><text x="22.4444%" y="159.50"></text></g><g><title>module_lints (4,330,006 samples, 0.17%)</title><rect x="22.4835%" y="133" width="0.1653%" height="15" fill="rgb(249,31,29)"/><text x="22.7335%" y="143.50"></text></g><g><title>lint_mod (4,308,606 samples, 0.16%)</title><rect x="22.4843%" y="117" width="0.1645%" height="15" fill="rgb(225,111,53)"/><text x="22.7343%" y="127.50"></text></g><g><title>privacy_access_levels (3,256,755 samples, 0.12%)</title><rect x="22.6488%" y="149" width="0.1244%" height="15" fill="rgb(238,160,17)"/><text x="22.8988%" y="159.50"></text></g><g><title>privacy_checking_modules (6,636,301 samples, 0.25%)</title><rect x="22.7732%" y="149" width="0.2534%" height="15" fill="rgb(214,148,48)"/><text x="23.0232%" y="159.50"></text></g><g><title>check_mod_privacy (6,619,580 samples, 0.25%)</title><rect x="22.7738%" y="133" width="0.2528%" height="15" fill="rgb(232,36,49)"/><text x="23.0238%" y="143.50"></text></g><g><title>misc_checking_3 (25,928,088 samples, 0.99%)</title><rect x="22.0393%" y="165" width="0.9901%" height="15" fill="rgb(209,103,24)"/><text x="22.2893%" y="175.50"></text></g><g><title>impl_parent (3,568,891 samples, 0.14%)</title><rect x="23.3269%" y="101" width="0.1363%" height="15" fill="rgb(229,88,8)"/><text x="23.5769%" y="111.50"></text></g><g><title>impl_trait_ref (7,804,243 samples, 0.30%)</title><rect x="23.4632%" y="101" width="0.2980%" height="15" fill="rgb(213,181,19)"/><text x="23.7132%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,159,000 samples, 0.24%)</title><rect x="23.5260%" y="85" width="0.2352%" height="15" fill="rgb(254,191,54)"/><text x="23.7760%" y="95.50"></text></g><g><title>coherent_trait (20,395,929 samples, 0.78%)</title><rect x="23.0464%" y="133" width="0.7788%" height="15" fill="rgb(241,83,37)"/><text x="23.2964%" y="143.50"></text></g><g><title>specialization_graph_of (19,686,142 samples, 0.75%)</title><rect x="23.0735%" y="117" width="0.7517%" height="15" fill="rgb(233,36,39)"/><text x="23.3235%" y="127.50"></text></g><g><title>coherence_checking (20,667,621 samples, 0.79%)</title><rect x="23.0452%" y="149" width="0.7892%" height="15" fill="rgb(226,3,54)"/><text x="23.2952%" y="159.50"></text></g><g><title>dropck_outlives (4,623,644 samples, 0.18%)</title><rect x="29.6738%" y="101" width="0.1766%" height="15" fill="rgb(245,192,40)"/><text x="29.9238%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,634,599 samples, 0.10%)</title><rect x="29.8504%" y="101" width="0.1006%" height="15" fill="rgb(238,167,29)"/><text x="30.1004%" y="111.50"></text></g><g><title>specializes (2,975,854 samples, 0.11%)</title><rect x="30.7045%" y="85" width="0.1136%" height="15" fill="rgb(232,182,51)"/><text x="30.9545%" y="95.50"></text></g><g><title>evaluate_obligation (24,586,671 samples, 0.94%)</title><rect x="29.9510%" y="101" width="0.9388%" height="15" fill="rgb(231,60,39)"/><text x="30.2010%" y="111.50"></text></g><g><title>typeck (20,470,389 samples, 0.78%)</title><rect x="31.2377%" y="101" width="0.7817%" height="15" fill="rgb(208,69,12)"/><text x="31.4877%" y="111.50"></text></g><g><title>item_bodies_checking (214,570,844 samples, 8.19%)</title><rect x="23.8408%" y="149" width="8.1933%" height="15" fill="rgb(235,93,37)"/><text x="24.0908%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (214,567,684 samples, 8.19%)</title><rect x="23.8409%" y="133" width="8.1932%" height="15" fill="rgb(213,116,39)"/><text x="24.0909%" y="143.50">typeck_item..</text></g><g><title>typeck (214,076,637 samples, 8.17%)</title><rect x="23.8597%" y="117" width="8.1745%" height="15" fill="rgb(222,207,29)"/><text x="24.1097%" y="127.50">typeck</text></g><g><title>item_types_checking (4,125,964 samples, 0.16%)</title><rect x="32.0341%" y="149" width="0.1575%" height="15" fill="rgb(206,96,30)"/><text x="32.2841%" y="159.50"></text></g><g><title>check_mod_item_types (4,108,484 samples, 0.16%)</title><rect x="32.0348%" y="133" width="0.1569%" height="15" fill="rgb(218,138,4)"/><text x="32.2848%" y="143.50"></text></g><g><title>generics_of (3,047,238 samples, 0.12%)</title><rect x="32.3165%" y="117" width="0.1164%" height="15" fill="rgb(250,191,14)"/><text x="32.5665%" y="127.50"></text></g><g><title>predicates_of (2,775,368 samples, 0.11%)</title><rect x="32.4429%" y="117" width="0.1060%" height="15" fill="rgb(239,60,40)"/><text x="32.6929%" y="127.50"></text></g><g><title>type_collecting (9,751,883 samples, 0.37%)</title><rect x="32.1926%" y="149" width="0.3724%" height="15" fill="rgb(206,27,48)"/><text x="32.4426%" y="159.50"></text></g><g><title>collect_mod_item_types (9,723,193 samples, 0.37%)</title><rect x="32.1937%" y="133" width="0.3713%" height="15" fill="rgb(225,35,8)"/><text x="32.4437%" y="143.50"></text></g><g><title>check_impl_item_well_formed (14,192,838 samples, 0.54%)</title><rect x="32.6070%" y="133" width="0.5419%" height="15" fill="rgb(250,213,24)"/><text x="32.8570%" y="143.50"></text></g><g><title>check_item_well_formed (11,415,425 samples, 0.44%)</title><rect x="33.1490%" y="133" width="0.4359%" height="15" fill="rgb(247,123,22)"/><text x="33.3990%" y="143.50"></text></g><g><title>analysis (495,842,290 samples, 18.93%)</title><rect x="14.6755%" y="181" width="18.9336%" height="15" fill="rgb(231,138,38)"/><text x="14.9255%" y="191.50">analysis</text></g><g><title>type_check_crate (277,064,861 samples, 10.58%)</title><rect x="23.0294%" y="165" width="10.5796%" height="15" fill="rgb(231,145,46)"/><text x="23.2794%" y="175.50">type_check_crate</text></g><g><title>wf_checking (27,309,582 samples, 1.04%)</title><rect x="32.5662%" y="149" width="1.0428%" height="15" fill="rgb(251,118,11)"/><text x="32.8162%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (7,252,502 samples, 0.28%)</title><rect x="44.7190%" y="149" width="0.2769%" height="15" fill="rgb(217,147,25)"/><text x="44.9690%" y="159.50"></text></g><g><title>const_caller_location (5,495,387 samples, 0.21%)</title><rect x="44.9960%" y="149" width="0.2098%" height="15" fill="rgb(247,81,37)"/><text x="45.2460%" y="159.50"></text></g><g><title>codegen_fn_attrs (3,475,133 samples, 0.13%)</title><rect x="45.7912%" y="133" width="0.1327%" height="15" fill="rgb(209,12,38)"/><text x="46.0412%" y="143.50"></text></g><g><title>layout_of (4,356,038 samples, 0.17%)</title><rect x="45.9559%" y="133" width="0.1663%" height="15" fill="rgb(227,1,9)"/><text x="46.2059%" y="143.50"></text></g><g><title>predicates_of (5,831,502 samples, 0.22%)</title><rect x="46.4896%" y="117" width="0.2227%" height="15" fill="rgb(248,47,43)"/><text x="46.7396%" y="127.50"></text></g><g><title>predicates_defined_on (4,289,358 samples, 0.16%)</title><rect x="46.5485%" y="101" width="0.1638%" height="15" fill="rgb(221,10,30)"/><text x="46.7985%" y="111.50"></text></g><g><title>param_env (15,486,471 samples, 0.59%)</title><rect x="46.1222%" y="133" width="0.5913%" height="15" fill="rgb(210,229,1)"/><text x="46.3722%" y="143.50"></text></g><g><title>normalize_projection_ty (4,600,874 samples, 0.18%)</title><rect x="46.7629%" y="117" width="0.1757%" height="15" fill="rgb(222,148,37)"/><text x="47.0129%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,919,017 samples, 0.23%)</title><rect x="46.7136%" y="133" width="0.2260%" height="15" fill="rgb(234,67,33)"/><text x="46.9636%" y="143.50"></text></g><g><title>fn_abi_of_instance (45,379,298 samples, 1.73%)</title><rect x="45.2169%" y="149" width="1.7328%" height="15" fill="rgb(247,98,35)"/><text x="45.4669%" y="159.50"></text></g><g><title>layout_of (5,458,647 samples, 0.21%)</title><rect x="47.0298%" y="149" width="0.2084%" height="15" fill="rgb(247,138,52)"/><text x="47.2798%" y="159.50"></text></g><g><title>symbol_name (5,249,141 samples, 0.20%)</title><rect x="47.2390%" y="149" width="0.2004%" height="15" fill="rgb(213,79,30)"/><text x="47.4890%" y="159.50"></text></g><g><title>codegen_module (360,271,701 samples, 13.76%)</title><rect x="33.7333%" y="165" width="13.7569%" height="15" fill="rgb(246,177,23)"/><text x="33.9833%" y="175.50">codegen_module</text></g><g><title>codegen_crate (363,704,627 samples, 13.89%)</title><rect x="33.6094%" y="181" width="13.8879%" height="15" fill="rgb(230,62,27)"/><text x="33.8594%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (971,681,826 samples, 37.10%)</title><rect x="47.5076%" y="165" width="37.1034%" height="15" fill="rgb(216,154,8)"/><text x="47.7576%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (910,076,096 samples, 34.75%)</title><rect x="49.8600%" y="149" width="34.7510%" height="15" fill="rgb(244,35,45)"/><text x="50.1100%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,027,652,963 samples, 39.24%)</title><rect x="47.4973%" y="181" width="39.2406%" height="15" fill="rgb(251,115,12)"/><text x="47.7473%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (55,700,944 samples, 2.13%)</title><rect x="84.6110%" y="165" width="2.1269%" height="15" fill="rgb(240,54,50)"/><text x="84.8610%" y="175.50">L..</text></g><g><title>metadata_register_crate (7,965,246 samples, 0.30%)</title><rect x="90.2053%" y="133" width="0.3042%" height="15" fill="rgb(233,84,52)"/><text x="90.4553%" y="143.50"></text></g><g><title>metadata_register_crate (5,205,055 samples, 0.20%)</title><rect x="90.3107%" y="117" width="0.1988%" height="15" fill="rgb(207,117,47)"/><text x="90.5607%" y="127.50"></text></g><g><title>macro_expand_crate (99,360,042 samples, 3.79%)</title><rect x="86.7817%" y="165" width="3.7940%" height="15" fill="rgb(249,43,39)"/><text x="87.0317%" y="175.50">macr..</text></g><g><title>expand_crate (99,346,952 samples, 3.79%)</title><rect x="86.7822%" y="149" width="3.7935%" height="15" fill="rgb(209,38,44)"/><text x="87.0322%" y="159.50">expa..</text></g><g><title>late_resolve_crate (9,280,529 samples, 0.35%)</title><rect x="90.6160%" y="149" width="0.3544%" height="15" fill="rgb(236,212,23)"/><text x="90.8660%" y="159.50"></text></g><g><title>configure_and_expand (111,631,174 samples, 4.26%)</title><rect x="86.7379%" y="181" width="4.2626%" height="15" fill="rgb(242,79,21)"/><text x="86.9879%" y="191.50">confi..</text></g><g><title>resolve_crate (11,019,238 samples, 0.42%)</title><rect x="90.5798%" y="165" width="0.4208%" height="15" fill="rgb(211,96,35)"/><text x="90.8298%" y="175.50"></text></g><g><title>free_global_ctxt (41,665,575 samples, 1.59%)</title><rect x="91.1368%" y="181" width="1.5910%" height="15" fill="rgb(253,215,40)"/><text x="91.3868%" y="191.50"></text></g><g><title>item_attrs (3,170,235 samples, 0.12%)</title><rect x="93.5523%" y="85" width="0.1211%" height="15" fill="rgb(211,81,21)"/><text x="93.8023%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (3,032,024 samples, 0.12%)</title><rect x="93.5575%" y="69" width="0.1158%" height="15" fill="rgb(208,190,38)"/><text x="93.8075%" y="79.50"></text></g><g><title>codegen_fn_attrs (5,364,096 samples, 0.20%)</title><rect x="93.5089%" y="101" width="0.2048%" height="15" fill="rgb(235,213,38)"/><text x="93.7589%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (7,469,291 samples, 0.29%)</title><rect x="94.3350%" y="85" width="0.2852%" height="15" fill="rgb(237,122,38)"/><text x="94.5850%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,387,203 samples, 0.47%)</title><rect x="94.6202%" y="85" width="0.4730%" height="15" fill="rgb(244,218,35)"/><text x="94.8702%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,656,270 samples, 0.10%)</title><rect x="95.1277%" y="69" width="0.1014%" height="15" fill="rgb(240,68,47)"/><text x="95.3777%" y="79.50"></text></g><g><title>optimized_mir (36,074,615 samples, 1.38%)</title><rect x="93.8527%" y="101" width="1.3775%" height="15" fill="rgb(210,16,53)"/><text x="94.1027%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,918,115 samples, 0.11%)</title><rect x="95.1187%" y="85" width="0.1114%" height="15" fill="rgb(235,124,12)"/><text x="95.3687%" y="95.50"></text></g><g><title>evaluate_obligation (2,626,677 samples, 0.10%)</title><rect x="95.7837%" y="69" width="0.1003%" height="15" fill="rgb(224,169,11)"/><text x="96.0337%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (14,172,973 samples, 0.54%)</title><rect x="95.4217%" y="85" width="0.5412%" height="15" fill="rgb(250,166,2)"/><text x="95.6717%" y="95.50"></text></g><g><title>specialization_graph_of (3,124,517 samples, 0.12%)</title><rect x="96.1005%" y="85" width="0.1193%" height="15" fill="rgb(242,216,29)"/><text x="96.3505%" y="95.50"></text></g><g><title>resolve_instance (26,969,505 samples, 1.03%)</title><rect x="95.2302%" y="101" width="1.0298%" height="15" fill="rgb(230,116,27)"/><text x="95.4802%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,064,649 samples, 0.12%)</title><rect x="96.3037%" y="101" width="0.1170%" height="15" fill="rgb(228,99,48)"/><text x="96.5537%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (91,863,342 samples, 3.51%)</title><rect x="93.1117%" y="117" width="3.5078%" height="15" fill="rgb(253,11,6)"/><text x="93.3617%" y="127.50">mon..</text></g><g><title>vtable_entries (2,778,591 samples, 0.11%)</title><rect x="96.5133%" y="101" width="0.1061%" height="15" fill="rgb(247,143,39)"/><text x="96.7633%" y="111.50"></text></g><g><title>monomorphization_collector (92,426,508 samples, 3.53%)</title><rect x="93.1114%" y="133" width="3.5293%" height="15" fill="rgb(236,97,10)"/><text x="93.3614%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (8,478,151 samples, 0.32%)</title><rect x="96.6409%" y="117" width="0.3237%" height="15" fill="rgb(233,208,19)"/><text x="96.8909%" y="127.50"></text></g><g><title>symbol_name (7,647,992 samples, 0.29%)</title><rect x="96.6726%" y="101" width="0.2920%" height="15" fill="rgb(216,164,2)"/><text x="96.9226%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (105,176,254 samples, 4.02%)</title><rect x="93.1087%" y="149" width="4.0161%" height="15" fill="rgb(220,129,5)"/><text x="93.3587%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (12,678,356 samples, 0.48%)</title><rect x="96.6407%" y="133" width="0.4841%" height="15" fill="rgb(242,17,10)"/><text x="96.8907%" y="143.50"></text></g><g><title>cgu_partitioning (4,194,505 samples, 0.16%)</title><rect x="96.9647%" y="117" width="0.1602%" height="15" fill="rgb(242,107,0)"/><text x="97.2147%" y="127.50"></text></g><g><title>exported_symbols (106,240,026 samples, 4.06%)</title><rect x="93.0958%" y="165" width="4.0567%" height="15" fill="rgb(251,28,31)"/><text x="93.3458%" y="175.50">expo..</text></g><g><title>layout_of (3,498,935 samples, 0.13%)</title><rect x="97.6505%" y="149" width="0.1336%" height="15" fill="rgb(233,223,10)"/><text x="97.9005%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,650,139 samples, 0.71%)</title><rect x="97.7841%" y="149" width="0.7121%" height="15" fill="rgb(215,21,27)"/><text x="98.0341%" y="159.50"></text></g><g><title>optimized_mir (35,431,386 samples, 1.35%)</title><rect x="97.1770%" y="165" width="1.3529%" height="15" fill="rgb(232,23,21)"/><text x="97.4270%" y="175.50"></text></g><g><title>generate_crate_metadata (153,314,869 samples, 5.85%)</title><rect x="92.7277%" y="181" width="5.8543%" height="15" fill="rgb(244,5,23)"/><text x="92.9777%" y="191.50">generat..</text></g><g><title>hir_lowering (17,015,322 samples, 0.65%)</title><rect x="98.5820%" y="181" width="0.6497%" height="15" fill="rgb(226,81,46)"/><text x="98.8320%" y="191.50"></text></g><g><title>link_crate (7,932,605 samples, 0.30%)</title><rect x="99.2330%" y="165" width="0.3029%" height="15" fill="rgb(247,70,30)"/><text x="99.4830%" y="175.50"></text></g><g><title>link_binary (7,709,673 samples, 0.29%)</title><rect x="99.2415%" y="149" width="0.2944%" height="15" fill="rgb(212,68,19)"/><text x="99.4915%" y="159.50"></text></g><g><title>link_rlib (6,498,739 samples, 0.25%)</title><rect x="99.2877%" y="133" width="0.2482%" height="15" fill="rgb(240,187,13)"/><text x="99.5377%" y="143.50"></text></g><g><title>link (7,974,206 samples, 0.30%)</title><rect x="99.2317%" y="181" width="0.3045%" height="15" fill="rgb(223,113,26)"/><text x="99.4817%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (10,570,263 samples, 0.40%)</title><rect x="99.5619%" y="181" width="0.4036%" height="15" fill="rgb(206,192,2)"/><text x="99.8119%" y="191.50"></text></g><g><title>all (2,618,850,421 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,618,850,421 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>