<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (20,323,986 samples, 11.36%)</title><rect x="0.3662%" y="341" width="11.3554%" height="15" fill="rgb(227,0,7)"/><text x="0.6162%" y="351.50">LLVM_passes</text></g><g><title>needs_drop_raw (253,813 samples, 0.14%)</title><rect x="15.1954%" y="229" width="0.1418%" height="15" fill="rgb(217,0,24)"/><text x="15.4454%" y="239.50"></text></g><g><title>specialization_graph_of (445,814 samples, 0.25%)</title><rect x="15.4957%" y="213" width="0.2491%" height="15" fill="rgb(221,193,54)"/><text x="15.7457%" y="223.50"></text></g><g><title>resolve_instance (764,958 samples, 0.43%)</title><rect x="15.3372%" y="229" width="0.4274%" height="15" fill="rgb(248,212,6)"/><text x="15.5872%" y="239.50"></text></g><g><title>thir_body (300,794 samples, 0.17%)</title><rect x="15.7698%" y="229" width="0.1681%" height="15" fill="rgb(208,68,35)"/><text x="16.0198%" y="239.50"></text></g><g><title>mir_const (2,786,039 samples, 1.56%)</title><rect x="14.3846%" y="277" width="1.5566%" height="15" fill="rgb(232,128,0)"/><text x="14.6346%" y="287.50"></text></g><g><title>unsafety_check_result (2,406,296 samples, 1.34%)</title><rect x="14.5967%" y="261" width="1.3444%" height="15" fill="rgb(207,160,47)"/><text x="14.8467%" y="271.50"></text></g><g><title>mir_built (2,200,614 samples, 1.23%)</title><rect x="14.7117%" y="245" width="1.2295%" height="15" fill="rgb(228,23,34)"/><text x="14.9617%" y="255.50"></text></g><g><title>mir_const_qualif (680,307 samples, 0.38%)</title><rect x="15.9412%" y="277" width="0.3801%" height="15" fill="rgb(218,30,26)"/><text x="16.1912%" y="287.50"></text></g><g><title>mir_const (535,545 samples, 0.30%)</title><rect x="16.0221%" y="261" width="0.2992%" height="15" fill="rgb(220,122,19)"/><text x="16.2721%" y="271.50"></text></g><g><title>unsafety_check_result (367,813 samples, 0.21%)</title><rect x="16.1158%" y="245" width="0.2055%" height="15" fill="rgb(250,228,42)"/><text x="16.3658%" y="255.50"></text></g><g><title>mir_built (297,803 samples, 0.17%)</title><rect x="16.1549%" y="229" width="0.1664%" height="15" fill="rgb(240,193,28)"/><text x="16.4049%" y="239.50"></text></g><g><title>mir_promoted (3,870,359 samples, 2.16%)</title><rect x="14.1598%" y="293" width="2.1624%" height="15" fill="rgb(216,20,37)"/><text x="14.4098%" y="303.50">m..</text></g><g><title>type_op_prove_predicate (404,391 samples, 0.23%)</title><rect x="16.4128%" y="293" width="0.2259%" height="15" fill="rgb(206,188,39)"/><text x="16.6628%" y="303.50"></text></g><g><title>MIR_borrow_checking (8,660,302 samples, 4.84%)</title><rect x="11.8014%" y="325" width="4.8387%" height="15" fill="rgb(217,207,13)"/><text x="12.0514%" y="335.50">MIR_bo..</text></g><g><title>mir_borrowck (8,575,141 samples, 4.79%)</title><rect x="11.8490%" y="309" width="4.7911%" height="15" fill="rgb(231,73,38)"/><text x="12.0990%" y="319.50">mir_bo..</text></g><g><title>MIR_effect_checking (346,003 samples, 0.19%)</title><rect x="16.6400%" y="325" width="0.1933%" height="15" fill="rgb(225,20,46)"/><text x="16.8900%" y="335.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (298,213 samples, 0.17%)</title><rect x="16.6667%" y="309" width="0.1666%" height="15" fill="rgb(210,31,41)"/><text x="16.9167%" y="319.50"></text></g><g><title>codegen_fn_attrs (269,933 samples, 0.15%)</title><rect x="16.9802%" y="293" width="0.1508%" height="15" fill="rgb(221,200,47)"/><text x="17.2302%" y="303.50"></text></g><g><title>check_mod_attrs (389,533 samples, 0.22%)</title><rect x="16.9135%" y="309" width="0.2176%" height="15" fill="rgb(226,26,5)"/><text x="17.1635%" y="319.50"></text></g><g><title>check_mod_unstable_api_usage (196,572 samples, 0.11%)</title><rect x="17.1829%" y="309" width="0.1098%" height="15" fill="rgb(249,33,26)"/><text x="17.4329%" y="319.50"></text></g><g><title>misc_checking_1 (735,018 samples, 0.41%)</title><rect x="16.9025%" y="325" width="0.4107%" height="15" fill="rgb(235,183,28)"/><text x="17.1525%" y="335.50"></text></g><g><title>misc_checking_2 (316,404 samples, 0.18%)</title><rect x="17.3132%" y="325" width="0.1768%" height="15" fill="rgb(221,5,38)"/><text x="17.5632%" y="335.50"></text></g><g><title>match_checking (181,142 samples, 0.10%)</title><rect x="17.3888%" y="309" width="0.1012%" height="15" fill="rgb(247,18,42)"/><text x="17.6388%" y="319.50"></text></g><g><title>death_checking (305,783 samples, 0.17%)</title><rect x="17.5501%" y="309" width="0.1708%" height="15" fill="rgb(241,131,45)"/><text x="17.8001%" y="319.50"></text></g><g><title>eval_to_const_value_raw (275,165 samples, 0.15%)</title><rect x="18.1250%" y="277" width="0.1537%" height="15" fill="rgb(249,31,29)"/><text x="18.3750%" y="287.50"></text></g><g><title>eval_to_const_value_raw (259,665 samples, 0.15%)</title><rect x="18.1337%" y="261" width="0.1451%" height="15" fill="rgb(225,111,53)"/><text x="18.3837%" y="271.50"></text></g><g><title>eval_to_allocation_raw (246,235 samples, 0.14%)</title><rect x="18.1412%" y="245" width="0.1376%" height="15" fill="rgb(238,160,17)"/><text x="18.3912%" y="255.50"></text></g><g><title>crate_lints (2,229,424 samples, 1.25%)</title><rect x="17.7217%" y="293" width="1.2456%" height="15" fill="rgb(214,148,48)"/><text x="17.9717%" y="303.50"></text></g><g><title>type_of (1,101,247 samples, 0.62%)</title><rect x="18.3520%" y="277" width="0.6153%" height="15" fill="rgb(232,36,49)"/><text x="18.6020%" y="287.50"></text></g><g><title>metadata_decode_entry_type_of (856,634 samples, 0.48%)</title><rect x="18.4887%" y="261" width="0.4786%" height="15" fill="rgb(209,103,24)"/><text x="18.7387%" y="271.50"></text></g><g><title>lint_checking (2,357,226 samples, 1.32%)</title><rect x="17.7209%" y="309" width="1.3170%" height="15" fill="rgb(229,88,8)"/><text x="17.9709%" y="319.50"></text></g><g><title>privacy_checking_modules (234,012 samples, 0.13%)</title><rect x="19.1046%" y="309" width="0.1307%" height="15" fill="rgb(213,181,19)"/><text x="19.3546%" y="319.50"></text></g><g><title>check_mod_privacy (231,942 samples, 0.13%)</title><rect x="19.1058%" y="293" width="0.1296%" height="15" fill="rgb(254,191,54)"/><text x="19.3558%" y="303.50"></text></g><g><title>misc_checking_3 (3,136,474 samples, 1.75%)</title><rect x="17.4900%" y="325" width="1.7524%" height="15" fill="rgb(241,83,37)"/><text x="17.7400%" y="335.50"></text></g><g><title>adt_destructor (477,896 samples, 0.27%)</title><rect x="19.3122%" y="277" width="0.2670%" height="15" fill="rgb(233,36,39)"/><text x="19.5622%" y="287.50"></text></g><g><title>coherent_trait (475,056 samples, 0.27%)</title><rect x="19.3138%" y="261" width="0.2654%" height="15" fill="rgb(226,3,54)"/><text x="19.5638%" y="271.50"></text></g><g><title>specialization_graph_of (472,965 samples, 0.26%)</title><rect x="19.3149%" y="245" width="0.2643%" height="15" fill="rgb(245,192,40)"/><text x="19.5649%" y="255.50"></text></g><g><title>impl_parent (2,899,353 samples, 1.62%)</title><rect x="22.5202%" y="261" width="1.6199%" height="15" fill="rgb(238,167,29)"/><text x="22.7702%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,690,488 samples, 0.94%)</title><rect x="23.1956%" y="245" width="0.9445%" height="15" fill="rgb(232,182,51)"/><text x="23.4456%" y="255.50"></text></g><g><title>impl_trait_ref (6,153,446 samples, 3.44%)</title><rect x="24.1401%" y="261" width="3.4380%" height="15" fill="rgb(231,60,39)"/><text x="24.3901%" y="271.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,917,467 samples, 2.75%)</title><rect x="24.8307%" y="245" width="2.7475%" height="15" fill="rgb(208,69,12)"/><text x="25.0807%" y="255.50">me..</text></g><g><title>trait_impls_of (1,086,861 samples, 0.61%)</title><rect x="27.6055%" y="261" width="0.6072%" height="15" fill="rgb(235,93,37)"/><text x="27.8555%" y="271.50"></text></g><g><title>implementations_of_trait (302,381 samples, 0.17%)</title><rect x="28.0438%" y="245" width="0.1689%" height="15" fill="rgb(213,116,39)"/><text x="28.2938%" y="255.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (233,831 samples, 0.13%)</title><rect x="28.0821%" y="229" width="0.1306%" height="15" fill="rgb(222,207,29)"/><text x="28.3321%" y="239.50"></text></g><g><title>coherent_trait (15,973,781 samples, 8.92%)</title><rect x="19.2888%" y="293" width="8.9248%" height="15" fill="rgb(206,96,30)"/><text x="19.5388%" y="303.50">coherent_trait</text></g><g><title>specialization_graph_of (15,330,243 samples, 8.57%)</title><rect x="19.6483%" y="277" width="8.5653%" height="15" fill="rgb(218,138,4)"/><text x="19.8983%" y="287.50">specializati..</text></g><g><title>coherence_checking (16,055,121 samples, 8.97%)</title><rect x="19.2772%" y="309" width="8.9703%" height="15" fill="rgb(250,191,14)"/><text x="19.5272%" y="319.50">coherence_che..</text></g><g><title>dropck_outlives (183,833 samples, 0.10%)</title><rect x="31.3424%" y="261" width="0.1027%" height="15" fill="rgb(239,60,40)"/><text x="31.5924%" y="271.50"></text></g><g><title>generics_of (190,753 samples, 0.11%)</title><rect x="32.0134%" y="245" width="0.1066%" height="15" fill="rgb(206,27,48)"/><text x="32.2634%" y="255.50"></text></g><g><title>impl_trait_ref (220,401 samples, 0.12%)</title><rect x="32.1341%" y="245" width="0.1231%" height="15" fill="rgb(225,35,8)"/><text x="32.3841%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (188,301 samples, 0.11%)</title><rect x="32.1520%" y="229" width="0.1052%" height="15" fill="rgb(250,213,24)"/><text x="32.4020%" y="239.50"></text></g><g><title>specializes (274,803 samples, 0.15%)</title><rect x="32.3419%" y="245" width="0.1535%" height="15" fill="rgb(247,123,22)"/><text x="32.5919%" y="255.50"></text></g><g><title>trait_impls_of (257,632 samples, 0.14%)</title><rect x="32.4980%" y="245" width="0.1439%" height="15" fill="rgb(231,138,38)"/><text x="32.7480%" y="255.50"></text></g><g><title>evaluate_obligation (2,149,105 samples, 1.20%)</title><rect x="31.4451%" y="261" width="1.2007%" height="15" fill="rgb(231,145,46)"/><text x="31.6951%" y="271.50"></text></g><g><title>object_safety_violations (181,072 samples, 0.10%)</title><rect x="32.8851%" y="261" width="0.1012%" height="15" fill="rgb(251,118,11)"/><text x="33.1351%" y="271.50"></text></g><g><title>item_bodies_checking (8,922,675 samples, 4.99%)</title><rect x="28.2638%" y="309" width="4.9853%" height="15" fill="rgb(217,147,25)"/><text x="28.5138%" y="319.50">item_b..</text></g><g><title>typeck_item_bodies (8,920,165 samples, 4.98%)</title><rect x="28.2652%" y="293" width="4.9839%" height="15" fill="rgb(247,81,37)"/><text x="28.5152%" y="303.50">typeck..</text></g><g><title>typeck (8,865,722 samples, 4.95%)</title><rect x="28.2956%" y="277" width="4.9534%" height="15" fill="rgb(209,12,38)"/><text x="28.5456%" y="287.50">typeck</text></g><g><title>item_types_checking (839,489 samples, 0.47%)</title><rect x="33.2490%" y="309" width="0.4690%" height="15" fill="rgb(227,1,9)"/><text x="33.4990%" y="319.50"></text></g><g><title>check_mod_item_types (837,109 samples, 0.47%)</title><rect x="33.2504%" y="293" width="0.4677%" height="15" fill="rgb(248,47,43)"/><text x="33.5004%" y="303.50"></text></g><g><title>typeck (266,735 samples, 0.15%)</title><rect x="33.5690%" y="277" width="0.1490%" height="15" fill="rgb(221,10,30)"/><text x="33.8190%" y="287.50"></text></g><g><title>named_region_map (186,602 samples, 0.10%)</title><rect x="33.9655%" y="261" width="0.1043%" height="15" fill="rgb(210,229,1)"/><text x="34.2155%" y="271.50"></text></g><g><title>generics_of (331,193 samples, 0.19%)</title><rect x="33.8912%" y="277" width="0.1850%" height="15" fill="rgb(222,148,37)"/><text x="34.1412%" y="287.50"></text></g><g><title>predicates_of (320,393 samples, 0.18%)</title><rect x="34.1202%" y="277" width="0.1790%" height="15" fill="rgb(234,67,33)"/><text x="34.3702%" y="287.50"></text></g><g><title>predicates_defined_on (291,362 samples, 0.16%)</title><rect x="34.1365%" y="261" width="0.1628%" height="15" fill="rgb(247,98,35)"/><text x="34.3865%" y="271.50"></text></g><g><title>type_collecting (1,114,992 samples, 0.62%)</title><rect x="33.7187%" y="309" width="0.6230%" height="15" fill="rgb(247,138,52)"/><text x="33.9687%" y="319.50"></text></g><g><title>collect_mod_item_types (1,103,432 samples, 0.62%)</title><rect x="33.7252%" y="293" width="0.6165%" height="15" fill="rgb(213,79,30)"/><text x="33.9752%" y="303.50"></text></g><g><title>evaluate_obligation (230,854 samples, 0.13%)</title><rect x="34.8242%" y="277" width="0.1290%" height="15" fill="rgb(246,177,23)"/><text x="35.0742%" y="287.50"></text></g><g><title>check_impl_item_well_formed (1,446,552 samples, 0.81%)</title><rect x="34.3993%" y="293" width="0.8082%" height="15" fill="rgb(230,62,27)"/><text x="34.6493%" y="303.50"></text></g><g><title>evaluate_obligation (238,162 samples, 0.13%)</title><rect x="35.5725%" y="277" width="0.1331%" height="15" fill="rgb(216,154,8)"/><text x="35.8225%" y="287.50"></text></g><g><title>analysis (43,272,341 samples, 24.18%)</title><rect x="11.7216%" y="341" width="24.1770%" height="15" fill="rgb(244,35,45)"/><text x="11.9716%" y="351.50">analysis</text></g><g><title>type_check_crate (29,811,558 samples, 16.66%)</title><rect x="19.2424%" y="325" width="16.6563%" height="15" fill="rgb(251,115,12)"/><text x="19.4924%" y="335.50">type_check_crate</text></g><g><title>wf_checking (2,782,320 samples, 1.55%)</title><rect x="34.3441%" y="309" width="1.5545%" height="15" fill="rgb(240,54,50)"/><text x="34.5941%" y="319.50"></text></g><g><title>check_item_well_formed (1,237,008 samples, 0.69%)</title><rect x="35.2075%" y="293" width="0.6911%" height="15" fill="rgb(233,84,52)"/><text x="35.4575%" y="303.50"></text></g><g><title>eval_to_const_value_raw (213,172 samples, 0.12%)</title><rect x="39.4166%" y="277" width="0.1191%" height="15" fill="rgb(207,117,47)"/><text x="39.6666%" y="287.50"></text></g><g><title>eval_to_const_value_raw (198,502 samples, 0.11%)</title><rect x="39.4248%" y="261" width="0.1109%" height="15" fill="rgb(249,43,39)"/><text x="39.6748%" y="271.50"></text></g><g><title>layout_of (597,287 samples, 0.33%)</title><rect x="39.3455%" y="293" width="0.3337%" height="15" fill="rgb(209,38,44)"/><text x="39.5955%" y="303.50"></text></g><g><title>param_env (191,352 samples, 0.11%)</title><rect x="39.6792%" y="293" width="0.1069%" height="15" fill="rgb(236,212,23)"/><text x="39.9292%" y="303.50"></text></g><g><title>fn_abi_of_instance (1,116,552 samples, 0.62%)</title><rect x="39.1701%" y="309" width="0.6238%" height="15" fill="rgb(242,79,21)"/><text x="39.4201%" y="319.50"></text></g><g><title>symbol_name (199,261 samples, 0.11%)</title><rect x="39.8442%" y="309" width="0.1113%" height="15" fill="rgb(211,96,35)"/><text x="40.0942%" y="319.50"></text></g><g><title>codegen_module (6,155,946 samples, 3.44%)</title><rect x="36.5187%" y="325" width="3.4394%" height="15" fill="rgb(253,215,40)"/><text x="36.7687%" y="335.50">cod..</text></g><g><title>codegen_crate (7,437,829 samples, 4.16%)</title><rect x="35.9042%" y="341" width="4.1557%" height="15" fill="rgb(211,81,21)"/><text x="36.1542%" y="351.50">codeg..</text></g><g><title>LLVM_module_codegen (38,753,882 samples, 21.65%)</title><rect x="40.1010%" y="325" width="21.6525%" height="15" fill="rgb(208,190,38)"/><text x="40.3510%" y="335.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (37,552,030 samples, 20.98%)</title><rect x="40.7725%" y="309" width="20.9810%" height="15" fill="rgb(235,213,38)"/><text x="41.0225%" y="319.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (40,335,389 samples, 22.54%)</title><rect x="40.0598%" y="341" width="22.5361%" height="15" fill="rgb(237,122,38)"/><text x="40.3098%" y="351.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,507,826 samples, 0.84%)</title><rect x="61.7535%" y="325" width="0.8424%" height="15" fill="rgb(244,218,35)"/><text x="62.0035%" y="335.50"></text></g><g><title>metadata_register_crate (11,504,543 samples, 6.43%)</title><rect x="73.6735%" y="293" width="6.4278%" height="15" fill="rgb(240,68,47)"/><text x="73.9235%" y="303.50">metadata..</text></g><g><title>metadata_register_crate (10,562,634 samples, 5.90%)</title><rect x="74.1997%" y="277" width="5.9015%" height="15" fill="rgb(210,16,53)"/><text x="74.4497%" y="287.50">metadata..</text></g><g><title>metadata_register_crate (8,434,339 samples, 4.71%)</title><rect x="75.3888%" y="261" width="4.7124%" height="15" fill="rgb(235,124,12)"/><text x="75.6388%" y="271.50">metad..</text></g><g><title>macro_expand_crate (31,003,670 samples, 17.32%)</title><rect x="62.8290%" y="325" width="17.3223%" height="15" fill="rgb(224,169,11)"/><text x="63.0790%" y="335.50">macro_expand_crate</text></g><g><title>expand_crate (30,988,480 samples, 17.31%)</title><rect x="62.8375%" y="309" width="17.3138%" height="15" fill="rgb(250,166,2)"/><text x="63.0875%" y="319.50">expand_crate</text></g><g><title>late_resolve_crate (602,096 samples, 0.34%)</title><rect x="80.2903%" y="309" width="0.3364%" height="15" fill="rgb(242,216,29)"/><text x="80.5403%" y="319.50"></text></g><g><title>configure_and_expand (32,328,074 samples, 18.06%)</title><rect x="62.5960%" y="341" width="18.0623%" height="15" fill="rgb(230,116,27)"/><text x="62.8460%" y="351.50">configure_and_expand</text></g><g><title>resolve_crate (846,389 samples, 0.47%)</title><rect x="80.1854%" y="325" width="0.4729%" height="15" fill="rgb(228,99,48)"/><text x="80.4354%" y="335.50"></text></g><g><title>free_global_ctxt (4,066,184 samples, 2.27%)</title><rect x="80.8090%" y="341" width="2.2719%" height="15" fill="rgb(253,11,6)"/><text x="81.0590%" y="351.50">f..</text></g><g><title>is_reachable_non_generic (282,613 samples, 0.16%)</title><rect x="83.7932%" y="261" width="0.1579%" height="15" fill="rgb(247,143,39)"/><text x="84.0432%" y="271.50"></text></g><g><title>reachable_non_generics (275,093 samples, 0.15%)</title><rect x="83.7974%" y="245" width="0.1537%" height="15" fill="rgb(236,97,10)"/><text x="84.0474%" y="255.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (273,073 samples, 0.15%)</title><rect x="83.7985%" y="229" width="0.1526%" height="15" fill="rgb(233,208,19)"/><text x="84.0485%" y="239.50"></text></g><g><title>exported_symbols (226,813 samples, 0.13%)</title><rect x="83.8243%" y="213" width="0.1267%" height="15" fill="rgb(216,164,2)"/><text x="84.0743%" y="223.50"></text></g><g><title>metadata_decode_entry_exported_symbols (225,663 samples, 0.13%)</title><rect x="83.8250%" y="197" width="0.1261%" height="15" fill="rgb(220,129,5)"/><text x="84.0750%" y="207.50"></text></g><g><title>layout_of (184,062 samples, 0.10%)</title><rect x="84.3492%" y="245" width="0.1028%" height="15" fill="rgb(242,17,10)"/><text x="84.5992%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (549,560 samples, 0.31%)</title><rect x="84.4667%" y="245" width="0.3070%" height="15" fill="rgb(242,107,0)"/><text x="84.7167%" y="255.50"></text></g><g><title>mir_for_ctfe (2,247,104 samples, 1.26%)</title><rect x="88.2601%" y="53" width="1.2555%" height="15" fill="rgb(251,28,31)"/><text x="88.5101%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (2,246,664 samples, 1.26%)</title><rect x="88.2604%" y="37" width="1.2553%" height="15" fill="rgb(233,223,10)"/><text x="88.5104%" y="47.50"></text></g><g><title>eval_to_const_value_raw (6,082,044 samples, 3.40%)</title><rect x="86.1184%" y="101" width="3.3981%" height="15" fill="rgb(215,21,27)"/><text x="86.3684%" y="111.50">eva..</text></g><g><title>eval_to_const_value_raw (6,080,774 samples, 3.40%)</title><rect x="86.1191%" y="85" width="3.3974%" height="15" fill="rgb(232,23,21)"/><text x="86.3691%" y="95.50">eva..</text></g><g><title>eval_to_allocation_raw (6,078,164 samples, 3.40%)</title><rect x="86.1206%" y="69" width="3.3960%" height="15" fill="rgb(244,5,23)"/><text x="86.3706%" y="79.50">eva..</text></g><g><title>eval_to_const_value_raw (6,883,113 samples, 3.85%)</title><rect x="85.6750%" y="165" width="3.8457%" height="15" fill="rgb(226,81,46)"/><text x="85.9250%" y="175.50">eval..</text></g><g><title>eval_to_const_value_raw (6,882,033 samples, 3.85%)</title><rect x="85.6756%" y="149" width="3.8451%" height="15" fill="rgb(247,70,30)"/><text x="85.9256%" y="159.50">eval..</text></g><g><title>eval_to_allocation_raw (6,880,893 samples, 3.84%)</title><rect x="85.6763%" y="133" width="3.8445%" height="15" fill="rgb(212,68,19)"/><text x="85.9263%" y="143.50">eval..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,100,964 samples, 3.41%)</title><rect x="86.1120%" y="117" width="3.4087%" height="15" fill="rgb(240,187,13)"/><text x="86.3620%" y="127.50">try..</text></g><g><title>eval_to_const_value_raw (8,485,700 samples, 4.74%)</title><rect x="84.7798%" y="229" width="4.7411%" height="15" fill="rgb(223,113,26)"/><text x="85.0298%" y="239.50">eval_t..</text></g><g><title>eval_to_const_value_raw (8,483,950 samples, 4.74%)</title><rect x="84.7808%" y="213" width="4.7401%" height="15" fill="rgb(206,192,2)"/><text x="85.0308%" y="223.50">eval_t..</text></g><g><title>eval_to_allocation_raw (8,481,000 samples, 4.74%)</title><rect x="84.7824%" y="197" width="4.7385%" height="15" fill="rgb(241,108,4)"/><text x="85.0324%" y="207.50">eval_t..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,894,433 samples, 3.85%)</title><rect x="85.6689%" y="181" width="3.8520%" height="15" fill="rgb(247,173,49)"/><text x="85.9189%" y="191.50">try_..</text></g><g><title>optimized_mir (9,901,169 samples, 5.53%)</title><rect x="83.9922%" y="261" width="5.5320%" height="15" fill="rgb(224,114,35)"/><text x="84.2422%" y="271.50">optimiz..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,502,490 samples, 4.75%)</title><rect x="84.7737%" y="245" width="4.7505%" height="15" fill="rgb(245,159,27)"/><text x="85.0237%" y="255.50">try_no..</text></g><g><title>codegen_fulfill_obligation (385,602 samples, 0.22%)</title><rect x="89.5734%" y="245" width="0.2154%" height="15" fill="rgb(245,172,44)"/><text x="89.8234%" y="255.50"></text></g><g><title>resolve_instance (605,384 samples, 0.34%)</title><rect x="89.5242%" y="261" width="0.3382%" height="15" fill="rgb(236,23,11)"/><text x="89.7742%" y="271.50"></text></g><g><title>upstream_drop_glue_for (318,573 samples, 0.18%)</title><rect x="89.8686%" y="261" width="0.1780%" height="15" fill="rgb(205,117,38)"/><text x="90.1186%" y="271.50"></text></g><g><title>upstream_monomorphizations_for (315,913 samples, 0.18%)</title><rect x="89.8701%" y="245" width="0.1765%" height="15" fill="rgb(237,72,25)"/><text x="90.1201%" y="255.50"></text></g><g><title>upstream_monomorphizations (313,263 samples, 0.18%)</title><rect x="89.8716%" y="229" width="0.1750%" height="15" fill="rgb(244,70,9)"/><text x="90.1216%" y="239.50"></text></g><g><title>exported_symbols (180,081 samples, 0.10%)</title><rect x="89.9460%" y="213" width="0.1006%" height="15" fill="rgb(217,125,39)"/><text x="90.1960%" y="223.50"></text></g><g><title>monomorphization_collector_graph_walk (11,560,783 samples, 6.46%)</title><rect x="83.6391%" y="277" width="6.4592%" height="15" fill="rgb(235,36,10)"/><text x="83.8891%" y="287.50">monomorp..</text></g><g><title>monomorphization_collector (11,609,403 samples, 6.49%)</title><rect x="83.6376%" y="293" width="6.4864%" height="15" fill="rgb(251,123,47)"/><text x="83.8876%" y="303.50">monomorp..</text></g><g><title>assert_symbols_are_distinct (208,153 samples, 0.12%)</title><rect x="90.1260%" y="277" width="0.1163%" height="15" fill="rgb(221,13,13)"/><text x="90.3760%" y="287.50"></text></g><g><title>symbol_name (192,322 samples, 0.11%)</title><rect x="90.1349%" y="261" width="0.1075%" height="15" fill="rgb(238,131,9)"/><text x="90.3849%" y="271.50"></text></g><g><title>collect_and_partition_mono_items (11,937,517 samples, 6.67%)</title><rect x="83.6275%" y="309" width="6.6697%" height="15" fill="rgb(211,50,8)"/><text x="83.8775%" y="319.50">collect_a..</text></g><g><title>partition_and_assert_distinct_symbols (310,044 samples, 0.17%)</title><rect x="90.1240%" y="293" width="0.1732%" height="15" fill="rgb(245,182,24)"/><text x="90.3740%" y="303.50"></text></g><g><title>exported_symbols (12,015,888 samples, 6.71%)</title><rect x="83.6106%" y="325" width="6.7135%" height="15" fill="rgb(242,14,37)"/><text x="83.8606%" y="335.50">exported_..</text></g><g><title>mir_drops_elaborated_and_const_checked (352,472 samples, 0.20%)</title><rect x="90.6729%" y="309" width="0.1969%" height="15" fill="rgb(246,228,12)"/><text x="90.9229%" y="319.50"></text></g><g><title>optimized_mir (903,811 samples, 0.50%)</title><rect x="90.3751%" y="325" width="0.5050%" height="15" fill="rgb(213,55,15)"/><text x="90.6251%" y="335.50"></text></g><g><title>generate_crate_metadata (13,992,909 samples, 7.82%)</title><rect x="83.0808%" y="341" width="7.8181%" height="15" fill="rgb(209,9,3)"/><text x="83.3308%" y="351.50">generate_cr..</text></g><g><title>hir_lowering (1,016,971 samples, 0.57%)</title><rect x="90.8989%" y="341" width="0.5682%" height="15" fill="rgb(230,59,30)"/><text x="91.1489%" y="351.50"></text></g><g><title>finish_ongoing_codegen (11,604,903 samples, 6.48%)</title><rect x="91.4752%" y="325" width="6.4839%" height="15" fill="rgb(209,121,21)"/><text x="91.7252%" y="335.50">finish_o..</text></g><g><title>link_crate (984,980 samples, 0.55%)</title><rect x="97.9591%" y="325" width="0.5503%" height="15" fill="rgb(220,109,13)"/><text x="98.2091%" y="335.50"></text></g><g><title>link_binary (970,600 samples, 0.54%)</title><rect x="97.9671%" y="309" width="0.5423%" height="15" fill="rgb(232,18,1)"/><text x="98.2171%" y="319.50"></text></g><g><title>link_rlib (637,117 samples, 0.36%)</title><rect x="98.1535%" y="293" width="0.3560%" height="15" fill="rgb(215,41,42)"/><text x="98.4035%" y="303.50"></text></g><g><title>link (12,614,154 samples, 7.05%)</title><rect x="91.4671%" y="341" width="7.0478%" height="15" fill="rgb(224,123,36)"/><text x="91.7171%" y="351.50">link</text></g><g><title>parse_crate (460,284 samples, 0.26%)</title><rect x="98.5149%" y="341" width="0.2572%" height="15" fill="rgb(240,125,3)"/><text x="98.7649%" y="351.50"></text></g><g><title>prepare_outputs (199,002 samples, 0.11%)</title><rect x="98.7777%" y="341" width="0.1112%" height="15" fill="rgb(205,98,50)"/><text x="99.0277%" y="351.50"></text></g><g><title>self_profile_alloc_query_strings (1,581,086 samples, 0.88%)</title><rect x="98.8889%" y="341" width="0.8834%" height="15" fill="rgb(205,185,37)"/><text x="99.1389%" y="351.50"></text></g><g><title>all (178,981,095 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="383.50"></text></g><g><title>rustc (178,981,095 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="367.50">rustc</text></g><g><title>write_crate_metadata (323,644 samples, 0.18%)</title><rect x="99.8192%" y="341" width="0.1808%" height="15" fill="rgb(235,201,11)"/><text x="100.0692%" y="351.50"></text></g></svg></svg>