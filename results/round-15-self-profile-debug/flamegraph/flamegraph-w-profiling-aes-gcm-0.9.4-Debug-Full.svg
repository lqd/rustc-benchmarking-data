<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,128,681 samples, 2.08%)</title><rect x="0.6638%" y="181" width="2.0751%" height="15" fill="rgb(227,0,7)"/><text x="0.9138%" y="191.50">L..</text></g><g><title>implied_outlives_bounds (203,243 samples, 0.13%)</title><rect x="4.9270%" y="133" width="0.1348%" height="15" fill="rgb(217,0,24)"/><text x="5.1770%" y="143.50"></text></g><g><title>param_env (178,613 samples, 0.12%)</title><rect x="5.4011%" y="101" width="0.1185%" height="15" fill="rgb(221,193,54)"/><text x="5.6511%" y="111.50"></text></g><g><title>is_copy_raw (581,335 samples, 0.39%)</title><rect x="6.1674%" y="53" width="0.3856%" height="15" fill="rgb(248,212,6)"/><text x="6.4174%" y="63.50"></text></g><g><title>evaluate_obligation (523,055 samples, 0.35%)</title><rect x="6.2061%" y="37" width="0.3469%" height="15" fill="rgb(208,68,35)"/><text x="6.4561%" y="47.50"></text></g><g><title>needs_drop_raw (2,299,182 samples, 1.52%)</title><rect x="6.0566%" y="69" width="1.5249%" height="15" fill="rgb(232,128,0)"/><text x="6.3066%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,550,726 samples, 1.03%)</title><rect x="6.5530%" y="53" width="1.0285%" height="15" fill="rgb(207,160,47)"/><text x="6.8030%" y="63.50"></text></g><g><title>normalize_projection_ty (1,530,115 samples, 1.01%)</title><rect x="6.5667%" y="37" width="1.0149%" height="15" fill="rgb(228,23,34)"/><text x="6.8167%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (6,166,041 samples, 4.09%)</title><rect x="7.6527%" y="53" width="4.0897%" height="15" fill="rgb(218,30,26)"/><text x="7.9027%" y="63.50">code..</text></g><g><title>evaluate_obligation (5,870,439 samples, 3.89%)</title><rect x="7.8487%" y="37" width="3.8936%" height="15" fill="rgb(220,122,19)"/><text x="8.0987%" y="47.50">eval..</text></g><g><title>specialization_graph_of (453,415 samples, 0.30%)</title><rect x="11.7818%" y="53" width="0.3007%" height="15" fill="rgb(250,228,42)"/><text x="12.0318%" y="63.50"></text></g><g><title>impl_trait_ref (178,783 samples, 0.12%)</title><rect x="11.9639%" y="37" width="0.1186%" height="15" fill="rgb(240,193,28)"/><text x="12.2139%" y="47.50"></text></g><g><title>resolve_instance (6,822,070 samples, 4.52%)</title><rect x="7.5815%" y="69" width="4.5248%" height="15" fill="rgb(216,20,37)"/><text x="7.8315%" y="79.50">resol..</text></g><g><title>thir_body (201,232 samples, 0.13%)</title><rect x="12.1088%" y="69" width="0.1335%" height="15" fill="rgb(206,188,39)"/><text x="12.3588%" y="79.50"></text></g><g><title>mir_const (10,521,196 samples, 6.98%)</title><rect x="5.2656%" y="117" width="6.9782%" height="15" fill="rgb(217,207,13)"/><text x="5.5156%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (10,138,302 samples, 6.72%)</title><rect x="5.5195%" y="101" width="6.7243%" height="15" fill="rgb(231,73,38)"/><text x="5.7695%" y="111.50">unsafety_..</text></g><g><title>mir_built (9,901,791 samples, 6.57%)</title><rect x="5.6764%" y="85" width="6.5674%" height="15" fill="rgb(225,20,46)"/><text x="5.9264%" y="95.50">mir_built</text></g><g><title>mir_promoted (10,940,571 samples, 7.26%)</title><rect x="5.1391%" y="133" width="7.2564%" height="15" fill="rgb(210,31,41)"/><text x="5.3891%" y="143.50">mir_promot..</text></g><g><title>mir_const_qualif (228,614 samples, 0.15%)</title><rect x="12.2438%" y="117" width="0.1516%" height="15" fill="rgb(221,200,47)"/><text x="12.4938%" y="127.50"></text></g><g><title>mir_const (190,434 samples, 0.13%)</title><rect x="12.2691%" y="101" width="0.1263%" height="15" fill="rgb(226,26,5)"/><text x="12.5191%" y="111.50"></text></g><g><title>type_op_normalize_fn_sig (323,252 samples, 0.21%)</title><rect x="12.4471%" y="133" width="0.2144%" height="15" fill="rgb(249,33,26)"/><text x="12.6971%" y="143.50"></text></g><g><title>normalize_projection_ty (196,792 samples, 0.13%)</title><rect x="12.5309%" y="117" width="0.1305%" height="15" fill="rgb(235,183,28)"/><text x="12.7809%" y="127.50"></text></g><g><title>type_op_prove_predicate (711,375 samples, 0.47%)</title><rect x="12.7204%" y="133" width="0.4718%" height="15" fill="rgb(221,5,38)"/><text x="12.9704%" y="143.50"></text></g><g><title>MIR_borrow_checking (15,498,425 samples, 10.28%)</title><rect x="2.9135%" y="165" width="10.2794%" height="15" fill="rgb(247,18,42)"/><text x="3.1635%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (15,478,485 samples, 10.27%)</title><rect x="2.9268%" y="149" width="10.2662%" height="15" fill="rgb(241,131,45)"/><text x="3.1768%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (191,662 samples, 0.13%)</title><rect x="13.2905%" y="165" width="0.1271%" height="15" fill="rgb(249,31,29)"/><text x="13.5405%" y="175.50"></text></g><g><title>codegen_fn_attrs (243,462 samples, 0.16%)</title><rect x="13.6457%" y="101" width="0.1615%" height="15" fill="rgb(225,111,53)"/><text x="13.8957%" y="111.50"></text></g><g><title>codegen_fn_attrs (381,104 samples, 0.25%)</title><rect x="13.5566%" y="133" width="0.2528%" height="15" fill="rgb(238,160,17)"/><text x="13.8066%" y="143.50"></text></g><g><title>should_inherit_track_caller (334,834 samples, 0.22%)</title><rect x="13.5873%" y="117" width="0.2221%" height="15" fill="rgb(214,148,48)"/><text x="13.8373%" y="127.50"></text></g><g><title>check_mod_attrs (560,625 samples, 0.37%)</title><rect x="13.4379%" y="149" width="0.3718%" height="15" fill="rgb(232,36,49)"/><text x="13.6879%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (272,973 samples, 0.18%)</title><rect x="13.8843%" y="149" width="0.1811%" height="15" fill="rgb(209,103,24)"/><text x="14.1343%" y="159.50"></text></g><g><title>misc_checking_1 (1,045,741 samples, 0.69%)</title><rect x="13.4178%" y="165" width="0.6936%" height="15" fill="rgb(229,88,8)"/><text x="13.6678%" y="175.50"></text></g><g><title>misc_checking_2 (274,113 samples, 0.18%)</title><rect x="14.1114%" y="165" width="0.1818%" height="15" fill="rgb(213,181,19)"/><text x="14.3614%" y="175.50"></text></g><g><title>death_checking (243,362 samples, 0.16%)</title><rect x="14.3605%" y="149" width="0.1614%" height="15" fill="rgb(254,191,54)"/><text x="14.6105%" y="159.50"></text></g><g><title>param_env (231,084 samples, 0.15%)</title><rect x="14.8766%" y="117" width="0.1533%" height="15" fill="rgb(241,83,37)"/><text x="15.1266%" y="127.50"></text></g><g><title>crate_lints (1,486,315 samples, 0.99%)</title><rect x="14.5229%" y="133" width="0.9858%" height="15" fill="rgb(233,36,39)"/><text x="14.7729%" y="143.50"></text></g><g><title>type_of (586,777 samples, 0.39%)</title><rect x="15.1195%" y="117" width="0.3892%" height="15" fill="rgb(226,3,54)"/><text x="15.3695%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (485,556 samples, 0.32%)</title><rect x="15.1867%" y="101" width="0.3220%" height="15" fill="rgb(245,192,40)"/><text x="15.4367%" y="111.50"></text></g><g><title>lint_checking (1,613,386 samples, 1.07%)</title><rect x="14.5219%" y="149" width="1.0701%" height="15" fill="rgb(238,167,29)"/><text x="14.7719%" y="159.50"></text></g><g><title>privacy_checking_modules (380,834 samples, 0.25%)</title><rect x="15.6632%" y="149" width="0.2526%" height="15" fill="rgb(232,182,51)"/><text x="15.9132%" y="159.50"></text></g><g><title>check_mod_privacy (379,143 samples, 0.25%)</title><rect x="15.6644%" y="133" width="0.2515%" height="15" fill="rgb(231,60,39)"/><text x="15.9144%" y="143.50"></text></g><g><title>misc_checking_3 (2,455,564 samples, 1.63%)</title><rect x="14.2932%" y="165" width="1.6287%" height="15" fill="rgb(208,69,12)"/><text x="14.5432%" y="175.50"></text></g><g><title>impl_parent (501,280 samples, 0.33%)</title><rect x="16.7274%" y="101" width="0.3325%" height="15" fill="rgb(235,93,37)"/><text x="16.9774%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (300,038 samples, 0.20%)</title><rect x="16.8609%" y="85" width="0.1990%" height="15" fill="rgb(213,116,39)"/><text x="17.1109%" y="95.50"></text></g><g><title>impl_trait_ref (1,730,166 samples, 1.15%)</title><rect x="17.0620%" y="101" width="1.1475%" height="15" fill="rgb(222,207,29)"/><text x="17.3120%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,521,764 samples, 1.01%)</title><rect x="17.2002%" y="85" width="1.0093%" height="15" fill="rgb(206,96,30)"/><text x="17.4502%" y="95.50"></text></g><g><title>trait_impls_of (275,943 samples, 0.18%)</title><rect x="18.2362%" y="101" width="0.1830%" height="15" fill="rgb(218,138,4)"/><text x="18.4862%" y="111.50"></text></g><g><title>coherent_trait (9,590,765 samples, 6.36%)</title><rect x="15.9654%" y="133" width="6.3611%" height="15" fill="rgb(250,191,14)"/><text x="16.2154%" y="143.50">coherent..</text></g><g><title>specialization_graph_of (9,577,185 samples, 6.35%)</title><rect x="15.9744%" y="117" width="6.3521%" height="15" fill="rgb(239,60,40)"/><text x="16.2244%" y="127.50">speciali..</text></g><g><title>visible_parent_map (5,890,029 samples, 3.91%)</title><rect x="18.4199%" y="101" width="3.9066%" height="15" fill="rgb(206,27,48)"/><text x="18.6699%" y="111.50">visi..</text></g><g><title>module_children (5,338,053 samples, 3.54%)</title><rect x="18.7860%" y="85" width="3.5405%" height="15" fill="rgb(225,35,8)"/><text x="19.0360%" y="95.50">modu..</text></g><g><title>metadata_decode_entry_module_children (5,232,751 samples, 3.47%)</title><rect x="18.8559%" y="69" width="3.4706%" height="15" fill="rgb(250,213,24)"/><text x="19.1059%" y="79.50">met..</text></g><g><title>coherence_checking (9,664,697 samples, 6.41%)</title><rect x="15.9530%" y="149" width="6.4101%" height="15" fill="rgb(247,123,22)"/><text x="16.2030%" y="159.50">coherenc..</text></g><g><title>associated_item (382,067 samples, 0.25%)</title><rect x="28.6622%" y="85" width="0.2534%" height="15" fill="rgb(231,138,38)"/><text x="28.9122%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (331,255 samples, 0.22%)</title><rect x="28.6959%" y="69" width="0.2197%" height="15" fill="rgb(231,145,46)"/><text x="28.9459%" y="79.50"></text></g><g><title>associated_items (494,417 samples, 0.33%)</title><rect x="28.6014%" y="101" width="0.3279%" height="15" fill="rgb(251,118,11)"/><text x="28.8514%" y="111.50"></text></g><g><title>evaluate_obligation (26,746,847 samples, 17.74%)</title><rect x="33.0397%" y="69" width="17.7400%" height="15" fill="rgb(217,147,25)"/><text x="33.2897%" y="79.50">evaluate_obligation</text></g><g><title>dropck_outlives (32,927,460 samples, 21.84%)</title><rect x="28.9578%" y="101" width="21.8393%" height="15" fill="rgb(247,81,37)"/><text x="29.2078%" y="111.50">dropck_outlives</text></g><g><title>normalize_projection_ty (32,632,477 samples, 21.64%)</title><rect x="29.1534%" y="85" width="21.6436%" height="15" fill="rgb(209,12,38)"/><text x="29.4034%" y="95.50">normalize_projection_ty</text></g><g><title>eval_to_const_value_raw (271,642 samples, 0.18%)</title><rect x="50.7995%" y="101" width="0.1802%" height="15" fill="rgb(227,1,9)"/><text x="51.0495%" y="111.50"></text></g><g><title>eval_to_const_value_raw (255,682 samples, 0.17%)</title><rect x="50.8101%" y="85" width="0.1696%" height="15" fill="rgb(248,47,43)"/><text x="51.0601%" y="95.50"></text></g><g><title>eval_to_allocation_raw (250,142 samples, 0.17%)</title><rect x="50.8138%" y="69" width="0.1659%" height="15" fill="rgb(221,10,30)"/><text x="51.0638%" y="79.50"></text></g><g><title>evaluate_obligation (2,455,532 samples, 1.63%)</title><rect x="50.9797%" y="101" width="1.6286%" height="15" fill="rgb(210,229,1)"/><text x="51.2297%" y="111.50"></text></g><g><title>trait_impls_of (217,443 samples, 0.14%)</title><rect x="52.4641%" y="85" width="0.1442%" height="15" fill="rgb(222,148,37)"/><text x="52.7141%" y="95.50"></text></g><g><title>impl_item_implementor_ids (304,584 samples, 0.20%)</title><rect x="52.7354%" y="101" width="0.2020%" height="15" fill="rgb(234,67,33)"/><text x="52.9854%" y="111.50"></text></g><g><title>associated_items (294,674 samples, 0.20%)</title><rect x="52.7420%" y="85" width="0.1954%" height="15" fill="rgb(247,98,35)"/><text x="52.9920%" y="95.50"></text></g><g><title>evaluate_obligation (282,362 samples, 0.19%)</title><rect x="53.1068%" y="85" width="0.1873%" height="15" fill="rgb(247,138,52)"/><text x="53.3568%" y="95.50"></text></g><g><title>method_autoderef_steps (430,693 samples, 0.29%)</title><rect x="53.0160%" y="101" width="0.2857%" height="15" fill="rgb(213,79,30)"/><text x="53.2660%" y="111.50"></text></g><g><title>predicates_of (233,671 samples, 0.15%)</title><rect x="53.3134%" y="101" width="0.1550%" height="15" fill="rgb(246,177,23)"/><text x="53.5634%" y="111.50"></text></g><g><title>item_bodies_checking (47,074,031 samples, 31.22%)</title><rect x="22.3842%" y="149" width="31.2220%" height="15" fill="rgb(230,62,27)"/><text x="22.6342%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,069,831 samples, 31.22%)</title><rect x="22.3870%" y="133" width="31.2193%" height="15" fill="rgb(216,154,8)"/><text x="22.6370%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (47,054,241 samples, 31.21%)</title><rect x="22.3973%" y="117" width="31.2089%" height="15" fill="rgb(244,35,45)"/><text x="22.6473%" y="127.50">typeck</text></g><g><title>adt_destructor (192,362 samples, 0.13%)</title><rect x="54.1159%" y="117" width="0.1276%" height="15" fill="rgb(251,115,12)"/><text x="54.3659%" y="127.50"></text></g><g><title>coherent_trait (189,222 samples, 0.13%)</title><rect x="54.1180%" y="101" width="0.1255%" height="15" fill="rgb(240,54,50)"/><text x="54.3680%" y="111.50"></text></g><g><title>specialization_graph_of (186,722 samples, 0.12%)</title><rect x="54.1196%" y="85" width="0.1238%" height="15" fill="rgb(233,84,52)"/><text x="54.3696%" y="95.50"></text></g><g><title>evaluate_obligation (252,572 samples, 0.17%)</title><rect x="54.2478%" y="117" width="0.1675%" height="15" fill="rgb(207,117,47)"/><text x="54.4978%" y="127.50"></text></g><g><title>generics_of (709,750 samples, 0.47%)</title><rect x="57.0755%" y="85" width="0.4707%" height="15" fill="rgb(249,43,39)"/><text x="57.3255%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (515,526 samples, 0.34%)</title><rect x="57.2043%" y="69" width="0.3419%" height="15" fill="rgb(209,38,44)"/><text x="57.4543%" y="79.50"></text></g><g><title>impl_trait_ref (975,456 samples, 0.65%)</title><rect x="57.6369%" y="85" width="0.6470%" height="15" fill="rgb(236,212,23)"/><text x="57.8869%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (793,396 samples, 0.53%)</title><rect x="57.7576%" y="69" width="0.5262%" height="15" fill="rgb(242,79,21)"/><text x="58.0076%" y="79.50"></text></g><g><title>predicates_of (682,777 samples, 0.45%)</title><rect x="58.3112%" y="85" width="0.4529%" height="15" fill="rgb(211,96,35)"/><text x="58.5612%" y="95.50"></text></g><g><title>predicates_defined_on (378,012 samples, 0.25%)</title><rect x="58.5134%" y="69" width="0.2507%" height="15" fill="rgb(253,215,40)"/><text x="58.7634%" y="79.50"></text></g><g><title>specializes (1,979,941 samples, 1.31%)</title><rect x="58.7641%" y="85" width="1.3132%" height="15" fill="rgb(211,81,21)"/><text x="59.0141%" y="95.50"></text></g><g><title>param_env (1,149,911 samples, 0.76%)</title><rect x="59.3146%" y="69" width="0.7627%" height="15" fill="rgb(208,190,38)"/><text x="59.5646%" y="79.50"></text></g><g><title>def_span (520,714 samples, 0.35%)</title><rect x="59.7319%" y="53" width="0.3454%" height="15" fill="rgb(235,213,38)"/><text x="59.9819%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (459,613 samples, 0.30%)</title><rect x="59.7724%" y="37" width="0.3048%" height="15" fill="rgb(237,122,38)"/><text x="60.0224%" y="47.50"></text></g><g><title>evaluate_obligation (7,193,871 samples, 4.77%)</title><rect x="55.3194%" y="101" width="4.7714%" height="15" fill="rgb(244,218,35)"/><text x="55.5694%" y="111.50">evalua..</text></g><g><title>specializes (180,531 samples, 0.12%)</title><rect x="60.1384%" y="101" width="0.1197%" height="15" fill="rgb(240,68,47)"/><text x="60.3884%" y="111.50"></text></g><g><title>item_types_checking (10,049,670 samples, 6.67%)</title><rect x="53.6062%" y="149" width="6.6655%" height="15" fill="rgb(210,16,53)"/><text x="53.8562%" y="159.50">item_type..</text></g><g><title>check_mod_item_types (10,045,460 samples, 6.66%)</title><rect x="53.6090%" y="133" width="6.6627%" height="15" fill="rgb(235,124,12)"/><text x="53.8590%" y="143.50">check_mod..</text></g><g><title>typeck (8,724,546 samples, 5.79%)</title><rect x="54.4851%" y="117" width="5.7866%" height="15" fill="rgb(224,169,11)"/><text x="54.7351%" y="127.50">typeck</text></g><g><title>fn_sig (212,662 samples, 0.14%)</title><rect x="60.3778%" y="117" width="0.1410%" height="15" fill="rgb(250,166,2)"/><text x="60.6278%" y="127.50"></text></g><g><title>late_bound_vars_map (299,642 samples, 0.20%)</title><rect x="60.8988%" y="69" width="0.1987%" height="15" fill="rgb(242,216,29)"/><text x="61.1488%" y="79.50"></text></g><g><title>resolve_lifetimes (278,952 samples, 0.19%)</title><rect x="60.9126%" y="53" width="0.1850%" height="15" fill="rgb(230,116,27)"/><text x="61.1626%" y="63.50"></text></g><g><title>explicit_predicates_of (959,380 samples, 0.64%)</title><rect x="60.6491%" y="85" width="0.6363%" height="15" fill="rgb(228,99,48)"/><text x="60.8991%" y="95.50"></text></g><g><title>type_param_predicates (261,475 samples, 0.17%)</title><rect x="61.1119%" y="69" width="0.1734%" height="15" fill="rgb(253,11,6)"/><text x="61.3619%" y="79.50"></text></g><g><title>predicates_of (1,113,292 samples, 0.74%)</title><rect x="60.6028%" y="117" width="0.7384%" height="15" fill="rgb(247,143,39)"/><text x="60.8528%" y="127.50"></text></g><g><title>predicates_defined_on (1,089,182 samples, 0.72%)</title><rect x="60.6188%" y="101" width="0.7224%" height="15" fill="rgb(236,97,10)"/><text x="60.8688%" y="111.50"></text></g><g><title>type_collecting (1,851,508 samples, 1.23%)</title><rect x="60.2736%" y="149" width="1.2280%" height="15" fill="rgb(233,208,19)"/><text x="60.5236%" y="159.50"></text></g><g><title>collect_mod_item_types (1,842,248 samples, 1.22%)</title><rect x="60.2797%" y="133" width="1.2219%" height="15" fill="rgb(216,164,2)"/><text x="60.5297%" y="143.50"></text></g><g><title>type_of (241,834 samples, 0.16%)</title><rect x="61.3412%" y="117" width="0.1604%" height="15" fill="rgb(220,129,5)"/><text x="61.5912%" y="127.50"></text></g><g><title>impl_item_implementor_ids (179,433 samples, 0.12%)</title><rect x="66.7563%" y="101" width="0.1190%" height="15" fill="rgb(242,17,10)"/><text x="67.0063%" y="111.50"></text></g><g><title>explicit_predicates_of (159,602 samples, 0.11%)</title><rect x="67.0609%" y="69" width="0.1059%" height="15" fill="rgb(242,107,0)"/><text x="67.3109%" y="79.50"></text></g><g><title>predicates_of (332,504 samples, 0.22%)</title><rect x="66.9645%" y="101" width="0.2205%" height="15" fill="rgb(251,28,31)"/><text x="67.2145%" y="111.50"></text></g><g><title>predicates_defined_on (242,393 samples, 0.16%)</title><rect x="67.0243%" y="85" width="0.1608%" height="15" fill="rgb(233,223,10)"/><text x="67.2743%" y="95.50"></text></g><g><title>trait_impls_of (460,462 samples, 0.31%)</title><rect x="67.1971%" y="101" width="0.3054%" height="15" fill="rgb(215,21,27)"/><text x="67.4471%" y="111.50"></text></g><g><title>implementations_of_trait (207,971 samples, 0.14%)</title><rect x="67.3646%" y="85" width="0.1379%" height="15" fill="rgb(232,23,21)"/><text x="67.6146%" y="95.50"></text></g><g><title>evaluate_obligation (7,993,451 samples, 5.30%)</title><rect x="62.2294%" y="117" width="5.3017%" height="15" fill="rgb(244,5,23)"/><text x="62.4794%" y="127.50">evalua..</text></g><g><title>implied_outlives_bounds (169,372 samples, 0.11%)</title><rect x="67.5434%" y="117" width="0.1123%" height="15" fill="rgb(226,81,46)"/><text x="67.7934%" y="127.50"></text></g><g><title>param_env (273,373 samples, 0.18%)</title><rect x="67.6625%" y="117" width="0.1813%" height="15" fill="rgb(247,70,30)"/><text x="67.9125%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,623,706 samples, 6.38%)</title><rect x="61.5495%" y="133" width="6.3830%" height="15" fill="rgb(212,68,19)"/><text x="61.7995%" y="143.50">check_im..</text></g><g><title>evaluate_obligation (715,839 samples, 0.47%)</title><rect x="68.6335%" y="117" width="0.4748%" height="15" fill="rgb(240,187,13)"/><text x="68.8835%" y="127.50"></text></g><g><title>param_env (273,184 samples, 0.18%)</title><rect x="69.1826%" y="117" width="0.1812%" height="15" fill="rgb(223,113,26)"/><text x="69.4326%" y="127.50"></text></g><g><title>analysis (100,597,916 samples, 66.72%)</title><rect x="2.7389%" y="181" width="66.7220%" height="15" fill="rgb(206,192,2)"/><text x="2.9889%" y="191.50">analysis</text></g><g><title>type_check_crate (80,721,677 samples, 53.54%)</title><rect x="15.9219%" y="165" width="53.5390%" height="15" fill="rgb(241,108,4)"/><text x="16.1719%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,999,020 samples, 7.96%)</title><rect x="61.5025%" y="149" width="7.9584%" height="15" fill="rgb(247,173,49)"/><text x="61.7525%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (2,304,424 samples, 1.53%)</title><rect x="67.9324%" y="133" width="1.5284%" height="15" fill="rgb(224,114,35)"/><text x="68.1824%" y="143.50"></text></g><g><title>codegen_module (308,563 samples, 0.20%)</title><rect x="69.9343%" y="165" width="0.2047%" height="15" fill="rgb(245,159,27)"/><text x="70.1843%" y="175.50"></text></g><g><title>codegen_crate (1,064,290 samples, 0.71%)</title><rect x="69.4685%" y="181" width="0.7059%" height="15" fill="rgb(245,172,44)"/><text x="69.7185%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,682,247 samples, 1.78%)</title><rect x="70.1856%" y="165" width="1.7790%" height="15" fill="rgb(236,23,11)"/><text x="70.4356%" y="175.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,620,316 samples, 1.74%)</title><rect x="70.2267%" y="149" width="1.7379%" height="15" fill="rgb(205,117,38)"/><text x="70.4767%" y="159.50"></text></g><g><title>codegen_module_optimize (2,943,149 samples, 1.95%)</title><rect x="70.1744%" y="181" width="1.9521%" height="15" fill="rgb(237,72,25)"/><text x="70.4244%" y="191.50">c..</text></g><g><title>LLVM_module_optimize (243,992 samples, 0.16%)</title><rect x="71.9646%" y="165" width="0.1618%" height="15" fill="rgb(244,70,9)"/><text x="72.2146%" y="175.50"></text></g><g><title>AST_validation (151,591 samples, 0.10%)</title><rect x="72.2828%" y="165" width="0.1005%" height="15" fill="rgb(217,125,39)"/><text x="72.5328%" y="175.50"></text></g><g><title>macro_expand_crate (19,132,092 samples, 12.69%)</title><rect x="72.4756%" y="165" width="12.6894%" height="15" fill="rgb(235,36,10)"/><text x="72.7256%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (19,114,251 samples, 12.68%)</title><rect x="72.4875%" y="149" width="12.6776%" height="15" fill="rgb(251,123,47)"/><text x="72.7375%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (1,618,036 samples, 1.07%)</title><rect x="84.0919%" y="133" width="1.0732%" height="15" fill="rgb(221,13,13)"/><text x="84.3419%" y="143.50"></text></g><g><title>metadata_register_crate (469,567 samples, 0.31%)</title><rect x="84.8536%" y="117" width="0.3114%" height="15" fill="rgb(238,131,9)"/><text x="85.1036%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (188,662 samples, 0.13%)</title><rect x="85.1689%" y="165" width="0.1251%" height="15" fill="rgb(211,50,8)"/><text x="85.4189%" y="175.50"></text></g><g><title>finalize_imports (172,142 samples, 0.11%)</title><rect x="85.2997%" y="149" width="0.1142%" height="15" fill="rgb(245,182,24)"/><text x="85.5497%" y="159.50"></text></g><g><title>late_resolve_crate (1,504,955 samples, 1.00%)</title><rect x="85.4445%" y="149" width="0.9982%" height="15" fill="rgb(242,14,37)"/><text x="85.6945%" y="159.50"></text></g><g><title>configure_and_expand (21,692,827 samples, 14.39%)</title><rect x="72.1264%" y="181" width="14.3879%" height="15" fill="rgb(246,228,12)"/><text x="72.3764%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,839,759 samples, 1.22%)</title><rect x="85.2941%" y="165" width="1.2202%" height="15" fill="rgb(213,55,15)"/><text x="85.5441%" y="175.50"></text></g><g><title>early_lint_checks (305,293 samples, 0.20%)</title><rect x="86.6203%" y="181" width="0.2025%" height="15" fill="rgb(209,9,3)"/><text x="86.8703%" y="191.50"></text></g><g><title>free_global_ctxt (2,413,855 samples, 1.60%)</title><rect x="86.8228%" y="181" width="1.6010%" height="15" fill="rgb(230,59,30)"/><text x="87.0728%" y="191.50"></text></g><g><title>is_sized_raw (221,834 samples, 0.15%)</title><rect x="89.4513%" y="133" width="0.1471%" height="15" fill="rgb(209,121,21)"/><text x="89.7013%" y="143.50"></text></g><g><title>evaluate_obligation (195,643 samples, 0.13%)</title><rect x="89.4687%" y="117" width="0.1298%" height="15" fill="rgb(220,109,13)"/><text x="89.7187%" y="127.50"></text></g><g><title>layout_of (225,151 samples, 0.15%)</title><rect x="89.6407%" y="85" width="0.1493%" height="15" fill="rgb(232,18,1)"/><text x="89.8907%" y="95.50"></text></g><g><title>layout_of (329,092 samples, 0.22%)</title><rect x="89.6056%" y="117" width="0.2183%" height="15" fill="rgb(215,41,42)"/><text x="89.8556%" y="127.50"></text></g><g><title>layout_of (316,292 samples, 0.21%)</title><rect x="89.6141%" y="101" width="0.2098%" height="15" fill="rgb(224,123,36)"/><text x="89.8641%" y="111.50"></text></g><g><title>layout_of (7,879,878 samples, 5.23%)</title><rect x="89.5984%" y="133" width="5.2264%" height="15" fill="rgb(240,125,3)"/><text x="89.8484%" y="143.50">layout..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (7,539,986 samples, 5.00%)</title><rect x="89.8239%" y="117" width="5.0009%" height="15" fill="rgb(205,98,50)"/><text x="90.0739%" y="127.50">try_no..</text></g><g><title>normalize_projection_ty (7,516,906 samples, 4.99%)</title><rect x="89.8392%" y="101" width="4.9856%" height="15" fill="rgb(205,185,37)"/><text x="90.0892%" y="111.50">normal..</text></g><g><title>evaluate_obligation (2,448,994 samples, 1.62%)</title><rect x="93.2005%" y="85" width="1.6243%" height="15" fill="rgb(238,207,15)"/><text x="93.4505%" y="95.50"></text></g><g><title>layout_of (8,286,905 samples, 5.50%)</title><rect x="89.3770%" y="149" width="5.4963%" height="15" fill="rgb(213,199,42)"/><text x="89.6270%" y="159.50">layout_..</text></g><g><title>mir_drops_elaborated_and_const_checked (662,647 samples, 0.44%)</title><rect x="94.8733%" y="149" width="0.4395%" height="15" fill="rgb(235,201,11)"/><text x="95.1233%" y="159.50"></text></g><g><title>optimized_mir (9,594,987 samples, 6.36%)</title><rect x="88.9590%" y="165" width="6.3639%" height="15" fill="rgb(207,46,11)"/><text x="89.2090%" y="175.50">optimize..</text></g><g><title>generate_crate_metadata (10,419,485 samples, 6.91%)</title><rect x="88.4238%" y="181" width="6.9108%" height="15" fill="rgb(241,35,35)"/><text x="88.6738%" y="191.50">generate_..</text></g><g><title>hir_lowering (1,925,249 samples, 1.28%)</title><rect x="95.3346%" y="181" width="1.2769%" height="15" fill="rgb(243,32,47)"/><text x="95.5846%" y="191.50"></text></g><g><title>finish_ongoing_codegen (291,903 samples, 0.19%)</title><rect x="96.6212%" y="165" width="0.1936%" height="15" fill="rgb(247,202,23)"/><text x="96.8712%" y="175.50"></text></g><g><title>link_crate (680,277 samples, 0.45%)</title><rect x="96.8148%" y="165" width="0.4512%" height="15" fill="rgb(219,102,11)"/><text x="97.0648%" y="175.50"></text></g><g><title>link_binary (662,957 samples, 0.44%)</title><rect x="96.8263%" y="149" width="0.4397%" height="15" fill="rgb(243,110,44)"/><text x="97.0763%" y="159.50"></text></g><g><title>link_rlib (422,264 samples, 0.28%)</title><rect x="96.9859%" y="133" width="0.2801%" height="15" fill="rgb(222,74,54)"/><text x="97.2359%" y="143.50"></text></g><g><title>link (993,980 samples, 0.66%)</title><rect x="96.6115%" y="181" width="0.6593%" height="15" fill="rgb(216,99,12)"/><text x="96.8615%" y="191.50"></text></g><g><title>parse_crate (2,540,645 samples, 1.69%)</title><rect x="97.2707%" y="181" width="1.6851%" height="15" fill="rgb(226,22,26)"/><text x="97.5207%" y="191.50"></text></g><g><title>prepare_outputs (348,114 samples, 0.23%)</title><rect x="98.9624%" y="181" width="0.2309%" height="15" fill="rgb(217,163,10)"/><text x="99.2124%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (773,037 samples, 0.51%)</title><rect x="99.1933%" y="181" width="0.5127%" height="15" fill="rgb(213,25,53)"/><text x="99.4433%" y="191.50"></text></g><g><title>all (150,771,808 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (150,771,808 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (299,393 samples, 0.20%)</title><rect x="99.8014%" y="181" width="0.1986%" height="15" fill="rgb(229,68,48)"/><text x="100.0514%" y="191.50"></text></g></svg></svg>