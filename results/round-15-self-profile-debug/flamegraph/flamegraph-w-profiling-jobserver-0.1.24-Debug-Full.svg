<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (169,700,098 samples, 14.75%)</title><rect x="0.0491%" y="165" width="14.7466%" height="15" fill="rgb(227,0,7)"/><text x="0.2991%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,790,550 samples, 0.16%)</title><rect x="16.4918%" y="53" width="0.1556%" height="15" fill="rgb(217,0,24)"/><text x="16.7418%" y="63.50"></text></g><g><title>resolve_instance (1,901,011 samples, 0.17%)</title><rect x="16.6474%" y="53" width="0.1652%" height="15" fill="rgb(221,193,54)"/><text x="16.8974%" y="63.50"></text></g><g><title>thir_body (1,208,265 samples, 0.10%)</title><rect x="16.8152%" y="53" width="0.1050%" height="15" fill="rgb(248,212,6)"/><text x="17.0652%" y="63.50"></text></g><g><title>mir_const (10,436,362 samples, 0.91%)</title><rect x="16.0151%" y="101" width="0.9069%" height="15" fill="rgb(208,68,35)"/><text x="16.2651%" y="111.50"></text></g><g><title>unsafety_check_result (9,155,571 samples, 0.80%)</title><rect x="16.1264%" y="85" width="0.7956%" height="15" fill="rgb(232,128,0)"/><text x="16.3764%" y="95.50"></text></g><g><title>mir_built (7,999,270 samples, 0.70%)</title><rect x="16.2268%" y="69" width="0.6951%" height="15" fill="rgb(207,160,47)"/><text x="16.4768%" y="79.50"></text></g><g><title>mir_promoted (11,943,882 samples, 1.04%)</title><rect x="15.9366%" y="117" width="1.0379%" height="15" fill="rgb(228,23,34)"/><text x="16.1866%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,689,603 samples, 0.23%)</title><rect x="17.0664%" y="117" width="0.2337%" height="15" fill="rgb(218,30,26)"/><text x="17.3164%" y="127.50"></text></g><g><title>MIR_borrow_checking (28,569,739 samples, 2.48%)</title><rect x="14.8182%" y="149" width="2.4827%" height="15" fill="rgb(220,122,19)"/><text x="15.0682%" y="159.50">MI..</text></g><g><title>mir_borrowck (28,468,368 samples, 2.47%)</title><rect x="14.8270%" y="133" width="2.4738%" height="15" fill="rgb(250,228,42)"/><text x="15.0770%" y="143.50">mi..</text></g><g><title>misc_checking_2 (1,214,593 samples, 0.11%)</title><rect x="17.4242%" y="149" width="0.1055%" height="15" fill="rgb(240,193,28)"/><text x="17.6742%" y="159.50"></text></g><g><title>crate_lints (2,693,467 samples, 0.23%)</title><rect x="17.5766%" y="117" width="0.2341%" height="15" fill="rgb(216,20,37)"/><text x="17.8266%" y="127.50"></text></g><g><title>lint_checking (3,167,022 samples, 0.28%)</title><rect x="17.5765%" y="133" width="0.2752%" height="15" fill="rgb(206,188,39)"/><text x="17.8265%" y="143.50"></text></g><g><title>misc_checking_3 (4,674,727 samples, 0.41%)</title><rect x="17.5297%" y="149" width="0.4062%" height="15" fill="rgb(217,207,13)"/><text x="17.7797%" y="159.50"></text></g><g><title>impl_parent (1,749,632 samples, 0.15%)</title><rect x="18.1221%" y="85" width="0.1520%" height="15" fill="rgb(231,73,38)"/><text x="18.3721%" y="95.50"></text></g><g><title>impl_trait_ref (4,034,174 samples, 0.35%)</title><rect x="18.2742%" y="85" width="0.3506%" height="15" fill="rgb(225,20,46)"/><text x="18.5242%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,476,420 samples, 0.30%)</title><rect x="18.3226%" y="69" width="0.3021%" height="15" fill="rgb(210,31,41)"/><text x="18.5726%" y="79.50"></text></g><g><title>coherent_trait (8,263,864 samples, 0.72%)</title><rect x="17.9431%" y="117" width="0.7181%" height="15" fill="rgb(221,200,47)"/><text x="18.1931%" y="127.50"></text></g><g><title>specialization_graph_of (8,253,393 samples, 0.72%)</title><rect x="17.9440%" y="101" width="0.7172%" height="15" fill="rgb(226,26,5)"/><text x="18.1940%" y="111.50"></text></g><g><title>coherence_checking (8,317,815 samples, 0.72%)</title><rect x="17.9415%" y="133" width="0.7228%" height="15" fill="rgb(249,33,26)"/><text x="18.1915%" y="143.50"></text></g><g><title>evaluate_obligation (3,166,901 samples, 0.28%)</title><rect x="20.1721%" y="85" width="0.2752%" height="15" fill="rgb(235,183,28)"/><text x="20.4221%" y="95.50"></text></g><g><title>evaluate_obligation (2,081,463 samples, 0.18%)</title><rect x="21.3513%" y="69" width="0.1809%" height="15" fill="rgb(221,5,38)"/><text x="21.6013%" y="79.50"></text></g><g><title>typeck (12,529,777 samples, 1.09%)</title><rect x="20.5981%" y="85" width="1.0888%" height="15" fill="rgb(247,18,42)"/><text x="20.8481%" y="95.50"></text></g><g><title>item_bodies_checking (34,828,453 samples, 3.03%)</title><rect x="18.6661%" y="133" width="3.0265%" height="15" fill="rgb(241,131,45)"/><text x="18.9161%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (34,825,713 samples, 3.03%)</title><rect x="18.6664%" y="117" width="3.0263%" height="15" fill="rgb(249,31,29)"/><text x="18.9164%" y="127.50">typ..</text></g><g><title>typeck (34,767,623 samples, 3.02%)</title><rect x="18.6714%" y="101" width="3.0212%" height="15" fill="rgb(225,111,53)"/><text x="18.9214%" y="111.50">typ..</text></g><g><title>type_collecting (1,639,766 samples, 0.14%)</title><rect x="21.7757%" y="133" width="0.1425%" height="15" fill="rgb(238,160,17)"/><text x="22.0257%" y="143.50"></text></g><g><title>collect_mod_item_types (1,628,196 samples, 0.14%)</title><rect x="21.7767%" y="117" width="0.1415%" height="15" fill="rgb(214,148,48)"/><text x="22.0267%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,370,167 samples, 0.21%)</title><rect x="21.9304%" y="117" width="0.2060%" height="15" fill="rgb(232,36,49)"/><text x="22.1804%" y="127.50"></text></g><g><title>analysis (86,462,635 samples, 7.51%)</title><rect x="14.7956%" y="165" width="7.5134%" height="15" fill="rgb(209,103,24)"/><text x="15.0456%" y="175.50">analysis</text></g><g><title>type_check_crate (50,324,669 samples, 4.37%)</title><rect x="17.9360%" y="149" width="4.3731%" height="15" fill="rgb(229,88,8)"/><text x="18.1860%" y="159.50">type_..</text></g><g><title>wf_checking (4,493,506 samples, 0.39%)</title><rect x="21.9186%" y="133" width="0.3905%" height="15" fill="rgb(213,181,19)"/><text x="22.1686%" y="143.50"></text></g><g><title>check_item_well_formed (1,987,658 samples, 0.17%)</title><rect x="22.1363%" y="117" width="0.1727%" height="15" fill="rgb(254,191,54)"/><text x="22.3863%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (2,896,330 samples, 0.25%)</title><rect x="32.2650%" y="133" width="0.2517%" height="15" fill="rgb(241,83,37)"/><text x="32.5150%" y="143.50"></text></g><g><title>const_caller_location (1,708,426 samples, 0.15%)</title><rect x="32.5167%" y="133" width="0.1485%" height="15" fill="rgb(233,36,39)"/><text x="32.7667%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,199,722 samples, 0.10%)</title><rect x="33.2056%" y="117" width="0.1043%" height="15" fill="rgb(226,3,54)"/><text x="33.4556%" y="127.50"></text></g><g><title>layout_of (1,180,381 samples, 0.10%)</title><rect x="33.5109%" y="101" width="0.1026%" height="15" fill="rgb(245,192,40)"/><text x="33.7609%" y="111.50"></text></g><g><title>layout_of (3,608,263 samples, 0.31%)</title><rect x="33.3300%" y="117" width="0.3136%" height="15" fill="rgb(238,167,29)"/><text x="33.5800%" y="127.50"></text></g><g><title>predicates_of (2,717,989 samples, 0.24%)</title><rect x="34.0594%" y="101" width="0.2362%" height="15" fill="rgb(232,182,51)"/><text x="34.3094%" y="111.50"></text></g><g><title>predicates_defined_on (2,010,688 samples, 0.17%)</title><rect x="34.1208%" y="85" width="0.1747%" height="15" fill="rgb(231,60,39)"/><text x="34.3708%" y="95.50"></text></g><g><title>param_env (7,517,946 samples, 0.65%)</title><rect x="33.6436%" y="117" width="0.6533%" height="15" fill="rgb(208,69,12)"/><text x="33.8936%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,475,654 samples, 0.13%)</title><rect x="34.2969%" y="117" width="0.1282%" height="15" fill="rgb(235,93,37)"/><text x="34.5469%" y="127.50"></text></g><g><title>normalize_projection_ty (1,163,588 samples, 0.10%)</title><rect x="34.3240%" y="101" width="0.1011%" height="15" fill="rgb(213,116,39)"/><text x="34.5740%" y="111.50"></text></g><g><title>fn_abi_of_instance (20,260,679 samples, 1.76%)</title><rect x="32.6698%" y="133" width="1.7606%" height="15" fill="rgb(222,207,29)"/><text x="32.9198%" y="143.50"></text></g><g><title>layout_of (3,155,403 samples, 0.27%)</title><rect x="34.5313%" y="133" width="0.2742%" height="15" fill="rgb(206,96,30)"/><text x="34.7813%" y="143.50"></text></g><g><title>symbol_name (1,344,243 samples, 0.12%)</title><rect x="34.8074%" y="133" width="0.1168%" height="15" fill="rgb(218,138,4)"/><text x="35.0574%" y="143.50"></text></g><g><title>codegen_module (142,949,818 samples, 12.42%)</title><rect x="22.5277%" y="149" width="12.4220%" height="15" fill="rgb(250,191,14)"/><text x="22.7777%" y="159.50">codegen_module</text></g><g><title>codegen_crate (145,536,034 samples, 12.65%)</title><rect x="22.3096%" y="165" width="12.6468%" height="15" fill="rgb(239,60,40)"/><text x="22.5596%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (613,627,834 samples, 53.32%)</title><rect x="34.9798%" y="149" width="53.3230%" height="15" fill="rgb(206,27,48)"/><text x="35.2298%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (588,333,348 samples, 51.12%)</title><rect x="37.1778%" y="133" width="51.1249%" height="15" fill="rgb(225,35,8)"/><text x="37.4278%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (641,589,884 samples, 55.75%)</title><rect x="34.9564%" y="165" width="55.7528%" height="15" fill="rgb(250,213,24)"/><text x="35.2064%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (27,693,390 samples, 2.41%)</title><rect x="88.3027%" y="149" width="2.4065%" height="15" fill="rgb(247,123,22)"/><text x="88.5527%" y="159.50">LL..</text></g><g><title>metadata_register_crate (1,269,723 samples, 0.11%)</title><rect x="91.7147%" y="117" width="0.1103%" height="15" fill="rgb(231,138,38)"/><text x="91.9647%" y="127.50"></text></g><g><title>macro_expand_crate (12,562,117 samples, 1.09%)</title><rect x="90.7389%" y="149" width="1.0916%" height="15" fill="rgb(231,145,46)"/><text x="90.9889%" y="159.50"></text></g><g><title>expand_crate (12,546,457 samples, 1.09%)</title><rect x="90.7402%" y="133" width="1.0903%" height="15" fill="rgb(251,118,11)"/><text x="90.9902%" y="143.50"></text></g><g><title>late_resolve_crate (1,670,367 samples, 0.15%)</title><rect x="91.8496%" y="133" width="0.1452%" height="15" fill="rgb(217,147,25)"/><text x="92.0996%" y="143.50"></text></g><g><title>configure_and_expand (14,879,361 samples, 1.29%)</title><rect x="90.7092%" y="165" width="1.2930%" height="15" fill="rgb(247,81,37)"/><text x="90.9592%" y="175.50"></text></g><g><title>resolve_crate (1,872,649 samples, 0.16%)</title><rect x="91.8395%" y="149" width="0.1627%" height="15" fill="rgb(209,12,38)"/><text x="92.0895%" y="159.50"></text></g><g><title>free_global_ctxt (7,799,019 samples, 0.68%)</title><rect x="92.0436%" y="165" width="0.6777%" height="15" fill="rgb(227,1,9)"/><text x="92.2936%" y="175.50"></text></g><g><title>item_attrs (2,466,205 samples, 0.21%)</title><rect x="93.2740%" y="69" width="0.2143%" height="15" fill="rgb(248,47,43)"/><text x="93.5240%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,382,155 samples, 0.21%)</title><rect x="93.2813%" y="53" width="0.2070%" height="15" fill="rgb(221,10,30)"/><text x="93.5313%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,636,323 samples, 0.32%)</title><rect x="93.2290%" y="85" width="0.3160%" height="15" fill="rgb(210,229,1)"/><text x="93.4790%" y="95.50"></text></g><g><title>mir_shims (1,773,017 samples, 0.15%)</title><rect x="93.6015%" y="85" width="0.1541%" height="15" fill="rgb(222,148,37)"/><text x="93.8515%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,942,760 samples, 0.34%)</title><rect x="94.0885%" y="69" width="0.3426%" height="15" fill="rgb(234,67,33)"/><text x="94.3385%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,174,021 samples, 0.36%)</title><rect x="94.4311%" y="69" width="0.3627%" height="15" fill="rgb(247,98,35)"/><text x="94.6811%" y="79.50"></text></g><g><title>optimized_mir (12,361,717 samples, 1.07%)</title><rect x="93.7557%" y="85" width="1.0742%" height="15" fill="rgb(247,138,52)"/><text x="94.0057%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,845,015 samples, 0.42%)</title><rect x="95.0120%" y="69" width="0.4210%" height="15" fill="rgb(213,79,30)"/><text x="95.2620%" y="79.50"></text></g><g><title>impl_parent (1,164,484 samples, 0.10%)</title><rect x="95.7591%" y="53" width="0.1012%" height="15" fill="rgb(246,177,23)"/><text x="96.0091%" y="63.50"></text></g><g><title>specialization_graph_of (4,935,592 samples, 0.43%)</title><rect x="95.5916%" y="69" width="0.4289%" height="15" fill="rgb(230,62,27)"/><text x="95.8416%" y="79.50"></text></g><g><title>impl_trait_ref (1,844,344 samples, 0.16%)</title><rect x="95.8603%" y="53" width="0.1603%" height="15" fill="rgb(216,154,8)"/><text x="96.1103%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,466,192 samples, 0.13%)</title><rect x="95.8931%" y="37" width="0.1274%" height="15" fill="rgb(244,35,45)"/><text x="96.1431%" y="47.50"></text></g><g><title>resolve_instance (14,396,363 samples, 1.25%)</title><rect x="94.8299%" y="85" width="1.2510%" height="15" fill="rgb(251,115,12)"/><text x="95.0799%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,174,515 samples, 0.10%)</title><rect x="96.0993%" y="69" width="0.1021%" height="15" fill="rgb(240,54,50)"/><text x="96.3493%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,396,747 samples, 0.12%)</title><rect x="96.0844%" y="85" width="0.1214%" height="15" fill="rgb(233,84,52)"/><text x="96.3344%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (40,830,803 samples, 3.55%)</title><rect x="92.8289%" y="101" width="3.5481%" height="15" fill="rgb(207,117,47)"/><text x="93.0789%" y="111.50">mono..</text></g><g><title>vtable_entries (1,789,438 samples, 0.16%)</title><rect x="96.2215%" y="85" width="0.1555%" height="15" fill="rgb(249,43,39)"/><text x="96.4715%" y="95.50"></text></g><g><title>monomorphization_collector (40,882,263 samples, 3.55%)</title><rect x="92.8286%" y="117" width="3.5526%" height="15" fill="rgb(209,38,44)"/><text x="93.0786%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (3,874,849 samples, 0.34%)</title><rect x="96.3816%" y="101" width="0.3367%" height="15" fill="rgb(236,212,23)"/><text x="96.6316%" y="111.50"></text></g><g><title>symbol_name (3,481,257 samples, 0.30%)</title><rect x="96.4158%" y="85" width="0.3025%" height="15" fill="rgb(242,79,21)"/><text x="96.6658%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (46,731,683 samples, 4.06%)</title><rect x="92.8240%" y="133" width="4.0609%" height="15" fill="rgb(211,96,35)"/><text x="93.0740%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,795,929 samples, 0.50%)</title><rect x="96.3812%" y="117" width="0.5037%" height="15" fill="rgb(253,215,40)"/><text x="96.6312%" y="127.50"></text></g><g><title>cgu_partitioning (1,916,710 samples, 0.17%)</title><rect x="96.7183%" y="101" width="0.1666%" height="15" fill="rgb(211,81,21)"/><text x="96.9683%" y="111.50"></text></g><g><title>exported_symbols (46,938,535 samples, 4.08%)</title><rect x="92.8097%" y="149" width="4.0789%" height="15" fill="rgb(208,190,38)"/><text x="93.0597%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,747,766 samples, 0.15%)</title><rect x="97.0512%" y="133" width="0.1519%" height="15" fill="rgb(235,213,38)"/><text x="97.3012%" y="143.50"></text></g><g><title>optimized_mir (3,605,376 samples, 0.31%)</title><rect x="96.8941%" y="149" width="0.3133%" height="15" fill="rgb(237,122,38)"/><text x="97.1441%" y="159.50"></text></g><g><title>generate_crate_metadata (51,654,933 samples, 4.49%)</title><rect x="92.7213%" y="165" width="4.4887%" height="15" fill="rgb(244,218,35)"/><text x="92.9713%" y="175.50">gener..</text></g><g><title>hir_lowering (2,334,424 samples, 0.20%)</title><rect x="97.2100%" y="165" width="0.2029%" height="15" fill="rgb(240,68,47)"/><text x="97.4600%" y="175.50"></text></g><g><title>finish_ongoing_codegen (21,873,201 samples, 1.90%)</title><rect x="97.4144%" y="149" width="1.9007%" height="15" fill="rgb(210,16,53)"/><text x="97.6644%" y="159.50">f..</text></g><g><title>link_crate (4,321,494 samples, 0.38%)</title><rect x="99.3151%" y="149" width="0.3755%" height="15" fill="rgb(235,124,12)"/><text x="99.5651%" y="159.50"></text></g><g><title>link_binary (4,252,193 samples, 0.37%)</title><rect x="99.3211%" y="133" width="0.3695%" height="15" fill="rgb(224,169,11)"/><text x="99.5711%" y="143.50"></text></g><g><title>link_rlib (3,228,942 samples, 0.28%)</title><rect x="99.4101%" y="117" width="0.2806%" height="15" fill="rgb(250,166,2)"/><text x="99.6601%" y="127.50"></text></g><g><title>link (26,223,565 samples, 2.28%)</title><rect x="97.4128%" y="165" width="2.2788%" height="15" fill="rgb(242,216,29)"/><text x="97.6628%" y="175.50">l..</text></g><g><title>self_profile_alloc_query_strings (1,794,479 samples, 0.16%)</title><rect x="99.8084%" y="165" width="0.1559%" height="15" fill="rgb(230,116,27)"/><text x="100.0584%" y="175.50"></text></g><g><title>all (1,150,775,479 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,150,775,479 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>