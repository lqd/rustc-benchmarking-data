<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (90,146,432 samples, 15.21%)</title><rect x="0.1434%" y="149" width="15.2128%" height="15" fill="rgb(227,0,7)"/><text x="0.3934%" y="159.50">LLVM_passes</text></g><g><title>is_late_bound_map (683,909 samples, 0.12%)</title><rect x="20.3160%" y="101" width="0.1154%" height="15" fill="rgb(217,0,24)"/><text x="20.5660%" y="111.50"></text></g><g><title>thir_body (2,874,100 samples, 0.49%)</title><rect x="22.4590%" y="37" width="0.4850%" height="15" fill="rgb(221,193,54)"/><text x="22.7090%" y="47.50"></text></g><g><title>mir_const (12,642,178 samples, 2.13%)</title><rect x="20.8161%" y="85" width="2.1335%" height="15" fill="rgb(248,212,6)"/><text x="21.0661%" y="95.50">m..</text></g><g><title>unsafety_check_result (10,987,093 samples, 1.85%)</title><rect x="21.0954%" y="69" width="1.8541%" height="15" fill="rgb(208,68,35)"/><text x="21.3454%" y="79.50">u..</text></g><g><title>mir_built (10,001,143 samples, 1.69%)</title><rect x="21.2618%" y="53" width="1.6878%" height="15" fill="rgb(232,128,0)"/><text x="21.5118%" y="63.50"></text></g><g><title>mir_const (3,702,665 samples, 0.62%)</title><rect x="23.1998%" y="69" width="0.6248%" height="15" fill="rgb(207,160,47)"/><text x="23.4498%" y="79.50"></text></g><g><title>unsafety_check_result (2,736,776 samples, 0.46%)</title><rect x="23.3628%" y="53" width="0.4618%" height="15" fill="rgb(228,23,34)"/><text x="23.6128%" y="63.50"></text></g><g><title>mir_built (2,350,435 samples, 0.40%)</title><rect x="23.4280%" y="37" width="0.3967%" height="15" fill="rgb(218,30,26)"/><text x="23.6780%" y="47.50"></text></g><g><title>mir_promoted (20,128,900 samples, 3.40%)</title><rect x="20.4314%" y="101" width="3.3969%" height="15" fill="rgb(220,122,19)"/><text x="20.6814%" y="111.50">mir..</text></g><g><title>mir_const_qualif (5,207,084 samples, 0.88%)</title><rect x="22.9496%" y="85" width="0.8787%" height="15" fill="rgb(250,228,42)"/><text x="23.1996%" y="95.50"></text></g><g><title>type_op_prove_predicate (1,397,485 samples, 0.24%)</title><rect x="23.8713%" y="101" width="0.2358%" height="15" fill="rgb(240,193,28)"/><text x="24.1213%" y="111.50"></text></g><g><title>MIR_borrow_checking (51,192,987 samples, 8.64%)</title><rect x="15.4689%" y="133" width="8.6392%" height="15" fill="rgb(216,20,37)"/><text x="15.7189%" y="143.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (50,649,708 samples, 8.55%)</title><rect x="15.5606%" y="117" width="8.5475%" height="15" fill="rgb(206,188,39)"/><text x="15.8106%" y="127.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,272,844 samples, 0.38%)</title><rect x="24.1080%" y="133" width="0.3836%" height="15" fill="rgb(217,207,13)"/><text x="24.3580%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,968,162 samples, 0.33%)</title><rect x="24.1595%" y="117" width="0.3321%" height="15" fill="rgb(231,73,38)"/><text x="24.4095%" y="127.50"></text></g><g><title>check_mod_attrs (1,108,122 samples, 0.19%)</title><rect x="24.5769%" y="117" width="0.1870%" height="15" fill="rgb(225,20,46)"/><text x="24.8269%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,476,904 samples, 0.25%)</title><rect x="24.8350%" y="117" width="0.2492%" height="15" fill="rgb(210,31,41)"/><text x="25.0850%" y="127.50"></text></g><g><title>misc_checking_1 (3,168,123 samples, 0.53%)</title><rect x="24.5729%" y="133" width="0.5346%" height="15" fill="rgb(221,200,47)"/><text x="24.8229%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (779,338 samples, 0.13%)</title><rect x="25.1079%" y="117" width="0.1315%" height="15" fill="rgb(226,26,5)"/><text x="25.3579%" y="127.50"></text></g><g><title>misc_checking_2 (2,542,937 samples, 0.43%)</title><rect x="25.1075%" y="133" width="0.4291%" height="15" fill="rgb(249,33,26)"/><text x="25.3575%" y="143.50"></text></g><g><title>match_checking (1,761,639 samples, 0.30%)</title><rect x="25.2394%" y="117" width="0.2973%" height="15" fill="rgb(235,183,28)"/><text x="25.4894%" y="127.50"></text></g><g><title>check_match (1,652,069 samples, 0.28%)</title><rect x="25.2579%" y="101" width="0.2788%" height="15" fill="rgb(221,5,38)"/><text x="25.5079%" y="111.50"></text></g><g><title>death_checking (1,193,183 samples, 0.20%)</title><rect x="25.6289%" y="117" width="0.2014%" height="15" fill="rgb(247,18,42)"/><text x="25.8789%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,516,219 samples, 0.42%)</title><rect x="26.1207%" y="85" width="0.4246%" height="15" fill="rgb(241,131,45)"/><text x="26.3707%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,392,649 samples, 0.40%)</title><rect x="26.1415%" y="69" width="0.4038%" height="15" fill="rgb(249,31,29)"/><text x="26.3915%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,218,589 samples, 0.37%)</title><rect x="26.1709%" y="53" width="0.3744%" height="15" fill="rgb(225,111,53)"/><text x="26.4209%" y="63.50"></text></g><g><title>mir_for_ctfe (778,089 samples, 0.13%)</title><rect x="26.4140%" y="37" width="0.1313%" height="15" fill="rgb(238,160,17)"/><text x="26.6640%" y="47.50"></text></g><g><title>crate_lints (5,584,490 samples, 0.94%)</title><rect x="25.8306%" y="101" width="0.9424%" height="15" fill="rgb(214,148,48)"/><text x="26.0806%" y="111.50"></text></g><g><title>type_of (1,129,452 samples, 0.19%)</title><rect x="26.5824%" y="85" width="0.1906%" height="15" fill="rgb(232,36,49)"/><text x="26.8324%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (900,221 samples, 0.15%)</title><rect x="26.6211%" y="69" width="0.1519%" height="15" fill="rgb(209,103,24)"/><text x="26.8711%" y="79.50"></text></g><g><title>lint_checking (6,603,021 samples, 1.11%)</title><rect x="25.8302%" y="117" width="1.1143%" height="15" fill="rgb(229,88,8)"/><text x="26.0802%" y="127.50"></text></g><g><title>module_lints (1,016,141 samples, 0.17%)</title><rect x="26.7730%" y="101" width="0.1715%" height="15" fill="rgb(213,181,19)"/><text x="27.0230%" y="111.50"></text></g><g><title>lint_mod (1,011,611 samples, 0.17%)</title><rect x="26.7738%" y="85" width="0.1707%" height="15" fill="rgb(254,191,54)"/><text x="27.0238%" y="95.50"></text></g><g><title>privacy_access_levels (826,199 samples, 0.14%)</title><rect x="26.9445%" y="117" width="0.1394%" height="15" fill="rgb(241,83,37)"/><text x="27.1945%" y="127.50"></text></g><g><title>privacy_checking_modules (1,615,807 samples, 0.27%)</title><rect x="27.0839%" y="117" width="0.2727%" height="15" fill="rgb(233,36,39)"/><text x="27.3339%" y="127.50"></text></g><g><title>check_mod_privacy (1,613,027 samples, 0.27%)</title><rect x="27.0844%" y="101" width="0.2722%" height="15" fill="rgb(226,3,54)"/><text x="27.3344%" y="111.50"></text></g><g><title>misc_checking_3 (10,813,206 samples, 1.82%)</title><rect x="25.5367%" y="133" width="1.8248%" height="15" fill="rgb(245,192,40)"/><text x="25.7867%" y="143.50">m..</text></g><g><title>impl_parent (2,579,099 samples, 0.44%)</title><rect x="28.2489%" y="69" width="0.4352%" height="15" fill="rgb(238,167,29)"/><text x="28.4989%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,513,837 samples, 0.26%)</title><rect x="28.4287%" y="53" width="0.2555%" height="15" fill="rgb(232,182,51)"/><text x="28.6787%" y="63.50"></text></g><g><title>impl_trait_ref (5,361,469 samples, 0.90%)</title><rect x="28.6841%" y="69" width="0.9048%" height="15" fill="rgb(231,60,39)"/><text x="28.9341%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,098,288 samples, 0.69%)</title><rect x="28.8973%" y="53" width="0.6916%" height="15" fill="rgb(208,69,12)"/><text x="29.1473%" y="63.50"></text></g><g><title>coherent_trait (13,780,387 samples, 2.33%)</title><rect x="27.3909%" y="101" width="2.3255%" height="15" fill="rgb(235,93,37)"/><text x="27.6409%" y="111.50">c..</text></g><g><title>specialization_graph_of (13,065,029 samples, 2.20%)</title><rect x="27.5117%" y="85" width="2.2048%" height="15" fill="rgb(213,116,39)"/><text x="27.7617%" y="95.50">s..</text></g><g><title>trait_impls_of (752,807 samples, 0.13%)</title><rect x="29.5894%" y="69" width="0.1270%" height="15" fill="rgb(222,207,29)"/><text x="29.8394%" y="79.50"></text></g><g><title>coherence_checking (13,904,788 samples, 2.35%)</title><rect x="27.3875%" y="117" width="2.3465%" height="15" fill="rgb(206,96,30)"/><text x="27.6375%" y="127.50">c..</text></g><g><title>evaluate_obligation (924,063 samples, 0.16%)</title><rect x="35.5778%" y="69" width="0.1559%" height="15" fill="rgb(218,138,4)"/><text x="35.8278%" y="79.50"></text></g><g><title>item_bodies_checking (36,895,494 samples, 6.23%)</title><rect x="29.7448%" y="117" width="6.2264%" height="15" fill="rgb(250,191,14)"/><text x="29.9948%" y="127.50">item_bod..</text></g><g><title>typeck_item_bodies (36,891,774 samples, 6.23%)</title><rect x="29.7454%" y="101" width="6.2257%" height="15" fill="rgb(239,60,40)"/><text x="29.9954%" y="111.50">typeck_i..</text></g><g><title>typeck (36,671,882 samples, 6.19%)</title><rect x="29.7825%" y="85" width="6.1886%" height="15" fill="rgb(206,27,48)"/><text x="30.0325%" y="95.50">typeck</text></g><g><title>impl_trait_ref (871,728 samples, 0.15%)</title><rect x="37.9931%" y="53" width="0.1471%" height="15" fill="rgb(225,35,8)"/><text x="38.2431%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (736,467 samples, 0.12%)</title><rect x="38.0160%" y="37" width="0.1243%" height="15" fill="rgb(250,213,24)"/><text x="38.2660%" y="47.50"></text></g><g><title>predicates_of (707,608 samples, 0.12%)</title><rect x="38.1466%" y="53" width="0.1194%" height="15" fill="rgb(247,123,22)"/><text x="38.3966%" y="63.50"></text></g><g><title>specializes (2,174,355 samples, 0.37%)</title><rect x="38.2661%" y="53" width="0.3669%" height="15" fill="rgb(231,138,38)"/><text x="38.5161%" y="63.50"></text></g><g><title>param_env (1,369,313 samples, 0.23%)</title><rect x="38.4019%" y="37" width="0.2311%" height="15" fill="rgb(231,145,46)"/><text x="38.6519%" y="47.50"></text></g><g><title>evaluate_obligation (6,470,401 samples, 1.09%)</title><rect x="37.5542%" y="69" width="1.0919%" height="15" fill="rgb(251,118,11)"/><text x="37.8042%" y="79.50"></text></g><g><title>item_types_checking (16,242,703 samples, 2.74%)</title><rect x="35.9711%" y="117" width="2.7411%" height="15" fill="rgb(217,147,25)"/><text x="36.2211%" y="127.50">it..</text></g><g><title>check_mod_item_types (16,236,923 samples, 2.74%)</title><rect x="35.9721%" y="101" width="2.7401%" height="15" fill="rgb(247,81,37)"/><text x="36.2221%" y="111.50">ch..</text></g><g><title>typeck (13,887,739 samples, 2.34%)</title><rect x="36.3685%" y="85" width="2.3436%" height="15" fill="rgb(209,12,38)"/><text x="36.6185%" y="95.50">t..</text></g><g><title>fn_sig (723,721 samples, 0.12%)</title><rect x="38.8426%" y="85" width="0.1221%" height="15" fill="rgb(227,1,9)"/><text x="39.0926%" y="95.50"></text></g><g><title>named_region_map (1,028,280 samples, 0.17%)</title><rect x="39.0241%" y="69" width="0.1735%" height="15" fill="rgb(248,47,43)"/><text x="39.2741%" y="79.50"></text></g><g><title>resolve_lifetimes (965,880 samples, 0.16%)</title><rect x="39.0346%" y="53" width="0.1630%" height="15" fill="rgb(221,10,30)"/><text x="39.2846%" y="63.50"></text></g><g><title>generics_of (1,421,883 samples, 0.24%)</title><rect x="38.9647%" y="85" width="0.2400%" height="15" fill="rgb(210,229,1)"/><text x="39.2147%" y="95.50"></text></g><g><title>predicates_of (871,407 samples, 0.15%)</title><rect x="39.2202%" y="85" width="0.1471%" height="15" fill="rgb(222,148,37)"/><text x="39.4702%" y="95.50"></text></g><g><title>predicates_defined_on (671,525 samples, 0.11%)</title><rect x="39.2539%" y="69" width="0.1133%" height="15" fill="rgb(234,67,33)"/><text x="39.5039%" y="79.50"></text></g><g><title>type_collecting (4,052,083 samples, 0.68%)</title><rect x="38.7124%" y="117" width="0.6838%" height="15" fill="rgb(247,98,35)"/><text x="38.9624%" y="127.50"></text></g><g><title>collect_mod_item_types (4,049,003 samples, 0.68%)</title><rect x="38.7129%" y="101" width="0.6833%" height="15" fill="rgb(247,138,52)"/><text x="38.9629%" y="111.50"></text></g><g><title>evaluate_obligation (674,237 samples, 0.11%)</title><rect x="40.0063%" y="85" width="0.1138%" height="15" fill="rgb(213,79,30)"/><text x="40.2563%" y="95.50"></text></g><g><title>region_scope_tree (726,736 samples, 0.12%)</title><rect x="40.2281%" y="85" width="0.1226%" height="15" fill="rgb(246,177,23)"/><text x="40.4781%" y="95.50"></text></g><g><title>check_impl_item_well_formed (5,139,478 samples, 0.87%)</title><rect x="39.4857%" y="101" width="0.8673%" height="15" fill="rgb(230,62,27)"/><text x="39.7357%" y="111.50"></text></g><g><title>evaluate_obligation (955,440 samples, 0.16%)</title><rect x="41.0135%" y="85" width="0.1612%" height="15" fill="rgb(216,154,8)"/><text x="41.2635%" y="95.50"></text></g><g><title>param_env (1,152,015 samples, 0.19%)</title><rect x="41.2091%" y="85" width="0.1944%" height="15" fill="rgb(244,35,45)"/><text x="41.4591%" y="95.50"></text></g><g><title>region_scope_tree (698,197 samples, 0.12%)</title><rect x="41.4155%" y="85" width="0.1178%" height="15" fill="rgb(251,115,12)"/><text x="41.6655%" y="95.50"></text></g><g><title>analysis (155,224,967 samples, 26.20%)</title><rect x="15.3562%" y="149" width="26.1952%" height="15" fill="rgb(240,54,50)"/><text x="15.6062%" y="159.50">analysis</text></g><g><title>type_check_crate (84,085,697 samples, 14.19%)</title><rect x="27.3615%" y="133" width="14.1900%" height="15" fill="rgb(233,84,52)"/><text x="27.6115%" y="143.50">type_check_crate</text></g><g><title>wf_checking (12,746,647 samples, 2.15%)</title><rect x="39.4004%" y="117" width="2.1511%" height="15" fill="rgb(207,117,47)"/><text x="39.6504%" y="127.50">w..</text></g><g><title>check_item_well_formed (7,101,733 samples, 1.20%)</title><rect x="40.3530%" y="101" width="1.1985%" height="15" fill="rgb(249,43,39)"/><text x="40.6030%" y="111.50"></text></g><g><title>param_env (653,137 samples, 0.11%)</title><rect x="45.6510%" y="101" width="0.1102%" height="15" fill="rgb(209,38,44)"/><text x="45.9010%" y="111.50"></text></g><g><title>fn_abi_of_instance (2,307,018 samples, 0.39%)</title><rect x="45.3780%" y="117" width="0.3893%" height="15" fill="rgb(236,212,23)"/><text x="45.6280%" y="127.50"></text></g><g><title>codegen_module (24,233,648 samples, 4.09%)</title><rect x="41.7980%" y="133" width="4.0896%" height="15" fill="rgb(242,79,21)"/><text x="42.0480%" y="143.50">code..</text></g><g><title>codegen_crate (25,754,735 samples, 4.35%)</title><rect x="41.5533%" y="149" width="4.3463%" height="15" fill="rgb(211,96,35)"/><text x="41.8033%" y="159.50">codeg..</text></g><g><title>LLVM_module_codegen (140,636,099 samples, 23.73%)</title><rect x="45.9182%" y="133" width="23.7333%" height="15" fill="rgb(253,215,40)"/><text x="46.1682%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (137,021,450 samples, 23.12%)</title><rect x="46.5282%" y="117" width="23.1233%" height="15" fill="rgb(211,81,21)"/><text x="46.7782%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (147,009,747 samples, 24.81%)</title><rect x="45.8995%" y="149" width="24.8089%" height="15" fill="rgb(208,190,38)"/><text x="46.1495%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,262,948 samples, 1.06%)</title><rect x="69.6515%" y="133" width="1.0569%" height="15" fill="rgb(235,213,38)"/><text x="69.9015%" y="143.50"></text></g><g><title>AST_validation (607,697 samples, 0.10%)</title><rect x="70.7488%" y="133" width="0.1026%" height="15" fill="rgb(237,122,38)"/><text x="70.9988%" y="143.50"></text></g><g><title>metadata_register_crate (2,153,924 samples, 0.36%)</title><rect x="77.5466%" y="101" width="0.3635%" height="15" fill="rgb(244,218,35)"/><text x="77.7966%" y="111.50"></text></g><g><title>metadata_register_crate (764,149 samples, 0.13%)</title><rect x="77.7811%" y="85" width="0.1290%" height="15" fill="rgb(240,68,47)"/><text x="78.0311%" y="95.50"></text></g><g><title>macro_expand_crate (42,121,599 samples, 7.11%)</title><rect x="70.9308%" y="133" width="7.1083%" height="15" fill="rgb(210,16,53)"/><text x="71.1808%" y="143.50">macro_expa..</text></g><g><title>expand_crate (42,103,709 samples, 7.11%)</title><rect x="70.9338%" y="117" width="7.1053%" height="15" fill="rgb(235,124,12)"/><text x="71.1838%" y="127.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (764,298 samples, 0.13%)</title><rect x="77.9101%" y="101" width="0.1290%" height="15" fill="rgb(224,169,11)"/><text x="78.1601%" y="111.50"></text></g><g><title>finalize_macro_resolutions (873,760 samples, 0.15%)</title><rect x="78.0641%" y="117" width="0.1475%" height="15" fill="rgb(250,166,2)"/><text x="78.3141%" y="127.50"></text></g><g><title>late_resolve_crate (10,392,361 samples, 1.75%)</title><rect x="78.2115%" y="117" width="1.7538%" height="15" fill="rgb(242,216,29)"/><text x="78.4615%" y="127.50"></text></g><g><title>configure_and_expand (55,536,593 samples, 9.37%)</title><rect x="70.7084%" y="149" width="9.3722%" height="15" fill="rgb(230,116,27)"/><text x="70.9584%" y="159.50">configure_and..</text></g><g><title>resolve_crate (12,025,429 samples, 2.03%)</title><rect x="78.0512%" y="133" width="2.0294%" height="15" fill="rgb(228,99,48)"/><text x="78.3012%" y="143.50">r..</text></g><g><title>early_lint_checks (1,038,491 samples, 0.18%)</title><rect x="80.1564%" y="149" width="0.1753%" height="15" fill="rgb(253,11,6)"/><text x="80.4064%" y="159.50"></text></g><g><title>free_global_ctxt (5,349,297 samples, 0.90%)</title><rect x="80.3317%" y="149" width="0.9027%" height="15" fill="rgb(247,143,39)"/><text x="80.5817%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,406,739 samples, 0.74%)</title><rect x="83.0064%" y="53" width="0.7437%" height="15" fill="rgb(236,97,10)"/><text x="83.2564%" y="63.50"></text></g><g><title>optimized_mir (10,098,490 samples, 1.70%)</title><rect x="82.0709%" y="69" width="1.7042%" height="15" fill="rgb(233,208,19)"/><text x="82.3209%" y="79.50"></text></g><g><title>resolve_instance (1,081,950 samples, 0.18%)</title><rect x="83.7751%" y="69" width="0.1826%" height="15" fill="rgb(216,164,2)"/><text x="84.0251%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (13,584,585 samples, 2.29%)</title><rect x="81.8093%" y="85" width="2.2925%" height="15" fill="rgb(220,129,5)"/><text x="82.0593%" y="95.50">m..</text></g><g><title>vtable_entries (624,196 samples, 0.11%)</title><rect x="83.9965%" y="69" width="0.1053%" height="15" fill="rgb(242,17,10)"/><text x="84.2465%" y="79.50"></text></g><g><title>monomorphization_collector (13,773,867 samples, 2.32%)</title><rect x="81.8087%" y="101" width="2.3244%" height="15" fill="rgb(242,107,0)"/><text x="82.0587%" y="111.50">m..</text></g><g><title>assert_symbols_are_distinct (694,328 samples, 0.12%)</title><rect x="84.1338%" y="85" width="0.1172%" height="15" fill="rgb(251,28,31)"/><text x="84.3838%" y="95.50"></text></g><g><title>symbol_name (613,598 samples, 0.10%)</title><rect x="84.1475%" y="69" width="0.1035%" height="15" fill="rgb(233,223,10)"/><text x="84.3975%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (14,851,598 samples, 2.51%)</title><rect x="81.8023%" y="117" width="2.5063%" height="15" fill="rgb(215,21,27)"/><text x="82.0523%" y="127.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,039,621 samples, 0.18%)</title><rect x="84.1332%" y="101" width="0.1754%" height="15" fill="rgb(232,23,21)"/><text x="84.3832%" y="111.50"></text></g><g><title>exported_symbols (15,175,382 samples, 2.56%)</title><rect x="81.7934%" y="133" width="2.5609%" height="15" fill="rgb(244,5,23)"/><text x="82.0434%" y="143.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,731,369 samples, 0.29%)</title><rect x="84.7694%" y="117" width="0.2922%" height="15" fill="rgb(226,81,46)"/><text x="85.0194%" y="127.50"></text></g><g><title>optimized_mir (4,121,385 samples, 0.70%)</title><rect x="84.3715%" y="133" width="0.6955%" height="15" fill="rgb(247,70,30)"/><text x="84.6215%" y="143.50"></text></g><g><title>generate_crate_metadata (22,848,984 samples, 3.86%)</title><rect x="81.2344%" y="149" width="3.8559%" height="15" fill="rgb(212,68,19)"/><text x="81.4844%" y="159.50">gene..</text></g><g><title>hir_lowering (11,509,443 samples, 1.94%)</title><rect x="85.0903%" y="149" width="1.9423%" height="15" fill="rgb(240,187,13)"/><text x="85.3403%" y="159.50">h..</text></g><g><title>finish_ongoing_codegen (72,361,783 samples, 12.21%)</title><rect x="87.0359%" y="133" width="12.2115%" height="15" fill="rgb(223,113,26)"/><text x="87.2859%" y="143.50">finish_ongoing_cod..</text></g><g><title>link_crate (1,696,988 samples, 0.29%)</title><rect x="99.2474%" y="133" width="0.2864%" height="15" fill="rgb(206,192,2)"/><text x="99.4974%" y="143.50"></text></g><g><title>link_binary (1,652,078 samples, 0.28%)</title><rect x="99.2550%" y="117" width="0.2788%" height="15" fill="rgb(241,108,4)"/><text x="99.5050%" y="127.50"></text></g><g><title>link_rlib (1,236,504 samples, 0.21%)</title><rect x="99.3252%" y="101" width="0.2087%" height="15" fill="rgb(247,173,49)"/><text x="99.5752%" y="111.50"></text></g><g><title>link (74,090,211 samples, 12.50%)</title><rect x="87.0326%" y="149" width="12.5032%" height="15" fill="rgb(224,114,35)"/><text x="87.2826%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (1,569,396 samples, 0.26%)</title><rect x="99.6539%" y="149" width="0.2648%" height="15" fill="rgb(245,159,27)"/><text x="99.9039%" y="159.50"></text></g><g><title>all (592,569,202 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (592,569,202 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>