<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (100,730,732 samples, 6.05%)</title><rect x="0.2059%" y="277" width="6.0469%" height="15" fill="rgb(227,0,7)"/><text x="0.4559%" y="287.50">LLVM_pas..</text></g><g><title>is_copy_raw (2,374,461 samples, 0.14%)</title><rect x="15.6208%" y="149" width="0.1425%" height="15" fill="rgb(217,0,24)"/><text x="15.8708%" y="159.50"></text></g><g><title>evaluate_obligation (1,826,008 samples, 0.11%)</title><rect x="15.6538%" y="133" width="0.1096%" height="15" fill="rgb(221,193,54)"/><text x="15.9038%" y="143.50"></text></g><g><title>needs_drop_raw (3,450,994 samples, 0.21%)</title><rect x="15.5596%" y="165" width="0.2072%" height="15" fill="rgb(248,212,6)"/><text x="15.8096%" y="175.50"></text></g><g><title>resolve_instance (2,878,941 samples, 0.17%)</title><rect x="15.7668%" y="165" width="0.1728%" height="15" fill="rgb(208,68,35)"/><text x="16.0168%" y="175.50"></text></g><g><title>thir_body (5,002,474 samples, 0.30%)</title><rect x="15.9485%" y="165" width="0.3003%" height="15" fill="rgb(232,128,0)"/><text x="16.1985%" y="175.50"></text></g><g><title>mir_const (32,496,736 samples, 1.95%)</title><rect x="14.3032%" y="213" width="1.9508%" height="15" fill="rgb(207,160,47)"/><text x="14.5532%" y="223.50">m..</text></g><g><title>unsafety_check_result (28,073,811 samples, 1.69%)</title><rect x="14.5687%" y="197" width="1.6853%" height="15" fill="rgb(228,23,34)"/><text x="14.8187%" y="207.50"></text></g><g><title>mir_built (24,784,016 samples, 1.49%)</title><rect x="14.7662%" y="181" width="1.4878%" height="15" fill="rgb(218,30,26)"/><text x="15.0162%" y="191.50"></text></g><g><title>thir_body (41,888,344 samples, 2.51%)</title><rect x="21.4261%" y="133" width="2.5146%" height="15" fill="rgb(220,122,19)"/><text x="21.6761%" y="143.50">th..</text></g><g><title>mir_const_qualif (127,128,653 samples, 7.63%)</title><rect x="16.3099%" y="197" width="7.6316%" height="15" fill="rgb(250,228,42)"/><text x="16.5599%" y="207.50">mir_const_..</text></g><g><title>mir_const (81,761,897 samples, 4.91%)</title><rect x="19.0333%" y="181" width="4.9082%" height="15" fill="rgb(240,193,28)"/><text x="19.2833%" y="191.50">mir_co..</text></g><g><title>unsafety_check_result (80,250,763 samples, 4.82%)</title><rect x="19.1240%" y="165" width="4.8175%" height="15" fill="rgb(216,20,37)"/><text x="19.3740%" y="175.50">unsafe..</text></g><g><title>mir_built (79,400,185 samples, 4.77%)</title><rect x="19.1751%" y="149" width="4.7664%" height="15" fill="rgb(206,188,39)"/><text x="19.4251%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (192,522,183 samples, 11.56%)</title><rect x="12.3860%" y="229" width="11.5572%" height="15" fill="rgb(217,207,13)"/><text x="12.6360%" y="239.50">mir_promoted</text></g><g><title>mir_const_qualif (128,088,010 samples, 7.69%)</title><rect x="16.2540%" y="213" width="7.6892%" height="15" fill="rgb(231,73,38)"/><text x="16.5040%" y="223.50">mir_const_q..</text></g><g><title>type_op_ascribe_user_type (2,843,325 samples, 0.17%)</title><rect x="23.9432%" y="229" width="0.1707%" height="15" fill="rgb(225,20,46)"/><text x="24.1932%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (2,167,132 samples, 0.13%)</title><rect x="24.1139%" y="229" width="0.1301%" height="15" fill="rgb(210,31,41)"/><text x="24.3639%" y="239.50"></text></g><g><title>type_op_prove_predicate (12,065,372 samples, 0.72%)</title><rect x="24.2969%" y="229" width="0.7243%" height="15" fill="rgb(221,200,47)"/><text x="24.5469%" y="239.50"></text></g><g><title>MIR_borrow_checking (307,178,730 samples, 18.44%)</title><rect x="6.5834%" y="261" width="18.4401%" height="15" fill="rgb(226,26,5)"/><text x="6.8334%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (306,401,099 samples, 18.39%)</title><rect x="6.6301%" y="245" width="18.3935%" height="15" fill="rgb(249,33,26)"/><text x="6.8801%" y="255.50">mir_borrowck</text></g><g><title>hir_module_items (1,669,654 samples, 0.10%)</title><rect x="25.1110%" y="261" width="0.1002%" height="15" fill="rgb(235,183,28)"/><text x="25.3610%" y="271.50"></text></g><g><title>check_mod_attrs (8,381,297 samples, 0.50%)</title><rect x="25.2153%" y="245" width="0.5031%" height="15" fill="rgb(221,5,38)"/><text x="25.4653%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (2,631,517 samples, 0.16%)</title><rect x="25.8711%" y="245" width="0.1580%" height="15" fill="rgb(247,18,42)"/><text x="26.1211%" y="255.50"></text></g><g><title>misc_checking_1 (13,844,471 samples, 0.83%)</title><rect x="25.2113%" y="261" width="0.8311%" height="15" fill="rgb(241,131,45)"/><text x="25.4613%" y="271.50"></text></g><g><title>check_mod_intrinsics (1,749,688 samples, 0.11%)</title><rect x="26.0441%" y="229" width="0.1050%" height="15" fill="rgb(249,31,29)"/><text x="26.2941%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (5,791,918 samples, 0.35%)</title><rect x="26.0426%" y="245" width="0.3477%" height="15" fill="rgb(225,111,53)"/><text x="26.2926%" y="255.50"></text></g><g><title>check_mod_liveness (4,017,450 samples, 0.24%)</title><rect x="26.1491%" y="229" width="0.2412%" height="15" fill="rgb(238,160,17)"/><text x="26.3991%" y="239.50"></text></g><g><title>misc_checking_2 (9,476,736 samples, 0.57%)</title><rect x="26.0424%" y="261" width="0.5689%" height="15" fill="rgb(214,148,48)"/><text x="26.2924%" y="271.50"></text></g><g><title>match_checking (3,681,298 samples, 0.22%)</title><rect x="26.3903%" y="245" width="0.2210%" height="15" fill="rgb(232,36,49)"/><text x="26.6403%" y="255.50"></text></g><g><title>check_match (3,492,776 samples, 0.21%)</title><rect x="26.4016%" y="229" width="0.2097%" height="15" fill="rgb(209,103,24)"/><text x="26.6516%" y="239.50"></text></g><g><title>check_private_in_public (1,938,139 samples, 0.12%)</title><rect x="26.6126%" y="245" width="0.1163%" height="15" fill="rgb(229,88,8)"/><text x="26.8626%" y="255.50"></text></g><g><title>death_checking (3,735,738 samples, 0.22%)</title><rect x="26.7289%" y="245" width="0.2243%" height="15" fill="rgb(213,181,19)"/><text x="26.9789%" y="255.50"></text></g><g><title>eval_to_const_value_raw (59,597,054 samples, 3.58%)</title><rect x="27.6689%" y="149" width="3.5777%" height="15" fill="rgb(254,191,54)"/><text x="27.9189%" y="159.50">eval..</text></g><g><title>eval_to_const_value_raw (59,546,614 samples, 3.57%)</title><rect x="27.6719%" y="133" width="3.5746%" height="15" fill="rgb(241,83,37)"/><text x="27.9219%" y="143.50">eval..</text></g><g><title>eval_to_allocation_raw (59,462,494 samples, 3.57%)</title><rect x="27.6770%" y="117" width="3.5696%" height="15" fill="rgb(233,36,39)"/><text x="27.9270%" y="127.50">eval..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (55,739,387 samples, 3.35%)</title><rect x="27.9005%" y="101" width="3.3461%" height="15" fill="rgb(226,3,54)"/><text x="28.1505%" y="111.50">try..</text></g><g><title>eval_to_const_value_raw (55,521,765 samples, 3.33%)</title><rect x="27.9135%" y="85" width="3.3330%" height="15" fill="rgb(245,192,40)"/><text x="28.1635%" y="95.50">eva..</text></g><g><title>eval_to_const_value_raw (55,440,725 samples, 3.33%)</title><rect x="27.9184%" y="69" width="3.3281%" height="15" fill="rgb(238,167,29)"/><text x="28.1684%" y="79.50">eva..</text></g><g><title>eval_to_allocation_raw (55,295,154 samples, 3.32%)</title><rect x="27.9271%" y="53" width="3.3194%" height="15" fill="rgb(232,182,51)"/><text x="28.1771%" y="63.50">eva..</text></g><g><title>promoted_mir (2,866,771 samples, 0.17%)</title><rect x="31.0744%" y="37" width="0.1721%" height="15" fill="rgb(231,60,39)"/><text x="31.3244%" y="47.50"></text></g><g><title>eval_to_const_value_raw (61,152,211 samples, 3.67%)</title><rect x="27.5793%" y="213" width="3.6710%" height="15" fill="rgb(208,69,12)"/><text x="27.8293%" y="223.50">eval..</text></g><g><title>eval_to_const_value_raw (61,142,781 samples, 3.67%)</title><rect x="27.5799%" y="197" width="3.6704%" height="15" fill="rgb(235,93,37)"/><text x="27.8299%" y="207.50">eval..</text></g><g><title>eval_to_allocation_raw (61,138,570 samples, 3.67%)</title><rect x="27.5801%" y="181" width="3.6702%" height="15" fill="rgb(213,116,39)"/><text x="27.8301%" y="191.50">eval..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (59,928,628 samples, 3.60%)</title><rect x="27.6528%" y="165" width="3.5976%" height="15" fill="rgb(222,207,29)"/><text x="27.9028%" y="175.50">try_..</text></g><g><title>crate_lints (74,039,172 samples, 4.44%)</title><rect x="26.9534%" y="229" width="4.4446%" height="15" fill="rgb(206,96,30)"/><text x="27.2034%" y="239.50">crate..</text></g><g><title>lint_checking (91,821,653 samples, 5.51%)</title><rect x="26.9532%" y="245" width="5.5121%" height="15" fill="rgb(218,138,4)"/><text x="27.2032%" y="255.50">lint_ch..</text></g><g><title>module_lints (17,778,741 samples, 1.07%)</title><rect x="31.3980%" y="229" width="1.0673%" height="15" fill="rgb(250,191,14)"/><text x="31.6480%" y="239.50"></text></g><g><title>lint_mod (17,757,231 samples, 1.07%)</title><rect x="31.3993%" y="213" width="1.0660%" height="15" fill="rgb(239,60,40)"/><text x="31.6493%" y="223.50"></text></g><g><title>privacy_access_levels (2,968,970 samples, 0.18%)</title><rect x="32.4653%" y="245" width="0.1782%" height="15" fill="rgb(206,27,48)"/><text x="32.7153%" y="255.50"></text></g><g><title>privacy_checking_modules (13,087,003 samples, 0.79%)</title><rect x="32.6435%" y="245" width="0.7856%" height="15" fill="rgb(225,35,8)"/><text x="32.8935%" y="255.50"></text></g><g><title>check_mod_privacy (13,065,423 samples, 0.78%)</title><rect x="32.6448%" y="229" width="0.7843%" height="15" fill="rgb(250,213,24)"/><text x="32.8948%" y="239.50"></text></g><g><title>misc_checking_3 (113,634,474 samples, 6.82%)</title><rect x="26.6113%" y="261" width="6.8216%" height="15" fill="rgb(247,123,22)"/><text x="26.8613%" y="271.50">misc_chec..</text></g><g><title>impl_parent (3,124,215 samples, 0.19%)</title><rect x="33.7524%" y="197" width="0.1875%" height="15" fill="rgb(231,138,38)"/><text x="34.0024%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,708,143 samples, 0.10%)</title><rect x="33.8375%" y="181" width="0.1025%" height="15" fill="rgb(231,145,46)"/><text x="34.0875%" y="191.50"></text></g><g><title>impl_trait_ref (6,249,735 samples, 0.38%)</title><rect x="33.9400%" y="197" width="0.3752%" height="15" fill="rgb(251,118,11)"/><text x="34.1900%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,980,745 samples, 0.30%)</title><rect x="34.0162%" y="181" width="0.2990%" height="15" fill="rgb(217,147,25)"/><text x="34.2662%" y="191.50"></text></g><g><title>coherent_trait (15,403,347 samples, 0.92%)</title><rect x="33.4511%" y="229" width="0.9247%" height="15" fill="rgb(247,81,37)"/><text x="33.7011%" y="239.50"></text></g><g><title>specialization_graph_of (14,965,332 samples, 0.90%)</title><rect x="33.4774%" y="213" width="0.8984%" height="15" fill="rgb(209,12,38)"/><text x="33.7274%" y="223.50"></text></g><g><title>coherence_checking (15,600,129 samples, 0.94%)</title><rect x="33.4493%" y="245" width="0.9365%" height="15" fill="rgb(227,1,9)"/><text x="33.6993%" y="255.50"></text></g><g><title>evaluate_obligation (7,186,793 samples, 0.43%)</title><rect x="39.6780%" y="197" width="0.4314%" height="15" fill="rgb(248,47,43)"/><text x="39.9280%" y="207.50"></text></g><g><title>evaluate_obligation (2,220,870 samples, 0.13%)</title><rect x="41.8162%" y="181" width="0.1333%" height="15" fill="rgb(221,10,30)"/><text x="42.0662%" y="191.50"></text></g><g><title>typeck (29,133,838 samples, 1.75%)</title><rect x="40.3383%" y="197" width="1.7489%" height="15" fill="rgb(210,229,1)"/><text x="40.5883%" y="207.50"></text></g><g><title>item_bodies_checking (128,265,633 samples, 7.70%)</title><rect x="34.3967%" y="245" width="7.6999%" height="15" fill="rgb(222,148,37)"/><text x="34.6467%" y="255.50">item_bodies..</text></g><g><title>typeck_item_bodies (128,261,403 samples, 7.70%)</title><rect x="34.3970%" y="229" width="7.6996%" height="15" fill="rgb(234,67,33)"/><text x="34.6470%" y="239.50">typeck_item..</text></g><g><title>typeck (127,842,469 samples, 7.67%)</title><rect x="34.4221%" y="213" width="7.6745%" height="15" fill="rgb(247,98,35)"/><text x="34.6721%" y="223.50">typeck</text></g><g><title>item_types_checking (57,799,927 samples, 3.47%)</title><rect x="42.0966%" y="245" width="3.4698%" height="15" fill="rgb(247,138,52)"/><text x="42.3466%" y="255.50">ite..</text></g><g><title>check_mod_item_types (57,778,027 samples, 3.47%)</title><rect x="42.0979%" y="229" width="3.4685%" height="15" fill="rgb(213,79,30)"/><text x="42.3479%" y="239.50">che..</text></g><g><title>typeck (54,482,443 samples, 3.27%)</title><rect x="42.2957%" y="213" width="3.2706%" height="15" fill="rgb(246,177,23)"/><text x="42.5457%" y="223.50">typ..</text></g><g><title>generics_of (2,045,191 samples, 0.12%)</title><rect x="45.7474%" y="213" width="0.1228%" height="15" fill="rgb(230,62,27)"/><text x="45.9974%" y="223.50"></text></g><g><title>late_bound_vars_map (5,766,989 samples, 0.35%)</title><rect x="45.9563%" y="165" width="0.3462%" height="15" fill="rgb(216,154,8)"/><text x="46.2063%" y="175.50"></text></g><g><title>resolve_lifetimes (5,734,219 samples, 0.34%)</title><rect x="45.9583%" y="149" width="0.3442%" height="15" fill="rgb(244,35,45)"/><text x="46.2083%" y="159.50"></text></g><g><title>lint_levels (5,140,871 samples, 0.31%)</title><rect x="45.9939%" y="133" width="0.3086%" height="15" fill="rgb(251,115,12)"/><text x="46.2439%" y="143.50"></text></g><g><title>explicit_predicates_of (6,577,347 samples, 0.39%)</title><rect x="45.9124%" y="181" width="0.3948%" height="15" fill="rgb(240,54,50)"/><text x="46.1624%" y="191.50"></text></g><g><title>predicates_of (7,885,271 samples, 0.47%)</title><rect x="45.8773%" y="213" width="0.4734%" height="15" fill="rgb(233,84,52)"/><text x="46.1273%" y="223.50"></text></g><g><title>predicates_defined_on (7,672,869 samples, 0.46%)</title><rect x="45.8900%" y="197" width="0.4606%" height="15" fill="rgb(207,117,47)"/><text x="46.1400%" y="207.50"></text></g><g><title>type_collecting (15,273,414 samples, 0.92%)</title><rect x="45.5668%" y="245" width="0.9169%" height="15" fill="rgb(249,43,39)"/><text x="45.8168%" y="255.50"></text></g><g><title>collect_mod_item_types (15,241,883 samples, 0.91%)</title><rect x="45.5687%" y="229" width="0.9150%" height="15" fill="rgb(209,38,44)"/><text x="45.8187%" y="239.50"></text></g><g><title>type_of (2,064,958 samples, 0.12%)</title><rect x="46.3597%" y="213" width="0.1240%" height="15" fill="rgb(236,212,23)"/><text x="46.6097%" y="223.50"></text></g><g><title>check_impl_item_well_formed (13,650,542 samples, 0.82%)</title><rect x="46.5661%" y="229" width="0.8195%" height="15" fill="rgb(242,79,21)"/><text x="46.8161%" y="239.50"></text></g><g><title>region_scope_tree (8,026,541 samples, 0.48%)</title><rect x="47.9572%" y="213" width="0.4818%" height="15" fill="rgb(211,96,35)"/><text x="48.2072%" y="223.50"></text></g><g><title>check_item_well_formed (17,869,892 samples, 1.07%)</title><rect x="47.3856%" y="229" width="1.0727%" height="15" fill="rgb(253,215,40)"/><text x="47.6356%" y="239.50"></text></g><g><title>analysis (703,158,661 samples, 42.21%)</title><rect x="6.2529%" y="277" width="42.2111%" height="15" fill="rgb(211,81,21)"/><text x="6.5029%" y="287.50">analysis</text></g><g><title>type_check_crate (250,390,792 samples, 15.03%)</title><rect x="33.4328%" y="261" width="15.0311%" height="15" fill="rgb(208,190,38)"/><text x="33.6828%" y="271.50">type_check_crate</text></g><g><title>wf_checking (32,959,914 samples, 1.98%)</title><rect x="46.4854%" y="245" width="1.9786%" height="15" fill="rgb(235,213,38)"/><text x="46.7354%" y="255.50">w..</text></g><g><title>param_env (4,393,854 samples, 0.26%)</title><rect x="52.3526%" y="229" width="0.2638%" height="15" fill="rgb(237,122,38)"/><text x="52.6026%" y="239.50"></text></g><g><title>fn_abi_of_instance (11,355,600 samples, 0.68%)</title><rect x="52.0123%" y="245" width="0.6817%" height="15" fill="rgb(244,218,35)"/><text x="52.2623%" y="255.50"></text></g><g><title>codegen_module (70,730,012 samples, 4.25%)</title><rect x="48.6072%" y="261" width="4.2460%" height="15" fill="rgb(240,68,47)"/><text x="48.8572%" y="271.50">codeg..</text></g><g><title>codegen_crate (73,193,004 samples, 4.39%)</title><rect x="48.4645%" y="277" width="4.3938%" height="15" fill="rgb(210,16,53)"/><text x="48.7145%" y="287.50">codeg..</text></g><g><title>LLVM_module_codegen (347,860,654 samples, 20.88%)</title><rect x="52.8727%" y="261" width="20.8823%" height="15" fill="rgb(235,124,12)"/><text x="53.1227%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (329,417,216 samples, 19.78%)</title><rect x="53.9798%" y="245" width="19.7751%" height="15" fill="rgb(224,169,11)"/><text x="54.2298%" y="255.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (365,934,197 samples, 21.97%)</title><rect x="52.8583%" y="277" width="21.9673%" height="15" fill="rgb(250,166,2)"/><text x="53.1083%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (17,834,561 samples, 1.07%)</title><rect x="73.7550%" y="261" width="1.0706%" height="15" fill="rgb(242,216,29)"/><text x="74.0050%" y="271.50"></text></g><g><title>AST_validation (1,979,340 samples, 0.12%)</title><rect x="74.8377%" y="261" width="0.1188%" height="15" fill="rgb(230,116,27)"/><text x="75.0877%" y="271.50"></text></g><g><title>complete_gated_feature_checking (1,992,280 samples, 0.12%)</title><rect x="74.9565%" y="261" width="0.1196%" height="15" fill="rgb(228,99,48)"/><text x="75.2065%" y="271.50"></text></g><g><title>macro_expand_crate (168,619,842 samples, 10.12%)</title><rect x="75.0799%" y="261" width="10.1224%" height="15" fill="rgb(253,11,6)"/><text x="75.3299%" y="271.50">macro_expand_cr..</text></g><g><title>expand_crate (168,586,171 samples, 10.12%)</title><rect x="75.0819%" y="245" width="10.1203%" height="15" fill="rgb(247,143,39)"/><text x="75.3319%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (7,556,588 samples, 0.45%)</title><rect x="84.7486%" y="229" width="0.4536%" height="15" fill="rgb(236,97,10)"/><text x="84.9986%" y="239.50"></text></g><g><title>late_resolve_crate (8,012,281 samples, 0.48%)</title><rect x="85.2377%" y="245" width="0.4810%" height="15" fill="rgb(233,208,19)"/><text x="85.4877%" y="255.50"></text></g><g><title>resolve_check_unused (1,731,137 samples, 0.10%)</title><rect x="85.7232%" y="245" width="0.1039%" height="15" fill="rgb(216,164,2)"/><text x="85.9732%" y="255.50"></text></g><g><title>resolve_postprocess (1,676,668 samples, 0.10%)</title><rect x="85.8271%" y="245" width="0.1007%" height="15" fill="rgb(220,129,5)"/><text x="86.0771%" y="255.50"></text></g><g><title>configure_and_expand (184,943,438 samples, 11.10%)</title><rect x="74.8256%" y="277" width="11.1023%" height="15" fill="rgb(242,17,10)"/><text x="75.0756%" y="287.50">configure_and_ex..</text></g><g><title>resolve_crate (12,035,003 samples, 0.72%)</title><rect x="85.2054%" y="261" width="0.7225%" height="15" fill="rgb(242,107,0)"/><text x="85.4554%" y="271.50"></text></g><g><title>drop_ast (4,139,162 samples, 0.25%)</title><rect x="85.9279%" y="277" width="0.2485%" height="15" fill="rgb(251,28,31)"/><text x="86.1779%" y="287.50"></text></g><g><title>early_lint_checks (12,696,999 samples, 0.76%)</title><rect x="86.1778%" y="277" width="0.7622%" height="15" fill="rgb(233,223,10)"/><text x="86.4278%" y="287.50"></text></g><g><title>free_global_ctxt (20,186,925 samples, 1.21%)</title><rect x="86.9400%" y="277" width="1.2118%" height="15" fill="rgb(215,21,27)"/><text x="87.1900%" y="287.50"></text></g><g><title>codegen_fn_attrs (2,222,686 samples, 0.13%)</title><rect x="92.3655%" y="197" width="0.1334%" height="15" fill="rgb(232,23,21)"/><text x="92.6155%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,213,797 samples, 0.13%)</title><rect x="92.8142%" y="181" width="0.1329%" height="15" fill="rgb(244,5,23)"/><text x="93.0642%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,933,632 samples, 0.24%)</title><rect x="92.9471%" y="181" width="0.2361%" height="15" fill="rgb(226,81,46)"/><text x="93.1971%" y="191.50"></text></g><g><title>optimized_mir (11,068,178 samples, 0.66%)</title><rect x="92.5308%" y="197" width="0.6644%" height="15" fill="rgb(247,70,30)"/><text x="92.7808%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (3,152,381 samples, 0.19%)</title><rect x="93.2540%" y="181" width="0.1892%" height="15" fill="rgb(212,68,19)"/><text x="93.5040%" y="191.50"></text></g><g><title>specialization_graph_of (1,785,940 samples, 0.11%)</title><rect x="93.5090%" y="181" width="0.1072%" height="15" fill="rgb(240,187,13)"/><text x="93.7590%" y="191.50"></text></g><g><title>resolve_instance (7,375,476 samples, 0.44%)</title><rect x="93.1953%" y="197" width="0.4428%" height="15" fill="rgb(223,113,26)"/><text x="93.4453%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (26,647,721 samples, 1.60%)</title><rect x="92.2087%" y="213" width="1.5997%" height="15" fill="rgb(206,192,2)"/><text x="92.4587%" y="223.50"></text></g><g><title>monomorphization_collector (27,042,495 samples, 1.62%)</title><rect x="92.2083%" y="229" width="1.6234%" height="15" fill="rgb(241,108,4)"/><text x="92.4583%" y="239.50"></text></g><g><title>assert_symbols_are_distinct (1,959,120 samples, 0.12%)</title><rect x="93.8334%" y="213" width="0.1176%" height="15" fill="rgb(247,173,49)"/><text x="94.0834%" y="223.50"></text></g><g><title>symbol_name (1,779,028 samples, 0.11%)</title><rect x="93.8443%" y="197" width="0.1068%" height="15" fill="rgb(224,114,35)"/><text x="94.0943%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (30,107,036 samples, 1.81%)</title><rect x="92.2054%" y="245" width="1.8073%" height="15" fill="rgb(245,159,27)"/><text x="92.4554%" y="255.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (3,016,130 samples, 0.18%)</title><rect x="93.8317%" y="229" width="0.1811%" height="15" fill="rgb(245,172,44)"/><text x="94.0817%" y="239.50"></text></g><g><title>exported_symbols (31,491,569 samples, 1.89%)</title><rect x="92.1999%" y="261" width="1.8905%" height="15" fill="rgb(236,23,11)"/><text x="92.4499%" y="271.50">e..</text></g><g><title>layout_of (2,804,594 samples, 0.17%)</title><rect x="94.7982%" y="245" width="0.1684%" height="15" fill="rgb(205,117,38)"/><text x="95.0482%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (14,544,723 samples, 0.87%)</title><rect x="94.9666%" y="245" width="0.8731%" height="15" fill="rgb(237,72,25)"/><text x="95.2166%" y="255.50"></text></g><g><title>optimized_mir (29,051,289 samples, 1.74%)</title><rect x="94.1080%" y="261" width="1.7440%" height="15" fill="rgb(244,70,9)"/><text x="94.3580%" y="271.50"></text></g><g><title>generate_crate_metadata (129,094,380 samples, 7.75%)</title><rect x="88.1518%" y="277" width="7.7496%" height="15" fill="rgb(217,125,39)"/><text x="88.4018%" y="287.50">generate_cr..</text></g><g><title>hir_lowering (42,874,605 samples, 2.57%)</title><rect x="95.9014%" y="277" width="2.5738%" height="15" fill="rgb(235,36,10)"/><text x="96.1514%" y="287.50">hi..</text></g><g><title>finish_ongoing_codegen (9,671,378 samples, 0.58%)</title><rect x="98.4763%" y="261" width="0.5806%" height="15" fill="rgb(251,123,47)"/><text x="98.7263%" y="271.50"></text></g><g><title>link_crate (9,285,344 samples, 0.56%)</title><rect x="99.0569%" y="261" width="0.5574%" height="15" fill="rgb(221,13,13)"/><text x="99.3069%" y="271.50"></text></g><g><title>link_binary (9,135,912 samples, 0.55%)</title><rect x="99.0659%" y="245" width="0.5484%" height="15" fill="rgb(238,131,9)"/><text x="99.3159%" y="255.50"></text></g><g><title>link_rlib (8,057,651 samples, 0.48%)</title><rect x="99.1306%" y="229" width="0.4837%" height="15" fill="rgb(211,50,8)"/><text x="99.3806%" y="239.50"></text></g><g><title>link (18,984,032 samples, 1.14%)</title><rect x="98.4752%" y="277" width="1.1396%" height="15" fill="rgb(245,182,24)"/><text x="98.7252%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (2,553,126 samples, 0.15%)</title><rect x="99.6669%" y="277" width="0.1533%" height="15" fill="rgb(242,14,37)"/><text x="99.9169%" y="287.50"></text></g><g><title>all (1,665,815,545 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (1,665,815,545 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (2,816,609 samples, 0.17%)</title><rect x="99.8309%" y="277" width="0.1691%" height="15" fill="rgb(209,9,3)"/><text x="100.0809%" y="287.50"></text></g></svg></svg>