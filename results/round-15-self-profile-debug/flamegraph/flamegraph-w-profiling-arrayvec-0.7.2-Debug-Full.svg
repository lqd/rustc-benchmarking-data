<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (28,616,157 samples, 7.12%)</title><rect x="0.1939%" y="181" width="7.1161%" height="15" fill="rgb(227,0,7)"/><text x="0.4439%" y="191.50">LLVM_passes</text></g><g><title>mir_promoted (2,334,626 samples, 0.58%)</title><rect x="14.7986%" y="117" width="0.5806%" height="15" fill="rgb(217,0,24)"/><text x="15.0486%" y="127.50"></text></g><g><title>mir_const_qualif_const_arg (1,965,492 samples, 0.49%)</title><rect x="14.8904%" y="101" width="0.4888%" height="15" fill="rgb(221,193,54)"/><text x="15.1404%" y="111.50"></text></g><g><title>mir_const (1,654,349 samples, 0.41%)</title><rect x="14.9678%" y="85" width="0.4114%" height="15" fill="rgb(248,212,6)"/><text x="15.2178%" y="95.50"></text></g><g><title>unsafety_check_result_for_const_arg (1,115,792 samples, 0.28%)</title><rect x="15.1017%" y="69" width="0.2775%" height="15" fill="rgb(208,68,35)"/><text x="15.3517%" y="79.50"></text></g><g><title>mir_built (963,350 samples, 0.24%)</title><rect x="15.1396%" y="53" width="0.2396%" height="15" fill="rgb(232,128,0)"/><text x="15.3896%" y="63.50"></text></g><g><title>mir_borrowck_const_arg (5,783,689 samples, 1.44%)</title><rect x="13.9455%" y="133" width="1.4383%" height="15" fill="rgb(207,160,47)"/><text x="14.1955%" y="143.50"></text></g><g><title>param_env (648,136 samples, 0.16%)</title><rect x="16.2851%" y="101" width="0.1612%" height="15" fill="rgb(228,23,34)"/><text x="16.5351%" y="111.50"></text></g><g><title>item_attrs (496,373 samples, 0.12%)</title><rect x="16.7570%" y="69" width="0.1234%" height="15" fill="rgb(218,30,26)"/><text x="17.0070%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (481,263 samples, 0.12%)</title><rect x="16.7608%" y="53" width="0.1197%" height="15" fill="rgb(220,122,19)"/><text x="17.0108%" y="63.50"></text></g><g><title>codegen_fn_attrs (700,704 samples, 0.17%)</title><rect x="16.7127%" y="85" width="0.1742%" height="15" fill="rgb(250,228,42)"/><text x="16.9627%" y="95.50"></text></g><g><title>needs_drop_raw (1,666,876 samples, 0.41%)</title><rect x="18.3251%" y="69" width="0.4145%" height="15" fill="rgb(240,193,28)"/><text x="18.5751%" y="79.50"></text></g><g><title>is_copy_raw (1,316,614 samples, 0.33%)</title><rect x="18.4122%" y="53" width="0.3274%" height="15" fill="rgb(216,20,37)"/><text x="18.6622%" y="63.50"></text></g><g><title>evaluate_obligation (1,110,663 samples, 0.28%)</title><rect x="18.4634%" y="37" width="0.2762%" height="15" fill="rgb(206,188,39)"/><text x="18.7134%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (822,910 samples, 0.20%)</title><rect x="18.9108%" y="53" width="0.2046%" height="15" fill="rgb(217,207,13)"/><text x="19.1608%" y="63.50"></text></g><g><title>resolve_instance (2,007,065 samples, 0.50%)</title><rect x="18.7468%" y="69" width="0.4991%" height="15" fill="rgb(231,73,38)"/><text x="18.9968%" y="79.50"></text></g><g><title>thir_body (2,243,064 samples, 0.56%)</title><rect x="19.2607%" y="69" width="0.5578%" height="15" fill="rgb(225,20,46)"/><text x="19.5107%" y="79.50"></text></g><g><title>mir_const (16,043,690 samples, 3.99%)</title><rect x="15.8428%" y="117" width="3.9896%" height="15" fill="rgb(210,31,41)"/><text x="16.0928%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (13,616,806 samples, 3.39%)</title><rect x="16.4463%" y="101" width="3.3861%" height="15" fill="rgb(221,200,47)"/><text x="16.6963%" y="111.50">uns..</text></g><g><title>mir_built (11,844,979 samples, 2.95%)</title><rect x="16.8869%" y="85" width="2.9455%" height="15" fill="rgb(226,26,5)"/><text x="17.1369%" y="95.50">mi..</text></g><g><title>mir_const (1,005,409 samples, 0.25%)</title><rect x="19.9640%" y="101" width="0.2500%" height="15" fill="rgb(249,33,26)"/><text x="20.2140%" y="111.50"></text></g><g><title>unsafety_check_result (775,958 samples, 0.19%)</title><rect x="20.0211%" y="85" width="0.1930%" height="15" fill="rgb(235,183,28)"/><text x="20.2711%" y="95.50"></text></g><g><title>mir_built (688,548 samples, 0.17%)</title><rect x="20.0428%" y="69" width="0.1712%" height="15" fill="rgb(221,5,38)"/><text x="20.2928%" y="79.50"></text></g><g><title>mir_const_qualif (1,715,116 samples, 0.43%)</title><rect x="19.8324%" y="117" width="0.4265%" height="15" fill="rgb(247,18,42)"/><text x="20.0824%" y="127.50"></text></g><g><title>mir_promoted (19,605,116 samples, 4.88%)</title><rect x="15.3837%" y="133" width="4.8753%" height="15" fill="rgb(241,131,45)"/><text x="15.6337%" y="143.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (775,086 samples, 0.19%)</title><rect x="20.2600%" y="133" width="0.1927%" height="15" fill="rgb(249,31,29)"/><text x="20.5100%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,005,088 samples, 0.25%)</title><rect x="20.4527%" y="133" width="0.2499%" height="15" fill="rgb(225,111,53)"/><text x="20.7027%" y="143.50"></text></g><g><title>normalize_projection_ty (549,324 samples, 0.14%)</title><rect x="20.5661%" y="117" width="0.1366%" height="15" fill="rgb(238,160,17)"/><text x="20.8161%" y="127.50"></text></g><g><title>type_op_normalize_ty (526,586 samples, 0.13%)</title><rect x="20.7448%" y="133" width="0.1309%" height="15" fill="rgb(214,148,48)"/><text x="20.9948%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,941,122 samples, 0.98%)</title><rect x="20.8758%" y="133" width="0.9801%" height="15" fill="rgb(232,36,49)"/><text x="21.1258%" y="143.50"></text></g><g><title>MIR_borrow_checking (57,996,190 samples, 14.42%)</title><rect x="7.4355%" y="165" width="14.4221%" height="15" fill="rgb(209,103,24)"/><text x="7.6855%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (57,513,215 samples, 14.30%)</title><rect x="7.5556%" y="149" width="14.3020%" height="15" fill="rgb(229,88,8)"/><text x="7.8056%" y="159.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (820,969 samples, 0.20%)</title><rect x="22.0973%" y="133" width="0.2042%" height="15" fill="rgb(213,181,19)"/><text x="22.3473%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,489,114 samples, 0.37%)</title><rect x="21.9374%" y="149" width="0.3703%" height="15" fill="rgb(254,191,54)"/><text x="22.1874%" y="159.50"></text></g><g><title>MIR_effect_checking (1,832,919 samples, 0.46%)</title><rect x="21.8576%" y="165" width="0.4558%" height="15" fill="rgb(241,83,37)"/><text x="22.1076%" y="175.50"></text></g><g><title>should_inherit_track_caller (537,045 samples, 0.13%)</title><rect x="22.5667%" y="117" width="0.1335%" height="15" fill="rgb(233,36,39)"/><text x="22.8167%" y="127.50"></text></g><g><title>codegen_fn_attrs (768,016 samples, 0.19%)</title><rect x="22.5131%" y="133" width="0.1910%" height="15" fill="rgb(226,3,54)"/><text x="22.7631%" y="143.50"></text></g><g><title>check_mod_attrs (1,177,592 samples, 0.29%)</title><rect x="22.4113%" y="149" width="0.2928%" height="15" fill="rgb(245,192,40)"/><text x="22.6613%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (824,768 samples, 0.21%)</title><rect x="22.8122%" y="149" width="0.2051%" height="15" fill="rgb(238,167,29)"/><text x="23.0622%" y="159.50"></text></g><g><title>misc_checking_1 (2,539,505 samples, 0.63%)</title><rect x="22.4038%" y="165" width="0.6315%" height="15" fill="rgb(232,182,51)"/><text x="22.6538%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,066,681 samples, 0.27%)</title><rect x="23.0357%" y="149" width="0.2653%" height="15" fill="rgb(231,60,39)"/><text x="23.2857%" y="159.50"></text></g><g><title>check_mod_liveness (858,188 samples, 0.21%)</title><rect x="23.0876%" y="133" width="0.2134%" height="15" fill="rgb(208,69,12)"/><text x="23.3376%" y="143.50"></text></g><g><title>misc_checking_2 (2,134,712 samples, 0.53%)</title><rect x="23.0353%" y="165" width="0.5308%" height="15" fill="rgb(235,93,37)"/><text x="23.2853%" y="175.50"></text></g><g><title>match_checking (1,066,311 samples, 0.27%)</title><rect x="23.3010%" y="149" width="0.2652%" height="15" fill="rgb(213,116,39)"/><text x="23.5510%" y="159.50"></text></g><g><title>check_match (939,078 samples, 0.23%)</title><rect x="23.3326%" y="133" width="0.2335%" height="15" fill="rgb(222,207,29)"/><text x="23.5826%" y="143.50"></text></g><g><title>check_private_in_public (442,724 samples, 0.11%)</title><rect x="23.5687%" y="149" width="0.1101%" height="15" fill="rgb(206,96,30)"/><text x="23.8187%" y="159.50"></text></g><g><title>death_checking (853,289 samples, 0.21%)</title><rect x="23.6788%" y="149" width="0.2122%" height="15" fill="rgb(218,138,4)"/><text x="23.9288%" y="159.50"></text></g><g><title>param_env (695,558 samples, 0.17%)</title><rect x="24.2290%" y="117" width="0.1730%" height="15" fill="rgb(250,191,14)"/><text x="24.4790%" y="127.50"></text></g><g><title>crate_lints (3,191,932 samples, 0.79%)</title><rect x="23.8914%" y="133" width="0.7937%" height="15" fill="rgb(239,60,40)"/><text x="24.1414%" y="143.50"></text></g><g><title>type_of (1,131,041 samples, 0.28%)</title><rect x="24.4039%" y="117" width="0.2813%" height="15" fill="rgb(206,27,48)"/><text x="24.6539%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (900,180 samples, 0.22%)</title><rect x="24.4613%" y="101" width="0.2239%" height="15" fill="rgb(225,35,8)"/><text x="24.7113%" y="111.50"></text></g><g><title>lint_checking (3,982,280 samples, 0.99%)</title><rect x="23.8910%" y="149" width="0.9903%" height="15" fill="rgb(250,213,24)"/><text x="24.1410%" y="159.50"></text></g><g><title>module_lints (788,688 samples, 0.20%)</title><rect x="24.6851%" y="133" width="0.1961%" height="15" fill="rgb(247,123,22)"/><text x="24.9351%" y="143.50"></text></g><g><title>lint_mod (780,928 samples, 0.19%)</title><rect x="24.6870%" y="117" width="0.1942%" height="15" fill="rgb(231,138,38)"/><text x="24.9370%" y="127.50"></text></g><g><title>privacy_access_levels (613,096 samples, 0.15%)</title><rect x="24.8812%" y="149" width="0.1525%" height="15" fill="rgb(231,145,46)"/><text x="25.1312%" y="159.50"></text></g><g><title>privacy_checking_modules (1,663,427 samples, 0.41%)</title><rect x="25.0337%" y="149" width="0.4137%" height="15" fill="rgb(251,118,11)"/><text x="25.2837%" y="159.50"></text></g><g><title>check_mod_privacy (1,658,147 samples, 0.41%)</title><rect x="25.0350%" y="133" width="0.4123%" height="15" fill="rgb(217,147,25)"/><text x="25.2850%" y="143.50"></text></g><g><title>misc_checking_3 (7,591,486 samples, 1.89%)</title><rect x="23.5661%" y="165" width="1.8878%" height="15" fill="rgb(247,81,37)"/><text x="23.8161%" y="175.50">m..</text></g><g><title>impl_parent (3,624,600 samples, 0.90%)</title><rect x="27.3743%" y="101" width="0.9013%" height="15" fill="rgb(209,12,38)"/><text x="27.6243%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,993,034 samples, 0.50%)</title><rect x="27.7800%" y="85" width="0.4956%" height="15" fill="rgb(227,1,9)"/><text x="28.0300%" y="95.50"></text></g><g><title>impl_trait_ref (7,182,517 samples, 1.79%)</title><rect x="28.2762%" y="101" width="1.7861%" height="15" fill="rgb(248,47,43)"/><text x="28.5262%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,578,486 samples, 1.39%)</title><rect x="28.6751%" y="85" width="1.3872%" height="15" fill="rgb(221,10,30)"/><text x="28.9251%" y="95.50"></text></g><g><title>trait_impls_of (1,396,119 samples, 0.35%)</title><rect x="30.1668%" y="101" width="0.3472%" height="15" fill="rgb(210,229,1)"/><text x="30.4168%" y="111.50"></text></g><g><title>implementations_of_trait (419,705 samples, 0.10%)</title><rect x="30.4096%" y="85" width="0.1044%" height="15" fill="rgb(222,148,37)"/><text x="30.6596%" y="95.50"></text></g><g><title>coherent_trait (19,907,109 samples, 4.95%)</title><rect x="25.5693%" y="133" width="4.9504%" height="15" fill="rgb(234,67,33)"/><text x="25.8193%" y="143.50">cohere..</text></g><g><title>specialization_graph_of (19,182,992 samples, 4.77%)</title><rect x="25.7494%" y="117" width="4.7703%" height="15" fill="rgb(247,98,35)"/><text x="25.9994%" y="127.50">specia..</text></g><g><title>coherence_checking (20,064,341 samples, 4.99%)</title><rect x="25.5606%" y="149" width="4.9895%" height="15" fill="rgb(247,138,52)"/><text x="25.8106%" y="159.50">cohere..</text></g><g><title>associated_item (729,521 samples, 0.18%)</title><rect x="40.7016%" y="85" width="0.1814%" height="15" fill="rgb(213,79,30)"/><text x="40.9516%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (584,698 samples, 0.15%)</title><rect x="40.7376%" y="69" width="0.1454%" height="15" fill="rgb(246,177,23)"/><text x="40.9876%" y="79.50"></text></g><g><title>associated_items (1,042,703 samples, 0.26%)</title><rect x="40.6360%" y="101" width="0.2593%" height="15" fill="rgb(230,62,27)"/><text x="40.8860%" y="111.50"></text></g><g><title>dropck_outlives (680,287 samples, 0.17%)</title><rect x="40.9253%" y="101" width="0.1692%" height="15" fill="rgb(216,154,8)"/><text x="41.1753%" y="111.50"></text></g><g><title>specializes (414,182 samples, 0.10%)</title><rect x="41.9342%" y="85" width="0.1030%" height="15" fill="rgb(244,35,45)"/><text x="42.1842%" y="95.50"></text></g><g><title>evaluate_obligation (4,201,483 samples, 1.04%)</title><rect x="41.0945%" y="101" width="1.0448%" height="15" fill="rgb(251,115,12)"/><text x="41.3445%" y="111.50"></text></g><g><title>evaluate_obligation (464,764 samples, 0.12%)</title><rect x="42.5952%" y="85" width="0.1156%" height="15" fill="rgb(240,54,50)"/><text x="42.8452%" y="95.50"></text></g><g><title>method_autoderef_steps (1,154,375 samples, 0.29%)</title><rect x="42.4254%" y="101" width="0.2871%" height="15" fill="rgb(233,84,52)"/><text x="42.6754%" y="111.50"></text></g><g><title>opt_const_param_of (2,496,307 samples, 0.62%)</title><rect x="42.7125%" y="101" width="0.6208%" height="15" fill="rgb(207,117,47)"/><text x="42.9625%" y="111.50"></text></g><g><title>typeck (2,388,975 samples, 0.59%)</title><rect x="42.7392%" y="85" width="0.5941%" height="15" fill="rgb(249,43,39)"/><text x="42.9892%" y="95.50"></text></g><g><title>predicates_of (533,892 samples, 0.13%)</title><rect x="43.3885%" y="101" width="0.1328%" height="15" fill="rgb(209,38,44)"/><text x="43.6385%" y="111.50"></text></g><g><title>evaluate_obligation (431,414 samples, 0.11%)</title><rect x="44.9316%" y="85" width="0.1073%" height="15" fill="rgb(236,212,23)"/><text x="45.1816%" y="95.50"></text></g><g><title>typeck (6,330,944 samples, 1.57%)</title><rect x="43.5686%" y="101" width="1.5743%" height="15" fill="rgb(242,79,21)"/><text x="43.8186%" y="111.50"></text></g><g><title>param_env (916,946 samples, 0.23%)</title><rect x="45.6412%" y="85" width="0.2280%" height="15" fill="rgb(211,96,35)"/><text x="45.8912%" y="95.50"></text></g><g><title>predicates_of (427,872 samples, 0.11%)</title><rect x="45.7628%" y="69" width="0.1064%" height="15" fill="rgb(253,215,40)"/><text x="46.0128%" y="79.50"></text></g><g><title>typeck_const_arg (3,286,018 samples, 0.82%)</title><rect x="45.1429%" y="101" width="0.8171%" height="15" fill="rgb(211,81,21)"/><text x="45.3929%" y="111.50"></text></g><g><title>item_bodies_checking (61,994,331 samples, 15.42%)</title><rect x="30.5697%" y="149" width="15.4164%" height="15" fill="rgb(208,190,38)"/><text x="30.8197%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (61,990,711 samples, 15.42%)</title><rect x="30.5706%" y="133" width="15.4155%" height="15" fill="rgb(235,213,38)"/><text x="30.8206%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (61,650,478 samples, 15.33%)</title><rect x="30.6553%" y="117" width="15.3308%" height="15" fill="rgb(237,122,38)"/><text x="30.9053%" y="127.50">typeck</text></g><g><title>item_types_checking (4,043,501 samples, 1.01%)</title><rect x="45.9861%" y="149" width="1.0055%" height="15" fill="rgb(244,218,35)"/><text x="46.2361%" y="159.50"></text></g><g><title>check_mod_item_types (4,036,591 samples, 1.00%)</title><rect x="45.9878%" y="133" width="1.0038%" height="15" fill="rgb(240,68,47)"/><text x="46.2378%" y="143.50"></text></g><g><title>typeck (510,635 samples, 0.13%)</title><rect x="46.8646%" y="117" width="0.1270%" height="15" fill="rgb(210,16,53)"/><text x="47.1146%" y="127.50"></text></g><g><title>fn_sig (1,002,619 samples, 0.25%)</title><rect x="47.1439%" y="117" width="0.2493%" height="15" fill="rgb(235,124,12)"/><text x="47.3939%" y="127.50"></text></g><g><title>generics_of (838,201 samples, 0.21%)</title><rect x="47.3933%" y="117" width="0.2084%" height="15" fill="rgb(224,169,11)"/><text x="47.6433%" y="127.50"></text></g><g><title>explicit_predicates_of (849,779 samples, 0.21%)</title><rect x="47.7279%" y="85" width="0.2113%" height="15" fill="rgb(250,166,2)"/><text x="47.9779%" y="95.50"></text></g><g><title>predicates_of (1,418,715 samples, 0.35%)</title><rect x="47.6551%" y="117" width="0.3528%" height="15" fill="rgb(242,216,29)"/><text x="47.9051%" y="127.50"></text></g><g><title>predicates_defined_on (1,306,214 samples, 0.32%)</title><rect x="47.6831%" y="101" width="0.3248%" height="15" fill="rgb(230,116,27)"/><text x="47.9331%" y="111.50"></text></g><g><title>type_collecting (4,375,144 samples, 1.09%)</title><rect x="46.9928%" y="149" width="1.0880%" height="15" fill="rgb(228,99,48)"/><text x="47.2428%" y="159.50"></text></g><g><title>collect_mod_item_types (4,359,383 samples, 1.08%)</title><rect x="46.9967%" y="133" width="1.0841%" height="15" fill="rgb(253,11,6)"/><text x="47.2467%" y="143.50"></text></g><g><title>evaluate_obligation (808,690 samples, 0.20%)</title><rect x="49.4872%" y="117" width="0.2011%" height="15" fill="rgb(247,143,39)"/><text x="49.7372%" y="127.50"></text></g><g><title>implied_outlives_bounds (474,673 samples, 0.12%)</title><rect x="49.6951%" y="117" width="0.1180%" height="15" fill="rgb(236,97,10)"/><text x="49.9451%" y="127.50"></text></g><g><title>param_env (824,723 samples, 0.21%)</title><rect x="49.8132%" y="117" width="0.2051%" height="15" fill="rgb(233,208,19)"/><text x="50.0632%" y="127.50"></text></g><g><title>region_scope_tree (735,691 samples, 0.18%)</title><rect x="50.0382%" y="117" width="0.1829%" height="15" fill="rgb(216,164,2)"/><text x="50.2882%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,042,354 samples, 2.00%)</title><rect x="48.2281%" y="133" width="1.9999%" height="15" fill="rgb(220,129,5)"/><text x="48.4781%" y="143.50">c..</text></g><g><title>param_env (556,377 samples, 0.14%)</title><rect x="51.1768%" y="117" width="0.1384%" height="15" fill="rgb(242,17,10)"/><text x="51.4268%" y="127.50"></text></g><g><title>check_item_well_formed (4,883,374 samples, 1.21%)</title><rect x="50.2281%" y="133" width="1.2144%" height="15" fill="rgb(242,107,0)"/><text x="50.4781%" y="143.50"></text></g><g><title>analysis (178,413,927 samples, 44.37%)</title><rect x="7.3100%" y="181" width="44.3668%" height="15" fill="rgb(251,28,31)"/><text x="7.5600%" y="191.50">analysis</text></g><g><title>type_check_crate (105,451,096 samples, 26.22%)</title><rect x="25.4539%" y="165" width="26.2229%" height="15" fill="rgb(233,223,10)"/><text x="25.7039%" y="175.50">type_check_crate</text></g><g><title>wf_checking (14,437,634 samples, 3.59%)</title><rect x="48.0866%" y="149" width="3.5903%" height="15" fill="rgb(215,21,27)"/><text x="48.3366%" y="159.50">wf_c..</text></g><g><title>check_trait_item_well_formed (942,590 samples, 0.23%)</title><rect x="51.4424%" y="133" width="0.2344%" height="15" fill="rgb(232,23,21)"/><text x="51.6924%" y="143.50"></text></g><g><title>layout_of (996,171 samples, 0.25%)</title><rect x="57.2630%" y="133" width="0.2477%" height="15" fill="rgb(244,5,23)"/><text x="57.5130%" y="143.50"></text></g><g><title>param_env (1,611,539 samples, 0.40%)</title><rect x="57.5107%" y="133" width="0.4007%" height="15" fill="rgb(226,81,46)"/><text x="57.7607%" y="143.50"></text></g><g><title>predicates_of (530,700 samples, 0.13%)</title><rect x="57.7795%" y="117" width="0.1320%" height="15" fill="rgb(247,70,30)"/><text x="58.0295%" y="127.50"></text></g><g><title>fn_abi_of_instance (4,014,750 samples, 1.00%)</title><rect x="56.9598%" y="149" width="0.9984%" height="15" fill="rgb(212,68,19)"/><text x="57.2098%" y="159.50"></text></g><g><title>layout_of (468,824 samples, 0.12%)</title><rect x="58.0083%" y="149" width="0.1166%" height="15" fill="rgb(240,187,13)"/><text x="58.2583%" y="159.50"></text></g><g><title>codegen_module (23,131,954 samples, 5.75%)</title><rect x="52.4174%" y="165" width="5.7523%" height="15" fill="rgb(223,113,26)"/><text x="52.6674%" y="175.50">codegen..</text></g><g><title>codegen_crate (26,173,902 samples, 6.51%)</title><rect x="51.6794%" y="181" width="6.5088%" height="15" fill="rgb(206,192,2)"/><text x="51.9294%" y="191.50">codegen_c..</text></g><g><title>LLVM_module_codegen (70,900,849 samples, 17.63%)</title><rect x="58.2307%" y="165" width="17.6312%" height="15" fill="rgb(241,108,4)"/><text x="58.4807%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (66,814,916 samples, 16.62%)</title><rect x="59.2468%" y="149" width="16.6151%" height="15" fill="rgb(247,173,49)"/><text x="59.4968%" y="159.50">LLVM_module_codegen_emit_o..</text></g><g><title>codegen_module_optimize (75,473,770 samples, 18.77%)</title><rect x="58.1882%" y="181" width="18.7683%" height="15" fill="rgb(224,114,35)"/><text x="58.4382%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,401,778 samples, 1.09%)</title><rect x="75.8619%" y="165" width="1.0946%" height="15" fill="rgb(245,159,27)"/><text x="76.1119%" y="175.50"></text></g><g><title>AST_validation (568,906 samples, 0.14%)</title><rect x="77.0134%" y="165" width="0.1415%" height="15" fill="rgb(245,172,44)"/><text x="77.2634%" y="175.50"></text></g><g><title>metadata_load_macro (587,373 samples, 0.15%)</title><rect x="86.4091%" y="133" width="0.1461%" height="15" fill="rgb(236,23,11)"/><text x="86.6591%" y="143.50"></text></g><g><title>metadata_register_crate (2,705,077 samples, 0.67%)</title><rect x="86.5552%" y="133" width="0.6727%" height="15" fill="rgb(205,117,38)"/><text x="86.8052%" y="143.50"></text></g><g><title>metadata_register_crate (982,980 samples, 0.24%)</title><rect x="86.9834%" y="117" width="0.2444%" height="15" fill="rgb(237,72,25)"/><text x="87.2334%" y="127.50"></text></g><g><title>macro_expand_crate (41,125,382 samples, 10.23%)</title><rect x="77.2053%" y="165" width="10.2268%" height="15" fill="rgb(244,70,9)"/><text x="77.4553%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (41,107,831 samples, 10.22%)</title><rect x="77.2097%" y="149" width="10.2224%" height="15" fill="rgb(217,125,39)"/><text x="77.4597%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (821,418 samples, 0.20%)</title><rect x="87.2278%" y="133" width="0.2043%" height="15" fill="rgb(235,36,10)"/><text x="87.4778%" y="143.50"></text></g><g><title>late_resolve_crate (6,085,321 samples, 1.51%)</title><rect x="87.5633%" y="149" width="1.5133%" height="15" fill="rgb(251,123,47)"/><text x="87.8133%" y="159.50"></text></g><g><title>configure_and_expand (48,945,980 samples, 12.17%)</title><rect x="76.9565%" y="181" width="12.1716%" height="15" fill="rgb(221,13,13)"/><text x="77.2065%" y="191.50">configure_and_expa..</text></g><g><title>resolve_crate (6,740,688 samples, 1.68%)</title><rect x="87.4519%" y="165" width="1.6762%" height="15" fill="rgb(238,131,9)"/><text x="87.7019%" y="175.50"></text></g><g><title>drop_ast (414,584 samples, 0.10%)</title><rect x="89.1281%" y="181" width="0.1031%" height="15" fill="rgb(211,50,8)"/><text x="89.3781%" y="191.50"></text></g><g><title>early_lint_checks (631,136 samples, 0.16%)</title><rect x="89.2369%" y="181" width="0.1569%" height="15" fill="rgb(245,182,24)"/><text x="89.4869%" y="191.50"></text></g><g><title>free_global_ctxt (5,767,708 samples, 1.43%)</title><rect x="89.3938%" y="181" width="1.4343%" height="15" fill="rgb(242,14,37)"/><text x="89.6438%" y="191.50"></text></g><g><title>codegen_fn_attrs (463,653 samples, 0.12%)</title><rect x="92.0241%" y="101" width="0.1153%" height="15" fill="rgb(246,228,12)"/><text x="92.2741%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (468,124 samples, 0.12%)</title><rect x="92.2183%" y="85" width="0.1164%" height="15" fill="rgb(213,55,15)"/><text x="92.4683%" y="95.50"></text></g><g><title>optimized_mir (550,446 samples, 0.14%)</title><rect x="92.2060%" y="101" width="0.1369%" height="15" fill="rgb(209,9,3)"/><text x="92.4560%" y="111.50"></text></g><g><title>resolve_instance (750,019 samples, 0.19%)</title><rect x="92.3428%" y="101" width="0.1865%" height="15" fill="rgb(230,59,30)"/><text x="92.5928%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (3,195,862 samples, 0.79%)</title><rect x="91.9171%" y="117" width="0.7947%" height="15" fill="rgb(209,121,21)"/><text x="92.1671%" y="127.50"></text></g><g><title>vtable_entries (524,045 samples, 0.13%)</title><rect x="92.5815%" y="101" width="0.1303%" height="15" fill="rgb(220,109,13)"/><text x="92.8315%" y="111.50"></text></g><g><title>monomorphization_collector (3,237,302 samples, 0.81%)</title><rect x="91.9159%" y="133" width="0.8050%" height="15" fill="rgb(232,18,1)"/><text x="92.1659%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (435,374 samples, 0.11%)</title><rect x="92.7225%" y="117" width="0.1083%" height="15" fill="rgb(215,41,42)"/><text x="92.9725%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (3,945,559 samples, 0.98%)</title><rect x="91.9094%" y="149" width="0.9812%" height="15" fill="rgb(224,123,36)"/><text x="92.1594%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (681,937 samples, 0.17%)</title><rect x="92.7210%" y="133" width="0.1696%" height="15" fill="rgb(240,125,3)"/><text x="92.9710%" y="143.50"></text></g><g><title>exported_symbols (4,312,893 samples, 1.07%)</title><rect x="91.9018%" y="165" width="1.0725%" height="15" fill="rgb(205,98,50)"/><text x="92.1518%" y="175.50"></text></g><g><title>mir_for_ctfe (480,827 samples, 0.12%)</title><rect x="92.9916%" y="165" width="0.1196%" height="15" fill="rgb(205,185,37)"/><text x="93.2416%" y="175.50"></text></g><g><title>layout_of (1,597,851 samples, 0.40%)</title><rect x="94.8580%" y="149" width="0.3973%" height="15" fill="rgb(238,207,15)"/><text x="95.1080%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,063,598 samples, 1.76%)</title><rect x="95.2554%" y="149" width="1.7565%" height="15" fill="rgb(213,199,42)"/><text x="95.5054%" y="159.50"></text></g><g><title>optimized_mir (15,893,334 samples, 3.95%)</title><rect x="93.1304%" y="165" width="3.9523%" height="15" fill="rgb(235,201,11)"/><text x="93.3804%" y="175.50">opti..</text></g><g><title>generate_crate_metadata (25,545,956 samples, 6.35%)</title><rect x="90.8281%" y="181" width="6.3526%" height="15" fill="rgb(207,46,11)"/><text x="91.0781%" y="191.50">generate..</text></g><g><title>hir_lowering (5,775,828 samples, 1.44%)</title><rect x="97.1807%" y="181" width="1.4363%" height="15" fill="rgb(241,35,35)"/><text x="97.4307%" y="191.50"></text></g><g><title>link_crate (1,978,030 samples, 0.49%)</title><rect x="98.6233%" y="165" width="0.4919%" height="15" fill="rgb(243,32,47)"/><text x="98.8733%" y="175.50"></text></g><g><title>link_binary (1,936,650 samples, 0.48%)</title><rect x="98.6336%" y="149" width="0.4816%" height="15" fill="rgb(247,202,23)"/><text x="98.8836%" y="159.50"></text></g><g><title>link_rlib (1,354,904 samples, 0.34%)</title><rect x="98.7782%" y="133" width="0.3369%" height="15" fill="rgb(219,102,11)"/><text x="99.0282%" y="143.50"></text></g><g><title>link (2,014,010 samples, 0.50%)</title><rect x="98.6170%" y="181" width="0.5008%" height="15" fill="rgb(243,110,44)"/><text x="98.8670%" y="191.50"></text></g><g><title>parse_crate (479,955 samples, 0.12%)</title><rect x="99.1179%" y="181" width="0.1194%" height="15" fill="rgb(222,74,54)"/><text x="99.3679%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,316,733 samples, 0.58%)</title><rect x="99.2865%" y="181" width="0.5761%" height="15" fill="rgb(216,99,12)"/><text x="99.5365%" y="191.50"></text></g><g><title>all (402,133,531 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (402,133,531 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (470,584 samples, 0.12%)</title><rect x="99.8830%" y="181" width="0.1170%" height="15" fill="rgb(213,25,53)"/><text x="100.1330%" y="191.50"></text></g></svg></svg>