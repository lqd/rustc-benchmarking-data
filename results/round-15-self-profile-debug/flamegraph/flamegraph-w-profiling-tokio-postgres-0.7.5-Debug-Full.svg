<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (681,795,026 samples, 12.64%)</title><rect x="0.0219%" y="213" width="12.6450%" height="15" fill="rgb(227,0,7)"/><text x="0.2719%" y="223.50">LLVM_passes</text></g><g><title>is_copy_raw (8,239,368 samples, 0.15%)</title><rect x="16.2511%" y="85" width="0.1528%" height="15" fill="rgb(217,0,24)"/><text x="16.5011%" y="95.50"></text></g><g><title>evaluate_obligation (6,638,080 samples, 0.12%)</title><rect x="16.2808%" y="69" width="0.1231%" height="15" fill="rgb(221,193,54)"/><text x="16.5308%" y="79.50"></text></g><g><title>needs_drop_raw (9,943,524 samples, 0.18%)</title><rect x="16.2211%" y="101" width="0.1844%" height="15" fill="rgb(248,212,6)"/><text x="16.4711%" y="111.50"></text></g><g><title>resolve_instance (7,919,929 samples, 0.15%)</title><rect x="16.4055%" y="101" width="0.1469%" height="15" fill="rgb(208,68,35)"/><text x="16.6555%" y="111.50"></text></g><g><title>thir_body (10,690,991 samples, 0.20%)</title><rect x="16.5566%" y="101" width="0.1983%" height="15" fill="rgb(232,128,0)"/><text x="16.8066%" y="111.50"></text></g><g><title>mir_const (67,042,384 samples, 1.24%)</title><rect x="15.5153%" y="149" width="1.2434%" height="15" fill="rgb(207,160,47)"/><text x="15.7653%" y="159.50"></text></g><g><title>unsafety_check_result (59,739,854 samples, 1.11%)</title><rect x="15.6507%" y="133" width="1.1080%" height="15" fill="rgb(228,23,34)"/><text x="15.9007%" y="143.50"></text></g><g><title>mir_built (54,665,994 samples, 1.01%)</title><rect x="15.7448%" y="117" width="1.0139%" height="15" fill="rgb(218,30,26)"/><text x="15.9948%" y="127.50"></text></g><g><title>mir_const (7,459,478 samples, 0.14%)</title><rect x="16.8822%" y="133" width="0.1383%" height="15" fill="rgb(220,122,19)"/><text x="17.1322%" y="143.50"></text></g><g><title>unsafety_check_result (5,787,272 samples, 0.11%)</title><rect x="16.9132%" y="117" width="0.1073%" height="15" fill="rgb(250,228,42)"/><text x="17.1632%" y="127.50"></text></g><g><title>mir_const_qualif (14,203,977 samples, 0.26%)</title><rect x="16.7587%" y="149" width="0.2634%" height="15" fill="rgb(240,193,28)"/><text x="17.0087%" y="159.50"></text></g><g><title>mir_promoted (89,854,526 samples, 1.67%)</title><rect x="15.3556%" y="165" width="1.6665%" height="15" fill="rgb(216,20,37)"/><text x="15.6056%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (5,668,072 samples, 0.11%)</title><rect x="17.1097%" y="165" width="0.1051%" height="15" fill="rgb(206,188,39)"/><text x="17.3597%" y="175.50"></text></g><g><title>type_op_prove_predicate (61,592,631 samples, 1.14%)</title><rect x="17.2760%" y="165" width="1.1423%" height="15" fill="rgb(217,207,13)"/><text x="17.5260%" y="175.50"></text></g><g><title>MIR_borrow_checking (307,139,426 samples, 5.70%)</title><rect x="12.7224%" y="197" width="5.6964%" height="15" fill="rgb(231,73,38)"/><text x="12.9724%" y="207.50">MIR_bor..</text></g><g><title>mir_borrowck (305,761,911 samples, 5.67%)</title><rect x="12.7479%" y="181" width="5.6708%" height="15" fill="rgb(225,20,46)"/><text x="12.9979%" y="191.50">mir_bor..</text></g><g><title>misc_checking_1 (10,660,924 samples, 0.20%)</title><rect x="18.5415%" y="197" width="0.1977%" height="15" fill="rgb(210,31,41)"/><text x="18.7915%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (8,251,068 samples, 0.15%)</title><rect x="18.7393%" y="181" width="0.1530%" height="15" fill="rgb(221,200,47)"/><text x="18.9893%" y="191.50"></text></g><g><title>check_mod_liveness (6,922,515 samples, 0.13%)</title><rect x="18.7639%" y="165" width="0.1284%" height="15" fill="rgb(226,26,5)"/><text x="19.0139%" y="175.50"></text></g><g><title>misc_checking_2 (27,157,671 samples, 0.50%)</title><rect x="18.7392%" y="197" width="0.5037%" height="15" fill="rgb(249,33,26)"/><text x="18.9892%" y="207.50"></text></g><g><title>match_checking (18,904,173 samples, 0.35%)</title><rect x="18.8923%" y="181" width="0.3506%" height="15" fill="rgb(235,183,28)"/><text x="19.1423%" y="191.50"></text></g><g><title>check_match (18,146,817 samples, 0.34%)</title><rect x="18.9064%" y="165" width="0.3366%" height="15" fill="rgb(221,5,38)"/><text x="19.1564%" y="175.50"></text></g><g><title>eval_to_const_value_raw (12,581,902 samples, 0.23%)</title><rect x="19.5746%" y="101" width="0.2334%" height="15" fill="rgb(247,18,42)"/><text x="19.8246%" y="111.50"></text></g><g><title>eval_to_const_value_raw (12,380,151 samples, 0.23%)</title><rect x="19.5783%" y="85" width="0.2296%" height="15" fill="rgb(241,131,45)"/><text x="19.8283%" y="95.50"></text></g><g><title>eval_to_allocation_raw (12,101,920 samples, 0.22%)</title><rect x="19.5835%" y="69" width="0.2244%" height="15" fill="rgb(249,31,29)"/><text x="19.8335%" y="79.50"></text></g><g><title>eval_to_allocation_raw (15,518,827 samples, 0.29%)</title><rect x="19.5217%" y="149" width="0.2878%" height="15" fill="rgb(225,111,53)"/><text x="19.7717%" y="159.50"></text></g><g><title>eval_to_allocation_raw (15,516,317 samples, 0.29%)</title><rect x="19.5218%" y="133" width="0.2878%" height="15" fill="rgb(238,160,17)"/><text x="19.7718%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (13,454,975 samples, 0.25%)</title><rect x="19.5600%" y="117" width="0.2495%" height="15" fill="rgb(214,148,48)"/><text x="19.8100%" y="127.50"></text></g><g><title>crate_lints (31,834,152 samples, 0.59%)</title><rect x="19.3896%" y="165" width="0.5904%" height="15" fill="rgb(232,36,49)"/><text x="19.6396%" y="175.50"></text></g><g><title>lint_checking (41,550,936 samples, 0.77%)</title><rect x="19.3895%" y="181" width="0.7706%" height="15" fill="rgb(209,103,24)"/><text x="19.6395%" y="191.50"></text></g><g><title>module_lints (9,713,614 samples, 0.18%)</title><rect x="19.9800%" y="165" width="0.1802%" height="15" fill="rgb(229,88,8)"/><text x="20.2300%" y="175.50"></text></g><g><title>lint_mod (9,681,704 samples, 0.18%)</title><rect x="19.9806%" y="149" width="0.1796%" height="15" fill="rgb(213,181,19)"/><text x="20.2306%" y="159.50"></text></g><g><title>privacy_access_levels (5,662,110 samples, 0.11%)</title><rect x="20.1602%" y="181" width="0.1050%" height="15" fill="rgb(254,191,54)"/><text x="20.4102%" y="191.50"></text></g><g><title>privacy_checking_modules (17,047,463 samples, 0.32%)</title><rect x="20.2652%" y="181" width="0.3162%" height="15" fill="rgb(241,83,37)"/><text x="20.5152%" y="191.50"></text></g><g><title>check_mod_privacy (17,018,573 samples, 0.32%)</title><rect x="20.2657%" y="165" width="0.3156%" height="15" fill="rgb(233,36,39)"/><text x="20.5157%" y="175.50"></text></g><g><title>misc_checking_3 (72,278,516 samples, 1.34%)</title><rect x="19.2429%" y="197" width="1.3405%" height="15" fill="rgb(226,3,54)"/><text x="19.4929%" y="207.50"></text></g><g><title>impl_trait_ref (8,601,173 samples, 0.16%)</title><rect x="20.8234%" y="133" width="0.1595%" height="15" fill="rgb(245,192,40)"/><text x="21.0734%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,571,918 samples, 0.12%)</title><rect x="20.8611%" y="117" width="0.1219%" height="15" fill="rgb(238,167,29)"/><text x="21.1111%" y="127.50"></text></g><g><title>coherent_trait (22,369,271 samples, 0.41%)</title><rect x="20.6071%" y="165" width="0.4149%" height="15" fill="rgb(232,182,51)"/><text x="20.8571%" y="175.50"></text></g><g><title>specialization_graph_of (21,643,823 samples, 0.40%)</title><rect x="20.6206%" y="149" width="0.4014%" height="15" fill="rgb(231,60,39)"/><text x="20.8706%" y="159.50"></text></g><g><title>coherence_checking (22,933,016 samples, 0.43%)</title><rect x="20.6065%" y="181" width="0.4253%" height="15" fill="rgb(208,69,12)"/><text x="20.8565%" y="191.50"></text></g><g><title>evaluate_obligation (17,629,522 samples, 0.33%)</title><rect x="24.0369%" y="133" width="0.3270%" height="15" fill="rgb(235,93,37)"/><text x="24.2869%" y="143.50"></text></g><g><title>evaluate_obligation (254,217,602 samples, 4.71%)</title><rect x="26.7509%" y="117" width="4.7149%" height="15" fill="rgb(213,116,39)"/><text x="27.0009%" y="127.50">evalu..</text></g><g><title>typeck (384,033,200 samples, 7.12%)</title><rect x="24.4495%" y="133" width="7.1225%" height="15" fill="rgb(222,207,29)"/><text x="24.6995%" y="143.50">typeck</text></g><g><title>item_bodies_checking (568,017,026 samples, 10.53%)</title><rect x="21.0409%" y="181" width="10.5348%" height="15" fill="rgb(206,96,30)"/><text x="21.2909%" y="191.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (568,012,016 samples, 10.53%)</title><rect x="21.0410%" y="165" width="10.5347%" height="15" fill="rgb(218,138,4)"/><text x="21.2910%" y="175.50">typeck_item_bod..</text></g><g><title>typeck (566,650,132 samples, 10.51%)</title><rect x="21.0663%" y="149" width="10.5094%" height="15" fill="rgb(250,191,14)"/><text x="21.3163%" y="159.50">typeck</text></g><g><title>mir_borrowck (6,314,026 samples, 0.12%)</title><rect x="34.0386%" y="101" width="0.1171%" height="15" fill="rgb(239,60,40)"/><text x="34.2886%" y="111.50"></text></g><g><title>mir_const (5,826,656 samples, 0.11%)</title><rect x="34.2476%" y="85" width="0.1081%" height="15" fill="rgb(206,27,48)"/><text x="34.4976%" y="95.50"></text></g><g><title>mir_promoted (11,613,816 samples, 0.22%)</title><rect x="34.1557%" y="101" width="0.2154%" height="15" fill="rgb(225,35,8)"/><text x="34.4057%" y="111.50"></text></g><g><title>type_op_normalize_fn_sig (11,590,254 samples, 0.21%)</title><rect x="34.3913%" y="101" width="0.2150%" height="15" fill="rgb(250,213,24)"/><text x="34.6413%" y="111.50"></text></g><g><title>normalize_projection_ty (7,629,456 samples, 0.14%)</title><rect x="34.4648%" y="85" width="0.1415%" height="15" fill="rgb(247,123,22)"/><text x="34.7148%" y="95.50"></text></g><g><title>type_op_prove_predicate (19,842,935 samples, 0.37%)</title><rect x="34.6773%" y="101" width="0.3680%" height="15" fill="rgb(231,138,38)"/><text x="34.9273%" y="111.50"></text></g><g><title>mir_borrowck (146,941,287 samples, 2.73%)</title><rect x="32.3202%" y="117" width="2.7253%" height="15" fill="rgb(231,145,46)"/><text x="32.5702%" y="127.50">mi..</text></g><g><title>dropck_outlives (6,003,127 samples, 0.11%)</title><rect x="38.8807%" y="37" width="0.1113%" height="15" fill="rgb(251,118,11)"/><text x="39.1307%" y="47.50"></text></g><g><title>evaluate_obligation (21,085,486 samples, 0.39%)</title><rect x="38.9926%" y="37" width="0.3911%" height="15" fill="rgb(217,147,25)"/><text x="39.2426%" y="47.50"></text></g><g><title>is_copy_raw (6,606,351 samples, 0.12%)</title><rect x="39.4595%" y="37" width="0.1225%" height="15" fill="rgb(247,81,37)"/><text x="39.7095%" y="47.50"></text></g><g><title>mir_built (251,615,348 samples, 4.67%)</title><rect x="35.0881%" y="69" width="4.6666%" height="15" fill="rgb(209,12,38)"/><text x="35.3381%" y="79.50">mir_b..</text></g><g><title>typeck (243,926,447 samples, 4.52%)</title><rect x="35.2307%" y="53" width="4.5240%" height="15" fill="rgb(227,1,9)"/><text x="35.4807%" y="63.50">typeck</text></g><g><title>thir_body (5,859,867 samples, 0.11%)</title><rect x="40.2396%" y="37" width="0.1087%" height="15" fill="rgb(248,47,43)"/><text x="40.4896%" y="47.50"></text></g><g><title>mir_built (28,700,496 samples, 0.53%)</title><rect x="39.8209%" y="53" width="0.5323%" height="15" fill="rgb(221,10,30)"/><text x="40.0709%" y="63.50"></text></g><g><title>mir_const (286,972,298 samples, 5.32%)</title><rect x="35.0604%" y="101" width="5.3224%" height="15" fill="rgb(210,229,1)"/><text x="35.3104%" y="111.50">mir_con..</text></g><g><title>unsafety_check_result (285,921,106 samples, 5.30%)</title><rect x="35.0799%" y="85" width="5.3029%" height="15" fill="rgb(222,148,37)"/><text x="35.3299%" y="95.50">unsafe..</text></g><g><title>unsafety_check_result (33,859,595 samples, 0.63%)</title><rect x="39.7547%" y="69" width="0.6280%" height="15" fill="rgb(234,67,33)"/><text x="40.0047%" y="79.50"></text></g><g><title>mir_promoted (287,870,749 samples, 5.34%)</title><rect x="35.0455%" y="117" width="5.3390%" height="15" fill="rgb(247,98,35)"/><text x="35.2955%" y="127.50">mir_pro..</text></g><g><title>type_of (469,493,817 samples, 8.71%)</title><rect x="31.8621%" y="149" width="8.7075%" height="15" fill="rgb(247,138,52)"/><text x="32.1121%" y="159.50">type_of</text></g><g><title>mir_borrowck (469,253,251 samples, 8.70%)</title><rect x="31.8666%" y="133" width="8.7031%" height="15" fill="rgb(213,79,30)"/><text x="32.1166%" y="143.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (7,078,766 samples, 0.13%)</title><rect x="40.4384%" y="117" width="0.1313%" height="15" fill="rgb(246,177,23)"/><text x="40.6884%" y="127.50"></text></g><g><title>item_types_checking (492,059,870 samples, 9.13%)</title><rect x="31.5757%" y="181" width="9.1260%" height="15" fill="rgb(230,62,27)"/><text x="31.8257%" y="191.50">item_types_ch..</text></g><g><title>check_mod_item_types (492,011,100 samples, 9.13%)</title><rect x="31.5766%" y="165" width="9.1251%" height="15" fill="rgb(216,154,8)"/><text x="31.8266%" y="175.50">check_mod_ite..</text></g><g><title>typeck (7,123,535 samples, 0.13%)</title><rect x="40.5697%" y="149" width="0.1321%" height="15" fill="rgb(244,35,45)"/><text x="40.8197%" y="159.50"></text></g><g><title>named_region_map (5,482,790 samples, 0.10%)</title><rect x="40.9135%" y="133" width="0.1017%" height="15" fill="rgb(251,115,12)"/><text x="41.1635%" y="143.50"></text></g><g><title>generics_of (8,882,831 samples, 0.16%)</title><rect x="40.8522%" y="149" width="0.1647%" height="15" fill="rgb(240,54,50)"/><text x="41.1022%" y="159.50"></text></g><g><title>predicates_of (6,078,091 samples, 0.11%)</title><rect x="41.0227%" y="149" width="0.1127%" height="15" fill="rgb(233,84,52)"/><text x="41.2727%" y="159.50"></text></g><g><title>predicates_defined_on (5,510,665 samples, 0.10%)</title><rect x="41.0332%" y="133" width="0.1022%" height="15" fill="rgb(207,117,47)"/><text x="41.2832%" y="143.50"></text></g><g><title>type_collecting (24,041,358 samples, 0.45%)</title><rect x="40.7025%" y="181" width="0.4459%" height="15" fill="rgb(249,43,39)"/><text x="40.9525%" y="191.50"></text></g><g><title>collect_mod_item_types (24,006,847 samples, 0.45%)</title><rect x="40.7031%" y="165" width="0.4452%" height="15" fill="rgb(209,38,44)"/><text x="40.9531%" y="175.50"></text></g><g><title>check_impl_item_well_formed (31,375,986 samples, 0.58%)</title><rect x="41.1886%" y="165" width="0.5819%" height="15" fill="rgb(236,212,23)"/><text x="41.4386%" y="175.50"></text></g><g><title>check_item_well_formed (15,831,325 samples, 0.29%)</title><rect x="41.7705%" y="165" width="0.2936%" height="15" fill="rgb(242,79,21)"/><text x="42.0205%" y="175.50"></text></g><g><title>analysis (1,588,016,671 samples, 29.45%)</title><rect x="12.6669%" y="213" width="29.4523%" height="15" fill="rgb(211,96,35)"/><text x="12.9169%" y="223.50">analysis</text></g><g><title>type_check_crate (1,161,169,881 samples, 21.54%)</title><rect x="20.5835%" y="197" width="21.5358%" height="15" fill="rgb(253,215,40)"/><text x="20.8335%" y="207.50">type_check_crate</text></g><g><title>wf_checking (52,209,310 samples, 0.97%)</title><rect x="41.1509%" y="181" width="0.9683%" height="15" fill="rgb(211,81,21)"/><text x="41.4009%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (13,230,473 samples, 0.25%)</title><rect x="51.4637%" y="181" width="0.2454%" height="15" fill="rgb(208,190,38)"/><text x="51.7137%" y="191.50"></text></g><g><title>const_caller_location (6,203,391 samples, 0.12%)</title><rect x="51.7091%" y="181" width="0.1151%" height="15" fill="rgb(235,213,38)"/><text x="51.9591%" y="191.50"></text></g><g><title>param_env (14,498,831 samples, 0.27%)</title><rect x="52.3928%" y="165" width="0.2689%" height="15" fill="rgb(237,122,38)"/><text x="52.6428%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,620,918 samples, 0.10%)</title><rect x="52.6617%" y="165" width="0.1042%" height="15" fill="rgb(244,218,35)"/><text x="52.9117%" y="175.50"></text></g><g><title>fn_abi_of_instance (50,806,291 samples, 0.94%)</title><rect x="51.8273%" y="181" width="0.9423%" height="15" fill="rgb(240,68,47)"/><text x="52.0773%" y="191.50"></text></g><g><title>layout_of (9,778,600 samples, 0.18%)</title><rect x="52.8098%" y="181" width="0.1814%" height="15" fill="rgb(210,16,53)"/><text x="53.0598%" y="191.50"></text></g><g><title>codegen_module (588,854,657 samples, 10.92%)</title><rect x="42.2094%" y="197" width="10.9213%" height="15" fill="rgb(235,124,12)"/><text x="42.4594%" y="207.50">codegen_module</text></g><g><title>codegen_crate (593,960,904 samples, 11.02%)</title><rect x="42.1193%" y="213" width="11.0160%" height="15" fill="rgb(224,169,11)"/><text x="42.3693%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,642,534,733 samples, 30.46%)</title><rect x="53.1396%" y="197" width="30.4635%" height="15" fill="rgb(250,166,2)"/><text x="53.3896%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,515,637,674 samples, 28.11%)</title><rect x="55.4931%" y="181" width="28.1100%" height="15" fill="rgb(242,216,29)"/><text x="55.7431%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,735,886,757 samples, 32.19%)</title><rect x="53.1353%" y="213" width="32.1948%" height="15" fill="rgb(230,116,27)"/><text x="53.3853%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (93,121,651 samples, 1.73%)</title><rect x="83.6030%" y="197" width="1.7271%" height="15" fill="rgb(228,99,48)"/><text x="83.8530%" y="207.50"></text></g><g><title>metadata_register_crate (14,079,632 samples, 0.26%)</title><rect x="88.9958%" y="165" width="0.2611%" height="15" fill="rgb(253,11,6)"/><text x="89.2458%" y="175.50"></text></g><g><title>metadata_register_crate (9,248,339 samples, 0.17%)</title><rect x="89.0854%" y="149" width="0.1715%" height="15" fill="rgb(247,143,39)"/><text x="89.3354%" y="159.50"></text></g><g><title>macro_expand_crate (210,628,681 samples, 3.91%)</title><rect x="85.3765%" y="197" width="3.9064%" height="15" fill="rgb(236,97,10)"/><text x="85.6265%" y="207.50">macr..</text></g><g><title>expand_crate (210,617,791 samples, 3.91%)</title><rect x="85.3767%" y="181" width="3.9062%" height="15" fill="rgb(233,208,19)"/><text x="85.6267%" y="191.50">expa..</text></g><g><title>late_resolve_crate (16,567,807 samples, 0.31%)</title><rect x="89.3118%" y="181" width="0.3073%" height="15" fill="rgb(216,164,2)"/><text x="89.5618%" y="191.50"></text></g><g><title>configure_and_expand (233,158,612 samples, 4.32%)</title><rect x="85.3301%" y="213" width="4.3243%" height="15" fill="rgb(220,129,5)"/><text x="85.5801%" y="223.50">confi..</text></g><g><title>resolve_crate (19,958,464 samples, 0.37%)</title><rect x="89.2842%" y="197" width="0.3702%" height="15" fill="rgb(242,17,10)"/><text x="89.5342%" y="207.50"></text></g><g><title>free_global_ctxt (45,293,105 samples, 0.84%)</title><rect x="89.8094%" y="213" width="0.8400%" height="15" fill="rgb(242,107,0)"/><text x="90.0594%" y="223.50"></text></g><g><title>codegen_fn_attrs (5,666,414 samples, 0.11%)</title><rect x="91.5161%" y="133" width="0.1051%" height="15" fill="rgb(251,28,31)"/><text x="91.7661%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (12,482,974 samples, 0.23%)</title><rect x="91.6212%" y="133" width="0.2315%" height="15" fill="rgb(233,223,10)"/><text x="91.8712%" y="143.50"></text></g><g><title>mir_shims (5,599,846 samples, 0.10%)</title><rect x="91.8866%" y="133" width="0.1039%" height="15" fill="rgb(215,21,27)"/><text x="92.1366%" y="143.50"></text></g><g><title>layout_of (5,547,072 samples, 0.10%)</title><rect x="92.3119%" y="117" width="0.1029%" height="15" fill="rgb(232,23,21)"/><text x="92.5619%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (10,350,702 samples, 0.19%)</title><rect x="92.4147%" y="117" width="0.1920%" height="15" fill="rgb(244,5,23)"/><text x="92.6647%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (24,790,227 samples, 0.46%)</title><rect x="92.6067%" y="117" width="0.4598%" height="15" fill="rgb(226,81,46)"/><text x="92.8567%" y="127.50"></text></g><g><title>optimized_mir (59,538,546 samples, 1.10%)</title><rect x="91.9904%" y="133" width="1.1042%" height="15" fill="rgb(247,70,30)"/><text x="92.2404%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (24,308,933 samples, 0.45%)</title><rect x="93.2324%" y="117" width="0.4508%" height="15" fill="rgb(212,68,19)"/><text x="93.4824%" y="127.50"></text></g><g><title>resolve_instance (41,561,500 samples, 0.77%)</title><rect x="93.0947%" y="133" width="0.7708%" height="15" fill="rgb(240,187,13)"/><text x="93.3447%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,148,938 samples, 0.11%)</title><rect x="93.9209%" y="133" width="0.1140%" height="15" fill="rgb(223,113,26)"/><text x="94.1709%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (8,658,884 samples, 0.16%)</title><rect x="94.0362%" y="133" width="0.1606%" height="15" fill="rgb(206,192,2)"/><text x="94.2862%" y="143.50"></text></g><g><title>upstream_monomorphizations (8,534,722 samples, 0.16%)</title><rect x="94.0385%" y="117" width="0.1583%" height="15" fill="rgb(241,108,4)"/><text x="94.2885%" y="127.50"></text></g><g><title>exported_symbols (7,390,258 samples, 0.14%)</title><rect x="94.0597%" y="101" width="0.1371%" height="15" fill="rgb(247,173,49)"/><text x="94.3097%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (7,369,477 samples, 0.14%)</title><rect x="94.0601%" y="85" width="0.1367%" height="15" fill="rgb(224,114,35)"/><text x="94.3101%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (169,951,273 samples, 3.15%)</title><rect x="91.1094%" y="149" width="3.1520%" height="15" fill="rgb(245,159,27)"/><text x="91.3594%" y="159.50">mon..</text></g><g><title>monomorphization_collector (170,418,498 samples, 3.16%)</title><rect x="91.1093%" y="165" width="3.1607%" height="15" fill="rgb(245,172,44)"/><text x="91.3593%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (14,772,888 samples, 0.27%)</title><rect x="94.2701%" y="149" width="0.2740%" height="15" fill="rgb(236,23,11)"/><text x="94.5201%" y="159.50"></text></g><g><title>symbol_name (12,804,292 samples, 0.24%)</title><rect x="94.3066%" y="133" width="0.2375%" height="15" fill="rgb(205,117,38)"/><text x="94.5566%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (191,857,888 samples, 3.56%)</title><rect x="91.1075%" y="181" width="3.5583%" height="15" fill="rgb(237,72,25)"/><text x="91.3575%" y="191.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (21,342,829 samples, 0.40%)</title><rect x="94.2700%" y="165" width="0.3958%" height="15" fill="rgb(244,70,9)"/><text x="94.5200%" y="175.50"></text></g><g><title>cgu_partitioning (6,565,001 samples, 0.12%)</title><rect x="94.5441%" y="149" width="0.1218%" height="15" fill="rgb(217,125,39)"/><text x="94.7941%" y="159.50"></text></g><g><title>exported_symbols (194,531,227 samples, 3.61%)</title><rect x="91.0943%" y="197" width="3.6079%" height="15" fill="rgb(235,36,10)"/><text x="91.3443%" y="207.50">expo..</text></g><g><title>optimized_mir (5,456,839 samples, 0.10%)</title><rect x="95.8717%" y="85" width="0.1012%" height="15" fill="rgb(251,123,47)"/><text x="96.1217%" y="95.50"></text></g><g><title>layout_of (6,074,775 samples, 0.11%)</title><rect x="95.8608%" y="101" width="0.1127%" height="15" fill="rgb(221,13,13)"/><text x="96.1108%" y="111.50"></text></g><g><title>layout_of (6,389,831 samples, 0.12%)</title><rect x="95.8559%" y="117" width="0.1185%" height="15" fill="rgb(238,131,9)"/><text x="96.1059%" y="127.50"></text></g><g><title>layout_of (6,911,036 samples, 0.13%)</title><rect x="95.8471%" y="133" width="0.1282%" height="15" fill="rgb(211,50,8)"/><text x="96.0971%" y="143.50"></text></g><g><title>layout_of (7,743,314 samples, 0.14%)</title><rect x="95.8333%" y="149" width="0.1436%" height="15" fill="rgb(245,182,24)"/><text x="96.0833%" y="159.50"></text></g><g><title>layout_of (8,527,679 samples, 0.16%)</title><rect x="95.8211%" y="165" width="0.1582%" height="15" fill="rgb(242,14,37)"/><text x="96.0711%" y="175.50"></text></g><g><title>layout_of (12,502,454 samples, 0.23%)</title><rect x="95.7561%" y="181" width="0.2319%" height="15" fill="rgb(246,228,12)"/><text x="96.0061%" y="191.50"></text></g><g><title>is_copy_raw (7,988,257 samples, 0.15%)</title><rect x="97.2374%" y="149" width="0.1482%" height="15" fill="rgb(213,55,15)"/><text x="97.4874%" y="159.50"></text></g><g><title>evaluate_obligation (6,292,330 samples, 0.12%)</title><rect x="97.2689%" y="133" width="0.1167%" height="15" fill="rgb(209,9,3)"/><text x="97.5189%" y="143.50"></text></g><g><title>needs_drop_raw (10,214,491 samples, 0.19%)</title><rect x="97.1979%" y="165" width="0.1894%" height="15" fill="rgb(230,59,30)"/><text x="97.4479%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (77,929,414 samples, 1.45%)</title><rect x="95.9880%" y="181" width="1.4453%" height="15" fill="rgb(209,121,21)"/><text x="96.2380%" y="191.50"></text></g><g><title>optimized_mir (146,616,879 samples, 2.72%)</title><rect x="94.7226%" y="197" width="2.7192%" height="15" fill="rgb(220,109,13)"/><text x="94.9726%" y="207.50">op..</text></g><g><title>generate_crate_metadata (368,426,543 samples, 6.83%)</title><rect x="90.6495%" y="213" width="6.8331%" height="15" fill="rgb(232,18,1)"/><text x="90.8995%" y="223.50">generate_..</text></g><g><title>hir_lowering (35,948,895 samples, 0.67%)</title><rect x="97.4825%" y="213" width="0.6667%" height="15" fill="rgb(215,41,42)"/><text x="97.7325%" y="223.50"></text></g><g><title>finish_ongoing_codegen (75,010,324 samples, 1.39%)</title><rect x="98.1497%" y="197" width="1.3912%" height="15" fill="rgb(224,123,36)"/><text x="98.3997%" y="207.50"></text></g><g><title>link_crate (14,025,330 samples, 0.26%)</title><rect x="99.5409%" y="197" width="0.2601%" height="15" fill="rgb(240,125,3)"/><text x="99.7909%" y="207.50"></text></g><g><title>link_binary (13,773,897 samples, 0.26%)</title><rect x="99.5455%" y="181" width="0.2555%" height="15" fill="rgb(205,98,50)"/><text x="99.7955%" y="191.50"></text></g><g><title>link_rlib (11,783,997 samples, 0.22%)</title><rect x="99.5824%" y="165" width="0.2186%" height="15" fill="rgb(205,185,37)"/><text x="99.8324%" y="175.50"></text></g><g><title>link (89,070,375 samples, 1.65%)</title><rect x="98.1492%" y="213" width="1.6520%" height="15" fill="rgb(238,207,15)"/><text x="98.3992%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (7,908,864 samples, 0.15%)</title><rect x="99.8165%" y="213" width="0.1467%" height="15" fill="rgb(213,199,42)"/><text x="100.0665%" y="223.50"></text></g><g><title>all (5,391,819,018 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (5,391,819,018 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>