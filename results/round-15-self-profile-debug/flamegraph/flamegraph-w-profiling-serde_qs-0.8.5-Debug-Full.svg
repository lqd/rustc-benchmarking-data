<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (278,129,877 samples, 12.66%)</title><rect x="0.0414%" y="197" width="12.6634%" height="15" fill="rgb(227,0,7)"/><text x="0.2914%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (3,256,209 samples, 0.15%)</title><rect x="16.1069%" y="69" width="0.1483%" height="15" fill="rgb(217,0,24)"/><text x="16.3569%" y="79.50"></text></g><g><title>evaluate_obligation (2,640,931 samples, 0.12%)</title><rect x="16.1349%" y="53" width="0.1202%" height="15" fill="rgb(221,193,54)"/><text x="16.3849%" y="63.50"></text></g><g><title>needs_drop_raw (4,639,120 samples, 0.21%)</title><rect x="16.0460%" y="85" width="0.2112%" height="15" fill="rgb(248,212,6)"/><text x="16.2960%" y="95.50"></text></g><g><title>specialization_graph_of (4,596,428 samples, 0.21%)</title><rect x="16.3488%" y="69" width="0.2093%" height="15" fill="rgb(208,68,35)"/><text x="16.5988%" y="79.50"></text></g><g><title>impl_trait_ref (2,772,314 samples, 0.13%)</title><rect x="16.4319%" y="53" width="0.1262%" height="15" fill="rgb(232,128,0)"/><text x="16.6819%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,531,222 samples, 0.12%)</title><rect x="16.4429%" y="37" width="0.1152%" height="15" fill="rgb(207,160,47)"/><text x="16.6929%" y="47.50"></text></g><g><title>resolve_instance (6,720,721 samples, 0.31%)</title><rect x="16.2572%" y="85" width="0.3060%" height="15" fill="rgb(228,23,34)"/><text x="16.5072%" y="95.50"></text></g><g><title>thir_body (3,665,047 samples, 0.17%)</title><rect x="16.5671%" y="85" width="0.1669%" height="15" fill="rgb(218,30,26)"/><text x="16.8171%" y="95.50"></text></g><g><title>mir_const (31,763,203 samples, 1.45%)</title><rect x="15.2935%" y="133" width="1.4462%" height="15" fill="rgb(220,122,19)"/><text x="15.5435%" y="143.50"></text></g><g><title>unsafety_check_result (28,336,497 samples, 1.29%)</title><rect x="15.4496%" y="117" width="1.2902%" height="15" fill="rgb(250,228,42)"/><text x="15.6996%" y="127.50"></text></g><g><title>mir_built (26,016,017 samples, 1.18%)</title><rect x="15.5552%" y="101" width="1.1845%" height="15" fill="rgb(240,193,28)"/><text x="15.8052%" y="111.50"></text></g><g><title>mir_promoted (35,341,375 samples, 1.61%)</title><rect x="15.1533%" y="149" width="1.6091%" height="15" fill="rgb(216,20,37)"/><text x="15.4033%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (4,240,036 samples, 0.19%)</title><rect x="16.8300%" y="149" width="0.1931%" height="15" fill="rgb(206,188,39)"/><text x="17.0800%" y="159.50"></text></g><g><title>normalize_projection_ty (2,832,220 samples, 0.13%)</title><rect x="16.8941%" y="133" width="0.1290%" height="15" fill="rgb(217,207,13)"/><text x="17.1441%" y="143.50"></text></g><g><title>type_op_prove_predicate (10,708,156 samples, 0.49%)</title><rect x="17.1216%" y="149" width="0.4875%" height="15" fill="rgb(231,73,38)"/><text x="17.3716%" y="159.50"></text></g><g><title>MIR_borrow_checking (106,948,119 samples, 4.87%)</title><rect x="12.7405%" y="181" width="4.8694%" height="15" fill="rgb(225,20,46)"/><text x="12.9905%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (106,493,184 samples, 4.85%)</title><rect x="12.7613%" y="165" width="4.8487%" height="15" fill="rgb(210,31,41)"/><text x="13.0113%" y="175.50">mir_bo..</text></g><g><title>misc_checking_1 (3,188,243 samples, 0.15%)</title><rect x="17.6410%" y="181" width="0.1452%" height="15" fill="rgb(221,200,47)"/><text x="17.8910%" y="191.50"></text></g><g><title>misc_checking_2 (4,229,514 samples, 0.19%)</title><rect x="17.7862%" y="181" width="0.1926%" height="15" fill="rgb(226,26,5)"/><text x="18.0362%" y="191.50"></text></g><g><title>match_checking (2,218,643 samples, 0.10%)</title><rect x="17.8777%" y="165" width="0.1010%" height="15" fill="rgb(249,33,26)"/><text x="18.1277%" y="175.50"></text></g><g><title>crate_lints (4,239,165 samples, 0.19%)</title><rect x="18.0430%" y="149" width="0.1930%" height="15" fill="rgb(235,183,28)"/><text x="18.2930%" y="159.50"></text></g><g><title>lint_checking (5,934,463 samples, 0.27%)</title><rect x="18.0429%" y="165" width="0.2702%" height="15" fill="rgb(221,5,38)"/><text x="18.2929%" y="175.50"></text></g><g><title>privacy_checking_modules (3,500,497 samples, 0.16%)</title><rect x="18.3414%" y="165" width="0.1594%" height="15" fill="rgb(247,18,42)"/><text x="18.5914%" y="175.50"></text></g><g><title>check_mod_privacy (3,495,997 samples, 0.16%)</title><rect x="18.3416%" y="149" width="0.1592%" height="15" fill="rgb(241,131,45)"/><text x="18.5916%" y="159.50"></text></g><g><title>misc_checking_3 (11,494,342 samples, 0.52%)</title><rect x="17.9787%" y="181" width="0.5233%" height="15" fill="rgb(249,31,29)"/><text x="18.2287%" y="191.50"></text></g><g><title>impl_trait_ref (4,001,973 samples, 0.18%)</title><rect x="18.6749%" y="117" width="0.1822%" height="15" fill="rgb(225,111,53)"/><text x="18.9249%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,501,341 samples, 0.16%)</title><rect x="18.6977%" y="101" width="0.1594%" height="15" fill="rgb(238,160,17)"/><text x="18.9477%" y="111.50"></text></g><g><title>coherent_trait (8,249,687 samples, 0.38%)</title><rect x="18.5103%" y="149" width="0.3756%" height="15" fill="rgb(214,148,48)"/><text x="18.7603%" y="159.50"></text></g><g><title>specialization_graph_of (8,226,547 samples, 0.37%)</title><rect x="18.5114%" y="133" width="0.3746%" height="15" fill="rgb(232,36,49)"/><text x="18.7614%" y="143.50"></text></g><g><title>coherence_checking (8,349,259 samples, 0.38%)</title><rect x="18.5094%" y="165" width="0.3801%" height="15" fill="rgb(209,103,24)"/><text x="18.7594%" y="175.50"></text></g><g><title>evaluate_obligation (6,543,222 samples, 0.30%)</title><rect x="22.8565%" y="117" width="0.2979%" height="15" fill="rgb(229,88,8)"/><text x="23.1065%" y="127.50"></text></g><g><title>typeck (19,100,852 samples, 0.87%)</title><rect x="23.3873%" y="117" width="0.8697%" height="15" fill="rgb(213,181,19)"/><text x="23.6373%" y="127.50"></text></g><g><title>item_bodies_checking (117,984,516 samples, 5.37%)</title><rect x="18.8925%" y="165" width="5.3719%" height="15" fill="rgb(254,191,54)"/><text x="19.1425%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (117,981,646 samples, 5.37%)</title><rect x="18.8926%" y="149" width="5.3718%" height="15" fill="rgb(241,83,37)"/><text x="19.1426%" y="159.50">typeck_..</text></g><g><title>typeck (117,666,514 samples, 5.36%)</title><rect x="18.9070%" y="133" width="5.3574%" height="15" fill="rgb(233,36,39)"/><text x="19.1570%" y="143.50">typeck</text></g><g><title>item_types_checking (10,106,687 samples, 0.46%)</title><rect x="24.2644%" y="165" width="0.4602%" height="15" fill="rgb(226,3,54)"/><text x="24.5144%" y="175.50"></text></g><g><title>check_mod_item_types (10,100,447 samples, 0.46%)</title><rect x="24.2647%" y="149" width="0.4599%" height="15" fill="rgb(245,192,40)"/><text x="24.5147%" y="159.50"></text></g><g><title>type_collecting (6,503,979 samples, 0.30%)</title><rect x="24.7247%" y="165" width="0.2961%" height="15" fill="rgb(238,167,29)"/><text x="24.9747%" y="175.50"></text></g><g><title>collect_mod_item_types (6,489,259 samples, 0.30%)</title><rect x="24.7254%" y="149" width="0.2955%" height="15" fill="rgb(232,182,51)"/><text x="24.9754%" y="159.50"></text></g><g><title>check_impl_item_well_formed (14,792,812 samples, 0.67%)</title><rect x="25.0480%" y="149" width="0.6735%" height="15" fill="rgb(231,60,39)"/><text x="25.2980%" y="159.50"></text></g><g><title>analysis (289,314,616 samples, 13.17%)</title><rect x="12.7048%" y="197" width="13.1727%" height="15" fill="rgb(208,69,12)"/><text x="12.9548%" y="207.50">analysis</text></g><g><title>type_check_crate (161,988,132 samples, 7.38%)</title><rect x="18.5021%" y="181" width="7.3754%" height="15" fill="rgb(235,93,37)"/><text x="18.7521%" y="191.50">type_check..</text></g><g><title>wf_checking (18,799,528 samples, 0.86%)</title><rect x="25.0215%" y="165" width="0.8560%" height="15" fill="rgb(213,116,39)"/><text x="25.2715%" y="175.50"></text></g><g><title>check_item_well_formed (3,426,400 samples, 0.16%)</title><rect x="25.7215%" y="149" width="0.1560%" height="15" fill="rgb(222,207,29)"/><text x="25.9715%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (8,680,704 samples, 0.40%)</title><rect x="36.8549%" y="165" width="0.3952%" height="15" fill="rgb(206,96,30)"/><text x="37.1049%" y="175.50"></text></g><g><title>const_caller_location (3,238,074 samples, 0.15%)</title><rect x="37.2502%" y="165" width="0.1474%" height="15" fill="rgb(218,138,4)"/><text x="37.5002%" y="175.50"></text></g><g><title>layout_of (3,466,148 samples, 0.16%)</title><rect x="37.9869%" y="149" width="0.1578%" height="15" fill="rgb(250,191,14)"/><text x="38.2369%" y="159.50"></text></g><g><title>predicates_of (3,555,579 samples, 0.16%)</title><rect x="38.4227%" y="133" width="0.1619%" height="15" fill="rgb(239,60,40)"/><text x="38.6727%" y="143.50"></text></g><g><title>predicates_defined_on (2,676,865 samples, 0.12%)</title><rect x="38.4627%" y="117" width="0.1219%" height="15" fill="rgb(206,27,48)"/><text x="38.7127%" y="127.50"></text></g><g><title>param_env (9,667,904 samples, 0.44%)</title><rect x="38.1447%" y="149" width="0.4402%" height="15" fill="rgb(225,35,8)"/><text x="38.3947%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,377,187 samples, 0.11%)</title><rect x="38.5849%" y="149" width="0.1082%" height="15" fill="rgb(250,213,24)"/><text x="38.8349%" y="159.50"></text></g><g><title>fn_abi_of_instance (28,451,228 samples, 1.30%)</title><rect x="37.4009%" y="165" width="1.2954%" height="15" fill="rgb(247,123,22)"/><text x="37.6509%" y="175.50"></text></g><g><title>layout_of (5,294,728 samples, 0.24%)</title><rect x="38.7774%" y="165" width="0.2411%" height="15" fill="rgb(231,138,38)"/><text x="39.0274%" y="175.50"></text></g><g><title>codegen_module (287,813,627 samples, 13.10%)</title><rect x="26.0196%" y="181" width="13.1043%" height="15" fill="rgb(231,145,46)"/><text x="26.2696%" y="191.50">codegen_module</text></g><g><title>codegen_crate (291,011,343 samples, 13.25%)</title><rect x="25.8780%" y="197" width="13.2499%" height="15" fill="rgb(251,118,11)"/><text x="26.1280%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,031,252,268 samples, 46.95%)</title><rect x="39.1382%" y="181" width="46.9535%" height="15" fill="rgb(217,147,25)"/><text x="39.3882%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (965,180,543 samples, 43.95%)</title><rect x="42.1465%" y="165" width="43.9453%" height="15" fill="rgb(247,81,37)"/><text x="42.3965%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,102,414,248 samples, 50.19%)</title><rect x="39.1279%" y="197" width="50.1936%" height="15" fill="rgb(209,12,38)"/><text x="39.3779%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (70,935,968 samples, 3.23%)</title><rect x="86.0917%" y="181" width="3.2298%" height="15" fill="rgb(227,1,9)"/><text x="86.3417%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (17,511,256 samples, 0.80%)</title><rect x="91.4502%" y="149" width="0.7973%" height="15" fill="rgb(248,47,43)"/><text x="91.7002%" y="159.50"></text></g><g><title>metadata_register_crate (14,366,453 samples, 0.65%)</title><rect x="91.5934%" y="133" width="0.6541%" height="15" fill="rgb(221,10,30)"/><text x="91.8434%" y="143.50"></text></g><g><title>macro_expand_crate (64,287,700 samples, 2.93%)</title><rect x="89.3558%" y="181" width="2.9271%" height="15" fill="rgb(210,229,1)"/><text x="89.6058%" y="191.50">ma..</text></g><g><title>expand_crate (64,273,450 samples, 2.93%)</title><rect x="89.3565%" y="165" width="2.9264%" height="15" fill="rgb(222,148,37)"/><text x="89.6065%" y="175.50">ex..</text></g><g><title>late_resolve_crate (4,622,009 samples, 0.21%)</title><rect x="92.2967%" y="165" width="0.2104%" height="15" fill="rgb(234,67,33)"/><text x="92.5467%" y="175.50"></text></g><g><title>configure_and_expand (70,241,922 samples, 3.20%)</title><rect x="89.3215%" y="197" width="3.1982%" height="15" fill="rgb(247,98,35)"/><text x="89.5715%" y="207.50">con..</text></g><g><title>resolve_crate (5,138,074 samples, 0.23%)</title><rect x="92.2857%" y="181" width="0.2339%" height="15" fill="rgb(247,138,52)"/><text x="92.5357%" y="191.50"></text></g><g><title>free_global_ctxt (14,051,079 samples, 0.64%)</title><rect x="92.5924%" y="197" width="0.6398%" height="15" fill="rgb(213,79,30)"/><text x="92.8424%" y="207.50"></text></g><g><title>item_attrs (2,197,378 samples, 0.10%)</title><rect x="93.9371%" y="101" width="0.1000%" height="15" fill="rgb(246,177,23)"/><text x="94.1871%" y="111.50"></text></g><g><title>codegen_fn_attrs (3,829,340 samples, 0.17%)</title><rect x="93.9042%" y="117" width="0.1744%" height="15" fill="rgb(230,62,27)"/><text x="94.1542%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,958,948 samples, 0.27%)</title><rect x="94.4260%" y="101" width="0.2713%" height="15" fill="rgb(216,154,8)"/><text x="94.6760%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,438,118 samples, 0.29%)</title><rect x="94.6973%" y="101" width="0.2931%" height="15" fill="rgb(244,35,45)"/><text x="94.9473%" y="111.50"></text></g><g><title>optimized_mir (18,356,382 samples, 0.84%)</title><rect x="94.1854%" y="117" width="0.8358%" height="15" fill="rgb(251,115,12)"/><text x="94.4354%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (9,843,005 samples, 0.45%)</title><rect x="95.1980%" y="101" width="0.4482%" height="15" fill="rgb(240,54,50)"/><text x="95.4480%" y="111.50"></text></g><g><title>specialization_graph_of (3,568,387 samples, 0.16%)</title><rect x="95.8006%" y="101" width="0.1625%" height="15" fill="rgb(233,84,52)"/><text x="96.0506%" y="111.50"></text></g><g><title>resolve_instance (21,570,418 samples, 0.98%)</title><rect x="95.0212%" y="117" width="0.9821%" height="15" fill="rgb(207,117,47)"/><text x="95.2712%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (59,569,919 samples, 2.71%)</title><rect x="93.4690%" y="133" width="2.7123%" height="15" fill="rgb(249,43,39)"/><text x="93.7190%" y="143.50">mo..</text></g><g><title>monomorphization_collector (59,669,460 samples, 2.72%)</title><rect x="93.4688%" y="149" width="2.7168%" height="15" fill="rgb(209,38,44)"/><text x="93.7188%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (9,096,447 samples, 0.41%)</title><rect x="96.1858%" y="133" width="0.4142%" height="15" fill="rgb(236,212,23)"/><text x="96.4358%" y="143.50"></text></g><g><title>symbol_name (8,149,287 samples, 0.37%)</title><rect x="96.2289%" y="117" width="0.3710%" height="15" fill="rgb(242,79,21)"/><text x="96.4789%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (72,272,603 samples, 3.29%)</title><rect x="93.4661%" y="165" width="3.2906%" height="15" fill="rgb(211,96,35)"/><text x="93.7161%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (12,543,163 samples, 0.57%)</title><rect x="96.1856%" y="149" width="0.5711%" height="15" fill="rgb(253,215,40)"/><text x="96.4356%" y="159.50"></text></g><g><title>cgu_partitioning (3,442,276 samples, 0.16%)</title><rect x="96.6000%" y="133" width="0.1567%" height="15" fill="rgb(211,81,21)"/><text x="96.8500%" y="143.50"></text></g><g><title>exported_symbols (73,050,512 samples, 3.33%)</title><rect x="93.4475%" y="181" width="3.3260%" height="15" fill="rgb(208,190,38)"/><text x="93.6975%" y="191.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (11,784,543 samples, 0.54%)</title><rect x="97.2309%" y="165" width="0.5366%" height="15" fill="rgb(235,213,38)"/><text x="97.4809%" y="175.50"></text></g><g><title>optimized_mir (22,008,644 samples, 1.00%)</title><rect x="96.7829%" y="181" width="1.0021%" height="15" fill="rgb(237,122,38)"/><text x="97.0329%" y="191.50"></text></g><g><title>generate_crate_metadata (100,907,566 samples, 4.59%)</title><rect x="93.2321%" y="197" width="4.5944%" height="15" fill="rgb(244,218,35)"/><text x="93.4821%" y="207.50">gener..</text></g><g><title>hir_lowering (9,038,036 samples, 0.41%)</title><rect x="97.8265%" y="197" width="0.4115%" height="15" fill="rgb(240,68,47)"/><text x="98.0765%" y="207.50"></text></g><g><title>finish_ongoing_codegen (26,078,135 samples, 1.19%)</title><rect x="98.2391%" y="181" width="1.1874%" height="15" fill="rgb(210,16,53)"/><text x="98.4891%" y="191.50"></text></g><g><title>link_crate (6,265,235 samples, 0.29%)</title><rect x="99.4264%" y="181" width="0.2853%" height="15" fill="rgb(235,124,12)"/><text x="99.6764%" y="191.50"></text></g><g><title>link_binary (6,122,904 samples, 0.28%)</title><rect x="99.4329%" y="165" width="0.2788%" height="15" fill="rgb(224,169,11)"/><text x="99.6829%" y="175.50"></text></g><g><title>link_rlib (4,898,742 samples, 0.22%)</title><rect x="99.4887%" y="149" width="0.2230%" height="15" fill="rgb(250,166,2)"/><text x="99.7387%" y="159.50"></text></g><g><title>link (32,380,561 samples, 1.47%)</title><rect x="98.2380%" y="197" width="1.4743%" height="15" fill="rgb(242,216,29)"/><text x="98.4880%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (4,920,302 samples, 0.22%)</title><rect x="99.7466%" y="197" width="0.2240%" height="15" fill="rgb(230,116,27)"/><text x="99.9966%" y="207.50"></text></g><g><title>all (2,196,324,710 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,196,324,710 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>