<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (133,373,624 samples, 10.14%)</title><rect x="0.0957%" y="181" width="10.1421%" height="15" fill="rgb(227,0,7)"/><text x="0.3457%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,864,596 samples, 0.22%)</title><rect x="16.4959%" y="69" width="0.2178%" height="15" fill="rgb(217,0,24)"/><text x="16.7459%" y="79.50"></text></g><g><title>is_copy_raw (2,262,042 samples, 0.17%)</title><rect x="16.5417%" y="53" width="0.1720%" height="15" fill="rgb(221,193,54)"/><text x="16.7917%" y="63.50"></text></g><g><title>evaluate_obligation (1,770,659 samples, 0.13%)</title><rect x="16.5790%" y="37" width="0.1346%" height="15" fill="rgb(248,212,6)"/><text x="16.8290%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (2,182,328 samples, 0.17%)</title><rect x="16.7981%" y="53" width="0.1660%" height="15" fill="rgb(208,68,35)"/><text x="17.0481%" y="63.50"></text></g><g><title>resolve_instance (4,041,105 samples, 0.31%)</title><rect x="16.7165%" y="69" width="0.3073%" height="15" fill="rgb(232,128,0)"/><text x="16.9665%" y="79.50"></text></g><g><title>thir_body (5,325,911 samples, 0.40%)</title><rect x="17.0357%" y="69" width="0.4050%" height="15" fill="rgb(207,160,47)"/><text x="17.2857%" y="79.50"></text></g><g><title>mir_const (34,037,937 samples, 2.59%)</title><rect x="14.8697%" y="117" width="2.5883%" height="15" fill="rgb(228,23,34)"/><text x="15.1197%" y="127.50">mi..</text></g><g><title>unsafety_check_result (29,333,609 samples, 2.23%)</title><rect x="15.2275%" y="101" width="2.2306%" height="15" fill="rgb(218,30,26)"/><text x="15.4775%" y="111.50">u..</text></g><g><title>mir_built (26,135,451 samples, 1.99%)</title><rect x="15.4707%" y="85" width="1.9874%" height="15" fill="rgb(220,122,19)"/><text x="15.7207%" y="95.50">m..</text></g><g><title>mir_promoted (38,911,874 samples, 2.96%)</title><rect x="14.5672%" y="133" width="2.9590%" height="15" fill="rgb(250,228,42)"/><text x="14.8172%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (1,377,883 samples, 0.10%)</title><rect x="17.5267%" y="133" width="0.1048%" height="15" fill="rgb(240,193,28)"/><text x="17.7767%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,016,276 samples, 0.15%)</title><rect x="17.6315%" y="133" width="0.1533%" height="15" fill="rgb(216,20,37)"/><text x="17.8815%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,824,510 samples, 0.59%)</title><rect x="17.8483%" y="133" width="0.5950%" height="15" fill="rgb(206,188,39)"/><text x="18.0983%" y="143.50"></text></g><g><title>MIR_borrow_checking (106,866,277 samples, 8.13%)</title><rect x="10.3182%" y="165" width="8.1264%" height="15" fill="rgb(217,207,13)"/><text x="10.5682%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (106,116,964 samples, 8.07%)</title><rect x="10.3751%" y="149" width="8.0694%" height="15" fill="rgb(231,73,38)"/><text x="10.6251%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,088,280 samples, 0.16%)</title><rect x="18.5631%" y="149" width="0.1588%" height="15" fill="rgb(225,20,46)"/><text x="18.8131%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,851,649 samples, 0.14%)</title><rect x="18.7874%" y="149" width="0.1408%" height="15" fill="rgb(210,31,41)"/><text x="19.0374%" y="159.50"></text></g><g><title>misc_checking_1 (5,027,470 samples, 0.38%)</title><rect x="18.5606%" y="165" width="0.3823%" height="15" fill="rgb(221,200,47)"/><text x="18.8106%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,886,209 samples, 0.14%)</title><rect x="18.9431%" y="149" width="0.1434%" height="15" fill="rgb(226,26,5)"/><text x="19.1931%" y="159.50"></text></g><g><title>check_mod_liveness (1,469,544 samples, 0.11%)</title><rect x="18.9748%" y="133" width="0.1117%" height="15" fill="rgb(249,33,26)"/><text x="19.2248%" y="143.50"></text></g><g><title>misc_checking_2 (5,820,099 samples, 0.44%)</title><rect x="18.9429%" y="165" width="0.4426%" height="15" fill="rgb(235,183,28)"/><text x="19.1929%" y="175.50"></text></g><g><title>match_checking (3,931,770 samples, 0.30%)</title><rect x="19.0865%" y="149" width="0.2990%" height="15" fill="rgb(221,5,38)"/><text x="19.3365%" y="159.50"></text></g><g><title>check_match (3,745,248 samples, 0.28%)</title><rect x="19.1007%" y="133" width="0.2848%" height="15" fill="rgb(247,18,42)"/><text x="19.3507%" y="143.50"></text></g><g><title>death_checking (1,869,589 samples, 0.14%)</title><rect x="19.4637%" y="149" width="0.1422%" height="15" fill="rgb(241,131,45)"/><text x="19.7137%" y="159.50"></text></g><g><title>crate_lints (4,139,682 samples, 0.31%)</title><rect x="19.6060%" y="133" width="0.3148%" height="15" fill="rgb(249,31,29)"/><text x="19.8560%" y="143.50"></text></g><g><title>lint_checking (5,926,160 samples, 0.45%)</title><rect x="19.6058%" y="149" width="0.4506%" height="15" fill="rgb(225,111,53)"/><text x="19.8558%" y="159.50"></text></g><g><title>module_lints (1,784,838 samples, 0.14%)</title><rect x="19.9207%" y="133" width="0.1357%" height="15" fill="rgb(238,160,17)"/><text x="20.1707%" y="143.50"></text></g><g><title>lint_mod (1,773,408 samples, 0.13%)</title><rect x="19.9216%" y="117" width="0.1349%" height="15" fill="rgb(214,148,48)"/><text x="20.1716%" y="127.50"></text></g><g><title>privacy_access_levels (2,030,100 samples, 0.15%)</title><rect x="20.0565%" y="149" width="0.1544%" height="15" fill="rgb(232,36,49)"/><text x="20.3065%" y="159.50"></text></g><g><title>privacy_checking_modules (3,807,999 samples, 0.29%)</title><rect x="20.2108%" y="149" width="0.2896%" height="15" fill="rgb(209,103,24)"/><text x="20.4608%" y="159.50"></text></g><g><title>check_mod_privacy (3,799,699 samples, 0.29%)</title><rect x="20.2115%" y="133" width="0.2889%" height="15" fill="rgb(229,88,8)"/><text x="20.4615%" y="143.50"></text></g><g><title>misc_checking_3 (14,700,518 samples, 1.12%)</title><rect x="19.3855%" y="165" width="1.1179%" height="15" fill="rgb(213,181,19)"/><text x="19.6355%" y="175.50"></text></g><g><title>impl_parent (3,248,595 samples, 0.25%)</title><rect x="21.0705%" y="101" width="0.2470%" height="15" fill="rgb(254,191,54)"/><text x="21.3205%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,906,445 samples, 0.14%)</title><rect x="21.1726%" y="85" width="0.1450%" height="15" fill="rgb(241,83,37)"/><text x="21.4226%" y="95.50"></text></g><g><title>impl_trait_ref (6,711,928 samples, 0.51%)</title><rect x="21.3179%" y="101" width="0.5104%" height="15" fill="rgb(233,36,39)"/><text x="21.5679%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,167,012 samples, 0.39%)</title><rect x="21.4354%" y="85" width="0.3929%" height="15" fill="rgb(226,3,54)"/><text x="21.6854%" y="95.50"></text></g><g><title>coherent_trait (22,669,668 samples, 1.72%)</title><rect x="20.5315%" y="133" width="1.7239%" height="15" fill="rgb(245,192,40)"/><text x="20.7815%" y="143.50"></text></g><g><title>specialization_graph_of (22,013,282 samples, 1.67%)</title><rect x="20.5814%" y="117" width="1.6740%" height="15" fill="rgb(238,167,29)"/><text x="20.8314%" y="127.50"></text></g><g><title>visible_parent_map (4,189,433 samples, 0.32%)</title><rect x="21.9368%" y="101" width="0.3186%" height="15" fill="rgb(232,182,51)"/><text x="22.1868%" y="111.50"></text></g><g><title>module_children (3,776,620 samples, 0.29%)</title><rect x="21.9682%" y="85" width="0.2872%" height="15" fill="rgb(231,60,39)"/><text x="22.2182%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (3,704,118 samples, 0.28%)</title><rect x="21.9737%" y="69" width="0.2817%" height="15" fill="rgb(208,69,12)"/><text x="22.2237%" y="79.50"></text></g><g><title>coherence_checking (22,925,460 samples, 1.74%)</title><rect x="20.5291%" y="149" width="1.7433%" height="15" fill="rgb(235,93,37)"/><text x="20.7791%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,661,173 samples, 0.13%)</title><rect x="29.8985%" y="85" width="0.1263%" height="15" fill="rgb(213,116,39)"/><text x="30.1485%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,619,813 samples, 0.12%)</title><rect x="29.9017%" y="69" width="0.1232%" height="15" fill="rgb(222,207,29)"/><text x="30.1517%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,582,452 samples, 0.12%)</title><rect x="29.9045%" y="53" width="0.1203%" height="15" fill="rgb(206,96,30)"/><text x="30.1545%" y="63.50"></text></g><g><title>generics_of (1,860,817 samples, 0.14%)</title><rect x="30.0249%" y="85" width="0.1415%" height="15" fill="rgb(218,138,4)"/><text x="30.2749%" y="95.50"></text></g><g><title>impl_trait_ref (2,018,203 samples, 0.15%)</title><rect x="30.1968%" y="85" width="0.1535%" height="15" fill="rgb(250,191,14)"/><text x="30.4468%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,618,716 samples, 0.12%)</title><rect x="30.2272%" y="69" width="0.1231%" height="15" fill="rgb(239,60,40)"/><text x="30.4772%" y="79.50"></text></g><g><title>predicates_of (1,755,426 samples, 0.13%)</title><rect x="30.3576%" y="85" width="0.1335%" height="15" fill="rgb(206,27,48)"/><text x="30.6076%" y="95.50"></text></g><g><title>specializes (3,917,819 samples, 0.30%)</title><rect x="30.4963%" y="85" width="0.2979%" height="15" fill="rgb(225,35,8)"/><text x="30.7463%" y="95.50"></text></g><g><title>param_env (2,151,562 samples, 0.16%)</title><rect x="30.6306%" y="69" width="0.1636%" height="15" fill="rgb(250,213,24)"/><text x="30.8806%" y="79.50"></text></g><g><title>evaluate_obligation (24,718,003 samples, 1.88%)</title><rect x="28.9679%" y="101" width="1.8796%" height="15" fill="rgb(247,123,22)"/><text x="29.2179%" y="111.50">e..</text></g><g><title>generics_of (1,449,991 samples, 0.11%)</title><rect x="30.8675%" y="101" width="0.1103%" height="15" fill="rgb(231,138,38)"/><text x="31.1175%" y="111.50"></text></g><g><title>evaluate_obligation (2,761,824 samples, 0.21%)</title><rect x="33.1699%" y="85" width="0.2100%" height="15" fill="rgb(231,145,46)"/><text x="33.4199%" y="95.50"></text></g><g><title>typeck (29,707,288 samples, 2.26%)</title><rect x="31.2772%" y="101" width="2.2590%" height="15" fill="rgb(251,118,11)"/><text x="31.5272%" y="111.50">t..</text></g><g><title>item_bodies_checking (148,110,882 samples, 11.26%)</title><rect x="22.2860%" y="149" width="11.2628%" height="15" fill="rgb(217,147,25)"/><text x="22.5360%" y="159.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (148,108,232 samples, 11.26%)</title><rect x="22.2862%" y="133" width="11.2626%" height="15" fill="rgb(247,81,37)"/><text x="22.5362%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (147,622,850 samples, 11.23%)</title><rect x="22.3232%" y="117" width="11.2257%" height="15" fill="rgb(209,12,38)"/><text x="22.5732%" y="127.50">typeck</text></g><g><title>item_types_checking (6,133,332 samples, 0.47%)</title><rect x="33.5488%" y="149" width="0.4664%" height="15" fill="rgb(227,1,9)"/><text x="33.7988%" y="159.50"></text></g><g><title>check_mod_item_types (6,122,942 samples, 0.47%)</title><rect x="33.5496%" y="133" width="0.4656%" height="15" fill="rgb(248,47,43)"/><text x="33.7996%" y="143.50"></text></g><g><title>fn_sig (2,698,729 samples, 0.21%)</title><rect x="34.1141%" y="117" width="0.2052%" height="15" fill="rgb(221,10,30)"/><text x="34.3641%" y="127.50"></text></g><g><title>generics_of (2,269,932 samples, 0.17%)</title><rect x="34.3194%" y="117" width="0.1726%" height="15" fill="rgb(210,229,1)"/><text x="34.5694%" y="127.50"></text></g><g><title>predicates_of (2,224,894 samples, 0.17%)</title><rect x="34.5116%" y="117" width="0.1692%" height="15" fill="rgb(222,148,37)"/><text x="34.7616%" y="127.50"></text></g><g><title>predicates_defined_on (1,970,798 samples, 0.15%)</title><rect x="34.5309%" y="101" width="0.1499%" height="15" fill="rgb(234,67,33)"/><text x="34.7809%" y="111.50"></text></g><g><title>type_collecting (9,226,664 samples, 0.70%)</title><rect x="34.0159%" y="149" width="0.7016%" height="15" fill="rgb(247,98,35)"/><text x="34.2659%" y="159.50"></text></g><g><title>collect_mod_item_types (9,205,113 samples, 0.70%)</title><rect x="34.0175%" y="133" width="0.7000%" height="15" fill="rgb(247,138,52)"/><text x="34.2675%" y="143.50"></text></g><g><title>evaluate_obligation (1,425,493 samples, 0.11%)</title><rect x="35.4962%" y="117" width="0.1084%" height="15" fill="rgb(213,79,30)"/><text x="35.7462%" y="127.50"></text></g><g><title>param_env (1,423,504 samples, 0.11%)</title><rect x="35.6956%" y="117" width="0.1082%" height="15" fill="rgb(246,177,23)"/><text x="35.9456%" y="127.50"></text></g><g><title>region_scope_tree (1,887,967 samples, 0.14%)</title><rect x="35.8065%" y="117" width="0.1436%" height="15" fill="rgb(230,62,27)"/><text x="36.0565%" y="127.50"></text></g><g><title>check_impl_item_well_formed (15,144,189 samples, 1.15%)</title><rect x="34.7994%" y="133" width="1.1516%" height="15" fill="rgb(216,154,8)"/><text x="35.0494%" y="143.50"></text></g><g><title>evaluate_obligation (1,827,810 samples, 0.14%)</title><rect x="36.4574%" y="117" width="0.1390%" height="15" fill="rgb(244,35,45)"/><text x="36.7074%" y="127.50"></text></g><g><title>check_item_well_formed (10,584,234 samples, 0.80%)</title><rect x="35.9511%" y="133" width="0.8049%" height="15" fill="rgb(251,115,12)"/><text x="36.2011%" y="143.50"></text></g><g><title>analysis (350,292,770 samples, 26.64%)</title><rect x="10.2379%" y="181" width="26.6373%" height="15" fill="rgb(240,54,50)"/><text x="10.4879%" y="191.50">analysis</text></g><g><title>type_check_crate (215,296,720 samples, 16.37%)</title><rect x="20.5034%" y="165" width="16.3718%" height="15" fill="rgb(233,84,52)"/><text x="20.7534%" y="175.50">type_check_crate</text></g><g><title>wf_checking (28,334,216 samples, 2.15%)</title><rect x="34.7205%" y="149" width="2.1546%" height="15" fill="rgb(207,117,47)"/><text x="34.9705%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (1,568,143 samples, 0.12%)</title><rect x="36.7559%" y="133" width="0.1192%" height="15" fill="rgb(249,43,39)"/><text x="37.0059%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,425,885 samples, 0.11%)</title><rect x="43.9695%" y="149" width="0.1084%" height="15" fill="rgb(209,38,44)"/><text x="44.2195%" y="159.50"></text></g><g><title>const_caller_location (2,135,319 samples, 0.16%)</title><rect x="44.0780%" y="149" width="0.1624%" height="15" fill="rgb(236,212,23)"/><text x="44.3280%" y="159.50"></text></g><g><title>layout_of (1,804,290 samples, 0.14%)</title><rect x="44.6877%" y="133" width="0.1372%" height="15" fill="rgb(242,79,21)"/><text x="44.9377%" y="143.50"></text></g><g><title>predicates_of (1,492,842 samples, 0.11%)</title><rect x="45.0777%" y="117" width="0.1135%" height="15" fill="rgb(211,96,35)"/><text x="45.3277%" y="127.50"></text></g><g><title>param_env (4,823,643 samples, 0.37%)</title><rect x="44.8249%" y="133" width="0.3668%" height="15" fill="rgb(253,215,40)"/><text x="45.0749%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,494,405 samples, 0.11%)</title><rect x="45.1917%" y="133" width="0.1136%" height="15" fill="rgb(211,81,21)"/><text x="45.4417%" y="143.50"></text></g><g><title>fn_abi_of_instance (13,984,565 samples, 1.06%)</title><rect x="44.2444%" y="149" width="1.0634%" height="15" fill="rgb(208,190,38)"/><text x="44.4944%" y="159.50"></text></g><g><title>layout_of (2,099,640 samples, 0.16%)</title><rect x="45.3492%" y="149" width="0.1597%" height="15" fill="rgb(235,213,38)"/><text x="45.5992%" y="159.50"></text></g><g><title>codegen_module (111,665,602 samples, 8.49%)</title><rect x="37.0937%" y="165" width="8.4914%" height="15" fill="rgb(237,122,38)"/><text x="37.3437%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (114,608,615 samples, 8.72%)</title><rect x="36.8758%" y="181" width="8.7152%" height="15" fill="rgb(244,218,35)"/><text x="37.1258%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (518,253,644 samples, 39.41%)</title><rect x="45.6076%" y="165" width="39.4095%" height="15" fill="rgb(240,68,47)"/><text x="45.8576%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (495,413,003 samples, 37.67%)</title><rect x="47.3445%" y="149" width="37.6727%" height="15" fill="rgb(210,16,53)"/><text x="47.5945%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (544,359,446 samples, 41.39%)</title><rect x="45.5910%" y="181" width="41.3947%" height="15" fill="rgb(235,124,12)"/><text x="45.8410%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (25,886,891 samples, 1.97%)</title><rect x="85.0172%" y="165" width="1.9685%" height="15" fill="rgb(224,169,11)"/><text x="85.2672%" y="175.50">L..</text></g><g><title>macro_expand_crate (43,960,313 samples, 3.34%)</title><rect x="87.0588%" y="165" width="3.3429%" height="15" fill="rgb(250,166,2)"/><text x="87.3088%" y="175.50">mac..</text></g><g><title>expand_crate (43,947,933 samples, 3.34%)</title><rect x="87.0598%" y="149" width="3.3419%" height="15" fill="rgb(242,216,29)"/><text x="87.3098%" y="159.50">exp..</text></g><g><title>late_resolve_crate (6,085,271 samples, 0.46%)</title><rect x="90.4530%" y="149" width="0.4627%" height="15" fill="rgb(230,116,27)"/><text x="90.7030%" y="159.50"></text></g><g><title>configure_and_expand (52,204,677 samples, 3.97%)</title><rect x="86.9857%" y="181" width="3.9698%" height="15" fill="rgb(228,99,48)"/><text x="87.2357%" y="191.50">conf..</text></g><g><title>resolve_crate (7,220,713 samples, 0.55%)</title><rect x="90.4064%" y="165" width="0.5491%" height="15" fill="rgb(253,11,6)"/><text x="90.6564%" y="175.50"></text></g><g><title>early_lint_checks (3,576,487 samples, 0.27%)</title><rect x="91.0330%" y="181" width="0.2720%" height="15" fill="rgb(247,143,39)"/><text x="91.2830%" y="191.50"></text></g><g><title>free_global_ctxt (7,912,410 samples, 0.60%)</title><rect x="91.3050%" y="181" width="0.6017%" height="15" fill="rgb(236,97,10)"/><text x="91.5550%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,685,586 samples, 0.13%)</title><rect x="92.7153%" y="101" width="0.1282%" height="15" fill="rgb(233,208,19)"/><text x="92.9653%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,096,273 samples, 0.16%)</title><rect x="93.7133%" y="85" width="0.1594%" height="15" fill="rgb(216,164,2)"/><text x="93.9633%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,877,310 samples, 0.68%)</title><rect x="93.8727%" y="85" width="0.6751%" height="15" fill="rgb(220,129,5)"/><text x="94.1227%" y="95.50"></text></g><g><title>optimized_mir (23,397,563 samples, 1.78%)</title><rect x="92.8922%" y="101" width="1.7792%" height="15" fill="rgb(242,17,10)"/><text x="93.1422%" y="111.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,455,380 samples, 0.11%)</title><rect x="94.5608%" y="85" width="0.1107%" height="15" fill="rgb(242,107,0)"/><text x="94.8108%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,993,681 samples, 0.30%)</title><rect x="94.7820%" y="85" width="0.3037%" height="15" fill="rgb(251,28,31)"/><text x="95.0320%" y="95.50"></text></g><g><title>resolve_instance (7,260,772 samples, 0.55%)</title><rect x="94.6715%" y="101" width="0.5521%" height="15" fill="rgb(233,223,10)"/><text x="94.9215%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (39,178,335 samples, 2.98%)</title><rect x="92.4152%" y="117" width="2.9792%" height="15" fill="rgb(215,21,27)"/><text x="92.6652%" y="127.50">mon..</text></g><g><title>monomorphization_collector (39,496,178 samples, 3.00%)</title><rect x="92.4150%" y="133" width="3.0034%" height="15" fill="rgb(232,23,21)"/><text x="92.6650%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,393,244 samples, 0.26%)</title><rect x="95.4187%" y="117" width="0.2580%" height="15" fill="rgb(244,5,23)"/><text x="95.6687%" y="127.50"></text></g><g><title>symbol_name (3,063,940 samples, 0.23%)</title><rect x="95.4438%" y="101" width="0.2330%" height="15" fill="rgb(226,81,46)"/><text x="95.6938%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (44,539,969 samples, 3.39%)</title><rect x="92.4118%" y="149" width="3.3869%" height="15" fill="rgb(247,70,30)"/><text x="92.6618%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (5,001,680 samples, 0.38%)</title><rect x="95.4184%" y="133" width="0.3803%" height="15" fill="rgb(212,68,19)"/><text x="95.6684%" y="143.50"></text></g><g><title>cgu_partitioning (1,603,426 samples, 0.12%)</title><rect x="95.6768%" y="117" width="0.1219%" height="15" fill="rgb(240,187,13)"/><text x="95.9268%" y="127.50"></text></g><g><title>exported_symbols (45,195,045 samples, 3.44%)</title><rect x="92.3996%" y="165" width="3.4368%" height="15" fill="rgb(223,113,26)"/><text x="92.6496%" y="175.50">exp..</text></g><g><title>layout_of (1,564,774 samples, 0.12%)</title><rect x="96.4377%" y="149" width="0.1190%" height="15" fill="rgb(206,192,2)"/><text x="96.6877%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,275,940 samples, 0.63%)</title><rect x="96.5567%" y="149" width="0.6293%" height="15" fill="rgb(241,108,4)"/><text x="96.8067%" y="159.50"></text></g><g><title>optimized_mir (17,624,039 samples, 1.34%)</title><rect x="95.8645%" y="165" width="1.3402%" height="15" fill="rgb(247,173,49)"/><text x="96.1145%" y="175.50"></text></g><g><title>generate_crate_metadata (70,009,975 samples, 5.32%)</title><rect x="91.9067%" y="181" width="5.3238%" height="15" fill="rgb(224,114,35)"/><text x="92.1567%" y="191.50">generat..</text></g><g><title>hir_lowering (13,065,131 samples, 0.99%)</title><rect x="97.2304%" y="181" width="0.9935%" height="15" fill="rgb(245,159,27)"/><text x="97.4804%" y="191.50"></text></g><g><title>finish_ongoing_codegen (14,369,625 samples, 1.09%)</title><rect x="98.2250%" y="165" width="1.0927%" height="15" fill="rgb(245,172,44)"/><text x="98.4750%" y="175.50"></text></g><g><title>link_crate (3,819,119 samples, 0.29%)</title><rect x="99.3177%" y="165" width="0.2904%" height="15" fill="rgb(236,23,11)"/><text x="99.5677%" y="175.50"></text></g><g><title>link_binary (3,688,897 samples, 0.28%)</title><rect x="99.3276%" y="149" width="0.2805%" height="15" fill="rgb(205,117,38)"/><text x="99.5776%" y="159.50"></text></g><g><title>link_rlib (2,935,239 samples, 0.22%)</title><rect x="99.3849%" y="133" width="0.2232%" height="15" fill="rgb(237,72,25)"/><text x="99.6349%" y="143.50"></text></g><g><title>link (18,210,614 samples, 1.38%)</title><rect x="98.2239%" y="181" width="1.3848%" height="15" fill="rgb(244,70,9)"/><text x="98.4739%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,638,487 samples, 0.28%)</title><rect x="99.6696%" y="181" width="0.2767%" height="15" fill="rgb(217,125,39)"/><text x="99.9196%" y="191.50"></text></g><g><title>all (1,315,046,692 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,315,046,692 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>