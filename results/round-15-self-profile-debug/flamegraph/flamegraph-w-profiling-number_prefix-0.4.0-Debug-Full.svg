<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,488,578 samples, 10.57%)</title><rect x="0.4387%" y="181" width="10.5742%" height="15" fill="rgb(227,0,7)"/><text x="0.6887%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (557,886 samples, 0.34%)</title><rect x="16.2449%" y="69" width="0.3373%" height="15" fill="rgb(217,0,24)"/><text x="16.4949%" y="79.50"></text></g><g><title>is_copy_raw (481,586 samples, 0.29%)</title><rect x="16.2910%" y="53" width="0.2912%" height="15" fill="rgb(221,193,54)"/><text x="16.5410%" y="63.50"></text></g><g><title>evaluate_obligation (445,933 samples, 0.27%)</title><rect x="16.3126%" y="37" width="0.2696%" height="15" fill="rgb(248,212,6)"/><text x="16.5626%" y="47.50"></text></g><g><title>thir_body (577,126 samples, 0.35%)</title><rect x="16.6704%" y="69" width="0.3490%" height="15" fill="rgb(208,68,35)"/><text x="16.9204%" y="79.50"></text></g><g><title>mir_const (3,640,506 samples, 2.20%)</title><rect x="14.8290%" y="117" width="2.2012%" height="15" fill="rgb(232,128,0)"/><text x="15.0790%" y="127.50">m..</text></g><g><title>unsafety_check_result (3,091,303 samples, 1.87%)</title><rect x="15.1611%" y="101" width="1.8691%" height="15" fill="rgb(207,160,47)"/><text x="15.4111%" y="111.50">u..</text></g><g><title>mir_built (2,718,637 samples, 1.64%)</title><rect x="15.3864%" y="85" width="1.6438%" height="15" fill="rgb(228,23,34)"/><text x="15.6364%" y="95.50"></text></g><g><title>mir_promoted (4,265,895 samples, 2.58%)</title><rect x="14.5433%" y="133" width="2.5793%" height="15" fill="rgb(218,30,26)"/><text x="14.7933%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (253,741 samples, 0.15%)</title><rect x="17.1232%" y="133" width="0.1534%" height="15" fill="rgb(220,122,19)"/><text x="17.3732%" y="143.50"></text></g><g><title>type_op_prove_predicate (757,769 samples, 0.46%)</title><rect x="17.3668%" y="133" width="0.4582%" height="15" fill="rgb(250,228,42)"/><text x="17.6168%" y="143.50"></text></g><g><title>MIR_borrow_checking (11,070,053 samples, 6.69%)</title><rect x="11.1347%" y="165" width="6.6933%" height="15" fill="rgb(240,193,28)"/><text x="11.3847%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (11,011,703 samples, 6.66%)</title><rect x="11.1700%" y="149" width="6.6581%" height="15" fill="rgb(216,20,37)"/><text x="11.4200%" y="159.50">mir_borro..</text></g><g><title>codegen_fn_attrs (284,383 samples, 0.17%)</title><rect x="18.0892%" y="133" width="0.1719%" height="15" fill="rgb(206,188,39)"/><text x="18.3392%" y="143.50"></text></g><g><title>check_mod_attrs (430,504 samples, 0.26%)</title><rect x="18.0011%" y="149" width="0.2603%" height="15" fill="rgb(217,207,13)"/><text x="18.2511%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (264,033 samples, 0.16%)</title><rect x="18.3259%" y="149" width="0.1596%" height="15" fill="rgb(231,73,38)"/><text x="18.5759%" y="159.50"></text></g><g><title>misc_checking_1 (861,349 samples, 0.52%)</title><rect x="17.9914%" y="165" width="0.5208%" height="15" fill="rgb(225,20,46)"/><text x="18.2414%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (171,611 samples, 0.10%)</title><rect x="18.5133%" y="149" width="0.1038%" height="15" fill="rgb(210,31,41)"/><text x="18.7633%" y="159.50"></text></g><g><title>misc_checking_2 (695,557 samples, 0.42%)</title><rect x="18.5122%" y="165" width="0.4206%" height="15" fill="rgb(221,200,47)"/><text x="18.7622%" y="175.50"></text></g><g><title>match_checking (522,236 samples, 0.32%)</title><rect x="18.6170%" y="149" width="0.3158%" height="15" fill="rgb(226,26,5)"/><text x="18.8670%" y="159.50"></text></g><g><title>check_match (505,505 samples, 0.31%)</title><rect x="18.6271%" y="133" width="0.3056%" height="15" fill="rgb(249,33,26)"/><text x="18.8771%" y="143.50"></text></g><g><title>death_checking (309,434 samples, 0.19%)</title><rect x="19.0085%" y="149" width="0.1871%" height="15" fill="rgb(235,183,28)"/><text x="19.2585%" y="159.50"></text></g><g><title>crate_lints (1,788,528 samples, 1.08%)</title><rect x="19.1967%" y="133" width="1.0814%" height="15" fill="rgb(221,5,38)"/><text x="19.4467%" y="143.50"></text></g><g><title>type_of (1,066,550 samples, 0.64%)</title><rect x="19.6332%" y="117" width="0.6449%" height="15" fill="rgb(247,18,42)"/><text x="19.8832%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (813,879 samples, 0.49%)</title><rect x="19.7860%" y="101" width="0.4921%" height="15" fill="rgb(241,131,45)"/><text x="20.0360%" y="111.50"></text></g><g><title>lint_checking (2,017,980 samples, 1.22%)</title><rect x="19.1956%" y="149" width="1.2201%" height="15" fill="rgb(249,31,29)"/><text x="19.4456%" y="159.50"></text></g><g><title>module_lints (227,692 samples, 0.14%)</title><rect x="20.2781%" y="133" width="0.1377%" height="15" fill="rgb(225,111,53)"/><text x="20.5281%" y="143.50"></text></g><g><title>lint_mod (224,862 samples, 0.14%)</title><rect x="20.2798%" y="117" width="0.1360%" height="15" fill="rgb(238,160,17)"/><text x="20.5298%" y="127.50"></text></g><g><title>privacy_checking_modules (371,684 samples, 0.22%)</title><rect x="20.5110%" y="149" width="0.2247%" height="15" fill="rgb(214,148,48)"/><text x="20.7610%" y="159.50"></text></g><g><title>check_mod_privacy (369,594 samples, 0.22%)</title><rect x="20.5122%" y="133" width="0.2235%" height="15" fill="rgb(232,36,49)"/><text x="20.7622%" y="143.50"></text></g><g><title>misc_checking_3 (2,994,411 samples, 1.81%)</title><rect x="18.9328%" y="165" width="1.8105%" height="15" fill="rgb(209,103,24)"/><text x="19.1828%" y="175.50">m..</text></g><g><title>adt_destructor (366,674 samples, 0.22%)</title><rect x="20.8117%" y="117" width="0.2217%" height="15" fill="rgb(229,88,8)"/><text x="21.0617%" y="127.50"></text></g><g><title>coherent_trait (358,274 samples, 0.22%)</title><rect x="20.8168%" y="101" width="0.2166%" height="15" fill="rgb(213,181,19)"/><text x="21.0668%" y="111.50"></text></g><g><title>specialization_graph_of (357,244 samples, 0.22%)</title><rect x="20.8174%" y="85" width="0.2160%" height="15" fill="rgb(254,191,54)"/><text x="21.0674%" y="95.50"></text></g><g><title>impl_parent (2,329,254 samples, 1.41%)</title><rect x="23.3742%" y="101" width="1.4083%" height="15" fill="rgb(241,83,37)"/><text x="23.6242%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,362,433 samples, 0.82%)</title><rect x="23.9587%" y="85" width="0.8238%" height="15" fill="rgb(233,36,39)"/><text x="24.2087%" y="95.50"></text></g><g><title>impl_trait_ref (5,305,320 samples, 3.21%)</title><rect x="24.7825%" y="101" width="3.2078%" height="15" fill="rgb(226,3,54)"/><text x="25.0325%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,927,446 samples, 2.37%)</title><rect x="25.6156%" y="85" width="2.3747%" height="15" fill="rgb(245,192,40)"/><text x="25.8656%" y="95.50">me..</text></g><g><title>coherent_trait (12,712,659 samples, 7.69%)</title><rect x="20.7883%" y="133" width="7.6865%" height="15" fill="rgb(238,167,29)"/><text x="21.0383%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (12,131,873 samples, 7.34%)</title><rect x="21.1394%" y="117" width="7.3353%" height="15" fill="rgb(232,182,51)"/><text x="21.3894%" y="127.50">specializa..</text></g><g><title>trait_impls_of (799,389 samples, 0.48%)</title><rect x="27.9914%" y="101" width="0.4833%" height="15" fill="rgb(231,60,39)"/><text x="28.2414%" y="111.50"></text></g><g><title>implementations_of_trait (202,061 samples, 0.12%)</title><rect x="28.3526%" y="85" width="0.1222%" height="15" fill="rgb(208,69,12)"/><text x="28.6026%" y="95.50"></text></g><g><title>coherence_checking (12,796,900 samples, 7.74%)</title><rect x="20.7713%" y="149" width="7.7374%" height="15" fill="rgb(235,93,37)"/><text x="21.0213%" y="159.50">coherence_c..</text></g><g><title>associated_item (169,172 samples, 0.10%)</title><rect x="34.1538%" y="85" width="0.1023%" height="15" fill="rgb(213,116,39)"/><text x="34.4038%" y="95.50"></text></g><g><title>associated_items (256,903 samples, 0.16%)</title><rect x="34.1076%" y="101" width="0.1553%" height="15" fill="rgb(222,207,29)"/><text x="34.3576%" y="111.50"></text></g><g><title>generics_of (717,102 samples, 0.43%)</title><rect x="35.2922%" y="85" width="0.4336%" height="15" fill="rgb(206,96,30)"/><text x="35.5422%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (591,331 samples, 0.36%)</title><rect x="35.3683%" y="69" width="0.3575%" height="15" fill="rgb(218,138,4)"/><text x="35.6183%" y="79.50"></text></g><g><title>impl_trait_ref (731,528 samples, 0.44%)</title><rect x="35.7462%" y="85" width="0.4423%" height="15" fill="rgb(250,191,14)"/><text x="35.9962%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (609,376 samples, 0.37%)</title><rect x="35.8200%" y="69" width="0.3684%" height="15" fill="rgb(239,60,40)"/><text x="36.0700%" y="79.50"></text></g><g><title>predicates_of (180,031 samples, 0.11%)</title><rect x="36.1968%" y="85" width="0.1089%" height="15" fill="rgb(206,27,48)"/><text x="36.4468%" y="95.50"></text></g><g><title>specializes (393,372 samples, 0.24%)</title><rect x="36.3056%" y="85" width="0.2378%" height="15" fill="rgb(225,35,8)"/><text x="36.5556%" y="95.50"></text></g><g><title>param_env (230,202 samples, 0.14%)</title><rect x="36.4043%" y="69" width="0.1392%" height="15" fill="rgb(250,213,24)"/><text x="36.6543%" y="79.50"></text></g><g><title>evaluate_obligation (3,798,539 samples, 2.30%)</title><rect x="34.3226%" y="101" width="2.2967%" height="15" fill="rgb(247,123,22)"/><text x="34.5726%" y="111.50">e..</text></g><g><title>generics_of (648,236 samples, 0.39%)</title><rect x="36.6561%" y="101" width="0.3919%" height="15" fill="rgb(231,138,38)"/><text x="36.9061%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (517,405 samples, 0.31%)</title><rect x="36.7352%" y="85" width="0.3128%" height="15" fill="rgb(231,145,46)"/><text x="36.9852%" y="95.50"></text></g><g><title>associated_items (220,763 samples, 0.13%)</title><rect x="38.6808%" y="85" width="0.1335%" height="15" fill="rgb(251,118,11)"/><text x="38.9308%" y="95.50"></text></g><g><title>evaluate_obligation (231,641 samples, 0.14%)</title><rect x="38.8614%" y="85" width="0.1401%" height="15" fill="rgb(217,147,25)"/><text x="39.1114%" y="95.50"></text></g><g><title>typeck (2,791,908 samples, 1.69%)</title><rect x="37.5042%" y="101" width="1.6881%" height="15" fill="rgb(247,81,37)"/><text x="37.7542%" y="111.50"></text></g><g><title>item_bodies_checking (17,660,259 samples, 10.68%)</title><rect x="28.5242%" y="149" width="10.6780%" height="15" fill="rgb(209,12,38)"/><text x="28.7742%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (17,657,389 samples, 10.68%)</title><rect x="28.5259%" y="133" width="10.6763%" height="15" fill="rgb(227,1,9)"/><text x="28.7759%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (17,617,979 samples, 10.65%)</title><rect x="28.5497%" y="117" width="10.6524%" height="15" fill="rgb(248,47,43)"/><text x="28.7997%" y="127.50">typeck</text></g><g><title>item_types_checking (572,416 samples, 0.35%)</title><rect x="39.2022%" y="149" width="0.3461%" height="15" fill="rgb(221,10,30)"/><text x="39.4522%" y="159.50"></text></g><g><title>check_mod_item_types (569,276 samples, 0.34%)</title><rect x="39.2041%" y="133" width="0.3442%" height="15" fill="rgb(210,229,1)"/><text x="39.4541%" y="143.50"></text></g><g><title>fn_sig (249,262 samples, 0.15%)</title><rect x="39.6607%" y="117" width="0.1507%" height="15" fill="rgb(222,148,37)"/><text x="39.9107%" y="127.50"></text></g><g><title>generics_of (170,551 samples, 0.10%)</title><rect x="39.8115%" y="117" width="0.1031%" height="15" fill="rgb(234,67,33)"/><text x="40.0615%" y="127.50"></text></g><g><title>late_bound_vars_map (215,712 samples, 0.13%)</title><rect x="40.0690%" y="69" width="0.1304%" height="15" fill="rgb(247,98,35)"/><text x="40.3190%" y="79.50"></text></g><g><title>resolve_lifetimes (205,051 samples, 0.12%)</title><rect x="40.0754%" y="53" width="0.1240%" height="15" fill="rgb(247,138,52)"/><text x="40.3254%" y="63.50"></text></g><g><title>explicit_predicates_of (336,485 samples, 0.20%)</title><rect x="40.0025%" y="85" width="0.2035%" height="15" fill="rgb(213,79,30)"/><text x="40.2525%" y="95.50"></text></g><g><title>predicates_of (520,917 samples, 0.31%)</title><rect x="39.9479%" y="117" width="0.3150%" height="15" fill="rgb(246,177,23)"/><text x="40.1979%" y="127.50"></text></g><g><title>predicates_defined_on (486,857 samples, 0.29%)</title><rect x="39.9685%" y="101" width="0.2944%" height="15" fill="rgb(230,62,27)"/><text x="40.2185%" y="111.50"></text></g><g><title>type_collecting (1,364,354 samples, 0.82%)</title><rect x="39.5493%" y="149" width="0.8249%" height="15" fill="rgb(216,154,8)"/><text x="39.7993%" y="159.50"></text></g><g><title>collect_mod_item_types (1,356,954 samples, 0.82%)</title><rect x="39.5538%" y="133" width="0.8205%" height="15" fill="rgb(244,35,45)"/><text x="39.8038%" y="143.50"></text></g><g><title>evaluate_obligation (208,271 samples, 0.13%)</title><rect x="40.9822%" y="117" width="0.1259%" height="15" fill="rgb(251,115,12)"/><text x="41.2322%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,647,873 samples, 1.00%)</title><rect x="40.4382%" y="133" width="0.9964%" height="15" fill="rgb(240,54,50)"/><text x="40.6882%" y="143.50"></text></g><g><title>region_scope_tree (253,861 samples, 0.15%)</title><rect x="41.2811%" y="117" width="0.1535%" height="15" fill="rgb(233,84,52)"/><text x="41.5311%" y="127.50"></text></g><g><title>evaluate_obligation (392,785 samples, 0.24%)</title><rect x="41.9628%" y="117" width="0.2375%" height="15" fill="rgb(207,117,47)"/><text x="42.2128%" y="127.50"></text></g><g><title>param_env (173,502 samples, 0.10%)</title><rect x="42.2505%" y="117" width="0.1049%" height="15" fill="rgb(249,43,39)"/><text x="42.5005%" y="127.50"></text></g><g><title>check_item_well_formed (1,795,982 samples, 1.09%)</title><rect x="41.4346%" y="133" width="1.0859%" height="15" fill="rgb(209,38,44)"/><text x="41.6846%" y="143.50"></text></g><g><title>analysis (52,207,500 samples, 31.57%)</title><rect x="11.0129%" y="181" width="31.5664%" height="15" fill="rgb(236,212,23)"/><text x="11.2629%" y="191.50">analysis</text></g><g><title>type_check_crate (36,114,446 samples, 21.84%)</title><rect x="20.7433%" y="165" width="21.8360%" height="15" fill="rgb(242,79,21)"/><text x="20.9933%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,644,477 samples, 2.20%)</title><rect x="40.3758%" y="149" width="2.2036%" height="15" fill="rgb(211,96,35)"/><text x="40.6258%" y="159.50">w..</text></g><g><title>param_env (259,790 samples, 0.16%)</title><rect x="46.9382%" y="133" width="0.1571%" height="15" fill="rgb(253,215,40)"/><text x="47.1882%" y="143.50"></text></g><g><title>fn_abi_of_instance (795,765 samples, 0.48%)</title><rect x="46.6165%" y="149" width="0.4811%" height="15" fill="rgb(211,81,21)"/><text x="46.8665%" y="159.50"></text></g><g><title>codegen_module (6,807,091 samples, 4.12%)</title><rect x="43.1888%" y="165" width="4.1158%" height="15" fill="rgb(208,190,38)"/><text x="43.4388%" y="175.50">code..</text></g><g><title>codegen_crate (7,865,610 samples, 4.76%)</title><rect x="42.5871%" y="181" width="4.7558%" height="15" fill="rgb(235,213,38)"/><text x="42.8371%" y="191.50">codege..</text></g><g><title>LLVM_module_codegen (38,659,095 samples, 23.37%)</title><rect x="47.3822%" y="165" width="23.3746%" height="15" fill="rgb(237,122,38)"/><text x="47.6322%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (37,447,023 samples, 22.64%)</title><rect x="48.1151%" y="149" width="22.6417%" height="15" fill="rgb(244,218,35)"/><text x="48.3651%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (40,099,550 samples, 24.25%)</title><rect x="47.3429%" y="181" width="24.2456%" height="15" fill="rgb(240,68,47)"/><text x="47.5929%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,375,405 samples, 0.83%)</title><rect x="70.7568%" y="165" width="0.8316%" height="15" fill="rgb(210,16,53)"/><text x="71.0068%" y="175.50"></text></g><g><title>AST_validation (200,772 samples, 0.12%)</title><rect x="71.7186%" y="165" width="0.1214%" height="15" fill="rgb(235,124,12)"/><text x="71.9686%" y="175.50"></text></g><g><title>metadata_load_macro (208,501 samples, 0.13%)</title><rect x="80.5340%" y="133" width="0.1261%" height="15" fill="rgb(224,169,11)"/><text x="80.7840%" y="143.50"></text></g><g><title>metadata_register_crate (2,633,367 samples, 1.59%)</title><rect x="80.6601%" y="133" width="1.5922%" height="15" fill="rgb(250,166,2)"/><text x="80.9101%" y="143.50"></text></g><g><title>metadata_register_crate (967,200 samples, 0.58%)</title><rect x="81.6675%" y="117" width="0.5848%" height="15" fill="rgb(242,216,29)"/><text x="81.9175%" y="127.50"></text></g><g><title>macro_expand_crate (17,114,844 samples, 10.35%)</title><rect x="71.9404%" y="165" width="10.3482%" height="15" fill="rgb(230,116,27)"/><text x="72.1904%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (17,098,343 samples, 10.34%)</title><rect x="71.9504%" y="149" width="10.3382%" height="15" fill="rgb(228,99,48)"/><text x="72.2004%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (207,082 samples, 0.13%)</title><rect x="82.2922%" y="165" width="0.1252%" height="15" fill="rgb(253,11,6)"/><text x="82.5422%" y="175.50"></text></g><g><title>finalize_macro_resolutions (336,624 samples, 0.20%)</title><rect x="82.4637%" y="149" width="0.2035%" height="15" fill="rgb(247,143,39)"/><text x="82.7137%" y="159.50"></text></g><g><title>late_resolve_crate (2,366,343 samples, 1.43%)</title><rect x="82.6673%" y="149" width="1.4308%" height="15" fill="rgb(236,97,10)"/><text x="82.9173%" y="159.50"></text></g><g><title>configure_and_expand (20,799,601 samples, 12.58%)</title><rect x="71.5885%" y="181" width="12.5761%" height="15" fill="rgb(233,208,19)"/><text x="71.8385%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,889,689 samples, 1.75%)</title><rect x="82.4174%" y="165" width="1.7472%" height="15" fill="rgb(216,164,2)"/><text x="82.6674%" y="175.50"></text></g><g><title>early_lint_checks (254,043 samples, 0.15%)</title><rect x="84.2348%" y="181" width="0.1536%" height="15" fill="rgb(220,129,5)"/><text x="84.4848%" y="191.50"></text></g><g><title>free_global_ctxt (4,622,246 samples, 2.79%)</title><rect x="84.3884%" y="181" width="2.7948%" height="15" fill="rgb(242,17,10)"/><text x="84.6384%" y="191.50">fr..</text></g><g><title>mir_drops_elaborated_and_const_checked (568,187 samples, 0.34%)</title><rect x="88.5427%" y="85" width="0.3435%" height="15" fill="rgb(242,107,0)"/><text x="88.7927%" y="95.50"></text></g><g><title>optimized_mir (1,560,075 samples, 0.94%)</title><rect x="88.0595%" y="101" width="0.9433%" height="15" fill="rgb(251,28,31)"/><text x="88.3095%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (2,308,503 samples, 1.40%)</title><rect x="87.8421%" y="117" width="1.3958%" height="15" fill="rgb(233,223,10)"/><text x="88.0921%" y="127.50"></text></g><g><title>monomorphization_collector (2,342,254 samples, 1.42%)</title><rect x="87.8407%" y="133" width="1.4162%" height="15" fill="rgb(215,21,27)"/><text x="88.0907%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (172,542 samples, 0.10%)</title><rect x="89.2587%" y="117" width="0.1043%" height="15" fill="rgb(232,23,21)"/><text x="89.5087%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (2,630,067 samples, 1.59%)</title><rect x="87.8248%" y="149" width="1.5902%" height="15" fill="rgb(244,5,23)"/><text x="88.0748%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (261,453 samples, 0.16%)</title><rect x="89.2569%" y="133" width="0.1581%" height="15" fill="rgb(226,81,46)"/><text x="89.5069%" y="143.50"></text></g><g><title>exported_symbols (2,742,178 samples, 1.66%)</title><rect x="87.8092%" y="165" width="1.6580%" height="15" fill="rgb(247,70,30)"/><text x="88.0592%" y="175.50"></text></g><g><title>layout_of (235,171 samples, 0.14%)</title><rect x="90.2046%" y="149" width="0.1422%" height="15" fill="rgb(212,68,19)"/><text x="90.4546%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,287,453 samples, 0.78%)</title><rect x="90.3468%" y="149" width="0.7784%" height="15" fill="rgb(240,187,13)"/><text x="90.5968%" y="159.50"></text></g><g><title>optimized_mir (2,658,005 samples, 1.61%)</title><rect x="89.5281%" y="165" width="1.6071%" height="15" fill="rgb(223,113,26)"/><text x="89.7781%" y="175.50"></text></g><g><title>generate_crate_metadata (6,575,957 samples, 3.98%)</title><rect x="87.1832%" y="181" width="3.9760%" height="15" fill="rgb(206,192,2)"/><text x="87.4332%" y="191.50">gene..</text></g><g><title>hir_lowering (2,265,283 samples, 1.37%)</title><rect x="91.1593%" y="181" width="1.3697%" height="15" fill="rgb(241,108,4)"/><text x="91.4093%" y="191.50"></text></g><g><title>finish_ongoing_codegen (6,628,858 samples, 4.01%)</title><rect x="92.5377%" y="165" width="4.0080%" height="15" fill="rgb(247,173,49)"/><text x="92.7877%" y="175.50">fini..</text></g><g><title>link_crate (1,045,780 samples, 0.63%)</title><rect x="96.5457%" y="165" width="0.6323%" height="15" fill="rgb(224,114,35)"/><text x="96.7957%" y="175.50"></text></g><g><title>link_binary (1,029,220 samples, 0.62%)</title><rect x="96.5557%" y="149" width="0.6223%" height="15" fill="rgb(245,159,27)"/><text x="96.8057%" y="159.50"></text></g><g><title>link_rlib (655,156 samples, 0.40%)</title><rect x="96.7819%" y="133" width="0.3961%" height="15" fill="rgb(245,172,44)"/><text x="97.0319%" y="143.50"></text></g><g><title>link (7,698,199 samples, 4.65%)</title><rect x="92.5289%" y="181" width="4.6546%" height="15" fill="rgb(236,23,11)"/><text x="92.7789%" y="191.50">link</text></g><g><title>parse_crate (2,823,649 samples, 1.71%)</title><rect x="97.1835%" y="181" width="1.7073%" height="15" fill="rgb(205,117,38)"/><text x="97.4335%" y="191.50"></text></g><g><title>prepare_outputs (285,403 samples, 0.17%)</title><rect x="98.8970%" y="181" width="0.1726%" height="15" fill="rgb(237,72,25)"/><text x="99.1470%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,164,422 samples, 0.70%)</title><rect x="99.0696%" y="181" width="0.7040%" height="15" fill="rgb(244,70,9)"/><text x="99.3196%" y="191.50"></text></g><g><title>all (165,389,282 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (165,389,282 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (290,032 samples, 0.18%)</title><rect x="99.8246%" y="181" width="0.1754%" height="15" fill="rgb(251,123,47)"/><text x="100.0746%" y="191.50"></text></g></svg></svg>