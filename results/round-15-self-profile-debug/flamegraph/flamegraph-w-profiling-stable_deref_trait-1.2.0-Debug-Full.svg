<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,100,333 samples, 7.82%)</title><rect x="1.9464%" y="181" width="7.8190%" height="15" fill="rgb(227,0,7)"/><text x="2.1964%" y="191.50">LLVM_passes</text></g><g><title>hir_module_items (133,081 samples, 0.34%)</title><rect x="10.1768%" y="165" width="0.3356%" height="15" fill="rgb(217,0,24)"/><text x="10.4268%" y="175.50"></text></g><g><title>check_mod_attrs (53,150 samples, 0.13%)</title><rect x="10.5854%" y="149" width="0.1340%" height="15" fill="rgb(221,193,54)"/><text x="10.8354%" y="159.50"></text></g><g><title>lookup_deprecation_entry (122,750 samples, 0.31%)</title><rect x="11.1736%" y="133" width="0.3096%" height="15" fill="rgb(248,212,6)"/><text x="11.4236%" y="143.50"></text></g><g><title>stability_index (46,510 samples, 0.12%)</title><rect x="11.3659%" y="117" width="0.1173%" height="15" fill="rgb(208,68,35)"/><text x="11.6159%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (334,794 samples, 0.84%)</title><rect x="10.8137%" y="149" width="0.8443%" height="15" fill="rgb(232,128,0)"/><text x="11.0637%" y="159.50"></text></g><g><title>looking_for_derive_registrar (64,930 samples, 0.16%)</title><rect x="11.6612%" y="149" width="0.1638%" height="15" fill="rgb(207,160,47)"/><text x="11.9112%" y="159.50"></text></g><g><title>misc_checking_1 (532,015 samples, 1.34%)</title><rect x="10.5144%" y="165" width="1.3417%" height="15" fill="rgb(228,23,34)"/><text x="10.7644%" y="175.50"></text></g><g><title>check_private_in_public (85,951 samples, 0.22%)</title><rect x="11.9436%" y="149" width="0.2168%" height="15" fill="rgb(218,30,26)"/><text x="12.1936%" y="159.50"></text></g><g><title>codegen_fn_attrs (116,971 samples, 0.30%)</title><rect x="12.4418%" y="133" width="0.2950%" height="15" fill="rgb(220,122,19)"/><text x="12.6918%" y="143.50"></text></g><g><title>supported_target_features (40,001 samples, 0.10%)</title><rect x="12.6360%" y="117" width="0.1009%" height="15" fill="rgb(250,228,42)"/><text x="12.8860%" y="127.50"></text></g><g><title>death_checking (235,292 samples, 0.59%)</title><rect x="12.1604%" y="149" width="0.5934%" height="15" fill="rgb(240,193,28)"/><text x="12.4104%" y="159.50"></text></g><g><title>explicit_predicates_of (60,560 samples, 0.15%)</title><rect x="13.4230%" y="69" width="0.1527%" height="15" fill="rgb(216,20,37)"/><text x="13.6730%" y="79.50"></text></g><g><title>crate_lints (327,763 samples, 0.83%)</title><rect x="12.7615%" y="133" width="0.8266%" height="15" fill="rgb(206,188,39)"/><text x="13.0115%" y="143.50"></text></g><g><title>param_env (262,211 samples, 0.66%)</title><rect x="12.9268%" y="117" width="0.6613%" height="15" fill="rgb(217,207,13)"/><text x="13.1768%" y="127.50"></text></g><g><title>predicates_of (123,091 samples, 0.31%)</title><rect x="13.2777%" y="101" width="0.3104%" height="15" fill="rgb(231,73,38)"/><text x="13.5277%" y="111.50"></text></g><g><title>predicates_defined_on (104,651 samples, 0.26%)</title><rect x="13.3242%" y="85" width="0.2639%" height="15" fill="rgb(225,20,46)"/><text x="13.5742%" y="95.50"></text></g><g><title>lint_checking (376,374 samples, 0.95%)</title><rect x="12.7538%" y="149" width="0.9492%" height="15" fill="rgb(210,31,41)"/><text x="13.0038%" y="159.50"></text></g><g><title>module_lints (45,551 samples, 0.11%)</title><rect x="13.5881%" y="133" width="0.1149%" height="15" fill="rgb(221,200,47)"/><text x="13.8381%" y="143.50"></text></g><g><title>lint_mod (42,251 samples, 0.11%)</title><rect x="13.5964%" y="117" width="0.1066%" height="15" fill="rgb(226,26,5)"/><text x="13.8464%" y="127.50"></text></g><g><title>privacy_access_levels (100,471 samples, 0.25%)</title><rect x="13.7030%" y="149" width="0.2534%" height="15" fill="rgb(249,33,26)"/><text x="13.9530%" y="159.50"></text></g><g><title>late_bound_vars_map (57,940 samples, 0.15%)</title><rect x="14.2966%" y="117" width="0.1461%" height="15" fill="rgb(235,183,28)"/><text x="14.5466%" y="127.50"></text></g><g><title>resolve_lifetimes (43,130 samples, 0.11%)</title><rect x="14.3340%" y="101" width="0.1088%" height="15" fill="rgb(221,5,38)"/><text x="14.5840%" y="111.50"></text></g><g><title>privacy_checking_modules (196,842 samples, 0.50%)</title><rect x="13.9564%" y="149" width="0.4964%" height="15" fill="rgb(247,18,42)"/><text x="14.2064%" y="159.50"></text></g><g><title>check_mod_privacy (194,102 samples, 0.49%)</title><rect x="13.9633%" y="133" width="0.4895%" height="15" fill="rgb(241,131,45)"/><text x="14.2133%" y="143.50"></text></g><g><title>misc_checking_3 (1,021,681 samples, 2.58%)</title><rect x="11.9188%" y="165" width="2.5767%" height="15" fill="rgb(249,31,29)"/><text x="12.1688%" y="175.50">mi..</text></g><g><title>coherent_trait (143,892 samples, 0.36%)</title><rect x="14.6849%" y="133" width="0.3629%" height="15" fill="rgb(225,111,53)"/><text x="14.9349%" y="143.50"></text></g><g><title>specialization_graph_of (125,552 samples, 0.32%)</title><rect x="14.7312%" y="117" width="0.3166%" height="15" fill="rgb(238,160,17)"/><text x="14.9812%" y="127.50"></text></g><g><title>orphan_check_crate (41,800 samples, 0.11%)</title><rect x="15.0743%" y="133" width="0.1054%" height="15" fill="rgb(214,148,48)"/><text x="15.3243%" y="143.50"></text></g><g><title>coherence_checking (227,602 samples, 0.57%)</title><rect x="14.6177%" y="149" width="0.5740%" height="15" fill="rgb(232,36,49)"/><text x="14.8677%" y="159.50"></text></g><g><title>is_late_bound_map (208,381 samples, 0.53%)</title><rect x="15.9759%" y="101" width="0.5255%" height="15" fill="rgb(209,103,24)"/><text x="16.2259%" y="111.50"></text></g><g><title>resolve_lifetimes (186,611 samples, 0.47%)</title><rect x="16.0308%" y="85" width="0.4706%" height="15" fill="rgb(229,88,8)"/><text x="16.2808%" y="95.50"></text></g><g><title>generics_of (305,961 samples, 0.77%)</title><rect x="15.7664%" y="117" width="0.7716%" height="15" fill="rgb(213,181,19)"/><text x="16.0164%" y="127.50"></text></g><g><title>explicit_predicates_of (141,004 samples, 0.36%)</title><rect x="16.7940%" y="85" width="0.3556%" height="15" fill="rgb(254,191,54)"/><text x="17.0440%" y="95.50"></text></g><g><title>predicates_of (223,284 samples, 0.56%)</title><rect x="16.6223%" y="117" width="0.5631%" height="15" fill="rgb(241,83,37)"/><text x="16.8723%" y="127.50"></text></g><g><title>predicates_defined_on (200,894 samples, 0.51%)</title><rect x="16.6788%" y="101" width="0.5067%" height="15" fill="rgb(233,36,39)"/><text x="16.9288%" y="111.50"></text></g><g><title>late_bound_vars_map (124,201 samples, 0.31%)</title><rect x="17.5450%" y="85" width="0.3132%" height="15" fill="rgb(226,3,54)"/><text x="17.7950%" y="95.50"></text></g><g><title>resolve_lifetimes_trait_definition (117,141 samples, 0.30%)</title><rect x="17.5628%" y="69" width="0.2954%" height="15" fill="rgb(245,192,40)"/><text x="17.8128%" y="79.50"></text></g><g><title>get_lang_items (79,771 samples, 0.20%)</title><rect x="17.6571%" y="53" width="0.2012%" height="15" fill="rgb(238,167,29)"/><text x="17.9071%" y="63.50"></text></g><g><title>super_predicates_of (303,233 samples, 0.76%)</title><rect x="17.1854%" y="117" width="0.7648%" height="15" fill="rgb(232,182,51)"/><text x="17.4354%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (287,433 samples, 0.72%)</title><rect x="17.2253%" y="101" width="0.7249%" height="15" fill="rgb(231,60,39)"/><text x="17.4753%" y="111.50"></text></g><g><title>type_collecting (1,288,484 samples, 3.25%)</title><rect x="15.3365%" y="149" width="3.2496%" height="15" fill="rgb(208,69,12)"/><text x="15.5865%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (1,268,274 samples, 3.20%)</title><rect x="15.3874%" y="133" width="3.1986%" height="15" fill="rgb(235,93,37)"/><text x="15.6374%" y="143.50">col..</text></g><g><title>type_of (240,822 samples, 0.61%)</title><rect x="17.9787%" y="117" width="0.6074%" height="15" fill="rgb(213,116,39)"/><text x="18.2287%" y="127.50"></text></g><g><title>type_of (119,470 samples, 0.30%)</title><rect x="18.2847%" y="101" width="0.3013%" height="15" fill="rgb(222,207,29)"/><text x="18.5347%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (109,420 samples, 0.28%)</title><rect x="18.3101%" y="85" width="0.2760%" height="15" fill="rgb(206,96,30)"/><text x="18.5601%" y="95.50"></text></g><g><title>adt_def (101,291 samples, 0.26%)</title><rect x="24.2944%" y="101" width="0.2555%" height="15" fill="rgb(218,138,4)"/><text x="24.5444%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (99,441 samples, 0.25%)</title><rect x="24.2991%" y="85" width="0.2508%" height="15" fill="rgb(250,191,14)"/><text x="24.5491%" y="95.50"></text></g><g><title>item_attrs (83,791 samples, 0.21%)</title><rect x="24.3386%" y="69" width="0.2113%" height="15" fill="rgb(239,60,40)"/><text x="24.5886%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (82,010 samples, 0.21%)</title><rect x="24.3431%" y="53" width="0.2068%" height="15" fill="rgb(206,27,48)"/><text x="24.5931%" y="63.50"></text></g><g><title>adt_sized_constraint (88,481 samples, 0.22%)</title><rect x="24.5499%" y="101" width="0.2231%" height="15" fill="rgb(225,35,8)"/><text x="24.7999%" y="111.50"></text></g><g><title>adt_def (87,101 samples, 0.22%)</title><rect x="24.5534%" y="85" width="0.2197%" height="15" fill="rgb(250,213,24)"/><text x="24.8034%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (86,491 samples, 0.22%)</title><rect x="24.5549%" y="69" width="0.2181%" height="15" fill="rgb(247,123,22)"/><text x="24.8049%" y="79.50"></text></g><g><title>item_attrs (81,881 samples, 0.21%)</title><rect x="24.5665%" y="53" width="0.2065%" height="15" fill="rgb(231,138,38)"/><text x="24.8165%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (81,191 samples, 0.20%)</title><rect x="24.5683%" y="37" width="0.2048%" height="15" fill="rgb(231,145,46)"/><text x="24.8183%" y="47.50"></text></g><g><title>adt_sized_constraint (224,772 samples, 0.57%)</title><rect x="24.2666%" y="117" width="0.5669%" height="15" fill="rgb(251,118,11)"/><text x="24.5166%" y="127.50"></text></g><g><title>predicates_of (42,460 samples, 0.11%)</title><rect x="25.5720%" y="101" width="0.1071%" height="15" fill="rgb(217,147,25)"/><text x="25.8220%" y="111.50"></text></g><g><title>evaluate_obligation (369,954 samples, 0.93%)</title><rect x="24.8335%" y="117" width="0.9330%" height="15" fill="rgb(247,81,37)"/><text x="25.0835%" y="127.50"></text></g><g><title>generics_of (45,280 samples, 0.11%)</title><rect x="25.7665%" y="117" width="0.1142%" height="15" fill="rgb(209,12,38)"/><text x="26.0165%" y="127.50"></text></g><g><title>impl_trait_ref (111,781 samples, 0.28%)</title><rect x="25.9768%" y="117" width="0.2819%" height="15" fill="rgb(227,1,9)"/><text x="26.2268%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (94,451 samples, 0.24%)</title><rect x="26.0205%" y="101" width="0.2382%" height="15" fill="rgb(248,47,43)"/><text x="26.2705%" y="111.50"></text></g><g><title>implied_outlives_bounds (255,660 samples, 0.64%)</title><rect x="26.2587%" y="117" width="0.6448%" height="15" fill="rgb(221,10,30)"/><text x="26.5087%" y="127.50"></text></g><g><title>param_env (426,123 samples, 1.07%)</title><rect x="26.9034%" y="117" width="1.0747%" height="15" fill="rgb(210,229,1)"/><text x="27.1534%" y="127.50"></text></g><g><title>explicit_predicates_of (71,642 samples, 0.18%)</title><rect x="28.3330%" y="85" width="0.1807%" height="15" fill="rgb(222,148,37)"/><text x="28.5830%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (51,642 samples, 0.13%)</title><rect x="28.3835%" y="69" width="0.1302%" height="15" fill="rgb(234,67,33)"/><text x="28.6335%" y="79.50"></text></g><g><title>predicates_of (269,273 samples, 0.68%)</title><rect x="27.9781%" y="117" width="0.6791%" height="15" fill="rgb(247,98,35)"/><text x="28.2281%" y="127.50"></text></g><g><title>predicates_defined_on (189,802 samples, 0.48%)</title><rect x="28.1786%" y="101" width="0.4787%" height="15" fill="rgb(247,138,52)"/><text x="28.4286%" y="111.50"></text></g><g><title>inferred_outlives_of (56,900 samples, 0.14%)</title><rect x="28.5137%" y="85" width="0.1435%" height="15" fill="rgb(213,79,30)"/><text x="28.7637%" y="95.50"></text></g><g><title>analysis (7,915,423 samples, 19.96%)</title><rect x="9.7655%" y="181" width="19.9627%" height="15" fill="rgb(246,177,23)"/><text x="10.0155%" y="191.50">analysis</text></g><g><title>type_check_crate (6,039,933 samples, 15.23%)</title><rect x="14.4954%" y="165" width="15.2327%" height="15" fill="rgb(230,62,27)"/><text x="14.7454%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,417,977 samples, 11.14%)</title><rect x="18.5860%" y="149" width="11.1421%" height="15" fill="rgb(216,154,8)"/><text x="18.8360%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (4,321,724 samples, 10.90%)</title><rect x="18.8288%" y="133" width="10.8994%" height="15" fill="rgb(244,35,45)"/><text x="19.0788%" y="143.50">check_item_well_..</text></g><g><title>trait_impls_of (400,475 samples, 1.01%)</title><rect x="28.7181%" y="117" width="1.0100%" height="15" fill="rgb(251,115,12)"/><text x="28.9681%" y="127.50"></text></g><g><title>implementations_of_trait (93,591 samples, 0.24%)</title><rect x="29.4921%" y="101" width="0.2360%" height="15" fill="rgb(240,54,50)"/><text x="29.7421%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (73,700 samples, 0.19%)</title><rect x="29.5423%" y="85" width="0.1859%" height="15" fill="rgb(233,84,52)"/><text x="29.7923%" y="95.50"></text></g><g><title>codegen_module (556,556 samples, 1.40%)</title><rect x="31.4561%" y="165" width="1.4036%" height="15" fill="rgb(207,117,47)"/><text x="31.7061%" y="175.50"></text></g><g><title>native_libraries (51,181 samples, 0.13%)</title><rect x="33.0123%" y="165" width="0.1291%" height="15" fill="rgb(249,43,39)"/><text x="33.2623%" y="175.50"></text></g><g><title>metadata_decode_entry_native_libraries (39,731 samples, 0.10%)</title><rect x="33.0412%" y="149" width="0.1002%" height="15" fill="rgb(209,38,44)"/><text x="33.2912%" y="159.50"></text></g><g><title>codegen_crate (1,377,815 samples, 3.47%)</title><rect x="29.7592%" y="181" width="3.4748%" height="15" fill="rgb(236,212,23)"/><text x="30.0092%" y="191.50">cod..</text></g><g><title>LLVM_module_codegen (2,644,588 samples, 6.67%)</title><rect x="33.2612%" y="165" width="6.6696%" height="15" fill="rgb(242,79,21)"/><text x="33.5112%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (2,604,677 samples, 6.57%)</title><rect x="33.3619%" y="149" width="6.5690%" height="15" fill="rgb(211,96,35)"/><text x="33.6119%" y="159.50">LLVM_modu..</text></g><g><title>codegen_module_optimize (2,854,010 samples, 7.20%)</title><rect x="33.2340%" y="181" width="7.1978%" height="15" fill="rgb(253,215,40)"/><text x="33.4840%" y="191.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (198,642 samples, 0.50%)</title><rect x="39.9309%" y="165" width="0.5010%" height="15" fill="rgb(211,81,21)"/><text x="40.1809%" y="175.50"></text></g><g><title>AST_validation (124,691 samples, 0.31%)</title><rect x="40.9772%" y="165" width="0.3145%" height="15" fill="rgb(208,190,38)"/><text x="41.2272%" y="175.50"></text></g><g><title>crate_injection (124,391 samples, 0.31%)</title><rect x="41.3469%" y="165" width="0.3137%" height="15" fill="rgb(235,213,38)"/><text x="41.5969%" y="175.50"></text></g><g><title>metadata_load_macro (61,220 samples, 0.15%)</title><rect x="69.8110%" y="133" width="0.1544%" height="15" fill="rgb(237,122,38)"/><text x="70.0610%" y="143.50"></text></g><g><title>macro_expand_crate (13,905,437 samples, 35.07%)</title><rect x="41.6606%" y="165" width="35.0695%" height="15" fill="rgb(244,218,35)"/><text x="41.9106%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (13,888,317 samples, 35.03%)</title><rect x="41.7038%" y="149" width="35.0263%" height="15" fill="rgb(240,68,47)"/><text x="41.9538%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,682,238 samples, 6.76%)</title><rect x="69.9654%" y="133" width="6.7646%" height="15" fill="rgb(210,16,53)"/><text x="70.2154%" y="143.50">metadata_..</text></g><g><title>metadata_register_crate (989,540 samples, 2.50%)</title><rect x="74.2344%" y="117" width="2.4956%" height="15" fill="rgb(235,124,12)"/><text x="74.4844%" y="127.50">me..</text></g><g><title>metadata_register_crate (75,660 samples, 0.19%)</title><rect x="76.5392%" y="101" width="0.1908%" height="15" fill="rgb(224,169,11)"/><text x="76.7892%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (74,691 samples, 0.19%)</title><rect x="76.7427%" y="165" width="0.1884%" height="15" fill="rgb(250,166,2)"/><text x="76.9927%" y="175.50"></text></g><g><title>finalize_imports (56,921 samples, 0.14%)</title><rect x="76.9510%" y="149" width="0.1436%" height="15" fill="rgb(242,216,29)"/><text x="77.2010%" y="159.50"></text></g><g><title>finalize_macro_resolutions (165,862 samples, 0.42%)</title><rect x="77.0946%" y="149" width="0.4183%" height="15" fill="rgb(230,116,27)"/><text x="77.3446%" y="159.50"></text></g><g><title>late_resolve_crate (206,922 samples, 0.52%)</title><rect x="77.5129%" y="149" width="0.5219%" height="15" fill="rgb(228,99,48)"/><text x="77.7629%" y="159.50"></text></g><g><title>configure_and_expand (14,954,958 samples, 37.72%)</title><rect x="40.4318%" y="181" width="37.7163%" height="15" fill="rgb(253,11,6)"/><text x="40.6818%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (482,585 samples, 1.22%)</title><rect x="76.9311%" y="165" width="1.2171%" height="15" fill="rgb(247,143,39)"/><text x="77.1811%" y="175.50"></text></g><g><title>drop_ast (48,061 samples, 0.12%)</title><rect x="78.1482%" y="181" width="0.1212%" height="15" fill="rgb(236,97,10)"/><text x="78.3982%" y="191.50"></text></g><g><title>early_lint_checks (99,841 samples, 0.25%)</title><rect x="78.3275%" y="181" width="0.2518%" height="15" fill="rgb(233,208,19)"/><text x="78.5775%" y="191.50"></text></g><g><title>free_global_ctxt (2,595,888 samples, 6.55%)</title><rect x="78.5793%" y="181" width="6.5468%" height="15" fill="rgb(216,164,2)"/><text x="78.8293%" y="191.50">free_glob..</text></g><g><title>crate_hash (151,701 samples, 0.38%)</title><rect x="86.7949%" y="165" width="0.3826%" height="15" fill="rgb(220,129,5)"/><text x="87.0449%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (105,432 samples, 0.27%)</title><rect x="87.4337%" y="149" width="0.2659%" height="15" fill="rgb(242,17,10)"/><text x="87.6837%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (46,680 samples, 0.12%)</title><rect x="87.5819%" y="133" width="0.1177%" height="15" fill="rgb(242,107,0)"/><text x="87.8319%" y="143.50"></text></g><g><title>cgu_partitioning (40,730 samples, 0.10%)</title><rect x="87.5969%" y="117" width="0.1027%" height="15" fill="rgb(251,28,31)"/><text x="87.8469%" y="127.50"></text></g><g><title>exported_symbols (156,142 samples, 0.39%)</title><rect x="87.3767%" y="165" width="0.3938%" height="15" fill="rgb(233,223,10)"/><text x="87.6267%" y="175.50"></text></g><g><title>mir_keys (50,150 samples, 0.13%)</title><rect x="87.8673%" y="165" width="0.1265%" height="15" fill="rgb(215,21,27)"/><text x="88.1173%" y="175.50"></text></g><g><title>opt_def_kind (43,051 samples, 0.11%)</title><rect x="88.0062%" y="165" width="0.1086%" height="15" fill="rgb(232,23,21)"/><text x="88.2562%" y="175.50"></text></g><g><title>generate_crate_metadata (1,189,843 samples, 3.00%)</title><rect x="85.1261%" y="181" width="3.0008%" height="15" fill="rgb(244,5,23)"/><text x="85.3761%" y="191.50">gen..</text></g><g><title>hir_lowering (822,889 samples, 2.08%)</title><rect x="88.1269%" y="181" width="2.0753%" height="15" fill="rgb(226,81,46)"/><text x="88.3769%" y="191.50">h..</text></g><g><title>link_binary_remove_temps (53,420 samples, 0.13%)</title><rect x="91.2002%" y="133" width="0.1347%" height="15" fill="rgb(247,70,30)"/><text x="91.4502%" y="143.50"></text></g><g><title>link_crate (1,160,972 samples, 2.93%)</title><rect x="90.2694%" y="165" width="2.9280%" height="15" fill="rgb(212,68,19)"/><text x="90.5194%" y="175.50">li..</text></g><g><title>link_binary (1,136,202 samples, 2.87%)</title><rect x="90.3319%" y="149" width="2.8655%" height="15" fill="rgb(240,187,13)"/><text x="90.5819%" y="159.50">li..</text></g><g><title>link_rlib (738,467 samples, 1.86%)</title><rect x="91.3350%" y="133" width="1.8624%" height="15" fill="rgb(223,113,26)"/><text x="91.5850%" y="143.50">l..</text></g><g><title>link (1,196,922 samples, 3.02%)</title><rect x="90.2022%" y="181" width="3.0186%" height="15" fill="rgb(206,192,2)"/><text x="90.4522%" y="191.50">link</text></g><g><title>parse_crate (1,072,851 samples, 2.71%)</title><rect x="93.2209%" y="181" width="2.7057%" height="15" fill="rgb(241,108,4)"/><text x="93.4709%" y="191.50">pa..</text></g><g><title>prepare_outputs (342,753 samples, 0.86%)</title><rect x="95.9583%" y="181" width="0.8644%" height="15" fill="rgb(247,173,49)"/><text x="96.2083%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (616,806 samples, 1.56%)</title><rect x="96.8227%" y="181" width="1.5556%" height="15" fill="rgb(224,114,35)"/><text x="97.0727%" y="191.50"></text></g><g><title>setup_global_ctxt (148,122 samples, 0.37%)</title><rect x="98.4050%" y="181" width="0.3736%" height="15" fill="rgb(245,159,27)"/><text x="98.6550%" y="191.50"></text></g><g><title>all (39,651,139 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (39,651,139 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (484,315 samples, 1.22%)</title><rect x="98.7786%" y="181" width="1.2214%" height="15" fill="rgb(205,117,38)"/><text x="99.0286%" y="191.50"></text></g></svg></svg>