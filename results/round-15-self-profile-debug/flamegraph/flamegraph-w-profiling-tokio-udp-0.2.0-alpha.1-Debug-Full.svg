<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (76,311,588 samples, 12.18%)</title><rect x="0.1139%" y="213" width="12.1757%" height="15" fill="rgb(227,0,7)"/><text x="0.3639%" y="223.50">LLVM_passes</text></g><g><title>impl_parent (1,123,164 samples, 0.18%)</title><rect x="14.1959%" y="69" width="0.1792%" height="15" fill="rgb(217,0,24)"/><text x="14.4459%" y="79.50"></text></g><g><title>specialization_graph_of (4,646,510 samples, 0.74%)</title><rect x="13.9629%" y="85" width="0.7414%" height="15" fill="rgb(221,193,54)"/><text x="14.2129%" y="95.50"></text></g><g><title>impl_trait_ref (2,063,348 samples, 0.33%)</title><rect x="14.3751%" y="69" width="0.3292%" height="15" fill="rgb(248,212,6)"/><text x="14.6251%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,723,897 samples, 0.28%)</title><rect x="14.4292%" y="53" width="0.2751%" height="15" fill="rgb(208,68,35)"/><text x="14.6792%" y="63.50"></text></g><g><title>resolve_instance (4,972,243 samples, 0.79%)</title><rect x="13.9246%" y="101" width="0.7933%" height="15" fill="rgb(232,128,0)"/><text x="14.1746%" y="111.50"></text></g><g><title>mir_const (9,138,228 samples, 1.46%)</title><rect x="13.3475%" y="149" width="1.4580%" height="15" fill="rgb(207,160,47)"/><text x="13.5975%" y="159.50"></text></g><g><title>unsafety_check_result (8,325,369 samples, 1.33%)</title><rect x="13.4772%" y="133" width="1.3283%" height="15" fill="rgb(228,23,34)"/><text x="13.7272%" y="143.50"></text></g><g><title>mir_built (7,741,665 samples, 1.24%)</title><rect x="13.5704%" y="117" width="1.2352%" height="15" fill="rgb(218,30,26)"/><text x="13.8204%" y="127.50"></text></g><g><title>mir_promoted (9,693,264 samples, 1.55%)</title><rect x="13.2629%" y="165" width="1.5466%" height="15" fill="rgb(220,122,19)"/><text x="13.5129%" y="175.50"></text></g><g><title>MIR_borrow_checking (16,530,897 samples, 2.64%)</title><rect x="12.3265%" y="197" width="2.6375%" height="15" fill="rgb(250,228,42)"/><text x="12.5765%" y="207.50">MI..</text></g><g><title>mir_borrowck (16,454,017 samples, 2.63%)</title><rect x="12.3388%" y="181" width="2.6253%" height="15" fill="rgb(240,193,28)"/><text x="12.5888%" y="191.50">mi..</text></g><g><title>misc_checking_1 (1,027,681 samples, 0.16%)</title><rect x="14.9910%" y="197" width="0.1640%" height="15" fill="rgb(216,20,37)"/><text x="15.2410%" y="207.50"></text></g><g><title>misc_checking_2 (787,979 samples, 0.13%)</title><rect x="15.1550%" y="197" width="0.1257%" height="15" fill="rgb(206,188,39)"/><text x="15.4050%" y="207.50"></text></g><g><title>crate_lints (2,445,856 samples, 0.39%)</title><rect x="15.3522%" y="165" width="0.3902%" height="15" fill="rgb(217,207,13)"/><text x="15.6022%" y="175.50"></text></g><g><title>type_of (1,329,766 samples, 0.21%)</title><rect x="15.5303%" y="149" width="0.2122%" height="15" fill="rgb(231,73,38)"/><text x="15.7803%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,015,182 samples, 0.16%)</title><rect x="15.5805%" y="133" width="0.1620%" height="15" fill="rgb(225,20,46)"/><text x="15.8305%" y="143.50"></text></g><g><title>lint_checking (2,934,371 samples, 0.47%)</title><rect x="15.3520%" y="181" width="0.4682%" height="15" fill="rgb(210,31,41)"/><text x="15.6020%" y="191.50"></text></g><g><title>privacy_checking_modules (999,001 samples, 0.16%)</title><rect x="15.8655%" y="181" width="0.1594%" height="15" fill="rgb(221,200,47)"/><text x="16.1155%" y="191.50"></text></g><g><title>check_mod_privacy (995,691 samples, 0.16%)</title><rect x="15.8660%" y="165" width="0.1589%" height="15" fill="rgb(226,26,5)"/><text x="16.1160%" y="175.50"></text></g><g><title>misc_checking_3 (4,808,882 samples, 0.77%)</title><rect x="15.2807%" y="197" width="0.7673%" height="15" fill="rgb(249,33,26)"/><text x="15.5307%" y="207.50"></text></g><g><title>impl_parent (1,254,227 samples, 0.20%)</title><rect x="16.3935%" y="133" width="0.2001%" height="15" fill="rgb(235,183,28)"/><text x="16.6435%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (829,152 samples, 0.13%)</title><rect x="16.4613%" y="117" width="0.1323%" height="15" fill="rgb(221,5,38)"/><text x="16.7113%" y="127.50"></text></g><g><title>impl_trait_ref (4,011,233 samples, 0.64%)</title><rect x="16.5939%" y="133" width="0.6400%" height="15" fill="rgb(247,18,42)"/><text x="16.8439%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,358,545 samples, 0.54%)</title><rect x="16.6980%" y="117" width="0.5359%" height="15" fill="rgb(241,131,45)"/><text x="16.9480%" y="127.50"></text></g><g><title>coherent_trait (8,008,476 samples, 1.28%)</title><rect x="16.0595%" y="165" width="1.2778%" height="15" fill="rgb(249,31,29)"/><text x="16.3095%" y="175.50"></text></g><g><title>specialization_graph_of (7,995,826 samples, 1.28%)</title><rect x="16.0616%" y="149" width="1.2758%" height="15" fill="rgb(225,111,53)"/><text x="16.3116%" y="159.50"></text></g><g><title>coherence_checking (8,085,767 samples, 1.29%)</title><rect x="16.0572%" y="181" width="1.2901%" height="15" fill="rgb(238,160,17)"/><text x="16.3072%" y="191.50"></text></g><g><title>evaluate_obligation (1,068,660 samples, 0.17%)</title><rect x="19.0572%" y="133" width="0.1705%" height="15" fill="rgb(214,148,48)"/><text x="19.3072%" y="143.50"></text></g><g><title>item_bodies_checking (13,022,180 samples, 2.08%)</title><rect x="17.3509%" y="181" width="2.0777%" height="15" fill="rgb(232,36,49)"/><text x="17.6009%" y="191.50">i..</text></g><g><title>typeck_item_bodies (13,018,460 samples, 2.08%)</title><rect x="17.3515%" y="165" width="2.0771%" height="15" fill="rgb(209,103,24)"/><text x="17.6015%" y="175.50">t..</text></g><g><title>typeck (12,958,650 samples, 2.07%)</title><rect x="17.3611%" y="149" width="2.0676%" height="15" fill="rgb(229,88,8)"/><text x="17.6111%" y="159.50">t..</text></g><g><title>mir_borrowck (1,857,799 samples, 0.30%)</title><rect x="20.7845%" y="101" width="0.2964%" height="15" fill="rgb(213,181,19)"/><text x="21.0345%" y="111.50"></text></g><g><title>type_op_normalize_fn_sig (1,537,256 samples, 0.25%)</title><rect x="21.1427%" y="101" width="0.2453%" height="15" fill="rgb(254,191,54)"/><text x="21.3927%" y="111.50"></text></g><g><title>normalize_projection_ty (1,053,854 samples, 0.17%)</title><rect x="21.2198%" y="85" width="0.1681%" height="15" fill="rgb(241,83,37)"/><text x="21.4698%" y="95.50"></text></g><g><title>mir_borrowck (10,695,725 samples, 1.71%)</title><rect x="20.0599%" y="117" width="1.7065%" height="15" fill="rgb(233,36,39)"/><text x="20.3099%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,372,129 samples, 0.38%)</title><rect x="21.3880%" y="101" width="0.3785%" height="15" fill="rgb(226,3,54)"/><text x="21.6380%" y="111.50"></text></g><g><title>evaluate_obligation (933,562 samples, 0.15%)</title><rect x="23.7477%" y="37" width="0.1490%" height="15" fill="rgb(245,192,40)"/><text x="23.9977%" y="47.50"></text></g><g><title>mir_built (14,448,375 samples, 2.31%)</title><rect x="21.8180%" y="69" width="2.3053%" height="15" fill="rgb(238,167,29)"/><text x="22.0680%" y="79.50">m..</text></g><g><title>typeck (13,739,737 samples, 2.19%)</title><rect x="21.9311%" y="53" width="2.1922%" height="15" fill="rgb(232,182,51)"/><text x="22.1811%" y="63.50">t..</text></g><g><title>mir_built (1,214,443 samples, 0.19%)</title><rect x="24.1438%" y="53" width="0.1938%" height="15" fill="rgb(231,60,39)"/><text x="24.3938%" y="63.50"></text></g><g><title>mir_const (16,406,946 samples, 2.62%)</title><rect x="21.7854%" y="101" width="2.6178%" height="15" fill="rgb(208,69,12)"/><text x="22.0354%" y="111.50">mi..</text></g><g><title>unsafety_check_result (16,249,275 samples, 2.59%)</title><rect x="21.8106%" y="85" width="2.5926%" height="15" fill="rgb(235,93,37)"/><text x="22.0606%" y="95.50">un..</text></g><g><title>unsafety_check_result (1,754,239 samples, 0.28%)</title><rect x="24.1233%" y="69" width="0.2799%" height="15" fill="rgb(213,116,39)"/><text x="24.3733%" y="79.50"></text></g><g><title>mir_promoted (16,538,709 samples, 2.64%)</title><rect x="21.7664%" y="117" width="2.6388%" height="15" fill="rgb(222,207,29)"/><text x="22.0164%" y="127.50">mi..</text></g><g><title>item_types_checking (31,918,223 samples, 5.09%)</title><rect x="19.4287%" y="181" width="5.0926%" height="15" fill="rgb(206,96,30)"/><text x="19.6787%" y="191.50">item_t..</text></g><g><title>check_mod_item_types (31,910,783 samples, 5.09%)</title><rect x="19.4299%" y="165" width="5.0914%" height="15" fill="rgb(218,138,4)"/><text x="19.6799%" y="175.50">check_..</text></g><g><title>type_of (30,242,545 samples, 4.83%)</title><rect x="19.6960%" y="149" width="4.8253%" height="15" fill="rgb(250,191,14)"/><text x="19.9460%" y="159.50">type_of</text></g><g><title>mir_borrowck (30,199,535 samples, 4.82%)</title><rect x="19.7029%" y="133" width="4.8184%" height="15" fill="rgb(239,60,40)"/><text x="19.9529%" y="143.50">mir_bo..</text></g><g><title>type_collecting (1,631,898 samples, 0.26%)</title><rect x="24.5217%" y="181" width="0.2604%" height="15" fill="rgb(206,27,48)"/><text x="24.7717%" y="191.50"></text></g><g><title>collect_mod_item_types (1,618,737 samples, 0.26%)</title><rect x="24.5238%" y="165" width="0.2583%" height="15" fill="rgb(225,35,8)"/><text x="24.7738%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,658,185 samples, 0.42%)</title><rect x="24.8035%" y="165" width="0.4241%" height="15" fill="rgb(250,213,24)"/><text x="25.0535%" y="175.50"></text></g><g><title>analysis (81,971,069 samples, 13.08%)</title><rect x="12.2896%" y="213" width="13.0787%" height="15" fill="rgb(247,123,22)"/><text x="12.5396%" y="223.50">analysis</text></g><g><title>type_check_crate (58,415,437 samples, 9.32%)</title><rect x="16.0480%" y="197" width="9.3203%" height="15" fill="rgb(231,138,38)"/><text x="16.2980%" y="207.50">type_check_cr..</text></g><g><title>wf_checking (3,669,169 samples, 0.59%)</title><rect x="24.7829%" y="181" width="0.5854%" height="15" fill="rgb(231,145,46)"/><text x="25.0329%" y="191.50"></text></g><g><title>check_item_well_formed (881,800 samples, 0.14%)</title><rect x="25.2276%" y="165" width="0.1407%" height="15" fill="rgb(251,118,11)"/><text x="25.4776%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (1,647,340 samples, 0.26%)</title><rect x="34.0641%" y="181" width="0.2628%" height="15" fill="rgb(217,147,25)"/><text x="34.3141%" y="191.50"></text></g><g><title>codegen_fn_attrs (910,306 samples, 0.15%)</title><rect x="34.7648%" y="165" width="0.1452%" height="15" fill="rgb(247,81,37)"/><text x="35.0148%" y="175.50"></text></g><g><title>layout_of (1,066,056 samples, 0.17%)</title><rect x="34.9221%" y="165" width="0.1701%" height="15" fill="rgb(209,12,38)"/><text x="35.1721%" y="175.50"></text></g><g><title>predicates_of (954,615 samples, 0.15%)</title><rect x="35.3676%" y="149" width="0.1523%" height="15" fill="rgb(227,1,9)"/><text x="35.6176%" y="159.50"></text></g><g><title>predicates_defined_on (658,059 samples, 0.10%)</title><rect x="35.4149%" y="133" width="0.1050%" height="15" fill="rgb(248,47,43)"/><text x="35.6649%" y="143.50"></text></g><g><title>param_env (2,694,725 samples, 0.43%)</title><rect x="35.0922%" y="165" width="0.4300%" height="15" fill="rgb(221,10,30)"/><text x="35.3422%" y="175.50"></text></g><g><title>fn_abi_of_instance (7,429,497 samples, 1.19%)</title><rect x="34.4100%" y="181" width="1.1854%" height="15" fill="rgb(210,229,1)"/><text x="34.6600%" y="191.50"></text></g><g><title>layout_of (714,047 samples, 0.11%)</title><rect x="35.9059%" y="117" width="0.1139%" height="15" fill="rgb(222,148,37)"/><text x="36.1559%" y="127.50"></text></g><g><title>layout_of (1,228,372 samples, 0.20%)</title><rect x="35.8617%" y="133" width="0.1960%" height="15" fill="rgb(234,67,33)"/><text x="36.1117%" y="143.50"></text></g><g><title>layout_of (1,665,957 samples, 0.27%)</title><rect x="35.8161%" y="149" width="0.2658%" height="15" fill="rgb(247,98,35)"/><text x="36.0661%" y="159.50"></text></g><g><title>layout_of (1,949,330 samples, 0.31%)</title><rect x="35.7931%" y="165" width="0.3110%" height="15" fill="rgb(247,138,52)"/><text x="36.0431%" y="175.50"></text></g><g><title>layout_of (2,924,646 samples, 0.47%)</title><rect x="35.6489%" y="181" width="0.4666%" height="15" fill="rgb(213,79,30)"/><text x="35.8989%" y="191.50"></text></g><g><title>symbol_name (1,172,748 samples, 0.19%)</title><rect x="36.1184%" y="181" width="0.1871%" height="15" fill="rgb(246,177,23)"/><text x="36.3684%" y="191.50"></text></g><g><title>codegen_module (66,536,283 samples, 10.62%)</title><rect x="25.6974%" y="197" width="10.6160%" height="15" fill="rgb(230,62,27)"/><text x="25.9474%" y="207.50">codegen_module</text></g><g><title>codegen_crate (68,735,818 samples, 10.97%)</title><rect x="25.3699%" y="213" width="10.9670%" height="15" fill="rgb(216,154,8)"/><text x="25.6199%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (308,521,867 samples, 49.23%)</title><rect x="36.3802%" y="197" width="49.2254%" height="15" fill="rgb(244,35,45)"/><text x="36.6302%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (291,211,491 samples, 46.46%)</title><rect x="39.1421%" y="181" width="46.4635%" height="15" fill="rgb(251,115,12)"/><text x="39.3921%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (319,611,896 samples, 50.99%)</title><rect x="36.3369%" y="213" width="50.9949%" height="15" fill="rgb(240,54,50)"/><text x="36.5869%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,818,688 samples, 1.73%)</title><rect x="85.6056%" y="197" width="1.7261%" height="15" fill="rgb(233,84,52)"/><text x="85.8556%" y="207.50"></text></g><g><title>metadata_register_crate (6,186,615 samples, 0.99%)</title><rect x="90.1854%" y="165" width="0.9871%" height="15" fill="rgb(207,117,47)"/><text x="90.4354%" y="175.50"></text></g><g><title>metadata_register_crate (3,470,245 samples, 0.55%)</title><rect x="90.6188%" y="149" width="0.5537%" height="15" fill="rgb(249,43,39)"/><text x="90.8688%" y="159.50"></text></g><g><title>metadata_register_crate (1,220,903 samples, 0.19%)</title><rect x="90.9777%" y="133" width="0.1948%" height="15" fill="rgb(209,38,44)"/><text x="91.2277%" y="143.50"></text></g><g><title>macro_expand_crate (23,804,495 samples, 3.80%)</title><rect x="87.4050%" y="197" width="3.7981%" height="15" fill="rgb(236,212,23)"/><text x="87.6550%" y="207.50">macr..</text></g><g><title>expand_crate (23,785,295 samples, 3.80%)</title><rect x="87.4080%" y="181" width="3.7950%" height="15" fill="rgb(242,79,21)"/><text x="87.6580%" y="191.50">expa..</text></g><g><title>late_resolve_crate (1,431,055 samples, 0.23%)</title><rect x="91.2330%" y="181" width="0.2283%" height="15" fill="rgb(211,96,35)"/><text x="91.4830%" y="191.50"></text></g><g><title>configure_and_expand (25,954,948 samples, 4.14%)</title><rect x="87.3318%" y="213" width="4.1412%" height="15" fill="rgb(253,215,40)"/><text x="87.5818%" y="223.50">confi..</text></g><g><title>resolve_crate (1,601,047 samples, 0.26%)</title><rect x="91.2175%" y="197" width="0.2555%" height="15" fill="rgb(211,81,21)"/><text x="91.4675%" y="207.50"></text></g><g><title>free_global_ctxt (7,894,964 samples, 1.26%)</title><rect x="91.5254%" y="213" width="1.2597%" height="15" fill="rgb(208,190,38)"/><text x="91.7754%" y="223.50"></text></g><g><title>item_attrs (741,740 samples, 0.12%)</title><rect x="93.2575%" y="117" width="0.1183%" height="15" fill="rgb(235,213,38)"/><text x="93.5075%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (717,270 samples, 0.11%)</title><rect x="93.2614%" y="101" width="0.1144%" height="15" fill="rgb(237,122,38)"/><text x="93.5114%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,118,643 samples, 0.18%)</title><rect x="93.2289%" y="133" width="0.1785%" height="15" fill="rgb(244,218,35)"/><text x="93.4789%" y="143.50"></text></g><g><title>is_reachable_non_generic (1,143,792 samples, 0.18%)</title><rect x="93.4385%" y="133" width="0.1825%" height="15" fill="rgb(240,68,47)"/><text x="93.6885%" y="143.50"></text></g><g><title>reachable_non_generics (1,104,152 samples, 0.18%)</title><rect x="93.4448%" y="117" width="0.1762%" height="15" fill="rgb(210,16,53)"/><text x="93.6948%" y="127.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (1,101,442 samples, 0.18%)</title><rect x="93.4453%" y="101" width="0.1757%" height="15" fill="rgb(235,124,12)"/><text x="93.6953%" y="111.50"></text></g><g><title>exported_symbols (1,001,041 samples, 0.16%)</title><rect x="93.4613%" y="85" width="0.1597%" height="15" fill="rgb(224,169,11)"/><text x="93.7113%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (999,561 samples, 0.16%)</title><rect x="93.4615%" y="69" width="0.1595%" height="15" fill="rgb(250,166,2)"/><text x="93.7115%" y="79.50"></text></g><g><title>layout_of (629,445 samples, 0.10%)</title><rect x="94.1312%" y="85" width="0.1004%" height="15" fill="rgb(242,216,29)"/><text x="94.3812%" y="95.50"></text></g><g><title>layout_of (729,065 samples, 0.12%)</title><rect x="94.1179%" y="101" width="0.1163%" height="15" fill="rgb(230,116,27)"/><text x="94.3679%" y="111.50"></text></g><g><title>layout_of (1,161,411 samples, 0.19%)</title><rect x="94.0588%" y="117" width="0.1853%" height="15" fill="rgb(228,99,48)"/><text x="94.3088%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,298,886 samples, 0.21%)</title><rect x="94.2441%" y="117" width="0.2072%" height="15" fill="rgb(253,11,6)"/><text x="94.4941%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,119,540 samples, 0.50%)</title><rect x="94.4513%" y="117" width="0.4977%" height="15" fill="rgb(247,143,39)"/><text x="94.7013%" y="127.50"></text></g><g><title>optimized_mir (8,153,494 samples, 1.30%)</title><rect x="93.6979%" y="133" width="1.3009%" height="15" fill="rgb(236,97,10)"/><text x="93.9479%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,237,332 samples, 0.20%)</title><rect x="95.0914%" y="117" width="0.1974%" height="15" fill="rgb(233,208,19)"/><text x="95.3414%" y="127.50"></text></g><g><title>impl_parent (793,738 samples, 0.13%)</title><rect x="95.6062%" y="101" width="0.1266%" height="15" fill="rgb(216,164,2)"/><text x="95.8562%" y="111.50"></text></g><g><title>specialization_graph_of (3,684,210 samples, 0.59%)</title><rect x="95.3681%" y="117" width="0.5878%" height="15" fill="rgb(220,129,5)"/><text x="95.6181%" y="127.50"></text></g><g><title>impl_trait_ref (1,397,828 samples, 0.22%)</title><rect x="95.7329%" y="101" width="0.2230%" height="15" fill="rgb(242,17,10)"/><text x="95.9829%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,056,706 samples, 0.17%)</title><rect x="95.7873%" y="85" width="0.1686%" height="15" fill="rgb(242,107,0)"/><text x="96.0373%" y="95.50"></text></g><g><title>resolve_instance (6,251,074 samples, 1.00%)</title><rect x="94.9988%" y="133" width="0.9974%" height="15" fill="rgb(251,28,31)"/><text x="95.2488%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (2,124,542 samples, 0.34%)</title><rect x="96.0963%" y="133" width="0.3390%" height="15" fill="rgb(233,223,10)"/><text x="96.3463%" y="143.50"></text></g><g><title>upstream_monomorphizations (2,104,412 samples, 0.34%)</title><rect x="96.0995%" y="117" width="0.3358%" height="15" fill="rgb(215,21,27)"/><text x="96.3495%" y="127.50"></text></g><g><title>exported_symbols (1,747,670 samples, 0.28%)</title><rect x="96.1564%" y="101" width="0.2788%" height="15" fill="rgb(232,23,21)"/><text x="96.4064%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,734,060 samples, 0.28%)</title><rect x="96.1586%" y="85" width="0.2767%" height="15" fill="rgb(244,5,23)"/><text x="96.4086%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (22,062,185 samples, 3.52%)</title><rect x="92.9946%" y="149" width="3.5201%" height="15" fill="rgb(226,81,46)"/><text x="93.2446%" y="159.50">mon..</text></g><g><title>monomorphization_collector (22,132,566 samples, 3.53%)</title><rect x="92.9941%" y="165" width="3.5313%" height="15" fill="rgb(247,70,30)"/><text x="93.2441%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,126,232 samples, 0.18%)</title><rect x="96.5262%" y="149" width="0.1797%" height="15" fill="rgb(212,68,19)"/><text x="96.7762%" y="159.50"></text></g><g><title>symbol_name (1,029,561 samples, 0.16%)</title><rect x="96.5417%" y="133" width="0.1643%" height="15" fill="rgb(240,187,13)"/><text x="96.7917%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (23,828,805 samples, 3.80%)</title><rect x="92.9885%" y="181" width="3.8019%" height="15" fill="rgb(223,113,26)"/><text x="93.2385%" y="191.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (1,660,738 samples, 0.26%)</title><rect x="96.5254%" y="165" width="0.2650%" height="15" fill="rgb(206,192,2)"/><text x="96.7754%" y="175.50"></text></g><g><title>exported_symbols (23,976,946 samples, 3.83%)</title><rect x="92.9789%" y="197" width="3.8256%" height="15" fill="rgb(241,108,4)"/><text x="93.2289%" y="207.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,567,202 samples, 0.25%)</title><rect x="97.1500%" y="181" width="0.2501%" height="15" fill="rgb(247,173,49)"/><text x="97.4000%" y="191.50"></text></g><g><title>optimized_mir (3,653,646 samples, 0.58%)</title><rect x="96.8193%" y="197" width="0.5829%" height="15" fill="rgb(224,114,35)"/><text x="97.0693%" y="207.50"></text></g><g><title>generate_crate_metadata (28,969,080 samples, 4.62%)</title><rect x="92.7851%" y="213" width="4.6221%" height="15" fill="rgb(245,159,27)"/><text x="93.0351%" y="223.50">gener..</text></g><g><title>hir_lowering (1,972,381 samples, 0.31%)</title><rect x="97.4072%" y="213" width="0.3147%" height="15" fill="rgb(245,172,44)"/><text x="97.6572%" y="223.50"></text></g><g><title>finish_ongoing_codegen (8,404,330 samples, 1.34%)</title><rect x="97.7247%" y="197" width="1.3409%" height="15" fill="rgb(236,23,11)"/><text x="97.9747%" y="207.50"></text></g><g><title>link_crate (2,263,275 samples, 0.36%)</title><rect x="99.0656%" y="197" width="0.3611%" height="15" fill="rgb(205,117,38)"/><text x="99.3156%" y="207.50"></text></g><g><title>link_binary (2,227,304 samples, 0.36%)</title><rect x="99.0713%" y="181" width="0.3554%" height="15" fill="rgb(237,72,25)"/><text x="99.3213%" y="191.50"></text></g><g><title>link_rlib (1,605,737 samples, 0.26%)</title><rect x="99.1705%" y="165" width="0.2562%" height="15" fill="rgb(244,70,9)"/><text x="99.4205%" y="175.50"></text></g><g><title>link (10,699,285 samples, 1.71%)</title><rect x="97.7218%" y="213" width="1.7071%" height="15" fill="rgb(217,125,39)"/><text x="97.9718%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (2,504,387 samples, 0.40%)</title><rect x="99.5206%" y="213" width="0.3996%" height="15" fill="rgb(235,36,10)"/><text x="99.7706%" y="223.50"></text></g><g><title>all (626,752,907 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (626,752,907 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>