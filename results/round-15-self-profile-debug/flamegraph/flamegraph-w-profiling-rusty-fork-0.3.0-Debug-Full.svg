<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (191,644,901 samples, 15.07%)</title><rect x="0.0592%" y="165" width="15.0722%" height="15" fill="rgb(227,0,7)"/><text x="0.3092%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,788,587 samples, 0.14%)</title><rect x="16.9520%" y="53" width="0.1407%" height="15" fill="rgb(217,0,24)"/><text x="17.2020%" y="63.50"></text></g><g><title>specialization_graph_of (1,862,390 samples, 0.15%)</title><rect x="17.1701%" y="37" width="0.1465%" height="15" fill="rgb(221,193,54)"/><text x="17.4201%" y="47.50"></text></g><g><title>resolve_instance (2,969,380 samples, 0.23%)</title><rect x="17.0926%" y="53" width="0.2335%" height="15" fill="rgb(248,212,6)"/><text x="17.3426%" y="63.50"></text></g><g><title>mir_const (12,191,249 samples, 0.96%)</title><rect x="16.4665%" y="101" width="0.9588%" height="15" fill="rgb(208,68,35)"/><text x="16.7165%" y="111.50"></text></g><g><title>unsafety_check_result (10,769,252 samples, 0.85%)</title><rect x="16.5783%" y="85" width="0.8470%" height="15" fill="rgb(232,128,0)"/><text x="16.8283%" y="95.50"></text></g><g><title>mir_built (9,471,477 samples, 0.74%)</title><rect x="16.6804%" y="69" width="0.7449%" height="15" fill="rgb(207,160,47)"/><text x="16.9304%" y="79.50"></text></g><g><title>mir_promoted (13,738,924 samples, 1.08%)</title><rect x="16.3858%" y="117" width="1.0805%" height="15" fill="rgb(228,23,34)"/><text x="16.6358%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,229,684 samples, 0.33%)</title><rect x="17.6132%" y="117" width="0.3327%" height="15" fill="rgb(218,30,26)"/><text x="17.8632%" y="127.50"></text></g><g><title>MIR_borrow_checking (35,531,392 samples, 2.79%)</title><rect x="15.1531%" y="149" width="2.7944%" height="15" fill="rgb(220,122,19)"/><text x="15.4031%" y="159.50">MI..</text></g><g><title>mir_borrowck (35,403,990 samples, 2.78%)</title><rect x="15.1631%" y="133" width="2.7844%" height="15" fill="rgb(250,228,42)"/><text x="15.4131%" y="143.50">mi..</text></g><g><title>misc_checking_1 (1,313,443 samples, 0.10%)</title><rect x="17.9725%" y="149" width="0.1033%" height="15" fill="rgb(240,193,28)"/><text x="18.2225%" y="159.50"></text></g><g><title>misc_checking_2 (1,327,653 samples, 0.10%)</title><rect x="18.0758%" y="149" width="0.1044%" height="15" fill="rgb(216,20,37)"/><text x="18.3258%" y="159.50"></text></g><g><title>crate_lints (2,983,741 samples, 0.23%)</title><rect x="18.2336%" y="117" width="0.2347%" height="15" fill="rgb(206,188,39)"/><text x="18.4836%" y="127.50"></text></g><g><title>lint_checking (3,675,928 samples, 0.29%)</title><rect x="18.2335%" y="133" width="0.2891%" height="15" fill="rgb(217,207,13)"/><text x="18.4835%" y="143.50"></text></g><g><title>misc_checking_3 (5,631,357 samples, 0.44%)</title><rect x="18.1802%" y="149" width="0.4429%" height="15" fill="rgb(231,73,38)"/><text x="18.4302%" y="159.50"></text></g><g><title>impl_parent (2,441,927 samples, 0.19%)</title><rect x="19.0165%" y="85" width="0.1920%" height="15" fill="rgb(225,20,46)"/><text x="19.2665%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,430,800 samples, 0.11%)</title><rect x="19.0960%" y="69" width="0.1125%" height="15" fill="rgb(210,31,41)"/><text x="19.3460%" y="79.50"></text></g><g><title>impl_trait_ref (5,413,672 samples, 0.43%)</title><rect x="19.2085%" y="85" width="0.4258%" height="15" fill="rgb(221,200,47)"/><text x="19.4585%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,405,762 samples, 0.35%)</title><rect x="19.2878%" y="69" width="0.3465%" height="15" fill="rgb(226,26,5)"/><text x="19.5378%" y="79.50"></text></g><g><title>coherent_trait (13,633,508 samples, 1.07%)</title><rect x="18.6298%" y="117" width="1.0722%" height="15" fill="rgb(249,33,26)"/><text x="18.8798%" y="127.50"></text></g><g><title>specialization_graph_of (13,123,173 samples, 1.03%)</title><rect x="18.6700%" y="101" width="1.0321%" height="15" fill="rgb(235,183,28)"/><text x="18.9200%" y="111.50"></text></g><g><title>coherence_checking (13,835,480 samples, 1.09%)</title><rect x="18.6285%" y="133" width="1.0881%" height="15" fill="rgb(221,5,38)"/><text x="18.8785%" y="143.50"></text></g><g><title>evaluate_obligation (2,222,829 samples, 0.17%)</title><rect x="21.1787%" y="85" width="0.1748%" height="15" fill="rgb(247,18,42)"/><text x="21.4287%" y="95.50"></text></g><g><title>evaluate_obligation (3,921,290 samples, 0.31%)</title><rect x="22.4426%" y="69" width="0.3084%" height="15" fill="rgb(241,131,45)"/><text x="22.6926%" y="79.50"></text></g><g><title>typeck (17,551,108 samples, 1.38%)</title><rect x="21.5202%" y="85" width="1.3803%" height="15" fill="rgb(249,31,29)"/><text x="21.7702%" y="95.50"></text></g><g><title>item_bodies_checking (40,531,923 samples, 3.19%)</title><rect x="19.7186%" y="133" width="3.1877%" height="15" fill="rgb(225,111,53)"/><text x="19.9686%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (40,529,573 samples, 3.19%)</title><rect x="19.7188%" y="117" width="3.1875%" height="15" fill="rgb(238,160,17)"/><text x="19.9688%" y="127.50">typ..</text></g><g><title>typeck (40,457,253 samples, 3.18%)</title><rect x="19.7245%" y="101" width="3.1818%" height="15" fill="rgb(214,148,48)"/><text x="19.9745%" y="111.50">typ..</text></g><g><title>item_types_checking (1,514,335 samples, 0.12%)</title><rect x="22.9063%" y="133" width="0.1191%" height="15" fill="rgb(232,36,49)"/><text x="23.1563%" y="143.50"></text></g><g><title>check_mod_item_types (1,508,525 samples, 0.12%)</title><rect x="22.9068%" y="117" width="0.1186%" height="15" fill="rgb(209,103,24)"/><text x="23.1568%" y="127.50"></text></g><g><title>type_collecting (2,035,451 samples, 0.16%)</title><rect x="23.0256%" y="133" width="0.1601%" height="15" fill="rgb(229,88,8)"/><text x="23.2756%" y="143.50"></text></g><g><title>collect_mod_item_types (2,022,251 samples, 0.16%)</title><rect x="23.0267%" y="117" width="0.1590%" height="15" fill="rgb(213,181,19)"/><text x="23.2767%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,204,961 samples, 0.17%)</title><rect x="23.1996%" y="117" width="0.1734%" height="15" fill="rgb(254,191,54)"/><text x="23.4496%" y="127.50"></text></g><g><title>analysis (107,515,274 samples, 8.46%)</title><rect x="15.1315%" y="165" width="8.4557%" height="15" fill="rgb(241,83,37)"/><text x="15.3815%" y="175.50">analysis</text></g><g><title>type_check_crate (63,119,483 samples, 4.96%)</title><rect x="18.6231%" y="149" width="4.9641%" height="15" fill="rgb(233,36,39)"/><text x="18.8731%" y="159.50">type_c..</text></g><g><title>wf_checking (5,099,363 samples, 0.40%)</title><rect x="23.1862%" y="133" width="0.4010%" height="15" fill="rgb(226,3,54)"/><text x="23.4362%" y="143.50"></text></g><g><title>check_item_well_formed (2,722,992 samples, 0.21%)</title><rect x="23.3731%" y="117" width="0.2142%" height="15" fill="rgb(245,192,40)"/><text x="23.6231%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (4,249,310 samples, 0.33%)</title><rect x="34.1356%" y="133" width="0.3342%" height="15" fill="rgb(238,167,29)"/><text x="34.3856%" y="143.50"></text></g><g><title>const_caller_location (1,804,248 samples, 0.14%)</title><rect x="34.4698%" y="133" width="0.1419%" height="15" fill="rgb(232,182,51)"/><text x="34.7198%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,365,664 samples, 0.11%)</title><rect x="35.2077%" y="117" width="0.1074%" height="15" fill="rgb(231,60,39)"/><text x="35.4577%" y="127.50"></text></g><g><title>layout_of (3,010,041 samples, 0.24%)</title><rect x="35.3382%" y="117" width="0.2367%" height="15" fill="rgb(208,69,12)"/><text x="35.5882%" y="127.50"></text></g><g><title>predicates_of (3,052,140 samples, 0.24%)</title><rect x="36.0233%" y="101" width="0.2400%" height="15" fill="rgb(235,93,37)"/><text x="36.2733%" y="111.50"></text></g><g><title>predicates_defined_on (2,098,521 samples, 0.17%)</title><rect x="36.0983%" y="85" width="0.1650%" height="15" fill="rgb(213,116,39)"/><text x="36.3483%" y="95.50"></text></g><g><title>param_env (8,770,506 samples, 0.69%)</title><rect x="35.5749%" y="117" width="0.6898%" height="15" fill="rgb(222,207,29)"/><text x="35.8249%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,735,368 samples, 0.14%)</title><rect x="36.2647%" y="117" width="0.1365%" height="15" fill="rgb(206,96,30)"/><text x="36.5147%" y="127.50"></text></g><g><title>normalize_projection_ty (1,316,404 samples, 0.10%)</title><rect x="36.2976%" y="101" width="0.1035%" height="15" fill="rgb(218,138,4)"/><text x="36.5476%" y="111.50"></text></g><g><title>fn_abi_of_instance (22,746,570 samples, 1.79%)</title><rect x="34.6173%" y="133" width="1.7889%" height="15" fill="rgb(250,191,14)"/><text x="34.8673%" y="143.50">f..</text></g><g><title>layout_of (3,168,378 samples, 0.25%)</title><rect x="36.5031%" y="133" width="0.2492%" height="15" fill="rgb(239,60,40)"/><text x="36.7531%" y="143.50"></text></g><g><title>symbol_name (1,970,000 samples, 0.15%)</title><rect x="36.7537%" y="133" width="0.1549%" height="15" fill="rgb(206,27,48)"/><text x="37.0037%" y="143.50"></text></g><g><title>codegen_module (166,799,438 samples, 13.12%)</title><rect x="23.8151%" y="149" width="13.1182%" height="15" fill="rgb(225,35,8)"/><text x="24.0651%" y="159.50">codegen_module</text></g><g><title>codegen_crate (169,784,778 samples, 13.35%)</title><rect x="23.5879%" y="165" width="13.3530%" height="15" fill="rgb(250,213,24)"/><text x="23.8379%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (507,309,576 samples, 39.90%)</title><rect x="36.9548%" y="149" width="39.8983%" height="15" fill="rgb(247,123,22)"/><text x="37.2048%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (479,015,246 samples, 37.67%)</title><rect x="39.1801%" y="133" width="37.6730%" height="15" fill="rgb(231,138,38)"/><text x="39.4301%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (532,996,797 samples, 41.92%)</title><rect x="36.9410%" y="165" width="41.9185%" height="15" fill="rgb(231,145,46)"/><text x="37.1910%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (25,510,707 samples, 2.01%)</title><rect x="76.8531%" y="149" width="2.0063%" height="15" fill="rgb(251,118,11)"/><text x="77.1031%" y="159.50">L..</text></g><g><title>metadata_load_macro (1,859,521 samples, 0.15%)</title><rect x="82.2047%" y="117" width="0.1462%" height="15" fill="rgb(217,147,25)"/><text x="82.4547%" y="127.50"></text></g><g><title>metadata_register_crate (3,257,982 samples, 0.26%)</title><rect x="82.3510%" y="117" width="0.2562%" height="15" fill="rgb(247,81,37)"/><text x="82.6010%" y="127.50"></text></g><g><title>macro_expand_crate (47,614,514 samples, 3.74%)</title><rect x="78.8974%" y="149" width="3.7447%" height="15" fill="rgb(209,12,38)"/><text x="79.1474%" y="159.50">macr..</text></g><g><title>expand_crate (47,602,814 samples, 3.74%)</title><rect x="78.8983%" y="133" width="3.7438%" height="15" fill="rgb(227,1,9)"/><text x="79.1483%" y="143.50">expa..</text></g><g><title>late_resolve_crate (2,092,371 samples, 0.16%)</title><rect x="82.6712%" y="133" width="0.1646%" height="15" fill="rgb(248,47,43)"/><text x="82.9212%" y="143.50"></text></g><g><title>configure_and_expand (50,679,316 samples, 3.99%)</title><rect x="78.8594%" y="165" width="3.9858%" height="15" fill="rgb(221,10,30)"/><text x="79.1094%" y="175.50">conf..</text></g><g><title>resolve_crate (2,498,095 samples, 0.20%)</title><rect x="82.6487%" y="149" width="0.1965%" height="15" fill="rgb(210,229,1)"/><text x="82.8987%" y="159.50"></text></g><g><title>free_global_ctxt (6,413,805 samples, 0.50%)</title><rect x="82.8966%" y="165" width="0.5044%" height="15" fill="rgb(222,148,37)"/><text x="83.1466%" y="175.50"></text></g><g><title>item_attrs (1,620,733 samples, 0.13%)</title><rect x="83.9909%" y="69" width="0.1275%" height="15" fill="rgb(234,67,33)"/><text x="84.2409%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,537,112 samples, 0.12%)</title><rect x="83.9975%" y="53" width="0.1209%" height="15" fill="rgb(247,98,35)"/><text x="84.2475%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,943,387 samples, 0.23%)</title><rect x="83.9491%" y="85" width="0.2315%" height="15" fill="rgb(247,138,52)"/><text x="84.1991%" y="95.50"></text></g><g><title>mir_shims (1,889,558 samples, 0.15%)</title><rect x="84.2325%" y="85" width="0.1486%" height="15" fill="rgb(213,79,30)"/><text x="84.4825%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,086,770 samples, 0.32%)</title><rect x="84.6371%" y="69" width="0.3214%" height="15" fill="rgb(246,177,23)"/><text x="84.8871%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,279,044 samples, 0.26%)</title><rect x="84.9585%" y="69" width="0.2579%" height="15" fill="rgb(230,62,27)"/><text x="85.2085%" y="79.50"></text></g><g><title>optimized_mir (10,936,989 samples, 0.86%)</title><rect x="84.3812%" y="85" width="0.8602%" height="15" fill="rgb(216,154,8)"/><text x="84.6312%" y="95.50"></text></g><g><title>evaluate_obligation (1,294,002 samples, 0.10%)</title><rect x="85.7425%" y="53" width="0.1018%" height="15" fill="rgb(244,35,45)"/><text x="85.9925%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (6,222,394 samples, 0.49%)</title><rect x="85.4189%" y="69" width="0.4894%" height="15" fill="rgb(251,115,12)"/><text x="85.6689%" y="79.50"></text></g><g><title>specialization_graph_of (2,368,765 samples, 0.19%)</title><rect x="86.0545%" y="69" width="0.1863%" height="15" fill="rgb(240,54,50)"/><text x="86.3045%" y="79.50"></text></g><g><title>resolve_instance (13,399,935 samples, 1.05%)</title><rect x="85.2414%" y="85" width="1.0539%" height="15" fill="rgb(233,84,52)"/><text x="85.4914%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,433,916 samples, 0.11%)</title><rect x="86.3327%" y="85" width="0.1128%" height="15" fill="rgb(207,117,47)"/><text x="86.5827%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (38,543,112 samples, 3.03%)</title><rect x="83.5476%" y="101" width="3.0313%" height="15" fill="rgb(249,43,39)"/><text x="83.7976%" y="111.50">mon..</text></g><g><title>monomorphization_collector (38,602,663 samples, 3.04%)</title><rect x="83.5474%" y="117" width="3.0360%" height="15" fill="rgb(209,38,44)"/><text x="83.7974%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (5,156,163 samples, 0.41%)</title><rect x="86.5843%" y="101" width="0.4055%" height="15" fill="rgb(236,212,23)"/><text x="86.8343%" y="111.50"></text></g><g><title>symbol_name (4,773,360 samples, 0.38%)</title><rect x="86.6144%" y="85" width="0.3754%" height="15" fill="rgb(242,79,21)"/><text x="86.8644%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (45,726,325 samples, 3.60%)</title><rect x="83.5440%" y="133" width="3.5962%" height="15" fill="rgb(211,96,35)"/><text x="83.7940%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (7,079,592 samples, 0.56%)</title><rect x="86.5834%" y="117" width="0.5568%" height="15" fill="rgb(253,215,40)"/><text x="86.8334%" y="127.50"></text></g><g><title>cgu_partitioning (1,912,529 samples, 0.15%)</title><rect x="86.9898%" y="101" width="0.1504%" height="15" fill="rgb(211,81,21)"/><text x="87.2398%" y="111.50"></text></g><g><title>exported_symbols (45,954,637 samples, 3.61%)</title><rect x="83.5307%" y="149" width="3.6142%" height="15" fill="rgb(208,190,38)"/><text x="83.7807%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,284,373 samples, 0.18%)</title><rect x="87.3369%" y="133" width="0.1797%" height="15" fill="rgb(235,213,38)"/><text x="87.5869%" y="143.50"></text></g><g><title>optimized_mir (4,953,121 samples, 0.39%)</title><rect x="87.1503%" y="149" width="0.3895%" height="15" fill="rgb(237,122,38)"/><text x="87.4003%" y="159.50"></text></g><g><title>generate_crate_metadata (52,804,466 samples, 4.15%)</title><rect x="83.4010%" y="165" width="4.1529%" height="15" fill="rgb(244,218,35)"/><text x="83.6510%" y="175.50">gener..</text></g><g><title>hir_lowering (2,876,069 samples, 0.23%)</title><rect x="87.5539%" y="165" width="0.2262%" height="15" fill="rgb(240,68,47)"/><text x="87.8039%" y="175.50"></text></g><g><title>finish_ongoing_codegen (22,389,178 samples, 1.76%)</title><rect x="87.7812%" y="149" width="1.7608%" height="15" fill="rgb(210,16,53)"/><text x="88.0312%" y="159.50"></text></g><g><title>link_binary_remove_temps (126,619,888 samples, 9.96%)</title><rect x="89.5737%" y="117" width="9.9582%" height="15" fill="rgb(235,124,12)"/><text x="89.8237%" y="127.50">link_binary_re..</text></g><g><title>link_crate (129,901,762 samples, 10.22%)</title><rect x="89.5420%" y="149" width="10.2164%" height="15" fill="rgb(224,169,11)"/><text x="89.7920%" y="159.50">link_crate</text></g><g><title>link_binary (129,840,581 samples, 10.21%)</title><rect x="89.5468%" y="133" width="10.2115%" height="15" fill="rgb(250,166,2)"/><text x="89.7968%" y="143.50">link_binary</text></g><g><title>link_rlib (2,878,419 samples, 0.23%)</title><rect x="99.5320%" y="117" width="0.2264%" height="15" fill="rgb(242,216,29)"/><text x="99.7820%" y="127.50"></text></g><g><title>link (152,313,170 samples, 11.98%)</title><rect x="87.7801%" y="165" width="11.9789%" height="15" fill="rgb(230,116,27)"/><text x="88.0301%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (1,927,220 samples, 0.15%)</title><rect x="99.8098%" y="165" width="0.1516%" height="15" fill="rgb(228,99,48)"/><text x="100.0598%" y="175.50"></text></g><g><title>all (1,271,508,273 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,271,508,273 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>