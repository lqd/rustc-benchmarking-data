<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,678,789 samples, 8.77%)</title><rect x="1.0429%" y="261" width="8.7715%" height="15" fill="rgb(227,0,7)"/><text x="1.2929%" y="271.50">LLVM_passes</text></g><g><title>needs_drop_raw (179,601 samples, 0.59%)</title><rect x="14.5590%" y="149" width="0.5881%" height="15" fill="rgb(217,0,24)"/><text x="14.8090%" y="159.50"></text></g><g><title>is_copy_raw (176,991 samples, 0.58%)</title><rect x="14.5676%" y="133" width="0.5795%" height="15" fill="rgb(221,193,54)"/><text x="14.8176%" y="143.50"></text></g><g><title>evaluate_obligation (173,781 samples, 0.57%)</title><rect x="14.5781%" y="117" width="0.5690%" height="15" fill="rgb(248,212,6)"/><text x="14.8281%" y="127.50"></text></g><g><title>trait_impls_of (159,621 samples, 0.52%)</title><rect x="14.6244%" y="101" width="0.5227%" height="15" fill="rgb(208,68,35)"/><text x="14.8744%" y="111.50"></text></g><g><title>implementations_of_trait (45,571 samples, 0.15%)</title><rect x="14.9979%" y="85" width="0.1492%" height="15" fill="rgb(232,128,0)"/><text x="15.2479%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (41,391 samples, 0.14%)</title><rect x="15.0116%" y="69" width="0.1355%" height="15" fill="rgb(207,160,47)"/><text x="15.2616%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (54,341 samples, 0.18%)</title><rect x="15.2747%" y="133" width="0.1779%" height="15" fill="rgb(228,23,34)"/><text x="15.5247%" y="143.50"></text></g><g><title>impl_parent (32,780 samples, 0.11%)</title><rect x="15.5757%" y="117" width="0.1073%" height="15" fill="rgb(218,30,26)"/><text x="15.8257%" y="127.50"></text></g><g><title>specialization_graph_of (138,742 samples, 0.45%)</title><rect x="15.4669%" y="133" width="0.4543%" height="15" fill="rgb(220,122,19)"/><text x="15.7169%" y="143.50"></text></g><g><title>impl_trait_ref (72,742 samples, 0.24%)</title><rect x="15.6830%" y="117" width="0.2382%" height="15" fill="rgb(250,228,42)"/><text x="15.9330%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (65,742 samples, 0.22%)</title><rect x="15.7060%" y="101" width="0.2153%" height="15" fill="rgb(240,193,28)"/><text x="15.9560%" y="111.50"></text></g><g><title>resolve_instance (241,433 samples, 0.79%)</title><rect x="15.1471%" y="149" width="0.7906%" height="15" fill="rgb(216,20,37)"/><text x="15.3971%" y="159.50"></text></g><g><title>thir_body (45,140 samples, 0.15%)</title><rect x="15.9465%" y="149" width="0.1478%" height="15" fill="rgb(206,188,39)"/><text x="16.1965%" y="159.50"></text></g><g><title>mir_const (873,399 samples, 2.86%)</title><rect x="13.2835%" y="197" width="2.8599%" height="15" fill="rgb(217,207,13)"/><text x="13.5335%" y="207.50">mi..</text></g><g><title>unsafety_check_result (733,797 samples, 2.40%)</title><rect x="13.7406%" y="181" width="2.4028%" height="15" fill="rgb(231,73,38)"/><text x="13.9906%" y="191.50">un..</text></g><g><title>mir_built (664,787 samples, 2.18%)</title><rect x="13.9665%" y="165" width="2.1768%" height="15" fill="rgb(225,20,46)"/><text x="14.2165%" y="175.50">m..</text></g><g><title>mir_promoted (971,200 samples, 3.18%)</title><rect x="12.9844%" y="213" width="3.1801%" height="15" fill="rgb(210,31,41)"/><text x="13.2344%" y="223.50">mir..</text></g><g><title>type_op_normalize_fn_sig (98,241 samples, 0.32%)</title><rect x="16.1646%" y="213" width="0.3217%" height="15" fill="rgb(221,200,47)"/><text x="16.4146%" y="223.50"></text></g><g><title>normalize_projection_ty (46,050 samples, 0.15%)</title><rect x="16.3355%" y="197" width="0.1508%" height="15" fill="rgb(226,26,5)"/><text x="16.5855%" y="207.50"></text></g><g><title>MIR_borrow_checking (2,126,052 samples, 6.96%)</title><rect x="10.0867%" y="245" width="6.9616%" height="15" fill="rgb(249,33,26)"/><text x="10.3367%" y="255.50">MIR_borro..</text></g><g><title>mir_borrowck (2,114,802 samples, 6.92%)</title><rect x="10.1235%" y="229" width="6.9248%" height="15" fill="rgb(235,183,28)"/><text x="10.3735%" y="239.50">mir_borro..</text></g><g><title>type_op_prove_predicate (158,442 samples, 0.52%)</title><rect x="16.5295%" y="213" width="0.5188%" height="15" fill="rgb(221,5,38)"/><text x="16.7795%" y="223.50"></text></g><g><title>hir_module_items (63,141 samples, 0.21%)</title><rect x="17.0603%" y="245" width="0.2068%" height="15" fill="rgb(247,18,42)"/><text x="17.3103%" y="255.50"></text></g><g><title>get_lang_items (51,570 samples, 0.17%)</title><rect x="17.5357%" y="197" width="0.1689%" height="15" fill="rgb(241,131,45)"/><text x="17.7857%" y="207.50"></text></g><g><title>should_inherit_track_caller (37,991 samples, 0.12%)</title><rect x="17.7045%" y="197" width="0.1244%" height="15" fill="rgb(249,31,29)"/><text x="17.9545%" y="207.50"></text></g><g><title>codegen_fn_attrs (133,022 samples, 0.44%)</title><rect x="17.4438%" y="213" width="0.4356%" height="15" fill="rgb(225,111,53)"/><text x="17.6938%" y="223.50"></text></g><g><title>check_mod_attrs (175,062 samples, 0.57%)</title><rect x="17.3073%" y="229" width="0.5732%" height="15" fill="rgb(238,160,17)"/><text x="17.5573%" y="239.50"></text></g><g><title>lookup_stability (40,311 samples, 0.13%)</title><rect x="18.2440%" y="213" width="0.1320%" height="15" fill="rgb(214,148,48)"/><text x="18.4940%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (122,771 samples, 0.40%)</title><rect x="17.9973%" y="229" width="0.4020%" height="15" fill="rgb(232,36,49)"/><text x="18.2473%" y="239.50"></text></g><g><title>misc_checking_1 (368,634 samples, 1.21%)</title><rect x="17.2682%" y="245" width="1.2071%" height="15" fill="rgb(209,103,24)"/><text x="17.5182%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (52,321 samples, 0.17%)</title><rect x="18.4788%" y="229" width="0.1713%" height="15" fill="rgb(229,88,8)"/><text x="18.7288%" y="239.50"></text></g><g><title>check_mod_liveness (41,771 samples, 0.14%)</title><rect x="18.5133%" y="213" width="0.1368%" height="15" fill="rgb(213,181,19)"/><text x="18.7633%" y="223.50"></text></g><g><title>misc_checking_2 (106,122 samples, 0.35%)</title><rect x="18.4753%" y="245" width="0.3475%" height="15" fill="rgb(254,191,54)"/><text x="18.7253%" y="255.50"></text></g><g><title>match_checking (52,731 samples, 0.17%)</title><rect x="18.6501%" y="229" width="0.1727%" height="15" fill="rgb(241,83,37)"/><text x="18.9001%" y="239.50"></text></g><g><title>check_match (49,111 samples, 0.16%)</title><rect x="18.6619%" y="213" width="0.1608%" height="15" fill="rgb(233,36,39)"/><text x="18.9119%" y="223.50"></text></g><g><title>check_private_in_public (48,981 samples, 0.16%)</title><rect x="18.8417%" y="229" width="0.1604%" height="15" fill="rgb(226,3,54)"/><text x="19.0917%" y="239.50"></text></g><g><title>death_checking (89,031 samples, 0.29%)</title><rect x="19.0021%" y="229" width="0.2915%" height="15" fill="rgb(245,192,40)"/><text x="19.2521%" y="239.50"></text></g><g><title>crate_lints (95,411 samples, 0.31%)</title><rect x="19.2975%" y="213" width="0.3124%" height="15" fill="rgb(238,167,29)"/><text x="19.5475%" y="223.50"></text></g><g><title>param_env (38,960 samples, 0.13%)</title><rect x="19.4823%" y="197" width="0.1276%" height="15" fill="rgb(232,182,51)"/><text x="19.7323%" y="207.50"></text></g><g><title>lint_checking (128,261 samples, 0.42%)</title><rect x="19.2936%" y="229" width="0.4200%" height="15" fill="rgb(231,60,39)"/><text x="19.5436%" y="239.50"></text></g><g><title>module_lints (31,670 samples, 0.10%)</title><rect x="19.6099%" y="213" width="0.1037%" height="15" fill="rgb(208,69,12)"/><text x="19.8599%" y="223.50"></text></g><g><title>privacy_access_levels (65,060 samples, 0.21%)</title><rect x="19.7136%" y="229" width="0.2130%" height="15" fill="rgb(235,93,37)"/><text x="19.9636%" y="239.50"></text></g><g><title>privacy_checking_modules (140,142 samples, 0.46%)</title><rect x="19.9266%" y="229" width="0.4589%" height="15" fill="rgb(213,116,39)"/><text x="20.1766%" y="239.50"></text></g><g><title>check_mod_privacy (139,212 samples, 0.46%)</title><rect x="19.9297%" y="213" width="0.4558%" height="15" fill="rgb(222,207,29)"/><text x="20.1797%" y="223.50"></text></g><g><title>misc_checking_3 (489,156 samples, 1.60%)</title><rect x="18.8228%" y="245" width="1.6017%" height="15" fill="rgb(206,96,30)"/><text x="19.0728%" y="255.50"></text></g><g><title>coherent_trait (226,973 samples, 0.74%)</title><rect x="20.5222%" y="213" width="0.7432%" height="15" fill="rgb(218,138,4)"/><text x="20.7722%" y="223.50"></text></g><g><title>specialization_graph_of (222,503 samples, 0.73%)</title><rect x="20.5368%" y="197" width="0.7286%" height="15" fill="rgb(250,191,14)"/><text x="20.7868%" y="207.50"></text></g><g><title>trait_impls_of (33,520 samples, 0.11%)</title><rect x="21.1556%" y="181" width="0.1098%" height="15" fill="rgb(239,60,40)"/><text x="21.4056%" y="191.50"></text></g><g><title>coherence_checking (260,643 samples, 0.85%)</title><rect x="20.4860%" y="229" width="0.8535%" height="15" fill="rgb(206,27,48)"/><text x="20.7360%" y="239.50"></text></g><g><title>impl_parent (117,450 samples, 0.38%)</title><rect x="24.7842%" y="85" width="0.3846%" height="15" fill="rgb(225,35,8)"/><text x="25.0342%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (92,260 samples, 0.30%)</title><rect x="24.8666%" y="69" width="0.3021%" height="15" fill="rgb(250,213,24)"/><text x="25.1166%" y="79.50"></text></g><g><title>impl_trait_ref (361,475 samples, 1.18%)</title><rect x="25.1687%" y="85" width="1.1836%" height="15" fill="rgb(247,123,22)"/><text x="25.4187%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (336,964 samples, 1.10%)</title><rect x="25.2490%" y="69" width="1.1034%" height="15" fill="rgb(231,138,38)"/><text x="25.4990%" y="79.50"></text></g><g><title>coherent_trait (630,257 samples, 2.06%)</title><rect x="24.3937%" y="117" width="2.0637%" height="15" fill="rgb(231,145,46)"/><text x="24.6437%" y="127.50">c..</text></g><g><title>specialization_graph_of (628,817 samples, 2.06%)</title><rect x="24.3984%" y="101" width="2.0590%" height="15" fill="rgb(251,118,11)"/><text x="24.6484%" y="111.50">s..</text></g><g><title>trait_impls_of (32,081 samples, 0.11%)</title><rect x="26.3524%" y="85" width="0.1050%" height="15" fill="rgb(217,147,25)"/><text x="26.6024%" y="95.50"></text></g><g><title>adt_destructor (638,577 samples, 2.09%)</title><rect x="24.3773%" y="149" width="2.0910%" height="15" fill="rgb(247,81,37)"/><text x="24.6273%" y="159.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (637,277 samples, 2.09%)</title><rect x="24.3815%" y="133" width="2.0867%" height="15" fill="rgb(209,12,38)"/><text x="24.6315%" y="143.50">m..</text></g><g><title>adt_def (37,770 samples, 0.12%)</title><rect x="26.6095%" y="85" width="0.1237%" height="15" fill="rgb(227,1,9)"/><text x="26.8595%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (37,530 samples, 0.12%)</title><rect x="26.6103%" y="69" width="0.1229%" height="15" fill="rgb(248,47,43)"/><text x="26.8603%" y="79.50"></text></g><g><title>item_attrs (35,190 samples, 0.12%)</title><rect x="26.6180%" y="53" width="0.1152%" height="15" fill="rgb(221,10,30)"/><text x="26.8680%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (34,930 samples, 0.11%)</title><rect x="26.6188%" y="37" width="0.1144%" height="15" fill="rgb(210,229,1)"/><text x="26.8688%" y="47.50"></text></g><g><title>adt_dtorck_constraint (41,470 samples, 0.14%)</title><rect x="26.6028%" y="101" width="0.1358%" height="15" fill="rgb(222,148,37)"/><text x="26.8528%" y="111.50"></text></g><g><title>adt_dtorck_constraint (73,011 samples, 0.24%)</title><rect x="26.5368%" y="117" width="0.2391%" height="15" fill="rgb(234,67,33)"/><text x="26.7868%" y="127.50"></text></g><g><title>adt_dtorck_constraint (95,921 samples, 0.31%)</title><rect x="26.4811%" y="133" width="0.3141%" height="15" fill="rgb(247,98,35)"/><text x="26.7311%" y="143.50"></text></g><g><title>adt_dtorck_constraint (100,501 samples, 0.33%)</title><rect x="26.4683%" y="149" width="0.3291%" height="15" fill="rgb(247,138,52)"/><text x="26.7183%" y="159.50"></text></g><g><title>adt_dtorck_constraint (761,278 samples, 2.49%)</title><rect x="24.3300%" y="165" width="2.4928%" height="15" fill="rgb(213,79,30)"/><text x="24.5800%" y="175.50">ad..</text></g><g><title>dropck_outlives (805,040 samples, 2.64%)</title><rect x="24.2299%" y="181" width="2.6361%" height="15" fill="rgb(246,177,23)"/><text x="24.4799%" y="191.50">dr..</text></g><g><title>evaluate_obligation (100,122 samples, 0.33%)</title><rect x="26.8659%" y="181" width="0.3278%" height="15" fill="rgb(230,62,27)"/><text x="27.1159%" y="191.50"></text></g><g><title>item_bodies_checking (1,866,450 samples, 6.11%)</title><rect x="21.4018%" y="229" width="6.1116%" height="15" fill="rgb(216,154,8)"/><text x="21.6518%" y="239.50">item_bod..</text></g><g><title>typeck_item_bodies (1,865,020 samples, 6.11%)</title><rect x="21.4065%" y="213" width="6.1069%" height="15" fill="rgb(244,35,45)"/><text x="21.6565%" y="223.50">typeck_i..</text></g><g><title>typeck (1,856,160 samples, 6.08%)</title><rect x="21.4355%" y="197" width="6.0779%" height="15" fill="rgb(251,115,12)"/><text x="21.6855%" y="207.50">typeck</text></g><g><title>item_types_checking (1,454,595 samples, 4.76%)</title><rect x="27.5134%" y="229" width="4.7630%" height="15" fill="rgb(240,54,50)"/><text x="27.7634%" y="239.50">item_t..</text></g><g><title>check_mod_item_types (1,452,815 samples, 4.76%)</title><rect x="27.5192%" y="213" width="4.7572%" height="15" fill="rgb(233,84,52)"/><text x="27.7692%" y="223.50">check_..</text></g><g><title>fn_sig (62,611 samples, 0.21%)</title><rect x="32.6216%" y="197" width="0.2050%" height="15" fill="rgb(207,117,47)"/><text x="32.8716%" y="207.50"></text></g><g><title>generics_of (61,081 samples, 0.20%)</title><rect x="32.8266%" y="197" width="0.2000%" height="15" fill="rgb(249,43,39)"/><text x="33.0766%" y="207.50"></text></g><g><title>late_bound_vars_map (58,640 samples, 0.19%)</title><rect x="33.3406%" y="165" width="0.1920%" height="15" fill="rgb(209,38,44)"/><text x="33.5906%" y="175.50"></text></g><g><title>resolve_lifetimes (55,290 samples, 0.18%)</title><rect x="33.3515%" y="149" width="0.1810%" height="15" fill="rgb(236,212,23)"/><text x="33.6015%" y="159.50"></text></g><g><title>explicit_item_bounds (139,912 samples, 0.46%)</title><rect x="33.1208%" y="181" width="0.4581%" height="15" fill="rgb(242,79,21)"/><text x="33.3708%" y="191.50"></text></g><g><title>item_bounds (164,493 samples, 0.54%)</title><rect x="33.0587%" y="197" width="0.5386%" height="15" fill="rgb(211,96,35)"/><text x="33.3087%" y="207.50"></text></g><g><title>late_bound_vars_map (90,750 samples, 0.30%)</title><rect x="34.3011%" y="149" width="0.2972%" height="15" fill="rgb(253,215,40)"/><text x="34.5511%" y="159.50"></text></g><g><title>resolve_lifetimes (84,730 samples, 0.28%)</title><rect x="34.3208%" y="133" width="0.2774%" height="15" fill="rgb(211,81,21)"/><text x="34.5708%" y="143.50"></text></g><g><title>explicit_predicates_of (301,703 samples, 0.99%)</title><rect x="33.7734%" y="165" width="0.9879%" height="15" fill="rgb(208,190,38)"/><text x="34.0234%" y="175.50"></text></g><g><title>predicates_of (363,843 samples, 1.19%)</title><rect x="33.5973%" y="197" width="1.1914%" height="15" fill="rgb(235,213,38)"/><text x="33.8473%" y="207.50"></text></g><g><title>predicates_defined_on (340,353 samples, 1.11%)</title><rect x="33.6743%" y="181" width="1.1145%" height="15" fill="rgb(237,122,38)"/><text x="33.9243%" y="191.50"></text></g><g><title>type_collecting (970,241 samples, 3.18%)</title><rect x="32.2788%" y="229" width="3.1770%" height="15" fill="rgb(244,218,35)"/><text x="32.5288%" y="239.50">typ..</text></g><g><title>collect_mod_item_types (965,651 samples, 3.16%)</title><rect x="32.2938%" y="213" width="3.1620%" height="15" fill="rgb(240,68,47)"/><text x="32.5438%" y="223.50">col..</text></g><g><title>type_of (175,122 samples, 0.57%)</title><rect x="34.8824%" y="197" width="0.5734%" height="15" fill="rgb(210,16,53)"/><text x="35.1324%" y="207.50"></text></g><g><title>type_param_predicates (76,460 samples, 0.25%)</title><rect x="35.2054%" y="181" width="0.2504%" height="15" fill="rgb(235,124,12)"/><text x="35.4554%" y="191.50"></text></g><g><title>type_param_predicates (59,290 samples, 0.19%)</title><rect x="35.2617%" y="165" width="0.1941%" height="15" fill="rgb(224,169,11)"/><text x="35.5117%" y="175.50"></text></g><g><title>evaluate_obligation (108,712 samples, 0.36%)</title><rect x="37.3148%" y="197" width="0.3560%" height="15" fill="rgb(250,166,2)"/><text x="37.5648%" y="207.50"></text></g><g><title>implied_outlives_bounds (51,530 samples, 0.17%)</title><rect x="37.6707%" y="197" width="0.1687%" height="15" fill="rgb(242,216,29)"/><text x="37.9207%" y="207.50"></text></g><g><title>param_env (149,190 samples, 0.49%)</title><rect x="37.8395%" y="197" width="0.4885%" height="15" fill="rgb(230,116,27)"/><text x="38.0895%" y="207.50"></text></g><g><title>check_impl_item_well_formed (855,331 samples, 2.80%)</title><rect x="35.6231%" y="213" width="2.8007%" height="15" fill="rgb(228,99,48)"/><text x="35.8731%" y="223.50">ch..</text></g><g><title>evaluate_obligation (65,210 samples, 0.21%)</title><rect x="39.7009%" y="197" width="0.2135%" height="15" fill="rgb(253,11,6)"/><text x="39.9509%" y="207.50"></text></g><g><title>param_env (72,840 samples, 0.24%)</title><rect x="39.9847%" y="197" width="0.2385%" height="15" fill="rgb(247,143,39)"/><text x="40.2347%" y="207.50"></text></g><g><title>predicates_of (31,201 samples, 0.10%)</title><rect x="40.2232%" y="197" width="0.1022%" height="15" fill="rgb(236,97,10)"/><text x="40.4732%" y="207.50"></text></g><g><title>check_item_well_formed (612,385 samples, 2.01%)</title><rect x="38.4239%" y="213" width="2.0052%" height="15" fill="rgb(233,208,19)"/><text x="38.6739%" y="223.50">c..</text></g><g><title>adt_def (34,920 samples, 0.11%)</title><rect x="41.8634%" y="133" width="0.1143%" height="15" fill="rgb(216,164,2)"/><text x="42.1134%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (34,430 samples, 0.11%)</title><rect x="41.8650%" y="117" width="0.1127%" height="15" fill="rgb(220,129,5)"/><text x="42.1150%" y="127.50"></text></g><g><title>adt_sized_constraint (41,181 samples, 0.13%)</title><rect x="41.8553%" y="149" width="0.1348%" height="15" fill="rgb(242,17,10)"/><text x="42.1053%" y="159.50"></text></g><g><title>adt_sized_constraint (64,501 samples, 0.21%)</title><rect x="41.8304%" y="165" width="0.2112%" height="15" fill="rgb(242,107,0)"/><text x="42.0804%" y="175.50"></text></g><g><title>adt_sized_constraint (93,461 samples, 0.31%)</title><rect x="41.7606%" y="181" width="0.3060%" height="15" fill="rgb(251,28,31)"/><text x="42.0106%" y="191.50"></text></g><g><title>evaluate_obligation (213,332 samples, 0.70%)</title><rect x="41.4653%" y="197" width="0.6985%" height="15" fill="rgb(233,223,10)"/><text x="41.7153%" y="207.50"></text></g><g><title>implied_outlives_bounds (48,441 samples, 0.16%)</title><rect x="42.1638%" y="197" width="0.1586%" height="15" fill="rgb(215,21,27)"/><text x="42.4138%" y="207.50"></text></g><g><title>param_env (45,430 samples, 0.15%)</title><rect x="42.3224%" y="197" width="0.1488%" height="15" fill="rgb(232,23,21)"/><text x="42.5724%" y="207.50"></text></g><g><title>predicates_of (59,650 samples, 0.20%)</title><rect x="42.4712%" y="197" width="0.1953%" height="15" fill="rgb(244,5,23)"/><text x="42.7212%" y="207.50"></text></g><g><title>predicates_defined_on (50,350 samples, 0.16%)</title><rect x="42.5016%" y="181" width="0.1649%" height="15" fill="rgb(226,81,46)"/><text x="42.7516%" y="191.50"></text></g><g><title>analysis (10,056,788 samples, 32.93%)</title><rect x="9.8144%" y="261" width="32.9303%" height="15" fill="rgb(247,70,30)"/><text x="10.0644%" y="271.50">analysis</text></g><g><title>type_check_crate (6,816,533 samples, 22.32%)</title><rect x="20.4245%" y="245" width="22.3203%" height="15" fill="rgb(212,68,19)"/><text x="20.6745%" y="255.50">type_check_crate</text></g><g><title>wf_checking (2,225,464 samples, 7.29%)</title><rect x="35.4576%" y="229" width="7.2871%" height="15" fill="rgb(240,187,13)"/><text x="35.7076%" y="239.50">wf_checking</text></g><g><title>check_trait_item_well_formed (707,208 samples, 2.32%)</title><rect x="40.4291%" y="213" width="2.3157%" height="15" fill="rgb(223,113,26)"/><text x="40.6791%" y="223.50">c..</text></g><g><title>codegen_module (250,413 samples, 0.82%)</title><rect x="45.4754%" y="245" width="0.8200%" height="15" fill="rgb(206,192,2)"/><text x="45.7254%" y="255.50"></text></g><g><title>codegen_crate (1,156,142 samples, 3.79%)</title><rect x="42.7623%" y="261" width="3.7857%" height="15" fill="rgb(241,108,4)"/><text x="43.0123%" y="271.50">code..</text></g><g><title>LLVM_module_codegen (2,244,964 samples, 7.35%)</title><rect x="46.5848%" y="245" width="7.3510%" height="15" fill="rgb(247,173,49)"/><text x="46.8348%" y="255.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (2,198,634 samples, 7.20%)</title><rect x="46.7365%" y="229" width="7.1993%" height="15" fill="rgb(224,114,35)"/><text x="46.9865%" y="239.50">LLVM_modul..</text></g><g><title>codegen_module_optimize (2,388,955 samples, 7.82%)</title><rect x="46.5480%" y="261" width="7.8225%" height="15" fill="rgb(245,159,27)"/><text x="46.7980%" y="271.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (132,741 samples, 0.43%)</title><rect x="53.9358%" y="245" width="0.4347%" height="15" fill="rgb(245,172,44)"/><text x="54.1858%" y="255.50"></text></g><g><title>AST_validation (48,620 samples, 0.16%)</title><rect x="54.6915%" y="245" width="0.1592%" height="15" fill="rgb(236,23,11)"/><text x="54.9415%" y="255.50"></text></g><g><title>crate_injection (38,711 samples, 0.13%)</title><rect x="54.8974%" y="245" width="0.1268%" height="15" fill="rgb(205,117,38)"/><text x="55.1474%" y="255.50"></text></g><g><title>macro_expand_crate (6,052,284 samples, 19.82%)</title><rect x="55.0242%" y="245" width="19.8178%" height="15" fill="rgb(237,72,25)"/><text x="55.2742%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (6,041,104 samples, 19.78%)</title><rect x="55.0608%" y="229" width="19.7812%" height="15" fill="rgb(244,70,9)"/><text x="55.3108%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (1,384,825 samples, 4.53%)</title><rect x="70.3075%" y="213" width="4.5345%" height="15" fill="rgb(217,125,39)"/><text x="70.5575%" y="223.50">metad..</text></g><g><title>metadata_register_crate (487,907 samples, 1.60%)</title><rect x="73.2444%" y="197" width="1.5976%" height="15" fill="rgb(235,36,10)"/><text x="73.4944%" y="207.50"></text></g><g><title>metadata_register_crate (38,770 samples, 0.13%)</title><rect x="74.7151%" y="181" width="0.1269%" height="15" fill="rgb(251,123,47)"/><text x="74.9651%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (62,931 samples, 0.21%)</title><rect x="74.8495%" y="245" width="0.2061%" height="15" fill="rgb(221,13,13)"/><text x="75.0995%" y="255.50"></text></g><g><title>finalize_macro_resolutions (97,221 samples, 0.32%)</title><rect x="75.1119%" y="229" width="0.3183%" height="15" fill="rgb(238,131,9)"/><text x="75.3619%" y="239.50"></text></g><g><title>late_resolve_crate (433,855 samples, 1.42%)</title><rect x="75.4303%" y="229" width="1.4206%" height="15" fill="rgb(211,50,8)"/><text x="75.6803%" y="239.50"></text></g><g><title>configure_and_expand (6,891,674 samples, 22.57%)</title><rect x="54.3705%" y="261" width="22.5664%" height="15" fill="rgb(245,182,24)"/><text x="54.6205%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (574,526 samples, 1.88%)</title><rect x="75.0556%" y="245" width="1.8813%" height="15" fill="rgb(242,14,37)"/><text x="75.3056%" y="255.50">r..</text></g><g><title>early_lint_checks (69,180 samples, 0.23%)</title><rect x="77.1227%" y="261" width="0.2265%" height="15" fill="rgb(246,228,12)"/><text x="77.3727%" y="271.50"></text></g><g><title>free_global_ctxt (1,775,349 samples, 5.81%)</title><rect x="77.3493%" y="261" width="5.8133%" height="15" fill="rgb(213,55,15)"/><text x="77.5993%" y="271.50">free_gl..</text></g><g><title>crate_hash (63,280 samples, 0.21%)</title><rect x="84.3155%" y="245" width="0.2072%" height="15" fill="rgb(209,9,3)"/><text x="84.5655%" y="255.50"></text></g><g><title>collect_and_partition_mono_items (41,521 samples, 0.14%)</title><rect x="84.6402%" y="229" width="0.1360%" height="15" fill="rgb(230,59,30)"/><text x="84.8902%" y="239.50"></text></g><g><title>exported_symbols (98,031 samples, 0.32%)</title><rect x="84.6139%" y="245" width="0.3210%" height="15" fill="rgb(209,121,21)"/><text x="84.8639%" y="255.50"></text></g><g><title>reachable_non_generics (48,500 samples, 0.16%)</title><rect x="84.7761%" y="229" width="0.1588%" height="15" fill="rgb(220,109,13)"/><text x="85.0261%" y="239.50"></text></g><g><title>reachable_set (40,050 samples, 0.13%)</title><rect x="84.8038%" y="213" width="0.1311%" height="15" fill="rgb(232,18,1)"/><text x="85.0538%" y="223.50"></text></g><g><title>adt_def (68,091 samples, 0.22%)</title><rect x="86.0532%" y="197" width="0.2230%" height="15" fill="rgb(215,41,42)"/><text x="86.3032%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (66,981 samples, 0.22%)</title><rect x="86.0568%" y="181" width="0.2193%" height="15" fill="rgb(224,123,36)"/><text x="86.3068%" y="191.50"></text></g><g><title>item_attrs (56,321 samples, 0.18%)</title><rect x="86.0917%" y="165" width="0.1844%" height="15" fill="rgb(240,125,3)"/><text x="86.3417%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (55,501 samples, 0.18%)</title><rect x="86.0944%" y="149" width="0.1817%" height="15" fill="rgb(205,98,50)"/><text x="86.3444%" y="159.50"></text></g><g><title>adt_sized_constraint (80,071 samples, 0.26%)</title><rect x="86.0373%" y="213" width="0.2622%" height="15" fill="rgb(205,185,37)"/><text x="86.2873%" y="223.50"></text></g><g><title>layout_of (177,332 samples, 0.58%)</title><rect x="85.9530%" y="229" width="0.5807%" height="15" fill="rgb(238,207,15)"/><text x="86.2030%" y="239.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (42,330 samples, 0.14%)</title><rect x="86.3951%" y="213" width="0.1386%" height="15" fill="rgb(213,199,42)"/><text x="86.6451%" y="223.50"></text></g><g><title>normalize_projection_ty (36,220 samples, 0.12%)</title><rect x="86.4151%" y="197" width="0.1186%" height="15" fill="rgb(235,201,11)"/><text x="86.6651%" y="207.50"></text></g><g><title>optimized_mir (748,969 samples, 2.45%)</title><rect x="85.0568%" y="245" width="2.4525%" height="15" fill="rgb(207,46,11)"/><text x="85.3068%" y="255.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (297,953 samples, 0.98%)</title><rect x="86.5337%" y="229" width="0.9756%" height="15" fill="rgb(241,35,35)"/><text x="86.7837%" y="239.50"></text></g><g><title>generate_crate_metadata (1,367,874 samples, 4.48%)</title><rect x="83.1625%" y="261" width="4.4790%" height="15" fill="rgb(243,32,47)"/><text x="83.4125%" y="271.50">gener..</text></g><g><title>hir_lowering (471,575 samples, 1.54%)</title><rect x="87.6415%" y="261" width="1.5441%" height="15" fill="rgb(247,202,23)"/><text x="87.8915%" y="271.50"></text></g><g><title>finish_ongoing_codegen (661,317 samples, 2.17%)</title><rect x="89.2414%" y="245" width="2.1654%" height="15" fill="rgb(219,102,11)"/><text x="89.4914%" y="255.50">f..</text></g><g><title>join_worker_thread (49,480 samples, 0.16%)</title><rect x="91.2448%" y="229" width="0.1620%" height="15" fill="rgb(243,110,44)"/><text x="91.4948%" y="239.50"></text></g><g><title>link_binary_remove_temps (42,760 samples, 0.14%)</title><rect x="92.7316%" y="213" width="0.1400%" height="15" fill="rgb(222,74,54)"/><text x="92.9816%" y="223.50"></text></g><g><title>link_crate (1,140,893 samples, 3.74%)</title><rect x="91.4068%" y="245" width="3.7358%" height="15" fill="rgb(216,99,12)"/><text x="91.6568%" y="255.50">link..</text></g><g><title>link_binary (1,100,872 samples, 3.60%)</title><rect x="91.5378%" y="229" width="3.6047%" height="15" fill="rgb(226,22,26)"/><text x="91.7878%" y="239.50">link..</text></g><g><title>link_rlib (693,548 samples, 2.27%)</title><rect x="92.8716%" y="213" width="2.2710%" height="15" fill="rgb(217,163,10)"/><text x="93.1216%" y="223.50">l..</text></g><g><title>link (1,828,170 samples, 5.99%)</title><rect x="89.1857%" y="261" width="5.9862%" height="15" fill="rgb(213,25,53)"/><text x="89.4357%" y="271.50">link</text></g><g><title>parse_crate (580,326 samples, 1.90%)</title><rect x="95.1719%" y="261" width="1.9002%" height="15" fill="rgb(252,105,26)"/><text x="95.4219%" y="271.50">p..</text></g><g><title>prepare_outputs (192,713 samples, 0.63%)</title><rect x="97.0861%" y="261" width="0.6310%" height="15" fill="rgb(220,39,43)"/><text x="97.3361%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (298,183 samples, 0.98%)</title><rect x="97.7171%" y="261" width="0.9764%" height="15" fill="rgb(229,68,48)"/><text x="97.9671%" y="271.50"></text></g><g><title>setup_global_ctxt (63,871 samples, 0.21%)</title><rect x="98.6957%" y="261" width="0.2091%" height="15" fill="rgb(252,8,32)"/><text x="98.9457%" y="271.50"></text></g><g><title>all (30,539,587 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (30,539,587 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (334,454 samples, 1.10%)</title><rect x="98.9049%" y="261" width="1.0951%" height="15" fill="rgb(236,28,36)"/><text x="99.1549%" y="271.50"></text></g></svg></svg>