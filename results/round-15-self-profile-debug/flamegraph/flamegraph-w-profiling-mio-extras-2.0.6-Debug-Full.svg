<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (51,315,770 samples, 10.32%)</title><rect x="0.1626%" y="197" width="10.3213%" height="15" fill="rgb(227,0,7)"/><text x="0.4126%" y="207.50">LLVM_passes</text></g><g><title>param_env (536,287 samples, 0.11%)</title><rect x="14.4850%" y="117" width="0.1079%" height="15" fill="rgb(217,0,24)"/><text x="14.7350%" y="127.50"></text></g><g><title>item_attrs (547,145 samples, 0.11%)</title><rect x="14.7570%" y="85" width="0.1100%" height="15" fill="rgb(221,193,54)"/><text x="15.0070%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (531,995 samples, 0.11%)</title><rect x="14.7600%" y="69" width="0.1070%" height="15" fill="rgb(248,212,6)"/><text x="15.0100%" y="79.50"></text></g><g><title>codegen_fn_attrs (732,076 samples, 0.15%)</title><rect x="14.7259%" y="101" width="0.1472%" height="15" fill="rgb(208,68,35)"/><text x="14.9759%" y="111.50"></text></g><g><title>needs_drop_raw (1,509,258 samples, 0.30%)</title><rect x="15.6607%" y="85" width="0.3036%" height="15" fill="rgb(232,128,0)"/><text x="15.9107%" y="95.50"></text></g><g><title>is_copy_raw (875,451 samples, 0.18%)</title><rect x="15.7882%" y="69" width="0.1761%" height="15" fill="rgb(207,160,47)"/><text x="16.0382%" y="79.50"></text></g><g><title>evaluate_obligation (716,578 samples, 0.14%)</title><rect x="15.8202%" y="53" width="0.1441%" height="15" fill="rgb(228,23,34)"/><text x="16.0702%" y="63.50"></text></g><g><title>impl_parent (728,198 samples, 0.15%)</title><rect x="16.2884%" y="53" width="0.1465%" height="15" fill="rgb(218,30,26)"/><text x="16.5384%" y="63.50"></text></g><g><title>specialization_graph_of (2,676,857 samples, 0.54%)</title><rect x="16.0857%" y="69" width="0.5384%" height="15" fill="rgb(220,122,19)"/><text x="16.3357%" y="79.50"></text></g><g><title>impl_trait_ref (940,629 samples, 0.19%)</title><rect x="16.4349%" y="53" width="0.1892%" height="15" fill="rgb(250,228,42)"/><text x="16.6849%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (776,909 samples, 0.16%)</title><rect x="16.4678%" y="37" width="0.1563%" height="15" fill="rgb(240,193,28)"/><text x="16.7178%" y="47.50"></text></g><g><title>resolve_instance (3,426,044 samples, 0.69%)</title><rect x="15.9643%" y="85" width="0.6891%" height="15" fill="rgb(216,20,37)"/><text x="16.2143%" y="95.50"></text></g><g><title>thir_body (1,609,004 samples, 0.32%)</title><rect x="16.6618%" y="85" width="0.3236%" height="15" fill="rgb(206,188,39)"/><text x="16.9118%" y="95.50"></text></g><g><title>mir_const (13,599,278 samples, 2.74%)</title><rect x="14.2547%" y="133" width="2.7353%" height="15" fill="rgb(217,207,13)"/><text x="14.5047%" y="143.50">mi..</text></g><g><title>unsafety_check_result (11,918,191 samples, 2.40%)</title><rect x="14.5928%" y="117" width="2.3971%" height="15" fill="rgb(231,73,38)"/><text x="14.8428%" y="127.50">un..</text></g><g><title>mir_built (10,524,618 samples, 2.12%)</title><rect x="14.8731%" y="101" width="2.1168%" height="15" fill="rgb(225,20,46)"/><text x="15.1231%" y="111.50">m..</text></g><g><title>mir_promoted (15,279,250 samples, 3.07%)</title><rect x="13.9998%" y="149" width="3.0732%" height="15" fill="rgb(210,31,41)"/><text x="14.2498%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (610,697 samples, 0.12%)</title><rect x="17.0730%" y="149" width="0.1228%" height="15" fill="rgb(221,200,47)"/><text x="17.3230%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,365,872 samples, 0.48%)</title><rect x="17.2891%" y="149" width="0.4759%" height="15" fill="rgb(226,26,5)"/><text x="17.5391%" y="159.50"></text></g><g><title>MIR_borrow_checking (35,570,691 samples, 7.15%)</title><rect x="10.6120%" y="181" width="7.1544%" height="15" fill="rgb(249,33,26)"/><text x="10.8620%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (35,426,560 samples, 7.13%)</title><rect x="10.6409%" y="165" width="7.1254%" height="15" fill="rgb(235,183,28)"/><text x="10.8909%" y="175.50">mir_borrow..</text></g><g><title>codegen_fn_attrs (562,805 samples, 0.11%)</title><rect x="17.9457%" y="149" width="0.1132%" height="15" fill="rgb(221,5,38)"/><text x="18.1957%" y="159.50"></text></g><g><title>check_mod_attrs (911,390 samples, 0.18%)</title><rect x="17.8756%" y="165" width="0.1833%" height="15" fill="rgb(247,18,42)"/><text x="18.1256%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (691,906 samples, 0.14%)</title><rect x="18.1108%" y="165" width="0.1392%" height="15" fill="rgb(241,131,45)"/><text x="18.3608%" y="175.50"></text></g><g><title>misc_checking_1 (2,011,240 samples, 0.40%)</title><rect x="17.8688%" y="181" width="0.4045%" height="15" fill="rgb(249,31,29)"/><text x="18.1188%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (650,907 samples, 0.13%)</title><rect x="18.2737%" y="165" width="0.1309%" height="15" fill="rgb(225,111,53)"/><text x="18.5237%" y="175.50"></text></g><g><title>check_mod_liveness (526,286 samples, 0.11%)</title><rect x="18.2988%" y="149" width="0.1059%" height="15" fill="rgb(238,160,17)"/><text x="18.5488%" y="159.50"></text></g><g><title>misc_checking_2 (1,341,824 samples, 0.27%)</title><rect x="18.2734%" y="181" width="0.2699%" height="15" fill="rgb(214,148,48)"/><text x="18.5234%" y="191.50"></text></g><g><title>match_checking (689,317 samples, 0.14%)</title><rect x="18.4046%" y="165" width="0.1386%" height="15" fill="rgb(232,36,49)"/><text x="18.6546%" y="175.50"></text></g><g><title>check_match (655,247 samples, 0.13%)</title><rect x="18.4115%" y="149" width="0.1318%" height="15" fill="rgb(209,103,24)"/><text x="18.6615%" y="159.50"></text></g><g><title>crate_lints (2,971,430 samples, 0.60%)</title><rect x="18.6971%" y="149" width="0.5977%" height="15" fill="rgb(229,88,8)"/><text x="18.9471%" y="159.50"></text></g><g><title>type_of (1,373,388 samples, 0.28%)</title><rect x="19.0185%" y="133" width="0.2762%" height="15" fill="rgb(213,181,19)"/><text x="19.2685%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (911,642 samples, 0.18%)</title><rect x="19.1114%" y="117" width="0.1834%" height="15" fill="rgb(254,191,54)"/><text x="19.3614%" y="127.50"></text></g><g><title>lint_checking (3,626,297 samples, 0.73%)</title><rect x="18.6968%" y="165" width="0.7294%" height="15" fill="rgb(241,83,37)"/><text x="18.9468%" y="175.50"></text></g><g><title>module_lints (653,247 samples, 0.13%)</title><rect x="19.2948%" y="149" width="0.1314%" height="15" fill="rgb(233,36,39)"/><text x="19.5448%" y="159.50"></text></g><g><title>lint_mod (647,607 samples, 0.13%)</title><rect x="19.2959%" y="133" width="0.1303%" height="15" fill="rgb(226,3,54)"/><text x="19.5459%" y="143.50"></text></g><g><title>privacy_checking_modules (1,033,470 samples, 0.21%)</title><rect x="19.4818%" y="165" width="0.2079%" height="15" fill="rgb(245,192,40)"/><text x="19.7318%" y="175.50"></text></g><g><title>check_mod_privacy (1,029,800 samples, 0.21%)</title><rect x="19.4826%" y="149" width="0.2071%" height="15" fill="rgb(238,167,29)"/><text x="19.7326%" y="159.50"></text></g><g><title>misc_checking_3 (5,713,668 samples, 1.15%)</title><rect x="18.5433%" y="181" width="1.1492%" height="15" fill="rgb(232,182,51)"/><text x="18.7933%" y="191.50"></text></g><g><title>impl_parent (2,292,180 samples, 0.46%)</title><rect x="20.5275%" y="117" width="0.4610%" height="15" fill="rgb(231,60,39)"/><text x="20.7775%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,252,043 samples, 0.25%)</title><rect x="20.7367%" y="101" width="0.2518%" height="15" fill="rgb(208,69,12)"/><text x="20.9867%" y="111.50"></text></g><g><title>impl_trait_ref (5,114,546 samples, 1.03%)</title><rect x="20.9885%" y="117" width="1.0287%" height="15" fill="rgb(235,93,37)"/><text x="21.2385%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,058,648 samples, 0.82%)</title><rect x="21.2009%" y="101" width="0.8163%" height="15" fill="rgb(213,116,39)"/><text x="21.4509%" y="111.50"></text></g><g><title>trait_impls_of (725,330 samples, 0.15%)</title><rect x="22.0213%" y="117" width="0.1459%" height="15" fill="rgb(222,207,29)"/><text x="22.2713%" y="127.50"></text></g><g><title>coherent_trait (12,190,914 samples, 2.45%)</title><rect x="19.7155%" y="149" width="2.4520%" height="15" fill="rgb(206,96,30)"/><text x="19.9655%" y="159.50">co..</text></g><g><title>specialization_graph_of (11,643,548 samples, 2.34%)</title><rect x="19.8256%" y="133" width="2.3419%" height="15" fill="rgb(218,138,4)"/><text x="20.0756%" y="143.50">s..</text></g><g><title>coherence_checking (12,282,185 samples, 2.47%)</title><rect x="19.7115%" y="165" width="2.4703%" height="15" fill="rgb(250,191,14)"/><text x="19.9615%" y="175.50">co..</text></g><g><title>associated_items (657,100 samples, 0.13%)</title><rect x="27.2643%" y="117" width="0.1322%" height="15" fill="rgb(239,60,40)"/><text x="27.5143%" y="127.50"></text></g><g><title>adt_dtorck_constraint (567,085 samples, 0.11%)</title><rect x="27.5843%" y="69" width="0.1141%" height="15" fill="rgb(206,27,48)"/><text x="27.8343%" y="79.50"></text></g><g><title>adt_dtorck_constraint (782,277 samples, 0.16%)</title><rect x="27.5508%" y="85" width="0.1573%" height="15" fill="rgb(225,35,8)"/><text x="27.8008%" y="95.50"></text></g><g><title>dropck_outlives (1,557,267 samples, 0.31%)</title><rect x="27.4146%" y="117" width="0.3132%" height="15" fill="rgb(250,213,24)"/><text x="27.6646%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,193,693 samples, 0.24%)</title><rect x="27.4877%" y="101" width="0.2401%" height="15" fill="rgb(247,123,22)"/><text x="27.7377%" y="111.50"></text></g><g><title>generics_of (1,306,902 samples, 0.26%)</title><rect x="28.6838%" y="101" width="0.2629%" height="15" fill="rgb(231,138,38)"/><text x="28.9338%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,027,860 samples, 0.21%)</title><rect x="28.7400%" y="85" width="0.2067%" height="15" fill="rgb(231,145,46)"/><text x="28.9900%" y="95.50"></text></g><g><title>impl_trait_ref (1,475,596 samples, 0.30%)</title><rect x="28.9846%" y="101" width="0.2968%" height="15" fill="rgb(251,118,11)"/><text x="29.2346%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,210,434 samples, 0.24%)</title><rect x="29.0379%" y="85" width="0.2435%" height="15" fill="rgb(217,147,25)"/><text x="29.2879%" y="95.50"></text></g><g><title>predicates_of (899,271 samples, 0.18%)</title><rect x="29.2929%" y="101" width="0.1809%" height="15" fill="rgb(247,81,37)"/><text x="29.5429%" y="111.50"></text></g><g><title>specializes (2,277,064 samples, 0.46%)</title><rect x="29.4737%" y="101" width="0.4580%" height="15" fill="rgb(209,12,38)"/><text x="29.7237%" y="111.50"></text></g><g><title>param_env (1,359,184 samples, 0.27%)</title><rect x="29.6583%" y="85" width="0.2734%" height="15" fill="rgb(227,1,9)"/><text x="29.9083%" y="95.50"></text></g><g><title>def_span (602,675 samples, 0.12%)</title><rect x="29.8105%" y="69" width="0.1212%" height="15" fill="rgb(248,47,43)"/><text x="30.0605%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (533,294 samples, 0.11%)</title><rect x="29.8245%" y="53" width="0.1073%" height="15" fill="rgb(221,10,30)"/><text x="30.0745%" y="63.50"></text></g><g><title>trait_impls_of (617,967 samples, 0.12%)</title><rect x="29.9346%" y="101" width="0.1243%" height="15" fill="rgb(210,229,1)"/><text x="30.1846%" y="111.50"></text></g><g><title>evaluate_obligation (11,607,170 samples, 2.33%)</title><rect x="27.7278%" y="117" width="2.3346%" height="15" fill="rgb(222,148,37)"/><text x="27.9778%" y="127.50">e..</text></g><g><title>evaluate_obligation (1,151,149 samples, 0.23%)</title><rect x="32.0949%" y="101" width="0.2315%" height="15" fill="rgb(234,67,33)"/><text x="32.3449%" y="111.50"></text></g><g><title>typeck (10,115,243 samples, 2.03%)</title><rect x="30.5166%" y="117" width="2.0345%" height="15" fill="rgb(247,98,35)"/><text x="30.7666%" y="127.50">t..</text></g><g><title>item_bodies_checking (51,573,313 samples, 10.37%)</title><rect x="22.1898%" y="165" width="10.3731%" height="15" fill="rgb(247,138,52)"/><text x="22.4398%" y="175.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (51,570,603 samples, 10.37%)</title><rect x="22.1904%" y="149" width="10.3725%" height="15" fill="rgb(213,79,30)"/><text x="22.4404%" y="159.50">typeck_item_bod..</text></g><g><title>typeck (51,476,892 samples, 10.35%)</title><rect x="22.2092%" y="133" width="10.3537%" height="15" fill="rgb(246,177,23)"/><text x="22.4592%" y="143.50">typeck</text></g><g><title>item_types_checking (1,265,863 samples, 0.25%)</title><rect x="32.5629%" y="165" width="0.2546%" height="15" fill="rgb(230,62,27)"/><text x="32.8129%" y="175.50"></text></g><g><title>check_mod_item_types (1,261,183 samples, 0.25%)</title><rect x="32.5638%" y="149" width="0.2537%" height="15" fill="rgb(216,154,8)"/><text x="32.8138%" y="159.50"></text></g><g><title>predicates_of (663,158 samples, 0.13%)</title><rect x="33.0595%" y="133" width="0.1334%" height="15" fill="rgb(244,35,45)"/><text x="33.3095%" y="143.50"></text></g><g><title>predicates_defined_on (607,137 samples, 0.12%)</title><rect x="33.0707%" y="117" width="0.1221%" height="15" fill="rgb(251,115,12)"/><text x="33.3207%" y="127.50"></text></g><g><title>type_collecting (1,925,599 samples, 0.39%)</title><rect x="32.8183%" y="165" width="0.3873%" height="15" fill="rgb(240,54,50)"/><text x="33.0683%" y="175.50"></text></g><g><title>collect_mod_item_types (1,908,359 samples, 0.38%)</title><rect x="32.8217%" y="149" width="0.3838%" height="15" fill="rgb(233,84,52)"/><text x="33.0717%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,163,045 samples, 0.64%)</title><rect x="33.2516%" y="149" width="0.6362%" height="15" fill="rgb(207,117,47)"/><text x="33.5016%" y="159.50"></text></g><g><title>evaluate_obligation (640,948 samples, 0.13%)</title><rect x="34.2351%" y="133" width="0.1289%" height="15" fill="rgb(249,43,39)"/><text x="34.4851%" y="143.50"></text></g><g><title>analysis (119,521,172 samples, 24.04%)</title><rect x="10.4838%" y="197" width="24.0396%" height="15" fill="rgb(209,38,44)"/><text x="10.7338%" y="207.50">analysis</text></g><g><title>type_check_crate (73,737,258 samples, 14.83%)</title><rect x="19.6925%" y="181" width="14.8310%" height="15" fill="rgb(236,212,23)"/><text x="19.9425%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,545,066 samples, 1.32%)</title><rect x="33.2070%" y="165" width="1.3164%" height="15" fill="rgb(242,79,21)"/><text x="33.4570%" y="175.50"></text></g><g><title>check_item_well_formed (3,160,336 samples, 0.64%)</title><rect x="33.8878%" y="149" width="0.6356%" height="15" fill="rgb(211,96,35)"/><text x="34.1378%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (862,363 samples, 0.17%)</title><rect x="42.1405%" y="165" width="0.1734%" height="15" fill="rgb(253,215,40)"/><text x="42.3905%" y="175.50"></text></g><g><title>const_caller_location (540,263 samples, 0.11%)</title><rect x="42.3139%" y="165" width="0.1087%" height="15" fill="rgb(211,81,21)"/><text x="42.5639%" y="175.50"></text></g><g><title>item_attrs (550,784 samples, 0.11%)</title><rect x="42.8766%" y="133" width="0.1108%" height="15" fill="rgb(208,190,38)"/><text x="43.1266%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (520,264 samples, 0.10%)</title><rect x="42.8827%" y="117" width="0.1046%" height="15" fill="rgb(235,213,38)"/><text x="43.1327%" y="127.50"></text></g><g><title>codegen_fn_attrs (858,485 samples, 0.17%)</title><rect x="42.8331%" y="149" width="0.1727%" height="15" fill="rgb(237,122,38)"/><text x="43.0831%" y="159.50"></text></g><g><title>layout_of (610,226 samples, 0.12%)</title><rect x="43.2547%" y="133" width="0.1227%" height="15" fill="rgb(244,218,35)"/><text x="43.5047%" y="143.50"></text></g><g><title>layout_of (1,928,440 samples, 0.39%)</title><rect x="43.0279%" y="149" width="0.3879%" height="15" fill="rgb(240,68,47)"/><text x="43.2779%" y="159.50"></text></g><g><title>predicates_of (902,710 samples, 0.18%)</title><rect x="43.7615%" y="133" width="0.1816%" height="15" fill="rgb(210,16,53)"/><text x="44.0115%" y="143.50"></text></g><g><title>predicates_defined_on (631,776 samples, 0.13%)</title><rect x="43.8160%" y="117" width="0.1271%" height="15" fill="rgb(235,124,12)"/><text x="44.0660%" y="127.50"></text></g><g><title>param_env (2,622,509 samples, 0.53%)</title><rect x="43.4158%" y="149" width="0.5275%" height="15" fill="rgb(224,169,11)"/><text x="43.6658%" y="159.50"></text></g><g><title>fn_abi_of_instance (7,687,401 samples, 1.55%)</title><rect x="42.4264%" y="165" width="1.5462%" height="15" fill="rgb(250,166,2)"/><text x="42.6764%" y="175.50"></text></g><g><title>layout_of (582,308 samples, 0.12%)</title><rect x="44.2642%" y="117" width="0.1171%" height="15" fill="rgb(242,216,29)"/><text x="44.5142%" y="127.50"></text></g><g><title>layout_of (781,211 samples, 0.16%)</title><rect x="44.2433%" y="133" width="0.1571%" height="15" fill="rgb(230,116,27)"/><text x="44.4933%" y="143.50"></text></g><g><title>layout_of (1,051,113 samples, 0.21%)</title><rect x="44.2077%" y="149" width="0.2114%" height="15" fill="rgb(228,99,48)"/><text x="44.4577%" y="159.50"></text></g><g><title>layout_of (1,916,966 samples, 0.39%)</title><rect x="44.0489%" y="165" width="0.3856%" height="15" fill="rgb(253,11,6)"/><text x="44.2989%" y="175.50"></text></g><g><title>symbol_name (1,171,232 samples, 0.24%)</title><rect x="44.4386%" y="165" width="0.2356%" height="15" fill="rgb(247,143,39)"/><text x="44.6886%" y="175.50"></text></g><g><title>codegen_module (48,288,550 samples, 9.71%)</title><rect x="34.9675%" y="181" width="9.7124%" height="15" fill="rgb(236,97,10)"/><text x="35.2175%" y="191.50">codegen_module</text></g><g><title>codegen_crate (50,583,474 samples, 10.17%)</title><rect x="34.5253%" y="197" width="10.1740%" height="15" fill="rgb(233,208,19)"/><text x="34.7753%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (180,090,026 samples, 36.22%)</title><rect x="44.7425%" y="181" width="36.2220%" height="15" fill="rgb(216,164,2)"/><text x="44.9925%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (169,998,888 samples, 34.19%)</title><rect x="46.7722%" y="165" width="34.1923%" height="15" fill="rgb(220,129,5)"/><text x="47.0222%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (190,558,731 samples, 38.33%)</title><rect x="44.6993%" y="197" width="38.3276%" height="15" fill="rgb(242,17,10)"/><text x="44.9493%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,253,642 samples, 2.06%)</title><rect x="80.9645%" y="181" width="2.0623%" height="15" fill="rgb(242,107,0)"/><text x="81.2145%" y="191.50">L..</text></g><g><title>metadata_register_crate (3,022,562 samples, 0.61%)</title><rect x="88.8564%" y="149" width="0.6079%" height="15" fill="rgb(251,28,31)"/><text x="89.1064%" y="159.50"></text></g><g><title>metadata_register_crate (1,178,355 samples, 0.24%)</title><rect x="89.2274%" y="133" width="0.2370%" height="15" fill="rgb(233,223,10)"/><text x="89.4774%" y="143.50"></text></g><g><title>macro_expand_crate (31,794,383 samples, 6.39%)</title><rect x="83.1640%" y="181" width="6.3949%" height="15" fill="rgb(215,21,27)"/><text x="83.4140%" y="191.50">macro_ex..</text></g><g><title>expand_crate (31,780,103 samples, 6.39%)</title><rect x="83.1669%" y="165" width="6.3920%" height="15" fill="rgb(232,23,21)"/><text x="83.4169%" y="175.50">expand_c..</text></g><g><title>late_resolve_crate (4,762,278 samples, 0.96%)</title><rect x="89.6813%" y="165" width="0.9578%" height="15" fill="rgb(244,5,23)"/><text x="89.9313%" y="175.50"></text></g><g><title>configure_and_expand (38,113,287 samples, 7.67%)</title><rect x="83.0268%" y="197" width="7.6658%" height="15" fill="rgb(226,81,46)"/><text x="83.2768%" y="207.50">configure_..</text></g><g><title>resolve_crate (5,531,986 samples, 1.11%)</title><rect x="89.5800%" y="181" width="1.1127%" height="15" fill="rgb(247,70,30)"/><text x="89.8300%" y="191.50"></text></g><g><title>early_lint_checks (777,788 samples, 0.16%)</title><rect x="90.7788%" y="197" width="0.1564%" height="15" fill="rgb(212,68,19)"/><text x="91.0288%" y="207.50"></text></g><g><title>free_global_ctxt (7,773,049 samples, 1.56%)</title><rect x="90.9352%" y="197" width="1.5634%" height="15" fill="rgb(240,187,13)"/><text x="91.1852%" y="207.50"></text></g><g><title>item_attrs (519,196 samples, 0.10%)</title><rect x="93.2135%" y="101" width="0.1044%" height="15" fill="rgb(223,113,26)"/><text x="93.4635%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (500,026 samples, 0.10%)</title><rect x="93.2173%" y="85" width="0.1006%" height="15" fill="rgb(206,192,2)"/><text x="93.4673%" y="95.50"></text></g><g><title>codegen_fn_attrs (785,076 samples, 0.16%)</title><rect x="93.1856%" y="117" width="0.1579%" height="15" fill="rgb(241,108,4)"/><text x="93.4356%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,190,410 samples, 0.24%)</title><rect x="93.7484%" y="101" width="0.2394%" height="15" fill="rgb(247,173,49)"/><text x="93.9984%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,592,629 samples, 0.32%)</title><rect x="93.9878%" y="101" width="0.3203%" height="15" fill="rgb(224,114,35)"/><text x="94.2378%" y="111.50"></text></g><g><title>optimized_mir (4,183,914 samples, 0.84%)</title><rect x="93.4678%" y="117" width="0.8415%" height="15" fill="rgb(245,159,27)"/><text x="93.7178%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (909,057 samples, 0.18%)</title><rect x="94.4058%" y="101" width="0.1828%" height="15" fill="rgb(245,172,44)"/><text x="94.6558%" y="111.50"></text></g><g><title>resolve_instance (2,433,274 samples, 0.49%)</title><rect x="94.3093%" y="117" width="0.4894%" height="15" fill="rgb(236,23,11)"/><text x="94.5593%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,055,710 samples, 0.21%)</title><rect x="94.8208%" y="101" width="0.2123%" height="15" fill="rgb(205,117,38)"/><text x="95.0708%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,030,090 samples, 0.21%)</title><rect x="94.8259%" y="85" width="0.2072%" height="15" fill="rgb(237,72,25)"/><text x="95.0759%" y="95.50"></text></g><g><title>eval_to_allocation_raw (982,190 samples, 0.20%)</title><rect x="94.8356%" y="69" width="0.1976%" height="15" fill="rgb(244,70,9)"/><text x="95.0856%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,190,512 samples, 0.24%)</title><rect x="94.7987%" y="117" width="0.2395%" height="15" fill="rgb(217,125,39)"/><text x="95.0487%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (779,167 samples, 0.16%)</title><rect x="95.0392%" y="117" width="0.1567%" height="15" fill="rgb(235,36,10)"/><text x="95.2892%" y="127.50"></text></g><g><title>upstream_monomorphizations (764,667 samples, 0.15%)</title><rect x="95.0422%" y="101" width="0.1538%" height="15" fill="rgb(251,123,47)"/><text x="95.2922%" y="111.50"></text></g><g><title>exported_symbols (633,657 samples, 0.13%)</title><rect x="95.0685%" y="85" width="0.1274%" height="15" fill="rgb(221,13,13)"/><text x="95.3185%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (627,887 samples, 0.13%)</title><rect x="95.0697%" y="69" width="0.1263%" height="15" fill="rgb(238,131,9)"/><text x="95.3197%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (11,404,685 samples, 2.29%)</title><rect x="92.9465%" y="133" width="2.2939%" height="15" fill="rgb(211,50,8)"/><text x="93.1965%" y="143.50">m..</text></g><g><title>monomorphization_collector (11,458,546 samples, 2.30%)</title><rect x="92.9457%" y="149" width="2.3047%" height="15" fill="rgb(245,182,24)"/><text x="93.1957%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (838,839 samples, 0.17%)</title><rect x="95.2513%" y="133" width="0.1687%" height="15" fill="rgb(242,14,37)"/><text x="95.5013%" y="143.50"></text></g><g><title>symbol_name (764,738 samples, 0.15%)</title><rect x="95.2662%" y="117" width="0.1538%" height="15" fill="rgb(246,228,12)"/><text x="95.5162%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (12,801,520 samples, 2.57%)</title><rect x="92.9395%" y="165" width="2.5748%" height="15" fill="rgb(213,55,15)"/><text x="93.1895%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,311,854 samples, 0.26%)</title><rect x="95.2504%" y="149" width="0.2639%" height="15" fill="rgb(209,9,3)"/><text x="95.5004%" y="159.50"></text></g><g><title>exported_symbols (12,970,001 samples, 2.61%)</title><rect x="92.9301%" y="181" width="2.6087%" height="15" fill="rgb(230,59,30)"/><text x="93.1801%" y="191.50">ex..</text></g><g><title>layout_of (503,545 samples, 0.10%)</title><rect x="96.3482%" y="149" width="0.1013%" height="15" fill="rgb(209,121,21)"/><text x="96.5982%" y="159.50"></text></g><g><title>layout_of (1,256,513 samples, 0.25%)</title><rect x="96.2073%" y="165" width="0.2527%" height="15" fill="rgb(220,109,13)"/><text x="96.4573%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,438,676 samples, 0.89%)</title><rect x="96.4601%" y="165" width="0.8928%" height="15" fill="rgb(232,18,1)"/><text x="96.7101%" y="175.50"></text></g><g><title>optimized_mir (9,140,343 samples, 1.84%)</title><rect x="95.5570%" y="181" width="1.8384%" height="15" fill="rgb(215,41,42)"/><text x="95.8070%" y="191.50">o..</text></g><g><title>promoted_mir (596,726 samples, 0.12%)</title><rect x="97.3954%" y="181" width="0.1200%" height="15" fill="rgb(224,123,36)"/><text x="97.6454%" y="191.50"></text></g><g><title>generate_crate_metadata (24,978,043 samples, 5.02%)</title><rect x="92.4986%" y="197" width="5.0239%" height="15" fill="rgb(240,125,3)"/><text x="92.7486%" y="207.50">genera..</text></g><g><title>hir_lowering (7,029,271 samples, 1.41%)</title><rect x="97.5225%" y="197" width="1.4138%" height="15" fill="rgb(205,98,50)"/><text x="97.7725%" y="207.50"></text></g><g><title>link_crate (2,218,413 samples, 0.45%)</title><rect x="98.9410%" y="181" width="0.4462%" height="15" fill="rgb(205,185,37)"/><text x="99.1910%" y="191.50"></text></g><g><title>link_binary (2,173,632 samples, 0.44%)</title><rect x="98.9500%" y="165" width="0.4372%" height="15" fill="rgb(238,207,15)"/><text x="99.2000%" y="175.50"></text></g><g><title>link_rlib (1,469,505 samples, 0.30%)</title><rect x="99.0916%" y="149" width="0.2956%" height="15" fill="rgb(213,199,42)"/><text x="99.3416%" y="159.50"></text></g><g><title>link (2,251,143 samples, 0.45%)</title><rect x="98.9364%" y="197" width="0.4528%" height="15" fill="rgb(235,201,11)"/><text x="99.1864%" y="207.50"></text></g><g><title>parse_crate (507,906 samples, 0.10%)</title><rect x="99.3891%" y="197" width="0.1022%" height="15" fill="rgb(207,46,11)"/><text x="99.6391%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,670,967 samples, 0.34%)</title><rect x="99.5586%" y="197" width="0.3361%" height="15" fill="rgb(241,35,35)"/><text x="99.8086%" y="207.50"></text></g><g><title>all (497,184,701 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (497,184,701 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>