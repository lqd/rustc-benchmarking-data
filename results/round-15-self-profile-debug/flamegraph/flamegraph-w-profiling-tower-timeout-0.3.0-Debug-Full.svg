<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,769,073 samples, 6.62%)</title><rect x="0.4017%" y="197" width="6.6219%" height="15" fill="rgb(227,0,7)"/><text x="0.6517%" y="207.50">LLVM_pass..</text></g><g><title>is_copy_raw (670,757 samples, 0.57%)</title><rect x="11.6840%" y="69" width="0.5717%" height="15" fill="rgb(217,0,24)"/><text x="11.9340%" y="79.50"></text></g><g><title>evaluate_obligation (582,606 samples, 0.50%)</title><rect x="11.7591%" y="53" width="0.4966%" height="15" fill="rgb(221,193,54)"/><text x="12.0091%" y="63.50"></text></g><g><title>trait_impls_of (156,082 samples, 0.13%)</title><rect x="12.1227%" y="37" width="0.1330%" height="15" fill="rgb(248,212,6)"/><text x="12.3727%" y="47.50"></text></g><g><title>needs_drop_raw (829,088 samples, 0.71%)</title><rect x="11.5510%" y="85" width="0.7067%" height="15" fill="rgb(208,68,35)"/><text x="11.8010%" y="95.50"></text></g><g><title>resolve_instance (139,942 samples, 0.12%)</title><rect x="12.2577%" y="85" width="0.1193%" height="15" fill="rgb(232,128,0)"/><text x="12.5077%" y="95.50"></text></g><g><title>thir_body (224,633 samples, 0.19%)</title><rect x="12.3828%" y="85" width="0.1915%" height="15" fill="rgb(207,160,47)"/><text x="12.6328%" y="95.50"></text></g><g><title>mir_const (2,506,789 samples, 2.14%)</title><rect x="10.4545%" y="133" width="2.1366%" height="15" fill="rgb(228,23,34)"/><text x="10.7045%" y="143.50">m..</text></g><g><title>unsafety_check_result (2,201,715 samples, 1.88%)</title><rect x="10.7145%" y="117" width="1.8766%" height="15" fill="rgb(218,30,26)"/><text x="10.9645%" y="127.50">u..</text></g><g><title>mir_built (1,991,753 samples, 1.70%)</title><rect x="10.8935%" y="101" width="1.6977%" height="15" fill="rgb(220,122,19)"/><text x="11.1435%" y="111.50"></text></g><g><title>mir_promoted (2,787,641 samples, 2.38%)</title><rect x="10.2470%" y="149" width="2.3760%" height="15" fill="rgb(250,228,42)"/><text x="10.4970%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (315,134 samples, 0.27%)</title><rect x="12.6231%" y="149" width="0.2686%" height="15" fill="rgb(240,193,28)"/><text x="12.8731%" y="159.50"></text></g><g><title>type_op_normalize_ty (159,722 samples, 0.14%)</title><rect x="12.9760%" y="149" width="0.1361%" height="15" fill="rgb(216,20,37)"/><text x="13.2260%" y="159.50"></text></g><g><title>type_op_prove_predicate (868,988 samples, 0.74%)</title><rect x="13.1122%" y="149" width="0.7407%" height="15" fill="rgb(206,188,39)"/><text x="13.3622%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,886,845 samples, 6.72%)</title><rect x="7.1348%" y="181" width="6.7223%" height="15" fill="rgb(217,207,13)"/><text x="7.3848%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (7,853,735 samples, 6.69%)</title><rect x="7.1630%" y="165" width="6.6941%" height="15" fill="rgb(231,73,38)"/><text x="7.4130%" y="175.50">mir_borro..</text></g><g><title>codegen_fn_attrs (169,222 samples, 0.14%)</title><rect x="14.1705%" y="117" width="0.1442%" height="15" fill="rgb(225,20,46)"/><text x="14.4205%" y="127.50"></text></g><g><title>codegen_fn_attrs (251,074 samples, 0.21%)</title><rect x="14.1030%" y="149" width="0.2140%" height="15" fill="rgb(210,31,41)"/><text x="14.3530%" y="159.50"></text></g><g><title>should_inherit_track_caller (230,983 samples, 0.20%)</title><rect x="14.1202%" y="133" width="0.1969%" height="15" fill="rgb(221,200,47)"/><text x="14.3702%" y="143.50"></text></g><g><title>check_mod_attrs (349,884 samples, 0.30%)</title><rect x="14.0190%" y="165" width="0.2982%" height="15" fill="rgb(226,26,5)"/><text x="14.2690%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (230,502 samples, 0.20%)</title><rect x="14.3896%" y="165" width="0.1965%" height="15" fill="rgb(249,33,26)"/><text x="14.6396%" y="175.50"></text></g><g><title>misc_checking_1 (720,068 samples, 0.61%)</title><rect x="14.0039%" y="181" width="0.6137%" height="15" fill="rgb(235,183,28)"/><text x="14.2539%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (138,371 samples, 0.12%)</title><rect x="14.6187%" y="165" width="0.1179%" height="15" fill="rgb(221,5,38)"/><text x="14.8687%" y="175.50"></text></g><g><title>misc_checking_2 (310,353 samples, 0.26%)</title><rect x="14.6177%" y="181" width="0.2645%" height="15" fill="rgb(247,18,42)"/><text x="14.8677%" y="191.50"></text></g><g><title>match_checking (170,752 samples, 0.15%)</title><rect x="14.7366%" y="165" width="0.1455%" height="15" fill="rgb(241,131,45)"/><text x="14.9866%" y="175.50"></text></g><g><title>check_match (159,631 samples, 0.14%)</title><rect x="14.7461%" y="149" width="0.1361%" height="15" fill="rgb(249,31,29)"/><text x="14.9961%" y="159.50"></text></g><g><title>death_checking (215,293 samples, 0.18%)</title><rect x="14.9823%" y="165" width="0.1835%" height="15" fill="rgb(225,111,53)"/><text x="15.2323%" y="175.50"></text></g><g><title>param_env (160,310 samples, 0.14%)</title><rect x="15.7006%" y="133" width="0.1366%" height="15" fill="rgb(238,160,17)"/><text x="15.9506%" y="143.50"></text></g><g><title>crate_lints (1,863,510 samples, 1.59%)</title><rect x="15.1669%" y="149" width="1.5883%" height="15" fill="rgb(214,148,48)"/><text x="15.4169%" y="159.50"></text></g><g><title>type_of (1,074,981 samples, 0.92%)</title><rect x="15.8390%" y="133" width="0.9163%" height="15" fill="rgb(232,36,49)"/><text x="16.0890%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (822,587 samples, 0.70%)</title><rect x="16.0542%" y="117" width="0.7011%" height="15" fill="rgb(209,103,24)"/><text x="16.3042%" y="127.50"></text></g><g><title>lint_checking (2,019,961 samples, 1.72%)</title><rect x="15.1658%" y="165" width="1.7217%" height="15" fill="rgb(229,88,8)"/><text x="15.4158%" y="175.50"></text></g><g><title>module_lints (155,121 samples, 0.13%)</title><rect x="16.7553%" y="149" width="0.1322%" height="15" fill="rgb(213,181,19)"/><text x="17.0053%" y="159.50"></text></g><g><title>lint_mod (150,891 samples, 0.13%)</title><rect x="16.7589%" y="133" width="0.1286%" height="15" fill="rgb(254,191,54)"/><text x="17.0089%" y="143.50"></text></g><g><title>privacy_checking_modules (346,044 samples, 0.29%)</title><rect x="16.9784%" y="165" width="0.2949%" height="15" fill="rgb(241,83,37)"/><text x="17.2284%" y="175.50"></text></g><g><title>check_mod_privacy (342,684 samples, 0.29%)</title><rect x="16.9813%" y="149" width="0.2921%" height="15" fill="rgb(233,36,39)"/><text x="17.2313%" y="159.50"></text></g><g><title>misc_checking_3 (2,817,390 samples, 2.40%)</title><rect x="14.8822%" y="181" width="2.4014%" height="15" fill="rgb(226,3,54)"/><text x="15.1322%" y="191.50">mi..</text></g><g><title>impl_parent (1,466,418 samples, 1.25%)</title><rect x="19.3967%" y="117" width="1.2499%" height="15" fill="rgb(245,192,40)"/><text x="19.6467%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (927,272 samples, 0.79%)</title><rect x="19.8563%" y="101" width="0.7904%" height="15" fill="rgb(238,167,29)"/><text x="20.1063%" y="111.50"></text></g><g><title>impl_trait_ref (4,180,915 samples, 3.56%)</title><rect x="20.6466%" y="117" width="3.5636%" height="15" fill="rgb(232,182,51)"/><text x="20.8966%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,419,265 samples, 2.91%)</title><rect x="21.2958%" y="101" width="2.9144%" height="15" fill="rgb(231,60,39)"/><text x="21.5458%" y="111.50">me..</text></g><g><title>coherent_trait (8,712,314 samples, 7.43%)</title><rect x="17.3302%" y="149" width="7.4259%" height="15" fill="rgb(208,69,12)"/><text x="17.5802%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (8,695,563 samples, 7.41%)</title><rect x="17.3445%" y="133" width="7.4116%" height="15" fill="rgb(235,93,37)"/><text x="17.5945%" y="143.50">specializa..</text></g><g><title>trait_impls_of (602,725 samples, 0.51%)</title><rect x="24.2423%" y="117" width="0.5137%" height="15" fill="rgb(213,116,39)"/><text x="24.4923%" y="127.50"></text></g><g><title>implementations_of_trait (177,912 samples, 0.15%)</title><rect x="24.6044%" y="101" width="0.1516%" height="15" fill="rgb(222,207,29)"/><text x="24.8544%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (119,501 samples, 0.10%)</title><rect x="24.6542%" y="85" width="0.1019%" height="15" fill="rgb(206,96,30)"/><text x="24.9042%" y="95.50"></text></g><g><title>coherence_checking (8,765,914 samples, 7.47%)</title><rect x="17.3138%" y="165" width="7.4716%" height="15" fill="rgb(218,138,4)"/><text x="17.5638%" y="175.50">coherence_..</text></g><g><title>associated_items (141,930 samples, 0.12%)</title><rect x="30.2923%" y="117" width="0.1210%" height="15" fill="rgb(250,191,14)"/><text x="30.5423%" y="127.50"></text></g><g><title>adt_def (215,192 samples, 0.18%)</title><rect x="30.7217%" y="69" width="0.1834%" height="15" fill="rgb(239,60,40)"/><text x="30.9717%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (212,942 samples, 0.18%)</title><rect x="30.7236%" y="53" width="0.1815%" height="15" fill="rgb(206,27,48)"/><text x="30.9736%" y="63.50"></text></g><g><title>adt_dtorck_constraint (198,903 samples, 0.17%)</title><rect x="30.9155%" y="69" width="0.1695%" height="15" fill="rgb(225,35,8)"/><text x="31.1655%" y="79.50"></text></g><g><title>adt_dtorck_constraint (473,265 samples, 0.40%)</title><rect x="30.7020%" y="85" width="0.4034%" height="15" fill="rgb(250,213,24)"/><text x="30.9520%" y="95.50"></text></g><g><title>adt_dtorck_constraint (612,456 samples, 0.52%)</title><rect x="30.6142%" y="101" width="0.5220%" height="15" fill="rgb(247,123,22)"/><text x="30.8642%" y="111.50"></text></g><g><title>dropck_outlives (840,286 samples, 0.72%)</title><rect x="30.4435%" y="117" width="0.7162%" height="15" fill="rgb(231,138,38)"/><text x="30.6935%" y="127.50"></text></g><g><title>evaluate_obligation (444,526 samples, 0.38%)</title><rect x="31.1597%" y="117" width="0.3789%" height="15" fill="rgb(231,145,46)"/><text x="31.4097%" y="127.50"></text></g><g><title>method_autoderef_steps (395,514 samples, 0.34%)</title><rect x="31.7620%" y="117" width="0.3371%" height="15" fill="rgb(251,118,11)"/><text x="32.0120%" y="127.50"></text></g><g><title>evaluate_obligation (149,210 samples, 0.13%)</title><rect x="31.9719%" y="101" width="0.1272%" height="15" fill="rgb(217,147,25)"/><text x="32.2219%" y="111.50"></text></g><g><title>item_bodies_checking (8,789,524 samples, 7.49%)</title><rect x="24.8069%" y="165" width="7.4917%" height="15" fill="rgb(247,81,37)"/><text x="25.0569%" y="175.50">item_bodie..</text></g><g><title>typeck_item_bodies (8,787,804 samples, 7.49%)</title><rect x="24.8084%" y="149" width="7.4902%" height="15" fill="rgb(209,12,38)"/><text x="25.0584%" y="159.50">typeck_ite..</text></g><g><title>typeck (8,762,313 samples, 7.47%)</title><rect x="24.8301%" y="133" width="7.4685%" height="15" fill="rgb(227,1,9)"/><text x="25.0801%" y="143.50">typeck</text></g><g><title>adt_destructor (325,623 samples, 0.28%)</title><rect x="33.0221%" y="133" width="0.2775%" height="15" fill="rgb(248,47,43)"/><text x="33.2721%" y="143.50"></text></g><g><title>coherent_trait (321,233 samples, 0.27%)</title><rect x="33.0259%" y="117" width="0.2738%" height="15" fill="rgb(221,10,30)"/><text x="33.2759%" y="127.50"></text></g><g><title>specialization_graph_of (319,753 samples, 0.27%)</title><rect x="33.0271%" y="101" width="0.2725%" height="15" fill="rgb(210,229,1)"/><text x="33.2771%" y="111.50"></text></g><g><title>impl_trait_ref (157,991 samples, 0.13%)</title><rect x="33.1650%" y="85" width="0.1347%" height="15" fill="rgb(222,148,37)"/><text x="33.4150%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (136,011 samples, 0.12%)</title><rect x="33.1838%" y="69" width="0.1159%" height="15" fill="rgb(234,67,33)"/><text x="33.4338%" y="79.50"></text></g><g><title>item_types_checking (1,345,944 samples, 1.15%)</title><rect x="32.2986%" y="165" width="1.1472%" height="15" fill="rgb(247,98,35)"/><text x="32.5486%" y="175.50"></text></g><g><title>check_mod_item_types (1,341,064 samples, 1.14%)</title><rect x="32.3028%" y="149" width="1.1430%" height="15" fill="rgb(247,138,52)"/><text x="32.5528%" y="159.50"></text></g><g><title>fn_sig (142,480 samples, 0.12%)</title><rect x="33.5737%" y="133" width="0.1214%" height="15" fill="rgb(213,79,30)"/><text x="33.8237%" y="143.50"></text></g><g><title>generics_of (157,322 samples, 0.13%)</title><rect x="33.6951%" y="133" width="0.1341%" height="15" fill="rgb(246,177,23)"/><text x="33.9451%" y="143.50"></text></g><g><title>late_bound_vars_map (181,291 samples, 0.15%)</title><rect x="34.0640%" y="85" width="0.1545%" height="15" fill="rgb(230,62,27)"/><text x="34.3140%" y="95.50"></text></g><g><title>resolve_lifetimes (175,871 samples, 0.15%)</title><rect x="34.0687%" y="69" width="0.1499%" height="15" fill="rgb(216,154,8)"/><text x="34.3187%" y="79.50"></text></g><g><title>type_of (149,152 samples, 0.13%)</title><rect x="34.2271%" y="85" width="0.1271%" height="15" fill="rgb(244,35,45)"/><text x="34.4771%" y="95.50"></text></g><g><title>explicit_predicates_of (550,128 samples, 0.47%)</title><rect x="33.9274%" y="101" width="0.4689%" height="15" fill="rgb(251,115,12)"/><text x="34.1774%" y="111.50"></text></g><g><title>predicates_of (868,371 samples, 0.74%)</title><rect x="33.8616%" y="133" width="0.7401%" height="15" fill="rgb(240,54,50)"/><text x="34.1116%" y="143.50"></text></g><g><title>predicates_defined_on (838,251 samples, 0.71%)</title><rect x="33.8873%" y="117" width="0.7145%" height="15" fill="rgb(233,84,52)"/><text x="34.1373%" y="127.50"></text></g><g><title>inferred_outlives_of (241,093 samples, 0.21%)</title><rect x="34.3963%" y="101" width="0.2055%" height="15" fill="rgb(207,117,47)"/><text x="34.6463%" y="111.50"></text></g><g><title>inferred_outlives_crate (227,243 samples, 0.19%)</title><rect x="34.4081%" y="85" width="0.1937%" height="15" fill="rgb(249,43,39)"/><text x="34.6581%" y="95.50"></text></g><g><title>type_of (121,352 samples, 0.10%)</title><rect x="34.4984%" y="69" width="0.1034%" height="15" fill="rgb(209,38,44)"/><text x="34.7484%" y="79.50"></text></g><g><title>type_collecting (1,446,626 samples, 1.23%)</title><rect x="33.4477%" y="165" width="1.2330%" height="15" fill="rgb(236,212,23)"/><text x="33.6977%" y="175.50"></text></g><g><title>collect_mod_item_types (1,439,236 samples, 1.23%)</title><rect x="33.4540%" y="149" width="1.2267%" height="15" fill="rgb(242,79,21)"/><text x="33.7040%" y="159.50"></text></g><g><title>evaluate_obligation (512,868 samples, 0.44%)</title><rect x="35.7326%" y="133" width="0.4371%" height="15" fill="rgb(211,96,35)"/><text x="35.9826%" y="143.50"></text></g><g><title>implied_outlives_bounds (177,462 samples, 0.15%)</title><rect x="36.1971%" y="133" width="0.1513%" height="15" fill="rgb(253,215,40)"/><text x="36.4471%" y="143.50"></text></g><g><title>param_env (144,833 samples, 0.12%)</title><rect x="36.3577%" y="133" width="0.1234%" height="15" fill="rgb(211,81,21)"/><text x="36.6077%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,154,881 samples, 1.84%)</title><rect x="34.7627%" y="149" width="1.8367%" height="15" fill="rgb(208,190,38)"/><text x="35.0127%" y="159.50">c..</text></g><g><title>evaluate_obligation (144,952 samples, 0.12%)</title><rect x="37.5729%" y="133" width="0.1235%" height="15" fill="rgb(235,213,38)"/><text x="37.8229%" y="143.50"></text></g><g><title>evaluate_obligation (127,191 samples, 0.11%)</title><rect x="37.9569%" y="117" width="0.1084%" height="15" fill="rgb(237,122,38)"/><text x="38.2069%" y="127.50"></text></g><g><title>object_safety_violations (450,085 samples, 0.38%)</title><rect x="37.8388%" y="133" width="0.3836%" height="15" fill="rgb(244,218,35)"/><text x="38.0888%" y="143.50"></text></g><g><title>param_env (201,813 samples, 0.17%)</title><rect x="38.2228%" y="133" width="0.1720%" height="15" fill="rgb(240,68,47)"/><text x="38.4728%" y="143.50"></text></g><g><title>predicates_of (119,411 samples, 0.10%)</title><rect x="38.3949%" y="133" width="0.1018%" height="15" fill="rgb(210,16,53)"/><text x="38.6449%" y="143.50"></text></g><g><title>analysis (37,088,557 samples, 31.61%)</title><rect x="7.0236%" y="197" width="31.6122%" height="15" fill="rgb(235,124,12)"/><text x="7.2736%" y="207.50">analysis</text></g><g><title>type_check_crate (25,051,178 samples, 21.35%)</title><rect x="17.2836%" y="181" width="21.3522%" height="15" fill="rgb(224,169,11)"/><text x="17.5336%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,638,740 samples, 3.95%)</title><rect x="34.6820%" y="165" width="3.9538%" height="15" fill="rgb(250,166,2)"/><text x="34.9320%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (2,389,128 samples, 2.04%)</title><rect x="36.5994%" y="149" width="2.0364%" height="15" fill="rgb(242,216,29)"/><text x="36.8494%" y="159.50">c..</text></g><g><title>fn_abi_of_instance (276,823 samples, 0.24%)</title><rect x="40.8812%" y="165" width="0.2359%" height="15" fill="rgb(230,116,27)"/><text x="41.1312%" y="175.50"></text></g><g><title>codegen_module (2,353,605 samples, 2.01%)</title><rect x="39.2416%" y="181" width="2.0061%" height="15" fill="rgb(228,99,48)"/><text x="39.4916%" y="191.50">c..</text></g><g><title>codegen_crate (3,133,903 samples, 2.67%)</title><rect x="38.6428%" y="197" width="2.6712%" height="15" fill="rgb(253,11,6)"/><text x="38.8928%" y="207.50">co..</text></g><g><title>LLVM_module_codegen (19,656,200 samples, 16.75%)</title><rect x="41.3438%" y="181" width="16.7538%" height="15" fill="rgb(247,143,39)"/><text x="41.5938%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (19,174,885 samples, 16.34%)</title><rect x="41.7541%" y="165" width="16.3436%" height="15" fill="rgb(236,97,10)"/><text x="42.0041%" y="175.50">LLVM_module_codegen_emit_..</text></g><g><title>codegen_module_optimize (20,390,078 samples, 17.38%)</title><rect x="41.3139%" y="197" width="17.3793%" height="15" fill="rgb(233,208,19)"/><text x="41.5639%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (698,778 samples, 0.60%)</title><rect x="58.0976%" y="181" width="0.5956%" height="15" fill="rgb(216,164,2)"/><text x="58.3476%" y="191.50"></text></g><g><title>metadata_load_macro (418,394 samples, 0.36%)</title><rect x="77.1848%" y="149" width="0.3566%" height="15" fill="rgb(220,129,5)"/><text x="77.4348%" y="159.50"></text></g><g><title>metadata_register_crate (10,063,467 samples, 8.58%)</title><rect x="77.5415%" y="149" width="8.5775%" height="15" fill="rgb(242,17,10)"/><text x="77.7915%" y="159.50">metadata_reg..</text></g><g><title>metadata_register_crate (7,332,018 samples, 6.25%)</title><rect x="79.8696%" y="133" width="6.2494%" height="15" fill="rgb(242,107,0)"/><text x="80.1196%" y="143.50">metadata..</text></g><g><title>macro_expand_crate (31,906,931 samples, 27.20%)</title><rect x="58.9813%" y="181" width="27.1956%" height="15" fill="rgb(251,28,31)"/><text x="59.2313%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (31,892,241 samples, 27.18%)</title><rect x="58.9939%" y="165" width="27.1831%" height="15" fill="rgb(233,223,10)"/><text x="59.2439%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (854,509 samples, 0.73%)</title><rect x="86.3447%" y="165" width="0.7283%" height="15" fill="rgb(215,21,27)"/><text x="86.5947%" y="175.50"></text></g><g><title>configure_and_expand (33,347,907 samples, 28.42%)</title><rect x="58.6932%" y="197" width="28.4238%" height="15" fill="rgb(232,23,21)"/><text x="58.9432%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,001,320 samples, 0.85%)</title><rect x="86.2636%" y="181" width="0.8535%" height="15" fill="rgb(244,5,23)"/><text x="86.5136%" y="191.50"></text></g><g><title>early_lint_checks (214,662 samples, 0.18%)</title><rect x="87.1875%" y="197" width="0.1830%" height="15" fill="rgb(226,81,46)"/><text x="87.4375%" y="207.50"></text></g><g><title>free_global_ctxt (4,552,039 samples, 3.88%)</title><rect x="87.3704%" y="197" width="3.8799%" height="15" fill="rgb(247,70,30)"/><text x="87.6204%" y="207.50">free..</text></g><g><title>optimized_mir (346,324 samples, 0.30%)</title><rect x="92.3964%" y="117" width="0.2952%" height="15" fill="rgb(212,68,19)"/><text x="92.6464%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (148,920 samples, 0.13%)</title><rect x="92.5647%" y="101" width="0.1269%" height="15" fill="rgb(240,187,13)"/><text x="92.8147%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (679,177 samples, 0.58%)</title><rect x="92.7118%" y="117" width="0.5789%" height="15" fill="rgb(223,113,26)"/><text x="92.9618%" y="127.50"></text></g><g><title>upstream_monomorphizations (674,417 samples, 0.57%)</title><rect x="92.7158%" y="101" width="0.5748%" height="15" fill="rgb(206,192,2)"/><text x="92.9658%" y="111.50"></text></g><g><title>exported_symbols (515,206 samples, 0.44%)</title><rect x="92.8515%" y="85" width="0.4391%" height="15" fill="rgb(241,108,4)"/><text x="93.1015%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (509,476 samples, 0.43%)</title><rect x="92.8564%" y="69" width="0.4342%" height="15" fill="rgb(247,173,49)"/><text x="93.1064%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (1,360,715 samples, 1.16%)</title><rect x="92.2376%" y="133" width="1.1598%" height="15" fill="rgb(224,114,35)"/><text x="92.4876%" y="143.50"></text></g><g><title>vtable_entries (125,271 samples, 0.11%)</title><rect x="93.2907%" y="117" width="0.1068%" height="15" fill="rgb(245,159,27)"/><text x="93.5407%" y="127.50"></text></g><g><title>monomorphization_collector (1,381,635 samples, 1.18%)</title><rect x="92.2358%" y="149" width="1.1776%" height="15" fill="rgb(245,172,44)"/><text x="92.4858%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,522,216 samples, 1.30%)</title><rect x="92.2142%" y="165" width="1.2974%" height="15" fill="rgb(236,23,11)"/><text x="92.4642%" y="175.50"></text></g><g><title>exported_symbols (1,601,527 samples, 1.37%)</title><rect x="92.2026%" y="181" width="1.3650%" height="15" fill="rgb(205,117,38)"/><text x="92.4526%" y="191.50"></text></g><g><title>layout_of (137,152 samples, 0.12%)</title><rect x="94.3316%" y="149" width="0.1169%" height="15" fill="rgb(237,72,25)"/><text x="94.5816%" y="159.50"></text></g><g><title>layout_of (392,382 samples, 0.33%)</title><rect x="94.1335%" y="165" width="0.3344%" height="15" fill="rgb(244,70,9)"/><text x="94.3835%" y="175.50"></text></g><g><title>is_copy_raw (228,312 samples, 0.19%)</title><rect x="95.1207%" y="133" width="0.1946%" height="15" fill="rgb(217,125,39)"/><text x="95.3707%" y="143.50"></text></g><g><title>evaluate_obligation (186,711 samples, 0.16%)</title><rect x="95.1562%" y="117" width="0.1591%" height="15" fill="rgb(235,36,10)"/><text x="95.4062%" y="127.50"></text></g><g><title>needs_drop_raw (256,972 samples, 0.22%)</title><rect x="95.0983%" y="149" width="0.2190%" height="15" fill="rgb(251,123,47)"/><text x="95.3483%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,041,652 samples, 0.89%)</title><rect x="94.4680%" y="165" width="0.8878%" height="15" fill="rgb(221,13,13)"/><text x="94.7180%" y="175.50"></text></g><g><title>optimized_mir (2,058,113 samples, 1.75%)</title><rect x="93.6083%" y="181" width="1.7542%" height="15" fill="rgb(238,131,9)"/><text x="93.8583%" y="191.50"></text></g><g><title>generate_crate_metadata (4,847,612 samples, 4.13%)</title><rect x="91.2503%" y="197" width="4.1318%" height="15" fill="rgb(211,50,8)"/><text x="91.5003%" y="207.50">gener..</text></g><g><title>hir_lowering (1,200,403 samples, 1.02%)</title><rect x="95.3822%" y="197" width="1.0232%" height="15" fill="rgb(245,182,24)"/><text x="95.6322%" y="207.50"></text></g><g><title>finish_ongoing_codegen (764,578 samples, 0.65%)</title><rect x="96.4155%" y="181" width="0.6517%" height="15" fill="rgb(242,14,37)"/><text x="96.6655%" y="191.50"></text></g><g><title>link_crate (755,558 samples, 0.64%)</title><rect x="97.0672%" y="181" width="0.6440%" height="15" fill="rgb(246,228,12)"/><text x="97.3172%" y="191.50"></text></g><g><title>link_binary (743,148 samples, 0.63%)</title><rect x="97.0777%" y="165" width="0.6334%" height="15" fill="rgb(213,55,15)"/><text x="97.3277%" y="175.50"></text></g><g><title>link_rlib (459,485 samples, 0.39%)</title><rect x="97.3195%" y="149" width="0.3916%" height="15" fill="rgb(209,9,3)"/><text x="97.5695%" y="159.50"></text></g><g><title>link (1,539,196 samples, 1.31%)</title><rect x="96.4053%" y="197" width="1.3119%" height="15" fill="rgb(230,59,30)"/><text x="96.6553%" y="207.50"></text></g><g><title>parse_crate (764,528 samples, 0.65%)</title><rect x="97.7172%" y="197" width="0.6516%" height="15" fill="rgb(209,121,21)"/><text x="97.9672%" y="207.50"></text></g><g><title>prepare_outputs (218,832 samples, 0.19%)</title><rect x="98.3748%" y="197" width="0.1865%" height="15" fill="rgb(220,109,13)"/><text x="98.6248%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,308,624 samples, 1.12%)</title><rect x="98.5613%" y="197" width="1.1154%" height="15" fill="rgb(232,18,1)"/><text x="98.8113%" y="207.50"></text></g><g><title>all (117,323,725 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (117,323,725 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (321,304 samples, 0.27%)</title><rect x="99.7261%" y="197" width="0.2739%" height="15" fill="rgb(240,125,3)"/><text x="99.9761%" y="207.50"></text></g></svg></svg>