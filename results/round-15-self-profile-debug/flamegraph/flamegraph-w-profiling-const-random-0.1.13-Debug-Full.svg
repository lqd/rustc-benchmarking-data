<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,623,466 samples, 8.34%)</title><rect x="2.2422%" y="245" width="8.3446%" height="15" fill="rgb(227,0,7)"/><text x="2.4922%" y="255.50">LLVM_passes</text></g><g><title>hir_owner (32,121 samples, 0.10%)</title><rect x="11.2886%" y="213" width="0.1022%" height="15" fill="rgb(217,0,24)"/><text x="11.5386%" y="223.50"></text></g><g><title>hir_module_items (105,821 samples, 0.34%)</title><rect x="11.0552%" y="229" width="0.3366%" height="15" fill="rgb(221,193,54)"/><text x="11.3052%" y="239.50"></text></g><g><title>check_mod_attrs (54,870 samples, 0.17%)</title><rect x="11.4928%" y="213" width="0.1745%" height="15" fill="rgb(248,212,6)"/><text x="11.7428%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (50,271 samples, 0.16%)</title><rect x="11.7618%" y="213" width="0.1599%" height="15" fill="rgb(208,68,35)"/><text x="12.0118%" y="223.50"></text></g><g><title>looking_for_derive_registrar (39,710 samples, 0.13%)</title><rect x="11.9260%" y="213" width="0.1263%" height="15" fill="rgb(232,128,0)"/><text x="12.1760%" y="223.50"></text></g><g><title>misc_checking_1 (211,472 samples, 0.67%)</title><rect x="11.3941%" y="229" width="0.6726%" height="15" fill="rgb(207,160,47)"/><text x="11.6441%" y="239.50"></text></g><g><title>codegen_fn_attrs (58,681 samples, 0.19%)</title><rect x="12.4556%" y="197" width="0.1866%" height="15" fill="rgb(228,23,34)"/><text x="12.7056%" y="207.50"></text></g><g><title>death_checking (132,311 samples, 0.42%)</title><rect x="12.2926%" y="213" width="0.4208%" height="15" fill="rgb(218,30,26)"/><text x="12.5426%" y="223.50"></text></g><g><title>crate_lints (199,912 samples, 0.64%)</title><rect x="12.7218%" y="197" width="0.6359%" height="15" fill="rgb(220,122,19)"/><text x="12.9718%" y="207.50"></text></g><g><title>param_env (102,462 samples, 0.33%)</title><rect x="13.0318%" y="181" width="0.3259%" height="15" fill="rgb(250,228,42)"/><text x="13.2818%" y="191.50"></text></g><g><title>predicates_of (44,001 samples, 0.14%)</title><rect x="13.2177%" y="165" width="0.1400%" height="15" fill="rgb(240,193,28)"/><text x="13.4677%" y="175.50"></text></g><g><title>predicates_defined_on (36,910 samples, 0.12%)</title><rect x="13.2403%" y="149" width="0.1174%" height="15" fill="rgb(216,20,37)"/><text x="13.4903%" y="159.50"></text></g><g><title>lint_checking (243,063 samples, 0.77%)</title><rect x="12.7134%" y="213" width="0.7731%" height="15" fill="rgb(206,188,39)"/><text x="12.9634%" y="223.50"></text></g><g><title>module_lints (40,521 samples, 0.13%)</title><rect x="13.3577%" y="197" width="0.1289%" height="15" fill="rgb(217,207,13)"/><text x="13.6077%" y="207.50"></text></g><g><title>lint_mod (36,531 samples, 0.12%)</title><rect x="13.3703%" y="181" width="0.1162%" height="15" fill="rgb(231,73,38)"/><text x="13.6203%" y="191.50"></text></g><g><title>privacy_access_levels (32,260 samples, 0.10%)</title><rect x="13.4865%" y="213" width="0.1026%" height="15" fill="rgb(225,20,46)"/><text x="13.7365%" y="223.50"></text></g><g><title>misc_checking_3 (486,015 samples, 1.55%)</title><rect x="12.1638%" y="229" width="1.5459%" height="15" fill="rgb(210,31,41)"/><text x="12.4138%" y="239.50"></text></g><g><title>coherence_checking (32,790 samples, 0.10%)</title><rect x="13.8132%" y="213" width="0.1043%" height="15" fill="rgb(221,200,47)"/><text x="14.0632%" y="223.50"></text></g><g><title>impl_trait_ref (57,241 samples, 0.18%)</title><rect x="14.2199%" y="133" width="0.1821%" height="15" fill="rgb(226,26,5)"/><text x="14.4699%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (52,841 samples, 0.17%)</title><rect x="14.2339%" y="117" width="0.1681%" height="15" fill="rgb(249,33,26)"/><text x="14.4839%" y="127.50"></text></g><g><title>item_types_checking (160,042 samples, 0.51%)</title><rect x="13.9467%" y="213" width="0.5091%" height="15" fill="rgb(235,183,28)"/><text x="14.1967%" y="223.50"></text></g><g><title>check_mod_item_types (157,372 samples, 0.50%)</title><rect x="13.9552%" y="197" width="0.5006%" height="15" fill="rgb(221,5,38)"/><text x="14.2052%" y="207.50"></text></g><g><title>adt_destructor (137,632 samples, 0.44%)</title><rect x="14.0180%" y="181" width="0.4378%" height="15" fill="rgb(247,18,42)"/><text x="14.2680%" y="191.50"></text></g><g><title>coherent_trait (125,441 samples, 0.40%)</title><rect x="14.0567%" y="165" width="0.3990%" height="15" fill="rgb(241,131,45)"/><text x="14.3067%" y="175.50"></text></g><g><title>specialization_graph_of (119,191 samples, 0.38%)</title><rect x="14.0766%" y="149" width="0.3791%" height="15" fill="rgb(249,31,29)"/><text x="14.3266%" y="159.50"></text></g><g><title>is_mir_available (79,231 samples, 0.25%)</title><rect x="15.4431%" y="133" width="0.2520%" height="15" fill="rgb(225,111,53)"/><text x="15.6931%" y="143.50"></text></g><g><title>mir_keys (74,091 samples, 0.24%)</title><rect x="15.4594%" y="117" width="0.2357%" height="15" fill="rgb(238,160,17)"/><text x="15.7094%" y="127.50"></text></g><g><title>layout_of (55,871 samples, 0.18%)</title><rect x="15.6951%" y="133" width="0.1777%" height="15" fill="rgb(214,148,48)"/><text x="15.9451%" y="143.50"></text></g><g><title>layout_of (39,881 samples, 0.13%)</title><rect x="15.7459%" y="117" width="0.1269%" height="15" fill="rgb(232,36,49)"/><text x="15.9959%" y="127.50"></text></g><g><title>predicates_of (32,361 samples, 0.10%)</title><rect x="17.0497%" y="37" width="0.1029%" height="15" fill="rgb(209,103,24)"/><text x="17.2997%" y="47.50"></text></g><g><title>is_copy_raw (199,772 samples, 0.64%)</title><rect x="16.7275%" y="69" width="0.6354%" height="15" fill="rgb(229,88,8)"/><text x="16.9775%" y="79.50"></text></g><g><title>evaluate_obligation (188,952 samples, 0.60%)</title><rect x="16.7619%" y="53" width="0.6010%" height="15" fill="rgb(213,181,19)"/><text x="17.0119%" y="63.50"></text></g><g><title>trait_impls_of (66,091 samples, 0.21%)</title><rect x="17.1527%" y="37" width="0.2102%" height="15" fill="rgb(254,191,54)"/><text x="17.4027%" y="47.50"></text></g><g><title>thir_body (74,071 samples, 0.24%)</title><rect x="17.3687%" y="69" width="0.2356%" height="15" fill="rgb(241,83,37)"/><text x="17.6187%" y="79.50"></text></g><g><title>lit_to_const (33,380 samples, 0.11%)</title><rect x="17.4981%" y="53" width="0.1062%" height="15" fill="rgb(233,36,39)"/><text x="17.7481%" y="63.50"></text></g><g><title>mir_const_qualif (552,315 samples, 1.76%)</title><rect x="15.8728%" y="133" width="1.7568%" height="15" fill="rgb(226,3,54)"/><text x="16.1228%" y="143.50"></text></g><g><title>mir_const (501,945 samples, 1.60%)</title><rect x="16.0330%" y="117" width="1.5966%" height="15" fill="rgb(245,192,40)"/><text x="16.2830%" y="127.50"></text></g><g><title>unsafety_check_result (428,484 samples, 1.36%)</title><rect x="16.2667%" y="101" width="1.3629%" height="15" fill="rgb(238,167,29)"/><text x="16.5167%" y="111.50"></text></g><g><title>mir_built (401,474 samples, 1.28%)</title><rect x="16.3526%" y="85" width="1.2770%" height="15" fill="rgb(232,182,51)"/><text x="16.6026%" y="95.50"></text></g><g><title>implied_outlives_bounds (46,950 samples, 0.15%)</title><rect x="20.0371%" y="85" width="0.1493%" height="15" fill="rgb(231,60,39)"/><text x="20.2871%" y="95.50"></text></g><g><title>is_late_bound_map (47,391 samples, 0.15%)</title><rect x="20.2219%" y="69" width="0.1507%" height="15" fill="rgb(208,69,12)"/><text x="20.4719%" y="79.50"></text></g><g><title>resolve_lifetimes (41,351 samples, 0.13%)</title><rect x="20.2411%" y="53" width="0.1315%" height="15" fill="rgb(235,93,37)"/><text x="20.4911%" y="63.50"></text></g><g><title>is_late_bound_map (59,181 samples, 0.19%)</title><rect x="20.1864%" y="85" width="0.1882%" height="15" fill="rgb(213,116,39)"/><text x="20.4364%" y="95.50"></text></g><g><title>mir_promoted (31,470 samples, 0.10%)</title><rect x="20.3747%" y="85" width="0.1001%" height="15" fill="rgb(222,207,29)"/><text x="20.6247%" y="95.50"></text></g><g><title>mir_borrowck (697,047 samples, 2.22%)</title><rect x="18.3065%" y="101" width="2.2171%" height="15" fill="rgb(206,96,30)"/><text x="18.5565%" y="111.50">m..</text></g><g><title>mir_for_ctfe (911,359 samples, 2.90%)</title><rect x="17.6296%" y="133" width="2.8988%" height="15" fill="rgb(218,138,4)"/><text x="17.8796%" y="143.50">mi..</text></g><g><title>mir_drops_elaborated_and_const_checked (850,048 samples, 2.70%)</title><rect x="17.8246%" y="117" width="2.7038%" height="15" fill="rgb(250,191,14)"/><text x="18.0746%" y="127.50">mi..</text></g><g><title>evaluate_obligation (102,781 samples, 0.33%)</title><rect x="21.9842%" y="117" width="0.3269%" height="15" fill="rgb(239,60,40)"/><text x="22.2342%" y="127.50"></text></g><g><title>impl_trait_ref (160,031 samples, 0.51%)</title><rect x="22.3111%" y="117" width="0.5090%" height="15" fill="rgb(206,27,48)"/><text x="22.5611%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (150,131 samples, 0.48%)</title><rect x="22.3426%" y="101" width="0.4775%" height="15" fill="rgb(225,35,8)"/><text x="22.5926%" y="111.50"></text></g><g><title>trait_impls_of (32,051 samples, 0.10%)</title><rect x="22.9321%" y="117" width="0.1019%" height="15" fill="rgb(250,213,24)"/><text x="23.1821%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,575,165 samples, 8.19%)</title><rect x="14.8747%" y="181" width="8.1910%" height="15" fill="rgb(247,123,22)"/><text x="15.1247%" y="191.50">eval_to_con..</text></g><g><title>eval_to_const_value_raw (2,552,245 samples, 8.12%)</title><rect x="14.9476%" y="165" width="8.1180%" height="15" fill="rgb(231,138,38)"/><text x="15.1976%" y="175.50">eval_to_con..</text></g><g><title>eval_to_allocation_raw (2,544,995 samples, 8.09%)</title><rect x="14.9707%" y="149" width="8.0950%" height="15" fill="rgb(231,145,46)"/><text x="15.2207%" y="159.50">eval_to_all..</text></g><g><title>typeck (796,708 samples, 2.53%)</title><rect x="20.5315%" y="133" width="2.5341%" height="15" fill="rgb(251,118,11)"/><text x="20.7815%" y="143.50">ty..</text></g><g><title>param_env (232,222 samples, 0.74%)</title><rect x="23.1509%" y="181" width="0.7386%" height="15" fill="rgb(217,147,25)"/><text x="23.4009%" y="191.50"></text></g><g><title>predicates_of (91,862 samples, 0.29%)</title><rect x="23.8896%" y="181" width="0.2922%" height="15" fill="rgb(247,81,37)"/><text x="24.1396%" y="191.50"></text></g><g><title>predicates_defined_on (86,112 samples, 0.27%)</title><rect x="23.9079%" y="165" width="0.2739%" height="15" fill="rgb(209,12,38)"/><text x="24.1579%" y="175.50"></text></g><g><title>inferred_outlives_of (36,071 samples, 0.11%)</title><rect x="24.0670%" y="149" width="0.1147%" height="15" fill="rgb(227,1,9)"/><text x="24.3170%" y="159.50"></text></g><g><title>type_collecting (3,154,682 samples, 10.03%)</title><rect x="14.4607%" y="213" width="10.0342%" height="15" fill="rgb(248,47,43)"/><text x="14.7107%" y="223.50">type_collecting</text></g><g><title>collect_mod_item_types (3,131,592 samples, 9.96%)</title><rect x="14.5341%" y="197" width="9.9608%" height="15" fill="rgb(221,10,30)"/><text x="14.7841%" y="207.50">collect_mod_it..</text></g><g><title>type_of (98,451 samples, 0.31%)</title><rect x="24.1818%" y="181" width="0.3131%" height="15" fill="rgb(210,229,1)"/><text x="24.4318%" y="191.50"></text></g><g><title>adt_def (78,011 samples, 0.25%)</title><rect x="24.2468%" y="165" width="0.2481%" height="15" fill="rgb(222,148,37)"/><text x="24.4968%" y="175.50"></text></g><g><title>get_lang_items (35,311 samples, 0.11%)</title><rect x="24.3826%" y="149" width="0.1123%" height="15" fill="rgb(234,67,33)"/><text x="24.6326%" y="159.50"></text></g><g><title>analysis (4,502,635 samples, 14.32%)</title><rect x="10.5868%" y="245" width="14.3217%" height="15" fill="rgb(247,98,35)"/><text x="10.8368%" y="255.50">analysis</text></g><g><title>type_check_crate (3,520,805 samples, 11.20%)</title><rect x="13.7097%" y="229" width="11.1988%" height="15" fill="rgb(247,138,52)"/><text x="13.9597%" y="239.50">type_check_crate</text></g><g><title>wf_checking (129,451 samples, 0.41%)</title><rect x="24.4967%" y="213" width="0.4118%" height="15" fill="rgb(213,79,30)"/><text x="24.7467%" y="223.50"></text></g><g><title>check_item_well_formed (118,041 samples, 0.38%)</title><rect x="24.5330%" y="197" width="0.3755%" height="15" fill="rgb(246,177,23)"/><text x="24.7830%" y="207.50"></text></g><g><title>codegen_module (516,645 samples, 1.64%)</title><rect x="26.9407%" y="229" width="1.6433%" height="15" fill="rgb(230,62,27)"/><text x="27.1907%" y="239.50"></text></g><g><title>codegen_crate (1,183,212 samples, 3.76%)</title><rect x="24.9396%" y="245" width="3.7635%" height="15" fill="rgb(216,154,8)"/><text x="25.1896%" y="255.50">code..</text></g><g><title>LLVM_module_codegen (1,983,619 samples, 6.31%)</title><rect x="28.8394%" y="229" width="6.3094%" height="15" fill="rgb(244,35,45)"/><text x="29.0894%" y="239.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (1,917,229 samples, 6.10%)</title><rect x="29.0506%" y="213" width="6.0982%" height="15" fill="rgb(251,115,12)"/><text x="29.3006%" y="223.50">LLVM_mod..</text></g><g><title>codegen_module_optimize (2,316,544 samples, 7.37%)</title><rect x="28.7031%" y="245" width="7.3683%" height="15" fill="rgb(240,54,50)"/><text x="28.9531%" y="255.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (290,063 samples, 0.92%)</title><rect x="35.1488%" y="229" width="0.9226%" height="15" fill="rgb(233,84,52)"/><text x="35.3988%" y="239.50"></text></g><g><title>AST_validation (64,210 samples, 0.20%)</title><rect x="36.7489%" y="229" width="0.2042%" height="15" fill="rgb(207,117,47)"/><text x="36.9989%" y="239.50"></text></g><g><title>crate_injection (106,942 samples, 0.34%)</title><rect x="37.0495%" y="229" width="0.3402%" height="15" fill="rgb(249,43,39)"/><text x="37.2995%" y="239.50"></text></g><g><title>metadata_load_macro (92,500 samples, 0.29%)</title><rect x="72.3338%" y="197" width="0.2942%" height="15" fill="rgb(209,38,44)"/><text x="72.5838%" y="207.50"></text></g><g><title>macro_expand_crate (12,889,820 samples, 41.00%)</title><rect x="37.3897%" y="229" width="40.9993%" height="15" fill="rgb(236,212,23)"/><text x="37.6397%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,864,669 samples, 40.92%)</title><rect x="37.4697%" y="213" width="40.9193%" height="15" fill="rgb(242,79,21)"/><text x="37.7197%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (1,811,178 samples, 5.76%)</title><rect x="72.6280%" y="197" width="5.7609%" height="15" fill="rgb(211,96,35)"/><text x="72.8780%" y="207.50">metadat..</text></g><g><title>pre_AST_expansion_lint_checks (49,330 samples, 0.16%)</title><rect x="78.4044%" y="229" width="0.1569%" height="15" fill="rgb(253,215,40)"/><text x="78.6544%" y="239.50"></text></g><g><title>finalize_imports (41,081 samples, 0.13%)</title><rect x="78.5850%" y="213" width="0.1307%" height="15" fill="rgb(211,81,21)"/><text x="78.8350%" y="223.50"></text></g><g><title>late_resolve_crate (282,933 samples, 0.90%)</title><rect x="78.8102%" y="213" width="0.8999%" height="15" fill="rgb(208,190,38)"/><text x="79.0602%" y="223.50"></text></g><g><title>configure_and_expand (13,758,249 samples, 43.76%)</title><rect x="36.0714%" y="245" width="43.7615%" height="15" fill="rgb(235,213,38)"/><text x="36.3214%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (399,804 samples, 1.27%)</title><rect x="78.5613%" y="229" width="1.2717%" height="15" fill="rgb(237,122,38)"/><text x="78.8113%" y="239.50"></text></g><g><title>drop_ast (43,470 samples, 0.14%)</title><rect x="79.8329%" y="245" width="0.1383%" height="15" fill="rgb(244,218,35)"/><text x="80.0829%" y="255.50"></text></g><g><title>early_lint_checks (91,511 samples, 0.29%)</title><rect x="80.0647%" y="245" width="0.2911%" height="15" fill="rgb(240,68,47)"/><text x="80.3147%" y="255.50"></text></g><g><title>free_global_ctxt (1,251,503 samples, 3.98%)</title><rect x="80.3557%" y="245" width="3.9807%" height="15" fill="rgb(210,16,53)"/><text x="80.6057%" y="255.50">free..</text></g><g><title>crate_hash (133,211 samples, 0.42%)</title><rect x="85.6214%" y="229" width="0.4237%" height="15" fill="rgb(235,124,12)"/><text x="85.8714%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (75,931 samples, 0.24%)</title><rect x="86.1966%" y="213" width="0.2415%" height="15" fill="rgb(224,169,11)"/><text x="86.4466%" y="223.50"></text></g><g><title>partition_and_assert_distinct_symbols (41,780 samples, 0.13%)</title><rect x="86.3052%" y="197" width="0.1329%" height="15" fill="rgb(250,166,2)"/><text x="86.5552%" y="207.50"></text></g><g><title>cgu_partitioning (36,400 samples, 0.12%)</title><rect x="86.3223%" y="181" width="0.1158%" height="15" fill="rgb(242,216,29)"/><text x="86.5723%" y="191.50"></text></g><g><title>exported_symbols (117,761 samples, 0.37%)</title><rect x="86.1304%" y="229" width="0.3746%" height="15" fill="rgb(230,116,27)"/><text x="86.3804%" y="239.50"></text></g><g><title>generate_crate_metadata (719,957 samples, 2.29%)</title><rect x="84.3364%" y="245" width="2.2900%" height="15" fill="rgb(228,99,48)"/><text x="84.5864%" y="255.50">g..</text></g><g><title>hir_lowering (332,023 samples, 1.06%)</title><rect x="86.6264%" y="245" width="1.0561%" height="15" fill="rgb(253,11,6)"/><text x="86.8764%" y="255.50"></text></g><g><title>finish_ongoing_codegen (837,098 samples, 2.66%)</title><rect x="87.7405%" y="229" width="2.6626%" height="15" fill="rgb(247,143,39)"/><text x="87.9905%" y="239.50">fi..</text></g><g><title>link_binary_remove_temps (40,640 samples, 0.13%)</title><rect x="91.4961%" y="197" width="0.1293%" height="15" fill="rgb(236,97,10)"/><text x="91.7461%" y="207.50"></text></g><g><title>link_crate (1,076,641 samples, 3.42%)</title><rect x="90.4031%" y="229" width="3.4245%" height="15" fill="rgb(233,208,19)"/><text x="90.6531%" y="239.50">lin..</text></g><g><title>link_binary (1,068,361 samples, 3.40%)</title><rect x="90.4294%" y="213" width="3.3982%" height="15" fill="rgb(216,164,2)"/><text x="90.6794%" y="223.50">lin..</text></g><g><title>link_rlib (692,377 samples, 2.20%)</title><rect x="91.6253%" y="197" width="2.2023%" height="15" fill="rgb(220,129,5)"/><text x="91.8753%" y="207.50">l..</text></g><g><title>link (1,944,729 samples, 6.19%)</title><rect x="87.6825%" y="245" width="6.1857%" height="15" fill="rgb(242,17,10)"/><text x="87.9325%" y="255.50">link</text></g><g><title>parse_crate (337,464 samples, 1.07%)</title><rect x="93.8682%" y="245" width="1.0734%" height="15" fill="rgb(242,107,0)"/><text x="94.1182%" y="255.50"></text></g><g><title>prepare_outputs (356,183 samples, 1.13%)</title><rect x="94.9720%" y="245" width="1.1329%" height="15" fill="rgb(251,28,31)"/><text x="95.2220%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (566,396 samples, 1.80%)</title><rect x="96.1049%" y="245" width="1.8016%" height="15" fill="rgb(233,223,10)"/><text x="96.3549%" y="255.50">s..</text></g><g><title>setup_global_ctxt (147,861 samples, 0.47%)</title><rect x="97.9109%" y="245" width="0.4703%" height="15" fill="rgb(215,21,27)"/><text x="98.1609%" y="255.50"></text></g><g><title>all (31,439,146 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (31,439,146 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (508,945 samples, 1.62%)</title><rect x="98.3812%" y="245" width="1.6188%" height="15" fill="rgb(226,81,46)"/><text x="98.6312%" y="255.50"></text></g></svg></svg>