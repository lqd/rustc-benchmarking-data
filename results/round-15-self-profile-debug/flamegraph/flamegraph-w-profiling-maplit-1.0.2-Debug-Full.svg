<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,411,814 samples, 9.70%)</title><rect x="2.0128%" y="229" width="9.7009%" height="15" fill="rgb(227,0,7)"/><text x="2.2628%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (341,623 samples, 0.97%)</title><rect x="14.4489%" y="117" width="0.9713%" height="15" fill="rgb(217,0,24)"/><text x="14.6989%" y="127.50"></text></g><g><title>is_copy_raw (327,013 samples, 0.93%)</title><rect x="14.4904%" y="101" width="0.9298%" height="15" fill="rgb(221,193,54)"/><text x="14.7404%" y="111.50"></text></g><g><title>evaluate_obligation (304,423 samples, 0.87%)</title><rect x="14.5547%" y="85" width="0.8656%" height="15" fill="rgb(248,212,6)"/><text x="14.8047%" y="95.50"></text></g><g><title>trait_impls_of (270,243 samples, 0.77%)</title><rect x="14.6519%" y="69" width="0.7684%" height="15" fill="rgb(208,68,35)"/><text x="14.9019%" y="79.50"></text></g><g><title>implementations_of_trait (55,701 samples, 0.16%)</title><rect x="15.2619%" y="53" width="0.1584%" height="15" fill="rgb(232,128,0)"/><text x="15.5119%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (46,500 samples, 0.13%)</title><rect x="15.2880%" y="37" width="0.1322%" height="15" fill="rgb(207,160,47)"/><text x="15.5380%" y="47.50"></text></g><g><title>mir_const (580,396 samples, 1.65%)</title><rect x="13.8291%" y="165" width="1.6503%" height="15" fill="rgb(228,23,34)"/><text x="14.0791%" y="175.50"></text></g><g><title>unsafety_check_result (504,615 samples, 1.43%)</title><rect x="14.0446%" y="149" width="1.4348%" height="15" fill="rgb(218,30,26)"/><text x="14.2946%" y="159.50"></text></g><g><title>mir_built (448,935 samples, 1.28%)</title><rect x="14.2029%" y="133" width="1.2765%" height="15" fill="rgb(220,122,19)"/><text x="14.4529%" y="143.50"></text></g><g><title>mir_promoted (680,717 samples, 1.94%)</title><rect x="13.5674%" y="181" width="1.9355%" height="15" fill="rgb(250,228,42)"/><text x="13.8174%" y="191.50">m..</text></g><g><title>MIR_borrow_checking (1,217,922 samples, 3.46%)</title><rect x="12.1030%" y="213" width="3.4630%" height="15" fill="rgb(240,193,28)"/><text x="12.3530%" y="223.50">MIR..</text></g><g><title>mir_borrowck (1,213,672 samples, 3.45%)</title><rect x="12.1151%" y="197" width="3.4509%" height="15" fill="rgb(216,20,37)"/><text x="12.3651%" y="207.50">mir..</text></g><g><title>hir_module_items (100,821 samples, 0.29%)</title><rect x="15.5791%" y="213" width="0.2867%" height="15" fill="rgb(206,188,39)"/><text x="15.8291%" y="223.50"></text></g><g><title>get_lang_items (63,201 samples, 0.18%)</title><rect x="16.3500%" y="165" width="0.1797%" height="15" fill="rgb(217,207,13)"/><text x="16.6000%" y="175.50"></text></g><g><title>codegen_fn_attrs (165,452 samples, 0.47%)</title><rect x="16.1852%" y="181" width="0.4704%" height="15" fill="rgb(231,73,38)"/><text x="16.4352%" y="191.50"></text></g><g><title>supported_target_features (36,621 samples, 0.10%)</title><rect x="16.5515%" y="165" width="0.1041%" height="15" fill="rgb(225,20,46)"/><text x="16.8015%" y="175.50"></text></g><g><title>check_mod_attrs (250,543 samples, 0.71%)</title><rect x="15.9439%" y="197" width="0.7124%" height="15" fill="rgb(210,31,41)"/><text x="16.1939%" y="207.50"></text></g><g><title>lookup_deprecation_entry (38,330 samples, 0.11%)</title><rect x="16.8938%" y="181" width="0.1090%" height="15" fill="rgb(221,200,47)"/><text x="17.1438%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (93,201 samples, 0.27%)</title><rect x="16.7854%" y="197" width="0.2650%" height="15" fill="rgb(226,26,5)"/><text x="17.0354%" y="207.50"></text></g><g><title>looking_for_derive_registrar (40,830 samples, 0.12%)</title><rect x="17.0566%" y="197" width="0.1161%" height="15" fill="rgb(249,33,26)"/><text x="17.3066%" y="207.50"></text></g><g><title>misc_checking_1 (463,265 samples, 1.32%)</title><rect x="15.8679%" y="213" width="1.3172%" height="15" fill="rgb(235,183,28)"/><text x="16.1179%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (36,811 samples, 0.10%)</title><rect x="17.1915%" y="197" width="0.1047%" height="15" fill="rgb(221,5,38)"/><text x="17.4415%" y="207.50"></text></g><g><title>misc_checking_2 (133,832 samples, 0.38%)</title><rect x="17.1851%" y="213" width="0.3805%" height="15" fill="rgb(247,18,42)"/><text x="17.4351%" y="223.50"></text></g><g><title>match_checking (94,771 samples, 0.27%)</title><rect x="17.2962%" y="197" width="0.2695%" height="15" fill="rgb(241,131,45)"/><text x="17.5462%" y="207.50"></text></g><g><title>check_match (84,381 samples, 0.24%)</title><rect x="17.3257%" y="181" width="0.2399%" height="15" fill="rgb(249,31,29)"/><text x="17.5757%" y="191.50"></text></g><g><title>death_checking (109,751 samples, 0.31%)</title><rect x="17.6757%" y="197" width="0.3121%" height="15" fill="rgb(225,111,53)"/><text x="17.9257%" y="207.50"></text></g><g><title>crate_lints (212,232 samples, 0.60%)</title><rect x="17.9947%" y="181" width="0.6034%" height="15" fill="rgb(238,160,17)"/><text x="18.2447%" y="191.50"></text></g><g><title>param_env (101,311 samples, 0.29%)</title><rect x="18.3101%" y="165" width="0.2881%" height="15" fill="rgb(214,148,48)"/><text x="18.5601%" y="175.50"></text></g><g><title>predicates_of (43,830 samples, 0.12%)</title><rect x="18.4735%" y="149" width="0.1246%" height="15" fill="rgb(232,36,49)"/><text x="18.7235%" y="159.50"></text></g><g><title>predicates_defined_on (36,970 samples, 0.11%)</title><rect x="18.4930%" y="133" width="0.1051%" height="15" fill="rgb(209,103,24)"/><text x="18.7430%" y="143.50"></text></g><g><title>lint_checking (245,023 samples, 0.70%)</title><rect x="17.9877%" y="197" width="0.6967%" height="15" fill="rgb(229,88,8)"/><text x="18.2377%" y="207.50"></text></g><g><title>privacy_access_levels (42,300 samples, 0.12%)</title><rect x="18.6844%" y="197" width="0.1203%" height="15" fill="rgb(213,181,19)"/><text x="18.9344%" y="207.50"></text></g><g><title>misc_checking_3 (473,085 samples, 1.35%)</title><rect x="17.5656%" y="213" width="1.3451%" height="15" fill="rgb(254,191,54)"/><text x="17.8156%" y="223.50"></text></g><g><title>trait_impls_of (57,430 samples, 0.16%)</title><rect x="19.8657%" y="149" width="0.1633%" height="15" fill="rgb(241,83,37)"/><text x="20.1157%" y="159.50"></text></g><g><title>item_bodies_checking (333,283 samples, 0.95%)</title><rect x="19.0837%" y="197" width="0.9476%" height="15" fill="rgb(233,36,39)"/><text x="19.3337%" y="207.50"></text></g><g><title>typeck_item_bodies (330,553 samples, 0.94%)</title><rect x="19.0915%" y="181" width="0.9399%" height="15" fill="rgb(226,3,54)"/><text x="19.3415%" y="191.50"></text></g><g><title>typeck (325,903 samples, 0.93%)</title><rect x="19.1047%" y="165" width="0.9267%" height="15" fill="rgb(245,192,40)"/><text x="19.3547%" y="175.50"></text></g><g><title>fn_sig (90,360 samples, 0.26%)</title><rect x="20.2580%" y="165" width="0.2569%" height="15" fill="rgb(238,167,29)"/><text x="20.5080%" y="175.50"></text></g><g><title>late_bound_vars_map (57,730 samples, 0.16%)</title><rect x="20.3508%" y="149" width="0.1641%" height="15" fill="rgb(232,182,51)"/><text x="20.6008%" y="159.50"></text></g><g><title>resolve_lifetimes (45,690 samples, 0.13%)</title><rect x="20.3850%" y="133" width="0.1299%" height="15" fill="rgb(231,60,39)"/><text x="20.6350%" y="143.50"></text></g><g><title>generics_of (60,700 samples, 0.17%)</title><rect x="20.5149%" y="165" width="0.1726%" height="15" fill="rgb(208,69,12)"/><text x="20.7649%" y="175.50"></text></g><g><title>explicit_predicates_of (61,860 samples, 0.18%)</title><rect x="20.7185%" y="133" width="0.1759%" height="15" fill="rgb(235,93,37)"/><text x="20.9685%" y="143.50"></text></g><g><title>predicates_of (73,651 samples, 0.21%)</title><rect x="20.6875%" y="165" width="0.2094%" height="15" fill="rgb(213,116,39)"/><text x="20.9375%" y="175.50"></text></g><g><title>predicates_defined_on (70,710 samples, 0.20%)</title><rect x="20.6959%" y="149" width="0.2011%" height="15" fill="rgb(222,207,29)"/><text x="20.9459%" y="159.50"></text></g><g><title>type_collecting (319,254 samples, 0.91%)</title><rect x="20.0479%" y="197" width="0.9077%" height="15" fill="rgb(206,96,30)"/><text x="20.2979%" y="207.50"></text></g><g><title>collect_mod_item_types (302,274 samples, 0.86%)</title><rect x="20.0962%" y="181" width="0.8595%" height="15" fill="rgb(218,138,4)"/><text x="20.3462%" y="191.50"></text></g><g><title>implied_outlives_bounds (77,740 samples, 0.22%)</title><rect x="21.9787%" y="165" width="0.2210%" height="15" fill="rgb(250,191,14)"/><text x="22.2287%" y="175.50"></text></g><g><title>param_env (283,383 samples, 0.81%)</title><rect x="22.1997%" y="165" width="0.8058%" height="15" fill="rgb(239,60,40)"/><text x="22.4497%" y="175.50"></text></g><g><title>predicates_of (40,640 samples, 0.12%)</title><rect x="23.0055%" y="165" width="0.1156%" height="15" fill="rgb(206,27,48)"/><text x="23.2555%" y="175.50"></text></g><g><title>analysis (4,026,621 samples, 11.45%)</title><rect x="11.7138%" y="229" width="11.4490%" height="15" fill="rgb(225,35,8)"/><text x="11.9638%" y="239.50">analysis</text></g><g><title>type_check_crate (1,495,435 samples, 4.25%)</title><rect x="18.9108%" y="213" width="4.2520%" height="15" fill="rgb(250,213,24)"/><text x="19.1608%" y="223.50">type_..</text></g><g><title>wf_checking (775,348 samples, 2.20%)</title><rect x="20.9582%" y="197" width="2.2046%" height="15" fill="rgb(247,123,22)"/><text x="21.2082%" y="207.50">w..</text></g><g><title>check_item_well_formed (754,958 samples, 2.15%)</title><rect x="21.0162%" y="181" width="2.1466%" height="15" fill="rgb(231,138,38)"/><text x="21.2662%" y="191.50">c..</text></g><g><title>codegen_module (499,395 samples, 1.42%)</title><rect x="25.1755%" y="213" width="1.4199%" height="15" fill="rgb(231,145,46)"/><text x="25.4255%" y="223.50"></text></g><g><title>native_libraries (46,901 samples, 0.13%)</title><rect x="26.7545%" y="213" width="0.1334%" height="15" fill="rgb(251,118,11)"/><text x="27.0045%" y="223.50"></text></g><g><title>metadata_decode_entry_native_libraries (35,831 samples, 0.10%)</title><rect x="26.7860%" y="197" width="0.1019%" height="15" fill="rgb(217,147,25)"/><text x="27.0360%" y="207.50"></text></g><g><title>codegen_crate (1,336,644 samples, 3.80%)</title><rect x="23.1927%" y="229" width="3.8005%" height="15" fill="rgb(247,81,37)"/><text x="23.4427%" y="239.50">code..</text></g><g><title>LLVM_module_codegen (2,733,418 samples, 7.77%)</title><rect x="27.0377%" y="213" width="7.7720%" height="15" fill="rgb(209,12,38)"/><text x="27.2877%" y="223.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (2,674,237 samples, 7.60%)</title><rect x="27.2060%" y="197" width="7.6038%" height="15" fill="rgb(227,1,9)"/><text x="27.4560%" y="207.50">LLVM_modul..</text></g><g><title>codegen_module_optimize (3,008,881 samples, 8.56%)</title><rect x="26.9932%" y="229" width="8.5553%" height="15" fill="rgb(248,47,43)"/><text x="27.2432%" y="239.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (259,823 samples, 0.74%)</title><rect x="34.8097%" y="213" width="0.7388%" height="15" fill="rgb(221,10,30)"/><text x="35.0597%" y="223.50"></text></g><g><title>AST_validation (95,521 samples, 0.27%)</title><rect x="36.1766%" y="213" width="0.2716%" height="15" fill="rgb(210,229,1)"/><text x="36.4266%" y="223.50"></text></g><g><title>crate_injection (105,561 samples, 0.30%)</title><rect x="36.5430%" y="213" width="0.3001%" height="15" fill="rgb(222,148,37)"/><text x="36.7930%" y="223.50"></text></g><g><title>metadata_load_macro (58,900 samples, 0.17%)</title><rect x="63.6938%" y="181" width="0.1675%" height="15" fill="rgb(234,67,33)"/><text x="63.9438%" y="191.50"></text></g><g><title>macro_expand_crate (12,142,614 samples, 34.53%)</title><rect x="36.8432%" y="213" width="34.5256%" height="15" fill="rgb(247,98,35)"/><text x="37.0932%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (12,118,184 samples, 34.46%)</title><rect x="36.9126%" y="197" width="34.4561%" height="15" fill="rgb(247,138,52)"/><text x="37.1626%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,640,367 samples, 7.51%)</title><rect x="63.8613%" y="181" width="7.5075%" height="15" fill="rgb(213,79,30)"/><text x="64.1113%" y="191.50">metadata_r..</text></g><g><title>metadata_register_crate (963,770 samples, 2.74%)</title><rect x="68.6284%" y="165" width="2.7403%" height="15" fill="rgb(246,177,23)"/><text x="68.8784%" y="175.50">me..</text></g><g><title>metadata_register_crate (89,051 samples, 0.25%)</title><rect x="71.1155%" y="149" width="0.2532%" height="15" fill="rgb(230,62,27)"/><text x="71.3655%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (198,012 samples, 0.56%)</title><rect x="71.3826%" y="213" width="0.5630%" height="15" fill="rgb(216,154,8)"/><text x="71.6326%" y="223.50"></text></g><g><title>late_resolve_crate (45,300 samples, 0.13%)</title><rect x="72.0958%" y="197" width="0.1288%" height="15" fill="rgb(244,35,45)"/><text x="72.3458%" y="207.50"></text></g><g><title>configure_and_expand (12,941,902 samples, 36.80%)</title><rect x="35.5485%" y="229" width="36.7982%" height="15" fill="rgb(251,115,12)"/><text x="35.7985%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (141,042 samples, 0.40%)</title><rect x="71.9457%" y="213" width="0.4010%" height="15" fill="rgb(240,54,50)"/><text x="72.1957%" y="223.50"></text></g><g><title>drop_ast (43,760 samples, 0.12%)</title><rect x="72.3467%" y="229" width="0.1244%" height="15" fill="rgb(233,84,52)"/><text x="72.5967%" y="239.50"></text></g><g><title>early_lint_checks (106,481 samples, 0.30%)</title><rect x="72.5427%" y="229" width="0.3028%" height="15" fill="rgb(207,117,47)"/><text x="72.7927%" y="239.50"></text></g><g><title>free_global_ctxt (2,099,481 samples, 5.97%)</title><rect x="72.8455%" y="229" width="5.9695%" height="15" fill="rgb(249,43,39)"/><text x="73.0955%" y="239.50">free_glo..</text></g><g><title>crate_hash (138,132 samples, 0.39%)</title><rect x="80.3341%" y="213" width="0.3928%" height="15" fill="rgb(209,38,44)"/><text x="80.5841%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (82,961 samples, 0.24%)</title><rect x="80.9500%" y="197" width="0.2359%" height="15" fill="rgb(236,212,23)"/><text x="81.2000%" y="207.50"></text></g><g><title>partition_and_assert_distinct_symbols (43,490 samples, 0.12%)</title><rect x="81.0623%" y="181" width="0.1237%" height="15" fill="rgb(242,79,21)"/><text x="81.3123%" y="191.50"></text></g><g><title>exported_symbols (133,481 samples, 0.38%)</title><rect x="80.8768%" y="213" width="0.3795%" height="15" fill="rgb(211,96,35)"/><text x="81.1268%" y="223.50"></text></g><g><title>optimized_mir (461,145 samples, 1.31%)</title><rect x="81.4104%" y="213" width="1.3112%" height="15" fill="rgb(253,215,40)"/><text x="81.6604%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (271,973 samples, 0.77%)</title><rect x="81.9483%" y="197" width="0.7733%" height="15" fill="rgb(211,81,21)"/><text x="82.1983%" y="207.50"></text></g><g><title>generate_crate_metadata (1,419,464 samples, 4.04%)</title><rect x="78.8150%" y="229" width="4.0360%" height="15" fill="rgb(208,190,38)"/><text x="79.0650%" y="239.50">gene..</text></g><g><title>hir_lowering (776,148 samples, 2.21%)</title><rect x="82.8511%" y="229" width="2.2069%" height="15" fill="rgb(235,213,38)"/><text x="83.1011%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (796,668 samples, 2.27%)</title><rect x="85.1095%" y="213" width="2.2652%" height="15" fill="rgb(237,122,38)"/><text x="85.3595%" y="223.50">f..</text></g><g><title>link_binary_remove_temps (38,661 samples, 0.11%)</title><rect x="88.3660%" y="181" width="0.1099%" height="15" fill="rgb(244,218,35)"/><text x="88.6160%" y="191.50"></text></g><g><title>link_crate (1,119,182 samples, 3.18%)</title><rect x="87.3747%" y="213" width="3.1822%" height="15" fill="rgb(240,68,47)"/><text x="87.6247%" y="223.50">lin..</text></g><g><title>link_binary (1,103,191 samples, 3.14%)</title><rect x="87.4202%" y="197" width="3.1367%" height="15" fill="rgb(210,16,53)"/><text x="87.6702%" y="207.50">lin..</text></g><g><title>link_rlib (731,887 samples, 2.08%)</title><rect x="88.4759%" y="181" width="2.0810%" height="15" fill="rgb(235,124,12)"/><text x="88.7259%" y="191.50">l..</text></g><g><title>link (1,946,460 samples, 5.53%)</title><rect x="85.0579%" y="229" width="5.5344%" height="15" fill="rgb(224,169,11)"/><text x="85.3079%" y="239.50">link</text></g><g><title>parse_crate (1,735,008 samples, 4.93%)</title><rect x="90.5923%" y="229" width="4.9332%" height="15" fill="rgb(250,166,2)"/><text x="90.8423%" y="239.50">parse_..</text></g><g><title>prepare_outputs (365,354 samples, 1.04%)</title><rect x="95.5490%" y="229" width="1.0388%" height="15" fill="rgb(242,216,29)"/><text x="95.7990%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (565,466 samples, 1.61%)</title><rect x="96.5878%" y="229" width="1.6078%" height="15" fill="rgb(230,116,27)"/><text x="96.8378%" y="239.50"></text></g><g><title>setup_global_ctxt (152,182 samples, 0.43%)</title><rect x="98.1998%" y="229" width="0.4327%" height="15" fill="rgb(228,99,48)"/><text x="98.4498%" y="239.50"></text></g><g><title>all (35,169,927 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (35,169,927 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (480,955 samples, 1.37%)</title><rect x="98.6325%" y="229" width="1.3675%" height="15" fill="rgb(236,97,10)"/><text x="98.8825%" y="239.50"></text></g></svg></svg>