<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (135,148,087 samples, 12.91%)</title><rect x="0.0686%" y="197" width="12.9097%" height="15" fill="rgb(227,0,7)"/><text x="0.3186%" y="207.50">LLVM_passes</text></g><g><title>impl_parent (1,362,167 samples, 0.13%)</title><rect x="16.2365%" y="53" width="0.1301%" height="15" fill="rgb(217,0,24)"/><text x="16.4865%" y="63.50"></text></g><g><title>specialization_graph_of (7,601,597 samples, 0.73%)</title><rect x="16.0560%" y="69" width="0.7261%" height="15" fill="rgb(221,193,54)"/><text x="16.3060%" y="79.50"></text></g><g><title>impl_trait_ref (4,350,243 samples, 0.42%)</title><rect x="16.3666%" y="53" width="0.4155%" height="15" fill="rgb(248,212,6)"/><text x="16.6166%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,649,179 samples, 0.35%)</title><rect x="16.4335%" y="37" width="0.3486%" height="15" fill="rgb(208,68,35)"/><text x="16.6835%" y="47.50"></text></g><g><title>resolve_instance (8,478,459 samples, 0.81%)</title><rect x="15.9836%" y="85" width="0.8099%" height="15" fill="rgb(232,128,0)"/><text x="16.2336%" y="95.50"></text></g><g><title>thir_body (1,707,227 samples, 0.16%)</title><rect x="16.7978%" y="85" width="0.1631%" height="15" fill="rgb(207,160,47)"/><text x="17.0478%" y="95.50"></text></g><g><title>mir_const (18,340,809 samples, 1.75%)</title><rect x="15.2114%" y="133" width="1.7520%" height="15" fill="rgb(228,23,34)"/><text x="15.4614%" y="143.50"></text></g><g><title>unsafety_check_result (16,643,442 samples, 1.59%)</title><rect x="15.3735%" y="117" width="1.5898%" height="15" fill="rgb(218,30,26)"/><text x="15.6235%" y="127.50"></text></g><g><title>mir_built (15,461,001 samples, 1.48%)</title><rect x="15.4865%" y="101" width="1.4769%" height="15" fill="rgb(220,122,19)"/><text x="15.7365%" y="111.50"></text></g><g><title>mir_promoted (20,718,624 samples, 1.98%)</title><rect x="15.0773%" y="149" width="1.9791%" height="15" fill="rgb(250,228,42)"/><text x="15.3273%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (1,561,354 samples, 0.15%)</title><rect x="17.1332%" y="149" width="0.1491%" height="15" fill="rgb(240,193,28)"/><text x="17.3832%" y="159.50"></text></g><g><title>MIR_borrow_checking (44,728,753 samples, 4.27%)</title><rect x="13.0102%" y="181" width="4.2726%" height="15" fill="rgb(216,20,37)"/><text x="13.2602%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (44,491,042 samples, 4.25%)</title><rect x="13.0329%" y="165" width="4.2499%" height="15" fill="rgb(206,188,39)"/><text x="13.2829%" y="175.50">mir_b..</text></g><g><title>misc_checking_1 (1,411,934 samples, 0.13%)</title><rect x="17.3233%" y="181" width="0.1349%" height="15" fill="rgb(217,207,13)"/><text x="17.5733%" y="191.50"></text></g><g><title>misc_checking_2 (1,121,171 samples, 0.11%)</title><rect x="17.4582%" y="181" width="0.1071%" height="15" fill="rgb(231,73,38)"/><text x="17.7082%" y="191.50"></text></g><g><title>crate_lints (2,588,237 samples, 0.25%)</title><rect x="17.6226%" y="149" width="0.2472%" height="15" fill="rgb(225,20,46)"/><text x="17.8726%" y="159.50"></text></g><g><title>lint_checking (3,155,842 samples, 0.30%)</title><rect x="17.6224%" y="165" width="0.3015%" height="15" fill="rgb(210,31,41)"/><text x="17.8724%" y="175.50"></text></g><g><title>misc_checking_3 (4,949,151 samples, 0.47%)</title><rect x="17.5653%" y="181" width="0.4728%" height="15" fill="rgb(221,200,47)"/><text x="17.8153%" y="191.50"></text></g><g><title>associated_item (1,349,131 samples, 0.13%)</title><rect x="21.2602%" y="101" width="0.1289%" height="15" fill="rgb(226,26,5)"/><text x="21.5102%" y="111.50"></text></g><g><title>associated_items (1,961,819 samples, 0.19%)</title><rect x="21.2084%" y="117" width="0.1874%" height="15" fill="rgb(249,33,26)"/><text x="21.4584%" y="127.50"></text></g><g><title>evaluate_obligation (2,850,298 samples, 0.27%)</title><rect x="21.4347%" y="117" width="0.2723%" height="15" fill="rgb(235,183,28)"/><text x="21.6847%" y="127.50"></text></g><g><title>item_bodies_checking (40,263,048 samples, 3.85%)</title><rect x="18.0985%" y="165" width="3.8460%" height="15" fill="rgb(221,5,38)"/><text x="18.3485%" y="175.50">item..</text></g><g><title>typeck_item_bodies (40,260,628 samples, 3.85%)</title><rect x="18.0987%" y="149" width="3.8458%" height="15" fill="rgb(247,18,42)"/><text x="18.3487%" y="159.50">type..</text></g><g><title>typeck (40,108,248 samples, 3.83%)</title><rect x="18.1133%" y="133" width="3.8313%" height="15" fill="rgb(241,131,45)"/><text x="18.3633%" y="143.50">type..</text></g><g><title>adt_dtorck_constraint (1,102,661 samples, 0.11%)</title><rect x="22.2822%" y="69" width="0.1053%" height="15" fill="rgb(249,31,29)"/><text x="22.5322%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,294,423 samples, 0.12%)</title><rect x="22.2657%" y="85" width="0.1236%" height="15" fill="rgb(225,111,53)"/><text x="22.5157%" y="95.50"></text></g><g><title>dropck_outlives (2,444,124 samples, 0.23%)</title><rect x="22.1610%" y="117" width="0.2335%" height="15" fill="rgb(238,160,17)"/><text x="22.4110%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,386,903 samples, 0.23%)</title><rect x="22.1665%" y="101" width="0.2280%" height="15" fill="rgb(214,148,48)"/><text x="22.4165%" y="111.50"></text></g><g><title>item_types_checking (4,804,818 samples, 0.46%)</title><rect x="21.9445%" y="165" width="0.4590%" height="15" fill="rgb(232,36,49)"/><text x="22.1945%" y="175.50"></text></g><g><title>check_mod_item_types (4,790,158 samples, 0.46%)</title><rect x="21.9459%" y="149" width="0.4576%" height="15" fill="rgb(209,103,24)"/><text x="22.1959%" y="159.50"></text></g><g><title>typeck (3,200,553 samples, 0.31%)</title><rect x="22.0978%" y="133" width="0.3057%" height="15" fill="rgb(229,88,8)"/><text x="22.3478%" y="143.50"></text></g><g><title>type_collecting (1,782,498 samples, 0.17%)</title><rect x="22.4277%" y="165" width="0.1703%" height="15" fill="rgb(213,181,19)"/><text x="22.6777%" y="175.50"></text></g><g><title>collect_mod_item_types (1,766,238 samples, 0.17%)</title><rect x="22.4293%" y="149" width="0.1687%" height="15" fill="rgb(254,191,54)"/><text x="22.6793%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,180,093 samples, 0.21%)</title><rect x="22.6199%" y="149" width="0.2082%" height="15" fill="rgb(241,83,37)"/><text x="22.8699%" y="159.50"></text></g><g><title>evaluate_obligation (3,114,320 samples, 0.30%)</title><rect x="22.9490%" y="133" width="0.2975%" height="15" fill="rgb(233,36,39)"/><text x="23.1990%" y="143.50"></text></g><g><title>check_item_well_formed (5,206,505 samples, 0.50%)</title><rect x="22.8281%" y="149" width="0.4973%" height="15" fill="rgb(226,3,54)"/><text x="23.0781%" y="159.50"></text></g><g><title>analysis (109,239,506 samples, 10.43%)</title><rect x="12.9783%" y="197" width="10.4349%" height="15" fill="rgb(245,192,40)"/><text x="13.2283%" y="207.50">analysis</text></g><g><title>type_check_crate (56,271,219 samples, 5.38%)</title><rect x="18.0380%" y="181" width="5.3752%" height="15" fill="rgb(238,167,29)"/><text x="18.2880%" y="191.50">type_ch..</text></g><g><title>wf_checking (8,522,947 samples, 0.81%)</title><rect x="22.5991%" y="165" width="0.8141%" height="15" fill="rgb(232,182,51)"/><text x="22.8491%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (3,099,009 samples, 0.30%)</title><rect x="33.5002%" y="165" width="0.2960%" height="15" fill="rgb(231,60,39)"/><text x="33.7502%" y="175.50"></text></g><g><title>const_caller_location (1,554,631 samples, 0.15%)</title><rect x="33.7962%" y="165" width="0.1485%" height="15" fill="rgb(208,69,12)"/><text x="34.0462%" y="175.50"></text></g><g><title>layout_of (1,415,992 samples, 0.14%)</title><rect x="34.3866%" y="149" width="0.1353%" height="15" fill="rgb(235,93,37)"/><text x="34.6366%" y="159.50"></text></g><g><title>predicates_of (1,639,791 samples, 0.16%)</title><rect x="34.7798%" y="133" width="0.1566%" height="15" fill="rgb(213,116,39)"/><text x="35.0298%" y="143.50"></text></g><g><title>predicates_defined_on (1,190,015 samples, 0.11%)</title><rect x="34.8228%" y="117" width="0.1137%" height="15" fill="rgb(222,207,29)"/><text x="35.0728%" y="127.50"></text></g><g><title>param_env (4,355,134 samples, 0.42%)</title><rect x="34.5219%" y="149" width="0.4160%" height="15" fill="rgb(206,96,30)"/><text x="34.7719%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,270,363 samples, 0.12%)</title><rect x="34.9379%" y="149" width="0.1213%" height="15" fill="rgb(218,138,4)"/><text x="35.1879%" y="159.50"></text></g><g><title>fn_abi_of_instance (11,667,678 samples, 1.11%)</title><rect x="33.9484%" y="165" width="1.1145%" height="15" fill="rgb(250,191,14)"/><text x="34.1984%" y="175.50"></text></g><g><title>layout_of (1,122,432 samples, 0.11%)</title><rect x="35.3620%" y="85" width="0.1072%" height="15" fill="rgb(239,60,40)"/><text x="35.6120%" y="95.50"></text></g><g><title>layout_of (1,274,223 samples, 0.12%)</title><rect x="35.3506%" y="101" width="0.1217%" height="15" fill="rgb(206,27,48)"/><text x="35.6006%" y="111.50"></text></g><g><title>layout_of (1,615,787 samples, 0.15%)</title><rect x="35.3316%" y="117" width="0.1543%" height="15" fill="rgb(225,35,8)"/><text x="35.5816%" y="127.50"></text></g><g><title>layout_of (1,866,050 samples, 0.18%)</title><rect x="35.3169%" y="133" width="0.1783%" height="15" fill="rgb(250,213,24)"/><text x="35.5669%" y="143.50"></text></g><g><title>layout_of (2,290,783 samples, 0.22%)</title><rect x="35.2878%" y="149" width="0.2188%" height="15" fill="rgb(247,123,22)"/><text x="35.5378%" y="159.50"></text></g><g><title>layout_of (4,045,171 samples, 0.39%)</title><rect x="35.1308%" y="165" width="0.3864%" height="15" fill="rgb(231,138,38)"/><text x="35.3808%" y="175.50"></text></g><g><title>symbol_name (1,473,317 samples, 0.14%)</title><rect x="35.5191%" y="165" width="0.1407%" height="15" fill="rgb(231,145,46)"/><text x="35.7691%" y="175.50"></text></g><g><title>codegen_module (125,911,697 samples, 12.03%)</title><rect x="23.6436%" y="181" width="12.0274%" height="15" fill="rgb(251,118,11)"/><text x="23.8936%" y="191.50">codegen_module</text></g><g><title>codegen_crate (128,399,079 samples, 12.27%)</title><rect x="23.4141%" y="197" width="12.2650%" height="15" fill="rgb(217,147,25)"/><text x="23.6641%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (529,571,016 samples, 50.59%)</title><rect x="35.7011%" y="181" width="50.5861%" height="15" fill="rgb(247,81,37)"/><text x="35.9511%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (503,240,694 samples, 48.07%)</title><rect x="38.2163%" y="165" width="48.0709%" height="15" fill="rgb(209,12,38)"/><text x="38.4663%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (558,676,052 samples, 53.37%)</title><rect x="35.6791%" y="197" width="53.3663%" height="15" fill="rgb(227,1,9)"/><text x="35.9291%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (28,874,413 samples, 2.76%)</title><rect x="86.2872%" y="181" width="2.7582%" height="15" fill="rgb(248,47,43)"/><text x="86.5372%" y="191.50">LL..</text></g><g><title>metadata_register_crate (1,513,335 samples, 0.14%)</title><rect x="92.4055%" y="149" width="0.1446%" height="15" fill="rgb(221,10,30)"/><text x="92.6555%" y="159.50"></text></g><g><title>macro_expand_crate (37,362,388 samples, 3.57%)</title><rect x="89.1019%" y="181" width="3.5690%" height="15" fill="rgb(210,229,1)"/><text x="89.3519%" y="191.50">macr..</text></g><g><title>expand_crate (37,350,518 samples, 3.57%)</title><rect x="89.1030%" y="165" width="3.5678%" height="15" fill="rgb(222,148,37)"/><text x="89.3530%" y="175.50">expa..</text></g><g><title>pre_AST_expansion_lint_checks (1,265,020 samples, 0.12%)</title><rect x="92.5500%" y="149" width="0.1208%" height="15" fill="rgb(234,67,33)"/><text x="92.8000%" y="159.50"></text></g><g><title>late_resolve_crate (1,739,237 samples, 0.17%)</title><rect x="92.7077%" y="165" width="0.1661%" height="15" fill="rgb(247,98,35)"/><text x="92.9577%" y="175.50"></text></g><g><title>configure_and_expand (40,234,137 samples, 3.84%)</title><rect x="89.0454%" y="197" width="3.8433%" height="15" fill="rgb(247,138,52)"/><text x="89.2954%" y="207.50">conf..</text></g><g><title>resolve_crate (2,100,531 samples, 0.20%)</title><rect x="92.6880%" y="181" width="0.2006%" height="15" fill="rgb(213,79,30)"/><text x="92.9380%" y="191.50"></text></g><g><title>free_global_ctxt (8,924,979 samples, 0.85%)</title><rect x="92.9863%" y="197" width="0.8525%" height="15" fill="rgb(246,177,23)"/><text x="93.2363%" y="207.50"></text></g><g><title>item_attrs (1,107,518 samples, 0.11%)</title><rect x="94.3697%" y="101" width="0.1058%" height="15" fill="rgb(230,62,27)"/><text x="94.6197%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,060,558 samples, 0.10%)</title><rect x="94.3742%" y="85" width="0.1013%" height="15" fill="rgb(216,154,8)"/><text x="94.6242%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,899,707 samples, 0.18%)</title><rect x="94.3406%" y="117" width="0.1815%" height="15" fill="rgb(244,35,45)"/><text x="94.5906%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,293,836 samples, 0.22%)</title><rect x="94.9579%" y="101" width="0.2191%" height="15" fill="rgb(251,115,12)"/><text x="95.2079%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,456,178 samples, 0.33%)</title><rect x="95.1770%" y="101" width="0.3301%" height="15" fill="rgb(240,54,50)"/><text x="95.4270%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,273,722 samples, 0.12%)</title><rect x="95.5619%" y="85" width="0.1217%" height="15" fill="rgb(233,84,52)"/><text x="95.8119%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,257,292 samples, 0.12%)</title><rect x="95.5635%" y="69" width="0.1201%" height="15" fill="rgb(207,117,47)"/><text x="95.8135%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,232,212 samples, 0.12%)</title><rect x="95.5659%" y="53" width="0.1177%" height="15" fill="rgb(249,43,39)"/><text x="95.8159%" y="63.50"></text></g><g><title>optimized_mir (11,090,098 samples, 1.06%)</title><rect x="94.6244%" y="117" width="1.0594%" height="15" fill="rgb(209,38,44)"/><text x="94.8744%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,329,442 samples, 0.13%)</title><rect x="95.5568%" y="101" width="0.1270%" height="15" fill="rgb(236,212,23)"/><text x="95.8068%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,894,101 samples, 0.37%)</title><rect x="95.7953%" y="101" width="0.3720%" height="15" fill="rgb(242,79,21)"/><text x="96.0453%" y="111.50"></text></g><g><title>specialization_graph_of (1,919,361 samples, 0.18%)</title><rect x="96.2767%" y="101" width="0.1833%" height="15" fill="rgb(211,96,35)"/><text x="96.5267%" y="111.50"></text></g><g><title>resolve_instance (8,509,634 samples, 0.81%)</title><rect x="95.6838%" y="117" width="0.8129%" height="15" fill="rgb(253,215,40)"/><text x="95.9338%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (3,654,386 samples, 0.35%)</title><rect x="96.6162%" y="117" width="0.3491%" height="15" fill="rgb(211,81,21)"/><text x="96.8662%" y="127.50"></text></g><g><title>upstream_monomorphizations (3,621,506 samples, 0.35%)</title><rect x="96.6193%" y="101" width="0.3459%" height="15" fill="rgb(208,190,38)"/><text x="96.8693%" y="111.50"></text></g><g><title>exported_symbols (2,990,629 samples, 0.29%)</title><rect x="96.6796%" y="85" width="0.2857%" height="15" fill="rgb(235,213,38)"/><text x="96.9296%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,984,929 samples, 0.29%)</title><rect x="96.6801%" y="69" width="0.2851%" height="15" fill="rgb(237,122,38)"/><text x="96.9301%" y="79.50"></text></g><g><title>impl_trait_ref (1,615,167 samples, 0.15%)</title><rect x="97.1991%" y="69" width="0.1543%" height="15" fill="rgb(244,218,35)"/><text x="97.4491%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,071,192 samples, 0.10%)</title><rect x="97.2511%" y="53" width="0.1023%" height="15" fill="rgb(240,68,47)"/><text x="97.5011%" y="63.50"></text></g><g><title>specialization_graph_of (3,650,737 samples, 0.35%)</title><rect x="97.0048%" y="85" width="0.3487%" height="15" fill="rgb(210,16,53)"/><text x="97.2548%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (34,567,490 samples, 3.30%)</title><rect x="94.0519%" y="133" width="3.3020%" height="15" fill="rgb(235,124,12)"/><text x="94.3019%" y="143.50">mon..</text></g><g><title>vtable_entries (4,068,062 samples, 0.39%)</title><rect x="96.9653%" y="117" width="0.3886%" height="15" fill="rgb(224,169,11)"/><text x="97.2153%" y="127.50"></text></g><g><title>resolve_instance (3,710,599 samples, 0.35%)</title><rect x="96.9994%" y="101" width="0.3544%" height="15" fill="rgb(250,166,2)"/><text x="97.2494%" y="111.50"></text></g><g><title>monomorphization_collector (34,659,261 samples, 3.31%)</title><rect x="94.0516%" y="149" width="3.3107%" height="15" fill="rgb(242,216,29)"/><text x="94.3016%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,082,851 samples, 0.20%)</title><rect x="97.3634%" y="133" width="0.1990%" height="15" fill="rgb(230,116,27)"/><text x="97.6134%" y="143.50"></text></g><g><title>symbol_name (1,877,370 samples, 0.18%)</title><rect x="97.3830%" y="117" width="0.1793%" height="15" fill="rgb(228,99,48)"/><text x="97.6330%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (38,101,195 samples, 3.64%)</title><rect x="94.0482%" y="165" width="3.6395%" height="15" fill="rgb(253,11,6)"/><text x="94.2982%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (3,405,974 samples, 0.33%)</title><rect x="97.3624%" y="149" width="0.3253%" height="15" fill="rgb(247,143,39)"/><text x="97.6124%" y="159.50"></text></g><g><title>cgu_partitioning (1,312,403 samples, 0.13%)</title><rect x="97.5624%" y="133" width="0.1254%" height="15" fill="rgb(236,97,10)"/><text x="97.8124%" y="143.50"></text></g><g><title>exported_symbols (38,288,317 samples, 3.66%)</title><rect x="94.0400%" y="181" width="3.6574%" height="15" fill="rgb(233,208,19)"/><text x="94.2900%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,842,710 samples, 0.27%)</title><rect x="97.9749%" y="165" width="0.2715%" height="15" fill="rgb(216,164,2)"/><text x="98.2249%" y="175.50"></text></g><g><title>optimized_mir (5,792,200 samples, 0.55%)</title><rect x="97.7033%" y="181" width="0.5533%" height="15" fill="rgb(220,129,5)"/><text x="97.9533%" y="191.50"></text></g><g><title>generate_crate_metadata (46,319,328 samples, 4.42%)</title><rect x="93.8389%" y="197" width="4.4245%" height="15" fill="rgb(242,17,10)"/><text x="94.0889%" y="207.50">gener..</text></g><g><title>hir_lowering (3,711,958 samples, 0.35%)</title><rect x="98.2634%" y="197" width="0.3546%" height="15" fill="rgb(242,107,0)"/><text x="98.5134%" y="207.50"></text></g><g><title>finish_ongoing_codegen (6,355,465 samples, 0.61%)</title><rect x="98.6193%" y="181" width="0.6071%" height="15" fill="rgb(251,28,31)"/><text x="98.8693%" y="191.50"></text></g><g><title>link_crate (3,604,707 samples, 0.34%)</title><rect x="99.2264%" y="181" width="0.3443%" height="15" fill="rgb(233,223,10)"/><text x="99.4764%" y="191.50"></text></g><g><title>link_binary (3,533,156 samples, 0.34%)</title><rect x="99.2332%" y="165" width="0.3375%" height="15" fill="rgb(215,21,27)"/><text x="99.4832%" y="175.50"></text></g><g><title>link_rlib (2,696,177 samples, 0.26%)</title><rect x="99.3132%" y="149" width="0.2575%" height="15" fill="rgb(232,23,21)"/><text x="99.5632%" y="159.50"></text></g><g><title>link (9,981,052 samples, 0.95%)</title><rect x="98.6180%" y="197" width="0.9534%" height="15" fill="rgb(244,5,23)"/><text x="98.8680%" y="207.50"></text></g><g><title>parse_crate (1,843,389 samples, 0.18%)</title><rect x="99.5714%" y="197" width="0.1761%" height="15" fill="rgb(226,81,46)"/><text x="99.8214%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,890,049 samples, 0.18%)</title><rect x="99.7693%" y="197" width="0.1805%" height="15" fill="rgb(247,70,30)"/><text x="100.0193%" y="207.50"></text></g><g><title>all (1,046,871,002 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,046,871,002 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>