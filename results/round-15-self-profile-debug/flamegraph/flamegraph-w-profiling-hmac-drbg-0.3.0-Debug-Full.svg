<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,572,376 samples, 3.51%)</title><rect x="0.6741%" y="197" width="3.5125%" height="15" fill="rgb(227,0,7)"/><text x="0.9241%" y="207.50">LLV..</text></g><g><title>implied_outlives_bounds (153,003 samples, 0.15%)</title><rect x="8.0598%" y="149" width="0.1504%" height="15" fill="rgb(217,0,24)"/><text x="8.3098%" y="159.50"></text></g><g><title>param_env (148,071 samples, 0.15%)</title><rect x="8.8787%" y="117" width="0.1456%" height="15" fill="rgb(221,193,54)"/><text x="9.1287%" y="127.50"></text></g><g><title>codegen_fn_attrs (131,492 samples, 0.13%)</title><rect x="9.1875%" y="101" width="0.1293%" height="15" fill="rgb(248,212,6)"/><text x="9.4375%" y="111.50"></text></g><g><title>is_copy_raw (157,101 samples, 0.15%)</title><rect x="10.5068%" y="53" width="0.1545%" height="15" fill="rgb(208,68,35)"/><text x="10.7568%" y="63.50"></text></g><g><title>evaluate_obligation (134,621 samples, 0.13%)</title><rect x="10.5289%" y="37" width="0.1324%" height="15" fill="rgb(232,128,0)"/><text x="10.7789%" y="47.50"></text></g><g><title>adt_drop_tys (312,264 samples, 0.31%)</title><rect x="10.4817%" y="69" width="0.3070%" height="15" fill="rgb(207,160,47)"/><text x="10.7317%" y="79.50"></text></g><g><title>is_copy_raw (987,947 samples, 0.97%)</title><rect x="10.7887%" y="69" width="0.9714%" height="15" fill="rgb(228,23,34)"/><text x="11.0387%" y="79.50"></text></g><g><title>evaluate_obligation (898,047 samples, 0.88%)</title><rect x="10.8771%" y="53" width="0.8830%" height="15" fill="rgb(218,30,26)"/><text x="11.1271%" y="63.50"></text></g><g><title>trait_impls_of (324,623 samples, 0.32%)</title><rect x="11.4410%" y="37" width="0.3192%" height="15" fill="rgb(220,122,19)"/><text x="11.6910%" y="47.50"></text></g><g><title>needs_drop_raw (1,455,443 samples, 1.43%)</title><rect x="10.4184%" y="85" width="1.4311%" height="15" fill="rgb(250,228,42)"/><text x="10.6684%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (406,994 samples, 0.40%)</title><rect x="11.9579%" y="69" width="0.4002%" height="15" fill="rgb(240,193,28)"/><text x="12.2079%" y="79.50"></text></g><g><title>impl_parent (542,625 samples, 0.53%)</title><rect x="13.5279%" y="53" width="0.5335%" height="15" fill="rgb(216,20,37)"/><text x="13.7779%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (333,313 samples, 0.33%)</title><rect x="13.7337%" y="37" width="0.3277%" height="15" fill="rgb(206,188,39)"/><text x="13.9837%" y="47.50"></text></g><g><title>specialization_graph_of (3,303,593 samples, 3.25%)</title><rect x="12.3872%" y="69" width="3.2482%" height="15" fill="rgb(217,207,13)"/><text x="12.6372%" y="79.50">spe..</text></g><g><title>impl_trait_ref (1,600,786 samples, 1.57%)</title><rect x="14.0615%" y="53" width="1.5740%" height="15" fill="rgb(231,73,38)"/><text x="14.3115%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,407,793 samples, 1.38%)</title><rect x="14.2512%" y="37" width="1.3842%" height="15" fill="rgb(225,20,46)"/><text x="14.5012%" y="47.50"></text></g><g><title>resolve_instance (3,914,638 samples, 3.85%)</title><rect x="11.8495%" y="85" width="3.8490%" height="15" fill="rgb(210,31,41)"/><text x="12.0995%" y="95.50">reso..</text></g><g><title>thir_body (372,514 samples, 0.37%)</title><rect x="15.7035%" y="85" width="0.3663%" height="15" fill="rgb(221,200,47)"/><text x="15.9535%" y="95.50"></text></g><g><title>mir_const (7,675,638 samples, 7.55%)</title><rect x="8.5693%" y="133" width="7.5470%" height="15" fill="rgb(226,26,5)"/><text x="8.8193%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,212,852 samples, 7.09%)</title><rect x="9.0243%" y="117" width="7.0920%" height="15" fill="rgb(249,33,26)"/><text x="9.2743%" y="127.50">unsafety_c..</text></g><g><title>mir_built (6,915,350 samples, 6.80%)</title><rect x="9.3168%" y="101" width="6.7995%" height="15" fill="rgb(235,183,28)"/><text x="9.5668%" y="111.50">mir_built</text></g><g><title>mir_promoted (7,978,512 samples, 7.84%)</title><rect x="8.2842%" y="149" width="7.8448%" height="15" fill="rgb(221,5,38)"/><text x="8.5342%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (170,272 samples, 0.17%)</title><rect x="16.1291%" y="149" width="0.1674%" height="15" fill="rgb(247,18,42)"/><text x="16.3791%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (190,150 samples, 0.19%)</title><rect x="16.2965%" y="149" width="0.1870%" height="15" fill="rgb(241,131,45)"/><text x="16.5465%" y="159.50"></text></g><g><title>MIR_borrow_checking (13,256,854 samples, 13.03%)</title><rect x="4.4084%" y="181" width="13.0347%" height="15" fill="rgb(249,31,29)"/><text x="4.6584%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,241,093 samples, 13.02%)</title><rect x="4.4239%" y="165" width="13.0192%" height="15" fill="rgb(225,111,53)"/><text x="4.6739%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (907,600 samples, 0.89%)</title><rect x="16.5507%" y="149" width="0.8924%" height="15" fill="rgb(238,160,17)"/><text x="16.8007%" y="159.50"></text></g><g><title>hir_module_items (158,492 samples, 0.16%)</title><rect x="17.4479%" y="181" width="0.1558%" height="15" fill="rgb(214,148,48)"/><text x="17.6979%" y="191.50"></text></g><g><title>get_lang_items (102,771 samples, 0.10%)</title><rect x="17.8267%" y="133" width="0.1010%" height="15" fill="rgb(232,36,49)"/><text x="18.0767%" y="143.50"></text></g><g><title>codegen_fn_attrs (269,043 samples, 0.26%)</title><rect x="17.7597%" y="149" width="0.2645%" height="15" fill="rgb(209,103,24)"/><text x="18.0097%" y="159.50"></text></g><g><title>check_mod_attrs (397,934 samples, 0.39%)</title><rect x="17.6334%" y="165" width="0.3913%" height="15" fill="rgb(229,88,8)"/><text x="17.8834%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (203,502 samples, 0.20%)</title><rect x="18.1273%" y="165" width="0.2001%" height="15" fill="rgb(213,181,19)"/><text x="18.3773%" y="175.50"></text></g><g><title>misc_checking_1 (774,838 samples, 0.76%)</title><rect x="17.6043%" y="181" width="0.7619%" height="15" fill="rgb(254,191,54)"/><text x="17.8543%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (335,063 samples, 0.33%)</title><rect x="18.3688%" y="165" width="0.3294%" height="15" fill="rgb(241,83,37)"/><text x="18.6188%" y="175.50"></text></g><g><title>check_mod_liveness (273,513 samples, 0.27%)</title><rect x="18.4293%" y="149" width="0.2689%" height="15" fill="rgb(233,36,39)"/><text x="18.6793%" y="159.50"></text></g><g><title>misc_checking_2 (689,007 samples, 0.68%)</title><rect x="18.3661%" y="181" width="0.6775%" height="15" fill="rgb(226,3,54)"/><text x="18.6161%" y="191.50"></text></g><g><title>match_checking (351,264 samples, 0.35%)</title><rect x="18.6982%" y="165" width="0.3454%" height="15" fill="rgb(245,192,40)"/><text x="18.9482%" y="175.50"></text></g><g><title>check_match (339,694 samples, 0.33%)</title><rect x="18.7096%" y="149" width="0.3340%" height="15" fill="rgb(238,167,29)"/><text x="18.9596%" y="159.50"></text></g><g><title>death_checking (119,641 samples, 0.12%)</title><rect x="19.1092%" y="165" width="0.1176%" height="15" fill="rgb(232,182,51)"/><text x="19.3592%" y="175.50"></text></g><g><title>crate_lints (2,345,603 samples, 2.31%)</title><rect x="19.2285%" y="149" width="2.3063%" height="15" fill="rgb(231,60,39)"/><text x="19.4785%" y="159.50">c..</text></g><g><title>type_of (1,824,575 samples, 1.79%)</title><rect x="19.7408%" y="133" width="1.7940%" height="15" fill="rgb(208,69,12)"/><text x="19.9908%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (1,586,534 samples, 1.56%)</title><rect x="19.9749%" y="117" width="1.5600%" height="15" fill="rgb(235,93,37)"/><text x="20.2249%" y="127.50"></text></g><g><title>lint_checking (2,440,554 samples, 2.40%)</title><rect x="19.2269%" y="165" width="2.3997%" height="15" fill="rgb(213,116,39)"/><text x="19.4769%" y="175.50">li..</text></g><g><title>privacy_checking_modules (256,513 samples, 0.25%)</title><rect x="21.7035%" y="165" width="0.2522%" height="15" fill="rgb(222,207,29)"/><text x="21.9535%" y="175.50"></text></g><g><title>check_mod_privacy (255,233 samples, 0.25%)</title><rect x="21.7048%" y="149" width="0.2510%" height="15" fill="rgb(206,96,30)"/><text x="21.9548%" y="159.50"></text></g><g><title>misc_checking_3 (2,968,190 samples, 2.92%)</title><rect x="19.0436%" y="181" width="2.9185%" height="15" fill="rgb(218,138,4)"/><text x="19.2936%" y="191.50">mi..</text></g><g><title>adt_def (110,960 samples, 0.11%)</title><rect x="44.0920%" y="101" width="0.1091%" height="15" fill="rgb(250,191,14)"/><text x="44.3420%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (106,430 samples, 0.10%)</title><rect x="44.0965%" y="85" width="0.1046%" height="15" fill="rgb(239,60,40)"/><text x="44.3465%" y="95.50"></text></g><g><title>adt_sized_constraint (246,291 samples, 0.24%)</title><rect x="44.0616%" y="117" width="0.2422%" height="15" fill="rgb(206,27,48)"/><text x="44.3116%" y="127.50"></text></g><g><title>associated_item (471,097 samples, 0.46%)</title><rect x="44.5549%" y="101" width="0.4632%" height="15" fill="rgb(225,35,8)"/><text x="44.8049%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (346,377 samples, 0.34%)</title><rect x="44.6775%" y="85" width="0.3406%" height="15" fill="rgb(250,213,24)"/><text x="44.9275%" y="95.50"></text></g><g><title>associated_items (768,068 samples, 0.76%)</title><rect x="44.3118%" y="117" width="0.7552%" height="15" fill="rgb(247,123,22)"/><text x="44.5618%" y="127.50"></text></g><g><title>adt_dtorck_constraint (221,664 samples, 0.22%)</title><rect x="45.4529%" y="101" width="0.2180%" height="15" fill="rgb(231,138,38)"/><text x="45.7029%" y="111.50"></text></g><g><title>dropck_outlives (1,032,372 samples, 1.02%)</title><rect x="45.1459%" y="117" width="1.0151%" height="15" fill="rgb(231,145,46)"/><text x="45.3959%" y="127.50"></text></g><g><title>normalize_projection_ty (498,415 samples, 0.49%)</title><rect x="45.6709%" y="101" width="0.4901%" height="15" fill="rgb(251,118,11)"/><text x="45.9209%" y="111.50"></text></g><g><title>generics_of (1,041,404 samples, 1.02%)</title><rect x="49.2764%" y="101" width="1.0240%" height="15" fill="rgb(217,147,25)"/><text x="49.5264%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (877,952 samples, 0.86%)</title><rect x="49.4371%" y="85" width="0.8632%" height="15" fill="rgb(247,81,37)"/><text x="49.6871%" y="95.50"></text></g><g><title>impl_trait_ref (1,475,459 samples, 1.45%)</title><rect x="50.3781%" y="101" width="1.4507%" height="15" fill="rgb(209,12,38)"/><text x="50.6281%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,308,897 samples, 1.29%)</title><rect x="50.5419%" y="85" width="1.2870%" height="15" fill="rgb(227,1,9)"/><text x="50.7919%" y="95.50"></text></g><g><title>predicates_of (298,082 samples, 0.29%)</title><rect x="51.8581%" y="101" width="0.2931%" height="15" fill="rgb(248,47,43)"/><text x="52.1081%" y="111.50"></text></g><g><title>predicates_defined_on (194,221 samples, 0.19%)</title><rect x="51.9602%" y="85" width="0.1910%" height="15" fill="rgb(221,10,30)"/><text x="52.2102%" y="95.50"></text></g><g><title>specializes (498,325 samples, 0.49%)</title><rect x="52.1512%" y="101" width="0.4900%" height="15" fill="rgb(210,229,1)"/><text x="52.4012%" y="111.50"></text></g><g><title>param_env (392,395 samples, 0.39%)</title><rect x="52.2554%" y="85" width="0.3858%" height="15" fill="rgb(222,148,37)"/><text x="52.5054%" y="95.50"></text></g><g><title>def_span (272,192 samples, 0.27%)</title><rect x="52.3736%" y="69" width="0.2676%" height="15" fill="rgb(234,67,33)"/><text x="52.6236%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (262,722 samples, 0.26%)</title><rect x="52.3829%" y="53" width="0.2583%" height="15" fill="rgb(247,98,35)"/><text x="52.6329%" y="63.50"></text></g><g><title>trait_impls_of (1,425,124 samples, 1.40%)</title><rect x="52.6608%" y="101" width="1.4012%" height="15" fill="rgb(247,138,52)"/><text x="52.9108%" y="111.50"></text></g><g><title>implementations_of_trait (489,046 samples, 0.48%)</title><rect x="53.5812%" y="85" width="0.4809%" height="15" fill="rgb(213,79,30)"/><text x="53.8312%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (310,105 samples, 0.30%)</title><rect x="53.7572%" y="69" width="0.3049%" height="15" fill="rgb(246,177,23)"/><text x="54.0072%" y="79.50"></text></g><g><title>evaluate_obligation (8,053,361 samples, 7.92%)</title><rect x="46.1609%" y="117" width="7.9184%" height="15" fill="rgb(230,62,27)"/><text x="46.4109%" y="127.50">evaluate_ob..</text></g><g><title>fn_sig (161,192 samples, 0.16%)</title><rect x="54.1291%" y="117" width="0.1585%" height="15" fill="rgb(216,154,8)"/><text x="54.3791%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (141,522 samples, 0.14%)</title><rect x="54.1485%" y="101" width="0.1392%" height="15" fill="rgb(244,35,45)"/><text x="54.3985%" y="111.50"></text></g><g><title>generics_of (1,464,317 samples, 1.44%)</title><rect x="54.2876%" y="117" width="1.4398%" height="15" fill="rgb(251,115,12)"/><text x="54.5376%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,110,615 samples, 1.09%)</title><rect x="54.6354%" y="101" width="1.0920%" height="15" fill="rgb(240,54,50)"/><text x="54.8854%" y="111.50"></text></g><g><title>impl_item_implementor_ids (181,072 samples, 0.18%)</title><rect x="55.7274%" y="117" width="0.1780%" height="15" fill="rgb(233,84,52)"/><text x="55.9774%" y="127.50"></text></g><g><title>associated_items (157,962 samples, 0.16%)</title><rect x="55.7501%" y="101" width="0.1553%" height="15" fill="rgb(207,117,47)"/><text x="56.0001%" y="111.50"></text></g><g><title>impl_trait_ref (2,625,106 samples, 2.58%)</title><rect x="55.9277%" y="117" width="2.5811%" height="15" fill="rgb(249,43,39)"/><text x="56.1777%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,282,221 samples, 2.24%)</title><rect x="56.2648%" y="101" width="2.2440%" height="15" fill="rgb(209,38,44)"/><text x="56.5148%" y="111.50">m..</text></g><g><title>item_attrs (105,571 samples, 0.10%)</title><rect x="58.5434%" y="117" width="0.1038%" height="15" fill="rgb(236,212,23)"/><text x="58.7934%" y="127.50"></text></g><g><title>evaluate_obligation (520,074 samples, 0.51%)</title><rect x="59.2870%" y="101" width="0.5114%" height="15" fill="rgb(242,79,21)"/><text x="59.5370%" y="111.50"></text></g><g><title>method_autoderef_steps (1,120,591 samples, 1.10%)</title><rect x="58.7299%" y="117" width="1.1018%" height="15" fill="rgb(211,96,35)"/><text x="58.9799%" y="127.50"></text></g><g><title>explicit_predicates_of (203,462 samples, 0.20%)</title><rect x="60.1771%" y="85" width="0.2001%" height="15" fill="rgb(253,215,40)"/><text x="60.4271%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (159,282 samples, 0.16%)</title><rect x="60.2205%" y="69" width="0.1566%" height="15" fill="rgb(211,81,21)"/><text x="60.4705%" y="79.50"></text></g><g><title>predicates_of (572,435 samples, 0.56%)</title><rect x="59.8790%" y="117" width="0.5628%" height="15" fill="rgb(208,190,38)"/><text x="60.1290%" y="127.50"></text></g><g><title>predicates_defined_on (387,474 samples, 0.38%)</title><rect x="60.0608%" y="101" width="0.3810%" height="15" fill="rgb(235,213,38)"/><text x="60.3108%" y="111.50"></text></g><g><title>specializes (174,131 samples, 0.17%)</title><rect x="60.4418%" y="117" width="0.1712%" height="15" fill="rgb(237,122,38)"/><text x="60.6918%" y="127.50"></text></g><g><title>param_env (105,831 samples, 0.10%)</title><rect x="60.5090%" y="101" width="0.1041%" height="15" fill="rgb(244,218,35)"/><text x="60.7590%" y="111.50"></text></g><g><title>trait_impls_of (335,143 samples, 0.33%)</title><rect x="60.6485%" y="117" width="0.3295%" height="15" fill="rgb(240,68,47)"/><text x="60.8985%" y="127.50"></text></g><g><title>implementations_of_trait (106,310 samples, 0.10%)</title><rect x="60.8735%" y="101" width="0.1045%" height="15" fill="rgb(210,16,53)"/><text x="61.1235%" y="111.50"></text></g><g><title>item_bodies_checking (39,698,542 samples, 39.03%)</title><rect x="22.0738%" y="165" width="39.0334%" height="15" fill="rgb(235,124,12)"/><text x="22.3238%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (39,693,872 samples, 39.03%)</title><rect x="22.0783%" y="149" width="39.0288%" height="15" fill="rgb(224,169,11)"/><text x="22.3283%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (39,668,461 samples, 39.00%)</title><rect x="22.1033%" y="133" width="39.0038%" height="15" fill="rgb(250,166,2)"/><text x="22.3533%" y="143.50">typeck</text></g><g><title>impl_parent (228,182 samples, 0.22%)</title><rect x="61.3536%" y="85" width="0.2244%" height="15" fill="rgb(242,216,29)"/><text x="61.6036%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (176,090 samples, 0.17%)</title><rect x="61.4048%" y="69" width="0.1731%" height="15" fill="rgb(230,116,27)"/><text x="61.6548%" y="79.50"></text></g><g><title>impl_trait_ref (830,608 samples, 0.82%)</title><rect x="61.5779%" y="85" width="0.8167%" height="15" fill="rgb(228,99,48)"/><text x="61.8279%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (781,517 samples, 0.77%)</title><rect x="61.6262%" y="69" width="0.7684%" height="15" fill="rgb(253,11,6)"/><text x="61.8762%" y="79.50"></text></g><g><title>item_types_checking (1,388,814 samples, 1.37%)</title><rect x="61.1072%" y="165" width="1.3655%" height="15" fill="rgb(247,143,39)"/><text x="61.3572%" y="175.50"></text></g><g><title>check_mod_item_types (1,384,834 samples, 1.36%)</title><rect x="61.1111%" y="149" width="1.3616%" height="15" fill="rgb(236,97,10)"/><text x="61.3611%" y="159.50"></text></g><g><title>adt_destructor (1,363,604 samples, 1.34%)</title><rect x="61.1320%" y="133" width="1.3408%" height="15" fill="rgb(233,208,19)"/><text x="61.3820%" y="143.50"></text></g><g><title>coherent_trait (1,356,664 samples, 1.33%)</title><rect x="61.1388%" y="117" width="1.3339%" height="15" fill="rgb(216,164,2)"/><text x="61.3888%" y="127.50"></text></g><g><title>specialization_graph_of (1,349,284 samples, 1.33%)</title><rect x="61.1460%" y="101" width="1.3267%" height="15" fill="rgb(220,129,5)"/><text x="61.3960%" y="111.50"></text></g><g><title>fn_sig (104,130 samples, 0.10%)</title><rect x="62.5971%" y="133" width="0.1024%" height="15" fill="rgb(242,17,10)"/><text x="62.8471%" y="143.50"></text></g><g><title>late_bound_vars_map (211,712 samples, 0.21%)</title><rect x="63.0940%" y="85" width="0.2082%" height="15" fill="rgb(242,107,0)"/><text x="63.3440%" y="95.50"></text></g><g><title>resolve_lifetimes (196,302 samples, 0.19%)</title><rect x="63.1091%" y="69" width="0.1930%" height="15" fill="rgb(251,28,31)"/><text x="63.3591%" y="79.50"></text></g><g><title>associated_items (128,871 samples, 0.13%)</title><rect x="63.4560%" y="69" width="0.1267%" height="15" fill="rgb(233,223,10)"/><text x="63.7060%" y="79.50"></text></g><g><title>explicit_predicates_of (828,519 samples, 0.81%)</title><rect x="62.8215%" y="101" width="0.8146%" height="15" fill="rgb(215,21,27)"/><text x="63.0715%" y="111.50"></text></g><g><title>type_param_predicates (321,183 samples, 0.32%)</title><rect x="63.3203%" y="85" width="0.3158%" height="15" fill="rgb(232,23,21)"/><text x="63.5703%" y="95.50"></text></g><g><title>predicates_of (1,003,822 samples, 0.99%)</title><rect x="62.7801%" y="133" width="0.9870%" height="15" fill="rgb(244,5,23)"/><text x="63.0301%" y="143.50"></text></g><g><title>predicates_defined_on (990,352 samples, 0.97%)</title><rect x="62.7933%" y="117" width="0.9738%" height="15" fill="rgb(226,81,46)"/><text x="63.0433%" y="127.50"></text></g><g><title>inferred_outlives_of (133,192 samples, 0.13%)</title><rect x="63.6361%" y="101" width="0.1310%" height="15" fill="rgb(247,70,30)"/><text x="63.8861%" y="111.50"></text></g><g><title>inferred_outlives_crate (116,522 samples, 0.11%)</title><rect x="63.6525%" y="85" width="0.1146%" height="15" fill="rgb(212,68,19)"/><text x="63.9025%" y="95.50"></text></g><g><title>type_collecting (1,399,474 samples, 1.38%)</title><rect x="62.4757%" y="165" width="1.3760%" height="15" fill="rgb(240,187,13)"/><text x="62.7257%" y="175.50"></text></g><g><title>collect_mod_item_types (1,388,084 samples, 1.36%)</title><rect x="62.4869%" y="149" width="1.3648%" height="15" fill="rgb(223,113,26)"/><text x="62.7369%" y="159.50"></text></g><g><title>evaluate_obligation (276,373 samples, 0.27%)</title><rect x="65.5714%" y="133" width="0.2717%" height="15" fill="rgb(206,192,2)"/><text x="65.8214%" y="143.50"></text></g><g><title>implied_outlives_bounds (520,585 samples, 0.51%)</title><rect x="65.8431%" y="133" width="0.5119%" height="15" fill="rgb(241,108,4)"/><text x="66.0931%" y="143.50"></text></g><g><title>param_env (536,107 samples, 0.53%)</title><rect x="66.3550%" y="133" width="0.5271%" height="15" fill="rgb(247,173,49)"/><text x="66.6050%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,269,474 samples, 3.21%)</title><rect x="63.9291%" y="149" width="3.2147%" height="15" fill="rgb(224,114,35)"/><text x="64.1791%" y="159.50">che..</text></g><g><title>region_scope_tree (213,863 samples, 0.21%)</title><rect x="66.9335%" y="133" width="0.2103%" height="15" fill="rgb(245,159,27)"/><text x="67.1835%" y="143.50"></text></g><g><title>implied_outlives_bounds (159,061 samples, 0.16%)</title><rect x="68.0527%" y="133" width="0.1564%" height="15" fill="rgb(245,172,44)"/><text x="68.3027%" y="143.50"></text></g><g><title>param_env (850,429 samples, 0.84%)</title><rect x="68.2742%" y="133" width="0.8362%" height="15" fill="rgb(236,23,11)"/><text x="68.5242%" y="143.50"></text></g><g><title>trait_impls_of (103,631 samples, 0.10%)</title><rect x="69.0085%" y="117" width="0.1019%" height="15" fill="rgb(205,117,38)"/><text x="69.2585%" y="127.50"></text></g><g><title>trait_impls_of (671,587 samples, 0.66%)</title><rect x="69.2080%" y="133" width="0.6603%" height="15" fill="rgb(237,72,25)"/><text x="69.4580%" y="143.50"></text></g><g><title>implementations_of_trait (200,042 samples, 0.20%)</title><rect x="69.6716%" y="117" width="0.1967%" height="15" fill="rgb(244,70,9)"/><text x="69.9216%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (124,470 samples, 0.12%)</title><rect x="69.7459%" y="101" width="0.1224%" height="15" fill="rgb(217,125,39)"/><text x="69.9959%" y="111.50"></text></g><g><title>analysis (66,862,835 samples, 65.74%)</title><rect x="4.1866%" y="197" width="65.7426%" height="15" fill="rgb(235,36,10)"/><text x="4.4366%" y="207.50">analysis</text></g><g><title>type_check_crate (48,784,533 samples, 47.97%)</title><rect x="21.9620%" y="181" width="47.9672%" height="15" fill="rgb(251,123,47)"/><text x="22.2120%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,179,062 samples, 6.08%)</title><rect x="63.8537%" y="165" width="6.0755%" height="15" fill="rgb(221,13,13)"/><text x="64.1037%" y="175.50">wf_check..</text></g><g><title>check_item_well_formed (2,832,908 samples, 2.79%)</title><rect x="67.1438%" y="149" width="2.7854%" height="15" fill="rgb(238,131,9)"/><text x="67.3938%" y="159.50">ch..</text></g><g><title>codegen_module (298,223 samples, 0.29%)</title><rect x="70.5733%" y="181" width="0.2932%" height="15" fill="rgb(211,50,8)"/><text x="70.8233%" y="191.50"></text></g><g><title>native_libraries (108,311 samples, 0.11%)</title><rect x="70.9078%" y="181" width="0.1065%" height="15" fill="rgb(245,182,24)"/><text x="71.1578%" y="191.50"></text></g><g><title>codegen_crate (1,112,492 samples, 1.09%)</title><rect x="69.9412%" y="197" width="1.0939%" height="15" fill="rgb(242,14,37)"/><text x="70.1912%" y="207.50"></text></g><g><title>LLVM_module_codegen (3,271,732 samples, 3.22%)</title><rect x="71.0494%" y="181" width="3.2169%" height="15" fill="rgb(246,228,12)"/><text x="71.2994%" y="191.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (3,213,332 samples, 3.16%)</title><rect x="71.1068%" y="165" width="3.1595%" height="15" fill="rgb(213,55,15)"/><text x="71.3568%" y="175.50">LLV..</text></g><g><title>codegen_module_optimize (3,453,024 samples, 3.40%)</title><rect x="71.0351%" y="197" width="3.3952%" height="15" fill="rgb(209,9,3)"/><text x="71.2851%" y="207.50">cod..</text></g><g><title>LLVM_module_optimize (166,682 samples, 0.16%)</title><rect x="74.2663%" y="181" width="0.1639%" height="15" fill="rgb(230,59,30)"/><text x="74.5163%" y="191.50"></text></g><g><title>macro_expand_crate (12,523,167 samples, 12.31%)</title><rect x="74.8234%" y="181" width="12.3133%" height="15" fill="rgb(209,121,21)"/><text x="75.0734%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,498,337 samples, 12.29%)</title><rect x="74.8478%" y="165" width="12.2889%" height="15" fill="rgb(220,109,13)"/><text x="75.0978%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (3,012,350 samples, 2.96%)</title><rect x="84.1748%" y="149" width="2.9619%" height="15" fill="rgb(232,18,1)"/><text x="84.4248%" y="159.50">met..</text></g><g><title>metadata_register_crate (2,138,282 samples, 2.10%)</title><rect x="85.0343%" y="133" width="2.1025%" height="15" fill="rgb(215,41,42)"/><text x="85.2843%" y="143.50">m..</text></g><g><title>metadata_register_crate (809,627 samples, 0.80%)</title><rect x="86.3406%" y="117" width="0.7961%" height="15" fill="rgb(224,123,36)"/><text x="86.5906%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (136,791 samples, 0.13%)</title><rect x="87.1415%" y="181" width="0.1345%" height="15" fill="rgb(240,125,3)"/><text x="87.3915%" y="191.50"></text></g><g><title>finalize_imports (286,323 samples, 0.28%)</title><rect x="87.2845%" y="165" width="0.2815%" height="15" fill="rgb(205,98,50)"/><text x="87.5345%" y="175.50"></text></g><g><title>late_resolve_crate (813,728 samples, 0.80%)</title><rect x="87.5767%" y="165" width="0.8001%" height="15" fill="rgb(205,185,37)"/><text x="87.8267%" y="175.50"></text></g><g><title>configure_and_expand (14,256,214 samples, 14.02%)</title><rect x="74.4302%" y="197" width="14.0174%" height="15" fill="rgb(238,207,15)"/><text x="74.6802%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,191,512 samples, 1.17%)</title><rect x="87.2760%" y="181" width="1.1715%" height="15" fill="rgb(213,199,42)"/><text x="87.5260%" y="191.50"></text></g><g><title>early_lint_checks (180,152 samples, 0.18%)</title><rect x="88.5586%" y="197" width="0.1771%" height="15" fill="rgb(235,201,11)"/><text x="88.8086%" y="207.50"></text></g><g><title>free_global_ctxt (3,266,213 samples, 3.21%)</title><rect x="88.7357%" y="197" width="3.2115%" height="15" fill="rgb(207,46,11)"/><text x="88.9857%" y="207.50">fre..</text></g><g><title>layout_of (275,701 samples, 0.27%)</title><rect x="93.3565%" y="165" width="0.2711%" height="15" fill="rgb(241,35,35)"/><text x="93.6065%" y="175.50"></text></g><g><title>is_copy_raw (180,302 samples, 0.18%)</title><rect x="94.6738%" y="133" width="0.1773%" height="15" fill="rgb(243,32,47)"/><text x="94.9238%" y="143.50"></text></g><g><title>evaluate_obligation (144,651 samples, 0.14%)</title><rect x="94.7089%" y="117" width="0.1422%" height="15" fill="rgb(247,202,23)"/><text x="94.9589%" y="127.50"></text></g><g><title>needs_drop_raw (306,334 samples, 0.30%)</title><rect x="94.6508%" y="149" width="0.3012%" height="15" fill="rgb(219,102,11)"/><text x="94.9008%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (102,562 samples, 0.10%)</title><rect x="94.8511%" y="133" width="0.1008%" height="15" fill="rgb(243,110,44)"/><text x="95.1011%" y="143.50"></text></g><g><title>optimized_mir (2,480,255 samples, 2.44%)</title><rect x="92.5764%" y="181" width="2.4387%" height="15" fill="rgb(222,74,54)"/><text x="92.8264%" y="191.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,411,175 samples, 1.39%)</title><rect x="93.6276%" y="165" width="1.3875%" height="15" fill="rgb(216,99,12)"/><text x="93.8776%" y="175.50"></text></g><g><title>generate_crate_metadata (3,176,842 samples, 3.12%)</title><rect x="91.9472%" y="197" width="3.1236%" height="15" fill="rgb(226,22,26)"/><text x="92.1972%" y="207.50">gen..</text></g><g><title>hir_lowering (1,394,244 samples, 1.37%)</title><rect x="95.0708%" y="197" width="1.3709%" height="15" fill="rgb(217,163,10)"/><text x="95.3208%" y="207.50"></text></g><g><title>link_crate (541,115 samples, 0.53%)</title><rect x="96.4580%" y="181" width="0.5320%" height="15" fill="rgb(213,25,53)"/><text x="96.7080%" y="191.50"></text></g><g><title>link_binary (524,625 samples, 0.52%)</title><rect x="96.4742%" y="165" width="0.5158%" height="15" fill="rgb(252,105,26)"/><text x="96.7242%" y="175.50"></text></g><g><title>link_rlib (323,543 samples, 0.32%)</title><rect x="96.6719%" y="149" width="0.3181%" height="15" fill="rgb(220,39,43)"/><text x="96.9219%" y="159.50"></text></g><g><title>link (564,745 samples, 0.56%)</title><rect x="96.4417%" y="197" width="0.5553%" height="15" fill="rgb(229,68,48)"/><text x="96.6917%" y="207.50"></text></g><g><title>parse_crate (1,752,738 samples, 1.72%)</title><rect x="96.9970%" y="197" width="1.7234%" height="15" fill="rgb(252,8,32)"/><text x="97.2470%" y="207.50"></text></g><g><title>prepare_outputs (346,074 samples, 0.34%)</title><rect x="98.7305%" y="197" width="0.3403%" height="15" fill="rgb(223,20,43)"/><text x="98.9805%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (520,625 samples, 0.51%)</title><rect x="99.0708%" y="197" width="0.5119%" height="15" fill="rgb(229,81,49)"/><text x="99.3208%" y="207.50"></text></g><g><title>setup_global_ctxt (138,821 samples, 0.14%)</title><rect x="99.5836%" y="197" width="0.1365%" height="15" fill="rgb(236,28,36)"/><text x="99.8336%" y="207.50"></text></g><g><title>all (101,704,017 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (101,704,017 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (284,723 samples, 0.28%)</title><rect x="99.7200%" y="197" width="0.2800%" height="15" fill="rgb(233,201,37)"/><text x="99.9700%" y="207.50"></text></g></svg></svg>