<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,247,486 samples, 8.90%)</title><rect x="0.9966%" y="181" width="8.9050%" height="15" fill="rgb(227,0,7)"/><text x="1.2466%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (147,571 samples, 0.18%)</title><rect x="12.0984%" y="69" width="0.1813%" height="15" fill="rgb(217,0,24)"/><text x="12.3484%" y="79.50"></text></g><g><title>is_copy_raw (132,411 samples, 0.16%)</title><rect x="12.1170%" y="53" width="0.1627%" height="15" fill="rgb(221,193,54)"/><text x="12.3670%" y="63.50"></text></g><g><title>evaluate_obligation (121,781 samples, 0.15%)</title><rect x="12.1301%" y="37" width="0.1496%" height="15" fill="rgb(248,212,6)"/><text x="12.3801%" y="47.50"></text></g><g><title>mir_const (745,938 samples, 0.92%)</title><rect x="11.4762%" y="117" width="0.9165%" height="15" fill="rgb(208,68,35)"/><text x="11.7262%" y="127.50"></text></g><g><title>unsafety_check_result (611,067 samples, 0.75%)</title><rect x="11.6419%" y="101" width="0.7508%" height="15" fill="rgb(232,128,0)"/><text x="11.8919%" y="111.50"></text></g><g><title>mir_built (546,607 samples, 0.67%)</title><rect x="11.7211%" y="85" width="0.6716%" height="15" fill="rgb(207,160,47)"/><text x="11.9711%" y="95.50"></text></g><g><title>mir_promoted (867,018 samples, 1.07%)</title><rect x="11.3387%" y="133" width="1.0653%" height="15" fill="rgb(228,23,34)"/><text x="11.5887%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,909,911 samples, 2.35%)</title><rect x="10.1168%" y="165" width="2.3467%" height="15" fill="rgb(218,30,26)"/><text x="10.3668%" y="175.50">M..</text></g><g><title>mir_borrowck (1,893,981 samples, 2.33%)</title><rect x="10.1364%" y="149" width="2.3271%" height="15" fill="rgb(220,122,19)"/><text x="10.3864%" y="159.50">m..</text></g><g><title>hir_module_items (147,502 samples, 0.18%)</title><rect x="12.4689%" y="165" width="0.1812%" height="15" fill="rgb(250,228,42)"/><text x="12.7189%" y="175.50"></text></g><g><title>get_lang_items (87,191 samples, 0.11%)</title><rect x="12.9464%" y="117" width="0.1071%" height="15" fill="rgb(240,193,28)"/><text x="13.1964%" y="127.50"></text></g><g><title>item_attrs (99,562 samples, 0.12%)</title><rect x="13.1926%" y="85" width="0.1223%" height="15" fill="rgb(216,20,37)"/><text x="13.4426%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,212 samples, 0.11%)</title><rect x="13.2065%" y="69" width="0.1084%" height="15" fill="rgb(206,188,39)"/><text x="13.4565%" y="79.50"></text></g><g><title>codegen_fn_attrs (181,052 samples, 0.22%)</title><rect x="13.1570%" y="101" width="0.2225%" height="15" fill="rgb(217,207,13)"/><text x="13.4070%" y="111.50"></text></g><g><title>should_inherit_track_caller (270,103 samples, 0.33%)</title><rect x="13.0535%" y="117" width="0.3319%" height="15" fill="rgb(231,73,38)"/><text x="13.3035%" y="127.50"></text></g><g><title>codegen_fn_attrs (486,716 samples, 0.60%)</title><rect x="12.8253%" y="133" width="0.5980%" height="15" fill="rgb(225,20,46)"/><text x="13.0753%" y="143.50"></text></g><g><title>check_mod_attrs (598,027 samples, 0.73%)</title><rect x="12.6889%" y="149" width="0.7348%" height="15" fill="rgb(210,31,41)"/><text x="12.9389%" y="159.50"></text></g><g><title>lookup_deprecation_entry (106,842 samples, 0.13%)</title><rect x="13.6790%" y="133" width="0.1313%" height="15" fill="rgb(221,200,47)"/><text x="13.9290%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (302,734 samples, 0.37%)</title><rect x="13.5493%" y="149" width="0.3720%" height="15" fill="rgb(226,26,5)"/><text x="13.7993%" y="159.50"></text></g><g><title>misc_checking_1 (1,090,232 samples, 1.34%)</title><rect x="12.6506%" y="165" width="1.3396%" height="15" fill="rgb(249,33,26)"/><text x="12.9006%" y="175.50"></text></g><g><title>misc_checking_2 (176,492 samples, 0.22%)</title><rect x="13.9902%" y="165" width="0.2169%" height="15" fill="rgb(235,183,28)"/><text x="14.2402%" y="175.50"></text></g><g><title>match_checking (114,941 samples, 0.14%)</title><rect x="14.0658%" y="149" width="0.1412%" height="15" fill="rgb(221,5,38)"/><text x="14.3158%" y="159.50"></text></g><g><title>check_match (109,471 samples, 0.13%)</title><rect x="14.0725%" y="133" width="0.1345%" height="15" fill="rgb(247,18,42)"/><text x="14.3225%" y="143.50"></text></g><g><title>crate_lints (1,728,218 samples, 2.12%)</title><rect x="14.3563%" y="133" width="2.1235%" height="15" fill="rgb(241,131,45)"/><text x="14.6063%" y="143.50">c..</text></g><g><title>type_of (1,008,413 samples, 1.24%)</title><rect x="15.2408%" y="117" width="1.2390%" height="15" fill="rgb(249,31,29)"/><text x="15.4908%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (771,398 samples, 0.95%)</title><rect x="15.5320%" y="101" width="0.9478%" height="15" fill="rgb(225,111,53)"/><text x="15.7820%" y="111.50"></text></g><g><title>lint_checking (1,789,459 samples, 2.20%)</title><rect x="14.3546%" y="149" width="2.1987%" height="15" fill="rgb(238,160,17)"/><text x="14.6046%" y="159.50">l..</text></g><g><title>privacy_checking_modules (165,212 samples, 0.20%)</title><rect x="16.6300%" y="149" width="0.2030%" height="15" fill="rgb(214,148,48)"/><text x="16.8800%" y="159.50"></text></g><g><title>check_mod_privacy (163,472 samples, 0.20%)</title><rect x="16.6321%" y="133" width="0.2009%" height="15" fill="rgb(232,36,49)"/><text x="16.8821%" y="143.50"></text></g><g><title>misc_checking_3 (2,147,713 samples, 2.64%)</title><rect x="14.2071%" y="165" width="2.6389%" height="15" fill="rgb(209,103,24)"/><text x="14.4571%" y="175.50">mi..</text></g><g><title>impl_parent (100,071 samples, 0.12%)</title><rect x="17.2415%" y="69" width="0.1230%" height="15" fill="rgb(229,88,8)"/><text x="17.4915%" y="79.50"></text></g><g><title>impl_trait_ref (331,336 samples, 0.41%)</title><rect x="17.3645%" y="69" width="0.4071%" height="15" fill="rgb(213,181,19)"/><text x="17.6145%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (282,676 samples, 0.35%)</title><rect x="17.4243%" y="53" width="0.3473%" height="15" fill="rgb(254,191,54)"/><text x="17.6743%" y="63.50"></text></g><g><title>adt_destructor (702,718 samples, 0.86%)</title><rect x="16.9957%" y="117" width="0.8634%" height="15" fill="rgb(241,83,37)"/><text x="17.2457%" y="127.50"></text></g><g><title>coherent_trait (697,608 samples, 0.86%)</title><rect x="17.0020%" y="101" width="0.8571%" height="15" fill="rgb(233,36,39)"/><text x="17.2520%" y="111.50"></text></g><g><title>specialization_graph_of (694,018 samples, 0.85%)</title><rect x="17.0064%" y="85" width="0.8527%" height="15" fill="rgb(226,3,54)"/><text x="17.2564%" y="95.50"></text></g><g><title>param_env (134,761 samples, 0.17%)</title><rect x="17.8591%" y="117" width="0.1656%" height="15" fill="rgb(245,192,40)"/><text x="18.1091%" y="127.50"></text></g><g><title>impl_parent (4,074,490 samples, 5.01%)</title><rect x="28.1227%" y="101" width="5.0063%" height="15" fill="rgb(238,167,29)"/><text x="28.3727%" y="111.50">impl_p..</text></g><g><title>metadata_decode_entry_impl_parent (2,143,705 samples, 2.63%)</title><rect x="30.4950%" y="85" width="2.6340%" height="15" fill="rgb(232,182,51)"/><text x="30.7450%" y="95.50">me..</text></g><g><title>impl_trait_ref (10,658,360 samples, 13.10%)</title><rect x="33.1290%" y="101" width="13.0959%" height="15" fill="rgb(231,60,39)"/><text x="33.3790%" y="111.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (8,679,469 samples, 10.66%)</title><rect x="35.5605%" y="85" width="10.6645%" height="15" fill="rgb(208,69,12)"/><text x="35.8105%" y="95.50">metadata_decode_..</text></g><g><title>coherent_trait (25,435,832 samples, 31.25%)</title><rect x="16.9219%" y="133" width="31.2530%" height="15" fill="rgb(235,93,37)"/><text x="17.1719%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (24,538,313 samples, 30.15%)</title><rect x="18.0247%" y="117" width="30.1502%" height="15" fill="rgb(213,116,39)"/><text x="18.2747%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,583,399 samples, 1.95%)</title><rect x="46.2294%" y="101" width="1.9455%" height="15" fill="rgb(222,207,29)"/><text x="46.4794%" y="111.50">t..</text></g><g><title>implementations_of_trait (393,223 samples, 0.48%)</title><rect x="47.6917%" y="85" width="0.4832%" height="15" fill="rgb(206,96,30)"/><text x="47.9417%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (329,822 samples, 0.41%)</title><rect x="47.7696%" y="69" width="0.4053%" height="15" fill="rgb(218,138,4)"/><text x="48.0196%" y="79.50"></text></g><g><title>coherence_checking (25,520,032 samples, 31.36%)</title><rect x="16.8837%" y="149" width="31.3564%" height="15" fill="rgb(250,191,14)"/><text x="17.1337%" y="159.50">coherence_checking</text></g><g><title>item_bodies_checking (1,051,211 samples, 1.29%)</title><rect x="48.2798%" y="149" width="1.2916%" height="15" fill="rgb(239,60,40)"/><text x="48.5298%" y="159.50"></text></g><g><title>typeck_item_bodies (1,049,291 samples, 1.29%)</title><rect x="48.2822%" y="133" width="1.2893%" height="15" fill="rgb(206,27,48)"/><text x="48.5322%" y="143.50"></text></g><g><title>typeck (1,036,521 samples, 1.27%)</title><rect x="48.2979%" y="117" width="1.2736%" height="15" fill="rgb(225,35,8)"/><text x="48.5479%" y="127.50"></text></g><g><title>item_types_checking (265,403 samples, 0.33%)</title><rect x="49.5714%" y="149" width="0.3261%" height="15" fill="rgb(250,213,24)"/><text x="49.8214%" y="159.50"></text></g><g><title>check_mod_item_types (262,763 samples, 0.32%)</title><rect x="49.5747%" y="133" width="0.3229%" height="15" fill="rgb(247,123,22)"/><text x="49.8247%" y="143.50"></text></g><g><title>late_bound_vars_map (119,040 samples, 0.15%)</title><rect x="50.9845%" y="101" width="0.1463%" height="15" fill="rgb(231,138,38)"/><text x="51.2345%" y="111.50"></text></g><g><title>resolve_lifetimes (92,430 samples, 0.11%)</title><rect x="51.0172%" y="85" width="0.1136%" height="15" fill="rgb(231,145,46)"/><text x="51.2672%" y="95.50"></text></g><g><title>fn_sig (882,388 samples, 1.08%)</title><rect x="50.1244%" y="117" width="1.0842%" height="15" fill="rgb(251,118,11)"/><text x="50.3744%" y="127.50"></text></g><g><title>named_region_map (197,761 samples, 0.24%)</title><rect x="51.3187%" y="101" width="0.2430%" height="15" fill="rgb(217,147,25)"/><text x="51.5687%" y="111.50"></text></g><g><title>resolve_lifetimes (187,961 samples, 0.23%)</title><rect x="51.3307%" y="85" width="0.2309%" height="15" fill="rgb(247,81,37)"/><text x="51.5807%" y="95.50"></text></g><g><title>generics_of (303,813 samples, 0.37%)</title><rect x="51.2086%" y="117" width="0.3733%" height="15" fill="rgb(209,12,38)"/><text x="51.4586%" y="127.50"></text></g><g><title>impl_trait_ref (82,120 samples, 0.10%)</title><rect x="51.5819%" y="117" width="0.1009%" height="15" fill="rgb(227,1,9)"/><text x="51.8319%" y="127.50"></text></g><g><title>explicit_predicates_of (108,491 samples, 0.13%)</title><rect x="51.7794%" y="85" width="0.1333%" height="15" fill="rgb(248,47,43)"/><text x="52.0294%" y="95.50"></text></g><g><title>predicates_of (232,006 samples, 0.29%)</title><rect x="51.6828%" y="117" width="0.2851%" height="15" fill="rgb(221,10,30)"/><text x="51.9328%" y="127.50"></text></g><g><title>predicates_defined_on (200,544 samples, 0.25%)</title><rect x="51.7214%" y="101" width="0.2464%" height="15" fill="rgb(210,229,1)"/><text x="51.9714%" y="111.50"></text></g><g><title>super_predicates_of (83,791 samples, 0.10%)</title><rect x="51.9678%" y="117" width="0.1030%" height="15" fill="rgb(222,148,37)"/><text x="52.2178%" y="127.50"></text></g><g><title>type_collecting (1,922,670 samples, 2.36%)</title><rect x="49.8984%" y="149" width="2.3624%" height="15" fill="rgb(234,67,33)"/><text x="50.1484%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (1,903,860 samples, 2.34%)</title><rect x="49.9215%" y="133" width="2.3393%" height="15" fill="rgb(247,98,35)"/><text x="50.1715%" y="143.50">c..</text></g><g><title>type_of (152,251 samples, 0.19%)</title><rect x="52.0737%" y="117" width="0.1871%" height="15" fill="rgb(247,138,52)"/><text x="52.3237%" y="127.50"></text></g><g><title>evaluate_obligation (271,904 samples, 0.33%)</title><rect x="53.1285%" y="117" width="0.3341%" height="15" fill="rgb(213,79,30)"/><text x="53.3785%" y="127.50"></text></g><g><title>implied_outlives_bounds (104,560 samples, 0.13%)</title><rect x="53.4626%" y="117" width="0.1285%" height="15" fill="rgb(246,177,23)"/><text x="53.7126%" y="127.50"></text></g><g><title>evaluate_obligation (203,542 samples, 0.25%)</title><rect x="53.7839%" y="101" width="0.2501%" height="15" fill="rgb(230,62,27)"/><text x="54.0339%" y="111.50"></text></g><g><title>layout_of (102,921 samples, 0.13%)</title><rect x="54.0947%" y="101" width="0.1265%" height="15" fill="rgb(216,154,8)"/><text x="54.3447%" y="111.50"></text></g><g><title>object_safety_violations (607,346 samples, 0.75%)</title><rect x="53.5911%" y="117" width="0.7462%" height="15" fill="rgb(244,35,45)"/><text x="53.8411%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,825,438 samples, 2.24%)</title><rect x="52.3373%" y="133" width="2.2429%" height="15" fill="rgb(251,115,12)"/><text x="52.5873%" y="143.50">c..</text></g><g><title>evaluate_obligation (171,861 samples, 0.21%)</title><rect x="55.3449%" y="117" width="0.2112%" height="15" fill="rgb(240,54,50)"/><text x="55.5949%" y="127.50"></text></g><g><title>param_env (108,250 samples, 0.13%)</title><rect x="55.6317%" y="117" width="0.1330%" height="15" fill="rgb(233,84,52)"/><text x="55.8817%" y="127.50"></text></g><g><title>predicates_of (90,010 samples, 0.11%)</title><rect x="55.7647%" y="117" width="0.1106%" height="15" fill="rgb(207,117,47)"/><text x="56.0147%" y="127.50"></text></g><g><title>check_item_well_formed (1,119,740 samples, 1.38%)</title><rect x="54.5802%" y="133" width="1.3758%" height="15" fill="rgb(249,43,39)"/><text x="54.8302%" y="143.50"></text></g><g><title>analysis (37,548,981 samples, 46.14%)</title><rect x="9.9015%" y="181" width="46.1364%" height="15" fill="rgb(209,38,44)"/><text x="10.1515%" y="191.50">analysis</text></g><g><title>type_check_crate (31,897,150 samples, 39.19%)</title><rect x="16.8459%" y="165" width="39.1920%" height="15" fill="rgb(236,212,23)"/><text x="17.0959%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,073,133 samples, 3.78%)</title><rect x="52.2620%" y="149" width="3.7760%" height="15" fill="rgb(242,79,21)"/><text x="52.5120%" y="159.50">wf_c..</text></g><g><title>fn_abi_of_instance (151,311 samples, 0.19%)</title><rect x="57.8975%" y="149" width="0.1859%" height="15" fill="rgb(211,96,35)"/><text x="58.1475%" y="159.50"></text></g><g><title>layout_of (89,611 samples, 0.11%)</title><rect x="57.9733%" y="133" width="0.1101%" height="15" fill="rgb(253,215,40)"/><text x="58.2233%" y="143.50"></text></g><g><title>codegen_module (1,227,893 samples, 1.51%)</title><rect x="56.6056%" y="165" width="1.5087%" height="15" fill="rgb(211,81,21)"/><text x="56.8556%" y="175.50"></text></g><g><title>codegen_crate (1,747,508 samples, 2.15%)</title><rect x="56.0528%" y="181" width="2.1472%" height="15" fill="rgb(208,190,38)"/><text x="56.3028%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (6,177,896 samples, 7.59%)</title><rect x="58.2217%" y="165" width="7.5908%" height="15" fill="rgb(235,213,38)"/><text x="58.4717%" y="175.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (5,986,233 samples, 7.36%)</title><rect x="58.4572%" y="149" width="7.3553%" height="15" fill="rgb(237,122,38)"/><text x="58.7072%" y="159.50">LLVM_modul..</text></g><g><title>codegen_module_optimize (7,066,735 samples, 8.68%)</title><rect x="58.2000%" y="181" width="8.6829%" height="15" fill="rgb(244,218,35)"/><text x="58.4500%" y="191.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (871,119 samples, 1.07%)</title><rect x="65.8125%" y="165" width="1.0703%" height="15" fill="rgb(240,68,47)"/><text x="66.0625%" y="175.50"></text></g><g><title>AST_validation (88,411 samples, 0.11%)</title><rect x="67.1446%" y="165" width="0.1086%" height="15" fill="rgb(210,16,53)"/><text x="67.3946%" y="175.50"></text></g><g><title>crate_injection (103,861 samples, 0.13%)</title><rect x="67.2906%" y="165" width="0.1276%" height="15" fill="rgb(235,124,12)"/><text x="67.5406%" y="175.50"></text></g><g><title>macro_expand_crate (11,897,327 samples, 14.62%)</title><rect x="67.4182%" y="165" width="14.6182%" height="15" fill="rgb(224,169,11)"/><text x="67.6682%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (11,881,787 samples, 14.60%)</title><rect x="67.4373%" y="149" width="14.5991%" height="15" fill="rgb(250,166,2)"/><text x="67.6873%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,617,358 samples, 3.22%)</title><rect x="78.8205%" y="133" width="3.2159%" height="15" fill="rgb(242,216,29)"/><text x="79.0705%" y="143.50">met..</text></g><g><title>metadata_register_crate (929,290 samples, 1.14%)</title><rect x="80.8946%" y="117" width="1.1418%" height="15" fill="rgb(230,116,27)"/><text x="81.1446%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (105,731 samples, 0.13%)</title><rect x="82.0419%" y="165" width="0.1299%" height="15" fill="rgb(228,99,48)"/><text x="82.2919%" y="175.50"></text></g><g><title>finalize_macro_resolutions (199,142 samples, 0.24%)</title><rect x="82.2234%" y="149" width="0.2447%" height="15" fill="rgb(253,11,6)"/><text x="82.4734%" y="159.50"></text></g><g><title>late_resolve_crate (1,114,382 samples, 1.37%)</title><rect x="82.4681%" y="149" width="1.3692%" height="15" fill="rgb(247,143,39)"/><text x="82.7181%" y="159.50"></text></g><g><title>configure_and_expand (13,857,988 samples, 17.03%)</title><rect x="66.8829%" y="181" width="17.0273%" height="15" fill="rgb(236,97,10)"/><text x="67.1329%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,414,755 samples, 1.74%)</title><rect x="82.1718%" y="165" width="1.7383%" height="15" fill="rgb(233,208,19)"/><text x="82.4218%" y="175.50"></text></g><g><title>early_lint_checks (165,542 samples, 0.20%)</title><rect x="84.0164%" y="181" width="0.2034%" height="15" fill="rgb(216,164,2)"/><text x="84.2664%" y="191.50"></text></g><g><title>free_global_ctxt (2,654,618 samples, 3.26%)</title><rect x="84.2198%" y="181" width="3.2617%" height="15" fill="rgb(220,129,5)"/><text x="84.4698%" y="191.50">fre..</text></g><g><title>optimized_mir (276,943 samples, 0.34%)</title><rect x="88.1183%" y="101" width="0.3403%" height="15" fill="rgb(242,17,10)"/><text x="88.3683%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (93,330 samples, 0.11%)</title><rect x="88.3439%" y="85" width="0.1147%" height="15" fill="rgb(242,107,0)"/><text x="88.5939%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (312,343 samples, 0.38%)</title><rect x="88.0761%" y="117" width="0.3838%" height="15" fill="rgb(251,28,31)"/><text x="88.3261%" y="127.50"></text></g><g><title>monomorphization_collector (334,803 samples, 0.41%)</title><rect x="88.0735%" y="133" width="0.4114%" height="15" fill="rgb(233,223,10)"/><text x="88.3235%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (472,715 samples, 0.58%)</title><rect x="88.0516%" y="149" width="0.5808%" height="15" fill="rgb(215,21,27)"/><text x="88.3016%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (120,072 samples, 0.15%)</title><rect x="88.4849%" y="133" width="0.1475%" height="15" fill="rgb(232,23,21)"/><text x="88.7349%" y="143.50"></text></g><g><title>exported_symbols (519,946 samples, 0.64%)</title><rect x="88.0295%" y="165" width="0.6389%" height="15" fill="rgb(244,5,23)"/><text x="88.2795%" y="175.50"></text></g><g><title>eval_to_const_value_raw (108,111 samples, 0.13%)</title><rect x="89.1336%" y="117" width="0.1328%" height="15" fill="rgb(226,81,46)"/><text x="89.3836%" y="127.50"></text></g><g><title>eval_to_const_value_raw (99,161 samples, 0.12%)</title><rect x="89.1446%" y="101" width="0.1218%" height="15" fill="rgb(247,70,30)"/><text x="89.3946%" y="111.50"></text></g><g><title>eval_to_allocation_raw (92,211 samples, 0.11%)</title><rect x="89.1531%" y="85" width="0.1133%" height="15" fill="rgb(212,68,19)"/><text x="89.4031%" y="95.50"></text></g><g><title>layout_of (212,122 samples, 0.26%)</title><rect x="89.0450%" y="149" width="0.2606%" height="15" fill="rgb(240,187,13)"/><text x="89.2950%" y="159.50"></text></g><g><title>layout_of (169,192 samples, 0.21%)</title><rect x="89.0978%" y="133" width="0.2079%" height="15" fill="rgb(223,113,26)"/><text x="89.3478%" y="143.50"></text></g><g><title>optimized_mir (840,859 samples, 1.03%)</title><rect x="88.7282%" y="165" width="1.0332%" height="15" fill="rgb(206,192,2)"/><text x="88.9782%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (370,855 samples, 0.46%)</title><rect x="89.3056%" y="149" width="0.4557%" height="15" fill="rgb(241,108,4)"/><text x="89.5556%" y="159.50"></text></g><g><title>generate_crate_metadata (1,871,500 samples, 2.30%)</title><rect x="87.4816%" y="181" width="2.2995%" height="15" fill="rgb(247,173,49)"/><text x="87.7316%" y="191.50">g..</text></g><g><title>hir_lowering (925,659 samples, 1.14%)</title><rect x="89.7811%" y="181" width="1.1374%" height="15" fill="rgb(224,114,35)"/><text x="90.0311%" y="191.50"></text></g><g><title>finish_ongoing_codegen (4,337,756 samples, 5.33%)</title><rect x="90.9346%" y="165" width="5.3298%" height="15" fill="rgb(245,159,27)"/><text x="91.1846%" y="175.50">finish_..</text></g><g><title>link_crate (621,797 samples, 0.76%)</title><rect x="96.2644%" y="165" width="0.7640%" height="15" fill="rgb(245,172,44)"/><text x="96.5144%" y="175.50"></text></g><g><title>link_binary (609,936 samples, 0.75%)</title><rect x="96.2790%" y="149" width="0.7494%" height="15" fill="rgb(236,23,11)"/><text x="96.5290%" y="159.50"></text></g><g><title>link_rlib (370,654 samples, 0.46%)</title><rect x="96.5730%" y="133" width="0.4554%" height="15" fill="rgb(205,117,38)"/><text x="96.8230%" y="143.50"></text></g><g><title>link (4,980,173 samples, 6.12%)</title><rect x="90.9184%" y="181" width="6.1191%" height="15" fill="rgb(237,72,25)"/><text x="91.1684%" y="191.50">link</text></g><g><title>parse_crate (1,152,943 samples, 1.42%)</title><rect x="97.0376%" y="181" width="1.4166%" height="15" fill="rgb(244,70,9)"/><text x="97.2876%" y="191.50"></text></g><g><title>prepare_outputs (376,524 samples, 0.46%)</title><rect x="98.4659%" y="181" width="0.4626%" height="15" fill="rgb(217,125,39)"/><text x="98.7159%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (455,035 samples, 0.56%)</title><rect x="98.9286%" y="181" width="0.5591%" height="15" fill="rgb(235,36,10)"/><text x="99.1786%" y="191.50"></text></g><g><title>setup_global_ctxt (154,331 samples, 0.19%)</title><rect x="99.4888%" y="181" width="0.1896%" height="15" fill="rgb(251,123,47)"/><text x="99.7388%" y="191.50"></text></g><g><title>all (81,386,927 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (81,386,927 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (261,703 samples, 0.32%)</title><rect x="99.6784%" y="181" width="0.3216%" height="15" fill="rgb(211,50,8)"/><text x="99.9284%" y="191.50"></text></g></svg></svg>