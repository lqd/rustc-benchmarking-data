<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (349,538,390 samples, 15.07%)</title><rect x="0.0257%" y="165" width="15.0693%" height="15" fill="rgb(227,0,7)"/><text x="0.2757%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (2,550,013 samples, 0.11%)</title><rect x="18.6246%" y="37" width="0.1099%" height="15" fill="rgb(217,0,24)"/><text x="18.8746%" y="47.50"></text></g><g><title>needs_drop_raw (3,833,029 samples, 0.17%)</title><rect x="18.5724%" y="53" width="0.1652%" height="15" fill="rgb(221,193,54)"/><text x="18.8224%" y="63.50"></text></g><g><title>resolve_instance (3,459,643 samples, 0.15%)</title><rect x="18.7377%" y="53" width="0.1492%" height="15" fill="rgb(248,212,6)"/><text x="18.9877%" y="63.50"></text></g><g><title>thir_body (4,294,426 samples, 0.19%)</title><rect x="18.8915%" y="53" width="0.1851%" height="15" fill="rgb(208,68,35)"/><text x="19.1415%" y="63.50"></text></g><g><title>mir_const (31,524,475 samples, 1.36%)</title><rect x="17.7210%" y="101" width="1.3591%" height="15" fill="rgb(232,128,0)"/><text x="17.9710%" y="111.50"></text></g><g><title>unsafety_check_result (27,541,056 samples, 1.19%)</title><rect x="17.8928%" y="85" width="1.1873%" height="15" fill="rgb(207,160,47)"/><text x="18.1428%" y="95.50"></text></g><g><title>mir_built (24,340,059 samples, 1.05%)</title><rect x="18.0308%" y="69" width="1.0493%" height="15" fill="rgb(228,23,34)"/><text x="18.2808%" y="79.50"></text></g><g><title>mir_promoted (34,871,474 samples, 1.50%)</title><rect x="17.5820%" y="117" width="1.5034%" height="15" fill="rgb(218,30,26)"/><text x="17.8320%" y="127.50"></text></g><g><title>type_op_prove_predicate (9,202,803 samples, 0.40%)</title><rect x="19.3028%" y="117" width="0.3968%" height="15" fill="rgb(220,122,19)"/><text x="19.5528%" y="127.50"></text></g><g><title>MIR_borrow_checking (106,071,999 samples, 4.57%)</title><rect x="15.1276%" y="149" width="4.5730%" height="15" fill="rgb(250,228,42)"/><text x="15.3776%" y="159.50">MIR_b..</text></g><g><title>mir_borrowck (105,702,305 samples, 4.56%)</title><rect x="15.1435%" y="133" width="4.5570%" height="15" fill="rgb(240,193,28)"/><text x="15.3935%" y="143.50">mir_b..</text></g><g><title>misc_checking_1 (2,503,895 samples, 0.11%)</title><rect x="19.7221%" y="149" width="0.1079%" height="15" fill="rgb(216,20,37)"/><text x="19.9721%" y="159.50"></text></g><g><title>misc_checking_2 (4,517,525 samples, 0.19%)</title><rect x="19.8301%" y="149" width="0.1948%" height="15" fill="rgb(206,188,39)"/><text x="20.0801%" y="159.50"></text></g><g><title>match_checking (2,551,285 samples, 0.11%)</title><rect x="19.9149%" y="133" width="0.1100%" height="15" fill="rgb(217,207,13)"/><text x="20.1649%" y="143.50"></text></g><g><title>check_match (2,466,125 samples, 0.11%)</title><rect x="19.9185%" y="117" width="0.1063%" height="15" fill="rgb(231,73,38)"/><text x="20.1685%" y="127.50"></text></g><g><title>specialization_graph_of (3,211,692 samples, 0.14%)</title><rect x="20.2051%" y="85" width="0.1385%" height="15" fill="rgb(225,20,46)"/><text x="20.4551%" y="95.50"></text></g><g><title>resolve_instance (3,370,474 samples, 0.15%)</title><rect x="20.1983%" y="101" width="0.1453%" height="15" fill="rgb(210,31,41)"/><text x="20.4483%" y="111.50"></text></g><g><title>crate_lints (7,917,910 samples, 0.34%)</title><rect x="20.0889%" y="117" width="0.3414%" height="15" fill="rgb(221,200,47)"/><text x="20.3389%" y="127.50"></text></g><g><title>lint_checking (9,668,417 samples, 0.42%)</title><rect x="20.0888%" y="133" width="0.4168%" height="15" fill="rgb(226,26,5)"/><text x="20.3388%" y="143.50"></text></g><g><title>privacy_checking_modules (3,439,995 samples, 0.15%)</title><rect x="20.5333%" y="133" width="0.1483%" height="15" fill="rgb(249,33,26)"/><text x="20.7833%" y="143.50"></text></g><g><title>check_mod_privacy (3,430,705 samples, 0.15%)</title><rect x="20.5337%" y="117" width="0.1479%" height="15" fill="rgb(235,183,28)"/><text x="20.7837%" y="127.50"></text></g><g><title>misc_checking_3 (15,257,463 samples, 0.66%)</title><rect x="20.0249%" y="149" width="0.6578%" height="15" fill="rgb(221,5,38)"/><text x="20.2749%" y="159.50"></text></g><g><title>evaluate_obligation (3,790,947 samples, 0.16%)</title><rect x="23.0404%" y="85" width="0.1634%" height="15" fill="rgb(247,18,42)"/><text x="23.2904%" y="95.50"></text></g><g><title>evaluate_obligation (7,670,783 samples, 0.33%)</title><rect x="25.7213%" y="69" width="0.3307%" height="15" fill="rgb(241,131,45)"/><text x="25.9713%" y="79.50"></text></g><g><title>typeck (65,954,174 samples, 2.84%)</title><rect x="23.3434%" y="85" width="2.8434%" height="15" fill="rgb(249,31,29)"/><text x="23.5934%" y="95.50">ty..</text></g><g><title>item_bodies_checking (126,332,032 samples, 5.45%)</title><rect x="20.7444%" y="133" width="5.4464%" height="15" fill="rgb(225,111,53)"/><text x="20.9944%" y="143.50">item_bo..</text></g><g><title>typeck_item_bodies (126,329,472 samples, 5.45%)</title><rect x="20.7445%" y="117" width="5.4463%" height="15" fill="rgb(238,160,17)"/><text x="20.9945%" y="127.50">typeck_..</text></g><g><title>typeck (126,110,850 samples, 5.44%)</title><rect x="20.7539%" y="101" width="5.4369%" height="15" fill="rgb(214,148,48)"/><text x="21.0039%" y="111.50">typeck</text></g><g><title>type_collecting (4,489,465 samples, 0.19%)</title><rect x="26.2396%" y="133" width="0.1935%" height="15" fill="rgb(232,36,49)"/><text x="26.4896%" y="143.50"></text></g><g><title>collect_mod_item_types (4,471,754 samples, 0.19%)</title><rect x="26.2404%" y="117" width="0.1928%" height="15" fill="rgb(209,103,24)"/><text x="26.4904%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,054,231 samples, 0.35%)</title><rect x="26.4519%" y="117" width="0.3472%" height="15" fill="rgb(229,88,8)"/><text x="26.7019%" y="127.50"></text></g><g><title>check_item_well_formed (3,039,488 samples, 0.13%)</title><rect x="26.7991%" y="117" width="0.1310%" height="15" fill="rgb(213,181,19)"/><text x="27.0491%" y="127.50"></text></g><g><title>analysis (275,708,986 samples, 11.89%)</title><rect x="15.0950%" y="165" width="11.8864%" height="15" fill="rgb(254,191,54)"/><text x="15.3450%" y="175.50">analysis</text></g><g><title>type_check_crate (146,101,431 samples, 6.30%)</title><rect x="20.6826%" y="149" width="6.2987%" height="15" fill="rgb(241,83,37)"/><text x="20.9326%" y="159.50">type_che..</text></g><g><title>wf_checking (12,702,558 samples, 0.55%)</title><rect x="26.4337%" y="133" width="0.5476%" height="15" fill="rgb(233,36,39)"/><text x="26.6837%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (7,594,564 samples, 0.33%)</title><rect x="37.3617%" y="133" width="0.3274%" height="15" fill="rgb(226,3,54)"/><text x="37.6117%" y="143.50"></text></g><g><title>const_caller_location (3,974,358 samples, 0.17%)</title><rect x="37.6891%" y="133" width="0.1713%" height="15" fill="rgb(245,192,40)"/><text x="37.9391%" y="143.50"></text></g><g><title>layout_of (2,929,886 samples, 0.13%)</title><rect x="38.4432%" y="117" width="0.1263%" height="15" fill="rgb(238,167,29)"/><text x="38.6932%" y="127.50"></text></g><g><title>predicates_of (3,188,505 samples, 0.14%)</title><rect x="38.8852%" y="101" width="0.1375%" height="15" fill="rgb(232,182,51)"/><text x="39.1352%" y="111.50"></text></g><g><title>predicates_defined_on (2,411,697 samples, 0.10%)</title><rect x="38.9187%" y="85" width="0.1040%" height="15" fill="rgb(231,60,39)"/><text x="39.1687%" y="95.50"></text></g><g><title>param_env (10,530,544 samples, 0.45%)</title><rect x="38.5696%" y="117" width="0.4540%" height="15" fill="rgb(208,69,12)"/><text x="38.8196%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,668,114 samples, 0.12%)</title><rect x="39.0235%" y="117" width="0.1150%" height="15" fill="rgb(235,93,37)"/><text x="39.2735%" y="127.50"></text></g><g><title>fn_abi_of_instance (29,922,819 samples, 1.29%)</title><rect x="37.8646%" y="133" width="1.2900%" height="15" fill="rgb(213,116,39)"/><text x="38.1146%" y="143.50"></text></g><g><title>layout_of (5,916,387 samples, 0.26%)</title><rect x="39.2103%" y="133" width="0.2551%" height="15" fill="rgb(222,207,29)"/><text x="39.4603%" y="143.50"></text></g><g><title>symbol_name (3,430,517 samples, 0.15%)</title><rect x="39.4663%" y="133" width="0.1479%" height="15" fill="rgb(206,96,30)"/><text x="39.7163%" y="143.50"></text></g><g><title>codegen_module (290,361,344 samples, 12.52%)</title><rect x="27.1341%" y="149" width="12.5181%" height="15" fill="rgb(218,138,4)"/><text x="27.3841%" y="159.50">codegen_module</text></g><g><title>codegen_crate (294,002,940 samples, 12.68%)</title><rect x="26.9816%" y="165" width="12.6750%" height="15" fill="rgb(250,191,14)"/><text x="27.2316%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,105,012,512 samples, 47.64%)</title><rect x="39.6654%" y="149" width="47.6393%" height="15" fill="rgb(239,60,40)"/><text x="39.9154%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,045,057,486 samples, 45.05%)</title><rect x="42.2502%" y="133" width="45.0545%" height="15" fill="rgb(206,27,48)"/><text x="42.5002%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,151,470,886 samples, 49.64%)</title><rect x="39.6566%" y="165" width="49.6422%" height="15" fill="rgb(225,35,8)"/><text x="39.9066%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (46,253,393 samples, 1.99%)</title><rect x="87.3047%" y="149" width="1.9941%" height="15" fill="rgb(250,213,24)"/><text x="87.5547%" y="159.50">L..</text></g><g><title>macro_expand_crate (21,083,542 samples, 0.91%)</title><rect x="89.3227%" y="149" width="0.9090%" height="15" fill="rgb(247,123,22)"/><text x="89.5727%" y="159.50"></text></g><g><title>expand_crate (21,076,092 samples, 0.91%)</title><rect x="89.3230%" y="133" width="0.9086%" height="15" fill="rgb(231,138,38)"/><text x="89.5730%" y="143.50"></text></g><g><title>late_resolve_crate (3,719,567 samples, 0.16%)</title><rect x="90.2410%" y="133" width="0.1604%" height="15" fill="rgb(231,145,46)"/><text x="90.4910%" y="143.50"></text></g><g><title>configure_and_expand (25,859,320 samples, 1.11%)</title><rect x="89.2988%" y="165" width="1.1148%" height="15" fill="rgb(251,118,11)"/><text x="89.5488%" y="175.50"></text></g><g><title>resolve_crate (4,194,902 samples, 0.18%)</title><rect x="90.2328%" y="149" width="0.1809%" height="15" fill="rgb(217,147,25)"/><text x="90.4828%" y="159.50"></text></g><g><title>free_global_ctxt (26,903,912 samples, 1.16%)</title><rect x="90.4688%" y="165" width="1.1599%" height="15" fill="rgb(247,81,37)"/><text x="90.7188%" y="175.50"></text></g><g><title>codegen_fn_attrs (3,730,066 samples, 0.16%)</title><rect x="92.3173%" y="85" width="0.1608%" height="15" fill="rgb(209,12,38)"/><text x="92.5673%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,420,146 samples, 0.23%)</title><rect x="93.0003%" y="69" width="0.2337%" height="15" fill="rgb(227,1,9)"/><text x="93.2503%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,977,921 samples, 0.56%)</title><rect x="93.2340%" y="69" width="0.5595%" height="15" fill="rgb(248,47,43)"/><text x="93.4840%" y="79.50"></text></g><g><title>optimized_mir (28,889,353 samples, 1.25%)</title><rect x="92.6114%" y="85" width="1.2455%" height="15" fill="rgb(221,10,30)"/><text x="92.8614%" y="95.50"></text></g><g><title>evaluate_obligation (2,726,201 samples, 0.12%)</title><rect x="94.7518%" y="53" width="0.1175%" height="15" fill="rgb(210,229,1)"/><text x="95.0018%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (20,416,230 samples, 0.88%)</title><rect x="94.0659%" y="69" width="0.8802%" height="15" fill="rgb(222,148,37)"/><text x="94.3159%" y="79.50"></text></g><g><title>specialization_graph_of (4,152,730 samples, 0.18%)</title><rect x="95.0942%" y="69" width="0.1790%" height="15" fill="rgb(234,67,33)"/><text x="95.3442%" y="79.50"></text></g><g><title>resolve_instance (33,686,391 samples, 1.45%)</title><rect x="93.8568%" y="85" width="1.4523%" height="15" fill="rgb(247,98,35)"/><text x="94.1068%" y="95.50"></text></g><g><title>normalize_projection_ty (2,599,565 samples, 0.11%)</title><rect x="95.4285%" y="69" width="0.1121%" height="15" fill="rgb(247,138,52)"/><text x="95.6785%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,412,105 samples, 0.23%)</title><rect x="95.3091%" y="85" width="0.2333%" height="15" fill="rgb(213,79,30)"/><text x="95.5591%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,361,639 samples, 0.14%)</title><rect x="95.5424%" y="85" width="0.1449%" height="15" fill="rgb(246,177,23)"/><text x="95.7924%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (3,229,512 samples, 0.14%)</title><rect x="95.6884%" y="85" width="0.1392%" height="15" fill="rgb(230,62,27)"/><text x="95.9384%" y="95.50"></text></g><g><title>upstream_monomorphizations (3,134,322 samples, 0.14%)</title><rect x="95.6925%" y="69" width="0.1351%" height="15" fill="rgb(216,154,8)"/><text x="95.9425%" y="79.50"></text></g><g><title>exported_symbols (2,670,646 samples, 0.12%)</title><rect x="95.7125%" y="53" width="0.1151%" height="15" fill="rgb(244,35,45)"/><text x="95.9625%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,663,366 samples, 0.11%)</title><rect x="95.7128%" y="37" width="0.1148%" height="15" fill="rgb(251,115,12)"/><text x="95.9628%" y="47.50"></text></g><g><title>specialization_graph_of (3,114,511 samples, 0.13%)</title><rect x="95.8621%" y="53" width="0.1343%" height="15" fill="rgb(240,54,50)"/><text x="96.1121%" y="63.50"></text></g><g><title>resolve_instance (3,283,284 samples, 0.14%)</title><rect x="95.8551%" y="69" width="0.1415%" height="15" fill="rgb(233,84,52)"/><text x="96.1051%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (97,566,682 samples, 4.21%)</title><rect x="91.7905%" y="101" width="4.2063%" height="15" fill="rgb(207,117,47)"/><text x="92.0405%" y="111.50">monom..</text></g><g><title>vtable_entries (3,924,200 samples, 0.17%)</title><rect x="95.8276%" y="85" width="0.1692%" height="15" fill="rgb(249,43,39)"/><text x="96.0776%" y="95.50"></text></g><g><title>monomorphization_collector (97,671,573 samples, 4.21%)</title><rect x="91.7904%" y="117" width="4.2108%" height="15" fill="rgb(209,38,44)"/><text x="92.0404%" y="127.50">monom..</text></g><g><title>assert_symbols_are_distinct (7,939,660 samples, 0.34%)</title><rect x="96.0017%" y="101" width="0.3423%" height="15" fill="rgb(236,212,23)"/><text x="96.2517%" y="111.50"></text></g><g><title>symbol_name (7,146,603 samples, 0.31%)</title><rect x="96.0359%" y="85" width="0.3081%" height="15" fill="rgb(242,79,21)"/><text x="96.2859%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (109,001,757 samples, 4.70%)</title><rect x="91.7878%" y="133" width="4.6993%" height="15" fill="rgb(211,96,35)"/><text x="92.0378%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (11,270,244 samples, 0.49%)</title><rect x="96.0012%" y="117" width="0.4859%" height="15" fill="rgb(253,215,40)"/><text x="96.2512%" y="127.50"></text></g><g><title>cgu_partitioning (3,318,094 samples, 0.14%)</title><rect x="96.3440%" y="101" width="0.1430%" height="15" fill="rgb(211,81,21)"/><text x="96.5940%" y="111.50"></text></g><g><title>exported_symbols (109,523,152 samples, 4.72%)</title><rect x="91.7733%" y="149" width="4.7218%" height="15" fill="rgb(208,190,38)"/><text x="92.0233%" y="159.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (9,610,393 samples, 0.41%)</title><rect x="96.8255%" y="133" width="0.4143%" height="15" fill="rgb(235,213,38)"/><text x="97.0755%" y="143.50"></text></g><g><title>optimized_mir (17,623,917 samples, 0.76%)</title><rect x="96.5025%" y="149" width="0.7598%" height="15" fill="rgb(237,122,38)"/><text x="96.7525%" y="159.50"></text></g><g><title>generate_crate_metadata (131,061,530 samples, 5.65%)</title><rect x="91.6286%" y="165" width="5.6503%" height="15" fill="rgb(244,218,35)"/><text x="91.8786%" y="175.50">generat..</text></g><g><title>hir_lowering (7,945,380 samples, 0.34%)</title><rect x="97.2790%" y="165" width="0.3425%" height="15" fill="rgb(240,68,47)"/><text x="97.5290%" y="175.50"></text></g><g><title>finish_ongoing_codegen (45,234,315 samples, 1.95%)</title><rect x="97.6228%" y="149" width="1.9501%" height="15" fill="rgb(210,16,53)"/><text x="97.8728%" y="159.50">f..</text></g><g><title>link_crate (6,064,641 samples, 0.26%)</title><rect x="99.5730%" y="149" width="0.2615%" height="15" fill="rgb(235,124,12)"/><text x="99.8230%" y="159.50"></text></g><g><title>link_binary (5,927,409 samples, 0.26%)</title><rect x="99.5789%" y="133" width="0.2555%" height="15" fill="rgb(224,169,11)"/><text x="99.8289%" y="143.50"></text></g><g><title>link_rlib (4,776,368 samples, 0.21%)</title><rect x="99.6285%" y="117" width="0.2059%" height="15" fill="rgb(250,166,2)"/><text x="99.8785%" y="127.50"></text></g><g><title>link (51,341,207 samples, 2.21%)</title><rect x="97.6215%" y="165" width="2.2134%" height="15" fill="rgb(242,216,29)"/><text x="97.8715%" y="175.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,791,998 samples, 0.12%)</title><rect x="99.8511%" y="165" width="0.1204%" height="15" fill="rgb(230,116,27)"/><text x="100.1011%" y="175.50"></text></g><g><title>all (2,319,540,818 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,319,540,818 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>