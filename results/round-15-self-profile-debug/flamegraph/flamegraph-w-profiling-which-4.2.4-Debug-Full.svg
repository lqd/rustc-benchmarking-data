<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (68,482,780 samples, 13.85%)</title><rect x="0.2032%" y="213" width="13.8473%" height="15" fill="rgb(227,0,7)"/><text x="0.4532%" y="223.50">LLVM_passes</text></g><g><title>needs_drop_raw (556,596 samples, 0.11%)</title><rect x="16.1046%" y="101" width="0.1125%" height="15" fill="rgb(217,0,24)"/><text x="16.3546%" y="111.50"></text></g><g><title>specialization_graph_of (772,568 samples, 0.16%)</title><rect x="16.2730%" y="85" width="0.1562%" height="15" fill="rgb(221,193,54)"/><text x="16.5230%" y="95.50"></text></g><g><title>resolve_instance (1,100,970 samples, 0.22%)</title><rect x="16.2172%" y="101" width="0.2226%" height="15" fill="rgb(248,212,6)"/><text x="16.4672%" y="111.50"></text></g><g><title>thir_body (511,793 samples, 0.10%)</title><rect x="16.4445%" y="101" width="0.1035%" height="15" fill="rgb(208,68,35)"/><text x="16.6945%" y="111.50"></text></g><g><title>mir_const (4,920,168 samples, 0.99%)</title><rect x="15.5580%" y="149" width="0.9949%" height="15" fill="rgb(232,128,0)"/><text x="15.8080%" y="159.50"></text></g><g><title>unsafety_check_result (4,231,660 samples, 0.86%)</title><rect x="15.6972%" y="133" width="0.8556%" height="15" fill="rgb(207,160,47)"/><text x="15.9472%" y="143.50"></text></g><g><title>mir_built (3,705,105 samples, 0.75%)</title><rect x="15.8037%" y="117" width="0.7492%" height="15" fill="rgb(228,23,34)"/><text x="16.0537%" y="127.50"></text></g><g><title>mir_promoted (5,465,916 samples, 1.11%)</title><rect x="15.4540%" y="165" width="1.1052%" height="15" fill="rgb(218,30,26)"/><text x="15.7040%" y="175.50"></text></g><g><title>type_op_prove_predicate (960,358 samples, 0.19%)</title><rect x="16.6519%" y="165" width="0.1942%" height="15" fill="rgb(220,122,19)"/><text x="16.9019%" y="175.50"></text></g><g><title>MIR_borrow_checking (13,328,261 samples, 2.69%)</title><rect x="14.1523%" y="197" width="2.6950%" height="15" fill="rgb(250,228,42)"/><text x="14.4023%" y="207.50">MI..</text></g><g><title>mir_borrowck (13,226,150 samples, 2.67%)</title><rect x="14.1729%" y="181" width="2.6743%" height="15" fill="rgb(240,193,28)"/><text x="14.4229%" y="191.50">mi..</text></g><g><title>codegen_fn_attrs (758,308 samples, 0.15%)</title><rect x="17.0000%" y="165" width="0.1533%" height="15" fill="rgb(216,20,37)"/><text x="17.2500%" y="175.50"></text></g><g><title>check_mod_attrs (1,117,061 samples, 0.23%)</title><rect x="16.9275%" y="181" width="0.2259%" height="15" fill="rgb(206,188,39)"/><text x="17.1775%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (598,986 samples, 0.12%)</title><rect x="17.2127%" y="181" width="0.1211%" height="15" fill="rgb(217,207,13)"/><text x="17.4627%" y="191.50"></text></g><g><title>misc_checking_1 (2,151,023 samples, 0.43%)</title><rect x="16.9196%" y="197" width="0.4349%" height="15" fill="rgb(231,73,38)"/><text x="17.1696%" y="207.50"></text></g><g><title>misc_checking_2 (845,299 samples, 0.17%)</title><rect x="17.3545%" y="197" width="0.1709%" height="15" fill="rgb(225,20,46)"/><text x="17.6045%" y="207.50"></text></g><g><title>crate_lints (1,957,191 samples, 0.40%)</title><rect x="17.6499%" y="165" width="0.3957%" height="15" fill="rgb(210,31,41)"/><text x="17.8999%" y="175.50"></text></g><g><title>type_of (1,047,080 samples, 0.21%)</title><rect x="17.8340%" y="149" width="0.2117%" height="15" fill="rgb(221,200,47)"/><text x="18.0840%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (816,668 samples, 0.17%)</title><rect x="17.8806%" y="133" width="0.1651%" height="15" fill="rgb(226,26,5)"/><text x="18.1306%" y="143.50"></text></g><g><title>lint_checking (2,288,425 samples, 0.46%)</title><rect x="17.6496%" y="181" width="0.4627%" height="15" fill="rgb(249,33,26)"/><text x="17.8996%" y="191.50"></text></g><g><title>privacy_checking_modules (764,448 samples, 0.15%)</title><rect x="18.1810%" y="181" width="0.1546%" height="15" fill="rgb(235,183,28)"/><text x="18.4310%" y="191.50"></text></g><g><title>check_mod_privacy (761,068 samples, 0.15%)</title><rect x="18.1816%" y="165" width="0.1539%" height="15" fill="rgb(221,5,38)"/><text x="18.4316%" y="175.50"></text></g><g><title>misc_checking_3 (4,025,813 samples, 0.81%)</title><rect x="17.5255%" y="197" width="0.8140%" height="15" fill="rgb(247,18,42)"/><text x="17.7755%" y="207.50"></text></g><g><title>impl_parent (2,823,680 samples, 0.57%)</title><rect x="19.2398%" y="133" width="0.5710%" height="15" fill="rgb(241,131,45)"/><text x="19.4898%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,437,187 samples, 0.29%)</title><rect x="19.5201%" y="117" width="0.2906%" height="15" fill="rgb(249,31,29)"/><text x="19.7701%" y="127.50"></text></g><g><title>impl_trait_ref (5,092,617 samples, 1.03%)</title><rect x="19.8107%" y="133" width="1.0297%" height="15" fill="rgb(225,111,53)"/><text x="20.0607%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,070,685 samples, 0.82%)</title><rect x="20.0174%" y="117" width="0.8231%" height="15" fill="rgb(238,160,17)"/><text x="20.2674%" y="127.50"></text></g><g><title>coherent_trait (13,158,071 samples, 2.66%)</title><rect x="18.3576%" y="165" width="2.6606%" height="15" fill="rgb(214,148,48)"/><text x="18.6076%" y="175.50">co..</text></g><g><title>specialization_graph_of (12,702,626 samples, 2.57%)</title><rect x="18.4497%" y="149" width="2.5685%" height="15" fill="rgb(232,36,49)"/><text x="18.6997%" y="159.50">sp..</text></g><g><title>trait_impls_of (876,878 samples, 0.18%)</title><rect x="20.8409%" y="133" width="0.1773%" height="15" fill="rgb(209,103,24)"/><text x="21.0909%" y="143.50"></text></g><g><title>coherence_checking (13,237,631 samples, 2.68%)</title><rect x="18.3532%" y="181" width="2.6767%" height="15" fill="rgb(229,88,8)"/><text x="18.6032%" y="191.50">co..</text></g><g><title>typeck (5,380,308 samples, 1.09%)</title><rect x="22.4835%" y="133" width="1.0879%" height="15" fill="rgb(213,181,19)"/><text x="22.7335%" y="143.50"></text></g><g><title>item_bodies_checking (12,572,304 samples, 2.54%)</title><rect x="21.0348%" y="181" width="2.5421%" height="15" fill="rgb(254,191,54)"/><text x="21.2848%" y="191.50">it..</text></g><g><title>typeck_item_bodies (12,568,574 samples, 2.54%)</title><rect x="21.0356%" y="165" width="2.5414%" height="15" fill="rgb(241,83,37)"/><text x="21.2856%" y="175.50">ty..</text></g><g><title>typeck (12,506,673 samples, 2.53%)</title><rect x="21.0481%" y="149" width="2.5289%" height="15" fill="rgb(233,36,39)"/><text x="21.2981%" y="159.50">ty..</text></g><g><title>mir_borrowck (991,521 samples, 0.20%)</title><rect x="24.6115%" y="101" width="0.2005%" height="15" fill="rgb(226,3,54)"/><text x="24.8615%" y="111.50"></text></g><g><title>mir_borrowck (2,147,743 samples, 0.43%)</title><rect x="24.4616%" y="117" width="0.4343%" height="15" fill="rgb(245,192,40)"/><text x="24.7116%" y="127.50"></text></g><g><title>needs_drop_raw (744,176 samples, 0.15%)</title><rect x="25.1800%" y="53" width="0.1505%" height="15" fill="rgb(238,167,29)"/><text x="25.4300%" y="63.50"></text></g><g><title>specialization_graph_of (866,609 samples, 0.18%)</title><rect x="25.3583%" y="37" width="0.1752%" height="15" fill="rgb(232,182,51)"/><text x="25.6083%" y="47.50"></text></g><g><title>resolve_instance (1,026,522 samples, 0.21%)</title><rect x="25.3304%" y="53" width="0.2076%" height="15" fill="rgb(231,60,39)"/><text x="25.5804%" y="63.50"></text></g><g><title>evaluate_obligation (1,227,320 samples, 0.25%)</title><rect x="27.1545%" y="37" width="0.2482%" height="15" fill="rgb(208,69,12)"/><text x="27.4045%" y="47.50"></text></g><g><title>mir_built (13,106,539 samples, 2.65%)</title><rect x="25.0569%" y="69" width="2.6502%" height="15" fill="rgb(235,93,37)"/><text x="25.3069%" y="79.50">mi..</text></g><g><title>typeck (10,513,110 samples, 2.13%)</title><rect x="25.5813%" y="53" width="2.1258%" height="15" fill="rgb(213,116,39)"/><text x="25.8313%" y="63.50">t..</text></g><g><title>mir_const (14,453,144 samples, 2.92%)</title><rect x="24.9333%" y="101" width="2.9224%" height="15" fill="rgb(222,207,29)"/><text x="25.1833%" y="111.50">mi..</text></g><g><title>unsafety_check_result (14,086,070 samples, 2.85%)</title><rect x="25.0075%" y="85" width="2.8482%" height="15" fill="rgb(206,96,30)"/><text x="25.2575%" y="95.50">un..</text></g><g><title>unsafety_check_result (735,059 samples, 0.15%)</title><rect x="27.7071%" y="69" width="0.1486%" height="15" fill="rgb(218,138,4)"/><text x="27.9571%" y="79.50"></text></g><g><title>mir_promoted (14,651,457 samples, 2.96%)</title><rect x="24.8959%" y="117" width="2.9625%" height="15" fill="rgb(250,191,14)"/><text x="25.1459%" y="127.50">mir..</text></g><g><title>type_op_prove_predicate (718,506 samples, 0.15%)</title><rect x="27.9656%" y="117" width="0.1453%" height="15" fill="rgb(239,60,40)"/><text x="28.2156%" y="127.50"></text></g><g><title>item_types_checking (22,428,849 samples, 4.54%)</title><rect x="23.5769%" y="181" width="4.5351%" height="15" fill="rgb(206,27,48)"/><text x="23.8269%" y="191.50">item_..</text></g><g><title>check_mod_item_types (22,421,939 samples, 4.53%)</title><rect x="23.5783%" y="165" width="4.5337%" height="15" fill="rgb(225,35,8)"/><text x="23.8283%" y="175.50">check..</text></g><g><title>type_of (21,048,692 samples, 4.26%)</title><rect x="23.8560%" y="149" width="4.2561%" height="15" fill="rgb(250,213,24)"/><text x="24.1060%" y="159.50">type_..</text></g><g><title>mir_borrowck (21,027,922 samples, 4.25%)</title><rect x="23.8602%" y="133" width="4.2519%" height="15" fill="rgb(247,123,22)"/><text x="24.1102%" y="143.50">mir_b..</text></g><g><title>fn_sig (552,385 samples, 0.11%)</title><rect x="28.2011%" y="149" width="0.1117%" height="15" fill="rgb(231,138,38)"/><text x="28.4511%" y="159.50"></text></g><g><title>named_region_map (511,197 samples, 0.10%)</title><rect x="28.3560%" y="133" width="0.1034%" height="15" fill="rgb(231,145,46)"/><text x="28.6060%" y="143.50"></text></g><g><title>generics_of (754,519 samples, 0.15%)</title><rect x="28.3128%" y="149" width="0.1526%" height="15" fill="rgb(251,118,11)"/><text x="28.5628%" y="159.50"></text></g><g><title>explicit_predicates_of (756,328 samples, 0.15%)</title><rect x="28.5292%" y="117" width="0.1529%" height="15" fill="rgb(217,147,25)"/><text x="28.7792%" y="127.50"></text></g><g><title>predicates_of (1,359,216 samples, 0.27%)</title><rect x="28.4855%" y="149" width="0.2748%" height="15" fill="rgb(247,81,37)"/><text x="28.7355%" y="159.50"></text></g><g><title>predicates_defined_on (1,275,355 samples, 0.26%)</title><rect x="28.5025%" y="133" width="0.2579%" height="15" fill="rgb(209,12,38)"/><text x="28.7525%" y="143.50"></text></g><g><title>type_collecting (3,307,695 samples, 0.67%)</title><rect x="28.1126%" y="181" width="0.6688%" height="15" fill="rgb(227,1,9)"/><text x="28.3626%" y="191.50"></text></g><g><title>collect_mod_item_types (3,291,525 samples, 0.67%)</title><rect x="28.1158%" y="165" width="0.6656%" height="15" fill="rgb(248,47,43)"/><text x="28.3658%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,580,148 samples, 0.52%)</title><rect x="28.8152%" y="165" width="0.5217%" height="15" fill="rgb(221,10,30)"/><text x="29.0652%" y="175.50"></text></g><g><title>evaluate_obligation (530,886 samples, 0.11%)</title><rect x="29.5147%" y="149" width="0.1073%" height="15" fill="rgb(210,229,1)"/><text x="29.7647%" y="159.50"></text></g><g><title>check_item_well_formed (2,087,323 samples, 0.42%)</title><rect x="29.3369%" y="165" width="0.4221%" height="15" fill="rgb(222,148,37)"/><text x="29.5869%" y="175.50"></text></g><g><title>analysis (77,885,040 samples, 15.75%)</title><rect x="14.0505%" y="213" width="15.7485%" height="15" fill="rgb(234,67,33)"/><text x="14.3005%" y="223.50">analysis</text></g><g><title>type_check_crate (56,673,474 samples, 11.46%)</title><rect x="18.3395%" y="197" width="11.4595%" height="15" fill="rgb(247,98,35)"/><text x="18.5895%" y="207.50">type_check_crate</text></g><g><title>wf_checking (5,026,514 samples, 1.02%)</title><rect x="28.7826%" y="181" width="1.0164%" height="15" fill="rgb(247,138,52)"/><text x="29.0326%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (979,853 samples, 0.20%)</title><rect x="39.2817%" y="181" width="0.1981%" height="15" fill="rgb(213,79,30)"/><text x="39.5317%" y="191.50"></text></g><g><title>layout_of (1,475,777 samples, 0.30%)</title><rect x="40.1178%" y="165" width="0.2984%" height="15" fill="rgb(246,177,23)"/><text x="40.3678%" y="175.50"></text></g><g><title>predicates_of (1,143,948 samples, 0.23%)</title><rect x="40.8486%" y="149" width="0.2313%" height="15" fill="rgb(230,62,27)"/><text x="41.0986%" y="159.50"></text></g><g><title>predicates_defined_on (726,479 samples, 0.15%)</title><rect x="40.9330%" y="133" width="0.1469%" height="15" fill="rgb(216,154,8)"/><text x="41.1830%" y="143.50"></text></g><g><title>param_env (3,288,637 samples, 0.66%)</title><rect x="40.4162%" y="165" width="0.6650%" height="15" fill="rgb(244,35,45)"/><text x="40.6662%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (574,377 samples, 0.12%)</title><rect x="41.0812%" y="165" width="0.1161%" height="15" fill="rgb(251,115,12)"/><text x="41.3312%" y="175.50"></text></g><g><title>fn_abi_of_instance (8,120,574 samples, 1.64%)</title><rect x="39.5616%" y="181" width="1.6420%" height="15" fill="rgb(240,54,50)"/><text x="39.8116%" y="191.50"></text></g><g><title>layout_of (958,681 samples, 0.19%)</title><rect x="41.2855%" y="181" width="0.1938%" height="15" fill="rgb(233,84,52)"/><text x="41.5355%" y="191.50"></text></g><g><title>codegen_module (55,835,481 samples, 11.29%)</title><rect x="30.2801%" y="197" width="11.2900%" height="15" fill="rgb(207,117,47)"/><text x="30.5301%" y="207.50">codegen_module</text></g><g><title>codegen_crate (58,287,321 samples, 11.79%)</title><rect x="29.8014%" y="213" width="11.7858%" height="15" fill="rgb(249,43,39)"/><text x="30.0514%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (191,602,305 samples, 38.74%)</title><rect x="41.6225%" y="197" width="38.7423%" height="15" fill="rgb(209,38,44)"/><text x="41.8725%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (182,255,973 samples, 36.85%)</title><rect x="43.5123%" y="181" width="36.8524%" height="15" fill="rgb(236,212,23)"/><text x="43.7623%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (202,118,498 samples, 40.87%)</title><rect x="41.5871%" y="213" width="40.8687%" height="15" fill="rgb(242,79,21)"/><text x="41.8371%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,341,502 samples, 2.09%)</title><rect x="80.3647%" y="197" width="2.0911%" height="15" fill="rgb(211,96,35)"/><text x="80.6147%" y="207.50">L..</text></g><g><title>metadata_register_crate (2,656,368 samples, 0.54%)</title><rect x="85.9429%" y="165" width="0.5371%" height="15" fill="rgb(253,215,40)"/><text x="86.1929%" y="175.50"></text></g><g><title>metadata_register_crate (962,640 samples, 0.19%)</title><rect x="86.2854%" y="149" width="0.1946%" height="15" fill="rgb(211,81,21)"/><text x="86.5354%" y="159.50"></text></g><g><title>macro_expand_crate (19,365,576 samples, 3.92%)</title><rect x="82.5951%" y="197" width="3.9157%" height="15" fill="rgb(208,190,38)"/><text x="82.8451%" y="207.50">macr..</text></g><g><title>expand_crate (19,339,086 samples, 3.91%)</title><rect x="82.6004%" y="181" width="3.9104%" height="15" fill="rgb(235,213,38)"/><text x="82.8504%" y="191.50">expa..</text></g><g><title>late_resolve_crate (11,290,540 samples, 2.28%)</title><rect x="86.6457%" y="181" width="2.2830%" height="15" fill="rgb(237,122,38)"/><text x="86.8957%" y="191.50">l..</text></g><g><title>configure_and_expand (32,205,442 samples, 6.51%)</title><rect x="82.4558%" y="213" width="6.5120%" height="15" fill="rgb(244,218,35)"/><text x="82.7058%" y="223.50">configure..</text></g><g><title>resolve_crate (11,957,527 samples, 2.42%)</title><rect x="86.5499%" y="197" width="2.4178%" height="15" fill="rgb(240,68,47)"/><text x="86.7999%" y="207.50">re..</text></g><g><title>early_lint_checks (574,696 samples, 0.12%)</title><rect x="89.0326%" y="213" width="0.1162%" height="15" fill="rgb(210,16,53)"/><text x="89.2826%" y="223.50"></text></g><g><title>free_global_ctxt (4,817,271 samples, 0.97%)</title><rect x="89.1488%" y="213" width="0.9741%" height="15" fill="rgb(235,124,12)"/><text x="89.3988%" y="223.50"></text></g><g><title>item_attrs (917,941 samples, 0.19%)</title><rect x="90.8762%" y="117" width="0.1856%" height="15" fill="rgb(224,169,11)"/><text x="91.1262%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (880,071 samples, 0.18%)</title><rect x="90.8839%" y="101" width="0.1780%" height="15" fill="rgb(250,166,2)"/><text x="91.1339%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,405,827 samples, 0.28%)</title><rect x="90.8295%" y="133" width="0.2843%" height="15" fill="rgb(242,216,29)"/><text x="91.0795%" y="143.50"></text></g><g><title>mir_shims (632,169 samples, 0.13%)</title><rect x="91.1871%" y="133" width="0.1278%" height="15" fill="rgb(230,116,27)"/><text x="91.4371%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,601,147 samples, 0.32%)</title><rect x="91.6181%" y="117" width="0.3238%" height="15" fill="rgb(228,99,48)"/><text x="91.8681%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,254,938 samples, 0.25%)</title><rect x="91.9418%" y="117" width="0.2538%" height="15" fill="rgb(253,11,6)"/><text x="92.1918%" y="127.50"></text></g><g><title>optimized_mir (4,603,323 samples, 0.93%)</title><rect x="91.3149%" y="133" width="0.9308%" height="15" fill="rgb(247,143,39)"/><text x="91.5649%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (2,056,344 samples, 0.42%)</title><rect x="92.4002%" y="117" width="0.4158%" height="15" fill="rgb(236,97,10)"/><text x="92.6502%" y="127.50"></text></g><g><title>specialization_graph_of (1,391,975 samples, 0.28%)</title><rect x="92.9829%" y="117" width="0.2815%" height="15" fill="rgb(233,208,19)"/><text x="93.2329%" y="127.50"></text></g><g><title>impl_trait_ref (710,218 samples, 0.14%)</title><rect x="93.1207%" y="101" width="0.1436%" height="15" fill="rgb(216,164,2)"/><text x="93.3707%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (621,958 samples, 0.13%)</title><rect x="93.1386%" y="85" width="0.1258%" height="15" fill="rgb(220,129,5)"/><text x="93.3886%" y="95.50"></text></g><g><title>resolve_instance (5,323,974 samples, 1.08%)</title><rect x="92.2457%" y="133" width="1.0765%" height="15" fill="rgb(242,17,10)"/><text x="92.4957%" y="143.50"></text></g><g><title>eval_to_const_value_raw (613,217 samples, 0.12%)</title><rect x="93.3899%" y="117" width="0.1240%" height="15" fill="rgb(242,107,0)"/><text x="93.6399%" y="127.50"></text></g><g><title>eval_to_const_value_raw (602,847 samples, 0.12%)</title><rect x="93.3920%" y="101" width="0.1219%" height="15" fill="rgb(251,28,31)"/><text x="93.6420%" y="111.50"></text></g><g><title>eval_to_allocation_raw (577,837 samples, 0.12%)</title><rect x="93.3971%" y="85" width="0.1168%" height="15" fill="rgb(233,223,10)"/><text x="93.6471%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (721,508 samples, 0.15%)</title><rect x="93.3743%" y="133" width="0.1459%" height="15" fill="rgb(215,21,27)"/><text x="93.6243%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (15,207,742 samples, 3.08%)</title><rect x="90.4860%" y="149" width="3.0750%" height="15" fill="rgb(232,23,21)"/><text x="90.7360%" y="159.50">mon..</text></g><g><title>monomorphization_collector (15,268,102 samples, 3.09%)</title><rect x="90.4855%" y="165" width="3.0872%" height="15" fill="rgb(244,5,23)"/><text x="90.7355%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,547,726 samples, 0.31%)</title><rect x="93.5750%" y="149" width="0.3130%" height="15" fill="rgb(226,81,46)"/><text x="93.8250%" y="159.50"></text></g><g><title>symbol_name (1,399,786 samples, 0.28%)</title><rect x="93.6049%" y="133" width="0.2830%" height="15" fill="rgb(247,70,30)"/><text x="93.8549%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (17,676,788 samples, 3.57%)</title><rect x="90.4770%" y="181" width="3.5743%" height="15" fill="rgb(212,68,19)"/><text x="90.7270%" y="191.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,366,925 samples, 0.48%)</title><rect x="93.5727%" y="165" width="0.4786%" height="15" fill="rgb(240,187,13)"/><text x="93.8227%" y="175.50"></text></g><g><title>cgu_partitioning (807,989 samples, 0.16%)</title><rect x="93.8879%" y="149" width="0.1634%" height="15" fill="rgb(223,113,26)"/><text x="94.1379%" y="159.50"></text></g><g><title>exported_symbols (17,853,620 samples, 3.61%)</title><rect x="90.4625%" y="197" width="3.6100%" height="15" fill="rgb(206,192,2)"/><text x="90.7125%" y="207.50">expo..</text></g><g><title>layout_of (972,891 samples, 0.20%)</title><rect x="94.5053%" y="181" width="0.1967%" height="15" fill="rgb(241,108,4)"/><text x="94.7553%" y="191.50"></text></g><g><title>needs_drop_raw (508,764 samples, 0.10%)</title><rect x="95.1808%" y="165" width="0.1029%" height="15" fill="rgb(247,173,49)"/><text x="95.4308%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,282,190 samples, 0.66%)</title><rect x="94.7020%" y="181" width="0.6637%" height="15" fill="rgb(224,114,35)"/><text x="94.9520%" y="191.50"></text></g><g><title>optimized_mir (6,301,888 samples, 1.27%)</title><rect x="94.0924%" y="197" width="1.2743%" height="15" fill="rgb(245,159,27)"/><text x="94.3424%" y="207.50"></text></g><g><title>generate_crate_metadata (25,991,317 samples, 5.26%)</title><rect x="90.1228%" y="213" width="5.2555%" height="15" fill="rgb(245,172,44)"/><text x="90.3728%" y="223.50">genera..</text></g><g><title>hir_lowering (4,782,842 samples, 0.97%)</title><rect x="95.3783%" y="213" width="0.9671%" height="15" fill="rgb(236,23,11)"/><text x="95.6283%" y="223.50"></text></g><g><title>finish_ongoing_codegen (10,139,269 samples, 2.05%)</title><rect x="96.3484%" y="197" width="2.0502%" height="15" fill="rgb(205,117,38)"/><text x="96.5984%" y="207.50">f..</text></g><g><title>link_crate (2,221,324 samples, 0.45%)</title><rect x="98.3985%" y="197" width="0.4492%" height="15" fill="rgb(237,72,25)"/><text x="98.6485%" y="207.50"></text></g><g><title>link_binary (2,187,163 samples, 0.44%)</title><rect x="98.4054%" y="181" width="0.4422%" height="15" fill="rgb(244,70,9)"/><text x="98.6554%" y="191.50"></text></g><g><title>link_rlib (1,580,977 samples, 0.32%)</title><rect x="98.5280%" y="165" width="0.3197%" height="15" fill="rgb(217,125,39)"/><text x="98.7780%" y="175.50"></text></g><g><title>link (12,386,693 samples, 2.50%)</title><rect x="96.3454%" y="213" width="2.5046%" height="15" fill="rgb(235,36,10)"/><text x="96.5954%" y="223.50">li..</text></g><g><title>parse_crate (3,311,106 samples, 0.67%)</title><rect x="98.8500%" y="213" width="0.6695%" height="15" fill="rgb(251,123,47)"/><text x="99.1000%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,504,236 samples, 0.30%)</title><rect x="99.5956%" y="213" width="0.3042%" height="15" fill="rgb(221,13,13)"/><text x="99.8456%" y="223.50"></text></g><g><title>all (494,556,326 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (494,556,326 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>