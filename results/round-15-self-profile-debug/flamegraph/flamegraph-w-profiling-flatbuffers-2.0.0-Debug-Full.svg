<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (141,857,950 samples, 11.72%)</title><rect x="0.0685%" y="181" width="11.7193%" height="15" fill="rgb(227,0,7)"/><text x="0.3185%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (2,756,536 samples, 0.23%)</title><rect x="18.6478%" y="53" width="0.2277%" height="15" fill="rgb(217,0,24)"/><text x="18.8978%" y="63.50"></text></g><g><title>evaluate_obligation (2,245,840 samples, 0.19%)</title><rect x="18.6900%" y="37" width="0.1855%" height="15" fill="rgb(221,193,54)"/><text x="18.9400%" y="47.50"></text></g><g><title>needs_drop_raw (3,453,292 samples, 0.29%)</title><rect x="18.5905%" y="69" width="0.2853%" height="15" fill="rgb(248,212,6)"/><text x="18.8405%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,575,342 samples, 0.13%)</title><rect x="18.9688%" y="53" width="0.1301%" height="15" fill="rgb(208,68,35)"/><text x="19.2188%" y="63.50"></text></g><g><title>resolve_instance (3,333,654 samples, 0.28%)</title><rect x="18.8758%" y="69" width="0.2754%" height="15" fill="rgb(232,128,0)"/><text x="19.1258%" y="79.50"></text></g><g><title>thir_body (4,821,821 samples, 0.40%)</title><rect x="19.1604%" y="69" width="0.3983%" height="15" fill="rgb(207,160,47)"/><text x="19.4104%" y="79.50"></text></g><g><title>mir_const (32,185,150 samples, 2.66%)</title><rect x="16.9144%" y="117" width="2.6589%" height="15" fill="rgb(228,23,34)"/><text x="17.1644%" y="127.50">mi..</text></g><g><title>unsafety_check_result (28,243,719 samples, 2.33%)</title><rect x="17.2400%" y="101" width="2.3333%" height="15" fill="rgb(218,30,26)"/><text x="17.4900%" y="111.50">u..</text></g><g><title>mir_built (25,292,285 samples, 2.09%)</title><rect x="17.4839%" y="85" width="2.0895%" height="15" fill="rgb(220,122,19)"/><text x="17.7339%" y="95.50">m..</text></g><g><title>mir_promoted (36,191,534 samples, 2.99%)</title><rect x="16.6447%" y="133" width="2.9899%" height="15" fill="rgb(250,228,42)"/><text x="16.8947%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (2,287,696 samples, 0.19%)</title><rect x="19.6347%" y="133" width="0.1890%" height="15" fill="rgb(240,193,28)"/><text x="19.8847%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,730,636 samples, 0.23%)</title><rect x="19.8237%" y="133" width="0.2256%" height="15" fill="rgb(216,20,37)"/><text x="20.0737%" y="143.50"></text></g><g><title>normalize_projection_ty (1,824,740 samples, 0.15%)</title><rect x="19.8985%" y="117" width="0.1507%" height="15" fill="rgb(206,188,39)"/><text x="20.1485%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,433,445 samples, 0.12%)</title><rect x="20.1065%" y="133" width="0.1184%" height="15" fill="rgb(217,207,13)"/><text x="20.3565%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,716,061 samples, 0.72%)</title><rect x="20.2249%" y="133" width="0.7201%" height="15" fill="rgb(231,73,38)"/><text x="20.4749%" y="143.50"></text></g><g><title>MIR_borrow_checking (109,831,378 samples, 9.07%)</title><rect x="11.8743%" y="165" width="9.0735%" height="15" fill="rgb(225,20,46)"/><text x="12.1243%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (109,228,945 samples, 9.02%)</title><rect x="11.9241%" y="149" width="9.0237%" height="15" fill="rgb(210,31,41)"/><text x="12.1741%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,942,911 samples, 0.16%)</title><rect x="21.0682%" y="149" width="0.1605%" height="15" fill="rgb(221,200,47)"/><text x="21.3182%" y="159.50"></text></g><g><title>misc_checking_1 (4,137,141 samples, 0.34%)</title><rect x="21.0647%" y="165" width="0.3418%" height="15" fill="rgb(226,26,5)"/><text x="21.3147%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,833,209 samples, 0.15%)</title><rect x="21.4066%" y="149" width="0.1514%" height="15" fill="rgb(249,33,26)"/><text x="21.6566%" y="159.50"></text></g><g><title>check_mod_liveness (1,445,326 samples, 0.12%)</title><rect x="21.4387%" y="133" width="0.1194%" height="15" fill="rgb(235,183,28)"/><text x="21.6887%" y="143.50"></text></g><g><title>misc_checking_2 (4,291,963 samples, 0.35%)</title><rect x="21.4065%" y="165" width="0.3546%" height="15" fill="rgb(221,5,38)"/><text x="21.6565%" y="175.50"></text></g><g><title>match_checking (2,457,234 samples, 0.20%)</title><rect x="21.5581%" y="149" width="0.2030%" height="15" fill="rgb(247,18,42)"/><text x="21.8081%" y="159.50"></text></g><g><title>check_match (2,313,033 samples, 0.19%)</title><rect x="21.5700%" y="133" width="0.1911%" height="15" fill="rgb(241,131,45)"/><text x="21.8200%" y="143.50"></text></g><g><title>death_checking (1,595,976 samples, 0.13%)</title><rect x="21.8339%" y="149" width="0.1318%" height="15" fill="rgb(249,31,29)"/><text x="22.0839%" y="159.50"></text></g><g><title>crate_lints (4,309,594 samples, 0.36%)</title><rect x="21.9659%" y="133" width="0.3560%" height="15" fill="rgb(225,111,53)"/><text x="22.2159%" y="143.50"></text></g><g><title>lint_checking (6,294,534 samples, 0.52%)</title><rect x="21.9658%" y="149" width="0.5200%" height="15" fill="rgb(238,160,17)"/><text x="22.2158%" y="159.50"></text></g><g><title>module_lints (1,983,410 samples, 0.16%)</title><rect x="22.3219%" y="133" width="0.1639%" height="15" fill="rgb(214,148,48)"/><text x="22.5719%" y="143.50"></text></g><g><title>lint_mod (1,969,630 samples, 0.16%)</title><rect x="22.3230%" y="117" width="0.1627%" height="15" fill="rgb(232,36,49)"/><text x="22.5730%" y="127.50"></text></g><g><title>privacy_access_levels (1,702,207 samples, 0.14%)</title><rect x="22.4858%" y="149" width="0.1406%" height="15" fill="rgb(209,103,24)"/><text x="22.7358%" y="159.50"></text></g><g><title>privacy_checking_modules (3,697,967 samples, 0.31%)</title><rect x="22.6264%" y="149" width="0.3055%" height="15" fill="rgb(229,88,8)"/><text x="22.8764%" y="159.50"></text></g><g><title>check_mod_privacy (3,686,487 samples, 0.30%)</title><rect x="22.6273%" y="133" width="0.3046%" height="15" fill="rgb(213,181,19)"/><text x="22.8773%" y="143.50"></text></g><g><title>misc_checking_3 (14,203,213 samples, 1.17%)</title><rect x="21.7611%" y="165" width="1.1734%" height="15" fill="rgb(254,191,54)"/><text x="22.0111%" y="175.50"></text></g><g><title>impl_parent (2,699,875 samples, 0.22%)</title><rect x="23.4423%" y="101" width="0.2230%" height="15" fill="rgb(241,83,37)"/><text x="23.6923%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,581,652 samples, 0.13%)</title><rect x="23.5347%" y="85" width="0.1307%" height="15" fill="rgb(233,36,39)"/><text x="23.7847%" y="95.50"></text></g><g><title>impl_trait_ref (6,109,747 samples, 0.50%)</title><rect x="23.6654%" y="101" width="0.5047%" height="15" fill="rgb(226,3,54)"/><text x="23.9154%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,973,606 samples, 0.41%)</title><rect x="23.7592%" y="85" width="0.4109%" height="15" fill="rgb(245,192,40)"/><text x="24.0092%" y="95.50"></text></g><g><title>trait_impls_of (1,328,225 samples, 0.11%)</title><rect x="24.1980%" y="101" width="0.1097%" height="15" fill="rgb(238,167,29)"/><text x="24.4480%" y="111.50"></text></g><g><title>coherent_trait (16,338,134 samples, 1.35%)</title><rect x="22.9598%" y="133" width="1.3497%" height="15" fill="rgb(232,182,51)"/><text x="23.2098%" y="143.50"></text></g><g><title>specialization_graph_of (15,646,868 samples, 1.29%)</title><rect x="23.0169%" y="117" width="1.2926%" height="15" fill="rgb(231,60,39)"/><text x="23.2669%" y="127.50"></text></g><g><title>coherence_checking (16,540,976 samples, 1.37%)</title><rect x="22.9577%" y="149" width="1.3665%" height="15" fill="rgb(208,69,12)"/><text x="23.2077%" y="159.50"></text></g><g><title>associated_item (1,222,581 samples, 0.10%)</title><rect x="32.6680%" y="85" width="0.1010%" height="15" fill="rgb(235,93,37)"/><text x="32.9180%" y="95.50"></text></g><g><title>associated_items (2,061,910 samples, 0.17%)</title><rect x="32.6047%" y="101" width="0.1703%" height="15" fill="rgb(213,116,39)"/><text x="32.8547%" y="111.50"></text></g><g><title>dropck_outlives (1,350,067 samples, 0.11%)</title><rect x="32.7884%" y="101" width="0.1115%" height="15" fill="rgb(222,207,29)"/><text x="33.0384%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,337,943 samples, 0.11%)</title><rect x="32.9000%" y="101" width="0.1105%" height="15" fill="rgb(206,96,30)"/><text x="33.1500%" y="111.50"></text></g><g><title>specializes (2,322,071 samples, 0.19%)</title><rect x="34.0687%" y="85" width="0.1918%" height="15" fill="rgb(218,138,4)"/><text x="34.3187%" y="95.50"></text></g><g><title>param_env (1,314,661 samples, 0.11%)</title><rect x="34.1520%" y="69" width="0.1086%" height="15" fill="rgb(250,191,14)"/><text x="34.4020%" y="79.50"></text></g><g><title>evaluate_obligation (15,832,167 samples, 1.31%)</title><rect x="33.0105%" y="101" width="1.3079%" height="15" fill="rgb(239,60,40)"/><text x="33.2605%" y="111.50"></text></g><g><title>method_autoderef_steps (1,738,915 samples, 0.14%)</title><rect x="34.5004%" y="101" width="0.1437%" height="15" fill="rgb(206,27,48)"/><text x="34.7504%" y="111.50"></text></g><g><title>typeck (6,642,086 samples, 0.55%)</title><rect x="34.7778%" y="101" width="0.5487%" height="15" fill="rgb(225,35,8)"/><text x="35.0278%" y="111.50"></text></g><g><title>item_bodies_checking (133,527,487 samples, 11.03%)</title><rect x="24.3374%" y="149" width="11.0311%" height="15" fill="rgb(250,213,24)"/><text x="24.5874%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (133,524,937 samples, 11.03%)</title><rect x="24.3376%" y="133" width="11.0309%" height="15" fill="rgb(247,123,22)"/><text x="24.5876%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (133,085,903 samples, 10.99%)</title><rect x="24.3738%" y="117" width="10.9946%" height="15" fill="rgb(231,138,38)"/><text x="24.6238%" y="127.50">typeck</text></g><g><title>item_types_checking (6,940,680 samples, 0.57%)</title><rect x="35.3684%" y="149" width="0.5734%" height="15" fill="rgb(231,145,46)"/><text x="35.6184%" y="159.50"></text></g><g><title>check_mod_item_types (6,927,060 samples, 0.57%)</title><rect x="35.3696%" y="133" width="0.5723%" height="15" fill="rgb(251,118,11)"/><text x="35.6196%" y="143.50"></text></g><g><title>fn_sig (1,222,959 samples, 0.10%)</title><rect x="36.0428%" y="117" width="0.1010%" height="15" fill="rgb(217,147,25)"/><text x="36.2928%" y="127.50"></text></g><g><title>is_late_bound_map (2,088,429 samples, 0.17%)</title><rect x="36.2054%" y="101" width="0.1725%" height="15" fill="rgb(247,81,37)"/><text x="36.4554%" y="111.50"></text></g><g><title>resolve_lifetimes (1,982,958 samples, 0.16%)</title><rect x="36.2141%" y="85" width="0.1638%" height="15" fill="rgb(209,12,38)"/><text x="36.4641%" y="95.50"></text></g><g><title>generics_of (3,361,030 samples, 0.28%)</title><rect x="36.1439%" y="117" width="0.2777%" height="15" fill="rgb(227,1,9)"/><text x="36.3939%" y="127.50"></text></g><g><title>predicates_of (2,063,094 samples, 0.17%)</title><rect x="36.4422%" y="117" width="0.1704%" height="15" fill="rgb(248,47,43)"/><text x="36.6922%" y="127.50"></text></g><g><title>predicates_defined_on (1,821,460 samples, 0.15%)</title><rect x="36.4621%" y="101" width="0.1505%" height="15" fill="rgb(221,10,30)"/><text x="36.7121%" y="111.50"></text></g><g><title>type_collecting (8,635,827 samples, 0.71%)</title><rect x="35.9424%" y="149" width="0.7134%" height="15" fill="rgb(210,229,1)"/><text x="36.1924%" y="159.50"></text></g><g><title>collect_mod_item_types (8,611,556 samples, 0.71%)</title><rect x="35.9444%" y="133" width="0.7114%" height="15" fill="rgb(222,148,37)"/><text x="36.1944%" y="143.50"></text></g><g><title>evaluate_obligation (1,537,324 samples, 0.13%)</title><rect x="37.4692%" y="117" width="0.1270%" height="15" fill="rgb(234,67,33)"/><text x="37.7192%" y="127.50"></text></g><g><title>param_env (1,411,755 samples, 0.12%)</title><rect x="37.7143%" y="117" width="0.1166%" height="15" fill="rgb(247,98,35)"/><text x="37.9643%" y="127.50"></text></g><g><title>check_impl_item_well_formed (14,945,920 samples, 1.23%)</title><rect x="36.7366%" y="133" width="1.2347%" height="15" fill="rgb(247,138,52)"/><text x="36.9866%" y="143.50"></text></g><g><title>region_scope_tree (1,659,781 samples, 0.14%)</title><rect x="37.8342%" y="117" width="0.1371%" height="15" fill="rgb(213,79,30)"/><text x="38.0842%" y="127.50"></text></g><g><title>param_env (1,211,837 samples, 0.10%)</title><rect x="38.6534%" y="117" width="0.1001%" height="15" fill="rgb(246,177,23)"/><text x="38.9034%" y="127.50"></text></g><g><title>check_item_well_formed (10,123,901 samples, 0.84%)</title><rect x="37.9714%" y="133" width="0.8364%" height="15" fill="rgb(230,62,27)"/><text x="38.2214%" y="143.50"></text></g><g><title>analysis (327,457,423 samples, 27.05%)</title><rect x="11.7878%" y="181" width="27.0522%" height="15" fill="rgb(216,154,8)"/><text x="12.0378%" y="191.50">analysis</text></g><g><title>type_check_crate (192,530,603 samples, 15.91%)</title><rect x="22.9344%" y="165" width="15.9055%" height="15" fill="rgb(244,35,45)"/><text x="23.1844%" y="175.50">type_check_crate</text></g><g><title>wf_checking (26,408,497 samples, 2.18%)</title><rect x="36.6583%" y="149" width="2.1817%" height="15" fill="rgb(251,115,12)"/><text x="36.9083%" y="159.50">w..</text></g><g><title>compute_debuginfo_type_name (1,473,596 samples, 0.12%)</title><rect x="45.9991%" y="149" width="0.1217%" height="15" fill="rgb(240,54,50)"/><text x="46.2491%" y="159.50"></text></g><g><title>const_caller_location (1,492,267 samples, 0.12%)</title><rect x="46.1208%" y="149" width="0.1233%" height="15" fill="rgb(233,84,52)"/><text x="46.3708%" y="159.50"></text></g><g><title>layout_of (1,661,247 samples, 0.14%)</title><rect x="46.7328%" y="133" width="0.1372%" height="15" fill="rgb(207,117,47)"/><text x="46.9828%" y="143.50"></text></g><g><title>predicates_of (1,377,337 samples, 0.11%)</title><rect x="47.1501%" y="117" width="0.1138%" height="15" fill="rgb(249,43,39)"/><text x="47.4001%" y="127.50"></text></g><g><title>param_env (4,773,392 samples, 0.39%)</title><rect x="46.8700%" y="133" width="0.3943%" height="15" fill="rgb(209,38,44)"/><text x="47.1200%" y="143.50"></text></g><g><title>fn_abi_of_instance (13,575,585 samples, 1.12%)</title><rect x="46.2482%" y="149" width="1.1215%" height="15" fill="rgb(236,212,23)"/><text x="46.4982%" y="159.50"></text></g><g><title>layout_of (2,692,141 samples, 0.22%)</title><rect x="47.4186%" y="149" width="0.2224%" height="15" fill="rgb(242,79,21)"/><text x="47.6686%" y="159.50"></text></g><g><title>codegen_module (105,240,124 samples, 8.69%)</title><rect x="39.0223%" y="165" width="8.6942%" height="15" fill="rgb(211,96,35)"/><text x="39.2723%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (107,532,625 samples, 8.88%)</title><rect x="38.8403%" y="181" width="8.8836%" height="15" fill="rgb(253,215,40)"/><text x="39.0903%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (431,695,824 samples, 35.66%)</title><rect x="47.7398%" y="165" width="35.6636%" height="15" fill="rgb(211,81,21)"/><text x="47.9898%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (410,396,310 samples, 33.90%)</title><rect x="49.4994%" y="149" width="33.9040%" height="15" fill="rgb(208,190,38)"/><text x="49.7494%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (457,490,135 samples, 37.79%)</title><rect x="47.7238%" y="181" width="37.7945%" height="15" fill="rgb(235,213,38)"/><text x="47.9738%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (25,600,889 samples, 2.11%)</title><rect x="83.4034%" y="165" width="2.1150%" height="15" fill="rgb(237,122,38)"/><text x="83.6534%" y="175.50">L..</text></g><g><title>metadata_register_crate (4,128,691 samples, 0.34%)</title><rect x="88.4795%" y="133" width="0.3411%" height="15" fill="rgb(244,218,35)"/><text x="88.7295%" y="143.50"></text></g><g><title>metadata_register_crate (3,001,329 samples, 0.25%)</title><rect x="88.5726%" y="117" width="0.2479%" height="15" fill="rgb(240,68,47)"/><text x="88.8226%" y="127.50"></text></g><g><title>macro_expand_crate (39,584,939 samples, 3.27%)</title><rect x="85.5930%" y="165" width="3.2702%" height="15" fill="rgb(210,16,53)"/><text x="85.8430%" y="175.50">mac..</text></g><g><title>expand_crate (39,570,869 samples, 3.27%)</title><rect x="85.5942%" y="149" width="3.2691%" height="15" fill="rgb(235,124,12)"/><text x="85.8442%" y="159.50">exp..</text></g><g><title>late_resolve_crate (6,021,531 samples, 0.50%)</title><rect x="88.9072%" y="149" width="0.4975%" height="15" fill="rgb(224,169,11)"/><text x="89.1572%" y="159.50"></text></g><g><title>configure_and_expand (47,487,608 samples, 3.92%)</title><rect x="85.5183%" y="181" width="3.9231%" height="15" fill="rgb(250,166,2)"/><text x="85.7683%" y="191.50">conf..</text></g><g><title>resolve_crate (6,972,910 samples, 0.58%)</title><rect x="88.8654%" y="165" width="0.5761%" height="15" fill="rgb(242,216,29)"/><text x="89.1154%" y="175.50"></text></g><g><title>early_lint_checks (1,523,025 samples, 0.13%)</title><rect x="89.5037%" y="181" width="0.1258%" height="15" fill="rgb(230,116,27)"/><text x="89.7537%" y="191.50"></text></g><g><title>free_global_ctxt (9,535,386 samples, 0.79%)</title><rect x="89.6295%" y="181" width="0.7877%" height="15" fill="rgb(228,99,48)"/><text x="89.8795%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,678,018 samples, 0.14%)</title><rect x="91.2993%" y="101" width="0.1386%" height="15" fill="rgb(253,11,6)"/><text x="91.5493%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,410,492 samples, 0.20%)</title><rect x="91.7760%" y="85" width="0.1991%" height="15" fill="rgb(247,143,39)"/><text x="92.0260%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,038,835 samples, 0.25%)</title><rect x="91.9752%" y="85" width="0.2510%" height="15" fill="rgb(236,97,10)"/><text x="92.2252%" y="95.50"></text></g><g><title>optimized_mir (9,421,624 samples, 0.78%)</title><rect x="91.5139%" y="101" width="0.7783%" height="15" fill="rgb(233,208,19)"/><text x="91.7639%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,336,434 samples, 0.28%)</title><rect x="92.4061%" y="85" width="0.2756%" height="15" fill="rgb(216,164,2)"/><text x="92.6561%" y="95.50"></text></g><g><title>specialization_graph_of (2,441,567 samples, 0.20%)</title><rect x="92.7713%" y="85" width="0.2017%" height="15" fill="rgb(220,129,5)"/><text x="93.0213%" y="95.50"></text></g><g><title>resolve_instance (8,577,402 samples, 0.71%)</title><rect x="92.2922%" y="101" width="0.7086%" height="15" fill="rgb(242,17,10)"/><text x="92.5422%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (27,078,484 samples, 2.24%)</title><rect x="91.0026%" y="117" width="2.2370%" height="15" fill="rgb(242,107,0)"/><text x="91.2526%" y="127.50">m..</text></g><g><title>vtable_entries (1,530,865 samples, 0.13%)</title><rect x="93.1131%" y="101" width="0.1265%" height="15" fill="rgb(251,28,31)"/><text x="93.3631%" y="111.50"></text></g><g><title>monomorphization_collector (27,230,735 samples, 2.25%)</title><rect x="91.0023%" y="133" width="2.2496%" height="15" fill="rgb(233,223,10)"/><text x="91.2523%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (3,019,470 samples, 0.25%)</title><rect x="93.2523%" y="117" width="0.2494%" height="15" fill="rgb(215,21,27)"/><text x="93.5023%" y="127.50"></text></g><g><title>symbol_name (2,691,517 samples, 0.22%)</title><rect x="93.2794%" y="101" width="0.2224%" height="15" fill="rgb(232,23,21)"/><text x="93.5294%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (31,742,150 samples, 2.62%)</title><rect x="90.9988%" y="149" width="2.6223%" height="15" fill="rgb(244,5,23)"/><text x="91.2488%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (4,468,455 samples, 0.37%)</title><rect x="93.2519%" y="133" width="0.3692%" height="15" fill="rgb(226,81,46)"/><text x="93.5019%" y="143.50"></text></g><g><title>cgu_partitioning (1,444,975 samples, 0.12%)</title><rect x="93.5017%" y="117" width="0.1194%" height="15" fill="rgb(247,70,30)"/><text x="93.7517%" y="127.50"></text></g><g><title>exported_symbols (32,453,158 samples, 2.68%)</title><rect x="90.9877%" y="165" width="2.6810%" height="15" fill="rgb(212,68,19)"/><text x="91.2377%" y="175.50">ex..</text></g><g><title>layout_of (2,583,842 samples, 0.21%)</title><rect x="94.6311%" y="149" width="0.2135%" height="15" fill="rgb(240,187,13)"/><text x="94.8811%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,661,454 samples, 1.05%)</title><rect x="94.8446%" y="149" width="1.0460%" height="15" fill="rgb(223,113,26)"/><text x="95.0946%" y="159.50"></text></g><g><title>optimized_mir (26,827,696 samples, 2.22%)</title><rect x="93.6994%" y="165" width="2.2163%" height="15" fill="rgb(206,192,2)"/><text x="93.9494%" y="175.50">o..</text></g><g><title>generate_crate_metadata (66,852,185 samples, 5.52%)</title><rect x="90.4173%" y="181" width="5.5228%" height="15" fill="rgb(241,108,4)"/><text x="90.6673%" y="191.50">generat..</text></g><g><title>hir_lowering (12,403,345 samples, 1.02%)</title><rect x="95.9401%" y="181" width="1.0247%" height="15" fill="rgb(247,173,49)"/><text x="96.1901%" y="191.50"></text></g><g><title>finish_ongoing_codegen (29,283,286 samples, 2.42%)</title><rect x="96.9659%" y="165" width="2.4192%" height="15" fill="rgb(224,114,35)"/><text x="97.2159%" y="175.50">fi..</text></g><g><title>link_crate (3,610,666 samples, 0.30%)</title><rect x="99.3851%" y="165" width="0.2983%" height="15" fill="rgb(245,159,27)"/><text x="99.6351%" y="175.50"></text></g><g><title>link_binary (3,519,365 samples, 0.29%)</title><rect x="99.3926%" y="149" width="0.2907%" height="15" fill="rgb(245,172,44)"/><text x="99.6426%" y="159.50"></text></g><g><title>link_rlib (2,792,009 samples, 0.23%)</title><rect x="99.4527%" y="133" width="0.2307%" height="15" fill="rgb(236,23,11)"/><text x="99.7027%" y="143.50"></text></g><g><title>link (32,913,642 samples, 2.72%)</title><rect x="96.9648%" y="181" width="2.7191%" height="15" fill="rgb(205,117,38)"/><text x="97.2148%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (2,602,767 samples, 0.22%)</title><rect x="99.7233%" y="181" width="0.2150%" height="15" fill="rgb(237,72,25)"/><text x="99.9733%" y="191.50"></text></g><g><title>all (1,210,467,259 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,210,467,259 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>