<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (163,763,789 samples, 11.80%)</title><rect x="0.0464%" y="165" width="11.7970%" height="15" fill="rgb(227,0,7)"/><text x="0.2964%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (1,666,241 samples, 0.12%)</title><rect x="15.3533%" y="37" width="0.1200%" height="15" fill="rgb(217,0,24)"/><text x="15.6033%" y="47.50"></text></g><g><title>needs_drop_raw (2,375,017 samples, 0.17%)</title><rect x="15.3155%" y="53" width="0.1711%" height="15" fill="rgb(221,193,54)"/><text x="15.5655%" y="63.50"></text></g><g><title>resolve_instance (1,606,548 samples, 0.12%)</title><rect x="15.4866%" y="53" width="0.1157%" height="15" fill="rgb(248,212,6)"/><text x="15.7366%" y="63.50"></text></g><g><title>thir_body (2,447,968 samples, 0.18%)</title><rect x="15.6075%" y="53" width="0.1763%" height="15" fill="rgb(208,68,35)"/><text x="15.8575%" y="63.50"></text></g><g><title>mir_const (18,530,234 samples, 1.33%)</title><rect x="14.4581%" y="101" width="1.3349%" height="15" fill="rgb(232,128,0)"/><text x="14.7081%" y="111.50"></text></g><g><title>unsafety_check_result (15,940,664 samples, 1.15%)</title><rect x="14.6447%" y="85" width="1.1483%" height="15" fill="rgb(207,160,47)"/><text x="14.8947%" y="95.50"></text></g><g><title>mir_built (14,469,861 samples, 1.04%)</title><rect x="14.7506%" y="69" width="1.0424%" height="15" fill="rgb(228,23,34)"/><text x="15.0006%" y="79.50"></text></g><g><title>mir_promoted (20,717,901 samples, 1.49%)</title><rect x="14.3085%" y="117" width="1.4924%" height="15" fill="rgb(218,30,26)"/><text x="14.5585%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (1,711,308 samples, 0.12%)</title><rect x="15.8725%" y="117" width="0.1233%" height="15" fill="rgb(220,122,19)"/><text x="16.1225%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,720,323 samples, 0.41%)</title><rect x="16.0842%" y="117" width="0.4121%" height="15" fill="rgb(250,228,42)"/><text x="16.3342%" y="127.50"></text></g><g><title>MIR_borrow_checking (63,968,636 samples, 4.61%)</title><rect x="11.8889%" y="149" width="4.6081%" height="15" fill="rgb(240,193,28)"/><text x="12.1389%" y="159.50">MIR_b..</text></g><g><title>mir_borrowck (63,650,035 samples, 4.59%)</title><rect x="11.9118%" y="133" width="4.5851%" height="15" fill="rgb(216,20,37)"/><text x="12.1618%" y="143.50">mir_b..</text></g><g><title>check_mod_attrs (1,603,527 samples, 0.12%)</title><rect x="16.5291%" y="133" width="0.1155%" height="15" fill="rgb(206,188,39)"/><text x="16.7791%" y="143.50"></text></g><g><title>misc_checking_1 (2,693,188 samples, 0.19%)</title><rect x="16.5276%" y="149" width="0.1940%" height="15" fill="rgb(217,207,13)"/><text x="16.7776%" y="159.50"></text></g><g><title>misc_checking_2 (3,318,075 samples, 0.24%)</title><rect x="16.7216%" y="149" width="0.2390%" height="15" fill="rgb(231,73,38)"/><text x="16.9716%" y="159.50"></text></g><g><title>match_checking (2,302,964 samples, 0.17%)</title><rect x="16.7947%" y="133" width="0.1659%" height="15" fill="rgb(225,20,46)"/><text x="17.0447%" y="143.50"></text></g><g><title>check_match (2,229,284 samples, 0.16%)</title><rect x="16.8001%" y="117" width="0.1606%" height="15" fill="rgb(210,31,41)"/><text x="17.0501%" y="127.50"></text></g><g><title>crate_lints (2,750,178 samples, 0.20%)</title><rect x="17.0386%" y="117" width="0.1981%" height="15" fill="rgb(221,200,47)"/><text x="17.2886%" y="127.50"></text></g><g><title>lint_checking (3,969,331 samples, 0.29%)</title><rect x="17.0385%" y="133" width="0.2859%" height="15" fill="rgb(226,26,5)"/><text x="17.2885%" y="143.50"></text></g><g><title>privacy_checking_modules (2,705,139 samples, 0.19%)</title><rect x="17.3677%" y="133" width="0.1949%" height="15" fill="rgb(249,33,26)"/><text x="17.6177%" y="143.50"></text></g><g><title>check_mod_privacy (2,701,749 samples, 0.19%)</title><rect x="17.3679%" y="117" width="0.1946%" height="15" fill="rgb(235,183,28)"/><text x="17.6179%" y="127.50"></text></g><g><title>misc_checking_3 (8,369,968 samples, 0.60%)</title><rect x="16.9606%" y="149" width="0.6029%" height="15" fill="rgb(221,5,38)"/><text x="17.2106%" y="159.50"></text></g><g><title>impl_parent (2,730,558 samples, 0.20%)</title><rect x="17.8746%" y="85" width="0.1967%" height="15" fill="rgb(247,18,42)"/><text x="18.1246%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,477,616 samples, 0.11%)</title><rect x="17.9648%" y="69" width="0.1064%" height="15" fill="rgb(241,131,45)"/><text x="18.2148%" y="79.50"></text></g><g><title>impl_trait_ref (5,974,279 samples, 0.43%)</title><rect x="18.0713%" y="85" width="0.4304%" height="15" fill="rgb(249,31,29)"/><text x="18.3213%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,954,644 samples, 0.36%)</title><rect x="18.1447%" y="69" width="0.3569%" height="15" fill="rgb(225,111,53)"/><text x="18.3947%" y="79.50"></text></g><g><title>coherent_trait (13,883,697 samples, 1.00%)</title><rect x="17.5740%" y="117" width="1.0001%" height="15" fill="rgb(238,160,17)"/><text x="17.8240%" y="127.50"></text></g><g><title>specialization_graph_of (13,849,237 samples, 1.00%)</title><rect x="17.5765%" y="101" width="0.9977%" height="15" fill="rgb(214,148,48)"/><text x="17.8265%" y="111.50"></text></g><g><title>coherence_checking (13,975,758 samples, 1.01%)</title><rect x="17.5721%" y="133" width="1.0068%" height="15" fill="rgb(232,36,49)"/><text x="17.8221%" y="143.50"></text></g><g><title>associated_item (1,885,631 samples, 0.14%)</title><rect x="22.6140%" y="69" width="0.1358%" height="15" fill="rgb(209,103,24)"/><text x="22.8640%" y="79.50"></text></g><g><title>associated_items (2,389,986 samples, 0.17%)</title><rect x="22.5817%" y="85" width="0.1722%" height="15" fill="rgb(229,88,8)"/><text x="22.8317%" y="95.50"></text></g><g><title>evaluate_obligation (4,568,032 samples, 0.33%)</title><rect x="22.8211%" y="85" width="0.3291%" height="15" fill="rgb(213,181,19)"/><text x="23.0711%" y="95.50"></text></g><g><title>typeck (10,706,612 samples, 0.77%)</title><rect x="23.3416%" y="85" width="0.7713%" height="15" fill="rgb(254,191,54)"/><text x="23.5916%" y="95.50"></text></g><g><title>item_bodies_checking (76,858,012 samples, 5.54%)</title><rect x="18.5829%" y="133" width="5.5366%" height="15" fill="rgb(241,83,37)"/><text x="18.8329%" y="143.50">item_bo..</text></g><g><title>typeck_item_bodies (76,854,232 samples, 5.54%)</title><rect x="18.5831%" y="117" width="5.5363%" height="15" fill="rgb(233,36,39)"/><text x="18.8331%" y="127.50">typeck_..</text></g><g><title>typeck (76,626,428 samples, 5.52%)</title><rect x="18.5995%" y="101" width="5.5199%" height="15" fill="rgb(226,3,54)"/><text x="18.8495%" y="111.50">typeck</text></g><g><title>item_types_checking (7,205,256 samples, 0.52%)</title><rect x="24.1194%" y="133" width="0.5190%" height="15" fill="rgb(245,192,40)"/><text x="24.3694%" y="143.50"></text></g><g><title>check_mod_item_types (7,200,606 samples, 0.52%)</title><rect x="24.1198%" y="117" width="0.5187%" height="15" fill="rgb(238,167,29)"/><text x="24.3698%" y="127.50"></text></g><g><title>fn_sig (1,643,156 samples, 0.12%)</title><rect x="24.6830%" y="101" width="0.1184%" height="15" fill="rgb(232,182,51)"/><text x="24.9330%" y="111.50"></text></g><g><title>type_collecting (5,196,666 samples, 0.37%)</title><rect x="24.6387%" y="133" width="0.3744%" height="15" fill="rgb(231,60,39)"/><text x="24.8887%" y="143.50"></text></g><g><title>collect_mod_item_types (5,187,855 samples, 0.37%)</title><rect x="24.6393%" y="117" width="0.3737%" height="15" fill="rgb(208,69,12)"/><text x="24.8893%" y="127.50"></text></g><g><title>check_impl_item_well_formed (10,712,004 samples, 0.77%)</title><rect x="25.0445%" y="117" width="0.7717%" height="15" fill="rgb(235,93,37)"/><text x="25.2945%" y="127.50"></text></g><g><title>analysis (196,675,377 samples, 14.17%)</title><rect x="11.8434%" y="165" width="14.1678%" height="15" fill="rgb(213,116,39)"/><text x="12.0934%" y="175.50">analysis</text></g><g><title>type_check_crate (117,268,139 samples, 8.45%)</title><rect x="17.5636%" y="149" width="8.4476%" height="15" fill="rgb(222,207,29)"/><text x="17.8136%" y="159.50">type_check_c..</text></g><g><title>wf_checking (13,844,236 samples, 1.00%)</title><rect x="25.0139%" y="133" width="0.9973%" height="15" fill="rgb(206,96,30)"/><text x="25.2639%" y="143.50"></text></g><g><title>check_item_well_formed (2,707,917 samples, 0.20%)</title><rect x="25.8161%" y="117" width="0.1951%" height="15" fill="rgb(218,138,4)"/><text x="26.0661%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (4,228,713 samples, 0.30%)</title><rect x="36.1905%" y="133" width="0.3046%" height="15" fill="rgb(250,191,14)"/><text x="36.4405%" y="143.50"></text></g><g><title>const_caller_location (1,662,446 samples, 0.12%)</title><rect x="36.4951%" y="133" width="0.1198%" height="15" fill="rgb(239,60,40)"/><text x="36.7451%" y="143.50"></text></g><g><title>layout_of (2,392,739 samples, 0.17%)</title><rect x="37.2163%" y="117" width="0.1724%" height="15" fill="rgb(206,27,48)"/><text x="37.4663%" y="127.50"></text></g><g><title>predicates_of (2,810,042 samples, 0.20%)</title><rect x="37.7606%" y="101" width="0.2024%" height="15" fill="rgb(225,35,8)"/><text x="38.0106%" y="111.50"></text></g><g><title>predicates_defined_on (1,978,197 samples, 0.14%)</title><rect x="37.8205%" y="85" width="0.1425%" height="15" fill="rgb(250,213,24)"/><text x="38.0705%" y="95.50"></text></g><g><title>param_env (7,987,855 samples, 0.58%)</title><rect x="37.3886%" y="117" width="0.5754%" height="15" fill="rgb(247,123,22)"/><text x="37.6386%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,485,742 samples, 0.18%)</title><rect x="37.9641%" y="117" width="0.1791%" height="15" fill="rgb(231,138,38)"/><text x="38.2141%" y="127.50"></text></g><g><title>normalize_projection_ty (2,030,758 samples, 0.15%)</title><rect x="37.9968%" y="101" width="0.1463%" height="15" fill="rgb(231,145,46)"/><text x="38.2468%" y="111.50"></text></g><g><title>fn_abi_of_instance (21,185,807 samples, 1.53%)</title><rect x="36.6201%" y="133" width="1.5262%" height="15" fill="rgb(251,118,11)"/><text x="36.8701%" y="143.50"></text></g><g><title>layout_of (3,113,813 samples, 0.22%)</title><rect x="38.2409%" y="133" width="0.2243%" height="15" fill="rgb(217,147,25)"/><text x="38.4909%" y="143.50"></text></g><g><title>codegen_module (172,070,685 samples, 12.40%)</title><rect x="26.1879%" y="149" width="12.3954%" height="15" fill="rgb(247,81,37)"/><text x="26.4379%" y="159.50">codegen_module</text></g><g><title>codegen_crate (174,607,633 samples, 12.58%)</title><rect x="26.0116%" y="165" width="12.5781%" height="15" fill="rgb(209,12,38)"/><text x="26.2616%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (684,444,587 samples, 49.31%)</title><rect x="38.6070%" y="149" width="49.3050%" height="15" fill="rgb(227,1,9)"/><text x="38.8570%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (649,229,516 samples, 46.77%)</title><rect x="41.1438%" y="133" width="46.7683%" height="15" fill="rgb(248,47,43)"/><text x="41.3938%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (723,057,724 samples, 52.09%)</title><rect x="38.5898%" y="165" width="52.0866%" height="15" fill="rgb(221,10,30)"/><text x="38.8398%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (38,373,887 samples, 2.76%)</title><rect x="87.9121%" y="149" width="2.7643%" height="15" fill="rgb(210,229,1)"/><text x="88.1621%" y="159.50">LL..</text></g><g><title>metadata_register_crate (1,396,895 samples, 0.10%)</title><rect x="91.9214%" y="117" width="0.1006%" height="15" fill="rgb(222,148,37)"/><text x="92.1714%" y="127.50"></text></g><g><title>macro_expand_crate (18,382,414 samples, 1.32%)</title><rect x="90.7115%" y="149" width="1.3242%" height="15" fill="rgb(234,67,33)"/><text x="90.9615%" y="159.50"></text></g><g><title>expand_crate (18,366,093 samples, 1.32%)</title><rect x="90.7127%" y="133" width="1.3230%" height="15" fill="rgb(247,98,35)"/><text x="90.9627%" y="143.50"></text></g><g><title>late_resolve_crate (4,052,983 samples, 0.29%)</title><rect x="92.0552%" y="133" width="0.2920%" height="15" fill="rgb(247,138,52)"/><text x="92.3052%" y="143.50"></text></g><g><title>configure_and_expand (23,387,657 samples, 1.68%)</title><rect x="90.6764%" y="165" width="1.6848%" height="15" fill="rgb(213,79,30)"/><text x="90.9264%" y="175.50"></text></g><g><title>resolve_crate (4,396,196 samples, 0.32%)</title><rect x="92.0445%" y="149" width="0.3167%" height="15" fill="rgb(246,177,23)"/><text x="92.2945%" y="159.50"></text></g><g><title>free_global_ctxt (7,693,971 samples, 0.55%)</title><rect x="92.4425%" y="165" width="0.5542%" height="15" fill="rgb(230,62,27)"/><text x="92.6925%" y="175.50"></text></g><g><title>item_attrs (2,240,852 samples, 0.16%)</title><rect x="93.7605%" y="69" width="0.1614%" height="15" fill="rgb(216,154,8)"/><text x="94.0105%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,912,348 samples, 0.14%)</title><rect x="93.7841%" y="53" width="0.1378%" height="15" fill="rgb(244,35,45)"/><text x="94.0341%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,760,687 samples, 0.27%)</title><rect x="93.7151%" y="85" width="0.2709%" height="15" fill="rgb(251,115,12)"/><text x="93.9651%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,328,934 samples, 0.38%)</title><rect x="94.3991%" y="69" width="0.3839%" height="15" fill="rgb(240,54,50)"/><text x="94.6491%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,989,213 samples, 0.29%)</title><rect x="94.7830%" y="69" width="0.2874%" height="15" fill="rgb(233,84,52)"/><text x="95.0330%" y="79.50"></text></g><g><title>optimized_mir (13,850,373 samples, 1.00%)</title><rect x="94.0986%" y="85" width="0.9977%" height="15" fill="rgb(207,117,47)"/><text x="94.3486%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,758,792 samples, 0.49%)</title><rect x="95.2636%" y="69" width="0.4869%" height="15" fill="rgb(249,43,39)"/><text x="95.5136%" y="79.50"></text></g><g><title>specialization_graph_of (2,494,198 samples, 0.18%)</title><rect x="95.9544%" y="69" width="0.1797%" height="15" fill="rgb(209,38,44)"/><text x="96.2044%" y="79.50"></text></g><g><title>impl_trait_ref (1,464,825 samples, 0.11%)</title><rect x="96.0286%" y="53" width="0.1055%" height="15" fill="rgb(236,212,23)"/><text x="96.2786%" y="63.50"></text></g><g><title>resolve_instance (15,202,523 samples, 1.10%)</title><rect x="95.0963%" y="85" width="1.0951%" height="15" fill="rgb(242,79,21)"/><text x="95.3463%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,548,767 samples, 0.11%)</title><rect x="96.2356%" y="85" width="0.1116%" height="15" fill="rgb(211,96,35)"/><text x="96.4856%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (44,295,188 samples, 3.19%)</title><rect x="93.2667%" y="101" width="3.1909%" height="15" fill="rgb(253,215,40)"/><text x="93.5167%" y="111.50">mon..</text></g><g><title>monomorphization_collector (44,394,519 samples, 3.20%)</title><rect x="93.2665%" y="117" width="3.1980%" height="15" fill="rgb(211,81,21)"/><text x="93.5165%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (5,718,201 samples, 0.41%)</title><rect x="96.4654%" y="101" width="0.4119%" height="15" fill="rgb(208,190,38)"/><text x="96.7154%" y="111.50"></text></g><g><title>symbol_name (5,173,543 samples, 0.37%)</title><rect x="96.5046%" y="85" width="0.3727%" height="15" fill="rgb(235,213,38)"/><text x="96.7546%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (52,593,746 samples, 3.79%)</title><rect x="93.2613%" y="133" width="3.7887%" height="15" fill="rgb(237,122,38)"/><text x="93.5113%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (8,126,876 samples, 0.59%)</title><rect x="96.4645%" y="117" width="0.5854%" height="15" fill="rgb(244,218,35)"/><text x="96.7145%" y="127.50"></text></g><g><title>cgu_partitioning (2,396,245 samples, 0.17%)</title><rect x="96.8773%" y="101" width="0.1726%" height="15" fill="rgb(240,68,47)"/><text x="97.1273%" y="111.50"></text></g><g><title>exported_symbols (53,140,481 samples, 3.83%)</title><rect x="93.2444%" y="149" width="3.8281%" height="15" fill="rgb(210,16,53)"/><text x="93.4944%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (8,859,044 samples, 0.64%)</title><rect x="97.5446%" y="133" width="0.6382%" height="15" fill="rgb(235,124,12)"/><text x="97.7946%" y="143.50"></text></g><g><title>optimized_mir (15,266,819 samples, 1.10%)</title><rect x="97.0915%" y="149" width="1.0998%" height="15" fill="rgb(224,169,11)"/><text x="97.3415%" y="159.50"></text></g><g><title>generate_crate_metadata (72,385,155 samples, 5.21%)</title><rect x="92.9968%" y="165" width="5.2144%" height="15" fill="rgb(250,166,2)"/><text x="93.2468%" y="175.50">genera..</text></g><g><title>hir_lowering (6,537,179 samples, 0.47%)</title><rect x="98.2112%" y="165" width="0.4709%" height="15" fill="rgb(242,216,29)"/><text x="98.4612%" y="175.50"></text></g><g><title>finish_ongoing_codegen (7,225,557 samples, 0.52%)</title><rect x="98.6836%" y="149" width="0.5205%" height="15" fill="rgb(230,116,27)"/><text x="98.9336%" y="159.50"></text></g><g><title>link_crate (4,186,744 samples, 0.30%)</title><rect x="99.2041%" y="149" width="0.3016%" height="15" fill="rgb(228,99,48)"/><text x="99.4541%" y="159.50"></text></g><g><title>link_binary (4,097,563 samples, 0.30%)</title><rect x="99.2105%" y="133" width="0.2952%" height="15" fill="rgb(253,11,6)"/><text x="99.4605%" y="143.50"></text></g><g><title>link_rlib (3,270,905 samples, 0.24%)</title><rect x="99.2701%" y="117" width="0.2356%" height="15" fill="rgb(247,143,39)"/><text x="99.5201%" y="127.50"></text></g><g><title>link (11,447,781 samples, 0.82%)</title><rect x="98.6821%" y="165" width="0.8247%" height="15" fill="rgb(236,97,10)"/><text x="98.9321%" y="175.50"></text></g><g><title>parse_crate (2,191,583 samples, 0.16%)</title><rect x="99.5067%" y="165" width="0.1579%" height="15" fill="rgb(233,208,19)"/><text x="99.7567%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (3,870,161 samples, 0.28%)</title><rect x="99.6809%" y="165" width="0.2788%" height="15" fill="rgb(216,164,2)"/><text x="99.9309%" y="175.50"></text></g><g><title>all (1,388,183,657 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,388,183,657 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>