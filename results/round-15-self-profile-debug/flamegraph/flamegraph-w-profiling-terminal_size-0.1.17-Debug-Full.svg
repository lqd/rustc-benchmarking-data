<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (10,308,120 samples, 9.48%)</title><rect x="0.6479%" y="181" width="9.4793%" height="15" fill="rgb(227,0,7)"/><text x="0.8979%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (438,005 samples, 0.40%)</title><rect x="12.0423%" y="69" width="0.4028%" height="15" fill="rgb(217,0,24)"/><text x="12.2923%" y="79.50"></text></g><g><title>evaluate_obligation (423,785 samples, 0.39%)</title><rect x="12.0554%" y="53" width="0.3897%" height="15" fill="rgb(221,193,54)"/><text x="12.3054%" y="63.50"></text></g><g><title>trait_impls_of (326,013 samples, 0.30%)</title><rect x="12.1453%" y="37" width="0.2998%" height="15" fill="rgb(248,212,6)"/><text x="12.3953%" y="47.50"></text></g><g><title>needs_drop_raw (154,682 samples, 0.14%)</title><rect x="12.4492%" y="69" width="0.1422%" height="15" fill="rgb(208,68,35)"/><text x="12.6992%" y="79.50"></text></g><g><title>thir_body (119,951 samples, 0.11%)</title><rect x="12.6111%" y="69" width="0.1103%" height="15" fill="rgb(232,128,0)"/><text x="12.8611%" y="79.50"></text></g><g><title>mir_const (1,358,164 samples, 1.25%)</title><rect x="11.4739%" y="117" width="1.2490%" height="15" fill="rgb(207,160,47)"/><text x="11.7239%" y="127.50"></text></g><g><title>unsafety_check_result (1,151,332 samples, 1.06%)</title><rect x="11.6641%" y="101" width="1.0588%" height="15" fill="rgb(228,23,34)"/><text x="11.9141%" y="111.50"></text></g><g><title>mir_built (1,054,001 samples, 0.97%)</title><rect x="11.7536%" y="85" width="0.9693%" height="15" fill="rgb(218,30,26)"/><text x="12.0036%" y="95.50"></text></g><g><title>mir_promoted (1,507,165 samples, 1.39%)</title><rect x="11.3444%" y="133" width="1.3860%" height="15" fill="rgb(220,122,19)"/><text x="11.5944%" y="143.50"></text></g><g><title>type_op_prove_predicate (129,202 samples, 0.12%)</title><rect x="12.7984%" y="133" width="0.1188%" height="15" fill="rgb(250,228,42)"/><text x="13.0484%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,888,281 samples, 2.66%)</title><rect x="10.2628%" y="165" width="2.6560%" height="15" fill="rgb(240,193,28)"/><text x="10.5128%" y="175.50">MI..</text></g><g><title>mir_borrowck (2,878,471 samples, 2.65%)</title><rect x="10.2718%" y="149" width="2.6470%" height="15" fill="rgb(216,20,37)"/><text x="10.5218%" y="159.50">mi..</text></g><g><title>hir_module_items (113,492 samples, 0.10%)</title><rect x="12.9222%" y="165" width="0.1044%" height="15" fill="rgb(206,188,39)"/><text x="13.1722%" y="175.50"></text></g><g><title>codegen_fn_attrs (164,212 samples, 0.15%)</title><rect x="13.2206%" y="101" width="0.1510%" height="15" fill="rgb(217,207,13)"/><text x="13.4706%" y="111.50"></text></g><g><title>codegen_fn_attrs (257,223 samples, 0.24%)</title><rect x="13.1374%" y="133" width="0.2365%" height="15" fill="rgb(231,73,38)"/><text x="13.3874%" y="143.50"></text></g><g><title>should_inherit_track_caller (223,203 samples, 0.21%)</title><rect x="13.1687%" y="117" width="0.2053%" height="15" fill="rgb(225,20,46)"/><text x="13.4187%" y="127.50"></text></g><g><title>check_mod_attrs (351,823 samples, 0.32%)</title><rect x="13.0508%" y="149" width="0.3235%" height="15" fill="rgb(210,31,41)"/><text x="13.3008%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (203,313 samples, 0.19%)</title><rect x="13.4366%" y="149" width="0.1870%" height="15" fill="rgb(221,200,47)"/><text x="13.6866%" y="159.50"></text></g><g><title>misc_checking_1 (686,097 samples, 0.63%)</title><rect x="13.0268%" y="165" width="0.6309%" height="15" fill="rgb(226,26,5)"/><text x="13.2768%" y="175.50"></text></g><g><title>misc_checking_2 (213,403 samples, 0.20%)</title><rect x="13.6577%" y="165" width="0.1962%" height="15" fill="rgb(249,33,26)"/><text x="13.9077%" y="175.50"></text></g><g><title>match_checking (126,032 samples, 0.12%)</title><rect x="13.7381%" y="149" width="0.1159%" height="15" fill="rgb(235,183,28)"/><text x="13.9881%" y="159.50"></text></g><g><title>check_match (119,792 samples, 0.11%)</title><rect x="13.7438%" y="133" width="0.1102%" height="15" fill="rgb(221,5,38)"/><text x="13.9938%" y="143.50"></text></g><g><title>crate_lints (1,489,556 samples, 1.37%)</title><rect x="13.9849%" y="133" width="1.3698%" height="15" fill="rgb(247,18,42)"/><text x="14.2349%" y="143.50"></text></g><g><title>type_of (993,610 samples, 0.91%)</title><rect x="14.4410%" y="117" width="0.9137%" height="15" fill="rgb(241,131,45)"/><text x="14.6910%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (749,289 samples, 0.69%)</title><rect x="14.6656%" y="101" width="0.6890%" height="15" fill="rgb(249,31,29)"/><text x="14.9156%" y="111.50"></text></g><g><title>lint_checking (1,542,056 samples, 1.42%)</title><rect x="13.9839%" y="149" width="1.4181%" height="15" fill="rgb(225,111,53)"/><text x="14.2339%" y="159.50"></text></g><g><title>misc_checking_3 (1,800,799 samples, 1.66%)</title><rect x="13.8540%" y="165" width="1.6560%" height="15" fill="rgb(238,160,17)"/><text x="14.1040%" y="175.50"></text></g><g><title>impl_parent (1,483,523 samples, 1.36%)</title><rect x="17.7348%" y="101" width="1.3642%" height="15" fill="rgb(214,148,48)"/><text x="17.9848%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (878,001 samples, 0.81%)</title><rect x="18.2916%" y="85" width="0.8074%" height="15" fill="rgb(232,36,49)"/><text x="18.5416%" y="95.50"></text></g><g><title>impl_trait_ref (5,470,052 samples, 5.03%)</title><rect x="19.0990%" y="101" width="5.0302%" height="15" fill="rgb(209,103,24)"/><text x="19.3490%" y="111.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,850,834 samples, 4.46%)</title><rect x="19.6685%" y="85" width="4.4608%" height="15" fill="rgb(229,88,8)"/><text x="19.9185%" y="95.50">metad..</text></g><g><title>coherent_trait (9,730,906 samples, 8.95%)</title><rect x="15.5583%" y="133" width="8.9485%" height="15" fill="rgb(213,181,19)"/><text x="15.8083%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (9,723,045 samples, 8.94%)</title><rect x="15.5655%" y="117" width="8.9412%" height="15" fill="rgb(254,191,54)"/><text x="15.8155%" y="127.50">specializatio..</text></g><g><title>trait_impls_of (407,665 samples, 0.37%)</title><rect x="24.1319%" y="101" width="0.3749%" height="15" fill="rgb(241,83,37)"/><text x="24.3819%" y="111.50"></text></g><g><title>coherence_checking (9,784,596 samples, 9.00%)</title><rect x="15.5446%" y="149" width="8.9978%" height="15" fill="rgb(233,36,39)"/><text x="15.7946%" y="159.50">coherence_che..</text></g><g><title>associated_item (300,782 samples, 0.28%)</title><rect x="27.9701%" y="85" width="0.2766%" height="15" fill="rgb(226,3,54)"/><text x="28.2201%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (229,062 samples, 0.21%)</title><rect x="28.0361%" y="69" width="0.2106%" height="15" fill="rgb(245,192,40)"/><text x="28.2861%" y="79.50"></text></g><g><title>associated_items (422,654 samples, 0.39%)</title><rect x="27.8781%" y="101" width="0.3887%" height="15" fill="rgb(238,167,29)"/><text x="28.1281%" y="111.50"></text></g><g><title>dropck_outlives (133,960 samples, 0.12%)</title><rect x="28.2849%" y="101" width="0.1232%" height="15" fill="rgb(232,182,51)"/><text x="28.5349%" y="111.50"></text></g><g><title>evaluate_obligation (1,292,032 samples, 1.19%)</title><rect x="28.4081%" y="101" width="1.1881%" height="15" fill="rgb(231,60,39)"/><text x="28.6581%" y="111.50"></text></g><g><title>trait_impls_of (667,426 samples, 0.61%)</title><rect x="28.9824%" y="85" width="0.6138%" height="15" fill="rgb(208,69,12)"/><text x="29.2324%" y="95.50"></text></g><g><title>implementations_of_trait (205,922 samples, 0.19%)</title><rect x="29.4068%" y="69" width="0.1894%" height="15" fill="rgb(235,93,37)"/><text x="29.6568%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (146,172 samples, 0.13%)</title><rect x="29.4618%" y="53" width="0.1344%" height="15" fill="rgb(213,116,39)"/><text x="29.7118%" y="63.50"></text></g><g><title>associated_item (134,923 samples, 0.12%)</title><rect x="29.7498%" y="69" width="0.1241%" height="15" fill="rgb(222,207,29)"/><text x="29.9998%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (132,592 samples, 0.12%)</title><rect x="29.7519%" y="53" width="0.1219%" height="15" fill="rgb(206,96,30)"/><text x="30.0019%" y="63.50"></text></g><g><title>impl_item_implementor_ids (155,063 samples, 0.14%)</title><rect x="29.7397%" y="101" width="0.1426%" height="15" fill="rgb(218,138,4)"/><text x="29.9897%" y="111.50"></text></g><g><title>associated_items (150,653 samples, 0.14%)</title><rect x="29.7437%" y="85" width="0.1385%" height="15" fill="rgb(250,191,14)"/><text x="29.9937%" y="95.50"></text></g><g><title>evaluate_obligation (118,201 samples, 0.11%)</title><rect x="30.1398%" y="85" width="0.1087%" height="15" fill="rgb(239,60,40)"/><text x="30.3898%" y="95.50"></text></g><g><title>object_safety_violations (244,513 samples, 0.22%)</title><rect x="30.0942%" y="101" width="0.2249%" height="15" fill="rgb(206,27,48)"/><text x="30.3442%" y="111.50"></text></g><g><title>explicit_predicates_of (126,871 samples, 0.12%)</title><rect x="30.4551%" y="69" width="0.1167%" height="15" fill="rgb(225,35,8)"/><text x="30.7051%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (110,091 samples, 0.10%)</title><rect x="30.4706%" y="53" width="0.1012%" height="15" fill="rgb(250,213,24)"/><text x="30.7206%" y="63.50"></text></g><g><title>predicates_of (287,475 samples, 0.26%)</title><rect x="30.3293%" y="101" width="0.2644%" height="15" fill="rgb(247,123,22)"/><text x="30.5793%" y="111.50"></text></g><g><title>predicates_defined_on (197,455 samples, 0.18%)</title><rect x="30.4121%" y="85" width="0.1816%" height="15" fill="rgb(231,138,38)"/><text x="30.6621%" y="95.50"></text></g><g><title>item_bodies_checking (6,721,932 samples, 6.18%)</title><rect x="24.5591%" y="149" width="6.1814%" height="15" fill="rgb(231,145,46)"/><text x="24.8091%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (6,719,192 samples, 6.18%)</title><rect x="24.5617%" y="133" width="6.1789%" height="15" fill="rgb(251,118,11)"/><text x="24.8117%" y="143.50">typeck_i..</text></g><g><title>typeck (6,705,901 samples, 6.17%)</title><rect x="24.5739%" y="117" width="6.1667%" height="15" fill="rgb(217,147,25)"/><text x="24.8239%" y="127.50">typeck</text></g><g><title>impl_parent (118,610 samples, 0.11%)</title><rect x="31.0860%" y="69" width="0.1091%" height="15" fill="rgb(247,81,37)"/><text x="31.3360%" y="79.50"></text></g><g><title>impl_trait_ref (461,375 samples, 0.42%)</title><rect x="31.1950%" y="69" width="0.4243%" height="15" fill="rgb(209,12,38)"/><text x="31.4450%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (403,284 samples, 0.37%)</title><rect x="31.2485%" y="53" width="0.3709%" height="15" fill="rgb(227,1,9)"/><text x="31.4985%" y="63.50"></text></g><g><title>adt_destructor (866,659 samples, 0.80%)</title><rect x="30.9111%" y="117" width="0.7970%" height="15" fill="rgb(248,47,43)"/><text x="31.1611%" y="127.50"></text></g><g><title>coherent_trait (860,719 samples, 0.79%)</title><rect x="30.9165%" y="101" width="0.7915%" height="15" fill="rgb(221,10,30)"/><text x="31.1665%" y="111.50"></text></g><g><title>specialization_graph_of (857,489 samples, 0.79%)</title><rect x="30.9195%" y="85" width="0.7885%" height="15" fill="rgb(210,229,1)"/><text x="31.1695%" y="95.50"></text></g><g><title>item_types_checking (1,096,362 samples, 1.01%)</title><rect x="30.7406%" y="149" width="1.0082%" height="15" fill="rgb(222,148,37)"/><text x="30.9906%" y="159.50"></text></g><g><title>check_mod_item_types (1,090,452 samples, 1.00%)</title><rect x="30.7460%" y="133" width="1.0028%" height="15" fill="rgb(234,67,33)"/><text x="30.9960%" y="143.50"></text></g><g><title>fn_sig (172,711 samples, 0.16%)</title><rect x="31.8649%" y="117" width="0.1588%" height="15" fill="rgb(247,98,35)"/><text x="32.1149%" y="127.50"></text></g><g><title>named_region_map (157,902 samples, 0.15%)</title><rect x="32.0594%" y="101" width="0.1452%" height="15" fill="rgb(247,138,52)"/><text x="32.3094%" y="111.50"></text></g><g><title>resolve_lifetimes (144,372 samples, 0.13%)</title><rect x="32.0718%" y="85" width="0.1328%" height="15" fill="rgb(213,79,30)"/><text x="32.3218%" y="95.50"></text></g><g><title>generics_of (205,192 samples, 0.19%)</title><rect x="32.0238%" y="117" width="0.1887%" height="15" fill="rgb(246,177,23)"/><text x="32.2738%" y="127.50"></text></g><g><title>predicates_of (145,670 samples, 0.13%)</title><rect x="32.2448%" y="117" width="0.1340%" height="15" fill="rgb(230,62,27)"/><text x="32.4948%" y="127.50"></text></g><g><title>predicates_defined_on (132,060 samples, 0.12%)</title><rect x="32.2573%" y="101" width="0.1214%" height="15" fill="rgb(216,154,8)"/><text x="32.5073%" y="111.50"></text></g><g><title>type_collecting (763,859 samples, 0.70%)</title><rect x="31.7510%" y="149" width="0.7024%" height="15" fill="rgb(244,35,45)"/><text x="32.0010%" y="159.50"></text></g><g><title>collect_mod_item_types (753,379 samples, 0.69%)</title><rect x="31.7607%" y="133" width="0.6928%" height="15" fill="rgb(251,115,12)"/><text x="32.0107%" y="143.50"></text></g><g><title>evaluate_obligation (266,542 samples, 0.25%)</title><rect x="32.7384%" y="117" width="0.2451%" height="15" fill="rgb(240,54,50)"/><text x="32.9884%" y="127.50"></text></g><g><title>check_impl_item_well_formed (661,377 samples, 0.61%)</title><rect x="32.4983%" y="133" width="0.6082%" height="15" fill="rgb(233,84,52)"/><text x="32.7483%" y="143.50"></text></g><g><title>evaluate_obligation (141,021 samples, 0.13%)</title><rect x="33.4435%" y="117" width="0.1297%" height="15" fill="rgb(207,117,47)"/><text x="33.6935%" y="127.50"></text></g><g><title>param_env (166,301 samples, 0.15%)</title><rect x="33.6406%" y="117" width="0.1529%" height="15" fill="rgb(249,43,39)"/><text x="33.8906%" y="127.50"></text></g><g><title>analysis (25,901,049 samples, 23.82%)</title><rect x="10.1271%" y="181" width="23.8184%" height="15" fill="rgb(209,38,44)"/><text x="10.3771%" y="191.50">analysis</text></g><g><title>type_check_crate (20,047,516 samples, 18.44%)</title><rect x="15.5100%" y="165" width="18.4355%" height="15" fill="rgb(236,212,23)"/><text x="15.7600%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,621,507 samples, 1.49%)</title><rect x="32.4544%" y="149" width="1.4911%" height="15" fill="rgb(242,79,21)"/><text x="32.7044%" y="159.50"></text></g><g><title>check_item_well_formed (912,419 samples, 0.84%)</title><rect x="33.1065%" y="133" width="0.8391%" height="15" fill="rgb(211,96,35)"/><text x="33.3565%" y="143.50"></text></g><g><title>param_env (187,511 samples, 0.17%)</title><rect x="38.7757%" y="133" width="0.1724%" height="15" fill="rgb(253,215,40)"/><text x="39.0257%" y="143.50"></text></g><g><title>fn_abi_of_instance (504,574 samples, 0.46%)</title><rect x="38.4879%" y="149" width="0.4640%" height="15" fill="rgb(211,81,21)"/><text x="38.7379%" y="159.50"></text></g><g><title>codegen_module (4,712,000 samples, 4.33%)</title><rect x="34.8028%" y="165" width="4.3331%" height="15" fill="rgb(208,190,38)"/><text x="35.0528%" y="175.50">codeg..</text></g><g><title>codegen_crate (5,706,781 samples, 5.25%)</title><rect x="33.9524%" y="181" width="5.2479%" height="15" fill="rgb(235,213,38)"/><text x="34.2024%" y="191.50">codege..</text></g><g><title>LLVM_module_codegen (28,764,199 samples, 26.45%)</title><rect x="39.2616%" y="165" width="26.4513%" height="15" fill="rgb(237,122,38)"/><text x="39.5116%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (27,658,778 samples, 25.43%)</title><rect x="40.2781%" y="149" width="25.4348%" height="15" fill="rgb(244,218,35)"/><text x="40.5281%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (29,980,891 samples, 27.57%)</title><rect x="39.2003%" y="181" width="27.5702%" height="15" fill="rgb(240,68,47)"/><text x="39.4503%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,150,061 samples, 1.06%)</title><rect x="65.7129%" y="165" width="1.0576%" height="15" fill="rgb(210,16,53)"/><text x="65.9629%" y="175.50"></text></g><g><title>metadata_register_crate (2,629,058 samples, 2.42%)</title><rect x="84.3644%" y="133" width="2.4177%" height="15" fill="rgb(235,124,12)"/><text x="84.6144%" y="143.50">me..</text></g><g><title>metadata_register_crate (933,659 samples, 0.86%)</title><rect x="85.9235%" y="117" width="0.8586%" height="15" fill="rgb(224,169,11)"/><text x="86.1735%" y="127.50"></text></g><g><title>macro_expand_crate (21,512,020 samples, 19.78%)</title><rect x="67.0615%" y="165" width="19.7823%" height="15" fill="rgb(250,166,2)"/><text x="67.3115%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (21,488,470 samples, 19.76%)</title><rect x="67.0831%" y="149" width="19.7606%" height="15" fill="rgb(242,216,29)"/><text x="67.3331%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (982,950 samples, 0.90%)</title><rect x="87.0055%" y="149" width="0.9039%" height="15" fill="rgb(230,116,27)"/><text x="87.2555%" y="159.50"></text></g><g><title>configure_and_expand (23,041,857 samples, 21.19%)</title><rect x="66.7705%" y="181" width="21.1891%" height="15" fill="rgb(228,99,48)"/><text x="67.0205%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,155,193 samples, 1.06%)</title><rect x="86.8973%" y="165" width="1.0623%" height="15" fill="rgb(253,11,6)"/><text x="87.1473%" y="175.50"></text></g><g><title>early_lint_checks (149,491 samples, 0.14%)</title><rect x="88.0206%" y="181" width="0.1375%" height="15" fill="rgb(247,143,39)"/><text x="88.2706%" y="191.50"></text></g><g><title>free_global_ctxt (3,418,487 samples, 3.14%)</title><rect x="88.1580%" y="181" width="3.1436%" height="15" fill="rgb(236,97,10)"/><text x="88.4080%" y="191.50">fre..</text></g><g><title>layout_of (115,541 samples, 0.11%)</title><rect x="92.4754%" y="85" width="0.1063%" height="15" fill="rgb(233,208,19)"/><text x="92.7254%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (252,473 samples, 0.23%)</title><rect x="92.6352%" y="85" width="0.2322%" height="15" fill="rgb(216,164,2)"/><text x="92.8852%" y="95.50"></text></g><g><title>optimized_mir (818,698 samples, 0.75%)</title><rect x="92.1239%" y="101" width="0.7529%" height="15" fill="rgb(220,129,5)"/><text x="92.3739%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (182,801 samples, 0.17%)</title><rect x="92.9336%" y="85" width="0.1681%" height="15" fill="rgb(242,17,10)"/><text x="93.1836%" y="95.50"></text></g><g><title>impl_parent (287,426 samples, 0.26%)</title><rect x="93.6560%" y="69" width="0.2643%" height="15" fill="rgb(242,107,0)"/><text x="93.9060%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (168,443 samples, 0.15%)</title><rect x="93.7655%" y="53" width="0.1549%" height="15" fill="rgb(251,28,31)"/><text x="94.0155%" y="63.50"></text></g><g><title>specialization_graph_of (1,336,145 samples, 1.23%)</title><rect x="93.1616%" y="85" width="1.2287%" height="15" fill="rgb(233,223,10)"/><text x="93.4116%" y="95.50"></text></g><g><title>impl_trait_ref (511,016 samples, 0.47%)</title><rect x="93.9204%" y="69" width="0.4699%" height="15" fill="rgb(215,21,27)"/><text x="94.1704%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (389,656 samples, 0.36%)</title><rect x="94.0320%" y="53" width="0.3583%" height="15" fill="rgb(232,23,21)"/><text x="94.2820%" y="63.50"></text></g><g><title>resolve_instance (1,666,568 samples, 1.53%)</title><rect x="92.8768%" y="101" width="1.5326%" height="15" fill="rgb(244,5,23)"/><text x="93.1268%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (173,772 samples, 0.16%)</title><rect x="94.4252%" y="101" width="0.1598%" height="15" fill="rgb(226,81,46)"/><text x="94.6752%" y="111.50"></text></g><g><title>upstream_monomorphizations (171,482 samples, 0.16%)</title><rect x="94.4273%" y="85" width="0.1577%" height="15" fill="rgb(247,70,30)"/><text x="94.6773%" y="95.50"></text></g><g><title>exported_symbols (115,741 samples, 0.11%)</title><rect x="94.4785%" y="69" width="0.1064%" height="15" fill="rgb(212,68,19)"/><text x="94.7285%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (112,041 samples, 0.10%)</title><rect x="94.4819%" y="53" width="0.1030%" height="15" fill="rgb(240,187,13)"/><text x="94.7319%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (3,004,402 samples, 2.76%)</title><rect x="91.8947%" y="117" width="2.7628%" height="15" fill="rgb(223,113,26)"/><text x="92.1447%" y="127.50">mo..</text></g><g><title>monomorphization_collector (3,021,602 samples, 2.78%)</title><rect x="91.8926%" y="133" width="2.7786%" height="15" fill="rgb(206,192,2)"/><text x="92.1426%" y="143.50">mo..</text></g><g><title>collect_and_partition_mono_items (3,233,875 samples, 2.97%)</title><rect x="91.8597%" y="149" width="2.9738%" height="15" fill="rgb(241,108,4)"/><text x="92.1097%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (176,472 samples, 0.16%)</title><rect x="94.6713%" y="133" width="0.1623%" height="15" fill="rgb(247,173,49)"/><text x="94.9213%" y="143.50"></text></g><g><title>exported_symbols (3,270,645 samples, 3.01%)</title><rect x="91.8425%" y="165" width="3.0077%" height="15" fill="rgb(224,114,35)"/><text x="92.0925%" y="175.50">exp..</text></g><g><title>generate_crate_metadata (3,933,232 samples, 3.62%)</title><rect x="91.3017%" y="181" width="3.6170%" height="15" fill="rgb(245,159,27)"/><text x="91.5517%" y="191.50">gene..</text></g><g><title>hir_lowering (813,999 samples, 0.75%)</title><rect x="94.9186%" y="181" width="0.7485%" height="15" fill="rgb(245,172,44)"/><text x="95.1686%" y="191.50"></text></g><g><title>finish_ongoing_codegen (1,667,058 samples, 1.53%)</title><rect x="95.6777%" y="165" width="1.5330%" height="15" fill="rgb(236,23,11)"/><text x="95.9277%" y="175.50"></text></g><g><title>link_crate (827,119 samples, 0.76%)</title><rect x="97.2107%" y="165" width="0.7606%" height="15" fill="rgb(205,117,38)"/><text x="97.4607%" y="175.50"></text></g><g><title>link_binary (815,479 samples, 0.75%)</title><rect x="97.2214%" y="149" width="0.7499%" height="15" fill="rgb(237,72,25)"/><text x="97.4714%" y="159.50"></text></g><g><title>link_rlib (474,595 samples, 0.44%)</title><rect x="97.5349%" y="133" width="0.4364%" height="15" fill="rgb(244,70,9)"/><text x="97.7849%" y="143.50"></text></g><g><title>link (2,512,357 samples, 2.31%)</title><rect x="95.6672%" y="181" width="2.3103%" height="15" fill="rgb(217,125,39)"/><text x="95.9172%" y="191.50">l..</text></g><g><title>parse_crate (476,705 samples, 0.44%)</title><rect x="97.9775%" y="181" width="0.4384%" height="15" fill="rgb(235,36,10)"/><text x="98.2275%" y="191.50"></text></g><g><title>prepare_outputs (365,314 samples, 0.34%)</title><rect x="98.4231%" y="181" width="0.3359%" height="15" fill="rgb(251,123,47)"/><text x="98.6731%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (937,210 samples, 0.86%)</title><rect x="98.7590%" y="181" width="0.8619%" height="15" fill="rgb(221,13,13)"/><text x="99.0090%" y="191.50"></text></g><g><title>setup_global_ctxt (109,861 samples, 0.10%)</title><rect x="99.6216%" y="181" width="0.1010%" height="15" fill="rgb(238,131,9)"/><text x="99.8716%" y="191.50"></text></g><g><title>all (108,743,836 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (108,743,836 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (301,574 samples, 0.28%)</title><rect x="99.7227%" y="181" width="0.2773%" height="15" fill="rgb(242,14,37)"/><text x="99.9727%" y="191.50"></text></g></svg></svg>