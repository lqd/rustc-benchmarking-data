<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (271,355,311 samples, 18.82%)</title><rect x="0.0635%" y="165" width="18.8188%" height="15" fill="rgb(227,0,7)"/><text x="0.3135%" y="175.50">LLVM_passes</text></g><g><title>mir_const (3,518,598 samples, 0.24%)</title><rect x="19.1068%" y="101" width="0.2440%" height="15" fill="rgb(217,0,24)"/><text x="19.3568%" y="111.50"></text></g><g><title>unsafety_check_result (3,156,334 samples, 0.22%)</title><rect x="19.1320%" y="85" width="0.2189%" height="15" fill="rgb(221,193,54)"/><text x="19.3820%" y="95.50"></text></g><g><title>mir_built (2,853,821 samples, 0.20%)</title><rect x="19.1529%" y="69" width="0.1979%" height="15" fill="rgb(248,212,6)"/><text x="19.4029%" y="79.50"></text></g><g><title>mir_promoted (3,762,980 samples, 0.26%)</title><rect x="19.0906%" y="117" width="0.2610%" height="15" fill="rgb(208,68,35)"/><text x="19.3406%" y="127.50"></text></g><g><title>MIR_borrow_checking (7,678,858 samples, 0.53%)</title><rect x="18.8986%" y="149" width="0.5325%" height="15" fill="rgb(232,128,0)"/><text x="19.1486%" y="159.50"></text></g><g><title>mir_borrowck (7,659,648 samples, 0.53%)</title><rect x="18.8999%" y="133" width="0.5312%" height="15" fill="rgb(207,160,47)"/><text x="19.1499%" y="143.50"></text></g><g><title>specialization_graph_of (2,769,468 samples, 0.19%)</title><rect x="19.6122%" y="85" width="0.1921%" height="15" fill="rgb(228,23,34)"/><text x="19.8622%" y="95.50"></text></g><g><title>impl_trait_ref (1,447,484 samples, 0.10%)</title><rect x="19.7039%" y="69" width="0.1004%" height="15" fill="rgb(218,30,26)"/><text x="19.9539%" y="79.50"></text></g><g><title>resolve_instance (2,854,739 samples, 0.20%)</title><rect x="19.6065%" y="101" width="0.1980%" height="15" fill="rgb(220,122,19)"/><text x="19.8565%" y="111.50"></text></g><g><title>crate_lints (6,073,992 samples, 0.42%)</title><rect x="19.5650%" y="117" width="0.4212%" height="15" fill="rgb(250,228,42)"/><text x="19.8150%" y="127.50"></text></g><g><title>type_of (2,615,954 samples, 0.18%)</title><rect x="19.8049%" y="101" width="0.1814%" height="15" fill="rgb(240,193,28)"/><text x="20.0549%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (2,153,528 samples, 0.15%)</title><rect x="19.8369%" y="85" width="0.1493%" height="15" fill="rgb(216,20,37)"/><text x="20.0869%" y="95.50"></text></g><g><title>lint_checking (6,238,514 samples, 0.43%)</title><rect x="19.5649%" y="133" width="0.4326%" height="15" fill="rgb(206,188,39)"/><text x="19.8149%" y="143.50"></text></g><g><title>misc_checking_3 (6,807,610 samples, 0.47%)</title><rect x="19.5516%" y="149" width="0.4721%" height="15" fill="rgb(217,207,13)"/><text x="19.8016%" y="159.50"></text></g><g><title>dropck_outlives (2,094,921 samples, 0.15%)</title><rect x="20.3488%" y="85" width="0.1453%" height="15" fill="rgb(231,73,38)"/><text x="20.5988%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,936,769 samples, 0.13%)</title><rect x="20.3598%" y="69" width="0.1343%" height="15" fill="rgb(225,20,46)"/><text x="20.6098%" y="79.50"></text></g><g><title>evaluate_obligation (2,205,379 samples, 0.15%)</title><rect x="21.0466%" y="69" width="0.1529%" height="15" fill="rgb(210,31,41)"/><text x="21.2966%" y="79.50"></text></g><g><title>typeck (12,053,973 samples, 0.84%)</title><rect x="20.5823%" y="85" width="0.8360%" height="15" fill="rgb(221,200,47)"/><text x="20.8323%" y="95.50"></text></g><g><title>item_bodies_checking (18,896,992 samples, 1.31%)</title><rect x="20.1098%" y="133" width="1.3105%" height="15" fill="rgb(226,26,5)"/><text x="20.3598%" y="143.50"></text></g><g><title>typeck_item_bodies (18,893,652 samples, 1.31%)</title><rect x="20.1101%" y="117" width="1.3103%" height="15" fill="rgb(249,33,26)"/><text x="20.3601%" y="127.50"></text></g><g><title>typeck (18,866,422 samples, 1.31%)</title><rect x="20.1119%" y="101" width="1.3084%" height="15" fill="rgb(235,183,28)"/><text x="20.3619%" y="111.50"></text></g><g><title>predicates_of (1,677,996 samples, 0.12%)</title><rect x="21.4959%" y="101" width="0.1164%" height="15" fill="rgb(221,5,38)"/><text x="21.7459%" y="111.50"></text></g><g><title>predicates_defined_on (1,646,206 samples, 0.11%)</title><rect x="21.4981%" y="85" width="0.1142%" height="15" fill="rgb(247,18,42)"/><text x="21.7481%" y="95.50"></text></g><g><title>type_collecting (2,361,414 samples, 0.16%)</title><rect x="21.4560%" y="133" width="0.1638%" height="15" fill="rgb(241,131,45)"/><text x="21.7060%" y="143.50"></text></g><g><title>collect_mod_item_types (2,349,124 samples, 0.16%)</title><rect x="21.4569%" y="117" width="0.1629%" height="15" fill="rgb(249,31,29)"/><text x="21.7069%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,860,080 samples, 0.13%)</title><rect x="21.6274%" y="117" width="0.1290%" height="15" fill="rgb(225,111,53)"/><text x="21.8774%" y="127.50"></text></g><g><title>check_item_well_formed (2,620,807 samples, 0.18%)</title><rect x="21.7564%" y="117" width="0.1818%" height="15" fill="rgb(238,160,17)"/><text x="22.0064%" y="127.50"></text></g><g><title>analysis (44,352,932 samples, 3.08%)</title><rect x="18.8823%" y="165" width="3.0759%" height="15" fill="rgb(214,148,48)"/><text x="19.1323%" y="175.50">ana..</text></g><g><title>type_check_crate (27,894,814 samples, 1.93%)</title><rect x="20.0237%" y="149" width="1.9345%" height="15" fill="rgb(232,36,49)"/><text x="20.2737%" y="159.50">t..</text></g><g><title>wf_checking (4,879,210 samples, 0.34%)</title><rect x="21.6199%" y="133" width="0.3384%" height="15" fill="rgb(209,103,24)"/><text x="21.8699%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (6,046,119 samples, 0.42%)</title><rect x="35.8500%" y="133" width="0.4193%" height="15" fill="rgb(229,88,8)"/><text x="36.1000%" y="143.50"></text></g><g><title>const_caller_location (2,614,390 samples, 0.18%)</title><rect x="36.2693%" y="133" width="0.1813%" height="15" fill="rgb(213,181,19)"/><text x="36.5193%" y="143.50"></text></g><g><title>layout_of (4,615,950 samples, 0.32%)</title><rect x="37.1633%" y="117" width="0.3201%" height="15" fill="rgb(254,191,54)"/><text x="37.4133%" y="127.50"></text></g><g><title>predicates_of (2,873,448 samples, 0.20%)</title><rect x="37.8650%" y="101" width="0.1993%" height="15" fill="rgb(241,83,37)"/><text x="38.1150%" y="111.50"></text></g><g><title>predicates_defined_on (2,086,180 samples, 0.14%)</title><rect x="37.9196%" y="85" width="0.1447%" height="15" fill="rgb(233,36,39)"/><text x="38.1696%" y="95.50"></text></g><g><title>param_env (8,407,499 samples, 0.58%)</title><rect x="37.4835%" y="117" width="0.5831%" height="15" fill="rgb(226,3,54)"/><text x="37.7335%" y="127.50"></text></g><g><title>fn_abi_of_instance (24,377,315 samples, 1.69%)</title><rect x="36.4544%" y="133" width="1.6906%" height="15" fill="rgb(245,192,40)"/><text x="36.7044%" y="143.50"></text></g><g><title>layout_of (5,543,036 samples, 0.38%)</title><rect x="38.2228%" y="133" width="0.3844%" height="15" fill="rgb(238,167,29)"/><text x="38.4728%" y="143.50"></text></g><g><title>codegen_module (237,764,311 samples, 16.49%)</title><rect x="22.1834%" y="149" width="16.4892%" height="15" fill="rgb(232,182,51)"/><text x="22.4334%" y="159.50">codegen_module</text></g><g><title>codegen_crate (241,076,314 samples, 16.72%)</title><rect x="21.9591%" y="165" width="16.7189%" height="15" fill="rgb(231,60,39)"/><text x="22.2091%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (715,863,948 samples, 49.65%)</title><rect x="38.6930%" y="149" width="49.6459%" height="15" fill="rgb(208,69,12)"/><text x="38.9430%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (685,103,735 samples, 47.51%)</title><rect x="40.8262%" y="133" width="47.5127%" height="15" fill="rgb(235,93,37)"/><text x="41.0762%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (753,305,850 samples, 52.24%)</title><rect x="38.6780%" y="165" width="52.2426%" height="15" fill="rgb(213,116,39)"/><text x="38.9280%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (37,225,249 samples, 2.58%)</title><rect x="88.3389%" y="149" width="2.5816%" height="15" fill="rgb(222,207,29)"/><text x="88.5889%" y="159.50">LL..</text></g><g><title>macro_expand_crate (13,246,505 samples, 0.92%)</title><rect x="90.9541%" y="149" width="0.9187%" height="15" fill="rgb(206,96,30)"/><text x="91.2041%" y="159.50"></text></g><g><title>expand_crate (13,220,595 samples, 0.92%)</title><rect x="90.9559%" y="133" width="0.9169%" height="15" fill="rgb(218,138,4)"/><text x="91.2059%" y="143.50"></text></g><g><title>metadata_register_crate (2,585,736 samples, 0.18%)</title><rect x="91.6934%" y="117" width="0.1793%" height="15" fill="rgb(250,191,14)"/><text x="91.9434%" y="127.50"></text></g><g><title>late_resolve_crate (1,487,105 samples, 0.10%)</title><rect x="91.9171%" y="133" width="0.1031%" height="15" fill="rgb(239,60,40)"/><text x="92.1671%" y="143.50"></text></g><g><title>configure_and_expand (15,929,661 samples, 1.10%)</title><rect x="90.9205%" y="165" width="1.1047%" height="15" fill="rgb(206,27,48)"/><text x="91.1705%" y="175.50"></text></g><g><title>resolve_crate (1,925,159 samples, 0.13%)</title><rect x="91.8918%" y="149" width="0.1335%" height="15" fill="rgb(225,35,8)"/><text x="92.1418%" y="159.50"></text></g><g><title>free_global_ctxt (7,000,641 samples, 0.49%)</title><rect x="92.0529%" y="165" width="0.4855%" height="15" fill="rgb(250,213,24)"/><text x="92.3029%" y="175.50"></text></g><g><title>item_attrs (1,969,446 samples, 0.14%)</title><rect x="93.2086%" y="69" width="0.1366%" height="15" fill="rgb(247,123,22)"/><text x="93.4586%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,878,135 samples, 0.13%)</title><rect x="93.2150%" y="53" width="0.1303%" height="15" fill="rgb(231,138,38)"/><text x="93.4650%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,346,418 samples, 0.23%)</title><rect x="93.1682%" y="85" width="0.2321%" height="15" fill="rgb(231,145,46)"/><text x="93.4182%" y="95.50"></text></g><g><title>mir_shims (4,227,526 samples, 0.29%)</title><rect x="93.4424%" y="85" width="0.2932%" height="15" fill="rgb(251,118,11)"/><text x="93.6924%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,772,923 samples, 0.40%)</title><rect x="93.8106%" y="69" width="0.4004%" height="15" fill="rgb(217,147,25)"/><text x="94.0606%" y="79.50"></text></g><g><title>optimized_mir (7,581,482 samples, 0.53%)</title><rect x="93.7357%" y="85" width="0.5258%" height="15" fill="rgb(247,81,37)"/><text x="93.9857%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (5,973,656 samples, 0.41%)</title><rect x="94.4495%" y="69" width="0.4143%" height="15" fill="rgb(209,12,38)"/><text x="94.6995%" y="79.50"></text></g><g><title>needs_drop_raw (1,548,232 samples, 0.11%)</title><rect x="94.9261%" y="69" width="0.1074%" height="15" fill="rgb(227,1,9)"/><text x="95.1761%" y="79.50"></text></g><g><title>specialization_graph_of (5,073,869 samples, 0.35%)</title><rect x="95.0344%" y="69" width="0.3519%" height="15" fill="rgb(248,47,43)"/><text x="95.2844%" y="79.50"></text></g><g><title>impl_trait_ref (1,749,300 samples, 0.12%)</title><rect x="95.2650%" y="53" width="0.1213%" height="15" fill="rgb(221,10,30)"/><text x="95.5150%" y="63.50"></text></g><g><title>resolve_instance (17,003,367 samples, 1.18%)</title><rect x="94.2615%" y="85" width="1.1792%" height="15" fill="rgb(210,229,1)"/><text x="94.5115%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,775,980 samples, 0.19%)</title><rect x="95.4755%" y="69" width="0.1925%" height="15" fill="rgb(222,148,37)"/><text x="95.7255%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,644,106 samples, 0.18%)</title><rect x="95.4846%" y="53" width="0.1834%" height="15" fill="rgb(234,67,33)"/><text x="95.7346%" y="63.50"></text></g><g><title>eval_to_allocation_raw (2,453,784 samples, 0.17%)</title><rect x="95.4978%" y="37" width="0.1702%" height="15" fill="rgb(247,98,35)"/><text x="95.7478%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,241,001 samples, 0.22%)</title><rect x="95.4492%" y="85" width="0.2248%" height="15" fill="rgb(247,138,52)"/><text x="95.6992%" y="95.50"></text></g><g><title>specialization_graph_of (2,390,245 samples, 0.17%)</title><rect x="95.7590%" y="53" width="0.1658%" height="15" fill="rgb(213,79,30)"/><text x="96.0090%" y="63.50"></text></g><g><title>resolve_instance (2,838,308 samples, 0.20%)</title><rect x="95.7285%" y="69" width="0.1968%" height="15" fill="rgb(246,177,23)"/><text x="95.9785%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (47,803,877 samples, 3.32%)</title><rect x="92.6103%" y="101" width="3.3152%" height="15" fill="rgb(230,62,27)"/><text x="92.8603%" y="111.50">mon..</text></g><g><title>vtable_entries (3,421,424 samples, 0.24%)</title><rect x="95.6883%" y="85" width="0.2373%" height="15" fill="rgb(216,154,8)"/><text x="95.9383%" y="95.50"></text></g><g><title>monomorphization_collector (47,828,137 samples, 3.32%)</title><rect x="92.6101%" y="117" width="3.3169%" height="15" fill="rgb(244,35,45)"/><text x="92.8601%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (5,635,017 samples, 0.39%)</title><rect x="95.9274%" y="101" width="0.3908%" height="15" fill="rgb(251,115,12)"/><text x="96.1774%" y="111.50"></text></g><g><title>symbol_name (4,921,349 samples, 0.34%)</title><rect x="95.9769%" y="85" width="0.3413%" height="15" fill="rgb(240,54,50)"/><text x="96.2269%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (56,155,941 samples, 3.89%)</title><rect x="92.6062%" y="133" width="3.8945%" height="15" fill="rgb(233,84,52)"/><text x="92.8562%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (8,271,584 samples, 0.57%)</title><rect x="95.9271%" y="117" width="0.5736%" height="15" fill="rgb(207,117,47)"/><text x="96.1771%" y="127.50"></text></g><g><title>cgu_partitioning (2,631,447 samples, 0.18%)</title><rect x="96.3182%" y="101" width="0.1825%" height="15" fill="rgb(249,43,39)"/><text x="96.5682%" y="111.50"></text></g><g><title>exported_symbols (56,504,515 samples, 3.92%)</title><rect x="92.5846%" y="149" width="3.9186%" height="15" fill="rgb(209,38,44)"/><text x="92.8346%" y="159.50">expo..</text></g><g><title>optimized_mir (1,608,556 samples, 0.11%)</title><rect x="96.5075%" y="149" width="0.1116%" height="15" fill="rgb(236,212,23)"/><text x="96.7575%" y="159.50"></text></g><g><title>generate_crate_metadata (58,858,149 samples, 4.08%)</title><rect x="92.5384%" y="165" width="4.0819%" height="15" fill="rgb(242,79,21)"/><text x="92.7884%" y="175.50">gene..</text></g><g><title>hir_lowering (1,592,776 samples, 0.11%)</title><rect x="96.6203%" y="165" width="0.1105%" height="15" fill="rgb(211,96,35)"/><text x="96.8703%" y="175.50"></text></g><g><title>finish_ongoing_codegen (36,168,068 samples, 2.51%)</title><rect x="96.7318%" y="149" width="2.5083%" height="15" fill="rgb(253,215,40)"/><text x="96.9818%" y="159.50">fi..</text></g><g><title>link_crate (4,277,064 samples, 0.30%)</title><rect x="99.2401%" y="149" width="0.2966%" height="15" fill="rgb(211,81,21)"/><text x="99.4901%" y="159.50"></text></g><g><title>link_binary (4,214,913 samples, 0.29%)</title><rect x="99.2444%" y="133" width="0.2923%" height="15" fill="rgb(208,190,38)"/><text x="99.4944%" y="143.50"></text></g><g><title>link_rlib (3,291,653 samples, 0.23%)</title><rect x="99.3085%" y="117" width="0.2283%" height="15" fill="rgb(235,213,38)"/><text x="99.5585%" y="127.50"></text></g><g><title>link (40,470,492 samples, 2.81%)</title><rect x="96.7308%" y="165" width="2.8067%" height="15" fill="rgb(237,122,38)"/><text x="96.9808%" y="175.50">li..</text></g><g><title>parse_crate (4,363,175 samples, 0.30%)</title><rect x="99.5374%" y="165" width="0.3026%" height="15" fill="rgb(244,218,35)"/><text x="99.7874%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,486,765 samples, 0.10%)</title><rect x="99.8661%" y="165" width="0.1031%" height="15" fill="rgb(240,68,47)"/><text x="100.1161%" y="175.50"></text></g><g><title>all (1,441,939,018 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,441,939,018 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>