<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (328,573,521 samples, 14.48%)</title><rect x="0.0397%" y="213" width="14.4759%" height="15" fill="rgb(227,0,7)"/><text x="0.2897%" y="223.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,626,154 samples, 0.16%)</title><rect x="16.7302%" y="101" width="0.1598%" height="15" fill="rgb(217,0,24)"/><text x="16.9802%" y="111.50"></text></g><g><title>is_copy_raw (2,752,417 samples, 0.12%)</title><rect x="16.7687%" y="85" width="0.1213%" height="15" fill="rgb(221,193,54)"/><text x="17.0187%" y="95.50"></text></g><g><title>evaluate_obligation (2,353,266 samples, 0.10%)</title><rect x="16.7863%" y="69" width="0.1037%" height="15" fill="rgb(248,212,6)"/><text x="17.0363%" y="79.50"></text></g><g><title>specialization_graph_of (5,467,564 samples, 0.24%)</title><rect x="16.9700%" y="85" width="0.2409%" height="15" fill="rgb(208,68,35)"/><text x="17.2200%" y="95.50"></text></g><g><title>impl_trait_ref (2,558,881 samples, 0.11%)</title><rect x="17.0982%" y="69" width="0.1127%" height="15" fill="rgb(232,128,0)"/><text x="17.3482%" y="79.50"></text></g><g><title>resolve_instance (7,496,129 samples, 0.33%)</title><rect x="16.8899%" y="101" width="0.3303%" height="15" fill="rgb(207,160,47)"/><text x="17.1399%" y="111.50"></text></g><g><title>thir_body (2,732,901 samples, 0.12%)</title><rect x="17.2229%" y="101" width="0.1204%" height="15" fill="rgb(228,23,34)"/><text x="17.4729%" y="111.50"></text></g><g><title>mir_const (26,693,704 samples, 1.18%)</title><rect x="16.1690%" y="149" width="1.1760%" height="15" fill="rgb(218,30,26)"/><text x="16.4190%" y="159.50"></text></g><g><title>unsafety_check_result (23,833,993 samples, 1.05%)</title><rect x="16.2950%" y="133" width="1.0500%" height="15" fill="rgb(220,122,19)"/><text x="16.5450%" y="143.50"></text></g><g><title>mir_built (21,520,163 samples, 0.95%)</title><rect x="16.3969%" y="117" width="0.9481%" height="15" fill="rgb(250,228,42)"/><text x="16.6469%" y="127.50"></text></g><g><title>mir_promoted (31,023,243 samples, 1.37%)</title><rect x="16.0687%" y="165" width="1.3668%" height="15" fill="rgb(240,193,28)"/><text x="16.3187%" y="175.50"></text></g><g><title>type_op_prove_predicate (6,268,327 samples, 0.28%)</title><rect x="17.6002%" y="165" width="0.2762%" height="15" fill="rgb(216,20,37)"/><text x="17.8502%" y="175.50"></text></g><g><title>MIR_borrow_checking (75,602,338 samples, 3.33%)</title><rect x="14.5461%" y="197" width="3.3308%" height="15" fill="rgb(206,188,39)"/><text x="14.7961%" y="207.50">MIR..</text></g><g><title>mir_borrowck (75,341,975 samples, 3.32%)</title><rect x="14.5575%" y="181" width="3.3193%" height="15" fill="rgb(217,207,13)"/><text x="14.8075%" y="191.50">mir..</text></g><g><title>misc_checking_1 (2,993,320 samples, 0.13%)</title><rect x="17.9138%" y="197" width="0.1319%" height="15" fill="rgb(231,73,38)"/><text x="18.1638%" y="207.50"></text></g><g><title>misc_checking_2 (3,570,155 samples, 0.16%)</title><rect x="18.0457%" y="197" width="0.1573%" height="15" fill="rgb(225,20,46)"/><text x="18.2957%" y="207.50"></text></g><g><title>crate_lints (5,017,361 samples, 0.22%)</title><rect x="18.2676%" y="165" width="0.2210%" height="15" fill="rgb(210,31,41)"/><text x="18.5176%" y="175.50"></text></g><g><title>lint_checking (6,603,976 samples, 0.29%)</title><rect x="18.2675%" y="181" width="0.2910%" height="15" fill="rgb(221,200,47)"/><text x="18.5175%" y="191.50"></text></g><g><title>privacy_checking_modules (3,170,862 samples, 0.14%)</title><rect x="18.5947%" y="181" width="0.1397%" height="15" fill="rgb(226,26,5)"/><text x="18.8447%" y="191.50"></text></g><g><title>check_mod_privacy (3,167,761 samples, 0.14%)</title><rect x="18.5949%" y="165" width="0.1396%" height="15" fill="rgb(249,33,26)"/><text x="18.8449%" y="175.50"></text></g><g><title>misc_checking_3 (12,095,251 samples, 0.53%)</title><rect x="18.2030%" y="197" width="0.5329%" height="15" fill="rgb(235,183,28)"/><text x="18.4530%" y="207.50"></text></g><g><title>impl_trait_ref (3,960,770 samples, 0.17%)</title><rect x="18.9123%" y="133" width="0.1745%" height="15" fill="rgb(221,5,38)"/><text x="19.1623%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,493,184 samples, 0.15%)</title><rect x="18.9329%" y="117" width="0.1539%" height="15" fill="rgb(247,18,42)"/><text x="19.1829%" y="127.50"></text></g><g><title>coherent_trait (8,523,534 samples, 0.38%)</title><rect x="18.7436%" y="165" width="0.3755%" height="15" fill="rgb(241,131,45)"/><text x="18.9936%" y="175.50"></text></g><g><title>specialization_graph_of (8,502,084 samples, 0.37%)</title><rect x="18.7445%" y="149" width="0.3746%" height="15" fill="rgb(249,31,29)"/><text x="18.9945%" y="159.50"></text></g><g><title>coherence_checking (8,682,857 samples, 0.38%)</title><rect x="18.7426%" y="181" width="0.3825%" height="15" fill="rgb(225,111,53)"/><text x="18.9926%" y="191.50"></text></g><g><title>evaluate_obligation (10,359,641 samples, 0.46%)</title><rect x="21.0122%" y="133" width="0.4564%" height="15" fill="rgb(238,160,17)"/><text x="21.2622%" y="143.50"></text></g><g><title>typeck (23,644,378 samples, 1.04%)</title><rect x="21.6099%" y="133" width="1.0417%" height="15" fill="rgb(214,148,48)"/><text x="21.8599%" y="143.50"></text></g><g><title>item_bodies_checking (80,056,702 samples, 3.53%)</title><rect x="19.1277%" y="181" width="3.5270%" height="15" fill="rgb(232,36,49)"/><text x="19.3777%" y="191.50">ite..</text></g><g><title>typeck_item_bodies (80,052,852 samples, 3.53%)</title><rect x="19.1278%" y="165" width="3.5269%" height="15" fill="rgb(209,103,24)"/><text x="19.3778%" y="175.50">typ..</text></g><g><title>typeck (79,881,600 samples, 3.52%)</title><rect x="19.1354%" y="149" width="3.5193%" height="15" fill="rgb(229,88,8)"/><text x="19.3854%" y="159.50">typ..</text></g><g><title>mir_borrowck (4,283,804 samples, 0.19%)</title><rect x="23.8557%" y="101" width="0.1887%" height="15" fill="rgb(213,181,19)"/><text x="24.1057%" y="111.50"></text></g><g><title>type_op_prove_predicate (4,256,867 samples, 0.19%)</title><rect x="24.2573%" y="101" width="0.1875%" height="15" fill="rgb(254,191,54)"/><text x="24.5073%" y="111.50"></text></g><g><title>mir_borrowck (27,856,232 samples, 1.23%)</title><rect x="23.2177%" y="117" width="1.2273%" height="15" fill="rgb(241,83,37)"/><text x="23.4677%" y="127.50"></text></g><g><title>evaluate_obligation (4,394,331 samples, 0.19%)</title><rect x="26.1216%" y="37" width="0.1936%" height="15" fill="rgb(233,36,39)"/><text x="26.3716%" y="47.50"></text></g><g><title>mir_built (46,278,944 samples, 2.04%)</title><rect x="24.4759%" y="69" width="2.0389%" height="15" fill="rgb(226,3,54)"/><text x="24.7259%" y="79.50">m..</text></g><g><title>typeck (44,493,087 samples, 1.96%)</title><rect x="24.5546%" y="53" width="1.9602%" height="15" fill="rgb(245,192,40)"/><text x="24.8046%" y="63.50">t..</text></g><g><title>mir_built (4,868,319 samples, 0.21%)</title><rect x="26.5376%" y="53" width="0.2145%" height="15" fill="rgb(238,167,29)"/><text x="26.7876%" y="63.50"></text></g><g><title>mir_const (53,427,696 samples, 2.35%)</title><rect x="24.4552%" y="101" width="2.3539%" height="15" fill="rgb(232,182,51)"/><text x="24.7052%" y="111.50">m..</text></g><g><title>unsafety_check_result (53,074,501 samples, 2.34%)</title><rect x="24.4707%" y="85" width="2.3383%" height="15" fill="rgb(231,60,39)"/><text x="24.7207%" y="95.50">u..</text></g><g><title>unsafety_check_result (6,678,166 samples, 0.29%)</title><rect x="26.5148%" y="69" width="0.2942%" height="15" fill="rgb(208,69,12)"/><text x="26.7648%" y="79.50"></text></g><g><title>mir_promoted (53,690,179 samples, 2.37%)</title><rect x="24.4449%" y="117" width="2.3654%" height="15" fill="rgb(235,93,37)"/><text x="24.6949%" y="127.50">mi..</text></g><g><title>type_of (90,955,632 samples, 4.01%)</title><rect x="22.9111%" y="149" width="4.0072%" height="15" fill="rgb(213,116,39)"/><text x="23.1611%" y="159.50">type..</text></g><g><title>mir_borrowck (90,870,410 samples, 4.00%)</title><rect x="22.9149%" y="133" width="4.0035%" height="15" fill="rgb(222,207,29)"/><text x="23.1649%" y="143.50">mir_..</text></g><g><title>item_types_checking (101,007,972 samples, 4.45%)</title><rect x="22.6547%" y="181" width="4.4501%" height="15" fill="rgb(206,96,30)"/><text x="22.9047%" y="191.50">item_..</text></g><g><title>check_mod_item_types (100,999,842 samples, 4.45%)</title><rect x="22.6551%" y="165" width="4.4497%" height="15" fill="rgb(218,138,4)"/><text x="22.9051%" y="175.50">check..</text></g><g><title>typeck (4,232,163 samples, 0.19%)</title><rect x="26.9183%" y="149" width="0.1865%" height="15" fill="rgb(250,191,14)"/><text x="27.1683%" y="159.50"></text></g><g><title>type_collecting (4,234,153 samples, 0.19%)</title><rect x="27.1051%" y="181" width="0.1865%" height="15" fill="rgb(239,60,40)"/><text x="27.3551%" y="191.50"></text></g><g><title>collect_mod_item_types (4,224,463 samples, 0.19%)</title><rect x="27.1055%" y="165" width="0.1861%" height="15" fill="rgb(206,27,48)"/><text x="27.3555%" y="175.50"></text></g><g><title>check_impl_item_well_formed (8,704,352 samples, 0.38%)</title><rect x="27.3114%" y="165" width="0.3835%" height="15" fill="rgb(225,35,8)"/><text x="27.5614%" y="175.50"></text></g><g><title>analysis (304,541,430 samples, 13.42%)</title><rect x="14.5156%" y="213" width="13.4171%" height="15" fill="rgb(250,213,24)"/><text x="14.7656%" y="223.50">analysis</text></g><g><title>type_check_crate (208,751,062 samples, 9.20%)</title><rect x="18.7359%" y="197" width="9.1969%" height="15" fill="rgb(247,123,22)"/><text x="18.9859%" y="207.50">type_check_cr..</text></g><g><title>wf_checking (14,537,356 samples, 0.64%)</title><rect x="27.2923%" y="181" width="0.6405%" height="15" fill="rgb(231,138,38)"/><text x="27.5423%" y="191.50"></text></g><g><title>check_item_well_formed (5,399,632 samples, 0.24%)</title><rect x="27.6949%" y="165" width="0.2379%" height="15" fill="rgb(231,145,46)"/><text x="27.9449%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (9,954,237 samples, 0.44%)</title><rect x="40.4672%" y="181" width="0.4386%" height="15" fill="rgb(251,118,11)"/><text x="40.7172%" y="191.50"></text></g><g><title>const_caller_location (4,292,539 samples, 0.19%)</title><rect x="40.9057%" y="181" width="0.1891%" height="15" fill="rgb(217,147,25)"/><text x="41.1557%" y="191.50"></text></g><g><title>layout_of (4,041,179 samples, 0.18%)</title><rect x="41.7721%" y="165" width="0.1780%" height="15" fill="rgb(247,81,37)"/><text x="42.0221%" y="175.50"></text></g><g><title>predicates_of (4,483,698 samples, 0.20%)</title><rect x="42.2815%" y="149" width="0.1975%" height="15" fill="rgb(209,12,38)"/><text x="42.5315%" y="159.50"></text></g><g><title>predicates_defined_on (3,289,254 samples, 0.14%)</title><rect x="42.3341%" y="133" width="0.1449%" height="15" fill="rgb(227,1,9)"/><text x="42.5841%" y="143.50"></text></g><g><title>param_env (12,015,642 samples, 0.53%)</title><rect x="41.9501%" y="165" width="0.5294%" height="15" fill="rgb(248,47,43)"/><text x="42.2001%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,774,973 samples, 0.12%)</title><rect x="42.4795%" y="165" width="0.1223%" height="15" fill="rgb(221,10,30)"/><text x="42.7295%" y="175.50"></text></g><g><title>fn_abi_of_instance (34,237,327 samples, 1.51%)</title><rect x="41.0984%" y="181" width="1.5084%" height="15" fill="rgb(210,229,1)"/><text x="41.3484%" y="191.50"></text></g><g><title>layout_of (6,562,625 samples, 0.29%)</title><rect x="42.7004%" y="181" width="0.2891%" height="15" fill="rgb(222,148,37)"/><text x="42.9504%" y="191.50"></text></g><g><title>symbol_name (2,680,004 samples, 0.12%)</title><rect x="42.9907%" y="181" width="0.1181%" height="15" fill="rgb(234,67,33)"/><text x="43.2407%" y="191.50"></text></g><g><title>codegen_module (341,784,053 samples, 15.06%)</title><rect x="28.0777%" y="197" width="15.0579%" height="15" fill="rgb(247,98,35)"/><text x="28.3277%" y="207.50">codegen_module</text></g><g><title>codegen_crate (345,181,577 samples, 15.21%)</title><rect x="27.9332%" y="213" width="15.2076%" height="15" fill="rgb(247,138,52)"/><text x="28.1832%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (985,543,202 samples, 43.42%)</title><rect x="43.1516%" y="197" width="43.4199%" height="15" fill="rgb(213,79,30)"/><text x="43.4016%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (912,701,312 samples, 40.21%)</title><rect x="46.3607%" y="181" width="40.2107%" height="15" fill="rgb(246,177,23)"/><text x="46.6107%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,063,170,619 samples, 46.84%)</title><rect x="43.1408%" y="213" width="46.8399%" height="15" fill="rgb(230,62,27)"/><text x="43.3908%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (77,383,896 samples, 3.41%)</title><rect x="86.5714%" y="197" width="3.4093%" height="15" fill="rgb(216,154,8)"/><text x="86.8214%" y="207.50">LLV..</text></g><g><title>metadata_register_crate (3,587,505 samples, 0.16%)</title><rect x="91.2545%" y="165" width="0.1581%" height="15" fill="rgb(244,35,45)"/><text x="91.5045%" y="175.50"></text></g><g><title>macro_expand_crate (32,194,632 samples, 1.42%)</title><rect x="90.0092%" y="197" width="1.4184%" height="15" fill="rgb(251,115,12)"/><text x="90.2592%" y="207.50"></text></g><g><title>expand_crate (32,175,812 samples, 1.42%)</title><rect x="90.0101%" y="181" width="1.4176%" height="15" fill="rgb(240,54,50)"/><text x="90.2601%" y="191.50"></text></g><g><title>late_resolve_crate (7,074,311 samples, 0.31%)</title><rect x="91.4620%" y="181" width="0.3117%" height="15" fill="rgb(233,84,52)"/><text x="91.7120%" y="191.50"></text></g><g><title>configure_and_expand (40,976,500 samples, 1.81%)</title><rect x="89.9807%" y="213" width="1.8053%" height="15" fill="rgb(207,117,47)"/><text x="90.2307%" y="223.50">c..</text></g><g><title>resolve_crate (7,690,147 samples, 0.34%)</title><rect x="91.4472%" y="197" width="0.3388%" height="15" fill="rgb(249,43,39)"/><text x="91.6972%" y="207.50"></text></g><g><title>free_global_ctxt (15,278,163 samples, 0.67%)</title><rect x="91.8394%" y="213" width="0.6731%" height="15" fill="rgb(209,38,44)"/><text x="92.0894%" y="223.50"></text></g><g><title>item_attrs (2,774,990 samples, 0.12%)</title><rect x="93.3164%" y="117" width="0.1223%" height="15" fill="rgb(236,212,23)"/><text x="93.5664%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,629,488 samples, 0.12%)</title><rect x="93.3228%" y="101" width="0.1158%" height="15" fill="rgb(242,79,21)"/><text x="93.5728%" y="111.50"></text></g><g><title>codegen_fn_attrs (4,725,937 samples, 0.21%)</title><rect x="93.2767%" y="133" width="0.2082%" height="15" fill="rgb(211,96,35)"/><text x="93.5267%" y="143.50"></text></g><g><title>mir_shims (3,305,402 samples, 0.15%)</title><rect x="93.5281%" y="133" width="0.1456%" height="15" fill="rgb(253,215,40)"/><text x="93.7781%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (10,777,386 samples, 0.47%)</title><rect x="93.9755%" y="117" width="0.4748%" height="15" fill="rgb(211,81,21)"/><text x="94.2255%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,662,925 samples, 0.29%)</title><rect x="94.4503%" y="117" width="0.2935%" height="15" fill="rgb(208,190,38)"/><text x="94.7003%" y="127.50"></text></g><g><title>optimized_mir (25,259,102 samples, 1.11%)</title><rect x="93.6738%" y="133" width="1.1128%" height="15" fill="rgb(235,213,38)"/><text x="93.9238%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (7,741,578 samples, 0.34%)</title><rect x="94.9629%" y="117" width="0.3411%" height="15" fill="rgb(237,122,38)"/><text x="95.2129%" y="127.50"></text></g><g><title>specialization_graph_of (3,291,132 samples, 0.14%)</title><rect x="95.4648%" y="117" width="0.1450%" height="15" fill="rgb(244,218,35)"/><text x="95.7148%" y="127.50"></text></g><g><title>resolve_instance (20,161,129 samples, 0.89%)</title><rect x="94.7866%" y="133" width="0.8882%" height="15" fill="rgb(240,68,47)"/><text x="95.0366%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,707,810 samples, 0.12%)</title><rect x="95.6893%" y="133" width="0.1193%" height="15" fill="rgb(210,16,53)"/><text x="95.9393%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (71,699,538 samples, 3.16%)</title><rect x="92.7634%" y="149" width="3.1589%" height="15" fill="rgb(235,124,12)"/><text x="93.0134%" y="159.50">mon..</text></g><g><title>monomorphization_collector (71,807,729 samples, 3.16%)</title><rect x="92.7632%" y="165" width="3.1636%" height="15" fill="rgb(224,169,11)"/><text x="93.0132%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (9,922,259 samples, 0.44%)</title><rect x="95.9271%" y="149" width="0.4371%" height="15" fill="rgb(250,166,2)"/><text x="96.1771%" y="159.50"></text></g><g><title>symbol_name (8,844,377 samples, 0.39%)</title><rect x="95.9746%" y="133" width="0.3897%" height="15" fill="rgb(242,216,29)"/><text x="96.2246%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (86,284,224 samples, 3.80%)</title><rect x="92.7596%" y="181" width="3.8014%" height="15" fill="rgb(230,116,27)"/><text x="93.0096%" y="191.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (14,393,144 samples, 0.63%)</title><rect x="95.9268%" y="165" width="0.6341%" height="15" fill="rgb(228,99,48)"/><text x="96.1768%" y="175.50"></text></g><g><title>cgu_partitioning (4,465,505 samples, 0.20%)</title><rect x="96.3642%" y="149" width="0.1967%" height="15" fill="rgb(253,11,6)"/><text x="96.6142%" y="159.50"></text></g><g><title>exported_symbols (87,023,691 samples, 3.83%)</title><rect x="92.7403%" y="197" width="3.8340%" height="15" fill="rgb(247,143,39)"/><text x="92.9903%" y="207.50">expo..</text></g><g><title>layout_of (3,107,480 samples, 0.14%)</title><rect x="97.0910%" y="181" width="0.1369%" height="15" fill="rgb(236,97,10)"/><text x="97.3410%" y="191.50"></text></g><g><title>needs_drop_raw (2,294,877 samples, 0.10%)</title><rect x="97.8583%" y="165" width="0.1011%" height="15" fill="rgb(233,208,19)"/><text x="98.1083%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (16,916,489 samples, 0.75%)</title><rect x="97.2279%" y="181" width="0.7453%" height="15" fill="rgb(216,164,2)"/><text x="97.4779%" y="191.50"></text></g><g><title>optimized_mir (31,913,839 samples, 1.41%)</title><rect x="96.5835%" y="197" width="1.4060%" height="15" fill="rgb(220,129,5)"/><text x="96.8335%" y="207.50"></text></g><g><title>generate_crate_metadata (125,185,185 samples, 5.52%)</title><rect x="92.5125%" y="213" width="5.5153%" height="15" fill="rgb(242,17,10)"/><text x="92.7625%" y="223.50">generat..</text></g><g><title>hir_lowering (7,121,862 samples, 0.31%)</title><rect x="98.0278%" y="213" width="0.3138%" height="15" fill="rgb(242,107,0)"/><text x="98.2778%" y="223.50"></text></g><g><title>finish_ongoing_codegen (16,648,457 samples, 0.73%)</title><rect x="98.3425%" y="197" width="0.7335%" height="15" fill="rgb(251,28,31)"/><text x="98.5925%" y="207.50"></text></g><g><title>link_crate (7,263,783 samples, 0.32%)</title><rect x="99.0760%" y="197" width="0.3200%" height="15" fill="rgb(233,223,10)"/><text x="99.3260%" y="207.50"></text></g><g><title>link_binary (7,137,592 samples, 0.31%)</title><rect x="99.0816%" y="181" width="0.3145%" height="15" fill="rgb(215,21,27)"/><text x="99.3316%" y="191.50"></text></g><g><title>link_rlib (5,574,416 samples, 0.25%)</title><rect x="99.1504%" y="165" width="0.2456%" height="15" fill="rgb(232,23,21)"/><text x="99.4004%" y="175.50"></text></g><g><title>link (23,950,950 samples, 1.06%)</title><rect x="98.3416%" y="213" width="1.0552%" height="15" fill="rgb(244,5,23)"/><text x="98.5916%" y="223.50"></text></g><g><title>parse_crate (9,057,201 samples, 0.40%)</title><rect x="99.3968%" y="213" width="0.3990%" height="15" fill="rgb(226,81,46)"/><text x="99.6468%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (3,712,767 samples, 0.16%)</title><rect x="99.8062%" y="213" width="0.1636%" height="15" fill="rgb(247,70,30)"/><text x="100.0562%" y="223.50"></text></g><g><title>all (2,269,796,765 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (2,269,796,765 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>