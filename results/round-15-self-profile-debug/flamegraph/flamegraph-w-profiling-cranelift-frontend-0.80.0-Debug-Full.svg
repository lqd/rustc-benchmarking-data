<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (299,771,812 samples, 15.67%)</title><rect x="0.0438%" y="181" width="15.6737%" height="15" fill="rgb(227,0,7)"/><text x="0.2938%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,302,384 samples, 0.17%)</title><rect x="18.2421%" y="69" width="0.1727%" height="15" fill="rgb(217,0,24)"/><text x="18.4921%" y="79.50"></text></g><g><title>specialization_graph_of (4,602,118 samples, 0.24%)</title><rect x="18.5025%" y="53" width="0.2406%" height="15" fill="rgb(221,193,54)"/><text x="18.7525%" y="63.50"></text></g><g><title>impl_trait_ref (2,271,313 samples, 0.12%)</title><rect x="18.6243%" y="37" width="0.1188%" height="15" fill="rgb(248,212,6)"/><text x="18.8743%" y="47.50"></text></g><g><title>resolve_instance (6,546,567 samples, 0.34%)</title><rect x="18.4148%" y="69" width="0.3423%" height="15" fill="rgb(208,68,35)"/><text x="18.6648%" y="79.50"></text></g><g><title>thir_body (3,105,042 samples, 0.16%)</title><rect x="18.7604%" y="69" width="0.1623%" height="15" fill="rgb(232,128,0)"/><text x="19.0104%" y="79.50"></text></g><g><title>mir_const (26,377,595 samples, 1.38%)</title><rect x="17.5457%" y="117" width="1.3792%" height="15" fill="rgb(207,160,47)"/><text x="17.7957%" y="127.50"></text></g><g><title>unsafety_check_result (23,219,611 samples, 1.21%)</title><rect x="17.7109%" y="101" width="1.2140%" height="15" fill="rgb(228,23,34)"/><text x="17.9609%" y="111.50"></text></g><g><title>mir_built (20,860,253 samples, 1.09%)</title><rect x="17.8342%" y="85" width="1.0907%" height="15" fill="rgb(218,30,26)"/><text x="18.0842%" y="95.50"></text></g><g><title>mir_promoted (28,539,056 samples, 1.49%)</title><rect x="17.4410%" y="133" width="1.4922%" height="15" fill="rgb(220,122,19)"/><text x="17.6910%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,660,370 samples, 0.24%)</title><rect x="19.0943%" y="133" width="0.2437%" height="15" fill="rgb(250,228,42)"/><text x="19.3443%" y="143.50"></text></g><g><title>MIR_borrow_checking (68,671,910 samples, 3.59%)</title><rect x="15.7481%" y="165" width="3.5905%" height="15" fill="rgb(240,193,28)"/><text x="15.9981%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (68,430,529 samples, 3.58%)</title><rect x="15.7608%" y="149" width="3.5779%" height="15" fill="rgb(216,20,37)"/><text x="16.0108%" y="159.50">mir_..</text></g><g><title>misc_checking_1 (2,331,224 samples, 0.12%)</title><rect x="19.3637%" y="165" width="0.1219%" height="15" fill="rgb(206,188,39)"/><text x="19.6137%" y="175.50"></text></g><g><title>misc_checking_2 (3,092,141 samples, 0.16%)</title><rect x="19.4856%" y="165" width="0.1617%" height="15" fill="rgb(217,207,13)"/><text x="19.7356%" y="175.50"></text></g><g><title>crate_lints (3,218,852 samples, 0.17%)</title><rect x="19.7158%" y="133" width="0.1683%" height="15" fill="rgb(231,73,38)"/><text x="19.9658%" y="143.50"></text></g><g><title>lint_checking (4,396,534 samples, 0.23%)</title><rect x="19.7157%" y="149" width="0.2299%" height="15" fill="rgb(225,20,46)"/><text x="19.9657%" y="159.50"></text></g><g><title>privacy_checking_modules (2,071,840 samples, 0.11%)</title><rect x="19.9755%" y="149" width="0.1083%" height="15" fill="rgb(210,31,41)"/><text x="20.2255%" y="159.50"></text></g><g><title>check_mod_privacy (2,067,810 samples, 0.11%)</title><rect x="19.9757%" y="133" width="0.1081%" height="15" fill="rgb(221,200,47)"/><text x="20.2257%" y="143.50"></text></g><g><title>misc_checking_3 (8,366,563 samples, 0.44%)</title><rect x="19.6473%" y="165" width="0.4375%" height="15" fill="rgb(226,26,5)"/><text x="19.8973%" y="175.50"></text></g><g><title>impl_parent (3,033,412 samples, 0.16%)</title><rect x="20.3631%" y="101" width="0.1586%" height="15" fill="rgb(249,33,26)"/><text x="20.6131%" y="111.50"></text></g><g><title>impl_trait_ref (6,230,352 samples, 0.33%)</title><rect x="20.5217%" y="101" width="0.3258%" height="15" fill="rgb(235,183,28)"/><text x="20.7717%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,014,376 samples, 0.26%)</title><rect x="20.5853%" y="85" width="0.2622%" height="15" fill="rgb(221,5,38)"/><text x="20.8353%" y="95.50"></text></g><g><title>coherent_trait (15,408,865 samples, 0.81%)</title><rect x="20.0927%" y="133" width="0.8057%" height="15" fill="rgb(247,18,42)"/><text x="20.3427%" y="143.50"></text></g><g><title>specialization_graph_of (14,758,599 samples, 0.77%)</title><rect x="20.1267%" y="117" width="0.7717%" height="15" fill="rgb(241,131,45)"/><text x="20.3767%" y="127.50"></text></g><g><title>coherence_checking (15,532,025 samples, 0.81%)</title><rect x="20.0914%" y="149" width="0.8121%" height="15" fill="rgb(249,31,29)"/><text x="20.3414%" y="159.50"></text></g><g><title>evaluate_obligation (6,445,581 samples, 0.34%)</title><rect x="23.6119%" y="101" width="0.3370%" height="15" fill="rgb(225,111,53)"/><text x="23.8619%" y="111.50"></text></g><g><title>evaluate_obligation (3,432,912 samples, 0.18%)</title><rect x="25.0713%" y="85" width="0.1795%" height="15" fill="rgb(238,160,17)"/><text x="25.3213%" y="95.50"></text></g><g><title>typeck (22,092,900 samples, 1.16%)</title><rect x="24.2180%" y="101" width="1.1551%" height="15" fill="rgb(214,148,48)"/><text x="24.4680%" y="111.50"></text></g><g><title>item_bodies_checking (85,552,659 samples, 4.47%)</title><rect x="20.9056%" y="149" width="4.4732%" height="15" fill="rgb(232,36,49)"/><text x="21.1556%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (85,548,779 samples, 4.47%)</title><rect x="20.9058%" y="133" width="4.4730%" height="15" fill="rgb(209,103,24)"/><text x="21.1558%" y="143.50">typec..</text></g><g><title>typeck (85,392,748 samples, 4.46%)</title><rect x="20.9140%" y="117" width="4.4648%" height="15" fill="rgb(229,88,8)"/><text x="21.1640%" y="127.50">typeck</text></g><g><title>type_collecting (2,592,386 samples, 0.14%)</title><rect x="25.4248%" y="149" width="0.1355%" height="15" fill="rgb(213,181,19)"/><text x="25.6748%" y="159.50"></text></g><g><title>collect_mod_item_types (2,572,776 samples, 0.13%)</title><rect x="25.4259%" y="133" width="0.1345%" height="15" fill="rgb(254,191,54)"/><text x="25.6759%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,283,846 samples, 0.28%)</title><rect x="25.5775%" y="133" width="0.2763%" height="15" fill="rgb(241,83,37)"/><text x="25.8275%" y="143.50"></text></g><g><title>analysis (196,200,401 samples, 10.26%)</title><rect x="15.7176%" y="181" width="10.2584%" height="15" fill="rgb(233,36,39)"/><text x="15.9676%" y="191.50">analysis</text></g><g><title>type_check_crate (112,674,872 samples, 5.89%)</title><rect x="20.0847%" y="165" width="5.8913%" height="15" fill="rgb(226,3,54)"/><text x="20.3347%" y="175.50">type_ch..</text></g><g><title>wf_checking (7,939,480 samples, 0.42%)</title><rect x="25.5609%" y="149" width="0.4151%" height="15" fill="rgb(245,192,40)"/><text x="25.8109%" y="159.50"></text></g><g><title>check_item_well_formed (2,338,786 samples, 0.12%)</title><rect x="25.8537%" y="133" width="0.1223%" height="15" fill="rgb(238,167,29)"/><text x="26.1037%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (6,482,904 samples, 0.34%)</title><rect x="38.2619%" y="149" width="0.3390%" height="15" fill="rgb(232,182,51)"/><text x="38.5119%" y="159.50"></text></g><g><title>const_caller_location (4,236,114 samples, 0.22%)</title><rect x="38.6008%" y="149" width="0.2215%" height="15" fill="rgb(231,60,39)"/><text x="38.8508%" y="159.50"></text></g><g><title>layout_of (2,902,995 samples, 0.15%)</title><rect x="39.5880%" y="133" width="0.1518%" height="15" fill="rgb(208,69,12)"/><text x="39.8380%" y="143.50"></text></g><g><title>predicates_of (3,584,665 samples, 0.19%)</title><rect x="40.1500%" y="117" width="0.1874%" height="15" fill="rgb(235,93,37)"/><text x="40.4000%" y="127.50"></text></g><g><title>predicates_defined_on (2,623,342 samples, 0.14%)</title><rect x="40.2003%" y="101" width="0.1372%" height="15" fill="rgb(213,116,39)"/><text x="40.4503%" y="111.50"></text></g><g><title>param_env (11,464,096 samples, 0.60%)</title><rect x="39.7398%" y="133" width="0.5994%" height="15" fill="rgb(222,207,29)"/><text x="39.9898%" y="143.50"></text></g><g><title>normalize_projection_ty (2,557,450 samples, 0.13%)</title><rect x="40.3858%" y="117" width="0.1337%" height="15" fill="rgb(206,96,30)"/><text x="40.6358%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,452,909 samples, 0.18%)</title><rect x="40.3392%" y="133" width="0.1805%" height="15" fill="rgb(218,138,4)"/><text x="40.5892%" y="143.50"></text></g><g><title>fn_abi_of_instance (32,537,346 samples, 1.70%)</title><rect x="38.8260%" y="149" width="1.7012%" height="15" fill="rgb(250,191,14)"/><text x="39.0760%" y="159.50"></text></g><g><title>layout_of (5,823,521 samples, 0.30%)</title><rect x="40.6087%" y="149" width="0.3045%" height="15" fill="rgb(239,60,40)"/><text x="40.8587%" y="159.50"></text></g><g><title>symbol_name (4,432,397 samples, 0.23%)</title><rect x="40.9163%" y="149" width="0.2318%" height="15" fill="rgb(206,27,48)"/><text x="41.1663%" y="159.50"></text></g><g><title>codegen_module (287,423,651 samples, 15.03%)</title><rect x="26.1389%" y="165" width="15.0281%" height="15" fill="rgb(225,35,8)"/><text x="26.3889%" y="175.50">codegen_module</text></g><g><title>codegen_crate (290,635,691 samples, 15.20%)</title><rect x="25.9764%" y="181" width="15.1960%" height="15" fill="rgb(250,213,24)"/><text x="26.2264%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (887,458,140 samples, 46.40%)</title><rect x="41.1846%" y="165" width="46.4012%" height="15" fill="rgb(247,123,22)"/><text x="41.4346%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (852,894,997 samples, 44.59%)</title><rect x="42.9918%" y="149" width="44.5941%" height="15" fill="rgb(231,138,38)"/><text x="43.2418%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (944,650,194 samples, 49.39%)</title><rect x="41.1724%" y="181" width="49.3915%" height="15" fill="rgb(231,145,46)"/><text x="41.4224%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (56,958,274 samples, 2.98%)</title><rect x="87.5859%" y="165" width="2.9781%" height="15" fill="rgb(251,118,11)"/><text x="87.8359%" y="175.50">LLV..</text></g><g><title>macro_expand_crate (27,684,468 samples, 1.45%)</title><rect x="90.5927%" y="165" width="1.4475%" height="15" fill="rgb(217,147,25)"/><text x="90.8427%" y="175.50"></text></g><g><title>expand_crate (27,673,768 samples, 1.45%)</title><rect x="90.5933%" y="149" width="1.4469%" height="15" fill="rgb(247,81,37)"/><text x="90.8433%" y="159.50"></text></g><g><title>late_resolve_crate (4,234,923 samples, 0.22%)</title><rect x="92.0629%" y="149" width="0.2214%" height="15" fill="rgb(209,12,38)"/><text x="92.3129%" y="159.50"></text></g><g><title>configure_and_expand (33,151,253 samples, 1.73%)</title><rect x="90.5639%" y="181" width="1.7333%" height="15" fill="rgb(227,1,9)"/><text x="90.8139%" y="191.50"></text></g><g><title>resolve_crate (4,844,048 samples, 0.25%)</title><rect x="92.0440%" y="165" width="0.2533%" height="15" fill="rgb(248,47,43)"/><text x="92.2940%" y="175.50"></text></g><g><title>free_global_ctxt (9,934,200 samples, 0.52%)</title><rect x="92.3685%" y="181" width="0.5194%" height="15" fill="rgb(221,10,30)"/><text x="92.6185%" y="191.50"></text></g><g><title>item_attrs (2,261,854 samples, 0.12%)</title><rect x="93.5835%" y="85" width="0.1183%" height="15" fill="rgb(210,229,1)"/><text x="93.8335%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,131,272 samples, 0.11%)</title><rect x="93.5904%" y="69" width="0.1114%" height="15" fill="rgb(222,148,37)"/><text x="93.8404%" y="79.50"></text></g><g><title>codegen_fn_attrs (4,041,379 samples, 0.21%)</title><rect x="93.5433%" y="101" width="0.2113%" height="15" fill="rgb(234,67,33)"/><text x="93.7933%" y="111.50"></text></g><g><title>mir_shims (2,133,926 samples, 0.11%)</title><rect x="93.8118%" y="101" width="0.1116%" height="15" fill="rgb(247,98,35)"/><text x="94.0618%" y="111.50"></text></g><g><title>layout_of (2,744,117 samples, 0.14%)</title><rect x="94.3687%" y="85" width="0.1435%" height="15" fill="rgb(247,138,52)"/><text x="94.6187%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (7,428,636 samples, 0.39%)</title><rect x="94.5122%" y="85" width="0.3884%" height="15" fill="rgb(213,79,30)"/><text x="94.7622%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,081,857 samples, 0.53%)</title><rect x="94.9006%" y="85" width="0.5271%" height="15" fill="rgb(246,177,23)"/><text x="95.1506%" y="95.50"></text></g><g><title>optimized_mir (31,270,340 samples, 1.63%)</title><rect x="93.9233%" y="101" width="1.6350%" height="15" fill="rgb(230,62,27)"/><text x="94.1733%" y="111.50"></text></g><g><title>evaluate_obligation (1,962,151 samples, 0.10%)</title><rect x="96.1914%" y="69" width="0.1026%" height="15" fill="rgb(216,154,8)"/><text x="96.4414%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (11,388,689 samples, 0.60%)</title><rect x="95.7640%" y="85" width="0.5955%" height="15" fill="rgb(244,35,45)"/><text x="96.0140%" y="95.50"></text></g><g><title>specialization_graph_of (2,924,830 samples, 0.15%)</title><rect x="96.4934%" y="85" width="0.1529%" height="15" fill="rgb(251,115,12)"/><text x="96.7434%" y="95.50"></text></g><g><title>resolve_instance (21,778,150 samples, 1.14%)</title><rect x="95.5583%" y="101" width="1.1387%" height="15" fill="rgb(240,54,50)"/><text x="95.8083%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,514,487 samples, 0.13%)</title><rect x="96.7698%" y="85" width="0.1315%" height="15" fill="rgb(233,84,52)"/><text x="97.0198%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,470,257 samples, 0.13%)</title><rect x="96.7721%" y="69" width="0.1292%" height="15" fill="rgb(207,117,47)"/><text x="97.0221%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,394,476 samples, 0.13%)</title><rect x="96.7761%" y="53" width="0.1252%" height="15" fill="rgb(249,43,39)"/><text x="97.0261%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,968,853 samples, 0.16%)</title><rect x="96.7495%" y="101" width="0.1552%" height="15" fill="rgb(209,38,44)"/><text x="96.9995%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (8,831,040 samples, 0.46%)</title><rect x="96.9062%" y="101" width="0.4617%" height="15" fill="rgb(236,212,23)"/><text x="97.1562%" y="111.50"></text></g><g><title>upstream_monomorphizations (8,719,628 samples, 0.46%)</title><rect x="96.9120%" y="85" width="0.4559%" height="15" fill="rgb(242,79,21)"/><text x="97.1620%" y="95.50"></text></g><g><title>exported_symbols (7,263,812 samples, 0.38%)</title><rect x="96.9882%" y="69" width="0.3798%" height="15" fill="rgb(211,96,35)"/><text x="97.2382%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (7,256,262 samples, 0.38%)</title><rect x="96.9886%" y="53" width="0.3794%" height="15" fill="rgb(253,215,40)"/><text x="97.2386%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (84,101,036 samples, 4.40%)</title><rect x="93.0170%" y="117" width="4.3973%" height="15" fill="rgb(211,81,21)"/><text x="93.2670%" y="127.50">monom..</text></g><g><title>monomorphization_collector (84,212,877 samples, 4.40%)</title><rect x="93.0168%" y="133" width="4.4031%" height="15" fill="rgb(208,190,38)"/><text x="93.2668%" y="143.50">monom..</text></g><g><title>assert_symbols_are_distinct (8,023,550 samples, 0.42%)</title><rect x="97.4202%" y="117" width="0.4195%" height="15" fill="rgb(235,213,38)"/><text x="97.6702%" y="127.50"></text></g><g><title>symbol_name (7,019,125 samples, 0.37%)</title><rect x="97.4727%" y="101" width="0.3670%" height="15" fill="rgb(237,122,38)"/><text x="97.7227%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (95,488,300 samples, 4.99%)</title><rect x="93.0135%" y="149" width="4.9927%" height="15" fill="rgb(244,218,35)"/><text x="93.2635%" y="159.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (11,212,682 samples, 0.59%)</title><rect x="97.4199%" y="133" width="0.5863%" height="15" fill="rgb(240,68,47)"/><text x="97.6699%" y="143.50"></text></g><g><title>cgu_partitioning (3,184,172 samples, 0.17%)</title><rect x="97.8397%" y="117" width="0.1665%" height="15" fill="rgb(210,16,53)"/><text x="98.0897%" y="127.50"></text></g><g><title>exported_symbols (95,902,254 samples, 5.01%)</title><rect x="92.9961%" y="165" width="5.0143%" height="15" fill="rgb(235,124,12)"/><text x="93.2461%" y="175.50">export..</text></g><g><title>optimized_mir (2,240,993 samples, 0.12%)</title><rect x="98.0160%" y="165" width="0.1172%" height="15" fill="rgb(224,169,11)"/><text x="98.2660%" y="175.50"></text></g><g><title>generate_crate_metadata (100,422,399 samples, 5.25%)</title><rect x="92.8879%" y="181" width="5.2506%" height="15" fill="rgb(250,166,2)"/><text x="93.1379%" y="191.50">genera..</text></g><g><title>hir_lowering (5,780,469 samples, 0.30%)</title><rect x="98.1385%" y="181" width="0.3022%" height="15" fill="rgb(242,216,29)"/><text x="98.3885%" y="191.50"></text></g><g><title>finish_ongoing_codegen (19,425,435 samples, 1.02%)</title><rect x="98.4417%" y="165" width="1.0157%" height="15" fill="rgb(230,116,27)"/><text x="98.6917%" y="175.50"></text></g><g><title>link_crate (5,274,334 samples, 0.28%)</title><rect x="99.4574%" y="165" width="0.2758%" height="15" fill="rgb(228,99,48)"/><text x="99.7074%" y="175.50"></text></g><g><title>link_binary (5,210,953 samples, 0.27%)</title><rect x="99.4607%" y="149" width="0.2725%" height="15" fill="rgb(253,11,6)"/><text x="99.7107%" y="159.50"></text></g><g><title>link_rlib (4,132,863 samples, 0.22%)</title><rect x="99.5171%" y="133" width="0.2161%" height="15" fill="rgb(247,143,39)"/><text x="99.7671%" y="143.50"></text></g><g><title>link (24,728,979 samples, 1.29%)</title><rect x="98.4408%" y="181" width="1.2930%" height="15" fill="rgb(236,97,10)"/><text x="98.6908%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,055,340 samples, 0.21%)</title><rect x="99.7629%" y="181" width="0.2120%" height="15" fill="rgb(233,208,19)"/><text x="100.0129%" y="191.50"></text></g><g><title>all (1,912,575,651 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,912,575,651 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>