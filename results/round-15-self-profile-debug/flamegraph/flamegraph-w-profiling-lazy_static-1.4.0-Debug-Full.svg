<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,539,596 samples, 7.02%)</title><rect x="1.5058%" y="213" width="7.0211%" height="15" fill="rgb(227,0,7)"/><text x="1.7558%" y="223.50">LLVM_pass..</text></g><g><title>thir_body (63,961 samples, 0.13%)</title><rect x="11.5764%" y="101" width="0.1269%" height="15" fill="rgb(217,0,24)"/><text x="11.8264%" y="111.50"></text></g><g><title>mir_const (450,846 samples, 0.89%)</title><rect x="10.8122%" y="149" width="0.8943%" height="15" fill="rgb(221,193,54)"/><text x="11.0622%" y="159.50"></text></g><g><title>unsafety_check_result (352,645 samples, 0.70%)</title><rect x="11.0070%" y="133" width="0.6995%" height="15" fill="rgb(248,212,6)"/><text x="11.2570%" y="143.50"></text></g><g><title>mir_built (278,104 samples, 0.55%)</title><rect x="11.1549%" y="117" width="0.5516%" height="15" fill="rgb(208,68,35)"/><text x="11.4049%" y="127.50"></text></g><g><title>has_structural_eq_impls (196,442 samples, 0.39%)</title><rect x="12.0983%" y="133" width="0.3897%" height="15" fill="rgb(232,128,0)"/><text x="12.3483%" y="143.50"></text></g><g><title>trait_impls_of (135,712 samples, 0.27%)</title><rect x="12.2188%" y="117" width="0.2692%" height="15" fill="rgb(207,160,47)"/><text x="12.4688%" y="127.50"></text></g><g><title>needs_drop_raw (102,931 samples, 0.20%)</title><rect x="13.0062%" y="85" width="0.2042%" height="15" fill="rgb(228,23,34)"/><text x="13.2562%" y="95.50"></text></g><g><title>is_copy_raw (61,011 samples, 0.12%)</title><rect x="13.0894%" y="69" width="0.1210%" height="15" fill="rgb(218,30,26)"/><text x="13.3394%" y="79.50"></text></g><g><title>evaluate_obligation (51,241 samples, 0.10%)</title><rect x="13.1088%" y="53" width="0.1016%" height="15" fill="rgb(220,122,19)"/><text x="13.3588%" y="63.50"></text></g><g><title>mir_const (338,233 samples, 0.67%)</title><rect x="12.5799%" y="133" width="0.6709%" height="15" fill="rgb(250,228,42)"/><text x="12.8299%" y="143.50"></text></g><g><title>unsafety_check_result (253,152 samples, 0.50%)</title><rect x="12.7486%" y="117" width="0.5022%" height="15" fill="rgb(240,193,28)"/><text x="12.9986%" y="127.50"></text></g><g><title>mir_built (193,922 samples, 0.38%)</title><rect x="12.8661%" y="101" width="0.3847%" height="15" fill="rgb(216,20,37)"/><text x="13.1161%" y="111.50"></text></g><g><title>adt_drop_tys (66,690 samples, 0.13%)</title><rect x="13.2584%" y="117" width="0.1323%" height="15" fill="rgb(206,188,39)"/><text x="13.5084%" y="127.50"></text></g><g><title>needs_drop_raw (76,741 samples, 0.15%)</title><rect x="13.2508%" y="133" width="0.1522%" height="15" fill="rgb(217,207,13)"/><text x="13.5008%" y="143.50"></text></g><g><title>mir_promoted (1,380,885 samples, 2.74%)</title><rect x="10.6703%" y="165" width="2.7391%" height="15" fill="rgb(231,73,38)"/><text x="10.9203%" y="175.50">mi..</text></g><g><title>mir_const_qualif (858,469 samples, 1.70%)</title><rect x="11.7065%" y="149" width="1.7029%" height="15" fill="rgb(225,20,46)"/><text x="11.9565%" y="159.50"></text></g><g><title>MIR_borrow_checking (2,497,956 samples, 4.95%)</title><rect x="8.8503%" y="197" width="4.9549%" height="15" fill="rgb(210,31,41)"/><text x="9.1003%" y="207.50">MIR_bo..</text></g><g><title>mir_borrowck (2,488,556 samples, 4.94%)</title><rect x="8.8690%" y="181" width="4.9363%" height="15" fill="rgb(221,200,47)"/><text x="9.1190%" y="191.50">mir_bo..</text></g><g><title>type_op_prove_predicate (140,491 samples, 0.28%)</title><rect x="13.5266%" y="165" width="0.2787%" height="15" fill="rgb(226,26,5)"/><text x="13.7766%" y="175.50"></text></g><g><title>MIR_effect_checking (184,402 samples, 0.37%)</title><rect x="13.8053%" y="197" width="0.3658%" height="15" fill="rgb(249,33,26)"/><text x="14.0553%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (166,622 samples, 0.33%)</title><rect x="13.8406%" y="181" width="0.3305%" height="15" fill="rgb(235,183,28)"/><text x="14.0906%" y="191.50"></text></g><g><title>hir_module_items (119,511 samples, 0.24%)</title><rect x="14.1711%" y="197" width="0.2371%" height="15" fill="rgb(221,5,38)"/><text x="14.4211%" y="207.50"></text></g><g><title>get_lang_items (75,870 samples, 0.15%)</title><rect x="14.8660%" y="149" width="0.1505%" height="15" fill="rgb(247,18,42)"/><text x="15.1160%" y="159.50"></text></g><g><title>codegen_fn_attrs (238,792 samples, 0.47%)</title><rect x="14.7068%" y="165" width="0.4737%" height="15" fill="rgb(241,131,45)"/><text x="14.9568%" y="175.50"></text></g><g><title>check_mod_attrs (356,983 samples, 0.71%)</title><rect x="14.4728%" y="181" width="0.7081%" height="15" fill="rgb(249,31,29)"/><text x="14.7228%" y="191.50"></text></g><g><title>lint_levels (51,511 samples, 0.10%)</title><rect x="15.5426%" y="165" width="0.1022%" height="15" fill="rgb(225,111,53)"/><text x="15.7926%" y="175.50"></text></g><g><title>lookup_deprecation_entry (108,700 samples, 0.22%)</title><rect x="15.6448%" y="165" width="0.2156%" height="15" fill="rgb(238,160,17)"/><text x="15.8948%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (334,894 samples, 0.66%)</title><rect x="15.3415%" y="181" width="0.6643%" height="15" fill="rgb(214,148,48)"/><text x="15.5915%" y="191.50"></text></g><g><title>misc_checking_1 (854,429 samples, 1.69%)</title><rect x="14.4089%" y="197" width="1.6948%" height="15" fill="rgb(232,36,49)"/><text x="14.6589%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (105,841 samples, 0.21%)</title><rect x="16.1080%" y="181" width="0.2099%" height="15" fill="rgb(209,103,24)"/><text x="16.3580%" y="191.50"></text></g><g><title>check_mod_liveness (82,291 samples, 0.16%)</title><rect x="16.1547%" y="165" width="0.1632%" height="15" fill="rgb(229,88,8)"/><text x="16.4047%" y="175.50"></text></g><g><title>misc_checking_2 (257,773 samples, 0.51%)</title><rect x="16.1038%" y="197" width="0.5113%" height="15" fill="rgb(213,181,19)"/><text x="16.3538%" y="207.50"></text></g><g><title>match_checking (149,822 samples, 0.30%)</title><rect x="16.3179%" y="181" width="0.2972%" height="15" fill="rgb(254,191,54)"/><text x="16.5679%" y="191.50"></text></g><g><title>check_match (143,712 samples, 0.29%)</title><rect x="16.3300%" y="165" width="0.2851%" height="15" fill="rgb(241,83,37)"/><text x="16.5800%" y="175.50"></text></g><g><title>death_checking (79,400 samples, 0.16%)</title><rect x="16.6994%" y="181" width="0.1575%" height="15" fill="rgb(233,36,39)"/><text x="16.9494%" y="191.50"></text></g><g><title>param_env (102,791 samples, 0.20%)</title><rect x="17.7074%" y="149" width="0.2039%" height="15" fill="rgb(226,3,54)"/><text x="17.9574%" y="159.50"></text></g><g><title>predicates_of (50,980 samples, 0.10%)</title><rect x="17.8101%" y="133" width="0.1011%" height="15" fill="rgb(245,192,40)"/><text x="18.0601%" y="143.50"></text></g><g><title>trait_impls_of (207,482 samples, 0.41%)</title><rect x="17.9113%" y="149" width="0.4116%" height="15" fill="rgb(238,167,29)"/><text x="18.1613%" y="159.50"></text></g><g><title>crate_lints (3,479,245 samples, 6.90%)</title><rect x="16.8596%" y="165" width="6.9014%" height="15" fill="rgb(232,182,51)"/><text x="17.1096%" y="175.50">crate_lin..</text></g><g><title>type_of (2,740,064 samples, 5.44%)</title><rect x="18.3258%" y="149" width="5.4352%" height="15" fill="rgb(231,60,39)"/><text x="18.5758%" y="159.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,491,333 samples, 4.94%)</title><rect x="18.8192%" y="133" width="4.9418%" height="15" fill="rgb(208,69,12)"/><text x="19.0692%" y="143.50">metada..</text></g><g><title>lint_checking (3,525,436 samples, 6.99%)</title><rect x="16.8569%" y="181" width="6.9930%" height="15" fill="rgb(235,93,37)"/><text x="17.1069%" y="191.50">lint_chec..</text></g><g><title>privacy_checking_modules (69,850 samples, 0.14%)</title><rect x="23.9478%" y="181" width="0.1386%" height="15" fill="rgb(213,116,39)"/><text x="24.1978%" y="191.50"></text></g><g><title>check_mod_privacy (68,080 samples, 0.14%)</title><rect x="23.9513%" y="165" width="0.1350%" height="15" fill="rgb(222,207,29)"/><text x="24.2013%" y="175.50"></text></g><g><title>misc_checking_3 (3,778,757 samples, 7.50%)</title><rect x="16.6151%" y="197" width="7.4955%" height="15" fill="rgb(206,96,30)"/><text x="16.8651%" y="207.50">misc_check..</text></g><g><title>impl_parent (152,251 samples, 0.30%)</title><rect x="24.8165%" y="133" width="0.3020%" height="15" fill="rgb(218,138,4)"/><text x="25.0665%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (106,890 samples, 0.21%)</title><rect x="24.9065%" y="117" width="0.2120%" height="15" fill="rgb(250,191,14)"/><text x="25.1565%" y="127.50"></text></g><g><title>impl_trait_ref (526,576 samples, 1.04%)</title><rect x="25.1185%" y="133" width="1.0445%" height="15" fill="rgb(239,60,40)"/><text x="25.3685%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (485,306 samples, 0.96%)</title><rect x="25.2003%" y="117" width="0.9627%" height="15" fill="rgb(206,27,48)"/><text x="25.4503%" y="127.50"></text></g><g><title>coherent_trait (1,038,141 samples, 2.06%)</title><rect x="24.2620%" y="165" width="2.0593%" height="15" fill="rgb(225,35,8)"/><text x="24.5120%" y="175.50">c..</text></g><g><title>specialization_graph_of (1,029,701 samples, 2.04%)</title><rect x="24.2788%" y="149" width="2.0425%" height="15" fill="rgb(250,213,24)"/><text x="24.5288%" y="159.50">s..</text></g><g><title>trait_impls_of (79,801 samples, 0.16%)</title><rect x="26.1630%" y="133" width="0.1583%" height="15" fill="rgb(247,123,22)"/><text x="26.4130%" y="143.50"></text></g><g><title>coherence_checking (1,111,541 samples, 2.20%)</title><rect x="24.2267%" y="181" width="2.2049%" height="15" fill="rgb(231,138,38)"/><text x="24.4767%" y="191.50">c..</text></g><g><title>adt_sized_constraint (108,141 samples, 0.21%)</title><rect x="28.1336%" y="133" width="0.2145%" height="15" fill="rgb(231,145,46)"/><text x="28.3836%" y="143.50"></text></g><g><title>adt_sized_constraint (105,881 samples, 0.21%)</title><rect x="28.1381%" y="117" width="0.2100%" height="15" fill="rgb(251,118,11)"/><text x="28.3881%" y="127.50"></text></g><g><title>adt_sized_constraint (69,111 samples, 0.14%)</title><rect x="28.2111%" y="101" width="0.1371%" height="15" fill="rgb(217,147,25)"/><text x="28.4611%" y="111.50"></text></g><g><title>adt_def (67,991 samples, 0.13%)</title><rect x="28.2133%" y="85" width="0.1349%" height="15" fill="rgb(247,81,37)"/><text x="28.4633%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (67,441 samples, 0.13%)</title><rect x="28.2144%" y="69" width="0.1338%" height="15" fill="rgb(209,12,38)"/><text x="28.4644%" y="79.50"></text></g><g><title>item_attrs (63,551 samples, 0.13%)</title><rect x="28.2221%" y="53" width="0.1261%" height="15" fill="rgb(227,1,9)"/><text x="28.4721%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (62,871 samples, 0.12%)</title><rect x="28.2234%" y="37" width="0.1247%" height="15" fill="rgb(248,47,43)"/><text x="28.4734%" y="47.50"></text></g><g><title>adt_def (206,612 samples, 0.41%)</title><rect x="28.5530%" y="69" width="0.4098%" height="15" fill="rgb(221,10,30)"/><text x="28.8030%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (206,072 samples, 0.41%)</title><rect x="28.5541%" y="53" width="0.4088%" height="15" fill="rgb(210,229,1)"/><text x="28.8041%" y="63.50"></text></g><g><title>adt_dtorck_constraint (229,302 samples, 0.45%)</title><rect x="28.5266%" y="85" width="0.4548%" height="15" fill="rgb(222,148,37)"/><text x="28.7766%" y="95.50"></text></g><g><title>adt_dtorck_constraint (243,043 samples, 0.48%)</title><rect x="28.5050%" y="101" width="0.4821%" height="15" fill="rgb(234,67,33)"/><text x="28.7550%" y="111.50"></text></g><g><title>dropck_outlives (282,933 samples, 0.56%)</title><rect x="28.4276%" y="133" width="0.5612%" height="15" fill="rgb(247,98,35)"/><text x="28.6776%" y="143.50"></text></g><g><title>adt_dtorck_constraint (251,253 samples, 0.50%)</title><rect x="28.4905%" y="117" width="0.4984%" height="15" fill="rgb(247,138,52)"/><text x="28.7405%" y="127.50"></text></g><g><title>evaluate_obligation (70,371 samples, 0.14%)</title><rect x="28.9889%" y="133" width="0.1396%" height="15" fill="rgb(213,79,30)"/><text x="29.2389%" y="143.50"></text></g><g><title>evaluate_obligation (270,652 samples, 0.54%)</title><rect x="32.0567%" y="117" width="0.5369%" height="15" fill="rgb(246,177,23)"/><text x="32.3067%" y="127.50"></text></g><g><title>trait_impls_of (80,821 samples, 0.16%)</title><rect x="32.4333%" y="101" width="0.1603%" height="15" fill="rgb(230,62,27)"/><text x="32.6833%" y="111.50"></text></g><g><title>is_copy_raw (317,483 samples, 0.63%)</title><rect x="32.8733%" y="117" width="0.6298%" height="15" fill="rgb(216,154,8)"/><text x="33.1233%" y="127.50"></text></g><g><title>evaluate_obligation (298,163 samples, 0.59%)</title><rect x="32.9116%" y="101" width="0.5914%" height="15" fill="rgb(244,35,45)"/><text x="33.1616%" y="111.50"></text></g><g><title>trait_impls_of (214,312 samples, 0.43%)</title><rect x="33.0779%" y="85" width="0.4251%" height="15" fill="rgb(251,115,12)"/><text x="33.3279%" y="95.50"></text></g><g><title>method_autoderef_steps (82,941 samples, 0.16%)</title><rect x="33.6094%" y="117" width="0.1645%" height="15" fill="rgb(240,54,50)"/><text x="33.8594%" y="127.50"></text></g><g><title>evaluate_obligation (68,731 samples, 0.14%)</title><rect x="33.6376%" y="101" width="0.1363%" height="15" fill="rgb(233,84,52)"/><text x="33.8876%" y="111.50"></text></g><g><title>predicates_of (90,700 samples, 0.18%)</title><rect x="33.7818%" y="117" width="0.1799%" height="15" fill="rgb(207,117,47)"/><text x="34.0318%" y="127.50"></text></g><g><title>predicates_defined_on (60,270 samples, 0.12%)</title><rect x="33.8421%" y="101" width="0.1196%" height="15" fill="rgb(249,43,39)"/><text x="34.0921%" y="111.50"></text></g><g><title>typeck (2,337,333 samples, 4.64%)</title><rect x="29.3986%" y="133" width="4.6363%" height="15" fill="rgb(209,38,44)"/><text x="29.6486%" y="143.50">typeck</text></g><g><title>item_bodies_checking (3,811,918 samples, 7.56%)</title><rect x="26.4907%" y="181" width="7.5613%" height="15" fill="rgb(236,212,23)"/><text x="26.7407%" y="191.50">item_bodie..</text></g><g><title>typeck_item_bodies (3,809,198 samples, 7.56%)</title><rect x="26.4961%" y="165" width="7.5559%" height="15" fill="rgb(242,79,21)"/><text x="26.7461%" y="175.50">typeck_ite..</text></g><g><title>typeck (3,798,918 samples, 7.54%)</title><rect x="26.5165%" y="149" width="7.5355%" height="15" fill="rgb(211,96,35)"/><text x="26.7665%" y="159.50">typeck</text></g><g><title>impl_parent (130,601 samples, 0.26%)</title><rect x="34.5494%" y="101" width="0.2591%" height="15" fill="rgb(253,215,40)"/><text x="34.7994%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (81,431 samples, 0.16%)</title><rect x="34.6469%" y="85" width="0.1615%" height="15" fill="rgb(211,81,21)"/><text x="34.8969%" y="95.50"></text></g><g><title>impl_trait_ref (432,354 samples, 0.86%)</title><rect x="34.8084%" y="101" width="0.8576%" height="15" fill="rgb(208,190,38)"/><text x="35.0584%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (381,073 samples, 0.76%)</title><rect x="34.9102%" y="85" width="0.7559%" height="15" fill="rgb(235,213,38)"/><text x="35.1602%" y="95.50"></text></g><g><title>adt_destructor (827,788 samples, 1.64%)</title><rect x="34.1460%" y="149" width="1.6420%" height="15" fill="rgb(237,122,38)"/><text x="34.3960%" y="159.50"></text></g><g><title>coherent_trait (822,788 samples, 1.63%)</title><rect x="34.1559%" y="133" width="1.6321%" height="15" fill="rgb(244,218,35)"/><text x="34.4059%" y="143.50"></text></g><g><title>specialization_graph_of (819,438 samples, 1.63%)</title><rect x="34.1626%" y="117" width="1.6254%" height="15" fill="rgb(240,68,47)"/><text x="34.4126%" y="127.50"></text></g><g><title>trait_impls_of (61,481 samples, 0.12%)</title><rect x="35.6661%" y="101" width="0.1220%" height="15" fill="rgb(210,16,53)"/><text x="35.9161%" y="111.50"></text></g><g><title>item_types_checking (889,829 samples, 1.77%)</title><rect x="34.0520%" y="181" width="1.7651%" height="15" fill="rgb(235,124,12)"/><text x="34.3020%" y="191.50"></text></g><g><title>check_mod_item_types (885,459 samples, 1.76%)</title><rect x="34.0607%" y="165" width="1.7564%" height="15" fill="rgb(224,169,11)"/><text x="34.3107%" y="175.50"></text></g><g><title>named_region_map (90,081 samples, 0.18%)</title><rect x="36.3065%" y="133" width="0.1787%" height="15" fill="rgb(250,166,2)"/><text x="36.5565%" y="143.50"></text></g><g><title>resolve_lifetimes (67,300 samples, 0.13%)</title><rect x="36.3517%" y="117" width="0.1335%" height="15" fill="rgb(242,216,29)"/><text x="36.6017%" y="127.50"></text></g><g><title>generics_of (181,383 samples, 0.36%)</title><rect x="36.1487%" y="149" width="0.3598%" height="15" fill="rgb(230,116,27)"/><text x="36.3987%" y="159.50"></text></g><g><title>late_bound_vars_map (69,990 samples, 0.14%)</title><rect x="37.0008%" y="101" width="0.1388%" height="15" fill="rgb(228,99,48)"/><text x="37.2508%" y="111.50"></text></g><g><title>resolve_lifetimes (63,100 samples, 0.13%)</title><rect x="37.0144%" y="85" width="0.1252%" height="15" fill="rgb(253,11,6)"/><text x="37.2644%" y="95.50"></text></g><g><title>explicit_predicates_of (331,093 samples, 0.66%)</title><rect x="36.5949%" y="117" width="0.6568%" height="15" fill="rgb(247,143,39)"/><text x="36.8449%" y="127.50"></text></g><g><title>predicates_of (54,111 samples, 0.11%)</title><rect x="37.3372%" y="85" width="0.1073%" height="15" fill="rgb(236,97,10)"/><text x="37.5872%" y="95.50"></text></g><g><title>predicates_defined_on (51,221 samples, 0.10%)</title><rect x="37.3429%" y="69" width="0.1016%" height="15" fill="rgb(233,208,19)"/><text x="37.5929%" y="79.50"></text></g><g><title>predicates_of (547,295 samples, 1.09%)</title><rect x="36.5162%" y="149" width="1.0856%" height="15" fill="rgb(216,164,2)"/><text x="36.7662%" y="159.50"></text></g><g><title>predicates_defined_on (530,745 samples, 1.05%)</title><rect x="36.5491%" y="133" width="1.0528%" height="15" fill="rgb(220,129,5)"/><text x="36.7991%" y="143.50"></text></g><g><title>inferred_outlives_of (176,562 samples, 0.35%)</title><rect x="37.2516%" y="117" width="0.3502%" height="15" fill="rgb(242,17,10)"/><text x="37.5016%" y="127.50"></text></g><g><title>inferred_outlives_crate (165,562 samples, 0.33%)</title><rect x="37.2734%" y="101" width="0.3284%" height="15" fill="rgb(242,107,0)"/><text x="37.5234%" y="111.50"></text></g><g><title>type_of (79,330 samples, 0.16%)</title><rect x="37.4445%" y="85" width="0.1574%" height="15" fill="rgb(251,28,31)"/><text x="37.6945%" y="95.50"></text></g><g><title>type_of (56,810 samples, 0.11%)</title><rect x="37.4892%" y="69" width="0.1127%" height="15" fill="rgb(233,223,10)"/><text x="37.7392%" y="79.50"></text></g><g><title>metadata_decode_entry_type_of (54,010 samples, 0.11%)</title><rect x="37.4947%" y="53" width="0.1071%" height="15" fill="rgb(215,21,27)"/><text x="37.7447%" y="63.50"></text></g><g><title>super_predicates_of (53,321 samples, 0.11%)</title><rect x="37.6018%" y="149" width="0.1058%" height="15" fill="rgb(232,23,21)"/><text x="37.8518%" y="159.50"></text></g><g><title>type_collecting (998,640 samples, 1.98%)</title><rect x="35.8202%" y="181" width="1.9809%" height="15" fill="rgb(244,5,23)"/><text x="36.0702%" y="191.50">t..</text></g><g><title>collect_mod_item_types (985,490 samples, 1.95%)</title><rect x="35.8462%" y="165" width="1.9548%" height="15" fill="rgb(226,81,46)"/><text x="36.0962%" y="175.50">c..</text></g><g><title>evaluate_obligation (163,722 samples, 0.32%)</title><rect x="38.3958%" y="149" width="0.3248%" height="15" fill="rgb(247,70,30)"/><text x="38.6458%" y="159.50"></text></g><g><title>implied_outlives_bounds (82,831 samples, 0.16%)</title><rect x="38.7205%" y="149" width="0.1643%" height="15" fill="rgb(212,68,19)"/><text x="38.9705%" y="159.50"></text></g><g><title>check_impl_item_well_formed (624,846 samples, 1.24%)</title><rect x="37.8947%" y="165" width="1.2394%" height="15" fill="rgb(240,187,13)"/><text x="38.1447%" y="175.50"></text></g><g><title>adt_def (59,861 samples, 0.12%)</title><rect x="40.3148%" y="133" width="0.1187%" height="15" fill="rgb(223,113,26)"/><text x="40.5648%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (57,621 samples, 0.11%)</title><rect x="40.3193%" y="117" width="0.1143%" height="15" fill="rgb(206,192,2)"/><text x="40.5693%" y="127.50"></text></g><g><title>adt_def (51,561 samples, 0.10%)</title><rect x="40.4474%" y="117" width="0.1023%" height="15" fill="rgb(241,108,4)"/><text x="40.6974%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (50,981 samples, 0.10%)</title><rect x="40.4486%" y="101" width="0.1011%" height="15" fill="rgb(247,173,49)"/><text x="40.6986%" y="111.50"></text></g><g><title>adt_sized_constraint (67,201 samples, 0.13%)</title><rect x="40.4336%" y="133" width="0.1333%" height="15" fill="rgb(224,114,35)"/><text x="40.6836%" y="143.50"></text></g><g><title>adt_sized_constraint (143,772 samples, 0.29%)</title><rect x="40.2865%" y="149" width="0.2852%" height="15" fill="rgb(245,159,27)"/><text x="40.5365%" y="159.50"></text></g><g><title>implied_outlives_bounds (105,111 samples, 0.21%)</title><rect x="40.5753%" y="149" width="0.2085%" height="15" fill="rgb(245,172,44)"/><text x="40.8253%" y="159.50"></text></g><g><title>param_env (290,905 samples, 0.58%)</title><rect x="40.7838%" y="149" width="0.5770%" height="15" fill="rgb(236,23,11)"/><text x="41.0338%" y="159.50"></text></g><g><title>check_item_well_formed (1,229,304 samples, 2.44%)</title><rect x="39.1342%" y="165" width="2.4384%" height="15" fill="rgb(205,117,38)"/><text x="39.3842%" y="175.50">ch..</text></g><g><title>variances_of (66,781 samples, 0.13%)</title><rect x="41.4401%" y="149" width="0.1325%" height="15" fill="rgb(237,72,25)"/><text x="41.6901%" y="159.50"></text></g><g><title>crate_variances (61,701 samples, 0.12%)</title><rect x="41.4502%" y="133" width="0.1224%" height="15" fill="rgb(244,70,9)"/><text x="41.7002%" y="143.50"></text></g><g><title>analysis (16,774,710 samples, 33.27%)</title><rect x="8.5270%" y="213" width="33.2743%" height="15" fill="rgb(217,125,39)"/><text x="8.7770%" y="223.50">analysis</text></g><g><title>type_check_crate (8,918,450 samples, 17.69%)</title><rect x="24.1106%" y="197" width="17.6906%" height="15" fill="rgb(235,36,10)"/><text x="24.3606%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,015,881 samples, 4.00%)</title><rect x="37.8025%" y="181" width="3.9987%" height="15" fill="rgb(251,123,47)"/><text x="38.0525%" y="191.50">wf_c..</text></g><g><title>check_trait_item_well_formed (115,261 samples, 0.23%)</title><rect x="41.5726%" y="165" width="0.2286%" height="15" fill="rgb(221,13,13)"/><text x="41.8226%" y="175.50"></text></g><g><title>codegen_module (282,432 samples, 0.56%)</title><rect x="43.5532%" y="197" width="0.5602%" height="15" fill="rgb(238,131,9)"/><text x="43.8032%" y="207.50"></text></g><g><title>codegen_crate (1,224,743 samples, 2.43%)</title><rect x="41.8233%" y="213" width="2.4294%" height="15" fill="rgb(211,50,8)"/><text x="42.0733%" y="223.50">co..</text></g><g><title>LLVM_module_codegen (2,608,347 samples, 5.17%)</title><rect x="44.2836%" y="197" width="5.1739%" height="15" fill="rgb(245,182,24)"/><text x="44.5336%" y="207.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (2,559,415 samples, 5.08%)</title><rect x="44.3806%" y="181" width="5.0769%" height="15" fill="rgb(242,14,37)"/><text x="44.6306%" y="191.50">LLVM_m..</text></g><g><title>codegen_module_optimize (2,861,729 samples, 5.68%)</title><rect x="44.2527%" y="213" width="5.6765%" height="15" fill="rgb(246,228,12)"/><text x="44.5027%" y="223.50">codegen..</text></g><g><title>LLVM_module_optimize (237,832 samples, 0.47%)</title><rect x="49.4575%" y="197" width="0.4718%" height="15" fill="rgb(213,55,15)"/><text x="49.7075%" y="207.50"></text></g><g><title>AST_validation (137,472 samples, 0.27%)</title><rect x="50.3723%" y="197" width="0.2727%" height="15" fill="rgb(209,9,3)"/><text x="50.6223%" y="207.50"></text></g><g><title>crate_injection (81,301 samples, 0.16%)</title><rect x="50.7189%" y="197" width="0.1613%" height="15" fill="rgb(230,59,30)"/><text x="50.9689%" y="207.50"></text></g><g><title>metadata_load_macro (383,006 samples, 0.76%)</title><rect x="75.4884%" y="165" width="0.7597%" height="15" fill="rgb(209,121,21)"/><text x="75.7384%" y="175.50"></text></g><g><title>metadata_register_crate (2,147,191 samples, 4.26%)</title><rect x="76.2481%" y="165" width="4.2592%" height="15" fill="rgb(220,109,13)"/><text x="76.4981%" y="175.50">metad..</text></g><g><title>metadata_register_crate (765,988 samples, 1.52%)</title><rect x="78.9878%" y="149" width="1.5194%" height="15" fill="rgb(232,18,1)"/><text x="79.2378%" y="159.50"></text></g><g><title>metadata_register_crate (68,741 samples, 0.14%)</title><rect x="80.3709%" y="133" width="0.1364%" height="15" fill="rgb(215,41,42)"/><text x="80.6209%" y="143.50"></text></g><g><title>macro_expand_crate (14,997,682 samples, 29.75%)</title><rect x="50.8802%" y="197" width="29.7494%" height="15" fill="rgb(224,123,36)"/><text x="51.1302%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (14,972,022 samples, 29.70%)</title><rect x="50.9311%" y="181" width="29.6985%" height="15" fill="rgb(240,125,3)"/><text x="51.1811%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (61,651 samples, 0.12%)</title><rect x="80.5073%" y="165" width="0.1223%" height="15" fill="rgb(205,98,50)"/><text x="80.7573%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (109,861 samples, 0.22%)</title><rect x="80.6540%" y="197" width="0.2179%" height="15" fill="rgb(205,185,37)"/><text x="80.9040%" y="207.50"></text></g><g><title>finalize_imports (54,000 samples, 0.11%)</title><rect x="80.8893%" y="181" width="0.1071%" height="15" fill="rgb(238,207,15)"/><text x="81.1393%" y="191.50"></text></g><g><title>finalize_macro_resolutions (115,671 samples, 0.23%)</title><rect x="80.9964%" y="181" width="0.2294%" height="15" fill="rgb(213,199,42)"/><text x="81.2464%" y="191.50"></text></g><g><title>late_resolve_crate (604,956 samples, 1.20%)</title><rect x="81.2259%" y="181" width="1.2000%" height="15" fill="rgb(235,201,11)"/><text x="81.4759%" y="191.50"></text></g><g><title>configure_and_expand (16,446,157 samples, 32.62%)</title><rect x="49.9293%" y="213" width="32.6226%" height="15" fill="rgb(207,46,11)"/><text x="50.1793%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (846,918 samples, 1.68%)</title><rect x="80.8719%" y="197" width="1.6799%" height="15" fill="rgb(241,35,35)"/><text x="81.1219%" y="207.50"></text></g><g><title>drop_ast (68,060 samples, 0.14%)</title><rect x="82.5518%" y="213" width="0.1350%" height="15" fill="rgb(243,32,47)"/><text x="82.8018%" y="223.50"></text></g><g><title>early_lint_checks (145,182 samples, 0.29%)</title><rect x="82.7126%" y="213" width="0.2880%" height="15" fill="rgb(247,202,23)"/><text x="82.9626%" y="223.50"></text></g><g><title>free_global_ctxt (2,386,004 samples, 4.73%)</title><rect x="83.0006%" y="213" width="4.7329%" height="15" fill="rgb(219,102,11)"/><text x="83.2506%" y="223.50">free_g..</text></g><g><title>crate_hash (69,331 samples, 0.14%)</title><rect x="88.5559%" y="197" width="0.1375%" height="15" fill="rgb(243,110,44)"/><text x="88.8059%" y="207.50"></text></g><g><title>exported_symbols (84,191 samples, 0.17%)</title><rect x="88.7445%" y="197" width="0.1670%" height="15" fill="rgb(222,74,54)"/><text x="88.9945%" y="207.50"></text></g><g><title>codegen_fn_attrs (57,061 samples, 0.11%)</title><rect x="89.3493%" y="133" width="0.1132%" height="15" fill="rgb(216,99,12)"/><text x="89.5993%" y="143.50"></text></g><g><title>fn_abi_of_instance (135,521 samples, 0.27%)</title><rect x="89.2964%" y="149" width="0.2688%" height="15" fill="rgb(226,22,26)"/><text x="89.5464%" y="159.50"></text></g><g><title>layout_of (51,420 samples, 0.10%)</title><rect x="89.6099%" y="149" width="0.1020%" height="15" fill="rgb(217,163,10)"/><text x="89.8599%" y="159.50"></text></g><g><title>eval_to_allocation_raw (418,114 samples, 0.83%)</title><rect x="89.0702%" y="181" width="0.8294%" height="15" fill="rgb(213,25,53)"/><text x="89.3202%" y="191.50"></text></g><g><title>eval_to_allocation_raw (416,244 samples, 0.83%)</title><rect x="89.0739%" y="165" width="0.8257%" height="15" fill="rgb(252,105,26)"/><text x="89.3239%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (51,001 samples, 0.10%)</title><rect x="89.7984%" y="149" width="0.1012%" height="15" fill="rgb(220,39,43)"/><text x="90.0484%" y="159.50"></text></g><g><title>mir_for_ctfe (498,205 samples, 0.99%)</title><rect x="88.9394%" y="197" width="0.9882%" height="15" fill="rgb(229,68,48)"/><text x="89.1894%" y="207.50"></text></g><g><title>layout_of (63,421 samples, 0.13%)</title><rect x="90.3379%" y="181" width="0.1258%" height="15" fill="rgb(252,8,32)"/><text x="90.5879%" y="191.50"></text></g><g><title>needs_drop_raw (74,771 samples, 0.15%)</title><rect x="90.8796%" y="165" width="0.1483%" height="15" fill="rgb(223,20,43)"/><text x="91.1296%" y="175.50"></text></g><g><title>is_copy_raw (68,051 samples, 0.13%)</title><rect x="90.8929%" y="149" width="0.1350%" height="15" fill="rgb(229,81,49)"/><text x="91.1429%" y="159.50"></text></g><g><title>evaluate_obligation (60,881 samples, 0.12%)</title><rect x="90.9071%" y="133" width="0.1208%" height="15" fill="rgb(236,28,36)"/><text x="91.1571%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (290,714 samples, 0.58%)</title><rect x="90.4637%" y="181" width="0.5767%" height="15" fill="rgb(249,185,26)"/><text x="90.7137%" y="191.50"></text></g><g><title>optimized_mir (554,626 samples, 1.10%)</title><rect x="89.9609%" y="197" width="1.1002%" height="15" fill="rgb(249,174,33)"/><text x="90.2109%" y="207.50"></text></g><g><title>generate_crate_metadata (1,692,977 samples, 3.36%)</title><rect x="87.7335%" y="213" width="3.3582%" height="15" fill="rgb(233,201,37)"/><text x="87.9835%" y="223.50">gen..</text></g><g><title>hir_lowering (1,133,741 samples, 2.25%)</title><rect x="91.0917%" y="213" width="2.2489%" height="15" fill="rgb(221,78,26)"/><text x="91.3417%" y="223.50">h..</text></g><g><title>finish_ongoing_codegen (436,245 samples, 0.87%)</title><rect x="93.3671%" y="197" width="0.8653%" height="15" fill="rgb(250,127,30)"/><text x="93.6171%" y="207.50"></text></g><g><title>link_crate (581,526 samples, 1.15%)</title><rect x="94.2324%" y="197" width="1.1535%" height="15" fill="rgb(230,49,44)"/><text x="94.4824%" y="207.50"></text></g><g><title>link_binary (571,606 samples, 1.13%)</title><rect x="94.2521%" y="181" width="1.1338%" height="15" fill="rgb(229,67,23)"/><text x="94.5021%" y="191.50"></text></g><g><title>link_rlib (349,323 samples, 0.69%)</title><rect x="94.6930%" y="165" width="0.6929%" height="15" fill="rgb(249,83,47)"/><text x="94.9430%" y="175.50"></text></g><g><title>link (1,037,051 samples, 2.06%)</title><rect x="93.3406%" y="213" width="2.0571%" height="15" fill="rgb(215,43,3)"/><text x="93.5906%" y="223.50">l..</text></g><g><title>parse_crate (1,123,312 samples, 2.23%)</title><rect x="95.3977%" y="213" width="2.2282%" height="15" fill="rgb(238,154,13)"/><text x="95.6477%" y="223.50">p..</text></g><g><title>prepare_outputs (377,734 samples, 0.75%)</title><rect x="97.6468%" y="213" width="0.7493%" height="15" fill="rgb(219,56,2)"/><text x="97.8968%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (346,313 samples, 0.69%)</title><rect x="98.3961%" y="213" width="0.6869%" height="15" fill="rgb(233,0,4)"/><text x="98.6461%" y="223.50"></text></g><g><title>setup_global_ctxt (161,312 samples, 0.32%)</title><rect x="99.0850%" y="213" width="0.3200%" height="15" fill="rgb(235,30,7)"/><text x="99.3350%" y="223.50"></text></g><g><title>all (50,413,431 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (50,413,431 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (299,983 samples, 0.60%)</title><rect x="99.4050%" y="213" width="0.5950%" height="15" fill="rgb(228,22,38)"/><text x="99.6550%" y="223.50"></text></g></svg></svg>