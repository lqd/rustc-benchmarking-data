<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (33,236,071 samples, 11.71%)</title><rect x="0.2331%" y="197" width="11.7080%" height="15" fill="rgb(227,0,7)"/><text x="0.4831%" y="207.50">LLVM_passes</text></g><g><title>param_env (304,511 samples, 0.11%)</title><rect x="15.4669%" y="117" width="0.1073%" height="15" fill="rgb(217,0,24)"/><text x="15.7169%" y="127.50"></text></g><g><title>codegen_fn_attrs (396,295 samples, 0.14%)</title><rect x="15.7028%" y="101" width="0.1396%" height="15" fill="rgb(221,193,54)"/><text x="15.9528%" y="111.50"></text></g><g><title>needs_drop_raw (828,310 samples, 0.29%)</title><rect x="16.5370%" y="85" width="0.2918%" height="15" fill="rgb(248,212,6)"/><text x="16.7870%" y="95.50"></text></g><g><title>is_copy_raw (634,687 samples, 0.22%)</title><rect x="16.6052%" y="69" width="0.2236%" height="15" fill="rgb(208,68,35)"/><text x="16.8552%" y="79.50"></text></g><g><title>evaluate_obligation (494,466 samples, 0.17%)</title><rect x="16.6546%" y="53" width="0.1742%" height="15" fill="rgb(232,128,0)"/><text x="16.9046%" y="63.50"></text></g><g><title>specialization_graph_of (1,031,170 samples, 0.36%)</title><rect x="16.8989%" y="69" width="0.3632%" height="15" fill="rgb(207,160,47)"/><text x="17.1489%" y="79.50"></text></g><g><title>impl_trait_ref (385,713 samples, 0.14%)</title><rect x="17.1263%" y="53" width="0.1359%" height="15" fill="rgb(228,23,34)"/><text x="17.3763%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (328,642 samples, 0.12%)</title><rect x="17.1464%" y="37" width="0.1158%" height="15" fill="rgb(218,30,26)"/><text x="17.3964%" y="47.50"></text></g><g><title>resolve_instance (1,292,763 samples, 0.46%)</title><rect x="16.8288%" y="85" width="0.4554%" height="15" fill="rgb(220,122,19)"/><text x="17.0788%" y="95.50"></text></g><g><title>thir_body (655,054 samples, 0.23%)</title><rect x="17.2932%" y="85" width="0.2308%" height="15" fill="rgb(250,228,42)"/><text x="17.5432%" y="95.50"></text></g><g><title>mir_const (6,546,321 samples, 2.31%)</title><rect x="15.2264%" y="133" width="2.3061%" height="15" fill="rgb(240,193,28)"/><text x="15.4764%" y="143.50">m..</text></g><g><title>unsafety_check_result (5,558,915 samples, 1.96%)</title><rect x="15.5742%" y="117" width="1.9582%" height="15" fill="rgb(216,20,37)"/><text x="15.8242%" y="127.50">u..</text></g><g><title>mir_built (4,797,610 samples, 1.69%)</title><rect x="15.8424%" y="101" width="1.6900%" height="15" fill="rgb(206,188,39)"/><text x="16.0924%" y="111.50"></text></g><g><title>mir_const (433,514 samples, 0.15%)</title><rect x="17.7218%" y="117" width="0.1527%" height="15" fill="rgb(217,207,13)"/><text x="17.9718%" y="127.50"></text></g><g><title>unsafety_check_result (359,484 samples, 0.13%)</title><rect x="17.7479%" y="101" width="0.1266%" height="15" fill="rgb(231,73,38)"/><text x="17.9979%" y="111.50"></text></g><g><title>mir_built (329,894 samples, 0.12%)</title><rect x="17.7583%" y="85" width="0.1162%" height="15" fill="rgb(225,20,46)"/><text x="18.0083%" y="95.50"></text></g><g><title>mir_promoted (8,211,381 samples, 2.89%)</title><rect x="14.9928%" y="149" width="2.8926%" height="15" fill="rgb(210,31,41)"/><text x="15.2428%" y="159.50">mi..</text></g><g><title>mir_const_qualif (1,001,931 samples, 0.35%)</title><rect x="17.5324%" y="133" width="0.3529%" height="15" fill="rgb(221,200,47)"/><text x="17.7824%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (424,635 samples, 0.15%)</title><rect x="17.8854%" y="149" width="0.1496%" height="15" fill="rgb(226,26,5)"/><text x="18.1354%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,072,248 samples, 0.73%)</title><rect x="18.0923%" y="149" width="0.7300%" height="15" fill="rgb(249,33,26)"/><text x="18.3423%" y="159.50"></text></g><g><title>MIR_borrow_checking (19,331,584 samples, 6.81%)</title><rect x="12.0150%" y="181" width="6.8099%" height="15" fill="rgb(235,183,28)"/><text x="12.2650%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (19,221,682 samples, 6.77%)</title><rect x="12.0537%" y="165" width="6.7712%" height="15" fill="rgb(221,5,38)"/><text x="12.3037%" y="175.50">mir_borro..</text></g><g><title>MIR_effect_checking (350,453 samples, 0.12%)</title><rect x="18.8249%" y="181" width="0.1235%" height="15" fill="rgb(247,18,42)"/><text x="19.0749%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (295,482 samples, 0.10%)</title><rect x="18.8442%" y="165" width="0.1041%" height="15" fill="rgb(241,131,45)"/><text x="19.0942%" y="175.50"></text></g><g><title>codegen_fn_attrs (343,053 samples, 0.12%)</title><rect x="19.0702%" y="149" width="0.1208%" height="15" fill="rgb(249,31,29)"/><text x="19.3202%" y="159.50"></text></g><g><title>check_mod_attrs (515,638 samples, 0.18%)</title><rect x="19.0094%" y="165" width="0.1816%" height="15" fill="rgb(225,111,53)"/><text x="19.2594%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (378,423 samples, 0.13%)</title><rect x="19.2460%" y="165" width="0.1333%" height="15" fill="rgb(238,160,17)"/><text x="19.4960%" y="175.50"></text></g><g><title>misc_checking_1 (1,137,052 samples, 0.40%)</title><rect x="19.0000%" y="181" width="0.4005%" height="15" fill="rgb(214,148,48)"/><text x="19.2500%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (385,934 samples, 0.14%)</title><rect x="19.4011%" y="165" width="0.1360%" height="15" fill="rgb(232,36,49)"/><text x="19.6511%" y="175.50"></text></g><g><title>check_mod_liveness (290,752 samples, 0.10%)</title><rect x="19.4346%" y="149" width="0.1024%" height="15" fill="rgb(209,103,24)"/><text x="19.6846%" y="159.50"></text></g><g><title>misc_checking_2 (740,678 samples, 0.26%)</title><rect x="19.4006%" y="181" width="0.2609%" height="15" fill="rgb(229,88,8)"/><text x="19.6506%" y="191.50"></text></g><g><title>match_checking (353,324 samples, 0.12%)</title><rect x="19.5370%" y="165" width="0.1245%" height="15" fill="rgb(213,181,19)"/><text x="19.7870%" y="175.50"></text></g><g><title>check_match (325,644 samples, 0.11%)</title><rect x="19.5468%" y="149" width="0.1147%" height="15" fill="rgb(254,191,54)"/><text x="19.7968%" y="159.50"></text></g><g><title>death_checking (328,033 samples, 0.12%)</title><rect x="19.7255%" y="165" width="0.1156%" height="15" fill="rgb(241,83,37)"/><text x="19.9755%" y="175.50"></text></g><g><title>crate_lints (2,112,073 samples, 0.74%)</title><rect x="19.8416%" y="149" width="0.7440%" height="15" fill="rgb(233,36,39)"/><text x="20.0916%" y="159.50"></text></g><g><title>type_of (1,071,585 samples, 0.38%)</title><rect x="20.2081%" y="133" width="0.3775%" height="15" fill="rgb(226,3,54)"/><text x="20.4581%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (840,505 samples, 0.30%)</title><rect x="20.2895%" y="117" width="0.2961%" height="15" fill="rgb(245,192,40)"/><text x="20.5395%" y="127.50"></text></g><g><title>lint_checking (2,407,936 samples, 0.85%)</title><rect x="19.8410%" y="165" width="0.8482%" height="15" fill="rgb(238,167,29)"/><text x="20.0910%" y="175.50"></text></g><g><title>module_lints (294,343 samples, 0.10%)</title><rect x="20.5856%" y="149" width="0.1037%" height="15" fill="rgb(232,182,51)"/><text x="20.8356%" y="159.50"></text></g><g><title>lint_mod (287,643 samples, 0.10%)</title><rect x="20.5880%" y="133" width="0.1013%" height="15" fill="rgb(231,60,39)"/><text x="20.8380%" y="143.50"></text></g><g><title>privacy_checking_modules (533,166 samples, 0.19%)</title><rect x="20.7678%" y="165" width="0.1878%" height="15" fill="rgb(208,69,12)"/><text x="21.0178%" y="175.50"></text></g><g><title>check_mod_privacy (528,366 samples, 0.19%)</title><rect x="20.7695%" y="149" width="0.1861%" height="15" fill="rgb(235,93,37)"/><text x="21.0195%" y="159.50"></text></g><g><title>misc_checking_3 (3,689,540 samples, 1.30%)</title><rect x="19.6615%" y="181" width="1.2997%" height="15" fill="rgb(213,116,39)"/><text x="19.9115%" y="191.50"></text></g><g><title>impl_parent (1,924,640 samples, 0.68%)</title><rect x="21.9568%" y="117" width="0.6780%" height="15" fill="rgb(222,207,29)"/><text x="22.2068%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,066,678 samples, 0.38%)</title><rect x="22.2590%" y="101" width="0.3758%" height="15" fill="rgb(206,96,30)"/><text x="22.5090%" y="111.50"></text></g><g><title>impl_trait_ref (4,435,047 samples, 1.56%)</title><rect x="22.6353%" y="117" width="1.5623%" height="15" fill="rgb(218,138,4)"/><text x="22.8853%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,793,985 samples, 1.34%)</title><rect x="22.8611%" y="101" width="1.3365%" height="15" fill="rgb(250,191,14)"/><text x="23.1111%" y="111.50"></text></g><g><title>trait_impls_of (562,546 samples, 0.20%)</title><rect x="24.2184%" y="117" width="0.1982%" height="15" fill="rgb(239,60,40)"/><text x="24.4684%" y="127.50"></text></g><g><title>coherent_trait (9,719,482 samples, 3.42%)</title><rect x="20.9931%" y="149" width="3.4239%" height="15" fill="rgb(206,27,48)"/><text x="21.2431%" y="159.50">coh..</text></g><g><title>specialization_graph_of (9,699,532 samples, 3.42%)</title><rect x="21.0002%" y="133" width="3.4168%" height="15" fill="rgb(225,35,8)"/><text x="21.2502%" y="143.50">spe..</text></g><g><title>coherence_checking (9,835,923 samples, 3.46%)</title><rect x="20.9850%" y="165" width="3.4649%" height="15" fill="rgb(250,213,24)"/><text x="21.2350%" y="175.50">coh..</text></g><g><title>dropck_outlives (483,735 samples, 0.17%)</title><rect x="28.2311%" y="117" width="0.1704%" height="15" fill="rgb(247,123,22)"/><text x="28.4811%" y="127.50"></text></g><g><title>trait_impls_of (378,847 samples, 0.13%)</title><rect x="28.8418%" y="101" width="0.1335%" height="15" fill="rgb(231,138,38)"/><text x="29.0918%" y="111.50"></text></g><g><title>evaluate_obligation (1,634,309 samples, 0.58%)</title><rect x="28.4015%" y="117" width="0.5757%" height="15" fill="rgb(231,145,46)"/><text x="28.6515%" y="127.50"></text></g><g><title>item_attrs (579,696 samples, 0.20%)</title><rect x="29.1317%" y="117" width="0.2042%" height="15" fill="rgb(251,118,11)"/><text x="29.3817%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (572,786 samples, 0.20%)</title><rect x="29.1341%" y="101" width="0.2018%" height="15" fill="rgb(217,147,25)"/><text x="29.3841%" y="111.50"></text></g><g><title>method_autoderef_steps (399,142 samples, 0.14%)</title><rect x="29.3611%" y="117" width="0.1406%" height="15" fill="rgb(247,81,37)"/><text x="29.6111%" y="127.50"></text></g><g><title>predicates_of (335,645 samples, 0.12%)</title><rect x="29.5940%" y="117" width="0.1182%" height="15" fill="rgb(209,12,38)"/><text x="29.8440%" y="127.50"></text></g><g><title>evaluate_obligation (462,136 samples, 0.16%)</title><rect x="31.2861%" y="101" width="0.1628%" height="15" fill="rgb(227,1,9)"/><text x="31.5361%" y="111.50"></text></g><g><title>is_copy_raw (334,084 samples, 0.12%)</title><rect x="31.4924%" y="101" width="0.1177%" height="15" fill="rgb(248,47,43)"/><text x="31.7424%" y="111.50"></text></g><g><title>evaluate_obligation (299,523 samples, 0.11%)</title><rect x="31.5046%" y="85" width="0.1055%" height="15" fill="rgb(221,10,30)"/><text x="31.7546%" y="95.50"></text></g><g><title>typeck (5,540,509 samples, 1.95%)</title><rect x="29.7553%" y="117" width="1.9517%" height="15" fill="rgb(210,229,1)"/><text x="30.0053%" y="127.50">t..</text></g><g><title>item_bodies_checking (20,615,798 samples, 7.26%)</title><rect x="24.4606%" y="165" width="7.2623%" height="15" fill="rgb(222,148,37)"/><text x="24.7106%" y="175.50">item_bodie..</text></g><g><title>typeck_item_bodies (20,612,557 samples, 7.26%)</title><rect x="24.4617%" y="149" width="7.2612%" height="15" fill="rgb(234,67,33)"/><text x="24.7117%" y="159.50">typeck_ite..</text></g><g><title>typeck (20,543,626 samples, 7.24%)</title><rect x="24.4860%" y="133" width="7.2369%" height="15" fill="rgb(247,98,35)"/><text x="24.7360%" y="143.50">typeck</text></g><g><title>item_types_checking (462,035 samples, 0.16%)</title><rect x="31.7229%" y="165" width="0.1628%" height="15" fill="rgb(247,138,52)"/><text x="31.9729%" y="175.50"></text></g><g><title>check_mod_item_types (455,585 samples, 0.16%)</title><rect x="31.7251%" y="149" width="0.1605%" height="15" fill="rgb(213,79,30)"/><text x="31.9751%" y="159.50"></text></g><g><title>explicit_predicates_of (471,936 samples, 0.17%)</title><rect x="32.1589%" y="101" width="0.1662%" height="15" fill="rgb(246,177,23)"/><text x="32.4089%" y="111.50"></text></g><g><title>predicates_of (883,590 samples, 0.31%)</title><rect x="32.1200%" y="133" width="0.3113%" height="15" fill="rgb(230,62,27)"/><text x="32.3700%" y="143.50"></text></g><g><title>predicates_defined_on (839,570 samples, 0.30%)</title><rect x="32.1355%" y="117" width="0.2958%" height="15" fill="rgb(216,154,8)"/><text x="32.3855%" y="127.50"></text></g><g><title>inferred_outlives_of (301,223 samples, 0.11%)</title><rect x="32.3252%" y="101" width="0.1061%" height="15" fill="rgb(244,35,45)"/><text x="32.5752%" y="111.50"></text></g><g><title>type_collecting (1,665,777 samples, 0.59%)</title><rect x="31.8865%" y="165" width="0.5868%" height="15" fill="rgb(251,115,12)"/><text x="32.1365%" y="175.50"></text></g><g><title>collect_mod_item_types (1,650,317 samples, 0.58%)</title><rect x="31.8920%" y="149" width="0.5814%" height="15" fill="rgb(240,54,50)"/><text x="32.1420%" y="159.50"></text></g><g><title>evaluate_obligation (524,736 samples, 0.18%)</title><rect x="33.1760%" y="133" width="0.1848%" height="15" fill="rgb(233,84,52)"/><text x="33.4260%" y="143.50"></text></g><g><title>implied_outlives_bounds (329,901 samples, 0.12%)</title><rect x="33.3608%" y="133" width="0.1162%" height="15" fill="rgb(207,117,47)"/><text x="33.6108%" y="143.50"></text></g><g><title>param_env (295,842 samples, 0.10%)</title><rect x="33.4771%" y="133" width="0.1042%" height="15" fill="rgb(249,43,39)"/><text x="33.7271%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,270,875 samples, 1.15%)</title><rect x="32.5297%" y="149" width="1.1522%" height="15" fill="rgb(209,38,44)"/><text x="32.7797%" y="159.50"></text></g><g><title>evaluate_obligation (494,995 samples, 0.17%)</title><rect x="33.9803%" y="133" width="0.1744%" height="15" fill="rgb(236,212,23)"/><text x="34.2303%" y="143.50"></text></g><g><title>adt_sized_constraint (296,583 samples, 0.10%)</title><rect x="34.0502%" y="117" width="0.1045%" height="15" fill="rgb(242,79,21)"/><text x="34.3002%" y="127.50"></text></g><g><title>analysis (63,502,260 samples, 22.37%)</title><rect x="11.9411%" y="197" width="22.3699%" height="15" fill="rgb(211,96,35)"/><text x="12.1911%" y="207.50">analysis</text></g><g><title>type_check_crate (37,896,629 samples, 13.35%)</title><rect x="20.9612%" y="181" width="13.3498%" height="15" fill="rgb(253,215,40)"/><text x="21.2112%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,211,765 samples, 1.84%)</title><rect x="32.4751%" y="165" width="1.8359%" height="15" fill="rgb(211,81,21)"/><text x="32.7251%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,785,687 samples, 0.63%)</title><rect x="33.6820%" y="149" width="0.6290%" height="15" fill="rgb(208,190,38)"/><text x="33.9320%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (471,572 samples, 0.17%)</title><rect x="43.6655%" y="165" width="0.1661%" height="15" fill="rgb(235,213,38)"/><text x="43.9155%" y="175.50"></text></g><g><title>eval_to_const_value_raw (298,925 samples, 0.11%)</title><rect x="44.5361%" y="133" width="0.1053%" height="15" fill="rgb(237,122,38)"/><text x="44.7861%" y="143.50"></text></g><g><title>layout_of (1,098,731 samples, 0.39%)</title><rect x="44.4330%" y="149" width="0.3870%" height="15" fill="rgb(244,218,35)"/><text x="44.6830%" y="159.50"></text></g><g><title>predicates_of (726,540 samples, 0.26%)</title><rect x="45.2815%" y="133" width="0.2559%" height="15" fill="rgb(240,68,47)"/><text x="45.5315%" y="143.50"></text></g><g><title>predicates_defined_on (546,366 samples, 0.19%)</title><rect x="45.3450%" y="117" width="0.1925%" height="15" fill="rgb(210,16,53)"/><text x="45.5950%" y="127.50"></text></g><g><title>param_env (2,045,512 samples, 0.72%)</title><rect x="44.8201%" y="149" width="0.7206%" height="15" fill="rgb(235,124,12)"/><text x="45.0701%" y="159.50"></text></g><g><title>fn_abi_of_instance (4,729,008 samples, 1.67%)</title><rect x="43.9451%" y="165" width="1.6659%" height="15" fill="rgb(224,169,11)"/><text x="44.1951%" y="175.50"></text></g><g><title>layout_of (539,215 samples, 0.19%)</title><rect x="45.7178%" y="165" width="0.1899%" height="15" fill="rgb(250,166,2)"/><text x="45.9678%" y="175.50"></text></g><g><title>codegen_module (31,077,729 samples, 10.95%)</title><rect x="35.0088%" y="181" width="10.9477%" height="15" fill="rgb(242,216,29)"/><text x="35.2588%" y="191.50">codegen_module</text></g><g><title>codegen_crate (33,126,469 samples, 11.67%)</title><rect x="34.3147%" y="197" width="11.6694%" height="15" fill="rgb(230,116,27)"/><text x="34.5647%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (92,363,072 samples, 32.54%)</title><rect x="46.0387%" y="181" width="32.5366%" height="15" fill="rgb(228,99,48)"/><text x="46.2887%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (87,852,406 samples, 30.95%)</title><rect x="47.6277%" y="165" width="30.9477%" height="15" fill="rgb(253,11,6)"/><text x="47.8777%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (99,253,345 samples, 34.96%)</title><rect x="45.9841%" y="197" width="34.9639%" height="15" fill="rgb(247,143,39)"/><text x="46.2341%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,735,270 samples, 2.37%)</title><rect x="78.5754%" y="181" width="2.3726%" height="15" fill="rgb(236,97,10)"/><text x="78.8254%" y="191.50">LL..</text></g><g><title>AST_validation (317,553 samples, 0.11%)</title><rect x="81.0250%" y="181" width="0.1119%" height="15" fill="rgb(233,208,19)"/><text x="81.2750%" y="191.50"></text></g><g><title>metadata_register_crate (2,647,227 samples, 0.93%)</title><rect x="88.3238%" y="149" width="0.9325%" height="15" fill="rgb(216,164,2)"/><text x="88.5738%" y="159.50"></text></g><g><title>metadata_register_crate (962,989 samples, 0.34%)</title><rect x="88.9171%" y="133" width="0.3392%" height="15" fill="rgb(220,129,5)"/><text x="89.1671%" y="143.50"></text></g><g><title>macro_expand_crate (23,176,944 samples, 8.16%)</title><rect x="81.2041%" y="181" width="8.1645%" height="15" fill="rgb(242,17,10)"/><text x="81.4541%" y="191.50">macro_expan..</text></g><g><title>expand_crate (23,149,654 samples, 8.15%)</title><rect x="81.2137%" y="165" width="8.1549%" height="15" fill="rgb(242,107,0)"/><text x="81.4637%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (318,804 samples, 0.11%)</title><rect x="89.2563%" y="149" width="0.1123%" height="15" fill="rgb(251,28,31)"/><text x="89.5063%" y="159.50"></text></g><g><title>late_resolve_crate (2,309,614 samples, 0.81%)</title><rect x="89.4893%" y="165" width="0.8136%" height="15" fill="rgb(233,223,10)"/><text x="89.7393%" y="175.50"></text></g><g><title>configure_and_expand (26,700,281 samples, 9.41%)</title><rect x="80.9480%" y="197" width="9.4057%" height="15" fill="rgb(215,21,27)"/><text x="81.1980%" y="207.50">configure_and..</text></g><g><title>resolve_crate (2,669,008 samples, 0.94%)</title><rect x="89.4135%" y="181" width="0.9402%" height="15" fill="rgb(232,23,21)"/><text x="89.6635%" y="191.50"></text></g><g><title>free_global_ctxt (4,082,903 samples, 1.44%)</title><rect x="90.5001%" y="197" width="1.4383%" height="15" fill="rgb(244,5,23)"/><text x="90.7501%" y="207.50"></text></g><g><title>item_attrs (565,856 samples, 0.20%)</title><rect x="92.8030%" y="101" width="0.1993%" height="15" fill="rgb(226,81,46)"/><text x="93.0530%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (544,236 samples, 0.19%)</title><rect x="92.8106%" y="85" width="0.1917%" height="15" fill="rgb(247,70,30)"/><text x="93.0606%" y="95.50"></text></g><g><title>codegen_fn_attrs (890,229 samples, 0.31%)</title><rect x="92.7526%" y="117" width="0.3136%" height="15" fill="rgb(212,68,19)"/><text x="93.0026%" y="127.50"></text></g><g><title>mir_shims (314,843 samples, 0.11%)</title><rect x="93.1299%" y="117" width="0.1109%" height="15" fill="rgb(240,187,13)"/><text x="93.3799%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (801,977 samples, 0.28%)</title><rect x="93.5581%" y="101" width="0.2825%" height="15" fill="rgb(223,113,26)"/><text x="93.8081%" y="111.50"></text></g><g><title>optimized_mir (2,092,232 samples, 0.74%)</title><rect x="93.2408%" y="117" width="0.7370%" height="15" fill="rgb(206,192,2)"/><text x="93.4908%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (389,424 samples, 0.14%)</title><rect x="93.8406%" y="101" width="0.1372%" height="15" fill="rgb(241,108,4)"/><text x="94.0906%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (643,476 samples, 0.23%)</title><rect x="94.0745%" y="101" width="0.2267%" height="15" fill="rgb(247,173,49)"/><text x="94.3245%" y="111.50"></text></g><g><title>specialization_graph_of (520,295 samples, 0.18%)</title><rect x="94.3933%" y="101" width="0.1833%" height="15" fill="rgb(224,114,35)"/><text x="94.6433%" y="111.50"></text></g><g><title>resolve_instance (1,906,207 samples, 0.67%)</title><rect x="93.9778%" y="117" width="0.6715%" height="15" fill="rgb(245,159,27)"/><text x="94.2278%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (6,554,979 samples, 2.31%)</title><rect x="92.4891%" y="133" width="2.3091%" height="15" fill="rgb(245,172,44)"/><text x="92.7391%" y="143.50">m..</text></g><g><title>monomorphization_collector (6,596,649 samples, 2.32%)</title><rect x="92.4879%" y="149" width="2.3238%" height="15" fill="rgb(236,23,11)"/><text x="92.7379%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (806,289 samples, 0.28%)</title><rect x="94.8132%" y="133" width="0.2840%" height="15" fill="rgb(205,117,38)"/><text x="95.0632%" y="143.50"></text></g><g><title>symbol_name (727,658 samples, 0.26%)</title><rect x="94.8409%" y="117" width="0.2563%" height="15" fill="rgb(237,72,25)"/><text x="95.0909%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (7,860,793 samples, 2.77%)</title><rect x="92.4718%" y="165" width="2.7691%" height="15" fill="rgb(244,70,9)"/><text x="92.7218%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,218,273 samples, 0.43%)</title><rect x="94.8117%" y="149" width="0.4292%" height="15" fill="rgb(217,125,39)"/><text x="95.0617%" y="159.50"></text></g><g><title>cgu_partitioning (407,724 samples, 0.14%)</title><rect x="95.0972%" y="133" width="0.1436%" height="15" fill="rgb(235,36,10)"/><text x="95.3472%" y="143.50"></text></g><g><title>exported_symbols (7,995,294 samples, 2.82%)</title><rect x="92.4541%" y="181" width="2.8165%" height="15" fill="rgb(251,123,47)"/><text x="92.7041%" y="191.50">ex..</text></g><g><title>layout_of (748,075 samples, 0.26%)</title><rect x="96.0237%" y="165" width="0.2635%" height="15" fill="rgb(221,13,13)"/><text x="96.2737%" y="175.50"></text></g><g><title>needs_drop_raw (348,743 samples, 0.12%)</title><rect x="96.9957%" y="149" width="0.1229%" height="15" fill="rgb(238,131,9)"/><text x="97.2457%" y="159.50"></text></g><g><title>is_copy_raw (306,623 samples, 0.11%)</title><rect x="97.0105%" y="133" width="0.1080%" height="15" fill="rgb(211,50,8)"/><text x="97.2605%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,391,719 samples, 0.84%)</title><rect x="96.2872%" y="165" width="0.8425%" height="15" fill="rgb(245,182,24)"/><text x="96.5372%" y="175.50"></text></g><g><title>optimized_mir (5,209,078 samples, 1.83%)</title><rect x="95.3028%" y="181" width="1.8350%" height="15" fill="rgb(242,14,37)"/><text x="95.5528%" y="191.50">o..</text></g><g><title>generate_crate_metadata (14,842,426 samples, 5.23%)</title><rect x="91.9384%" y="197" width="5.2285%" height="15" fill="rgb(246,228,12)"/><text x="92.1884%" y="207.50">genera..</text></g><g><title>hir_lowering (3,082,483 samples, 1.09%)</title><rect x="97.1669%" y="197" width="1.0859%" height="15" fill="rgb(213,55,15)"/><text x="97.4169%" y="207.50"></text></g><g><title>finish_ongoing_codegen (671,767 samples, 0.24%)</title><rect x="98.2579%" y="181" width="0.2366%" height="15" fill="rgb(209,9,3)"/><text x="98.5079%" y="191.50"></text></g><g><title>link_crate (1,475,265 samples, 0.52%)</title><rect x="98.4945%" y="181" width="0.5197%" height="15" fill="rgb(230,59,30)"/><text x="98.7445%" y="191.50"></text></g><g><title>link_binary (1,455,855 samples, 0.51%)</title><rect x="98.5014%" y="165" width="0.5129%" height="15" fill="rgb(209,121,21)"/><text x="98.7514%" y="175.50"></text></g><g><title>link_rlib (973,411 samples, 0.34%)</title><rect x="98.6713%" y="149" width="0.3429%" height="15" fill="rgb(220,109,13)"/><text x="98.9213%" y="159.50"></text></g><g><title>link (2,171,342 samples, 0.76%)</title><rect x="98.2528%" y="197" width="0.7649%" height="15" fill="rgb(232,18,1)"/><text x="98.5028%" y="207.50"></text></g><g><title>parse_crate (793,668 samples, 0.28%)</title><rect x="99.0177%" y="197" width="0.2796%" height="15" fill="rgb(215,41,42)"/><text x="99.2677%" y="207.50"></text></g><g><title>prepare_outputs (291,683 samples, 0.10%)</title><rect x="99.3007%" y="197" width="0.1028%" height="15" fill="rgb(224,123,36)"/><text x="99.5507%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,290,054 samples, 0.45%)</title><rect x="99.4034%" y="197" width="0.4544%" height="15" fill="rgb(240,125,3)"/><text x="99.6534%" y="207.50"></text></g><g><title>all (283,873,963 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (283,873,963 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (315,754 samples, 0.11%)</title><rect x="99.8888%" y="197" width="0.1112%" height="15" fill="rgb(238,207,15)"/><text x="100.1388%" y="207.50"></text></g></svg></svg>