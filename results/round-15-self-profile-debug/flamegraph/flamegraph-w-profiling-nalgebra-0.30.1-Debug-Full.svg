<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (56,142,714 samples, 0.21%)</title><rect x="5.0862%" y="133" width="0.2105%" height="15" fill="rgb(227,0,7)"/><text x="5.3362%" y="143.50"></text></g><g><title>mir_promoted (89,288,706 samples, 0.33%)</title><rect x="5.8489%" y="117" width="0.3348%" height="15" fill="rgb(217,0,24)"/><text x="6.0989%" y="127.50"></text></g><g><title>mir_const_qualif_const_arg (74,762,655 samples, 0.28%)</title><rect x="5.9033%" y="101" width="0.2804%" height="15" fill="rgb(221,193,54)"/><text x="6.1533%" y="111.50"></text></g><g><title>mir_const (62,720,874 samples, 0.24%)</title><rect x="5.9485%" y="85" width="0.2352%" height="15" fill="rgb(248,212,6)"/><text x="6.1985%" y="95.50"></text></g><g><title>unsafety_check_result_for_const_arg (42,683,384 samples, 0.16%)</title><rect x="6.0236%" y="69" width="0.1601%" height="15" fill="rgb(208,68,35)"/><text x="6.2736%" y="79.50"></text></g><g><title>mir_built (36,952,925 samples, 0.14%)</title><rect x="6.0451%" y="53" width="0.1386%" height="15" fill="rgb(232,128,0)"/><text x="6.2951%" y="63.50"></text></g><g><title>mir_borrowck_const_arg (224,320,111 samples, 0.84%)</title><rect x="5.3452%" y="133" width="0.8412%" height="15" fill="rgb(207,160,47)"/><text x="5.5952%" y="143.50"></text></g><g><title>is_copy_raw (100,734,397 samples, 0.38%)</title><rect x="7.7311%" y="53" width="0.3778%" height="15" fill="rgb(228,23,34)"/><text x="7.9811%" y="63.50"></text></g><g><title>evaluate_obligation (76,002,804 samples, 0.29%)</title><rect x="7.8238%" y="37" width="0.2850%" height="15" fill="rgb(218,30,26)"/><text x="8.0738%" y="47.50"></text></g><g><title>needs_drop_raw (119,880,622 samples, 0.45%)</title><rect x="7.6892%" y="69" width="0.4496%" height="15" fill="rgb(220,122,19)"/><text x="7.9392%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (192,667,453 samples, 0.72%)</title><rect x="8.2121%" y="53" width="0.7225%" height="15" fill="rgb(250,228,42)"/><text x="8.4621%" y="63.50"></text></g><g><title>resolve_instance (222,327,825 samples, 0.83%)</title><rect x="8.1390%" y="69" width="0.8338%" height="15" fill="rgb(240,193,28)"/><text x="8.3890%" y="79.50"></text></g><g><title>thir_body (73,026,545 samples, 0.27%)</title><rect x="8.9792%" y="69" width="0.2739%" height="15" fill="rgb(216,20,37)"/><text x="9.2292%" y="79.50"></text></g><g><title>mir_const (785,641,745 samples, 2.95%)</title><rect x="6.3837%" y="117" width="2.9462%" height="15" fill="rgb(206,188,39)"/><text x="6.6337%" y="127.50">mi..</text></g><g><title>unsafety_check_result (728,154,607 samples, 2.73%)</title><rect x="6.5992%" y="101" width="2.7307%" height="15" fill="rgb(217,207,13)"/><text x="6.8492%" y="111.50">un..</text></g><g><title>mir_built (691,676,086 samples, 2.59%)</title><rect x="6.7360%" y="85" width="2.5939%" height="15" fill="rgb(231,73,38)"/><text x="6.9860%" y="95.50">mi..</text></g><g><title>mir_const_qualif (36,152,598 samples, 0.14%)</title><rect x="9.3299%" y="117" width="0.1356%" height="15" fill="rgb(225,20,46)"/><text x="9.5799%" y="127.50"></text></g><g><title>mir_promoted (874,398,118 samples, 3.28%)</title><rect x="6.1864%" y="133" width="3.2791%" height="15" fill="rgb(210,31,41)"/><text x="6.4364%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (99,224,962 samples, 0.37%)</title><rect x="9.4661%" y="133" width="0.3721%" height="15" fill="rgb(221,200,47)"/><text x="9.7161%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (126,036,881 samples, 0.47%)</title><rect x="9.8382%" y="133" width="0.4727%" height="15" fill="rgb(226,26,5)"/><text x="10.0882%" y="143.50"></text></g><g><title>normalize_projection_ty (62,537,802 samples, 0.23%)</title><rect x="10.0763%" y="117" width="0.2345%" height="15" fill="rgb(249,33,26)"/><text x="10.3263%" y="127.50"></text></g><g><title>type_op_normalize_predicate (41,845,814 samples, 0.16%)</title><rect x="10.3109%" y="133" width="0.1569%" height="15" fill="rgb(235,183,28)"/><text x="10.5609%" y="143.50"></text></g><g><title>type_op_normalize_ty (94,865,026 samples, 0.36%)</title><rect x="10.4678%" y="133" width="0.3558%" height="15" fill="rgb(221,5,38)"/><text x="10.7178%" y="143.50"></text></g><g><title>normalize_projection_ty (40,745,302 samples, 0.15%)</title><rect x="10.6708%" y="117" width="0.1528%" height="15" fill="rgb(247,18,42)"/><text x="10.9208%" y="127.50"></text></g><g><title>type_op_prove_predicate (379,987,006 samples, 1.42%)</title><rect x="10.8236%" y="133" width="1.4250%" height="15" fill="rgb(241,131,45)"/><text x="11.0736%" y="143.50"></text></g><g><title>MIR_borrow_checking (3,238,258,775 samples, 12.14%)</title><rect x="0.1050%" y="165" width="12.1438%" height="15" fill="rgb(249,31,29)"/><text x="0.3550%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (3,222,309,010 samples, 12.08%)</title><rect x="0.1649%" y="149" width="12.0840%" height="15" fill="rgb(225,111,53)"/><text x="0.4149%" y="159.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (35,867,797 samples, 0.13%)</title><rect x="12.3552%" y="133" width="0.1345%" height="15" fill="rgb(238,160,17)"/><text x="12.6052%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (53,704,016 samples, 0.20%)</title><rect x="12.2939%" y="149" width="0.2014%" height="15" fill="rgb(214,148,48)"/><text x="12.5439%" y="159.50"></text></g><g><title>MIR_effect_checking (67,504,435 samples, 0.25%)</title><rect x="12.2489%" y="165" width="0.2531%" height="15" fill="rgb(232,36,49)"/><text x="12.4989%" y="175.50"></text></g><g><title>check_mod_attrs (31,251,127 samples, 0.12%)</title><rect x="12.5559%" y="149" width="0.1172%" height="15" fill="rgb(209,103,24)"/><text x="12.8059%" y="159.50"></text></g><g><title>misc_checking_1 (79,310,906 samples, 0.30%)</title><rect x="12.5547%" y="165" width="0.2974%" height="15" fill="rgb(229,88,8)"/><text x="12.8047%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (40,899,136 samples, 0.15%)</title><rect x="12.8522%" y="149" width="0.1534%" height="15" fill="rgb(213,181,19)"/><text x="13.1022%" y="159.50"></text></g><g><title>check_mod_liveness (34,061,980 samples, 0.13%)</title><rect x="12.8778%" y="133" width="0.1277%" height="15" fill="rgb(254,191,54)"/><text x="13.1278%" y="143.50"></text></g><g><title>misc_checking_2 (83,570,599 samples, 0.31%)</title><rect x="12.8521%" y="165" width="0.3134%" height="15" fill="rgb(241,83,37)"/><text x="13.1021%" y="175.50"></text></g><g><title>match_checking (42,666,983 samples, 0.16%)</title><rect x="13.0055%" y="149" width="0.1600%" height="15" fill="rgb(233,36,39)"/><text x="13.2555%" y="159.50"></text></g><g><title>check_match (36,790,192 samples, 0.14%)</title><rect x="13.0276%" y="133" width="0.1380%" height="15" fill="rgb(226,3,54)"/><text x="13.2776%" y="143.50"></text></g><g><title>check_private_in_public (32,089,605 samples, 0.12%)</title><rect x="13.1657%" y="149" width="0.1203%" height="15" fill="rgb(245,192,40)"/><text x="13.4157%" y="159.50"></text></g><g><title>death_checking (38,723,083 samples, 0.15%)</title><rect x="13.2860%" y="149" width="0.1452%" height="15" fill="rgb(238,167,29)"/><text x="13.5360%" y="159.50"></text></g><g><title>crate_lints (50,342,051 samples, 0.19%)</title><rect x="13.4312%" y="133" width="0.1888%" height="15" fill="rgb(232,182,51)"/><text x="13.6812%" y="143.50"></text></g><g><title>lint_checking (89,820,791 samples, 0.34%)</title><rect x="13.4312%" y="149" width="0.3368%" height="15" fill="rgb(231,60,39)"/><text x="13.6812%" y="159.50"></text></g><g><title>module_lints (39,474,400 samples, 0.15%)</title><rect x="13.6200%" y="133" width="0.1480%" height="15" fill="rgb(208,69,12)"/><text x="13.8700%" y="143.50"></text></g><g><title>lint_mod (39,359,979 samples, 0.15%)</title><rect x="13.6204%" y="117" width="0.1476%" height="15" fill="rgb(235,93,37)"/><text x="13.8704%" y="127.50"></text></g><g><title>privacy_access_levels (39,830,064 samples, 0.15%)</title><rect x="13.7680%" y="149" width="0.1494%" height="15" fill="rgb(213,116,39)"/><text x="14.0180%" y="159.50"></text></g><g><title>privacy_checking_modules (118,430,152 samples, 0.44%)</title><rect x="13.9174%" y="149" width="0.4441%" height="15" fill="rgb(222,207,29)"/><text x="14.1674%" y="159.50"></text></g><g><title>check_mod_privacy (118,294,080 samples, 0.44%)</title><rect x="13.9179%" y="133" width="0.4436%" height="15" fill="rgb(206,96,30)"/><text x="14.1679%" y="143.50"></text></g><g><title>misc_checking_3 (319,701,664 samples, 1.20%)</title><rect x="13.1655%" y="165" width="1.1989%" height="15" fill="rgb(218,138,4)"/><text x="13.4155%" y="175.50"></text></g><g><title>eval_to_const_value_raw (81,334,933 samples, 0.31%)</title><rect x="63.5247%" y="101" width="0.3050%" height="15" fill="rgb(250,191,14)"/><text x="63.7747%" y="111.50"></text></g><g><title>eval_to_const_value_raw (81,072,981 samples, 0.30%)</title><rect x="63.5257%" y="85" width="0.3040%" height="15" fill="rgb(239,60,40)"/><text x="63.7757%" y="95.50"></text></g><g><title>eval_to_allocation_raw (80,691,198 samples, 0.30%)</title><rect x="63.5271%" y="69" width="0.3026%" height="15" fill="rgb(206,27,48)"/><text x="63.7771%" y="79.50"></text></g><g><title>typeck_const_arg (31,491,268 samples, 0.12%)</title><rect x="63.7117%" y="53" width="0.1181%" height="15" fill="rgb(225,35,8)"/><text x="63.9617%" y="63.50"></text></g><g><title>coherent_trait (13,210,298,617 samples, 49.54%)</title><rect x="14.3999%" y="133" width="49.5400%" height="15" fill="rgb(250,213,24)"/><text x="14.6499%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (13,201,119,343 samples, 49.51%)</title><rect x="14.4343%" y="117" width="49.5056%" height="15" fill="rgb(247,123,22)"/><text x="14.6843%" y="127.50">specialization_graph_of</text></g><g><title>coherence_checking (13,221,484,699 samples, 49.58%)</title><rect x="14.3993%" y="149" width="49.5820%" height="15" fill="rgb(231,138,38)"/><text x="14.6493%" y="159.50">coherence_checking</text></g><g><title>dropck_outlives (190,174,217 samples, 0.71%)</title><rect x="74.1674%" y="101" width="0.7132%" height="15" fill="rgb(231,145,46)"/><text x="74.4174%" y="111.50"></text></g><g><title>normalize_projection_ty (145,680,958 samples, 0.55%)</title><rect x="74.3343%" y="85" width="0.5463%" height="15" fill="rgb(251,118,11)"/><text x="74.5843%" y="95.50"></text></g><g><title>evaluate_obligation (475,406,704 samples, 1.78%)</title><rect x="74.8806%" y="101" width="1.7828%" height="15" fill="rgb(217,147,25)"/><text x="75.1306%" y="111.50">e..</text></g><g><title>evaluate_obligation (299,870,309 samples, 1.12%)</title><rect x="76.9144%" y="85" width="1.1245%" height="15" fill="rgb(247,81,37)"/><text x="77.1644%" y="95.50"></text></g><g><title>method_autoderef_steps (359,824,769 samples, 1.35%)</title><rect x="76.6897%" y="101" width="1.3494%" height="15" fill="rgb(209,12,38)"/><text x="76.9397%" y="111.50"></text></g><g><title>dropck_outlives (78,800,596 samples, 0.30%)</title><rect x="79.2102%" y="69" width="0.2955%" height="15" fill="rgb(227,1,9)"/><text x="79.4602%" y="79.50"></text></g><g><title>normalize_projection_ty (67,179,143 samples, 0.25%)</title><rect x="79.2538%" y="53" width="0.2519%" height="15" fill="rgb(248,47,43)"/><text x="79.5038%" y="63.50"></text></g><g><title>evaluate_obligation (37,236,375 samples, 0.14%)</title><rect x="79.5058%" y="69" width="0.1396%" height="15" fill="rgb(221,10,30)"/><text x="79.7558%" y="79.50"></text></g><g><title>method_autoderef_steps (70,686,609 samples, 0.27%)</title><rect x="79.6502%" y="69" width="0.2651%" height="15" fill="rgb(210,229,1)"/><text x="79.9002%" y="79.50"></text></g><g><title>evaluate_obligation (65,197,611 samples, 0.24%)</title><rect x="79.6707%" y="53" width="0.2445%" height="15" fill="rgb(222,148,37)"/><text x="79.9207%" y="63.50"></text></g><g><title>opt_const_param_of (500,210,171 samples, 1.88%)</title><rect x="78.0404%" y="101" width="1.8758%" height="15" fill="rgb(234,67,33)"/><text x="78.2904%" y="111.50">o..</text></g><g><title>typeck (496,618,875 samples, 1.86%)</title><rect x="78.0539%" y="85" width="1.8624%" height="15" fill="rgb(247,98,35)"/><text x="78.3039%" y="95.50">t..</text></g><g><title>evaluate_obligation (37,484,708 samples, 0.14%)</title><rect x="81.0851%" y="85" width="0.1406%" height="15" fill="rgb(247,138,52)"/><text x="81.3351%" y="95.50"></text></g><g><title>method_autoderef_steps (82,738,923 samples, 0.31%)</title><rect x="81.2614%" y="85" width="0.3103%" height="15" fill="rgb(213,79,30)"/><text x="81.5114%" y="95.50"></text></g><g><title>evaluate_obligation (67,792,309 samples, 0.25%)</title><rect x="81.3174%" y="69" width="0.2542%" height="15" fill="rgb(246,177,23)"/><text x="81.5674%" y="79.50"></text></g><g><title>typeck (428,655,020 samples, 1.61%)</title><rect x="79.9697%" y="101" width="1.6075%" height="15" fill="rgb(230,62,27)"/><text x="80.2197%" y="111.50"></text></g><g><title>param_env (37,712,851 samples, 0.14%)</title><rect x="81.8457%" y="85" width="0.1414%" height="15" fill="rgb(216,154,8)"/><text x="82.0957%" y="95.50"></text></g><g><title>typeck_const_arg (118,406,577 samples, 0.44%)</title><rect x="81.5772%" y="101" width="0.4440%" height="15" fill="rgb(244,35,45)"/><text x="81.8272%" y="111.50"></text></g><g><title>item_bodies_checking (4,807,227,284 samples, 18.03%)</title><rect x="63.9998%" y="149" width="18.0276%" height="15" fill="rgb(251,115,12)"/><text x="64.2498%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (4,807,220,794 samples, 18.03%)</title><rect x="63.9998%" y="133" width="18.0276%" height="15" fill="rgb(240,54,50)"/><text x="64.2498%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (4,791,453,609 samples, 17.97%)</title><rect x="64.0589%" y="117" width="17.9685%" height="15" fill="rgb(233,84,52)"/><text x="64.3089%" y="127.50">typeck</text></g><g><title>item_types_checking (493,338,615 samples, 1.85%)</title><rect x="82.0274%" y="149" width="1.8501%" height="15" fill="rgb(207,117,47)"/><text x="82.2774%" y="159.50">i..</text></g><g><title>check_mod_item_types (493,220,395 samples, 1.85%)</title><rect x="82.0278%" y="133" width="1.8496%" height="15" fill="rgb(249,43,39)"/><text x="82.2778%" y="143.50">c..</text></g><g><title>generics_of (44,418,920 samples, 0.17%)</title><rect x="84.0271%" y="117" width="0.1666%" height="15" fill="rgb(209,38,44)"/><text x="84.2771%" y="127.50"></text></g><g><title>explicit_predicates_of (75,141,890 samples, 0.28%)</title><rect x="84.2632%" y="85" width="0.2818%" height="15" fill="rgb(236,212,23)"/><text x="84.5132%" y="95.50"></text></g><g><title>predicates_of (93,049,065 samples, 0.35%)</title><rect x="84.2198%" y="117" width="0.3489%" height="15" fill="rgb(242,79,21)"/><text x="84.4698%" y="127.50"></text></g><g><title>predicates_defined_on (88,427,313 samples, 0.33%)</title><rect x="84.2372%" y="101" width="0.3316%" height="15" fill="rgb(211,96,35)"/><text x="84.4872%" y="111.50"></text></g><g><title>type_collecting (200,337,082 samples, 0.75%)</title><rect x="83.8781%" y="149" width="0.7513%" height="15" fill="rgb(253,215,40)"/><text x="84.1281%" y="159.50"></text></g><g><title>collect_mod_item_types (200,198,992 samples, 0.75%)</title><rect x="83.8786%" y="133" width="0.7508%" height="15" fill="rgb(211,81,21)"/><text x="84.1286%" y="143.50"></text></g><g><title>eval_to_const_value_raw (26,935,361 samples, 0.10%)</title><rect x="86.6981%" y="117" width="0.1010%" height="15" fill="rgb(208,190,38)"/><text x="86.9481%" y="127.50"></text></g><g><title>eval_to_const_value_raw (26,766,809 samples, 0.10%)</title><rect x="86.6987%" y="101" width="0.1004%" height="15" fill="rgb(235,213,38)"/><text x="86.9487%" y="111.50"></text></g><g><title>evaluate_obligation (31,408,990 samples, 0.12%)</title><rect x="86.7991%" y="117" width="0.1178%" height="15" fill="rgb(237,122,38)"/><text x="87.0491%" y="127.50"></text></g><g><title>implied_outlives_bounds (198,188,475 samples, 0.74%)</title><rect x="86.9256%" y="117" width="0.7432%" height="15" fill="rgb(244,218,35)"/><text x="87.1756%" y="127.50"></text></g><g><title>param_env (174,848,521 samples, 0.66%)</title><rect x="87.6693%" y="117" width="0.6557%" height="15" fill="rgb(240,68,47)"/><text x="87.9193%" y="127.50"></text></g><g><title>region_scope_tree (27,951,233 samples, 0.10%)</title><rect x="88.3274%" y="117" width="0.1048%" height="15" fill="rgb(210,16,53)"/><text x="88.5774%" y="127.50"></text></g><g><title>check_impl_item_well_formed (991,194,319 samples, 3.72%)</title><rect x="84.7178%" y="133" width="3.7171%" height="15" fill="rgb(235,124,12)"/><text x="84.9678%" y="143.50">chec..</text></g><g><title>evaluate_obligation (64,076,450 samples, 0.24%)</title><rect x="90.8187%" y="117" width="0.2403%" height="15" fill="rgb(224,169,11)"/><text x="91.0687%" y="127.50"></text></g><g><title>implied_outlives_bounds (200,684,746 samples, 0.75%)</title><rect x="91.0667%" y="117" width="0.7526%" height="15" fill="rgb(250,166,2)"/><text x="91.3167%" y="127.50"></text></g><g><title>param_env (186,013,120 samples, 0.70%)</title><rect x="91.8208%" y="117" width="0.6976%" height="15" fill="rgb(242,216,29)"/><text x="92.0708%" y="127.50"></text></g><g><title>check_item_well_formed (1,102,086,394 samples, 4.13%)</title><rect x="88.4349%" y="133" width="4.1329%" height="15" fill="rgb(230,116,27)"/><text x="88.6849%" y="143.50">check..</text></g><g><title>analysis (24,685,279,461 samples, 92.57%)</title><rect x="0.0416%" y="181" width="92.5725%" height="15" fill="rgb(228,99,48)"/><text x="0.2916%" y="191.50">analysis</text></g><g><title>type_check_crate (20,865,963,849 samples, 78.25%)</title><rect x="14.3645%" y="165" width="78.2496%" height="15" fill="rgb(253,11,6)"/><text x="14.6145%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,127,983,811 samples, 7.98%)</title><rect x="84.6339%" y="149" width="7.9802%" height="15" fill="rgb(247,143,39)"/><text x="84.8839%" y="159.50">wf_checking</text></g><g><title>macro_expand_crate (433,309,586 samples, 1.62%)</title><rect x="92.8211%" y="165" width="1.6250%" height="15" fill="rgb(236,97,10)"/><text x="93.0711%" y="175.50"></text></g><g><title>expand_crate (433,293,176 samples, 1.62%)</title><rect x="92.8211%" y="149" width="1.6249%" height="15" fill="rgb(233,208,19)"/><text x="93.0711%" y="159.50"></text></g><g><title>late_resolve_crate (108,585,251 samples, 0.41%)</title><rect x="94.4690%" y="149" width="0.4072%" height="15" fill="rgb(216,164,2)"/><text x="94.7190%" y="159.50"></text></g><g><title>configure_and_expand (592,238,968 samples, 2.22%)</title><rect x="92.7246%" y="181" width="2.2210%" height="15" fill="rgb(220,129,5)"/><text x="92.9746%" y="191.50">c..</text></g><g><title>resolve_crate (133,086,710 samples, 0.50%)</title><rect x="94.4465%" y="165" width="0.4991%" height="15" fill="rgb(242,17,10)"/><text x="94.6965%" y="175.50"></text></g><g><title>drop_ast (31,485,679 samples, 0.12%)</title><rect x="94.9456%" y="181" width="0.1181%" height="15" fill="rgb(242,107,0)"/><text x="95.1956%" y="191.50"></text></g><g><title>early_lint_checks (28,379,328 samples, 0.11%)</title><rect x="95.0638%" y="181" width="0.1064%" height="15" fill="rgb(251,28,31)"/><text x="95.3138%" y="191.50"></text></g><g><title>free_global_ctxt (64,114,000 samples, 0.24%)</title><rect x="95.1703%" y="181" width="0.2404%" height="15" fill="rgb(233,223,10)"/><text x="95.4203%" y="191.50"></text></g><g><title>layout_of (83,234,335 samples, 0.31%)</title><rect x="96.9669%" y="149" width="0.3121%" height="15" fill="rgb(215,21,27)"/><text x="97.2169%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (35,274,093 samples, 0.13%)</title><rect x="97.1468%" y="133" width="0.1323%" height="15" fill="rgb(232,23,21)"/><text x="97.3968%" y="143.50"></text></g><g><title>is_copy_raw (86,651,994 samples, 0.32%)</title><rect x="98.2645%" y="117" width="0.3250%" height="15" fill="rgb(244,5,23)"/><text x="98.5145%" y="127.50"></text></g><g><title>evaluate_obligation (72,155,219 samples, 0.27%)</title><rect x="98.3188%" y="101" width="0.2706%" height="15" fill="rgb(226,81,46)"/><text x="98.5688%" y="111.50"></text></g><g><title>needs_drop_raw (97,830,834 samples, 0.37%)</title><rect x="98.2425%" y="133" width="0.3669%" height="15" fill="rgb(247,70,30)"/><text x="98.4925%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (396,864,097 samples, 1.49%)</title><rect x="97.2791%" y="149" width="1.4883%" height="15" fill="rgb(212,68,19)"/><text x="97.5291%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (37,977,383 samples, 0.14%)</title><rect x="98.6250%" y="133" width="0.1424%" height="15" fill="rgb(240,187,13)"/><text x="98.8750%" y="143.50"></text></g><g><title>normalize_projection_ty (33,452,110 samples, 0.13%)</title><rect x="98.6419%" y="117" width="0.1254%" height="15" fill="rgb(223,113,26)"/><text x="98.8919%" y="127.50"></text></g><g><title>optimized_mir (694,350,081 samples, 2.60%)</title><rect x="96.1664%" y="165" width="2.6039%" height="15" fill="rgb(206,192,2)"/><text x="96.4164%" y="175.50">op..</text></g><g><title>generate_crate_metadata (909,903,222 samples, 3.41%)</title><rect x="95.4107%" y="181" width="3.4122%" height="15" fill="rgb(241,108,4)"/><text x="95.6607%" y="191.50">gen..</text></g><g><title>hir_lowering (258,456,022 samples, 0.97%)</title><rect x="98.8229%" y="181" width="0.9692%" height="15" fill="rgb(247,173,49)"/><text x="99.0729%" y="191.50"></text></g><g><title>all (26,665,896,934 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (26,665,896,934 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>