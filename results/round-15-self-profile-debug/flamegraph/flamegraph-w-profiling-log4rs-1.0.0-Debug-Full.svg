<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,503,404,135 samples, 16.55%)</title><rect x="0.0294%" y="181" width="16.5483%" height="15" fill="rgb(227,0,7)"/><text x="0.2794%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (12,095,591 samples, 0.13%)</title><rect x="19.2006%" y="53" width="0.1331%" height="15" fill="rgb(217,0,24)"/><text x="19.4506%" y="63.50"></text></g><g><title>evaluate_obligation (9,618,808 samples, 0.11%)</title><rect x="19.2279%" y="37" width="0.1059%" height="15" fill="rgb(221,193,54)"/><text x="19.4779%" y="47.50"></text></g><g><title>needs_drop_raw (16,400,507 samples, 0.18%)</title><rect x="19.1540%" y="69" width="0.1805%" height="15" fill="rgb(248,212,6)"/><text x="19.4040%" y="79.50"></text></g><g><title>thir_body (13,531,948 samples, 0.15%)</title><rect x="19.4323%" y="69" width="0.1489%" height="15" fill="rgb(208,68,35)"/><text x="19.6823%" y="79.50"></text></g><g><title>mir_const (95,793,668 samples, 1.05%)</title><rect x="18.5353%" y="117" width="1.0544%" height="15" fill="rgb(232,128,0)"/><text x="18.7853%" y="127.50"></text></g><g><title>unsafety_check_result (84,098,979 samples, 0.93%)</title><rect x="18.6640%" y="101" width="0.9257%" height="15" fill="rgb(207,160,47)"/><text x="18.9140%" y="111.50"></text></g><g><title>mir_built (76,321,458 samples, 0.84%)</title><rect x="18.7496%" y="85" width="0.8401%" height="15" fill="rgb(228,23,34)"/><text x="18.9996%" y="95.50"></text></g><g><title>mir_promoted (107,242,652 samples, 1.18%)</title><rect x="18.4266%" y="133" width="1.1804%" height="15" fill="rgb(218,30,26)"/><text x="18.6766%" y="143.50"></text></g><g><title>type_op_prove_predicate (27,657,823 samples, 0.30%)</title><rect x="19.7967%" y="133" width="0.3044%" height="15" fill="rgb(220,122,19)"/><text x="20.0467%" y="143.50"></text></g><g><title>MIR_borrow_checking (317,358,137 samples, 3.49%)</title><rect x="16.6084%" y="165" width="3.4932%" height="15" fill="rgb(250,228,42)"/><text x="16.8584%" y="175.50">MIR..</text></g><g><title>mir_borrowck (315,204,740 samples, 3.47%)</title><rect x="16.6321%" y="149" width="3.4695%" height="15" fill="rgb(240,193,28)"/><text x="16.8821%" y="159.50">mir..</text></g><g><title>misc_checking_1 (11,134,423 samples, 0.12%)</title><rect x="20.1434%" y="165" width="0.1226%" height="15" fill="rgb(216,20,37)"/><text x="20.3934%" y="175.50"></text></g><g><title>misc_checking_2 (14,815,041 samples, 0.16%)</title><rect x="20.2659%" y="165" width="0.1631%" height="15" fill="rgb(206,188,39)"/><text x="20.5159%" y="175.50"></text></g><g><title>match_checking (9,211,784 samples, 0.10%)</title><rect x="20.3276%" y="149" width="0.1014%" height="15" fill="rgb(217,207,13)"/><text x="20.5776%" y="159.50"></text></g><g><title>crate_lints (12,849,889 samples, 0.14%)</title><rect x="20.5181%" y="133" width="0.1414%" height="15" fill="rgb(231,73,38)"/><text x="20.7681%" y="143.50"></text></g><g><title>lint_checking (20,102,933 samples, 0.22%)</title><rect x="20.5181%" y="149" width="0.2213%" height="15" fill="rgb(225,20,46)"/><text x="20.7681%" y="159.50"></text></g><g><title>privacy_checking_modules (13,888,051 samples, 0.15%)</title><rect x="20.7909%" y="149" width="0.1529%" height="15" fill="rgb(210,31,41)"/><text x="21.0409%" y="159.50"></text></g><g><title>check_mod_privacy (13,858,961 samples, 0.15%)</title><rect x="20.7912%" y="133" width="0.1525%" height="15" fill="rgb(221,200,47)"/><text x="21.0412%" y="143.50"></text></g><g><title>misc_checking_3 (46,879,225 samples, 0.52%)</title><rect x="20.4290%" y="165" width="0.5160%" height="15" fill="rgb(226,26,5)"/><text x="20.6790%" y="175.50"></text></g><g><title>coherent_trait (24,949,452 samples, 0.27%)</title><rect x="20.9536%" y="133" width="0.2746%" height="15" fill="rgb(249,33,26)"/><text x="21.2036%" y="143.50"></text></g><g><title>specialization_graph_of (23,368,667 samples, 0.26%)</title><rect x="20.9710%" y="117" width="0.2572%" height="15" fill="rgb(235,183,28)"/><text x="21.2210%" y="127.50"></text></g><g><title>coherence_checking (25,517,960 samples, 0.28%)</title><rect x="20.9531%" y="149" width="0.2809%" height="15" fill="rgb(221,5,38)"/><text x="21.2031%" y="159.50"></text></g><g><title>evaluate_obligation (16,604,050 samples, 0.18%)</title><rect x="23.9278%" y="101" width="0.1828%" height="15" fill="rgb(247,18,42)"/><text x="24.1778%" y="111.50"></text></g><g><title>typeck (67,241,292 samples, 0.74%)</title><rect x="24.2004%" y="101" width="0.7401%" height="15" fill="rgb(241,131,45)"/><text x="24.4504%" y="111.50"></text></g><g><title>item_bodies_checking (336,596,843 samples, 3.70%)</title><rect x="21.2395%" y="149" width="3.7050%" height="15" fill="rgb(249,31,29)"/><text x="21.4895%" y="159.50">item..</text></g><g><title>typeck_item_bodies (336,592,773 samples, 3.70%)</title><rect x="21.2395%" y="133" width="3.7049%" height="15" fill="rgb(225,111,53)"/><text x="21.4895%" y="143.50">type..</text></g><g><title>typeck (335,541,454 samples, 3.69%)</title><rect x="21.2511%" y="117" width="3.6934%" height="15" fill="rgb(238,160,17)"/><text x="21.5011%" y="127.50">type..</text></g><g><title>item_types_checking (18,183,654 samples, 0.20%)</title><rect x="24.9444%" y="149" width="0.2002%" height="15" fill="rgb(214,148,48)"/><text x="25.1944%" y="159.50"></text></g><g><title>check_mod_item_types (18,152,944 samples, 0.20%)</title><rect x="24.9448%" y="133" width="0.1998%" height="15" fill="rgb(232,36,49)"/><text x="25.1948%" y="143.50"></text></g><g><title>type_collecting (25,349,016 samples, 0.28%)</title><rect x="25.1448%" y="149" width="0.2790%" height="15" fill="rgb(209,103,24)"/><text x="25.3948%" y="159.50"></text></g><g><title>collect_mod_item_types (25,306,146 samples, 0.28%)</title><rect x="25.1453%" y="133" width="0.2785%" height="15" fill="rgb(229,88,8)"/><text x="25.3953%" y="143.50"></text></g><g><title>check_impl_item_well_formed (41,554,127 samples, 0.46%)</title><rect x="25.4540%" y="133" width="0.4574%" height="15" fill="rgb(213,181,19)"/><text x="25.7040%" y="143.50"></text></g><g><title>check_item_well_formed (27,646,183 samples, 0.30%)</title><rect x="25.9114%" y="133" width="0.3043%" height="15" fill="rgb(254,191,54)"/><text x="26.1614%" y="143.50"></text></g><g><title>analysis (876,786,839 samples, 9.65%)</title><rect x="16.5777%" y="181" width="9.6510%" height="15" fill="rgb(241,83,37)"/><text x="16.8277%" y="191.50">analysis</text></g><g><title>type_check_crate (480,017,616 samples, 5.28%)</title><rect x="20.9450%" y="165" width="5.2836%" height="15" fill="rgb(233,36,39)"/><text x="21.1950%" y="175.50">type_c..</text></g><g><title>wf_checking (73,047,120 samples, 0.80%)</title><rect x="25.4246%" y="149" width="0.8040%" height="15" fill="rgb(226,3,54)"/><text x="25.6746%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (38,468,344 samples, 0.42%)</title><rect x="38.9267%" y="149" width="0.4234%" height="15" fill="rgb(245,192,40)"/><text x="39.1767%" y="159.50"></text></g><g><title>layout_of (14,070,640 samples, 0.15%)</title><rect x="40.1005%" y="133" width="0.1549%" height="15" fill="rgb(238,167,29)"/><text x="40.3505%" y="143.50"></text></g><g><title>param_env (25,592,502 samples, 0.28%)</title><rect x="40.2553%" y="133" width="0.2817%" height="15" fill="rgb(232,182,51)"/><text x="40.5053%" y="143.50"></text></g><g><title>normalize_projection_ty (13,238,654 samples, 0.15%)</title><rect x="40.6040%" y="117" width="0.1457%" height="15" fill="rgb(231,60,39)"/><text x="40.8540%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (19,334,864 samples, 0.21%)</title><rect x="40.5370%" y="133" width="0.2128%" height="15" fill="rgb(208,69,12)"/><text x="40.7870%" y="143.50"></text></g><g><title>fn_abi_of_instance (118,441,637 samples, 1.30%)</title><rect x="39.4532%" y="149" width="1.3037%" height="15" fill="rgb(235,93,37)"/><text x="39.7032%" y="159.50"></text></g><g><title>layout_of (22,388,926 samples, 0.25%)</title><rect x="40.7964%" y="149" width="0.2464%" height="15" fill="rgb(213,116,39)"/><text x="41.0464%" y="159.50"></text></g><g><title>codegen_module (1,354,964,400 samples, 14.91%)</title><rect x="26.2894%" y="165" width="14.9144%" height="15" fill="rgb(222,207,29)"/><text x="26.5394%" y="175.50">codegen_module</text></g><g><title>codegen_crate (1,360,667,638 samples, 14.98%)</title><rect x="26.2287%" y="181" width="14.9771%" height="15" fill="rgb(206,96,30)"/><text x="26.4787%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (4,158,999,786 samples, 45.78%)</title><rect x="41.2095%" y="165" width="45.7789%" height="15" fill="rgb(218,138,4)"/><text x="41.4595%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (3,795,934,503 samples, 41.78%)</title><rect x="45.2058%" y="149" width="41.7826%" height="15" fill="rgb(250,191,14)"/><text x="45.4558%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (4,386,484,342 samples, 48.28%)</title><rect x="41.2059%" y="181" width="48.2829%" height="15" fill="rgb(239,60,40)"/><text x="41.4559%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (227,155,224 samples, 2.50%)</title><rect x="86.9884%" y="165" width="2.5003%" height="15" fill="rgb(206,27,48)"/><text x="87.2384%" y="175.50">LL..</text></g><g><title>metadata_register_crate (10,689,007 samples, 0.12%)</title><rect x="91.4184%" y="133" width="0.1177%" height="15" fill="rgb(225,35,8)"/><text x="91.6684%" y="143.50"></text></g><g><title>macro_expand_crate (184,092,798 samples, 2.03%)</title><rect x="89.5204%" y="165" width="2.0263%" height="15" fill="rgb(250,213,24)"/><text x="89.7704%" y="175.50">m..</text></g><g><title>expand_crate (184,079,508 samples, 2.03%)</title><rect x="89.5206%" y="149" width="2.0262%" height="15" fill="rgb(247,123,22)"/><text x="89.7706%" y="159.50">e..</text></g><g><title>late_resolve_crate (23,044,912 samples, 0.25%)</title><rect x="91.5680%" y="149" width="0.2537%" height="15" fill="rgb(231,138,38)"/><text x="91.8180%" y="159.50"></text></g><g><title>configure_and_expand (214,138,981 samples, 2.36%)</title><rect x="89.4888%" y="181" width="2.3571%" height="15" fill="rgb(231,145,46)"/><text x="89.7388%" y="191.50">c..</text></g><g><title>resolve_crate (27,012,562 samples, 0.30%)</title><rect x="91.5485%" y="165" width="0.2973%" height="15" fill="rgb(251,118,11)"/><text x="91.7985%" y="175.50"></text></g><g><title>free_global_ctxt (30,402,368 samples, 0.33%)</title><rect x="91.9500%" y="181" width="0.3346%" height="15" fill="rgb(217,147,25)"/><text x="92.2000%" y="191.50"></text></g><g><title>mir_shims (14,254,391 samples, 0.16%)</title><rect x="93.3582%" y="101" width="0.1569%" height="15" fill="rgb(247,81,37)"/><text x="93.6082%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (17,414,662 samples, 0.19%)</title><rect x="93.7928%" y="85" width="0.1917%" height="15" fill="rgb(209,12,38)"/><text x="94.0428%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (27,077,389 samples, 0.30%)</title><rect x="93.9845%" y="85" width="0.2980%" height="15" fill="rgb(227,1,9)"/><text x="94.2345%" y="95.50"></text></g><g><title>optimized_mir (71,370,340 samples, 0.79%)</title><rect x="93.5152%" y="101" width="0.7856%" height="15" fill="rgb(248,47,43)"/><text x="93.7652%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (52,250,790 samples, 0.58%)</title><rect x="94.5112%" y="85" width="0.5751%" height="15" fill="rgb(221,10,30)"/><text x="94.7612%" y="95.50"></text></g><g><title>needs_drop_raw (10,186,024 samples, 0.11%)</title><rect x="95.1311%" y="85" width="0.1121%" height="15" fill="rgb(210,229,1)"/><text x="95.3811%" y="95.50"></text></g><g><title>resolve_instance (95,516,109 samples, 1.05%)</title><rect x="94.3008%" y="101" width="1.0514%" height="15" fill="rgb(222,148,37)"/><text x="94.5508%" y="111.50"></text></g><g><title>normalize_projection_ty (11,102,589 samples, 0.12%)</title><rect x="95.3927%" y="85" width="0.1222%" height="15" fill="rgb(234,67,33)"/><text x="95.6427%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (14,840,203 samples, 0.16%)</title><rect x="95.3521%" y="101" width="0.1633%" height="15" fill="rgb(247,98,35)"/><text x="95.6021%" y="111.50"></text></g><g><title>eval_to_const_value_raw (9,312,380 samples, 0.10%)</title><rect x="95.5492%" y="85" width="0.1025%" height="15" fill="rgb(247,138,52)"/><text x="95.7992%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (12,836,387 samples, 0.14%)</title><rect x="95.5155%" y="101" width="0.1413%" height="15" fill="rgb(213,79,30)"/><text x="95.7655%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (300,846,331 samples, 3.31%)</title><rect x="92.5673%" y="117" width="3.3115%" height="15" fill="rgb(246,177,23)"/><text x="92.8173%" y="127.50">mon..</text></g><g><title>vtable_entries (12,317,793 samples, 0.14%)</title><rect x="95.7432%" y="101" width="0.1356%" height="15" fill="rgb(230,62,27)"/><text x="95.9932%" y="111.50"></text></g><g><title>monomorphization_collector (301,430,107 samples, 3.32%)</title><rect x="92.5672%" y="133" width="3.3179%" height="15" fill="rgb(216,154,8)"/><text x="92.8172%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (42,490,791 samples, 0.47%)</title><rect x="95.8852%" y="117" width="0.4677%" height="15" fill="rgb(244,35,45)"/><text x="96.1352%" y="127.50"></text></g><g><title>symbol_name (36,974,174 samples, 0.41%)</title><rect x="95.9459%" y="101" width="0.4070%" height="15" fill="rgb(251,115,12)"/><text x="96.1959%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (360,110,562 samples, 3.96%)</title><rect x="92.5652%" y="149" width="3.9638%" height="15" fill="rgb(240,54,50)"/><text x="92.8152%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (58,492,733 samples, 0.64%)</title><rect x="95.8851%" y="133" width="0.6438%" height="15" fill="rgb(233,84,52)"/><text x="96.1351%" y="143.50"></text></g><g><title>cgu_partitioning (15,993,912 samples, 0.18%)</title><rect x="96.3529%" y="117" width="0.1760%" height="15" fill="rgb(207,117,47)"/><text x="96.6029%" y="127.50"></text></g><g><title>exported_symbols (363,880,630 samples, 4.01%)</title><rect x="92.5385%" y="165" width="4.0053%" height="15" fill="rgb(249,43,39)"/><text x="92.7885%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (38,648,837 samples, 0.43%)</title><rect x="96.8653%" y="149" width="0.4254%" height="15" fill="rgb(209,38,44)"/><text x="97.1153%" y="159.50"></text></g><g><title>optimized_mir (67,421,881 samples, 0.74%)</title><rect x="96.5526%" y="165" width="0.7421%" height="15" fill="rgb(236,212,23)"/><text x="96.8026%" y="175.50"></text></g><g><title>generate_crate_metadata (456,417,088 samples, 5.02%)</title><rect x="92.2847%" y="181" width="5.0239%" height="15" fill="rgb(242,79,21)"/><text x="92.5347%" y="191.50">genera..</text></g><g><title>hir_lowering (36,741,523 samples, 0.40%)</title><rect x="97.3085%" y="181" width="0.4044%" height="15" fill="rgb(211,96,35)"/><text x="97.5585%" y="191.50"></text></g><g><title>finish_ongoing_codegen (170,853,263 samples, 1.88%)</title><rect x="97.7132%" y="165" width="1.8806%" height="15" fill="rgb(253,215,40)"/><text x="97.9632%" y="175.50">f..</text></g><g><title>link_crate (23,189,215 samples, 0.26%)</title><rect x="99.5938%" y="165" width="0.2552%" height="15" fill="rgb(211,81,21)"/><text x="99.8438%" y="175.50"></text></g><g><title>link_binary (22,701,400 samples, 0.25%)</title><rect x="99.5992%" y="149" width="0.2499%" height="15" fill="rgb(208,190,38)"/><text x="99.8492%" y="159.50"></text></g><g><title>link_rlib (19,565,468 samples, 0.22%)</title><rect x="99.6337%" y="133" width="0.2154%" height="15" fill="rgb(235,213,38)"/><text x="99.8837%" y="143.50"></text></g><g><title>link (194,072,328 samples, 2.14%)</title><rect x="97.7130%" y="181" width="2.1362%" height="15" fill="rgb(237,122,38)"/><text x="97.9630%" y="191.50">l..</text></g><g><title>self_profile_alloc_query_strings (10,067,882 samples, 0.11%)</title><rect x="99.8701%" y="181" width="0.1108%" height="15" fill="rgb(244,218,35)"/><text x="100.1201%" y="191.50"></text></g><g><title>all (9,084,964,235 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (9,084,964,235 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>