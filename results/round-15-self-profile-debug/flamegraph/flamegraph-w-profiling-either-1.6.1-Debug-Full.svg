<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,087,950 samples, 0.76%)</title><rect x="0.4937%" y="181" width="0.7639%" height="15" fill="rgb(227,0,7)"/><text x="0.7437%" y="191.50"></text></g><g><title>is_sized_raw (211,753 samples, 0.15%)</title><rect x="9.9104%" y="133" width="0.1487%" height="15" fill="rgb(217,0,24)"/><text x="10.1604%" y="143.50"></text></g><g><title>param_env (295,533 samples, 0.21%)</title><rect x="11.4927%" y="101" width="0.2075%" height="15" fill="rgb(221,193,54)"/><text x="11.7427%" y="111.50"></text></g><g><title>needs_drop_raw (1,089,025 samples, 0.76%)</title><rect x="14.4242%" y="69" width="0.7647%" height="15" fill="rgb(248,212,6)"/><text x="14.6742%" y="79.50"></text></g><g><title>is_copy_raw (926,262 samples, 0.65%)</title><rect x="14.5385%" y="53" width="0.6504%" height="15" fill="rgb(208,68,35)"/><text x="14.7885%" y="63.50"></text></g><g><title>evaluate_obligation (772,639 samples, 0.54%)</title><rect x="14.6464%" y="37" width="0.5425%" height="15" fill="rgb(232,128,0)"/><text x="14.8964%" y="47.50"></text></g><g><title>thir_body (1,069,469 samples, 0.75%)</title><rect x="15.2550%" y="69" width="0.7509%" height="15" fill="rgb(207,160,47)"/><text x="15.5050%" y="79.50"></text></g><g><title>mir_const (7,447,081 samples, 5.23%)</title><rect x="10.7936%" y="117" width="5.2290%" height="15" fill="rgb(228,23,34)"/><text x="11.0436%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (6,155,852 samples, 4.32%)</title><rect x="11.7002%" y="101" width="4.3223%" height="15" fill="rgb(218,30,26)"/><text x="11.9502%" y="111.50">unsaf..</text></g><g><title>mir_built (5,595,865 samples, 3.93%)</title><rect x="12.0934%" y="85" width="3.9291%" height="15" fill="rgb(220,122,19)"/><text x="12.3434%" y="95.50">mir_..</text></g><g><title>mir_promoted (8,549,055 samples, 6.00%)</title><rect x="10.0591%" y="133" width="6.0027%" height="15" fill="rgb(250,228,42)"/><text x="10.3091%" y="143.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (323,443 samples, 0.23%)</title><rect x="16.0618%" y="133" width="0.2271%" height="15" fill="rgb(240,193,28)"/><text x="16.3118%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (285,445 samples, 0.20%)</title><rect x="16.2889%" y="133" width="0.2004%" height="15" fill="rgb(216,20,37)"/><text x="16.5389%" y="143.50"></text></g><g><title>type_op_normalize_ty (188,983 samples, 0.13%)</title><rect x="16.5365%" y="133" width="0.1327%" height="15" fill="rgb(206,188,39)"/><text x="16.7865%" y="143.50"></text></g><g><title>normalize_projection_ty (144,282 samples, 0.10%)</title><rect x="16.5679%" y="117" width="0.1013%" height="15" fill="rgb(217,207,13)"/><text x="16.8179%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,245,208 samples, 1.58%)</title><rect x="16.6692%" y="133" width="1.5765%" height="15" fill="rgb(231,73,38)"/><text x="16.9192%" y="143.50"></text></g><g><title>MIR_borrow_checking (23,898,720 samples, 16.78%)</title><rect x="1.4681%" y="165" width="16.7805%" height="15" fill="rgb(225,20,46)"/><text x="1.7181%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,744,808 samples, 16.67%)</title><rect x="1.5761%" y="149" width="16.6724%" height="15" fill="rgb(210,31,41)"/><text x="1.8261%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (173,041 samples, 0.12%)</title><rect x="18.2730%" y="165" width="0.1215%" height="15" fill="rgb(221,200,47)"/><text x="18.5230%" y="175.50"></text></g><g><title>item_attrs (207,612 samples, 0.15%)</title><rect x="18.7845%" y="85" width="0.1458%" height="15" fill="rgb(226,26,5)"/><text x="19.0345%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (200,372 samples, 0.14%)</title><rect x="18.7896%" y="69" width="0.1407%" height="15" fill="rgb(249,33,26)"/><text x="19.0396%" y="79.50"></text></g><g><title>codegen_fn_attrs (310,024 samples, 0.22%)</title><rect x="18.7592%" y="101" width="0.2177%" height="15" fill="rgb(235,183,28)"/><text x="19.0092%" y="111.50"></text></g><g><title>should_inherit_track_caller (444,337 samples, 0.31%)</title><rect x="18.6707%" y="117" width="0.3120%" height="15" fill="rgb(221,5,38)"/><text x="18.9207%" y="127.50"></text></g><g><title>codegen_fn_attrs (615,078 samples, 0.43%)</title><rect x="18.5612%" y="133" width="0.4319%" height="15" fill="rgb(247,18,42)"/><text x="18.8112%" y="143.50"></text></g><g><title>check_mod_attrs (839,039 samples, 0.59%)</title><rect x="18.4040%" y="149" width="0.5891%" height="15" fill="rgb(241,131,45)"/><text x="18.6540%" y="159.50"></text></g><g><title>lookup_deprecation_entry (149,951 samples, 0.11%)</title><rect x="19.2753%" y="133" width="0.1053%" height="15" fill="rgb(249,31,29)"/><text x="19.5253%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (457,834 samples, 0.32%)</title><rect x="19.1359%" y="149" width="0.3215%" height="15" fill="rgb(225,111,53)"/><text x="19.3859%" y="159.50"></text></g><g><title>misc_checking_1 (1,552,026 samples, 1.09%)</title><rect x="18.3949%" y="165" width="1.0898%" height="15" fill="rgb(238,160,17)"/><text x="18.6449%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (408,335 samples, 0.29%)</title><rect x="19.4856%" y="149" width="0.2867%" height="15" fill="rgb(214,148,48)"/><text x="19.7356%" y="159.50"></text></g><g><title>check_mod_liveness (324,884 samples, 0.23%)</title><rect x="19.5442%" y="133" width="0.2281%" height="15" fill="rgb(232,36,49)"/><text x="19.7942%" y="143.50"></text></g><g><title>misc_checking_2 (1,054,021 samples, 0.74%)</title><rect x="19.4846%" y="165" width="0.7401%" height="15" fill="rgb(209,103,24)"/><text x="19.7346%" y="175.50"></text></g><g><title>match_checking (644,226 samples, 0.45%)</title><rect x="19.7724%" y="149" width="0.4523%" height="15" fill="rgb(229,88,8)"/><text x="20.0224%" y="159.50"></text></g><g><title>check_match (608,175 samples, 0.43%)</title><rect x="19.7977%" y="133" width="0.4270%" height="15" fill="rgb(213,181,19)"/><text x="20.0477%" y="143.50"></text></g><g><title>check_private_in_public (225,372 samples, 0.16%)</title><rect x="20.2301%" y="149" width="0.1582%" height="15" fill="rgb(254,191,54)"/><text x="20.4801%" y="159.50"></text></g><g><title>death_checking (509,585 samples, 0.36%)</title><rect x="20.3884%" y="149" width="0.3578%" height="15" fill="rgb(241,83,37)"/><text x="20.6384%" y="159.50"></text></g><g><title>item_attrs (204,182 samples, 0.14%)</title><rect x="20.6028%" y="133" width="0.1434%" height="15" fill="rgb(233,36,39)"/><text x="20.8528%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (202,142 samples, 0.14%)</title><rect x="20.6043%" y="117" width="0.1419%" height="15" fill="rgb(226,3,54)"/><text x="20.8543%" y="127.50"></text></g><g><title>crate_lints (1,917,239 samples, 1.35%)</title><rect x="20.7470%" y="133" width="1.3462%" height="15" fill="rgb(245,192,40)"/><text x="20.9970%" y="143.50"></text></g><g><title>type_of (1,065,211 samples, 0.75%)</title><rect x="21.3453%" y="117" width="0.7479%" height="15" fill="rgb(238,167,29)"/><text x="21.5953%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (832,600 samples, 0.58%)</title><rect x="21.5086%" y="101" width="0.5846%" height="15" fill="rgb(232,182,51)"/><text x="21.7586%" y="111.50"></text></g><g><title>lint_checking (2,242,672 samples, 1.57%)</title><rect x="20.7462%" y="149" width="1.5747%" height="15" fill="rgb(231,60,39)"/><text x="20.9962%" y="159.50"></text></g><g><title>module_lints (324,243 samples, 0.23%)</title><rect x="22.0932%" y="133" width="0.2277%" height="15" fill="rgb(208,69,12)"/><text x="22.3432%" y="143.50"></text></g><g><title>lint_mod (321,893 samples, 0.23%)</title><rect x="22.0949%" y="117" width="0.2260%" height="15" fill="rgb(235,93,37)"/><text x="22.3449%" y="127.50"></text></g><g><title>privacy_access_levels (299,663 samples, 0.21%)</title><rect x="22.3209%" y="149" width="0.2104%" height="15" fill="rgb(213,116,39)"/><text x="22.5709%" y="159.50"></text></g><g><title>privacy_checking_modules (1,299,293 samples, 0.91%)</title><rect x="22.5313%" y="149" width="0.9123%" height="15" fill="rgb(222,207,29)"/><text x="22.7813%" y="159.50"></text></g><g><title>check_mod_privacy (1,297,843 samples, 0.91%)</title><rect x="22.5323%" y="133" width="0.9113%" height="15" fill="rgb(206,96,30)"/><text x="22.7823%" y="143.50"></text></g><g><title>misc_checking_3 (4,596,516 samples, 3.23%)</title><rect x="20.2247%" y="165" width="3.2274%" height="15" fill="rgb(218,138,4)"/><text x="20.4747%" y="175.50">mis..</text></g><g><title>impl_trait_ref (183,953 samples, 0.13%)</title><rect x="23.6377%" y="69" width="0.1292%" height="15" fill="rgb(250,191,14)"/><text x="23.8877%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (165,363 samples, 0.12%)</title><rect x="23.6507%" y="53" width="0.1161%" height="15" fill="rgb(239,60,40)"/><text x="23.9007%" y="63.50"></text></g><g><title>adt_destructor (339,083 samples, 0.24%)</title><rect x="23.5464%" y="117" width="0.2381%" height="15" fill="rgb(206,27,48)"/><text x="23.7964%" y="127.50"></text></g><g><title>coherent_trait (336,783 samples, 0.24%)</title><rect x="23.5480%" y="101" width="0.2365%" height="15" fill="rgb(225,35,8)"/><text x="23.7980%" y="111.50"></text></g><g><title>specialization_graph_of (335,483 samples, 0.24%)</title><rect x="23.5489%" y="85" width="0.2356%" height="15" fill="rgb(250,213,24)"/><text x="23.7989%" y="95.50"></text></g><g><title>impl_parent (3,226,087 samples, 2.27%)</title><rect x="27.4961%" y="101" width="2.2652%" height="15" fill="rgb(247,123,22)"/><text x="27.7461%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,746,727 samples, 1.23%)</title><rect x="28.5349%" y="85" width="1.2265%" height="15" fill="rgb(231,138,38)"/><text x="28.7849%" y="95.50"></text></g><g><title>impl_trait_ref (6,751,965 samples, 4.74%)</title><rect x="29.7613%" y="101" width="4.7409%" height="15" fill="rgb(231,145,46)"/><text x="30.0113%" y="111.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,037,153 samples, 3.54%)</title><rect x="30.9654%" y="85" width="3.5368%" height="15" fill="rgb(251,118,11)"/><text x="31.2154%" y="95.50">met..</text></g><g><title>trait_impls_of (1,230,585 samples, 0.86%)</title><rect x="34.5471%" y="101" width="0.8641%" height="15" fill="rgb(217,147,25)"/><text x="34.7971%" y="111.50"></text></g><g><title>implementations_of_trait (341,835 samples, 0.24%)</title><rect x="35.1711%" y="85" width="0.2400%" height="15" fill="rgb(247,81,37)"/><text x="35.4211%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (250,762 samples, 0.18%)</title><rect x="35.2350%" y="69" width="0.1761%" height="15" fill="rgb(209,12,38)"/><text x="35.4850%" y="79.50"></text></g><g><title>coherent_trait (16,945,761 samples, 11.90%)</title><rect x="23.5134%" y="133" width="11.8984%" height="15" fill="rgb(227,1,9)"/><text x="23.7634%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (16,477,647 samples, 11.57%)</title><rect x="23.8421%" y="117" width="11.5698%" height="15" fill="rgb(248,47,43)"/><text x="24.0921%" y="127.50">specialization_gr..</text></g><g><title>coherence_checking (17,025,812 samples, 11.95%)</title><rect x="23.4959%" y="149" width="11.9547%" height="15" fill="rgb(221,10,30)"/><text x="23.7459%" y="159.50">coherence_checking</text></g><g><title>adt_dtorck_constraint (185,242 samples, 0.13%)</title><rect x="49.5242%" y="85" width="0.1301%" height="15" fill="rgb(210,229,1)"/><text x="49.7742%" y="95.50"></text></g><g><title>dropck_outlives (464,433 samples, 0.33%)</title><rect x="49.3426%" y="101" width="0.3261%" height="15" fill="rgb(222,148,37)"/><text x="49.5926%" y="111.50"></text></g><g><title>evaluate_obligation (844,760 samples, 0.59%)</title><rect x="49.6687%" y="101" width="0.5931%" height="15" fill="rgb(234,67,33)"/><text x="49.9187%" y="111.50"></text></g><g><title>impl_trait_ref (220,732 samples, 0.15%)</title><rect x="50.3442%" y="101" width="0.1550%" height="15" fill="rgb(247,98,35)"/><text x="50.5942%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (218,352 samples, 0.15%)</title><rect x="50.3459%" y="85" width="0.1533%" height="15" fill="rgb(247,138,52)"/><text x="50.5959%" y="95.50"></text></g><g><title>method_autoderef_steps (548,765 samples, 0.39%)</title><rect x="50.5958%" y="101" width="0.3853%" height="15" fill="rgb(213,79,30)"/><text x="50.8458%" y="111.50"></text></g><g><title>evaluate_obligation (267,744 samples, 0.19%)</title><rect x="50.7931%" y="85" width="0.1880%" height="15" fill="rgb(246,177,23)"/><text x="51.0431%" y="95.50"></text></g><g><title>item_bodies_checking (22,416,025 samples, 15.74%)</title><rect x="35.4776%" y="149" width="15.7394%" height="15" fill="rgb(230,62,27)"/><text x="35.7276%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,414,065 samples, 15.74%)</title><rect x="35.4790%" y="133" width="15.7380%" height="15" fill="rgb(216,154,8)"/><text x="35.7290%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (22,304,653 samples, 15.66%)</title><rect x="35.5558%" y="117" width="15.6612%" height="15" fill="rgb(244,35,45)"/><text x="35.8058%" y="127.50">typeck</text></g><g><title>item_types_checking (1,838,419 samples, 1.29%)</title><rect x="51.2170%" y="149" width="1.2908%" height="15" fill="rgb(251,115,12)"/><text x="51.4670%" y="159.50"></text></g><g><title>check_mod_item_types (1,836,629 samples, 1.29%)</title><rect x="51.2183%" y="133" width="1.2896%" height="15" fill="rgb(240,54,50)"/><text x="51.4683%" y="143.50"></text></g><g><title>fn_sig (363,992 samples, 0.26%)</title><rect x="52.7235%" y="117" width="0.2556%" height="15" fill="rgb(233,84,52)"/><text x="52.9735%" y="127.50"></text></g><g><title>generics_of (239,143 samples, 0.17%)</title><rect x="52.9791%" y="117" width="0.1679%" height="15" fill="rgb(207,117,47)"/><text x="53.2291%" y="127.50"></text></g><g><title>impl_trait_ref (144,723 samples, 0.10%)</title><rect x="53.1470%" y="117" width="0.1016%" height="15" fill="rgb(249,43,39)"/><text x="53.3970%" y="127.50"></text></g><g><title>late_bound_vars_map (651,586 samples, 0.46%)</title><rect x="53.7535%" y="69" width="0.4575%" height="15" fill="rgb(209,38,44)"/><text x="54.0035%" y="79.50"></text></g><g><title>resolve_lifetimes (610,416 samples, 0.43%)</title><rect x="53.7824%" y="53" width="0.4286%" height="15" fill="rgb(236,212,23)"/><text x="54.0324%" y="63.50"></text></g><g><title>explicit_predicates_of (1,290,389 samples, 0.91%)</title><rect x="53.3588%" y="85" width="0.9060%" height="15" fill="rgb(242,79,21)"/><text x="53.6088%" y="95.50"></text></g><g><title>predicates_of (1,490,124 samples, 1.05%)</title><rect x="53.2486%" y="117" width="1.0463%" height="15" fill="rgb(211,96,35)"/><text x="53.4986%" y="127.50"></text></g><g><title>predicates_defined_on (1,435,361 samples, 1.01%)</title><rect x="53.2871%" y="101" width="1.0078%" height="15" fill="rgb(253,215,40)"/><text x="53.5371%" y="111.50"></text></g><g><title>type_collecting (2,694,747 samples, 1.89%)</title><rect x="52.5087%" y="149" width="1.8921%" height="15" fill="rgb(211,81,21)"/><text x="52.7587%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,689,627 samples, 1.89%)</title><rect x="52.5123%" y="133" width="1.8885%" height="15" fill="rgb(208,190,38)"/><text x="52.7623%" y="143.50">c..</text></g><g><title>type_of (150,852 samples, 0.11%)</title><rect x="54.2949%" y="117" width="0.1059%" height="15" fill="rgb(235,213,38)"/><text x="54.5449%" y="127.50"></text></g><g><title>adt_sized_constraint (144,062 samples, 0.10%)</title><rect x="57.6179%" y="101" width="0.1012%" height="15" fill="rgb(237,122,38)"/><text x="57.8679%" y="111.50"></text></g><g><title>evaluate_obligation (871,349 samples, 0.61%)</title><rect x="57.1405%" y="117" width="0.6118%" height="15" fill="rgb(244,218,35)"/><text x="57.3905%" y="127.50"></text></g><g><title>implied_outlives_bounds (572,616 samples, 0.40%)</title><rect x="57.7569%" y="117" width="0.4021%" height="15" fill="rgb(240,68,47)"/><text x="58.0069%" y="127.50"></text></g><g><title>object_safety_violations (416,605 samples, 0.29%)</title><rect x="58.1724%" y="117" width="0.2925%" height="15" fill="rgb(210,16,53)"/><text x="58.4224%" y="127.50"></text></g><g><title>param_env (754,787 samples, 0.53%)</title><rect x="58.4649%" y="117" width="0.5300%" height="15" fill="rgb(235,124,12)"/><text x="58.7149%" y="127.50"></text></g><g><title>region_scope_tree (434,450 samples, 0.31%)</title><rect x="59.0505%" y="117" width="0.3050%" height="15" fill="rgb(224,169,11)"/><text x="59.3005%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,888,069 samples, 4.84%)</title><rect x="54.5948%" y="133" width="4.8364%" height="15" fill="rgb(250,166,2)"/><text x="54.8448%" y="143.50">check_..</text></g><g><title>implied_outlives_bounds (216,072 samples, 0.15%)</title><rect x="61.5190%" y="117" width="0.1517%" height="15" fill="rgb(242,216,29)"/><text x="61.7690%" y="127.50"></text></g><g><title>param_env (505,986 samples, 0.36%)</title><rect x="61.6707%" y="117" width="0.3553%" height="15" fill="rgb(230,116,27)"/><text x="61.9207%" y="127.50"></text></g><g><title>analysis (86,875,905 samples, 61.00%)</title><rect x="1.2576%" y="181" width="60.9998%" height="15" fill="rgb(228,99,48)"/><text x="1.5076%" y="191.50">analysis</text></g><g><title>type_check_crate (55,266,417 samples, 38.81%)</title><rect x="23.4521%" y="165" width="38.8052%" height="15" fill="rgb(253,11,6)"/><text x="23.7021%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,182,623 samples, 7.85%)</title><rect x="54.4055%" y="149" width="7.8519%" height="15" fill="rgb(247,143,39)"/><text x="54.6555%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (4,024,983 samples, 2.83%)</title><rect x="59.4312%" y="133" width="2.8261%" height="15" fill="rgb(236,97,10)"/><text x="59.6812%" y="143.50">ch..</text></g><g><title>codegen_module (234,182 samples, 0.16%)</title><rect x="62.7574%" y="165" width="0.1644%" height="15" fill="rgb(233,208,19)"/><text x="63.0074%" y="175.50"></text></g><g><title>codegen_crate (1,011,690 samples, 0.71%)</title><rect x="62.2646%" y="181" width="0.7104%" height="15" fill="rgb(216,164,2)"/><text x="62.5146%" y="191.50"></text></g><g><title>LLVM_module_codegen (790,918 samples, 0.56%)</title><rect x="62.9807%" y="165" width="0.5553%" height="15" fill="rgb(220,129,5)"/><text x="63.2307%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (711,657 samples, 0.50%)</title><rect x="63.0363%" y="149" width="0.4997%" height="15" fill="rgb(242,17,10)"/><text x="63.2863%" y="159.50"></text></g><g><title>codegen_module_optimize (925,499 samples, 0.65%)</title><rect x="62.9750%" y="181" width="0.6498%" height="15" fill="rgb(242,107,0)"/><text x="63.2250%" y="191.50"></text></g><g><title>macro_expand_crate (14,995,862 samples, 10.53%)</title><rect x="63.9519%" y="165" width="10.5293%" height="15" fill="rgb(251,28,31)"/><text x="64.2019%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (14,984,391 samples, 10.52%)</title><rect x="63.9599%" y="149" width="10.5213%" height="15" fill="rgb(233,223,10)"/><text x="64.2099%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,930,850 samples, 2.06%)</title><rect x="72.4233%" y="133" width="2.0579%" height="15" fill="rgb(215,21,27)"/><text x="72.6733%" y="143.50">m..</text></g><g><title>metadata_register_crate (1,194,444 samples, 0.84%)</title><rect x="73.6425%" y="117" width="0.8387%" height="15" fill="rgb(232,23,21)"/><text x="73.8925%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (369,673 samples, 0.26%)</title><rect x="74.4828%" y="165" width="0.2596%" height="15" fill="rgb(244,5,23)"/><text x="74.7328%" y="175.50"></text></g><g><title>late_resolve_crate (2,347,123 samples, 1.65%)</title><rect x="74.8608%" y="149" width="1.6480%" height="15" fill="rgb(226,81,46)"/><text x="75.1108%" y="159.50"></text></g><g><title>configure_and_expand (18,453,166 samples, 12.96%)</title><rect x="63.6248%" y="181" width="12.9569%" height="15" fill="rgb(247,70,30)"/><text x="63.8748%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,619,466 samples, 1.84%)</title><rect x="74.7424%" y="165" width="1.8393%" height="15" fill="rgb(212,68,19)"/><text x="74.9924%" y="175.50">r..</text></g><g><title>drop_ast (207,072 samples, 0.15%)</title><rect x="76.5817%" y="181" width="0.1454%" height="15" fill="rgb(240,187,13)"/><text x="76.8317%" y="191.50"></text></g><g><title>early_lint_checks (385,074 samples, 0.27%)</title><rect x="76.7359%" y="181" width="0.2704%" height="15" fill="rgb(223,113,26)"/><text x="76.9859%" y="191.50"></text></g><g><title>free_global_ctxt (4,654,777 samples, 3.27%)</title><rect x="77.0062%" y="181" width="3.2683%" height="15" fill="rgb(206,192,2)"/><text x="77.2562%" y="191.50">fre..</text></g><g><title>exported_symbols (170,791 samples, 0.12%)</title><rect x="81.8508%" y="165" width="0.1199%" height="15" fill="rgb(241,108,4)"/><text x="82.1008%" y="175.50"></text></g><g><title>adt_sized_constraint (431,574 samples, 0.30%)</title><rect x="85.2120%" y="133" width="0.3030%" height="15" fill="rgb(247,173,49)"/><text x="85.4620%" y="143.50"></text></g><g><title>adt_def (428,484 samples, 0.30%)</title><rect x="85.2141%" y="117" width="0.3009%" height="15" fill="rgb(224,114,35)"/><text x="85.4641%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (427,254 samples, 0.30%)</title><rect x="85.2150%" y="101" width="0.3000%" height="15" fill="rgb(245,159,27)"/><text x="85.4650%" y="111.50"></text></g><g><title>item_attrs (412,644 samples, 0.29%)</title><rect x="85.2252%" y="85" width="0.2897%" height="15" fill="rgb(245,172,44)"/><text x="85.4752%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (411,644 samples, 0.29%)</title><rect x="85.2260%" y="69" width="0.2890%" height="15" fill="rgb(236,23,11)"/><text x="85.4760%" y="79.50"></text></g><g><title>is_sized_raw (441,404 samples, 0.31%)</title><rect x="85.5306%" y="133" width="0.3099%" height="15" fill="rgb(205,117,38)"/><text x="85.7806%" y="143.50"></text></g><g><title>evaluate_obligation (327,773 samples, 0.23%)</title><rect x="85.6103%" y="117" width="0.2301%" height="15" fill="rgb(237,72,25)"/><text x="85.8603%" y="127.50"></text></g><g><title>layout_of (204,912 samples, 0.14%)</title><rect x="85.8405%" y="133" width="0.1439%" height="15" fill="rgb(244,70,9)"/><text x="86.0905%" y="143.50"></text></g><g><title>layout_of (1,539,584 samples, 1.08%)</title><rect x="84.9628%" y="149" width="1.0810%" height="15" fill="rgb(217,125,39)"/><text x="85.2128%" y="159.50"></text></g><g><title>needs_drop_raw (931,719 samples, 0.65%)</title><rect x="89.5599%" y="133" width="0.6542%" height="15" fill="rgb(235,36,10)"/><text x="89.8099%" y="143.50"></text></g><g><title>is_copy_raw (832,537 samples, 0.58%)</title><rect x="89.6295%" y="117" width="0.5846%" height="15" fill="rgb(251,123,47)"/><text x="89.8795%" y="127.50"></text></g><g><title>evaluate_obligation (668,677 samples, 0.47%)</title><rect x="89.7446%" y="101" width="0.4695%" height="15" fill="rgb(221,13,13)"/><text x="89.9946%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,097,598 samples, 4.28%)</title><rect x="86.0438%" y="149" width="4.2814%" height="15" fill="rgb(238,131,9)"/><text x="86.2938%" y="159.50">mir_d..</text></g><g><title>optimized_mir (11,823,362 samples, 8.30%)</title><rect x="82.0801%" y="165" width="8.3018%" height="15" fill="rgb(211,50,8)"/><text x="82.3301%" y="175.50">optimized_mir</text></g><g><title>generate_crate_metadata (14,548,297 samples, 10.22%)</title><rect x="80.2746%" y="181" width="10.2151%" height="15" fill="rgb(245,182,24)"/><text x="80.5246%" y="191.50">generate_crate_..</text></g><g><title>hir_lowering (3,382,034 samples, 2.37%)</title><rect x="90.4897%" y="181" width="2.3747%" height="15" fill="rgb(242,14,37)"/><text x="90.7397%" y="191.50">hi..</text></g><g><title>link_crate (893,799 samples, 0.63%)</title><rect x="92.8767%" y="165" width="0.6276%" height="15" fill="rgb(246,228,12)"/><text x="93.1267%" y="175.50"></text></g><g><title>link_binary (867,139 samples, 0.61%)</title><rect x="92.8954%" y="149" width="0.6089%" height="15" fill="rgb(213,55,15)"/><text x="93.1454%" y="159.50"></text></g><g><title>link_rlib (587,936 samples, 0.41%)</title><rect x="93.0915%" y="133" width="0.4128%" height="15" fill="rgb(209,9,3)"/><text x="93.3415%" y="143.50"></text></g><g><title>link (916,609 samples, 0.64%)</title><rect x="92.8643%" y="181" width="0.6436%" height="15" fill="rgb(230,59,30)"/><text x="93.1143%" y="191.50"></text></g><g><title>parse_crate (6,892,370 samples, 4.84%)</title><rect x="93.5079%" y="181" width="4.8395%" height="15" fill="rgb(209,121,21)"/><text x="93.7579%" y="191.50">parse_..</text></g><g><title>prepare_outputs (215,652 samples, 0.15%)</title><rect x="98.3535%" y="181" width="0.1514%" height="15" fill="rgb(220,109,13)"/><text x="98.6035%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,655,837 samples, 1.16%)</title><rect x="98.5049%" y="181" width="1.1626%" height="15" fill="rgb(232,18,1)"/><text x="98.7549%" y="191.50"></text></g><g><title>all (142,419,984 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (142,419,984 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (406,124 samples, 0.29%)</title><rect x="99.7148%" y="181" width="0.2852%" height="15" fill="rgb(240,125,3)"/><text x="99.9648%" y="191.50"></text></g></svg></svg>