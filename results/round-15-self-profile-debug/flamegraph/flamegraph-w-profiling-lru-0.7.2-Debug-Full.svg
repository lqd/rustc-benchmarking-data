<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,143,592 samples, 6.84%)</title><rect x="0.3575%" y="181" width="6.8428%" height="15" fill="rgb(227,0,7)"/><text x="0.6075%" y="191.50">LLVM_pass..</text></g><g><title>param_env (294,891 samples, 0.22%)</title><rect x="13.8242%" y="101" width="0.2207%" height="15" fill="rgb(217,0,24)"/><text x="14.0742%" y="111.50"></text></g><g><title>item_attrs (167,411 samples, 0.13%)</title><rect x="14.3870%" y="69" width="0.1253%" height="15" fill="rgb(221,193,54)"/><text x="14.6370%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (161,120 samples, 0.12%)</title><rect x="14.3917%" y="53" width="0.1206%" height="15" fill="rgb(248,212,6)"/><text x="14.6417%" y="63.50"></text></g><g><title>codegen_fn_attrs (257,982 samples, 0.19%)</title><rect x="14.3285%" y="85" width="0.1931%" height="15" fill="rgb(208,68,35)"/><text x="14.5785%" y="95.50"></text></g><g><title>is_copy_raw (200,241 samples, 0.15%)</title><rect x="15.8671%" y="69" width="0.1499%" height="15" fill="rgb(232,128,0)"/><text x="16.1171%" y="79.50"></text></g><g><title>evaluate_obligation (167,201 samples, 0.13%)</title><rect x="15.8918%" y="53" width="0.1251%" height="15" fill="rgb(207,160,47)"/><text x="16.1418%" y="63.50"></text></g><g><title>adt_drop_tys (277,302 samples, 0.21%)</title><rect x="16.0699%" y="53" width="0.2075%" height="15" fill="rgb(228,23,34)"/><text x="16.3199%" y="63.50"></text></g><g><title>needs_drop_raw (898,406 samples, 0.67%)</title><rect x="16.0169%" y="69" width="0.6723%" height="15" fill="rgb(218,30,26)"/><text x="16.2669%" y="79.50"></text></g><g><title>is_copy_raw (550,374 samples, 0.41%)</title><rect x="16.2774%" y="53" width="0.4119%" height="15" fill="rgb(220,122,19)"/><text x="16.5274%" y="63.50"></text></g><g><title>evaluate_obligation (467,483 samples, 0.35%)</title><rect x="16.3394%" y="37" width="0.3498%" height="15" fill="rgb(250,228,42)"/><text x="16.5894%" y="47.50"></text></g><g><title>specialization_graph_of (357,383 samples, 0.27%)</title><rect x="16.8937%" y="53" width="0.2675%" height="15" fill="rgb(240,193,28)"/><text x="17.1437%" y="63.50"></text></g><g><title>impl_trait_ref (133,672 samples, 0.10%)</title><rect x="17.0611%" y="37" width="0.1000%" height="15" fill="rgb(216,20,37)"/><text x="17.3111%" y="47.50"></text></g><g><title>resolve_instance (695,646 samples, 0.52%)</title><rect x="16.6893%" y="69" width="0.5206%" height="15" fill="rgb(206,188,39)"/><text x="16.9393%" y="79.50"></text></g><g><title>thir_body (752,691 samples, 0.56%)</title><rect x="17.2233%" y="69" width="0.5633%" height="15" fill="rgb(217,207,13)"/><text x="17.4733%" y="79.50"></text></g><g><title>mir_const (5,910,493 samples, 4.42%)</title><rect x="13.3733%" y="117" width="4.4232%" height="15" fill="rgb(231,73,38)"/><text x="13.6233%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (5,013,076 samples, 3.75%)</title><rect x="14.0449%" y="101" width="3.7516%" height="15" fill="rgb(225,20,46)"/><text x="14.2949%" y="111.50">unsa..</text></g><g><title>mir_built (4,376,201 samples, 3.28%)</title><rect x="14.5215%" y="85" width="3.2750%" height="15" fill="rgb(210,31,41)"/><text x="14.7715%" y="95.50">mir..</text></g><g><title>mir_promoted (6,492,817 samples, 4.86%)</title><rect x="12.9614%" y="133" width="4.8590%" height="15" fill="rgb(221,200,47)"/><text x="13.2114%" y="143.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (436,824 samples, 0.33%)</title><rect x="17.8204%" y="133" width="0.3269%" height="15" fill="rgb(226,26,5)"/><text x="18.0704%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,378,775 samples, 1.03%)</title><rect x="18.2701%" y="133" width="1.0318%" height="15" fill="rgb(249,33,26)"/><text x="18.5201%" y="143.50"></text></g><g><title>MIR_borrow_checking (15,931,801 samples, 11.92%)</title><rect x="7.3800%" y="165" width="11.9229%" height="15" fill="rgb(235,183,28)"/><text x="7.6300%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,848,430 samples, 11.86%)</title><rect x="7.4424%" y="149" width="11.8605%" height="15" fill="rgb(221,5,38)"/><text x="7.6924%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (151,261 samples, 0.11%)</title><rect x="19.3201%" y="165" width="0.1132%" height="15" fill="rgb(247,18,42)"/><text x="19.5701%" y="175.50"></text></g><g><title>codegen_fn_attrs (224,242 samples, 0.17%)</title><rect x="19.6708%" y="101" width="0.1678%" height="15" fill="rgb(241,131,45)"/><text x="19.9208%" y="111.50"></text></g><g><title>codegen_fn_attrs (371,404 samples, 0.28%)</title><rect x="19.5646%" y="133" width="0.2779%" height="15" fill="rgb(249,31,29)"/><text x="19.8146%" y="143.50"></text></g><g><title>should_inherit_track_caller (330,243 samples, 0.25%)</title><rect x="19.5954%" y="117" width="0.2471%" height="15" fill="rgb(225,111,53)"/><text x="19.8454%" y="127.50"></text></g><g><title>check_mod_attrs (530,176 samples, 0.40%)</title><rect x="19.4459%" y="149" width="0.3968%" height="15" fill="rgb(238,160,17)"/><text x="19.6959%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (441,084 samples, 0.33%)</title><rect x="19.9459%" y="149" width="0.3301%" height="15" fill="rgb(214,148,48)"/><text x="20.1959%" y="159.50"></text></g><g><title>misc_checking_1 (1,163,711 samples, 0.87%)</title><rect x="19.4336%" y="165" width="0.8709%" height="15" fill="rgb(232,36,49)"/><text x="19.6836%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (355,104 samples, 0.27%)</title><rect x="20.3055%" y="149" width="0.2657%" height="15" fill="rgb(209,103,24)"/><text x="20.5555%" y="159.50"></text></g><g><title>check_mod_liveness (288,723 samples, 0.22%)</title><rect x="20.3552%" y="133" width="0.2161%" height="15" fill="rgb(229,88,8)"/><text x="20.6052%" y="143.50"></text></g><g><title>misc_checking_2 (679,447 samples, 0.51%)</title><rect x="20.3044%" y="165" width="0.5085%" height="15" fill="rgb(213,181,19)"/><text x="20.5544%" y="175.50"></text></g><g><title>match_checking (322,923 samples, 0.24%)</title><rect x="20.5713%" y="149" width="0.2417%" height="15" fill="rgb(254,191,54)"/><text x="20.8213%" y="159.50"></text></g><g><title>check_match (301,292 samples, 0.23%)</title><rect x="20.5874%" y="133" width="0.2255%" height="15" fill="rgb(241,83,37)"/><text x="20.8374%" y="143.50"></text></g><g><title>check_private_in_public (162,612 samples, 0.12%)</title><rect x="20.8201%" y="149" width="0.1217%" height="15" fill="rgb(233,36,39)"/><text x="21.0701%" y="159.50"></text></g><g><title>death_checking (225,942 samples, 0.17%)</title><rect x="20.9418%" y="149" width="0.1691%" height="15" fill="rgb(226,3,54)"/><text x="21.1918%" y="159.50"></text></g><g><title>crate_lints (930,810 samples, 0.70%)</title><rect x="21.1118%" y="133" width="0.6966%" height="15" fill="rgb(245,192,40)"/><text x="21.3618%" y="143.50"></text></g><g><title>type_of (437,686 samples, 0.33%)</title><rect x="21.4809%" y="117" width="0.3276%" height="15" fill="rgb(238,167,29)"/><text x="21.7309%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (340,943 samples, 0.26%)</title><rect x="21.5533%" y="101" width="0.2552%" height="15" fill="rgb(232,182,51)"/><text x="21.8033%" y="111.50"></text></g><g><title>lint_checking (1,258,713 samples, 0.94%)</title><rect x="21.1108%" y="149" width="0.9420%" height="15" fill="rgb(231,60,39)"/><text x="21.3608%" y="159.50"></text></g><g><title>module_lints (326,563 samples, 0.24%)</title><rect x="21.8084%" y="133" width="0.2444%" height="15" fill="rgb(208,69,12)"/><text x="22.0584%" y="143.50"></text></g><g><title>lint_mod (324,403 samples, 0.24%)</title><rect x="21.8101%" y="117" width="0.2428%" height="15" fill="rgb(235,93,37)"/><text x="22.0601%" y="127.50"></text></g><g><title>privacy_access_levels (204,302 samples, 0.15%)</title><rect x="22.0528%" y="149" width="0.1529%" height="15" fill="rgb(213,116,39)"/><text x="22.3028%" y="159.50"></text></g><g><title>privacy_checking_modules (889,209 samples, 0.67%)</title><rect x="22.2057%" y="149" width="0.6655%" height="15" fill="rgb(222,207,29)"/><text x="22.4557%" y="159.50"></text></g><g><title>check_mod_privacy (887,699 samples, 0.66%)</title><rect x="22.2069%" y="133" width="0.6643%" height="15" fill="rgb(206,96,30)"/><text x="22.4569%" y="143.50"></text></g><g><title>misc_checking_3 (2,763,568 samples, 2.07%)</title><rect x="20.8129%" y="165" width="2.0682%" height="15" fill="rgb(218,138,4)"/><text x="21.0629%" y="175.50">m..</text></g><g><title>impl_parent (1,370,130 samples, 1.03%)</title><rect x="24.6899%" y="101" width="1.0254%" height="15" fill="rgb(250,191,14)"/><text x="24.9399%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (697,118 samples, 0.52%)</title><rect x="25.1935%" y="85" width="0.5217%" height="15" fill="rgb(239,60,40)"/><text x="25.4435%" y="95.50"></text></g><g><title>impl_trait_ref (2,831,449 samples, 2.12%)</title><rect x="25.7165%" y="101" width="2.1190%" height="15" fill="rgb(206,27,48)"/><text x="25.9665%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,338,033 samples, 1.75%)</title><rect x="26.0857%" y="85" width="1.7497%" height="15" fill="rgb(225,35,8)"/><text x="26.3357%" y="95.50"></text></g><g><title>trait_impls_of (429,083 samples, 0.32%)</title><rect x="27.9745%" y="101" width="0.3211%" height="15" fill="rgb(250,213,24)"/><text x="28.2245%" y="111.50"></text></g><g><title>coherent_trait (7,185,653 samples, 5.38%)</title><rect x="22.9303%" y="133" width="5.3775%" height="15" fill="rgb(247,123,22)"/><text x="23.1803%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (7,164,643 samples, 5.36%)</title><rect x="22.9460%" y="117" width="5.3618%" height="15" fill="rgb(231,138,38)"/><text x="23.1960%" y="127.50">special..</text></g><g><title>coherence_checking (7,273,724 samples, 5.44%)</title><rect x="22.9150%" y="149" width="5.4434%" height="15" fill="rgb(231,145,46)"/><text x="23.1650%" y="159.50">coheren..</text></g><g><title>associated_items (210,092 samples, 0.16%)</title><rect x="37.9862%" y="101" width="0.1572%" height="15" fill="rgb(251,118,11)"/><text x="38.2362%" y="111.50"></text></g><g><title>dropck_outlives (357,452 samples, 0.27%)</title><rect x="38.1751%" y="101" width="0.2675%" height="15" fill="rgb(217,147,25)"/><text x="38.4251%" y="111.50"></text></g><g><title>adt_dtorck_constraint (190,801 samples, 0.14%)</title><rect x="38.2998%" y="85" width="0.1428%" height="15" fill="rgb(247,81,37)"/><text x="38.5498%" y="95.50"></text></g><g><title>evaluate_obligation (848,028 samples, 0.63%)</title><rect x="38.4426%" y="101" width="0.6346%" height="15" fill="rgb(209,12,38)"/><text x="38.6926%" y="111.50"></text></g><g><title>method_autoderef_steps (183,900 samples, 0.14%)</title><rect x="39.3502%" y="101" width="0.1376%" height="15" fill="rgb(227,1,9)"/><text x="39.6002%" y="111.50"></text></g><g><title>object_safety_violations (145,621 samples, 0.11%)</title><rect x="39.4878%" y="101" width="0.1090%" height="15" fill="rgb(248,47,43)"/><text x="39.7378%" y="111.50"></text></g><g><title>predicates_of (212,634 samples, 0.16%)</title><rect x="39.6254%" y="101" width="0.1591%" height="15" fill="rgb(221,10,30)"/><text x="39.8754%" y="111.50"></text></g><g><title>predicates_defined_on (144,913 samples, 0.11%)</title><rect x="39.6760%" y="85" width="0.1084%" height="15" fill="rgb(210,229,1)"/><text x="39.9260%" y="95.50"></text></g><g><title>evaluate_obligation (376,585 samples, 0.28%)</title><rect x="42.7597%" y="85" width="0.2818%" height="15" fill="rgb(222,148,37)"/><text x="43.0097%" y="95.50"></text></g><g><title>typeck (4,827,378 samples, 3.61%)</title><rect x="39.8252%" y="101" width="3.6127%" height="15" fill="rgb(234,67,33)"/><text x="40.0752%" y="111.50">type..</text></g><g><title>item_bodies_checking (20,147,075 samples, 15.08%)</title><rect x="28.3848%" y="149" width="15.0774%" height="15" fill="rgb(247,98,35)"/><text x="28.6348%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,143,305 samples, 15.07%)</title><rect x="28.3876%" y="133" width="15.0746%" height="15" fill="rgb(247,138,52)"/><text x="28.6376%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (20,083,374 samples, 15.03%)</title><rect x="28.4325%" y="117" width="15.0298%" height="15" fill="rgb(213,79,30)"/><text x="28.6825%" y="127.50">typeck</text></g><g><title>item_types_checking (1,590,896 samples, 1.19%)</title><rect x="43.4623%" y="149" width="1.1906%" height="15" fill="rgb(246,177,23)"/><text x="43.7123%" y="159.50"></text></g><g><title>check_mod_item_types (1,588,146 samples, 1.19%)</title><rect x="43.4643%" y="133" width="1.1885%" height="15" fill="rgb(230,62,27)"/><text x="43.7143%" y="143.50"></text></g><g><title>fn_sig (165,482 samples, 0.12%)</title><rect x="44.8234%" y="117" width="0.1238%" height="15" fill="rgb(216,154,8)"/><text x="45.0734%" y="127.50"></text></g><g><title>is_late_bound_map (140,723 samples, 0.11%)</title><rect x="45.0306%" y="101" width="0.1053%" height="15" fill="rgb(244,35,45)"/><text x="45.2806%" y="111.50"></text></g><g><title>generics_of (307,064 samples, 0.23%)</title><rect x="44.9473%" y="117" width="0.2298%" height="15" fill="rgb(251,115,12)"/><text x="45.1973%" y="127.50"></text></g><g><title>late_bound_vars_map (175,453 samples, 0.13%)</title><rect x="45.4745%" y="69" width="0.1313%" height="15" fill="rgb(240,54,50)"/><text x="45.7245%" y="79.50"></text></g><g><title>resolve_lifetimes (168,193 samples, 0.13%)</title><rect x="45.4799%" y="53" width="0.1259%" height="15" fill="rgb(233,84,52)"/><text x="45.7299%" y="63.50"></text></g><g><title>explicit_predicates_of (407,084 samples, 0.30%)</title><rect x="45.3065%" y="85" width="0.3046%" height="15" fill="rgb(207,117,47)"/><text x="45.5565%" y="95.50"></text></g><g><title>predicates_of (836,178 samples, 0.63%)</title><rect x="45.2232%" y="117" width="0.6258%" height="15" fill="rgb(249,43,39)"/><text x="45.4732%" y="127.50"></text></g><g><title>predicates_defined_on (795,158 samples, 0.60%)</title><rect x="45.2539%" y="101" width="0.5951%" height="15" fill="rgb(209,38,44)"/><text x="45.5039%" y="111.50"></text></g><g><title>inferred_outlives_of (317,813 samples, 0.24%)</title><rect x="45.6112%" y="85" width="0.2378%" height="15" fill="rgb(236,212,23)"/><text x="45.8612%" y="95.50"></text></g><g><title>inferred_outlives_crate (297,813 samples, 0.22%)</title><rect x="45.6261%" y="69" width="0.2229%" height="15" fill="rgb(242,79,21)"/><text x="45.8761%" y="79.50"></text></g><g><title>type_of (150,122 samples, 0.11%)</title><rect x="45.7367%" y="53" width="0.1123%" height="15" fill="rgb(211,96,35)"/><text x="45.9867%" y="63.50"></text></g><g><title>type_collecting (1,744,968 samples, 1.31%)</title><rect x="44.6540%" y="149" width="1.3059%" height="15" fill="rgb(253,215,40)"/><text x="44.9040%" y="159.50"></text></g><g><title>collect_mod_item_types (1,737,718 samples, 1.30%)</title><rect x="44.6594%" y="133" width="1.3005%" height="15" fill="rgb(211,81,21)"/><text x="44.9094%" y="143.50"></text></g><g><title>type_of (148,151 samples, 0.11%)</title><rect x="45.8490%" y="117" width="0.1109%" height="15" fill="rgb(208,190,38)"/><text x="46.0990%" y="127.50"></text></g><g><title>evaluate_obligation (474,176 samples, 0.35%)</title><rect x="47.7774%" y="117" width="0.3549%" height="15" fill="rgb(235,213,38)"/><text x="48.0274%" y="127.50"></text></g><g><title>implied_outlives_bounds (303,005 samples, 0.23%)</title><rect x="48.1322%" y="117" width="0.2268%" height="15" fill="rgb(237,122,38)"/><text x="48.3822%" y="127.50"></text></g><g><title>param_env (389,116 samples, 0.29%)</title><rect x="48.3590%" y="117" width="0.2912%" height="15" fill="rgb(244,218,35)"/><text x="48.6090%" y="127.50"></text></g><g><title>region_scope_tree (315,192 samples, 0.24%)</title><rect x="48.6720%" y="117" width="0.2359%" height="15" fill="rgb(240,68,47)"/><text x="48.9220%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,786,139 samples, 2.83%)</title><rect x="46.0878%" y="133" width="2.8334%" height="15" fill="rgb(210,16,53)"/><text x="46.3378%" y="143.50">ch..</text></g><g><title>adt_sized_constraint (177,712 samples, 0.13%)</title><rect x="50.2690%" y="117" width="0.1330%" height="15" fill="rgb(235,124,12)"/><text x="50.5190%" y="127.50"></text></g><g><title>adt_sized_constraint (157,623 samples, 0.12%)</title><rect x="50.4665%" y="101" width="0.1180%" height="15" fill="rgb(224,169,11)"/><text x="50.7165%" y="111.50"></text></g><g><title>evaluate_obligation (273,273 samples, 0.20%)</title><rect x="50.4022%" y="117" width="0.2045%" height="15" fill="rgb(250,166,2)"/><text x="50.6522%" y="127.50"></text></g><g><title>implied_outlives_bounds (176,423 samples, 0.13%)</title><rect x="50.6164%" y="117" width="0.1320%" height="15" fill="rgb(242,216,29)"/><text x="50.8664%" y="127.50"></text></g><g><title>param_env (281,212 samples, 0.21%)</title><rect x="50.7484%" y="117" width="0.2105%" height="15" fill="rgb(230,116,27)"/><text x="50.9984%" y="127.50"></text></g><g><title>analysis (58,704,555 samples, 43.93%)</title><rect x="7.2002%" y="181" width="43.9326%" height="15" fill="rgb(228,99,48)"/><text x="7.4502%" y="191.50">analysis</text></g><g><title>type_check_crate (37,751,193 samples, 28.25%)</title><rect x="22.8811%" y="165" width="28.2518%" height="15" fill="rgb(253,11,6)"/><text x="23.1311%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,908,850 samples, 5.17%)</title><rect x="45.9625%" y="149" width="5.1704%" height="15" fill="rgb(247,143,39)"/><text x="46.2125%" y="159.50">wf_che..</text></g><g><title>check_item_well_formed (2,955,270 samples, 2.21%)</title><rect x="48.9213%" y="133" width="2.2116%" height="15" fill="rgb(236,97,10)"/><text x="49.1713%" y="143.50">c..</text></g><g><title>codegen_fn_attrs (170,462 samples, 0.13%)</title><rect x="54.0952%" y="133" width="0.1276%" height="15" fill="rgb(233,208,19)"/><text x="54.3452%" y="143.50"></text></g><g><title>fn_abi_of_instance (662,507 samples, 0.50%)</title><rect x="53.9983%" y="149" width="0.4958%" height="15" fill="rgb(216,164,2)"/><text x="54.2483%" y="159.50"></text></g><g><title>param_env (237,704 samples, 0.18%)</title><rect x="54.3162%" y="133" width="0.1779%" height="15" fill="rgb(220,129,5)"/><text x="54.5662%" y="143.50"></text></g><g><title>codegen_module (3,822,838 samples, 2.86%)</title><rect x="51.7374%" y="165" width="2.8609%" height="15" fill="rgb(242,17,10)"/><text x="51.9874%" y="175.50">co..</text></g><g><title>codegen_crate (4,656,617 samples, 3.48%)</title><rect x="51.1380%" y="181" width="3.4849%" height="15" fill="rgb(242,107,0)"/><text x="51.3880%" y="191.50">cod..</text></g><g><title>LLVM_module_codegen (28,539,980 samples, 21.36%)</title><rect x="54.6833%" y="165" width="21.3584%" height="15" fill="rgb(251,28,31)"/><text x="54.9333%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (25,753,172 samples, 19.27%)</title><rect x="56.7688%" y="149" width="19.2729%" height="15" fill="rgb(233,223,10)"/><text x="57.0188%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (29,837,263 samples, 22.33%)</title><rect x="54.6229%" y="181" width="22.3293%" height="15" fill="rgb(215,21,27)"/><text x="54.8729%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,216,622 samples, 0.91%)</title><rect x="76.0417%" y="165" width="0.9105%" height="15" fill="rgb(232,23,21)"/><text x="76.2917%" y="175.50"></text></g><g><title>macro_expand_crate (4,697,308 samples, 3.52%)</title><rect x="77.2126%" y="165" width="3.5153%" height="15" fill="rgb(244,5,23)"/><text x="77.4626%" y="175.50">mac..</text></g><g><title>expand_crate (4,688,178 samples, 3.51%)</title><rect x="77.2194%" y="149" width="3.5085%" height="15" fill="rgb(226,81,46)"/><text x="77.4694%" y="159.50">exp..</text></g><g><title>metadata_register_crate (433,524 samples, 0.32%)</title><rect x="80.4035%" y="133" width="0.3244%" height="15" fill="rgb(247,70,30)"/><text x="80.6535%" y="143.50"></text></g><g><title>metadata_register_crate (208,042 samples, 0.16%)</title><rect x="80.5722%" y="117" width="0.1557%" height="15" fill="rgb(212,68,19)"/><text x="80.8222%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (287,063 samples, 0.21%)</title><rect x="80.7306%" y="165" width="0.2148%" height="15" fill="rgb(240,187,13)"/><text x="80.9806%" y="175.50"></text></g><g><title>late_resolve_crate (1,474,495 samples, 1.10%)</title><rect x="81.0231%" y="149" width="1.1035%" height="15" fill="rgb(223,113,26)"/><text x="81.2731%" y="159.50"></text></g><g><title>configure_and_expand (6,999,040 samples, 5.24%)</title><rect x="76.9522%" y="181" width="5.2379%" height="15" fill="rgb(206,192,2)"/><text x="77.2022%" y="191.50">config..</text></g><g><title>resolve_crate (1,663,067 samples, 1.24%)</title><rect x="80.9454%" y="165" width="1.2446%" height="15" fill="rgb(241,108,4)"/><text x="81.1954%" y="175.50"></text></g><g><title>drop_ast (207,812 samples, 0.16%)</title><rect x="82.1900%" y="181" width="0.1555%" height="15" fill="rgb(247,173,49)"/><text x="82.4400%" y="191.50"></text></g><g><title>early_lint_checks (295,903 samples, 0.22%)</title><rect x="82.3618%" y="181" width="0.2214%" height="15" fill="rgb(224,114,35)"/><text x="82.6118%" y="191.50"></text></g><g><title>free_global_ctxt (3,321,383 samples, 2.49%)</title><rect x="82.5833%" y="181" width="2.4856%" height="15" fill="rgb(245,159,27)"/><text x="82.8333%" y="191.50">fr..</text></g><g><title>resolve_instance (135,750 samples, 0.10%)</title><rect x="86.3735%" y="101" width="0.1016%" height="15" fill="rgb(245,172,44)"/><text x="86.6235%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (626,916 samples, 0.47%)</title><rect x="86.1257%" y="117" width="0.4692%" height="15" fill="rgb(236,23,11)"/><text x="86.3757%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (160,172 samples, 0.12%)</title><rect x="86.4750%" y="101" width="0.1199%" height="15" fill="rgb(205,117,38)"/><text x="86.7250%" y="111.50"></text></g><g><title>upstream_monomorphizations (156,612 samples, 0.12%)</title><rect x="86.4777%" y="85" width="0.1172%" height="15" fill="rgb(237,72,25)"/><text x="86.7277%" y="95.50"></text></g><g><title>monomorphization_collector (648,596 samples, 0.49%)</title><rect x="86.1237%" y="133" width="0.4854%" height="15" fill="rgb(244,70,9)"/><text x="86.3737%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (857,228 samples, 0.64%)</title><rect x="86.1039%" y="149" width="0.6415%" height="15" fill="rgb(217,125,39)"/><text x="86.3539%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (182,192 samples, 0.14%)</title><rect x="86.6091%" y="133" width="0.1363%" height="15" fill="rgb(235,36,10)"/><text x="86.8591%" y="143.50"></text></g><g><title>exported_symbols (981,610 samples, 0.73%)</title><rect x="86.0857%" y="165" width="0.7346%" height="15" fill="rgb(251,123,47)"/><text x="86.3357%" y="175.50"></text></g><g><title>layout_of (229,252 samples, 0.17%)</title><rect x="88.9871%" y="133" width="0.1716%" height="15" fill="rgb(221,13,13)"/><text x="89.2371%" y="143.50"></text></g><g><title>layout_of (720,936 samples, 0.54%)</title><rect x="88.6362%" y="149" width="0.5395%" height="15" fill="rgb(238,131,9)"/><text x="88.8862%" y="159.50"></text></g><g><title>needs_drop_raw (243,273 samples, 0.18%)</title><rect x="90.9255%" y="133" width="0.1821%" height="15" fill="rgb(211,50,8)"/><text x="91.1755%" y="143.50"></text></g><g><title>is_copy_raw (211,253 samples, 0.16%)</title><rect x="90.9495%" y="117" width="0.1581%" height="15" fill="rgb(245,182,24)"/><text x="91.1995%" y="127.50"></text></g><g><title>evaluate_obligation (170,652 samples, 0.13%)</title><rect x="90.9799%" y="101" width="0.1277%" height="15" fill="rgb(242,14,37)"/><text x="91.2299%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,608,556 samples, 1.95%)</title><rect x="89.1757%" y="149" width="1.9522%" height="15" fill="rgb(246,228,12)"/><text x="89.4257%" y="159.50">m..</text></g><g><title>optimized_mir (5,666,469 samples, 4.24%)</title><rect x="86.8921%" y="165" width="4.2406%" height="15" fill="rgb(213,55,15)"/><text x="87.1421%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (8,150,573 samples, 6.10%)</title><rect x="85.0689%" y="181" width="6.0996%" height="15" fill="rgb(209,9,3)"/><text x="85.3189%" y="191.50">generate..</text></g><g><title>hir_lowering (2,067,371 samples, 1.55%)</title><rect x="91.1685%" y="181" width="1.5472%" height="15" fill="rgb(230,59,30)"/><text x="91.4185%" y="191.50"></text></g><g><title>finish_ongoing_codegen (1,812,279 samples, 1.36%)</title><rect x="92.7278%" y="165" width="1.3563%" height="15" fill="rgb(209,121,21)"/><text x="92.9778%" y="175.50"></text></g><g><title>link_crate (1,066,671 samples, 0.80%)</title><rect x="94.0840%" y="165" width="0.7983%" height="15" fill="rgb(220,109,13)"/><text x="94.3340%" y="175.50"></text></g><g><title>link_binary (1,044,570 samples, 0.78%)</title><rect x="94.1006%" y="149" width="0.7817%" height="15" fill="rgb(232,18,1)"/><text x="94.3506%" y="159.50"></text></g><g><title>link_rlib (665,237 samples, 0.50%)</title><rect x="94.3845%" y="133" width="0.4978%" height="15" fill="rgb(215,41,42)"/><text x="94.6345%" y="143.50"></text></g><g><title>link (2,902,870 samples, 2.17%)</title><rect x="92.7157%" y="181" width="2.1724%" height="15" fill="rgb(224,123,36)"/><text x="92.9657%" y="191.50">l..</text></g><g><title>parse_crate (5,133,592 samples, 3.84%)</title><rect x="94.8881%" y="181" width="3.8418%" height="15" fill="rgb(240,125,3)"/><text x="95.1381%" y="191.50">pars..</text></g><g><title>prepare_outputs (163,702 samples, 0.12%)</title><rect x="98.7344%" y="181" width="0.1225%" height="15" fill="rgb(205,98,50)"/><text x="98.9844%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,090,312 samples, 0.82%)</title><rect x="98.8569%" y="181" width="0.8160%" height="15" fill="rgb(205,185,37)"/><text x="99.1069%" y="191.50"></text></g><g><title>all (133,623,984 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (133,623,984 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (340,033 samples, 0.25%)</title><rect x="99.7455%" y="181" width="0.2545%" height="15" fill="rgb(235,201,11)"/><text x="99.9955%" y="191.50"></text></g></svg></svg>