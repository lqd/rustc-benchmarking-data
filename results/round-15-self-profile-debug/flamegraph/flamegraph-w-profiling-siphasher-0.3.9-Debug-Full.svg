<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (41,882,822 samples, 10.47%)</title><rect x="0.2247%" y="181" width="10.4707%" height="15" fill="rgb(227,0,7)"/><text x="0.4747%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (416,876 samples, 0.10%)</title><rect x="18.9179%" y="69" width="0.1042%" height="15" fill="rgb(217,0,24)"/><text x="19.1679%" y="79.50"></text></g><g><title>needs_drop_raw (425,335 samples, 0.11%)</title><rect x="19.0221%" y="69" width="0.1063%" height="15" fill="rgb(221,193,54)"/><text x="19.2721%" y="79.50"></text></g><g><title>resolve_instance (755,757 samples, 0.19%)</title><rect x="19.1284%" y="69" width="0.1889%" height="15" fill="rgb(248,212,6)"/><text x="19.3784%" y="79.50"></text></g><g><title>thir_body (2,760,839 samples, 0.69%)</title><rect x="19.3306%" y="69" width="0.6902%" height="15" fill="rgb(208,68,35)"/><text x="19.5806%" y="79.50"></text></g><g><title>mir_const (13,529,537 samples, 3.38%)</title><rect x="16.6462%" y="117" width="3.3824%" height="15" fill="rgb(232,128,0)"/><text x="16.8962%" y="127.50">mir..</text></g><g><title>unsafety_check_result (11,744,638 samples, 2.94%)</title><rect x="17.0925%" y="101" width="2.9361%" height="15" fill="rgb(207,160,47)"/><text x="17.3425%" y="111.50">un..</text></g><g><title>mir_built (10,514,226 samples, 2.63%)</title><rect x="17.4001%" y="85" width="2.6285%" height="15" fill="rgb(228,23,34)"/><text x="17.6501%" y="95.50">mi..</text></g><g><title>mir_promoted (15,830,794 samples, 3.96%)</title><rect x="16.2543%" y="133" width="3.9577%" height="15" fill="rgb(218,30,26)"/><text x="16.5043%" y="143.50">mir_..</text></g><g><title>mir_const_qualif (733,638 samples, 0.18%)</title><rect x="20.0286%" y="117" width="0.1834%" height="15" fill="rgb(220,122,19)"/><text x="20.2786%" y="127.50"></text></g><g><title>mir_const (516,622 samples, 0.13%)</title><rect x="20.0829%" y="101" width="0.1292%" height="15" fill="rgb(250,228,42)"/><text x="20.3329%" y="111.50"></text></g><g><title>type_op_prove_predicate (1,667,243 samples, 0.42%)</title><rect x="20.3327%" y="133" width="0.4168%" height="15" fill="rgb(240,193,28)"/><text x="20.5827%" y="143.50"></text></g><g><title>MIR_borrow_checking (39,657,819 samples, 9.91%)</title><rect x="10.8365%" y="165" width="9.9144%" height="15" fill="rgb(216,20,37)"/><text x="11.0865%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (39,357,566 samples, 9.84%)</title><rect x="10.9116%" y="149" width="9.8394%" height="15" fill="rgb(206,188,39)"/><text x="11.1616%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (495,495 samples, 0.12%)</title><rect x="20.7509%" y="165" width="0.1239%" height="15" fill="rgb(217,207,13)"/><text x="21.0009%" y="175.50"></text></g><g><title>codegen_fn_attrs (567,579 samples, 0.14%)</title><rect x="21.0863%" y="133" width="0.1419%" height="15" fill="rgb(231,73,38)"/><text x="21.3363%" y="143.50"></text></g><g><title>check_mod_attrs (1,082,151 samples, 0.27%)</title><rect x="20.9576%" y="149" width="0.2705%" height="15" fill="rgb(225,20,46)"/><text x="21.2076%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (776,157 samples, 0.19%)</title><rect x="21.3270%" y="149" width="0.1940%" height="15" fill="rgb(210,31,41)"/><text x="21.5770%" y="159.50"></text></g><g><title>misc_checking_1 (2,338,245 samples, 0.58%)</title><rect x="20.9519%" y="165" width="0.5846%" height="15" fill="rgb(221,200,47)"/><text x="21.2019%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (782,578 samples, 0.20%)</title><rect x="21.5369%" y="149" width="0.1956%" height="15" fill="rgb(226,26,5)"/><text x="21.7869%" y="159.50"></text></g><g><title>check_mod_liveness (597,646 samples, 0.15%)</title><rect x="21.5831%" y="133" width="0.1494%" height="15" fill="rgb(249,33,26)"/><text x="21.8331%" y="143.50"></text></g><g><title>misc_checking_2 (1,560,276 samples, 0.39%)</title><rect x="21.5365%" y="165" width="0.3901%" height="15" fill="rgb(235,183,28)"/><text x="21.7865%" y="175.50"></text></g><g><title>match_checking (776,098 samples, 0.19%)</title><rect x="21.7325%" y="149" width="0.1940%" height="15" fill="rgb(221,5,38)"/><text x="21.9825%" y="159.50"></text></g><g><title>check_match (710,687 samples, 0.18%)</title><rect x="21.7489%" y="133" width="0.1777%" height="15" fill="rgb(247,18,42)"/><text x="21.9989%" y="143.50"></text></g><g><title>death_checking (714,527 samples, 0.18%)</title><rect x="22.0170%" y="149" width="0.1786%" height="15" fill="rgb(241,131,45)"/><text x="22.2670%" y="159.50"></text></g><g><title>crate_lints (1,322,844 samples, 0.33%)</title><rect x="22.1959%" y="133" width="0.3307%" height="15" fill="rgb(249,31,29)"/><text x="22.4459%" y="143.50"></text></g><g><title>lint_checking (2,214,974 samples, 0.55%)</title><rect x="22.1956%" y="149" width="0.5537%" height="15" fill="rgb(225,111,53)"/><text x="22.4456%" y="159.50"></text></g><g><title>module_lints (890,760 samples, 0.22%)</title><rect x="22.5267%" y="133" width="0.2227%" height="15" fill="rgb(238,160,17)"/><text x="22.7767%" y="143.50"></text></g><g><title>lint_mod (886,510 samples, 0.22%)</title><rect x="22.5277%" y="117" width="0.2216%" height="15" fill="rgb(214,148,48)"/><text x="22.7777%" y="127.50"></text></g><g><title>privacy_access_levels (451,385 samples, 0.11%)</title><rect x="22.7493%" y="149" width="0.1128%" height="15" fill="rgb(232,36,49)"/><text x="22.9993%" y="159.50"></text></g><g><title>privacy_checking_modules (1,355,534 samples, 0.34%)</title><rect x="22.8622%" y="149" width="0.3389%" height="15" fill="rgb(209,103,24)"/><text x="23.1122%" y="159.50"></text></g><g><title>check_mod_privacy (1,352,654 samples, 0.34%)</title><rect x="22.8629%" y="133" width="0.3382%" height="15" fill="rgb(229,88,8)"/><text x="23.1129%" y="143.50"></text></g><g><title>misc_checking_3 (5,116,744 samples, 1.28%)</title><rect x="21.9265%" y="165" width="1.2792%" height="15" fill="rgb(213,181,19)"/><text x="22.1765%" y="175.50"></text></g><g><title>impl_parent (607,096 samples, 0.15%)</title><rect x="23.6327%" y="101" width="0.1518%" height="15" fill="rgb(254,191,54)"/><text x="23.8827%" y="111.50"></text></g><g><title>impl_trait_ref (1,465,139 samples, 0.37%)</title><rect x="23.7845%" y="101" width="0.3663%" height="15" fill="rgb(241,83,37)"/><text x="24.0345%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,207,557 samples, 0.30%)</title><rect x="23.8489%" y="85" width="0.3019%" height="15" fill="rgb(233,36,39)"/><text x="24.0989%" y="95.50"></text></g><g><title>coherent_trait (3,868,659 samples, 0.97%)</title><rect x="23.2390%" y="133" width="0.9672%" height="15" fill="rgb(226,3,54)"/><text x="23.4890%" y="143.50"></text></g><g><title>specialization_graph_of (3,337,624 samples, 0.83%)</title><rect x="23.3717%" y="117" width="0.8344%" height="15" fill="rgb(245,192,40)"/><text x="23.6217%" y="127.50"></text></g><g><title>coherence_checking (3,986,312 samples, 1.00%)</title><rect x="23.2351%" y="149" width="0.9966%" height="15" fill="rgb(238,167,29)"/><text x="23.4851%" y="159.50"></text></g><g><title>associated_item (734,928 samples, 0.18%)</title><rect x="34.8337%" y="85" width="0.1837%" height="15" fill="rgb(232,182,51)"/><text x="35.0837%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (591,537 samples, 0.15%)</title><rect x="34.8696%" y="69" width="0.1479%" height="15" fill="rgb(231,60,39)"/><text x="35.1196%" y="79.50"></text></g><g><title>associated_items (985,513 samples, 0.25%)</title><rect x="34.7803%" y="101" width="0.2464%" height="15" fill="rgb(208,69,12)"/><text x="35.0303%" y="111.50"></text></g><g><title>generics_of (834,088 samples, 0.21%)</title><rect x="36.5746%" y="85" width="0.2085%" height="15" fill="rgb(235,93,37)"/><text x="36.8246%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (643,165 samples, 0.16%)</title><rect x="36.6223%" y="69" width="0.1608%" height="15" fill="rgb(213,116,39)"/><text x="36.8723%" y="79.50"></text></g><g><title>impl_trait_ref (1,384,145 samples, 0.35%)</title><rect x="36.8295%" y="85" width="0.3460%" height="15" fill="rgb(222,207,29)"/><text x="37.0795%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (969,301 samples, 0.24%)</title><rect x="36.9332%" y="69" width="0.2423%" height="15" fill="rgb(206,96,30)"/><text x="37.1832%" y="79.50"></text></g><g><title>predicates_of (572,804 samples, 0.14%)</title><rect x="37.1890%" y="85" width="0.1432%" height="15" fill="rgb(218,138,4)"/><text x="37.4390%" y="95.50"></text></g><g><title>specializes (1,525,597 samples, 0.38%)</title><rect x="37.3322%" y="85" width="0.3814%" height="15" fill="rgb(250,191,14)"/><text x="37.5822%" y="95.50"></text></g><g><title>param_env (960,610 samples, 0.24%)</title><rect x="37.4735%" y="69" width="0.2402%" height="15" fill="rgb(239,60,40)"/><text x="37.7235%" y="79.50"></text></g><g><title>def_span (465,185 samples, 0.12%)</title><rect x="37.5973%" y="53" width="0.1163%" height="15" fill="rgb(206,27,48)"/><text x="37.8473%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (421,474 samples, 0.11%)</title><rect x="37.6083%" y="37" width="0.1054%" height="15" fill="rgb(225,35,8)"/><text x="37.8583%" y="47.50"></text></g><g><title>trait_impls_of (405,976 samples, 0.10%)</title><rect x="37.7186%" y="85" width="0.1015%" height="15" fill="rgb(250,213,24)"/><text x="37.9686%" y="95.50"></text></g><g><title>evaluate_obligation (10,678,950 samples, 2.67%)</title><rect x="35.1599%" y="101" width="2.6697%" height="15" fill="rgb(247,123,22)"/><text x="35.4099%" y="111.50">ev..</text></g><g><title>item_bodies_checking (57,151,633 samples, 14.29%)</title><rect x="24.2466%" y="149" width="14.2879%" height="15" fill="rgb(231,138,38)"/><text x="24.4966%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,148,713 samples, 14.29%)</title><rect x="24.2474%" y="133" width="14.2871%" height="15" fill="rgb(231,145,46)"/><text x="24.4974%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (56,925,419 samples, 14.23%)</title><rect x="24.3032%" y="117" width="14.2313%" height="15" fill="rgb(251,118,11)"/><text x="24.5532%" y="127.50">typeck</text></g><g><title>item_types_checking (1,593,227 samples, 0.40%)</title><rect x="38.5345%" y="149" width="0.3983%" height="15" fill="rgb(217,147,25)"/><text x="38.7845%" y="159.50"></text></g><g><title>check_mod_item_types (1,589,207 samples, 0.40%)</title><rect x="38.5355%" y="133" width="0.3973%" height="15" fill="rgb(247,81,37)"/><text x="38.7855%" y="143.50"></text></g><g><title>fn_sig (512,755 samples, 0.13%)</title><rect x="39.0608%" y="117" width="0.1282%" height="15" fill="rgb(209,12,38)"/><text x="39.3108%" y="127.50"></text></g><g><title>named_region_map (408,865 samples, 0.10%)</title><rect x="39.2408%" y="101" width="0.1022%" height="15" fill="rgb(227,1,9)"/><text x="39.4908%" y="111.50"></text></g><g><title>generics_of (641,750 samples, 0.16%)</title><rect x="39.1890%" y="117" width="0.1604%" height="15" fill="rgb(248,47,43)"/><text x="39.4390%" y="127.50"></text></g><g><title>predicates_of (907,058 samples, 0.23%)</title><rect x="39.3635%" y="117" width="0.2268%" height="15" fill="rgb(221,10,30)"/><text x="39.6135%" y="127.50"></text></g><g><title>predicates_defined_on (805,858 samples, 0.20%)</title><rect x="39.3888%" y="101" width="0.2015%" height="15" fill="rgb(210,229,1)"/><text x="39.6388%" y="111.50"></text></g><g><title>type_collecting (2,796,549 samples, 0.70%)</title><rect x="38.9332%" y="149" width="0.6991%" height="15" fill="rgb(222,148,37)"/><text x="39.1832%" y="159.50"></text></g><g><title>collect_mod_item_types (2,784,109 samples, 0.70%)</title><rect x="38.9363%" y="133" width="0.6960%" height="15" fill="rgb(234,67,33)"/><text x="39.1863%" y="143.50"></text></g><g><title>evaluate_obligation (574,326 samples, 0.14%)</title><rect x="40.6117%" y="117" width="0.1436%" height="15" fill="rgb(247,98,35)"/><text x="40.8617%" y="127.50"></text></g><g><title>param_env (567,776 samples, 0.14%)</title><rect x="40.8220%" y="117" width="0.1419%" height="15" fill="rgb(247,138,52)"/><text x="41.0720%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,852,246 samples, 1.46%)</title><rect x="39.7284%" y="133" width="1.4631%" height="15" fill="rgb(213,79,30)"/><text x="39.9784%" y="143.50"></text></g><g><title>region_scope_tree (887,468 samples, 0.22%)</title><rect x="40.9696%" y="117" width="0.2219%" height="15" fill="rgb(246,177,23)"/><text x="41.2196%" y="127.50"></text></g><g><title>evaluate_obligation (497,455 samples, 0.12%)</title><rect x="41.6558%" y="117" width="0.1244%" height="15" fill="rgb(230,62,27)"/><text x="41.9058%" y="127.50"></text></g><g><title>check_item_well_formed (3,102,719 samples, 0.78%)</title><rect x="41.1914%" y="133" width="0.7757%" height="15" fill="rgb(216,154,8)"/><text x="41.4414%" y="143.50"></text></g><g><title>analysis (125,272,832 samples, 31.32%)</title><rect x="10.6953%" y="181" width="31.3181%" height="15" fill="rgb(244,35,45)"/><text x="10.9453%" y="191.50">analysis</text></g><g><title>type_check_crate (75,231,144 samples, 18.81%)</title><rect x="23.2057%" y="165" width="18.8077%" height="15" fill="rgb(251,115,12)"/><text x="23.4557%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,510,740 samples, 2.38%)</title><rect x="39.6358%" y="149" width="2.3777%" height="15" fill="rgb(240,54,50)"/><text x="39.8858%" y="159.50">wf..</text></g><g><title>const_caller_location (641,859 samples, 0.16%)</title><rect x="47.4421%" y="149" width="0.1605%" height="15" fill="rgb(233,84,52)"/><text x="47.6921%" y="159.50"></text></g><g><title>codegen_fn_attrs (421,784 samples, 0.11%)</title><rect x="47.8386%" y="133" width="0.1054%" height="15" fill="rgb(207,117,47)"/><text x="48.0886%" y="143.50"></text></g><g><title>param_env (882,443 samples, 0.22%)</title><rect x="47.9934%" y="133" width="0.2206%" height="15" fill="rgb(249,43,39)"/><text x="48.2434%" y="143.50"></text></g><g><title>normalize_projection_ty (445,763 samples, 0.11%)</title><rect x="48.2831%" y="117" width="0.1114%" height="15" fill="rgb(209,38,44)"/><text x="48.5331%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (737,595 samples, 0.18%)</title><rect x="48.2141%" y="133" width="0.1844%" height="15" fill="rgb(236,212,23)"/><text x="48.4641%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,201,023 samples, 0.80%)</title><rect x="47.6025%" y="149" width="0.8003%" height="15" fill="rgb(242,79,21)"/><text x="47.8525%" y="159.50"></text></g><g><title>codegen_module (23,913,890 samples, 5.98%)</title><rect x="42.6103%" y="165" width="5.9785%" height="15" fill="rgb(211,96,35)"/><text x="42.8603%" y="175.50">codegen_..</text></g><g><title>codegen_crate (26,312,818 samples, 6.58%)</title><rect x="42.0163%" y="181" width="6.5782%" height="15" fill="rgb(253,215,40)"/><text x="42.2663%" y="191.50">codegen_c..</text></g><g><title>LLVM_module_codegen (117,401,748 samples, 29.35%)</title><rect x="48.6434%" y="165" width="29.3503%" height="15" fill="rgb(211,81,21)"/><text x="48.8934%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (111,066,608 samples, 27.77%)</title><rect x="50.2272%" y="149" width="27.7666%" height="15" fill="rgb(208,190,38)"/><text x="50.4772%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (123,465,990 samples, 30.87%)</title><rect x="48.5945%" y="181" width="30.8664%" height="15" fill="rgb(235,213,38)"/><text x="48.8445%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,868,730 samples, 1.47%)</title><rect x="77.9937%" y="165" width="1.4672%" height="15" fill="rgb(237,122,38)"/><text x="78.2437%" y="175.50"></text></g><g><title>macro_expand_crate (25,062,144 samples, 6.27%)</title><rect x="79.6064%" y="165" width="6.2655%" height="15" fill="rgb(244,218,35)"/><text x="79.8564%" y="175.50">macro_ex..</text></g><g><title>expand_crate (25,048,334 samples, 6.26%)</title><rect x="79.6099%" y="149" width="6.2621%" height="15" fill="rgb(240,68,47)"/><text x="79.8599%" y="159.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (533,995 samples, 0.13%)</title><rect x="85.7384%" y="133" width="0.1335%" height="15" fill="rgb(210,16,53)"/><text x="85.9884%" y="143.50"></text></g><g><title>late_resolve_crate (3,219,154 samples, 0.80%)</title><rect x="85.9612%" y="149" width="0.8048%" height="15" fill="rgb(235,124,12)"/><text x="86.2112%" y="159.50"></text></g><g><title>configure_and_expand (29,418,570 samples, 7.35%)</title><rect x="79.4609%" y="181" width="7.3546%" height="15" fill="rgb(224,169,11)"/><text x="79.7109%" y="191.50">configure_..</text></g><g><title>resolve_crate (3,671,718 samples, 0.92%)</title><rect x="85.8976%" y="165" width="0.9179%" height="15" fill="rgb(250,166,2)"/><text x="86.1476%" y="175.50"></text></g><g><title>early_lint_checks (798,078 samples, 0.20%)</title><rect x="86.9100%" y="181" width="0.1995%" height="15" fill="rgb(242,216,29)"/><text x="87.1600%" y="191.50"></text></g><g><title>free_global_ctxt (3,305,375 samples, 0.83%)</title><rect x="87.1095%" y="181" width="0.8263%" height="15" fill="rgb(230,116,27)"/><text x="87.3595%" y="191.50"></text></g><g><title>optimized_mir (3,292,323 samples, 0.82%)</title><rect x="88.9145%" y="101" width="0.8231%" height="15" fill="rgb(228,99,48)"/><text x="89.1645%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,401,718 samples, 0.35%)</title><rect x="89.3871%" y="85" width="0.3504%" height="15" fill="rgb(253,11,6)"/><text x="89.6371%" y="95.50"></text></g><g><title>resolve_instance (1,047,592 samples, 0.26%)</title><rect x="89.7376%" y="101" width="0.2619%" height="15" fill="rgb(247,143,39)"/><text x="89.9876%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (401,003 samples, 0.10%)</title><rect x="90.0503%" y="69" width="0.1003%" height="15" fill="rgb(236,97,10)"/><text x="90.3003%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (6,095,304 samples, 1.52%)</title><rect x="88.6307%" y="117" width="1.5238%" height="15" fill="rgb(233,208,19)"/><text x="88.8807%" y="127.50"></text></g><g><title>vtable_entries (576,975 samples, 0.14%)</title><rect x="90.0103%" y="101" width="0.1442%" height="15" fill="rgb(216,164,2)"/><text x="90.2603%" y="111.50"></text></g><g><title>resolve_instance (468,114 samples, 0.12%)</title><rect x="90.0375%" y="85" width="0.1170%" height="15" fill="rgb(220,129,5)"/><text x="90.2875%" y="95.50"></text></g><g><title>monomorphization_collector (6,196,235 samples, 1.55%)</title><rect x="88.6298%" y="133" width="1.5491%" height="15" fill="rgb(242,17,10)"/><text x="88.8798%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (577,836 samples, 0.14%)</title><rect x="90.1799%" y="117" width="0.1445%" height="15" fill="rgb(242,107,0)"/><text x="90.4299%" y="127.50"></text></g><g><title>symbol_name (517,116 samples, 0.13%)</title><rect x="90.1951%" y="101" width="0.1293%" height="15" fill="rgb(251,28,31)"/><text x="90.4451%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (7,284,807 samples, 1.82%)</title><rect x="88.6218%" y="149" width="1.8212%" height="15" fill="rgb(233,223,10)"/><text x="88.8718%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,056,381 samples, 0.26%)</title><rect x="90.1789%" y="133" width="0.2641%" height="15" fill="rgb(215,21,27)"/><text x="90.4289%" y="143.50"></text></g><g><title>cgu_partitioning (474,335 samples, 0.12%)</title><rect x="90.3244%" y="117" width="0.1186%" height="15" fill="rgb(232,23,21)"/><text x="90.5744%" y="127.50"></text></g><g><title>exported_symbols (7,537,049 samples, 1.88%)</title><rect x="88.6101%" y="165" width="1.8843%" height="15" fill="rgb(244,5,23)"/><text x="88.8601%" y="175.50">e..</text></g><g><title>layout_of (745,477 samples, 0.19%)</title><rect x="91.7255%" y="149" width="0.1864%" height="15" fill="rgb(226,81,46)"/><text x="91.9755%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,403,354 samples, 1.10%)</title><rect x="91.9119%" y="149" width="1.1008%" height="15" fill="rgb(247,70,30)"/><text x="92.1619%" y="159.50"></text></g><g><title>optimized_mir (9,899,473 samples, 2.47%)</title><rect x="90.5407%" y="165" width="2.4749%" height="15" fill="rgb(212,68,19)"/><text x="90.7907%" y="175.50">op..</text></g><g><title>generate_crate_metadata (20,436,295 samples, 5.11%)</title><rect x="87.9359%" y="181" width="5.1091%" height="15" fill="rgb(240,187,13)"/><text x="88.1859%" y="191.50">genera..</text></g><g><title>hir_lowering (5,809,152 samples, 1.45%)</title><rect x="93.0449%" y="181" width="1.4523%" height="15" fill="rgb(223,113,26)"/><text x="93.2949%" y="191.50"></text></g><g><title>finish_ongoing_codegen (16,318,503 samples, 4.08%)</title><rect x="94.5391%" y="165" width="4.0796%" height="15" fill="rgb(206,192,2)"/><text x="94.7891%" y="175.50">fini..</text></g><g><title>link_crate (1,739,809 samples, 0.43%)</title><rect x="98.6187%" y="165" width="0.4350%" height="15" fill="rgb(241,108,4)"/><text x="98.8687%" y="175.50"></text></g><g><title>link_binary (1,721,739 samples, 0.43%)</title><rect x="98.6232%" y="149" width="0.4304%" height="15" fill="rgb(247,173,49)"/><text x="98.8732%" y="159.50"></text></g><g><title>link_rlib (1,167,132 samples, 0.29%)</title><rect x="98.7619%" y="133" width="0.2918%" height="15" fill="rgb(224,114,35)"/><text x="99.0119%" y="143.50"></text></g><g><title>link (18,234,993 samples, 4.56%)</title><rect x="94.4972%" y="181" width="4.5587%" height="15" fill="rgb(245,159,27)"/><text x="94.7472%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (2,712,178 samples, 0.68%)</title><rect x="99.1959%" y="181" width="0.6780%" height="15" fill="rgb(245,172,44)"/><text x="99.4459%" y="191.50"></text></g><g><title>all (400,001,388 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (400,001,388 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (418,755 samples, 0.10%)</title><rect x="99.8953%" y="181" width="0.1047%" height="15" fill="rgb(237,72,25)"/><text x="100.1453%" y="191.50"></text></g></svg></svg>