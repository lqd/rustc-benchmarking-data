<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (197,617,590 samples, 12.09%)</title><rect x="0.0610%" y="149" width="12.0949%" height="15" fill="rgb(227,0,7)"/><text x="0.3110%" y="159.50">LLVM_passes</text></g><g><title>resolve_instance (1,908,827 samples, 0.12%)</title><rect x="15.9648%" y="37" width="0.1168%" height="15" fill="rgb(217,0,24)"/><text x="16.2148%" y="47.50"></text></g><g><title>thir_body (4,159,118 samples, 0.25%)</title><rect x="16.0878%" y="37" width="0.2546%" height="15" fill="rgb(221,193,54)"/><text x="16.3378%" y="47.50"></text></g><g><title>mir_const (24,434,433 samples, 1.50%)</title><rect x="14.8518%" y="85" width="1.4955%" height="15" fill="rgb(248,212,6)"/><text x="15.1018%" y="95.50"></text></g><g><title>unsafety_check_result (20,779,736 samples, 1.27%)</title><rect x="15.0754%" y="69" width="1.2718%" height="15" fill="rgb(208,68,35)"/><text x="15.3254%" y="79.50"></text></g><g><title>mir_built (18,376,761 samples, 1.12%)</title><rect x="15.2225%" y="53" width="1.1247%" height="15" fill="rgb(232,128,0)"/><text x="15.4725%" y="63.50"></text></g><g><title>mir_promoted (27,647,248 samples, 1.69%)</title><rect x="14.6723%" y="101" width="1.6921%" height="15" fill="rgb(207,160,47)"/><text x="14.9223%" y="111.50"></text></g><g><title>type_op_prove_predicate (5,172,859 samples, 0.32%)</title><rect x="16.4852%" y="101" width="0.3166%" height="15" fill="rgb(228,23,34)"/><text x="16.7352%" y="111.50"></text></g><g><title>MIR_borrow_checking (75,077,320 samples, 4.60%)</title><rect x="12.2075%" y="133" width="4.5950%" height="15" fill="rgb(218,30,26)"/><text x="12.4575%" y="143.50">MIR_b..</text></g><g><title>mir_borrowck (74,567,684 samples, 4.56%)</title><rect x="12.2387%" y="117" width="4.5638%" height="15" fill="rgb(220,122,19)"/><text x="12.4887%" y="127.50">mir_b..</text></g><g><title>misc_checking_1 (3,580,516 samples, 0.22%)</title><rect x="16.8550%" y="133" width="0.2191%" height="15" fill="rgb(250,228,42)"/><text x="17.1050%" y="143.50"></text></g><g><title>misc_checking_2 (3,551,335 samples, 0.22%)</title><rect x="17.0741%" y="133" width="0.2174%" height="15" fill="rgb(240,193,28)"/><text x="17.3241%" y="143.50"></text></g><g><title>match_checking (2,350,903 samples, 0.14%)</title><rect x="17.1476%" y="117" width="0.1439%" height="15" fill="rgb(216,20,37)"/><text x="17.3976%" y="127.50"></text></g><g><title>check_match (2,235,602 samples, 0.14%)</title><rect x="17.1546%" y="101" width="0.1368%" height="15" fill="rgb(206,188,39)"/><text x="17.4046%" y="111.50"></text></g><g><title>crate_lints (2,994,590 samples, 0.18%)</title><rect x="17.4064%" y="101" width="0.1833%" height="15" fill="rgb(217,207,13)"/><text x="17.6564%" y="111.50"></text></g><g><title>lint_checking (4,334,094 samples, 0.27%)</title><rect x="17.4063%" y="117" width="0.2653%" height="15" fill="rgb(231,73,38)"/><text x="17.6563%" y="127.50"></text></g><g><title>privacy_checking_modules (2,603,606 samples, 0.16%)</title><rect x="17.7278%" y="117" width="0.1594%" height="15" fill="rgb(225,20,46)"/><text x="17.9778%" y="127.50"></text></g><g><title>check_mod_privacy (2,599,136 samples, 0.16%)</title><rect x="17.7281%" y="101" width="0.1591%" height="15" fill="rgb(210,31,41)"/><text x="17.9781%" y="111.50"></text></g><g><title>misc_checking_3 (9,768,158 samples, 0.60%)</title><rect x="17.2915%" y="133" width="0.5978%" height="15" fill="rgb(221,200,47)"/><text x="17.5415%" y="143.50"></text></g><g><title>impl_parent (3,178,121 samples, 0.19%)</title><rect x="18.2722%" y="69" width="0.1945%" height="15" fill="rgb(226,26,5)"/><text x="18.5222%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,860,234 samples, 0.11%)</title><rect x="18.3529%" y="53" width="0.1139%" height="15" fill="rgb(249,33,26)"/><text x="18.6029%" y="63.50"></text></g><g><title>impl_trait_ref (6,587,004 samples, 0.40%)</title><rect x="18.4667%" y="69" width="0.4031%" height="15" fill="rgb(235,183,28)"/><text x="18.7167%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,934,070 samples, 0.30%)</title><rect x="18.5679%" y="53" width="0.3020%" height="15" fill="rgb(221,5,38)"/><text x="18.8179%" y="63.50"></text></g><g><title>coherent_trait (16,955,901 samples, 1.04%)</title><rect x="17.9028%" y="101" width="1.0378%" height="15" fill="rgb(247,18,42)"/><text x="18.1528%" y="111.50"></text></g><g><title>specialization_graph_of (16,340,015 samples, 1.00%)</title><rect x="17.9405%" y="85" width="1.0001%" height="15" fill="rgb(241,131,45)"/><text x="18.1905%" y="95.50"></text></g><g><title>coherence_checking (17,102,853 samples, 1.05%)</title><rect x="17.9010%" y="117" width="1.0468%" height="15" fill="rgb(249,31,29)"/><text x="18.1510%" y="127.50"></text></g><g><title>evaluate_obligation (9,490,466 samples, 0.58%)</title><rect x="22.6225%" y="69" width="0.5809%" height="15" fill="rgb(225,111,53)"/><text x="22.8725%" y="79.50"></text></g><g><title>evaluate_obligation (2,136,528 samples, 0.13%)</title><rect x="24.4477%" y="53" width="0.1308%" height="15" fill="rgb(238,160,17)"/><text x="24.6977%" y="63.50"></text></g><g><title>typeck (19,627,868 samples, 1.20%)</title><rect x="23.4500%" y="69" width="1.2013%" height="15" fill="rgb(214,148,48)"/><text x="23.7000%" y="79.50"></text></g><g><title>item_bodies_checking (93,223,944 samples, 5.71%)</title><rect x="18.9536%" y="117" width="5.7057%" height="15" fill="rgb(232,36,49)"/><text x="19.2036%" y="127.50">item_bo..</text></g><g><title>typeck_item_bodies (93,219,873 samples, 5.71%)</title><rect x="18.9539%" y="101" width="5.7054%" height="15" fill="rgb(209,103,24)"/><text x="19.2039%" y="111.50">typeck_..</text></g><g><title>typeck (92,894,551 samples, 5.69%)</title><rect x="18.9738%" y="85" width="5.6855%" height="15" fill="rgb(229,88,8)"/><text x="19.2238%" y="95.50">typeck</text></g><g><title>item_types_checking (3,562,216 samples, 0.22%)</title><rect x="24.6593%" y="117" width="0.2180%" height="15" fill="rgb(213,181,19)"/><text x="24.9093%" y="127.50"></text></g><g><title>check_mod_item_types (3,557,285 samples, 0.22%)</title><rect x="24.6596%" y="101" width="0.2177%" height="15" fill="rgb(254,191,54)"/><text x="24.9096%" y="111.50"></text></g><g><title>type_collecting (5,124,172 samples, 0.31%)</title><rect x="24.8776%" y="117" width="0.3136%" height="15" fill="rgb(241,83,37)"/><text x="25.1276%" y="127.50"></text></g><g><title>collect_mod_item_types (5,107,772 samples, 0.31%)</title><rect x="24.8786%" y="101" width="0.3126%" height="15" fill="rgb(233,36,39)"/><text x="25.1286%" y="111.50"></text></g><g><title>check_impl_item_well_formed (10,014,971 samples, 0.61%)</title><rect x="25.2314%" y="101" width="0.6130%" height="15" fill="rgb(226,3,54)"/><text x="25.4814%" y="111.50"></text></g><g><title>check_item_well_formed (5,370,011 samples, 0.33%)</title><rect x="25.8443%" y="101" width="0.3287%" height="15" fill="rgb(245,192,40)"/><text x="26.0943%" y="111.50"></text></g><g><title>analysis (229,759,075 samples, 14.06%)</title><rect x="12.1559%" y="149" width="14.0621%" height="15" fill="rgb(238,167,29)"/><text x="12.4059%" y="159.50">analysis</text></g><g><title>type_check_crate (136,081,958 samples, 8.33%)</title><rect x="17.8893%" y="133" width="8.3287%" height="15" fill="rgb(232,182,51)"/><text x="18.1393%" y="143.50">type_check_c..</text></g><g><title>wf_checking (16,758,720 samples, 1.03%)</title><rect x="25.1923%" y="117" width="1.0257%" height="15" fill="rgb(231,60,39)"/><text x="25.4423%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (2,931,131 samples, 0.18%)</title><rect x="35.4865%" y="117" width="0.1794%" height="15" fill="rgb(208,69,12)"/><text x="35.7365%" y="127.50"></text></g><g><title>const_caller_location (2,296,672 samples, 0.14%)</title><rect x="35.6659%" y="117" width="0.1406%" height="15" fill="rgb(235,93,37)"/><text x="35.9159%" y="127.50"></text></g><g><title>layout_of (1,932,509 samples, 0.12%)</title><rect x="36.3075%" y="101" width="0.1183%" height="15" fill="rgb(213,116,39)"/><text x="36.5575%" y="111.50"></text></g><g><title>predicates_of (1,817,921 samples, 0.11%)</title><rect x="36.6857%" y="85" width="0.1113%" height="15" fill="rgb(222,207,29)"/><text x="36.9357%" y="95.50"></text></g><g><title>param_env (6,069,614 samples, 0.37%)</title><rect x="36.4258%" y="101" width="0.3715%" height="15" fill="rgb(206,96,30)"/><text x="36.6758%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,215,092 samples, 0.14%)</title><rect x="36.7973%" y="101" width="0.1356%" height="15" fill="rgb(218,138,4)"/><text x="37.0473%" y="111.50"></text></g><g><title>fn_abi_of_instance (18,403,323 samples, 1.13%)</title><rect x="35.8084%" y="117" width="1.1264%" height="15" fill="rgb(250,191,14)"/><text x="36.0584%" y="127.50"></text></g><g><title>layout_of (2,820,249 samples, 0.17%)</title><rect x="36.9968%" y="117" width="0.1726%" height="15" fill="rgb(239,60,40)"/><text x="37.2468%" y="127.50"></text></g><g><title>codegen_module (177,224,452 samples, 10.85%)</title><rect x="26.3754%" y="133" width="10.8468%" height="15" fill="rgb(206,27,48)"/><text x="26.6254%" y="143.50">codegen_module</text></g><g><title>codegen_crate (179,865,651 samples, 11.01%)</title><rect x="26.2187%" y="149" width="11.0084%" height="15" fill="rgb(225,35,8)"/><text x="26.4687%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (775,941,415 samples, 47.49%)</title><rect x="37.2425%" y="133" width="47.4905%" height="15" fill="rgb(250,213,24)"/><text x="37.4925%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (747,245,575 samples, 45.73%)</title><rect x="38.9988%" y="117" width="45.7342%" height="15" fill="rgb(247,123,22)"/><text x="39.2488%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (839,510,907 samples, 51.38%)</title><rect x="37.2272%" y="149" width="51.3812%" height="15" fill="rgb(231,138,38)"/><text x="37.4772%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (63,319,170 samples, 3.88%)</title><rect x="84.7330%" y="133" width="3.8754%" height="15" fill="rgb(231,145,46)"/><text x="84.9830%" y="143.50">LLVM..</text></g><g><title>metadata_register_crate (2,680,927 samples, 0.16%)</title><rect x="91.2758%" y="101" width="0.1641%" height="15" fill="rgb(251,118,11)"/><text x="91.5258%" y="111.50"></text></g><g><title>macro_expand_crate (46,502,611 samples, 2.85%)</title><rect x="88.6593%" y="133" width="2.8461%" height="15" fill="rgb(217,147,25)"/><text x="88.9093%" y="143.50">ma..</text></g><g><title>expand_crate (46,480,520 samples, 2.84%)</title><rect x="88.6607%" y="117" width="2.8448%" height="15" fill="rgb(247,81,37)"/><text x="88.9107%" y="127.50">ex..</text></g><g><title>late_resolve_crate (4,535,296 samples, 0.28%)</title><rect x="91.5296%" y="117" width="0.2776%" height="15" fill="rgb(209,12,38)"/><text x="91.7796%" y="127.50"></text></g><g><title>configure_and_expand (52,563,372 samples, 3.22%)</title><rect x="88.6083%" y="149" width="3.2171%" height="15" fill="rgb(227,1,9)"/><text x="88.8583%" y="159.50">con..</text></g><g><title>resolve_crate (5,157,642 samples, 0.32%)</title><rect x="91.5098%" y="133" width="0.3157%" height="15" fill="rgb(248,47,43)"/><text x="91.7598%" y="143.50"></text></g><g><title>free_global_ctxt (11,135,023 samples, 0.68%)</title><rect x="91.9295%" y="149" width="0.6815%" height="15" fill="rgb(221,10,30)"/><text x="92.1795%" y="159.50"></text></g><g><title>item_attrs (1,832,954 samples, 0.11%)</title><rect x="93.4119%" y="53" width="0.1122%" height="15" fill="rgb(210,229,1)"/><text x="93.6619%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,748,944 samples, 0.11%)</title><rect x="93.4170%" y="37" width="0.1070%" height="15" fill="rgb(222,148,37)"/><text x="93.6670%" y="47.50"></text></g><g><title>codegen_fn_attrs (2,987,065 samples, 0.18%)</title><rect x="93.3800%" y="69" width="0.1828%" height="15" fill="rgb(234,67,33)"/><text x="93.6300%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,770,827 samples, 0.23%)</title><rect x="94.2552%" y="53" width="0.2308%" height="15" fill="rgb(247,98,35)"/><text x="94.5052%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,014,416 samples, 0.49%)</title><rect x="94.4860%" y="53" width="0.4905%" height="15" fill="rgb(247,138,52)"/><text x="94.7360%" y="63.50"></text></g><g><title>optimized_mir (21,222,616 samples, 1.30%)</title><rect x="93.6934%" y="69" width="1.2989%" height="15" fill="rgb(213,79,30)"/><text x="93.9434%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (10,464,662 samples, 0.64%)</title><rect x="95.1888%" y="53" width="0.6405%" height="15" fill="rgb(246,177,23)"/><text x="95.4388%" y="63.50"></text></g><g><title>resolve_instance (17,638,031 samples, 1.08%)</title><rect x="94.9923%" y="69" width="1.0795%" height="15" fill="rgb(230,62,27)"/><text x="95.2423%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,805,850 samples, 0.11%)</title><rect x="96.1198%" y="69" width="0.1105%" height="15" fill="rgb(216,154,8)"/><text x="96.3698%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (55,758,474 samples, 3.41%)</title><rect x="92.8625%" y="85" width="3.4126%" height="15" fill="rgb(244,35,45)"/><text x="93.1125%" y="95.50">mon..</text></g><g><title>monomorphization_collector (55,987,627 samples, 3.43%)</title><rect x="92.8622%" y="101" width="3.4267%" height="15" fill="rgb(251,115,12)"/><text x="93.1122%" y="111.50">mon..</text></g><g><title>assert_symbols_are_distinct (5,881,800 samples, 0.36%)</title><rect x="96.2897%" y="85" width="0.3600%" height="15" fill="rgb(240,54,50)"/><text x="96.5397%" y="95.50"></text></g><g><title>symbol_name (5,221,943 samples, 0.32%)</title><rect x="96.3301%" y="69" width="0.3196%" height="15" fill="rgb(233,84,52)"/><text x="96.5801%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (64,582,694 samples, 3.95%)</title><rect x="92.8577%" y="117" width="3.9527%" height="15" fill="rgb(207,117,47)"/><text x="93.1077%" y="127.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (8,521,856 samples, 0.52%)</title><rect x="96.2889%" y="101" width="0.5216%" height="15" fill="rgb(249,43,39)"/><text x="96.5389%" y="111.50"></text></g><g><title>cgu_partitioning (2,627,036 samples, 0.16%)</title><rect x="96.6497%" y="85" width="0.1608%" height="15" fill="rgb(209,38,44)"/><text x="96.8997%" y="95.50"></text></g><g><title>exported_symbols (65,143,649 samples, 3.99%)</title><rect x="92.8411%" y="133" width="3.9870%" height="15" fill="rgb(236,212,23)"/><text x="93.0911%" y="143.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,311,516 samples, 0.33%)</title><rect x="97.1794%" y="117" width="0.3251%" height="15" fill="rgb(242,79,21)"/><text x="97.4294%" y="127.50"></text></g><g><title>optimized_mir (10,852,171 samples, 0.66%)</title><rect x="96.8418%" y="133" width="0.6642%" height="15" fill="rgb(211,96,35)"/><text x="97.0918%" y="143.50"></text></g><g><title>generate_crate_metadata (80,114,631 samples, 4.90%)</title><rect x="92.6110%" y="149" width="4.9033%" height="15" fill="rgb(253,215,40)"/><text x="92.8610%" y="159.50">genera..</text></g><g><title>hir_lowering (9,195,753 samples, 0.56%)</title><rect x="97.5143%" y="149" width="0.5628%" height="15" fill="rgb(211,81,21)"/><text x="97.7643%" y="159.50"></text></g><g><title>finish_ongoing_codegen (23,486,148 samples, 1.44%)</title><rect x="98.0781%" y="133" width="1.4374%" height="15" fill="rgb(208,190,38)"/><text x="98.3281%" y="143.50"></text></g><g><title>link_crate (4,083,602 samples, 0.25%)</title><rect x="99.5155%" y="133" width="0.2499%" height="15" fill="rgb(235,213,38)"/><text x="99.7655%" y="143.50"></text></g><g><title>link_binary (3,986,231 samples, 0.24%)</title><rect x="99.5215%" y="117" width="0.2440%" height="15" fill="rgb(237,122,38)"/><text x="99.7715%" y="127.50"></text></g><g><title>link_rlib (3,184,902 samples, 0.19%)</title><rect x="99.5705%" y="101" width="0.1949%" height="15" fill="rgb(244,218,35)"/><text x="99.8205%" y="111.50"></text></g><g><title>link (27,598,260 samples, 1.69%)</title><rect x="98.0772%" y="149" width="1.6891%" height="15" fill="rgb(240,68,47)"/><text x="98.3272%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (2,458,364 samples, 0.15%)</title><rect x="99.8140%" y="149" width="0.1505%" height="15" fill="rgb(210,16,53)"/><text x="100.0640%" y="159.50"></text></g><g><title>all (1,633,887,628 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,633,887,628 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>